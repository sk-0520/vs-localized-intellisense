<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.DispatchProxy</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.DispatchProxy">
      <summary>Fornece um mecanismo para instanciar objetos de proxy e manipular sua expedição de método.</summary>
    </member>
    <member name="M:System.Reflection.DispatchProxy.#ctor" />
    <member name="M:System.Reflection.DispatchProxy.Create``2">
      <summary>Cria uma instância do objeto que deriva da classe <typeparamref name="TProxy" /> e implementa a interface <typeparamref name="T" />.</summary>
      <typeparam name="T">A interface que o proxy deve implementar.</typeparam>
      <typeparam name="TProxy">A classe base a ser usada para a classe de proxy.</typeparam>
      <returns>Uma instância de objeto que implementa <typeparamref name="T" />.</returns>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> é uma classe ou <typeparamref name="TProxy" /> está lacrado ou não tem um construtor sem parâmetros.</exception>
    </member>
    <member name="M:System.Reflection.DispatchProxy.Invoke(System.Reflection.MethodInfo,System.Object[])">
      <summary>Sempre que qualquer método no tipo de proxy gerado é chamado, esse método é invocado para o controle de expedição.</summary>
      <param name="targetMethod">O método invocado pelo chamador.</param>
      <param name="args">Os argumentos passados pelo chamador para o método.</param>
      <returns>O objeto a ser retornado ao chamador ou então <see langword="null" /> para métodos nulos.</returns>
    </member>
  </members>
</doc>
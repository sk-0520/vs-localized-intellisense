<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Linq.Queryable</name>
  </assembly>
  <members>
    <member name="T:System.Linq.EnumerableExecutor">
      <summary>Representa uma árvore de expressão e fornece funcionalidade para executar a árvore de expressão depois de reescrevê-los.</summary>
    </member>
    <member name="T:System.Linq.EnumerableExecutor`1">
      <summary>Representa uma árvore de expressão e fornece funcionalidade para executar a árvore de expressão depois de reescrevê-los.</summary>
      <typeparam name="T">O tipo de dados do valor que resulta da execução da árvore de expressão.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Linq.EnumerableExecutor`1" />.</summary>
      <param name="expression">Uma árvore de expressão para associar à nova instância.</param>
    </member>
    <member name="T:System.Linq.EnumerableQuery">
      <summary>Representa um <see cref="T:System.Collections.IEnumerable" /> como uma fonte de dados <see cref="T:System.Linq.EnumerableQuery" />.</summary>
    </member>
    <member name="T:System.Linq.EnumerableQuery`1">
      <summary>Representa uma coleção de <see cref="T:System.Collections.Generic.IEnumerable`1" /> como uma fonte de dados <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <typeparam name="T">O tipo de dados na coleção.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Linq.EnumerableQuery`1" /> e a associa a uma coleção <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="enumerable">Uma coleção a associar à nova instância.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Linq.EnumerableQuery`1" /> e associa a instância a uma árvore de expressão.</summary>
      <param name="expression">Uma árvore de expressão para associar à nova instância.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retorna um enumerador que pode iterar por meio da coleção <see cref="T:System.Collections.Generic.IEnumerable`1" /> associada ou, se for nulo, por meio da coleção que resulta da regravação da árvore de expressão associada como uma consulta em uma fonte de dados <see cref="T:System.Collections.Generic.IEnumerable`1" /> e da execução dela.</summary>
      <returns>Um enumerador que pode ser usado para iterar pela fonte de dados associada.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que pode iterar por meio da coleção <see cref="T:System.Collections.Generic.IEnumerable`1" /> associada ou, se for nulo, por meio da coleção que resulta da regravação da árvore de expressão associada como uma consulta em uma fonte de dados <see cref="T:System.Collections.Generic.IEnumerable`1" /> e da execução dela.</summary>
      <returns>Um enumerador que pode ser usado para iterar pela fonte de dados associada.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#ElementType">
      <summary>Obtém o tipo dos dados na coleção que são representados por esta instância.</summary>
      <returns>O tipo dos dados na coleção que essa instância representa.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Expression">
      <summary>Obtém a árvore de expressão que está associada com esta instância ou que a representa.</summary>
      <returns>A árvore de expressão associada a ou que representa essa instância.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Provider">
      <summary>Obtém o provedor de consulta associado esta instância.</summary>
      <returns>O provedor de consulta que está associado a esta instância.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary>Constrói um novo objeto <see cref="T:System.Linq.EnumerableQuery`1" /> e associa-o a uma árvore de expressão especificada que representa uma coleção de dados <see cref="T:System.Linq.IQueryable" />.</summary>
      <param name="expression">Uma árvore de expressão que representa uma coleção de dados <see cref="T:System.Linq.IQueryable" />.</param>
      <returns>Um objeto <see cref="T:System.Linq.EnumerableQuery`1" /> que está associado a <paramref name="expression" />.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>Constrói um novo objeto <see cref="T:System.Linq.EnumerableQuery`1" /> e associa-o a uma árvore de expressão especificada que representa uma coleção de dados <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <param name="expression">Uma árvore de expressão para executar.</param>
      <typeparam name="S">O tipo dos dados na coleção que <paramref name="expression" /> representa.</typeparam>
      <returns>Representa um objeto EnumerableQuery associado a <paramref name="expression" />.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary>Executa uma expressão depois de reescrevê-la para chamar métodos <see cref="T:System.Linq.Enumerable" /> em vez de métodos <see cref="T:System.Linq.Queryable" /> em quaisquer fontes de dados enumeráveis que não podem ser consultadas por métodos <see cref="T:System.Linq.Queryable" />.</summary>
      <param name="expression">Uma árvore de expressão para executar.</param>
      <returns>O valor que resulta da execução de <paramref name="expression" />.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>Executa uma expressão depois de reescrevê-la para chamar métodos <see cref="T:System.Linq.Enumerable" /> em vez de métodos <see cref="T:System.Linq.Queryable" /> em quaisquer fontes de dados enumeráveis que não podem ser consultadas por métodos <see cref="T:System.Linq.Queryable" />.</summary>
      <param name="expression">Uma árvore de expressão para executar.</param>
      <typeparam name="S">O tipo dos dados na coleção que <paramref name="expression" /> representa.</typeparam>
      <returns>O valor que resulta da execução de <paramref name="expression" />.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.ToString">
      <summary>Retorna uma representação textual da coleção enumerável ou, se for nulo, da árvore de expressão que está associada a esta instância.</summary>
      <returns>Uma representação textual da coleção enumerável ou, se for nulo, da árvore de expressão que está associada a esta instância.</returns>
    </member>
    <member name="T:System.Linq.Queryable">
      <summary>Fornece um conjunto de métodos <see langword="static" /> (<see langword="Shared" /> no Visual Basic) para consultar estruturas de dados que implementam <see cref="T:System.Linq.IQueryable`1" />.</summary>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
      <summary>Aplica uma função de acumulador a uma sequência.</summary>
      <param name="source">Uma sequência a ser agregada.</param>
      <param name="func">Uma função do acumulador a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>O valor final do acumulador.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="func" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
      <summary>Aplica uma função de acumulador a uma sequência. O valor de semente especificado é usado como o valor inicial do acumulador.</summary>
      <param name="source">Uma sequência a ser agregada.</param>
      <param name="seed">O valor inicial do acumulador.</param>
      <param name="func">Uma função de acumulador a ser invocada em cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">O tipo do valor do acumulador.</typeparam>
      <returns>O valor final do acumulador.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="func" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
      <summary>Aplica uma função de acumulador a uma sequência. O valor de semente especificado é usado como o valor inicial do acumulador e a função especificada é usada para selecionar o valor do resultado.</summary>
      <param name="source">Uma sequência a ser agregada.</param>
      <param name="seed">O valor inicial do acumulador.</param>
      <param name="func">Uma função de acumulador a ser invocada em cada elemento.</param>
      <param name="selector">Uma função para transformar o valor final do acumulador no valor de resultado.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">O tipo do valor do acumulador.</typeparam>
      <typeparam name="TResult">O tipo do valor resultante.</typeparam>
      <returns>O valor final do acumulador transformado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="func" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Determina se todos os elementos de uma sequência atendem a uma condição.</summary>
      <param name="source">A sequência cujos elementos testar quanto a uma condição.</param>
      <param name="predicate">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>
        <see langword="true" /> se todos os elementos da sequência de origem passarem no teste no predicado especificado ou se a sequência for vazia; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
      <summary>Determina se uma sequência contém elementos.</summary>
      <param name="source">Uma sequência para verificar se está vazia.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>
        <see langword="true" /> se a sequência de origem contiver elementos; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Determina se algum elemento de uma sequência atende a uma condição.</summary>
      <param name="source">A sequência cujos elementos testar quanto a uma condição.</param>
      <param name="predicate">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>
        <see langword="true" /> se algum elemento na sequência de origem for aprovado no teste do predicado especificado; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Append``1(System.Linq.IQueryable{``0},``0)">
      <param name="source" />
      <param name="element" />
      <typeparam name="TSource" />
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
      <summary>Converte um <see cref="T:System.Collections.IEnumerable" /> em um <see cref="T:System.Linq.IQueryable" />.</summary>
      <param name="source">Uma sequência a ser convertida.</param>
      <returns>Um <see cref="T:System.Linq.IQueryable" /> que representa a sequência de entrada.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> não implementa <see cref="T:System.Collections.Generic.IEnumerable`1" /> para alguns <paramref name="T" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Converte um <see cref="T:System.Collections.Generic.IEnumerable`1" /> genérico em um <see cref="T:System.Linq.IQueryable`1" /> genérico.</summary>
      <param name="source">Uma sequência a ser convertida.</param>
      <typeparam name="TElement">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> que representa a sequência de entrada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
      <summary>Computa a média de uma sequência de valores <see cref="T:System.Decimal" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Decimal" /> para realizar o cálculo da média.</param>
      <returns>A média da sequência de valores.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
      <summary>Computa a média de uma sequência de valores <see cref="T:System.Double" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Double" /> para realizar o cálculo da média.</param>
      <returns>A média da sequência de valores.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
      <summary>Computa a média de uma sequência de valores <see cref="T:System.Int32" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Int32" /> para realizar o cálculo da média.</param>
      <returns>A média da sequência de valores.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
      <summary>Computa a média de uma sequência de valores <see cref="T:System.Int64" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Int64" /> para realizar o cálculo da média.</param>
      <returns>A média da sequência de valores.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Computa a média de uma sequência de valores <see cref="T:System.Decimal" /> que permitem valores nulos.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Decimal" /> que permitem valores nulos para cálculo da média.</param>
      <returns>A média da sequência de valores ou <see langword="null" />, se a sequência de origem estiver vazia ou contiver somente valores <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Computa a média de uma sequência de valores <see cref="T:System.Double" /> que permitem valores nulos.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Double" /> que permitem valores nulos para cálculo da média.</param>
      <returns>A média da sequência de valores ou <see langword="null" />, se a sequência de origem estiver vazia ou contiver somente valores <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Computa a média de uma sequência de valores <see cref="T:System.Int32" /> que permitem valores nulos.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Int32" /> que permitem valores nulos para cálculo da média.</param>
      <returns>A média da sequência de valores ou <see langword="null" />, se a sequência de origem estiver vazia ou contiver somente valores <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Computa a média de uma sequência de valores <see cref="T:System.Int64" /> que permitem valores nulos.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Int64" /> que permitem valores nulos para cálculo da média.</param>
      <returns>A média da sequência de valores ou <see langword="null" />, se a sequência de origem estiver vazia ou contiver somente valores <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Computa a média de uma sequência de valores <see cref="T:System.Single" /> que permitem valores nulos.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Single" /> que permitem valores nulos para cálculo da média.</param>
      <returns>A média da sequência de valores ou <see langword="null" />, se a sequência de origem estiver vazia ou contiver somente valores <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
      <summary>Computa a média de uma sequência de valores <see cref="T:System.Single" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Single" /> para realizar o cálculo da média.</param>
      <returns>A média da sequência de valores.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Calcula a média de uma sequência de valores <see cref="T:System.Decimal" /> obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores usados para calcular uma média.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>A média da sequência de valores.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Calcula a média de uma sequência de valores <see cref="T:System.Double" /> obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores para cálculo da média.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>A média da sequência de valores.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Calcula a média de uma sequência de valores <see cref="T:System.Int32" /> obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores para cálculo da média.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>A média da sequência de valores.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Calcula a média de uma sequência de valores <see cref="T:System.Int64" /> obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores para cálculo da média.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>A média da sequência de valores.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Calcula a média de uma sequência de valores <see cref="T:System.Decimal" /> anuláveis obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores para cálculo da média.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>A média da sequência de valores ou <see langword="null" /> se a sequência <paramref name="source" /> estiver vazia ou contiver somente valores <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Calcula a média de uma sequência de valores <see cref="T:System.Double" /> anuláveis obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores para cálculo da média.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>A média da sequência de valores ou <see langword="null" /> se a sequência <paramref name="source" /> estiver vazia ou contiver somente valores <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Calcula a média de uma sequência de valores <see cref="T:System.Int32" /> anuláveis obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores para cálculo da média.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>A média da sequência de valores ou <see langword="null" /> se a sequência <paramref name="source" /> estiver vazia ou contiver somente valores <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Calcula a média de uma sequência de valores <see cref="T:System.Int64" /> anuláveis obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores para cálculo da média.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>A média da sequência de valores ou <see langword="null" /> se a sequência <paramref name="source" /> estiver vazia ou contiver somente valores <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Calcula a média de uma sequência de valores <see cref="T:System.Single" /> anuláveis obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores para cálculo da média.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>A média da sequência de valores ou <see langword="null" /> se a sequência <paramref name="source" /> estiver vazia ou contiver somente valores <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Calcula a média de uma sequência de valores <see cref="T:System.Single" /> obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores para cálculo da média.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>A média da sequência de valores.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> não contém elementos.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
      <summary>Converte os elementos de um <see cref="T:System.Linq.IQueryable" /> para o tipo especificado.</summary>
      <param name="source">O <see cref="T:System.Linq.IQueryable" /> que contém os elementos a serem convertidos.</param>
      <typeparam name="TResult">O tipo para o qual os elementos de <paramref name="source" /> deverão ser convertidos.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> que contém cada elemento da sequência de origem convertido para o tipo especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">Um elemento na sequência não pode ser convertido para o tipo <paramref name="TResult" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatena duas sequências.</summary>
      <param name="source1">A primeira sequência a ser concatenada.</param>
      <param name="source2">A sequência a ser concatenada com a primeira sequência.</param>
      <typeparam name="TSource">O tipo dos elementos das sequências de entrada.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> que contém os elementos concatenados das duas sequências de entrada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> ou <paramref name="source2" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
      <summary>Determina se uma sequência contém um elemento especificado usando o comparador de igualdade padrão.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> no qual <paramref name="item" /> será localizado.</param>
      <param name="item">O objeto a ser localizado na sequência.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>
        <see langword="true" /> se a sequência de entrada contiver um elemento que tem o valor especificado; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determina se uma sequência contém um elemento especificado usando um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> no qual <paramref name="item" /> será localizado.</param>
      <param name="item">O objeto a ser localizado na sequência.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>
        <see langword="true" /> se a sequência de entrada contiver um elemento que tem o valor especificado; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
      <summary>Retorna o número de elementos em uma sequência.</summary>
      <param name="source">O <see cref="T:System.Linq.IQueryable`1" /> que contém os elementos a serem contados.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>O número de elementos na sequência de entrada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">O número de elementos no <paramref name="source" /> é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Retorna o número de elementos na sequência especificada que atendem a uma condição.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> que contém os elementos a serem contados.</param>
      <param name="predicate">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>O número de elementos na sequência que atende à condição na função de predicado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">O número de elementos no <paramref name="source" /> é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
      <summary>Retornará os elementos da sequência especificada ou o valor padrão do parâmetro de tipo em uma coleção de singletons se a sequência estiver vazia.</summary>
      <param name="source">O <see cref="T:System.Linq.IQueryable`1" /> para o qual será retornado um valor padrão se estiver vazio.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> que contém <see langword="default" /> (<paramref name="TSource" />) se <paramref name="source" /> estiver vazio; caso contrário, <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
      <summary>Retorna os elementos da sequência especificada ou o valor especificado em uma coleção de singletons se a sequência está vazia.</summary>
      <param name="source">O <see cref="T:System.Linq.IQueryable`1" /> para o qual será retornado o valor especificado se ele estiver vazio.</param>
      <param name="defaultValue">O valor a ser retornado se a sequência estiver vazia.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> que contém <paramref name="defaultValue" /> se <paramref name="source" /> está vazio; caso contrário, <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
      <summary>Retorna os elementos distintos de uma sequência usando o comparador de igualdade padrão para comparar valores.</summary>
      <param name="source">O <see cref="T:System.Linq.IQueryable`1" /> do qual as duplicatas serão removidas.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> que contém elementos distintos do <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Retorna os elementos distintos de uma sequência usando um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado para comparar valores.</summary>
      <param name="source">O <see cref="T:System.Linq.IQueryable`1" /> do qual as duplicatas serão removidas.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> que contém elementos distintos do <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="comparer" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Retorna o elemento de um índice especificado em uma sequência.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> do qual um elemento será retornado.</param>
      <param name="index">O índice baseado em zero do elemento a ser recuperado.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>O elemento na posição especificada em <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Retorna o elemento em um índice especificado em uma sequência ou um valor padrão se o índice estiver fora do intervalo.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> do qual um elemento será retornado.</param>
      <param name="index">O índice baseado em zero do elemento a ser recuperado.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>
        <c>default</c>(<paramref name="TSource" />) se <paramref name="index" /> estiver fora dos limites de <paramref name="source" />; caso contrário, o elemento na posição especificada em <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produz a diferença de conjunto de duas sequências usando o comparador de igualdade padrão para comparar os valores.</summary>
      <param name="source1">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos que não estão presentes também no <paramref name="source2" /> serão retornados.</param>
      <param name="source2">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos que também ocorrem na primeira sequência não aparecerão na sequência retornada.</param>
      <typeparam name="TSource">O tipo dos elementos das sequências de entrada.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> que contém a diferença de conjunto das duas sequências.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> ou <paramref name="source2" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produz a diferença de conjunto de duas sequências usando o <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado para comparar os valores.</summary>
      <param name="source1">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos que não estão presentes também no <paramref name="source2" /> serão retornados.</param>
      <param name="source2">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos que também ocorrem na primeira sequência não aparecerão na sequência retornada.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource">O tipo dos elementos das sequências de entrada.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> que contém a diferença de conjunto das duas sequências.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> ou <paramref name="source2" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
      <summary>Retorna o primeiro elemento de uma sequência.</summary>
      <param name="source">O <see cref="T:System.Linq.IQueryable`1" /> do qual o primeiro elemento será retornado.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>O primeiro elemento em <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Uma sequência de origem está vazia.</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Retorna o primeiro elemento de uma sequência que satisfaz uma condição especificada.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> do qual um elemento será retornado.</param>
      <param name="predicate">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>O primeiro elemento em <paramref name="source" /> que é aprovado no teste em <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Nenhum elemento satisfaz a condição na <paramref name="predicate" />.  

ou - 
Uma sequência de origem está vazia.</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Retorna o primeiro elemento de uma sequência ou um valor padrão se a sequência não contém elementos.</summary>
      <param name="source">O <see cref="T:System.Linq.IQueryable`1" /> do qual o primeiro elemento será retornado.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>
        <c>default</c>(<paramref name="TSource" />) se <paramref name="source" /> estiver vazio; caso contrário, o primeiro elemento em <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Retorna o primeiro elemento de uma sequência que atende a uma condição especificada ou um valor padrão se esse elemento não é encontrado.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> do qual um elemento será retornado.</param>
      <param name="predicate">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>
        <c>default</c>(<paramref name="TSource" />) se <paramref name="source" /> estiver vazio ou se nenhum elemento for aprovado no teste especificado por <paramref name="predicate" />; caso contrário, o primeiro elemento em <paramref name="source" /> aprovado no teste especificado por <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Agrupa os elementos de uma sequência de acordo com uma função de seletor de chave especificada.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos serão agrupados.</param>
      <param name="keySelector">Uma função para extrair a chave de cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada pela função representada em <paramref name="keySelector" />.</typeparam>
      <returns>Um <c>IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> em C# ou <c>IQueryable(Of IGrouping(Of TKey, TSource))</c> no Visual Basic em que cada objeto <see cref="T:System.Linq.IGrouping`2" /> contém uma sequência de objetos e uma chave.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Agrupa os elementos de uma sequência de acordo com uma função do seletor de chave especificada e compara as chaves usando um comparador especificado.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos serão agrupados.</param>
      <param name="keySelector">Uma função para extrair a chave de cada elemento.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada pela função representada em <paramref name="keySelector" />.</typeparam>
      <returns>Um <c>IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> em C# ou <c>IQueryable(Of IGrouping(Of TKey, TSource))</c> no Visual Basic em que cada <see cref="T:System.Linq.IGrouping`2" /> contém uma sequência de objetos e uma chave.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> ou <paramref name="comparer" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
      <summary>Agrupa os elementos de uma sequência de acordo com a função de seletor de chave especificada e projeta os elementos de cada grupo usando uma função especificada.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos serão agrupados.</param>
      <param name="keySelector">Uma função para extrair a chave de cada elemento.</param>
      <param name="elementSelector">Uma função para mapear cada elemento de origem para um elemento em um <see cref="T:System.Linq.IGrouping`2" />.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada pela função representada em <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">O tipo dos elementos em cada <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <returns>Um <c>IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> em C# ou <c>IQueryable(Of IGrouping(Of TKey, TElement))</c> no Visual Basic em que cada <see cref="T:System.Linq.IGrouping`2" /> contém uma sequência de objetos de tipo <paramref name="TElement" /> e uma chave.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> ou <paramref name="elementSelector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Agrupa os elementos de uma sequência e projeta os elementos para cada grupo usando uma função especificada. Os valores de chave são comparados usando um comparador especificado.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos serão agrupados.</param>
      <param name="keySelector">Uma função para extrair a chave de cada elemento.</param>
      <param name="elementSelector">Uma função para mapear cada elemento de origem para um elemento em um <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada pela função representada em <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">O tipo dos elementos em cada <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <returns>Um <c>IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> em C# ou <c>IQueryable(Of IGrouping(Of TKey, TElement))</c> no Visual Basic em que cada <see cref="T:System.Linq.IGrouping`2" /> contém uma sequência de objetos de tipo <paramref name="TElement" /> e uma chave.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> ou <paramref name="elementSelector" /> ou <paramref name="comparer" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
      <summary>Agrupa os elementos de uma sequência de acordo com uma função do seletor de chave especificada e cria um valor de resultado de cada grupo e sua chave.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos serão agrupados.</param>
      <param name="keySelector">Uma função para extrair a chave de cada elemento.</param>
      <param name="resultSelector">Uma função para criar um valor de resultado de cada grupo.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada pela função representada em <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">O tipo do valor de resultado retornado por <paramref name="resultSelector" />.</typeparam>
      <returns>Um <c>T:System.Linq.IQueryable`1</c> que tem um argumento de tipo de <paramref name="TResult" /> e no qual cada elemento representa uma projeção sobre um grupo e sua chave.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> ou <paramref name="resultSelector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Agrupa os elementos de uma sequência de acordo com uma função do seletor de chave especificada e cria um valor de resultado de cada grupo e sua chave. As chaves são comparadas usando um comparador especificado.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos serão agrupados.</param>
      <param name="keySelector">Uma função para extrair a chave de cada elemento.</param>
      <param name="resultSelector">Uma função para criar um valor de resultado de cada grupo.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada pela função representada em <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">O tipo do valor de resultado retornado por <paramref name="resultSelector" />.</typeparam>
      <returns>Um <c>T:System.Linq.IQueryable`1</c> que tem um argumento de tipo de <paramref name="TResult" /> e no qual cada elemento representa uma projeção sobre um grupo e sua chave.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> ou <paramref name="resultSelector" /> ou <paramref name="comparer" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
      <summary>Agrupa os elementos de uma sequência de acordo com uma função do seletor de chave especificada e cria um valor de resultado de cada grupo e sua chave. Os elementos de cada grupo são projetados usando uma função especificada.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos serão agrupados.</param>
      <param name="keySelector">Uma função para extrair a chave de cada elemento.</param>
      <param name="elementSelector">Uma função para mapear cada elemento de origem para um elemento em um <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">Uma função para criar um valor de resultado de cada grupo.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada pela função representada em <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">O tipo dos elementos em cada <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">O tipo do valor de resultado retornado por <paramref name="resultSelector" />.</typeparam>
      <returns>Um <c>T:System.Linq.IQueryable`1</c> que tem um argumento de tipo de <paramref name="TResult" /> e no qual cada elemento representa uma projeção sobre um grupo e sua chave.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> ou <paramref name="elementSelector" /> ou <paramref name="resultSelector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Agrupa os elementos de uma sequência de acordo com uma função do seletor de chave especificada e cria um valor de resultado de cada grupo e sua chave. As chaves são comparadas usando um comparador especificado e os elementos de cada grupo são projetados usando uma função especificada.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos serão agrupados.</param>
      <param name="keySelector">Uma função para extrair a chave de cada elemento.</param>
      <param name="elementSelector">Uma função para mapear cada elemento de origem para um elemento em um <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">Uma função para criar um valor de resultado de cada grupo.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada pela função representada em <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">O tipo dos elementos em cada <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">O tipo do valor de resultado retornado por <paramref name="resultSelector" />.</typeparam>
      <returns>Um <c>T:System.Linq.IQueryable`1</c> que tem um argumento de tipo de <paramref name="TResult" /> e no qual cada elemento representa uma projeção sobre um grupo e sua chave.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> ou <paramref name="elementSelector" /> ou <paramref name="resultSelector" /> ou <paramref name="comparer" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
      <summary>Correlaciona os elementos de duas sequências com base na igualdade de chaves e agrupa os resultados. O comparador de igualdade padrão é usado para comparar chaves.</summary>
      <param name="outer">A primeira sequência a ser ingressada.</param>
      <param name="inner">A sequência a ser ingressada à primeira sequência.</param>
      <param name="outerKeySelector">Uma função para extrair a chave de junção de cada elemento da primeira sequência.</param>
      <param name="innerKeySelector">Uma função para extrair a chave de junção de cada elemento da segunda sequência.</param>
      <param name="resultSelector">Uma função para criar um elemento de resultado de um elemento da primeira sequência e uma coleção de elementos correspondentes da segunda sequência.</param>
      <typeparam name="TOuter">O tipo dos elementos da primeira sequência.</typeparam>
      <typeparam name="TInner">O tipo dos elementos da segunda sequência.</typeparam>
      <typeparam name="TKey">O tipo das chaves retornadas pelas funções de seletor de chave.</typeparam>
      <typeparam name="TResult">O tipo dos elementos de resultado.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> que contém elementos do tipo <paramref name="TResult" /> obtidos pela execução de uma junção agrupada em duas sequências.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> ou <paramref name="inner" /> ou <paramref name="outerKeySelector" /> ou <paramref name="innerKeySelector" /> ou <paramref name="resultSelector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlaciona os elementos de duas sequências com base na igualdade de chaves e agrupa os resultados. Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado é usado para comparar chaves.</summary>
      <param name="outer">A primeira sequência a ser ingressada.</param>
      <param name="inner">A sequência a ser ingressada à primeira sequência.</param>
      <param name="outerKeySelector">Uma função para extrair a chave de junção de cada elemento da primeira sequência.</param>
      <param name="innerKeySelector">Uma função para extrair a chave de junção de cada elemento da segunda sequência.</param>
      <param name="resultSelector">Uma função para criar um elemento de resultado de um elemento da primeira sequência e uma coleção de elementos correspondentes da segunda sequência.</param>
      <param name="comparer">Um comparador para executar hash e comparar chaves.</param>
      <typeparam name="TOuter">O tipo dos elementos da primeira sequência.</typeparam>
      <typeparam name="TInner">O tipo dos elementos da segunda sequência.</typeparam>
      <typeparam name="TKey">O tipo das chaves retornadas pelas funções de seletor de chave.</typeparam>
      <typeparam name="TResult">O tipo dos elementos de resultado.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> que contém elementos do tipo <paramref name="TResult" /> obtidos pela execução de uma junção agrupada em duas sequências.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> ou <paramref name="inner" /> ou <paramref name="outerKeySelector" /> ou <paramref name="innerKeySelector" /> ou <paramref name="resultSelector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produz a interseção de conjunto de duas sequências usando o comparador de igualdade padrão para comparar os valores.</summary>
      <param name="source1">Uma sequência cujos elementos distintos que também aparecem em <paramref name="source2" /> são retornados.</param>
      <param name="source2">Uma sequência cujos elementos distintos que também aparecem na primeira sequência são retornados.</param>
      <typeparam name="TSource">O tipo dos elementos das sequências de entrada.</typeparam>
      <returns>Uma sequência que contém a interseção de conjunto das duas sequências.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> ou <paramref name="source2" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produz a interseção de conjunto de duas sequências usando o <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado para comparar os valores.</summary>
      <param name="source1">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos distintos que também aparecem em <paramref name="source2" /> são retornados.</param>
      <param name="source2">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos distintos que também aparecem na primeira sequência são retornados.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource">O tipo dos elementos das sequências de entrada.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> que contém a interseção de conjunto de duas sequências.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> ou <paramref name="source2" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
      <summary>Correlaciona os elementos de duas sequências com base em chaves de correspondência. O comparador de igualdade padrão é usado para comparar chaves.</summary>
      <param name="outer">A primeira sequência a ser ingressada.</param>
      <param name="inner">A sequência a ser ingressada à primeira sequência.</param>
      <param name="outerKeySelector">Uma função para extrair a chave de junção de cada elemento da primeira sequência.</param>
      <param name="innerKeySelector">Uma função para extrair a chave de junção de cada elemento da segunda sequência.</param>
      <param name="resultSelector">Uma função para criar um elemento de resultado de dois elementos correspondentes.</param>
      <typeparam name="TOuter">O tipo dos elementos da primeira sequência.</typeparam>
      <typeparam name="TInner">O tipo dos elementos da segunda sequência.</typeparam>
      <typeparam name="TKey">O tipo das chaves retornadas pelas funções de seletor de chave.</typeparam>
      <typeparam name="TResult">O tipo dos elementos de resultado.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> com elementos do tipo <paramref name="TResult" /> obtidos pela execução de uma junção interna em duas sequências.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> ou <paramref name="inner" /> ou <paramref name="outerKeySelector" /> ou <paramref name="innerKeySelector" /> ou <paramref name="resultSelector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlaciona os elementos de duas sequências com base em chaves de correspondência. Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado é usado para comparar chaves.</summary>
      <param name="outer">A primeira sequência a ser ingressada.</param>
      <param name="inner">A sequência a ser ingressada à primeira sequência.</param>
      <param name="outerKeySelector">Uma função para extrair a chave de junção de cada elemento da primeira sequência.</param>
      <param name="innerKeySelector">Uma função para extrair a chave de junção de cada elemento da segunda sequência.</param>
      <param name="resultSelector">Uma função para criar um elemento de resultado de dois elementos correspondentes.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para executar hash e comparar chaves.</param>
      <typeparam name="TOuter">O tipo dos elementos da primeira sequência.</typeparam>
      <typeparam name="TInner">O tipo dos elementos da segunda sequência.</typeparam>
      <typeparam name="TKey">O tipo das chaves retornadas pelas funções de seletor de chave.</typeparam>
      <typeparam name="TResult">O tipo dos elementos de resultado.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> com elementos do tipo <paramref name="TResult" /> obtidos pela execução de uma junção interna em duas sequências.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> ou <paramref name="inner" /> ou <paramref name="outerKeySelector" /> ou <paramref name="innerKeySelector" /> ou <paramref name="resultSelector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
      <summary>Retorna o último elemento em uma sequência.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> do qual o último elemento será retornado.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>O valor na última posição no <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Uma sequência de origem está vazia.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Retorna o último elemento de uma sequência que satisfaz uma condição especificada.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> do qual um elemento será retornado.</param>
      <param name="predicate">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>O último elemento em <paramref name="source" /> aprovado no teste especificado por <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Nenhum elemento satisfaz a condição na <paramref name="predicate" />.  

ou - 
Uma sequência de origem está vazia.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Retorna o último elemento de uma sequência ou um valor padrão se a sequência não contém elementos.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> do qual o último elemento será retornado.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>
        <c>default</c>(<paramref name="TSource" />) se <paramref name="source" /> estiver vazio; caso contrário, o último elemento em <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Retorna o último elemento de uma sequência que satisfaz uma condição ou um valor padrão, caso esse elemento não seja encontrado.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> do qual um elemento será retornado.</param>
      <param name="predicate">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>
        <c>default</c>(<paramref name="TSource" />) se <paramref name="source" /> for vazio ou se nenhum elemento for aprovado no teste na função de predicado; caso contrário, o último elemento de <paramref name="source" /> aprovado no teste na função de predicado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
      <summary>Retorna um <see cref="T:System.Int64" /> que representa o número total de elementos em uma sequência.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> que contém os elementos a serem contados.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>O número de elementos em <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">O número de elementos excede <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Retorna um <see cref="T:System.Int64" /> que representa o número de elementos em uma sequência que atendem a uma condição.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> que contém os elementos a serem contados.</param>
      <param name="predicate">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>O número de elementos em <paramref name="source" /> que atendem à condição na função de predicado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">O número de elementos correspondentes excede <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
      <summary>Retorna o valor máximo em um <see cref="T:System.Linq.IQueryable`1" /> genérico.</summary>
      <param name="source">Uma sequência de valores da qual será determinado o valor máximo.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>O valor máximo na sequência.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Invoca uma função de projeção em cada elemento de um <see cref="T:System.Linq.IQueryable`1" /> genérico e retorna o valor resultante máximo.</summary>
      <param name="source">Uma sequência de valores da qual será determinado o valor máximo.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">O tipo do valor retornado pela função representada por <paramref name="selector" />.</typeparam>
      <returns>O valor máximo na sequência.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
      <summary>Retorna o valor mínimo de um <see cref="T:System.Linq.IQueryable`1" /> genérico.</summary>
      <param name="source">Uma sequência de valores para determinar o mínimo.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>O valor mínimo na sequência.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Invoca uma função de projeção em cada elemento de um <see cref="T:System.Linq.IQueryable`1" /> genérico e retorna o valor resultante mínimo.</summary>
      <param name="source">Uma sequência de valores para determinar o mínimo.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">O tipo do valor retornado pela função representada por <paramref name="selector" />.</typeparam>
      <returns>O valor mínimo na sequência.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
      <summary>Filtra os elementos de um <see cref="T:System.Linq.IQueryable" /> com base em um tipo especificado.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable" /> cujos elementos devem ser filtrados.</param>
      <typeparam name="TResult">O tipo no qual filtrar os elementos da sequência.</typeparam>
      <returns>Uma coleção que contém os elementos de <paramref name="source" /> que tem o tipo <paramref name="TResult" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Classifica os elementos de uma sequência em ordem crescente de acordo com uma chave.</summary>
      <param name="source">Uma sequência de valores a serem ordenados.</param>
      <param name="keySelector">Uma função para extrair uma chave de um elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada pela função que é representada por <paramref name="keySelector" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IOrderedQueryable`1" /> cujos elementos são classificados de acordo com uma chave.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Classifica os elementos de uma sequência em ordem crescente usando um comparador especificado.</summary>
      <param name="source">Uma sequência de valores a serem ordenados.</param>
      <param name="keySelector">Uma função para extrair uma chave de um elemento.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada pela função que é representada por <paramref name="keySelector" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IOrderedQueryable`1" /> cujos elementos são classificados de acordo com uma chave.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> ou <paramref name="comparer" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Classifica os elementos de uma sequência em ordem decrescente de acordo com uma chave.</summary>
      <param name="source">Uma sequência de valores a serem ordenados.</param>
      <param name="keySelector">Uma função para extrair uma chave de um elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada pela função que é representada por <paramref name="keySelector" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IOrderedQueryable`1" /> cujos elementos são classificados em ordem decrescente de acordo com uma chave.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Classifica os elementos de uma sequência em ordem decrescente usando um comparador especificado.</summary>
      <param name="source">Uma sequência de valores a serem ordenados.</param>
      <param name="keySelector">Uma função para extrair uma chave de um elemento.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada pela função que é representada por <paramref name="keySelector" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IOrderedQueryable`1" /> cujos elementos são classificados em ordem decrescente de acordo com uma chave.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> ou <paramref name="comparer" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Prepend``1(System.Linq.IQueryable{``0},``0)">
      <param name="source" />
      <param name="element" />
      <typeparam name="TSource" />
    </member>
    <member name="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
      <summary>Inverte a ordem dos elementos em uma sequência.</summary>
      <param name="source">Uma sequência de valores a ser revertida.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos correspondem aos da sequência de entrada em ordem inversa.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Projeta cada elemento de uma sequência em um novo formulário.</summary>
      <param name="source">Uma sequência de valores a serem projetados.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">O tipo do valor retornado pela função representada por <paramref name="selector" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos são o resultado da invocação de uma função de transformação em cada elemento de <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
      <summary>Projeta cada elemento de uma sequência em um novo formulário, incorporando o índice do elemento.</summary>
      <param name="source">Uma sequência de valores a serem projetados.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">O tipo do valor retornado pela função representada por <paramref name="selector" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos são o resultado da invocação de uma função de transformação em cada elemento de <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>Projeta cada elemento de uma sequência em um <see cref="T:System.Collections.Generic.IEnumerable`1" /> e combina as sequências resultantes em uma sequência.</summary>
      <param name="source">Uma sequência de valores a serem projetados.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">O tipo dos elementos da sequência retornada pela função representada por <paramref name="selector" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos são resultado da invocação de uma função de projeção de um para muitos em cada elemento da sequência de entrada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>Projeta cada elemento de uma sequência em um <see cref="T:System.Collections.Generic.IEnumerable`1" /> e combina as sequências resultantes em uma sequência. O índice de cada elemento de origem é usado no formulário projetado desse elemento.</summary>
      <param name="source">Uma sequência de valores a serem projetados.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento; o segundo parâmetro dessa função representa o índice do elemento de origem.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TResult">O tipo dos elementos da sequência retornada pela função representada por <paramref name="selector" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos são resultado da invocação de uma função de projeção de um para muitos em cada elemento da sequência de entrada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Projeta cada elemento de uma sequência em um <see cref="T:System.Collections.Generic.IEnumerable`1" /> e invoca uma função de seletor de resultado em cada elemento contido nele. Os valores resultantes de cada sequência intermediária são combinados em uma única sequência unidimensional e retornada.</summary>
      <param name="source">Uma sequência de valores a serem projetados.</param>
      <param name="collectionSelector">Uma função de projeção a ser aplicada a cada elemento da sequência de entrada.</param>
      <param name="resultSelector">Uma função de projeção a ser aplicada a cada elemento de cada sequência intermediária.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">O tipo dos elementos intermediários coletados pela função representada por <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">O tipo dos elementos da sequência resultante.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos são o resultado de invocar a função de projeção de um para muitos <paramref name="collectionSelector" /> em cada elemento de <paramref name="source" /> e, em seguida, mapear cada um desses elementos de sequência e seu elemento <paramref name="source" /> correspondente para um elemento de resultado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="collectionSelector" /> ou <paramref name="resultSelector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Projeta cada elemento de uma sequência em um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que incorpora o índice do elemento de origem que o produziu. Uma função seletora de resultados é invocada em cada elemento de cada sequência intermediária e os valores resultantes são combinados em uma única sequência unidimensional e retornados.</summary>
      <param name="source">Uma sequência de valores a serem projetados.</param>
      <param name="collectionSelector">Uma função de projeção a ser aplicada a cada elemento da sequência de entrada; o segundo parâmetro dessa função representa o índice do elemento de origem.</param>
      <param name="resultSelector">Uma função de projeção a ser aplicada a cada elemento de cada sequência intermediária.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">O tipo dos elementos intermediários coletados pela função representada por <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">O tipo dos elementos da sequência resultante.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos são o resultado de invocar a função de projeção de um para muitos <paramref name="collectionSelector" /> em cada elemento de <paramref name="source" /> e, em seguida, mapear cada um desses elementos de sequência e seu elemento <paramref name="source" /> correspondente para um elemento de resultado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="collectionSelector" /> ou <paramref name="resultSelector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Determina se duas sequências são iguais usando o comparador de igualdade padrão para comparar elementos.</summary>
      <param name="source1">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos são comparados com os de <paramref name="source2" />.</param>
      <param name="source2">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos são comparados com os da primeira sequência.</param>
      <typeparam name="TSource">O tipo dos elementos das sequências de entrada.</typeparam>
      <returns>
        <see langword="true" /> se as duas sequências de origem tiverem o mesmo tamanho e seus elementos correspondentes forem comparados como iguais; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> ou <paramref name="source2" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determina se duas sequências são iguais usando um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado para comparar elementos.</summary>
      <param name="source1">Um <see cref="T:System.Linq.IQueryable`1" /> cujos elementos são comparados com os de <paramref name="source2" />.</param>
      <param name="source2">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos são comparados com os da primeira sequência.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> a ser usado para comparar elementos.</param>
      <typeparam name="TSource">O tipo dos elementos das sequências de entrada.</typeparam>
      <returns>
        <see langword="true" /> se as duas sequências de origem tiverem o mesmo tamanho e seus elementos correspondentes forem comparados como iguais; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> ou <paramref name="source2" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
      <summary>Retornará o único elemento de uma sequência e lançará uma exceção se não houver exatamente um elemento na sequência.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> do qual o único elemento será retornado.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>O único elemento de uma sequência de entrada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">O <paramref name="source" /> tem mais de um elemento.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Retorna o único elemento de uma sequência que satisfaz uma condição especificada e gera uma exceção se houver mais de um tal elemento.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> do qual retornar um único elemento.</param>
      <param name="predicate">Uma função para testar um elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>O único elemento da sequência de entrada que atende à condição em <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Nenhum elemento satisfaz a condição na <paramref name="predicate" />.  

ou - 
Mais de um elemento satisfaz a condição na <paramref name="predicate" />.  

ou - 
Uma sequência de origem está vazia.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Retorna o único elemento de uma sequência ou um valor padrão se a sequência é vazia; esse método gera uma exceção se há mais de um elemento na sequência.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> do qual o único elemento será retornado.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>O único elemento de sequência de entrada ou <c>default</c>(<paramref name="TSource" />) se a sequência não contiver elementos.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">O <paramref name="source" /> tem mais de um elemento.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Retorna o único elemento de uma sequência que satisfaz uma condição especificada ou um valor padrão se esse elemento não existir. Esse método lança uma exceção se mais de um elemento satisfizer a condição.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> do qual retornar um único elemento.</param>
      <param name="predicate">Uma função para testar um elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>O único elemento da sequência de entrada que atende à condição em <paramref name="predicate" /> ou <c>default</c>(<paramref name="TSource" />) se nenhum elemento for encontrado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Mais de um elemento satisfaz a condição na <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Ignora um número especificado de elementos em uma sequência e retorna os elementos restantes.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> do qual os elementos serão retornados.</param>
      <param name="count">O número de elementos a serem ignorados antes de retornar os elementos restantes.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> que contém elementos que ocorrem após o índice especificado na sequência de entrada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipLast``1(System.Linq.IQueryable{``0},System.Int32)">
      <param name="source" />
      <param name="count" />
      <typeparam name="TSource" />
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Ignora elementos em uma sequência, contanto que uma condição especificada seja verdadeira e retorne os elementos restantes.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> do qual os elementos serão retornados.</param>
      <param name="predicate">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> que contém elementos de <paramref name="source" /> começando no primeiro elemento na série linear não aprovada no teste especificado por <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Ignora elementos em uma sequência, contanto que uma condição especificada seja verdadeira e retorne os elementos restantes. O índice do elemento é usado na lógica da função de predicado.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> do qual os elementos serão retornados.</param>
      <param name="predicate">Uma função para testar cada elemento de uma condição; o segundo parâmetro dessa função representa o índice do elemento de origem.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> que contém elementos de <paramref name="source" /> começando no primeiro elemento na série linear não aprovada no teste especificado por <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
      <summary>Calcula a soma de uma sequência de valores <see cref="T:System.Decimal" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Decimal" /> para cálculo da soma.</param>
      <returns>A soma dos valores na sequência.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma é maior que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
      <summary>Calcula a soma de uma sequência de valores <see cref="T:System.Double" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Double" /> para cálculo da soma.</param>
      <returns>A soma dos valores na sequência.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
      <summary>Calcula a soma de uma sequência de valores <see cref="T:System.Int32" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Int32" /> para cálculo da soma.</param>
      <returns>A soma dos valores na sequência.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
      <summary>Calcula a soma de uma sequência de valores <see cref="T:System.Int64" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Int64" /> para cálculo da soma.</param>
      <returns>A soma dos valores na sequência.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma é maior que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Computa a soma de uma sequência de valores <see cref="T:System.Decimal" /> que permitem valores nulos.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Decimal" /> que permitem valores nulos para cálculo da soma.</param>
      <returns>A soma dos valores na sequência.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma é maior que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Computa a soma de uma sequência de valores <see cref="T:System.Double" /> que permitem valores nulos.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Double" /> que permitem valores nulos para cálculo da soma.</param>
      <returns>A soma dos valores na sequência.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Computa a soma de uma sequência de valores <see cref="T:System.Int32" /> que permitem valores nulos.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Int32" /> que permitem valores nulos para cálculo da soma.</param>
      <returns>A soma dos valores na sequência.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Computa a soma de uma sequência de valores <see cref="T:System.Int64" /> que permitem valores nulos.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Int64" /> que permitem valores nulos para cálculo da soma.</param>
      <returns>A soma dos valores na sequência.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma é maior que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Computa a soma de uma sequência de valores <see cref="T:System.Single" /> que permitem valores nulos.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Single" /> que permitem valores nulos para cálculo da soma.</param>
      <returns>A soma dos valores na sequência.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
      <summary>Calcula a soma de uma sequência de valores <see cref="T:System.Single" />.</summary>
      <param name="source">Uma sequência de valores <see cref="T:System.Single" /> para cálculo da soma.</param>
      <returns>A soma dos valores na sequência.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Calcula a soma da sequência de valores <see cref="T:System.Decimal" /> que é obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores do tipo <paramref name="TSource" />.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>A soma dos valores projetados.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma é maior que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Calcula a soma da sequência de valores <see cref="T:System.Double" /> que é obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores do tipo <paramref name="TSource" />.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>A soma dos valores projetados.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Calcula a soma da sequência de valores <see cref="T:System.Int32" /> que é obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores do tipo <paramref name="TSource" />.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>A soma dos valores projetados.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Calcula a soma da sequência de valores <see cref="T:System.Int64" /> que é obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores do tipo <paramref name="TSource" />.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>A soma dos valores projetados.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma é maior que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Calcula a soma da sequência de valores <see cref="T:System.Decimal" /> anuláveis obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores do tipo <paramref name="TSource" />.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>A soma dos valores projetados.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma é maior que <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Calcula a soma da sequência de valores <see cref="T:System.Double" /> anuláveis obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores do tipo <paramref name="TSource" />.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>A soma dos valores projetados.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Calcula a soma da sequência de valores <see cref="T:System.Int32" /> anuláveis obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores do tipo <paramref name="TSource" />.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>A soma dos valores projetados.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Calcula a soma da sequência de valores <see cref="T:System.Int64" /> anuláveis obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores do tipo <paramref name="TSource" />.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>A soma dos valores projetados.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException">A soma é maior que <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Calcula a soma da sequência de valores <see cref="T:System.Single" /> anuláveis obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores do tipo <paramref name="TSource" />.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>A soma dos valores projetados.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Calcula a soma da sequência de valores <see cref="T:System.Single" /> que é obtida invocando uma função de projeção em cada elemento da sequência de entrada.</summary>
      <param name="source">Uma sequência de valores do tipo <paramref name="TSource" />.</param>
      <param name="selector">Uma função de projeção a ser aplicada a cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>A soma dos valores projetados.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="selector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Retorna um número especificado de elementos contíguos do início de uma sequência.</summary>
      <param name="source">A sequência da qual os elementos serão retornados.</param>
      <param name="count">O número de elementos a serem retornados.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> que contém o número especificado de elementos do início de <paramref name="source" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeLast``1(System.Linq.IQueryable{``0},System.Int32)">
      <param name="source" />
      <param name="count" />
      <typeparam name="TSource" />
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Retorna os elementos de uma sequência contanto que uma condição especificada seja verdadeira.</summary>
      <param name="source">A sequência da qual os elementos serão retornados.</param>
      <param name="predicate">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> que contém elementos da sequência de entrada que ocorrem antes do elemento no qual o teste especificado por <paramref name="predicate" /> não é mais aprovado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Retorna os elementos de uma sequência contanto que uma condição especificada seja verdadeira. O índice do elemento é usado na lógica da função de predicado.</summary>
      <param name="source">A sequência da qual os elementos serão retornados.</param>
      <param name="predicate">Uma função para testar cada elemento em relação a uma condição; o segundo parâmetro da função representa o índice do elemento na sequência de origem.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> que contém elementos da sequência de entrada que ocorrem antes do elemento no qual o teste especificado por <paramref name="predicate" /> não é mais aprovado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Executa uma ordenação posterior dos elementos em uma sequência em ordem crescente de acordo com uma chave.</summary>
      <param name="source">Um <see cref="T:System.Linq.IOrderedQueryable`1" /> que contém elementos a ser classificados.</param>
      <param name="keySelector">Uma função para extrair uma chave de cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada pela função representada por <paramref name="keySelector" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IOrderedQueryable`1" /> cujos elementos são classificados de acordo com uma chave.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Executa uma ordenação posterior dos elementos em uma sequência em ordem crescente usando um comparador especificado.</summary>
      <param name="source">Um <see cref="T:System.Linq.IOrderedQueryable`1" /> que contém elementos a ser classificados.</param>
      <param name="keySelector">Uma função para extrair uma chave de cada elemento.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada pela função representada por <paramref name="keySelector" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IOrderedQueryable`1" /> cujos elementos são classificados de acordo com uma chave.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> ou <paramref name="comparer" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Executa uma ordenação posterior dos elementos em uma sequência em ordem decrescente, de acordo com uma chave.</summary>
      <param name="source">Um <see cref="T:System.Linq.IOrderedQueryable`1" /> que contém elementos a ser classificados.</param>
      <param name="keySelector">Uma função para extrair uma chave de cada elemento.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave retornada pela função representada por <paramref name="keySelector" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IOrderedQueryable`1" /> cujos elementos são classificados em ordem decrescente de acordo com uma chave.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="keySelector" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Executa uma ordenação posterior dos elementos em uma sequência em ordem decrescente usando um comparador especificado.</summary>
      <param name="source">Um <see cref="T:System.Linq.IOrderedQueryable`1" /> que contém elementos a ser classificados.</param>
      <param name="keySelector">Uma função para extrair uma chave de cada elemento.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IComparer`1" /> para comparar chaves.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <typeparam name="TKey">O tipo da chave que é retornada pela <paramref name="keySelector" /> função.</typeparam>
      <returns>Uma coleção cujos elementos são classificados em ordem decrescente de acordo com uma chave.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="keySelector" /> ou <paramref name="comparer" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produz a união de conjunto de duas sequências usando o comparador de igualdade padrão.</summary>
      <param name="source1">Uma sequência cujos elementos distintos formam o primeiro conjunto da operação de união.</param>
      <param name="source2">Uma sequência cujos elementos distintos formam o segundo conjunto da operação de união.</param>
      <typeparam name="TSource">O tipo dos elementos das sequências de entrada.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> que contém os elementos de ambas as sequências de entrada, excluindo as duplicatas.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> ou <paramref name="source2" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produz a união de conjunto de duas sequências usando o <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado.</summary>
      <param name="source1">Uma sequência cujos elementos distintos formam o primeiro conjunto da operação de união.</param>
      <param name="source2">Uma sequência cujos elementos distintos formam o segundo conjunto da operação de união.</param>
      <param name="comparer">Um <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> para comparar valores.</param>
      <typeparam name="TSource">O tipo dos elementos das sequências de entrada.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> que contém os elementos de ambas as sequências de entrada, excluindo as duplicatas.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> ou <paramref name="source2" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Filtra uma sequência de valores com base em um predicado.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> a ser filtrado.</param>
      <param name="predicate">Uma função para testar cada elemento em relação a uma condição.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> que contém elementos da sequência de entrada que atendem à condição especificada por <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Filtra uma sequência de valores com base em um predicado. O índice de cada elemento é usado na lógica da função de predicado.</summary>
      <param name="source">Um <see cref="T:System.Linq.IQueryable`1" /> a ser filtrado.</param>
      <param name="predicate">Uma função para testar cada elemento em relação a uma condição; o segundo parâmetro da função representa o índice do elemento na sequência de origem.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="source" />.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> que contém elementos da sequência de entrada que atendem à condição especificada por <paramref name="predicate" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Zip``2(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1})">
      <summary>Produz uma sequência de tuplas com elementos das duas sequências especificadas.</summary>
      <param name="source1">A primeira sequência a ser mesclada.</param>
      <param name="source2">A segunda sequência a ser mesclada.</param>
      <typeparam name="TFirst">O tipo de elementos na primeira sequência de entrada.</typeparam>
      <typeparam name="TSecond">O tipo de elementos na segunda sequência de entrada.</typeparam>
      <returns>Uma sequência de tuplas com elementos extraídos da primeira e segunda sequências, nessa ordem.</returns>
    </member>
    <member name="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Mescla duas sequências usando a função de predicado especificada.</summary>
      <param name="source1">A primeira sequência a ser mesclada.</param>
      <param name="source2">A segunda sequência a ser mesclada.</param>
      <param name="resultSelector">Uma função que especifica como mesclar os elementos das duas sequências.</param>
      <typeparam name="TFirst">O tipo de elementos na primeira sequência de entrada.</typeparam>
      <typeparam name="TSecond">O tipo de elementos na segunda sequência de entrada.</typeparam>
      <typeparam name="TResult">O tipo de elementos na sequência de resultado.</typeparam>
      <returns>Um <see cref="T:System.Linq.IQueryable`1" /> que contém elementos mesclados de duas sequências de entrada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> ou <paramref name="source2" /> é <see langword="null" />.</exception>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.TypeConverter</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.AddingNewEventArgs">
      <summary>Fornece dados para o evento de <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AddingNewEventArgs" /> não usando nenhum parâmetro.</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor(System.Object)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AddingNewEventArgs" /> usando o objeto especificado como o novo item.</summary>
      <param name="newObject">Um <see cref="T:System.Object" /> a ser usado como o novo valor do item.</param>
    </member>
    <member name="P:System.ComponentModel.AddingNewEventArgs.NewObject">
      <summary>Obtém ou define o objeto a ser adicionado à lista de associação.</summary>
      <returns>O <see cref="T:System.Object" /> a ser adicionado como um novo item à coleção associada.</returns>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventHandler">
      <summary>Representa o método que manipulará o evento de <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> .</summary>
      <param name="sender">A origem do evento, normalmente um contêiner de dados ou uma coleção associada a dados.</param>
      <param name="e">Um <see cref="T:System.ComponentModel.AddingNewEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.AmbientValueAttribute">
      <summary>Especifica o valor a ser passado para uma propriedade para fazer com que a propriedade obtenha o seu valor de outra origem. Isso é conhecido como ambiente. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado um valor booliano de seu valor.</summary>
      <param name="value">Obtém o valor desse atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Byte)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado um inteiro sem sinal de 8 bits para seu valor.</summary>
      <param name="value">Obtém o valor desse atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Char)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado um caractere Unicode para seu valor.</summary>
      <param name="value">Obtém o valor desse atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Double)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado um número de ponto flutuante de precisão dupla para seu valor.</summary>
      <param name="value">Obtém o valor desse atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int16)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado um inteiro com sinal de 16 bits para seu valor.</summary>
      <param name="value">Obtém o valor desse atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado um inteiro com sinal de 32 bits para seu valor.</summary>
      <param name="value">Obtém o valor desse atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int64)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado um inteiro com sinal de 64 bits para seu valor.</summary>
      <param name="value">Obtém o valor desse atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Object)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, considerando um objeto para seu valor.</summary>
      <param name="value">Obtém o valor desse atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Single)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado um número de ponto flutuante de precisão simples para seu valor.</summary>
      <param name="value">Obtém o valor desse atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, considerando uma cadeia de caracteres para seu valor.</summary>
      <param name="value">Obtém o valor desse atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Type,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AmbientValueAttribute" />, dado o valor e seu tipo.</summary>
      <param name="type">O <see cref="T:System.Type" /> do parâmetro <paramref name="value" />.</param>
      <param name="value">O valor para este atributo.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.Equals(System.Object)">
      <summary>Determina se o <see cref="T:System.ComponentModel.AmbientValueAttribute" /> especificado é igual ao <see cref="T:System.ComponentModel.AmbientValueAttribute" /> atual.</summary>
      <param name="obj">O <see cref="T:System.ComponentModel.AmbientValueAttribute" /> a ser comparado com o <see cref="T:System.ComponentModel.AmbientValueAttribute" /> atual.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.ComponentModel.AmbientValueAttribute" /> especificado for igual ao <see cref="T:System.ComponentModel.AmbientValueAttribute" /> atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código hash do <see cref="T:System.ComponentModel.AmbientValueAttribute" /> atual.</returns>
    </member>
    <member name="P:System.ComponentModel.AmbientValueAttribute.Value">
      <summary>Obtém o objeto que é o valor deste <see cref="T:System.ComponentModel.AmbientValueAttribute" />.</summary>
      <returns>O objeto que é o valor <see cref="T:System.ComponentModel.AmbientValueAttribute" />disso.</returns>
    </member>
    <member name="T:System.ComponentModel.ArrayConverter">
      <summary>Fornece um conversor de tipo para converter objetos <see cref="T:System.Array" /> para e de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ArrayConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte o objeto de valor especificado para o tipo de destino especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">A cultura na qual o <paramref name="value" /> será convertido.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType">O <see cref="T:System.Type" /> para o qual converter o valor.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Obtém uma coleção de propriedades para o tipo de matriz especificado pelo parâmetro de valor.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value">Um <see cref="T:System.Object" /> que especifica o tipo de matriz para o qual obter as propriedades.</param>
      <param name="attributes">Uma matriz do tipo <see cref="T:System.Attribute" /> que será usada como um filtro.</param>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades expostas para uma matriz ou <see langword="null" />, se não houver propriedades.</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtém um valor que indica se esse objeto dá suporte a propriedades.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>
        <see langword="true" />, porque <see cref="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> deve ser chamado para localizar as propriedades deste objeto. Esse método nunca retorna <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeCollection">
      <summary>Representa uma coleção de atributos.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AttributeCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AttributeCollection" />.</summary>
      <param name="attributes">Uma matriz do tipo <see cref="T:System.Attribute" /> que fornece os atributos para essa coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributes" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Attributes">
      <summary>Obtém a coleção de atributos.</summary>
      <returns>A coleção de atributo.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
      <summary>Determina se esta coleção de atributos tem o atributo especificado.</summary>
      <param name="attribute">Um <see cref="T:System.Attribute" /> a ser encontrado na coleção.</param>
      <returns>
        <see langword="true" /> se a coleção contiver o atributo ou for o atributo padrão para o tipo de atributo. Caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
      <summary>Determina se essa coleção de atributos contém todos os atributos especificados na matriz de atributos.</summary>
      <param name="attributes">Uma matriz do tipo <see cref="T:System.Attribute" /> a localizar na coleção.</param>
      <returns>
        <see langword="true" /> se a coleção contiver todos os atributos; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copia a coleção para uma matriz, começando no índice especificado.</summary>
      <param name="array">O <see cref="T:System.Array" /> para o qual copiar a coleção.</param>
      <param name="index">O índice a partir do qual iniciar.</param>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Count">
      <summary>Obtém o número de atributos.</summary>
      <returns>O número de atributos.</returns>
    </member>
    <member name="F:System.ComponentModel.AttributeCollection.Empty">
      <summary>Especifica uma coleção vazia que você pode usar, em vez de criar uma nova. Este campo é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
      <summary>Cria um novo <see cref="T:System.ComponentModel.AttributeCollection" /> de um <see cref="T:System.ComponentModel.AttributeCollection" /> existente.</summary>
      <param name="existing">O <see cref="T:System.ComponentModel.AttributeCollection" /> do qual criar a cópia.</param>
      <param name="newAttributes">Uma matriz do tipo <see cref="T:System.Attribute" /> que fornece os atributos para essa coleção. Pode ser <see langword="null" />.</param>
      <returns>Um novo <see cref="T:System.ComponentModel.AttributeCollection" /> que é uma cópia de <paramref name="existing" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="existing" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
      <summary>Retorna o <see cref="T:System.Attribute" /> padrão de um determinado <see cref="T:System.Type" />.</summary>
      <param name="attributeType">O <see cref="T:System.Type" /> do atributo a ser recuperado.</param>
      <returns>O <see cref="T:System.Attribute" /> padrão de um determinado <paramref name="attributeType" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetEnumerator">
      <summary>Obtém um enumerador para esta coleção.</summary>
      <returns>Um enumerador do tipo <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
      <summary>Obtém o atributo com o número de índice especificado.</summary>
      <param name="index">O índice baseado em zero do <see cref="T:System.ComponentModel.AttributeCollection" />.</param>
      <returns>O <see cref="T:System.Attribute" /> com o número de índice especificado.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
      <summary>Obtém o atributo com o tipo especificado.</summary>
      <param name="attributeType">O <see cref="T:System.Type" /> do <see cref="T:System.Attribute" /> a obter da coleção.</param>
      <returns>O <see cref="T:System.Attribute" /> com o tipo especificado ou, se o atributo não existir, o valor padrão para o tipo de atributo.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
      <summary>Determina se um atributo especificado é o mesmo que um atributo na coleção.</summary>
      <param name="attribute">Uma instância de <see cref="T:System.Attribute" /> para comparar aos atributos nesta coleção.</param>
      <returns>
        <see langword="true" /> se o atributo estiver contido na coleção e tiver o mesmo valor que o atributo na coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
      <summary>Determina se os atributos na matriz especificada são os mesmos que os atributos na coleção.</summary>
      <param name="attributes">Uma matriz de <see cref="T:System.CodeDom.MemberAttributes" /> para comparar aos atributos nesta coleção.</param>
      <returns>
        <see langword="true" /> se todos os atributos na matriz estiverem contidos na coleção e tiverem os mesmos valores como os atributos na coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count">
      <summary>Obtém o número de elementos contidos na coleção.</summary>
      <returns>O número de elementos contidos na coleção.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso à coleção é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" />Se o acesso à coleção for sincronizado (thread-safe); caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso à coleção.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso à coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um <see cref="T:System.Collections.IEnumerator" /> para o <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Um <see cref="T:System.Collections.IEnumerator" /> para o <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeProviderAttribute">
      <summary>Habilita o redirecionamento de atributo. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> com o nome de tipo determinado.</summary>
      <param name="typeName">O nome do tipo a especificar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> com o nome do tipo e o nome da propriedade especificados.</summary>
      <param name="typeName">O nome do tipo a especificar.</param>
      <param name="propertyName">O nome da propriedade para a qual os atributos serão recuperados.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> com o tipo determinado.</summary>
      <param name="type">O tipo a especificar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.PropertyName">
      <summary>Obtém o nome da propriedade para a qual os atributos serão recuperados.</summary>
      <returns>O nome da propriedade para a qual os atributos serão recuperados.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.TypeName">
      <summary>Obtém o nome de tipo qualificado do assembly passado para o construtor.</summary>
      <returns>O nome qualificado do assembly do tipo especificado no construtor.</returns>
    </member>
    <member name="T:System.ComponentModel.BaseNumberConverter">
      <summary>Fornece um conversor de tipo base para tipos numéricos de ponto não flutuante.</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina se esse conversor pode converter um objeto no tipo de origem especificado para o tipo nativo do conversor.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a operação, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retorna um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="t">Um <see cref="T:System.Type" /> que representa o tipo para o qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a operação, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converte o objeto fornecido no tipo nativo do conversor.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" /> que especifica a cultura na qual representar o número.</param>
      <param name="value">O objeto a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.Exception">
        <paramref name="value" /> não é um valor válido para o tipo de destino.</exception>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte o objeto especificado em outro tipo.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" /> que especifica a cultura na qual representar o número.</param>
      <param name="value">O objeto a ser convertido.</param>
      <param name="destinationType">O tipo no qual converter o objeto.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="T:System.ComponentModel.BindableAttribute">
      <summary>Especifica se um membro é normalmente usado para associação. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.BindableAttribute" /> com um valor booliano.</summary>
      <param name="bindable">
        <see langword="true" /> para usar a propriedade para associação; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean,System.ComponentModel.BindingDirection)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <param name="bindable">
        <see langword="true" /> para usar a propriedade para associação; caso contrário, <see langword="false" />.</param>
      <param name="direction">Um dos valores de <see cref="T:System.ComponentModel.BindingDirection" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.BindableAttribute" /> com um dos valores <see cref="T:System.ComponentModel.BindableSupport" />.</summary>
      <param name="flags">Um dos valores de <see cref="T:System.ComponentModel.BindableSupport" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport,System.ComponentModel.BindingDirection)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <param name="flags">Um dos valores de <see cref="T:System.ComponentModel.BindableSupport" />.</param>
      <param name="direction">Um dos valores de <see cref="T:System.ComponentModel.BindingDirection" />.</param>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Bindable">
      <summary>Obtém um valor que indica que uma propriedade normalmente é usada para associação.</summary>
      <returns>
        <see langword="true" /> se a propriedade normalmente for usada para associação; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Default">
      <summary>Especifica o valor padrão para o <see cref="T:System.ComponentModel.BindableAttribute" />, que é <see cref="F:System.ComponentModel.BindableAttribute.No" />. Este campo é somente leitura.</summary>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Direction">
      <summary>Obtém um valor que indica a direção da associação de dados desta propriedade.</summary>
      <returns>A direção da Associação de dados desta propriedade.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.Equals(System.Object)">
      <summary>Determina se dois objetos <see cref="T:System.ComponentModel.BindableAttribute" /> são iguais.</summary>
      <param name="obj">O objeto a ser comparado.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.ComponentModel.BindableAttribute" /> especificado for igual ao <see cref="T:System.ComponentModel.BindableAttribute" /> atual; <see langword="false" /> se não for igual.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.GetHashCode">
      <summary>Serve como uma função hash para a classe <see cref="T:System.ComponentModel.BindableAttribute" />.</summary>
      <returns>Um código hash do <see cref="T:System.ComponentModel.BindableAttribute" /> atual.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.IsDefaultAttribute">
      <summary>Determina se este atributo é o padrão.</summary>
      <returns>
        <see langword="true" /> se o atributo for o valor padrão para essa classe de atributos; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.No">
      <summary>Especifica que uma propriedade não é normalmente usada para associação. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Yes">
      <summary>Especifica que uma propriedade é normalmente usada para associação. Este campo é somente leitura.</summary>
    </member>
    <member name="T:System.ComponentModel.BindableSupport">
      <summary>Especifica valores para indicar se uma propriedade pode ser associada a um elemento de dados ou a outra propriedade.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Default">
      <summary>A propriedade é definida como o padrão.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.No">
      <summary>A propriedade não é associável em tempo de design.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Yes">
      <summary>A propriedade é associável em tempo de design.</summary>
    </member>
    <member name="T:System.ComponentModel.BindingDirection">
      <summary>Especifica se o modelo pode ser associado de uma maneira ou de duas.</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.OneWay">
      <summary>O modelo pode aceitar apenas valores da propriedade. Usado com um <see cref="T:System.Web.UI.ITemplate" /> genérico.</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.TwoWay">
      <summary>O modelo pode aceitar e expor valores da propriedade. Usado com um <see cref="T:System.Web.UI.IBindableTemplate" />.</summary>
    </member>
    <member name="T:System.ComponentModel.BindingList`1">
      <summary>Fornece uma coleção genérica que dá suporte à vinculação de dados.</summary>
      <typeparam name="T">O tipo dos elementos na lista.</typeparam>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.BindingList`1" /> usando valores padrão.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.BindingList`1" /> com a lista especificada.</summary>
      <param name="list">Um <see cref="T:System.Collections.Generic.IList`1" /> de itens a ser contido no <see cref="T:System.ComponentModel.BindingList`1" />.</param>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.AddingNew">
      <summary>Ocorre antes que um item seja adicionado à lista.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNew">
      <summary>Adiciona um novo item à coleção.</summary>
      <returns>O item adicionado à lista.</returns>
      <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.Windows.Forms.BindingSource.AllowNew" /> é definida como <see langword="false" />.  

ou - 
Um construtor público sem parâmetros não pôde ser encontrado no tipo de item atual.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNewCore">
      <summary>Adiciona um novo item ao final da coleção.</summary>
      <returns>O item que foi adicionado à coleção.</returns>
      <exception cref="T:System.InvalidCastException">O novo item não é do mesmo tipo que os objetos contidos no <see cref="T:System.ComponentModel.BindingList`1" />.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowEdit">
      <summary>Obtém ou define um valor que indica se os itens da lista podem ser editados.</summary>
      <returns>
        <see langword="true" /> se os itens de lista puderem ser editados; caso contrário, <see langword="false" />. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowNew">
      <summary>Obtém ou define um valor que indica se é possível adicionar itens à lista usando o método <see cref="M:System.ComponentModel.BindingList`1.AddNew" />.</summary>
      <returns>
        <see langword="true" /> se for possível adicionar itens à lista com o método <see cref="M:System.ComponentModel.BindingList`1.AddNew" />; caso contrário, <see langword="false" />. O padrão depende do tipo subjacente contido na lista.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowRemove">
      <summary>Obtém ou define um valor que indica se você pode remover itens da coleção.</summary>
      <returns>
        <see langword="true" />Se você puder remover itens da lista com o <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> método, caso contrário,. <see langword="false" /> O padrão é <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>Classifica os itens se substituído em uma classe derivada; caso contrário, lança um <see cref="T:System.NotSupportedException" />.</summary>
      <param name="prop">Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> que especifica a propriedade para a classificação.</param>
      <param name="direction">Um dos valores de <see cref="T:System.ComponentModel.ListSortDirection" />.</param>
      <exception cref="T:System.NotSupportedException">O método não é substituído em uma classe derivada.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.CancelNew(System.Int32)">
      <summary>Descarta um novo item pendente.</summary>
      <param name="itemIndex">O índice do novo item a ser adicionado</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ClearItems">
      <summary>Remove todos os elementos da coleção.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.EndNew(System.Int32)">
      <summary>Confirma um novo item pendente para a coleção.</summary>
      <param name="itemIndex">O índice do novo item a ser adicionado.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>Procura o índice do item que tem o descritor de propriedade especificado com o valor indicado se a pesquisa for implementada em uma classe derivada; caso contrário, um <see cref="T:System.NotSupportedException" />.</summary>
      <param name="prop">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> a ser pesquisado.</param>
      <param name="key">O valor de <paramref name="prop" /> para correspondência.</param>
      <returns>O índice de base zero do item que corresponde ao descritor de propriedade e contém o valor especificado.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)" /> não é substituído em uma classe derivada.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.InsertItem(System.Int32,`0)">
      <summary>Insere o item especificado na lista no índice especificado.</summary>
      <param name="index">O índice baseado em zero no qual o item deve ser inserido.</param>
      <param name="item">O item a ser inserido na lista.</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.IsSortedCore">
      <summary>Obtém um valor que indica se a lista está classificada.</summary>
      <returns>
        <see langword="true" /> se a lista estiver classificada; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.ListChanged">
      <summary>Ocorre quando a lista ou um item na lista é alterado.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary>Aciona o evento <see cref="E:System.ComponentModel.BindingList`1.AddingNew" />.</summary>
      <param name="e">Um <see cref="T:System.ComponentModel.AddingNewEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>Aciona o evento <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />.</summary>
      <param name="e">Um <see cref="T:System.ComponentModel.ListChangedEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.RaiseListChangedEvents">
      <summary>Obtém ou define um valor que indica se a adição ou remoção de itens na lista gera eventos <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />.</summary>
      <returns>
        <see langword="true" /> se a adição ou remoção de itens gera eventos <see cref="E:System.ComponentModel.BindingList`1.ListChanged" />; caso contrário, <see langword="false" />. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)">
      <summary>Remove o item no índice especificado.</summary>
      <param name="index">O índice com base em zero do item a ser removido.</param>
      <exception cref="T:System.NotSupportedException">Você está removendo um item recém-adicionado e <see cref="P:System.ComponentModel.IBindingList.AllowRemove" /> está definido como <see langword="false" />.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveSortCore">
      <summary>Removerá qualquer classificação aplicada com <see cref="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> se a classificação for implementada em uma classe derivada; caso contrário, gerará <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">O método não é substituído em uma classe derivada.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetBindings">
      <summary>Aciona um evento <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> do tipo <see cref="F:System.ComponentModel.ListChangedType.Reset" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetItem(System.Int32)">
      <summary>Gera um evento <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> do tipo <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> para o item na posição especificada.</summary>
      <param name="position">Um índice de base zero do item a ser reiniciado.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.SetItem(System.Int32,`0)">
      <summary>Substitui o item no índice especificado pelo item especificado.</summary>
      <param name="index">O índice baseado em zero do item a ser substituído.</param>
      <param name="item">O novo valor para o item no índice especificado. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que zero.  

ou - 
<paramref name="index" /> é maior que <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortDirectionCore">
      <summary>Obtém a direção em que a lista é classificada.</summary>
      <returns>Um dos valores de <see cref="T:System.ComponentModel.ListSortDirection" />. O padrão é <see cref="F:System.ComponentModel.ListSortDirection.Ascending" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortPropertyCore">
      <summary>Obterá o descritor de propriedade usado para classificar a lista se a classificação for implementada em uma classe derivada; caso contrário, retornará <see langword="null" />.</summary>
      <returns>O <see cref="T:System.ComponentModel.PropertyDescriptor" /> usado para classificar a lista.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsChangeNotificationCore">
      <summary>Obtém um valor que indica se os eventos <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> estão habilitados.</summary>
      <returns>
        <see langword="true" />Se <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> houver suporte para eventos; caso <see langword="false" />contrário,. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSearchingCore">
      <summary>Obtém um valor que indica se a lista dá suporte a pesquisa.</summary>
      <returns>
        <see langword="true" />se a lista der suporte à pesquisa; caso contrário <see langword="false" />,. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSortingCore">
      <summary>Obtém um valor que indica se a lista dá suporte à classificação.</summary>
      <returns>
        <see langword="true" /> se a lista der suporte à classificação; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>Para obter uma descrição desse membro, consulte <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />.</summary>
      <param name="prop">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> a ser adicionado como um critério de pesquisa.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddNew">
      <summary>Adiciona um novo item à lista. Para obter mais informações, consulte <see cref="M:System.ComponentModel.IBindingList.AddNew" />.</summary>
      <returns>O item adicionado à lista.</returns>
      <exception cref="T:System.NotSupportedException">Não há suporte para o método.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowEdit">
      <summary>Obtém um valor que indica se os itens na lista podem ser editados.</summary>
      <returns>
        <see langword="true" /> se os itens de lista puderem ser editados; caso contrário, <see langword="false" />. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowNew">
      <summary>Obtém ou define um valor que indica se novos itens podem ser adicionados à lista usando o método <see cref="M:System.ComponentModel.BindingList`1.AddNew" />.</summary>
      <returns>
        <see langword="true" /> se for possível adicionar itens à lista com o método <see cref="M:System.ComponentModel.BindingList`1.AddNew" />; caso contrário, <see langword="false" />. O padrão depende do tipo subjacente contido na lista.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowRemove">
      <summary>Obtém um valor que indica se itens podem ser removidos da lista.</summary>
      <returns>
        <see langword="true" />Se você puder remover itens da lista com o <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> método; caso contrário,. <see langword="false" /> O padrão é <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>Classifica a lista com base em um <see cref="T:System.ComponentModel.PropertyDescriptor" /> e um <see cref="T:System.ComponentModel.ListSortDirection" />. Para obter uma descrição completa desse membro, consulte <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />.</summary>
      <param name="prop">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> pelo qual se classificar.</param>
      <param name="direction">Um dos valores de <see cref="T:System.ComponentModel.ListSortDirection" />.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>Para obter uma descrição desse membro, consulte <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />.</summary>
      <param name="prop">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> no qual pesquisar.</param>
      <param name="key">O valor do parâmetro <paramref name="prop" /> a pesquisar.</param>
      <returns>O índice da linha que tem o <see cref="T:System.ComponentModel.PropertyDescriptor" /> determinado.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#IsSorted">
      <summary>Para obter uma descrição desse membro, consulte <see cref="P:System.ComponentModel.IBindingList.IsSorted" />.</summary>
      <returns>
        <see langword="true" />Se <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" /> foi chamado e <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> não foi chamado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>Para obter uma descrição desse membro, consulte <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />.</summary>
      <param name="prop">Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> a ser removido dos índices usados para pesquisar.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveSort">
      <summary>Para obter uma descrição deste membro, consulte <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /></summary>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortDirection">
      <summary>Para obter uma descrição desse membro, consulte <see cref="P:System.ComponentModel.IBindingList.SortDirection" />.</summary>
      <returns>Um dos valores de <see cref="T:System.ComponentModel.ListSortDirection" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortProperty">
      <summary>Para obter uma descrição desse membro, consulte <see cref="P:System.ComponentModel.IBindingList.SortProperty" />.</summary>
      <returns>O <see cref="T:System.ComponentModel.PropertyDescriptor" /> que está sendo usado para classificação.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>Para obter uma descrição desse membro, consulte <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />.</summary>
      <returns>
        <see langword="true" /> se um evento <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> for acionado quando a lista ou um item for alterado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>Para obter uma descrição desse membro, consulte <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />.</summary>
      <returns>
        <see langword="true" />se a lista der suporte à pesquisa <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> usando o método; <see langword="false" />caso contrário,.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>Para obter uma descrição desse membro, consulte <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />.</summary>
      <returns>
        <see langword="true" /> se a lista der suporte à classificação; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
      <summary>Obtém um valor que indica se as alterações no valor da propriedade do item geram eventos <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> do tipo <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" />. Este membro não pode ser substituído em uma classe derivada.</summary>
      <returns>
        <see langword="true" />Se o tipo de lista <see cref="T:System.ComponentModel.INotifyPropertyChanged" />implementar, caso <see langword="false" />contrário,. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.BooleanConverter">
      <summary>Fornece um conversor de tipo para converter objetos <see cref="T:System.Boolean" /> para e de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.BooleanConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtém um valor que indica se este conversor pode converter um objeto no tipo de origem especificado para um objeto booliano usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse objeto puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converte o objeto de valor especificado para um objeto booliano.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">Uma <see cref="T:System.Globalization.CultureInfo" /> que especifica a cultura na qual converter.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> não é um valor válido para o tipo de destino.</exception>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtém uma coleção de valores padrão para o tipo de dados booliano.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>Um <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que contém um conjunto padrão de valores válidos.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtém um valor que indica se a lista de valores padrão retornados do método <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> é uma lista exclusiva.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>
        <see langword="true" /> porque a <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retornada de <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> é uma lista completa de valores possíveis. Esse método nunca retorna <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtém um valor que indica se esse objeto é compatível com um conjunto padrão de valores que podem ser escolhidos de uma lista.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>
        <see langword="true" /> porque <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> pode ser chamado para localizar um conjunto comum de valores com os quais o objeto é compatível. Esse método nunca retorna <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ByteConverter">
      <summary>Fornece um conversor de tipo para converter objetos de tipo inteiro sem sinal de 8 bits para e a partir de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.ByteConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ByteConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventHandler">
      <summary>Representa o método que manipula um evento cancelável.</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">Um <see cref="T:System.ComponentModel.CancelEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.CharConverter">
      <summary>Fornece um conversor de tipo para converter objetos de caractere Unicode para e de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.CharConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtém um valor que indica se este conversor pode converter um objeto no tipo de origem especificado para um objeto de caractere Unicode usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converte o objeto fornecido em um objeto de caractere Unicode.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">A cultura na qual o <paramref name="value" /> será convertido.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> não é um valor válido para o tipo de destino.</exception>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte o objeto de valor especificado em um objeto de caractere Unicode, usando os argumentos.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">A cultura na qual o <paramref name="value" /> será convertido.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType">O <see cref="T:System.Type" /> para o qual converter o valor.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeAction">
      <summary>Especifica como uma coleção é alterada.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Add">
      <summary>Especifica que um elemento foi adicionado à coleção.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Refresh">
      <summary>Especifica que a coleção inteira foi alterada. Isso é causado pelo uso de métodos que manipulam toda a coleção, assim como <see cref="M:System.Collections.CollectionBase.Clear" />.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Remove">
      <summary>Especifica que um elemento foi removido da coleção.</summary>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventArgs">
      <summary>Fornece dados para o evento de <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionChangeEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,System.Object)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />.</summary>
      <param name="action">Um dos valores de <see cref="T:System.ComponentModel.CollectionChangeAction" /> que especifica como a coleção foi alterada.</param>
      <param name="element">Um <see cref="T:System.Object" /> que especifica a instância da coleção em que a alteração ocorreu.</param>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Action">
      <summary>Obtém uma ação que especifica como a coleção foi alterada.</summary>
      <returns>Um dos valores de <see cref="T:System.ComponentModel.CollectionChangeAction" />.</returns>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Element">
      <summary>Obtém a instância da coleção com a alteração.</summary>
      <returns>Um <see cref="T:System.Object" /> que representa a instância da coleção com a alteração, ou <see langword="null" /> se você atualizar a coleção.</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventHandler">
      <summary>Representa o método que manipula o evento <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> acionado ao adicionar ou remover elementos da coleção.</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">Um <see cref="T:System.ComponentModel.CollectionChangeEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.CollectionConverter">
      <summary>Fornece um conversor de tipo para converter objetos de coleção para e a partir de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.CollectionConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte o objeto de valor especificado para o tipo de destino especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">A cultura em que o <paramref name="value" /> será convertido.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido. Este parâmetro deve ser usado com <see cref="T:System.Collections.ICollection" />.</param>
      <param name="destinationType">O <see cref="T:System.Type" /> no qual converter o valor.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Obtém uma coleção de propriedades para o tipo de matriz especificado pelo parâmetro de valor usando o contexto e os atributos especificados.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value">Um <see cref="T:System.Object" /> que especifica o tipo de matriz para o qual obter as propriedades.</param>
      <param name="attributes">Uma matriz do tipo <see cref="T:System.Attribute" /> que será usada como um filtro.</param>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades que são expostas para esse tipo de dados ou <see langword="null" />, se não há nenhuma propriedade. Esse método sempre retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtém um valor que indica se esse objeto dá suporte a propriedades.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>
        <see langword="false" /> porque <see cref="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> não deve ser chamado para localizar as propriedades desse objeto. Esse método nunca retorna <see langword="true" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComplexBindingPropertiesAttribute">
      <summary>Especifica a fonte de dados e as propriedades de membro de dados para um componente que dá suporte à vinculação de dados complexos. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> não usando nenhum parâmetro.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> usando a fonte de dados especificada.</summary>
      <param name="dataSource">O nome da propriedade a ser usada como a fonte de dados.</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> usando a fonte de dados e o membro de dados especificados.</summary>
      <param name="dataSource">O nome da propriedade a ser usada como a fonte de dados.</param>
      <param name="dataMember">O nome da propriedade a ser usada como a origem dos dados.</param>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataMember">
      <summary>Obtém o nome da propriedade do membro de dados para o componente ao qual o <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> está associado.</summary>
      <returns>O nome da propriedade de membro de dados para o componente ao <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> qual está associado</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataSource">
      <summary>Obtém o nome da propriedade de fonte de dados para o componente ao qual o <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> está associado.</summary>
      <returns>O nome da propriedade de fonte de dados do componente ao qual <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> está associado.</returns>
    </member>
    <member name="F:System.ComponentModel.ComplexBindingPropertiesAttribute.Default">
      <summary>Representa o valor padrão para a classe <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.Equals(System.Object)">
      <summary>Determina se o <see cref="T:System.Object" /> especificado é igual à instância de <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> atual.</summary>
      <param name="obj">O <see cref="T:System.Object" /> a comparar com a instância de <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> atual</param>
      <returns>
        <see langword="true" /> se o objeto é igual à instância atual, caso contrário, <see langword="false" />, indicando que não são iguais.</returns>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentConverter">
      <summary>Fornece um conversor de tipo para converter componentes em várias outras representações e de várias outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ComponentConverter" />.</summary>
      <param name="type">Um <see cref="T:System.Type" /> que representa o tipo a ser associado a este conversor de componente.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Obtém uma coleção de propriedades para o tipo de componente especificado pelo parâmetro de valor.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value">Um <see cref="T:System.Object" /> que especifica o tipo de componente para o qual obter as propriedades.</param>
      <param name="attributes">Uma matriz do tipo <see cref="T:System.Attribute" /> que será usada como um filtro.</param>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades expostas para o componente ou <see langword="null" />, se não houver nenhuma propriedade.</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtém um valor que indica se este objeto dá suporte às propriedades usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>
        <see langword="true" />, porque <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> deve ser chamado para localizar as propriedades deste objeto. Esse método nunca retorna <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentEditor">
      <summary>Fornece a classe base para um editor de componente personalizado.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ComponentEditor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Edita o componente e retorna um valor que indica se o componente foi modificado com base em um contexto determinado.</summary>
      <param name="context">Um objeto de contexto opcional que pode ser usado para obter mais informações sobre a edição.</param>
      <param name="component">O componente a ser editado.</param>
      <returns>
        <see langword="true" /> se o componente tiver sido modificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.Object)">
      <summary>Edita o componente e retorna um valor que indica se o componente foi modificado.</summary>
      <param name="component">O componente a ser editado.</param>
      <returns>
        <see langword="true" /> se o componente tiver sido modificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentResourceManager">
      <summary>Fornece uma funcionalidade simples para enumerar recursos para um componente ou objeto. A classe <see cref="T:System.ComponentModel.ComponentResourceManager" /> é um <see cref="T:System.Resources.ResourceManager" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ComponentResourceManager" /> com valores padrão.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor(System.Type)">
      <summary>Cria um <see cref="T:System.ComponentModel.ComponentResourceManager" /> que procura recursos em assemblies satélites com base nas informações do <see cref="T:System.Type" /> especificado.</summary>
      <param name="t">Um <see cref="T:System.Type" /> do qual o <see cref="T:System.ComponentModel.ComponentResourceManager" /> deriva todas as informações para localizar arquivos de recurso.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String)">
      <summary>Aplica-se o valor de um recurso à propriedade correspondente do objeto.</summary>
      <param name="value">Um <see cref="T:System.Object" /> que contém o valor da propriedade a ser aplicado.</param>
      <param name="objectName">Um <see cref="T:System.String" /> que contém o nome do objeto a ser pesquisado nos recursos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ou <paramref name="objectName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary>Aplica-se o valor de um recurso à propriedade correspondente do objeto.</summary>
      <param name="value">Um <see cref="T:System.Object" /> que contém o valor da propriedade a ser aplicado.</param>
      <param name="objectName">Um <see cref="T:System.String" /> que contém o nome do objeto a ser pesquisado nos recursos.</param>
      <param name="culture">A cultura para a qual aplicar recursos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ou <paramref name="objectName" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Container">
      <summary>Encapsula zero ou mais componentes.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Container" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent)">
      <summary>Adiciona o <see cref="T:System.ComponentModel.Component" /> especificado ao <see cref="T:System.ComponentModel.Container" />. O componente não foi nomeado.</summary>
      <param name="component">O componente a ser adicionado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)">
      <summary>Adiciona o <see cref="T:System.ComponentModel.Component" /> especificado ao <see cref="T:System.ComponentModel.Container" /> e atribui a ele um nome.</summary>
      <param name="component">O componente a ser adicionado.</param>
      <param name="name">O nome exclusivo que não diferencia maiúsculas de minúsculas a ser atribuído ao componente.  

ou - 
<see langword="null" />, que deixa o componente sem nome.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> não é exclusivo.</exception>
    </member>
    <member name="P:System.ComponentModel.Container.Components">
      <summary>Obtém todos os componentes do <see cref="T:System.ComponentModel.Container" />.</summary>
      <returns>Uma coleção que contém os componentes do <see cref="T:System.ComponentModel.Container" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>Cria um site <see cref="T:System.ComponentModel.ISite" /> para o <see cref="T:System.ComponentModel.IComponent" /> determinado e atribui o nome determinado ao site.</summary>
      <param name="component">O <see cref="T:System.ComponentModel.IComponent" /> para o qual criar um site.</param>
      <param name="name">O nome a ser atribuído ao <paramref name="component" /> ou <see langword="null" /> para ignorar a atribuição de nomes.</param>
      <returns>O site recém-criado.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose">
      <summary>Libera todos os recursos usados pelo <see cref="T:System.ComponentModel.Container" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose(System.Boolean)">
      <summary>Libera os recursos não gerenciados usados pelo <see cref="T:System.ComponentModel.Container" /> e opcionalmente libera os recursos gerenciados.</summary>
      <param name="disposing">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="M:System.ComponentModel.Container.Finalize">
      <summary>Libera recursos não gerenciados e executa outras operações de limpeza antes que <see cref="T:System.ComponentModel.Container" /> seja recuperado pela coleta de lixo.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.GetService(System.Type)">
      <summary>Obtém o objeto de serviço do tipo especificado, se estiver disponível.</summary>
      <param name="service">O <see cref="T:System.Type" /> do serviço a ser recuperado.</param>
      <returns>Um <see cref="T:System.Object" /> que implementará o serviço solicitado ou <see langword="null" />, se o serviço não puder ser resolvido.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)">
      <summary>Remove um componente do <see cref="T:System.ComponentModel.Container" />.</summary>
      <param name="component">O componente a ser removido.</param>
    </member>
    <member name="M:System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)">
      <summary>Remove um componente do <see cref="T:System.ComponentModel.Container" /> sem configurar <see cref="P:System.ComponentModel.IComponent.Site" /> como <see langword="null" />.</summary>
      <param name="component">O componente a ser removido.</param>
    </member>
    <member name="M:System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)">
      <summary>Determina se o nome do componente é exclusivo para este contêiner.</summary>
      <param name="component">O componente nomeado.</param>
      <param name="name">O nome do componente a ser validado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> não é exclusivo.</exception>
    </member>
    <member name="T:System.ComponentModel.ContainerFilterService">
      <summary>Fornece uma classe base para o serviço de filtro de contêiner.</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ContainerFilterService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.FilterComponents(System.ComponentModel.ComponentCollection)">
      <summary>Filtra a coleção de componentes.</summary>
      <param name="components">A coleção de componentes a ser filtrado.</param>
      <returns>Um <see cref="T:System.ComponentModel.ComponentCollection" /> que representa uma coleção modificada.</returns>
    </member>
    <member name="T:System.ComponentModel.CultureInfoConverter">
      <summary>Fornece um conversor de tipo para converter objetos <see cref="T:System.Globalization.CultureInfo" /> para e de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.CultureInfoConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtém um valor que indica se esse conversor pode converter um objeto do tipo de origem especificado em um <see cref="T:System.Globalization.CultureInfo" /> usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtém um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType">Um <see cref="T:System.Type" /> que representa o tipo no qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converte o objeto de valor especificado em um <see cref="T:System.Globalization.CultureInfo" />.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">Uma <see cref="T:System.Globalization.CultureInfo" /> que especifica a cultura na qual converter.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> especifica uma cultura que não é válida.</exception>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte o objeto de valor especificado para o tipo de destino especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">Uma <see cref="T:System.Globalization.CultureInfo" /> que especifica a cultura na qual converter.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType">O <see cref="T:System.Type" /> para o qual converter o valor.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetCultureName(System.Globalization.CultureInfo)">
      <summary>Recupera o nome da cultura especificada.</summary>
      <param name="culture">Uma <see cref="T:System.Globalization.CultureInfo" /> que especifica a cultura para a qual obter o nome.</param>
      <returns>O nome da cultura especificada.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtém uma coleção de valores padrão para um objeto <see cref="T:System.Globalization.CultureInfo" /> usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>Um <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que contém um conjunto padrão de valores válidos ou <see langword="null" /> se o tipo de dados não der suporte a um conjunto padrão de valores.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtém um valor que indica se a lista de valores padrão retornada do <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> é uma lista completa.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>
        <see langword="false" /> porque a <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retornada de <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> não é uma lista completa de valores possíveis (ou seja, outros valores são possíveis). Esse método nunca retorna <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtém um valor que indica se esse objeto dá suporte a um conjunto padrão de valores que podem ser escolhidos em uma lista usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>
        <see langword="true" /> porque <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> deve ser chamado para localizar um conjunto comum de valores aos quais o objeto dá suporte. Esse método nunca retorna <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.CustomTypeDescriptor">
      <summary>Fornece uma implementação padrão simples da interface <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.CustomTypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> usando um descritor de tipo pai personalizado.</summary>
      <param name="parent">O descritor de tipo personalizado pai.</param>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetAttributes">
      <summary>Retorna uma coleção de atributos personalizados para o tipo representado por esse descritor de tipo.</summary>
      <returns>Uma <see cref="T:System.ComponentModel.AttributeCollection" /> que contém os atributos do tipo. O padrão é <see cref="F:System.ComponentModel.AttributeCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetClassName">
      <summary>Retorna o nome totalmente qualificado da classe representada por esse descritor de tipo.</summary>
      <returns>Uma <see cref="T:System.String" /> que contém o nome de classe totalmente qualificado do tipo descrito por esse descritor de tipo. O padrão é <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetComponentName">
      <summary>Retorna o nome da classe representada por esse descritor de tipo.</summary>
      <returns>Uma <see cref="T:System.String" /> que contém o nome da instância do componente descrita por esse descritor de tipo. O padrão é <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetConverter">
      <summary>Retorna um conversor de tipo para o tipo representado por esse descritor de tipo.</summary>
      <returns>Um <see cref="T:System.ComponentModel.TypeConverter" /> para o tipo representado por esse descritor de tipo. O padrão é um <see cref="T:System.ComponentModel.TypeConverter" /> recém-criado.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent">
      <summary>Retorna o descritor de evento para o evento padrão do objeto representado por esse descritor de tipo.</summary>
      <returns>O <see cref="T:System.ComponentModel.EventDescriptor" /> para o evento padrão no objeto representado por esse descritor de tipo. O padrão é <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultProperty">
      <summary>Retorna o descritor de propriedade para a propriedade padrão do objeto representado por esse descritor de tipo.</summary>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> para a propriedade padrão no objeto representado por esse descritor de tipo. O padrão é <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEditor(System.Type)">
      <summary>Retorna um editor do tipo especificado que deve ser associado à classe representada por esse descritor de tipo.</summary>
      <param name="editorBaseType">O tipo base do editor a ser recuperado.</param>
      <returns>Um editor do tipo especificado que deve ser associado à classe representada por esse descritor de tipo. O padrão é <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents">
      <summary>Retorna uma coleção de descritores de evento para o objeto representado por esse descritor de tipo.</summary>
      <returns>Uma <see cref="T:System.ComponentModel.EventDescriptorCollection" /> que contém os descritores de evento para o objeto representado por esse descritor de tipo. O padrão é <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>Retorna uma coleção filtrada de descritores de evento para o objeto representado por esse descritor de tipo.</summary>
      <param name="attributes">Uma matriz de atributos a ser usada como um filtro. Ele pode ser <see langword="null" />.</param>
      <returns>Uma <see cref="T:System.ComponentModel.EventDescriptorCollection" /> que contém as descrições de evento para o objeto representado por esse descritor de tipo. O padrão é <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties">
      <summary>Retorna uma coleção de descritores de propriedade para o objeto representado por esse descritor de tipo.</summary>
      <returns>Uma <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contém as descrições de propriedade para o objeto representado por esse descritor de tipo. O padrão é <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>Retorna uma coleção filtrada de descritores de propriedade para o objeto representado por esse descritor de tipo.</summary>
      <param name="attributes">Uma matriz de atributos a ser usada como um filtro. Ele pode ser <see langword="null" />.</param>
      <returns>Uma <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contém as descrições de propriedade para o objeto representado por esse descritor de tipo. O padrão é <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Retorna um objeto que contém a propriedade descrita pelo descritor de propriedade especificado.</summary>
      <param name="pd">O descritor de propriedade para o qual recuperar o objeto proprietário.</param>
      <returns>Um <see cref="T:System.Object" /> que possui a propriedade fornecida especificada pelo descritor de tipo. O padrão é <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectAttribute">
      <summary>Identifica um tipo como um objeto adequado para ser associado a um objeto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DataObjectAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor(System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DataObjectAttribute" /> e indica se um objeto é adequado para associação a um objeto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />.</summary>
      <param name="isDataObject">
        <see langword="true" /> se o objeto é adequado para associação a um objeto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" />; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.DataObject">
      <summary>Indica que a classe é adequada para associação a um objeto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> em tempo de design. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.Default">
      <summary>Representa o valor padrão da classe <see cref="T:System.ComponentModel.DataObjectAttribute" />, que indica se a classe é adequada para associação a um objeto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> em tempo de design. Este campo é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.Equals(System.Object)">
      <summary>Determina se esta instância do <see cref="T:System.ComponentModel.DataObjectAttribute" /> se ajusta ao padrão de outro objeto.</summary>
      <param name="obj">Um objeto a ser comparado com essa instância do <see cref="T:System.ComponentModel.DataObjectAttribute" />.</param>
      <returns>
        <see langword="true" /> se esta instância for igual à instância especificada pelo parâmetro <paramref name="obj" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectAttribute.IsDataObject">
      <summary>Obtém um valor que indica se um objeto deve ser considerado adequado para associação a um objeto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> em tempo de design.</summary>
      <returns>
        <see langword="true" />Se o objeto deve ser considerado adequado para a associação a <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> um objeto; caso <see langword="false" />contrário,.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.IsDefaultAttribute">
      <summary>Obtém um valor que indica se o valor atual do atributo é o valor padrão do atributo.</summary>
      <returns>
        <see langword="true" /> se o valor atual do atributo é o padrão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.NonDataObject">
      <summary>Indica que a classe não é adequada para associação a um objeto <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> em tempo de design. Este campo é somente leitura.</summary>
    </member>
    <member name="T:System.ComponentModel.DataObjectFieldAttribute">
      <summary>Fornece metadados para uma propriedade representando um campo de dados. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> e indica se o campo é a chave primária para a linha de dados.</summary>
      <param name="primaryKey">
        <see langword="true" /> para indicar que o campo está na chave primária da linha de dados; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> e indica se o campo é a chave primária para a linha de dados e se o campo é um campo de identidade do banco de dados.</summary>
      <param name="primaryKey">
        <see langword="true" /> para indicar que o campo está na chave primária da linha de dados; caso contrário, <see langword="false" />.</param>
      <param name="isIdentity">
        <see langword="true" /> para indicar que o campo é um campo de identidade que identifica de forma exclusiva a linha de dados; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> e indica se o campo é a chave primária para a linha de dados, se o campo é um campo de identidade do banco de dados e se o campo pode ser nulo.</summary>
      <param name="primaryKey">
        <see langword="true" /> para indicar que o campo está na chave primária da linha de dados; caso contrário, <see langword="false" />.</param>
      <param name="isIdentity">
        <see langword="true" /> para indicar que o campo é um campo de identidade que identifica de forma exclusiva a linha de dados; caso contrário, <see langword="false" />.</param>
      <param name="isNullable">
        <see langword="true" /> para indicar que o campo pode ser nulo no armazenamento de dados; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> e indica se o campo é a chave primária para a linha de dados, se é um campo de identidade do banco de dados e se pode ser nulo e define o tamanho do campo.</summary>
      <param name="primaryKey">
        <see langword="true" /> para indicar que o campo está na chave primária da linha de dados; caso contrário, <see langword="false" />.</param>
      <param name="isIdentity">
        <see langword="true" /> para indicar que o campo é um campo de identidade que identifica de forma exclusiva a linha de dados; caso contrário, <see langword="false" />.</param>
      <param name="isNullable">
        <see langword="true" /> para indicar que o campo pode ser nulo no armazenamento de dados; caso contrário, <see langword="false" />.</param>
      <param name="length">O tamanho do campo em bytes.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.Equals(System.Object)">
      <summary>Retorna um valor que indica se essa instância é igual a um objeto especificado.</summary>
      <param name="obj">Um objeto a ser comparado com essa instância do <see cref="T:System.ComponentModel.DataObjectFieldAttribute" />.</param>
      <returns>
        <see langword="true" /> se esta instância for igual à instância especificada pelo parâmetro <paramref name="obj" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsIdentity">
      <summary>Obtém um valor que indica se uma propriedade representa um campo de identidade nos dados subjacentes.</summary>
      <returns>
        <see langword="true" />se a propriedade representa um campo de identidade nos dados subjacentes; caso contrário <see langword="false" />,. O valor padrão é <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsNullable">
      <summary>Obtém um valor que indica se uma propriedade representa um campo que pode ser nulo no armazenamento de dados subjacente.</summary>
      <returns>
        <see langword="true" />se a propriedade representa um campo que pode ser nulo no armazenamento de dados subjacente; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.Length">
      <summary>Obtém o tamanho da propriedade em bytes.</summary>
      <returns>O comprimento da propriedade em bytes, ou-1, se não estiver definido.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.PrimaryKey">
      <summary>Obtém um valor que indica se uma propriedade está na chave primária nos dados subjacentes.</summary>
      <returns>
        <see langword="true" />se a propriedade estiver na chave primária do repositório de dados; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodAttribute">
      <summary>Identifica um método de operação de dados exposto por um tipo, qual o tipo de operação que o método executa e se o método é o método de dados padrão. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> e identifica o tipo de operação de dados executado pelo método.</summary>
      <param name="methodType">Um dos valores <see cref="T:System.ComponentModel.DataObjectMethodType" /> que descreve a operação de dados executada pelo método.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType,System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />, identifica o tipo de operação de dados executado pelo método e identifica se o método é o método padrão de dados exposto pelo objeto de dados.</summary>
      <param name="methodType">Um dos valores <see cref="T:System.ComponentModel.DataObjectMethodType" /> que descreve a operação de dados executada pelo método.</param>
      <param name="isDefault">
        <see langword="true" /> para indicar que o método ao qual o atributo é aplicado é o método padrão do objeto de dados para o <paramref name="methodType" /> especificado; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Equals(System.Object)">
      <summary>Retorna um valor que indica se essa instância é igual a um objeto especificado.</summary>
      <param name="obj">Um objeto a ser comparado com essa instância do <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />.</param>
      <returns>
        <see langword="true" /> se esta instância for igual à instância especificada pelo parâmetro <paramref name="obj" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.IsDefault">
      <summary>Obtém um valor que indica se o método ao qual o <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> é aplicado é o método de dados padrão exposto pelo objeto de dados para um tipo de método específico.</summary>
      <returns>
        <see langword="true" />Se o método for o método padrão exposto pelo objeto para um tipo de método; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Match(System.Object)">
      <summary>Obtém um valor que indica se essa instância compartilha um padrão comum com um atributo especificado.</summary>
      <param name="obj">Um objeto a ser comparado com essa instância do <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />.</param>
      <returns>
        <see langword="true" /> se esta instância for igual à instância especificada pelo parâmetro <paramref name="obj" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.MethodType">
      <summary>Obtém um valor <see cref="T:System.ComponentModel.DataObjectMethodType" /> que indica o tipo de operação de dados executado pelo método.</summary>
      <returns>Um dos <see cref="T:System.ComponentModel.DataObjectMethodType" /> valores que identifica o tipo de operação de dados executada pelo método ao qual o <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> é aplicado.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodType">
      <summary>Identifica o tipo de operação de dados executado por um método, conforme especificado pelo <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> aplicados ao método.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Delete">
      <summary>Indica que um método é usado para uma operação de dados que exclui dados.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Fill">
      <summary>Indica que um método é usado para uma operação de dados que preenche um objeto <see cref="T:System.Data.DataSet" />.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Insert">
      <summary>Indica que um método é usado para uma operação de dados que insere dados.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Select">
      <summary>Indica que um método é usado para uma operação de dados que recupera dados.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Update">
      <summary>Indica que um método é usado para uma operação de dados que atualiza dados.</summary>
    </member>
    <member name="T:System.ComponentModel.DateTimeConverter">
      <summary>Fornece um conversor de tipo para converter objetos <see cref="T:System.DateTime" /> para e de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DateTimeConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtém um valor que indica se esse conversor pode converter um objeto do tipo de origem especificado em um <see cref="T:System.DateTime" /> usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse objeto puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtém um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType">Um <see cref="T:System.Type" /> que representa o tipo no qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converte o objeto de valor especificado para um <see cref="T:System.DateTime" />.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" /> opcional. Se não for fornecido, a cultura atual será assumida.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> não é um valor válido para o tipo de destino.</exception>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte o objeto de valor especificado para um <see cref="T:System.DateTime" /> usando os argumentos.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" /> opcional. Se não for fornecido, a cultura atual será assumida.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType">O <see cref="T:System.Type" /> para o qual converter o valor.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="T:System.ComponentModel.DateTimeOffsetConverter">
      <summary>Fornece um conversor de tipo para converter estruturas <see cref="T:System.DateTimeOffset" /> de e para diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DateTimeOffsetConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retorna um valor que indica se um objeto do tipo de origem especificado pode ser convertido em um <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="context">O contexto de formato de data.</param>
      <param name="sourceType">O tipo de origem a ser verificado.</param>
      <returns>
        <see langword="true" /> se for possível converter o tipo especificado em um <see cref="T:System.DateTimeOffset" />, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retorna um valor que indica se um <see cref="T:System.DateTimeOffset" /> pode ser convertido em um objeto do tipo especificado.</summary>
      <param name="context">O contexto de formato de data.</param>
      <param name="destinationType">O tipo de destino a ser verificado.</param>
      <returns>
        <see langword="true" /> se for possível converter um <see cref="T:System.DateTimeOffset" /> no tipo especificado, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converte o objeto especificado em um <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="context">O contexto de formato de data.</param>
      <param name="culture">A cultura da data.</param>
      <param name="value">O objeto a ser convertido.</param>
      <returns>Um <see cref="T:System.DateTimeOffset" /> que representa o objeto especificado.</returns>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte um <see cref="T:System.DateTimeOffset" /> em um objeto do tipo especificado.</summary>
      <param name="context">O contexto de formato de data.</param>
      <param name="culture">A cultura da data.</param>
      <param name="value">O <see cref="T:System.DateTimeOffset" /> a ser convertido.</param>
      <param name="destinationType">O tipo para o qual converter.</param>
      <returns>Um objeto do tipo especificado que representa o <see cref="T:System.DateTimeOffset" />.</returns>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="T:System.ComponentModel.DecimalConverter">
      <summary>Fornece um conversor de tipo para converter objetos <see cref="T:System.Decimal" /> para e de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DecimalConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtém um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType">Um <see cref="T:System.Type" /> que representa o tipo no qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte o objeto de valor especificado para um <see cref="T:System.Decimal" /> usando os argumentos.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" /> opcional. Se não for fornecido, a cultura atual será assumida.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType">O <see cref="T:System.Type" /> para o qual converter o valor.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException">O <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="T:System.ComponentModel.DefaultBindingPropertyAttribute">
      <summary>Especifica a propriedade de associação padrão de um componente. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> não usando nenhum parâmetro.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> usando o nome da propriedade especificado.</summary>
      <param name="name">O nome da propriedade de associação padrão.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultBindingPropertyAttribute.Default">
      <summary>Representa o valor padrão para a classe <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.Equals(System.Object)">
      <summary>Determina se o <see cref="T:System.Object" /> especificado é igual à instância de <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> atual.</summary>
      <param name="obj">O <see cref="T:System.Object" /> a comparar com a instância de <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> atual</param>
      <returns>
        <see langword="true" /> se o objeto é igual à instância atual, caso contrário, <see langword="false" />, indicando que não são iguais.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultBindingPropertyAttribute.Name">
      <summary>Obtém o nome da propriedade de associação padrão para o componente ao qual o <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> está associado.</summary>
      <returns>O nome da propriedade de associação padrão para o componente ao qual o <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> está associado.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultEventAttribute">
      <summary>Especifica o evento padrão de um componente.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DefaultEventAttribute" />.</summary>
      <param name="name">O nome do evento padrão para o componente ao qual esse atributo é associado.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultEventAttribute.Default">
      <summary>Especifica o valor padrão para o <see cref="T:System.ComponentModel.DefaultEventAttribute" />, que é <see langword="null" />. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.Equals(System.Object)">
      <summary>Retorna se o valor do objeto especificado é igual ao <see cref="T:System.ComponentModel.DefaultEventAttribute" /> atual.</summary>
      <param name="obj">O objeto cuja igualdade de valor deve ser testada.</param>
      <returns>
        <see langword="true" /> se o valor do objeto especificado for igual do atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultEventAttribute.Name">
      <summary>Obtém o nome do evento padrão para o componente ao qual esse atributo é associado.</summary>
      <returns>O nome do evento padrão para o componente ao qual esse atributo é associado. O valor padrão é <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultPropertyAttribute">
      <summary>Especifica a propriedade padrão de um componente.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />.</summary>
      <param name="name">O nome da propriedade padrão para o componente ao qual esse atributo é associado.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultPropertyAttribute.Default">
      <summary>Especifica o valor padrão para o <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />, que é <see langword="null" />. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.Equals(System.Object)">
      <summary>Retorna se o valor do objeto especificado é igual ao <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> atual.</summary>
      <param name="obj">O objeto cuja igualdade de valor deve ser testada.</param>
      <returns>
        <see langword="true" /> se o valor do objeto especificado for igual do atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultPropertyAttribute.Name">
      <summary>Obtém o nome da propriedade padrão para o componente ao qual esse atributo é associado.</summary>
      <returns>O nome da propriedade padrão para o componente ao qual esse atributo é associado. O valor padrão é <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventArgs">
      <summary>Fornece dados para o evento de <see cref="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ActiveDesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.Design.IDesignerHost)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" />.</summary>
      <param name="oldDesigner">O documento que está perdendo a ativação.</param>
      <param name="newDesigner">O documento que está ganhando a ativação.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.NewDesigner">
      <summary>Obtém o documento que está ganhando a ativação.</summary>
      <returns>Um <see cref="T:System.ComponentModel.Design.IDesignerHost" /> que representa o documento que obtém a ativação.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.OldDesigner">
      <summary>Obtém o documento que está perdendo a ativação.</summary>
      <returns>Um <see cref="T:System.ComponentModel.Design.IDesignerHost" /> que representa o documento que está perdendo a ativação.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventHandler">
      <summary>Representa o método que manipulará o evento de <see cref="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged" /> .</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">Um <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.CheckoutException">
      <summary>A exceção gerada quando uma tentativa de fazer check-out de um arquivo que é verificado em um programa de gerenciamento do código-fonte é cancelada ou falha.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> sem nenhuma mensagem nem código de erro associados.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> usando o contexto e os dados de serialização especificados.</summary>
      <param name="info">O <see cref="T:System.Runtime.Serialization.SerializationInfo" /> a ser usado para desserialização.</param>
      <param name="context">O destino a ser usado para desserialização.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> com a mensagem especificada.</summary>
      <param name="message">Uma mensagem que descreve a exceção.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> com a descrição detalhada e a exceção especificadas.</summary>
      <param name="message">Uma descrição detalhada do erro.</param>
      <param name="innerException">Uma referência à exceção interna que é a causa dessa exceção.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> com a mensagem e o código de erro especificados.</summary>
      <param name="message">Uma mensagem que descreve a exceção.</param>
      <param name="errorCode">O código de erro para passar.</param>
    </member>
    <member name="F:System.ComponentModel.Design.CheckoutException.Canceled">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.CheckoutException" /> que especifica que o check-out foi cancelado. Este campo é somente leitura.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.CommandID">
      <summary>Representa um identificador de comando exclusivo que consiste em uma ID de comando numérica e em um identificador de grupo de menus do GUID.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.#ctor(System.Guid,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.CommandID" /> usando o GUID do grupo de menu e o número da ID de comando especificados.</summary>
      <param name="menuGroup">O GUID do grupo ao qual este comando de menu pertence.</param>
      <param name="commandID">O identificador numérico deste comando de menu.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.Equals(System.Object)">
      <summary>Determina se duas instâncias <see cref="T:System.ComponentModel.Design.CommandID" /> são iguais.</summary>
      <param name="obj">O objeto a ser comparado.</param>
      <returns>
        <see langword="true" /> se o objeto especificado for equivalente a esse; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.GetHashCode">
      <summary>Serve como uma função de hash para um tipo específico.</summary>
      <returns>Um código hash do <see cref="T:System.Object" /> atual.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.Guid">
      <summary>Obtém o GUID do grupo de menu ao qual o comando de menu identificado por este <see cref="T:System.ComponentModel.Design.CommandID" /> pertence.</summary>
      <returns>O GUID do grupo de comandos para este comando.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.ID">
      <summary>Obtém a ID de comando numérico.</summary>
      <returns>O número de ID do comando.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.ToString">
      <summary>Retorna um <see cref="T:System.String" /> que representa o objeto atual.</summary>
      <returns>Uma cadeia de caracteres que contém as informações de ID de comando, tanto o GUID quanto o identificador de inteiro.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventArgs">
      <summary>Fornece dados para o evento de <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> . Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangedEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />.</summary>
      <param name="component">O componente que foi alterado.</param>
      <param name="member">Um <see cref="T:System.ComponentModel.MemberDescriptor" /> que representa o membro que foi alterado.</param>
      <param name="oldValue">O valor antigo do membro alterado.</param>
      <param name="newValue">O novo valor do membro alterado.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Component">
      <summary>Obtém o componente que foi modificado.</summary>
      <returns>Um <see cref="T:System.Object" /> que representa o componente que foi modificado.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Member">
      <summary>Obtém o membro que foi alterado.</summary>
      <returns>Um <see cref="T:System.ComponentModel.MemberDescriptor" /> que indica o membro que foi alterado.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.NewValue">
      <summary>Obtém o novo valor do membro alterado.</summary>
      <returns>O novo valor do membro alterado. Essa propriedade pode ser <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.OldValue">
      <summary>Obtém o valor antigo do membro alterado.</summary>
      <returns>O valor antigo do membro alterado. Essa propriedade pode ser <see langword="null" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventHandler">
      <summary>Representa o método que irá manipular um evento de <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> .</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">Um <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventArgs">
      <summary>Fornece dados para o evento de <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> . Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangingEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" />.</summary>
      <param name="component">O componente que está prestes a ser alterado.</param>
      <param name="member">Um <see cref="T:System.ComponentModel.MemberDescriptor" /> que indica o membro do componente que está prestes a ser alterado.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Component">
      <summary>Obtém o componente que está prestes a ser alterado ou o componente que é o contêiner pai do membro que está prestes a ser alterado.</summary>
      <returns>O componente que está prestes a ter um membro foi alterado.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Member">
      <summary>Obtém o membro que está prestes a ser alterado.</summary>
      <returns>Um <see cref="T:System.ComponentModel.MemberDescriptor" /> que indica o membro que está prestes a ser alterado, se conhecido ou <see langword="null" /> de outra forma.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventHandler">
      <summary>Representa o método que irá manipular um evento de <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> .</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">Um evento <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventArgs">
      <summary>Fornece dados para os eventos <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> e <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentEventArgs.#ctor(System.ComponentModel.IComponent)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />.</summary>
      <param name="component">O componente que é a origem do evento.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentEventArgs.Component">
      <summary>Obtém o componente associado ao evento.</summary>
      <returns>O componente associado ao evento.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventHandler">
      <summary>Representa o método que manipulará os eventos <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> e <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> gerados para eventos de nível de componente.</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">Um <see cref="T:System.ComponentModel.Design.ComponentEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventArgs">
      <summary>Fornece dados para o evento de <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentRenameEventArgs.#ctor(System.Object,System.String,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />.</summary>
      <param name="component">O componente a ser renomeado.</param>
      <param name="oldName">O nome antigo do componente.</param>
      <param name="newName">O novo nome do componente.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.Component">
      <summary>Obtém o componente que está sendo renomeado.</summary>
      <returns>O componente que está sendo renomeado.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.NewName">
      <summary>Obtém o nome do componente após o evento de renomeação.</summary>
      <returns>O nome do componente após o evento de renomeação.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.OldName">
      <summary>Obtém o nome do componente antes o evento de renomeação.</summary>
      <returns>O nome anterior do componente.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventHandler">
      <summary>Representa o método que irá manipular um evento de <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> .</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">Um <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerCollection">
      <summary>Representa uma coleção de designers.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.Collections.IList)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerCollection" /> que contém o conjunto de designers especificado.</summary>
      <param name="designers">Uma lista que contém a coleção de designers a serem adicionados.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.ComponentModel.Design.IDesignerHost[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerCollection" /> que contém os designers especificados.</summary>
      <param name="designers">Uma matriz de objetos <see cref="T:System.ComponentModel.Design.IDesignerHost" /> a ser armazenada.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Count">
      <summary>Obtém o número de designers na coleção.</summary>
      <returns>O número de designers na coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.GetEnumerator">
      <summary>Obtém um novo enumerador para esta coleção.</summary>
      <returns>Um <see cref="T:System.Collections.IEnumerator" /> que enumera a coleção.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Item(System.Int32)">
      <summary>Obtém o designer no índice especificado.</summary>
      <param name="index">O índice do designer a ser retornado.</param>
      <returns>O designer no índice especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos da coleção para um <see cref="T:System.Array" />, começando em um índice <see cref="T:System.Array" /> específico.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados da coleção. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="index">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#Count">
      <summary>Obtém o número de elementos contidos na coleção.</summary>
      <returns>O número de elementos contidos na coleção.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso à <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso à coleção.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso à coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Obtém um novo enumerador para esta coleção.</summary>
      <returns>Um <see cref="T:System.Collections.IEnumerator" /> que enumera a coleção.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventArgs">
      <summary>Fornece dados para os eventos de <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> e de <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerEventArgs" />.</summary>
      <param name="host">O <see cref="T:System.ComponentModel.Design.IDesignerHost" /> do documento.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerEventArgs.Designer">
      <summary>Obtém o host do documento.</summary>
      <returns>O <see cref="T:System.ComponentModel.Design.IDesignerHost" /> do documento.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventHandler">
      <summary>Representa o método que manipulará os eventos <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> e <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> que são gerados quando um documento é criado ou descartado.</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">Um <see cref="T:System.ComponentModel.Design.DesignerEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService">
      <summary>Fornece uma classe base para obter e configurar valores de opção para um designer.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerOptionService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.CreateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.String,System.Object)">
      <summary>Cria uma nova <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> com o nome fornecido e adiciona-a ao pai especificado.</summary>
      <param name="parent">A coleção de opções de designer pai. Todas as coleções tem um pai, exceto a coleção de objetos raiz.</param>
      <param name="name">O nome desta coleção.</param>
      <param name="value">O objeto que fornece propriedades para esta coleção. Pode ser <see langword="null" /> se a coleção não deve fornecer nenhuma propriedade.</param>
      <returns>Uma nova <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> com o nome fornecido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parent" /> ou <paramref name="name" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> é uma cadeia de caracteres vazia.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection">
      <summary>Contém uma coleção de opções de designer. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copia toda a coleção para uma <see cref="T:System.Array" /> unidimensional compatível, começando no índice especificado da matriz de destino.</summary>
      <param name="array">A <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados da coleção. O <paramref name="array" /> deve ter indexação com base em zero.</param>
      <param name="index">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Count">
      <summary>Obtém o número de coleções de opção filho contidas por este <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <returns>O número de coleções de opções filho <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> que isso contém.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.GetEnumerator">
      <summary>Retorna um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar por essa coleção.</summary>
      <returns>Um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar por essa coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.IndexOf(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>Retorna o índice da primeira ocorrência de um valor fornecido em um intervalo desta coleção.</summary>
      <param name="value">O objeto a ser localizado na coleção.</param>
      <returns>O índice da primeira ocorrência do valor em toda a coleção, se encontrado; caso contrário, o limite inferior da coleção menos 1.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.Int32)">
      <summary>Obtém a coleção filho no índice especificado.</summary>
      <param name="index">O índice baseado em zero da coleção filho a ser obtida.</param>
      <returns>A coleção filho no índice especificado.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.String)">
      <summary>Obtém a coleção filho no nome especificado.</summary>
      <param name="name">O nome da coleção filho.</param>
      <returns>A coleção filho com o nome especificado pelo <paramref name="name" /> parâmetro ou <see langword="null" /> se o nome não for encontrado.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Name">
      <summary>Obtém o nome deste <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <returns>O nome deste <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Parent">
      <summary>Obtém o objeto de coleção pai.</summary>
      <returns>O objeto da coleção pai ou <see langword="null" /> , se não houver nenhum pai.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Properties">
      <summary>Obtém a coleção de propriedades oferecidas por este <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />, juntamente com todos os seus filhos.</summary>
      <returns>A coleção de propriedades oferecida por <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />isso, junto com todos os seus filhos.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.ShowDialog">
      <summary>Exibe uma IU (interface do usuário) de caixa de diálogo com a qual o usuário pode configurar as opções neste <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <returns>
        <see langword="true" /> se a caixa de diálogo pode ser exibida; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso à coleção é sincronizado e, portanto, thread-safe.</summary>
      <returns>
        <see langword="true" />Se o acesso à coleção for sincronizado; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso à coleção.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso à coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Add(System.Object)">
      <summary>Adiciona um item ao <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">O <see cref="T:System.Object" /> para adicionar ao <see cref="T:System.Collections.IList" />.</param>
      <returns>A posição na qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Clear">
      <summary>Remove todos os itens da coleção.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determina se a coleção contém um valor específico.</summary>
      <param name="value">O <see cref="T:System.Object" /> a ser localizado na coleção</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Object" /> for encontrado na coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determina o índice de um item específico na coleção.</summary>
      <param name="value">O <see cref="T:System.Object" /> a ser localizado na coleção.</param>
      <returns>O índice de <paramref name="value" /> se encontrado na lista; caso contrário, -1.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Insere um item na coleção no índice especificado.</summary>
      <param name="index">O índice de base zero no qual o <paramref name="value" /> deve ser inserido.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser inserido na coleção.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsFixedSize">
      <summary>Obtém um valor que indica se a coleção tem um tamanho fixo.</summary>
      <returns>
        <see langword="true" />se a coleção tiver um tamanho fixo; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsReadOnly">
      <summary>Obtém um valor que indica se a coleção é somente leitura.</summary>
      <returns>
        <see langword="true" /> se a coleção for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Obtém ou define o elemento no índice especificado.</summary>
      <param name="index">O índice com base em zero do elemento a ser obtido ou definido.</param>
      <returns>O elemento no índice especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Remove a primeira ocorrência de um objeto específico da coleção.</summary>
      <param name="value">O <see cref="T:System.Object" /> a ser removido da coleção.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Remove o item da coleção no índice especificado.</summary>
      <param name="index">O índice com base em zero do item a ser removido.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.Options">
      <summary>Obtém a coleção de opções para este serviço.</summary>
      <returns>Um <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> populado com opções de designer disponíveis.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>Popula uma <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />.</summary>
      <param name="options">A coleção a ser populada.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.ShowDialog(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.Object)">
      <summary>Mostra a caixa de diálogo de opções para o objeto fornecido.</summary>
      <param name="options">A coleção de opções que contém o objeto a ser invocado.</param>
      <param name="optionObject">O objeto de opções propriamente dito.</param>
      <returns>
        <see langword="true" /> se a caixa de diálogo for exibida; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#GetOptionValue(System.String,System.String)">
      <summary>Obtém o valor de uma opção definida neste pacote.</summary>
      <param name="pageName">A página à qual a opção está associada.</param>
      <param name="valueName">O nome do valor de opção.</param>
      <returns>O valor da opção nomeada <paramref name="valueName" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pageName" /> ou <paramref name="valueName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#SetOptionValue(System.String,System.String,System.Object)">
      <summary>Define o valor de uma opção definida neste pacote.</summary>
      <param name="pageName">A página à qual a opção está associada</param>
      <param name="valueName">O nome do valor de opção.</param>
      <param name="value">O valor da opção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pageName" /> ou <paramref name="valueName" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransaction">
      <summary>Fornece uma maneira de agrupar uma série de ações de tempo de design para melhorar o desempenho e habilitar a maioria dos tipos de alterações a serem desfeitas.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> sem nenhuma descrição.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> usando a descrição de transação especificada.</summary>
      <param name="description">Uma descrição para esta transação.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Cancel">
      <summary>Cancela a transação e tenta reverter as alterações feitas pelos eventos da transação.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Canceled">
      <summary>Obtém um valor que indica se a transação foi cancelada.</summary>
      <returns>
        <see langword="true" />se a transação foi cancelada; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Commit">
      <summary>Confirma a transação.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Committed">
      <summary>Obtém um valor que indica se a transação foi confirmada.</summary>
      <returns>
        <see langword="true" />se a transação foi confirmada; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Description">
      <summary>Obtém uma descrição para a transação.</summary>
      <returns>Uma descrição para a transação.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)">
      <summary>Libera os recursos não gerenciados usados pelo <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> e opcionalmente libera os recursos gerenciados.</summary>
      <param name="disposing">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Finalize">
      <summary>Libera todos os recursos do sistema operacional associados a este objeto. Esta substituição confirma esta transação se ela ainda não foi confirmada.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCancel">
      <summary>Aciona o evento <see langword="Cancel" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCommit">
      <summary>Realiza o real trabalho de confirmar uma transação.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose">
      <summary>Libera todos os recursos usados pelo <see cref="T:System.ComponentModel.Design.DesignerTransaction" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs">
      <summary>Fornece dados para os eventos de <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> e de <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> usando o valor especificado que indica se o designer chamou <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> na transação.</summary>
      <param name="commit">Um valor que indica se a transação foi confirmada.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean,System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />.</summary>
      <param name="commit">Um valor que indica se a transação foi confirmada.</param>
      <param name="lastTransaction">
        <see langword="true" /> se esta for a última transação a fechar; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.LastTransaction">
      <summary>Obtém um valor que indica se esta é a última transação a ser fechada.</summary>
      <returns>
        <see langword="true" />, se esta for a última transação a ser fechada; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.TransactionCommitted">
      <summary>Indica se o designer chamou <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> na transação.</summary>
      <returns>
        <see langword="true" />Se o Designer for <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> chamado na transação; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventHandler">
      <summary>Representa o método que manipula os eventos <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> e <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> de um designer.</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">Um <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerb">
      <summary>Representa um verbo que pode ser invocado por meio de um designer.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
      <param name="text">O texto do comando de menu que é mostrado ao usuário.</param>
      <param name="handler">O manipulador de eventos que executa as ações do verbo.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</summary>
      <param name="text">O texto do comando de menu que é mostrado ao usuário.</param>
      <param name="handler">O manipulador de eventos que executa as ações do verbo.</param>
      <param name="startCommandID">A ID de comando inicial para esse verbo. Por padrão, a arquitetura de designer reserva um intervalo de IDs de comando para verbos. Você pode substituir isso fornecendo uma ID de comando personalizada.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Description">
      <summary>Obtém ou define a descrição do item de menu para o verbo.</summary>
      <returns>Uma cadeia de caracteres que descreve o item de menu.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Text">
      <summary>Obtém a descrição de texto para o comando verbo no menu.</summary>
      <returns>Uma descrição para o comando de verbo.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.ToString">
      <summary>Substitui <see cref="M:System.Object.ToString" />.</summary>
      <returns>O texto do verbo ou uma cadeia de caracteres vazia ("") se o campo de texto está vazio.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerbCollection">
      <summary>Representa uma coleção de objetos <see cref="T:System.ComponentModel.Design.DesignerVerb" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor(System.ComponentModel.Design.DesignerVerb[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> usando a matriz de objetos <see cref="T:System.ComponentModel.Design.DesignerVerb" /> especificada.</summary>
      <param name="value">Uma matriz <see cref="T:System.ComponentModel.Design.DesignerVerb" /> que indica os verbos a serem contidos dentro da coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Add(System.ComponentModel.Design.DesignerVerb)">
      <summary>Adiciona o <see cref="T:System.ComponentModel.Design.DesignerVerb" /> especificado à coleção.</summary>
      <param name="value">O <see cref="T:System.ComponentModel.Design.DesignerVerb" /> a adicionar à coleção.</param>
      <returns>O índice na coleção no qual o verbo foi adicionado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerb[])">
      <summary>Adiciona o conjunto especificado de verbos do designer à coleção.</summary>
      <param name="value">Uma matriz de objetos <see cref="T:System.ComponentModel.Design.DesignerVerb" /> a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerbCollection)">
      <summary>Adiciona a coleção especificada de verbos do designer à coleção.</summary>
      <param name="value">Um <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> a ser adicionado à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Contains(System.ComponentModel.Design.DesignerVerb)">
      <summary>Obtém um valor que indica se o <see cref="T:System.ComponentModel.Design.DesignerVerb" /> especificado existe na coleção.</summary>
      <param name="value">O <see cref="T:System.ComponentModel.Design.DesignerVerb" /> a ser pesquisado na coleção.</param>
      <returns>
        <see langword="true" /> se o objeto especificado existe na coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.CopyTo(System.ComponentModel.Design.DesignerVerb[],System.Int32)">
      <summary>Copia os membros da coleção para a matriz <see cref="T:System.ComponentModel.Design.DesignerVerb" /> especificada, começando no índice de destino especificado.</summary>
      <param name="array">A matriz para a qual copiar membros da coleção.</param>
      <param name="index">O índice de destino no qual iniciar a cópia.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.IndexOf(System.ComponentModel.Design.DesignerVerb)">
      <summary>Obtém o índice do <see cref="T:System.ComponentModel.Design.DesignerVerb" /> especificado.</summary>
      <param name="value">O <see cref="T:System.ComponentModel.Design.DesignerVerb" /> cujo índice obter na coleção.</param>
      <returns>O índice do objeto especificado, se encontrado, na lista; caso contrário, -1.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerVerb)">
      <summary>Insere o <see cref="T:System.ComponentModel.Design.DesignerVerb" /> especificado no índice especificado.</summary>
      <param name="index">O índice na coleção no qual inserir o verbo.</param>
      <param name="value">O <see cref="T:System.ComponentModel.Design.DesignerVerb" /> a ser inserido na coleção.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerbCollection.Item(System.Int32)">
      <summary>Obtém ou define o <see cref="T:System.ComponentModel.Design.DesignerVerb" /> no índice especificado.</summary>
      <param name="index">O índice no qual obter ou definir o <see cref="T:System.ComponentModel.Design.DesignerVerb" />.</param>
      <returns>A <see cref="T:System.ComponentModel.Design.DesignerVerb" /> em cada índice válido na coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnClear">
      <summary>Aciona o evento <see langword="Clear" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnInsert(System.Int32,System.Object)">
      <summary>Aciona o evento <see langword="Insert" />.</summary>
      <param name="index">O índice no qual inserir um item.</param>
      <param name="value">O objeto a ser inserido.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnRemove(System.Int32,System.Object)">
      <summary>Aciona o evento <see langword="Remove" />.</summary>
      <param name="index">O índice no qual remover o item.</param>
      <param name="value">O objeto a ser removido.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>Aciona o evento <see langword="Set" />.</summary>
      <param name="index">O índice no qual definir o item.</param>
      <param name="oldValue">O objeto antigo.</param>
      <param name="newValue">O novo objeto.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnValidate(System.Object)">
      <summary>Aciona o evento <see langword="Validate" />.</summary>
      <param name="value">O objeto a ser validado.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Remove(System.ComponentModel.Design.DesignerVerb)">
      <summary>Remove o <see cref="T:System.ComponentModel.Design.DesignerVerb" /> especificado da coleção.</summary>
      <param name="value">O <see cref="T:System.ComponentModel.Design.DesignerVerb" /> a ser removido da coleção.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContext">
      <summary>Representa um contexto de licença de tempo de design que pode dar suporte a um provedor de licença em tempo de design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>Obtém uma chave de licença salva.</summary>
      <param name="type">O tipo da chave de licença.</param>
      <param name="resourceAssembly">O assembly do qual obter a chave.</param>
      <returns>A chave de licença salva que corresponde ao tipo especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>Define uma chave de licença salva.</summary>
      <param name="type">O tipo da chave de licença.</param>
      <param name="key">A chave de licença.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesigntimeLicenseContext.UsageMode">
      <summary>Obtém o modo de uso da licença.</summary>
      <returns>Um <see cref="T:System.ComponentModel.LicenseUsageMode" /> que indica o modo de licenciamento para o contexto.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContextSerializer">
      <summary>Fornece suporte para serialização de contexto de licença de tempo de design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)">
      <summary>Serializa as licenças de dentro do contexto de licença de tempo de design especificado usando a chave e o fluxo de saída especificados.</summary>
      <param name="o">O fluxo para o qual gerar saída.</param>
      <param name="cryptoKey">A chave a ser usada para criptografia.</param>
      <param name="context">Um <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" /> indicando o contexto da licença.</param>
    </member>
    <member name="T:System.ComponentModel.Design.HelpContextType">
      <summary>Define os identificadores de indicam informações sobre o contexto no qual uma solicitação para obter Informações da Ajuda foi originada.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Ambient">
      <summary>Um contexto geral.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Selection">
      <summary>Uma seleção.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.ToolWindowSelection">
      <summary>Uma seleção de janela de ferramentas.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Window">
      <summary>Uma janela.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordAttribute">
      <summary>Especifica a palavra-chave de contexto de uma classe ou membro. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />.</summary>
      <param name="keyword">O valor da palavra-chave Ajuda.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> do tipo fornecido.</summary>
      <param name="t">O tipo do qual a palavra-chave Ajuda será obtida.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> é <see langword="null" />.</exception>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordAttribute.Default">
      <summary>Representa o valor padrão para <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />. Este campo é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.Equals(System.Object)">
      <summary>Determina se duas instâncias <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> são iguais.</summary>
      <param name="obj">O <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> a ser comparado com o <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> atual.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> especificado for igual ao <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código hash do <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> atual.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.HelpKeywordAttribute.HelpKeyword">
      <summary>Obtém a palavra-chave Ajuda fornecida por este atributo.</summary>
      <returns>A palavra-chave Help fornecida por este atributo.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.IsDefaultAttribute">
      <summary>Determina se a palavra-chave da Ajuda é <see langword="null" />.</summary>
      <returns>
        <see langword="true" /> se a palavra-chave Ajuda for <see langword="null" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordType">
      <summary>Define os identificadores que indicam o tipo de uma palavra-chave de ajuda.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.F1Keyword">
      <summary>Uma palavra-chave sobre a qual solicitou-se ajuda pressionando a tecla F1.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.FilterKeyword">
      <summary>Uma palavra-chave de filtro.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.GeneralKeyword">
      <summary>Uma palavra-chave geral.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentChangeService">
      <summary>Fornece uma interface para adicionar e remover os manipuladores de eventos para eventos que adicionam, alteram, removem ou renomeiam componentes e fornecem métodos para gerar um evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> ou <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded">
      <summary>Ocorre quando um componente foi adicionado.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding">
      <summary>Ocorre quando um componente está no processo de ser adicionado.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged">
      <summary>Ocorre quando um componente foi alterado.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging">
      <summary>Ocorre quando um componente está no processo de ser alterado.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved">
      <summary>Ocorre quando um componente foi removido.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving">
      <summary>Ocorre quando um componente está no processo de ser removido.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename">
      <summary>Ocorre quando um componente é renomeado.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>Anuncia ao serviço de alteração de componente que um componente específico foi alterado.</summary>
      <param name="component">O componente que mudou.</param>
      <param name="member">O membro que foi alterado. Isso será <see langword="null" /> se essa alteração não estiver relacionada a um membro único.</param>
      <param name="oldValue">O valor antigo do membro. Isso será válido somente se o membro não for <see langword="null" />.</param>
      <param name="newValue">O novo valor do membro. Isso será válido somente se o membro não for <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Anuncia ao serviço de alteração de componente que um componente específico está sendo alterado.</summary>
      <param name="component">O componente que está prestes a mudar.</param>
      <param name="member">O membro que está sendo alterado. Isso será <see langword="null" /> se essa alteração não estiver relacionada a um membro único.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentDiscoveryService">
      <summary>Habilita a enumeração de componentes em tempo de design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
      <summary>Obtém a lista de tipos de componentes disponíveis.</summary>
      <param name="designerHost">O host de designer que fornece serviços de tempo de design. Pode ser <see langword="null" />.</param>
      <param name="baseType">O tipo base especificando os componentes a serem recuperados. Pode ser <see langword="null" />.</param>
      <returns>A lista de tipos de componentes disponíveis.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentInitializer">
      <summary>Fornece um conjunto de valores padrão recomendados durante a criação do componente.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary>Restaura uma instância de um componente para seu estado padrão.</summary>
      <param name="defaultValues">Um dicionário de valores de propriedade padrão, que são pares nome/valor, com os quais redefinir o estado do componente.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeNewComponent(System.Collections.IDictionary)">
      <summary>Inicializa um novo componente usando um conjunto de valores recomendados.</summary>
      <param name="defaultValues">Um dicionário de valores de propriedade padrão, que são pares nome/valor, com os quais inicializar o estado do componente.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesigner">
      <summary>Fornece a estrutura básica para a criação de um designer personalizado.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Component">
      <summary>Obtém o componente de base que este designer está criando.</summary>
      <returns>Um <see cref="T:System.ComponentModel.IComponent" /> que indica o componente base que este designer está criando.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.DoDefaultAction">
      <summary>Executa a ação padrão para este designer.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>Inicializa o designer com o componente especificado.</summary>
      <param name="component">O componente a associar a este designer.</param>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Verbs">
      <summary>Obtém uma coleção dos verbos em tempo de design compatíveis com o designer.</summary>
      <returns>Um <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> que contém os verbos com suporte do designer ou <see langword="null" /> se o componente não tem verbos.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerEventService">
      <summary>Fornece notificações de eventos quando os designers raiz são adicionados e removidos, quando um componente selecionado muda e quando o designer raiz atual muda.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner">
      <summary>Obtém o designer raiz para o documento ativo no momento.</summary>
      <returns>O documento ativo no momento ou <see langword="null" /> se não houver nenhum documento ativo.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged">
      <summary>Ocorre quando o designer raiz atual é alterado.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated">
      <summary>Ocorre quando um designer raiz é criado.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed">
      <summary>Ocorre quando um designer raiz para um documento é descartado.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.Designers">
      <summary>Obtém uma coleção de designers de raiz para documentos de design que estão atualmente ativos no ambiente de desenvolvimento.</summary>
      <returns>Um <see cref="T:System.ComponentModel.Design.DesignerCollection" /> que contém os designers raiz que foram criados e ainda não foram descartados.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.SelectionChanged">
      <summary>Ocorre quando a seleção de exibição de design atual é alterada.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerFilter">
      <summary>Fornece uma interface que permite que um designer acesse e filtre os dicionários de um <see cref="T:System.ComponentModel.TypeDescriptor" /> que armazena os descritores de evento, atributo e propriedade que um componente de designer pode expor para o ambiente em tempo de design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)">
      <summary>Quando substituído em uma classe derivada, permite que um designer altere ou remova itens do conjunto de atributos que ele expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="attributes">Os objetos <see cref="T:System.Attribute" /> para a classe do componente. As chaves no dicionário de atributos são os valores <see cref="P:System.Attribute.TypeId" /> dos atributos.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)">
      <summary>Quando substituído em uma classe derivada, permite que um designer altere ou remova itens do conjunto de eventos que ele expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="events">Os objetos <see cref="T:System.ComponentModel.EventDescriptor" /> que representam os eventos da classe do componente. As chaves no dicionário de eventos são nomes de evento.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)">
      <summary>Quando substituído em uma classe derivada, permite que um designer altere ou remova itens do conjunto de propriedades que ele expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="properties">Os objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> que representam as propriedades da classe do componente. As chaves no dicionário de propriedades são nomes de propriedade.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)">
      <summary>Quando substituído em uma classe derivada, permite que um designer adicione itens ao conjunto de atributos que ele expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="attributes">Os objetos <see cref="T:System.Attribute" /> para a classe do componente. As chaves no dicionário de atributos são os valores <see cref="P:System.Attribute.TypeId" /> dos atributos.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)">
      <summary>Quando substituído em uma classe derivada, permite que um designer adicione itens ao conjunto de eventos que ele expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="events">Os objetos <see cref="T:System.ComponentModel.EventDescriptor" /> que representam os eventos da classe do componente. As chaves no dicionário de eventos são nomes de evento.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)">
      <summary>Quando substituído em uma classe derivada, permite que um designer adicione itens ao conjunto de propriedades que ele expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="properties">Os objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> que representam as propriedades da classe do componente. As chaves no dicionário de propriedades são nomes de propriedade.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHost">
      <summary>Fornece uma interface para gerenciar componentes e transações de designer.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.Activate">
      <summary>Ativa o designer que este host está hospedando.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Activated">
      <summary>Ocorre quando esse designer é ativado.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Container">
      <summary>Obtém o contêiner para este host de designer.</summary>
      <returns>O <see cref="T:System.ComponentModel.IContainer" /> para este host.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)">
      <summary>Cria um componente do tipo especificado e o adiciona ao documento de design.</summary>
      <param name="componentClass">O tipo do componente a ser criado.</param>
      <returns>O componente recém-criado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)">
      <summary>Cria um componente do tipo e nome especificados e o adiciona ao documento de design.</summary>
      <param name="componentClass">O tipo do componente a ser criado.</param>
      <param name="name">O nome do componente.</param>
      <returns>O componente recém-criado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction">
      <summary>Cria um <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> que pode encapsular sequências de eventos para melhorar o desempenho e habilitar desfazer e refazer a funcionalidade de suporte.</summary>
      <returns>Uma nova instância de <see cref="T:System.ComponentModel.Design.DesignerTransaction" />. Quando você concluir as etapas na sua transação, deverá chamar <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> neste objeto.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)">
      <summary>Cria um <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> que pode encapsular sequências de eventos para melhorar o desempenho e habilitar a funcionalidade de suporte de desfazer e refazer, usando a descrição da transação especificada.</summary>
      <param name="description">Um título ou uma descrição para a transação recém-criada.</param>
      <returns>Um novo <see cref="T:System.ComponentModel.Design.DesignerTransaction" />. Quando você tiver concluído as etapas na sua transação, deverá chamar <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> neste objeto.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Deactivated">
      <summary>Ocorre quando esse designer é desativado.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)">
      <summary>Destrói o componente especificado e remove-o do contêiner de designer.</summary>
      <param name="component">O componente a destruir.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)">
      <summary>Obtém a instância do designer que contém o componente especificado.</summary>
      <param name="component">O <see cref="T:System.ComponentModel.IComponent" /> para o qual recuperar o designer.</param>
      <returns>Um <see cref="T:System.ComponentModel.Design.IDesigner" /> ou <see langword="null" /> se não houver nenhum designer para o componente especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetType(System.String)">
      <summary>Obtém uma instância do nome do tipo totalmente qualificado especificado.</summary>
      <param name="typeName">O nome do tipo a ser carregado.</param>
      <returns>O objeto de tipo para o nome do tipo especificado ou <see langword="null" />, se não for possível localizar o tipo.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.InTransaction">
      <summary>Obtém um valor que indica se o host do designer está atualmente em uma transação.</summary>
      <returns>
        <see langword="true" />se uma transação estiver em andamento; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.LoadComplete">
      <summary>Ocorre quando este designer termina de carregar seu documento.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Loading">
      <summary>Obtém um valor que indica se o host de designer está carregando o documento no momento.</summary>
      <returns>
        <see langword="true" />Se o host do designer estiver carregando o documento no momento; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponent">
      <summary>Obtém a instância da classe base usada como o componente raiz para o design atual.</summary>
      <returns>A instância da classe de componente raiz.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponentClassName">
      <summary>Obtém o nome totalmente qualificado da classe que está sendo criada.</summary>
      <returns>O nome totalmente qualificado da classe de componente base.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed">
      <summary>Adiciona um manipulador de eventos para o evento <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing">
      <summary>Adiciona um manipulador de eventos para o evento <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" />.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.TransactionDescription">
      <summary>Obtém a descrição da transação atual.</summary>
      <returns>Uma descrição da transação atual.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened">
      <summary>Adiciona um manipulador de eventos para o evento <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened" />.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening">
      <summary>Adiciona um manipulador de eventos para o evento <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHostTransactionState">
      <summary>Especifica os métodos para o host de designer relatar o estado de transações.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHostTransactionState.IsClosingTransaction">
      <summary>Obtém um valor que indica se o host do designer está encerrando uma transação.</summary>
      <returns>
        <see langword="true" />Se o designer estiver fechando uma transação; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerOptionService">
      <summary>Fornece acesso às opções de designer localizadas no menu Ferramentas no comando Opções no ambiente de desenvolvimento do Visual Studio.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(System.String,System.String)">
      <summary>Obtém o valor da opção de Designer de Formulários do Windows especificada.</summary>
      <param name="pageName">O nome da página que define a opção.</param>
      <param name="valueName">O nome da propriedade de opção.</param>
      <returns>O valor da opção especificada.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(System.String,System.String,System.Object)">
      <summary>Define o valor da opção do Designer de Formulários do Windows especificada.</summary>
      <param name="pageName">O nome da página que define a opção.</param>
      <param name="valueName">O nome da propriedade de opção.</param>
      <param name="value">O novo valor.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDictionaryService">
      <summary>Fornece um dicionário básico de par chave-valor específico do site do componente por meio de um serviço que um designer pode usar para armazenar os dados definidos pelo usuário.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetKey(System.Object)">
      <summary>Obtém a chave correspondente ao valor especificado.</summary>
      <param name="value">O valor a pesquisar no dicionário.</param>
      <returns>A chave associada ou <see langword="null" />, se não existir nenhuma chave.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetValue(System.Object)">
      <summary>Obtém o valor correspondente à chave especificada.</summary>
      <param name="key">A chave para a qual pesquisar o valor.</param>
      <returns>O valor associado ou <see langword="null" />, se não existir nenhum valor.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.SetValue(System.Object,System.Object)">
      <summary>Define o par chave-valor especificado.</summary>
      <param name="key">Um objeto a ser usado como a chave à qual associar o valor.</param>
      <param name="value">O valor a ser armazenado.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IEventBindingService">
      <summary>Fornece um serviço para o registro de manipuladores de eventos para eventos do componente.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>Cria um nome exclusivo para um método do manipulador de eventos para o componente e o evento especificados.</summary>
      <param name="component">A instância do componente à qual o evento está conectado.</param>
      <param name="e">O evento para o qual um nome será criado.</param>
      <returns>O nome recomendado para o método de manipulador de eventos para esse evento.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary>Obtém uma coleção de métodos de manipulador de eventos que têm uma assinatura de método compatível com o evento especificado.</summary>
      <param name="e">O evento para o qual obter os métodos do manipulador de eventos compatível.</param>
      <returns>Uma coleção de cadeias de caracteres.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)">
      <summary>Obtém um <see cref="T:System.ComponentModel.EventDescriptor" /> para o evento que o descritor de propriedade especificado representa, se ele representar um evento.</summary>
      <param name="property">A propriedade que representa um evento.</param>
      <returns>Um <see cref="T:System.ComponentModel.EventDescriptor" /> para o evento que a propriedade representa ou <see langword="null" /> se a propriedade não representa um evento.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)">
      <summary>Converte um conjunto de descritores de eventos em um conjunto de descritores de propriedades.</summary>
      <param name="events">Os eventos a serem convertidos em propriedades.</param>
      <returns>Uma matriz de objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> que descreve o conjunto de eventos.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)">
      <summary>Converte um único descritor de eventos em um descritor de propriedades.</summary>
      <param name="e">O evento a ser convertido.</param>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> que descreve o evento.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode">
      <summary>Exibe o código do usuário para o designer.</summary>
      <returns>
        <see langword="true" /> se o código for exibido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>Exibe o código do usuário para o evento especificado.</summary>
      <param name="component">O componente ao qual o evento está conectado.</param>
      <param name="e">O evento a ser exibido.</param>
      <returns>
        <see langword="true" /> se o código for exibido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)">
      <summary>Exibe o código do usuário para o designer na linha especificada.</summary>
      <param name="lineNumber">O número de linha na qual colocar o cursor.</param>
      <returns>
        <see langword="true" /> se o código for exibido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderListService">
      <summary>Fornece uma interface que pode listar provedores de extensor.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderListService.GetExtenderProviders">
      <summary>Obtém o conjunto de provedores de extensor para o componente.</summary>
      <returns>Uma matriz do tipo <see cref="T:System.ComponentModel.IExtenderProvider" /> que lista os provedores de extensor ativos. Se não houver provedores, uma matriz vazia será retornada.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderProviderService">
      <summary>Fornece uma interface para adicionar e remover provedores de extensor em tempo de design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>Adiciona o provedor do extensor especificado.</summary>
      <param name="provider">O provedor de extensor a ser adicionado.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>Remove o provedor do extensor especificado.</summary>
      <param name="provider">O provedor de extensor a ser removido.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IHelpService">
      <summary>Fornece métodos para mostrar os tópicos da Ajuda e adicionar e remover palavras-chave de Ajuda em tempo de design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary>Adiciona um atributo de contexto ao documento.</summary>
      <param name="name">O nome do atributo a ser adicionado.</param>
      <param name="value">O valor do atributo.</param>
      <param name="keywordType">O tipo de palavra-chave, da enumeração <see cref="T:System.ComponentModel.Design.HelpKeywordType" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ClearContextAttributes">
      <summary>Remove todos os atributos de contexto existentes do documento.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)">
      <summary>Cria um <see cref="T:System.ComponentModel.Design.IHelpService" /> local para gerenciar subcontextos.</summary>
      <param name="contextType">O tipo de prioridade de subcontexto a adicionar.</param>
      <returns>O <see cref="T:System.ComponentModel.Design.IHelpService" /> recém-criado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary>Remove um atributo de contexto adicionado anteriormente.</summary>
      <param name="name">O nome do atributo a ser removido.</param>
      <param name="value">O valor do atributo a ser removido.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveLocalContext(System.ComponentModel.Design.IHelpService)">
      <summary>Remove um contexto criado com <see cref="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)" />.</summary>
      <param name="localContext">O <see cref="T:System.ComponentModel.Design.IHelpService" /> de contexto local a remover.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromKeyword(System.String)">
      <summary>Exibe o tópico de Ajuda que corresponde à palavra-chave especificada.</summary>
      <param name="helpKeyword">A palavra-chave do tópico da Ajuda a exibir.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromUrl(System.String)">
      <summary>Exibe o tópico de Ajuda que corresponde à URL especificada.</summary>
      <param name="helpUrl">A URL do tópico de Ajuda a exibir.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IInheritanceService">
      <summary>Fornece métodos para identificar os componentes de um componente.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary>Pesquisa o componente especificado para os campos que implementam a interface de <see cref="T:System.ComponentModel.IComponent" /> e adiciona cada um ao contêiner especificado, armazenando o nível de herança de cada um, que pode ser recuperado usando o método <see cref="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)" />.</summary>
      <param name="component">O <see cref="T:System.ComponentModel.IComponent" /> a pesquisar. A pesquisa começa com este componente.</param>
      <param name="container">O <see cref="T:System.ComponentModel.IContainer" /> ao qual adicionar componentes.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary>Obtém o atributo de herança para o componente especificado.</summary>
      <param name="component">O <see cref="T:System.ComponentModel.IComponent" /> para o qual recuperar o atributo de herança.</param>
      <returns>Uma instância de <see cref="T:System.ComponentModel.InheritanceAttribute" /> que descreve o nível de herança do componente especificado.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IMenuCommandService">
      <summary>Fornece métodos para gerenciar os comandos de menu e os verbos de designer globais disponíveis no modo de design e para exibir alguns tipos de menu de atalho.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>Adiciona o comando de menu padrão especificado ao menu.</summary>
      <param name="command">O <see cref="T:System.ComponentModel.Design.MenuCommand" /> a ser adicionado.</param>
      <exception cref="T:System.InvalidOperationException">O <see cref="T:System.ComponentModel.Design.CommandID" /> do <see cref="T:System.ComponentModel.Design.MenuCommand" /> especificado já está presente em um menu.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>Adiciona o verbo do designer especificado ao conjunto de verbos do designer global.</summary>
      <param name="verb">O <see cref="T:System.ComponentModel.Design.DesignerVerb" /> a ser adicionado.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary>Pesquisa a ID de comando especificada e retorna o comando de menu associado a ela.</summary>
      <param name="commandID">O <see cref="T:System.ComponentModel.Design.CommandID" /> a ser pesquisado.</param>
      <returns>O <see cref="T:System.ComponentModel.Design.MenuCommand" /> associado à ID de comando ou <see langword="null" />, se nenhum comando for encontrado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
      <summary>Invoca um comando de verbo de designer ou menu correspondendo à ID de comando especificada.</summary>
      <param name="commandID">O <see cref="T:System.ComponentModel.Design.CommandID" /> do comando a pesquisar e executar.</param>
      <returns>
        <see langword="true" /> se o comando tiver sido encontrado e invocado com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>Remove o comando de menu padrão especificado no menu.</summary>
      <param name="command">O <see cref="T:System.ComponentModel.Design.MenuCommand" /> a ser removido.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>Remove o verbo do designer especificado da coleção de verbos do designer globais.</summary>
      <param name="verb">O <see cref="T:System.ComponentModel.Design.DesignerVerb" /> a ser removido.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
      <summary>Mostra o menu de atalho especificado no local especificado.</summary>
      <param name="menuID">O <see cref="T:System.ComponentModel.Design.CommandID" /> para o menu de atalho a mostrar.</param>
      <param name="x">A coordenada x na qual exibir o menu, em coordenadas da tela.</param>
      <param name="y">A coordenada y na qual exibir o menu, em coordenadas da tela.</param>
    </member>
    <member name="P:System.ComponentModel.Design.IMenuCommandService.Verbs">
      <summary>Obtém uma coleção dos verbos do designer que estão disponíveis no momento.</summary>
      <returns>Um <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> que contém os verbos do designer que estão disponíveis no momento.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IReferenceService">
      <summary>Fornece uma interface para obter referências a objetos em um projeto por nome ou tipo, para obter o nome de um objeto especificado e para localizar o pai de um objeto especificado em um projeto do designer.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetComponent(System.Object)">
      <summary>Obtém o componente que contém o componente especificado.</summary>
      <param name="reference">O objeto para o qual recuperar o componente pai.</param>
      <returns>A <see cref="T:System.ComponentModel.IComponent" /> base que contém o objeto especificado ou <see langword="null" />, não se houver componente pai.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetName(System.Object)">
      <summary>Obtém o nome do componente especificado.</summary>
      <param name="reference">O objeto do qual retornar o nome.</param>
      <returns>O nome do objeto referenciado ou <see langword="null" />, se a referência do objeto não for válida.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReference(System.String)">
      <summary>Obtém uma referência para o componente cujo nome corresponda ao nome especificado.</summary>
      <param name="name">O nome do componente para o qual retornar uma referência.</param>
      <returns>Um objeto ao qual o nome especificado se refere ou <see langword="null" />, se nenhuma referência for encontrada.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences">
      <summary>Obtém todas as referências disponíveis para os componentes do projeto.</summary>
      <returns>Uma matriz de todos os objetos com referências disponíveis para o <see cref="T:System.ComponentModel.Design.IReferenceService" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences(System.Type)">
      <summary>Obtém todas as referências disponíveis para componentes do tipo especificado.</summary>
      <param name="baseType">O tipo de objeto do qual retornar referências para as instâncias.</param>
      <returns>Uma matriz de todos os objetos disponíveis do tipo especificado.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IResourceService">
      <summary>Fornece uma interface para que designers acessem leitores e gravadores de recursos para tipos de recursos de <see cref="T:System.Globalization.CultureInfo" /> específicos.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceReader(System.Globalization.CultureInfo)">
      <summary>Localiza o leitor de recursos para a cultura especificada e o retorna.</summary>
      <param name="info">O <see cref="T:System.Globalization.CultureInfo" /> do recurso para o qual recuperar um leitor de recursos.</param>
      <returns>Uma interface <see cref="T:System.Resources.IResourceReader" /> que contém os recursos para a cultura ou <see langword="null" />, se não houver recursos para a cultura.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceWriter(System.Globalization.CultureInfo)">
      <summary>Localiza o gravador de recursos para a cultura especificada e o retorna.</summary>
      <param name="info">O <see cref="T:System.Globalization.CultureInfo" /> do recurso para o qual criar um gravador de recursos.</param>
      <returns>Uma interface <see cref="T:System.Resources.IResourceWriter" /> para a cultura especificada.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IRootDesigner">
      <summary>Oferece suporte a tecnologias de exibição de designer do nível raiz.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IRootDesigner.GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary>Obtém um objeto de exibição para a tecnologia de exibição especificada.</summary>
      <param name="technology">Um <see cref="T:System.ComponentModel.Design.ViewTechnology" /> que indica uma tecnologia de exibição específica.</param>
      <returns>Um objeto que representa a exibição para este designer.</returns>
      <exception cref="T:System.ArgumentException">A tecnologia de exibição especificada não é compatível ou não existe.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies">
      <summary>Obtém o conjunto de tecnologias que podem ser compatíveis com esse designer para a exibição.</summary>
      <returns>Uma matriz de valores <see cref="T:System.ComponentModel.Design.ViewTechnology" /> com suporte.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ISelectionService">
      <summary>Fornece uma interface para que um designer selecione componentes.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetComponentSelected(System.Object)">
      <summary>Obtém um valor que indica se o componente especificado está atualmente selecionado.</summary>
      <param name="component">O componente a ser testado.</param>
      <returns>
        <see langword="true" /> se o componente faz parte da seleção atual do usuário; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetSelectedComponents">
      <summary>Obtém uma coleção de componentes que estão selecionados no momento.</summary>
      <returns>Uma coleção que representa o conjunto atual de componentes que estão selecionados.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.PrimarySelection">
      <summary>Obtém o objeto que é o principal objeto selecionado no momento.</summary>
      <returns>O objeto que é o objeto primário selecionado no momento.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanged">
      <summary>Ocorre quando a seleção atual é alterada.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanging">
      <summary>Ocorre quando a seleção atual está prestes a ser alterada.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.SelectionCount">
      <summary>Obtém a contagem de objetos selecionados.</summary>
      <returns>O número de objetos selecionados.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection)">
      <summary>Seleciona a coleção de componentes especificada.</summary>
      <param name="components">A coleção de componentes a ser selecionada.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
      <summary>Seleciona os componentes de dentro da coleção de componentes especificada que correspondem ao tipo de seleção especificado.</summary>
      <param name="components">A coleção de componentes a ser selecionada.</param>
      <param name="selectionType">Um valor da enumeração <see cref="T:System.ComponentModel.Design.SelectionTypes" />. O padrão é <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IServiceContainer">
      <summary>Fornece um contêiner para serviços.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>Adiciona o serviço especificado ao contêiner de serviço.</summary>
      <param name="serviceType">O tipo de serviço a ser adicionado.</param>
      <param name="callback">Um objeto de retorno de chamada que é usado para criar o serviço. Isso permite que um serviço seja declarado como disponível, mas atrasa a criação do objeto até que o serviço seja solicitado.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>Adiciona o serviço especificado ao contêiner de serviço e, opcionalmente, promove o serviço a contêineres de serviço pai.</summary>
      <param name="serviceType">O tipo de serviço a ser adicionado.</param>
      <param name="callback">Um objeto de retorno de chamada que é usado para criar o serviço. Isso permite que um serviço seja declarado como disponível, mas atrasa a criação do objeto até que o serviço seja solicitado.</param>
      <param name="promote">
        <see langword="true" /> para promover esta solicitação para qualquer contêiner de serviço pai; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)">
      <summary>Adiciona o serviço especificado ao contêiner de serviço.</summary>
      <param name="serviceType">O tipo de serviço a ser adicionado.</param>
      <param name="serviceInstance">Uma instância do tipo de serviço a ser adicionado. Esse objeto deve implementar ou herdar do tipo indicado pelo parâmetro <paramref name="serviceType" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>Adiciona o serviço especificado ao contêiner de serviço e, opcionalmente, promove o serviço a qualquer contêiner de serviço pai.</summary>
      <param name="serviceType">O tipo de serviço a ser adicionado.</param>
      <param name="serviceInstance">Uma instância do tipo de serviço a ser adicionado. Esse objeto deve implementar ou herdar do tipo indicado pelo parâmetro <paramref name="serviceType" />.</param>
      <param name="promote">
        <see langword="true" /> para promover esta solicitação para qualquer contêiner de serviço pai; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)">
      <summary>Remove o tipo de serviço especificado do contêiner de serviço.</summary>
      <param name="serviceType">O tipo de serviço a ser removido.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>Remove o tipo de serviço especificado do contêiner de serviço e, opcionalmente, promove o serviço a contêineres de serviço pai.</summary>
      <param name="serviceType">O tipo de serviço a ser removido.</param>
      <param name="promote">
        <see langword="true" /> para promover esta solicitação para qualquer contêiner de serviço pai; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ITreeDesigner">
      <summary>Fornece suporte para a criação de um conjunto de designers personalizados relacionados.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Children">
      <summary>Obtém uma coleção de designers filho.</summary>
      <returns>Um <see cref="T:System.Collections.ICollection" />, que contém a coleção <see cref="T:System.ComponentModel.Design.IDesigner" /> de objetos filho do designer atual.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Parent">
      <summary>Obtém o designer pai.</summary>
      <returns>Um <see cref="T:System.ComponentModel.Design.IDesigner" /> que representa o designer pai ou <see langword="null" /> , se não houver nenhum pai.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDescriptorFilterService">
      <summary>Fornece uma interface para modificar o conjunto de descritores de membro de um componente no modo de design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>Filtra os atributos que um componente expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="component">O componente cujos atributos devem ser filtrados.</param>
      <param name="attributes">Um dicionário de atributos que pode ser modificado.</param>
      <returns>
        <see langword="true" /> se o conjunto de atributos filtrados deve ser armazenado em cache; <see langword="false" /> se o serviço de filtro deve consultar novamente.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>Filtra os eventos que um componente expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="component">O componente para o qual filtrar os eventos.</param>
      <param name="events">Um dicionário de eventos que pode ser modificado.</param>
      <returns>
        <see langword="true" /> se o conjunto de eventos filtrados deve ser armazenado em cache; <see langword="false" /> se o serviço de filtro deve consultar novamente.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>Filtra as propriedades que um componente expõe por meio de um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <param name="component">O componente para o qual filtrar as propriedades.</param>
      <param name="properties">Um dicionário de propriedades que pode ser modificado.</param>
      <returns>
        <see langword="true" /> se o conjunto de propriedades filtradas deve ser armazenado em cache; <see langword="false" /> se o serviço de filtro deve consultar novamente.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDiscoveryService">
      <summary>Descobre tipos disponíveis em tempo de design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)">
      <summary>Recupera a lista de tipos disponíveis.</summary>
      <param name="baseType">O tipo base para corresponder. Pode ser <see langword="null" />.</param>
      <param name="excludeGlobalTypes">Indica se os tipos de todos os assemblies referenciados devem ser verificados.</param>
      <returns>Uma coleção de tipos que correspondem aos critérios especificados por <paramref name="baseType" /> e <paramref name="excludeGlobalTypes" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeResolutionService">
      <summary>Fornece uma interface para recuperar um tipo ou assembly por nome.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName)">
      <summary>Obtém o assembly solicitado.</summary>
      <param name="name">O nome do assembly a ser recuperado.</param>
      <returns>Uma instância do assembly solicitado ou <see langword="null" /> se nenhum assembly puder ser localizado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)">
      <summary>Obtém o assembly solicitado.</summary>
      <param name="name">O nome do assembly a ser recuperado.</param>
      <param name="throwOnError">
        <see langword="true" /> se esse método deverá lançar uma exceção se o assembly não puder ser localizado; do contrário, <see langword="false" /> e esse método retornará <see langword="null" /> se o assembly não puder ser localizado.</param>
      <returns>Uma instância do assembly solicitado ou <see langword="null" /> se nenhum assembly puder ser localizado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)">
      <summary>Obtém o caminho para o arquivo do qual o assembly foi carregado.</summary>
      <param name="name">O nome do assembly.</param>
      <returns>O caminho para o arquivo do qual o assembly foi carregado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String)">
      <summary>Carrega um tipo com o nome especificado.</summary>
      <param name="name">O nome do tipo. Se o nome do tipo não for um nome totalmente qualificado que indica um assembly, esse serviço pesquisará seu conjunto interno de assemblies referenciados.</param>
      <returns>Uma instância de <see cref="T:System.Type" /> que corresponderá ao nome especificado ou <see langword="null" />, se nenhum tipo puder ser encontrado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean)">
      <summary>Carrega um tipo com o nome especificado.</summary>
      <param name="name">O nome do tipo. Se o nome do tipo não for um nome totalmente qualificado que indica um assembly, esse serviço pesquisará seu conjunto interno de assemblies referenciados.</param>
      <param name="throwOnError">
        <see langword="true" /> se esse método deverá lançar uma exceção se o assembly não puder ser localizado; do contrário, <see langword="false" /> e esse método retornará <see langword="null" /> se o assembly não puder ser localizado.</param>
      <returns>Uma instância de <see cref="T:System.Type" /> que corresponderá ao nome especificado ou <see langword="null" />, se nenhum tipo puder ser encontrado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>Carrega um tipo com o nome especificado.</summary>
      <param name="name">O nome do tipo. Se o nome do tipo não for um nome totalmente qualificado que indica um assembly, esse serviço pesquisará seu conjunto interno de assemblies referenciados.</param>
      <param name="throwOnError">
        <see langword="true" /> se esse método deverá lançar uma exceção se o assembly não puder ser localizado; do contrário, <see langword="false" /> e esse método retornará <see langword="null" /> se o assembly não puder ser localizado.</param>
      <param name="ignoreCase">
        <see langword="true" /> para ignorar maiúsculas e minúsculas durante a pesquisa de tipos; caso contrário, <see langword="false" />.</param>
      <returns>Uma instância de <see cref="T:System.Type" /> que corresponderá ao nome especificado ou <see langword="null" />, se nenhum tipo puder ser encontrado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)">
      <summary>Adiciona uma referência ao assembly especificado.</summary>
      <param name="name">Um <see cref="T:System.Reflection.AssemblyName" /> que indica que o assembly para referenciar.</param>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommand">
      <summary>Representa um item de comando de menu ou barra de ferramentas do Windows.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.MenuCommand" />.</summary>
      <param name="handler">O evento a ser gerado quando o usuário seleciona o botão de barra de ferramentas ou item de menu.</param>
      <param name="command">A ID exclusiva do comando que vincula esse comando de menu ao menu do ambiente.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Checked">
      <summary>Obtém ou define um valor que indica se esse item de menu está marcado.</summary>
      <returns>
        <see langword="true" /> se o item está marcado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.MenuCommand.CommandChanged">
      <summary>Ocorre quando o comando de menu muda.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.CommandID">
      <summary>Obtém o <see cref="T:System.ComponentModel.Design.CommandID" /> associado a esse comando de menu.</summary>
      <returns>O <see cref="T:System.ComponentModel.Design.CommandID" /> associado ao comando de menu.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Enabled">
      <summary>Obtém um valor que indica se este item de menu está disponível.</summary>
      <returns>
        <see langword="true" />Se o item estiver habilitado; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke">
      <summary>Invoca o comando.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)">
      <summary>Invoca o comando com o parâmetro especificado.</summary>
      <param name="arg">Um argumento opcional para uso pelo comando.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.OleStatus">
      <summary>Obtém o código de status do comando OLE para este item de menu.</summary>
      <returns>Um inteiro que contém uma mistura de sinalizadores de status que refletem o estado desse item de menu.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
      <summary>Aciona o evento <see cref="E:System.ComponentModel.Design.MenuCommand.CommandChanged" />.</summary>
      <param name="e">Um <see cref="T:System.EventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Properties">
      <summary>Obtém as propriedades públicas associadas ao <see cref="T:System.ComponentModel.Design.MenuCommand" />.</summary>
      <returns>Um <see cref="T:System.Collections.IDictionary" /> que contém as propriedades públicas <see cref="T:System.ComponentModel.Design.MenuCommand" />do.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Supported">
      <summary>Obtém ou define um valor que indica se esse item de menu é compatível.</summary>
      <returns>
        <see langword="true" />Se o item tiver suporte, que é o padrão; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.ToString">
      <summary>Retorna uma representação de cadeia de caracteres desse comando de menu.</summary>
      <returns>Uma cadeia de caracteres que contém o valor da propriedade <see cref="P:System.ComponentModel.Design.MenuCommand.CommandID" /> anexada com os nomes de quaisquer sinalizadores definidos, separados por barras verticais (|). Essas propriedades de sinalizador incluem <see cref="P:System.ComponentModel.Design.MenuCommand.Checked" />, <see cref="P:System.ComponentModel.Design.MenuCommand.Enabled" />, <see cref="P:System.ComponentModel.Design.MenuCommand.Supported" /> e <see cref="P:System.ComponentModel.Design.MenuCommand.Visible" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Visible">
      <summary>Obtém ou define um valor que indica se esse item de menu está visível.</summary>
      <returns>
        <see langword="true" />Se o item estiver visível; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.SelectionTypes">
      <summary>Define os identificadores que indicam o tipo de uma seleção.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Add">
      <summary>Representa uma seleção de adição que adiciona os componentes selecionados à seleção atual, mantendo o conjunto atual de componentes selecionados.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Auto">
      <summary>Representa uma seleção regular. O serviço de seleção responde às teclas CTRL e SHIFT para dar suporte à adição/remoção de componentes à/da seleção.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Click">
      <summary>Representa uma seleção que ocorre quando um usuário clica em um componente. Se o componente recém-selecionado já estiver selecionado, ele será promovido para ser o componente primário selecionado, em vez de ser cancelado.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseDown">
      <summary>Representa uma seleção que ocorre quando o usuário pressiona o botão do mouse enquanto o ponteiro do mouse está sobre um componente. Se o componente sob o ponteiro ainda estiver selecionado, ele será promovido para tornar-se o componente selecionado primário, em vez de ser cancelado.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseUp">
      <summary>Representa uma seleção que ocorre quando o usuário libera o botão do mouse imediatamente depois que um componente foi selecionado. Se o componente recém-selecionado já estiver selecionado, ele será promovido para ser o componente primário selecionado, em vez de ser cancelado.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Normal">
      <summary>Representa uma seleção regular. O serviço de seleção responde às teclas CTRL e SHIFT para dar suporte à adição/remoção de componentes à/da seleção.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Primary">
      <summary>Representa uma seleção primária que ocorre quando um usuário clica em um componente. Se um componente na lista de seleção já estiver selecionado, o componente será promovido para a seleção primária.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Remove">
      <summary>Representa uma seleção de remoção que remove os componentes selecionados da seleção atual, mantendo o conjunto atual de componentes selecionados.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Replace">
      <summary>Representa uma seleção que ocorre quando o conteúdo de uma seleção é substituído. O serviço de seleção substitui a seleção atual pela substituição.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Toggle">
      <summary>Representa uma seleção de alternância que alterna entre a seleção atual e a seleção fornecida. Se um componente já estiver selecionado e for passado para <see cref="Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents" /> com um tipo de seleção de <see cref="F:System.ComponentModel.Design.SelectionTypes.Toggle" />, a seleção do componente será cancelada.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Valid">
      <summary>Identifica os tipos de seleção válidos como <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.Replace" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.MouseDown" />, <see cref="F:System.ComponentModel.Design.SelectionTypes.MouseUp" /> ou <see cref="F:System.ComponentModel.Design.SelectionTypes.Click" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ComponentSerializationService">
      <summary>Fornece a classe base para serializar um conjunto de componentes ou objetos serializáveis em um repositório de serialização.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.CreateStore">
      <summary>Cria um novo <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
      <returns>Um novo repositório de serialização criado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)">
      <summary>Desserializa o repositório indicado para produzir uma coleção de objetos.</summary>
      <param name="store">O <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> a ser desserializado.</param>
      <returns>Uma coleção de objetos criada de acordo com o estado armazenado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> não contém dados em um formato que o contêiner de serialização possa processar.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>Desserializa o repositório fornecido e popula o <see cref="T:System.ComponentModel.IContainer" /> fornecido com objetos <see cref="T:System.ComponentModel.IComponent" /> desserializados.</summary>
      <param name="store">O <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> a ser desserializado.</param>
      <param name="container">O <see cref="T:System.ComponentModel.IContainer" /> ao qual os objetos <see cref="T:System.ComponentModel.IComponent" /> serão adicionados.</param>
      <returns>Uma coleção de objetos criada de acordo com o estado armazenado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> ou <paramref name="container" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> não contém dados em um formato que o contêiner de serialização possa processar.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>Desserializa o <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> determinado ao contêiner determinado.</summary>
      <param name="store">O <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> a ser desserializado.</param>
      <param name="container">O contêiner ao qual os objetos <see cref="T:System.ComponentModel.IComponent" /> serão adicionados.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> ou <paramref name="container" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> não contém dados em um formato que o contêiner de serialização possa processar.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean)">
      <summary>Desserializa o <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> determinado para o contêiner determinado, validando, opcionalmente, tipos reciclados.</summary>
      <param name="store">O <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> a ser desserializado.</param>
      <param name="container">O contêiner ao qual os objetos <see cref="T:System.ComponentModel.IComponent" /> serão adicionados.</param>
      <param name="validateRecycledTypes">
        <see langword="true" /> para garantir que a desserialização só funcionará se aplicada a um objeto do mesmo tipo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> ou <paramref name="container" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> não contém dados em um formato que o contêiner de serialização possa processar.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean,System.Boolean)">
      <summary>Desserializa o <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> fornecido para o contêiner fornecido aplicando, opcionalmente, valores de propriedade padrão.</summary>
      <param name="store">O <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> a ser desserializado.</param>
      <param name="container">O contêiner ao qual os objetos <see cref="T:System.ComponentModel.IComponent" /> serão adicionados.</param>
      <param name="validateRecycledTypes">
        <see langword="true" /> para garantir que a desserialização só funcionará se aplicada a um objeto do mesmo tipo.</param>
      <param name="applyDefaults">
        <see langword="true" /> para indicar que os valores de propriedade padrão devem ser aplicados.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> ou <paramref name="container" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> não contém dados em um formato que o contêiner de serialização possa processar.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.LoadStore(System.IO.Stream)">
      <summary>Carrega um <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> de um fluxo.</summary>
      <param name="stream">O <see cref="T:System.IO.Stream" /> do qual o repositório será carregado.</param>
      <returns>Uma nova instância de <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="stream" /> não contém dados salvos por uma chamada anterior para <see cref="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Serialize(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>Serializa o objeto fornecido para o <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> fornecido.</summary>
      <param name="store">O <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> no qual o estado do <paramref name="value" /> será gravado.</param>
      <param name="value">O objeto a ser serializado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> ou <paramref name="value" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> está fechado ou <paramref name="store" /> não é um tipo de repositório de serialização compatível. Use um repositório retornado por <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>Serializa o objeto fornecido, considerando valores de propriedade padrão.</summary>
      <param name="store">O <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> no qual o estado do <paramref name="value" /> será serializado.</param>
      <param name="value">O objeto a ser serializado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> ou <paramref name="value" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> está fechado ou <paramref name="store" /> não é um tipo de repositório de serialização compatível. Use um repositório retornado por <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Serializa o membro fornecido no objeto especificado.</summary>
      <param name="store">O <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> no qual o estado do <paramref name="member" /> será serializado.</param>
      <param name="owningObject">O objeto ao qual é <paramref name="member" /> anexado.</param>
      <param name="member">Um <see cref="T:System.ComponentModel.MemberDescriptor" /> que especifica o membro a ser serializado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> ou <paramref name="value" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> está fechado ou <paramref name="store" /> não é um tipo de repositório de serialização compatível. Use um repositório retornado por <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Serializa o membro determinado no objeto determinado, considerando o valor da propriedade padrão.</summary>
      <param name="store">O <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> no qual o estado do <paramref name="member" /> será serializado.</param>
      <param name="owningObject">O objeto ao qual é <paramref name="member" /> anexado.</param>
      <param name="member">O nome do membro a serializar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> ou <paramref name="value" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> está fechado ou <paramref name="store" /> não é um tipo de repositório de serialização compatível. Use um repositório retornado por <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ContextStack">
      <summary>Fornece um objeto de pilha que pode ser usado por um serializador para disponibilizar informações para serializadores aninhados.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
      <summary>Acrescenta um objeto ao fim da pilha em vez de efetuar push do objeto para o topo da pilha.</summary>
      <param name="context">Um objeto de contexto a ser acrescentado à pilha.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
      <summary>Obtém o objeto atual na pilha.</summary>
      <returns>O objeto atual na pilha ou <see langword="null" /> se nenhum objeto foi enviado por push.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
      <summary>Obtém o objeto na pilha no nível especificado.</summary>
      <param name="level">O nível do objeto a ser recuperado na pilha. O nível 0 é o topo da pilha, o nível 1 vem logo abaixo e assim por diante. Este nível deve ser igual ou maior que 0. Se o nível for maior que o número de níveis na pilha, <see langword="null" /> será retornado.</param>
      <returns>O objeto na pilha no nível especificado ou <see langword="null" /> se nenhum objeto existir nesse nível.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="level" /> é menor que 0.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
      <summary>Obtém o primeiro objeto na pilha que herda do tipo especificado ou o implementa.</summary>
      <param name="type">Um tipo a ser recuperado da pilha de contextos.</param>
      <returns>O primeiro objeto na pilha que herda de ou implementa o tipo especificado, ou <see langword="null" /> se nenhum objeto na pilha implementa o tipo.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
      <summary>Remove o objeto atual da pilha, retornando seu valor.</summary>
      <returns>O objeto removido da pilha; <see langword="null" /> se não houver objetos na pilha.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
      <summary>Efetua push ou coloca o objeto especificado na pilha.</summary>
      <param name="context">O objeto de contexto a ser enviado por push para a pilha.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute">
      <summary>O atributo <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> é colocado em um serializador para indicar a classe a ser usada como um provedor padrão desse tipo de serializador.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> com o tipo de provedor nomeado.</summary>
      <param name="providerTypeName">O nome do tipo de provedor de serialização.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerTypeName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> com o tipo de provedor fornecido.</summary>
      <param name="providerType">O <see cref="T:System.Type" /> do provedor de serialização.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerType" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.ProviderTypeName">
      <summary>Obtém nome de tipo do provedor de serialização.</summary>
      <returns>Uma cadeia de caracteres que contém o nome do provedor.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerLoader">
      <summary>Fornece uma interface de carregador de designer básica que pode ser usada para implementar um carregador de designer personalizado.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)">
      <summary>Começa a carregar um designer.</summary>
      <param name="host">O host do carregador por meio do qual esse carregador carrega componentes.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Dispose">
      <summary>Libera todos os recursos usados pelo <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Flush">
      <summary>Grava as alterações em cache no local do qual o designer foi carregado.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerLoader.Loading">
      <summary>Obtém um valor que indica se carregador está carregando um documento atualmente.</summary>
      <returns>
        <see langword="true" />Se o carregador estiver carregando um documento no momento; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute">
      <summary>Indica um serializador para o gerenciador de serialização a ser usado para serializar os valores do tipo ao qual esse atributo é aplicado. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" />.</summary>
      <param name="serializerTypeName">O nome totalmente qualificado do tipo de dados do serializador.</param>
      <param name="baseSerializerTypeName">O nome totalmente qualificado do tipo de dados base do serializador. Vários serializadores podem ser fornecidos para uma classe, desde que os serializadores tenham diferentes tipos base.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" />.</summary>
      <param name="serializerTypeName">O nome totalmente qualificado do tipo de dados do serializador.</param>
      <param name="baseSerializerType">O tipo de dados base do serializador. Vários serializadores podem ser fornecidos para uma classe, desde que os serializadores tenham diferentes tipos base.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.Type,System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" />.</summary>
      <param name="serializerType">O tipo de dados do serializador.</param>
      <param name="baseSerializerType">O tipo de dados base do serializador. Vários serializadores podem ser fornecidos para uma classe, desde que os serializadores tenham diferentes tipos base.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>Obtém o nome totalmente qualificado do tipo base do serializador.</summary>
      <returns>O nome do tipo totalmente qualificado do tipo base do serializador.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName">
      <summary>Obtém o nome totalmente qualificado do tipo do serializador.</summary>
      <returns>O nome do tipo totalmente qualificado do serializador.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.TypeId">
      <summary>Indica uma ID exclusiva para este tipo de atributo.</summary>
      <returns>Uma ID exclusiva para esse tipo de atributo.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost">
      <summary>Fornece uma interface que pode estender um host de designer para dar suporte a carregamento de um estado serializado.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(System.String,System.Boolean,System.Collections.ICollection)">
      <summary>Encerra a operação de carregamento do designer.</summary>
      <param name="baseClassName">O nome totalmente qualificado da classe base do documento que este designer está criando.</param>
      <param name="successful">
        <see langword="true" /> se o designer for carregado com sucesso; caso contrário, <see langword="false" />.</param>
      <param name="errorCollection">Uma coleção que contém os erros encontrados durante o carregamento, se houver. Se nenhum erro tiver sido encontrado, passe uma coleção vazia ou <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload">
      <summary>Recarrega o documento de design.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2">
      <summary>Fornece uma interface que estende <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> para especificar se erros são tolerados ao carregar um documento de design.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.CanReloadWithErrors">
      <summary>Obtém ou define um valor que indica se é possível recarregar com erros.</summary>
      <returns>
        <see langword="true" />Se o carregador do designer puder recarregar o documento de design quando forem detectados erros; caso contrário <see langword="false" />,. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.IgnoreErrorsDuringReload">
      <summary>Obtém ou define um valor que indica se os erros devem ser ignorados quando <see cref="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload" /> é chamado.</summary>
      <returns>
        <see langword="true" />Se o carregador do designer ignorar erros ao recarregar; caso contrário <see langword="false" />,. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService">
      <summary>Fornece uma interface que pode estender um carregador de designer para dar suporte a carregamento assíncrono de componentes externos.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency">
      <summary>Registra um componente externo como parte do processo de carregamento gerenciado por essa interface.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)">
      <summary>Assinala que um carregamento dependente foi concluído.</summary>
      <param name="successful">
        <see langword="true" /> se a carga do designer for bem-sucedida; <see langword="false" /> se erros tiverem impedido a conclusão do carregamento.</param>
      <param name="errorCollection">Uma coleção de erros que ocorreram durante o carregamento, se houver. Se não tiverem ocorrido erros, passe uma coleção vazia ou <see langword="null" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload">
      <summary>Recarrega o documento de design.</summary>
      <returns>
        <see langword="true" /> se a solicitação de recarregamento for aceita ou <see langword="false" /> se o carregador não permitir o recarregamento.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager">
      <summary>Fornece uma interface que pode gerenciar a serialização no tempo de design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>Adiciona o provedor de serialização especificado ao gerenciador de serialização.</summary>
      <param name="provider">O provedor de serialização a ser adicionado.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <summary>Obtém uma área de armazenamento baseada em pilha e definida pelo usuário que é útil para a comunicação entre os serializadores.</summary>
      <returns>Um <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> que armazena dados.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary>Cria uma instância do tipo especificado e adiciona-a a uma coleção de instâncias nomeadas.</summary>
      <param name="type">O tipo de dados a ser criado.</param>
      <param name="arguments">Os argumentos a serem passados ao construtor desse tipo.</param>
      <param name="name">O nome do objeto. Esse nome pode ser usado para acessar o objeto posteriormente por meio de <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" />. Se <see langword="null" /> for passado, o objeto ainda assim será criado, mas não poderá ser acessado por nome.</param>
      <param name="addToContainer">Se <see langword="true" />, esse objeto será adicionado ao contêiner de design. O objeto deve implementar <see cref="T:System.ComponentModel.IComponent" /> para que isso tenha algum efeito.</param>
      <returns>A instância de objeto recém-criada.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)">
      <summary>Obtém uma instância de um objeto criado do nome especificado ou <see langword="null" />, se esse objeto não existir.</summary>
      <param name="name">O nome do objeto a ser recuperado.</param>
      <returns>Uma instância do objeto com o nome fornecido ou <see langword="null" />, se nenhum objeto com esse nome pode ser encontrado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)">
      <summary>Obtém o nome do objeto especificado ou <see langword="null" /> se o objeto não tiver nome.</summary>
      <param name="value">O objeto para o qual recuperar o nome.</param>
      <returns>O nome do objeto ou <see langword="null" /> se o objeto não tiver um nome.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary>Obtém um serializador do tipo solicitado para o tipo de objeto especificado.</summary>
      <param name="objectType">O tipo do objeto para o qual obter o serializador.</param>
      <param name="serializerType">O tipo do serializador a ser recuperado.</param>
      <returns>Uma instância do serializador solicitado ou <see langword="null" /> se nenhum serializador adequado pode ser localizado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)">
      <summary>Obtém um tipo do nome especificado.</summary>
      <param name="typeName">O nome totalmente qualificado do tipo a ser carregado.</param>
      <returns>Uma instância do tipo ou <see langword="null" /> se o tipo não pode ser carregado.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <summary>Indica as propriedades personalizadas que podem ser serializáveis com serializadores disponíveis.</summary>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contém as propriedades a serem serializadas.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>Remove um provedor de serialização personalizado do gerenciador de serialização.</summary>
      <param name="provider">O provedor a ser removido. Esse objeto deverá ter sido adicionado usando <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)">
      <summary>Relata um erro na serialização.</summary>
      <param name="errorInformation">O erro a ser relatado. Este objeto de informações pode ser de qualquer tipo de objeto. Se for uma exceção, a mensagem da exceção será extraída e relatada ao usuário. Se for qualquer outro tipo, <see cref="M:System.Object.ToString" /> será chamado para exibir as informações para o usuário.</param>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName">
      <summary>Ocorre quando <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)" /> não consegue localizar o nome especificado na tabela de nomes do gerenciador de serialização.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete">
      <summary>Ocorre quando a serialização é concluída.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)">
      <summary>Define o nome do objeto especificado existente.</summary>
      <param name="instance">A instância do objeto a nomear.</param>
      <param name="name">O nome a ser atribuído à instância.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider">
      <summary>Fornece uma interface que permite o acesso a um serializador.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
      <summary>Obtém um serializador usando os atributos especificados.</summary>
      <param name="manager">O gerenciador de serialização solicitando o serializador.</param>
      <param name="currentSerializer">Uma instância do serializador atual do tipo especificado. Isso pode ser <see langword="null" /> se nenhum serializador do tipo especificado existe.</param>
      <param name="objectType">O tipo de dados do objeto a ser serializado.</param>
      <param name="serializerType">O tipo de dados do serializador a ser criado.</param>
      <returns>Uma instância de um serializador do tipo solicitado ou <see langword="null" />, se a solicitação não pode ser atendida.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationService">
      <summary>Fornece uma interface que pode invocar a serialização e a desserialização.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(System.Object)">
      <summary>Desserializa o objeto de dados de serialização especificado e retorna uma coleção de objetos representados por esses dados.</summary>
      <param name="serializationData">Um objeto que consiste de dados serializados.</param>
      <returns>Um <see cref="T:System.Collections.ICollection" /> de objetos recompilados do objeto de dados de serialização especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(System.Collections.ICollection)">
      <summary>Serializa a coleção de objetos especificada e os armazena em um objeto de dados de serialização.</summary>
      <param name="objects">Uma coleção de objetos a serem serializados.</param>
      <returns>Um objeto que contém o estado serializado da coleção de objetos especificada.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.INameCreationService">
      <summary>Fornece um serviço que pode gerar nomes exclusivos para objetos.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)">
      <summary>Cria um novo nome exclusivo para todos os componentes no contêiner especificado.</summary>
      <param name="container">O contêiner em que o novo objeto é adicionado.</param>
      <param name="dataType">O tipo de dados do objeto que recebe o nome.</param>
      <returns>Um nome exclusivo para o tipo de dados.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)">
      <summary>Obtém um valor que indica se o nome especificado é válido.</summary>
      <param name="name">O nome a ser validado.</param>
      <returns>
        <see langword="true" /> se o nome for válido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)">
      <summary>Obtém um valor que indica se o nome especificado é válido.</summary>
      <param name="name">O nome a ser validado.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.InstanceDescriptor">
      <summary>Fornece as informações necessárias para criar uma instância de um objeto. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> usando os argumentos e as informações do membro especificados.</summary>
      <param name="member">As informações de membro para o descritor. Pode ser <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.FieldInfo" /> ou <see cref="T:System.Reflection.PropertyInfo" />. Se for <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> ou <see cref="T:System.Reflection.PropertyInfo" />, deverá representar um membro <see langword="static" />.</param>
      <param name="arguments">A coleção de argumentos a passar para o membro. Esse parâmetro poderá ser <see langword="null" /> ou uma coleção vazia, se não houver nenhum argumento. A coleção também pode consistir em outras instâncias do <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> é do tipo <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> ou <see cref="T:System.Reflection.PropertyInfo" /> e não representa um membro <see langword="static" />.  

ou - 
<paramref name="member" /> é do tipo <see cref="T:System.Reflection.PropertyInfo" /> e não é legível.  

ou - 
<paramref name="member" /> é do tipo <see cref="T:System.Reflection.MethodInfo" /> ou <see cref="T:System.Reflection.ConstructorInfo" /> e o número de argumentos em <paramref name="arguments" /> não coincide com a assinatura de <paramref name="member" />.

ou -


<paramref name="member" /> é do tipo <see cref="T:System.Reflection.ConstructorInfo" /> e representa um membro <see langword="static" />.  

ou - 
<paramref name="member" /> é do tipo <see cref="T:System.Reflection.FieldInfo" /> e o número de argumentos em <paramref name="arguments" /> não é zero.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection,System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> usando informações do membro, argumentos e valor especificados indicando se as informações especificadas descrevem completamente a instância.</summary>
      <param name="member">As informações de membro para o descritor. Pode ser <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.FieldInfo" /> ou <see cref="T:System.Reflection.PropertyInfo" />. Se for <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> ou <see cref="T:System.Reflection.PropertyInfo" />, deverá representar um membro <see langword="static" />.</param>
      <param name="arguments">A coleção de argumentos a passar para o membro. Esse parâmetro poderá ser <see langword="null" /> ou uma coleção vazia, se não houver nenhum argumento. A coleção também pode consistir em outras instâncias do <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />.</param>
      <param name="isComplete">
        <see langword="true" /> se as informações especificadas descrevem completamente a instância; caso contrário, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> é do tipo <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> ou <see cref="T:System.Reflection.PropertyInfo" /> e não representa um membro <see langword="static" /><paramref name="member" /> é do tipo <see cref="T:System.Reflection.PropertyInfo" /> e não é legível.  
 <paramref name="member" /> é do tipo <see cref="T:System.Reflection.MethodInfo" /> ou <see cref="T:System.Reflection.ConstructorInfo" /> e o número de argumentos em <paramref name="arguments" /> não coincide com a assinatura de <paramref name="member" />.  
 <paramref name="member" /> é do tipo <see cref="T:System.Reflection.ConstructorInfo" /> e representa um membro <see langword="static" /><paramref name="member" /> é do tipo <see cref="T:System.Reflection.FieldInfo" /> e o número de argumentos em <paramref name="arguments" /> não é zero.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.Arguments">
      <summary>Obtém a coleção de argumentos que podem ser usados para reconstruir uma instância do objeto que esse descritor de instância representa.</summary>
      <returns>Um <see cref="T:System.Collections.ICollection" /> dos argumentos que podem ser usados para criar o objeto.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke">
      <summary>Invoca esse descritor de instância e retorna o objeto que o descritor descreve.</summary>
      <returns>O objeto que esse descritor de instância descreve.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.IsComplete">
      <summary>Obtém um valor que indica se o conteúdo desse <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> identificam completamente a instância.</summary>
      <returns>
        <see langword="true" />se a instância for completamente descrita; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.MemberInfo">
      <summary>Obtém as informações de membro que descrevem a instância à qual esse descritor está associado.</summary>
      <returns>Um <see cref="T:System.Reflection.MemberInfo" /> que descreve a instância à qual esse objeto está associado.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationship">
      <summary>Representa uma única relação entre um objeto e um membro.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />.</summary>
      <param name="owner">O objeto que tem <paramref name="member" />.</param>
      <param name="member">O membro que deve ser relacionado ao <paramref name="owner" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> ou <paramref name="member" /> é <see langword="null" />.</exception>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty">
      <summary>Representa a relação de membro vazio. Este campo é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.Equals(System.Object)">
      <summary>Determina se duas instâncias <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> são iguais.</summary>
      <param name="obj">O <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> a ser comparado com o <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> atual.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> especificado for igual ao <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código hash do <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> atual.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.IsEmpty">
      <summary>Obtém um valor que indica se essa relação é igual à relação <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />.</summary>
      <returns>
        <see langword="true" />Se essa relação for igual à <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> relação; caso contrário,. <see langword="false" /></returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Member">
      <summary>Obtém o membro relacionado.</summary>
      <returns>O membro que é passado para o <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Equality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Testa se duas estruturas <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> especificadas são equivalentes.</summary>
      <param name="left">A estrutura <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> que está à esquerda do operador de igualdade.</param>
      <param name="right">A estrutura <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> que está à direita do operador de igualdade.</param>
      <returns>Esse operador retornará <see langword="true" /> se as duas estruturas <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Inequality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Testa se duas estruturas <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> especificadas são diferentes.</summary>
      <param name="left">A estrutura <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> está à esquerda do operador de desigualdade.</param>
      <param name="right">A estrutura <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> está à direita do operador de desigualdade.</param>
      <returns>Esse operador retornará <see langword="true" /> se as duas estruturas <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> forem diferentes; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Owner">
      <summary>Obtém o objeto proprietário.</summary>
      <returns>O objeto de propriedade que é passado para o <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationshipService">
      <summary>Fornece a classe base para relacionar um membro a outro.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationshipService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.GetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Obtém uma relação para a relação de origem especificada.</summary>
      <param name="source">A relação de origem.</param>
      <returns>Uma relação com <paramref name="source" /> ou <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />, se não houver uma relação.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Estabelece uma relação entre um objeto de origem e de destino.</summary>
      <param name="source">A relação de origem. Este é o lado esquerdo de uma atribuição de relacionamento.</param>
      <returns>A relação atual associada <paramref name="source" />a, ou <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> se não houver nenhuma relação.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> está vazio ou a relação não é compatível com o serviço.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>Estabelece uma relação entre um objeto de origem e de destino.</summary>
      <param name="sourceOwner">O proprietário de uma relação de origem.</param>
      <param name="sourceMember">O membro de uma relação de origem.</param>
      <returns>Uma <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> estrutura que encapsula a relação entre um objeto de origem e de destino <see langword="null" /> ou se não há nenhuma relação.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceOwner" /> ou <paramref name="sourceMember" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceOwner" /> ou <paramref name="sourceMember" /> está vazio ou a relação não é compatível com o serviço.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Cria uma relação entre a relação de destino e o objeto de origem.</summary>
      <param name="source">A relação de origem.</param>
      <param name="relationship">A relação a ser definida na origem.</param>
      <exception cref="T:System.ArgumentException">A relação não é compatível com o serviço.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>Obtém um valor que indica se há suporte para a relação informada.</summary>
      <param name="source">A relação de origem.</param>
      <param name="relationship">A relação a ser definida na origem.</param>
      <returns>
        <see langword="true" /> se houver compatibilidade com uma relação entre os dois objetos determinados; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs">
      <summary>Fornece dados para o evento de <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />.</summary>
      <param name="name">O nome a ser resolvido.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Name">
      <summary>Obtém o nome do objeto a ser resolvido.</summary>
      <returns>O nome do objeto a ser resolvido.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Value">
      <summary>Obtém ou define o objeto que corresponde ao nome.</summary>
      <returns>O objeto ao qual o nome está associado.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventHandler">
      <summary>Representa o método que manipula o evento <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> de um gerenciador de serialização.</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">Um <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
      <summary>Indica o serializador base a ser usado para um objeto de designer raiz. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> usando os atributos especificados.</summary>
      <param name="serializerTypeName">O nome totalmente qualificado do tipo de dados do serializador.</param>
      <param name="baseSerializerTypeName">O nome do tipo base do serializador. Uma classe pode incluir vários serializadores, já que todos eles têm tipos base diferentes.</param>
      <param name="reloadable">
        <see langword="true" /> se este serializador dá suporte a recarregamento dinâmico do documento; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> usando os atributos especificados.</summary>
      <param name="serializerTypeName">O nome totalmente qualificado do tipo de dados do serializador.</param>
      <param name="baseSerializerType">O nome do tipo base do serializador. Uma classe pode incluir vários serializadores, já que todos eles têm tipos base diferentes.</param>
      <param name="reloadable">
        <see langword="true" /> se este serializador dá suporte a recarregamento dinâmico do documento; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> usando os atributos especificados.</summary>
      <param name="serializerType">O tipo de dados do serializador.</param>
      <param name="baseSerializerType">O tipo base do serializador. Uma classe pode incluir vários serializadores, já que todos eles têm tipos base diferentes.</param>
      <param name="reloadable">
        <see langword="true" /> se este serializador dá suporte a recarregamento dinâmico do documento; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
      <summary>Obtém um valor que indica se o serializador raiz dá suporte ao recarregamento do documento de design sem descartar primeiro o host de designer.</summary>
      <returns>
        <see langword="true" />Se o serializador raiz der suporte ao recarregamento; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>Obtém o nome totalmente qualificado do tipo base do serializador.</summary>
      <returns>O nome do tipo base do serializador.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName">
      <summary>Obtém o nome totalmente qualificado do tipo do serializador.</summary>
      <returns>O nome do tipo do serializador.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
      <summary>Obtém uma ID exclusiva para este tipo de atributo.</summary>
      <returns>Um objeto que contém uma ID exclusiva para esse tipo de atributo.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.SerializationStore">
      <summary>Fornece a classe base para armazenar dados de serialização para o <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Close">
      <summary>Fecha o repositório de serialização.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Dispose(System.Boolean)">
      <summary>Libera os recursos não gerenciados usados pelo <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> e opcionalmente libera os recursos gerenciados.</summary>
      <param name="disposing">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.SerializationStore.Errors">
      <summary>Obtém uma coleção de erros que ocorreram durante a serialização ou desserialização.</summary>
      <returns>Um <see cref="T:System.Collections.ICollection" /> que contém erros ocorridos durante a serialização ou desserialização.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)">
      <summary>Salva o repositório para o fluxo fornecido.</summary>
      <param name="stream">O fluxo para o qual o repositório será serializado.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.System#IDisposable#Dispose">
      <summary>Libera todos os recursos usados pelo <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceContainer">
      <summary>Fornece uma implementação simples da interface <see cref="T:System.ComponentModel.Design.IServiceContainer" />. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.ServiceContainer" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.ServiceContainer" /> usando o provedor de serviço pai especificado.</summary>
      <param name="parentProvider">Um provedor de serviço pai.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>Adiciona o serviço especificado ao contêiner de serviço.</summary>
      <param name="serviceType">O tipo de serviço a ser adicionado.</param>
      <param name="callback">Um objeto de retorno de chamada que pode criar o serviço. Isso permite que um serviço seja declarado como disponíveis, mas atrasa a criação do objeto até que o serviço seja solicitado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> ou <paramref name="callback" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Já existe um serviço do tipo <paramref name="serviceType" /> no contêiner.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>Adiciona o serviço especificado ao contêiner de serviço.</summary>
      <param name="serviceType">O tipo de serviço a ser adicionado.</param>
      <param name="callback">Um objeto de retorno de chamada que pode criar o serviço. Isso permite que um serviço seja declarado como disponíveis, mas atrasa a criação do objeto até que o serviço seja solicitado.</param>
      <param name="promote">
        <see langword="true" /> se esse serviço precisar ser adicionado a quaisquer contêineres de serviço pai; caso contrário, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> ou <paramref name="callback" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Já existe um serviço do tipo <paramref name="serviceType" /> no contêiner.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)">
      <summary>Adiciona o serviço especificado ao contêiner de serviço.</summary>
      <param name="serviceType">O tipo de serviço a ser adicionado.</param>
      <param name="serviceInstance">Uma instância do serviço a ser adicionado. Esse objeto deve implementar ou herdar do tipo indicado pelo parâmetro <paramref name="serviceType" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> ou <paramref name="serviceInstance" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Já existe um serviço do tipo <paramref name="serviceType" /> no contêiner.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>Adiciona o serviço especificado ao contêiner de serviço.</summary>
      <param name="serviceType">O tipo de serviço a ser adicionado.</param>
      <param name="serviceInstance">Uma instância do tipo de serviço a ser adicionado. Esse objeto deve implementar ou herdar do tipo indicado pelo parâmetro <paramref name="serviceType" />.</param>
      <param name="promote">
        <see langword="true" /> se esse serviço precisar ser adicionado a quaisquer contêineres de serviço pai; caso contrário, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> ou <paramref name="serviceInstance" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Já existe um serviço do tipo <paramref name="serviceType" /> no contêiner.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.ServiceContainer.DefaultServices">
      <summary>Obtém os serviços padrão implementados diretamente pelo <see cref="T:System.ComponentModel.Design.ServiceContainer" />.</summary>
      <returns>Os serviços padrão.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose">
      <summary>Descarta este contêiner de serviço.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose(System.Boolean)">
      <summary>Descarta este contêiner de serviço.</summary>
      <param name="disposing">
        <see langword="true" /> se o <see cref="T:System.ComponentModel.Design.ServiceContainer" /> estiver no processo de ser descartado; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)">
      <summary>Obtém o serviço solicitado.</summary>
      <param name="serviceType">O tipo de serviço a ser recuperado.</param>
      <returns>Uma instância do serviço, se puder ser encontrada; <see langword="null" /> se ele não puder ser encontrada.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)">
      <summary>Remove o tipo de serviço especificado do contêiner de serviço.</summary>
      <param name="serviceType">O tipo de serviço a ser removido.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>Remove o tipo de serviço especificado do contêiner de serviço.</summary>
      <param name="serviceType">O tipo de serviço a ser removido.</param>
      <param name="promote">
        <see langword="true" /> se esse serviço precisar ser removido de quaisquer contêineres de serviço pai; caso contrário, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceCreatorCallback">
      <summary>Fornece um mecanismo de retorno de chamada que pode criar uma instância de um serviço sob demanda.</summary>
      <param name="container">O contêiner de serviço que solicitou a criação do serviço.</param>
      <param name="serviceType">O tipo do serviço a ser criado.</param>
      <returns>O serviço especificado por <paramref name="serviceType" /> ou então <see langword="null" />, se o serviço não pôde ser criado.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.StandardCommands">
      <summary>Define os identificadores para o conjunto padrão de comandos disponíveis para a maioria dos aplicativos.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardCommands.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.StandardCommands" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignBottom">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando AlignBottom. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignHorizontalCenters">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando AlignHorizontalCenters. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignLeft">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando AlignLeft. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignRight">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando AlignRight. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignToGrid">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando AlignToGrid. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignTop">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando AlignTop. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignVerticalCenters">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando AlignVerticalCenters. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeBottom">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando ArrangeBottom. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeIcons">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando ArrangeIcons. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeRight">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando ArrangeRight. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringForward">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando BringForward. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringToFront">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando BringToFront. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterHorizontally">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando CenterHorizontally. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterVertically">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando CenterVertically. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Copy">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando Copy. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Cut">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando Cut. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Delete">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando Delete. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.DocumentOutline">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando Document Outline. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.F1Help">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando F1Help. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Group">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando Group. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceConcatenate">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando HorizSpaceConcatenate. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceDecrease">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando HorizSpaceDecrease. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceIncrease">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando HorizSpaceIncrease. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceMakeEqual">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando HorizSpaceMakeEqual. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LineupIcons">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando LineupIcons. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LockControls">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando LockControls. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelRedo">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando MultiLevelRedo. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelUndo">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando MultiLevelUndo. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Paste">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando Paste. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Properties">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando Properties. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.PropertiesWindow">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando PropertiesWindow. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Redo">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando Redo. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Replace">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando Replace. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SelectAll">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando SelectAll. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendBackward">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando SendBackward. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendToBack">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando SendToBack. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowGrid">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando ShowGrid. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowLargeIcons">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando ShowLargeIcons. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControl">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando SizeToControl. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlHeight">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando SizeToControlHeight. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlWidth">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando SizeToControlWidth. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToFit">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando SizeToFit. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToGrid">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando SizeToGrid. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SnapToGrid">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando SnapToGrid. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.TabOrder">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando TabOrder. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Undo">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando Undo. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Ungroup">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando Ungroup. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbFirst">
      <summary>Obtém o primeiro de um conjunto de verbos. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbLast">
      <summary>Obtém o último de um conjunto de verbos. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceConcatenate">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando VertSpaceConcatenate. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceDecrease">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando VertSpaceDecrease. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceIncrease">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando VertSpaceIncrease. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceMakeEqual">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando VertSpaceMakeEqual. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewCode">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando ViewCode. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewGrid">
      <summary>Obtém a <see cref="T:System.ComponentModel.Design.CommandID" /> do comando ViewGrid. Este campo é somente leitura.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.StandardToolWindows">
      <summary>Define os identificadores GUID que correspondem ao conjunto padrão de janelas de ferramentas disponíveis no ambiente de design.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardToolWindows.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.StandardToolWindows" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ObjectBrowser">
      <summary>Obtém o GUID do pesquisador de objetos. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.OutputWindow">
      <summary>Obtém o GUID da janela de saída. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ProjectExplorer">
      <summary>Obtém o GUID do gerenciador de soluções. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.PropertyBrowser">
      <summary>Obtém o GUID da janela Propriedades. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.RelatedLinks">
      <summary>Obtém o GUID do quadro de links relacionados. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ServerExplorer">
      <summary>Obtém o GUID do gerenciador de servidores. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.TaskList">
      <summary>Obtém o GUID da lista de tarefas. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.Toolbox">
      <summary>Obtém o GUID da caixa de ferramentas. Este campo é somente leitura.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.TypeDescriptionProviderService">
      <summary>Fornece um provedor de descrição de tipo para um tipo especificado.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Design.TypeDescriptionProviderService" />.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Object)">
      <summary>Obtém um provedor de descrição de tipo para o objeto especificado.</summary>
      <param name="instance">O objeto para obter um provedor de descrição de tipo para.</param>
      <returns>Um <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> que corresponde à <paramref name="instance" />.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Type)">
      <summary>Obtém um provedor de descrição de tipo para o tipo especificado.</summary>
      <param name="type">O tipo para obter um provedor de descrição de tipo para.</param>
      <returns>Um <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> que corresponde à <paramref name="type" />.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ViewTechnology">
      <summary>Define os identificadores de um conjunto de tecnologias compatíveis com hosts de designer.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Default">
      <summary>Especifica o suporte de tecnologia de exibição padrão.
O designer raiz pode retornar qualquer tipo de objeto, mas o objeto deve ser compatível com um adaptador para a tecnologia do host. Ambientes de hospedagem, como o Visual Studio, fornecem uma maneira de conectar novos adaptadores de tecnologia de exibição. O objeto de exibição padrão para o designer do Windows Forms é uma instância de <see cref="T:System.Windows.Forms.Control" />.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
      <summary>Representa um modo no qual o objeto de exibição é passado diretamente para o ambiente de desenvolvimento.
O objeto de exibição deve implementar qualquer interface exigida pelo ambiente de desenvolvimento. O ambiente de desenvolvimento do Visual Studio dá suporte a objetos de exibição que são um controle ActiveX, um documento ativo ou um objeto que implementa a interface IVsWindowPane disponível por meio do programa VSI (Visual Studio Integration) do Visual Studio. O ambiente de desenvolvimento do Visual Studio dá suporte a esta tecnologia de exibição. Suporte para esta tecnologia de exibição não está necessariamente disponível em todos os ambientes de desenvolvimento.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
      <summary>Representa um modo no qual um objeto de controle do Windows Forms fornece a exibição para o designer raiz. O host do designer preenche a janela do documento do ambiente de desenvolvimento com o controle do Windows Forms.</summary>
    </member>
    <member name="T:System.ComponentModel.DesignerAttribute">
      <summary>Especifica a classe usada para implementar os serviços de tempo de design para um componente.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DesignerAttribute" /> usando o nome do tipo que fornece serviços de tempo de design.</summary>
      <param name="designerTypeName">A concatenação do nome totalmente qualificado do tipo que fornece serviços de tempo de design para o componente ao qual este atributo está associado e do nome do assembly no qual esse tipo reside.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DesignerAttribute" /> usando o tipo de designer e a classe base para o designer.</summary>
      <param name="designerTypeName">A concatenação do nome totalmente qualificado do tipo que fornece serviços de tempo de design para o componente ao qual este atributo está associado e do nome do assembly no qual esse tipo reside.</param>
      <param name="designerBaseTypeName">O nome totalmente qualificado da classe base a ser associada com a classe do designer.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DesignerAttribute" /> usando o nome da classe de designer e a classe base para o designer.</summary>
      <param name="designerTypeName">A concatenação do nome totalmente qualificado do tipo que fornece serviços de tempo de design para o componente ao qual este atributo está associado e do nome do assembly no qual esse tipo reside.</param>
      <param name="designerBaseType">Um <see cref="T:System.Type" /> que representa a classe base a ser associada ao <paramref name="designerTypeName" />.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DesignerAttribute" /> usando o tipo que fornece serviços de tempo de design.</summary>
      <param name="designerType">Um <see cref="T:System.Type" /> que representa a classe que fornece serviços de tempo de design para o componente ao qual este atributo está associado.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type,System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DesignerAttribute" /> usando os tipos do designer e a classe base do designer.</summary>
      <param name="designerType">Um <see cref="T:System.Type" /> que representa a classe que fornece serviços de tempo de design para o componente ao qual este atributo está associado.</param>
      <param name="designerBaseType">Um <see cref="T:System.Type" /> que representa a classe base a ser associada ao <paramref name="designerType" />.</param>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerBaseTypeName">
      <summary>Obtém o nome do tipo base deste designer.</summary>
      <returns>O nome do tipo base deste designer.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerTypeName">
      <summary>Obtém o nome do tipo de designer associado a este atributo do designer.</summary>
      <returns>O nome do tipo de designer associado a este atributo de designer.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.Equals(System.Object)">
      <summary>Retorna se o valor do objeto especificado é igual ao <see cref="T:System.ComponentModel.DesignerAttribute" /> atual.</summary>
      <param name="obj">O objeto cuja igualdade de valor deve ser testada.</param>
      <returns>
        <see langword="true" /> se o valor do objeto especificado for igual do atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.TypeId">
      <summary>Obtém uma ID exclusiva para este tipo de atributo.</summary>
      <returns>Uma ID exclusiva para esse tipo de atributo.</returns>
    </member>
    <member name="T:System.ComponentModel.DesignTimeVisibleAttribute">
      <summary>
        <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> marca a visibilidade de um componente. Se <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes" /> estiver presente, um designer visual poderá mostrar esse componente em um designer.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor">
      <summary>Cria um novo <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> definido para o valor padrão de <see langword="false" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor(System.Boolean)">
      <summary>Cria um novo <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> com a propriedade <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> definida para o valor especificado em <paramref name="visible" />.</summary>
      <param name="visible">O valor segundo o qual a propriedade <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> será definida.</param>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Default">
      <summary>A visibilidade padrão, que é <see langword="Yes" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.Equals(System.Object)">
      <summary>Retorna um valor que indica se essa instância é igual a um objeto especificado.</summary>
      <param name="obj">Um Object a ser comparado a esta instância ou a uma referência nula (<see langword="Nothing" /> no Visual Basic).</param>
      <returns>
        <see langword="true" /> se <paramref name="obj" /> for igual ao tipo e ao valor dessa instância, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.IsDefaultAttribute">
      <summary>Obtém um valor indicando se esta instância é igual ao valor de <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" />.</summary>
      <returns>
        <see langword="true" /> se está instância é igual ao valor de <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.No">
      <summary>Marca um componente como não visível em um designer visual.</summary>
    </member>
    <member name="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible">
      <summary>Obtém ou define se o componente deve ser mostrado em tempo de design.</summary>
      <returns>
        <see langword="true" />Se esse componente deve ser mostrado em tempo de design ou <see langword="false" /> se não deveria.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes">
      <summary>Marca um componente como visível em um designer visual.</summary>
    </member>
    <member name="T:System.ComponentModel.DoubleConverter">
      <summary>Fornece um conversor de tipo para converter objetos de número de ponto flutuante de precisão dupla de e para várias outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.DoubleConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.DoubleConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.EditorAttribute">
      <summary>Especifica o editor que deve ser usado para alterar uma propriedade. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.EditorAttribute" /> com o editor padrão, que não é nenhum editor.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.EditorAttribute" /> com o nome do tipo e o nome do tipo base do editor.</summary>
      <param name="typeName">O nome de tipo totalmente qualificado do editor.</param>
      <param name="baseTypeName">O tipo totalmente qualificado da classe base ou a interface a ser usada como uma chave de pesquisa para o editor. Essa classe deve ser ou deve ser derivada de <see cref="T:System.Drawing.Design.UITypeEditor" />.</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.EditorAttribute" /> com o nome do topo e o tipo base.</summary>
      <param name="typeName">O nome de tipo totalmente qualificado do editor.</param>
      <param name="baseType">O <see cref="T:System.Type" /> da classe base ou a interface a ser usado como uma chave de pesquisa para o editor. Essa classe deve ser ou deve ser derivada de <see cref="T:System.Drawing.Design.UITypeEditor" />.</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.Type,System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.EditorAttribute" /> com o tipo e tipo base.</summary>
      <param name="type">Um <see cref="T:System.Type" /> que representa o tipo do editor.</param>
      <param name="baseType">O <see cref="T:System.Type" /> da classe base ou a interface a ser usado como uma chave de pesquisa para o editor. Essa classe deve ser ou deve ser derivada de <see cref="T:System.Drawing.Design.UITypeEditor" />.</param>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorBaseTypeName">
      <summary>Obtém o nome da classe base ou interface que serve como uma chave de pesquisa para este editor.</summary>
      <returns>O nome da classe base ou interface que serve como uma chave de pesquisa para esse editor.</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorTypeName">
      <summary>Obtém o nome da classe no editor no formato <see cref="P:System.Type.AssemblyQualifiedName" />.</summary>
      <returns>O nome da classe do editor no <see cref="P:System.Type.AssemblyQualifiedName" /> formato.</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.Equals(System.Object)">
      <summary>Retorna se o valor do objeto especificado é igual ao <see cref="T:System.ComponentModel.EditorAttribute" /> atual.</summary>
      <param name="obj">O objeto cuja igualdade de valor deve ser testada.</param>
      <returns>
        <see langword="true" /> se o valor do objeto especificado for igual do objeto atual, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.TypeId">
      <summary>Obtém uma ID exclusiva para este tipo de atributo.</summary>
      <returns>Uma ID exclusiva para esse tipo de atributo.</returns>
    </member>
    <member name="T:System.ComponentModel.EnumConverter">
      <summary>Fornece um conversor de tipo para converter objetos <see cref="T:System.Enum" /> para e de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.EnumConverter" /> para o caminho fornecido.</summary>
      <param name="type">Um <see cref="T:System.Type" /> que representa o tipo de enumeração a ser associado a este conversor de enumeração.</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtém um valor que indica se este conversor pode converter um objeto no tipo de origem especificado para um objeto de enumeração usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtém um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType">Um <see cref="T:System.Type" /> que representa o tipo no qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Comparer">
      <summary>Obtém um <see cref="T:System.Collections.IComparer" /> que pode ser usado para classificar os valores da enumeração.</summary>
      <returns>Um <see cref="T:System.Collections.IComparer" /> para classificar os valores de enumeração.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converte o objeto de valor especificado em um objeto de enumeração.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" /> opcional. Se não for fornecido, a cultura atual será assumida.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> não é um valor válido para o tipo de destino.</exception>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte o objeto de valor especificado para o tipo de destino especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" /> opcional. Se não for fornecido, a cultura atual será assumida.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType">O <see cref="T:System.Type" /> para o qual converter o valor.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> não é um valor válido para a enumeração.</exception>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.EnumType">
      <summary>Especifica o tipo de enumerador ao qual esse conversor está associado.</summary>
      <returns>O tipo do enumerador ao qual este conversor está associado.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtém uma coleção de valores padrão para o tipo de dados para o qual este validador é projetado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>Um <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que contém um conjunto padrão de valores válidos ou <see langword="null" />, se o tipo de dados não der suporte a um conjunto padrão de valores.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtém um valor que indica se a lista de valores padrão retornados do método <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> é uma lista exclusiva usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retornado de <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> for uma lista completa de valores possíveis, <see langword="false" /> se houver outros valores possíveis.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtém um valor que indica se esse objeto dá suporte a um conjunto padrão de valores que podem ser escolhidos em uma lista usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>
        <see langword="true" /> porque <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> deve ser chamado para localizar um conjunto comum de valores aos quais o objeto dá suporte. Esse método nunca retorna <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Obtém um valor que indica se o valor de objeto fornecido é válido para este tipo.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser testado.</param>
      <returns>
        <see langword="true" /> se o valor especificado for válido para esse objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Values">
      <summary>Obtém ou define um <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que especifica os valores possíveis para a enumeração.</summary>
      <returns>Um <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> valor que especifica os valores possíveis para a enumeração.</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptor">
      <summary>Fornece informações sobre um evento.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.EventDescriptor" /> com o nome e os atributos no <see cref="T:System.ComponentModel.MemberDescriptor" /> especificado.</summary>
      <param name="descr">Um <see cref="T:System.ComponentModel.MemberDescriptor" /> que contém o nome do evento e seus atributos.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.EventDescriptor" /> com o nome no <see cref="T:System.ComponentModel.MemberDescriptor" /> especificado e os atributos tanto no <see cref="T:System.ComponentModel.MemberDescriptor" /> quanto na matriz <see cref="T:System.Attribute" />.</summary>
      <param name="descr">Um <see cref="T:System.ComponentModel.MemberDescriptor" /> que tem o nome do membro e seus atributos.</param>
      <param name="attrs">Uma matriz <see cref="T:System.Attribute" /> com os atributos que você deseja adicionar a esta descrição do evento.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.EventDescriptor" /> com o nome e a matriz de atributo especificados.</summary>
      <param name="name">O nome do evento.</param>
      <param name="attrs">Uma matriz do tipo <see cref="T:System.Attribute" /> que contém os atributos de evento.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)">
      <summary>Quando substituído em uma classe derivada, associa o evento ao componente.</summary>
      <param name="component">Um componente que fornece eventos para o delegado.</param>
      <param name="value">Um delegado que representa o método que manipula o evento.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.ComponentType">
      <summary>Quando substituído em uma classe derivada, obtém o tipo de componente ao qual esse evento está associado.</summary>
      <returns>Um <see cref="T:System.Type" /> que representa o tipo de componente ao qual o evento está associado.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.EventType">
      <summary>Quando substituído em uma classe derivada, obtém o tipo de delegado do evento.</summary>
      <returns>Um <see cref="T:System.Type" /> que representa o tipo de delegado para o evento.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.IsMulticast">
      <summary>Quando substituído em uma classe derivada, obtém um valor que indica se o delegado do evento é um delegado multicast.</summary>
      <returns>
        <see langword="true" />Se o representante do evento for multicast; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>Quando substituído em uma classe derivada, desassocia o delegado do componente de forma que o delegado não receberá mais eventos do componente.</summary>
      <param name="component">O componente ao qual o delegado está associado.</param>
      <param name="value">O delegado a ser desassociado da lista.</param>
    </member>
    <member name="T:System.ComponentModel.EventDescriptorCollection">
      <summary>Representa uma coleção de objetos <see cref="T:System.ComponentModel.EventDescriptor" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.EventDescriptorCollection" /> com a matriz determinada de objetos <see cref="T:System.ComponentModel.EventDescriptor" />.</summary>
      <param name="events">Uma matriz do tipo <see cref="T:System.ComponentModel.EventDescriptor" /> que fornece os eventos para essa coleção.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.EventDescriptorCollection" /> com a matriz determinada de objetos <see cref="T:System.ComponentModel.EventDescriptor" />. Opcionalmente, a coleção é somente leitura.</summary>
      <param name="events">Uma matriz do tipo <see cref="T:System.ComponentModel.EventDescriptor" /> que fornece os eventos para essa coleção.</param>
      <param name="readOnly">
        <see langword="true" /> para especificar uma coleção somente leitura; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)">
      <summary>Adiciona um <see cref="T:System.ComponentModel.EventDescriptor" /> ao fim da coleção.</summary>
      <param name="value">O <see cref="T:System.ComponentModel.EventDescriptor" /> a ser adicionado à coleção.</param>
      <returns>A posição do <see cref="T:System.ComponentModel.EventDescriptor" /> dentro da coleção.</returns>
      <exception cref="T:System.NotSupportedException">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Clear">
      <summary>Remove todos os objetos da coleção.</summary>
      <exception cref="T:System.NotSupportedException">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)">
      <summary>Retorna se a coleção contém o <see cref="T:System.ComponentModel.EventDescriptor" /> indicado.</summary>
      <param name="value">O <see cref="T:System.ComponentModel.EventDescriptor" /> a ser localizado dentro da coleção.</param>
      <returns>
        <see langword="true" /> se a coleção contiver o parâmetro <paramref name="value" /> fornecido, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Count">
      <summary>Obtém o número de descritores de evento na coleção.</summary>
      <returns>O número de descritores de eventos na coleção.</returns>
    </member>
    <member name="F:System.ComponentModel.EventDescriptorCollection.Empty">
      <summary>Especifica uma coleção vazia a ser usada, em vez de criar uma nova sem nenhum item. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>Obtém a descrição do evento com o nome especificado na coleção.</summary>
      <param name="name">O nome do evento a ser obtido da coleção.</param>
      <param name="ignoreCase">
        <see langword="true" /> se você deseja ignorar a diferenciação entre minúsculas e maiúsculas no evento; caso contrário, <see langword="false" />.</param>
      <returns>O <see cref="T:System.ComponentModel.EventDescriptor" /> com o nome especificado ou <see langword="null" />, se o evento não existir.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.GetEnumerator">
      <summary>Obtém um enumerador para este <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</summary>
      <returns>Um enumerador que implementa <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)">
      <summary>Retorna o índice do <see cref="T:System.ComponentModel.EventDescriptor" /> fornecido.</summary>
      <param name="value">O <see cref="T:System.ComponentModel.EventDescriptor" /> a ser localizado dentro da coleção.</param>
      <returns>O índice do <see cref="T:System.ComponentModel.EventDescriptor" /> fornecido dentro da coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)">
      <summary>Insere um <see cref="T:System.ComponentModel.EventDescriptor" /> na coleção em um índice especificado.</summary>
      <param name="index">O índice dentro da coleção na qual inserir o parâmetro <paramref name="value" />.</param>
      <param name="value">O <see cref="T:System.ComponentModel.EventDescriptor" /> a ser inserido na coleção.</param>
      <exception cref="T:System.NotSupportedException">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>Classifica os membros deste <see cref="T:System.ComponentModel.EventDescriptorCollection" /> usando o <see cref="T:System.Collections.IComparer" />especificado.</summary>
      <param name="sorter">Um comparador a ser usado para classificar os objetos <see cref="T:System.ComponentModel.EventDescriptor" /> nesta coleção.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])">
      <summary>Classifica os membros deste <see cref="T:System.ComponentModel.EventDescriptorCollection" />. A ordem especificada é aplicada primeiro, seguida pela classificação padrão desta coleção, que, geralmente, é em ordem alfabética.</summary>
      <param name="names">Uma matriz de cadeias de caracteres que descreve a ordem de classificação dos objetos <see cref="T:System.ComponentModel.EventDescriptor" /> nesta coleção.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)">
      <summary>Obtém ou define o evento com o número de índice especificado.</summary>
      <param name="index">O número do índice de base zero do <see cref="T:System.ComponentModel.EventDescriptor" /> a ser obtido ou definido.</param>
      <returns>O <see cref="T:System.ComponentModel.EventDescriptor" /> com o número de índice especificado.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> não é um índice válido para <see cref="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.String)">
      <summary>Obtém ou define o evento com o nome especificado.</summary>
      <param name="name">O nome do <see cref="T:System.ComponentModel.EventDescriptor" /> a ser obtido ou definido.</param>
      <returns>O <see cref="T:System.ComponentModel.EventDescriptor" /> com o nome especificado ou <see langword="null" />, se o evento não existir.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)">
      <summary>Remove o <see cref="T:System.ComponentModel.EventDescriptor" /> especificado da coleção.</summary>
      <param name="value">O <see cref="T:System.ComponentModel.EventDescriptor" /> a ser removido da coleção.</param>
      <exception cref="T:System.NotSupportedException">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)">
      <summary>Remove o <see cref="T:System.ComponentModel.EventDescriptor" /> no índice especificado da coleção.</summary>
      <param name="index">O índice do <see cref="T:System.ComponentModel.EventDescriptor" /> a ser removido.</param>
      <exception cref="T:System.NotSupportedException">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort">
      <summary>Classifica os membros deste <see cref="T:System.ComponentModel.EventDescriptorCollection" />, usando a classificação padrão para esta coleção, que é geralmente em ordem alfabética.</summary>
      <returns>O novo <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>Classifica os membros deste <see cref="T:System.ComponentModel.EventDescriptorCollection" /> usando o <see cref="T:System.Collections.IComparer" />especificado.</summary>
      <param name="comparer">Um <see cref="T:System.Collections.IComparer" /> a ser usado para classificar objetos <see cref="T:System.ComponentModel.EventDescriptor" /> nesta coleção.</param>
      <returns>O novo <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])">
      <summary>Classifica os membros deste <see cref="T:System.ComponentModel.EventDescriptorCollection" />, dada uma ordem de classificação especificada.</summary>
      <param name="names">Uma matriz de cadeias de caracteres que descreve a ordem de classificação dos objetos <see cref="T:System.ComponentModel.EventDescriptor" /> na coleção.</param>
      <returns>O novo <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>Classifica os membros deste <see cref="T:System.ComponentModel.EventDescriptorCollection" />, dada uma ordem de classificação especificada e um <see cref="T:System.Collections.IComparer" />.</summary>
      <param name="names">Uma matriz de cadeias de caracteres que descreve a ordem de classificação dos objetos <see cref="T:System.ComponentModel.EventDescriptor" /> na coleção.</param>
      <param name="comparer">Um <see cref="T:System.Collections.IComparer" /> a ser usado para classificar objetos <see cref="T:System.ComponentModel.EventDescriptor" /> nesta coleção.</param>
      <returns>O novo <see cref="T:System.ComponentModel.EventDescriptorCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos da coleção para um <see cref="T:System.Array" />, começando em um índice <see cref="T:System.Array" /> específico.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados da coleção. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="index">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#Count">
      <summary>Obtém o número de elementos contidos na coleção.</summary>
      <returns>O número de elementos contidos na coleção.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso à coleção é sincronizado.</summary>
      <returns>
        <see langword="true" />Se o acesso à coleção for sincronizado; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso à coleção.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso à coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary>Adiciona um item à coleção.</summary>
      <param name="value">O <see cref="T:System.Object" /> a adicionar à coleção.</param>
      <returns>A posição na qual o novo elemento foi inserido.</returns>
      <exception cref="T:System.NotSupportedException">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Clear">
      <summary>Remove todos os itens da coleção.</summary>
      <exception cref="T:System.NotSupportedException">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determina se a coleção contém um valor específico.</summary>
      <param name="value">O <see cref="T:System.Object" /> a ser localizado na coleção.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Object" /> for encontrado na coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determina o índice de um item específico na coleção.</summary>
      <param name="value">O <see cref="T:System.Object" /> a ser localizado na coleção.</param>
      <returns>O índice de <paramref name="value" /> se encontrado na lista; caso contrário, -1.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Insere um item na coleção no índice especificado.</summary>
      <param name="index">O índice de base zero no qual o <paramref name="value" /> deve ser inserido.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser inserido na coleção.</param>
      <exception cref="T:System.NotSupportedException">A coleção é somente leitura.</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary>Obtém um valor que indica se a coleção tem um tamanho fixo.</summary>
      <returns>
        <see langword="true" />se a coleção tiver um tamanho fixo; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary>Obtém um valor que indica se a coleção é somente leitura.</summary>
      <returns>
        <see langword="true" /> se a coleção for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Obtém ou define o elemento no índice especificado.</summary>
      <param name="index">O índice com base em zero do elemento a ser obtido ou definido.</param>
      <returns>O elemento no índice especificado.</returns>
      <exception cref="T:System.NotSupportedException">A coleção é somente leitura.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> é menor que 0.  

ou - 
<paramref name="index" /> é igual a ou maior que <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Remove a primeira ocorrência de um objeto específico da coleção.</summary>
      <param name="value">O <see cref="T:System.Object" /> a ser removido da coleção.</param>
      <exception cref="T:System.NotSupportedException">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Remove o item no índice especificado.</summary>
      <param name="index">O índice com base em zero do item a ser removido.</param>
      <exception cref="T:System.NotSupportedException">A coleção é somente leitura.</exception>
    </member>
    <member name="T:System.ComponentModel.ExpandableObjectConverter">
      <summary>Fornece um conversor de tipo para converter objetos expansíveis de e para diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ExpandableObjectConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Obtém uma coleção de propriedades para o tipo de objeto especificado pelo parâmetro de valor.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value">Um <see cref="T:System.Object" /> que especifica o tipo de objeto o qual obter as propriedades.</param>
      <param name="attributes">Uma matriz do tipo <see cref="T:System.Attribute" /> que será usada como um filtro.</param>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades expostas para o componente ou <see langword="null" />, se não houver nenhuma propriedade.</returns>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtém um valor que indica se este objeto dá suporte às propriedades usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>
        <see langword="true" />, porque <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> deve ser chamado para localizar as propriedades deste objeto. Esse método nunca retorna <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ExtenderProvidedPropertyAttribute">
      <summary>Especifica uma propriedade que é oferecida por um provedor do extensor. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ExtenderProvidedPropertyAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals(System.Object)">
      <summary>Retorna um valor que indica se essa instância é igual a um objeto especificado.</summary>
      <param name="obj">Um <see cref="T:System.Object" /> a ser comparado a esta instância ou a uma referência nula (<see langword="Nothing" /> no Visual Basic).</param>
      <returns>
        <see langword="true" /> se <paramref name="obj" /> for igual ao tipo e ao valor dessa instância, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ExtenderProperty">
      <summary>Obtém a propriedade que está sendo fornecida.</summary>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> encapsulamento da propriedade que está sendo fornecida.</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.IsDefaultAttribute">
      <summary>Fornece uma indicação se o valor dessa instância for o valor padrão para a classe derivada.</summary>
      <returns>
        <see langword="true" /> se a instância for o atributo padrão para a classe; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.Provider">
      <summary>Obtém o provedor do extensor que está fornecendo a propriedade.</summary>
      <returns>O <see cref="T:System.ComponentModel.IExtenderProvider" /> que está fornecendo a propriedade.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ReceiverType">
      <summary>Obtém o tipo de objeto que pode receber a propriedade.</summary>
      <returns>Um <see cref="T:System.Type" /> que descreve o tipo de objeto que pode receber a propriedade.</returns>
    </member>
    <member name="T:System.ComponentModel.GuidConverter">
      <summary>Fornece um conversor de tipo para converter objetos <see cref="T:System.Guid" /> para e de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.GuidConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtém um valor que indica se esse conversor pode converter um objeto do tipo de origem fornecido em um objeto GUID usando o contexto.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtém um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType">Um <see cref="T:System.Type" /> que representa o tipo no qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converte o objeto fornecido em um objeto GUID.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" /> opcional. Se não for fornecido, a cultura atual será assumida.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte o objeto especificado em outro tipo.</summary>
      <param name="context">Um contexto do formatador.</param>
      <param name="culture">A cultura na qual o <paramref name="value" /> será convertido.</param>
      <param name="value">O objeto a ser convertido.</param>
      <param name="destinationType">O tipo no qual converter o objeto.</param>
      <returns>O objeto convertido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="T:System.ComponentModel.HandledEventArgs">
      <summary>Fornece dados de eventos que podem ser manipulados completamente em um manipulador de eventos.</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.HandledEventArgs" /> com um valor da propriedade <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> padrão de <see langword="false" />.</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor(System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.HandledEventArgs" /> com o valor padrão especificado para a propriedade <see cref="P:System.ComponentModel.HandledEventArgs.Handled" />.</summary>
      <param name="defaultHandledValue">O valor padrão para a propriedade <see cref="P:System.ComponentModel.HandledEventArgs.Handled" />.</param>
    </member>
    <member name="P:System.ComponentModel.HandledEventArgs.Handled">
      <summary>Obtém ou define um valor que indica se o manipulador de eventos tratou completamente o evento ou se o sistema deve continuar seu próprio processamento.</summary>
      <returns>
        <see langword="true" />Se o evento foi completamente manipulado; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventHandler">
      <summary>Representa um método que pode manipular eventos que podem ou não exigir processamento adicional depois que o manipulador de eventos é retornado.</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">Um <see cref="T:System.ComponentModel.HandledEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.IBindingList">
      <summary>Fornece os recursos necessários para dar suporte a cenários complexos e simples durante a associação de uma fonte de dados.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>Adiciona o <see cref="T:System.ComponentModel.PropertyDescriptor" /> aos índices usados para pesquisa.</summary>
      <param name="property">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> a ser adicionado aos índices usados para pesquisa.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddNew">
      <summary>Adiciona um novo item à lista.</summary>
      <returns>O item adicionado à lista.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.AllowNew" /> é <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowEdit">
      <summary>Obtém se você pode atualizar itens na lista.</summary>
      <returns>
        <see langword="true" />Se você puder atualizar os itens na lista; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowNew">
      <summary>Especifica se é possível adicionar itens à lista usando <see cref="M:System.ComponentModel.IBindingList.AddNew" />.</summary>
      <returns>
        <see langword="true" /> se for possível adicionar itens à lista usando <see cref="M:System.ComponentModel.IBindingList.AddNew" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowRemove">
      <summary>Obtém se você pode remover os itens da lista, usando <see cref="M:System.Collections.IList.Remove(System.Object)" /> ou <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />.</summary>
      <returns>
        <see langword="true" />Se você puder remover itens da lista; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>Classifica a lista com base em um <see cref="T:System.ComponentModel.PropertyDescriptor" /> e um <see cref="T:System.ComponentModel.ListSortDirection" />.</summary>
      <param name="property">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> pelo qual se classificar.</param>
      <param name="direction">Um dos valores de <see cref="T:System.ComponentModel.ListSortDirection" />.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> é <see langword="false" />.</exception>
    </member>
    <member name="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>Retorna o índice da linha que tem o <see cref="T:System.ComponentModel.PropertyDescriptor" /> determinado.</summary>
      <param name="property">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> no qual pesquisar.</param>
      <param name="key">O valor do parâmetro <paramref name="property" /> a pesquisar.</param>
      <returns>O índice da linha que tem o <see cref="T:System.ComponentModel.PropertyDescriptor" /> determinado.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" /> é <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.IsSorted">
      <summary>Especifica se os itens na lista são classificados.</summary>
      <returns>
        <see langword="true" />Se <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> foi chamado e <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> não foi chamado; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> é <see langword="false" />.</exception>
    </member>
    <member name="E:System.ComponentModel.IBindingList.ListChanged">
      <summary>Ocorre quando a lista ou um item na lista é alterado.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>Remove o <see cref="T:System.ComponentModel.PropertyDescriptor" /> dos índices usados para pesquisa.</summary>
      <param name="property">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> para remover os índices usados para pesquisa.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveSort">
      <summary>Remove qualquer classificação aplicada usando <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> é <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortDirection">
      <summary>Obtém a direção da classificação.</summary>
      <returns>Um dos valores de <see cref="T:System.ComponentModel.ListSortDirection" />.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> é <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortProperty">
      <summary>Obtém o <see cref="T:System.ComponentModel.PropertyDescriptor" /> que está sendo usado para classificação.</summary>
      <returns>O <see cref="T:System.ComponentModel.PropertyDescriptor" /> que está sendo usado para classificação.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> é <see langword="false" />.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsChangeNotification">
      <summary>Especifica se um evento <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> é acionado quando a lista ou um item na lista é alterado.</summary>
      <returns>
        <see langword="true" /> se um evento <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> for acionado quando a lista ou um item for alterado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSearching">
      <summary>Obtém se a lista é compatível com pesquisa usando o método <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />.</summary>
      <returns>
        <see langword="true" />se a lista der suporte à pesquisa <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> usando o método; <see langword="false" />caso contrário,.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSorting">
      <summary>Obtém se a lista é compatível com classificação.</summary>
      <returns>
        <see langword="true" /> se a lista der suporte à classificação; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.IBindingListView">
      <summary>Estende a interface de <see cref="T:System.ComponentModel.IBindingList" /> fornecendo recursos avançados de classificação e filtragem.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary>Classifica a fonte de dados com base no <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> determinado.</summary>
      <param name="sorts">O <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> que contém as classificações a aplicar à fonte de dados.</param>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.Filter">
      <summary>Obtém ou define o filtro a ser usado para excluir itens da coleção de itens retornados pela fonte de dados</summary>
      <returns>A cadeia de caracteres usada para filtrar itens na coleção de itens retornados pela fonte de dados.</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.RemoveFilter">
      <summary>Remove o filtro atual aplicado à fonte de dados.</summary>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SortDescriptions">
      <summary>Obtém a coleção de descrições de classificação atualmente aplicadas à fonte de dados.</summary>
      <returns>O <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> atualmente aplicado à fonte de dados.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting">
      <summary>Obtém um valor que indica se a fonte de dados é compatível com classificação avançada.</summary>
      <returns>
        <see langword="true" />se a fonte de dados oferecer suporte à classificação avançada; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsFiltering">
      <summary>Obtém um valor que indica se a fonte de dados dá suporte à filtragem.</summary>
      <returns>
        <see langword="true" />se a fonte de dados oferecer suporte à filtragem; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="T:System.ComponentModel.ICancelAddNew">
      <summary>Adiciona a funcionalidade transacional durante a adição de um novo item a uma coleção.</summary>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)">
      <summary>Descarta um novo item pendente da coleção.</summary>
      <param name="itemIndex">O índice do item que foi adicionado anteriormente à coleção.</param>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.EndNew(System.Int32)">
      <summary>Confirma um novo item pendente para a coleção.</summary>
      <param name="itemIndex">O índice do item que foi adicionado anteriormente à coleção.</param>
    </member>
    <member name="T:System.ComponentModel.IComNativeDescriptorHandler">
      <summary>Fornece uma camada de mapeamento de nível superior entre um objeto COM e um <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetAttributes(System.Object)">
      <summary>Obtém os atributos para o componente especificado.</summary>
      <param name="component">O componente para o qual obter os atributos.</param>
      <returns>Uma coleção de atributos para <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetClassName(System.Object)">
      <summary>Obtém o nome de classe para o componente especificado.</summary>
      <param name="component">O componente para o qual obter o nome de classe.</param>
      <returns>O nome da classe que corresponde a <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetConverter(System.Object)">
      <summary>Obtém o conversor de tipo para o componente especificado.</summary>
      <param name="component">O componente para o qual obter <see cref="T:System.ComponentModel.TypeConverter" />.</param>
      <returns>O <see cref="T:System.ComponentModel.TypeConverter" /> para <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultEvent(System.Object)">
      <summary>Obtém o evento padrão para o componente especificado.</summary>
      <param name="component">O componente para o qual obter o evento padrão.</param>
      <returns>Um <see cref="T:System.ComponentModel.EventDescriptor" /> que representa o evento padrão de <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultProperty(System.Object)">
      <summary>Obtém a propriedade padrão para o componente especificado.</summary>
      <param name="component">O componente para o qual obter a propriedade padrão.</param>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> que representa a propriedade padrão de <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEditor(System.Object,System.Type)">
      <summary>Obtém o editor para o componente especificado.</summary>
      <param name="component">O componente para o qual obter o editor.</param>
      <param name="baseEditorType">O tipo base do editor para <paramref name="component" />.</param>
      <returns>O editor para <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object)">
      <summary>Obtém os eventos para o componente especificado.</summary>
      <param name="component">O componente para o qual obter eventos.</param>
      <returns>Uma coleção de descritores de eventos para <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object,System.Attribute[])">
      <summary>Obtém os eventos com os atributos especificados para o componente especificado.</summary>
      <param name="component">O componente para o qual obter eventos.</param>
      <param name="attributes">Os atributos usados para filtrar os eventos.</param>
      <returns>Uma coleção de descritores de eventos para <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetName(System.Object)">
      <summary>Obtém o nome do componente especificado.</summary>
      <param name="component">O componente do qual obter o nome.</param>
      <returns>O nome de <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetProperties(System.Object,System.Attribute[])">
      <summary>Obtém as propriedades com os atributos especificados para o componente especificado.</summary>
      <param name="component">O componente para o qual obter eventos.</param>
      <param name="attributes">Os atributos usados para filtrar propriedades.</param>
      <returns>Uma coleção de descritores de propriedade para <paramref name="component" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.Int32,System.Boolean@)">
      <summary>Obtém o valor da propriedade que tem o identificador de expedição especificado.</summary>
      <param name="component">O objeto ao qual a propriedade pertence.</param>
      <param name="dispid">O identificador de expedição.</param>
      <param name="success">Um <see cref="T:System.Boolean" />, passado por referência, que indica se a propriedade foi recuperada.</param>
      <returns>O valor da propriedade que tem o identificador de expedição especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.String,System.Boolean@)">
      <summary>Obtém o valor da propriedade que tem o nome especificado.</summary>
      <param name="component">O objeto ao qual a propriedade pertence.</param>
      <param name="propertyName">O nome da propriedade.</param>
      <param name="success">Um <see cref="T:System.Boolean" />, passado por referência, que indica se a propriedade foi recuperada.</param>
      <returns>O valor da propriedade que tem o nome especificado.</returns>
    </member>
    <member name="T:System.ComponentModel.ICustomTypeDescriptor">
      <summary>Fornece uma interface que concede informações de tipo personalizado dinâmico para um objeto.</summary>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetAttributes">
      <summary>Retorna uma coleção de atributos personalizados para esta instância de um componente.</summary>
      <returns>Um <see cref="T:System.ComponentModel.AttributeCollection" /> que contém os atributos para esse objeto.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetClassName">
      <summary>Retorna o nome de classe desta instância de um componente.</summary>
      <returns>O nome de classe do objeto ou <see langword="null" /> se a classe não tiver um nome.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetComponentName">
      <summary>Retorna o nome desta instância de um componente.</summary>
      <returns>O nome do objeto ou <see langword="null" /> se o objeto não tiver um nome.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetConverter">
      <summary>Retorna um conversor de tipo para esta instância de um componente.</summary>
      <returns>Um <see cref="T:System.ComponentModel.TypeConverter" /> que é o conversor para esse objeto ou <see langword="null" />, se não houver nenhum <see cref="T:System.ComponentModel.TypeConverter" /> para este objeto.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent">
      <summary>Retorna o evento padrão para esta instância de um componente.</summary>
      <returns>Um <see cref="T:System.ComponentModel.EventDescriptor" /> que representa o evento padrão para esse objeto ou <see langword="null" />, se este objeto não tiver eventos.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty">
      <summary>Retorna a propriedade padrão para esta instância de um componente.</summary>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> que representa a propriedade padrão para esse objeto ou <see langword="null" />, se este objeto não tiver propriedades.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type)">
      <summary>Retorna um editor do tipo especificado para esta instância de um componente.</summary>
      <param name="editorBaseType">Um <see cref="T:System.Type" /> que representa o editor para esse objeto.</param>
      <returns>Um <see cref="T:System.Object" /> do tipo especificado que é o editor para esse objeto ou <see langword="null" />, se não for possível encontrar o editor.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents">
      <summary>Retorna os eventos desta instância de um componente.</summary>
      <returns>Um <see cref="T:System.ComponentModel.EventDescriptorCollection" /> que representa os eventos da instância deste componente.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>Retorna os eventos desta instância de um componente usando a matriz de atributos especificada como um filtro.</summary>
      <param name="attributes">Uma matriz do tipo <see cref="T:System.Attribute" /> que é usada como um filtro.</param>
      <returns>Um <see cref="T:System.ComponentModel.EventDescriptorCollection" /> que representa os eventos filtrados da instância deste componente.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties">
      <summary>Retorna as propriedades desta instância de um componente.</summary>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que representa as propriedades da instância deste componente.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>Retorna as propriedades desta instância de um componente usando a matriz de atributos como um filtro.</summary>
      <param name="attributes">Uma matriz do tipo <see cref="T:System.Attribute" /> que é usada como um filtro.</param>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que representa as propriedades filtradas da instância deste componente.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Retorna um objeto que contém a propriedade descrita pelo descritor de propriedade especificado.</summary>
      <param name="pd">Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> que representa a propriedade cujo proprietário deve ser encontrado.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o proprietário da propriedade especificada.</returns>
    </member>
    <member name="T:System.ComponentModel.IDataErrorInfo">
      <summary>Fornece a funcionalidade para oferecer informações de erro personalizadas as quais uma interface do usuário pode se associar.</summary>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Error">
      <summary>Obtém uma mensagem de erro que indica o que há de errado com esse objeto.</summary>
      <returns>Uma mensagem de erro que indica o que há de errado com esse objeto. O padrão é uma cadeia de caracteres vazia ("").</returns>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Item(System.String)">
      <summary>Obtém a mensagem de erro da propriedade com o nome fornecido.</summary>
      <param name="columnName">O nome da propriedade cuja mensagem de erro será obtida.</param>
      <returns>A mensagem de erro da propriedade. O padrão é uma cadeia de caracteres vazia ("").</returns>
    </member>
    <member name="T:System.ComponentModel.IExtenderProvider">
      <summary>Define a interface para estender propriedades para outros componentes em um contêiner.</summary>
    </member>
    <member name="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)">
      <summary>Especifica se este objeto pode fornecer suas propriedades estendidas ao objeto especificado.</summary>
      <param name="extendee">O <see cref="T:System.Object" /> para receber as propriedades de extensão.</param>
      <returns>
        <see langword="true" /> se este objeto puder fornecer propriedades de extensão ao objeto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.IIntellisenseBuilder">
      <summary>Fornece uma interface para facilitar a recuperação do nome do construtor e exibir o construtor.</summary>
    </member>
    <member name="P:System.ComponentModel.IIntellisenseBuilder.Name">
      <summary>Obtém um nome localizado.</summary>
      <returns>Um nome localizado.</returns>
    </member>
    <member name="M:System.ComponentModel.IIntellisenseBuilder.Show(System.String,System.String,System.String@)">
      <summary>Mostra o construtor.</summary>
      <param name="language">O serviço de linguagem que está chamando o construtor.</param>
      <param name="value">A expressão que está sendo editada.</param>
      <param name="newValue">O novo valor.</param>
      <returns>
        <see langword="true" /> se o valor precisar ser substituído por <paramref name="newValue" />; caso contrário, <see langword="false" /> (se o usuário cancelar, por exemplo).</returns>
    </member>
    <member name="T:System.ComponentModel.IListSource">
      <summary>Fornece funcionalidade para um objeto retornar uma lista que pode ser associada a uma fonte de dados.</summary>
    </member>
    <member name="P:System.ComponentModel.IListSource.ContainsListCollection">
      <summary>Obtém um valor que indica se a coleção é uma coleção de objetos <see cref="T:System.Collections.IList" />.</summary>
      <returns>
        <see langword="true" /> se a coleção for uma coleção de objetos <see cref="T:System.Collections.IList" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.IListSource.GetList">
      <summary>Retorna um <see cref="T:System.Collections.IList" /> que pode ser associado a uma fonte de dados de um objeto que não implementa um <see cref="T:System.Collections.IList" />.</summary>
      <returns>Um <see cref="T:System.Collections.IList" /> que pode ser associado a uma fonte de dados de objeto.</returns>
    </member>
    <member name="T:System.ComponentModel.INestedContainer">
      <summary>Fornece funcionalidade para contêineres aninhados, que logicamente contêm zero ou mais outros componentes e pertencem a um componente pai.</summary>
    </member>
    <member name="P:System.ComponentModel.INestedContainer.Owner">
      <summary>Obtém o componente proprietário do contêiner aninhado.</summary>
      <returns>O <see cref="T:System.ComponentModel.IComponent" /> que possui o contêiner aninhado.</returns>
    </member>
    <member name="T:System.ComponentModel.INestedSite">
      <summary>Fornece a capacidade de recuperar o nome completo aninhado de um componente.</summary>
    </member>
    <member name="P:System.ComponentModel.INestedSite.FullName">
      <summary>Obtém o nome completo do componente neste site.</summary>
      <returns>O nome completo do componente neste site.</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceAttribute">
      <summary>Indica se o componente associado a esse atributo foi herdado de uma classe base. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.InheritanceAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor(System.ComponentModel.InheritanceLevel)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.InheritanceAttribute" /> com o nível de herança especificado.</summary>
      <param name="inheritanceLevel">Um <see cref="T:System.ComponentModel.InheritanceLevel" /> que indica o nível de herança para o qual definir esse atributo.</param>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Default">
      <summary>Especifica o valor padrão para <see cref="T:System.ComponentModel.InheritanceAttribute" /> é <see cref="F:System.ComponentModel.InheritanceAttribute.NotInherited" />. Este campo é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.Equals(System.Object)">
      <summary>Substituição para testar a igualdade.</summary>
      <param name="value">O objeto a ser testado.</param>
      <returns>
        <see langword="true" /> se o objeto for o mesmo; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.GetHashCode">
      <summary>Retorna o código hash para esse objeto.</summary>
      <returns>Um código hash do <see cref="T:System.ComponentModel.InheritanceAttribute" /> atual.</returns>
    </member>
    <member name="P:System.ComponentModel.InheritanceAttribute.InheritanceLevel">
      <summary>Obtém ou define o nível atual de herança armazenado nesse atributo.</summary>
      <returns>O <see cref="T:System.ComponentModel.InheritanceLevel" /> armazenado neste atributo.</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Inherited">
      <summary>Especifica que o componente é herdado. Este campo é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.InheritedReadOnly">
      <summary>Especifica que o componente é herdado e somente leitura. Este campo é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.IsDefaultAttribute">
      <summary>Obtém um valor que indica se o valor atual do atributo é o valor padrão do atributo.</summary>
      <returns>
        <see langword="true" /> se o valor atual do atributo é o padrão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.NotInherited">
      <summary>Especifica que o componente não é herdado. Este campo é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.ToString">
      <summary>Converte este atributo em uma cadeia de caracteres.</summary>
      <returns>Uma cadeia de caracteres que representa este <see cref="T:System.ComponentModel.InheritanceAttribute" />.</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceLevel">
      <summary>Define os identificadores de tipos de níveis de herança.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.Inherited">
      <summary>O objeto é herdado.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.InheritedReadOnly">
      <summary>O objeto é herdado, mas tem acesso somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.NotInherited">
      <summary>O objeto não é herdado.</summary>
    </member>
    <member name="T:System.ComponentModel.InstallerTypeAttribute">
      <summary>Especifica o instalador para um tipo que instala os componentes.</summary>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> com o nome do tipo de instalador do componente.</summary>
      <param name="typeName">O nome de um <see cref="T:System.Type" /> que representa o instalador para o componente ao qual esse atributo está associado. Essa classe deve implementar <see cref="T:System.ComponentModel.Design.IDesigner" />.</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> quando é fornecido um <see cref="T:System.Type" /> que representa o instalador para um componente.</summary>
      <param name="installerType">Um <see cref="T:System.Type" /> que representa o instalador para o componente ao qual esse atributo está associado. Essa classe deve implementar <see cref="T:System.ComponentModel.Design.IDesigner" />.</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.Equals(System.Object)">
      <summary>Retorna se o valor do objeto especificado é igual ao <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> atual.</summary>
      <param name="obj">O objeto cuja igualdade de valor deve ser testada.</param>
      <returns>
        <see langword="true" /> se o valor do objeto especificado for igual do atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.GetHashCode">
      <summary>Retorna o código hash para esse objeto.</summary>
      <returns>Um código hash do <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> atual.</returns>
    </member>
    <member name="P:System.ComponentModel.InstallerTypeAttribute.InstallerType">
      <summary>Obtém o tipo de instalador associado a este atributo.</summary>
      <returns>Um <see cref="T:System.Type" /> que representa o tipo de instalador associado a este atributo ou <see langword="null" /> se um instalador não existir.</returns>
    </member>
    <member name="T:System.ComponentModel.InstanceCreationEditor">
      <summary>Cria uma instância de um determinado tipo de propriedade de uma caixa suspensa dentro de <see cref="T:System.Windows.Forms.PropertyGrid" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.InstanceCreationEditor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Quando substituído em uma classe derivada, retorna uma instância do tipo especificado.</summary>
      <param name="context">As informações de contexto.</param>
      <param name="instanceType">O tipo especificado.</param>
      <returns>Uma instância do tipo <see langword="null" /> especificado.</returns>
    </member>
    <member name="P:System.ComponentModel.InstanceCreationEditor.Text">
      <summary>Obtém o texto especificado.</summary>
      <returns>O texto especificado.</returns>
    </member>
    <member name="T:System.ComponentModel.Int16Converter">
      <summary>Fornece um conversor de tipo para converter objetos de tipo inteiro com sinal de 16 bits para e de outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.Int16Converter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Int16Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Int32Converter">
      <summary>Fornece um conversor de tipo para converter objetos de tipo inteiro com sinal de 32 bits para e a partir de outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.Int32Converter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Int32Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.Int64Converter">
      <summary>Fornece um conversor de tipo para converter objetos de tipo inteiro com sinal de 64 bits para e de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.Int64Converter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.Int64Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.InvalidAsynchronousStateException">
      <summary>Acionada quando um thread no qual uma operação que deva ser executada não existe mais ou não tem nenhum loop de mensagem.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" />.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> com o <see cref="T:System.Runtime.Serialization.SerializationInfo" /> e o <see cref="T:System.Runtime.Serialization.StreamingContext" /> fornecidos.</summary>
      <param name="info">O <see cref="T:System.Runtime.Serialization.SerializationInfo" /> a ser usado para desserialização.</param>
      <param name="context">O destino a ser usado para desserialização.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> com a descrição detalhada especificada.</summary>
      <param name="message">Uma descrição detalhada do erro.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> com a descrição detalhada e a exceção especificadas.</summary>
      <param name="message">Uma descrição detalhada do erro.</param>
      <param name="innerException">Uma referência à exceção interna que é a causa dessa exceção.</param>
    </member>
    <member name="T:System.ComponentModel.IRaiseItemChangedEvents">
      <summary>Indica se uma classe converte eventos de alteração de propriedade para eventos <see cref="E:System.ComponentModel.IBindingList.ListChanged" />.</summary>
    </member>
    <member name="P:System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents">
      <summary>Obtém um valor que indica se o objeto <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> gera eventos <see cref="E:System.ComponentModel.IBindingList.ListChanged" />.</summary>
      <returns>
        <see langword="true" />Se o <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> objeto gerar <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> eventos quando um de seus valores de propriedade for alterado; <see langword="false" />caso contrário,.</returns>
    </member>
    <member name="T:System.ComponentModel.ISupportInitializeNotification">
      <summary>Permite a coordenação da inicialização para um componente e suas propriedades dependentes.</summary>
    </member>
    <member name="E:System.ComponentModel.ISupportInitializeNotification.Initialized">
      <summary>Ocorre quando a inicialização do componente é concluída.</summary>
    </member>
    <member name="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized">
      <summary>Obtém um valor que indica se o componente é inicializado.</summary>
      <returns>
        <see langword="true" />para indicar que o componente concluiu a inicialização; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary>Fornece informações contextuais sobre um componente, como seu descritor de propriedade e contêiner.</summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary>Obtém o contêiner que representa esta solicitação <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
      <returns>Um <see cref="T:System.ComponentModel.IContainer" /> com o conjunto de objetos para isso <see cref="T:System.ComponentModel.TypeDescriptor" />; caso contrário <see langword="null" /> , se não houver nenhum contêiner ou se <see cref="T:System.ComponentModel.TypeDescriptor" /> o não usar objetos externos.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary>Obtém o objeto conectado a essa solicitação de descritor de tipo.</summary>
      <returns>O objeto que invoca o método no <see cref="T:System.ComponentModel.TypeDescriptor" />; caso contrário, <see langword="null" /> se não houver nenhum objeto responsável pela chamada.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary>Aciona o evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary>Aciona o evento <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" />.</summary>
      <returns>
        <see langword="true" /> se esse objeto pode ser alterado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary>Obtém o <see cref="T:System.ComponentModel.PropertyDescriptor" /> associado ao item de contexto fornecido.</summary>
      <returns>O <see cref="T:System.ComponentModel.PropertyDescriptor" /> que descreve o item de contexto fornecido; caso <see langword="null" /> contrário, se não <see cref="T:System.ComponentModel.PropertyDescriptor" /> houver nenhum responsável pela chamada.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypedList">
      <summary>Oferece funcionalidades para descobrir o esquema da lista vinculável, em que as propriedades disponíveis para associação são diferentes das propriedades públicas aos quais o objeto será associado.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>Retorna o <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que representa as propriedades em cada item usado para associar os dados.</summary>
      <param name="listAccessors">Uma matriz de objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> a serem encontrados na coleção como associáveis. Ele pode ser <see langword="null" />.</param>
      <returns>O <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que representa as propriedades em cada item usado para associar os dados.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>Retorna o nome da lista.</summary>
      <param name="listAccessors">Uma matriz de objetos <see cref="T:System.ComponentModel.PropertyDescriptor" />, para a qual o nome da lista é retornado. Ele pode ser <see langword="null" />.</param>
      <returns>O nome da lista.</returns>
    </member>
    <member name="T:System.ComponentModel.License">
      <summary>Fornece a classe base <see langword="abstract" /> para todas as licenças. Uma licença é concedida a uma instância específica de um componente.</summary>
    </member>
    <member name="M:System.ComponentModel.License.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.License" />.</summary>
    </member>
    <member name="M:System.ComponentModel.License.Dispose">
      <summary>Quando substituído em uma classe derivada, libera os recursos usados pela licença.</summary>
    </member>
    <member name="P:System.ComponentModel.License.LicenseKey">
      <summary>Quando substituído em uma classe derivada, obtém a chave de licença concedida a esse componente.</summary>
      <returns>Uma chave de licença concedida a esse componente.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseContext">
      <summary>Especifica quando você pode usar um objeto licenciado e oferece uma maneira de obter os serviços adicionais necessários para dar suporte a licenças em execução em seu domínio.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LicenseContext" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>Quando substituído em uma classe derivada, retorna uma chave de licença salva para o tipo especificado do assembly de recurso especificado.</summary>
      <param name="type">Um <see cref="T:System.Type" /> que representa o tipo de componente.</param>
      <param name="resourceAssembly">Um <see cref="T:System.Reflection.Assembly" /> com a chave de licença.</param>
      <returns>O <see cref="P:System.ComponentModel.License.LicenseKey" /> para o tipo especificado. Este método retornará <see langword="null" />, a menos que você o substitua.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetService(System.Type)">
      <summary>Obtém o serviço solicitado, se ele está disponível.</summary>
      <param name="type">O tipo de serviço a ser recuperado.</param>
      <returns>Uma instância do serviço ou <see langword="null" /> se o serviço não puder ser localizado.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>Quando substituído em uma classe derivada, define uma chave de licença para o tipo especificado.</summary>
      <param name="type">Um <see cref="T:System.Type" /> que representa o componente associado à chave de licença.</param>
      <param name="key">O <see cref="P:System.ComponentModel.License.LicenseKey" /> a salvar para o tipo de componente.</param>
    </member>
    <member name="P:System.ComponentModel.LicenseContext.UsageMode">
      <summary>Quando substituído em uma classe derivada, obtém um valor que especifica quando você pode usar uma licença.</summary>
      <returns>Um dos <see cref="T:System.ComponentModel.LicenseUsageMode" /> valores que especifica quando você pode usar uma licença. O padrão é <see cref="F:System.ComponentModel.LicenseUsageMode.Runtime" />.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseException">
      <summary>Representa a exceção lançada quando um componente não pode receber uma licença.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LicenseException" /> com o <see cref="T:System.Runtime.Serialization.SerializationInfo" /> e o <see cref="T:System.Runtime.Serialization.StreamingContext" /> fornecidos.</summary>
      <param name="info">O <see cref="T:System.Runtime.Serialization.SerializationInfo" /> a ser usado para desserialização.</param>
      <param name="context">O destino a ser usado para desserialização.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LicenseException" /> para o tipo de componente ao qual foi negada uma licença.</summary>
      <param name="type">Um <see cref="T:System.Type" /> que representa o tipo de componente que não recebeu uma licença.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LicenseException" /> para o tipo e a instância do componente que teve uma licença negada.</summary>
      <param name="type">Um <see cref="T:System.Type" /> que representa o tipo de componente que não recebeu uma licença.</param>
      <param name="instance">A instância do componente que não recebeu uma licença.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LicenseException" /> para o tipo e a instância do componente que teve uma licença negada, juntamente com uma mensagem a ser exibida.</summary>
      <param name="type">Um <see cref="T:System.Type" /> que representa o tipo de componente que não recebeu uma licença.</param>
      <param name="instance">A instância do componente que não recebeu uma licença.</param>
      <param name="message">A mensagem de exceção a ser exibida.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LicenseException" /> para o tipo e a instância do componente que teve uma licença negada, juntamente com uma mensagem a ser exibida e a exceção original gerada.</summary>
      <param name="type">Um <see cref="T:System.Type" /> que representa o tipo de componente que não recebeu uma licença.</param>
      <param name="instance">A instância do componente que não recebeu uma licença.</param>
      <param name="message">A mensagem de exceção a ser exibida.</param>
      <param name="innerException">Um <see cref="T:System.Exception" /> que representa a exceção original.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Define o <see cref="T:System.Runtime.Serialization.SerializationInfo" /> com informações sobre a exceção.</summary>
      <param name="info">O <see cref="T:System.Runtime.Serialization.SerializationInfo" /> a ser usado para desserialização.</param>
      <param name="context">O destino a ser usado para desserialização.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseException.LicensedType">
      <summary>Obtém o tipo de componente que não recebeu uma licença.</summary>
      <returns>Um <see cref="T:System.Type" /> que representa o tipo de componente que não recebeu uma licença.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseManager">
      <summary>Fornece propriedades e métodos para adicionar uma licença a um componente e gerenciar um <see cref="T:System.ComponentModel.LicenseProvider" />. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
      <summary>Cria uma instância do tipo especificado, dado um contexto no qual você pode usar a instância licenciada.</summary>
      <param name="type">Um <see cref="T:System.Type" /> que representa o tipo a ser criado.</param>
      <param name="creationContext">Um <see cref="T:System.ComponentModel.LicenseContext" /> que especifica quando você pode usar a instância licenciada.</param>
      <returns>Uma instância do tipo especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
      <summary>Cria uma instância do tipo especificado com os argumentos especificados, dado um contexto no qual você pode usar a instância licenciada.</summary>
      <param name="type">Um <see cref="T:System.Type" /> que representa o tipo a ser criado.</param>
      <param name="creationContext">Um <see cref="T:System.ComponentModel.LicenseContext" /> que especifica quando você pode usar a instância licenciada.</param>
      <param name="args">Uma matriz do tipo <see cref="T:System.Object" /> que representa os argumentos do tipo.</param>
      <returns>Uma instância do tipo especificado com a matriz de argumentos fornecida.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.CurrentContext">
      <summary>Obtém ou define o <see cref="T:System.ComponentModel.LicenseContext" /> atual, que especifica quando você pode usar o objeto licenciado.</summary>
      <returns>Um <see cref="T:System.ComponentModel.LicenseContext" /> que especifica quando você pode usar o objeto licenciado.</returns>
      <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> está bloqueada e não pode ser alterada.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
      <summary>Retorna se o tipo fornecido tem uma licença válida.</summary>
      <param name="type">O <see cref="T:System.Type" /> para o qual uma licença válida deve ser encontrada.</param>
      <returns>
        <see langword="true" /> se o tipo fornecido for licenciado, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
      <summary>Determina se é possível conceder uma licença válida para o tipo especificado.</summary>
      <param name="type">Um <see cref="T:System.Type" /> que representa o tipo de objeto que solicita a <see cref="T:System.ComponentModel.License" />.</param>
      <returns>
        <see langword="true" /> se uma licença válida puder ser concedida, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
      <summary>Determina se é possível conceder uma licença válida para a instância especificada do tipo. Esse método cria uma <see cref="T:System.ComponentModel.License" /> válida.</summary>
      <param name="type">Um <see cref="T:System.Type" /> que representa o tipo de objeto que solicita a licença.</param>
      <param name="instance">Um objeto do tipo especificado ou um tipo derivado do tipo especificado.</param>
      <param name="license">Uma <see cref="T:System.ComponentModel.License" /> que é uma licença válida ou <see langword="null" /> se não for possível conceder uma licença válida.</param>
      <returns>
        <see langword="true" /> se uma <see cref="T:System.ComponentModel.License" /> válida puder ser concedida, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
      <summary>Impede que alterações sejam feitas no <see cref="T:System.ComponentModel.LicenseContext" /> atual do objeto especificado.</summary>
      <param name="contextUser">O objeto cujo contexto atual você deseja bloquear.</param>
      <exception cref="T:System.InvalidOperationException">O contexto já está bloqueado.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
      <summary>Permite que alterações sejam feitas no <see cref="T:System.ComponentModel.LicenseContext" /> atual do objeto especificado.</summary>
      <param name="contextUser">O objeto cujo contexto atual você deseja desbloquear.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contextUser" /> representa um usuário diferente daquele especificado em uma chamada anterior para <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.UsageMode">
      <summary>Obtém o <see cref="T:System.ComponentModel.LicenseUsageMode" /> que especifica quando você pode usar o objeto licenciado para o <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</summary>
      <returns>Um dos valores <see cref="T:System.ComponentModel.LicenseUsageMode" />, conforme especificado na propriedade <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
      <summary>Determina se é possível conceder uma licença para o tipo especificado.</summary>
      <param name="type">Um <see cref="T:System.Type" /> que representa o tipo de objeto que solicita a licença.</param>
      <exception cref="T:System.ComponentModel.LicenseException">Uma <see cref="T:System.ComponentModel.License" /> não pode ser concedida.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
      <summary>Determina se é possível conceder uma licença para a instância do tipo especificado.</summary>
      <param name="type">Um <see cref="T:System.Type" /> que representa o tipo de objeto que solicita a licença.</param>
      <param name="instance">Um <see cref="T:System.Object" /> do tipo especificado ou um tipo derivado do tipo especificado.</param>
      <returns>Uma <see cref="T:System.ComponentModel.License" /> válida.</returns>
      <exception cref="T:System.ComponentModel.LicenseException">O tipo é licenciado, mas uma <see cref="T:System.ComponentModel.License" /> não pode ser concedida.</exception>
    </member>
    <member name="T:System.ComponentModel.LicenseProvider">
      <summary>Fornece a classe base <see langword="abstract" /> para implementar um provedor de licença.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LicenseProvider" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>Quando substituído em uma classe derivada, obtém uma licença para uma instância ou um tipo de componente, quando é fornecido um contexto e se a negação de uma licença gera uma exceção.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.LicenseContext" /> que especifica em que local você pode usar o objeto licenciado.</param>
      <param name="type">Um <see cref="T:System.Type" /> que representa o componente solicitando a licença.</param>
      <param name="instance">Um objeto que está solicitando a licença.</param>
      <param name="allowExceptions">
        <see langword="true" /> se um <see cref="T:System.ComponentModel.LicenseException" /> precisar ser gerado quando o componente não puder receber uma licença; caso contrário, <see langword="false" />.</param>
      <returns>Uma <see cref="T:System.ComponentModel.License" /> válida.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProviderAttribute">
      <summary>Especifica o <see cref="T:System.ComponentModel.LicenseProvider" /> a usar com uma classe. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> sem um provedor de licença.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> com o tipo especificado.</summary>
      <param name="typeName">O nome totalmente qualificado da classe do provedor de licença.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> com o tipo de provedor de licença especificado.</summary>
      <param name="type">Um <see cref="T:System.Type" /> que representa o tipo da classe do provedor de licença.</param>
    </member>
    <member name="F:System.ComponentModel.LicenseProviderAttribute.Default">
      <summary>Especifica o valor padrão, que é nenhum provedor. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.Equals(System.Object)">
      <summary>Indica se essa instância e um objeto especificado são iguais.</summary>
      <param name="value">Outro objeto com o qual ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="value" /> for igual a essa instância; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código hash do <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> atual.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.LicenseProvider">
      <summary>Obtém o provedor de licença que deve ser usado com a classe associada.</summary>
      <returns>Um <see cref="T:System.Type" /> que representa o tipo do provedor de licença. O valor padrão é <see langword="null" />.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.TypeId">
      <summary>Indica uma ID exclusiva para este tipo de atributo.</summary>
      <returns>Uma ID exclusiva para esse tipo de atributo.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseUsageMode">
      <summary>Especifica quando o <see cref="T:System.ComponentModel.License" /> pode ser usado.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Designtime">
      <summary>Usado durante o tempo de design por um designer visual ou o compilador.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Runtime">
      <summary>Usado durante o tempo de execução.</summary>
    </member>
    <member name="T:System.ComponentModel.LicFileLicenseProvider">
      <summary>Fornece uma implementação de um <see cref="T:System.ComponentModel.LicenseProvider" />. O provedor funciona de maneira semelhante ao modelo de licenciamento padrão do Microsoft .NET Framework.</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LicFileLicenseProvider" />.</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)">
      <summary>Retorna uma chave para o tipo especificado.</summary>
      <param name="type">O tipo de objeto para retornar a chave.</param>
      <returns>Uma confirmação de que o parâmetro <paramref name="type" /> é licenciado.</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>Retornará uma licença para a instância do componente, se houver uma disponível.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.LicenseContext" /> que especifica em que local você pode usar o objeto licenciado.</param>
      <param name="type">Um <see cref="T:System.Type" /> que representa o componente solicitando o <see cref="T:System.ComponentModel.License" />.</param>
      <param name="instance">Um objeto que solicita o <see cref="T:System.ComponentModel.License" />.</param>
      <param name="allowExceptions">
        <see langword="true" /> se um <see cref="T:System.ComponentModel.LicenseException" /> precisar ser gerado quando um componente não puder receber uma licença; caso contrário, <see langword="false" />.</param>
      <returns>Uma <see cref="T:System.ComponentModel.License" /> válida. Se esse método não puder localizar um <see cref="T:System.ComponentModel.License" /> válido ou um parâmetro <paramref name="context" /> válido, ele retornará <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)">
      <summary>Determina se a chave que o método <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> recupera é válida para o tipo especificado.</summary>
      <param name="key">O <see cref="P:System.ComponentModel.License.LicenseKey" /> a ser verificado.</param>
      <param name="type">Um <see cref="T:System.Type" /> que representa o componente solicitando o <see cref="T:System.ComponentModel.License" />.</param>
      <returns>
        <see langword="true" /> se a chave for um <see cref="P:System.ComponentModel.License.LicenseKey" /> válido para o tipo especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ListBindableAttribute">
      <summary>Especifica que uma lista pode ser usada como uma fonte de dados. Um designer visual deve usar esse atributo para determinar se deve exibir uma lista específica em um seletor de associação de dados. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ListBindableAttribute" /> usando um valor para indicar se a lista é associável.</summary>
      <param name="listBindable">
        <see langword="true" /> se a lista for associável; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ListBindableAttribute" /> usando <see cref="T:System.ComponentModel.BindableSupport" /> para indicar se a lista é associável.</summary>
      <param name="flags">Um <see cref="T:System.ComponentModel.BindableSupport" /> que indica se a lista é associável.</param>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Default">
      <summary>Representa o valor padrão para <see cref="T:System.ComponentModel.ListBindableAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.Equals(System.Object)">
      <summary>Retorna se o objeto passado é igual a este <see cref="T:System.ComponentModel.ListBindableAttribute" />.</summary>
      <param name="obj">O objeto com o qual testar a igualdade.</param>
      <returns>
        <see langword="true" /> se o objeto passado for igual a este <see cref="T:System.ComponentModel.ListBindableAttribute" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código hash do <see cref="T:System.ComponentModel.ListBindableAttribute" /> atual.</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.IsDefaultAttribute">
      <summary>Retorna se <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> é definido como o valor padrão.</summary>
      <returns>
        <see langword="true" /> se <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> for definido como o valor padrão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ListBindableAttribute.ListBindable">
      <summary>Obtém se a lista é associável.</summary>
      <returns>
        <see langword="true" /> se a lista for associável; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.No">
      <summary>Especifica que a lista não é associável. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Yes">
      <summary>Especifica que a lista é associável. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventArgs">
      <summary>Fornece dados para o evento de <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ListChangedEventArgs" /> considerando o tipo de alteração e o <see cref="T:System.ComponentModel.PropertyDescriptor" /> afetado.</summary>
      <param name="listChangedType">Um valor <see cref="T:System.ComponentModel.ListChangedType" /> que indica o tipo de alteração.</param>
      <param name="propDesc">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> que foi adicionado, removido ou alterado.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ListChangedEventArgs" /> considerando o tipo de alteração e o índice do item afetado.</summary>
      <param name="listChangedType">Um valor <see cref="T:System.ComponentModel.ListChangedType" /> que indica o tipo de alteração.</param>
      <param name="newIndex">O índice do item que foi adicionado, alterado ou removido.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ListChangedEventArgs" /> considerando o tipo de alteração, o índice do item afetado e um <see cref="T:System.ComponentModel.PropertyDescriptor" /> que descreve o item afetado.</summary>
      <param name="listChangedType">Um valor <see cref="T:System.ComponentModel.ListChangedType" /> que indica o tipo de alteração.</param>
      <param name="newIndex">O índice do item que foi adicionado ou alterado.</param>
      <param name="propDesc">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> que descreve o item.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ListChangedEventArgs" /> considerando o tipo de alteração e os índices antigo e novo do item que foi movido.</summary>
      <param name="listChangedType">Um valor <see cref="T:System.ComponentModel.ListChangedType" /> que indica o tipo de alteração.</param>
      <param name="newIndex">O novo índice do item que foi movido.</param>
      <param name="oldIndex">O antigo índice do item que foi movido.</param>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.ListChangedType">
      <summary>Obtém o tipo de alteração.</summary>
      <returns>Um valor <see cref="T:System.ComponentModel.ListChangedType" /> que indica o tipo de alteração.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.NewIndex">
      <summary>Obtém o índice do item afetado pela alteração.</summary>
      <returns>O índice dos afetados pela alteração.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.OldIndex">
      <summary>Obtém o índice antigo de um item que foi movido.</summary>
      <returns>O índice antigo do item movido.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.PropertyDescriptor">
      <summary>Obtém o <see cref="T:System.ComponentModel.PropertyDescriptor" /> que foi adicionado, alterado ou excluído.</summary>
      <returns>O <see cref="T:System.ComponentModel.PropertyDescriptor" /> afetado pela alteração.</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventHandler">
      <summary>Representa o método que manipulará o evento <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> da classe <see cref="T:System.ComponentModel.IBindingList" />.</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">Um <see cref="T:System.ComponentModel.ListChangedEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.ComponentModel.ListChangedType">
      <summary>Especifica como a lista foi alterada.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemAdded">
      <summary>Um item adicionado à lista. O <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> contém o índice do item que foi adicionado.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemChanged">
      <summary>Um item alterado na lista. O <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> contém o índice do item que foi alterado.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemDeleted">
      <summary>Um item excluído da lista. O <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> contém o índice do item que foi excluído.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemMoved">
      <summary>Um item movido dentro da lista. <see cref="P:System.ComponentModel.ListChangedEventArgs.OldIndex" /> contém o índice anterior para o item, enquanto <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> contém o novo índice do item.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorAdded">
      <summary>Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> foi adicionado, o que alterou o esquema.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorChanged">
      <summary>Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> foi alterado, o que alterou o esquema.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorDeleted">
      <summary>Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> foi excluído, o que alterou o esquema.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.Reset">
      <summary>Grande parte da lista foi alterada. Os controles de escuta devem atualizar todos os seus dados da lista.</summary>
    </member>
    <member name="T:System.ComponentModel.ListSortDescription">
      <summary>Fornece uma descrição da operação de classificação aplicada a uma fonte de dados.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescription.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ListSortDescription" /> com a direção e a descrição da propriedade especificadas.</summary>
      <param name="property">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> que descreve a propriedade pela qual a fonte de dados é classificada.</param>
      <param name="direction">Um dos valores de <see cref="T:System.ComponentModel.ListSortDescription" />.</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.PropertyDescriptor">
      <summary>Obtém ou define a descrição abstrata de uma propriedade de classe associada a este <see cref="T:System.ComponentModel.ListSortDescription" /></summary>
      <returns>O <see cref="T:System.ComponentModel.PropertyDescriptor" /> associado a este <see cref="T:System.ComponentModel.ListSortDescription" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.SortDirection">
      <summary>Obtém ou define a direção da operação de classificação associada a este <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
      <returns>Um dos valores de <see cref="T:System.ComponentModel.ListSortDirection" />.</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDescriptionCollection">
      <summary>Representa uma coleção de objetos <see cref="T:System.ComponentModel.ListSortDescription" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor(System.ComponentModel.ListSortDescription[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> com a matriz especificada de objetos <see cref="T:System.ComponentModel.ListSortDescription" />.</summary>
      <param name="sorts">A matriz dos objetos <see cref="T:System.ComponentModel.ListSortDescription" /> a ser contida na coleção.</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.Contains(System.Object)">
      <summary>Determina se o <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> contém um valor específico.</summary>
      <param name="value">O <see cref="T:System.Object" /> a ser localizado na coleção.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Object" /> for encontrado na coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copia o conteúdo da coleção para a matriz especificada, começando no índice de matriz de destino especificado.</summary>
      <param name="array">A matriz de destino para os itens copiados da coleção.</param>
      <param name="index">O índice da matriz de destino na qual a cópia é iniciada.</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Count">
      <summary>Obtém o número de itens na coleção.</summary>
      <returns>Número de itens na coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.IndexOf(System.Object)">
      <summary>Retorna o índice do item especificado na coleção.</summary>
      <param name="value">O <see cref="T:System.Object" /> a ser localizado na coleção.</param>
      <returns>O índice de <paramref name="value" /> se encontrado na lista; caso contrário, -1.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Item(System.Int32)">
      <summary>Obtém ou define o <see cref="T:System.ComponentModel.ListSortDescription" /> especificado.</summary>
      <param name="index">O índice baseado em zero da <see cref="T:System.ComponentModel.ListSortDescription" /> a ser obtida ou definida na coleção.</param>
      <returns>O objeto <see cref="T:System.ComponentModel.ListSortDescription" /> com o índice especificado.</returns>
      <exception cref="T:System.InvalidOperationException">Um item é definido em <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />, que é somente leitura.</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso à coleção é thread-safe.</summary>
      <returns>
        <see langword="true" /> em todos os casos.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtém a instância atual que pode ser usada para sincronizar o acesso à coleção.</summary>
      <returns>A instância atual do <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Obtém um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado iterar pela coleção.</summary>
      <returns>Um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Add(System.Object)">
      <summary>Adiciona um item à coleção.</summary>
      <param name="value">O item a ser adicionado à coleção.</param>
      <returns>A posição na qual o novo elemento foi inserido.</returns>
      <exception cref="T:System.InvalidOperationException">Em todos os casos.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Clear">
      <summary>Remove todos os itens da coleção.</summary>
      <exception cref="T:System.InvalidOperationException">Em todos os casos.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Insere um item na coleção em um índice especificado.</summary>
      <param name="index">O índice baseado em zero da <see cref="T:System.ComponentModel.ListSortDescription" /> a ser obtida ou definida na coleção</param>
      <param name="value">O item a ser inserido na coleção.</param>
      <exception cref="T:System.InvalidOperationException">Em todos os casos.</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsFixedSize">
      <summary>Obtém um valor que indica se a coleção tem um tamanho fixo.</summary>
      <returns>
        <see langword="true" /> em todos os casos.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsReadOnly">
      <summary>Obtém um valor que indica se a coleção é somente leitura.</summary>
      <returns>
        <see langword="true" /> em todos os casos.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Obtém o <see cref="T:System.ComponentModel.ListSortDescription" /> especificado.</summary>
      <param name="index">O índice baseado em zero da <see cref="T:System.ComponentModel.ListSortDescription" /> a ser obtida na coleção</param>
      <returns>O objeto <see cref="T:System.ComponentModel.ListSortDescription" /> com o índice especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Remove a primeira ocorrência de um item da coleção.</summary>
      <param name="value">O item a ser removido da coleção.</param>
      <exception cref="T:System.InvalidOperationException">Em todos os casos.</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Remove um item da coleção em um índice especificado.</summary>
      <param name="index">O índice baseado em zero do <see cref="T:System.ComponentModel.ListSortDescription" /> a ser removido da coleção</param>
      <exception cref="T:System.InvalidOperationException">Em todos os casos.</exception>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary>Especifica a direção de uma operação de classificação.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary>Classifica em ordem crescente.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary>Classifica em ordem decrescente.</summary>
    </member>
    <member name="T:System.ComponentModel.LookupBindingPropertiesAttribute">
      <summary>Especifica as propriedades que dão suporte à associação baseada em pesquisa. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> não usando nenhum parâmetro.</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
      <param name="dataSource">O nome da propriedade a ser usada como a fonte de dados.</param>
      <param name="displayMember">O nome da propriedade a ser usada para o nome de exibição.</param>
      <param name="valueMember">O nome da propriedade a ser usada como a origem dos valores.</param>
      <param name="lookupMember">O nome da propriedade a ser usada para pesquisas.</param>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DataSource">
      <summary>Obtém o nome da propriedade de fonte de dados para o componente ao qual o <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> está associado.</summary>
      <returns>A propriedade da fonte de dados para o componente ao <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> qual o está associado.</returns>
    </member>
    <member name="F:System.ComponentModel.LookupBindingPropertiesAttribute.Default">
      <summary>Representa o valor padrão para a classe <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />.</summary>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DisplayMember">
      <summary>Obtém o nome da propriedade do membro de exibição para o componente ao qual o <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> está associado.</summary>
      <returns>O nome da Propriedade do membro de exibição para o componente ao qual <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> o está associado.</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.Equals(System.Object)">
      <summary>Determina se o <see cref="T:System.Object" /> especificado é igual à instância de <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> atual.</summary>
      <param name="obj">O <see cref="T:System.Object" /> a comparar com a instância de <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> atual</param>
      <returns>
        <see langword="true" /> se o objeto é igual à instância atual, caso contrário, <see langword="false" />, indicando que não são iguais.</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código hash do <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> atual.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.LookupMember">
      <summary>Obtém o nome do membro de pesquisa para o componente ao qual este atributo está associado.</summary>
      <returns>O nome do membro de pesquisa para o componente ao qual o <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> está associado.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.ValueMember">
      <summary>Obtém o nome da propriedade do membro de valor para o componente ao qual o <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> está associado.</summary>
      <returns>O nome da propriedade de membro de valor para o componente ao qual <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> o está associado.</returns>
    </member>
    <member name="T:System.ComponentModel.MarshalByValueComponent">
      <summary>Implementa <see cref="T:System.ComponentModel.IComponent" /> e fornece a implementação base para componentes remotos que sofrem marshaling por valor (uma cópia do objeto serializado é passada).</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MarshalByValueComponent" />.</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Container">
      <summary>Obtém o contêiner para o componente.</summary>
      <returns>Um objeto que implementa a interface <see cref="T:System.ComponentModel.IContainer" /> que representa o contêiner do componente ou <see langword="null" /> se o componente não tiver um site.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.DesignMode">
      <summary>Obtém um valor que indica se o componente está atualmente no modo de design.</summary>
      <returns>
        <see langword="true" /> se o componente estiver em modo de design; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose">
      <summary>Libera todos os recursos usados pelo <see cref="T:System.ComponentModel.MarshalByValueComponent" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)">
      <summary>Libera os recursos não gerenciados usados pelo <see cref="T:System.ComponentModel.MarshalByValueComponent" /> e opcionalmente libera os recursos gerenciados.</summary>
      <param name="disposing">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="E:System.ComponentModel.MarshalByValueComponent.Disposed">
      <summary>Adiciona um manipulador de eventos para escutar o evento <see cref="E:System.ComponentModel.MarshalByValueComponent.Disposed" /> no componente.</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Events">
      <summary>Obtém a lista de manipuladores de eventos que estão anexados a este componente.</summary>
      <returns>Um <see cref="T:System.ComponentModel.EventHandlerList" /> que fornece os delegados para este componente.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Finalize">
      <summary>Permite que um objeto tente liberar recursos e executar outras operações de limpeza antes de ser recuperado pela coleta de lixo.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.GetService(System.Type)">
      <summary>Obtém o implementador do <see cref="T:System.IServiceProvider" />.</summary>
      <param name="service">Um <see cref="T:System.Type" /> que representa o tipo de serviço que você deseja.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o implementador do <see cref="T:System.IServiceProvider" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Site">
      <summary>Obtém ou define o site do componente.</summary>
      <returns>Um objeto que implementa <see cref="T:System.ComponentModel.ISite" /> a interface que representa o site do componente.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.ToString">
      <summary>Retorna um <see cref="T:System.String" /> que contém o nome do <see cref="T:System.ComponentModel.Component" />, se houver. Esse método não deve ser substituído.</summary>
      <returns>Um <see cref="T:System.String" /> que contém o nome do <see cref="T:System.ComponentModel.Component" />, se houver.  
 <see langword="null" /> se o <see cref="T:System.ComponentModel.Component" /> for sem nome.</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextProvider">
      <summary>Representa um serviço de análise da máscara que pode ser usado por qualquer número de controles que dão suporte a máscara, como o controle <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> usando a máscara especificada.</summary>
      <param name="mask">Uma <see cref="T:System.String" /> que representa a máscara de entrada.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> usando a máscara e o valor de restrição de ASCII especificados.</summary>
      <param name="mask">Uma <see cref="T:System.String" /> que representa a máscara de entrada.</param>
      <param name="restrictToAscii">
        <see langword="true" /> para restringir a entrada a caracteres compatíveis com ASCII; caso contrário, <see langword="false" /> para permitir todo o conjunto de Unicode.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> usando a máscara, o caractere de senha e o valor de uso do prompt especificados.</summary>
      <param name="mask">Uma <see cref="T:System.String" /> que representa a máscara de entrada.</param>
      <param name="passwordChar">Um <see cref="T:System.Char" /> que será exibido para caracteres digitados em uma cadeia de caracteres de senha.</param>
      <param name="allowPromptAsInput">
        <see langword="true" /> para permitir o caractere de prompt como entrada; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> usando a máscara e a cultura especificadas.</summary>
      <param name="mask">Uma <see cref="T:System.String" /> que representa a máscara de entrada.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" /> que é usado para definir caracteres separadores sensíveis à região.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> usando a máscara, a cultura e o valor de restrição de ASCII especificados.</summary>
      <param name="mask">Uma <see cref="T:System.String" /> que representa a máscara de entrada.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" /> que é usado para definir caracteres separadores sensíveis à região.</param>
      <param name="restrictToAscii">
        <see langword="true" /> para restringir a entrada a caracteres compatíveis com ASCII; caso contrário, <see langword="false" /> para permitir todo o conjunto de Unicode.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> usando a máscara, a cultura, o valor de uso do prompt, o caractere de prompt, o caractere de senha e o valor de restrição de ASCII especificados.</summary>
      <param name="mask">Uma <see cref="T:System.String" /> que representa a máscara de entrada.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" /> que é usado para definir caracteres separadores sensíveis à região.</param>
      <param name="allowPromptAsInput">Um valor <see cref="T:System.Boolean" /> que especifica se o caractere de prompt deve ser permitido como um caractere de entrada válido.</param>
      <param name="promptChar">Um <see cref="T:System.Char" /> que será exibido como um espaço reservado para a entrada do usuário.</param>
      <param name="passwordChar">Um <see cref="T:System.Char" /> que será exibido para caracteres digitados em uma cadeia de caracteres de senha.</param>
      <param name="restrictToAscii">
        <see langword="true" /> para restringir a entrada a caracteres compatíveis com ASCII; caso contrário, <see langword="false" /> para permitir todo o conjunto de Unicode.</param>
      <exception cref="T:System.ArgumentException">O parâmetro de máscara é <see langword="null" /> ou <see cref="F:System.String.Empty" />.  

ou - 
A máscara contém um ou mais caracteres não imprimíveis.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MaskedTextProvider" /> usando a máscara, a cultura, o caractere de senha e o valor de uso do prompt especificados.</summary>
      <param name="mask">Uma <see cref="T:System.String" /> que representa a máscara de entrada.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" /> que é usado para definir caracteres separadores sensíveis à região.</param>
      <param name="passwordChar">Um <see cref="T:System.Char" /> que será exibido para caracteres digitados em uma cadeia de caracteres de senha.</param>
      <param name="allowPromptAsInput">
        <see langword="true" /> para permitir o caractere de prompt como entrada; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char)">
      <summary>Adiciona o caractere de entrada especificado ao final da cadeia de caracteres formatada.</summary>
      <param name="input">Um valor <see cref="T:System.Char" /> a ser acrescentado à cadeia de caracteres formatada.</param>
      <returns>
        <see langword="true" /> se o caractere de entrada foi adicionado com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Adiciona o caractere de entrada especificado ao final da cadeia de caracteres formatada e, em seguida, gera a posição e as informações descritivas.</summary>
      <param name="input">Um valor <see cref="T:System.Char" /> a ser acrescentado à cadeia de caracteres formatada.</param>
      <param name="testPosition">A posição baseada em zero, na cadeia de caracteres formatada, em que foi feita a tentativa de adicionar o caractere. Um parâmetro de saída.</param>
      <param name="resultHint">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação. Um parâmetro de saída.</param>
      <returns>
        <see langword="true" /> se o caractere de entrada foi adicionado com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String)">
      <summary>Adiciona os caracteres da cadeia de caracteres de entrada especificada, ao final da cadeia de caracteres formatada.</summary>
      <param name="input">Uma <see cref="T:System.String" /> que contém valores de caractere a serem acrescentados à cadeia de caracteres formatada.</param>
      <returns>
        <see langword="true" /> se todos os caracteres da cadeia de caracteres de entrada foram adicionados com êxito; caso contrário, <see langword="false" /> para indicar que nenhum caractere foi adicionado.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="input" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Adiciona os caracteres da cadeia de caracteres de entrada especificada ao final da cadeia de caracteres formatada e, em seguida, gera a posição e as informações descritivas.</summary>
      <param name="input">Uma <see cref="T:System.String" /> que contém valores de caractere a serem acrescentados à cadeia de caracteres formatada.</param>
      <param name="testPosition">A posição baseada em zero, na cadeia de caracteres formatada, em que foi feita a tentativa de adicionar o caractere. Um parâmetro de saída.</param>
      <param name="resultHint">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação. Um parâmetro de saída.</param>
      <returns>
        <see langword="true" /> se todos os caracteres da cadeia de caracteres de entrada foram adicionados com êxito; caso contrário, <see langword="false" /> para indicar que nenhum caractere foi adicionado.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput">
      <summary>Obtém um valor que indica se o caractere de prompt deve ser tratado como um caractere de entrada válido ou não.</summary>
      <returns>
        <see langword="true" />Se o usuário puder entrar <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> no controle; caso contrário, <see langword="false" />. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AsciiOnly">
      <summary>Obtém um valor que indica se a máscara aceita caracteres fora do conjunto de caracteres ASCII.</summary>
      <returns>
        <see langword="true" />se apenas ASCII for aceito; <see langword="false" /> se<see cref="T:System.ComponentModel.MaskedTextProvider" /> o puder aceitar qualquer caractere Unicode arbitrário. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount">
      <summary>Obtém o número de posições de caractere editável às quais já foi atribuído um valor de entrada com êxito.</summary>
      <returns>Um <see cref="T:System.Int32" /> que contém o número de posições de caracteres editáveis na máscara de entrada que já foram atribuídas a um valor de caractere na cadeia de caracteres formatada.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount">
      <summary>Obtém o número de posições de caractere editável da máscara de entrada às quais ainda não tenha sido atribuído um valor de entrada.</summary>
      <returns>Um <see cref="T:System.Int32" /> que contém o número de posições de caracteres editáveis que ainda não foram atribuídas a um valor de caractere.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear">
      <summary>Limpa todos os caracteres de entrada editáveis da cadeia de caracteres formatada, substituindo-os por caracteres de prompt.</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)">
      <summary>Limpa todos os caracteres de entrada editáveis da cadeia de caracteres formatada, substituindo-os por caracteres de prompt e, em seguida, gera informações descritivas.</summary>
      <param name="resultHint">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação. Um parâmetro de saída.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clone">
      <summary>Cria uma cópia das <see cref="T:System.ComponentModel.MaskedTextProvider" /> atuais.</summary>
      <returns>O objeto <see cref="T:System.ComponentModel.MaskedTextProvider" /> que esse método cria, convertido como um objeto.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Culture">
      <summary>Obtém a cultura que determina o valor dos separadores e espaços reservados localizáveis na máscara de entrada.</summary>
      <returns>Um <see cref="T:System.Globalization.CultureInfo" /> que contém as informações de cultura associadas à máscara de entrada.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar">
      <summary>Obtém o caractere de senha padrão usado para obscurecer a entrada do usuário.</summary>
      <returns>Um <see cref="T:System.Char" /> que representa o caractere de senha padrão.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositionCount">
      <summary>Obtém o número de posições editáveis na cadeia de caracteres formatada.</summary>
      <returns>Um <see cref="T:System.Int32" /> que contém o número de posições editáveis na cadeia de caracteres formatada.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositions">
      <summary>Obtém um enumerador recém-criado para as posições editáveis na cadeia de caracteres formatada.</summary>
      <returns>Um <see cref="T:System.Collections.IEnumerator" /> que dá suporte à enumeração nas posições editáveis na cadeia de caracteres formatada.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary>Retorna a posição da primeira posição editável atribuída após a posição especificada, usando a direção de pesquisa especificada.</summary>
      <param name="position">A posição baseada em zero, na cadeia de caracteres formatada, para iniciar a pesquisa.</param>
      <param name="direction">Um <see cref="T:System.Boolean" /> indicando a direção da pesquisa; <see langword="true" /> para pesquisar para frente ou <see langword="false" /> para pesquisar para trás.</param>
      <returns>Se for bem-sucedida, um <see cref="T:System.Int32" /> representando a posição baseada em zero da primeira posição editável atribuída encontrada; caso contrário, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>Retorna a posição da primeira posição editável atribuída entre as posições especificadas, usando a direção de pesquisa especificada.</summary>
      <param name="startPosition">A posição baseada em zero na cadeia de caracteres formatada na qual começa a pesquisa.</param>
      <param name="endPosition">A posição baseada em zero na cadeia de caracteres formatada na qual termina a pesquisa.</param>
      <param name="direction">Um <see cref="T:System.Boolean" /> indicando a direção da pesquisa; <see langword="true" /> para pesquisar para frente ou <see langword="false" /> para pesquisar para trás.</param>
      <returns>Se for bem-sucedida, um <see cref="T:System.Int32" /> representando a posição baseada em zero da primeira posição editável atribuída encontrada; caso contrário, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)">
      <summary>Retorna a posição da primeira posição editável após a posição especificada, usando a direção de pesquisa especificada.</summary>
      <param name="position">A posição baseada em zero, na cadeia de caracteres formatada, para iniciar a pesquisa.</param>
      <param name="direction">Um <see cref="T:System.Boolean" /> indicando a direção da pesquisa; <see langword="true" /> para pesquisar para frente ou <see langword="false" /> para pesquisar para trás.</param>
      <returns>Se for bem-sucedida, um <see cref="T:System.Int32" /> representando a posição baseada em zero da primeira posição editável encontrada; caso contrário, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>Retorna a posição da primeira posição editável entre as posições especificadas, usando a direção de pesquisa especificada.</summary>
      <param name="startPosition">A posição baseada em zero na cadeia de caracteres formatada na qual começa a pesquisa.</param>
      <param name="endPosition">A posição baseada em zero na cadeia de caracteres formatada na qual termina a pesquisa.</param>
      <param name="direction">Um <see cref="T:System.Boolean" /> indicando a direção da pesquisa; <see langword="true" /> para pesquisar para frente ou <see langword="false" /> para pesquisar para trás.</param>
      <returns>Se for bem-sucedida, um <see cref="T:System.Int32" /> representando a posição baseada em zero da primeira posição editável encontrada; caso contrário, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)">
      <summary>Retorna a posição da primeira posição não editável após a posição especificada, usando a direção de pesquisa especificada.</summary>
      <param name="position">A posição baseada em zero, na cadeia de caracteres formatada, para iniciar a pesquisa.</param>
      <param name="direction">Um <see cref="T:System.Boolean" /> indicando a direção da pesquisa; <see langword="true" /> para pesquisar para frente ou <see langword="false" /> para pesquisar para trás.</param>
      <returns>Se for bem-sucedida, um <see cref="T:System.Int32" /> representando a posição baseada em zero da primeira posição literal encontrada; caso contrário, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>Retorna a posição da primeira posição não editável entre as posições especificadas, usando a direção de pesquisa especificada.</summary>
      <param name="startPosition">A posição baseada em zero na cadeia de caracteres formatada na qual começa a pesquisa.</param>
      <param name="endPosition">A posição baseada em zero na cadeia de caracteres formatada na qual termina a pesquisa.</param>
      <param name="direction">Um <see cref="T:System.Boolean" /> indicando a direção da pesquisa; <see langword="true" /> para pesquisar para frente ou <see langword="false" /> para pesquisar para trás.</param>
      <returns>Se for bem-sucedida, um <see cref="T:System.Int32" /> representando a posição baseada em zero da primeira posição literal encontrada; caso contrário, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary>Retorna a posição da primeira posição editável não atribuída após a posição especificada, usando a direção de pesquisa especificada.</summary>
      <param name="position">A posição baseada em zero, na cadeia de caracteres formatada, para iniciar a pesquisa.</param>
      <param name="direction">Um <see cref="T:System.Boolean" /> indicando a direção da pesquisa; <see langword="true" /> para pesquisar para frente ou <see langword="false" /> para pesquisar para trás.</param>
      <returns>Se for bem-sucedida, um <see cref="T:System.Int32" /> representando a posição baseada em zero da primeira posição editável não atribuída encontrada; caso contrário, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>Retorna a posição da primeira posição editável não atribuída entre as posições especificadas, usando a direção de pesquisa especificada.</summary>
      <param name="startPosition">A posição baseada em zero na cadeia de caracteres formatada na qual começa a pesquisa.</param>
      <param name="endPosition">A posição baseada em zero na cadeia de caracteres formatada na qual termina a pesquisa.</param>
      <param name="direction">Um <see cref="T:System.Boolean" /> indicando a direção da pesquisa; <see langword="true" /> para pesquisar para frente ou <see langword="false" /> para pesquisar para trás.</param>
      <returns>Se for bem-sucedida, um <see cref="T:System.Int32" /> representando a posição baseada em zero da primeira posição editável não atribuída encontrada; caso contrário, <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)">
      <summary>Determina se o <see cref="T:System.ComponentModel.MaskedTextResultHint" /> especificado indica êxito ou falha.</summary>
      <param name="hint">Um valor <see cref="T:System.ComponentModel.MaskedTextResultHint" />, normalmente obtido como um parâmetro de saída de uma operação anterior.</param>
      <returns>
        <see langword="true" /> se o valor <see cref="T:System.ComponentModel.MaskedTextResultHint" /> especificado representa um êxito; <see langword="false" />, se ele representa falha.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals">
      <summary>Obtém ou define um valor que indica se os caracteres literais da máscara de entrada devem ser incluídos na cadeia de caracteres formatada.</summary>
      <returns>
        <see langword="true" />Se forem incluídos literais; caso contrário <see langword="false" />,. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludePrompt">
      <summary>Obtém ou define um valor que indica se <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> é usado para representar a ausência de entrada do usuário ao exibir a cadeia de caracteres formatada.</summary>
      <returns>
        <see langword="true" />Se o caractere de prompt for usado para representar as posições em que nenhuma entrada do usuário foi fornecida; caso contrário <see langword="false" />,. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)">
      <summary>Insere o caractere especificado na posição especificada na cadeia de caracteres formatada.</summary>
      <param name="input">O <see cref="T:System.Char" /> a ser inserido.</param>
      <param name="position">A posição baseada em zero, na cadeia de caracteres formatada, para inserir o caractere.</param>
      <returns>
        <see langword="true" /> se a inserção foi bem-sucedida; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Insere o caractere especificado na posição especificada na cadeia de caracteres formatada, retornando a última posição de inserção e o status da operação.</summary>
      <param name="input">O <see cref="T:System.Char" /> a ser inserido.</param>
      <param name="position">A posição baseada em zero, na cadeia de caracteres formatada, para inserir o caractere.</param>
      <param name="testPosition">Se o método for bem-sucedido, a última posição em que foi inserido um caractere; caso contrário, a primeira posição em que a inserção falhou. Um parâmetro de saída.</param>
      <param name="resultHint">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação de inserção. Um parâmetro de saída.</param>
      <returns>
        <see langword="true" /> se a inserção foi bem-sucedida; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)">
      <summary>Insere a cadeia de caracteres especificada em uma posição especificada na cadeia de caracteres formatada.</summary>
      <param name="input">O <see cref="T:System.String" /> a ser inserido.</param>
      <param name="position">A posição baseada em zero, na cadeia de caracteres formatada, para inserir a cadeia de caracteres de entrada.</param>
      <returns>
        <see langword="true" /> se a inserção foi bem-sucedida; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="input" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Insere a cadeia de caracteres especificada em uma posição especificada na cadeia de caracteres formatada, retornando a última posição de inserção e o status da operação.</summary>
      <param name="input">O <see cref="T:System.String" /> a ser inserido.</param>
      <param name="position">A posição baseada em zero, na cadeia de caracteres formatada, para inserir a cadeia de caracteres de entrada.</param>
      <param name="testPosition">Se o método for bem-sucedido, a última posição em que foi inserido um caractere; caso contrário, a primeira posição em que a inserção falhou. Um parâmetro de saída.</param>
      <param name="resultHint">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação de inserção. Um parâmetro de saída.</param>
      <returns>
        <see langword="true" /> se a inserção foi bem-sucedida; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="input" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.InvalidIndex">
      <summary>Obtém o limite superior do intervalo de índices inválidos.</summary>
      <returns>Um valor que representa o maior índice inválido, conforme determinado pela implementação do provedor. Por exemplo, se o menor índice válido for 0, essa propriedade retornará-1.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)">
      <summary>Determina se a posição especificada está disponível para atribuição.</summary>
      <param name="position">A posição baseada em zero na máscara a ser testada.</param>
      <returns>
        <see langword="true" /> se a posição especificada na cadeia de caracteres formatada é editável e ainda não houve nada atribuído a ela; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)">
      <summary>Determina se a posição especificada é editável.</summary>
      <param name="position">A posição baseada em zero na máscara a ser testada.</param>
      <returns>
        <see langword="true" /> se a posição especificada na cadeia de caracteres formatada é editável; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IsPassword">
      <summary>Obtém ou define um valor que determina se a proteção por senha deve ser aplicada à cadeia de caracteres formatada.</summary>
      <returns>
        <see langword="true" />se a cadeia de caracteres de entrada for tratada como uma cadeia de caracteres de senha; caso contrário <see langword="false" />,. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)">
      <summary>Determina se o caractere especificado é um caractere de entrada válido.</summary>
      <param name="c">O valor <see cref="T:System.Char" /> para testar.</param>
      <returns>
        <see langword="true" /> se o caractere especificado contém um valor de entrada válido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)">
      <summary>Determina se o caractere especificado é um caractere de máscara válido.</summary>
      <param name="c">O valor <see cref="T:System.Char" /> para testar.</param>
      <returns>
        <see langword="true" /> se o caractere especificado contém um valor de máscara válido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)">
      <summary>Determina se o caractere especificado é um caractere de senha válido.</summary>
      <param name="c">O valor <see cref="T:System.Char" /> para testar.</param>
      <returns>
        <see langword="true" /> se o caractere especificado contém um valor de senha válido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)">
      <summary>Obtém o elemento na posição especificada na cadeia de caracteres formatada.</summary>
      <param name="index">Um índice baseado em zero do elemento a ser recuperado.</param>
      <returns>O <see cref="T:System.Char" /> na posição especificada na cadeia de caracteres formatada.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> é menor que zero ou maior ou igual ao <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> da máscara.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition">
      <summary>Obtém o índice na máscara do caractere de entrada mais à direita que foi atribuído à máscara.</summary>
      <returns>Se pelo menos um caractere de entrada tiver sido atribuído à máscara, um <see cref="T:System.Int32" /> contendo o índice da posição atribuída na extrema direita; caso contrário, se nenhuma posição tiver <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />sido atribuída,.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Length">
      <summary>Obtém o comprimento da máscara, excluindo todos os caracteres modificadores de máscara.</summary>
      <returns>Um <see cref="T:System.Int32" /> que contém o número de posições na máscara, excluindo caracteres que modificam a entrada de máscara.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Mask">
      <summary>Obtém a máscara de entrada.</summary>
      <returns>Um <see cref="T:System.String" /> que contém a máscara completa.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskCompleted">
      <summary>Obtém um valor que indica se todas as entradas necessárias foram inseridas na cadeia de caracteres formatada.</summary>
      <returns>
        <see langword="true" /> se todas as entradas necessárias foram inseridas na máscara; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskFull">
      <summary>Obtém um valor que indica se todas as entradas necessárias e opcionais foram inseridas na cadeia de caracteres formatada.</summary>
      <returns>
        <see langword="true" /> se todas as entradas obrigatórias e opcionais tiverem sido inseridas; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PasswordChar">
      <summary>Obtém ou define o caractere a ser substituído pelos caracteres de entrada reais.</summary>
      <returns>O valor <see cref="T:System.Char" /> usado como o caractere de senha.</returns>
      <exception cref="T:System.InvalidOperationException">O caractere de senha especificado ao definir essa propriedade é o mesmo que o caractere de prompt atual, <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" />. Os dois devem ser diferentes.</exception>
      <exception cref="T:System.ArgumentException">O caractere especificado ao definir essa propriedade não é um caractere de senha válido, conforme determinado pelo método <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PromptChar">
      <summary>Obtém ou define o caractere usado para representar a ausência de entrada do usuário para todas as posições de edição disponíveis.</summary>
      <returns>O caractere usado para solicitar a entrada do usuário. O padrão é um sublinhado (_).</returns>
      <exception cref="T:System.InvalidOperationException">O caractere de prompt especificado ao definir essa propriedade é o mesmo que o caractere de senha atual, <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />. Os dois devem ser diferentes.</exception>
      <exception cref="T:System.ArgumentException">O caractere especificado ao definir essa propriedade não é um caractere de senha válido, conforme determinado pelo método <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove">
      <summary>Remove o último caractere atribuído da cadeia de caracteres formatada.</summary>
      <returns>
        <see langword="true" /> se o caractere foi removido com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Remove o último caractere atribuído da cadeia de caracteres formatada e, em seguida, gera a posição da remoção e as informações descritivas.</summary>
      <param name="testPosition">A posição baseada em zero, na cadeia de caracteres formatada, em que o caractere foi realmente removido. Um parâmetro de saída.</param>
      <param name="resultHint">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação. Um parâmetro de saída.</param>
      <returns>
        <see langword="true" /> se o caractere foi removido com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)">
      <summary>Remove o caractere atribuído na posição especificada da cadeia de caracteres formatada.</summary>
      <param name="position">A posição baseada em zero do caractere atribuído a ser removido.</param>
      <returns>
        <see langword="true" /> se o caractere foi removido com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)">
      <summary>Remove o caractere atribuído entre as posições especificadas da cadeia de caracteres formatada.</summary>
      <param name="startPosition">O índice baseado em zero do primeiro caractere atribuído a ser removido.</param>
      <param name="endPosition">O índice baseado em zero do último caractere atribuído a ser removido.</param>
      <returns>
        <see langword="true" /> se o caractere foi removido com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Remove os caracteres atribuídos entre as posições especificadas da cadeia de caracteres formatada e, em seguida, gera a posição da remoção e as informações descritivas.</summary>
      <param name="startPosition">O índice baseado em zero do primeiro caractere atribuído a ser removido.</param>
      <param name="endPosition">O índice baseado em zero do último caractere atribuído a ser removido.</param>
      <param name="testPosition">Se tiver êxito, a posição baseada em zero na cadeia de caracteres formatada em que os caracteres foram realmente removidos; caso contrário, a primeira posição em que a operação falhou. Um parâmetro de saída.</param>
      <param name="resultHint">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação. Um parâmetro de saída.</param>
      <returns>
        <see langword="true" /> se o caractere foi removido com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)">
      <summary>Substitui um único caractere na posição especificada ou além dela, pelo valor do caractere especificado.</summary>
      <param name="input">O valor <see cref="T:System.Char" /> que substitui o valor existente.</param>
      <param name="position">A posição baseada em zero para pesquisar o primeiro caractere editável a ser substituído.</param>
      <returns>
        <see langword="true" /> se o caractere foi substituído com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Substitui um único caractere, entre a posição final e inicial especificadas, pelo valor do caractere especificado e, em seguida, gera a posição de remoção e as informações descritivas.</summary>
      <param name="input">O valor <see cref="T:System.Char" /> que substitui o valor existente.</param>
      <param name="startPosition">A posição baseada em zero na cadeia de caracteres formatada na qual começa a substituição.</param>
      <param name="endPosition">A posição baseada em zero na cadeia de caracteres formatada na qual termina a substituição.</param>
      <param name="testPosition">Se tiver êxito, a posição baseada em zero na cadeia de caracteres formatada em que o último caractere foi, na verdade, substituído; caso contrário, a primeira posição em que a operação falhou. Um parâmetro de saída.</param>
      <param name="resultHint">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação de substituição. Um parâmetro de saída.</param>
      <returns>
        <see langword="true" /> se o caractere foi substituído com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Substitui um único caractere na posição especificada ou além dela, pelo valor do caractere especificado e, em seguida, gera a posição de remoção e as informações descritivas.</summary>
      <param name="input">O valor <see cref="T:System.Char" /> que substitui o valor existente.</param>
      <param name="position">A posição baseada em zero para pesquisar o primeiro caractere editável a ser substituído.</param>
      <param name="testPosition">Se tiver êxito, a posição baseada em zero na cadeia de caracteres formatada em que o último caractere foi, na verdade, substituído; caso contrário, a primeira posição em que a operação falhou. Um parâmetro de saída.</param>
      <param name="resultHint">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação de substituição. Um parâmetro de saída.</param>
      <returns>
        <see langword="true" /> se o caractere foi substituído com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)">
      <summary>Substitui um intervalo de caracteres editáveis, começando na posição especificada com a cadeia de caracteres especificada.</summary>
      <param name="input">O valor <see cref="T:System.String" /> usado para substituir os caracteres editáveis existentes.</param>
      <param name="position">A posição baseada em zero para pesquisar o primeiro caractere editável a ser substituído.</param>
      <returns>
        <see langword="true" /> se todos os caracteres foram substituídos com êxito; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="input" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Substitui um intervalo de caracteres editáveis entre as posições inicial e final especificadas com a cadeia de caracteres especificada e, então, gera a posição de remoção e informações descritivas.</summary>
      <param name="input">O valor <see cref="T:System.String" /> usado para substituir os caracteres editáveis existentes.</param>
      <param name="startPosition">A posição baseada em zero na cadeia de caracteres formatada na qual começa a substituição.</param>
      <param name="endPosition">A posição baseada em zero na cadeia de caracteres formatada na qual termina a substituição.</param>
      <param name="testPosition">Se tiver êxito, a posição baseada em zero na cadeia de caracteres formatada em que o último caractere foi, na verdade, substituído; caso contrário, a primeira posição em que a operação falhou. Um parâmetro de saída.</param>
      <param name="resultHint">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação de substituição. Um parâmetro de saída.</param>
      <returns>
        <see langword="true" /> se todos os caracteres foram substituídos com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Substitui um intervalo de caracteres editáveis começando pela posição especificada com a cadeia de caracteres especificada e, em seguida, gera a posição de remoção e as informações descritivas.</summary>
      <param name="input">O valor <see cref="T:System.String" /> usado para substituir os caracteres editáveis existentes.</param>
      <param name="position">A posição baseada em zero para pesquisar o primeiro caractere editável a ser substituído.</param>
      <param name="testPosition">Se tiver êxito, a posição baseada em zero na cadeia de caracteres formatada em que o último caractere foi, na verdade, substituído; caso contrário, a primeira posição em que a operação falhou. Um parâmetro de saída.</param>
      <param name="resultHint">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação de substituição. Um parâmetro de saída.</param>
      <returns>
        <see langword="true" /> se todos os caracteres foram substituídos com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt">
      <summary>Obtém ou define um valor que determina como um caractere de entrada que corresponde ao caractere do prompt deve ser tratado.</summary>
      <returns>
        <see langword="true" /> se o caractere de prompt inserido como entrada fizer com que a posição editável atual na máscara seja redefinida, caso contrário, <see langword="false" /> para indicar que ele deverá ser processado como um caractere de entrada normal. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace">
      <summary>Obtém ou define um valor que determina como um caractere de entrada de espaço deve ser tratado.</summary>
      <returns>
        <see langword="true" /> se o caractere de entrada de espaço fizer com que a posição editável atual na máscara seja redefinida; caso contrário, <see langword="false" /> para indicar que ele deve ser processado como um caractere de entrada normal. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String)">
      <summary>Define a cadeia de caracteres formatada como a cadeia de caracteres de entrada especificada.</summary>
      <param name="input">O valor <see cref="T:System.String" /> usado para definir a cadeia de caracteres formatada.</param>
      <returns>
        <see langword="true" /> se todos os caracteres foram definidos com êxito; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="input" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Define a cadeia de caracteres formatada como a cadeia de caracteres de entrada especificada e, em seguida, gera a posição de remoção e as informações descritivas.</summary>
      <param name="input">O valor <see cref="T:System.String" /> usado para definir a cadeia de caracteres formatada.</param>
      <param name="testPosition">Se tiver êxito, a posição baseada em zero na cadeia de caracteres formatada em que o último caractere foi realmente definido; caso contrário, a primeira posição em que a operação falhou. Um parâmetro de saída.</param>
      <param name="resultHint">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação de definição. Um parâmetro de saída.</param>
      <returns>
        <see langword="true" /> se todos os caracteres foram definidos com êxito; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="input" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.SkipLiterals">
      <summary>Obtém ou define um valor que indica se as posições de caractere literal na máscara podem ser substituídas por seus mesmos valores.</summary>
      <returns>
        <see langword="true" />para permitir que os literais sejam adicionados de volta; caso contrário <see langword="false" /> , para não permitir que o usuário substitua caracteres literais. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToDisplayString">
      <summary>Retorna a cadeia de caracteres formatada em um formato que pode ser exibido.</summary>
      <returns>A <see cref="T:System.String" /> formatada que inclui prompts e literais de máscara.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString">
      <summary>Retorna a cadeia de caracteres formatada que inclui todos os valores de caractere atribuídos.</summary>
      <returns>A <see cref="T:System.String" /> formatada que inclui todos os valores de caractere atribuídos.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)">
      <summary>Retorna a cadeia de caracteres formatada, incluindo caracteres de senha, opcionalmente.</summary>
      <param name="ignorePasswordChar">
        <see langword="true" /> para retornar os caracteres editáveis reais; caso contrário, <see langword="false" /> para indicar que a propriedade <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> deve ser respeitada.</param>
      <returns>A <see cref="T:System.String" /> formatada que inclui literais, prompts e, opcionalmente, caracteres de senha.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)">
      <summary>Retorna a cadeia de caracteres formatada, incluindo, opcionalmente, caracteres de prompt e literais.</summary>
      <param name="includePrompt">
        <see langword="true" /> para incluir caracteres de prompt na cadeia de caracteres de retorno; caso contrário, <see langword="false" />.</param>
      <param name="includeLiterals">
        <see langword="true" /> para incluir caracteres literais na cadeia de caracteres de retorno; caso contrário, <see langword="false" />.</param>
      <returns>A <see cref="T:System.String" /> formatada que inclui todos os valores de caractere atribuídos e, opcionalmente, inclui literais e prompts.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>Retorna uma subcadeia da cadeia de caracteres formatada, incluindo, opcionalmente, caracteres de prompt, de literais e de senha.</summary>
      <param name="ignorePasswordChar">
        <see langword="true" /> para retornar os caracteres editáveis reais; caso contrário, <see langword="false" /> para indicar que a propriedade <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> deve ser respeitada.</param>
      <param name="includePrompt">
        <see langword="true" /> para incluir caracteres de prompt na cadeia de caracteres de retorno; caso contrário, <see langword="false" />.</param>
      <param name="includeLiterals">
        <see langword="true" /> para retornar caracteres literais na cadeia de caracteres de retorno; caso contrário, <see langword="false" />.</param>
      <param name="startPosition">A posição baseada em zero na cadeia de caracteres formatada na qual começa a saída.</param>
      <param name="length">O número de caracteres a ser retornado.</param>
      <returns>Se for bem-sucedido, uma subcadeia da <see cref="T:System.String" /> formatada, que inclui todos os valores de caractere atribuídos e, opcionalmente, inclui literais, prompts e caracteres de senha; caso contrário, a cadeia de caracteres <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>Retorna uma subcadeia da cadeia de caracteres formatada, incluindo, opcionalmente, caracteres de prompt e literais.</summary>
      <param name="includePrompt">
        <see langword="true" /> para incluir caracteres de prompt na cadeia de caracteres de retorno; caso contrário, <see langword="false" />.</param>
      <param name="includeLiterals">
        <see langword="true" /> para incluir caracteres literais na cadeia de caracteres de retorno; caso contrário, <see langword="false" />.</param>
      <param name="startPosition">A posição baseada em zero na cadeia de caracteres formatada na qual começa a saída.</param>
      <param name="length">O número de caracteres a ser retornado.</param>
      <returns>Se for bem-sucedido, uma subcadeia da <see cref="T:System.String" /> formatada, que inclui todos os valores de caractere atribuídos e, opcionalmente, inclui literais e prompts; caso contrário, a cadeia de caracteres <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)">
      <summary>Retorna uma subcadeia da cadeia de caracteres formatada, incluindo, opcionalmente, caracteres de senha.</summary>
      <param name="ignorePasswordChar">
        <see langword="true" /> para retornar os caracteres editáveis reais; caso contrário, <see langword="false" /> para indicar que a propriedade <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> deve ser respeitada.</param>
      <param name="startPosition">A posição baseada em zero na cadeia de caracteres formatada na qual começa a saída.</param>
      <param name="length">O número de caracteres a ser retornado.</param>
      <returns>Se for bem-sucedido, uma subcadeia da <see cref="T:System.String" /> formatada, que inclui literais, prompts e, opcionalmente, caracteres de senha; caso contrário, a cadeia de caracteres <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)">
      <summary>Retorna uma subcadeia da cadeia de caracteres formatada.</summary>
      <param name="startPosition">A posição baseada em zero na cadeia de caracteres formatada na qual começa a saída.</param>
      <param name="length">O número de caracteres a ser retornado.</param>
      <returns>Se for bem-sucedido, uma subcadeia da <see cref="T:System.String" /> formatada, que inclui todos os valores de caractere atribuídos; caso contrário, a cadeia de caracteres <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Testa se o caractere especificado pode ser definido na posição especificada com êxito.</summary>
      <param name="input">O valor <see cref="T:System.Char" /> para testar.</param>
      <param name="position">A posição na máscara na qual testar o caractere de entrada.</param>
      <param name="hint">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação. Um parâmetro de saída.</param>
      <returns>
        <see langword="true" /> se o caractere especificado for válido para a posição especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)">
      <summary>Testa se o caractere especificado seria escapado na posição especificada.</summary>
      <param name="input">O valor <see cref="T:System.Char" /> para testar.</param>
      <param name="position">A posição na máscara na qual testar o caractere de entrada.</param>
      <returns>
        <see langword="true" /> se o caractere especificado seria escapado na posição especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String)">
      <summary>Testa se a cadeia de caracteres especificada pode ser definida com êxito.</summary>
      <param name="input">O valor <see cref="T:System.String" /> para testar.</param>
      <returns>
        <see langword="true" /> se a cadeia de caracteres especificada representa uma entrada válida; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>Testa se a cadeia de caracteres especificada pode ser definida com êxito e, em seguida, gera a posição e informações descritivas.</summary>
      <param name="input">O valor <see cref="T:System.String" /> para testar.</param>
      <param name="testPosition">Se for bem-sucedido, a posição baseada em zero do último caractere realmente testado; caso contrário, a primeira posição em que o teste falhou. Um parâmetro de saída.</param>
      <param name="resultHint">Um <see cref="T:System.ComponentModel.MaskedTextResultHint" /> que descreve sucintamente o resultado da operação de teste. Um parâmetro de saída.</param>
      <returns>
        <see langword="true" /> se a cadeia de caracteres especificada representa uma entrada válida; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextResultHint">
      <summary>Especifica valores que descrevem sucintamente os resultados de um operação de análise de texto mascarado.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AlphanumericCharacterExpected">
      <summary>A operação não foi bem-sucedida. Foi encontrado um caractere de entrada que não era alfanumérico. .</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AsciiCharacterExpected">
      <summary>A operação não foi bem-sucedida. Foi encontrado um caractere de entrada que não era um membro do conjunto de caracteres ASCII.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.CharacterEscaped">
      <summary>Êxito. A operação foi bem-sucedida porque um literal, prompt ou caractere de espaço era caractere de escape. Para obter mais informações sobre caracteres de escape, consulte o método <see cref="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)" />.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.DigitExpected">
      <summary>A operação não foi bem-sucedida. Foi encontrado um caractere de entrada que não era um dígito.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.InvalidInput">
      <summary>A operação não foi bem-sucedida. O programa encontrou um caractere de entrada que não era válido. Para obter mais informações sobre caracteres que não são válidos, consulte o método <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.LetterExpected">
      <summary>A operação não foi bem-sucedida. Foi encontrado um caractere de entrada que não era uma letra.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NoEffect">
      <summary>Êxito. A operação primária não foi executada porque não foi necessária. portanto, nenhum efeito colateral foi produzido.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NonEditPosition">
      <summary>A operação não foi bem-sucedida. A posição atual na cadeia de caracteres formatada é um caractere literal.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PositionOutOfRange">
      <summary>A operação não foi bem-sucedida. A posição especificada não está no intervalo da cadeia de caracteres de destino; normalmente, é menor que zero ou maior que o comprimento da cadeia de caracteres de destino.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PromptCharNotAllowed">
      <summary>A operação não foi bem-sucedida. O caractere de prompt não é válido na entrada, talvez porque o <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" /> está definido como <see langword="false" />.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SideEffect">
      <summary>Êxito. A operação principal não foi executada porque não foi necessária, mas o método produziu um efeito colateral. Por exemplo, o método <see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" /> pode excluir uma posição de edição não atribuída, o que causa o deslocamento à esquerda de caracteres subsequentes na cadeia de caracteres formatada.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SignedDigitExpected">
      <summary>A operação não foi bem-sucedida. Foi encontrado um caractere de entrada que não era um dígito com sinal.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Success">
      <summary>Êxito. A operação primária foi bem-sucedida.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.UnavailableEditPosition">
      <summary>A operação não foi bem-sucedida. Não havia posições de edição suficientes disponíveis para atender à solicitação.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Unknown">
      <summary>Desconhecido. O resultado da operação não pôde ser determinado.</summary>
    </member>
    <member name="T:System.ComponentModel.MemberDescriptor">
      <summary>Representa um membro de classe, como uma propriedade ou evento. Esta é uma classe base abstrata.</summary>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MemberDescriptor" /> com o <see cref="T:System.ComponentModel.MemberDescriptor" /> especificado.</summary>
      <param name="descr">Um <see cref="T:System.ComponentModel.MemberDescriptor" /> que contém o nome do membro e seus atributos.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MemberDescriptor" /> com o nome no <see cref="T:System.ComponentModel.MemberDescriptor" /> especificado e os atributos tanto no <see cref="T:System.ComponentModel.MemberDescriptor" /> antigo quanto na matriz <see cref="T:System.Attribute" />.</summary>
      <param name="oldMemberDescriptor">Um <see cref="T:System.ComponentModel.MemberDescriptor" /> que tem o nome do membro e seus atributos.</param>
      <param name="newAttributes">Uma matriz de objetos <see cref="T:System.Attribute" /> com os atributos que você deseja adicionar ao membro.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MemberDescriptor" /> com o nome especificado do membro.</summary>
      <param name="name">O nome do membro.</param>
      <exception cref="T:System.ArgumentException">O nome é uma cadeia de caracteres vazia ("") ou <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MemberDescriptor" /> com o nome especificado do membro e uma matriz de atributos.</summary>
      <param name="name">O nome do membro.</param>
      <param name="attributes">Uma matriz do tipo <see cref="T:System.Attribute" /> que contém os atributos de membro.</param>
      <exception cref="T:System.ArgumentException">O nome é uma cadeia de caracteres vazia ("") ou <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.AttributeArray">
      <summary>Obtém ou define uma matriz de atributos.</summary>
      <returns>Uma matriz do tipo <see cref="T:System.Attribute" /> que contém os atributos deste membro.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Attributes">
      <summary>Obtém a coleção de atributos para este membro.</summary>
      <returns>Um <see cref="T:System.ComponentModel.AttributeCollection" /> que fornece os atributos para esse membro ou uma coleção vazia se não houver nenhum atributo <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" />no.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Category">
      <summary>Obtém o nome da categoria à qual o membro pertence, conforme especificado no <see cref="T:System.ComponentModel.CategoryAttribute" />.</summary>
      <returns>O nome da categoria à qual o membro pertence. Se não houver <see cref="T:System.ComponentModel.CategoryAttribute" />, o nome da categoria será definido como a categoria padrão, <see langword="Misc" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection">
      <summary>Cria uma coleção de atributos usando a matriz de atributos passada para o construtor.</summary>
      <returns>Um novo <see cref="T:System.ComponentModel.AttributeCollection" /> que contém os atributos <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Description">
      <summary>Obtém a descrição do membro, conforme especificado no <see cref="T:System.ComponentModel.DescriptionAttribute" />.</summary>
      <returns>A descrição do membro. Se não houver <see cref="T:System.ComponentModel.DescriptionAttribute" />, o valor da propriedade será definido como o padrão, que é uma cadeia de caracteres vazia ("").</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DesignTimeOnly">
      <summary>Obtém a informação de se este membro deve ser definido apenas em tempo de design, conforme especificado no <see cref="T:System.ComponentModel.DesignOnlyAttribute" />.</summary>
      <returns>
        <see langword="true" />Se esse membro deve ser definido somente no momento do design; <see langword="false" /> se o membro puder ser definido durante o tempo de execução.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DisplayName">
      <summary>Obtém o nome que pode ser exibido em uma janela, tal como uma janela Propriedades.</summary>
      <returns>O nome a ser exibido para o membro.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.Equals(System.Object)">
      <summary>Compara essa instância ao objeto fornecido para verificar se eles são equivalentes.</summary>
      <param name="obj">O objeto a ser comparado com a instância atual.</param>
      <returns>
        <see langword="true" /> se forem equivalentes; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)">
      <summary>Quando substituído em uma classe derivada, adiciona os atributos da classe de herança à lista de atributos na classe pai especificada.</summary>
      <param name="attributeList">Um <see cref="T:System.Collections.IList" /> que lista os atributos na classe pai. Inicialmente, está vazio.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)">
      <summary>Localiza o método fornecido por meio de reflexão, pesquisando somente métodos públicos.</summary>
      <param name="componentClass">O componente que contém o método.</param>
      <param name="name">O nome do método a ser localizado.</param>
      <param name="args">Uma matriz de parâmetros do método, usada para escolher entre os métodos sobrecarregados.</param>
      <param name="returnType">O tipo a ser retornado pelo método.</param>
      <returns>Um <see cref="T:System.Reflection.MethodInfo" /> que representará o método ou <see langword="null" /> se o método não for localizado.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)">
      <summary>Localiza o método fornecido por meio de reflexão, com uma opção para pesquisar somente os métodos públicos.</summary>
      <param name="componentClass">O componente que contém o método.</param>
      <param name="name">O nome do método a ser localizado.</param>
      <param name="args">Uma matriz de parâmetros do método, usada para escolher entre os métodos sobrecarregados.</param>
      <param name="returnType">O tipo a ser retornado pelo método.</param>
      <param name="publicOnly">Se é necessário restringir a pesquisa à métodos públicos.</param>
      <returns>Um <see cref="T:System.Reflection.MethodInfo" /> que representará o método ou <see langword="null" /> se o método não for localizado.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código hash do <see cref="T:System.ComponentModel.MemberDescriptor" /> atual.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary>Recupera o objeto que deve ser usado durante a invocação de membros.</summary>
      <param name="type">O <see cref="T:System.Type" /> do destino da invocação.</param>
      <param name="instance">O destino da invocação potencial.</param>
      <returns>O objeto a ser usado durante as invocações de membro.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> ou <paramref name="instance" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)">
      <summary>Obtém o componente em que se invoca um método.</summary>
      <param name="componentClass">Um <see cref="T:System.Type" /> que representa o tipo de componente aos quais esse <see cref="T:System.ComponentModel.MemberDescriptor" /> está associado. Por exemplo, se esse <see cref="T:System.ComponentModel.MemberDescriptor" /> descreve uma propriedade, esse parâmetro deve ser a classe em que a propriedade é declarada.</param>
      <param name="component">Uma instância do objeto a ser chamado.</param>
      <returns>Uma instância do componente a ser invocado. Esse método retorna um designer visual quando a propriedade é anexada a um designer visual.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentClass" /> ou <paramref name="component" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)">
      <summary>Obtém um site do componente para o componente fornecido.</summary>
      <param name="component">O componente para o qual você deseja encontrar um site.</param>
      <returns>O site do componente ou <see langword="null" /> se um site não existir.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.IsBrowsable">
      <summary>Obtém um valor que indica se o membro é navegável, conforme especificado no <see cref="T:System.ComponentModel.BrowsableAttribute" />.</summary>
      <returns>
        <see langword="true" />Se o membro for navegável; caso contrário <see langword="false" />,. Se não houver <see cref="T:System.ComponentModel.BrowsableAttribute" />, o valor da propriedade será definido como o padrão, que é <see langword="true" />.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Name">
      <summary>Obtém o nome do membro.</summary>
      <returns>O nome do membro.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.NameHashCode">
      <summary>Obtém o código hash do nome do membro, como especificado em <see cref="M:System.String.GetHashCode" />.</summary>
      <returns>O código de hash para o nome do membro.</returns>
    </member>
    <member name="T:System.ComponentModel.MultilineStringConverter">
      <summary>Fornece um conversor de tipo para converter cadeias de caracteres de várias linhas em uma cadeia de caracteres simples.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.MultilineStringConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte o objeto de valor determinado para o tipo especificado, usando as informações de contexto e de cultura especificadas.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" />. Se <see langword="null" /> for passado, a cultura atual será considerada.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType">O <see cref="T:System.Type" /> para o qual o parâmetro value será convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Retorna uma coleção de propriedades para o tipo de matriz especificado pelo parâmetro <paramref name="value" /> usando o contexto e os atributos especificados.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value">Um <see cref="T:System.Object" /> que especifica o tipo de matriz para o qual obter as propriedades.</param>
      <param name="attributes">Uma matriz do tipo <see cref="T:System.Attribute" /> que é usada como um filtro.</param>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades que são expostas para esse tipo de dados ou <see langword="null" />, se não há nenhuma propriedade.</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retorna se este objeto é compatível com as propriedades, usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>
        <see langword="true" /> caso <see cref="Overload:System.ComponentModel.MultilineStringConverter.GetProperties" /> deva ser chamado para localizar as propriedades desse objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.NestedContainer">
      <summary>Fornece a implementação de base para a interface <see cref="T:System.ComponentModel.INestedContainer" />, que permite que os contêineres tenham um componente de propriedade.</summary>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.NestedContainer" />.</summary>
      <param name="owner">O <see cref="T:System.ComponentModel.IComponent" /> que detém esse contêiner aninhado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>Cria um site para o componente dentro do contêiner.</summary>
      <param name="component">O <see cref="T:System.ComponentModel.IComponent" /> para o qual criar um site.</param>
      <param name="name">O nome a ser atribuído ao <paramref name="component" /> ou <see langword="null" /> para ignorar a atribuição de nomes.</param>
      <returns>O <see cref="T:System.ComponentModel.ISite" /> recém-criado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
      <summary>Libera os recursos usados pelo contêiner aninhado.</summary>
      <param name="disposing">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
      <summary>Obtém o objeto de serviço do tipo especificado, se estiver disponível.</summary>
      <param name="service">O <see cref="T:System.Type" /> do serviço a ser recuperado.</param>
      <returns>Um <see cref="T:System.Object" /> que implementa o serviço solicitado ou <see langword="null" />, se o serviço não puder ser resolvido.</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.Owner">
      <summary>Obtém o componente proprietário para esse contêiner aninhado.</summary>
      <returns>O <see cref="T:System.ComponentModel.IComponent" /> que detém esse contêiner aninhado.</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.OwnerName">
      <summary>Obtém o nome do componente proprietário.</summary>
      <returns>O nome do componente de propriedade.</returns>
    </member>
    <member name="T:System.ComponentModel.NullableConverter">
      <summary>Fornece conversão automática entre um tipo anulável e seu tipo primitivo subjacente.</summary>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.NullableConverter" />.</summary>
      <param name="type">O tipo que permite valor nulo especificado.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> não é um tipo que permite valor nulo.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retorna se esse conversor pode converter um objeto do tipo especificado no tipo desse conversor, usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retorna se esse conversor pode converter o objeto para o tipo especificado, usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType">Um <see cref="T:System.Type" /> que representa o tipo para o qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converte o objeto determinado para o tipo deste conversor, usando as informações de contexto e de cultura especificadas.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> para ser usada como a cultura atual.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte o objeto de valor determinado para o tipo especificado, usando as informações de contexto e de cultura especificadas.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> para ser usada como a cultura atual.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType">O <see cref="T:System.Type" /> para o qual o parâmetro value será convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Cria uma instância do tipo ao qual esse <see cref="T:System.ComponentModel.TypeConverter" /> está associado, usando o contexto especificado, dado um conjunto de valores de propriedade para o objeto.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="propertyValues">Um <see cref="T:System.Collections.IDictionary" /> de novos valores de propriedade.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o <see cref="T:System.Collections.IDictionary" /> fornecido ou <see langword="null" /> se o objeto não puder ser criado. Esse método sempre retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retorna se a alteração de um valor neste objeto requer uma chamada para <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> para criar um novo valor, usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>
        <see langword="true" /> se a alteração de uma propriedade neste objeto requer uma chamada para <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> para criar um novo valor, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Retorna uma coleção de propriedades para o tipo de matriz especificado pelo parâmetro de valor, usando o contexto e os atributos especificados.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value">Um <see cref="T:System.Object" /> que especifica o tipo de matriz para o qual obter as propriedades.</param>
      <param name="attributes">Uma matriz do tipo <see cref="T:System.Attribute" /> que é usada como um filtro.</param>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades que são expostas para esse tipo de dados ou <see langword="null" />, se não há nenhuma propriedade.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retorna se este objeto é compatível com as propriedades, usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>
        <see langword="true" /> caso <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> deva ser chamado para localizar as propriedades desse objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retorna uma coleção de valores padrão para o tipo de dados para o qual esse conversor de tipo foi criado quando fornecido com um contexto de formato.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato que pode ser usado para extrair informações adicionais sobre o ambiente do qual este conversor é invocado. Esse parâmetro ou as propriedades desse parâmetro podem ser <see langword="null" />.</param>
      <returns>Um <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que contém um conjunto padrão de valores válidos ou <see langword="null" />, se o tipo de dados não der suporte a um conjunto padrão de valores.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retorna se a coleção de valores padrão retornada de <see cref="Overload:System.ComponentModel.TypeConverter.GetStandardValues" /> é uma lista exclusiva de valores possíveis, usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retornado de <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> for uma lista completa de valores possíveis, <see langword="false" /> se houver outros valores possíveis.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retorna se este objeto é compatível com um conjunto padrão de valores que podem ser escolhidos em uma lista, usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>
        <see langword="true" /> se <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> deve ser chamado para localizar um conjunto comum de valores aos quais o objeto dá suporte; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Retorna se o objeto de valor fornecido é válido para esse tipo e para o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value">O <see cref="T:System.Object" /> para testar a validade.</param>
      <returns>
        <see langword="true" /> se o valor especificado for válido para esse objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.NullableType">
      <summary>Obtém o tipo que permite valor nulo.</summary>
      <returns>Um <see cref="T:System.Type" /> valor que representa o tipo anulável.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingType">
      <summary>Obtém o tipo subjacente.</summary>
      <returns>Um <see cref="T:System.Type" /> que representa o tipo subjacente.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingTypeConverter">
      <summary>Obtém o conversor de tipo subjacente.</summary>
      <returns>Um <see cref="T:System.ComponentModel.TypeConverter" /> que representa o conversor de tipo subjacente.</returns>
    </member>
    <member name="T:System.ComponentModel.PasswordPropertyTextAttribute">
      <summary>Indica que a representação de texto de um objeto é obscurecida por caracteres como asteriscos. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor(System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />, especificando opcionalmente o texto da senha.</summary>
      <param name="password">
        <see langword="true" /> para indicar que a propriedade deve ser mostrada como texto de senha; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Default">
      <summary>Especifica o valor padrão para o <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.Equals(System.Object)">
      <summary>Determina se duas instâncias <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> são iguais.</summary>
      <param name="o">O <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> a ser comparado com o <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> atual.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> especificado for igual ao <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código hash do <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> atual.</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.IsDefaultAttribute">
      <summary>Retorna uma indicação se o valor desta instância é o valor padrão.</summary>
      <returns>
        <see langword="true" /> se a instância for o atributo padrão para a classe; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.No">
      <summary>Especifica que uma propriedade de texto não é usada como uma senha. Este campo <see langword="static" /> (<see langword="Shared" /> no Visual Basic) é somente leitura.</summary>
    </member>
    <member name="P:System.ComponentModel.PasswordPropertyTextAttribute.Password">
      <summary>Obtém um valor que indica se a propriedade para a qual o <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> é definido deve ser mostrada como texto de senha.</summary>
      <returns>
        <see langword="true" />se a propriedade deve ser mostrada como texto de senha; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Yes">
      <summary>Especifica que uma propriedade de texto é usada como uma senha. Este campo <see langword="static" /> (<see langword="Shared" /> no Visual Basic) é somente leitura.</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary>Fornece uma abstração de uma propriedade em uma classe.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PropertyDescriptor" /> com o nome e os atributos no <see cref="T:System.ComponentModel.MemberDescriptor" /> especificado.</summary>
      <param name="descr">Um <see cref="T:System.ComponentModel.MemberDescriptor" /> que contém o nome da propriedade e seus atributos.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PropertyDescriptor" /> com o nome no <see cref="T:System.ComponentModel.MemberDescriptor" /> especificado e os atributos tanto no <see cref="T:System.ComponentModel.MemberDescriptor" /> quanto na matriz <see cref="T:System.Attribute" />.</summary>
      <param name="descr">Um <see cref="T:System.ComponentModel.MemberDescriptor" /> que contém o nome do membro e seus atributos.</param>
      <param name="attrs">Uma matriz <see cref="T:System.Attribute" /> que contém os atributos que você deseja associar à propriedade.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PropertyDescriptor" /> com o nome e os atributos especificados.</summary>
      <param name="name">O nome da propriedade.</param>
      <param name="attrs">Uma matriz do tipo <see cref="T:System.Attribute" /> que contém os atributos da propriedade.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary>Permite que outros objetos sejam notificados quando essa propriedade muda.</summary>
      <param name="component">O componente ao qual adicionar o manipulador.</param>
      <param name="handler">O delegado a ser adicionado como um ouvinte.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> ou <paramref name="handler" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)">
      <summary>Quando substituído em uma classe derivada, retorna se a redefinição de um objeto altera ou não seu valor.</summary>
      <param name="component">O componente a ser testado quanto à capacidade de redefinição.</param>
      <returns>
        <see langword="true" /> se a redefinição do componente altera seu valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.ComponentType">
      <summary>Quando substituído em uma classe derivada, obtém o tipo de componente ao qual essa propriedade está associada.</summary>
      <returns>Um <see cref="T:System.Type" /> que representa o tipo de componente ao qual esta propriedade está associada. Quando os <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> métodos <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> ou são invocados, o objeto especificado pode ser uma instância desse tipo.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.Converter">
      <summary>Obtém o conversor de tipo dessa propriedade.</summary>
      <returns>Um <see cref="T:System.ComponentModel.TypeConverter" /> que é usado para converter o <see cref="T:System.Type" /> dessa propriedade.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)">
      <summary>Cria uma instância do tipo especificado.</summary>
      <param name="type">Um <see cref="T:System.Type" /> que representa o tipo a ser criado.</param>
      <returns>Uma nova instância do tipo.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)">
      <summary>Compara este a outro objeto para ver se eles são equivalentes.</summary>
      <param name="obj">O objeto a comparar a este <see cref="T:System.ComponentModel.PropertyDescriptor" />.</param>
      <returns>
        <see langword="true" /> se os valores forem equivalentes; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)">
      <summary>Adiciona os atributos do <see cref="T:System.ComponentModel.PropertyDescriptor" /> à lista especificada de atributos na classe pai.</summary>
      <param name="attributeList">Um <see cref="T:System.Collections.IList" /> que lista os atributos na classe pai. Inicialmente, está vazio.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties">
      <summary>Retorna o <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> padrão.</summary>
      <returns>Uma coleção do descritor de propriedades.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])">
      <summary>Retorna um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> usando uma matriz especificada de atributos como filtro.</summary>
      <param name="filter">Uma matriz do tipo <see cref="T:System.Attribute" /> a ser usada como um filtro.</param>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades que correspondem aos atributos especificados.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)">
      <summary>Retorna um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> para um determinado objeto.</summary>
      <param name="instance">Um componente cujas propriedades serão obtidas.</param>
      <returns>Uma <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades do componente especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary>Retorna um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> para um determinado objeto usando uma matriz especificada de atributos como filtro.</summary>
      <param name="instance">Um componente cujas propriedades serão obtidas.</param>
      <param name="filter">Uma matriz do tipo <see cref="T:System.Attribute" /> a ser usada como um filtro.</param>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades que correspondem aos atributos especificados para o componente especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)">
      <summary>Obtém um editor do tipo especificado.</summary>
      <param name="editorBaseType">O tipo base do editor, que é usado para diferenciar entre os vários editores que dão suporte a uma propriedade.</param>
      <returns>Uma instância do tipo de editor solicitado ou <see langword="null" /> se um editor não puder ser encontrado.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetHashCode">
      <summary>Retorna o código hash para esse objeto.</summary>
      <returns>O código hash desse objeto.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary>Esse método retorna o objeto que deve ser usado durante a invocação de membros.</summary>
      <param name="type">O <see cref="T:System.Type" /> do destino da invocação.</param>
      <param name="instance">O destino da invocação potencial.</param>
      <returns>O <see cref="T:System.Object" /> que deve ser usado durante a invocação de membros.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)">
      <summary>Retorna um tipo usando seu nome.</summary>
      <param name="typeName">O nome qualificado pelo assembly do tipo a ser recuperado.</param>
      <returns>Um <see cref="T:System.Type" /> que corresponde ao nome de tipo em questão ou <see langword="null" /> se não for encontrada uma correspondência.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)">
      <summary>Quando substituído em uma classe derivada, obtém o valor atual da propriedade em um componente.</summary>
      <param name="component">O componente com a propriedade cujo valor deve ser recuperado.</param>
      <returns>O valor de uma propriedade para um determinado componente.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)">
      <summary>Recupera o conjunto atual de manipuladores de eventos <c>ValueChanged</c> para um componente específico</summary>
      <param name="component">O componente para o qual recuperar manipuladores de eventos.</param>
      <returns>Um manipulador de eventos multicast combinado ou <see langword="null" /> se nenhum manipulador de eventos estiver atribuído ao <paramref name="component" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsLocalizable">
      <summary>Obtém um valor que indica se esta propriedade deve ser localizada, conforme especificado no <see cref="T:System.ComponentModel.LocalizableAttribute" />.</summary>
      <returns>
        <see langword="true" />Se o membro estiver marcado com o <see cref="T:System.ComponentModel.LocalizableAttribute" /> definido como <see langword="true" />; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsReadOnly">
      <summary>Quando substituído em uma classe derivada, obtém um valor que indica se a propriedade é somente leitura.</summary>
      <returns>
        <see langword="true" />se a propriedade for somente leitura; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)">
      <summary>Gera o evento <c>ValueChanged</c> que foi implementado.</summary>
      <param name="component">O objeto que gera o evento.</param>
      <param name="e">Um <see cref="T:System.EventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.PropertyType">
      <summary>Quando substituído em uma classe derivada, obtém o tipo da propriedade.</summary>
      <returns>Um <see cref="T:System.Type" /> que representa o tipo da propriedade.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary>Permite que outros objetos sejam notificados quando essa propriedade muda.</summary>
      <param name="component">O componente do qual remover o manipulador.</param>
      <param name="handler">O delegado a ser removido como ouvinte.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> ou <paramref name="handler" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)">
      <summary>Quando substituído em uma classe derivada, redefine o valor dessa propriedade do componente para o valor padrão.</summary>
      <param name="component">O componente com o valor da propriedade que deve ser redefinido para o valor padrão.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SerializationVisibility">
      <summary>Obtém um valor que indica se esta propriedade deve ser serializada, conforme especificado no <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" />.</summary>
      <returns>Um dos valores <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> de enumeração que especifica se essa propriedade deve ser serializada.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>Quando substituído em uma classe derivada, define o valor do componente para um valor diferente.</summary>
      <param name="component">O componente com o valor da propriedade que deve ser definida.</param>
      <param name="value">O novo valor.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>Quando substituído em uma classe derivada, determina um valor que indica se o valor dessa propriedade deve ser persistente.</summary>
      <param name="component">O componente com a propriedade a ser examinada quanto à persistência.</param>
      <returns>
        <see langword="true" /> se a propriedade deve ser persistida, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents">
      <summary>Obtém um valor que indica se as notificações de alteração de valor para essa propriedade podem ser obtidas de fora do descritor da propriedade.</summary>
      <returns>
        <see langword="true" />Se as notificações de alteração de valor puderem ser originadas fora do descritor de propriedade; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptorCollection">
      <summary>Representa uma coleção de objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</summary>
      <param name="properties">Uma matriz do tipo <see cref="T:System.ComponentModel.PropertyDescriptor" /> que fornece as propriedades para esta coleção.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />, que pode ser somente leitura.</summary>
      <param name="properties">Uma matriz do tipo <see cref="T:System.ComponentModel.PropertyDescriptor" /> que fornece as propriedades para esta coleção.</param>
      <param name="readOnly">Se <see langword="true" />, especifica que a coleção não pode ser modificada.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)">
      <summary>Adiciona o <see cref="T:System.ComponentModel.PropertyDescriptor" /> especificado à coleção.</summary>
      <param name="value">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> a adicionar à coleção.</param>
      <returns>O índice do <see cref="T:System.ComponentModel.PropertyDescriptor" /> que foi adicionado à coleção.</returns>
      <exception cref="T:System.NotSupportedException">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Clear">
      <summary>Remove todos os objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> da coleção.</summary>
      <exception cref="T:System.NotSupportedException">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)">
      <summary>Retorna se a coleção contém o <see cref="T:System.ComponentModel.PropertyDescriptor" /> fornecido.</summary>
      <param name="value">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> a ser localizado na coleção.</param>
      <returns>
        <see langword="true" /> se a coleção contiver o <see cref="T:System.ComponentModel.PropertyDescriptor" /> fornecido, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copia toda a coleção para uma matriz, começando no número de índice especificado.</summary>
      <param name="array">Uma matriz de objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> na qual os elementos da coleção serão copiados.</param>
      <param name="index">O índice do parâmetro <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Count">
      <summary>Obtém o número de descritores de propriedade na coleção.</summary>
      <returns>O número de descritores de propriedade na coleção.</returns>
    </member>
    <member name="F:System.ComponentModel.PropertyDescriptorCollection.Empty">
      <summary>Especifica uma coleção vazia que você pode usar em vez de criar uma nova sem nenhum item. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>Retorna o <see cref="T:System.ComponentModel.PropertyDescriptor" /> com o nome especificado, usando um booliano para indicar se você deseja ignorar a diferenciação de maiúsculas e minúsculas.</summary>
      <param name="name">O nome do <see cref="T:System.ComponentModel.PropertyDescriptor" /> a ser retornado da coleção.</param>
      <param name="ignoreCase">
        <see langword="true" /> se você quiser ignorar a diferenciação de maiúsculas e minúsculas no nome da propriedade, caso contrário, <see langword="false" />.</param>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> com o nome especificado ou <see langword="null" /> se a propriedade não existir.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator">
      <summary>Retorna um enumerador para esta classe.</summary>
      <returns>Um enumerador do tipo <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)">
      <summary>Retorna o índice do <see cref="T:System.ComponentModel.PropertyDescriptor" /> fornecido.</summary>
      <param name="value">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> para o qual o índice será retornado.</param>
      <returns>O índice do <see cref="T:System.ComponentModel.PropertyDescriptor" /> fornecido.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>Adiciona o <see cref="T:System.ComponentModel.PropertyDescriptor" /> à coleção no número de índice especificado.</summary>
      <param name="index">O índice no qual o parâmetro <paramref name="value" /> será adicionado à coleção.</param>
      <param name="value">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> a adicionar à coleção.</param>
      <exception cref="T:System.NotSupportedException">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>Classifica os membros desta coleção usando o <see cref="T:System.Collections.IComparer" /> especificado.</summary>
      <param name="sorter">Um comparador a ser usado para classificar os objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> nesta coleção.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])">
      <summary>Classifica os membros desta coleção. A ordem especificada é aplicada primeiro, seguida pela classificação padrão desta coleção, que, geralmente, é em ordem alfabética.</summary>
      <param name="names">Uma matriz de cadeias de caracteres que descreve a ordem de classificação dos objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> nesta coleção.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)">
      <summary>Obtém ou define o <see cref="T:System.ComponentModel.PropertyDescriptor" /> no número de índice especificado.</summary>
      <param name="index">O índice de base zero do <see cref="T:System.ComponentModel.PropertyDescriptor" /> a ser obtido ou definido.</param>
      <returns>O <see cref="T:System.ComponentModel.PropertyDescriptor" /> com o número de índice especificado.</returns>
      <exception cref="T:System.IndexOutOfRangeException">O parâmetro <paramref name="index" /> não é um índice válido para <see cref="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)" />.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)">
      <summary>Obtém ou define o <see cref="T:System.ComponentModel.PropertyDescriptor" /> com o nome especificado.</summary>
      <param name="name">O nome do <see cref="T:System.ComponentModel.PropertyDescriptor" /> a ser obtido da coleção.</param>
      <returns>O <see cref="T:System.ComponentModel.PropertyDescriptor" /> com o nome especificado ou <see langword="null" /> se a propriedade não existir.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)">
      <summary>Remove o <see cref="T:System.ComponentModel.PropertyDescriptor" /> especificado da coleção.</summary>
      <param name="value">O <see cref="T:System.ComponentModel.PropertyDescriptor" /> a ser removido da coleção.</param>
      <exception cref="T:System.NotSupportedException">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)">
      <summary>Remove o <see cref="T:System.ComponentModel.PropertyDescriptor" /> no índice especificado da coleção.</summary>
      <param name="index">O índice do <see cref="T:System.ComponentModel.PropertyDescriptor" /> a ser removido da coleção.</param>
      <exception cref="T:System.NotSupportedException">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort">
      <summary>Classifica os membros desta coleção usando a classificação padrão desta coleção, que, geralmente, é em ordem alfabética.</summary>
      <returns>Uma nova <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contém os objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> classificados.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>Classifica os membros desta coleção usando o <see cref="T:System.Collections.IComparer" /> especificado.</summary>
      <param name="comparer">Um comparador a ser usado para classificar os objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> nesta coleção.</param>
      <returns>Uma nova <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contém os objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> classificados.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])">
      <summary>Classifica os membros desta coleção. A ordem especificada é aplicada primeiro, seguida pela classificação padrão desta coleção, que, geralmente, é em ordem alfabética.</summary>
      <param name="names">Uma matriz de cadeias de caracteres que descreve a ordem de classificação dos objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> nesta coleção.</param>
      <returns>Uma nova <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contém os objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> classificados.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>Classifica os membros desta coleção. A ordem especificada é aplicada primeiro, seguida pela classificação usando o <see cref="T:System.Collections.IComparer" /> especificado.</summary>
      <param name="names">Uma matriz de cadeias de caracteres que descreve a ordem de classificação dos objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> nesta coleção.</param>
      <param name="comparer">Um comparador a ser usado para classificar os objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> nesta coleção.</param>
      <returns>Uma nova <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contém os objetos <see cref="T:System.ComponentModel.PropertyDescriptor" /> classificados.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count">
      <summary>Obtém o número de elementos contidos na coleção.</summary>
      <returns>O número de elementos contidos na coleção.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso à coleção é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" />Se o acesso à coleção for sincronizado (thread-safe); caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso à coleção.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso à coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Adiciona um elemento com a chave fornecida e o valor para o <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">O <see cref="T:System.Object" /> a ser usado como chave do elemento a ser adicionado.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser usado como valor do elemento a ser adicionado.</param>
      <exception cref="T:System.NotSupportedException">A coleção é somente leitura.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear">
      <summary>Remove todos os elementos do <see cref="T:System.Collections.IDictionary" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determina se o <see cref="T:System.Collections.IDictionary" /> contém um elemento com a chave especificada.</summary>
      <param name="key">A chave a ser localizada no <see cref="T:System.Collections.IDictionary" />.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.IDictionary" /> contiver um elemento com a chave; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator">
      <summary>Retorna um enumerador para esta classe.</summary>
      <returns>Um enumerador do tipo <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.IDictionary" /> tem um tamanho fixo.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.IDictionary" /> tiver um valor fixo; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.IDictionary" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.IDictionary" /> for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)">
      <summary>Obtém ou define o elemento com a chave especificada.</summary>
      <param name="key">A chave do elemento a ser obtida ou adicionada.</param>
      <returns>O elemento com a chave especificada.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys">
      <summary>Obtém um <see cref="T:System.Collections.ICollection" /> que contém as chaves do <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Um <see cref="T:System.Collections.ICollection" /> que contém as chaves do <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Remove o elemento com a chave especificada do <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key">A chave do elemento a ser removido.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values">
      <summary>Obtém um <see cref="T:System.Collections.ICollection" /> que contém os valores no <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Um <see cref="T:System.Collections.ICollection" /> que contém os valores de <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um <see cref="T:System.Collections.IEnumerator" /> para o <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>Um <see cref="T:System.Collections.IEnumerator" /> para o <see cref="T:System.Collections.IDictionary" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary>Adiciona um item ao <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">O item a ser adicionado à coleção.</param>
      <returns>A posição na qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear">
      <summary>Remove todos os itens da coleção.</summary>
      <exception cref="T:System.NotSupportedException">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determina se a coleção contém um valor específico.</summary>
      <param name="value">O item a ser localizado na coleção.</param>
      <returns>
        <see langword="true" /> se o item for encontrado na coleção, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determina o índice de um item especificado na coleção.</summary>
      <param name="value">O item a ser localizado na coleção.</param>
      <returns>O índice do <paramref name="value" /> se for encontrado na lista, caso contrário -1.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Insere um item na coleção em um índice especificado.</summary>
      <param name="index">O índice de base zero no qual o <paramref name="value" /> deve ser inserido.</param>
      <param name="value">O item a ser inserido na coleção.</param>
      <exception cref="T:System.NotSupportedException">A coleção é somente leitura.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary>Obtém um valor que indica se a coleção tem um tamanho fixo.</summary>
      <returns>
        <see langword="true" />se a coleção tiver um tamanho fixo; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary>Obtém um valor que indica se a coleção é somente leitura.</summary>
      <returns>
        <see langword="true" /> se a coleção for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Obtém ou define um item da coleção em um índice especificado.</summary>
      <param name="index">O índice com base em zero do item a ser obtido ou definido.</param>
      <returns>O elemento no índice especificado.</returns>
      <exception cref="T:System.NotSupportedException">A coleção é somente leitura.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> não é um <see cref="T:System.ComponentModel.PropertyDescriptor" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> é menor que 0.  

ou - 
<paramref name="index" /> é igual a ou maior que <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Remove a primeira ocorrência de um valor especificado da coleção.</summary>
      <param name="value">O item a ser removido da coleção.</param>
      <exception cref="T:System.NotSupportedException">A coleção é somente leitura.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Remove o item no índice especificado.</summary>
      <param name="index">O índice com base em zero do item a ser removido.</param>
      <exception cref="T:System.NotSupportedException">A coleção é somente leitura.</exception>
    </member>
    <member name="T:System.ComponentModel.PropertyTabAttribute">
      <summary>Identifica a guia ou as guias de propriedade a serem exibidas para a classe ou as classes especificadas.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PropertyTabAttribute" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PropertyTabAttribute" /> usando o nome de classe de guia especificado.</summary>
      <param name="tabClassName">O nome qualificado do assembly do tipo de guia a ser criado. Para obter um exemplo dessa convenção de formato, consulte <see cref="P:System.Type.AssemblyQualifiedName" />.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String,System.ComponentModel.PropertyTabScope)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PropertyTabAttribute" /> usando o nome de classe da guia e o escopo da guia especificados.</summary>
      <param name="tabClassName">O nome qualificado do assembly do tipo de guia a ser criado. Para obter um exemplo dessa convenção de formato, consulte <see cref="P:System.Type.AssemblyQualifiedName" />.</param>
      <param name="tabScope">Um <see cref="T:System.ComponentModel.PropertyTabScope" /> que indica o escopo dessa guia. Se o escopo for <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, ele será mostrado apenas para os componentes com o <see cref="T:System.ComponentModel.PropertyTabAttribute" /> correspondente. Se for <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, ele será exibido para todos os componentes no documento.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScope" /> não é <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> ou <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PropertyTabAttribute" /> usando o tipo de guia especificado.</summary>
      <param name="tabClass">O tipo de guia a ser criado.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type,System.ComponentModel.PropertyTabScope)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.PropertyTabAttribute" /> usando o tipo de guia e o escopo da guia especificados.</summary>
      <param name="tabClass">O tipo de guia a ser criado.</param>
      <param name="tabScope">Um <see cref="T:System.ComponentModel.PropertyTabScope" /> que indica o escopo dessa guia. Se o escopo for <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, ele será mostrado apenas para os componentes com o <see cref="T:System.ComponentModel.PropertyTabAttribute" /> correspondente. Se for <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, ele será exibido para todos os componentes no documento.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScope" /> não é <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> ou <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.ComponentModel.PropertyTabAttribute)">
      <summary>Retorna um valor que indica se esta instância é igual a um atributo especificado.</summary>
      <param name="other">Um <see cref="T:System.ComponentModel.PropertyTabAttribute" /> a ser comparado com esta instância ou <see langword="null" />.</param>
      <returns>
        <see langword="true" /> se as instâncias do <see cref="T:System.ComponentModel.PropertyTabAttribute" /> forem iguais, caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.TypeLoadException">Os tipos especificados pela propriedade <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> do parâmetro <paramref name="other" /> não podem ser encontrados.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.Object)">
      <summary>Retorna um valor que indica se essa instância é igual a um objeto especificado.</summary>
      <param name="other">Um objeto a ser comparado com essa instância ou <see langword="null" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="other" /> se referir à mesma instância de <see cref="T:System.ComponentModel.PropertyTabAttribute" />, caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.TypeLoadException">Os tipos especificados pela propriedade <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> do parâmetro <paramref name="other" /> não puderam ser encontrados.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.GetHashCode">
      <summary>Obtém o código hash deste objeto.</summary>
      <returns>O código hash do objeto ao qual o atributo pertence.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.String[],System.ComponentModel.PropertyTabScope[])">
      <summary>Inicializa o atributo usando os nomes especificados das classes de guia e a matriz de escopos de guia.</summary>
      <param name="tabClassNames">Uma matriz de nomes de tipo totalmente qualificados para os tipos de guias a serem criados na janela Propriedades.</param>
      <param name="tabScopes">O escopo de cada guia. Se o escopo for <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, ele será mostrado apenas para os componentes com o <see cref="T:System.ComponentModel.PropertyTabAttribute" /> correspondente. Se for <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, ele será exibido para todos os componentes no documento.</param>
      <exception cref="T:System.ArgumentException">Um ou mais dos valores em <paramref name="tabScopes" /> não é <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> nem <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.  

ou - 
O comprimento das matrizes de <paramref name="tabClassNames" /> e de <paramref name="tabScopes" /> não correspondem.  

ou - 
<paramref name="tabClassNames" /> ou <paramref name="tabScopes" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.Type[],System.ComponentModel.PropertyTabScope[])">
      <summary>Inicializa o atributo usando os nomes especificados das classes de guia e a matriz de escopos de guia.</summary>
      <param name="tabClasses">Os tipos de guias a serem criados.</param>
      <param name="tabScopes">O escopo de cada guia. Se o escopo for <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, ele será mostrado apenas para os componentes com o <see cref="T:System.ComponentModel.PropertyTabAttribute" /> correspondente. Se for <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, ele será exibido para todos os componentes no documento.</param>
      <exception cref="T:System.ArgumentException">Um ou mais dos valores em <paramref name="tabScopes" /> não é <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> nem <see cref="F:System.ComponentModel.PropertyTabScope.Component" />.  

ou - 
O comprimento das matrizes de <paramref name="tabClassNames" /> e de <paramref name="tabScopes" /> não correspondem.  

ou - 
<paramref name="tabClassNames" /> ou <paramref name="tabScopes" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClasses">
      <summary>Obtém os tipos de guias que esse atributo usa.</summary>
      <returns>Uma matriz de tipos que indica os tipos de guias que esse atributo usa.</returns>
      <exception cref="T:System.TypeLoadException">Os tipos especificados pela propriedade <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> não puderam ser localizados.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClassNames">
      <summary>Obtém os nomes das classes de guia que esse atributo usa.</summary>
      <returns>Os nomes das classes de guia que esse atributo usa.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabScopes">
      <summary>Obtém uma matriz de escopos de guia de cada guia deste <see cref="T:System.ComponentModel.PropertyTabAttribute" />.</summary>
      <returns>Uma matriz de <see cref="T:System.ComponentModel.PropertyTabScope" /> objetos que indicam os escopos das guias.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabScope">
      <summary>Define identificadores que indicam o escopo de persistência de uma guia na janela Propriedades.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Component">
      <summary>Essa guia é específica do componente atual. Essa guia é adicionada à janela Propriedades do componente atual e é removida quando o componente não está mais selecionado.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Document">
      <summary>Essa guia é específica do documento atual. Essa guia é adicionada à janela Propriedades e será removida quando o documento atualmente selecionado é alterado.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Global">
      <summary>Essa guia é adicionada à janela Propriedades e só pode ser removida explicitamente por um componente pai.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Static">
      <summary>Essa guia é adicionada à janela Propriedades e não pode ser removida.</summary>
    </member>
    <member name="T:System.ComponentModel.ProvidePropertyAttribute">
      <summary>Especifica o nome da propriedade que um implementador de <see cref="T:System.ComponentModel.IExtenderProvider" /> oferece a outros componentes. Essa classe não pode ser herdada</summary>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> com o nome da propriedade e o tipo do seu receptor.</summary>
      <param name="propertyName">O nome da propriedade se estendendo a um objeto do tipo especificado.</param>
      <param name="receiverTypeName">O nome do tipo de dados que essa propriedade pode estender.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> com o nome da propriedade e seu <see cref="T:System.Type" />.</summary>
      <param name="propertyName">O nome da propriedade se estendendo a um objeto do tipo especificado.</param>
      <param name="receiverType">O <see cref="T:System.Type" /> do tipo de dados do objeto que pode receber a propriedade.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)">
      <summary>Retorna se o valor do objeto especificado é igual ao <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> atual.</summary>
      <param name="obj">O objeto cuja igualdade de valor deve ser testada.</param>
      <returns>
        <see langword="true" /> se o valor do objeto especificado for igual do atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código hash do <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> atual.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.PropertyName">
      <summary>Obtém o nome de uma propriedade que essa classe fornece.</summary>
      <returns>O nome de uma propriedade que essa classe fornece.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName">
      <summary>Obtém o nome do tipo de dados que essa propriedade pode estender.</summary>
      <returns>O nome do tipo de dados que essa propriedade pode estender.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.TypeId">
      <summary>Obtém um identificador exclusivo para este atributo.</summary>
      <returns>Um <see cref="T:System.Object" /> que é um identificador exclusivo do atributo.</returns>
    </member>
    <member name="T:System.ComponentModel.RecommendedAsConfigurableAttribute">
      <summary>Especifica que a propriedade pode ser usada como uma configuração de aplicativo.</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.#ctor(System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" />.</summary>
      <param name="recommendedAsConfigurable">
        <see langword="true" /> se a propriedade à qual esse atributo é associado pode ser usada como uma configuração de aplicativo; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Default">
      <summary>Especifica o valor padrão para o <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" />, que é <see cref="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No" />. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.Equals(System.Object)">
      <summary>Indica se essa instância e um objeto especificado são iguais.</summary>
      <param name="obj">Outro objeto com o qual ser comparado.</param>
      <returns>
        <see langword="true" /> se <paramref name="obj" /> for igual a essa instância; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código hash do <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> atual.</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.IsDefaultAttribute">
      <summary>Indica se o valor desta instância é o valor padrão da classe.</summary>
      <returns>
        <see langword="true" /> se a instância for o atributo padrão para a classe; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No">
      <summary>Especifica que uma propriedade não pode ser usada como uma configuração de aplicativo. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="P:System.ComponentModel.RecommendedAsConfigurableAttribute.RecommendedAsConfigurable">
      <summary>Obtém um valor que indica se a propriedade à qual esse atributo é associado pode ou não ser usada como uma configuração de aplicativo.</summary>
      <returns>
        <see langword="true" /> se a propriedade à qual esse atributo é associado pode ser usada como uma configuração de aplicativo; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Yes">
      <summary>Especifica que uma propriedade pode ser usada como uma configuração de aplicativo. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="T:System.ComponentModel.ReferenceConverter">
      <summary>Fornece um conversor de tipo para converter referências de objetos de e para outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ReferenceConverter" />.</summary>
      <param name="type">Um <see cref="T:System.Type" /> que representa o tipo a ser associado a este conversor de referência.</param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtém um valor que indica se este conversor pode converter um objeto no tipo de origem especificado para um objeto de referência usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse objeto puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converte o objeto fornecido no tipo de referência.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" /> que especifica a cultura usada para representar a fonte.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte o objeto de valor especificado no tipo de referência usando o contexto e os argumentos especificados.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" /> que especifica a cultura usada para representar a fonte.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType">O tipo no qual converter o objeto.</param>
      <returns>O objeto convertido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtém uma coleção de valores padrão para o tipo de dados de referência.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>Um <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que contém um conjunto padrão de valores válidos ou <see langword="null" />, se o tipo de dados não der suporte a um conjunto padrão de valores.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtém um valor que indica se a lista de valores padrão retornada do <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> é uma lista exclusiva.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>
        <see langword="true" /> porque a <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retornada de <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> é uma lista completa de valores possíveis. Esse método nunca retorna <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtém um valor que indica se esse objeto é compatível com um conjunto padrão de valores que podem ser escolhidos de uma lista.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>
        <see langword="true" /> porque <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> pode ser chamado para localizar um conjunto comum de valores com os quais o objeto é compatível. Esse método nunca retorna <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Retorna um valor que indica se um valor específico pode ser adicionado à coleção de valores padrão.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto adicional.</param>
      <param name="value">O valor a ser verificado.</param>
      <returns>
        <see langword="true" /> se o valor for permitido e puder ser adicionado à coleção de valores padrão; <see langword="false" /> se o valor não puder ser adicionado à coleção de valores padrão.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventArgs">
      <summary>Fornece dados para o evento de <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> .</summary>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Object)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.RefreshEventArgs" /> com o componente que foi alterado.</summary>
      <param name="componentChanged">O componente que foi alterado.</param>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.RefreshEventArgs" /> com o tipo do componente que foi alterado.</summary>
      <param name="typeChanged">O <see cref="T:System.Type" /> que foi alterado.</param>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.ComponentChanged">
      <summary>Obtém o componente que alterou suas propriedades, eventos ou extensores.</summary>
      <returns>O componente que alterou suas propriedades, eventos ou extensores, ou <see langword="null" /> se todos os componentes do mesmo tipo foram alterados.</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.TypeChanged">
      <summary>Obtém o <see cref="T:System.Type" /> que alterou suas propriedades ou eventos.</summary>
      <returns>O <see cref="T:System.Type" /> que alterou suas propriedades ou eventos.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventHandler">
      <summary>Representa o método que manipula o evento <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> gerado quando um <see cref="T:System.Type" /> ou componente é alterado durante o tempo de design.</summary>
      <param name="e">Um <see cref="T:System.ComponentModel.RefreshEventArgs" /> que contém o componente ou <see cref="T:System.Type" /> que foi alterado.</param>
    </member>
    <member name="T:System.ComponentModel.RunInstallerAttribute">
      <summary>Especifica se o Instalador de Ação Personalizada do Visual Studio ou o Installutil.exe (Ferramenta de Instalação) deve ser invocado quando o assembly é instalado.</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.#ctor(System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.RunInstallerAttribute" />.</summary>
      <param name="runInstaller">
        <see langword="true" /> se um instalador deve ser invocado durante a instalação de um assembly; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Default">
      <summary>Especifica a visibilidade padrão, que é <see cref="F:System.ComponentModel.RunInstallerAttribute.No" />. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.Equals(System.Object)">
      <summary>Determina se o valor do <see cref="T:System.ComponentModel.RunInstallerAttribute" /> especificado é equivalente ao <see cref="T:System.ComponentModel.RunInstallerAttribute" /> atual.</summary>
      <param name="obj">O objeto a ser comparado.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.ComponentModel.RunInstallerAttribute" /> especificado for igual ao <see cref="T:System.ComponentModel.RunInstallerAttribute" /> atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.GetHashCode">
      <summary>Gera um código hash para o <see cref="T:System.ComponentModel.RunInstallerAttribute" /> atual.</summary>
      <returns>Um código hash do <see cref="T:System.ComponentModel.RunInstallerAttribute" /> atual.</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.IsDefaultAttribute">
      <summary>Determina se este atributo é o padrão.</summary>
      <returns>
        <see langword="true" /> se o atributo for o valor padrão para essa classe de atributos; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.No">
      <summary>Especifica que o Instalador de Ação Personalizada do Visual Studio ou o Installutil.exe (Ferramenta de Instalação) não deve ser invocado quando o assembly é instalado. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="P:System.ComponentModel.RunInstallerAttribute.RunInstaller">
      <summary>Obtém um valor que indica se um instalador deve ser invocado durante a instalação de um assembly.</summary>
      <returns>
        <see langword="true" /> se um instalador deve ser invocado durante a instalação de um assembly; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Yes">
      <summary>Especifica que o Instalador de Ação Personalizada do Visual Studio ou o Installutil.exe (Ferramenta de Instalação) deve ser invocado quando o assembly é instalado. Esse campo <see langword="static" /> é somente leitura.</summary>
    </member>
    <member name="T:System.ComponentModel.SByteConverter">
      <summary>Fornece um conversor de tipo para converter objetos de tipo inteiro sem sinal de 8 bits para e de uma cadeia de caracteres.</summary>
    </member>
    <member name="M:System.ComponentModel.SByteConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.SByteConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.SettingsBindableAttribute">
      <summary>Especifica quando uma propriedade do componente pode ser associada a uma configuração de aplicativo.</summary>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.#ctor(System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.SettingsBindableAttribute" />.</summary>
      <param name="bindable">
        <see langword="true" /> para especificar que uma propriedade é apropriada para que configurações sejam associadas a ela; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="P:System.ComponentModel.SettingsBindableAttribute.Bindable">
      <summary>Obtém um valor que indica se uma propriedade é apropriada para que configurações sejam associadas a ela.</summary>
      <returns>
        <see langword="true" />se a propriedade for apropriada para associar configurações a; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.Equals(System.Object)">
      <summary>Retorna um valor que indica se essa instância é igual a um objeto especificado.</summary>
      <param name="obj">Um <see cref="T:System.Object" /> a ser comparado a esta instância ou a uma referência nula (<see langword="Nothing" /> no Visual Basic).</param>
      <returns>
        <see langword="true" /> se <paramref name="obj" /> for igual ao tipo e ao valor dessa instância, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.No">
      <summary>Especifica que uma propriedade não é apropriada para que configurações sejam associadas a ela.</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.Yes">
      <summary>Especifica que uma propriedade é apropriada para que configurações sejam associadas a ela.</summary>
    </member>
    <member name="T:System.ComponentModel.SingleConverter">
      <summary>Fornece um conversor de tipo para converter objetos numéricos de ponto flutuante e precisão simples para e de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.SingleConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.SingleConverter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.StringConverter">
      <summary>Fornece um conversor de tipo para converter objetos de cadeia de caracteres para e a partir de outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.StringConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtém um valor que indica se esse conversor pode converter um objeto do tipo de origem especificado em uma cadeia de caracteres usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converte o objeto de valor especificado em um objeto <see cref="T:System.String" />.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">O <see cref="T:System.Globalization.CultureInfo" /> a ser usado.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.NotSupportedException">A conversão não pôde ser executada.</exception>
    </member>
    <member name="T:System.ComponentModel.SyntaxCheck">
      <summary>Fornece métodos para verificar se o nome e o caminho do computador estão em conformidade com uma sintaxe específica. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)">
      <summary>Verifica a sintaxe do nome do computador para confirmar que ele não contém "\".</summary>
      <param name="value">Uma cadeia de caracteres que contém o nome do computador a ser verificado.</param>
      <returns>
        <see langword="true" /> se <paramref name="value" /> corresponder ao formato de nome do computador adequado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckPath(System.String)">
      <summary>Verifica a sintaxe do caminho para ver se começa com "\\".</summary>
      <param name="value">Uma cadeia de caracteres que contém o caminho a ser verificado.</param>
      <returns>
        <see langword="true" /> se <paramref name="value" /> corresponder ao formato de caminho adequado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)">
      <summary>Verifica a sintaxe do caminho para ver se ele começa com "\" ou com a letra da unidade "C".</summary>
      <param name="value">Uma cadeia de caracteres que contém o caminho a ser verificado.</param>
      <returns>
        <see langword="true" /> se <paramref name="value" /> corresponder ao formato de caminho adequado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.TimeSpanConverter">
      <summary>Fornece um conversor de tipo para converter objetos <see cref="T:System.TimeSpan" /> para e de outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TimeSpanConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtém um valor que indica se esse conversor pode converter um objeto do tipo de origem especificado em um <see cref="T:System.TimeSpan" /> usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtém um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType">Um <see cref="T:System.Type" /> que representa o tipo no qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> não é um valor válido para o tipo de destino.</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converte o objeto determinado em um <see cref="T:System.TimeSpan" />.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" /> opcional. Se não for fornecido, a cultura atual será assumida.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> não é um valor válido para o tipo de destino.</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte o objeto especificado em outro tipo.</summary>
      <param name="context">Um contexto do formatador.</param>
      <param name="culture">A cultura na qual o <paramref name="value" /> será convertido.</param>
      <param name="value">O objeto a ser convertido.</param>
      <param name="destinationType">O tipo no qual converter o objeto.</param>
      <returns>O objeto convertido.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemAttribute">
      <summary>Representa um atributo de um item de caixa de ferramentas.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> e especifica se valores de inicialização padrão devem ser usados.</summary>
      <param name="defaultType">
        <see langword="true" /> para criar um atributo de item da caixa de ferramentas para um tipo de padrão; <see langword="false" /> para não associar nenhum suporte de item de caixa de ferramentas padrão para esse atributo.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> usando o nome especificado do tipo.</summary>
      <param name="toolboxItemTypeName">Os nomes do tipo do item da caixa de ferramentas e do assembly que contém o tipo.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> usando o tipo especificado do item da caixa de ferramentas.</summary>
      <param name="toolboxItemType">O tipo do item da caixa de ferramentas.</param>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.Default">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> e define o tipo como o padrão, <see cref="T:System.Drawing.Design.ToolboxItem" />. Este campo é somente leitura.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.Equals(System.Object)">
      <summary>Retorna um valor que indica se essa instância é igual a um objeto especificado.</summary>
      <param name="obj">Um <see cref="T:System.Object" /> a ser comparado a esta instância ou a uma referência nula (<see langword="Nothing" /> no Visual Basic).</param>
      <returns>
        <see langword="true" /> se <paramref name="obj" /> for igual ao tipo e ao valor dessa instância, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute">
      <summary>Obtém um valor que indica se o valor atual do atributo é o valor padrão do atributo.</summary>
      <returns>
        <see langword="true" /> se o valor atual do atributo é o padrão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.None">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> e define o tipo como <see langword="null" />. Este campo é somente leitura.</summary>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemType">
      <summary>Obtém ou define o tipo do item da caixa de ferramentas.</summary>
      <returns>O tipo do item da caixa de ferramentas.</returns>
      <exception cref="T:System.ArgumentException">O tipo não pode ser encontrado.</exception>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemTypeName">
      <summary>Obtém ou define o nome do tipo do <see cref="T:System.Drawing.Design.ToolboxItem" /> atual.</summary>
      <returns>O nome do tipo totalmente qualificado do item da caixa de ferramentas atual.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterAttribute">
      <summary>Especifica a cadeia de caracteres de filtro e o tipo de filtro para um item de caixa de ferramentas.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> usando a cadeia de caracteres de filtro especificada.</summary>
      <param name="filterString">A cadeia de caracteres de filtro para o item de caixa de ferramentas.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String,System.ComponentModel.ToolboxItemFilterType)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> usando a cadeia de caracteres de filtro e o tipo especificados.</summary>
      <param name="filterString">A cadeia de caracteres de filtro para o item de caixa de ferramentas.</param>
      <param name="filterType">Um <see cref="T:System.ComponentModel.ToolboxItemFilterType" /> que indica o tipo do filtro.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Equals(System.Object)">
      <summary>Retorna um valor que indica se essa instância é igual a um objeto especificado.</summary>
      <param name="obj">Um <see cref="T:System.Object" /> a ser comparado a esta instância ou a uma referência nula (<see langword="Nothing" /> no Visual Basic).</param>
      <returns>
        <see langword="true" /> se <paramref name="obj" /> for igual ao tipo e ao valor dessa instância, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterString">
      <summary>Obtém a cadeia de caracteres de filtro para o item de caixa de ferramentas.</summary>
      <returns>A cadeia de caracteres de filtro para o item de caixa de ferramentas.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterType">
      <summary>Obtém o tipo do filtro.</summary>
      <returns>Um <see cref="T:System.ComponentModel.ToolboxItemFilterType" /> que indica o tipo do filtro.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Match(System.Object)">
      <summary>Indica se o objeto especificado tem uma cadeia de caracteres de filtro correspondente.</summary>
      <param name="obj">O objeto a ser testado para uma cadeia de caracteres de filtro correspondente.</param>
      <returns>
        <see langword="true" /> se o objeto especificado tem uma cadeia de caracteres de filtro correspondente; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.ToString">
      <summary>Retorna uma cadeia de caracteres que representa o objeto atual.</summary>
      <returns>Uma cadeia de caracteres que representa o objeto atual.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.TypeId">
      <summary>Obtém a ID de tipo do atributo.</summary>
      <returns>A ID de tipo para este atributo. Todos <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> os objetos com a mesma cadeia de caracteres de filtro retornam a mesma ID de tipo.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterType">
      <summary>Define os identificadores usados para indicar o tipo de filtro que um <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> usa.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Allow">
      <summary>Indica que uma cadeia de caracteres de filtro de item de caixa de ferramentas é permitida, mas não é necessário.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Custom">
      <summary>Indica que o processamento personalizado é necessário para determinar se deve usar uma cadeia de caracteres de filtro de item de caixa de ferramentas. Normalmente, ele é especificado em uma classe do designer raiz para indicar que o designer deseja aceitar ou rejeitar um item de caixa de ferramentas usando código. O designer deve implementar o método <see cref="M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)" /> da interface <see cref="T:System.Drawing.Design.IToolboxUser" />.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Prevent">
      <summary>Indica que uma cadeia de caracteres de filtro de item de caixa de ferramentas não é permitida. Se um designer e uma classe de componente tiverem uma cadeia de caracteres de filtro e o valor de um deles for <c>ToolboxItemFilterType.Prevent</c>, o item de caixa de ferramentas não estará disponível.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Require">
      <summary>Indica que uma cadeia de caracteres de filtro de item de caixa de ferramentas deve estar presente para um item de caixa de ferramentas a ser habilitado.  Para um item de caixa de ferramentas com o tipo de filtro <c>Exigir</c> estar habilitado, o designer e a classe de componente deverão um filtro de cadeia de caracteres correspondente. Além disso, nem o designer nem a classe do componente podem ter o tipo de filtro <c>Impedir</c> para que o item de caixa de ferramentas seja habilitado.</summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary>Fornece uma maneira unificada de converter tipos de valores em outros tipos, bem como acessar valores padrão e subpropriedades.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retorna se esse conversor pode converter um objeto do tipo especificado no tipo desse conversor, usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary>Retorna se este conversor pode converter um objeto do tipo indicado para o tipo deste conversor.</summary>
      <param name="sourceType">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retorna se esse conversor pode converter o objeto para o tipo especificado, usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType">Um <see cref="T:System.Type" /> que representa o tipo para o qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary>Retorna se esse conversor pode converter o objeto para o tipo especificado.</summary>
      <param name="destinationType">Um <see cref="T:System.Type" /> que representa o tipo para o qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converte o objeto determinado para o tipo deste conversor, usando as informações de contexto e de cultura especificadas.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> para ser usada como a cultura atual.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary>Converte o valor fornecido noo tipo deste conversor.</summary>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>Converte a cadeia de caracteres fornecida para o tipo deste conversor usando a cultura invariável e o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="text">O <see cref="T:System.String" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o texto convertido.</returns>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
      <summary>Converte a cadeia de caracteres fornecida para o tipo deste conversor usando a cultura invariável.</summary>
      <param name="text">O <see cref="T:System.String" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o texto convertido.</returns>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary>Converte o texto fornecido em um objeto, usando o contexto e a informação de cultura especificados.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" />. Se <see langword="null" /> for passado, a cultura atual será considerada.</param>
      <param name="text">O <see cref="T:System.String" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o texto convertido.</returns>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>Converte o texto fornecido em um objeto, usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="text">O <see cref="T:System.String" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o texto convertido.</returns>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary>Converte o texto especificado em um objeto.</summary>
      <param name="text">A representação de texto do objeto a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o texto convertido.</returns>
      <exception cref="T:System.NotSupportedException">A cadeia de caracteres não pode ser convertida em objeto apropriado.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte o objeto de valor determinado para o tipo especificado, usando as informações de contexto e de cultura especificadas.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" />. Se <see langword="null" /> for passado, a cultura atual será considerada.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType">O <see cref="T:System.Type" /> para converter o parâmetro <paramref name="value" />.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary>Converte o objeto de valor especificado para o tipo especificado, usando os argumentos.</summary>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType">O <see cref="T:System.Type" /> para converter o parâmetro <paramref name="value" />.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Converte o valor especificado em uma representação de cadeia de caracteres que não varia de acordo com a cultura, usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.String" /> que representa o valor convertido.</returns>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
      <summary>Converte o valor especificado em uma representação de cadeia de caracteres invariável da cultura.</summary>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.String" /> que representa o valor convertido.</returns>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converte o valor especificado em uma representação de cadeia de caracteres, usando as informações de contexto e cultura especificadas.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" />. Se <see langword="null" /> for passado, a cultura atual será considerada.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Converte o valor especificado em uma representação de cadeia de caracteres, usando o contexto fornecido.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary>Converte o valor especificado em uma representação de cadeia de caracteres.</summary>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
      <summary>Recria um <see cref="T:System.Object" /> dado um conjunto de valores de propriedade do objeto.</summary>
      <param name="propertyValues">Um <see cref="T:System.Collections.IDictionary" /> que representa um dicionário de novos valores de propriedade.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o <see cref="T:System.Collections.IDictionary" /> fornecido ou <see langword="null" /> se o objeto não puder ser criado. Esse método sempre retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Cria uma instância do tipo ao qual esse <see cref="T:System.ComponentModel.TypeConverter" /> está associado, usando o contexto especificado, dado um conjunto de valores de propriedade para o objeto.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="propertyValues">Um <see cref="T:System.Collections.IDictionary" /> de novos valores de propriedade.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o <see cref="T:System.Collections.IDictionary" /> fornecido ou <see langword="null" /> se o objeto não puder ser criado. Esse método sempre retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
      <summary>Retorna uma exceção a ser gerada quando uma conversão não puder ser executada.</summary>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido ou <see langword="null" /> se o objeto não estiver disponível.</param>
      <returns>Uma <see cref="T:System.Exception" /> que representa a exceção a ser gerada quando uma conversão não puder ser executada.</returns>
      <exception cref="T:System.NotSupportedException">Gerada automaticamente por este método.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
      <summary>Retorna uma exceção a ser gerada quando uma conversão não puder ser executada.</summary>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido ou <see langword="null" /> se o objeto não estiver disponível.</param>
      <param name="destinationType">Um <see cref="T:System.Type" /> que representa o tipo no qual a conversão estava tentando converter.</param>
      <returns>Uma <see cref="T:System.Exception" /> que representa a exceção a ser gerada quando uma conversão não puder ser executada.</returns>
      <exception cref="T:System.NotSupportedException">Gerada automaticamente por este método.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
      <summary>Retorna se a alteração de um valor neste objeto requer uma chamada ao método <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> para criar um novo valor.</summary>
      <returns>
        <see langword="true" /> se a alteração de uma propriedade neste objeto requer uma chamada para <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> para criar um novo valor, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retorna se a alteração de um valor neste objeto requer uma chamada para <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> para criar um novo valor, usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>
        <see langword="true" /> se a alteração de uma propriedade neste objeto requer uma chamada para <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> para criar um novo valor, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Retorna uma coleção de propriedades para o tipo de matriz especificado pelo parâmetro de valor, usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value">Um <see cref="T:System.Object" /> que especifica o tipo de matriz para o qual obter as propriedades.</param>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades que são expostas para esse tipo de dados ou <see langword="null" />, se não há nenhuma propriedade.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Retorna uma coleção de propriedades para o tipo de matriz especificado pelo parâmetro de valor, usando o contexto e os atributos especificados.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value">Um <see cref="T:System.Object" /> que especifica o tipo de matriz para o qual obter as propriedades.</param>
      <param name="attributes">Uma matriz do tipo <see cref="T:System.Attribute" /> que é usada como um filtro.</param>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades que são expostas para esse tipo de dados ou <see langword="null" />, se não há nenhuma propriedade.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
      <summary>Retorna uma coleção de propriedades para o tipo de matriz especificado pelo parâmetro de valor.</summary>
      <param name="value">Um <see cref="T:System.Object" /> que especifica o tipo de matriz para o qual obter as propriedades.</param>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades que são expostas para esse tipo de dados ou <see langword="null" />, se não há nenhuma propriedade.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
      <summary>Retorna se este objeto dá suporte a propriedades.</summary>
      <returns>
        <see langword="true" /> caso <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> deva ser chamado para localizar as propriedades desse objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retorna se este objeto é compatível com as propriedades, usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>
        <see langword="true" /> caso <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> deva ser chamado para localizar as propriedades desse objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues">
      <summary>Retorna uma coleção de valores padrão do contexto padrão para o tipo de dados para o qual esse conversor de tipo foi criado.</summary>
      <returns>Um <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que contém um conjunto padrão de valores válidos ou <see langword="null" /> se o tipo de dados não der suporte a um conjunto padrão de valores.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retorna uma coleção de valores padrão para o tipo de dados para o qual esse conversor de tipo foi criado quando fornecido com um contexto de formato.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato que pode ser usado para extrair informações adicionais sobre o ambiente do qual este conversor é invocado. Esse parâmetro ou as propriedades desse parâmetro podem ser <see langword="null" />.</param>
      <returns>Um <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que contém um conjunto padrão de valores válidos ou <see langword="null" />, se o tipo de dados não der suporte a um conjunto padrão de valores.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
      <summary>Retorna se a coleção de valores padrão retornada de <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> é uma lista exclusiva.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retornado de <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> for uma lista completa de valores possíveis, <see langword="false" /> se houver outros valores possíveis.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retorna se a coleção de valores padrão retornada de <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> é uma lista exclusiva de valores possíveis, usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retornado de <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> for uma lista completa de valores possíveis, <see langword="false" /> se houver outros valores possíveis.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
      <summary>Retorna se este objeto dá suporte a um conjunto padrão de valores que podem ser escolhidos em uma lista.</summary>
      <returns>
        <see langword="true" /> se <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> deve ser chamado para localizar um conjunto comum de valores aos quais o objeto dá suporte; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retorna se este objeto é compatível com um conjunto padrão de valores que podem ser escolhidos em uma lista, usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>
        <see langword="true" /> se <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> deve ser chamado para localizar um conjunto comum de valores aos quais o objeto dá suporte; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Retorna se o objeto de valor fornecido é válido para esse tipo e para o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value">O <see cref="T:System.Object" /> para testar a validade.</param>
      <returns>
        <see langword="true" /> se o valor especificado for válido para esse objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
      <summary>Retorna se o objeto de valor especificado é válido para esse tipo.</summary>
      <param name="value">O objeto a ser testado quanto à validade.</param>
      <returns>
        <see langword="true" /> se o valor especificado for válido para esse objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor">
      <summary>Representa uma classe <see langword="abstract" /> que fornece propriedades para objetos que não têm propriedades.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" />.</summary>
      <param name="componentType">Um <see cref="T:System.Type" /> que representa o tipo de componente ao qual esse descritor de propriedade se associa.</param>
      <param name="name">O nome da propriedade.</param>
      <param name="propertyType">Um <see cref="T:System.Type" /> que representa o tipo de dados para essa propriedade.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" />.</summary>
      <param name="componentType">Um <see cref="T:System.Type" /> que representa o tipo de componente ao qual esse descritor de propriedade se associa.</param>
      <param name="name">O nome da propriedade.</param>
      <param name="propertyType">Um <see cref="T:System.Type" /> que representa o tipo de dados para essa propriedade.</param>
      <param name="attributes">Uma matriz <see cref="T:System.Attribute" /> com os atributos a associar à propriedade.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.CanResetValue(System.Object)">
      <summary>Retorna se a redefinição do componente mudar o valor do componente.</summary>
      <param name="component">O componente a ser testado quanto à capacidade de redefinição.</param>
      <returns>
        <see langword="true" /> se a redefinição do componente mudar o valor do componente; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ComponentType">
      <summary>Obtém o tipo de componente ao qual essa descrição de propriedade se associa.</summary>
      <returns>Um <see cref="T:System.Type" /> que representa o tipo de componente ao qual essa propriedade é vinculada.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.IsReadOnly">
      <summary>Obtém um valor que indica essa propriedade é somente leitura.</summary>
      <returns>
        <see langword="true" />se a propriedade for somente leitura; <see langword="false" /> se a propriedade for de leitura/gravação.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.PropertyType">
      <summary>Obtém tipo da propriedade.</summary>
      <returns>Um <see cref="T:System.Type" /> que representa o tipo da propriedade.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ResetValue(System.Object)">
      <summary>Redefine o valor para essa propriedade do componente.</summary>
      <param name="component">O componente com o valor da propriedade a ser redefinido.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>Retorna se o valor dessa propriedade pode persistir.</summary>
      <param name="component">O componente com a propriedade que deve ser examinada quanto à persistência.</param>
      <returns>
        <see langword="true" /> se o valor da propriedade puder persistir; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
      <summary>Classifica uma coleção de propriedades.</summary>
      <param name="props">Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que tem as propriedades a serem classificadas.</param>
      <param name="names">Uma matriz de nomes na ordem em que você deseja que as propriedades apareçam na coleção.</param>
      <returns>Uma <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contém as propriedades classificadas.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.StandardValuesCollection">
      <summary>Representa uma coleção de valores.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.#ctor(System.Collections.ICollection)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />.</summary>
      <param name="values">Um <see cref="T:System.Collections.ICollection" /> que representa os objetos a serem colocados na coleção.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copia o conteúdo desta coleção para uma matriz.</summary>
      <param name="array">Um <see cref="T:System.Array" /> que representa a matriz na qual copiar.</param>
      <param name="index">O índice a partir do qual iniciar.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Count">
      <summary>Obtém o número de objetos na coleção.</summary>
      <returns>O número de objetos na coleção.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.GetEnumerator">
      <summary>Retorna um enumerador para esta coleção.</summary>
      <returns>Um enumerador do tipo <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Item(System.Int32)">
      <summary>Obtém o objeto o número de índice especificado.</summary>
      <param name="index">O índice de base zero de <see cref="T:System.Object" /> obter da coleção.</param>
      <returns>O objeto <see cref="T:System.Object" /> com o índice especificado.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Para obter uma descrição desse membro, consulte <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>
        <see langword="false" /> em todos os casos.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#SyncRoot">
      <summary>Para obter uma descrição desse membro, consulte <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>
        <see langword="null" /> em todos os casos.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>Especifica o tipo a ser usado como um conversor para o objeto ao qual este atributo está associado.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeConverterAttribute" /> com o conversor de tipo padrão, que é uma cadeia de caracteres vazia ("").</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeConverterAttribute" /> usando o nome de tipo especificado como o conversor de dados do objeto ao qual esse atributo está associado.</summary>
      <param name="typeName">O nome totalmente qualificado da classe a ser usada para conversão de dados do objeto ao qual esse atributo está associado.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeConverterAttribute" /> usando o tipo especificado como o conversor de dados do objeto ao qual esse atributo está associado.</summary>
      <param name="type">Um <see cref="T:System.Type" /> que representa o tipo da classe de conversão a ser usada para conversão de dados do objeto ao qual esse atributo está associado.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>Obtém o nome de tipo totalmente qualificado da <see cref="T:System.Type" /> a ser usada como conversor do objeto ao qual esse atributo está associado.</summary>
      <returns>O nome de tipo totalmente qualificado do <see cref="T:System.Type" /> a ser usado como um conversor para o objeto ao qual este atributo está associado ou uma cadeia de caracteres vazia (""), se não houver nenhum. O valor padrão é uma cadeia de caracteres vazia ("").</returns>
    </member>
    <member name="F:System.ComponentModel.TypeConverterAttribute.Default">
      <summary>Especifica o tipo a ser usado como um conversor para o objeto ao qual este atributo está associado.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)">
      <summary>Retorna se o valor do objeto especificado é igual ao <see cref="T:System.ComponentModel.TypeConverterAttribute" /> atual.</summary>
      <param name="obj">O objeto cuja igualdade de valor deve ser testada.</param>
      <returns>
        <see langword="true" /> se o valor do objeto fornecido for igual ao do <see cref="T:System.ComponentModel.TypeConverterAttribute" /> atual; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código hash do <see cref="T:System.ComponentModel.TypeConverterAttribute" /> atual.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProvider">
      <summary>Fornece metadados suplementares ao <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> usando um provedor de descrição de tipo pai.</summary>
      <param name="parent">O provedor de descrição de tipo pai.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary>Cria um objeto que pode ser substituído em outro tipo de dados.</summary>
      <param name="provider">Um provedor de serviços opcional.</param>
      <param name="objectType">O tipo de objeto a ser criado. Este parâmetro nunca é <see langword="null" />.</param>
      <param name="argTypes">Uma matriz opcional de tipos que representam os tipos de parâmetro a serem passados para o construtor do objeto. Esta matriz pode ser <see langword="null" /> ou de comprimento zero.</param>
      <param name="args">Uma matriz opcional de valores de parâmetro a serem passados para o construtor do objeto.</param>
      <returns>O <see cref="T:System.Object" /> substituto.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
      <summary>Obtém um cache por objeto, acessado como um <see cref="T:System.Collections.IDictionary" /> de pares chave-valor.</summary>
      <param name="instance">O objeto para o qual o cache deve ser obtido.</param>
      <returns>Um <see cref="T:System.Collections.IDictionary" /> se o objeto fornecido for compatível com armazenamento em cache, caso contrário, <see langword="null" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
      <summary>Obtém um descritor de tipo personalizado estendido para o objeto fornecido.</summary>
      <param name="instance">O objeto para o qual o descritor de tipo estendido deve ser obtido.</param>
      <returns>Um <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> que pode fornecer metadados estendidos para o objeto.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)">
      <summary>Obtém os provedores de controle do extensor para o objeto especificado.</summary>
      <param name="instance">O objeto para o qual os provedores de controle do extensor devem ser obtidos.</param>
      <returns>Uma matriz de provedores de controle do extensor para <paramref name="instance" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
      <summary>Obtém o nome do componente especificado ou <see langword="null" /> quando o componente não tem nome.</summary>
      <param name="component">O componente especificado.</param>
      <returns>O nome do componente especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
      <summary>Executa a reflexão normal no objeto fornecido.</summary>
      <param name="instance">Uma instância do tipo (não deve ser <see langword="null" />).</param>
      <returns>O tipo de reflexão para este <paramref name="instance" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
      <summary>Executa a reflexão normal em relação a um tipo.</summary>
      <param name="objectType">O tipo de objeto para o qual o <see cref="T:System.Reflection.IReflect" /> deve ser recuperado.</param>
      <returns>O tipo de reflexão para este <paramref name="objectType" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectType" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
      <summary>Executa a reflexão normal no objeto fornecido com o tipo fornecido.</summary>
      <param name="objectType">O tipo de objeto para o qual o <see cref="T:System.Reflection.IReflect" /> deve ser recuperado.</param>
      <param name="instance">Uma instância do tipo. Pode ser <see langword="null" />.</param>
      <returns>O tipo de reflexão para este <paramref name="objectType" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
      <summary>Converte um tipo de reflexão em um tipo de tempo de execução.</summary>
      <param name="reflectionType">O tipo a ser convertido em seu equivalente de tempo de execução.</param>
      <returns>Um <see cref="T:System.Type" /> que representa o equivalente de tempo de execução de <paramref name="reflectionType" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reflectionType" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
      <summary>Obtém um descritor de tipo personalizado para o objeto fornecido.</summary>
      <param name="instance">Uma instância do tipo. Poderá ser <see langword="null" /> se nenhuma instância for passada para o <see cref="T:System.ComponentModel.TypeDescriptor" />.</param>
      <returns>Um <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> que pode fornecer metadados para o tipo.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)">
      <summary>Obtém um descritor de tipo personalizado para o tipo fornecido.</summary>
      <param name="objectType">O tipo de objeto para o qual o descritor de tipo deve ser recuperado.</param>
      <returns>Um <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> que pode fornecer metadados para o tipo.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary>Obtém um descritor de tipo personalizado para o tipo e o objeto fornecidos.</summary>
      <param name="objectType">O tipo de objeto para o qual o descritor de tipo deve ser recuperado.</param>
      <param name="instance">Uma instância do tipo. Poderá ser <see langword="null" /> se nenhuma instância for passada para o <see cref="T:System.ComponentModel.TypeDescriptor" />.</param>
      <returns>Um <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> que pode fornecer metadados para o tipo.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)">
      <summary>Obtém um valor que indica se o tipo especificado é compatível com a descrição do tipo e sua cadeia de provedores de descrição de tipo.</summary>
      <param name="type">O tipo cuja compatibilidade será testada.</param>
      <returns>
        <see langword="true" /> se <paramref name="type" /> for compatível com a descrição do tipo e sua cadeia de provedores de descrição de tipo, caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProviderAttribute">
      <summary>Especifica o provedor de descrição de tipo personalizado para uma classe. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> usando o nome do tipo especificado.</summary>
      <param name="typeName">O nome qualificado do tipo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> usando o tipo especificado.</summary>
      <param name="type">O tipo a ser armazenado no atributo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptionProviderAttribute.TypeName">
      <summary>Obtém o nome de tipo do provedor de descrição de tipo.</summary>
      <returns>Um <see cref="T:System.String" /> valor que contém o nome do tipo <see cref="T:System.ComponentModel.TypeDescriptionProvider" />qualificado para.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptor">
      <summary>Fornece informações sobre as características de um componente, como atributos, propriedades e eventos. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])">
      <summary>Adiciona os atributos de nível de classe à instância de componente de destino.</summary>
      <param name="instance">Uma instância do componente de destino.</param>
      <param name="attributes">Uma matriz de objetos <see cref="T:System.Attribute" /> a serem adicionados à classe do componente.</param>
      <returns>O <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> recém-criado que foi usado para adicionar os atributos especificados.</returns>
      <exception cref="T:System.ArgumentNullException">Um ou ambos os parâmetros são <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])">
      <summary>Adiciona atributos de nível de classe ao tipo de componente de destino.</summary>
      <param name="type">O <see cref="T:System.Type" /> do componente de destino.</param>
      <param name="attributes">Uma matriz de objetos <see cref="T:System.Attribute" /> a serem adicionados à classe do componente.</param>
      <returns>O <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> recém-criado que foi usado para adicionar os atributos especificados.</returns>
      <exception cref="T:System.ArgumentNullException">Um ou ambos os parâmetros são <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)">
      <summary>Adiciona uma tabela de editor para o tipo base do editor especificado.</summary>
      <param name="editorBaseType">O tipo base do editor para o qual adicionar a tabela de editor. Se já existe uma tabela para este tipo, esse método não fará nada.</param>
      <param name="table">O <see cref="T:System.Collections.Hashtable" /> a ser adicionado.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>Adiciona um provedor de descrição de tipo para uma única instância de um componente.</summary>
      <param name="provider">O <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> a ser adicionado.</param>
      <param name="instance">Uma instância do componente de destino.</param>
      <exception cref="T:System.ArgumentNullException">Um ou ambos os parâmetros são <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>Adiciona um provedor de descrição de tipo de uma classe de componente.</summary>
      <param name="provider">O <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> a ser adicionado.</param>
      <param name="type">O <see cref="T:System.Type" /> do componente de destino.</param>
      <exception cref="T:System.ArgumentNullException">Um ou ambos os parâmetros são <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>Adiciona um provedor de descrição de tipo para uma única instância de um componente.</summary>
      <param name="provider">O <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> a ser adicionado.</param>
      <param name="instance">Uma instância do componente de destino.</param>
      <exception cref="T:System.ArgumentNullException">Um ou ambos os parâmetros são <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>Adiciona um provedor de descrição de tipo de uma classe de componente.</summary>
      <param name="provider">O <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> a ser adicionado.</param>
      <param name="type">O <see cref="T:System.Type" /> do componente de destino.</param>
      <exception cref="T:System.ArgumentNullException">Um ou ambos os parâmetros são <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler">
      <summary>Obtém ou define o provedor para as informações de tipo do COM (Component Object Model) do componente de destino.</summary>
      <returns>Uma <see cref="T:System.ComponentModel.IComNativeDescriptorHandler" /> instância que representa o provedor de informações de tipo com.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComObjectType">
      <summary>Obtém o tipo do objeto COM (Component Object Model) representado pelo componente de destino.</summary>
      <returns>O <see cref="T:System.Type" /> do objeto com representado por este componente ou <see langword="null" /> para objetos não-com.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)">
      <summary>Cria uma associação primária-secundária entre dois objetos.</summary>
      <param name="primary">O <see cref="T:System.Object" /> primário.</param>
      <param name="secondary">O <see cref="T:System.Object" /> secundário.</param>
      <exception cref="T:System.ArgumentNullException">Um ou ambos os parâmetros são <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="primary" /> é igual a <paramref name="secondary" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)">
      <summary>Cria uma instância do designer associada ao componente especificado e do tipo de designer especificado.</summary>
      <param name="component">Um <see cref="T:System.ComponentModel.IComponent" /> que especifica o componente a ser associado com o designer.</param>
      <param name="designerBaseType">Um <see cref="T:System.Type" /> que representa o tipo de designer a ser criado.</param>
      <returns>Um <see cref="T:System.ComponentModel.Design.IDesigner" /> que é uma instância do designer para o componente ou <see langword="null" /> se nenhum designer puder ser encontrado.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])">
      <summary>Cria um novo descritor de evento que é idêntico a um descritor de eventos existente, ao passar pelo <see cref="T:System.ComponentModel.EventDescriptor" /> existente.</summary>
      <param name="componentType">O tipo do componente para o qual criar o novo evento.</param>
      <param name="oldEventDescriptor">As informações de evento existentes.</param>
      <param name="attributes">Os novos atributos.</param>
      <returns>Um novo <see cref="T:System.ComponentModel.EventDescriptor" /> que mesclou os atributos de metadados especificados com os atributos de metadados existentes.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>Cria um novo descritor de evento que é idêntico a um descritor de evento existente através da geração dinâmica de informações de descritor de um evento específico em um tipo.</summary>
      <param name="componentType">O tipo do componente no qual o evento reside.</param>
      <param name="name">O nome do evento.</param>
      <param name="type">O tipo do delegado que manipula o evento.</param>
      <param name="attributes">Os atributos desse evento.</param>
      <returns>Um <see cref="T:System.ComponentModel.EventDescriptor" /> que está associado a um tipo.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary>Cria um objeto que pode ser substituído em outro tipo de dados.</summary>
      <param name="provider">O provedor de serviços que fornece um serviço <see cref="T:System.ComponentModel.TypeDescriptionProvider" />. Esse parâmetro pode ser <see langword="null" />.</param>
      <param name="objectType">O <see cref="T:System.Type" /> do objeto a ser criado.</param>
      <param name="argTypes">Uma matriz opcional de tipos de parâmetro a serem passados para o construtor do objeto. Esse parâmetro pode ser <see langword="null" /> ou uma matriz de tamanho zero.</param>
      <param name="args">Uma matriz opcional de valores de parâmetro a serem passados para o construtor do objeto. Se não for <see langword="null" />, o número de elementos deverá ser igual a <paramref name="argTypes" />.</param>
      <returns>Uma instância do tipo de dados substituto se um <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> associado for encontrado; caso contrário, <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectType" /> é <see langword="null" /> ou <paramref name="args" /> é <see langword="null" /> quando <paramref name="argTypes" /> não é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argTypes" /> e <paramref name="args" /> têm quantidades diferentes de elementos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary>Cria um novo descritor de propriedade com base em um descritor de propriedade existente, usando o <see cref="T:System.ComponentModel.PropertyDescriptor" /> existente especificado e matriz de atributos.</summary>
      <param name="componentType">O <see cref="T:System.Type" /> do componente do qual a propriedade é um membro.</param>
      <param name="oldPropertyDescriptor">O descritor de propriedade existente.</param>
      <param name="attributes">Os novos atributos desta propriedade.</param>
      <returns>Um novo <see cref="T:System.ComponentModel.PropertyDescriptor" /> que tem os atributos de metadados especificados mesclados com os atributos de metadados existentes.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>Cria e associa dinamicamente um descritor de propriedade a um tipo, usando o nome, o tipo e a matriz de atributos da propriedade especificada.</summary>
      <param name="componentType">O <see cref="T:System.Type" /> do componente do qual a propriedade é um membro.</param>
      <param name="name">O nome da propriedade.</param>
      <param name="type">O <see cref="T:System.Type" /> da propriedade.</param>
      <param name="attributes">Os novos atributos desta propriedade.</param>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> que está associado ao tipo especificado e que tem os atributos de metadados especificados mesclados com os atributos de metadados existentes.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)">
      <summary>Retorna uma instância do tipo associado com objeto primário especificado.</summary>
      <param name="type">O <see cref="T:System.Type" /> do componente de destino.</param>
      <param name="primary">O objeto primário da associação.</param>
      <returns>Uma instância do tipo secundário que foi associado com o objeto primário, se existir uma associação; caso contrário, <paramref name="primary" /> se não existir nenhuma associação especificada.</returns>
      <exception cref="T:System.ArgumentNullException">Um ou ambos os parâmetros são <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)">
      <summary>Retorna a coleção de atributos para o componente especificado.</summary>
      <param name="component">O componente para o qual você deseja obter atributos.</param>
      <returns>Um <see cref="T:System.ComponentModel.AttributeCollection" /> que contém os atributos do componente. Se <paramref name="component" /> for <see langword="null" />, esse método retornará uma coleção vazia.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)">
      <summary>Retorna uma coleção de atributos para o componente especificado e um valor booliano que indica que um descritor de tipo personalizado foi criado.</summary>
      <param name="component">O componente para o qual você deseja obter atributos.</param>
      <param name="noCustomTypeDesc">
        <see langword="true" /> para usar um conjunto de linha de base de atributos do descritor de tipo personalizado se o <paramref name="component" /> for do tipo <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />; caso contrário, <see langword="false" />.</param>
      <returns>Um <see cref="T:System.ComponentModel.AttributeCollection" /> com os atributos para o componente. Se o componente for <see langword="null" />, esse método retornará uma coleção vazia.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)">
      <summary>Retorna uma coleção de atributos para o tipo de componente especificado.</summary>
      <param name="componentType">O <see cref="T:System.Type" /> do componente de destino.</param>
      <returns>Um <see cref="T:System.ComponentModel.AttributeCollection" /> com os atributos do tipo de componente. Se o componente for <see langword="null" />, esse método retornará uma coleção vazia.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object)">
      <summary>Retorna o nome da classe para o componente especificado usando o descritor de tipo padrão.</summary>
      <param name="component">O <see cref="T:System.Object" /> para o qual você deseja o nome de classe.</param>
      <returns>Um <see cref="T:System.String" /> que contém o nome da classe para o componente especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)">
      <summary>Retorna o nome da classe para o componente especificado usando um descritor de tipo personalizado.</summary>
      <param name="component">O <see cref="T:System.Object" /> para o qual você deseja o nome de classe.</param>
      <param name="noCustomTypeDesc">
        <see langword="true" /> para considerar as informações da descrição de tipo personalizado; caso contrário, <see langword="false" />.</param>
      <returns>Um <see cref="T:System.String" /> que contém o nome da classe para o componente especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Type)">
      <summary>Retorna o nome da classe para o tipo especificado.</summary>
      <param name="componentType">O <see cref="T:System.Type" /> do componente de destino.</param>
      <returns>Uma <see cref="T:System.String" /> que contém o nome da classe para o tipo de componente especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentType" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)">
      <summary>Retorna o nome do componente especificado usando o descritor de tipo padrão.</summary>
      <param name="component">O <see cref="T:System.Object" /> para o qual você deseja o nome de classe.</param>
      <returns>Um <see cref="T:System.String" /> que contém o nome do componente especificado ou <see langword="null" /> se não houver nenhum nome de componente.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)">
      <summary>Retorna o nome do componente especificado usando um descritor de tipo personalizado.</summary>
      <param name="component">O <see cref="T:System.Object" /> para o qual você deseja o nome de classe.</param>
      <param name="noCustomTypeDesc">
        <see langword="true" /> para considerar as informações da descrição de tipo personalizado; caso contrário, <see langword="false" />.</param>
      <returns>O nome da classe para o componente especificado ou <see langword="null" /> se não houver nenhum nome de componente.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)">
      <summary>Retorna um conversor de tipo para o tipo do componente especificado.</summary>
      <param name="component">Um componente para o qual obter o conversor.</param>
      <returns>Um <see cref="T:System.ComponentModel.TypeConverter" /> para o componente especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)">
      <summary>Retorna um conversor de tipo para o tipo do componente especificado com um descritor de tipo personalizado.</summary>
      <param name="component">Um componente para o qual obter o conversor.</param>
      <param name="noCustomTypeDesc">
        <see langword="true" /> para considerar as informações da descrição de tipo personalizado; caso contrário, <see langword="false" />.</param>
      <returns>Um <see cref="T:System.ComponentModel.TypeConverter" /> para o componente especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)">
      <summary>Retorna um conversor de tipo para o tipo especificado.</summary>
      <param name="type">O <see cref="T:System.Type" /> do componente de destino.</param>
      <returns>Um <see cref="T:System.ComponentModel.TypeConverter" /> para o tipo especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)">
      <summary>Retorna o evento padrão para o componente especificado.</summary>
      <param name="component">O componente para o qual obter o evento.</param>
      <returns>Um <see cref="T:System.ComponentModel.EventDescriptor" /> com o evento padrão ou <see langword="null" /> se não houver eventos.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)">
      <summary>Retorna o evento padrão para um componente com um descritor de tipo personalizado.</summary>
      <param name="component">O componente para o qual obter o evento.</param>
      <param name="noCustomTypeDesc">
        <see langword="true" /> para considerar as informações da descrição de tipo personalizado; caso contrário, <see langword="false" />.</param>
      <returns>Um <see cref="T:System.ComponentModel.EventDescriptor" /> com o evento padrão ou <see langword="null" /> se não houver eventos.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)">
      <summary>Retorna o evento padrão para o tipo de componente especificado.</summary>
      <param name="componentType">O <see cref="T:System.Type" /> do componente de destino.</param>
      <returns>Um <see cref="T:System.ComponentModel.EventDescriptor" /> com o evento padrão ou <see langword="null" /> se não houver eventos.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentType" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)">
      <summary>Retorna a propriedade padrão para o componente especificado.</summary>
      <param name="component">O componente para o qual obter a propriedade padrão.</param>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> com a propriedade padrão ou <see langword="null" /> se não houver propriedades.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)">
      <summary>Retorna a propriedade padrão para o componente especificado com um descritor de tipo personalizado.</summary>
      <param name="component">O componente para o qual obter a propriedade padrão.</param>
      <param name="noCustomTypeDesc">
        <see langword="true" /> para considerar as informações da descrição de tipo personalizado; caso contrário, <see langword="false" />.</param>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> com a propriedade padrão ou <see langword="null" /> se não houver propriedades.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)">
      <summary>Retorna a propriedade padrão para o tipo de componente especificado.</summary>
      <param name="componentType">Um <see cref="T:System.Type" /> que representa a classe para a qual obter a propriedade.</param>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptor" /> com a propriedade padrão ou <see langword="null" /> se não houver propriedades.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)">
      <summary>Obtém um editor com o tipo base especificado para o componente especificado.</summary>
      <param name="component">O componente para o qual obter o editor.</param>
      <param name="editorBaseType">Um <see cref="T:System.Type" /> que representa o tipo base do editor que você deseja localizar.</param>
      <returns>Uma instância do editor que pode ser transmitida para o tipo de editor especificado ou <see langword="null" /> se nenhum editor do tipo solicitado for encontrado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> ou <paramref name="editorBaseType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)">
      <summary>Retorna um editor com o tipo base especificado e com um descritor de tipo personalizado para o componente especificado.</summary>
      <param name="component">O componente para o qual obter o editor.</param>
      <param name="editorBaseType">Um <see cref="T:System.Type" /> que representa o tipo base do editor que você deseja localizar.</param>
      <param name="noCustomTypeDesc">Um sinalizador que indica se as informações de descrição do tipo personalizado devem ser consideradas.</param>
      <returns>Uma instância do editor que pode ser transmitida para o tipo de editor especificado ou <see langword="null" /> se nenhum editor do tipo solicitado for encontrado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> ou <paramref name="editorBaseType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)">
      <summary>Retorna um editor com o tipo base especificado para o tipo especificado.</summary>
      <param name="type">O <see cref="T:System.Type" /> do componente de destino.</param>
      <param name="editorBaseType">Um <see cref="T:System.Type" /> que representa o tipo base do editor que você está tentando localizar.</param>
      <returns>Uma instância do objeto de editor que pode ser convertida para o tipo base especificado ou <see langword="null" /> se nenhum editor do tipo solicitado puder ser encontrado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> ou <paramref name="editorBaseType" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object)">
      <summary>Retorna a coleção de eventos para o componente especificado.</summary>
      <param name="component">Um componente para o qual obter os eventos.</param>
      <returns>Um <see cref="T:System.ComponentModel.EventDescriptorCollection" /> com os eventos para este componente.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])">
      <summary>Retorna a coleção de eventos para um componente especificado usando uma matriz especificada de atributos como um filtro.</summary>
      <param name="component">Um componente para o qual obter os eventos.</param>
      <param name="attributes">Uma matriz do tipo <see cref="T:System.Attribute" /> que você pode usar como um filtro.</param>
      <returns>Um <see cref="T:System.ComponentModel.EventDescriptorCollection" /> com os eventos que correspondem aos atributos especificados para esse componente.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)">
      <summary>Retorna a coleção de eventos para um componente especificado usando uma matriz especificada de atributos como um filtro e usando um descritor de tipo personalizado.</summary>
      <param name="component">Um componente para o qual obter os eventos.</param>
      <param name="attributes">Uma matriz do tipo <see cref="T:System.Attribute" /> a ser usada como um filtro.</param>
      <param name="noCustomTypeDesc">
        <see langword="true" /> para considerar as informações da descrição de tipo personalizado; caso contrário, <see langword="false" />.</param>
      <returns>Um <see cref="T:System.ComponentModel.EventDescriptorCollection" /> com os eventos que correspondem aos atributos especificados para esse componente.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)">
      <summary>Retorna a coleção de eventos para um componente especificado com um descritor de tipo personalizado.</summary>
      <param name="component">Um componente para o qual obter os eventos.</param>
      <param name="noCustomTypeDesc">
        <see langword="true" /> para considerar as informações da descrição de tipo personalizado; caso contrário, <see langword="false" />.</param>
      <returns>Um <see cref="T:System.ComponentModel.EventDescriptorCollection" /> com os eventos para este componente.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type)">
      <summary>Retorna a coleção de eventos para um tipo de componente especificado.</summary>
      <param name="componentType">O <see cref="T:System.Type" /> do componente de destino.</param>
      <returns>Um <see cref="T:System.ComponentModel.EventDescriptorCollection" /> com os eventos para este componente.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])">
      <summary>Retorna a coleção de eventos para um tipo de componente especificado usando uma matriz especificada de atributos como um filtro.</summary>
      <param name="componentType">O <see cref="T:System.Type" /> do componente de destino.</param>
      <param name="attributes">Uma matriz do tipo <see cref="T:System.Attribute" /> que você pode usar como um filtro.</param>
      <returns>Um <see cref="T:System.ComponentModel.EventDescriptorCollection" /> com os eventos que correspondem aos atributos especificados para esse componente.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)">
      <summary>Retorna o nome totalmente qualificado do componente.</summary>
      <param name="component">O <see cref="T:System.ComponentModel.Component" /> para o qual localizar o nome.</param>
      <returns>O nome totalmente qualificado do componente especificado ou <see langword="null" /> se o componente não tem nome.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)">
      <summary>Retorna a coleção de propriedades de um componente especificado.</summary>
      <param name="component">Um componente cujas propriedades serão obtidas.</param>
      <returns>Uma <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades do componente especificado.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])">
      <summary>Retorna a coleção de propriedades de um componente especificado usando uma matriz de atributos especificada como um filtro.</summary>
      <param name="component">Um componente cujas propriedades serão obtidas.</param>
      <param name="attributes">Uma matriz do tipo <see cref="T:System.Attribute" /> a ser usada como um filtro.</param>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades que correspondem aos atributos especificados para o componente especificado.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)">
      <summary>Retorna a coleção de propriedades para um componente especificado usando uma matriz especificada de atributos como um filtro e usando um descritor de tipo personalizado.</summary>
      <param name="component">Um componente cujas propriedades serão obtidas.</param>
      <param name="attributes">Uma matriz do tipo <see cref="T:System.Attribute" /> a ser usada como um filtro.</param>
      <param name="noCustomTypeDesc">
        <see langword="true" /> para considerar as informações da descrição de tipo personalizado; caso contrário, <see langword="false" />.</param>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com os eventos que correspondem aos atributos especificados para o componente especificado.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)">
      <summary>Retorna a coleção de propriedades para um componente especificado usando o descritor de tipo padrão.</summary>
      <param name="component">Um componente cujas propriedades serão obtidas.</param>
      <param name="noCustomTypeDesc">
        <see langword="true" /> para não considerar as informações de descrição de tipo personalizado; caso contrário, <see langword="false" />.</param>
      <returns>Uma <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades para um componente especificado.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> é um objeto remoto entre processos.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type)">
      <summary>Retorna a coleção de propriedades de um tipo de componente especificado.</summary>
      <param name="componentType">Um <see cref="T:System.Type" /> que representa o componente para o qual obter as propriedades.</param>
      <returns>Uma <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades de um tipo de componente especificado.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])">
      <summary>Retorna a coleção de propriedades de um tipo de componente especificado usando uma matriz especificada de atributos como um filtro.</summary>
      <param name="componentType">O <see cref="T:System.Type" /> do componente de destino.</param>
      <param name="attributes">Uma matriz do tipo <see cref="T:System.Attribute" /> a ser usada como um filtro.</param>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> com as propriedades que correspondem aos atributos especificados para esse tipo de componente.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Object)">
      <summary>Retorna o provedor de descrição de tipo para o componente especificado.</summary>
      <param name="instance">Uma instância do componente de destino.</param>
      <returns>Um <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> associado com o componente especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Type)">
      <summary>Retorna o provedor de descrição de tipo para o tipo especificado.</summary>
      <param name="type">O <see cref="T:System.Type" /> do componente de destino.</param>
      <returns>Um <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> associado ao tipo especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)">
      <summary>Retorna um <see cref="T:System.Type" /> que pode ser usado para executar a reflexão, considerando um objeto.</summary>
      <param name="instance">Uma instância do componente de destino.</param>
      <returns>Um <see cref="T:System.Type" /> para o objeto especificado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)">
      <summary>Retorna um <see cref="T:System.Type" /> que pode ser usado para executar a reflexão, considerando um tipo de classe.</summary>
      <param name="type">O <see cref="T:System.Type" /> do componente de destino.</param>
      <returns>Um <see cref="T:System.Type" /> da classe especificada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.InterfaceType">
      <summary>Obtém um tipo que representa um provedor de descrição de tipo para todos os tipos de interface.</summary>
      <returns>Um <see cref="T:System.Type" /> que representa um provedor de descrição de tipo personalizado para todos os tipos de interface.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)">
      <summary>Limpa do cache as propriedades e eventos do componente especificado.</summary>
      <param name="component">Um componente para o qual as propriedades ou os eventos foram alterados.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)">
      <summary>Limpa do cache as propriedades e eventos do assembly especificado.</summary>
      <param name="assembly">O <see cref="T:System.Reflection.Assembly" /> que representa o assembly a ser atualizado. Cada <see cref="T:System.Type" /> neste assembly será atualizado.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)">
      <summary>Limpa do cache as propriedades e eventos do módulo especificado.</summary>
      <param name="module">O <see cref="T:System.Reflection.Module" /> que representa o módulo a ser atualizado. Cada <see cref="T:System.Type" /> neste módulo será atualizado.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Type)">
      <summary>Limpa do cache as propriedades e eventos do tipo de componente especificado.</summary>
      <param name="type">O <see cref="T:System.Type" /> do componente de destino.</param>
    </member>
    <member name="E:System.ComponentModel.TypeDescriptor.Refreshed">
      <summary>Ocorre quando o cache de um componente é limpo.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)">
      <summary>Remove uma associação entre dois objetos.</summary>
      <param name="primary">O <see cref="T:System.Object" /> primário.</param>
      <param name="secondary">O <see cref="T:System.Object" /> secundário.</param>
      <exception cref="T:System.ArgumentNullException">Um ou ambos os parâmetros são <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)">
      <summary>Remove todas as associações de um objeto primário.</summary>
      <param name="primary">O <see cref="T:System.Object" /> primário em uma associação.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="primary" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>Remove um provedor de descrição de tipo adicionado anteriormente, que esteja associado com o objeto especificado.</summary>
      <param name="provider">O <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> a ser removido.</param>
      <param name="instance">Uma instância do componente de destino.</param>
      <exception cref="T:System.ArgumentNullException">Um ou ambos os parâmetros são <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>Remove um provedor de descrição de tipo adicionado anteriormente, que esteja associado com o tipo especificado.</summary>
      <param name="provider">O <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> a ser removido.</param>
      <param name="type">O <see cref="T:System.Type" /> do componente de destino.</param>
      <exception cref="T:System.ArgumentNullException">Um ou ambos os parâmetros são <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>Remove um provedor de descrição de tipo adicionado anteriormente, que esteja associado com o objeto especificado.</summary>
      <param name="provider">O <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> a ser removido.</param>
      <param name="instance">Uma instância do componente de destino.</param>
      <exception cref="T:System.ArgumentNullException">Um ou ambos os parâmetros são <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>Remove um provedor de descrição de tipo adicionado anteriormente, que esteja associado com o tipo especificado.</summary>
      <param name="provider">O <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> a ser removido.</param>
      <param name="type">O <see cref="T:System.Type" /> do componente de destino.</param>
      <exception cref="T:System.ArgumentNullException">Um ou ambos os parâmetros são <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)">
      <summary>Classifica os descritores usando o nome do descritor.</summary>
      <param name="infos">Um <see cref="T:System.Collections.IList" /> que contém os descritores a serem classificados.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="infos" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.ComponentModel.TypeListConverter">
      <summary>Fornece um conversor de tipo que pode ser usado para preencher uma caixa de listagem com os tipos disponíveis.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.#ctor(System.Type[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.TypeListConverter" /> usando a matriz de tipo como os tipos disponíveis.</summary>
      <param name="types">A matriz do tipo <see cref="T:System.Type" /> a ser usada como os tipos disponíveis.</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtém um valor que indica se esse conversor pode converter o <see cref="T:System.Type" /> especificado do objeto de origem usando o contexto fornecido.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType">O <see cref="T:System.Type" /> do objeto de origem.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtém um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType">Um <see cref="T:System.Type" /> que representa o tipo no qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converte o objeto especificado para o tipo nativo do conversor.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" /> que especifica a cultura usada para representar a fonte.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte o objeto de valor especificado para o tipo de destino especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" /> opcional. Se não for fornecido, a cultura atual será assumida.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType">O <see cref="T:System.Type" /> para o qual converter o valor.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtém uma coleção de valores padrão para o tipo de dados para o qual este validador é projetado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>Um <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> que contém um conjunto padrão de valores válidos ou <see langword="null" />, se o tipo de dados não der suporte a um conjunto padrão de valores.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtém um valor que indica se a lista de valores padrão retornados do método <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> é uma lista exclusiva.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>
        <see langword="true" /> porque a <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> retornada de <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> é uma lista completa de valores possíveis. Esse método nunca retorna <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Obtém um valor que indica se esse objeto dá suporte a um conjunto padrão de valores que podem ser escolhidos em uma lista usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <returns>
        <see langword="true" /> porque <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> deve ser chamado para localizar um conjunto comum de valores aos quais o objeto dá suporte. Esse método nunca retorna <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.UInt16Converter">
      <summary>Fornece um conversor de tipo para converter objetos de tipo inteiro sem sinal de 16 bits para e de outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt16Converter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.UInt16Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.UInt32Converter">
      <summary>Fornece um conversor de tipo para converter objetos de tipo inteiro sem sinal de 32 bits para e de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt32Converter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.UInt32Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.UInt64Converter">
      <summary>Fornece um conversor de tipo para converter objetos de tipo inteiro sem sinal de 64 bits para e de outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt64Converter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.UInt64Converter" />.</summary>
    </member>
    <member name="T:System.ComponentModel.VersionConverter">
      <summary>Fornece um conversor de tipo para converter objetos <see cref="T:System.Version" /> para e de diversas outras representações.</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.VersionConverter" />.</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtém um valor que indica se esse conversor pode converter um objeto do tipo de origem especificado em um <see cref="T:System.Version" />.</summary>
      <param name="context">Um objeto que fornece informações contextuais.</param>
      <param name="sourceType">O tipo do objeto a ser convertido.</param>
      <returns>
        <see langword="true" /> se esse conversor puder converter sourceType em um <see cref="T:System.Version" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtém um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context">Um objeto que fornece informações contextuais.</param>
      <param name="destinationType">O tipo de destino da conversão.</param>
      <returns>
        <see langword="true" /> se o conversor puder converter um objeto no tipo de destino fornecido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converte o objeto especificado em um <see cref="T:System.Version" />.</summary>
      <param name="context">Um objeto que fornece informações contextuais.</param>
      <param name="culture">A cultura a ser usada para a conversão.</param>
      <param name="value">O valor a ser convertido para um <see cref="T:System.Version" />.</param>
      <returns>
        <paramref name="value" /> convertido em um valor <see cref="T:System.Version" />.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> não é uma cadeia de caracteres <see cref="T:System.Version" /> válida.</exception>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte o valor especificado no tipo de destino especificado usando o contexto e os argumentos especificados.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">A cultura que fornece informações de formatação para a conversão.</param>
      <param name="value">O valor a ser convertido.</param>
      <param name="destinationType">O tipo para o qual o parâmetro value será convertido.</param>
      <returns>Um objeto que representa o valor convertido.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Retorna um valor que indica se o objeto de valor fornecido é válido para esse tipo e para o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value">O objeto a ser testado quanto à validade.</param>
      <returns>
        <see langword="true" /> se o valor especificado for válido para esse objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.WarningException">
      <summary>Especifica uma exceção tratada como um aviso em vez de um erro.</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.WarningException" />.</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.WarningException" /> usando o contexto e os dados de serialização especificados.</summary>
      <param name="info">O <see cref="T:System.Runtime.Serialization.SerializationInfo" /> a ser usado para desserialização.</param>
      <param name="context">O destino a ser usado para desserialização.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.WarningException" /> com a mensagem especificada e sem nenhum arquivo de Ajuda.</summary>
      <param name="message">A mensagem a ser exibida ao usuário final.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.WarningException" /> com a descrição detalhada e a exceção especificadas.</summary>
      <param name="message">Uma descrição detalhada do erro.</param>
      <param name="innerException">Uma referência à exceção interna que é a causa dessa exceção.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.WarningException" /> com a mensagem especificada e com acesso ao arquivo de Ajuda especificado.</summary>
      <param name="message">A mensagem a ser exibida ao usuário final.</param>
      <param name="helpUrl">O arquivo de Ajuda a ser exibido se o usuário solicitar ajuda.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.ComponentModel.WarningException" /> com a mensagem especificada e com acesso ao arquivo e ao tópico de Ajuda especificados.</summary>
      <param name="message">A mensagem a ser exibida ao usuário final.</param>
      <param name="helpUrl">O arquivo de Ajuda a ser exibido se o usuário solicitar ajuda.</param>
      <param name="helpTopic">O tópico de Ajuda a ser exibido se o usuário solicitar ajuda.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Define a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> com o nome de parâmetro e informações adicionais de exceção.</summary>
      <param name="info">Armazena os dados que estavam sendo usados para serializar ou desserializar o objeto que o <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> estava serializando ou desserializando.</param>
      <param name="context">Descreve a origem e o destino do fluxo que gerou a exceção, além de um meio para que a serialização retenha esse contexto e um contexto adicional definido pelo chamador.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpTopic">
      <summary>Obtém o tópico de Ajuda associado ao aviso.</summary>
      <returns>O tópico da ajuda associado ao aviso.</returns>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpUrl">
      <summary>Obtém o arquivo de Ajuda associado ao aviso.</summary>
      <returns>O arquivo de ajuda associado ao aviso.</returns>
    </member>
    <member name="T:System.Drawing.ColorConverter">
      <summary>Converte cores de um tipo de dados para outro. Acesse esta classe por meio do <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Drawing.ColorConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina se esse conversor pode converter um objeto no tipo de origem especificado para o tipo nativo do conversor.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato. É possível usar esse objeto para obter mais informações sobre o ambiente do qual o conversor está sendo invocado.</param>
      <param name="sourceType">O tipo do qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse objeto puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retorna um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType">Um <see cref="T:System.Type" /> que representa o tipo para o qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a operação, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converte o objeto fornecido no tipo nativo do conversor.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.TypeDescriptor" /> que fornece um contexto de formato. É possível usar esse objeto para obter mais informações sobre o ambiente do qual o conversor está sendo invocado.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" /> que especifica a cultura na qual representar o cor.</param>
      <param name="value">O objeto a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.ArgumentException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte o objeto especificado em outro tipo.</summary>
      <param name="context">Um contexto do formatador. Use esse objeto para extrair mais informações sobre o ambiente do qual o conversor está sendo invocado. Sempre verifique se esse valor é <see langword="null" />. Além disso, as propriedades no objeto de contexto podem retornar <see langword="null" />.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" /> que especifica a cultura na qual representar o cor.</param>
      <param name="value">O objeto a ser convertido.</param>
      <param name="destinationType">O tipo no qual converter o objeto.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationtype" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Recupera uma coleção que contém um conjunto de valores padrão para o tipo de dados para o qual o validador foi criado. Retornará <see langword="null" /> se o tipo de dados não der suporte a um conjunto padrão de valores.</summary>
      <param name="context">Um contexto do formatador. Use esse objeto para extrair mais informações sobre o ambiente do qual o conversor está sendo invocado. Sempre verifique se esse valor é <see langword="null" />. Além disso, as propriedades no objeto de contexto podem retornar <see langword="null" />.</param>
      <returns>Uma coleção que contém <see langword="null" /> ou um conjunto padrão de valores válidos. A implementação padrão sempre retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Determina se esse objeto dá suporte a um conjunto padrão de valores que podem ser escolhidos em uma lista.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.TypeDescriptor" /> por meio do qual o contexto adicional pode ser fornecido.</param>
      <returns>
        <see langword="true" /> se <see cref="Overload:System.Drawing.ColorConverter.GetStandardValues" /> precisar ser chamado para localizar um conjunto comum de valores aos quais o objeto dá suporte; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.PointConverter">
      <summary>Converte um objeto <see cref="T:System.Drawing.Point" /> de um tipo de dados em outro.</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Drawing.PointConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina se esse conversor pode converter um objeto no tipo de origem especificado para o tipo nativo do conversor.</summary>
      <param name="context">Um contexto do formatador. Esse objeto pode ser usado para obter mais informações sobre o ambiente do qual este conversor está sendo chamado. Isso pode ser <see langword="null" />, portanto, você sempre deve verificar. Além disso, as propriedades no objeto de contexto também podem retornar <see langword="null" />.</param>
      <param name="sourceType">O tipo do qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse objeto puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtém um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context">Um objeto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType">Um objeto <see cref="T:System.Type" /> que representa o tipo para o qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converte o objeto especificado em um objeto <see cref="T:System.Drawing.Point" />.</summary>
      <param name="context">Um contexto do formatador. Esse objeto pode ser usado para obter mais informações sobre o ambiente do qual este conversor está sendo chamado. Isso pode ser <see langword="null" />, portanto, você sempre deve verificar. Além disso, as propriedades no objeto de contexto também podem retornar <see langword="null" />.</param>
      <param name="culture">Um objeto que contém informações específicas da cultura, como o idioma, calendário e convenções culturais associadas a uma cultura específica. Ele é baseado no padrão RFC 1766.</param>
      <param name="value">O objeto a ser convertido.</param>
      <returns>O objeto convertido.</returns>
      <exception cref="T:System.NotSupportedException">Não foi possível concluir a conversão.</exception>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte o objeto especificado no tipo especificado.</summary>
      <param name="context">Um contexto do formatador. Esse objeto pode ser usado para obter mais informações sobre o ambiente do qual este conversor está sendo chamado. Isso pode ser <see langword="null" />, portanto, você sempre deve verificar. Além disso, as propriedades no objeto de contexto também podem retornar <see langword="null" />.</param>
      <param name="culture">Um objeto que contém informações específicas da cultura, como o idioma, calendário e convenções culturais associadas a uma cultura específica. Ele é baseado no padrão RFC 1766.</param>
      <param name="value">O objeto a ser convertido.</param>
      <param name="destinationType">O tipo no qual converter o objeto.</param>
      <returns>O objeto convertido.</returns>
      <exception cref="T:System.NotSupportedException">Não foi possível concluir a conversão.</exception>
    </member>
    <member name="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Cria uma instância desse tipo fornecido um conjunto de valores de propriedade para o objeto.</summary>
      <param name="context">Um descritor de tipo por meio do qual o contexto adicional pode ser fornecido.</param>
      <param name="propertyValues">Um dicionário de novos valores da propriedade. O dicionário contém uma série de pares nome-valor, um para cada propriedade retornada de <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.</param>
      <returns>O objeto recém-criado ou <see langword="null" />, se o objeto não puder ser criado. A implementação padrão retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Determina se a alteração de um valor neste objeto deve exigir que uma chamada a <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> crie um novo valor.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.TypeDescriptor" /> por meio do qual o contexto adicional pode ser fornecido.</param>
      <returns>
        <see langword="true" /> caso o método <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> deva ser chamado quando uma alteração for feita a uma ou mais propriedades do objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Recupera o conjunto de propriedades para este tipo. Por padrão, um tipo não retorna nenhuma propriedade.</summary>
      <param name="context">Um descritor de tipo por meio do qual o contexto adicional pode ser fornecido.</param>
      <param name="value">O valor do objeto para o qual obter as propriedades.</param>
      <param name="attributes">Uma matriz de objetos <see cref="T:System.Attribute" /> que descrevem as propriedades.</param>
      <returns>O conjunto de propriedades que são expostas para esse tipo de dados. Se não houver propriedades expostas, esse método poderá retornar <see langword="null" />. A implementação padrão sempre retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Determina se esse objeto dá suporte às propriedades. Por padrão, é <see langword="false" />.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.TypeDescriptor" /> por meio do qual o contexto adicional pode ser fornecido.</param>
      <returns>
        <see langword="true" /> caso <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> deva ser chamado para localizar as propriedades desse objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.RectangleConverter">
      <summary>Converte retângulos de um tipo de dados em outro. Acesse esta classe por meio do <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Drawing.RectangleConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina se esse conversor pode converter um objeto no tipo de origem especificado para o tipo nativo do conversor.</summary>
      <param name="context">Um contexto do formatador. Esse objeto pode ser usado para obter mais informações sobre o ambiente do qual este conversor está sendo chamado. Isso pode ser <see langword="null" />, portanto, você sempre deve verificar. Além disso, as propriedades no objeto de contexto também podem retornar <see langword="null" />.</param>
      <param name="sourceType">O tipo do qual você deseja converter.</param>
      <returns>Este método retornará <see langword="true" /> se este objeto puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtém um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context">Um objeto <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato. Isso pode ser <see langword="null" />, portanto, você sempre deve verificar. Além disso, as propriedades no objeto de contexto também podem retornar <see langword="null" />.</param>
      <param name="destinationType">Um objeto <see cref="T:System.Type" /> que representa o tipo para o qual você deseja converter.</param>
      <returns>Este método retornará <see langword="true" /> se este conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converte o objeto fornecido em um objeto <see cref="T:System.Drawing.Rectangle" />.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que pode ser usado para obter informações adicionais sobre o ambiente do qual este conversor está sendo chamado. Isso pode ser <see langword="null" />, portanto, você sempre deve verificar. Além disso, as propriedades no objeto de contexto também podem retornar <see langword="null" />.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" /> que contém informações específicas da cultura, como o idioma, calendário e convenções culturais associadas a uma cultura específica. Ele é baseado no padrão RFC 1766.</param>
      <param name="value">O objeto a ser convertido.</param>
      <returns>O objeto convertido.</returns>
      <exception cref="T:System.NotSupportedException">Não foi possível concluir a conversão.</exception>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte o objeto especificado no tipo especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que pode ser usado para obter informações adicionais sobre o ambiente do qual este conversor está sendo chamado. Isso pode ser <see langword="null" />, portanto, você sempre deve verificar. Além disso, as propriedades no objeto de contexto também podem retornar <see langword="null" />.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" /> que contém informações específicas da cultura, como o idioma, calendário e convenções culturais associadas a uma cultura específica. Ele é baseado no padrão RFC 1766.</param>
      <param name="value">O objeto a ser convertido.</param>
      <param name="destinationType">O tipo no qual converter o objeto.</param>
      <returns>O objeto convertido.</returns>
      <exception cref="T:System.NotSupportedException">Não foi possível concluir a conversão.</exception>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Cria uma instância desse tipo fornecido um conjunto de valores de propriedade para o objeto. Isso é útil para objetos imutáveis, mas ainda desejam fornecer propriedades mutáveis.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> por meio do qual o contexto adicional pode ser fornecido.</param>
      <param name="propertyValues">Um dicionário de novos valores da propriedade. O dicionário contém uma série de pares nome-valor, um para cada propriedade retornada de uma chamada ao método <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.</param>
      <returns>O objeto recém-criado ou <see langword="null" />, se o objeto não puder ser criado. A implementação padrão retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Determina se a alteração de um valor neste objeto deve exigir que uma chamada a <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> crie um novo valor.</summary>
      <param name="context">Um descritor de tipo por meio do qual o contexto adicional pode ser fornecido.</param>
      <returns>Este método retornará <see langword="true" /> se <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> dever ser chamado quando uma alteração for feita em uma ou mais propriedades deste objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Recupera o conjunto de propriedades para este tipo. Por padrão, um tipo não retorna nenhuma propriedade.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> por meio do qual o contexto adicional pode ser fornecido.</param>
      <param name="value">O valor do objeto para o qual obter as propriedades.</param>
      <param name="attributes">Uma matriz de objetos <see cref="T:System.Attribute" /> que descrevem as propriedades.</param>
      <returns>O conjunto de propriedades que devem ser expostas para este tipo de dados. Se nenhuma propriedade deve ser exposta, isso pode retornar <see langword="null" />. A implementação padrão sempre retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Determina se esse objeto dá suporte às propriedades. Por padrão, é <see langword="false" />.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> por meio do qual o contexto adicional pode ser fornecido.</param>
      <returns>Este método retornará <see langword="true" /> se <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> dever ser chamado para encontrar as propriedades deste objeto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Drawing.SizeConverter">
      <summary>A classe <see cref="T:System.Drawing.SizeConverter" /> é usada para converter de um tipo de dados em outro. Acesse essa classe por meio do objeto <see cref="T:System.ComponentModel.TypeDescriptor" />.</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.#ctor">
      <summary>Inicializa um novo objeto <see cref="T:System.Drawing.SizeConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determina se esse conversor pode converter um objeto no tipo de origem especificado no tipo nativo do conversor.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que pode ser usado para obter informações adicionais sobre o ambiente do qual este conversor está sendo chamado. Isso pode ser <see langword="null" />, portanto, você sempre deve verificar. Além disso, as propriedades no objeto de contexto também podem retornar <see langword="null" />.</param>
      <param name="sourceType">O tipo do qual você deseja converter.</param>
      <returns>Este método retornará <see langword="true" /> se este objeto puder realizar a conversão.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Obtém um valor que indica se este conversor pode converter um objeto no tipo de destino fornecido usando o contexto.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que pode ser usado para obter informações adicionais sobre o ambiente do qual este conversor está sendo chamado. Isso pode ser <see langword="null" />. Portanto, sempre verifique. Além disso, as propriedades no objeto de contexto podem retornar <see langword="null" />.</param>
      <param name="destinationType">Um <see cref="T:System.Type" /> que representa o tipo para o qual você deseja converter.</param>
      <returns>Este método retornará <see langword="true" /> se este conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converte o objeto especificado no tipo nativo do conversor.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que pode ser usado para obter informações adicionais sobre o ambiente do qual este conversor está sendo chamado. Isso pode ser <see langword="null" />, portanto, você sempre deve verificar. Além disso, as propriedades no objeto de contexto também podem retornar <see langword="null" />.</param>
      <param name="culture">Um objeto <see cref="T:System.Globalization.CultureInfo" /> que contém informações específicas da cultura, como o idioma, calendário e convenções culturais associadas a uma cultura específica. Ele é baseado no padrão RFC 1766.</param>
      <param name="value">O objeto a ser convertido.</param>
      <returns>O objeto convertido.</returns>
      <exception cref="T:System.NotSupportedException">Não foi possível concluir a conversão.</exception>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte o objeto especificado no tipo especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que pode ser usado para obter informações adicionais sobre o ambiente do qual este conversor está sendo chamado. Isso pode ser <see langword="null" />, portanto, você sempre deve verificar. Além disso, as propriedades no objeto de contexto também podem retornar <see langword="null" />.</param>
      <param name="culture">Um objeto <see cref="T:System.Globalization.CultureInfo" /> que contém informações específicas da cultura, como o idioma, calendário e convenções culturais associadas a uma cultura específica. Ele é baseado no padrão RFC 1766.</param>
      <param name="value">O objeto a ser convertido.</param>
      <param name="destinationType">O tipo no qual converter o objeto.</param>
      <returns>O objeto convertido.</returns>
      <exception cref="T:System.NotSupportedException">Não foi possível concluir a conversão.</exception>
    </member>
    <member name="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Cria um objeto desse tipo por meio de um conjunto especificado de valores da propriedade para o objeto. Isso é útil para criar objetos imutáveis que têm propriedades mutáveis.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.TypeDescriptor" /> por meio do qual o contexto adicional pode ser fornecido.</param>
      <param name="propertyValues">Um dicionário de novos valores da propriedade. O dicionário contém uma série de pares nome-valor, um para cada propriedade retornada de uma chamada ao método <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />.</param>
      <returns>O objeto recém-criado ou <see langword="null" />, se o objeto não puder ser criado. A implementação padrão retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Determina se a alteração de um valor neste objeto deve exigir que uma chamada ao método <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> crie um novo valor.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.TypeDescriptor" /> por meio do qual o contexto adicional pode ser fornecido.</param>
      <returns>
        <see langword="true" /> se o objeto <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> dever ser chamado quando uma alteração for feita em uma ou mais propriedades deste objeto.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Recupera o conjunto de propriedades para este tipo. Por padrão, um tipo não tem nenhuma propriedade a retornar.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.TypeDescriptor" /> por meio do qual o contexto adicional pode ser fornecido.</param>
      <param name="value">O valor do objeto para o qual obter as propriedades.</param>
      <param name="attributes">Uma matriz de objetos <see cref="T:System.Attribute" /> que descrevem as propriedades.</param>
      <returns>O conjunto de propriedades que devem ser expostas para este tipo de dados. Se nenhuma propriedade deve ser exposta, isso pode retornar <see langword="null" />. A implementação padrão sempre retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Determina se este objeto dá suporte a propriedades. Por padrão, é <see langword="false" />.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.TypeDescriptor" /> por meio do qual o contexto adicional pode ser fornecido.</param>
      <returns>
        <see langword="true" /> se o método <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> dever ser chamado para localizar as propriedades desse objeto.</returns>
    </member>
    <member name="T:System.Drawing.SizeFConverter">
      <summary>Converte objetos <see cref="T:System.Drawing.SizeF" /> de um tipo em outro.</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Drawing.SizeFConverter" />.</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retorna um valor que indica se o conversor pode converter do tipo especificado para o tipo <see cref="T:System.Drawing.SizeF" /> usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> por meio do qual o contexto adicional pode ser fornecidos.</param>
      <param name="sourceType">Um <see cref="T:System.Type" /> que representa o tipo a ser convertido.</param>
      <returns>
        <see langword="true" /> para indicar que a conversão pode ser executada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retorna um valor que indica se o <see cref="T:System.Drawing.SizeFConverter" /> pode converter um <see cref="T:System.Drawing.SizeF" /> para o tipo especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> por meio do qual o contexto adicional pode ser fornecidos.</param>
      <param name="destinationType">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converte o objeto determinado para o tipo deste conversor, usando as informações de contexto e de cultura especificadas.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> para ser usada como a cultura atual.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte o objeto de valor determinado para o tipo especificado, usando as informações de contexto e de cultura especificadas.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" />. Se null for passado, a cultura atual será assumida.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType">O <see cref="T:System.Type" /> para o qual o parâmetro value será convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>Cria uma instância de um <see cref="T:System.Drawing.SizeF" /> com os valores de propriedade especificados usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> por meio do qual o contexto adicional pode ser fornecidos.</param>
      <param name="propertyValues">Um <see cref="T:System.Collections.IDictionary" /> que contêm valores e nomes de propriedade.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o novo <see cref="T:System.Drawing.SizeF" /> ou <see langword="null" /> se o objeto não puder ser criado.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retorna um valor que indica se a alteração de um valor nesse objeto requer uma chamada para o método <see cref="Overload:System.Drawing.SizeFConverter.CreateInstance" /> para criar um novo valor.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato. Isso pode ser <see langword="null" />.</param>
      <returns>Sempre retorna <see langword="true" />.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Recupera um conjunto de propriedades para o tipo <see cref="T:System.Drawing.SizeF" /> usando o contexto especificado e os atributos.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> por meio do qual o contexto adicional pode ser fornecidos.</param>
      <param name="value">O <see cref="T:System.Object" /> ao qual as propriedades serão retornadas.</param>
      <param name="attributes">Uma matriz de objetos <see cref="T:System.Attribute" /> que descrevem as propriedades.</param>
      <returns>Um <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> que contém as propriedades.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Retorna se o tipo <see cref="T:System.Drawing.SizeF" /> der suporte a propriedades.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> por meio do qual o contexto adicional pode ser fornecidos.</param>
      <returns>Sempre retorna <see langword="true" />.</returns>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter">
      <summary>A classe <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> representa o conversor de tipo da política de proteção estendida usada pelo servidor para validar as conexões de entrada do cliente.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" />.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retorna se esse conversor pode converter o objeto para o tipo especificado.</summary>
      <param name="context">O objeto a ser convertido.</param>
      <param name="destinationType">Um <see cref="T:System.Type" /> que representa o tipo para o qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se esse conversor puder realizar a conversão; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converter o objeto no tipo especificado</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">Um objeto <see cref="T:System.Globalization.CultureInfo" />. Se <see langword="null" /> for passado, a cultura atual será assumida.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido. Isso deve ser um objeto <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />.</param>
      <param name="destinationType">O <see cref="T:System.Type" /> para o qual o parâmetro value será convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o parâmetro <paramref name="value" /> convertido.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">A conversão não pôde ser executada.</exception>
    </member>
    <member name="T:System.Timers.ElapsedEventArgs">
      <summary>Fornece dados para o evento de <see cref="E:System.Timers.Timer.Elapsed" /> .</summary>
    </member>
    <member name="P:System.Timers.ElapsedEventArgs.SignalTime">
      <summary>Obtém a data/hora quando o <see cref="E:System.Timers.Timer.Elapsed" /> evento foi gerado.</summary>
      <returns>A hora que o <see cref="E:System.Timers.Timer.Elapsed" /> evento foi gerado.</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventHandler">
      <summary>Representa o método que manipulará o evento de <see cref="E:System.Timers.Timer.Elapsed" /> de <see cref="T:System.Timers.Timer" />.</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">Um objeto <see cref="T:System.Timers.ElapsedEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.Timers.Timer">
      <summary>Gera um evento após um intervalo definido, a opção de gerar eventos recorrentes.</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Timers.Timer" /> e define todas as propriedades para seus valores iniciais.</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor(System.Double)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Timers.Timer" /> e define a propriedade <see cref="P:System.Timers.Timer.Interval" /> como o número especificado de milissegundos.</summary>
      <param name="interval">O tempo, em milissegundos, entre eventos. O valor deve ser maior que zero e menor ou igual a <see cref="F:System.Int32.MaxValue" />.</param>
      <exception cref="T:System.ArgumentException">O valor do parâmetro <paramref name="interval" /> é menor ou igual a zero ou maior que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="P:System.Timers.Timer.AutoReset">
      <summary>Obtém ou define um valor booliano que indica se <see cref="T:System.Timers.Timer" /> deve acionar o evento <see cref="E:System.Timers.Timer.Elapsed" /> apenas uma vez (<see langword="false" />) ou repetidamente (<see langword="true" />).</summary>
      <returns>
        <see langword="true" /> para que o <see cref="T:System.Timers.Timer" /> acione o evento <see cref="E:System.Timers.Timer.Elapsed" /> cada vez que o intervalo expirar; <see langword="false" /> para que acione o evento <see cref="E:System.Timers.Timer.Elapsed" /> somente uma vez, após a primeira vez que o intervalo expirar. O padrão é <see langword="true" />.</returns>
    </member>
    <member name="M:System.Timers.Timer.BeginInit">
      <summary>Começa a inicialização do tempo de execução de um <see cref="T:System.Timers.Timer" /> que é usado em um formulário ou por outro componente.</summary>
    </member>
    <member name="M:System.Timers.Timer.Close">
      <summary>Libera os recursos usados pelo <see cref="T:System.Timers.Timer" />.</summary>
    </member>
    <member name="M:System.Timers.Timer.Dispose(System.Boolean)">
      <summary>Libera todos os recursos usados pelo <see cref="T:System.Timers.Timer" /> atual.</summary>
      <param name="disposing">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="E:System.Timers.Timer.Elapsed">
      <summary>Ocorre quando o intervalo termina.</summary>
    </member>
    <member name="P:System.Timers.Timer.Enabled">
      <summary>Obtém ou define um valor que indica se o <see cref="T:System.Timers.Timer" /> deve acionar o evento <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
      <returns>
        <see langword="true" /> caso o <see cref="T:System.Timers.Timer" /> deva acionar o evento <see cref="E:System.Timers.Timer.Elapsed" />; caso contrário, <see langword="false" />. O padrão é <see langword="false" />.</returns>
      <exception cref="T:System.ObjectDisposedException">Essa propriedade não pode ser definida porque o temporizador foi descartado.</exception>
      <exception cref="T:System.ArgumentException">A propriedade <see cref="P:System.Timers.Timer.Interval" /> foi definida como um valor maior que <see cref="F:System.Int32.MaxValue" /> antes de o temporizador ser habilitado.</exception>
    </member>
    <member name="M:System.Timers.Timer.EndInit">
      <summary>Termina a inicialização do tempo de execução de um <see cref="T:System.Timers.Timer" /> que é usado em um formulário ou por outro componente.</summary>
    </member>
    <member name="P:System.Timers.Timer.Interval">
      <summary>Obtém ou define o intervalo, expressado em milissegundos, no qual gerar o evento <see cref="E:System.Timers.Timer.Elapsed" />.</summary>
      <returns>O tempo, em milissegundos, entre eventos <see cref="E:System.Timers.Timer.Elapsed" />. O valor deve ser maior que zero e menor ou igual a <see cref="F:System.Int32.MaxValue" />. O padrão é de 100 milissegundos.</returns>
      <exception cref="T:System.ArgumentException">O intervalo é menor ou igual a zero.  

ou - 
O intervalo é maior que <see cref="F:System.Int32.MaxValue" /> e o timer está habilitado no momento. (Se o timer não estiver habilitado no momento, nenhuma exceção será lançada até que ele seja habilitado.)</exception>
    </member>
    <member name="P:System.Timers.Timer.Site">
      <summary>Obtém ou define o site que associa o <see cref="T:System.Timers.Timer" /> ao respectivo contêiner no modo de design.</summary>
      <returns>Uma interface <see cref="T:System.ComponentModel.ISite" /> que representa o site que associa o objeto <see cref="T:System.Timers.Timer" /> ao respectivo contêiner.</returns>
    </member>
    <member name="M:System.Timers.Timer.Start">
      <summary>Começa a acionar o evento <see cref="E:System.Timers.Timer.Elapsed" /> definindo <see cref="P:System.Timers.Timer.Enabled" /> como <see langword="true" />.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">O <see cref="T:System.Timers.Timer" /> é criado com um intervalo maior ou igual a <see cref="F:System.Int32.MaxValue" /> + 1 ou definido como um intervalo menor que zero.</exception>
    </member>
    <member name="M:System.Timers.Timer.Stop">
      <summary>Para de acionar o evento <see cref="E:System.Timers.Timer.Elapsed" /> definindo <see cref="P:System.Timers.Timer.Enabled" /> como <see langword="false" />.</summary>
    </member>
    <member name="P:System.Timers.Timer.SynchronizingObject">
      <summary>Obtém ou define o objeto usado para realizar marshaling das chamadas do manipulador de eventos emitidas ao término de um intervalo.</summary>
      <returns>O <see cref="T:System.ComponentModel.ISynchronizeInvoke" /> que representa o objeto usado para realizar marshaling das chamadas do manipulador de eventos emitidas ao término de um intervalo. O padrão é <see langword="null" />.</returns>
    </member>
    <member name="T:System.Timers.TimersDescriptionAttribute">
      <summary>Define a descrição que os designers visuais podem exibir ao referenciar um evento, um extensor ou uma propriedade.</summary>
    </member>
    <member name="M:System.Timers.TimersDescriptionAttribute.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Timers.TimersDescriptionAttribute" />.</summary>
      <param name="description">A descrição a usar.</param>
    </member>
    <member name="P:System.Timers.TimersDescriptionAttribute.Description">
      <summary>Define a descrição que os designers visuais podem exibir ao referenciar um evento, um extensor ou uma propriedade.</summary>
      <returns>A descrição do evento, do extensor ou da propriedade.</returns>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary>Converte um tipo <see cref="T:System.String" /> para um tipo <see cref="T:System.Uri" /> e vice-versa.</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.UriTypeConverter" />.</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retorna se este conversor pode converter um objeto do tipo indicado para o tipo deste conversor.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="sourceType">Um <see cref="T:System.Type" /> que representa o tipo do qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se <paramref name="sourceType" /> for um tipo <see cref="T:System.String" /> ou um tipo <see cref="T:System.Uri" /> puder ser atribuído de <paramref name="sourceType" />; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="sourceType" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Retorna se esse conversor pode converter o objeto para o tipo especificado, usando o contexto especificado.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="destinationType">Um <see cref="T:System.Type" /> que representa o tipo para o qual você deseja converter.</param>
      <returns>
        <see langword="true" /> se <paramref name="destinationType" /> for do tipo <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />, <see cref="T:System.String" /> ou <see cref="T:System.Uri" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converte o objeto determinado para o tipo deste conversor, usando as informações de contexto e de cultura especificadas.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> para ser usada como a cultura atual.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converte um objeto de valor determinado no tipo especificado usando as informações de contexto e de cultura especificadas.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="culture">Um <see cref="T:System.Globalization.CultureInfo" />. Se <see langword="null" /> for passado, a cultura atual será considerada.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser convertido.</param>
      <param name="destinationType">O <see cref="T:System.Type" /> para converter o parâmetro <paramref name="value" />.</param>
      <returns>Um <see cref="T:System.Object" /> que representa o valor convertido.</returns>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="destinationType" /> é <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">A conversão não pode ser executada.</exception>
    </member>
    <member name="M:System.UriTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>Retorna se o objeto de valor especificado é um <see cref="T:System.Uri" /> ou um <see cref="T:System.Uri" /> pode ser criado com base nele.</summary>
      <param name="context">Um <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> que fornece um contexto de formato.</param>
      <param name="value">O <see cref="T:System.Object" /> para testar a validade.</param>
      <returns>
        <see langword="true" /> se <paramref name="value" /> for um <see cref="T:System.Uri" /> ou um <see cref="T:System.String" /> do qual um <see cref="T:System.Uri" /> pode ser criado; caso contrário, <see langword="false" />.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Tasks.Dataflow</name>
  </assembly>
  <members>
    <member name="T:System.Threading.Tasks.Dataflow.ActionBlock`1">
      <summary>Fornece um bloco de fluxo de dados que invoca um delegado <see cref="T:System.Action`1" /> fornecido para cada elemento de dados recebido.</summary>
      <typeparam name="TInput">O tipo de dados que <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> Opera.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> com a ação especificada.</summary>
      <param name="action">A ação a ser invocada com cada elemento de dados recebido.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> com as opções de ação e de configuração especificadas.</summary>
      <param name="action">A ação a ser invocada com cada elemento de dados recebido.</param>
      <param name="dataflowBlockOptions">As opções com as quais este <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> será configurado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> é <see langword="null" />.  

ou - 
<paramref name="dataflowBlockOptions" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> com a ação especificada.</summary>
      <param name="action">A ação a ser invocada com cada elemento de dados recebido.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> com as opções de ação e de configuração especificadas.</summary>
      <param name="action">A ação a ser invocada com cada elemento de dados recebido.</param>
      <param name="dataflowBlockOptions">As opções com as quais este <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> será configurado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> é <see langword="null" />.  

ou - 
<paramref name="dataflowBlockOptions" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Complete">
      <summary>Sinaliza para o bloco de fluxo de dados que ele não deve aceitar nem produzir mais mensagens, e não deve consumir mais mensagens adiadas.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.Completion">
      <summary>Obtém um objeto <see cref="T:System.Threading.Tasks.Task" /> que representa a operação assíncrona e a conclusão do bloco de fluxo de dados.</summary>
      <returns>A tarefa concluída.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.InputCount">
      <summary>Obtém o número de itens de entrada que aguardam o processamento por este bloco.</summary>
      <returns>O número de itens de entrada aguardando para serem processados por este bloco.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Post(`0)">
      <summary>Publica um item para o bloco de fluxo de dados de destino.</summary>
      <param name="item">O item que está sendo oferecido para o destino.</param>
      <returns>
        <see langword="true" /> se o item for publicado no bloco de fluxo de dados; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Faz com que o bloco de fluxo de dados seja concluído em um estado com falha.</summary>
      <param name="exception">A exceção que causou a falha.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Oferece uma mensagem para o bloco de fluxo de dados, que fornece a oportunidade de consumir ou adiar a mensagem.</summary>
      <param name="messageHeader">O cabeçalho da mensagem que está sendo oferecida.</param>
      <param name="messageValue">O valor da mensagem que está sendo oferecida.</param>
      <param name="source">O bloco de fluxo de dados que está oferecendo a mensagem. Isso pode ser <see langword="null" />.</param>
      <param name="consumeToAccept">
        <see langword="true" /> para instruir o destino a chamar <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de forma síncrona durante a chamada para <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, antes de retornar <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />, para consumir a mensagem; caso contrário, <see langword="false" />.</param>
      <returns>O status da mensagem oferecida.  Se a mensagem foi aceita pelo destino, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> é retornado e a fonte não deve mais usar a mensagem oferecida, porque agora ela é definida pelo destino. Se a mensagem foi adiada pelo destino, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> é retornado como uma notificação de que o destino pode tentar consumir ou reservar a mensagem mais tarde; enquanto isso, a fonte ainda tem a mensagem e pode oferecê-la aos outros blocos.  
Se o destino teria adiado a mensagem, mas a fonte era <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> é retornado.  
Se o destino tentou aceitar a mensagem, mas a perdeu devido à origem entregá-la para outro destino ou simplesmente descartando-a, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> será retornado.  
Se o destino optou por não aceitar a mensagem, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> é retornado. Se o destino optou por não aceitar a mensagem e nunca aceitar outra mensagem desta fonte, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> é retornado.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> não é válido.  
-ou- <paramref name="consumeToAccept" /> poderá ser <see langword="true" /> somente se receber um <paramref name="source" /> não nulo.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.ToString">
      <summary>Retorna uma cadeia de caracteres que representa o nome formatado desta instância <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Uma cadeia de caracteres que representa o nome formatado desta instância <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchBlock`1">
      <summary>Fornece um bloco de fluxo de dados que processa em lotes entradas em matrizes.</summary>
      <typeparam name="T">Especifica o tipo de dados colocados em lotes.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32)">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> com o tamanho de lote especificado.</summary>
      <param name="batchSize">O número de itens a serem agrupados em um lote.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">O <paramref name="batchSize" /> deve ser positivo.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> com o tamanho de lote especificado, opção de recusa e opções de bloqueio.</summary>
      <param name="batchSize">O número de itens a serem agrupados em um lote.</param>
      <param name="dataflowBlockOptions">As opções com as quais este <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> será configurado.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">O <paramref name="batchSize" /> deve ser positivo.  

ou - 
O <paramref name="batchSize" /> deve ser menor que o valor da opção <see cref="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity" /> se um valor não padrão tiver sido definido.</exception>
      <exception cref="T:System.ArgumentNullException">O <paramref name="dataflowBlockOptions" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize">
      <summary>Obtém o tamanho dos lotes gerados por este <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />.</summary>
      <returns>O tamanho do lote.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.Complete">
      <summary>Sinaliza para o <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> que ele não deve aceitar nem produzir mais mensagens, e não deve consumir mais mensagens adiadas.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.Completion">
      <summary>Obtém um <see cref="T:System.Threading.Tasks.Task" /> que representa a operação assíncrona e a conclusão do bloco de fluxo de dados.</summary>
      <returns>A tarefa.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0[]},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Vincula o <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> ao <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> especificado.</summary>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> ao qual essa fonte será conectada.</param>
      <param name="linkOptions">Uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> que configura o link.</param>
      <returns>Um IDisposable que, após chamar Dispose, desvinculará a origem do destino.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> é nulo (Nothing no Visual Basic) ou <paramref name="linkOptions" /> é nulo (Nothing no Visual Basic).</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.OutputCount">
      <summary>Obtém o número de itens de saída disponíveis para serem recebidos deste bloco.</summary>
      <returns>O número de itens de saída.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Faz com que o <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> seja concluído em um estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">O <see cref="T:System.Exception" /> que causou a falha.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="exception" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]},System.Boolean@)">
      <summary>Chamado por um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculado para aceitar e consumir um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> anteriormente oferecido por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem que é consumida.</param>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que consome a mensagem.</param>
      <param name="messageConsumed">
        <see langword="true" /> se a mensagem foi consumida com êxito; caso contrário, <see langword="false" />.</param>
      <returns>O valor da mensagem consumida. Isso pode corresponder a uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> diferente que foi reservada anteriormente e passada como o <paramref name="messageHeader" /> para <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> de consumo deve usar o valor retornado em vez do valor passado como messageValue por meio de <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.  
Se a mensagem solicitada não estiver disponível, o valor retornado será <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
      <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]})">
      <summary>Chamado por um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculado para liberar um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> reservado anteriormente por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem reservada que é liberada.</param>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que libera a mensagem reservada anteriormente.</param>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
      <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">O <paramref name="target" /> não tinha a mensagem reservada.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]})">
      <summary>Chamado por um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculado para reservar um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> oferecido anteriormente por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem que é reservada.</param>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que reserva a mensagem.</param>
      <returns>
        <see langword="true" /> se a mensagem foi reservada com êxito; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
      <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Oferece uma mensagem para o <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, que fornece ao destino a oportunidade de consumir ou adiar a mensagem.</summary>
      <param name="messageHeader">Uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> que representa o cabeçalho da mensagem que está sendo oferecida.</param>
      <param name="messageValue">O valor da mensagem que está sendo oferecida.</param>
      <param name="source">O <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> que oferece a mensagem. Isso pode ser nulo.</param>
      <param name="consumeToAccept">Definido como <see langword="true" /> para instruir o destino a chamar <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de forma síncrona durante a chamada para <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, antes de retornar <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />, para consumir a mensagem.</param>
      <returns>O status da mensagem oferecida. Se a mensagem foi aceita pelo destino, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> é retornado e a fonte não deve mais usar a mensagem oferecida, porque agora ela é definida pelo destino. Se a mensagem foi adiada pelo destino, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> é retornado como uma notificação de que o destino pode tentar consumir ou reservar a mensagem mais tarde; enquanto isso, a fonte ainda tem a mensagem e pode oferecê-la aos outros blocos.  
Se o destino teria adiado a mensagem, mas <paramref name="source" /> era <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> é retornado em vez disso.  
Se o destino tentou aceitar a mensagem, mas a perdeu devido à origem entregá-la para outro destino ou simplesmente descartando-a, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> será retornado.  
Se o destino optou por não aceitar a mensagem, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> é retornado. Se o destino optou por não aceitar a mensagem e nunca aceitar outra mensagem desta fonte, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> é retornado.</returns>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.  
-ou- <paramref name="consumeToAccept" /> poderá ser verdadeiro somente se receber um <paramref name="source" /> não nulo.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.ToString">
      <summary>Retorna uma cadeia de caracteres que representa o nome formatado desta instância <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Uma cadeia de caracteres que representa o nome formatado desta instância <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TriggerBatch">
      <summary>Dispara o <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> para iniciar uma operação de envio em lote, mesmo se o número de itens atualmente na fila ou adiados for menor do que o <see cref="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceive(System.Predicate{`0[]},`0[]@)">
      <summary>Tentativas de receber assincronamente um item de saída disponível do <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">O predicado que um valor precisa passar com êxito para ser recebido.  <paramref name="filter" /> pode ser <see langword="null" />, caso em que todos os itens passarão.</param>
      <param name="item">O item recebido da origem.</param>
      <returns>
        <see langword="true" /> se foi possível receber um item; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0[]}@)">
      <summary>Tentativas de receber assincronamente todos os itens disponíveis do <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Os itens recebidos da origem.</param>
      <returns>
        <see langword="true" /> se foi possível receber um ou mais itens; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2">
      <summary>Fornece um bloco de fluxo de dados que processa em lotes um número especificado de entradas de possíveis tipos diferentes fornecidos a um ou mais de seus destinos.</summary>
      <typeparam name="T1">Especifica o tipo de dados aceitos pelo primeiro de destino do bloco.</typeparam>
      <typeparam name="T2">Especifica o tipo de dados aceitos por segundo de destino do bloco.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32)">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> com a configuração especificada.</summary>
      <param name="batchSize">O número de itens a serem agrupados em um lote.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">O <paramref name="batchSize" /> deve ser positivo.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> com a configuração especificada.</summary>
      <param name="batchSize">O número de itens a serem agrupados em um lote.</param>
      <param name="dataflowBlockOptions">As opções com as quais este <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> será configurado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="batchSize" /> é menor que um.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.BatchSize">
      <summary>Obtém o tamanho dos lotes gerados por este <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />.</summary>
      <returns>O tamanho do lote.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Complete">
      <summary>Sinaliza para o <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> que ele não deve aceitar nem produzir mais mensagens, e não deve consumir mais mensagens adiadas.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Completion">
      <summary>Obtém um <see cref="T:System.Threading.Tasks.Task" /> que representa a operação assíncrona e a conclusão do bloco de fluxo de dados.</summary>
      <returns>A tarefa.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Vincula o <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> ao <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> especificado.</summary>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> ao qual essa fonte será conectada.</param>
      <param name="linkOptions">Uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> que configura o link.</param>
      <returns>Um IDisposable que, após chamar Dispose, desvinculará a origem do destino.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> é nulo (Nothing no Visual Basic) ou <paramref name="linkOptions" /> é nulo (Nothing no Visual Basic).</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.OutputCount">
      <summary>Obtém o número de itens de saída disponíveis para serem recebidos deste bloco.</summary>
      <returns>O número de itens de saída.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Faz com que o <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> seja concluído em um estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">O <see cref="T:System.Exception" /> que causou a falha.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="exception" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Boolean@)">
      <param name="messageHeader" />
      <param name="target" />
      <param name="messageConsumed" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Target1">
      <summary>Obtém um destino que pode ser usado para oferecer mensagens do primeiro tipo.</summary>
      <returns>O destino.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Target2">
      <summary>Obtém um destino que pode ser usado para oferecer mensagens do segundo tipo.</summary>
      <returns>O destino.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.ToString">
      <summary>Retorna uma cadeia de caracteres que representa o nome formatado desta instância <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Uma cadeia de caracteres que representa o nome formatado desta instância <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}@)">
      <summary>Tentativas de receber assincronamente um item de saída disponível do <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">O predicado que um valor precisa passar com êxito para ser recebido.  <paramref name="filter" /> pode ser <see langword="null" />, caso em que todos os itens passarão.</param>
      <param name="item">O item recebido da origem.</param>
      <returns>
        <see langword="true" /> se foi possível receber um item; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}}@)">
      <summary>Tentativas de receber assincronamente todos os itens disponíveis do <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Os itens recebidos da origem.</param>
      <returns>
        <see langword="true" /> se foi possível receber um ou mais itens; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3">
      <summary>Fornece um bloco de fluxo de dados que processa em lotes um número especificado de entradas de possíveis tipos diferentes fornecidos a um ou mais de seus destinos.</summary>
      <typeparam name="T1">Especifica o tipo de dados aceitos pelo primeiro de destino do bloco.</typeparam>
      <typeparam name="T2">Especifica o tipo de dados aceitos por segundo de destino do bloco.</typeparam>
      <typeparam name="T3">Especifica o tipo de dados aceitos pelo destino de terceiro do bloco.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32)">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" /> com a configuração especificada.</summary>
      <param name="batchSize">O número de itens a serem agrupados em um lote.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">O <paramref name="batchSize" /> deve ser positivo.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" /> com a configuração especificada.</summary>
      <param name="batchSize">O número de itens a serem agrupados em um lote.</param>
      <param name="dataflowBlockOptions">As opções com as quais este <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> será configurado.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">O <paramref name="batchSize" /> deve ser positivo.</exception>
      <exception cref="T:System.ArgumentNullException">O <paramref name="dataflowBlockOptions" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.BatchSize">
      <summary>Obtém o tamanho dos lotes gerados por este <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" />.</summary>
      <returns>O tamanho do lote.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Complete">
      <summary>Sinaliza para o <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> que ele não deve aceitar nem produzir mais mensagens, e não deve consumir mais mensagens adiadas.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Completion">
      <summary>Obtém um <see cref="T:System.Threading.Tasks.Task" /> que representa a operação assíncrona e a conclusão do bloco de fluxo de dados.</summary>
      <returns>A tarefa.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Vincula o <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> ao <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> especificado.</summary>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> ao qual essa fonte será conectada.</param>
      <param name="linkOptions">
        <see langword="true" /> se a origem deverá desvincular-se do destino após a propagação com êxito de uma única mensagem; <see langword="false" /> para permanecer conectado mesmo depois de uma única mensagem ter sido propagada.</param>
      <returns>Um IDisposable que, após chamar Dispose, desvinculará a origem do destino.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> é nulo (Nothing no Visual Basic) ou <paramref name="linkOptions" /> é nulo (Nothing no Visual Basic).</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.OutputCount">
      <summary>Obtém o número de itens de saída disponíveis para serem recebidos deste bloco.</summary>
      <returns>O número de itens de saída.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Faz com que o <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> seja concluído em um estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">O <see cref="T:System.Exception" /> que causou a falha.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="exception" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Boolean@)">
      <param name="messageHeader" />
      <param name="target" />
      <param name="messageConsumed" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target1">
      <summary>Obtém um destino que pode ser usado para oferecer mensagens do primeiro tipo.</summary>
      <returns>O destino.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target2">
      <summary>Obtém um destino que pode ser usado para oferecer mensagens do segundo tipo.</summary>
      <returns>O destino.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target3">
      <summary>Obtém um destino que pode ser usado para oferecer mensagens do terceiro tipo.</summary>
      <returns>O destino.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.ToString">
      <summary>Retorna uma cadeia de caracteres que representa o nome formatado desta instância <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Uma cadeia de caracteres que representa o nome formatado desta instância <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}@)">
      <summary>Tentativas de receber assincronamente um item de saída disponível do <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">O predicado que um valor precisa passar com êxito para ser recebido.  <paramref name="filter" /> pode ser <see langword="null" />, caso em que todos os itens passarão.</param>
      <param name="item">O item recebido da origem.</param>
      <returns>
        <see langword="true" /> se foi possível receber um item; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}}@)">
      <summary>Tentativas de receber assincronamente todos os itens disponíveis do <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Os itens recebidos da origem.</param>
      <returns>
        <see langword="true" /> se foi possível receber um ou mais itens; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1">
      <summary>Fornece um buffer para armazenar no máximo um elemento de cada vez, substituindo cada mensagem pela seguinte à medida que elas chegam.</summary>
      <typeparam name="T">Especifica o tipo dos dados armazenados em buffer por este bloco de fluxo de data.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0})">
      <summary>Inicializa o <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /> com a função de clonagem especificada.</summary>
      <param name="cloningFunction">A função a ser usada para clonar os dados oferecidos a outros blocos.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Inicializa o <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /> com a função de clonagem especificada e <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />.</summary>
      <param name="cloningFunction">A função a ser usada para clonar os dados oferecidos a outros blocos.</param>
      <param name="dataflowBlockOptions">As opções com as quais este <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /> será configurado.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="dataflowBlockOptions" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Complete">
      <summary>Sinaliza para o <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> que ele não deve aceitar nem produzir mais mensagens, e não deve consumir mais mensagens adiadas.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Completion">
      <summary>Obtém um <see cref="T:System.Threading.Tasks.Task" /> que representa a operação assíncrona e a conclusão do bloco de fluxo de dados.</summary>
      <returns>A tarefa.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Vincula o <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> ao <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> especificado.</summary>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> ao qual essa fonte será conectada.</param>
      <param name="linkOptions">Uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> que configura o link.</param>
      <returns>Um IDisposable que, após chamar Dispose, desvinculará a origem do destino.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> é nulo (Nothing no Visual Basic) ou <paramref name="linkOptions" /> é nulo (Nothing no Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Faz com que o <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> seja concluído em um estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">O <see cref="T:System.Exception" /> que causou a falha.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="exception" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock{T}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>Tentativas de receber assincronamente todos os itens disponíveis do <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Os itens recebidos da origem.</param>
      <returns>
        <see langword="true" /> se foi possível receber um ou mais itens; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>Chamado por um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculado para aceitar e consumir um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> anteriormente oferecido por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem que é consumida.</param>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que consome a mensagem.</param>
      <param name="messageConsumed">
        <see langword="true" /> se a mensagem foi consumida com êxito; caso contrário, <see langword="false" />.</param>
      <returns>O valor da mensagem consumida. Isso pode corresponder a uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> diferente que foi reservada anteriormente e passada como o <paramref name="messageHeader" /> para <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> de consumo deve usar o valor retornado em vez do valor passado como <paramref name="messageValue" /> por meio de <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.  
Se a mensagem solicitada não estiver disponível, o valor retornado será <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
      <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Chamado por um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculado para liberar um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> reservado anteriormente por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem reservada que é liberada.</param>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que libera a mensagem reservada anteriormente.</param>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
      <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">O <paramref name="target" /> não tinha a mensagem reservada.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Chamado por um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculado para reservar um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> oferecido anteriormente por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem que é reservada.</param>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que reserva a mensagem.</param>
      <returns>
        <see langword="true" /> se a mensagem foi reservada com êxito; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
      <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Oferece uma mensagem para o <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, que fornece ao destino a oportunidade de consumir ou adiar a mensagem.</summary>
      <param name="messageHeader">Uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> que representa o cabeçalho da mensagem que está sendo oferecida.</param>
      <param name="messageValue">O valor da mensagem que está sendo oferecida.</param>
      <param name="source">O <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> que oferece a mensagem. Isso pode ser nulo.</param>
      <param name="consumeToAccept">Definido como <see langword="true" /> para instruir o destino a chamar <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de forma síncrona durante a chamada para <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, antes de retornar <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />, para consumir a mensagem.</param>
      <returns>O status da mensagem oferecida. Se a mensagem foi aceita pelo destino, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> é retornado e a fonte não deve mais usar a mensagem oferecida, porque agora ela é definida pelo destino. Se a mensagem foi adiada pelo destino, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> é retornado como uma notificação de que o destino pode tentar consumir ou reservar a mensagem mais tarde; enquanto isso, a fonte ainda tem a mensagem e pode oferecê-la aos outros blocos.  
Se o destino teria adiado a mensagem, mas <paramref name="source" /> era <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> é retornado em vez disso.  
Se o destino tentou aceitar a mensagem, mas a perdeu devido à origem entregá-la para outro destino ou simplesmente descartando-a, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> será retornado.  
Se o destino optou por não aceitar a mensagem, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> é retornado. Se o destino optou por não aceitar a mensagem e nunca aceitar outra mensagem desta fonte, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> é retornado.</returns>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.  
-ou- <paramref name="consumeToAccept" /> poderá ser verdadeiro somente se receber um <paramref name="source" /> não nulo.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.ToString">
      <summary>Retorna uma cadeia de caracteres que representa o nome formatado desta instância <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Uma cadeia de caracteres que representa o nome formatado desta instância <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>Tentativas de receber assincronamente um item de saída disponível do <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">O predicado que um valor precisa passar com êxito para ser recebido.  <paramref name="filter" /> pode ser <see langword="null" />, caso em que todos os itens passarão.</param>
      <param name="item">O item recebido da origem.</param>
      <returns>
        <see langword="true" /> se foi possível receber um item; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BufferBlock`1">
      <summary>Fornece um buffer para armazenar dados para um Fluxo de dados.</summary>
      <typeparam name="T">Especifica o tipo dos dados armazenados em buffer por este bloco de fluxo de data.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor(System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" /> com o <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> especificado.</summary>
      <param name="dataflowBlockOptions">As opções com as quais este <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" /> será configurado.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="dataflowBlockOptions" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.Complete">
      <summary>Sinaliza para o <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> que ele não deve aceitar nem produzir mais mensagens, e não deve consumir mais mensagens adiadas.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.Completion">
      <summary>Obtém um <see cref="T:System.Threading.Tasks.Task" /> que representa a operação assíncrona e a conclusão do bloco de fluxo de dados.</summary>
      <returns>A tarefa.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.Count">
      <summary>Obtém o número de itens armazenados no buffer no momento.</summary>
      <returns>O número de itens.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Vincula o <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> ao <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> especificado.</summary>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> ao qual essa fonte será conectada.</param>
      <param name="linkOptions">Uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> que configura o link.</param>
      <returns>Um IDisposable que, após chamar Dispose, desvinculará a origem do destino.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> é nulo (Nothing no Visual Basic) ou <paramref name="linkOptions" /> é nulo (Nothing no Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Faz com que o <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> seja concluído em um estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">O <see cref="T:System.Exception" /> que causou a falha.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="exception" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>Chamado por um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculado para aceitar e consumir um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> anteriormente oferecido por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem que é consumida.</param>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que consome a mensagem.</param>
      <param name="messageConsumed">
        <see langword="true" /> se a mensagem foi consumida com êxito; caso contrário, <see langword="false" />.</param>
      <returns>O valor da mensagem consumida. Isso pode corresponder a uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> diferente que foi reservada anteriormente e passada como o <paramref name="messageHeader" /> para <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> de consumo deve usar o valor retornado em vez do valor passado como <paramref name="messageValue" /> por meio de <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.  
Se a mensagem solicitada não estiver disponível, o valor retornado será <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
      <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Chamado por um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculado para liberar um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> reservado anteriormente por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem reservada que é liberada.</param>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que libera a mensagem reservada anteriormente.</param>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
      <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">O <paramref name="target" /> não tinha a mensagem reservada.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Chamado por um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculado para reservar um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> oferecido anteriormente por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem que é reservada.</param>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que reserva a mensagem.</param>
      <returns>
        <see langword="true" /> se a mensagem foi reservada com êxito; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
      <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Oferece uma mensagem para o <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, que fornece ao destino a oportunidade de consumir ou adiar a mensagem.</summary>
      <param name="messageHeader">Uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> que representa o cabeçalho da mensagem que está sendo oferecida.</param>
      <param name="messageValue">O valor da mensagem que está sendo oferecida.</param>
      <param name="source">O <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> que oferece a mensagem. Isso pode ser <see langword="null" />.</param>
      <param name="consumeToAccept">Definido como verdadeiro para instruir o destino a chamar <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de forma síncrona durante a chamada para <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, antes de retornar <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />, para consumir a mensagem.</param>
      <returns>O status da mensagem oferecida. Se a mensagem foi aceita pelo destino, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> é retornado e a fonte não deve mais usar a mensagem oferecida, porque agora ela é definida pelo destino. Se a mensagem foi adiada pelo destino, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> é retornado como uma notificação de que o destino pode tentar consumir ou reservar a mensagem mais tarde; enquanto isso, a fonte ainda tem a mensagem e pode oferecê-la aos outros blocos.  
Se o destino teria adiado a mensagem, mas <paramref name="source" /> era <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> é retornado em vez disso.  
Se o destino tentou aceitar a mensagem, mas a perdeu devido à origem entregá-la para outro destino ou simplesmente descartando-a, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> será retornado.  
Se o destino optou por não aceitar a mensagem, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> é retornado. Se o destino optou por não aceitar a mensagem e nunca aceitar outra mensagem desta fonte, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> é retornado.</returns>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.  
-ou- <paramref name="consumeToAccept" /> poderá ser verdadeiro somente se receber um <paramref name="source" /> não nulo.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.ToString">
      <summary>Retorna uma cadeia de caracteres que representa o nome formatado desta instância <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Uma cadeia de caracteres que representa o nome formatado desta instância <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>Tentativas de receber assincronamente um item de saída disponível do <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">O valor de predicado deve ser passado com êxito para ser recebido. <paramref name="filter" /> pode ser <see langword="null" />, caso em que todos os itens passarão.</param>
      <param name="item">O item recebido da origem.</param>
      <returns>
        <see langword="true" /> se foi possível receber um item; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>Tentativas de receber assincronamente todos os itens disponíveis do <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Os itens recebidos da origem.</param>
      <returns>
        <see langword="true" /> se foi possível receber um ou mais itens; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowBlock">
      <summary>Fornece um conjunto de métodos estáticos (compartilhado no Visual Basic) para trabalhar com blocos de fluxo de dados.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>Cria uma nova abstração <see cref="T:System.IObservable`1" /> em relação a <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="source">A origem a ser encapsulada.</param>
      <typeparam name="TOutput">Especifica o tipo de dados contidos na origem.</typeparam>
      <returns>Um <see cref="T:System.IObservable`1" /> que permite aos observadores serem inscrito na origem.</returns>
      <exception cref="T:System.ArgumentNullException">O <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
      <summary>Cria uma nova abstração <see cref="T:System.IObserver`1" /> em relação a <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <param name="target">O destino a ser encapsulado.</param>
      <typeparam name="TInput">Especifica o tipo de entrada aceita pelo bloco de destino.</typeparam>
      <returns>Um observador que encapsula o bloco de destino.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})">
      <summary>Monitora duas fontes de fluxo de dados, invocando o manipulador fornecido para a fonte que disponibilizar os dados primeiro.</summary>
      <param name="source1">A primeira origem.</param>
      <param name="action1">O manipulador a ser executado nos dados da primeira origem.</param>
      <param name="source2">A segunda origem.</param>
      <param name="action2">O manipulador a ser executado nos dados da segunda origem.</param>
      <typeparam name="T1">Especifica o tipo de dados contidos na primeira origem.</typeparam>
      <typeparam name="T2">Especifica o tipo de dados contidos na segunda fonte.</typeparam>
      <returns>Um <see cref="T:System.Threading.Tasks.Task`1" /> que representa a escolha assíncrona. Se ambas as fontes forem concluídas antes de concluir a opção, a tarefa resultante será cancelada. Quando uma das fontes tem dados disponíveis e os propaga com êxito para a escolha, a tarefa resultante será concluída quando o manipulador for concluído; se o manipulador gerar uma exceção, a tarefa terminará no estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> e conterá a exceção sem tratamento. Caso contrário, a tarefa será finalizada com seu <see cref="P:System.Threading.Tasks.Task`1.Result" /> definido como 0 ou 1 para representar a primeira ou segunda fonte, respectivamente.  
Esse método só consumirá um elemento de uma das duas fontes de dados, nunca de ambas.</returns>
      <exception cref="T:System.ArgumentNullException">O <paramref name="source1" /> é <see langword="null" />.  

ou - 
O <paramref name="action1" /> é <see langword="null" />.  

ou - 
O <paramref name="source2" /> é <see langword="null" />.  

ou - 
O <paramref name="action2" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Monitora duas fontes de fluxo de dados, invocando o manipulador fornecido para a fonte que disponibilizar os dados primeiro.</summary>
      <param name="source1">A primeira origem.</param>
      <param name="action1">O manipulador a ser executado nos dados da primeira origem.</param>
      <param name="source2">A segunda origem.</param>
      <param name="action2">O manipulador a ser executado nos dados da segunda origem.</param>
      <param name="dataflowBlockOptions">As opções com as quais esta escolha será configurada.</param>
      <typeparam name="T1">Especifica o tipo de dados contidos na primeira origem.</typeparam>
      <typeparam name="T2">Especifica o tipo de dados contidos na segunda fonte.</typeparam>
      <returns>Um <see cref="T:System.Threading.Tasks.Task`1" /> que representa a escolha assíncrona. Se ambas as fontes forem concluídas antes de concluir a opção ou, se o <see cref="T:System.Threading.CancellationToken" /> fornecido como parte do <paramref name="dataflowBlockOptions" /> foi cancelado antes de concluir a opção, a tarefa resultante será cancelada. Quando uma das fontes tem dados disponíveis e os propaga com êxito para a escolha, a tarefa resultante será concluída quando o manipulador for concluído; se o manipulador gerar uma exceção, a tarefa terminará no estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> e conterá a exceção sem tratamento. Caso contrário, a tarefa será finalizada com seu <see cref="P:System.Threading.Tasks.Task`1.Result" /> definido como 0 ou 1 para representar a primeira ou segunda fonte, respectivamente.</returns>
      <exception cref="T:System.ArgumentNullException">O <paramref name="source1" /> é <see langword="null" />.  

ou - 
O <paramref name="action1" /> é <see langword="null" />.  

ou - 
O <paramref name="source2" /> é <see langword="null" />.  

ou - 
O <paramref name="action2" /> é <see langword="null" />.  

ou - 
O <paramref name="dataflowBlockOptions" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})">
      <summary>Monitora as três fontes de fluxo de dados, invocando o manipulador fornecido para a fonte que disponibilizar os dados primeiro.</summary>
      <param name="source1">A primeira origem.</param>
      <param name="action1">O manipulador a ser executado nos dados da primeira origem.</param>
      <param name="source2">A segunda origem.</param>
      <param name="action2">O manipulador a ser executado nos dados da segunda origem.</param>
      <param name="source3">A terceira origem.</param>
      <param name="action3">O manipulador a ser executado nos dados da terceira origem.</param>
      <typeparam name="T1">Especifica o tipo de dados contidos na primeira origem.</typeparam>
      <typeparam name="T2">Especifica o tipo de dados contidos na segunda fonte.</typeparam>
      <typeparam name="T3">Especifica o tipo de dados contidos na terceira fonte.</typeparam>
      <returns>Um <see cref="T:System.Threading.Tasks.Task`1" /> que representa a escolha assíncrona. Se todas as fontes forem concluídas antes de concluir a opção, a tarefa resultante será cancelada. Quando uma das fontes tem dados disponíveis e os propaga com êxito para a escolha, a tarefa resultante será concluída quando o manipulador for concluído; se o manipulador gerar uma exceção, a tarefa terminará no estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> e conterá a exceção sem tratamento. Caso contrário, a tarefa terminará com a seu <see cref="P:System.Threading.Tasks.Task`1.Result" /> definido para o índice de base 0 da origem.  
Esse método só consumirá um elemento de uma das fontes de dados, nunca mais de uma.</returns>
      <exception cref="T:System.ArgumentNullException">O <paramref name="source1" /> é <see langword="null" />.  

ou - 
O <paramref name="action1" /> é <see langword="null" />.  

ou - 
O <paramref name="source2" /> é <see langword="null" />.  

ou - 
O <paramref name="action2" /> é <see langword="null" />.  

ou - 
O <paramref name="source3" /> é <see langword="null" />.  

ou - 
O <paramref name="action3" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Monitora as três fontes de fluxo de dados, invocando o manipulador fornecido para a fonte que disponibilizar os dados primeiro.</summary>
      <param name="source1">A primeira origem.</param>
      <param name="action1">O manipulador a ser executado nos dados da primeira origem.</param>
      <param name="source2">A segunda origem.</param>
      <param name="action2">O manipulador a ser executado nos dados da segunda origem.</param>
      <param name="source3">A terceira origem.</param>
      <param name="action3">O manipulador a ser executado nos dados da terceira origem.</param>
      <param name="dataflowBlockOptions">As opções com as quais esta escolha será configurada.</param>
      <typeparam name="T1">Especifica o tipo de dados contidos na primeira origem.</typeparam>
      <typeparam name="T2">Especifica o tipo de dados contidos na segunda fonte.</typeparam>
      <typeparam name="T3">Especifica o tipo de dados contidos na terceira fonte.</typeparam>
      <returns>Um <see cref="T:System.Threading.Tasks.Task`1" /> que representa a escolha assíncrona. Se todas as fontes forem concluídas antes de concluir a opção ou, se o <see cref="T:System.Threading.CancellationToken" /> fornecido como parte do <paramref name="dataflowBlockOptions" /> foi cancelado antes de concluir a opção, a tarefa resultante será cancelada. Quando uma das fontes tem dados disponíveis e os propaga com êxito para a escolha, a tarefa resultante será concluída quando o manipulador for concluído; se o manipulador gerar uma exceção, a tarefa terminará no estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> e conterá a exceção sem tratamento. Caso contrário, a tarefa terminará com a seu <see cref="P:System.Threading.Tasks.Task`1.Result" /> definido para o índice de base 0 da origem.  
Esse método só consumirá um elemento de uma das fontes de dados, nunca mais de uma. Se o cancelamento for solicitado após um elemento ser recebido, a solicitação de cancelamento será ignorada e o manipulador relevante terá permissão para executar.</returns>
      <exception cref="T:System.ArgumentNullException">O <paramref name="source1" /> é <see langword="null" />.  

ou - 
O <paramref name="action1" /> é <see langword="null" />.  

ou - 
O <paramref name="source2" /> é <see langword="null" />.  

ou - 
O <paramref name="action2" /> é <see langword="null" />.  

ou - 
O <paramref name="source3" /> é <see langword="null" />.  

ou - 
O <paramref name="action3" /> é <see langword="null" />.  

ou - 
O <paramref name="dataflowBlockOptions" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})">
      <summary>Encapsula um destino e uma origem em um único propagador.</summary>
      <param name="target">O destino a ser encapsulado.</param>
      <param name="source">A origem a ser encapsulada.</param>
      <typeparam name="TInput">Especifica o tipo de entrada esperado pelo destino.</typeparam>
      <typeparam name="TOutput">Especifica o tipo de saída produzida pela origem.</typeparam>
      <returns>O destino e a origem encapsulados.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
      <summary>Vincula o <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> ao <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> especificado.</summary>
      <param name="source">A origem da qual ocorrerá a vinculação.</param>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> ao qual a fonte será conectada.</param>
      <typeparam name="TOutput">Especifica o tipo de dados contidos na origem.</typeparam>
      <returns>Um <see cref="T:System.IDisposable" /> que, após chamar <see langword="Dispose" />, desvinculará a origem do destino.</returns>
      <exception cref="T:System.ArgumentNullException">O <paramref name="source" /> é <see langword="null" />.  

ou - 
O <paramref name="target" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})">
      <summary>Vincula o <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> ao <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> especificado usando o filtro indicado.</summary>
      <param name="source">A origem da qual ocorrerá a vinculação.</param>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> ao qual a fonte será conectada.</param>
      <param name="predicate">O filtro de uma mensagem deve ser passado para ser propagado da origem para o destino.</param>
      <typeparam name="TOutput">Especifica o tipo de dados contidos na origem.</typeparam>
      <returns>Um <see cref="T:System.IDisposable" /> que, após chamar <see langword="Dispose" />, desvinculará a origem do destino.</returns>
      <exception cref="T:System.ArgumentNullException">O <paramref name="source" /> é <see langword="null" />.  

ou - 
O <paramref name="target" /> é <see langword="null" />.  

ou - 
O <paramref name="predicate" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})">
      <summary>Vincula o <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> para o <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> especificado usando o filtro indicado.</summary>
      <param name="source">A origem da qual ocorrerá a vinculação.</param>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> ao qual a fonte será conectada.</param>
      <param name="linkOptions">Um dos valores de enumeração que especifica como configurar um link entre blocos de fluxo de dados.</param>
      <param name="predicate">O filtro de uma mensagem deve ser passado para ser propagado da origem para o destino.</param>
      <typeparam name="TOutput">Especifica o tipo de dados contidos na origem.</typeparam>
      <returns>Um <see cref="T:System.IDisposable" /> que, após chamar <see langword="Dispose" />, desvinculará a origem do destino.</returns>
      <exception cref="T:System.ArgumentNullException">O <paramref name="source" /> é nulo (Nothing no Visual Basic).  

ou - 
O <paramref name="target" /> é nulo (Nothing no Visual Basic).  

ou - 
O <paramref name="linkOptions" /> é nulo (Nothing no Visual Basic).  

ou - 
O <paramref name="predicate" /> é nulo (Nothing no Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1">
      <summary>Obtém um bloco de destino que aceita de forma síncrona todas as mensagens oferecidas a ele e os solta.</summary>
      <typeparam name="TInput">O tipo das mensagens que esse bloco pode aceitar.</typeparam>
      <returns>Um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que aceita e subsequentemente solta todas as mensagens oferecidas.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>Fornece um <see cref="T:System.Threading.Tasks.Task`1" /> que monitora assincronamente a saída disponível na fonte.</summary>
      <param name="source">A origem a ser monitorada.</param>
      <typeparam name="TOutput">Especifica o tipo de dados contidos na origem.</typeparam>
      <returns>Um <see cref="T:System.Threading.Tasks.Task`1" /> que informa se e quando mais saída mais está disponível. Se, quando a tarefa for concluída, seu <see cref="P:System.Threading.Tasks.Task`1.Result" /> for <see langword="true" />, mais saída estará disponível na origem (embora outro consumidor da origem possa recuperar os dados).  
Se ela retorna <see langword="false" />, mais saída não estará disponível nunca mais, devido à conclusão da fonte antes da saída estar disponível.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary>Fornece um <see cref="T:System.Threading.Tasks.Task`1" /> que monitora assincronamente a fonte de saída disponível.</summary>
      <param name="source">A origem a ser monitorada.</param>
      <param name="cancellationToken">O token de cancelamento com o qual cancelar a operação assíncrona.</param>
      <typeparam name="TOutput">Especifica o tipo de dados contidos na origem.</typeparam>
      <returns>Um <see cref="T:System.Threading.Tasks.Task`1" /> que informa se e quando mais saída mais está disponível. Se, quando a tarefa for concluída, seu <see cref="P:System.Threading.Tasks.Task`1.Result" /> for <see langword="true" />, mais saída estará disponível na origem (embora outro consumidor da origem possa recuperar os dados). Se ela retorna <see langword="false" />, mais saída não estará disponível nunca mais, devido à conclusão da fonte antes da saída estar disponível.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)">
      <summary>Adiciona um item ao <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <param name="target">O bloco de destino.</param>
      <param name="item">O item que está sendo oferecido para o destino.</param>
      <typeparam name="TInput">Especifica o tipo de dados aceito pelo bloco de destino.</typeparam>
      <returns>
        <see langword="true" /> se o item foi aceito pelo bloco de destino; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>Recebe de forma síncrona um valor de uma origem especificada.</summary>
      <param name="source">A origem da qual o valor será recebido.</param>
      <typeparam name="TOutput">O tipo de dados contidos na origem.</typeparam>
      <returns>O valor recebido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Nenhum item pode ser recebido da origem.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary>Recebe de forma síncrona um valor de uma origem especificada e fornece um token para cancelar a operação.</summary>
      <param name="source">A origem da qual o valor será recebido.</param>
      <param name="cancellationToken">O token a ser usado para cancelar a operação de recebimento.</param>
      <typeparam name="TOutput">O tipo de dados contidos na origem.</typeparam>
      <returns>O valor recebido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Nenhum item pode ser recebido da origem.</exception>
      <exception cref="T:System.OperationCanceledException">A operação foi cancelada antes de um item ser recebido da origem.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)">
      <summary>Recebe de forma síncrona um valor de uma origem especificada, observando um período de tempo limite opcional.</summary>
      <param name="source">A origem da qual o valor será recebido.</param>
      <param name="timeout">O intervalo de tempo máximo, em milissegundos, de espera para a operação síncrona ser concluída ou um intervalo que representa -1 milissegundos para aguardar indefinidamente.</param>
      <typeparam name="TOutput">O tipo de dados contidos na origem.</typeparam>
      <returns>O valor recebido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> é um número negativo diferente de -1 milissegundo, que representa um período de tempo limite infinito.  

ou - 
<paramref name="timeout" /> é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Nenhum item pode ser recebido da origem.</exception>
      <exception cref="T:System.TimeoutException">O tempo limite especificado expirou antes de um item ser recebido da origem.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)">
      <summary>Recebe de forma síncrona um valor de uma fonte especificada, fornecendo um token para cancelar a operação e observando um intervalo de tempo limite opcional.</summary>
      <param name="source">A origem da qual o valor será recebido.</param>
      <param name="timeout">O intervalo de tempo máximo, em milissegundos, de espera para a operação síncrona ser concluída ou um intervalo que representa -1 milissegundos para aguardar indefinidamente.</param>
      <param name="cancellationToken">O token a ser usado para cancelar a operação de recebimento.</param>
      <typeparam name="TOutput">O tipo de dados contidos na origem.</typeparam>
      <returns>O valor recebido.</returns>
      <exception cref="T:System.ArgumentNullException">O <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> é um número negativo diferente de -1 milissegundo, que representa um período de tempo limite infinito.  

ou - 
<paramref name="timeout" /> é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.InvalidOperationException">Nenhum item pode ser recebido da origem.</exception>
      <exception cref="T:System.TimeoutException">O tempo limite especificado expirou antes de um item ser recebido da origem.</exception>
      <exception cref="T:System.OperationCanceledException">A operação foi cancelada antes de um item ser recebido da origem.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>Recebe assincronamente um valor de uma origem especificada.</summary>
      <param name="source">A origem da qual o valor será recebido.</param>
      <typeparam name="TOutput">O tipo de dados contidos na origem.</typeparam>
      <returns>Uma tarefa que representa a operação de recebimento assíncrona. Quando um valor de item é recebido com êxito da origem, a tarefa retornada é concluída e seu <see cref="P:System.Threading.Tasks.Task`1.Result" /> retorna o valor recebido. Se um valor do item não puder ser recuperado porque a fonte está vazia e concluída, uma exceção <see cref="T:System.InvalidOperationException" /> será gerada na tarefa retornada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary>Recebe assincronamente um valor de uma origem especificada e fornece um token para cancelar a operação.</summary>
      <param name="source">A origem da qual o valor será recebido.</param>
      <param name="cancellationToken">O token a ser usado para cancelar a operação de recebimento.</param>
      <typeparam name="TOutput">Especifica o tipo de dados contidos na origem.</typeparam>
      <returns>Uma tarefa que representa a operação de recebimento assíncrona. Quando um valor é recebido com êxito da origem, a tarefa retornada é concluída e seu <see cref="P:System.Threading.Tasks.Task`1.Result" /> retorna o valor. Se um valor não puder ser recuperado porque o cancelamento foi solicitado, a tarefa retornada será cancelada. Se o valor não puder ser recuperado porque a fonte está vazia e concluída, uma exceção <see cref="T:System.InvalidOperationException" /> será gerada na tarefa retornada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)">
      <summary>Recebe assincronamente um valor de uma origem especificada, observando um período de tempo limite opcional.</summary>
      <param name="source">A origem da qual o valor será recebido.</param>
      <param name="timeout">O intervalo de tempo máximo, em milissegundos, de espera para a operação síncrona ser concluída ou um intervalo que representa -1 milissegundos para aguardar indefinidamente.</param>
      <typeparam name="TOutput">O tipo de dados contidos na origem.</typeparam>
      <returns>Uma tarefa que representa a operação de recebimento assíncrona. Quando um valor é recebido com êxito da origem, a tarefa retornada é concluída e seu <see cref="P:System.Threading.Tasks.Task`1.Result" /> retorna o valor. Se um valor não puder ser recuperado porque o tempo limite expirou, a tarefa retornada será cancelada. Se o valor não puder ser recuperado porque a fonte está vazia e concluída, uma exceção <see cref="T:System.InvalidOperationException" /> será gerada na tarefa retornada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> é um número negativo diferente de -1 milissegundo, que representa um período de tempo limite infinito.  

ou - 
<paramref name="timeout" /> é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)">
      <summary>Recebe assincronamente um valor de uma fonte especificada, fornecendo um token para cancelar a operação e observando um intervalo de tempo limite opcional.</summary>
      <param name="source">A origem da qual o valor será recebido.</param>
      <param name="timeout">O intervalo de tempo máximo, em milissegundos, de espera para a operação síncrona ser concluída ou um intervalo que representa -1 milissegundos para aguardar indefinidamente.</param>
      <param name="cancellationToken">O token que pode ser usado para cancelar a operação de recebimento.</param>
      <typeparam name="TOutput">O tipo de dados contidos na origem.</typeparam>
      <returns>Uma tarefa que representa a operação de recebimento assíncrona. Quando um valor é recebido com êxito da origem, a tarefa retornada é concluída e seu <see cref="P:System.Threading.Tasks.Task`1.Result" /> retorna o valor. Se um valor não puder ser recuperado porque o tempo limite expirou ou o cancelamento foi solicitado, a tarefa retornada será cancelada. Se o valor não puder ser recuperado porque a fonte está vazia e concluída, uma exceção <see cref="T:System.InvalidOperationException" /> será gerada na tarefa retornada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> é um número negativo diferente de -1 milissegundo, que representa um período de tempo limite infinito.  

ou - 
<paramref name="timeout" /> é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)">
      <summary>Oferece assincronamente uma mensagem para o bloco de mensagens de destino, permitindo adiamento.</summary>
      <param name="target">O destino no qual os dados serão publicados.</param>
      <param name="item">O item que está sendo oferecido para o destino.</param>
      <typeparam name="TInput">Especifica o tipo dos dados a serem postados no destino.</typeparam>
      <returns>Um <see cref="T:System.Threading.Tasks.Task`1" /> que representa o envio assíncrono. Se o destino aceitar e consumir o elemento oferecido durante a chamada para <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />, após retornar da chamada, o <see cref="T:System.Threading.Tasks.Task`1" /> resultante será concluído e sua propriedade <see cref="P:System.Threading.Tasks.Task`1.Result" /> retornará <see langword="true" />. Se o destino recusar o elemento oferecido durante a chamada, após retornar da chamada, o <see cref="T:System.Threading.Tasks.Task`1" /> resultante será concluído e sua propriedade <see cref="P:System.Threading.Tasks.Task`1.Result" /> retornará <see langword="false" />. Se o destino adiar o elemento oferecido, este será armazenado em buffer até o momento em que o destino o consumir ou liberar, quando então a tarefa estará concluída, com seu <see cref="P:System.Threading.Tasks.Task`1.Result" /> indicando se a mensagem foi consumida. Se o destino nunca tentar consumir ou liberar a mensagem, a tarefa retornada nunca será concluída.</returns>
      <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)">
      <summary>Oferece assincronamente uma mensagem para o bloco de mensagens de destino, permitindo adiamento.</summary>
      <param name="target">O destino no qual os dados serão publicados.</param>
      <param name="item">O item que está sendo oferecido para o destino.</param>
      <param name="cancellationToken">O token de cancelamento com o qual solicitar o cancelamento da operação de envio.</param>
      <typeparam name="TInput">Especifica o tipo dos dados a serem postados no destino.</typeparam>
      <returns>Um <see cref="T:System.Threading.Tasks.Task`1" /> que representa o envio assíncrono.  Se o destino aceitar e consumir o elemento oferecido durante a chamada para SendAsync, após retornar da chamada, o <see cref="T:System.Threading.Tasks.Task`1" /> resultante será concluído e sua propriedade <c>Resultado</c> retornará verdadeiro.  Se o destino recusar o elemento oferecido durante a chamada, após retornar da chamada, o <see cref="T:System.Threading.Tasks.Task`1" /> resultante será concluído e sua propriedade <c>Resultado</c> retornará falso. Se o destino adiar o elemento oferecido, este será armazenado em buffer até o momento em que o destino o consumir ou liberar, quando então a tarefa estará concluída, com seu <c>Resultado</c> indicando se a mensagem foi consumida. Se o destino nunca tentar consumir ou liberar a mensagem, a tarefa retornada nunca será concluída.  
Se o cancelamento for solicitado antes do destino ter consumido com êxito os dados enviados, a tarefa retornada será concluída no estado Cancelado e os dados não estarão mais disponíveis para o destino.</returns>
      <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é nulo (Nothing no Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)">
      <summary>Tentativas de receber assincronamente um item do <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="source">A origem da qual receber.</param>
      <param name="item">O item recebido da origem.</param>
      <typeparam name="TOutput">Especifica o tipo de dados contidos na origem.</typeparam>
      <returns>
        <see langword="true" /> se foi possível receber um item; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions">
      <summary>Fornece as opções usadas para configurar o processamento executado por blocos de fluxo de dados.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.#ctor">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity">
      <summary>Obtém ou define o número máximo de mensagens que podem ser armazenadas em buffer pelo bloco.</summary>
      <returns>O número máximo de mensagens. O padrão é -1, que indica um número ilimitado de mensagens.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.CancellationToken">
      <summary>Obtém ou define o <see cref="T:System.Threading.CancellationToken" /> a ser monitorado para solicitações de cancelamento.</summary>
      <returns>O token.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.EnsureOrdered">
      <summary>Obtém ou define um valor que indica se o processamento ordenado deve ser imposto no tratamento de bloco de mensagens.</summary>
      <returns>
        <see langword="true" /> Se o processamento ordenado deve ser imposto; Caso contrário, <see langword="false" />. O valor padrão é <see langword="true" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.MaxMessagesPerTask">
      <summary>Obtém ou define o número máximo de mensagens que podem ser processadas por tarefa.</summary>
      <returns>O número máximo de mensagens. O padrão é -1, que indica um número ilimitado de mensagens.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.NameFormat">
      <summary>Obtém ou define a cadeia de caracteres de formato a ser usada quando o nome de um bloco é consultado.</summary>
      <returns>A cadeia de caracteres de formato para usar quando um bloco é consultado para seu nome.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.TaskScheduler">
      <summary>Obtém ou define o <see cref="T:System.Threading.Tasks.TaskScheduler" /> a ser usado para tarefas de agendamento.</summary>
      <returns>O Agendador de tarefas.</returns>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.Unbounded">
      <summary>Uma constante usada para especificar uma quantidade ilimitada de membros de <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> que fornecem um limite superior. Este campo é constante.</summary>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions">
      <summary>Fornece as opções usadas para configurar um link entre blocos de fluxo de dados.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowLinkOptions.#ctor">
      <summary>Inicializa o <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.Append">
      <summary>Obtém ou define se o link deve ser acrescentado à lista de links da origem ou se ele deve precedê-la.</summary>
      <returns>Retorna <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.MaxMessages">
      <summary>Obtém ou define o número máximo de mensagens que podem ser consumidas no link.</summary>
      <returns>Retorna <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.PropagateCompletion">
      <summary>Obtém ou define se o destino vinculado terá conclusão e notificação de falha propagadas automaticamente para ele.</summary>
      <returns>Retorna <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader">
      <summary>Fornece um contêiner de atributos de dados para passagem entre blocos de fluxo de dados.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.#ctor(System.Int64)">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> com os atributos especificados.</summary>
      <param name="id">A ID da mensagem. Deve ser exclusivo dentro do bloco de origem original. Ele não precisa ser globalmente exclusivo.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Equals(System.Object)">
      <summary>Verifica a igualdade de ID de instâncias <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> demarcadas.</summary>
      <param name="obj">Uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> demarcada.</param>
      <returns>
        <see langword="true" /> se as instâncias forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Equals(System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary>Verifica a igualdade de duas instâncias <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> por ID sem conversão boxing.</summary>
      <param name="other">Outra instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</param>
      <returns>
        <see langword="true" /> se as instâncias forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.GetHashCode">
      <summary>Gera um código hash para a instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</summary>
      <returns>O código hash.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Id">
      <summary>Obtém a ID da mensagem dentro da origem.</summary>
      <returns>A ID contida na <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> instância.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowMessageHeader.IsValid">
      <summary>Obtém a validade da mensagem.</summary>
      <returns>
        <see langword="true" />se a ID da mensagem for diferente de 0. <see langword="false" />se a ID da mensagem for 0.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.op_Equality(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary>Verifica a igualdade de duas instâncias <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> por ID.</summary>
      <param name="left">Uma instância de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</param>
      <param name="right">Uma instância de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</param>
      <returns>
        <see langword="true" /> se as instâncias forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.op_Inequality(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary>Verifica a não igualdade de duas instâncias <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> por ID.</summary>
      <param name="left">Uma instância de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</param>
      <param name="right">Uma instância de <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</param>
      <returns>
        <see langword="true" /> se as instâncias não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowMessageStatus">
      <summary>Representa o status de um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> quando transmitido entre blocos de fluxo de dados.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted">
      <summary>Indica que o <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> aceitou a mensagem. Depois que um destino aceitou uma mensagem, ela é inteiramente de propriedade do destino.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined">
      <summary>Indica que o <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> recusou a mensagem. O <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> ainda possui a mensagem.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently">
      <summary>Indica que o <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> recusou a mensagem. O <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> ainda possui a mensagem.  
Além disso, o <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> diminuirá todas as mensagens futuras enviadas pela origem.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable">
      <summary>Indica que o <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> tentou aceitar a mensagem da <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />, mas a mensagem não estava mais disponível.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed">
      <summary>Indica que o <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> adiou a mensagem para possível consumo em um momento posterior.  
O <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> ainda possui a mensagem.</summary>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions">
      <summary>Fornece as opções usadas para configurar o processamento executado pelos blocos de fluxo de dados que processam cada mensagem por meio da invocação de um representante fornecido por um usuário. Esses são blocos de fluxo de dados, como <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> e <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.#ctor">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.MaxDegreeOfParallelism">
      <summary>Obtém o número máximo de mensagens que podem ser processadas pelo bloco simultaneamente.</summary>
      <returns>O número máximo de mensagens.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.SingleProducerConstrained">
      <summary>Obtém se o código que usa o bloco de fluxo de dados é restrito a um produtor por vez.</summary>
      <returns>Retorna <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions">
      <summary>Fornece as opções usadas para configurar o processamento executado pelos blocos de fluxo de dados que agrupam várias mensagens. Esses são blocos de fluxo de dados, como <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" /> e <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.#ctor">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.Greedy">
      <summary>Obtém ou define o valor booliano a ser usado para determinar se as mensagens oferecidas devem ser consumidas vorazmente.</summary>
      <returns>
        <see langword="true" />para greedily consumir mensagens oferecidas; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.MaxNumberOfGroups">
      <summary>Obtém ou define o número máximo de grupos que devem ser gerados pelo bloco.</summary>
      <returns>O número máximo de grupos.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IDataflowBlock">
      <summary>Representa um bloco de fluxo de dados.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete">
      <summary>Sinaliza para o <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> que ele não deve aceitar nem produzir mais mensagens, e não deve consumir mais mensagens adiadas.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion">
      <summary>Obtém um <see cref="T:System.Threading.Tasks.Task" /> que representa a operação assíncrona e a conclusão do bloco de fluxo de dados.</summary>
      <returns>A tarefa.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(System.Exception)">
      <summary>Faz com que o <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> seja concluído em um estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">O <see cref="T:System.Exception" /> que causou a falha.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="exception" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2">
      <summary>Representa um bloco de fluxo de dados que é um destino para dados e uma origem de dados.</summary>
      <typeparam name="TInput">Especifica o tipo de dados aceito pelo <see cref="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2" />.</typeparam>
      <typeparam name="TOutput">Especifica o tipo de dados fornecidos pelo <see cref="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2" />.</typeparam>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1">
      <summary>Representa um bloco de fluxo de dados que oferece suporte ao recebimento de mensagens sem vínculo.</summary>
      <typeparam name="TOutput">Especifica o tipo de dados fornecidos pelo <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>Tentativas de receber assincronamente um item de saída disponível do <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">O valor de predicado deve ser passado com êxito para ser recebido.  <paramref name="filter" /> pode ser <see langword="null" />, caso em que todos os itens passarão.</param>
      <param name="item">O item recebido da origem.</param>
      <returns>
        <see langword="true" /> se foi possível receber um item; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>Tentativas de receber assincronamente todos os itens disponíveis do <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Os itens recebidos da origem.</param>
      <returns>
        <see langword="true" /> se foi possível receber um ou mais itens; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ISourceBlock`1">
      <summary>Representa um bloco de fluxo de dados que é uma origem de dados.</summary>
      <typeparam name="TOutput">Especifica o tipo de dados fornecidos pelo <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>Chamado por um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculado para aceitar e consumir um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> anteriormente oferecido por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem que é consumida.</param>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que consome a mensagem.</param>
      <param name="messageConsumed">
        <see langword="true" /> se a mensagem foi consumida com êxito; caso contrário, <see langword="false" />.</param>
      <returns>O valor da mensagem consumida. Isso pode corresponder a uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> diferente que foi reservada anteriormente e passada como o <paramref name="messageHeader" /> para <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> de consumo deve usar o valor retornado em vez do valor passado como <paramref name="messageValue" /> por meio de <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.  
Se a mensagem solicitada não estiver disponível, o valor retornado será nulo.</returns>
      <exception cref="T:System.ArgumentException">O messageHeader não é válido.</exception>
      <exception cref="T:System.ArgumentNullException">O destino é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Vincula o <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> ao <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> especificado.</summary>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> ao qual essa fonte será conectada.</param>
      <param name="linkOptions">Uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> que configura o link.</param>
      <returns>Um IDisposable que, após chamar Dispose, desvinculará a origem do destino.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> é nulo (Nothing no Visual Basic) ou <paramref name="linkOptions" /> é nulo (Nothing no Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Chamado por um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculado para liberar um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> reservado anteriormente por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem reservada que é liberada.</param>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que libera a mensagem reservada anteriormente.</param>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
      <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">O <paramref name="target" /> não tinha a mensagem reservada.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Chamado por um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculado para reservar um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> oferecido anteriormente por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem que é reservada.</param>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que reserva a mensagem.</param>
      <returns>
        <see langword="true" /> se a mensagem foi reservada com êxito; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
      <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ITargetBlock`1">
      <summary>Representa um bloco de fluxo de dados que é um destino para os dados.</summary>
      <typeparam name="TInput">Especifica o tipo de dados aceito pelo <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Oferece uma mensagem para o <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, que fornece ao destino a oportunidade de consumir ou adiar a mensagem.</summary>
      <param name="messageHeader">Uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> que representa o cabeçalho da mensagem que está sendo oferecida.</param>
      <param name="messageValue">O valor da mensagem que está sendo oferecida.</param>
      <param name="source">O <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> que oferece a mensagem. Isso pode ser nulo.</param>
      <param name="consumeToAccept">Definido como <see langword="true" /> para instruir o destino a chamar <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de forma síncrona durante a chamada para <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, antes de retornar <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />, para consumir a mensagem.</param>
      <returns>O status da mensagem oferecida. Se a mensagem foi aceita pelo destino, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> é retornado e a fonte não deve mais usar a mensagem oferecida, porque agora ela é definida pelo destino. Se a mensagem foi adiada pelo destino, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> é retornado como uma notificação de que o destino pode tentar consumir ou reservar a mensagem mais tarde; enquanto isso, a fonte ainda tem a mensagem e pode oferecê-la aos outros blocos.  
Se o destino teria adiado a mensagem, mas a fonte era <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> é retornado em vez disso.  
Se o destino tentou aceitar a mensagem, mas a perdeu devido à origem entregá-la para outro destino ou simplesmente descartando-a, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> será retornado.  
Se o destino optou por não aceitar a mensagem, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> é retornado. Se o destino optou por não aceitar a mensagem e nunca aceitar outra mensagem desta fonte, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> é retornado.</returns>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.  
-ou- <paramref name="consumeToAccept" /> poderá ser verdadeiro somente se receber um <paramref name="source" /> não nulo.</exception>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`2">
      <summary>Fornece um bloco de fluxo de dados que ingressa em várias fontes de fluxo de dados, não necessariamente do mesmo tipo, aguardando um item ser recebido para cada tipo antes que sejam todos liberados juntos como uma tupla que contém um item por tipo.</summary>
      <typeparam name="T1">Especifica o tipo de dados aceitos pelo primeiro destino do bloco.</typeparam>
      <typeparam name="T2">Especifica o tipo de dados aceitos pelo segundo destino do bloco.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />.</summary>
      <param name="dataflowBlockOptions">As opções com as quais este <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" /> será configurado.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="dataflowBlockOptions" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.Complete">
      <summary>Sinaliza para o <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> que ele não deve aceitar nem produzir mais mensagens, e não deve consumir mais mensagens adiadas.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Completion">
      <summary>Obtém um <see cref="T:System.Threading.Tasks.Task" /> que representa a operação assíncrona e a conclusão do bloco de fluxo de dados.</summary>
      <returns>A tarefa.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Vincula o <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> ao <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> especificado.</summary>
      <param name="target">Vincula o <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> ao <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> especificado.</param>
      <param name="linkOptions">Uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> que configura o link.</param>
      <returns>Um IDisposable que, após chamar Dispose, desvinculará a origem do destino.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> é nulo (Nothing no Visual Basic) ou <paramref name="linkOptions" /> é nulo (Nothing no Visual Basic).</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.OutputCount">
      <summary>Obtém o número de itens de saída disponíveis para serem recebidos deste bloco.</summary>
      <returns>O número de itens de saída.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Faz com que o <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> seja concluído em um estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">O <see cref="T:System.Exception" /> que causou a falha.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="exception" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Boolean@)">
      <param name="messageHeader" />
      <param name="target" />
      <param name="messageConsumed" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target1">
      <summary>Obtém um destino que pode ser usado para oferecer mensagens do primeiro tipo.</summary>
      <returns>O destino.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target2">
      <summary>Obtém um destino que pode ser usado para oferecer mensagens do segundo tipo.</summary>
      <returns>O destino.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.ToString">
      <summary>Retorna uma cadeia de caracteres que representa o nome formatado desta instância <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Uma cadeia de caracteres que representa o nome formatado desta instância <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceive(System.Predicate{System.Tuple{`0,`1}},System.Tuple{`0,`1}@)">
      <summary>Tentativas de receber assincronamente um item de saída disponível do <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">O valor de predicado deve ser passado com êxito para ser recebido.  <paramref name="filter" /> pode ser <see langword="null" />, caso em que todos os itens passarão.</param>
      <param name="item">O item recebido da origem.</param>
      <returns>
        <see langword="true" /> se foi possível receber um item; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1}}@)">
      <summary>Tentativas de receber assincronamente todos os itens disponíveis do <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Os itens recebidos da origem.</param>
      <returns>
        <see langword="true" /> se foi possível receber um ou mais itens; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`3">
      <summary>Fornece um bloco de fluxo de dados que ingressa em várias fontes de fluxo de dados, que não são necessariamente do mesmo tipo, aguardando um item ser recebido para cada tipo antes que sejam todos liberados juntos como uma tupla que contém um item por tipo.</summary>
      <typeparam name="T1">Especifica o tipo de dados aceitos pelo primeiro destino do bloco.</typeparam>
      <typeparam name="T2">Especifica o tipo de dados aceitos pelo segundo destino do bloco.</typeparam>
      <typeparam name="T3">Especifica o tipo de dados aceitos pelo terceiro destino do bloco.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`3" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`3" />.</summary>
      <param name="dataflowBlockOptions">As opções com as quais este <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" /> será configurado.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="dataflowBlockOptions" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.Complete">
      <summary>Sinaliza para o <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> que ele não deve aceitar nem produzir mais mensagens, e não deve consumir mais mensagens adiadas.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Completion">
      <summary>Obtém um <see cref="T:System.Threading.Tasks.Task" /> que representa a operação assíncrona e a conclusão do bloco de fluxo de dados.</summary>
      <returns>A tarefa.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Vincula o bloco de origem para o bloco de destino especificado.</summary>
      <param name="target">O bloco de destino ao qual essa fonte será conectada.</param>
      <param name="linkOptions">Um objeto que configura o link.</param>
      <returns>Um objeto descartável que desvincula a origem do destino ao seu método <see cref="M:System.IDisposable.Dispose" /> é chamado.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> é <see langword="null" />.  

ou - 
<paramref name="linkOptions" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.OutputCount">
      <summary>Obtém o número de itens de saída disponíveis para serem recebidos deste bloco.</summary>
      <returns>O número de itens de saída.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Faz com que o <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> seja concluído em um estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">O <see cref="T:System.Exception" /> que causou a falha.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="exception" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}},System.Boolean@)">
      <param name="messageHeader" />
      <param name="target" />
      <param name="messageConsumed" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}})">
      <param name="messageHeader" />
      <param name="target" />
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target1">
      <summary>Obtém um destino que pode ser usado para oferecer mensagens do primeiro tipo.</summary>
      <returns>O destino.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target2">
      <summary>Obtém um destino que pode ser usado para oferecer mensagens do segundo tipo.</summary>
      <returns>O destino.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target3">
      <summary>Obtém um destino que pode ser usado para oferecer mensagens do terceiro tipo.</summary>
      <returns>O destino.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.ToString">
      <summary>Retorna uma cadeia de caracteres que representa o nome formatado desta instância <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Uma cadeia de caracteres que representa o nome formatado desta instância <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceive(System.Predicate{System.Tuple{`0,`1,`2}},System.Tuple{`0,`1,`2}@)">
      <summary>Tentativas de receber assincronamente um item de saída disponível do <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">O valor de predicado deve ser passado com êxito para ser recebido.  <paramref name="filter" /> pode ser <see langword="null" />, caso em que todos os itens passarão.</param>
      <param name="item">O item recebido da origem.</param>
      <returns>
        <see langword="true" /> se foi possível receber um item; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1,`2}}@)">
      <summary>Tentativas de receber assincronamente todos os itens disponíveis do <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Os itens recebidos da origem.</param>
      <returns>
        <see langword="true" /> se foi possível receber um ou mais itens; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.TransformBlock`2">
      <summary>Fornece um bloco de fluxo de dados que invoca um delegado <see cref="T:System.Func`2" /> fornecido para cada elemento de dados recebido.</summary>
      <typeparam name="TInput">Especifica o tipo de dados recebidos e operados por isso <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />.</typeparam>
      <typeparam name="TOutput">Especifica o tipo de saída de dados por <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />isso.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1})">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> com o <see cref="T:System.Func`2" /> especificado.</summary>
      <param name="transform">A função a ser invocada com cada elemento de dados recebido.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="transform" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> com os <see cref="T:System.Func`2" /> e <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" /> especificados.</summary>
      <param name="transform">A função a ser invocada com cada elemento de dados recebido.</param>
      <param name="dataflowBlockOptions">As opções com as quais este <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> será configurado.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="transform" /> é <see langword="null" />.  

ou - 
O <paramref name="dataflowBlockOptions" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}})">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> com o <see cref="T:System.Func`2" /> especificado.</summary>
      <param name="transform">A função a ser invocada com cada elemento de dados recebido.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="transform" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> com os <see cref="T:System.Func`2" /> e <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" /> especificados.</summary>
      <param name="transform">A função a ser invocada com cada elemento de dados recebido.</param>
      <param name="dataflowBlockOptions">As opções com as quais este <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> será configurado.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="transform" /> é <see langword="null" />.  

ou - 
O <paramref name="dataflowBlockOptions" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.Complete">
      <summary>Sinaliza para o <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> que ele não deve aceitar nem produzir mais mensagens, e não deve consumir mais mensagens adiadas.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.Completion">
      <summary>Obtém um <see cref="T:System.Threading.Tasks.Task" /> que representa a operação assíncrona e a conclusão do bloco de fluxo de dados.</summary>
      <returns>A tarefa.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.InputCount">
      <summary>Obtém o número de itens de entrada que aguardam o processamento por este bloco.</summary>
      <returns>O número de itens de entrada.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Vincula o <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> ao <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> especificado.</summary>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> ao qual essa fonte será conectada.</param>
      <param name="linkOptions">Uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> que configura o link.</param>
      <returns>Um IDisposable que, após chamar Dispose, desvinculará a origem do destino.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> é nulo (Nothing no Visual Basic) ou <paramref name="linkOptions" /> é nulo (Nothing no Visual Basic).</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.OutputCount">
      <summary>Obtém o número de itens de saída disponíveis para serem recebidos deste bloco.</summary>
      <returns>O número de itens de saída.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Faz com que o <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> seja concluído em um estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">O <see cref="T:System.Exception" /> que causou a falha.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="exception" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean@)">
      <summary>Chamado por um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculado para aceitar e consumir um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> anteriormente oferecido por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem que é consumida.</param>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que consome a mensagem.</param>
      <param name="messageConsumed">
        <see langword="true" /> se a mensagem foi consumida com êxito; caso contrário, <see langword="false" />.</param>
      <returns>O valor da mensagem consumida. Isso pode corresponder a uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> diferente que foi reservada anteriormente e passada como o <paramref name="messageHeader" /> para <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> de consumo deve usar o valor retornado em vez do valor passado como <paramref name="messageValue" /> por meio de <see cref="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.  
Se a mensagem solicitada não estiver disponível, o valor retornado será <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
      <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>Chamado por um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculado para liberar um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> reservado anteriormente por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem reservada que é liberada.</param>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que libera a mensagem reservada anteriormente.</param>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
      <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">O <paramref name="target" /> não tinha a mensagem reservada.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>Chamado por um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculado para reservar um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> oferecido anteriormente por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem que é reservada.</param>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que reserva a mensagem.</param>
      <returns>
        <see langword="true" /> se a mensagem foi reservada com êxito; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
      <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Oferece uma mensagem para o <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, que fornece ao destino a oportunidade de consumir ou adiar a mensagem.</summary>
      <param name="messageHeader">Uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> que representa o cabeçalho da mensagem que está sendo oferecida.</param>
      <param name="messageValue">O valor da mensagem que está sendo oferecida.</param>
      <param name="source">O <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> que oferece a mensagem. Isso pode ser <see langword="null" />.</param>
      <param name="consumeToAccept">
        <see langword="true" /> se o destino precisa chamar <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de forma síncrona durante a chamada para <see cref="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, antes de retornar <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> para consumir a mensagem.</param>
      <returns>O status da mensagem oferecida. Se a mensagem foi aceita pelo destino, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> é retornado e a fonte não deve mais usar a mensagem oferecida, porque agora ela é definida pelo destino. Se a mensagem foi adiada pelo destino, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> é retornado como uma notificação de que o destino pode tentar consumir ou reservar a mensagem mais tarde; enquanto isso, a fonte ainda tem a mensagem e pode oferecê-la aos outros blocos.  
Se o destino teria sido adiado, mas a fonte era <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> é retornado em vez disso.  
Se o destino tentou aceitar a mensagem, mas a perdeu devido à origem entregá-la para outro destino ou simplesmente descartando-a, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> será retornado.  
Se o destino optou por não aceitar a mensagem, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> é retornado. Se o destino optou por não aceitar a mensagem e nunca aceitar outra mensagem desta fonte, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> é retornado.</returns>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.  
-ou- <paramref name="consumeToAccept" /> poderá ser verdadeiro somente se receber um <paramref name="source" /> não nulo.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.ToString">
      <summary>Retorna uma cadeia de caracteres que representa o nome formatado desta instância <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Uma cadeia de caracteres que representa o nome formatado desta instância <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceive(System.Predicate{`1},`1@)">
      <summary>Tentativas de receber assincronamente um item de saída disponível do <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">O valor de predicado deve ser passado com êxito para ser recebido.  <paramref name="filter" /> pode ser <see langword="null" />, caso em que todos os itens passarão.</param>
      <param name="item">O item recebido da origem.</param>
      <returns>
        <see langword="true" /> se foi possível receber um item; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
      <summary>Tentativas de receber assincronamente todos os itens disponíveis do <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Os itens recebidos da origem.</param>
      <returns>
        <see langword="true" /> se foi possível receber um ou mais itens; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2">
      <summary>Fornece um bloco de fluxo de dados que invoca um delegado <see cref="T:System.Func`2" /> fornecido para cada elemento de dados recebido.</summary>
      <typeparam name="TInput">Especifica o tipo de dados recebidos e operados por isso <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</typeparam>
      <typeparam name="TOutput">Especifica o tipo de saída de dados por <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />isso.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}})">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> com a função especificada.</summary>
      <param name="transform">A função a ser invocada com cada elemento de dados recebido. Todos os dados do <see cref="T:System.Collections.Generic.IEnumerable`1" /> retornado serão disponibilizados como saída deste <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="transform" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> com a função especificada e <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />.</summary>
      <param name="transform">A função a ser invocada com cada elemento de dados recebido. Todos os dados do <see cref="T:System.Collections.Generic.IEnumerable`1" /> retornado serão disponibilizados como saída deste <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <param name="dataflowBlockOptions">As opções com as quais este <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> será configurado.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="transform" /> é <see langword="null" />.  

ou - 
O <paramref name="dataflowBlockOptions" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}})">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> com a função especificada.</summary>
      <param name="transform">A função a ser invocada com cada elemento de dados recebido. Todos os dados retornados de forma assíncrona no <see cref="T:System.Collections.Generic.IEnumerable`1" /> serão disponibilizados como saída neste <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="transform" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> com a função especificada e <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />.</summary>
      <param name="transform">A função a ser invocada com cada elemento de dados recebido. Todos os dados retornados de forma assíncrona no <see cref="T:System.Collections.Generic.IEnumerable`1" /> serão disponibilizados como saída neste <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <param name="dataflowBlockOptions">As opções com as quais este <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> será configurado.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="transform" /> é <see langword="null" />.  

ou - 
O <paramref name="dataflowBlockOptions" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Complete">
      <summary>Sinaliza para o <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> que ele não deve aceitar nem produzir mais mensagens, e não deve consumir mais mensagens adiadas.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Completion">
      <summary>Obtém um <see cref="T:System.Threading.Tasks.Task" /> que representa a operação assíncrona e a conclusão do bloco de fluxo de dados.</summary>
      <returns>A tarefa.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.InputCount">
      <summary>Obtém o número de itens de entrada que aguardam o processamento por este bloco.</summary>
      <returns>O número de itens de entrada.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Vincula o <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> ao <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> especificado.</summary>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> ao qual essa fonte será conectada.</param>
      <param name="linkOptions">Uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> que configura o link.</param>
      <returns>Um IDisposable que, após chamar Dispose, desvinculará a origem do destino.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> é nulo (Nothing no Visual Basic) ou <paramref name="linkOptions" /> é nulo (Nothing no Visual Basic).</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.OutputCount">
      <summary>Obtém o número de itens de saída disponíveis para serem recebidos deste bloco.</summary>
      <returns>O número de itens de saída.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Faz com que o <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> seja concluído em um estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">O <see cref="T:System.Exception" /> que causou a falha.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="exception" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean@)">
      <summary>Chamado por um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculado para aceitar e consumir um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> anteriormente oferecido por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem que é consumida.</param>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que consome a mensagem.</param>
      <param name="messageConsumed">
        <see langword="true" /> se a mensagem foi consumida com êxito; caso contrário, <see langword="false" />.</param>
      <returns>O valor da mensagem consumida. Isso pode corresponder a uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> diferente que foi reservada anteriormente e passada como o <paramref name="messageHeader" /> para <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> de consumo deve usar o valor retornado em vez do valor passado como <paramref name="messageValue" /> por meio de OfferMessage <see cref="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />  
Se a mensagem solicitada não estiver disponível, o valor retornado será <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
      <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>Chamado por um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculado para liberar um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> reservado anteriormente por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem reservada que é liberada.</param>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que libera a mensagem reservada anteriormente.</param>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
      <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">O <paramref name="target" /> não tinha a mensagem reservada.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>Chamado por um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculado para reservar um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> oferecido anteriormente por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem que é reservada.</param>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que reserva a mensagem.</param>
      <returns>
        <see langword="true" /> se a mensagem foi reservada com êxito; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
      <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Oferece uma mensagem para o <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, que fornece ao destino a oportunidade de consumir ou adiar a mensagem.</summary>
      <param name="messageHeader">Uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> que representa o cabeçalho da mensagem que está sendo oferecida.</param>
      <param name="messageValue">O valor da mensagem que está sendo oferecida.</param>
      <param name="source">O <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> que oferece a mensagem. Isso pode ser <see langword="null" />.</param>
      <param name="consumeToAccept">
        <see langword="true" /> se o destino precisa chamar <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de forma síncrona durante a chamada para <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, antes de retornar <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> para consumir a mensagem.</param>
      <returns>O status da mensagem oferecida. Se a mensagem foi aceita pelo destino, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> é retornado e a fonte não deve mais usar a mensagem oferecida, pois agora ela é definida pelo destino. Se a mensagem foi adiada pelo destino, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> é retornado como uma notificação de que o destino pode tentar consumir ou reservar a mensagem mais tarde; enquanto isso, a fonte ainda tem a mensagem e pode oferecê-la aos outros blocos.  
Se o destino teria sido adiado, mas a fonte era <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> é retornado em vez disso.  
Se o destino tentou aceitar a mensagem, mas a perdeu devido à origem entregá-la para outro destino ou simplesmente descartando-a, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> será retornado.  
Se o destino optou por não aceitar a mensagem, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> é retornado. Se o destino optou por não aceitar a mensagem e nunca aceitar outra mensagem desta fonte, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> é retornado.</returns>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.  

ou - 
<paramref name="consumeToAccept" /> pode ser verdadeiro somente se receber um <paramref name="source" /> não nulo.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.ToString">
      <summary>Retorna uma cadeia de caracteres que representa o nome formatado desta instância <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Uma cadeia de caracteres que representa o nome formatado desta instância <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceive(System.Predicate{`1},`1@)">
      <summary>Tentativas de receber assincronamente um item de saída disponível do <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">O valor de predicado deve ser passado com êxito para ser recebido.  <paramref name="filter" /> pode ser <see langword="null" />, caso em que todos os itens passarão.</param>
      <param name="item">O item recebido da origem.</param>
      <returns>
        <see langword="true" /> se foi possível receber um item; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
      <summary>Tentativas de receber assincronamente todos os itens disponíveis do <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Os itens recebidos da origem.</param>
      <returns>
        <see langword="true" /> se foi possível receber um ou mais itens; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1">
      <summary>Fornece um buffer para recebimento e armazenamento de, no máximo, um elemento em uma rede de blocos de fluxo de dados.</summary>
      <typeparam name="T">Especifica o tipo dos dados armazenados em buffer por este bloco de fluxo de data.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0})">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" />.</summary>
      <param name="cloningFunction">A função a ser usada para clonar os dados oferecidos a outros blocos.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Inicializa um novo <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" /> com o <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> especificado.</summary>
      <param name="cloningFunction">A função a ser usada para clonar os dados oferecidos a outros blocos.</param>
      <param name="dataflowBlockOptions">As opções com as quais este <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" /> será configurado.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="dataflowBlockOptions" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Complete">
      <summary>Sinaliza para o <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> que ele não deve aceitar nem produzir mais mensagens, e não deve consumir mais mensagens adiadas.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Completion">
      <summary>Obtém um <see cref="T:System.Threading.Tasks.Task" /> que representa a operação assíncrona e a conclusão do bloco de fluxo de dados.</summary>
      <returns>A tarefa.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Vincula o <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> ao <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> especificado.</summary>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> ao qual essa fonte será conectada.</param>
      <param name="linkOptions">Uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> que configura o link.</param>
      <returns>Um IDisposable que, após chamar Dispose, desvinculará a origem do destino.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> é nulo (Nothing no Visual Basic) ou <paramref name="linkOptions" /> é nulo (Nothing no Visual Basic).</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Faz com que o <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> seja concluído em um estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">O <see cref="T:System.Exception" /> que causou a falha.</param>
      <exception cref="T:System.ArgumentNullException">O <paramref name="exception" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock{T}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>Tentativas de receber assincronamente todos os itens disponíveis do <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Os itens recebidos da origem.</param>
      <returns>
        <see langword="true" /> se foi possível receber um ou mais itens; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>Chamado por um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculado para aceitar e consumir um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> anteriormente oferecido por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem que é consumida.</param>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que consome a mensagem.</param>
      <param name="messageConsumed">
        <see langword="true" /> se a mensagem foi consumida com êxito; caso contrário, <see langword="false" />.</param>
      <returns>O valor da mensagem consumida. Isso pode corresponder a uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> diferente que foi reservada anteriormente e passada como o <paramref name="messageHeader" /> para <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> de consumo deve usar o valor retornado em vez do valor passado como <paramref name="messageValue" /> por meio de <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.  
Se a mensagem solicitada não estiver disponível, o valor retornado será <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
      <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Chamado por um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculado para liberar um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> reservado anteriormente por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem reservada que é liberada.</param>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que libera a mensagem reservada anteriormente.</param>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
      <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">O <paramref name="target" /> não tinha a mensagem reservada.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Chamado por um <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> vinculado para reservar um <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> oferecido anteriormente por este <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">O <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da mensagem que é reservada.</param>
      <param name="target">O <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> que reserva a mensagem.</param>
      <returns>
        <see langword="true" /> se a mensagem foi reservada com êxito; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.</exception>
      <exception cref="T:System.ArgumentNullException">O <paramref name="target" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Oferece uma mensagem para o <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, que fornece ao destino a oportunidade de consumir ou adiar a mensagem.</summary>
      <param name="messageHeader">Uma instância <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> que representa o cabeçalho da mensagem que está sendo oferecida.</param>
      <param name="messageValue">O valor da mensagem que está sendo oferecida.</param>
      <param name="source">O <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> que oferece a mensagem. Isso pode ser <see langword="null" />.</param>
      <param name="consumeToAccept">Definido como <see langword="true" /> para instruir o destino a chamar <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> de forma síncrona durante a chamada para <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, antes de retornar <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />, para consumir a mensagem.</param>
      <returns>O status da mensagem oferecida. Se a mensagem foi aceita pelo destino, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> é retornado e a fonte não deve mais usar a mensagem oferecida, porque agora ela é definida pelo destino. Se a mensagem foi adiada pelo destino, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> é retornado como uma notificação de que o destino pode tentar consumir ou reservar a mensagem mais tarde; enquanto isso, a fonte ainda tem a mensagem e pode oferecê-la aos outros blocos.  
Se o destino teria adiado a mensagem, mas <paramref name="source" /> era <see langword="null" />, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> é retornado em vez disso.  
Se o destino tentou aceitar a mensagem, mas a perdeu devido à origem entregá-la para outro destino ou simplesmente descartando-a, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" /> será retornado.  
Se o destino optou por não aceitar a mensagem, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> é retornado. Se o destino optou por não aceitar a mensagem e nunca aceitar outra mensagem desta fonte, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" /> é retornado.</returns>
      <exception cref="T:System.ArgumentException">O <paramref name="messageHeader" /> não é válido.  
-ou- <paramref name="consumeToAccept" /> poderá ser verdadeiro somente se receber um <paramref name="source" /> não nulo.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.ToString">
      <summary>Retorna uma cadeia de caracteres que representa o nome formatado desta instância <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Uma cadeia de caracteres que representa o nome formatado desta instância <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>Tentativas de receber assincronamente um item de saída disponível do <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">O valor de predicado deve ser passado com êxito para ser recebido.  <paramref name="filter" /> pode ser <see langword="null" />, caso em que todos os itens passarão.</param>
      <param name="item">O item recebido da origem.</param>
      <returns>
        <see langword="true" /> se foi possível receber um item; caso contrário, <see langword="false" />.</returns>
    </member>
  </members>
</doc>
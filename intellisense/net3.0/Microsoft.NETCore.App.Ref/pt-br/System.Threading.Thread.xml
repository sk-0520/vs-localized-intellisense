<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Thread</name>
  </assembly>
  <members>
    <member name="T:System.LocalDataStoreSlot">
      <summary>Encapsula um slot de memória para armazenar dados locais. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.LocalDataStoreSlot.Finalize">
      <summary>Garante que os recursos são liberados e outras operações de limpeza são executadas quando o coletor de lixo recupera o objeto <see cref="T:System.LocalDataStoreSlot" />.</summary>
    </member>
    <member name="T:System.Threading.ApartmentState">
      <summary>Especifica o estado de apartment de um <see cref="T:System.Threading.Thread" />.</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.MTA">
      <summary>O <see cref="T:System.Threading.Thread" /> vai criar e inserir um Multi-Threaded Apartment.</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.STA">
      <summary>O <see cref="T:System.Threading.Thread" /> vai criar e inserir um Single-Threaded Apartment.</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.Unknown">
      <summary>A propriedade <see cref="P:System.Threading.Thread.ApartmentState" /> não foi definida.</summary>
    </member>
    <member name="T:System.Threading.CompressedStack">
      <summary>Fornece métodos para configurar e capturar a pilha compactada no thread atual. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.Threading.CompressedStack.Capture">
      <summary>Captura a pilha compactada do thread atual.</summary>
      <returns>Um objeto <see cref="T:System.Threading.CompressedStack" />.</returns>
    </member>
    <member name="M:System.Threading.CompressedStack.CreateCopy">
      <summary>Cria uma cópia da pilha compactada atual.</summary>
      <returns>Um objeto <see cref="T:System.Threading.CompressedStack" /> que representa a pilha compactada atual.</returns>
    </member>
    <member name="M:System.Threading.CompressedStack.GetCompressedStack">
      <summary>Obtém a pilha compactada para o thread atual.</summary>
      <returns>Um <see cref="T:System.Threading.CompressedStack" /> para o thread atual.</returns>
      <exception cref="T:System.Security.SecurityException">Um chamador na cadeia de chamadas não tem permissão para acessar o código não gerenciado.  

ou - 
A solicitação para <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> falhou.</exception>
    </member>
    <member name="M:System.Threading.CompressedStack.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Define o objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> com as informações lógicas do contexto necessárias para recriar uma instância deste contexto de execução.</summary>
      <param name="info">O objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> a ser preenchido com informações de serialização.</param>
      <param name="context">A estrutura <see cref="T:System.Runtime.Serialization.StreamingContext" /> que representa o contexto de destino da serialização.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.CompressedStack.Run(System.Threading.CompressedStack,System.Threading.ContextCallback,System.Object)">
      <summary>Executa um método na pilha compactada especificada no thread atual.</summary>
      <param name="compressedStack">
        <see cref="T:System.Threading.CompressedStack" /> ao dataset.</param>
      <param name="callback">Um <see cref="T:System.Threading.ContextCallback" /> que representa o método a ser executado no contexto de segurança especificado.</param>
      <param name="state">O objeto a ser passado para o método de retorno de chamada.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="compressedStack" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.Threading.ParameterizedThreadStart">
      <summary>Representa o método que é executado em um <see cref="T:System.Threading.Thread" />.</summary>
      <param name="obj">Um objeto que contém dados para o procedimento de thread.</param>
    </member>
    <member name="T:System.Threading.Thread">
      <summary>Cria e controla um thread, define sua prioridade e obtém seu status.</summary>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.Thread" />, especificando um delegado que permite que um objeto seja passado para o thread quando o thread for iniciado.</summary>
      <param name="start">Um delegado que representa os métodos a serem invocados quando esse thread começar a ser executado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.Thread" />, especificando um delegado que permite que um objeto seja passado para o thread quando o thread é iniciado e especificando o tamanho máximo da pilha para o thread.</summary>
      <param name="start">Um delegado <see cref="T:System.Threading.ParameterizedThreadStart" /> que representa os métodos a serem invocados quando esse thread começar a ser executado.</param>
      <param name="maxStackSize">O tamanho máximo da pilha, em bytes, a ser usado pelo thread ou 0 para usar o tamanho de pilha máximo padrão especificado no cabeçalho do executável.  
Importante   Para um código parcialmente confiável, <paramref name="maxStackSize" /> será ignorado se for maior que o tamanho da pilha padrão. Nenhuma exceção é lançada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxStackSize" /> é menor que zero.</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.Thread" />.</summary>
      <param name="start">Um delegado <see cref="T:System.Threading.ThreadStart" /> que representa os métodos a serem invocados quando esse thread começar a ser executado.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="start" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.Thread" />, especificando o tamanho máximo da pilha do thread.</summary>
      <param name="start">Um delegado <see cref="T:System.Threading.ThreadStart" /> que representa os métodos a serem invocados quando esse thread começar a ser executado.</param>
      <param name="maxStackSize">O tamanho máximo da pilha, em bytes, a ser usado pelo thread ou 0 para usar o tamanho de pilha máximo padrão especificado no cabeçalho do executável.  
Importante   Para um código parcialmente confiável, <paramref name="maxStackSize" /> será ignorado se for maior que o tamanho da pilha padrão. Nenhuma exceção é lançada.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxStackSize" /> é menor que zero.</exception>
    </member>
    <member name="M:System.Threading.Thread.Abort">
      <summary>Gera um <see cref="T:System.Threading.ThreadAbortException" /> no thread no qual ele é invocado, para iniciar o processo de encerramento do thread. Geralmente, a chamada a esse método termina o thread.</summary>
      <exception cref="T:System.PlatformNotSupportedException">Somente .NET Core: Não há suporte para esse membro.</exception>
      <exception cref="T:System.Security.SecurityException">O chamador não tem a permissão necessária.</exception>
      <exception cref="T:System.Threading.ThreadStateException">O thread que está sendo anulado está suspenso no momento.</exception>
    </member>
    <member name="M:System.Threading.Thread.Abort(System.Object)">
      <summary>Gera um <see cref="T:System.Threading.ThreadAbortException" /> no thread no qual ele é invocado, para iniciar o processo de término do thread e ao mesmo tempo fornecer informações de exceção sobre o término do thread. Geralmente, a chamada a esse método termina o thread.</summary>
      <param name="stateInfo">Um objeto que contém informações específicas do aplicativo, como estado, que podem ser usadas pelo thread que está sendo anulado.</param>
      <exception cref="T:System.PlatformNotSupportedException">Somente .NET Core: Não há suporte para esse membro.</exception>
      <exception cref="T:System.Security.SecurityException">O chamador não tem a permissão necessária.</exception>
      <exception cref="T:System.Threading.ThreadStateException">O thread que está sendo anulado está suspenso no momento.</exception>
    </member>
    <member name="M:System.Threading.Thread.AllocateDataSlot">
      <summary>Aloca um slot de dados sem nome em todos os threads. Para melhorar o desempenho, use os campos marcados com o atributo <see cref="T:System.ThreadStaticAttribute" />.</summary>
      <returns>O slot de dados nomeado alocado em todos os threads.</returns>
    </member>
    <member name="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
      <summary>Aloca um slot de dados nomeado em todos os threads. Para melhorar o desempenho, use os campos marcados com o atributo <see cref="T:System.ThreadStaticAttribute" />.</summary>
      <param name="name">O nome do slot de dados a ser alocado.</param>
      <returns>O slot de dados nomeado alocado em todos os threads.</returns>
      <exception cref="T:System.ArgumentException">Já existe um slot de dados nomeado com o nome especificado.</exception>
    </member>
    <member name="P:System.Threading.Thread.ApartmentState">
      <summary>Obtém ou define o estado de apartment desse thread.</summary>
      <returns>Um dos valores de <see cref="T:System.Threading.ApartmentState" />. O valor inicial é <see langword="Unknown" />.</returns>
      <exception cref="T:System.ArgumentException">É feita uma tentativa de definir esta propriedade para um estado que não é um estado de apartment válido (um estado diferente de <see langword="STA" /> (single-threaded apartment) ou <see langword="MTA" /> (multithreaded apartment)).</exception>
    </member>
    <member name="M:System.Threading.Thread.BeginCriticalRegion">
      <summary>Notifica um host que a execução está prestes a entrar em uma região de código em que os efeitos de uma exceção sem tratamento ou anulação de thread podem comprometer outras tarefas no domínio do aplicativo.</summary>
    </member>
    <member name="M:System.Threading.Thread.BeginThreadAffinity">
      <summary>Notifica um host de que o código gerenciado está prestes a executar instruções que dependem da identidade do thread atual do sistema operacional físico.</summary>
      <exception cref="T:System.Security.SecurityException">O chamador não tem a permissão necessária.</exception>
    </member>
    <member name="P:System.Threading.Thread.CurrentCulture">
      <summary>Obtém ou define a cultura do thread atual.</summary>
      <returns>Um objeto que representa a cultura do thread atual.</returns>
      <exception cref="T:System.ArgumentNullException">A propriedade é definida como <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Somente .NET Core: não há suporte para leitura ou gravação da cultura de um thread por meio de outro thread.</exception>
    </member>
    <member name="P:System.Threading.Thread.CurrentPrincipal">
      <summary>Obtém ou define a entidade de segurança atual do thread (para segurança baseada em função).</summary>
      <returns>Um valor <see cref="T:System.Security.Principal.IPrincipal" /> que representa o contexto de segurança.</returns>
      <exception cref="T:System.Security.SecurityException">O chamador não tem a permissão necessária para definir a entidade de segurança.</exception>
    </member>
    <member name="P:System.Threading.Thread.CurrentThread">
      <summary>Obtém o thread em execução no momento.</summary>
      <returns>Um <see cref="T:System.Threading.Thread" /> que é a representação do thread em execução no momento.</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentUICulture">
      <summary>Obtém ou define a cultura atual usada pelo Gerenciador de Recursos para procurar recursos específicos da cultura em tempo de execução.</summary>
      <returns>Um objeto que representa a cultura atual.</returns>
      <exception cref="T:System.ArgumentNullException">A propriedade é definida como <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">A propriedade é definida como um nome de cultura não pode ser usado para localizar um arquivo de recurso. Nomes de arquivos de recursos devem incluir somente letras, números, hifens ou sublinhados.</exception>
      <exception cref="T:System.InvalidOperationException">Somente .NET Core: não há suporte para leitura ou gravação da cultura de um thread por meio de outro thread.</exception>
    </member>
    <member name="M:System.Threading.Thread.DisableComObjectEagerCleanup">
      <summary>Desativa a limpeza automática de RCWs (Runtime Callable Wrappers) para o thread atual.</summary>
    </member>
    <member name="M:System.Threading.Thread.EndCriticalRegion">
      <summary>Notifica um host de que a execução está prestes a entrar em uma região de código na qual os efeitos de uma exceção sem tratamento ou anulação de thread estão limitados à tarefa atual.</summary>
    </member>
    <member name="M:System.Threading.Thread.EndThreadAffinity">
      <summary>Notifica um host que o código gerenciado terminou de executar as instruções que dependem da identidade do thread do sistema operacional físico atual.</summary>
      <exception cref="T:System.Security.SecurityException">O chamador não tem a permissão necessária.</exception>
    </member>
    <member name="P:System.Threading.Thread.ExecutionContext">
      <summary>Obtém um objeto <see cref="T:System.Threading.ExecutionContext" /> que contém informações sobre os diversos contextos do thread atual.</summary>
      <returns>Um objeto <see cref="T:System.Threading.ExecutionContext" /> que consolida as informações de contexto para o thread atual.</returns>
    </member>
    <member name="M:System.Threading.Thread.Finalize">
      <summary>Garante que os recursos são liberados e outras operações de limpeza são executadas quando o coletor de lixo recupera o objeto <see cref="T:System.Threading.Thread" />.</summary>
    </member>
    <member name="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
      <summary>Elimina a associação entre um nome e um slot em todos os threads do processo. Para melhorar o desempenho, use os campos marcados com o atributo <see cref="T:System.ThreadStaticAttribute" />.</summary>
      <param name="name">O nome do slot de dados a ser liberado.</param>
    </member>
    <member name="M:System.Threading.Thread.GetApartmentState">
      <summary>Retorna um valor <see cref="T:System.Threading.ApartmentState" /> que indica o estado do apartment.</summary>
      <returns>Um dos valores <see cref="T:System.Threading.ApartmentState" /> que indica o estado do apartment do thread gerenciado. O padrão é <see cref="F:System.Threading.ApartmentState.Unknown" />.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetCompressedStack">
      <summary>Retorna um objeto <see cref="T:System.Threading.CompressedStack" /> que pode ser usado para capturar a pilha do thread atual.</summary>
      <returns>nenhuma.</returns>
      <exception cref="T:System.InvalidOperationException">Em todos os casos.</exception>
    </member>
    <member name="M:System.Threading.Thread.GetCurrentProcessorId" />
    <member name="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
      <summary>Recupera o valor do slot especificado no thread atual, no domínio atual do thread atual. Para melhorar o desempenho, use os campos marcados com o atributo <see cref="T:System.ThreadStaticAttribute" />.</summary>
      <param name="slot">O <see cref="T:System.LocalDataStoreSlot" /> do qual o valor deve ser obtido.</param>
      <returns>O valor recuperado.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetDomain">
      <summary>Retorna o domínio atual no qual o thread atual está em execução.</summary>
      <returns>Um <see cref="T:System.AppDomain" /> que representa o domínio de aplicativo atual do thread em execução.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetDomainID">
      <summary>Retorna um identificador de domínio do aplicativo exclusivo.</summary>
      <returns>Um inteiro com sinal de 32 bits que identifica exclusivamente o domínio do aplicativo.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetHashCode">
      <summary>Retorna um código hash para o thread atual.</summary>
      <returns>Um valor inteiro de código hash.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
      <summary>Pesquisa um slot de dados nomeado. Para melhorar o desempenho, use os campos marcados com o atributo <see cref="T:System.ThreadStaticAttribute" />.</summary>
      <param name="name">O nome do slot de dados local.</param>
      <returns>Um <see cref="T:System.LocalDataStoreSlot" /> alocado para este thread.</returns>
    </member>
    <member name="M:System.Threading.Thread.Interrupt">
      <summary>Interrompe um thread que está no estado de thread <see cref="F:System.Threading.ThreadState.WaitSleepJoin" />.</summary>
      <exception cref="T:System.Security.SecurityException">O chamador não tem o <see cref="T:System.Security.Permissions.SecurityPermission" /> apropriado.</exception>
    </member>
    <member name="P:System.Threading.Thread.IsAlive">
      <summary>Obtém um valor que indica o status de execução do thread atual.</summary>
      <returns>
        <see langword="true" /> se esse thread foi iniciado e não foi terminado normalmente ou foi anulado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Thread.IsBackground">
      <summary>Obtém ou define um valor que indica se um thread é ou não um thread de segundo plano.</summary>
      <returns>
        <see langword="true" /> se esse thread for um thread de segundo plano ou for se tornar um; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.Threading.ThreadStateException">O thread está inativo.</exception>
    </member>
    <member name="P:System.Threading.Thread.IsThreadPoolThread">
      <summary>Obtém um valor que indica se um thread pertence ao pool de threads gerenciados ou não.</summary>
      <returns>
        <see langword="true" /> se esse thread pertence ao pool de threads gerenciados; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Thread.Join">
      <summary>Bloqueia o thread de chamada até que o thread representado por essa instância termine, enquanto continua a executar COM padrão e o bombeamento de <see langword="SendMessage" />.</summary>
      <exception cref="T:System.Threading.ThreadStateException">O chamador tentou ingressar em um thread que está no estado <see cref="F:System.Threading.ThreadState.Unstarted" />.</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">O thread é interrompido enquanto espera.</exception>
    </member>
    <member name="M:System.Threading.Thread.Join(System.Int32)">
      <summary>Bloqueia o thread de chamada até que o thread representado por essa instância termine ou até que o tempo especificado tenha decorrido, enquanto continua executando o COM padrão e o bombeamento de SendMessage.</summary>
      <param name="millisecondsTimeout">O número de milissegundos para espera pelo encerramento do thread.</param>
      <returns>
        <see langword="true" /> se o thread tiver sido encerrado; <see langword="false" /> se o thread não tiver sido encerrado depois que o tempo especificado pelo parâmetro <paramref name="millisecondsTimeout" /> tiver decorrido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O valor de <paramref name="millisecondsTimeout" /> será negativo e não será igual a <see cref="F:System.Threading.Timeout.Infinite" /> em milissegundos.</exception>
      <exception cref="T:System.Threading.ThreadStateException">O thread não foi iniciado.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="millisecondsTimeout" /> é menor que -1 (Timeout.Infinite).</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">O thread foi interrompido enquanto espera.</exception>
    </member>
    <member name="M:System.Threading.Thread.Join(System.TimeSpan)">
      <summary>Bloqueia o thread de chamada até que o thread representado por essa instância termine ou até que o tempo especificado tenha decorrido, enquanto continua executando o COM padrão e o bombeamento de SendMessage.</summary>
      <param name="timeout">Um <see cref="T:System.TimeSpan" /> definido como a quantidade de tempo de espera até a conclusão do thread.</param>
      <returns>
        <see langword="true" /> se o thread tiver sido encerrado; <see langword="false" /> se o thread não tiver sido encerrado depois que o período especificado pelo parâmetro <paramref name="timeout" /> tiver decorrido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O valor de <paramref name="timeout" /> será negativo e não será igual a <see cref="F:System.Threading.Timeout.Infinite" /> em milissegundos, ou será maior que <see cref="F:System.Int32.MaxValue" /> milissegundos.</exception>
      <exception cref="T:System.Threading.ThreadStateException">O chamador tentou ingressar em um thread que está no estado <see cref="F:System.Threading.ThreadState.Unstarted" />.</exception>
    </member>
    <member name="P:System.Threading.Thread.ManagedThreadId">
      <summary>Obtém um identificador exclusivo para o thread gerenciado atual.</summary>
      <returns>Um inteiro que representa um identificador exclusivo para esse thread gerenciado.</returns>
    </member>
    <member name="M:System.Threading.Thread.MemoryBarrier">
      <summary>Sincroniza o acesso à memória da seguinte maneira: o processador que executa o thread atual não pode reorganizar as instruções de forma que os acessos à memória anteriores à chamada para <see cref="M:System.Threading.Thread.MemoryBarrier" /> sejam executados depois dos acessos à memória posteriores à chamada para <see cref="M:System.Threading.Thread.MemoryBarrier" />.</summary>
    </member>
    <member name="P:System.Threading.Thread.Name">
      <summary>Obtém ou define o nome do thread.</summary>
      <returns>Uma cadeia de caracteres que contém o nome do thread, ou <see langword="null" />, se nenhum nome foi definido.</returns>
      <exception cref="T:System.InvalidOperationException">Foi solicitada uma operação de conjuntos, mas a propriedade <see langword="Name" /> já foi definida.</exception>
    </member>
    <member name="P:System.Threading.Thread.Priority">
      <summary>Obtém ou define um valor que indica a prioridade de agendamento de um thread.</summary>
      <returns>Um dos valores de <see cref="T:System.Threading.ThreadPriority" />. O valor padrão é <see cref="F:System.Threading.ThreadPriority.Normal" />.</returns>
      <exception cref="T:System.Threading.ThreadStateException">O thread atingiu um estado final, como <see cref="F:System.Threading.ThreadState.Aborted" />.</exception>
      <exception cref="T:System.ArgumentException">O valor especificado para uma operação definida não é um valor <see cref="T:System.Threading.ThreadPriority" /> válido.</exception>
    </member>
    <member name="M:System.Threading.Thread.ResetAbort">
      <summary>Cancela um <see cref="M:System.Threading.Thread.Abort(System.Object)" /> solicitado para o thread atual.</summary>
      <exception cref="T:System.PlatformNotSupportedException">Somente .NET Core: Não há suporte para esse membro.</exception>
      <exception cref="T:System.Threading.ThreadStateException">
        <see langword="Abort" /> não foi invocado no thread atual.</exception>
      <exception cref="T:System.Security.SecurityException">O chamador não tem a permissão de segurança necessária para o thread atual.</exception>
    </member>
    <member name="M:System.Threading.Thread.Resume">
      <summary>Retoma um thread que foi suspenso.</summary>
      <exception cref="T:System.PlatformNotSupportedException">Somente .NET Core: Não há suporte para esse membro.</exception>
      <exception cref="T:System.Threading.ThreadStateException">O thread não foi iniciado, está inativo ou não está no estado suspenso.</exception>
      <exception cref="T:System.Security.SecurityException">O chamador não tem o <see cref="T:System.Security.Permissions.SecurityPermission" /> apropriado.</exception>
    </member>
    <member name="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
      <summary>Define o estado do apartment de um thread antes que ele seja iniciado.</summary>
      <param name="state">O novo estado de apartment.</param>
      <exception cref="T:System.PlatformNotSupportedException">Somente .NET Core: esse membro não é compatível com as plataformas macOS e Linux.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> não é um estado de apartment válido.</exception>
      <exception cref="T:System.Threading.ThreadStateException">O thread já foi iniciado.</exception>
      <exception cref="T:System.InvalidOperationException">O estado de apartment já foi inicializado.</exception>
    </member>
    <member name="M:System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)">
      <summary>Aplica uma <see cref="T:System.Threading.CompressedStack" /> capturada ao thread atual.</summary>
      <param name="stack">O objeto <see cref="T:System.Threading.CompressedStack" /> a ser aplicado ao thread atual.</param>
      <exception cref="T:System.InvalidOperationException">Em todos os casos.</exception>
    </member>
    <member name="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
      <summary>Define os dados no slot especificado no thread em execução no momento, para o domínio atual do thread. Para melhorar o desempenho, use os campos marcados com o atributo <see cref="T:System.ThreadStaticAttribute" />.</summary>
      <param name="slot">O <see cref="T:System.LocalDataStoreSlot" /> no qual definir o valor.</param>
      <param name="data">O valor a ser configurado.</param>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.Int32)">
      <summary>Suspende o thread atual no número especificado de milissegundos.</summary>
      <param name="millisecondsTimeout">O número de milissegundos durante o qual o thread ficará suspenso. Se o valor do argumento <paramref name="millisecondsTimeout" /> for zero, o thread entregará o restante da fração de tempo para qualquer thread de prioridade igual que está pronto para execução. Se não houver nenhum outro thread de prioridade igual pronto para execução, a execução do thread atual não será suspensa.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">O valor de tempo limite é negativo e não é igual a <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.TimeSpan)">
      <summary>Suspende o thread atual para o período de tempo especificado.</summary>
      <param name="timeout">A quantidade de tempo para a qual o thread é suspenso. Se o valor do argumento <paramref name="millisecondsTimeout" /> for <see cref="F:System.TimeSpan.Zero" />, o thread entregará o restante de sua fração de tempo a qualquer thread de prioridade igual que esteja pronto para execução. Se não houver nenhum outro thread de prioridade igual pronto para execução, a execução do thread atual não será suspensa.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">O valor de <paramref name="timeout" /> será negativo e não será igual a <see cref="F:System.Threading.Timeout.Infinite" /> em milissegundos, ou será maior que <see cref="F:System.Int32.MaxValue" /> milissegundos.</exception>
    </member>
    <member name="M:System.Threading.Thread.SpinWait(System.Int32)">
      <summary>Faz com que um thread aguarde o número de vezes definido pelo parâmetro <paramref name="iterations" />.</summary>
      <param name="iterations">Um inteiro com sinal de 32 bits que define quanto tempo um thread deverá aguardar.</param>
    </member>
    <member name="M:System.Threading.Thread.Start">
      <summary>Faz com que o sistema operacional altere o estado da instância atual para <see cref="F:System.Threading.ThreadState.Running" />.</summary>
      <exception cref="T:System.Threading.ThreadStateException">O thread já foi iniciado.</exception>
      <exception cref="T:System.OutOfMemoryException">Não há memória suficiente disponível para iniciar esse thread.</exception>
    </member>
    <member name="M:System.Threading.Thread.Start(System.Object)">
      <summary>Faz com que o sistema operacional altere o estado da instância atual para <see cref="F:System.Threading.ThreadState.Running" /> e, opcionalmente, fornece um objeto que contém dados a serem usados pelo método executado pelo thread.</summary>
      <param name="parameter">Um objeto que contém dados a serem usados pelo método executado pelo thread.</param>
      <exception cref="T:System.Threading.ThreadStateException">O thread já foi iniciado.</exception>
      <exception cref="T:System.OutOfMemoryException">Não há memória suficiente disponível para iniciar esse thread.</exception>
      <exception cref="T:System.InvalidOperationException">Esse thread foi criado usando um delegado <see cref="T:System.Threading.ThreadStart" /> em vez de um delegado <see cref="T:System.Threading.ParameterizedThreadStart" />.</exception>
    </member>
    <member name="M:System.Threading.Thread.Suspend">
      <summary>Suspende o thread ou, se o thread já está suspenso, não tem efeito.</summary>
      <exception cref="T:System.PlatformNotSupportedException">Somente .NET Core: Não há suporte para esse membro.</exception>
      <exception cref="T:System.Threading.ThreadStateException">O thread não foi iniciado ou está inativo.</exception>
      <exception cref="T:System.Security.SecurityException">O chamador não tem o <see cref="T:System.Security.Permissions.SecurityPermission" /> apropriado.</exception>
    </member>
    <member name="P:System.Threading.Thread.ThreadState">
      <summary>Obtém um valor que contém os estados do thread atual.</summary>
      <returns>Um dos valores de <see cref="T:System.Threading.ThreadState" /> que indica o estado do thread atual. O valor inicial é <see cref="F:System.Threading.ThreadState.Unstarted" />.</returns>
    </member>
    <member name="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
      <summary>Define o estado do apartment de um thread antes que ele seja iniciado.</summary>
      <param name="state">O novo estado de apartment.</param>
      <returns>
        <see langword="true" /> se o estado de apartment for definido; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.PlatformNotSupportedException">Somente .NET Core: esse membro não é compatível com as plataformas macOS e Linux.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> não é um estado de apartment válido.</exception>
      <exception cref="T:System.Threading.ThreadStateException">O thread foi iniciado e encerrado ou a chamada não está sendo realizada do contexto do thread enquanto ele está em execução.</exception>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Byte@)">
      <summary>Lê o valor de um campo. O valor é o último gravado por qualquer processador em um computador, independentemente do número de processadores ou do estado do cache do processador.</summary>
      <param name="address">O campo a ser lido.</param>
      <returns>O último valor gravado no campo por qualquer processador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Double@)">
      <summary>Lê o valor de um campo. O valor é o último gravado por qualquer processador em um computador, independentemente do número de processadores ou do estado do cache do processador.</summary>
      <param name="address">O campo a ser lido.</param>
      <returns>O último valor gravado no campo por qualquer processador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int16@)">
      <summary>Lê o valor de um campo. O valor é o último gravado por qualquer processador em um computador, independentemente do número de processadores ou do estado do cache do processador.</summary>
      <param name="address">O campo a ser lido.</param>
      <returns>O último valor gravado no campo por qualquer processador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int32@)">
      <summary>Lê o valor de um campo. O valor é o último gravado por qualquer processador em um computador, independentemente do número de processadores ou do estado do cache do processador.</summary>
      <param name="address">O campo a ser lido.</param>
      <returns>O último valor gravado no campo por qualquer processador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int64@)">
      <summary>Lê o valor de um campo. O valor é o último gravado por qualquer processador em um computador, independentemente do número de processadores ou do estado do cache do processador.</summary>
      <param name="address">O campo a ser lido.</param>
      <returns>O último valor gravado no campo por qualquer processador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.IntPtr@)">
      <summary>Lê o valor de um campo. O valor é o último gravado por qualquer processador em um computador, independentemente do número de processadores ou do estado do cache do processador.</summary>
      <param name="address">O campo a ser lido.</param>
      <returns>O último valor gravado no campo por qualquer processador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Object@)">
      <summary>Lê o valor de um campo. O valor é o último gravado por qualquer processador em um computador, independentemente do número de processadores ou do estado do cache do processador.</summary>
      <param name="address">O campo a ser lido.</param>
      <returns>O último valor gravado no campo por qualquer processador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.SByte@)">
      <summary>Lê o valor de um campo. O valor é o último gravado por qualquer processador em um computador, independentemente do número de processadores ou do estado do cache do processador.</summary>
      <param name="address">O campo a ser lido.</param>
      <returns>O último valor gravado no campo por qualquer processador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Single@)">
      <summary>Lê o valor de um campo. O valor é o último gravado por qualquer processador em um computador, independentemente do número de processadores ou do estado do cache do processador.</summary>
      <param name="address">O campo a ser lido.</param>
      <returns>O último valor gravado no campo por qualquer processador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt16@)">
      <summary>Lê o valor de um campo. O valor é o último gravado por qualquer processador em um computador, independentemente do número de processadores ou do estado do cache do processador.</summary>
      <param name="address">O campo a ser lido.</param>
      <returns>O último valor gravado no campo por qualquer processador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt32@)">
      <summary>Lê o valor de um campo. O valor é o último gravado por qualquer processador em um computador, independentemente do número de processadores ou do estado do cache do processador.</summary>
      <param name="address">O campo a ser lido.</param>
      <returns>O último valor gravado no campo por qualquer processador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt64@)">
      <summary>Lê o valor de um campo. O valor é o último gravado por qualquer processador em um computador, independentemente do número de processadores ou do estado do cache do processador.</summary>
      <param name="address">O campo a ser lido.</param>
      <returns>O último valor gravado no campo por qualquer processador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)">
      <summary>Lê o valor de um campo. O valor é o último gravado por qualquer processador em um computador, independentemente do número de processadores ou do estado do cache do processador.</summary>
      <param name="address">O campo a ser lido.</param>
      <returns>O último valor gravado no campo por qualquer processador.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)">
      <summary>Grava um valor em um campo imediatamente, para que o valor esteja visível para todos os processadores no computador.</summary>
      <param name="address">O campo no qual o valor deve ser gravado.</param>
      <param name="value">O valor a ser gravado.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)">
      <summary>Grava um valor em um campo imediatamente, para que o valor esteja visível para todos os processadores no computador.</summary>
      <param name="address">O campo no qual o valor deve ser gravado.</param>
      <param name="value">O valor a ser gravado.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)">
      <summary>Grava um valor em um campo imediatamente, para que o valor esteja visível para todos os processadores no computador.</summary>
      <param name="address">O campo no qual o valor deve ser gravado.</param>
      <param name="value">O valor a ser gravado.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)">
      <summary>Grava um valor em um campo imediatamente, para que o valor esteja visível para todos os processadores no computador.</summary>
      <param name="address">O campo no qual o valor deve ser gravado.</param>
      <param name="value">O valor a ser gravado.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)">
      <summary>Grava um valor em um campo imediatamente, para que o valor esteja visível para todos os processadores no computador.</summary>
      <param name="address">O campo no qual o valor deve ser gravado.</param>
      <param name="value">O valor a ser gravado.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)">
      <summary>Grava um valor em um campo imediatamente, para que o valor esteja visível para todos os processadores no computador.</summary>
      <param name="address">O campo no qual o valor deve ser gravado.</param>
      <param name="value">O valor a ser gravado.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)">
      <summary>Grava um valor em um campo imediatamente, para que o valor esteja visível para todos os processadores no computador.</summary>
      <param name="address">O campo no qual o valor deve ser gravado.</param>
      <param name="value">O valor a ser gravado.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)">
      <summary>Grava um valor em um campo imediatamente, para que o valor esteja visível para todos os processadores no computador.</summary>
      <param name="address">O campo no qual o valor deve ser gravado.</param>
      <param name="value">O valor a ser gravado.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)">
      <summary>Grava um valor em um campo imediatamente, para que o valor esteja visível para todos os processadores no computador.</summary>
      <param name="address">O campo no qual o valor deve ser gravado.</param>
      <param name="value">O valor a ser gravado.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)">
      <summary>Grava um valor em um campo imediatamente, para que o valor esteja visível para todos os processadores no computador.</summary>
      <param name="address">O campo no qual o valor deve ser gravado.</param>
      <param name="value">O valor a ser gravado.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)">
      <summary>Grava um valor em um campo imediatamente, para que o valor esteja visível para todos os processadores no computador.</summary>
      <param name="address">O campo no qual o valor deve ser gravado.</param>
      <param name="value">O valor a ser gravado.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)">
      <summary>Grava um valor em um campo imediatamente, para que o valor esteja visível para todos os processadores no computador.</summary>
      <param name="address">O campo no qual o valor deve ser gravado.</param>
      <param name="value">O valor a ser gravado.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)">
      <summary>Grava um valor em um campo imediatamente, para que o valor esteja visível para todos os processadores no computador.</summary>
      <param name="address">O campo no qual o valor deve ser gravado.</param>
      <param name="value">O valor a ser gravado.</param>
    </member>
    <member name="M:System.Threading.Thread.Yield">
      <summary>Faz com que o thread de chamada conceda a execução para outro thread que está pronto para ser executado no processador atual. O sistema operacional seleciona o thread de recebimento.</summary>
      <returns>
        <see langword="true" /> se o sistema operacional execução mudou a execução para outro thread; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.ThreadAbortException">
      <summary>A exceção gerada quando é feita uma chamada para o método <see cref="M:System.Threading.Thread.Abort(System.Object)" />. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="P:System.Threading.ThreadAbortException.ExceptionState">
      <summary>Obtém um objeto que contém informações específicas ao aplicativo relacionadas à anulação de thread.</summary>
      <returns>Um objeto que contém informações específicas do aplicativo.</returns>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventArgs">
      <summary>Fornece dados para o evento de <see cref="E:System.Windows.Forms.Application.ThreadException" /> .</summary>
    </member>
    <member name="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.ThreadExceptionEventArgs" />.</summary>
      <param name="t">O <see cref="T:System.Exception" /> que ocorreu.</param>
    </member>
    <member name="P:System.Threading.ThreadExceptionEventArgs.Exception">
      <summary>Obtém a <see cref="T:System.Exception" /> ocorrida.</summary>
      <returns>O <see cref="T:System.Exception" /> que ocorreu.</returns>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventHandler">
      <summary>Representa o método que manipulará o evento <see cref="E:System.Windows.Forms.Application.ThreadException" /> de um <see cref="T:System.Windows.Forms.Application" />.</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">Um <see cref="T:System.Threading.ThreadExceptionEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.Threading.ThreadInterruptedException">
      <summary>A exceção gerada quando um <see cref="T:System.Threading.Thread" /> é interrompido enquanto está em um estado de espera.</summary>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.ThreadInterruptedException" /> com propriedades padrão.</summary>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.ThreadInterruptedException" /> com dados serializados.</summary>
      <param name="info">O <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que mantém os dados de objeto serializados sobre a exceção que está sendo lançada.</param>
      <param name="context">O <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contém informações contextuais sobre a fonte ou o destino.</param>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.ThreadInterruptedException" /> com uma mensagem de erro especificada.</summary>
      <param name="message">A mensagem de erro que explica a razão da exceção.</param>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.ThreadInterruptedException" /> com uma mensagem de erro especificada e uma referência à exceção interna que é a causa da exceção.</summary>
      <param name="message">A mensagem de erro que explica a razão da exceção.</param>
      <param name="innerException">A exceção que é a causa da exceção atual. Caso o parâmetro <paramref name="innerException" /> não seja <see langword="null" />, a exceção atual é acionada em um bloco <see langword="catch" /> que identifica a exceção interna.</param>
    </member>
    <member name="T:System.Threading.ThreadPriority">
      <summary>Especifica a prioridade de agendamento de um <see cref="T:System.Threading.Thread" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.AboveNormal">
      <summary>O <see cref="T:System.Threading.Thread" /> pode ser agendado depois dos threads com a prioridade <see langword="Highest" /> e antes deles com a <see langword="Normal" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.BelowNormal">
      <summary>O <see cref="T:System.Threading.Thread" /> pode ser agendado depois dos threads com a prioridade <see langword="Normal" /> e antes deles com a <see langword="Lowest" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Highest">
      <summary>O <see cref="T:System.Threading.Thread" /> pode ser agendado antes dos threads com qualquer outra prioridade.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Lowest">
      <summary>O <see cref="T:System.Threading.Thread" /> pode ser agendado depois dos threads com qualquer outra prioridade.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Normal">
      <summary>O <see cref="T:System.Threading.Thread" /> pode ser agendado depois dos threads com a prioridade <see langword="AboveNormal" /> e antes deles com a <see langword="BelowNormal" />. Os threads têm a prioridade <see langword="Normal" /> por padrão.</summary>
    </member>
    <member name="T:System.Threading.ThreadStart">
      <summary>Representa o método que é executado em um <see cref="T:System.Threading.Thread" />.</summary>
    </member>
    <member name="T:System.Threading.ThreadStartException">
      <summary>A exceção gerada quando uma falha ocorre em um thread gerenciado depois que o thread do sistema operacional subjacente tiver sido iniciado, mas antes que o thread esteja pronto para executar o código do usuário.</summary>
    </member>
    <member name="T:System.Threading.ThreadState">
      <summary>Especifica os estados de execução de um <see cref="T:System.Threading.Thread" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Aborted">
      <summary>O estado do thread inclui <see cref="F:System.Threading.ThreadState.AbortRequested" /> e agora o thread está inativo, mas seu estado ainda não foi alterado para <see cref="F:System.Threading.ThreadState.Stopped" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.AbortRequested">
      <summary>O método <see cref="M:System.Threading.Thread.Abort(System.Object)" /> foi invocado no thread, mas o thread ainda não recebeu o <see cref="T:System.Threading.ThreadAbortException" /> pendente que tentará encerrá-lo.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Background">
      <summary>O thread está sendo executado como um thread em segundo plano, em vez de um thread de primeiro plano. Esse estado é controlado pela configuração da propriedade <see cref="P:System.Threading.Thread.IsBackground" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Running">
      <summary>O thread foi iniciado e ainda não foi interrompido.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Stopped">
      <summary>O thread foi interrompido.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.StopRequested">
      <summary>O thread está sendo solicitado a parar. Isso é somente para uso interno.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Suspended">
      <summary>O thread foi suspenso.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.SuspendRequested">
      <summary>O thread está sendo solicitado a suspender.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Unstarted">
      <summary>O método <see cref="M:System.Threading.Thread.Start" /> não foi invocado no thread.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.WaitSleepJoin">
      <summary>O thread está bloqueado. Isso pode ser o resultado de chamar <see cref="M:System.Threading.Thread.Sleep(System.Int32)" /> ou <see cref="M:System.Threading.Thread.Join" />, solicitar um bloqueio (por exemplo, chamando <see cref="M:System.Threading.Monitor.Enter(System.Object)" /> ou <see cref="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />) ou esperar em um objeto de sincronização de thread como <see cref="T:System.Threading.ManualResetEvent" />.</summary>
    </member>
    <member name="T:System.Threading.ThreadStateException">
      <summary>A exceção que é lançada quando um <see cref="T:System.Threading.Thread" /> está em um <see cref="P:System.Threading.Thread.ThreadState" /> inválido para a chamada de método.</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.ThreadStateException" /> com propriedades padrão.</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.ThreadStateException" /> com dados serializados.</summary>
      <param name="info">O <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que mantém os dados de objeto serializados sobre a exceção que está sendo lançada.</param>
      <param name="context">O <see cref="T:System.Runtime.Serialization.StreamingContext" /> que contém informações contextuais sobre a fonte ou o destino.</param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.ThreadStateException" /> com uma mensagem de erro especificada.</summary>
      <param name="message">A mensagem de erro que explica a razão da exceção.</param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Threading.ThreadStateException" /> com uma mensagem de erro especificada e uma referência à exceção interna que é a causa da exceção.</summary>
      <param name="message">A mensagem de erro que explica a razão da exceção.</param>
      <param name="innerException">A exceção que é a causa da exceção atual. Caso o parâmetro <paramref name="innerException" /> não seja <see langword="null" />, a exceção atual é acionada em um bloco <see langword="catch" /> que identifica a exceção interna.</param>
    </member>
  </members>
</doc>
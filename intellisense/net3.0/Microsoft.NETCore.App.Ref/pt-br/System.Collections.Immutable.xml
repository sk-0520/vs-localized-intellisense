<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Collections.Immutable</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Immutable.IImmutableDictionary`2">
      <summary>Representa uma coleção imutável de pares chave/valor.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="TKey">O tipo de chaves no dicionário.</typeparam>
      <typeparam name="TValue">O tipo de valores no dicionário.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)">
      <summary>Adiciona um elemento com a chave e o valor especificados ao dicionário.</summary>
      <param name="key">A chave do elemento a ser adicionada.</param>
      <param name="value">O valor do elemento a ser adicionado.</param>
      <returns>Um novo dicionário imutável que contém o par chave/valor adicional.</returns>
      <exception cref="T:System.ArgumentException">A chave especificada já existe no dicionário, mas tem um valor diferente.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Adiciona os pares chave/valor especificados ao dicionário.</summary>
      <param name="pairs">Os pares chave/valor a serem adicionados.</param>
      <returns>Um novo dicionário imutável que contém os pares chave/valor adicionais.</returns>
      <exception cref="T:System.ArgumentException">Uma das chaves fornecidas já existe no dicionário, mas tem um valor diferente.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Clear">
      <summary>Recupera um dicionário vazio que tem a mesma ordenação e regras de comparação de chave/valor que essa instância de dicionário.</summary>
      <returns>Um dicionário vazio com ordenação e regras de comparação de chave/valor equivalentes.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determina se o dicionário imutável contém o par chave/valor especificado.</summary>
      <param name="pair">O par chave/valor a ser localizado.</param>
      <returns>
        <see langword="true" /> se o par chave/valor especificado for encontrado no dicionário; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)">
      <summary>Remove o elemento com a chave especificada do dicionário imutável.</summary>
      <param name="key">A chave do elemento a ser removido.</param>
      <returns>Um novo dicionário imutável com o elemento especificado removido; ou esta instância, se a chave especificada não puder ser encontrada no dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Remove os elementos do dicionário imutável com as chaves especificadas.</summary>
      <param name="keys">As chaves dos elementos a serem removidos.</param>
      <returns>Um novo dicionário imutável com as chaves especificadas removidas; ou esta instância, se a chave especificada não puder ser encontrada no dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)">
      <summary>Define a chave especificada e o valor no dicionário imutável, possivelmente substituindo um valor existente para a chave.</summary>
      <param name="key">A chave da entrada a ser adicionada.</param>
      <param name="value">O valor de chave a ser definido.</param>
      <returns>Um novo dicionário imutável que contém o par chave/valor especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Define os pares chave/valor especificados no dicionário imutável, possivelmente substituindo valores existente para as chaves.</summary>
      <param name="items">Os pares chave/valor a serem definidos no dicionário. Se qualquer uma das chaves já existir no dicionário, este método substituirá os respectivos valores anteriores.</param>
      <returns>Um novo dicionário imutável que contém os pares chave/valor especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary>Determina se este dicionário contém uma chave especificada.</summary>
      <param name="equalKey">A chave a ser pesquisada.</param>
      <param name="actualKey">A chave correspondente localizada no dicionário, se encontrada, ou <c>equalkey</c> se nenhuma correspondência for encontrada.</param>
      <returns>
        <see langword="true" /> se uma correspondência para <paramref name="equalKey" /> for encontrada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableList`1">
      <summary>Representa uma lista de elementos que não pode ser modificada.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T">O tipo dos elementos na lista.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Add(`0)">
      <summary>Faz uma cópia da lista e adiciona o objeto especificado ao final da lista copiada.</summary>
      <param name="value">O objeto a ser adicionado à lista.</param>
      <returns>Uma nova lista com o objeto adicionado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Faz uma cópia da lista e adiciona os objetos especificados ao final da lista copiada.</summary>
      <param name="items">Os objetos a serem adicionados à lista.</param>
      <returns>Uma nova lista com os elementos adicionados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Clear">
      <summary>Cria uma lista com todos os itens removidos, mas com a mesma semântica de classificação e ordenação desta lista.</summary>
      <returns>Uma lista vazia que tem as mesmas semânticas de classificação e ordenação que essa instância.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Pesquisa o objeto especificado e retorna o índice baseado em zero da primeira ocorrência em um intervalo de elementos no <see cref="T:System.Collections.Immutable.IImmutableList`1" /> que começa no índice especificado e contém o número de elementos especificado.</summary>
      <param name="item">O objeto a ser localizado no <see cref="T:System.Collections.Immutable.IImmutableList`1" />. Esse valor pode ser nulo para tipos de referência.</param>
      <param name="index">Os índices iniciais com base em zero da pesquisa. 0 (zero) é válido em uma lista vazia.</param>
      <param name="count">O número de elementos na seção a ser pesquisada.</param>
      <param name="equalityComparer">O comparador de igualdade a ser usado para localizar <paramref name="item" />.</param>
      <returns>O índice baseado em zero da primeira ocorrência de <paramref name="item" /> no intervalo de elementos na <see cref="T:System.Collections.Immutable.IImmutableList`1" /> que começa em <paramref name="index" /> e contém o número de elementos <paramref name="count" />, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)">
      <summary>Insere o elemento especificado no índice especificado na lista imutável.</summary>
      <param name="index">O índice baseado em zero no qual inserir o valor.</param>
      <param name="element">O objeto a ser inserido.</param>
      <returns>Uma nova lista imutável que inclui o elemento especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Insere os elementos especificados no índice especificado na lista imutável.</summary>
      <param name="index">O índice baseado em zero no qual os novos elementos devem ser inseridos.</param>
      <param name="items">Os elementos a serem inseridos.</param>
      <returns>Uma nova lista imutável que inclui os elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Pesquisa o objeto especificado e retorna o índice baseado em zero da última ocorrência no intervalo de elementos na <see cref="T:System.Collections.Immutable.IImmutableList`1" /> que contém o número de elementos especificado e termina no índice especificado.</summary>
      <param name="item">O objeto a ser localizado na lista. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <param name="index">O índice inicial com base em zero da pesquisa. 0 (zero) é válido em uma lista vazia.</param>
      <param name="count">O número de elementos na seção a ser pesquisada.</param>
      <param name="equalityComparer">O comparador de igualdade para corresponder a <paramref name="item" />.</param>
      <returns>Retorna <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Remove a primeira ocorrência de um objeto especificado dessa lista imutável.</summary>
      <param name="value">O objeto a ser removido da lista.</param>
      <param name="equalityComparer">O comparador de igualdade a ser usado para localizar <paramref name="value" />.</param>
      <returns>Uma nova lista com o objeto especificado removido.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary>Remove todos os elementos que correspondem às condições definidas pelo predicado especificado.</summary>
      <param name="match">O delegado que define as condições dos elementos a serem removidos.</param>
      <returns>Uma nova lista imutável com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)">
      <summary>Remove o elemento no índice especificado da lista imutável.</summary>
      <param name="index">O índice do elemento a ser removido.</param>
      <returns>Uma nova lista com o elemento removido.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Remove o objeto especificado da lista.</summary>
      <param name="items">Os objetos a serem removidos da lista.</param>
      <param name="equalityComparer">O comparador de igualdade a ser usado para determinar se <paramref name="items" /> corresponde a todos os objetos na lista.</param>
      <returns>Uma nova lista imutável com os objetos especificados removidos, se <paramref name="items" /> tiver correspondido a objetos na lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Remove um intervalo de elementos do <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</summary>
      <param name="index">O índice inicial baseado em zero do intervalo de elementos a serem removidos.</param>
      <param name="count">O número de elementos a serem removidos.</param>
      <returns>Uma nova lista imutável com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Retorna uma nova lista com o elemento de primeira correspondência na lista substituída pelo elemento especificado.</summary>
      <param name="oldValue">O elemento a ser substituído.</param>
      <param name="newValue">O elemento pelo qual substituir a primeira ocorrência de <paramref name="oldValue" /></param>
      <param name="equalityComparer">O comparador de igualdade a ser usado para a correspondência com <paramref name="oldValue" />.</param>
      <returns>Uma nova lista que contém <paramref name="newValue" />, mesmo que <paramref name="oldvalue" /> seja o mesmo que <paramref name="newValue" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> não existe na lista.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)">
      <summary>Substitui um elemento na lista na posição especificada, pelo elemento especificado.</summary>
      <param name="index">A posição na lista do elemento a ser substituído.</param>
      <param name="value">O elemento pelo qual substituir o elemento antigo.</param>
      <returns>Uma nova lista que contém o novo elemento, mesmo que o elemento no local especificado seja o mesmo que o novo elemento.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableQueue`1">
      <summary>Representa uma coleção imutável de objetos primeiro a entrar, primeiro a sair.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T">O tipo de elementos na fila.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Clear">
      <summary>Retorna uma nova fila com todos os elementos removidos.</summary>
      <returns>Uma fila imutável vazia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Dequeue">
      <summary>Remove o primeiro elemento na fila imutável e retorna a nova fila.</summary>
      <returns>A nova fila imutável com o primeiro elemento removido. Esse valor nunca é <c>null</c>.</returns>
      <exception cref="T:System.InvalidOperationException">A fila está vazia.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)">
      <summary>Adiciona um elemento ao final da fila imutável e retorna a nova fila.</summary>
      <param name="value">O elemento a ser adicionado.</param>
      <returns>A nova fila imutável com o elemento especificado adicionado.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableQueue`1.IsEmpty">
      <summary>Obtém um valor que indica se essa fila imutável está vazia.</summary>
      <returns>
        <see langword="true" />Se essa fila estiver vazia; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Peek">
      <summary>Retorna o elemento no início da fila imutável sem removê-lo.</summary>
      <returns>O elemento no início da fila.</returns>
      <exception cref="T:System.InvalidOperationException">A fila está vazia.</exception>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableSet`1">
      <summary>Representa um conjunto de elementos que só pode ser modificado por meio da criação de uma nova instância do conjunto.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T">O tipo de elemento armazenado no conjunto.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Add(`0)">
      <summary>Adiciona o elemento especificado a este conjunto imutável.</summary>
      <param name="value">O elemento a ser adicionado.</param>
      <returns>Um novo conjunto com o elemento adicionado ou esse conjunto se o elemento já está estiver nele.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Clear">
      <summary>Recupera um conjunto imutável vazio que tem as mesmas semânticas de classificação e ordenação que essa instância.</summary>
      <returns>Um conjunto vazio que tem as mesmas semânticas de classificação e ordenação que essa instância.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)">
      <summary>Determina se este conjunto imutável contém um elemento especificado.</summary>
      <param name="value">O elemento a ser localizado no conjunto.</param>
      <returns>
        <see langword="true" /> se o conjunto contém o valor especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Remove os elementos na coleção especificada do conjunto imutável atual.</summary>
      <param name="other">A coleção de itens a serem removidos desse conjunto.</param>
      <returns>Um novo conjunto com os itens removidos; ou o conjunto original se nenhum dos itens tiverem sido encontrados no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Cria um conjunto imutável que contenha somente elementos que existam nesse conjunto e no conjunto especificado.</summary>
      <param name="other">A coleção a ser comparada com o <see cref="T:System.Collections.Immutable.IImmutableSet`1" /> atual.</param>
      <returns>Um novo conjunto imutável que contém elementos que existem nos dois conjuntos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto imutável atual é um subconjunto apropriado (estrito) da coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual for um subconjunto apropriado da coleção especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto imutável atual é um superconjunto apropriado (estrito) da coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual for um superconjunto apropriado da coleção especificada; caso contrário, falso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto imutável atual é um subconjunto de uma coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual for um subconjunto da coleção especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto imutável atual é um superconjunto de uma coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual for um superconjunto da coleção especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto imutável atual se sobrepõe à coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual e a coleção especificada compartilharem pelo menos um elemento comum; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)">
      <summary>Remove o elemento especificado desse conjunto imutável.</summary>
      <param name="value">O elemento a ser removido.</param>
      <returns>Um novo conjunto com o elemento especificado removido ou o conjunto atual se o elemento não puder ser encontrado no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto imutável atual e a coleção especificada contêm os mesmos elementos.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se os conjuntos forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Cria um conjunto imutável que contém somente os elementos que estão presentes no conjunto atual ou na coleção especificada, mas não em ambos.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>Um novo conjunto que contém os elementos que estão presentes somente no conjunto atual ou na coleção especificada, mas não em ambos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)">
      <summary>Determina se o conjunto contém um valor especificado.</summary>
      <param name="equalValue">O valor a ser procurado.</param>
      <param name="actualValue">O valor correspondente do conjunto, se encontrado, ou <c>equalvalue</c> se não houver nenhuma correspondência.</param>
      <returns>
        <see langword="true" /> se um valor correspondente for encontrado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Cria um novo conjunto imutável que contém todos os elementos que estão presentes no conjunto atual ou na coleção especificada.</summary>
      <param name="other">A coleção da qual os elementos serão adicionados.</param>
      <returns>Um novo conjunto imutável com os itens adicionados; ou o conjunto original se todos os itens já estiverem no conjunto.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableStack`1">
      <summary>Representa uma coleção imutável LIFO (último a entrar, primeiro a sair).  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T">O tipo de elementos na pilha.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Clear">
      <summary>Remove todos os objetos da pilha imutável.</summary>
      <returns>Uma pilha imutável vazia.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableStack`1.IsEmpty">
      <summary>Obtém um valor que indica se essa pilha imutável está vazia.</summary>
      <returns>
        <see langword="true" />Se essa pilha estiver vazia; caso contrário<see langword="false" />,.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Peek">
      <summary>Retorna o elemento da parte superior da pilha imutável sem removê-lo.</summary>
      <returns>O elemento na parte superior da pilha.</returns>
      <exception cref="T:System.InvalidOperationException">A pilha está vazia.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Pop">
      <summary>Remove o elemento que está na parte superior da pilha imutável e retorna a nova pilha.</summary>
      <returns>A nova pilha; nunca <c>null</c></returns>
      <exception cref="T:System.InvalidOperationException">A pilha está vazia.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Push(`0)">
      <summary>Insere um elemento na parte superior da pilha imutável e retorna a nova pilha.</summary>
      <param name="value">O elemento a ser enviado por push para a pilha.</param>
      <returns>A nova pilha.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray">
      <summary>Fornece métodos para criar uma matriz que é imutável, o que significa que ela não pode ser alterada depois de criada.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)">
      <summary>Pesquisa um elemento especificado na matriz classificada imutável usando o comparador padrão e retorna o índice baseado em zero do elemento, se ele é encontrado.</summary>
      <param name="array">A matriz classificada para pesquisar.</param>
      <param name="value">O objeto a ser procurado.</param>
      <typeparam name="T">O tipo de elemento armazenado na matriz.</typeparam>
      <returns>O índice baseado em zero do item na matriz, se o item for encontrado; caso contrário, um número negativo que é o complemento bit a bit do índice do próximo elemento maior que <paramref name="value" /> ou, se não houver nenhum elemento maior, o complemento bit a bit de <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> não implementa <see cref="T:System.IComparable" /> ou a pesquisa encontra um elemento que não implementa <see cref="T:System.IComparable" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})">
      <summary>Pesquisa um elemento especificado em uma matriz classificada imutável e retorna o índice baseado em zero do elemento, se ele é encontrado.</summary>
      <param name="array">A matriz classificada para pesquisar.</param>
      <param name="value">O objeto a ser procurado.</param>
      <param name="comparer">A implementação de comparador a ser usada na comparação de elementos ou nulo para usar o comparador padrão.</param>
      <typeparam name="T">O tipo de elemento armazenado na matriz.</typeparam>
      <returns>O índice baseado em zero do item na matriz, se o item for encontrado; caso contrário, um número negativo que é o complemento bit a bit do índice do próximo elemento maior que <paramref name="value" /> ou, se não houver nenhum elemento maior, o complemento bit a bit de <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> é nulo e <paramref name="value" /> não implementa <see cref="T:System.IComparable" /> ou a pesquisa encontra um elemento que não implementa <see cref="T:System.IComparable" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)">
      <summary>Pesquisa um elemento especificado em uma matriz classificada imutável e retorna o índice baseado em zero do elemento, se ele é encontrado.</summary>
      <param name="array">A matriz classificada para pesquisar.</param>
      <param name="index">O índice inicial do intervalo a ser procurado.</param>
      <param name="length">O tamanho do intervalo a ser procurado.</param>
      <param name="value">O objeto a ser procurado.</param>
      <typeparam name="T">O tipo de elemento armazenado na matriz.</typeparam>
      <returns>O índice baseado em zero do item na matriz, se o item for encontrado; caso contrário, um número negativo que é o complemento bit a bit do índice do próximo elemento maior que <paramref name="value" /> ou, se não houver nenhum elemento maior, o complemento bit a bit de <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> não implementa <see cref="T:System.IComparable" /> ou a pesquisa encontra um elemento que não implementa <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> e <paramref name="length" /> não especificam um intervalo válido em <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que o limite inferior de <paramref name="array" />.

ou -

<paramref name="length" /> é menor que zero.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>Pesquisa um elemento especificado em uma matriz classificada imutável e retorna o índice baseado em zero do elemento.</summary>
      <param name="array">A matriz classificada para pesquisar.</param>
      <param name="index">O índice inicial do intervalo a ser procurado.</param>
      <param name="length">O tamanho do intervalo a ser procurado.</param>
      <param name="value">O objeto a ser procurado.</param>
      <param name="comparer">O comparador a ser usado na comparação da igualdade de elementos ou <see langword="null" /> para usar o comparador padrão.</param>
      <typeparam name="T">O tipo de elemento armazenado na matriz.</typeparam>
      <returns>O índice baseado em zero do item na matriz, se o item for encontrado; caso contrário, um número negativo que é o complemento bit a bit do índice do próximo elemento maior que <paramref name="value" /> ou, se não houver nenhum elemento maior, o complemento bit a bit de <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> é nulo e <paramref name="value" /> não implementa <see cref="T:System.IComparable" /> ou a pesquisa encontra um elemento que não implementa <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> e <paramref name="length" /> não especificam um intervalo válido em <paramref name="array" />.

ou -

<paramref name="comparer" /> é <see langword="null" />, e <paramref name="value" /> é de um tipo que não é compatível com os elementos de <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que o limite inferior de <paramref name="array" />.

ou -

<paramref name="length" /> é menor que zero.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1">
      <summary>Cria uma matriz imutável vazia.</summary>
      <typeparam name="T">O tipo de elementos armazenados na matriz.</typeparam>
      <returns>Uma matriz imutável vazia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0)">
      <summary>Cria uma matriz imutável que contém o objeto especificado.</summary>
      <param name="item">O objeto a ser armazenado na matriz.</param>
      <typeparam name="T">O tipo de elementos armazenados na matriz.</typeparam>
      <returns>Uma matriz imutável que contém o objeto especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)">
      <summary>Cria uma matriz imutável que contém os objetos especificados.</summary>
      <param name="item1">O primeiro objeto a ser armazenado na matriz.</param>
      <param name="item2">O segundo objeto a ser armazenado na matriz.</param>
      <typeparam name="T">O tipo de elementos armazenados na matriz.</typeparam>
      <returns>Uma matriz imutável que contém os objetos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)">
      <summary>Cria uma matriz imutável que contém os objetos especificados.</summary>
      <param name="item1">O primeiro objeto a ser armazenado na matriz.</param>
      <param name="item2">O segundo objeto a ser armazenado na matriz.</param>
      <param name="item3">O terceiro objeto a ser armazenado na matriz.</param>
      <typeparam name="T">O tipo de elementos armazenados na matriz.</typeparam>
      <returns>Uma matriz imutável que contém os objetos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)">
      <summary>Cria uma matriz imutável que contém os objetos especificados.</summary>
      <param name="item1">O primeiro objeto a ser armazenado na matriz.</param>
      <param name="item2">O segundo objeto a ser armazenado na matriz.</param>
      <param name="item3">O terceiro objeto a ser armazenado na matriz.</param>
      <param name="item4">O quarto objeto a ser armazenado na matriz.</param>
      <typeparam name="T">O tipo de elementos armazenados na matriz.</typeparam>
      <returns>Uma matriz imutável que contém os objetos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[])">
      <summary>Cria uma matriz imutável com base na matriz de objetos especificada.</summary>
      <param name="items">A matriz de objetos com os quais preencher a matriz.</param>
      <typeparam name="T">O tipo de elementos armazenados na matriz.</typeparam>
      <returns>Uma matriz imutável que contém a matriz de itens.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)">
      <summary>Cria uma matriz imutável com objetos especificados de outra matriz.</summary>
      <param name="items">A matriz de origem dos objetos.</param>
      <param name="start">O índice do primeiro elemento a ser copiado de <paramref name="items" />.</param>
      <param name="length">O número de elementos de <paramref name="items" /> a ser incluído nessa matriz imutável.</param>
      <typeparam name="T">O tipo de elementos armazenados na matriz.</typeparam>
      <returns>Uma matriz imutável que contém os objetos especificados da matriz de origem.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)">
      <summary>Cria uma matriz imutável com os objetos especificados de outra matriz imutável.</summary>
      <param name="items">A matriz de origem dos objetos.</param>
      <param name="start">O índice do primeiro elemento a ser copiado de <paramref name="items" />.</param>
      <param name="length">O número de elementos de <paramref name="items" /> a ser incluído nessa matriz imutável.</param>
      <typeparam name="T">O tipo de elementos armazenados na matriz.</typeparam>
      <returns>Uma matriz imutável que contém os objetos especificados da matriz de origem.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1">
      <summary>Cria uma matriz mutável que pode ser convertida em uma <see cref="T:System.Collections.Immutable.ImmutableArray" /> sem alocação de nova memória.</summary>
      <typeparam name="T">O tipo de elementos armazenados no construtor.</typeparam>
      <returns>Uma matriz mutável do tipo especificado que pode ser convertida com eficiência em uma matriz imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)">
      <summary>Cria uma matriz mutável que pode ser convertida em uma <see cref="T:System.Collections.Immutable.ImmutableArray" /> sem alocação de nova memória.</summary>
      <param name="initialCapacity">A capacidade inicial do construtor.</param>
      <typeparam name="T">O tipo de elementos armazenados no construtor.</typeparam>
      <returns>Uma matriz mutável do tipo especificado que pode ser convertida com eficiência em uma matriz imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Cria uma nova <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> preenchida com os itens especificados.</summary>
      <param name="items">Os elementos a serem adicionados à matriz.</param>
      <typeparam name="T">O tipo de elemento armazenado na matriz.</typeparam>
      <returns>Uma matriz imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary>Inicializa uma nova instância do struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items">A matriz de origem com a qual inicializar a matriz resultante.</param>
      <param name="selector">A função a ser aplicada a cada elemento da matriz de origem.</param>
      <typeparam name="TSource" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})">
      <summary>Inicializa uma nova instância do struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items">A matriz de origem com a qual inicializar a matriz resultante.</param>
      <param name="start">O índice do primeiro elemento da matriz de origem a ser incluído na matriz resultante.</param>
      <param name="length">O número de elementos da matriz de origem a ser incluído na matriz resultante.</param>
      <param name="selector">A função a ser aplicada a cada elemento da matriz de origem incluído na matriz resultante.</param>
      <typeparam name="TSource" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)">
      <summary>Inicializa uma nova instância do struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items">A matriz de origem com a qual inicializar a matriz resultante.</param>
      <param name="selector">A função a ser aplicada a cada elemento da matriz de origem.</param>
      <param name="arg">Um argumento a ser passado para a função de mapeamento do seletor.</param>
      <typeparam name="TSource" />
      <typeparam name="TArg" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)">
      <summary>Inicializa uma nova instância do struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items">A matriz de origem com a qual inicializar a matriz resultante.</param>
      <param name="start">O índice do primeiro elemento da matriz de origem a ser incluído na matriz resultante.</param>
      <param name="length">O número de elementos da matriz de origem a ser incluído na matriz resultante.</param>
      <param name="selector">A função a ser aplicada a cada elemento da matriz de origem incluído na matriz resultante.</param>
      <param name="arg">Um argumento a ser passado para a função de mapeamento do seletor.</param>
      <typeparam name="TSource" />
      <typeparam name="TArg" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Cria uma matriz imutável com base na coleção especificada.</summary>
      <param name="items">A coleção de objetos a serem copiados na matriz imutável.</param>
      <typeparam name="TSource">O tipo de elementos contidos em <paramref name="items" />.</typeparam>
      <returns>Uma matriz imutável que contém a coleção especificada de objetos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Cria uma matriz imutável do conteúdo atual da matriz do construtor.</summary>
      <param name="builder">O construtor para o qual criar a matriz imutável.</param>
      <typeparam name="TSource">O tipo de elementos contidos na matriz imutável.</typeparam>
      <returns>Uma matriz imutável que é preenchida com o conteúdo atual da matriz do construtor.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1">
      <summary>Representa uma matriz que é imutável, o que significa que ela não pode ser alterada depois de criada.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T">O tipo de elemento armazenado pela matriz.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Add(`0)">
      <summary>Retorna uma cópia da matriz original com o item especificado adicionado ao final.</summary>
      <param name="item">O item a ser adicionado ao final da matriz.</param>
      <returns>Uma nova matriz com o item especificado adicionado ao final.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Retorna uma cópia da matriz original com os elementos especificados adicionados ao final da matriz.</summary>
      <param name="items">Os elementos a serem adicionados à matriz.</param>
      <returns>Uma nova matriz com os elementos adicionados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Retorna uma cópia da matriz original com os elementos especificados adicionados ao final da matriz.</summary>
      <param name="items">Os elementos a serem adicionados à matriz.</param>
      <returns>Uma nova matriz com os elementos adicionados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.As``1">
      <summary>Retorna uma nova matriz imutável que contém os elementos dessa matriz convertidos em um tipo diferente.</summary>
      <typeparam name="TOther">O tipo de elemento de matriz a ser retornado.</typeparam>
      <returns>Uma matriz imutável que contém os elementos dessa matriz convertidos em um tipo diferente. Se a conversão falhar, retorna uma matriz cuja propriedade <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retorna <see langword="true" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsMemory">
      <summary>Cria uma nova região de memória somente leitura sobre essa matriz imutável.</summary>
      <returns>A representação de memória somente leitura dessa matriz imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsSpan">
      <summary>Cria uma novo intervalo somente leitura sobre essa matriz imutável.</summary>
      <returns>A representação de intervalo somente leitura dessa matriz imutável.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Builder">
      <summary>Um acessador de matriz gravável que pode ser convertido em uma instância <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> sem alocar memória extra.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)">
      <summary>Adiciona o item especificado à matriz.</summary>
      <param name="item">O objeto a ser adicionado à matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])">
      <summary>Adiciona os itens especificados ao final da matriz.</summary>
      <param name="items">Os itens a serem adicionados à matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)">
      <summary>Adiciona os itens especificados ao final da matriz.</summary>
      <param name="items">Os itens a serem adicionados à matriz.</param>
      <param name="length">O número de elementos da matriz de origem a serem adicionados.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Adiciona os itens especificados ao final da matriz.</summary>
      <param name="items">Os itens a serem adicionados à matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Adiciona os itens especificados ao final da matriz.</summary>
      <param name="items">Os itens a serem adicionados à matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)">
      <summary>Adiciona os itens especificados ao final da matriz.</summary>
      <param name="items">Os itens a serem adicionados à matriz.</param>
      <param name="length">O número de elementos da matriz de origem a serem adicionados.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)">
      <summary>Adiciona os itens especificados ao final da matriz.</summary>
      <param name="items">Os itens a serem adicionados à matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])">
      <summary>Adiciona ao final da matriz os itens especificados que derivam do tipo atualmente na matriz.</summary>
      <param name="items">Os itens a serem adicionados ao final da matriz.</param>
      <typeparam name="TDerived">O tipo que deriva do tipo de item que já está na matriz.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Adiciona ao final da matriz os itens especificados que derivam do tipo atualmente na matriz</summary>
      <param name="items">Os itens a serem adicionados ao final da matriz.</param>
      <typeparam name="TDerived">O tipo que deriva do tipo de item que já está na matriz.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Adiciona ao final da matriz os itens especificados que derivam do tipo atualmente na matriz.</summary>
      <param name="items">Os itens a serem adicionados ao final da matriz.</param>
      <typeparam name="TDerived">O tipo que deriva do tipo de item que já está na matriz.</typeparam>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">
      <summary>Obtém ou define o comprimento da matriz interna. Quando definido, a matriz interna será realocada para a capacidade determinada se ainda não tiver o tamanho especificado.</summary>
      <returns>O comprimento da matriz interna.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Clear">
      <summary>Remove todos os itens da matriz.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)">
      <summary>Determina se a matriz contém um valor específico.</summary>
      <param name="item">O objeto a ser localizado na matriz.</param>
      <returns>
        <see langword="true" /> se o objeto for encontrado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)">
      <summary>Copia o conteúdo atual na matriz especificada.</summary>
      <param name="array">A matriz para a qual copiar.</param>
      <param name="index">O índice para iniciar a operação de cópia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">
      <summary>Obtém ou define o número de itens na matriz.</summary>
      <returns>O número de itens na matriz.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator">
      <summary>Obtém um objeto que pode ser usado para iterar na coleção.</summary>
      <returns>Um objeto que pode ser usado para iterar na coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)">
      <summary>Determina o índice de um item específico na matriz.</summary>
      <param name="item">O item a ser localizado na matriz.</param>
      <returns>O índice de <paramref name="item" /> se for encontrado na lista; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)">
      <summary>Determina o índice do item especificado.</summary>
      <param name="item">O item a ser localizado na matriz.</param>
      <param name="startIndex">A posição inicial da pesquisa.</param>
      <returns>O índice de <paramref name="item" /> se for encontrado na lista; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary>Determina o índice do item especificado.</summary>
      <param name="item">O item a ser localizado na matriz.</param>
      <param name="startIndex">A posição inicial da pesquisa.</param>
      <param name="count">O número de elementos a serem pesquisados.</param>
      <returns>O índice de <paramref name="item" /> se for encontrado na lista; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Determina o índice para o item especificado.</summary>
      <param name="item">O item a ser localizado na matriz.</param>
      <param name="startIndex">O índice no qual iniciar a pesquisa.</param>
      <param name="count">A posição inicial da pesquisa.</param>
      <param name="equalityComparer">O comparador de igualdade a ser usado na pesquisa</param>
      <returns>O índice de <paramref name="item" /> se for encontrado na lista; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)">
      <summary>Insere um item na matriz no índice especificado.</summary>
      <param name="index">O índice baseado em zero no qual inserir o item.</param>
      <param name="item">O objeto a ser inserido na matriz.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)">
      <summary>Obtém ou define o item no índice especificado.</summary>
      <param name="index">O índice do item a ser obtido ou definido.</param>
      <returns>O item no índice especificado.</returns>
      <exception cref="T:System.IndexOutOfRangeException">O índice especificado não está na matriz.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ItemRef(System.Int32)">
      <summary>Obtém uma referência somente leitura ao elemento no índice especificado.</summary>
      <param name="index">O índice do item.</param>
      <returns>A referência somente leitura ao elemento no índice especificado.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> é maior ou igual à contagem de matriz.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)">
      <summary>Determina o índice baseado em zero da última ocorrência do item especificado nessa matriz.</summary>
      <param name="item">O item a ser procurado.</param>
      <returns>O índice baseado em zero em que o item foi encontrado; ou -1 se não puder ser encontrado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary>Determina o índice baseado em zero da última ocorrência do item especificado nessa matriz.</summary>
      <param name="item">O item a ser procurado.</param>
      <param name="startIndex">A posição inicial da pesquisa.</param>
      <returns>O índice baseado em zero na matriz em que o item foi encontrado; ou -1 se não puder ser encontrado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>Determina o índice baseado em zero da última ocorrência do item especificado nessa matriz.</summary>
      <param name="item">O item a ser procurado.</param>
      <param name="startIndex">A posição inicial da pesquisa.</param>
      <param name="count">O número de elementos a serem pesquisados.</param>
      <returns>O índice baseado em zero na matriz em que o item foi encontrado; ou -1 se não puder ser encontrado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Determina o índice baseado em zero da última ocorrência do item especificado nessa matriz.</summary>
      <param name="item">O item a ser procurado.</param>
      <param name="startIndex">A posição inicial da pesquisa.</param>
      <param name="count">O número de elementos a serem pesquisados.</param>
      <param name="equalityComparer">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns>O índice baseado em zero na matriz em que o item foi encontrado; ou -1 se não puder ser encontrado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable">
      <summary>Extrai a matriz interna como uma <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> e a substitui por uma matriz de comprimento zero.</summary>
      <exception cref="T:System.InvalidOperationException">Quando <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count" /> não é igual a <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)">
      <summary>Remove o elemento especificado.</summary>
      <param name="element">O item a ser removido.</param>
      <returns>
        <see langword="true" /> se <paramref name="element" /> for encontrado e removido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)">
      <summary>Remove o item no índice especificado da matriz.</summary>
      <param name="index">O índice com base em zero do item a ser removido.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Reverse">
      <summary>Inverte a ordem de elementos na coleção.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort">
      <summary>Classifica o conteúdo da matriz.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Classifica o conteúdo da matriz.</summary>
      <param name="comparer">O comparador a ser usado para classificação. Se o comparador for <see langword="null" />, o comparador padrão para o tipo de elementos na matriz será usado.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Comparison{`0})">
      <summary>Classifica os elementos em toda a matriz usando a <see cref="T:System.Comparison`1" /> especificada.</summary>
      <param name="comparison">O <see cref="T:System.Comparison`1" /> a ser usado na comparação de elementos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> é nulo.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Classifica o conteúdo da matriz.</summary>
      <param name="index">O índice inicial para a classificação.</param>
      <param name="count">O número de elementos a serem incluídos na classificação.</param>
      <param name="comparer">O comparador a ser usado para classificação. Se o comparador for <see langword="null" />, o comparador padrão para o tipo de elementos na matriz será usado.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retorna um enumerador que itera na matriz.</summary>
      <returns>Um enumerador que itera na matriz.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera na matriz.</summary>
      <returns>Um enumerador que itera na matriz.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray">
      <summary>Cria uma nova matriz com o conteúdo atual deste <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</summary>
      <returns>Uma nova matriz com o conteúdo deste <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable">
      <summary>Retorna uma matriz imutável que contém o conteúdo atual deste <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</summary>
      <returns>Uma matriz imutável que contém o conteúdo atual deste <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastArray``1">
      <summary>Inicializa uma nova instância do struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> convertendo a matriz subjacente em uma matriz do tipo <paramref name="TOther" />.</summary>
      <typeparam name="TOther" />
      <exception cref="T:System.InvalidCastException">Gerada se a conversão for inválida.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Inicializa uma nova instância do struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> com base no conteúdo de uma instância existente, permitindo que uma conversão estática covariante reutilize eficientemente a matriz existente.</summary>
      <param name="items">A matriz com a qual inicializar a matriz. Nenhuma cópia é feita.</param>
      <typeparam name="TDerived" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Clear">
      <summary>Retorna uma matriz com todos os elementos removidos.</summary>
      <returns>Uma matriz com todos os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)">
      <summary>Determina se o item especificado existe na matriz.</summary>
      <param name="item">O item a ser procurado.</param>
      <returns>
        <see langword="true" /> se o item especificado foi encontrado na matriz; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])">
      <summary>Copia o conteúdo dessa matriz na matriz especificada.</summary>
      <param name="destination">A matriz para a qual copiar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)">
      <summary>Copia o conteúdo dessa matriz para a matriz especificada, começando no índice de destino especificado.</summary>
      <param name="destination">A matriz para a qual copiar.</param>
      <param name="destinationIndex">O índice em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Copia os itens especificados nessa matriz para a matriz especificada, no índice inicial especificado.</summary>
      <param name="sourceIndex">O índice em que a cópia começa nessa matriz.</param>
      <param name="destination">A matriz para a qual copiar.</param>
      <param name="destinationIndex">O índice em <paramref name="array" /> no qual a cópia começa.</param>
      <param name="length">O número de elementos a serem copiados dessa matriz.</param>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableArray`1.Empty">
      <summary>Obtém uma matriz imutável vazia.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Enumerator">
      <summary>Um enumerador de matriz.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Enumerator.Current">
      <summary>Obtém a item atual.</summary>
      <returns>O item atual.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext">
      <summary>Avança para o próximo valor na matriz.</summary>
      <returns>
        <see langword="true" /> se existe outro item na matriz; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Indica se a matriz especificada é igual a essa matriz.</summary>
      <param name="other">Um objeto para comparação com esse objeto.</param>
      <returns>
        <see langword="true" /> se <paramref name="other" /> for igual a essa matriz; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)">
      <summary>Determina se essa matriz é igual ao objeto especificado.</summary>
      <param name="obj">O <see cref="T:System.Object" /> para comparar com essa matriz.</param>
      <returns>
        <see langword="true" /> se essa matriz for igual a <paramref name="obj" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator">
      <summary>Retorna um enumerador que itera no conteúdo da matriz.</summary>
      <returns>Um enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetHashCode">
      <summary>Retorna um código hash para essa instância.</summary>
      <returns>Um código hash para essa instância, adequado para uso em algoritmos de hash e estruturas de dados como uma tabela de hash.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)">
      <summary>Procura o item especificado na matriz.</summary>
      <param name="item">O item a ser procurado.</param>
      <returns>A posição do índice baseado em zero do item caso seja encontrado, ou -1 caso não seja.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)">
      <summary>Procura o item especificado na matriz.</summary>
      <param name="item">O item a ser procurado.</param>
      <param name="startIndex">O índice no qual iniciar a pesquisa.</param>
      <returns>A posição do índice baseado em zero do item caso seja encontrado, ou -1 caso não seja.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Procura o item especificado na matriz.</summary>
      <param name="item">O item a ser procurado.</param>
      <param name="startIndex">O índice no qual iniciar a pesquisa.</param>
      <param name="equalityComparer">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns>A posição do índice baseado em zero do item caso seja encontrado, ou -1 caso não seja.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary>Procura o item especificado na matriz.</summary>
      <param name="item">O item a ser procurado.</param>
      <param name="startIndex">O índice no qual iniciar a pesquisa.</param>
      <param name="count">O número de elementos a serem pesquisados.</param>
      <returns>A posição do índice baseado em zero do item caso seja encontrado, ou -1 caso não seja.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Procura o item especificado na matriz.</summary>
      <param name="item">O item a ser procurado.</param>
      <param name="startIndex">O índice no qual iniciar a pesquisa.</param>
      <param name="count">O número de elementos a serem pesquisados.</param>
      <param name="equalityComparer">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns>A posição do índice baseado em zero do item caso seja encontrado, ou -1 caso não seja.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)">
      <summary>Retorna uma nova matriz com o valor especificado inserido na posição especificada.</summary>
      <param name="index">O índice baseado em zero na matriz no qual o novo item deve ser adicionado.</param>
      <param name="item">O item a ser inserido no início da matriz.</param>
      <returns>Uma nova matriz com o item inserido no índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Insere os valores especificados no índice especificado.</summary>
      <param name="index">O índice no qual inserir o valor.</param>
      <param name="items">Os elementos a serem inseridos.</param>
      <returns>Uma nova matriz imutável com os itens inseridos no índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Insere os valores especificados no índice especificado.</summary>
      <param name="index">O índice no qual inserir o valor.</param>
      <param name="items">Os elementos a serem inseridos.</param>
      <returns>Uma nova matriz imutável com os itens inseridos no índice especificado.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefault">
      <summary>Obtém um valor que indica se essa matriz foi declarada mas não inicializada.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> for <see langword="null" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty">
      <summary>Obtém um valor que indica se essa <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> está vazia ou não foi inicializada.</summary>
      <returns>
        <see langword="true" />Se o <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> for <see langword="null" /> ou <see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty" />; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsEmpty">
      <summary>Obtém um valor que indica se este <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> está vazio.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> estiver vazio; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)">
      <summary>Obtém o elemento no índice especificado na matriz imutável.</summary>
      <param name="index">O índice baseado em zero do elemento a ser obtido.</param>
      <returns>O elemento no índice especificado na matriz imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ItemRef(System.Int32)">
      <summary>Obtém uma referência somente leitura ao elemento no <paramref name="index" /> especificado na lista somente leitura.</summary>
      <param name="index">O índice baseado em zero do elemento do qual uma referência deve ser obtida.</param>
      <returns>Uma referência somente leitura ao elemento no <paramref name="index" /> especificado na lista somente leitura.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)">
      <summary>Procura o item especificado na matriz, iniciando no final da matriz.</summary>
      <param name="item">O item a ser procurado.</param>
      <returns>O índice baseado em zero na matriz em que o item foi encontrado; ou -1 se não puder ser encontrado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)">
      <summary>Procura o item especificado na matriz, iniciando no final da matriz.</summary>
      <param name="item">O item a ser procurado.</param>
      <param name="startIndex">O índice no qual iniciar a pesquisa.</param>
      <returns>O índice baseado em zero na matriz em que o item foi encontrado; ou -1 se não puder ser encontrado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>Procura o item especificado na matriz, iniciando no final da matriz.</summary>
      <param name="item">O item a ser procurado.</param>
      <param name="startIndex">O índice no qual iniciar a pesquisa.</param>
      <param name="count">O número de elementos a serem pesquisados.</param>
      <returns>O índice baseado em zero na matriz em que o item foi encontrado; ou -1 se não puder ser encontrado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Procura o item especificado na matriz, iniciando no final da matriz.</summary>
      <param name="item">O item a ser procurado.</param>
      <param name="startIndex">O índice no qual iniciar a pesquisa.</param>
      <param name="count">O número de elementos a serem pesquisados.</param>
      <param name="equalityComparer">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns>O índice baseado em zero na matriz em que o item foi encontrado; ou -1 se não puder ser encontrado.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Length">
      <summary>Obtém o número de elementos na matriz.</summary>
      <returns>O número de elementos na matriz</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.OfType``1">
      <summary>Filtra os elementos dessa matriz, naqueles que são atribuíveis ao tipo especificado.</summary>
      <typeparam name="TResult">O tipo no qual filtrar os elementos da sequência.</typeparam>
      <returns>Um <see cref="T:System.Collections.IEnumerable" /> que contém elementos da sequência de entrada do tipo de <paramref name="TResult" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Retorna um valor que indica se as duas matrizes são iguais.</summary>
      <param name="left">A matriz à esquerda do operador.</param>
      <param name="right">A matriz à direita do operador.</param>
      <returns>
        <see langword="true" /> se as matrizes forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary>Retorna um valor que indica se as duas matrizes são iguais.</summary>
      <param name="left">A matriz à esquerda do operador.</param>
      <param name="right">A matriz à direita do operador.</param>
      <returns>
        <see langword="true" /> se as matrizes forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Retorna um valor que indica se duas matrizes não são iguais.</summary>
      <param name="left">A matriz à esquerda do operador.</param>
      <param name="right">A matriz à direita do operador.</param>
      <returns>
        <see langword="true" /> se as matrizes não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary>Verifica a desigualdade entre duas matrizes.</summary>
      <param name="left">O objeto à esquerda do operador.</param>
      <param name="right">O objeto à direita do operador.</param>
      <returns>
        <see langword="true" /> se as duas matrizes não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)">
      <summary>Retorna uma matriz com a primeira ocorrência do elemento especificado removido da matriz. Se nenhuma correspondência for encontrada, a matriz atual será retornada.</summary>
      <param name="item">O item a ser removido.</param>
      <returns>Uma nova matriz com o item removido.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Retorna uma matriz com a primeira ocorrência do elemento especificado removido da matriz.  
 Se nenhuma correspondência for encontrada, a matriz atual será retornada.</summary>
      <param name="item">O item a ser removido.</param>
      <param name="equalityComparer">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns>Uma nova matriz com o item especificado removido.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})">
      <summary>Remove todos os itens da matriz que atendem à condição especificada.</summary>
      <param name="match">O delegado que define as condições dos elementos a serem removidos.</param>
      <returns>Uma nova matriz com os itens removidos que atendem à condição especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)">
      <summary>Retorna uma matriz com o elemento na posição especificada removido.</summary>
      <param name="index">O índice baseado em zero do elemento a ser removido da matriz retornada.</param>
      <returns>Uma nova matriz com o item removido no índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Remove os itens especificados dessa matriz.</summary>
      <param name="items">Os itens a serem removidos se correspondências forem encontradas nessa lista.</param>
      <returns>Uma nova matriz com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Remove os itens especificados dessa matriz.</summary>
      <param name="items">Os itens a serem removidos se correspondências forem encontradas nessa lista.</param>
      <param name="equalityComparer">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns>Uma nova matriz com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Remove os valores especificados dessa lista.</summary>
      <param name="items">Os itens a serem removidos se correspondências forem encontradas nessa lista.</param>
      <returns>Uma nova lista com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Remove os itens especificados dessa lista.</summary>
      <param name="items">Os itens a serem removidos se correspondências forem encontradas nessa lista.</param>
      <param name="equalityComparer">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns>Uma nova matriz com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Retorna uma matriz com os elementos removidos na posição especificada.</summary>
      <param name="index">O índice baseado em zero do elemento inicial a ser removido da matriz.</param>
      <param name="length">O número de elementos a serem removidos da matriz.</param>
      <returns>A nova matriz com os elementos especificados removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)">
      <summary>Localiza o primeiro elemento na matriz igual ao valor especificado e substitui o valor pelo novo valor especificado.</summary>
      <param name="oldValue">O valor para localizar e substituir na matriz.</param>
      <param name="newValue">O valor pelo qual substituir o <c>oldvalue</c>.</param>
      <returns>Uma nova matriz que contém <paramref name="newValue" /> mesmo se os valores novos e antigos forem os mesmos.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> não se encontra na matriz.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Localiza o primeiro elemento na matriz igual ao valor especificado e substitui o valor pelo novo valor especificado.</summary>
      <param name="oldValue">O valor para localizar e substituir na matriz.</param>
      <param name="newValue">O valor pelo qual substituir o <c>oldvalue</c>.</param>
      <param name="equalityComparer">O comparador de igualdade a ser usado para comparar os valores.</param>
      <returns>Uma nova matriz que contém <paramref name="newValue" /> mesmo se os valores novos e antigos forem os mesmos.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> não se encontra na matriz.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)">
      <summary>Substitui o item no índice especificado pelo item especificado.</summary>
      <param name="index">O índice do item a ser substituído.</param>
      <param name="item">O item a ser adicionado à lista.</param>
      <returns>A nova matriz que contém <paramref name="item" /> no índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort">
      <summary>Classifica os elementos na matriz imutável usando o comparador padrão.</summary>
      <returns>Uma nova matriz imutável que contém os itens nessa matriz, em ordem de classificação.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Classifica os elementos na matriz imutável usando o comparador especificado.</summary>
      <param name="comparer">A implementação a ser usada na comparação de elementos ou <see langword="null" /> para usar o comparador padrão</param>
      <returns>Uma nova matriz imutável que contém os itens nessa matriz, em ordem de classificação.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})">
      <summary>Classifica os elementos em todo a <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> usando o <see cref="T:System.Comparison`1" /> especificado.</summary>
      <param name="comparison">O <see cref="T:System.Comparison`1" /> a ser usado na comparação de elementos.</param>
      <returns>A lista classificada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> é nulo.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Classifica os elementos especificados na matriz imutável usando o comparador especificado.</summary>
      <param name="index">O índice do primeiro elemento a ser classificado.</param>
      <param name="count">O número de elementos a serem incluídos na classificação.</param>
      <param name="comparer">A implementação a ser usada na comparação de elementos ou <see langword="null" /> para usar o comparador padrão</param>
      <returns>Uma nova matriz imutável que contém os itens nessa matriz, em ordem de classificação.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="item">O item a ser adicionado ao final da matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count">
      <summary>Obtém o número de matrizes na coleção.</summary>
      <exception cref="T:System.InvalidOperationException">Gera se a propriedade <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retorna true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtém um valor que indica se essa instância é somente leitura.</summary>
      <returns>
        <c>true</c> se esta instância for somente leitura; caso contrário, <c>false</c>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="item">O objeto a ser removido da matriz.</param>
      <returns>Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retorna um enumerador que itera na matriz.</summary>
      <returns>Um enumerador que pode ser usado para iterar na matriz.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="index">O índice do local para inserir o item.</param>
      <param name="item">O item a ser inserido.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Obtém ou define o elemento no índice especificado na lista somente leitura.</summary>
      <param name="index">O índice baseado em zero do elemento a ser obtido.</param>
      <returns>O elemento no índice especificado na lista somente leitura.</returns>
      <exception cref="T:System.NotSupportedException">Sempre lançado de setter.</exception>
      <exception cref="T:System.InvalidOperationException">Gera se a propriedade <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retorna true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="index">O índice.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
      <summary>Obtém o número de matrizes na coleção.</summary>
      <exception cref="T:System.InvalidOperationException">Gera se a propriedade <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retorna true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary>Obtém o elemento no índice especificado.</summary>
      <param name="index">O índice.</param>
      <returns>O elemento.</returns>
      <exception cref="T:System.InvalidOperationException">Gera se a propriedade <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retorna true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia essa matriz em outra matriz, iniciando no índice especificado.</summary>
      <param name="array">A matriz para a qual copiar essa matriz.</param>
      <param name="index">O índice na matriz de destino no qual iniciar a operação de cópia.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count">
      <summary>Obtém o tamanho da matriz.</summary>
      <exception cref="T:System.InvalidOperationException">Gera se a propriedade <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retorna true.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized">
      <summary>Consulte a interface <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot">
      <summary>Obtém a raiz de sincronização.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera na matriz imutável.</summary>
      <returns>Um enumerador que itera na matriz imutável.</returns>
      <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retorna <see langword="true" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)">
      <summary>Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="value">O valor a ser adicionado à matriz.</param>
      <returns>Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</returns>
      <exception cref="T:System.NotSupportedException">Gerada em todos os casos.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear">
      <summary>Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <exception cref="T:System.NotSupportedException">Gerada em todos os casos.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)">
      <summary>Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="value">O valor a ser verificado.</param>
      <returns>Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Obtém o valor no índice especificado.</summary>
      <param name="value">O valor do qual retornar o índice.</param>
      <returns>O valor do elemento no índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="index">Índice que indica o local para inserir o item.</param>
      <param name="value">O valor a ser inserido.</param>
      <exception cref="T:System.NotSupportedException">Gerada em todos os casos.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize">
      <summary>Obtém um valor que indica se esta instância é de tamanho fixo.</summary>
      <returns>
        <c>true</c> se esta instância for de tamanho fixo; caso contrário, <c>false</c>.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly">
      <summary>Obtém um valor que indica se essa instância é somente leitura.</summary>
      <returns>
        <c>true</c> se esta instância for somente leitura; caso contrário, <c>false</c>.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)">
      <summary>Obtém ou define o <see cref="T:System.Object" /> no índice especificado.</summary>
      <param name="index">O índice.</param>
      <exception cref="T:System.NotSupportedException">Sempre lançado de setter.</exception>
      <exception cref="T:System.InvalidOperationException">Gera se a propriedade <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> retorna true.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)">
      <summary>Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="value">O valor a ser removido da matriz.</param>
      <exception cref="T:System.NotSupportedException">Gerada em todos os casos.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Gera <see cref="T:System.NotSupportedException" /> em todos os casos.</summary>
      <param name="index">O índice do item a ser removido.</param>
      <exception cref="T:System.NotSupportedException">Gerada em todos os casos.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary>Retorna uma cópia da matriz original com o item especificado adicionado ao final.</summary>
      <param name="value">O valor a ser adicionado ao final da matriz.</param>
      <returns>Uma nova matriz com o item especificado adicionado ao final.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Retorna uma cópia da matriz original com os elementos especificados adicionados ao final da matriz.</summary>
      <param name="items">Os elementos a serem adicionados ao final da matriz.</param>
      <returns>Uma nova matriz com os elementos adicionados ao final.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary>Retorna uma matriz com todos os elementos removidos.</summary>
      <returns>Uma matriz com todos os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary>Retorna uma nova matriz com o valor especificado inserido na posição especificada.</summary>
      <param name="index">O índice baseado em zero na matriz no qual o novo item deve ser adicionado.</param>
      <param name="element">O item a ser inserido no início da matriz.</param>
      <returns>Uma nova matriz com o valor especificado inserido.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Insere os valores especificados no índice especificado</summary>
      <param name="index">O índice no qual inserir o valor.</param>
      <param name="items">Os elementos a serem inseridos.</param>
      <returns>Uma nova matriz com os valores especificados inseridos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Retorna uma matriz com a primeira ocorrência do elemento especificado removido da matriz; se nenhuma correspondência for encontrada, a matriz atual será retornada.</summary>
      <param name="value">O valor a ser removido da matriz.</param>
      <param name="equalityComparer">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns>Uma nova matriz com o valor removido.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary>Remove todos os itens da matriz que atendem à condição especificada.</summary>
      <param name="match">O delegado que define as condições dos elementos a serem removidos.</param>
      <returns>Uma nova matriz com os itens removidos que atendem à condição especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary>Retorna uma matriz com o elemento na posição especificada removido.</summary>
      <param name="index">O índice baseado em zero do elemento a ser removido da matriz retornada.</param>
      <returns>Uma nova matriz com o item especificado removido.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Remove os itens especificados dessa matriz.</summary>
      <param name="items">Os itens a serem removidos se correspondências forem encontradas nessa lista.</param>
      <param name="equalityComparer">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns>Uma nova matriz com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary>Retorna uma matriz com os elementos removidos na posição especificada.</summary>
      <param name="index">O índice baseado em zero do elemento inicial a ser removido da matriz.</param>
      <param name="count">O número de elementos a serem removidos da matriz.</param>
      <returns>A nova matriz com os elementos especificados removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Localiza o primeiro elemento na matriz igual ao valor especificado e substitui o valor pelo novo valor especificado.</summary>
      <param name="oldValue">O valor para localizar e substituir na matriz.</param>
      <param name="newValue">O valor pelo qual substituir o <c>oldvalue</c>.</param>
      <param name="equalityComparer">O comparador de igualdade a ser usado para comparar os valores.</param>
      <returns>Uma nova matriz que contém <paramref name="newValue" /> mesmo se os valores novos e antigos forem os mesmos.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> não se encontra na matriz.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary>Substitui o item no índice especificado pelo item especificado.</summary>
      <param name="index">O índice do item a ser substituído.</param>
      <param name="value">O valor a ser adicionado à lista.</param>
      <returns>A nova matriz que contém <paramref name="item" /> no índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Determina se o elemento da coleção atual precede, ocorre na mesma posição ou segue a outro elemento na ordem de classificação.</summary>
      <param name="other">O elemento a ser comparado com a instância atual.</param>
      <param name="comparer">O objeto usado para comparar os membros da matriz atual com os membros correspondentes de outra matriz.</param>
      <returns>Um inteiro que indica se o elemento atual precede, está na mesma posição ou segue o outro elemento.</returns>
      <exception cref="T:System.ArgumentException">As matrizes não são do mesmo comprimento.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Determina se essa matriz é estruturalmente igual à matriz especificada.</summary>
      <param name="other">A matriz a ser comparada com a instância atual.</param>
      <param name="comparer">Um objeto que determina se a instância atual e outra instância são estruturalmente iguais.</param>
      <returns>
        <see langword="true" /> se as duas matrizes forem estruturalmente iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Retorna um código hash para a instância atual.</summary>
      <param name="comparer">Um objeto que calcula o código hash do objeto atual.</param>
      <returns>O código hash da instância atual.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ToBuilder">
      <summary>Cria uma matriz mutável que tem o mesmo conteúdo que essa matriz e pode ser modificada com eficiência em várias operações usando interfaces mutáveis padrão.</summary>
      <returns>O novo construtor com o mesmo conteúdo que essa matriz.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary">
      <summary>Fornece um conjunto de métodos de inicialização para instâncias da classe <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" />.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Contains``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary>Determina se o dicionário imutável especificado contém o par chave/valor especificado.</summary>
      <param name="map">O dicionário imutável a ser pesquisado.</param>
      <param name="key">A chave a ser localizada no dicionário imutável.</param>
      <param name="value">O valor a ser localizado na chave especificada, se a chave for encontrada.</param>
      <typeparam name="TKey">O tipo das chaves no dicionário imutável.</typeparam>
      <typeparam name="TValue">O tipo dos valores no dicionário imutável.</typeparam>
      <returns>
        <see langword="true" /> se o mapa contiver o par chave/valor especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2">
      <summary>Cria um dicionário imutável vazio.</summary>
      <typeparam name="TKey">O tipo de chaves armazenadas pelo dicionário.</typeparam>
      <typeparam name="TValue">O tipo de valores armazenados pelo dicionário.</typeparam>
      <returns>Um dicionário imutável vazio.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Cria um dicionário imutável vazio que usa o comparador de chave especificado.</summary>
      <param name="keyComparer">A implementação a ser usada para determinar a igualdade de chaves no dicionário.</param>
      <typeparam name="TKey">O tipo de chaves armazenadas pelo dicionário.</typeparam>
      <typeparam name="TValue">O tipo de valores armazenados pelo dicionário.</typeparam>
      <returns>Um dicionário imutável vazio.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Cria um dicionário imutável vazio que usa os comparadores de chave e valor especificados.</summary>
      <param name="keyComparer">A implementação a ser usada para determinar a igualdade de chaves no dicionário.</param>
      <param name="valueComparer">A implementação a ser usada para determinar igualdade de valores no dicionário.</param>
      <typeparam name="TKey">O tipo de chaves armazenadas pelo dicionário.</typeparam>
      <typeparam name="TValue">O tipo de valores armazenados pelo dicionário.</typeparam>
      <returns>Um dicionário imutável vazio.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2">
      <summary>Cria um novo construtor de dicionário imutável.</summary>
      <typeparam name="TKey">O tipo de chaves armazenadas pelo dicionário.</typeparam>
      <typeparam name="TValue">O tipo de valores armazenados pelo dicionário.</typeparam>
      <returns>O novo construtor.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Cria um novo construtor de dicionário imutável.</summary>
      <param name="keyComparer">O comparador de chave.</param>
      <typeparam name="TKey">O tipo de chaves armazenadas pelo dicionário.</typeparam>
      <typeparam name="TValue">O tipo de valores armazenados pelo dicionário.</typeparam>
      <returns>O novo construtor.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Cria um novo construtor de dicionário imutável.</summary>
      <param name="keyComparer">O comparador de chave.</param>
      <param name="valueComparer">O comparador de valor.</param>
      <typeparam name="TKey">O tipo de chaves armazenadas pelo dicionário.</typeparam>
      <typeparam name="TValue">O tipo de valores armazenados pelo dicionário.</typeparam>
      <returns>O novo construtor.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Cria um novo dicionário imutável que contém os itens especificados.</summary>
      <param name="items">Os itens usados para preencher o dicionário antes de que ele seja imutável.</param>
      <typeparam name="TKey">O tipo de chaves no dicionário.</typeparam>
      <typeparam name="TValue">O tipo de valores no dicionário.</typeparam>
      <returns>Um novo dicionário imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Cria um novo dicionário imutável que contém os itens especificados e usa o comparador de chave especificado.</summary>
      <param name="keyComparer">A implementação de comparador a ser usada para comparar as chaves quanto à igualdade.</param>
      <param name="items">Os itens a serem adicionados ao dicionário antes que ele seja imutável.</param>
      <typeparam name="TKey">O tipo de chaves no dicionário.</typeparam>
      <typeparam name="TValue">O tipo de valores no dicionário.</typeparam>
      <returns>Um novo dicionário imutável que contém os itens especificados e usa o comparador especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Cria um novo dicionário imutável que contém os itens especificados e usa o comparador de chave especificado.</summary>
      <param name="keyComparer">A implementação de comparador a ser usada para comparar as chaves quanto à igualdade.</param>
      <param name="valueComparer">A implementação de comparador a ser usada para comparar os valores quanto à igualdade.</param>
      <param name="items">Os itens a serem adicionados ao dicionário antes que ele seja imutável.</param>
      <typeparam name="TKey">O tipo de chaves no dicionário.</typeparam>
      <typeparam name="TValue">O tipo de valores no dicionário.</typeparam>
      <returns>Um novo dicionário imutável que contém os itens especificados e usa o comparador especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0)">
      <summary>Obtém o valor de uma determinada chave, se uma chave correspondente existir no dicionário.</summary>
      <param name="dictionary">O dicionário do qual recuperar o valor.</param>
      <param name="key">A chave a ser pesquisada.</param>
      <typeparam name="TKey">Tipo da chave.</typeparam>
      <typeparam name="TValue">Tipo do valor.</typeparam>
      <returns>O valor da chave ou <c>default(TValue)</c> se nenhuma chave correspondente for encontrada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary>Obtém o valor de uma determinada chave, se uma chave correspondente existir no dicionário.</summary>
      <param name="dictionary">O dicionário do qual recuperar o valor.</param>
      <param name="key">A chave a ser pesquisada.</param>
      <param name="defaultValue">O valor padrão a ser retornado se nenhuma chave correspondente for encontrada no dicionário.</param>
      <typeparam name="TKey">Tipo da chave.</typeparam>
      <typeparam name="TValue">Tipo do valor.</typeparam>
      <returns>O valor da chave ou <paramref name="defaultValue" /> se nenhuma chave correspondente for encontrada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Constrói um dicionário imutável de uma coleção existente de elementos, aplicando uma função de transformação nas chaves de origem.</summary>
      <param name="source">A coleção de origem usada para gerar o dicionário imutável.</param>
      <param name="keySelector">A função usada para transformar chaves para o dicionário imutável.</param>
      <typeparam name="TSource">O tipo de elemento na coleção de origem.</typeparam>
      <typeparam name="TKey">O tipo de chave no dicionário imutável resultante.</typeparam>
      <returns>O dicionário imutável que contém elementos de <paramref name="source" />, com chaves transformadas pela aplicação de <paramref name="keySelector" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Constrói um dicionário imutável com base em alguma transformação de uma sequência.</summary>
      <param name="source">A coleção de origem usada para gerar o dicionário imutável.</param>
      <param name="keySelector">A função usada para transformar chaves para o dicionário imutável.</param>
      <param name="keyComparer">O comparador de chave a ser usado para o dicionário.</param>
      <typeparam name="TSource">O tipo de elemento na coleção de origem.</typeparam>
      <typeparam name="TKey">O tipo de chave no dicionário imutável resultante.</typeparam>
      <returns>O dicionário imutável que contém elementos de <paramref name="source" />, com chaves transformadas pela aplicação de <paramref name="keySelector" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Enumera uma sequência de pares chave/valor e produz um dicionário imutável de seu conteúdo.</summary>
      <param name="source">A sequência de pares chave/valor a ser enumerada.</param>
      <typeparam name="TKey">O tipo das chaves no dicionário.</typeparam>
      <typeparam name="TValue">O tipo dos valores no dicionário.</typeparam>
      <returns>Um dicionário imutável que contém os pares chave/valor na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Enumera uma sequência de pares chave/valor e produz um dicionário imutável de seu conteúdo, usando o comparador de chave especificado.</summary>
      <param name="source">A sequência de pares chave/valor a ser enumerada.</param>
      <param name="keyComparer">O comparador de chave a ser usado ao criar o dicionário imutável.</param>
      <typeparam name="TKey">O tipo das chaves no dicionário.</typeparam>
      <typeparam name="TValue">O tipo dos valores no dicionário.</typeparam>
      <returns>Um dicionário imutável que contém os pares chave/valor na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Enumera uma sequência de pares chave/valor e produz um dicionário imutável de seu conteúdo, usando os comparadores de chave e valor especificados.</summary>
      <param name="source">A sequência de pares chave/valor a ser enumerada.</param>
      <param name="keyComparer">O comparador de chave a ser usado ao criar o dicionário imutável.</param>
      <param name="valueComparer">O comparador de valor a ser usado para o dicionário imutável.</param>
      <typeparam name="TKey">O tipo das chaves no dicionário.</typeparam>
      <typeparam name="TValue">O tipo dos valores no dicionário.</typeparam>
      <returns>Um dicionário imutável que contém os pares chave/valor na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}.Builder)">
      <summary>Cria um dicionário imutável do conteúdo atual do dicionário do construtor.</summary>
      <param name="builder">O construtor para o qual criar o dicionário imutável.</param>
      <typeparam name="TKey">O tipo das chaves no dicionário.</typeparam>
      <typeparam name="TValue">O tipo dos valores no dicionário.</typeparam>
      <returns>Cria um dicionário imutável preenchido com o conteúdo atual do dicionário do construtor.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Enumera e transforma uma sequência e produz um dicionário imutável com base em seu conteúdo.</summary>
      <param name="source">A sequência a ser enumerada para gerar o dicionário.</param>
      <param name="keySelector">A função que produzirá a chave para o dicionário de cada elemento de sequência.</param>
      <param name="elementSelector">A função que produzirá o valor para o dicionário de cada elemento de sequência.</param>
      <typeparam name="TSource">O tipo dos elementos na sequência.</typeparam>
      <typeparam name="TKey">O tipo das chaves no dicionário resultante.</typeparam>
      <typeparam name="TValue">O tipo dos valores no dicionário resultante.</typeparam>
      <returns>Um dicionário imutável que contém os itens na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Enumera e transforma uma sequência e produz um dicionário imutável com base em seu conteúdo usando o comparador de chave especificado.</summary>
      <param name="source">A sequência a ser enumerada para gerar o dicionário.</param>
      <param name="keySelector">A função que produzirá a chave para o dicionário de cada elemento de sequência.</param>
      <param name="elementSelector">A função que produzirá o valor para o dicionário de cada elemento de sequência.</param>
      <param name="keyComparer">O comparador de chave a ser usado para o dicionário.</param>
      <typeparam name="TSource">O tipo dos elementos na sequência.</typeparam>
      <typeparam name="TKey">O tipo das chaves no dicionário resultante.</typeparam>
      <typeparam name="TValue">O tipo dos valores no dicionário resultante.</typeparam>
      <returns>Um dicionário imutável que contém os itens na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Enumera e transforma uma sequência e produz um dicionário imutável com base em seu conteúdo usando os comparadores de chave e valor especificados.</summary>
      <param name="source">A sequência a ser enumerada para gerar o dicionário.</param>
      <param name="keySelector">A função que produzirá a chave para o dicionário de cada elemento de sequência.</param>
      <param name="elementSelector">A função que produzirá o valor para o dicionário de cada elemento de sequência.</param>
      <param name="keyComparer">O comparador de chave a ser usado para o dicionário.</param>
      <param name="valueComparer">O comparador de valor a ser usado para o dicionário.</param>
      <typeparam name="TSource">O tipo dos elementos na sequência.</typeparam>
      <typeparam name="TKey">O tipo das chaves no dicionário resultante.</typeparam>
      <typeparam name="TValue">O tipo dos valores no dicionário resultante.</typeparam>
      <returns>Um dicionário imutável que contém os itens na sequência especificada.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2">
      <summary>Representa uma coleção imutável, não ordenada de chaves e valores.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="TKey">O tipo das chaves no dicionário.</typeparam>
      <typeparam name="TValue">O tipo dos valores no dicionário.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)">
      <summary>Adiciona um elemento com a chave e o valor especificados ao dicionário imutável.</summary>
      <param name="key">A chave do elemento a ser adicionada.</param>
      <param name="value">O valor do elemento a ser adicionado.</param>
      <returns>Um novo dicionário imutável que contém o par chave/valor adicional.</returns>
      <exception cref="T:System.ArgumentException">A chave especificada já existe no dicionário, mas tem um valor diferente.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Adiciona os pares chave/valor especificados ao dicionário imutável.</summary>
      <param name="pairs">Os pares chave/valor a serem adicionados.</param>
      <returns>Um novo dicionário imutável que contém os pares chave/valor adicionais.</returns>
      <exception cref="T:System.ArgumentException">Uma das chaves fornecidas já existe no dicionário, mas tem um valor diferente.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Builder">
      <summary>Representa um mapa de hash que se modifica com pouca ou nenhuma alocação de memória e que pode produzir ou criar instâncias de mapa de hash imutáveis de maneira muito eficiente.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)">
      <summary>Adiciona um elemento que tem a chave e o valor especificados ao dicionário imutável.</summary>
      <param name="key">A chave do elemento a ser adicionada.</param>
      <param name="value">O valor do elemento a ser adicionado.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é nulo.</exception>
      <exception cref="T:System.ArgumentException">Já existe um elemento com a mesma chave no dicionário.</exception>
      <exception cref="T:System.NotSupportedException">O dicionário é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Adiciona o item especificado ao dicionário imutável.</summary>
      <param name="item">O objeto a ser adicionado ao dicionário.</param>
      <exception cref="T:System.NotSupportedException">O dicionário é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Adiciona uma sequência de valores a essa coleção.</summary>
      <param name="items">Os itens a serem adicionados a esta coleção.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear">
      <summary>Remove todos os itens do dicionário imutável.</summary>
      <exception cref="T:System.NotSupportedException">O dicionário é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determina se o dicionário imutável contém um valor específico.</summary>
      <param name="item">O objeto a ser localizado no dicionário.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> for encontrada no dicionário; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)">
      <summary>Determina se o dicionário imutável contém um elemento que tem a chave especificada.</summary>
      <param name="key">A chave a ser localizada no dicionário.</param>
      <returns>
        <see langword="true" /> se o dicionário contiver um elemento com a chave; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é nulo.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)">
      <summary>Determina se o dicionário imutável contém um elemento que tem o valor especificado.</summary>
      <param name="value">O valor a ser localizado no dicionário imutável. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns>
        <see langword="true" /> se o dicionário contiver um elemento com o valor especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Count">
      <summary>Obtém o número de elementos contidos no dicionário imutável.</summary>
      <returns>O número de elementos contidos no dicionário imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator">
      <summary>Retorna um enumerador que itera no dicionário imutável.</summary>
      <returns>Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary>Obtém o valor de uma determinada chave, se uma chave correspondente existir no dicionário.</summary>
      <param name="key">A chave a ser pesquisada.</param>
      <returns>O valor da chave ou <c>default(TValue)</c> se nenhuma chave correspondente for encontrada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary>Obtém o valor de uma determinada chave, se uma chave correspondente existir no dicionário.</summary>
      <param name="key">A chave a ser pesquisada.</param>
      <param name="defaultValue">O valor padrão a ser retornado se nenhuma chave correspondente for encontrada no dicionário.</param>
      <returns>O valor da chave ou <paramref name="defaultValue" /> se nenhuma chave correspondente for encontrada.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)">
      <summary>Obtém ou define o elemento com a chave especificada.</summary>
      <param name="key">Elemento a ser obtido ou definido.</param>
      <returns>O elemento que tem a chave especificada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">A propriedade está sendo recuperada e <paramref name="key" /> não foi encontrado.</exception>
      <exception cref="T:System.NotSupportedException">A propriedade está sendo definida e o <see cref="T:System.Collections.Generic.IDictionary`2" /> é somente leitura.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer">
      <summary>Obtém ou define o comparador de chave.</summary>
      <returns>O comparador de chave.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys">
      <summary>Obtém uma coleção que contém as chaves do dicionário imutável.</summary>
      <returns>Uma coleção que contém as chaves do objeto que implementa o dicionário imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)">
      <summary>Remove o elemento com a chave especificada do dicionário imutável.</summary>
      <param name="key">A chave do elemento a ser removido.</param>
      <returns>
        <see langword="true" /> se o elemento for removido com êxito; caso contrário, <see langword="false" />.  Esse método também retornará <see langword="false" /> se o <paramref name="key" /> não tiver sido encontrado no dicionário.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é nulo.</exception>
      <exception cref="T:System.NotSupportedException">O dicionário é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Remove a primeira ocorrência de um objeto específico do dicionário imutável.</summary>
      <param name="item">O objeto a ser removido do dicionário.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> tiver sido removido com êxito do dicionário; caso contrário, <see langword="false" />. Esse método também retornará falso se o <paramref name="item" /> não for encontrado no dicionário.</returns>
      <exception cref="T:System.NotSupportedException">O dicionário é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Remove todas as entradas com chaves que correspondam àquelas encontradas na sequência especificada do dicionário imutável.</summary>
      <param name="keys">As chaves das entradas a serem removidas do dicionário.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos do dicionário para uma matriz do tipo <see cref="T:System.Collections.Generic.KeyValuePair`2" />, começando no índice da matriz especificada.</summary>
      <param name="array">A matriz unidimensional do tipo <see cref="T:System.Collections.Generic.KeyValuePair`2" /> que é o destino dos elementos copiados do dicionário. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso ao <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Adiciona um elemento com a chave e o valor fornecidos ao objeto de dicionário.</summary>
      <param name="key">A chave do elemento a ser adicionada.</param>
      <param name="value">O valor do elemento a ser adicionado.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determina se o objeto de dicionário contém um elemento com a chave especificada.</summary>
      <param name="key">A chave a ser localizada.</param>
      <returns>
        <see langword="true" /> se o dicionário contiver um elemento com a chave; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary>Retorna um objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para o dicionário.</summary>
      <returns>Um objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para o dicionário.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary>Obtém um valor que indica se o objeto <see cref="T:System.Collections.IDictionary" /> tem um tamanho fixo.</summary>
      <returns>
        <see langword="true" />Se o <see cref="T:System.Collections.IDictionary" /> objeto tiver um tamanho fixo; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary>Obtém ou define o elemento com a chave especificada.</summary>
      <param name="key">A chave.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary>Obtém um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém as chaves do <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém as chaves do objeto que implementa <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Remove o elemento com a chave especificada do dicionário.</summary>
      <param name="key">A chave do elemento a ser removido.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary>Obtém um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém os valores no <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém os valores no objeto que implementa <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um objeto enumerador que pode ser usado para iterar na coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable">
      <summary>Cria um dicionário imutável de acordo com o conteúdo desta instância.</summary>
      <returns>Um dicionário imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary>Determina se este dicionário contém uma chave especificada.</summary>
      <param name="equalKey">A chave a ser pesquisada.</param>
      <param name="actualKey">A chave correspondente localizada no dicionário, se encontrada, ou <c>equalkey</c> se nenhuma correspondência for encontrada.</param>
      <returns>
        <see langword="true" /> se uma correspondência para <paramref name="equalKey" /> for encontrada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary>Retorna o valor associado à chave especificada.</summary>
      <param name="key">A chave cujo valor será recuperado.</param>
      <param name="value">Quando esse método retorna, ele contém o valor associado à chave especificada, caso a chave seja encontrada; caso contrário, retorna o valor padrão para o tipo do parâmetro <paramref name="value" />. Este parâmetro é passado não inicializado.</param>
      <returns>
        <see langword="true" /> se o objeto que implementa o dicionário imutável contiver um elemento com a chave especificada; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é nulo.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer">
      <summary>Obtém ou define o comparador de valor.</summary>
      <returns>O comparador de valor.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Values">
      <summary>Obtém uma coleção que contém os valores do dicionário imutável.</summary>
      <returns>Uma coleção que contém os valores do objeto que implementa o dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Clear">
      <summary>Recupera um dicionário imutável vazio que tem a mesma ordenação e regras de comparação de chave/valor que essa instância de dicionário.</summary>
      <returns>Um dicionário vazio com ordenação e regras de comparação de chave/valor equivalentes.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determina se esse dicionário imutável contém o par chave/valor especificado.</summary>
      <param name="pair">O par chave/valor a ser localizado.</param>
      <returns>
        <see langword="true" /> se o par chave/valor especificado for encontrado no dicionário; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)">
      <summary>Determina se o dicionário imutável contém um elemento com a chave especificada.</summary>
      <param name="key">A chave a ser localizada.</param>
      <returns>
        <see langword="true" /> se o dicionário imutável contiver um elemento com a chave especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)">
      <summary>Determina se o dicionário imutável contém um elemento com o valor especificado.</summary>
      <param name="value">O valor a ser localizado. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns>
        <see langword="true" /> se o dicionário contiver um elemento com o valor especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Count">
      <summary>Obtém o número de pares chave/valor no dicionário imutável.</summary>
      <returns>O número de pares de chave/valor no dicionário.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableDictionary`2.Empty">
      <summary>Obtém um dicionário imutável vazio</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator">
      <summary>Enumera o conteúdo do dicionário imutável sem qualquer alocação de memória.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento no dicionário na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Dispose">
      <summary>Libera os recursos usados pela instância atual da classe <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.MoveNext">
      <summary>Avança o enumerador para o próximo elemento do dicionário imutável.</summary>
      <returns>
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final do dicionário.</returns>
      <exception cref="T:System.InvalidOperationException">O dicionário foi modificado depois da criação do enumerador.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Reset">
      <summary>Define o enumerador com sua posição inicial, que é antes do primeiro elemento do dicionário.</summary>
      <exception cref="T:System.InvalidOperationException">O dicionário foi modificado depois da criação do enumerador.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtém o elemento atual.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator">
      <summary>Retorna um enumerador que itera no dicionário imutável.</summary>
      <returns>Um enumerador que pode ser usado para iterar no dicionário.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.IsEmpty">
      <summary>Obtém um valor que indica se essa instância do dicionário imutável está vazia.</summary>
      <returns>
        <see langword="true" />Se esta instância estiver vazia; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Item(`0)">
      <summary>Obtém o <paramref name="TValue" /> associado à chave especificada.</summary>
      <param name="key">Tipo da chave.</param>
      <returns>O valor associado à chave especificada. Se nenhum resultado for encontrado, a operação lançará uma exceção.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.KeyComparer">
      <summary>Obtém o comparador de chave para o dicionário imutável.</summary>
      <returns>O comparador de chave.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Keys">
      <summary>Obtém as chaves no dicionário imutável.</summary>
      <returns>As chaves no dicionário imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)">
      <summary>Remove o elemento com a chave especificada do dicionário imutável.</summary>
      <param name="key">A chave do elemento a ser removido.</param>
      <returns>Um novo dicionário imutável com o elemento especificado removido; ou esta instância, se a chave especificada não puder ser encontrada no dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Remove os elementos do dicionário imutável com as chaves especificadas.</summary>
      <param name="keys">As chaves dos elementos a serem removidos.</param>
      <returns>Um novo dicionário imutável com as chaves especificadas removidas; ou esta instância, se a chave especificada não puder ser encontrada no dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)">
      <summary>Define a chave especificada e o valor no dicionário imutável, possivelmente substituindo um valor existente para a chave.</summary>
      <param name="key">A chave da entrada a ser adicionada.</param>
      <param name="value">O valor de chave a ser definido.</param>
      <returns>Um novo dicionário imutável que contém o par chave/valor especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Define os pares chave/valor especificados no dicionário imutável, possivelmente substituindo valores existente para as chaves.</summary>
      <param name="items">Os pares chave/valor a serem definidos no dicionário. Se qualquer uma das chaves já existir no dicionário, este método substituirá os respectivos valores anteriores.</param>
      <returns>Um novo dicionário imutável que contém os pares chave/valor especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos do dicionário em uma matriz, começando em um índice de matriz específico.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados do dicionário. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso à <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Adiciona um elemento com a chave e o valor fornecidos ao objeto de dicionário imutável.</summary>
      <param name="key">O objeto a ser usado como chave do elemento a ser adicionado.</param>
      <param name="value">O objeto a ser usado como o valor do elemento a ser adicionado.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Clear">
      <summary>Limpa essa instância.</summary>
      <exception cref="T:System.NotSupportedException">O objeto de dicionário é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determina se o objeto dicionário imutável contém um elemento com a chave especificada.</summary>
      <param name="key">A chave a ser localizada no objeto de dicionário.</param>
      <returns>
        <see langword="true" /> se o dicionário contiver um elemento com a chave; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Retorna um objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para o objeto de dicionário imutável.</summary>
      <returns>Um objeto enumerador para o objeto de dicionário.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Obtém um valor que indica se o objeto <see cref="T:System.Collections.IDictionary" /> tem um tamanho fixo.</summary>
      <returns>
        <see langword="true" />Se o <see cref="T:System.Collections.IDictionary" /> objeto tiver um tamanho fixo; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Obtém ou define o elemento com a chave especificada.</summary>
      <param name="key">A chave.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Keys">
      <summary>Obtém um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém as chaves do <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém as chaves do objeto que implementa <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Remove o elemento com a chave especificada do objeto de dicionário imutável.</summary>
      <param name="key">A chave do elemento a ser removido.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Values">
      <summary>Obtém um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém os valores no <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém os valores no objeto que implementa <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um objeto enumerador que pode ser usado para iterar na coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ToBuilder">
      <summary>Cria um dicionário imutável com o mesmo conteúdo deste dicionário que pode ser modificado com eficiência em várias operações usando interfaces mutáveis padrão.</summary>
      <returns>Uma coleção com o mesmo conteúdo deste dicionário que pode ser modificada com eficiência em várias operações usando interfaces mutáveis padrão.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary>Determina se este dicionário contém uma chave especificada.</summary>
      <param name="equalKey">A chave a ser pesquisada.</param>
      <param name="actualKey">A chave correspondente localizada no dicionário, se encontrada, ou <c>equalkey</c> se nenhuma correspondência for encontrada.</param>
      <returns>
        <see langword="true" /> se uma correspondência para <paramref name="equalKey" /> for encontrada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)">
      <summary>Obtém o valor associado à chave especificada.</summary>
      <param name="key">A chave cujo valor será recuperado.</param>
      <param name="value">Quando esse método retorna, ele contém o valor associado à chave especificada, caso a chave seja encontrada; caso contrário, conterá o valor padrão para o tipo do parâmetro <paramref name="value" />. Este parâmetro é passado não inicializado.</param>
      <returns>
        <see langword="true" /> se o objeto que implementa o dicionário contiver um elemento com a chave especificada; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> é nulo.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.ValueComparer">
      <summary>Obtém o comparador de valor usado para determinar se os valores são iguais.</summary>
      <returns>O comparador de valor usado para determinar se os valores são iguais.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Values">
      <summary>Obtém os valores no dicionário imutável.</summary>
      <returns>Os valores no dicionário imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Obtém uma instância do dicionário imutável que usa o comparador de chave especificado.</summary>
      <param name="keyComparer">O comparador de chave a ser usado.</param>
      <returns>Uma instância do dicionário imutável que usa o comparador especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>Obtém uma instância do dicionário imutável que usa o comparador de chave e valor especificados.</summary>
      <param name="keyComparer">O comparador de chave a ser usado.</param>
      <param name="valueComparer">O comparador de valor a ser usado.</param>
      <returns>Uma instância do dicionário imutável que usa os comparadores especificados.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet">
      <summary>Fornece um conjunto de métodos de inicialização para instâncias da classe <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1">
      <summary>Cria um conjunto de hash imutável vazio.</summary>
      <typeparam name="T">O tipo de itens a serem armazenados no conjunto de hash imutável.</typeparam>
      <returns>Um conjunto de hash imutável vazio.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0)">
      <summary>Cria um novo conjunto de hash imutável que contém o item especificado.</summary>
      <param name="item">O item com o qual preencher previamente o conjunto de hash.</param>
      <typeparam name="T">O tipo de itens no conjunto de hash imutável.</typeparam>
      <returns>Um novo conjunto de hash imutável que contém o item especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0[])">
      <summary>Cria um novo conjunto de hash imutável que contém a matriz de itens especificada.</summary>
      <param name="items">Uma matriz que contém os itens com os quais preencher previamente o conjunto de hash.</param>
      <typeparam name="T">O tipo de itens no conjunto de hash imutável.</typeparam>
      <returns>Um novo conjunto de hash imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Cria um conjunto de hash imutável vazio que usa o comparador de igualdade especificado.</summary>
      <param name="equalityComparer">O objeto a ser usado para a comparação dos objetos no conjunto quanto à igualdade.</param>
      <typeparam name="T">O tipo de itens no conjunto de hash imutável.</typeparam>
      <returns>Um conjunto de hash imutável vazio.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0)">
      <summary>Cria um novo conjunto de hash imutável que contém o item especificado e usa o comparador de igualdade especificado para o tipo de conjunto.</summary>
      <param name="equalityComparer">O objeto a ser usado para a comparação dos objetos no conjunto quanto à igualdade.</param>
      <param name="item">O item com o qual preencher previamente o conjunto de hash.</param>
      <typeparam name="T">O tipo de itens no conjunto de hash imutável.</typeparam>
      <returns>Um novo conjunto de hash imutável que contém o item especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0[])">
      <summary>Cria um novo conjunto de hash imutável que contém os itens na coleção especificada e usa o comparador de igualdade especificado para o tipo de conjunto.</summary>
      <param name="equalityComparer">O objeto a ser usado para a comparação dos objetos no conjunto quanto à igualdade.</param>
      <param name="items">Uma matriz que contém os itens com os quais preencher previamente o conjunto de hash.</param>
      <typeparam name="T">O tipo de itens armazenados no conjunto de hash imutável.</typeparam>
      <returns>Um novo conjunto de hash imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1">
      <summary>Cria um novo construtor de conjunto de hash imutável.</summary>
      <typeparam name="T">O tipo de itens armazenados pela coleção.</typeparam>
      <returns>O construtor de conjunto de hash imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Cria um novo construtor de conjunto de hash imutável.</summary>
      <param name="equalityComparer">O objeto a ser usado para a comparação dos objetos no conjunto quanto à igualdade.</param>
      <typeparam name="T">O tipo de itens armazenados pela coleção.</typeparam>
      <returns>O novo construtor de conjunto de hash imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Cria um novo conjunto de hash imutável previamente preenchido com os itens especificados.</summary>
      <param name="items">Os itens a serem adicionados ao conjunto de hash.</param>
      <typeparam name="T">O tipo de itens armazenados pela coleção.</typeparam>
      <returns>O novo conjunto de hash imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Cria um novo conjunto de hash imutável que contém os itens especificados e usa o comparador de igualdade especificado para o tipo de conjunto.</summary>
      <param name="equalityComparer">O objeto a ser usado para a comparação dos objetos no conjunto quanto à igualdade.</param>
      <param name="items">Os itens adicionados à coleção antes que a imutabilidade é aplicada.</param>
      <typeparam name="T">O tipo de itens armazenados na coleção.</typeparam>
      <returns>O novo conjunto de hash imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Enumera uma sequência e produz um conjunto de hash imutável de seu conteúdo.</summary>
      <param name="source">A sequência a ser enumerada.</param>
      <typeparam name="TSource">O tipo dos elementos na sequência.</typeparam>
      <returns>Um conjunto de hash imutável que contém os itens na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Enumera uma sequência, produz um conjunto de hash imutável de seu conteúdo e usa o comparador de igualdade especificado para o tipo de conjunto.</summary>
      <param name="source">A sequência a ser enumerada.</param>
      <param name="equalityComparer">O objeto a ser usado para a comparação dos objetos no conjunto quanto à igualdade.</param>
      <typeparam name="TSource">O tipo dos elementos na sequência.</typeparam>
      <returns>Um conjunto de hash imutável que contém os itens na sequência especificada e usa o comparador de igualdade especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Immutable.ImmutableHashSet{``0}.Builder)">
      <summary>Cria um conjunto hash imutável do conteúdo atual do conjunto do construtor.</summary>
      <param name="builder">O construtor para o qual criar o conjunto hash imutável.</param>
      <typeparam name="TSource">O tipo dos elementos no conjunto de hash.</typeparam>
      <returns>Cria um conjunto hash imutável preenchido com o conteúdo atual do conjunto do construtor.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1">
      <summary>Representa um conjunto de hash imutável não ordenado.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T">O tipo dos elementos no conjunto de hash.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Add(`0)">
      <summary>Adiciona o elemento especificado ao conjunto de hash.</summary>
      <param name="item">O elemento a ser adicionado ao conjunto.</param>
      <returns>Um conjunto de hash que contém o valor adicionado e quaisquer valores mantidos anteriormente pelo objeto <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Builder">
      <summary>Representa um conjunto de hash que se modifica com pouca ou nenhuma alocação de memória e que pode produzir ou criar instâncias de conjunto de hash imutáveis de maneira muito eficiente.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)">
      <summary>Adiciona o item especificado ao conjunto de hash imutável.</summary>
      <param name="item">O item a ser adicionado.</param>
      <returns>
        <see langword="true" /> se o item ainda não pertence à coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear">
      <summary>Remove todos os itens do conjunto de hash imutável.</summary>
      <exception cref="T:System.NotSupportedException">O conjunto de hash é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)">
      <summary>Determina se o conjunto de hash imutável contém um valor específico.</summary>
      <param name="item">O objeto a ser localizado no conjunto de hash.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> for encontrado no conjunto de hash; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.Count">
      <summary>Obtém o número de elementos contidos no conjunto de hash imutável.</summary>
      <returns>O número de elementos contidos no conjunto de hash imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Remove todos os elementos na coleção especificada do conjunto de hash atual.</summary>
      <param name="other">A coleção de itens a serem removidos do conjunto.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator">
      <summary>Retorna um enumerador que itera no conjunto de hash imutável.</summary>
      <returns>Um enumerador que pode ser usado para iterar no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica o conjunto atual para que ele contenha apenas elementos que também estejam em uma coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto atual é um subconjunto apropriado (estrito) de uma coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual for um subconjunto apropriado do <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto atual é um superconjunto apropriado (estrito) de uma coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual for um superconjunto apropriado de <paramref name="other" />, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto atual é um subconjunto de uma coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual for um subconjunto de <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto atual é um superconjunto de uma coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual for um superconjunto de <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer">
      <summary>Obtém ou define o comparador de chave.</summary>
      <returns>O comparador de chave.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto atual se sobrepõe à coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual e <paramref name="other" /> compartilharem pelo menos um elemento comum; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)">
      <summary>Remove a primeira ocorrência de um objeto específico do conjunto de hash imutável.</summary>
      <param name="item">O objeto a ser removido do conjunto.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> tiver sido removido com êxito do conjunto; caso contrário, <see langword="false" />. Esse método também retornará <see langword="false" /> se o <paramref name="item" /> não for encontrado no conjunto original.</returns>
      <exception cref="T:System.NotSupportedException">O conjunto é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto atual e a coleção especificada contêm os mesmos elementos.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual for igual a <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica o conjunto atual para que ele contenha somente os elementos presentes no conjunto atual ou na coleção especificada, mas não em ambos.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Adiciona um item ao conjunto de hash.</summary>
      <param name="item">O objeto a ser adicionado ao conjunto.</param>
      <exception cref="T:System.NotSupportedException">O conjunto é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Copia os elementos do conjunto de hash em uma matriz, começando em um índice de matriz específico.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados do conjunto de hash. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retorna um enumerador que itera pela coleção.</summary>
      <returns>Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable">
      <summary>Cria um conjunto de hash imutável de acordo com o conteúdo desta instância.</summary>
      <returns>Um conjunto imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica o conjunto atual para que ele contenha todos os elementos que estão presentes no conjunto atual e na coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Clear">
      <summary>Recupera um conjunto de hash imutável vazio que tem as mesmas semânticas de classificação e ordenação que essa instância.</summary>
      <returns>Um conjunto de hash vazio que tem as mesmas semânticas de classificação e ordenação que essa instância.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)">
      <summary>Determina se este conjunto de hash imutável contém o elemento especificado.</summary>
      <param name="item">O objeto a ser localizado no conjunto de hash imutável.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> for encontrado no <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Count">
      <summary>Obtém o número de elementos no conjunto de hash imutável.</summary>
      <returns>O número de elementos no conjunto de hash.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableHashSet`1.Empty">
      <summary>Obtém um conjunto de hash imutável para este tipo que usa o <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> padrão.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator">
      <summary>Enumera o conteúdo do conjunto de hash imutável sem qualquer alocação de memória.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Dispose">
      <summary>Libera os recursos usados pela instância atual da classe <see cref="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.MoveNext">
      <summary>Avança o enumerador para o próximo elemento do conjunto de hash imutável.</summary>
      <returns>
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final do conjunto de hash imutável.</returns>
      <exception cref="T:System.InvalidOperationException">O conjunto de hash foi modificado depois da criação do enumerador.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Reset">
      <summary>Define o enumerador com sua posição inicial, que é antes do primeiro elemento do conjunto de hash.</summary>
      <exception cref="T:System.InvalidOperationException">O conjunto de hash foi modificado depois da criação do enumerador.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtém o elemento atual.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Remove os elementos na coleção especificada do conjunto de hash imutável atual.</summary>
      <param name="other">A coleção de itens a serem removidos desse conjunto.</param>
      <returns>Um novo conjunto com os itens removidos; ou o conjunto original se nenhum dos itens tiverem sido encontrados no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator">
      <summary>Retorna um enumerador que itera pela coleção.</summary>
      <returns>Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Cria um conjunto de hash imutável que contém elementos que existem em ambos: nesse conjunto e no conjunto especificado.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>Um novo conjunto imutável que contém quaisquer elementos que existam nos dois conjuntos.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.IsEmpty">
      <summary>Obtém um valor que indica se o conjunto de hash imutável atual está vazio.</summary>
      <returns>
        <see langword="true" />Se esta instância estiver vazia; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto de hash imutável atual é um subconjunto apropriado (estrito) de uma coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual for um subconjunto apropriado da coleção especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto de hash imutável atual é um superconjunto apropriado (estrito) de uma coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual for um superconjunto apropriado da coleção especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto de hash imutável atual é um subconjunto de uma coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual for um subconjunto da coleção especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto de hash imutável atual é um superconjunto de uma coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual for um superconjunto da coleção especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.KeyComparer">
      <summary>Obtém o objeto que é usado para obter códigos hash para as chaves e verificar a igualdade de valores no conjunto de hash imutável.</summary>
      <returns>O comparador usado para obter códigos de hash para as chaves e a igualdade de verificação.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto de hash imutável atual se sobrepõe à coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual e a coleção especificada compartilharem pelo menos um elemento comum; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)">
      <summary>Remove o elemento especificado desse conjunto de hash imutável.</summary>
      <param name="item">O elemento a ser removido.</param>
      <returns>Um novo conjunto com o elemento especificado removido ou o conjunto atual se o elemento não puder ser encontrado no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto de hash imutável atual e a coleção especificada contêm os mesmos elementos.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se os conjuntos forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Cria um conjunto de hash imutável que contém somente os elementos que estão presentes no conjunto atual ou na coleção especificada, mas não em ambos.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>Um novo conjunto que contém os elementos que estão presentes somente no conjunto atual ou na coleção especificada, mas não em ambos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Adiciona um item ao conjunto.</summary>
      <param name="item">O objeto a ser adicionado ao conjunto.</param>
      <exception cref="T:System.NotSupportedException">O conjunto é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Remove todos os itens desse conjunto.</summary>
      <exception cref="T:System.NotSupportedException">O conjunto é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Copia os elementos do conjunto em uma matriz, começando em um índice específico.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados do conjunto. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Consulte a interface <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Remove a primeira ocorrência de um objeto específico do conjunto.</summary>
      <param name="item">O objeto a ser removido do conjunto.</param>
      <returns>
        <see langword="true" /> se o elemento for removido com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retorna um enumerador que itera pela coleção.</summary>
      <returns>Um enumerador que itera por meio da coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary>Adiciona um elemento ao conjunto atual e retorna um valor que indica se o elemento foi adicionado com êxito.</summary>
      <param name="item">O elemento a ser adicionado à coleção.</param>
      <returns>
        <see langword="true" /> se o elemento for adicionado ao conjunto; <see langword="false" /> se o elemento já estiver no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Remove todos os elementos na coleção especificada do conjunto atual.</summary>
      <param name="other">A coleção de itens a serem removidos.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica o conjunto atual para que ele contenha apenas elementos que também estejam em uma coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com a coleção atual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica o conjunto atual para que ele contenha somente os elementos presentes no conjunto atual ou na coleção especificada, mas não em ambos.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica o conjunto atual para que ele contenha todos os elementos que estão presentes no conjunto atual ou na coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos do conjunto em uma matriz, começando em um índice específico.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados do conjunto. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>Consulte a interface <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#SyncRoot">
      <summary>Consulte <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera em um conjunto.</summary>
      <returns>Um enumerador que pode ser usado para iterar no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary>Adiciona o elemento especificado a este conjunto imutável.</summary>
      <param name="item">O elemento a ser adicionado.</param>
      <returns>Um novo conjunto com o elemento adicionado ou esse conjunto se o elemento já está estiver nele.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary>Recupera um conjunto vazio que tem as mesmas semânticas de classificação e ordenação que essa instância.</summary>
      <returns>Um conjunto vazio que tem as mesmas semânticas de classificação ou ordenação que essa instância.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Remove os elementos na coleção especificada do conjunto atual.</summary>
      <param name="other">A coleção de itens a serem removidos desse conjunto.</param>
      <returns>Um novo conjunto com os itens removidos; ou o conjunto original se nenhum dos itens tiverem sido encontrados no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Cria um conjunto imutável que contém elementos que existem em ambos: nesse conjunto e no conjunto especificado.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>Um novo conjunto imutável que contém quaisquer elementos que existam nos dois conjuntos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary>Remove o elemento especificado desse conjunto imutável.</summary>
      <param name="item">O elemento a ser removido.</param>
      <returns>Um novo conjunto com o elemento especificado removido ou o conjunto atual se o elemento não puder ser encontrado no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Cria um conjunto imutável que contém somente os elementos que estão presentes no conjunto atual ou na coleção especificada, mas não em ambos.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>Um novo conjunto que contém os elementos que estão presentes somente no conjunto atual ou na coleção especificada, mas não em ambos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Cria um novo conjunto imutável que contém todos os elementos que estão presentes no conjunto atual ou na coleção especificada.</summary>
      <param name="other">A coleção da qual os elementos serão adicionados.</param>
      <returns>Um novo conjunto imutável com os itens adicionados; ou o conjunto original se todos os itens já estiverem no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.ToBuilder">
      <summary>Cria um conjunto de hash imutável que tem o mesmo conteúdo que esse conjunto e pode ser modificado com eficiência em várias operações usando interfaces mutáveis padrão.</summary>
      <returns>Um conjunto com o mesmo conteúdo que esse conjunto, que pode ser modificado com eficiência em várias operações usando interfaces mutáveis padrão.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)">
      <summary>Pesquisa um determinado valor no conjunto e retorna o valor igual que for encontrado, se houver.</summary>
      <param name="equalValue">O valor a ser procurado.</param>
      <param name="actualValue">O valor do conjunto que foi encontrado pela pesquisa ou o valor original, se a pesquisa não gerou correspondência.</param>
      <returns>Um valor que indica se a pesquisa foi bem-sucedida.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Cria um novo conjunto de hash imutável que contém todos os elementos que estão presentes no conjunto atual ou na coleção especificada.</summary>
      <param name="other">A coleção da qual os elementos serão adicionados.</param>
      <returns>Um novo conjunto de hash imutável com os itens adicionados; ou o conjunto original se todos os itens já estiverem no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Obtém uma instância do conjunto de hash imutável que usa o comparador de igualdade especificado para seus métodos de pesquisa.</summary>
      <param name="equalityComparer">O comparador de igualdade a ser usado.</param>
      <returns>Uma instância desse conjunto de hash imutável que usa o comparador especificado.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableInterlocked">
      <summary>Contém mecanismos de troca encaixados para coleções imutáveis.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})">
      <summary>Obtém o valor de um dicionário depois de ter adicionado ou atualizado uma entrada existente.</summary>
      <param name="location">A variável ou o campo a ser atomicamente atualizado se o especificado não estiver no dicionário.</param>
      <param name="key">A chave para o valor a ser adicionado ou atualizado.</param>
      <param name="addValue">O valor a ser usado se não houver nenhum valor anterior.</param>
      <param name="updateValueFactory">A função que recebe a chave e o valor anterior e retorna o novo valor com o qual atualizar o dicionário.</param>
      <typeparam name="TKey">O tipo de chave armazenada pelo dicionário.</typeparam>
      <typeparam name="TValue">O tipo de valor armazenado pelo dicionário.</typeparam>
      <returns>O valor adicionado ou atualizado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
      <summary>Obtém o valor de um dicionário depois de ter adicionado ou atualizado uma entrada existente.</summary>
      <param name="location">A variável ou o campo a ser atomicamente atualizado se o especificado não estiver no dicionário.</param>
      <param name="key">A chave para o valor a ser adicionado ou atualizado.</param>
      <param name="addValueFactory">A função que recebe a chave e retorna um novo valor para adicionar ao dicionário quando não existir nenhum valor anteriormente.</param>
      <param name="updateValueFactory">A função que recebe a chave e o valor anterior e retorna o novo valor com o qual atualizar o dicionário.</param>
      <typeparam name="TKey">O tipo de chave armazenada pelo dicionário.</typeparam>
      <typeparam name="TValue">O tipo de valor armazenado pelo dicionário.</typeparam>
      <returns>O valor adicionado ou atualizado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)">
      <summary>Enfileira atomicamente um elemento ao final de uma fila.</summary>
      <param name="location">A variável ou o campo para atualizar atomicamente.</param>
      <param name="value">O valor a ser enfileirado.</param>
      <typeparam name="T">O tipo de itens contidos na coleção</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary>Obtém do dicionário o valor da chave especificada ou, se a chave não foi encontrada, adiciona um novo valor ao dicionário.</summary>
      <param name="location">A variável ou o campo a ser atomicamente atualizado se a chave especificada não estiver no dicionário.</param>
      <param name="key">A chave para o valor a ser obtido ou adicionado.</param>
      <param name="value">O valor a ser adicionado ao dicionário se a chave não for encontrada.</param>
      <typeparam name="TKey">O tipo das chaves contidas na coleção.</typeparam>
      <typeparam name="TValue">O tipo dos valores contidos na coleção.</typeparam>
      <returns>O valor na chave especificada ou <paramref name="valueFactory" /> se a chave não estava presente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})">
      <summary>Obtém do dicionário o valor da chave especificada ou, se a chave não foi encontrada, adiciona um novo valor ao dicionário.</summary>
      <param name="location">A variável ou o campo a ser atomicamente atualizado se o especificado não estiver no dicionário.</param>
      <param name="key">A chave do valor a ser recuperado ou adicionado.</param>
      <param name="valueFactory">A função a ser executada para obter o valor a ser inserido no dicionário se a chave não for encontrada. Este delegado não será invocado mais de uma vez.</param>
      <typeparam name="TKey">O tipo das chaves contidas na coleção.</typeparam>
      <typeparam name="TValue">O tipo dos valores contidos na coleção.</typeparam>
      <returns>O valor na chave especificada ou <paramref name="valueFactory" /> se a chave não estava presente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)">
      <summary>Obtém do dicionário o valor da chave especificada ou, se a chave não foi encontrada, adiciona um novo valor ao dicionário.</summary>
      <param name="location">A variável ou o campo a ser atualizado se o especificado não estiver no dicionário.</param>
      <param name="key">A chave do valor a ser recuperado ou adicionado.</param>
      <param name="valueFactory">A função a ser executada para obter o valor a ser inserido no dicionário se a chave não for encontrada.</param>
      <param name="factoryArgument">O argumento a ser passado para o alocador de valor.</param>
      <typeparam name="TKey">O tipo das chaves contidas na coleção.</typeparam>
      <typeparam name="TValue">O tipo dos valores contidos na coleção.</typeparam>
      <typeparam name="TArg">O tipo do argumento fornecido para a fábrica de valores.</typeparam>
      <returns>O valor na chave especificada ou <paramref name="valueFactory" /> se a chave não estava presente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Compara duas matrizes imutáveis quanto à igualdade e, se elas forem iguais, substitui uma das matrizes.</summary>
      <param name="location">O destino, cujo valor é comparado com <paramref name="comparand" /> e possivelmente substituído.</param>
      <param name="value">O valor que substitui o valor de destino quando a comparação resulta em igualdade.</param>
      <param name="comparand">O valor comparado ao valor em <paramref name="location" />.</param>
      <typeparam name="T">O tipo de elemento armazenado pela matriz.</typeparam>
      <returns>O valor original em <paramref name="location" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Define uma matriz para a matriz especificada e retorna uma referência à matriz original, como uma operação atômica.</summary>
      <param name="location">A matriz a ser definida com o valor especificado.</param>
      <param name="value">O valor para o qual o parâmetro <paramref name="location" /> é definido.</param>
      <typeparam name="T">O tipo de elemento armazenado pela matriz.</typeparam>
      <returns>O valor original de <paramref name="location" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Define uma matriz para a matriz especificada se a matriz não foi inicializada.</summary>
      <param name="location">A matriz a ser definida com o valor especificado.</param>
      <param name="value">O valor para o qual o parâmetro <paramref name="location" /> está definido, se ele não foi inicializado.</param>
      <typeparam name="T">O tipo de elemento armazenado pela matriz.</typeparam>
      <returns>
        <see langword="true" /> se o valor especificado foi atribuído à matriz; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)">
      <summary>Envia um novo elemento por push para a pilha.</summary>
      <param name="location">A pilha a ser atualizada.</param>
      <param name="value">O valor a ser enviado por push na pilha.</param>
      <typeparam name="T">O tipo de itens na pilha.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary>Adiciona a chave especificada e o valor ao dicionário se a chave não estiver no dicionário.</summary>
      <param name="location">O dicionário a ser atualizado com a chave e o valor especificados.</param>
      <param name="key">A chave a ser adicionada, se ainda não estiver definida no dicionário.</param>
      <param name="value">O valor a ser adicionado.</param>
      <typeparam name="TKey">O tipo das chaves contidas na coleção.</typeparam>
      <typeparam name="TValue">O tipo dos valores contidos na coleção.</typeparam>
      <returns>
        <see langword="true" /> se a chave não estiver no dicionário; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)">
      <summary>Remove atomicamente e retorna o elemento especificado no cabeçalho da fila, se a fila não estiver vazia.</summary>
      <param name="location">A variável ou o campo para atualizar atomicamente.</param>
      <param name="value">Definido como o valor do cabeçalho da fila, se a fila não estiver vazia.</param>
      <typeparam name="T">O tipo de itens na fila.</typeparam>
      <returns>
        <see langword="true" /> se a fila não estiver vazia e o elemento de cabeçalho for removido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)">
      <summary>Remove um elemento da parte superior da pilha, se houver um elemento a ser removido.</summary>
      <param name="location">A pilha a ser atualizada.</param>
      <param name="value">Recebe o valor removido da pilha, se a pilha não estiver vazia.</param>
      <typeparam name="T">O tipo de itens na pilha.</typeparam>
      <returns>
        <see langword="true" /> se um elemento for removido da pilha; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)">
      <summary>Remove o elemento com a chave especificada, se a chave existir.</summary>
      <param name="location">O dicionário a ser atualizado.</param>
      <param name="key">A chave a ser removida.</param>
      <param name="value">Recebe o valor do item removido, se o dicionário não estiver vazio.</param>
      <typeparam name="TKey">O tipo das chaves contidas na coleção.</typeparam>
      <typeparam name="TValue">O tipo dos valores contidos na coleção.</typeparam>
      <returns>
        <see langword="true" /> se a chave for encontrada e removida; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)">
      <summary>Define a chave especificada com o valor especificado se a chave especificada já estiver definida com um valor específico.</summary>
      <param name="location">O dicionário a ser atualizado.</param>
      <param name="key">A chave a ser atualizada.</param>
      <param name="newValue">O novo valor a ser definido.</param>
      <param name="comparisonValue">O valor atual para <paramref name="key" /> para que a atualização seja bem-sucedida.</param>
      <typeparam name="TKey">O tipo das chaves contidas na coleção.</typeparam>
      <typeparam name="TValue">O tipo dos valores contidos na coleção.</typeparam>
      <returns>
        <see langword="true" /> se <paramref name="key" /> e <paramref name="comparisonValue" /> estiverem presentes no dicionário e a comparação for atualizada para <paramref name="newValue" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})">
      <summary>Modifica um valor no local com semântica de transação de bloqueio otimista por meio de uma função de transformação especificada.             A transformação será repetida tantas vezes quanto forem necessárias para ganhar a concorrência de bloqueio otimista.</summary>
      <param name="location">A variável ou o campo a ser alterado, que pode ser acessado por vários threads.</param>
      <param name="transformer">Uma função que modifica o valor. Essa função deverá ser livre de efeito colateral, pois poderá ser executada várias vezes quando ocorrerem concorrências com outros threads.</param>
      <typeparam name="T">O tipo de dados.</typeparam>
      <returns>
        <see langword="true" /> se o valor do local foi alterado aplicando o resultado da função <paramref name="transformer" />; <see langword="false" /> se o valor do local permaneceu o mesmo porque a última invocação de <paramref name="transformer" /> retornou o valor existente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)">
      <summary>Modifica um valor no local com semântica de transação de bloqueio otimista por meio de uma função de transformação especificada.             A transformação será repetida tantas vezes quanto forem necessárias para ganhar a concorrência de bloqueio otimista.</summary>
      <param name="location">A variável ou o campo a ser alterado, que pode ser acessado por vários threads.</param>
      <param name="transformer">Uma função que modifica o valor. Essa função deverá ser livre de efeito colateral, pois poderá ser executada várias vezes quando ocorrerem concorrências com outros threads.</param>
      <param name="transformerArgument">O argumento a passar para <paramref name="transformer" />.</param>
      <typeparam name="T">O tipo de dados.</typeparam>
      <typeparam name="TArg">O tipo de argumento passado para o <paramref name="transformer" />.</typeparam>
      <returns>
        <see langword="true" /> se o valor do local foi alterado aplicando o resultado da função <paramref name="transformer" />; <see langword="false" /> se o valor do local permaneceu o mesmo porque a última invocação de <paramref name="transformer" /> retornou o valor existente.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList">
      <summary>Fornece um conjunto de métodos de inicialização para instâncias da classe <see cref="T:System.Collections.Immutable.ImmutableList`1" />.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1">
      <summary>Cria uma lista imutável vazia.</summary>
      <typeparam name="T">O tipo de itens a serem armazenados no.</typeparam>
      <returns>Uma lista imutável vazia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0)">
      <summary>Cria uma nova lista imutável que contém o item especificado.</summary>
      <param name="item">O item com o qual preencher previamente a lista.</param>
      <typeparam name="T">O tipo de itens no.</typeparam>
      <returns>Uma nova lista imutável que contém o item especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0[])">
      <summary>Cria uma nova lista imutável que contém a matriz especificada de itens.</summary>
      <param name="items">Uma matriz que contém os itens com os quais preencher previamente a lista.</param>
      <typeparam name="T">O tipo de itens no.</typeparam>
      <returns>Uma nova lista imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateBuilder``1">
      <summary>Cria um novo construtor de lista imutável.</summary>
      <typeparam name="T">O tipo de itens armazenados pela coleção.</typeparam>
      <returns>O construtor de coleção imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Cria uma nova lista imutável que contém os itens especificados.</summary>
      <param name="items">Os itens a serem adicionados à lista.</param>
      <typeparam name="T">O tipo de itens no.</typeparam>
      <returns>Uma lista imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>Pesquisa o objeto especificado e retorna o índice baseado em zero da primeira ocorrência dentro da lista.</summary>
      <param name="list">A lista a ser pesquisada.</param>
      <param name="item">O objeto a ser localizado na lista. O valor pode ser nulo para tipos de referência.</param>
      <typeparam name="T">O tipo de itens na lista.</typeparam>
      <returns>O índice baseado em zero da primeira ocorrência do item dentro do intervalo de elementos na lista que se estende do índice até o último elemento, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Pesquisa o objeto especificado e retorna o índice baseado em zero da primeira ocorrência dentro da lista.</summary>
      <param name="list">A lista a ser pesquisada.</param>
      <param name="item">O objeto a ser localizado na lista imutável. O valor pode ser nulo para tipos de referência.</param>
      <param name="equalityComparer">O comparador de igualdade a ser usado na pesquisa.</param>
      <typeparam name="T">O tipo de itens na lista.</typeparam>
      <returns>O índice baseado em zero da primeira ocorrência do item dentro do intervalo de elementos na lista Immutable que se estende do índice até o último elemento, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary>Procura o objeto especificado e retorna o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos na lista imutável que se estende do índice especificado até o último elemento.</summary>
      <param name="list">A lista a ser pesquisada.</param>
      <param name="item">O objeto a ser localizado na lista imutável. O valor pode ser nulo para tipos de referência.</param>
      <param name="startIndex">O índice inicial com base em zero da pesquisa. 0 (zero) é válido em uma lista vazia.</param>
      <typeparam name="T">O tipo de itens na lista.</typeparam>
      <returns>O índice baseado em zero da primeira ocorrência do item dentro do intervalo de elementos na lista Immutable que se estende do índice até o último elemento, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary>Procura o objeto especificado e retorna o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos na lista imutável que se estende do índice especificado até o último elemento.</summary>
      <param name="list">A lista a ser pesquisada.</param>
      <param name="item">O objeto a ser localizado na lista imutável. O valor pode ser nulo para tipos de referência.</param>
      <param name="startIndex">O índice inicial com base em zero da pesquisa. 0 (zero) é válido em uma lista vazia.</param>
      <param name="count">O número de elementos na seção a ser pesquisada.</param>
      <typeparam name="T">O tipo de itens na lista.</typeparam>
      <returns>O índice baseado em zero da primeira ocorrência do item dentro do intervalo de elementos na lista Immutable que se estende do índice até o último elemento, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>Pesquisa o objeto especificado e retorna o índice baseado em zero da última ocorrência dentro de toda a lista imutável.</summary>
      <param name="list">A lista a ser pesquisada.</param>
      <param name="item">O objeto a ser localizado na lista imutável. O valor pode ser nulo para tipos de referência.</param>
      <typeparam name="T">O tipo de itens na lista.</typeparam>
      <returns>O índice baseado em zero da última ocorrência do item em toda a lista Immutable, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Pesquisa o objeto especificado e retorna o índice baseado em zero da última ocorrência dentro de toda a lista imutável.</summary>
      <param name="list">A lista a ser pesquisada.</param>
      <param name="item">O objeto a ser localizado na lista imutável. O valor pode ser nulo para tipos de referência.</param>
      <param name="equalityComparer">O comparador de igualdade a ser usado na pesquisa.</param>
      <typeparam name="T">O tipo de itens na lista.</typeparam>
      <returns>O índice baseado em zero da última ocorrência do item em toda a lista Immutable, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary>Procura o objeto especificado e retorna o índice baseado em zero da última ocorrência dentro do intervalo de elementos na lista imutável que se estende do primeiro elemento ao índice especificado.</summary>
      <param name="list">A lista a ser pesquisada.</param>
      <param name="item">O objeto a ser localizado na lista imutável. O valor pode ser nulo para tipos de referência.</param>
      <param name="startIndex">O índice inicial com base em zero da pesquisa inversa.</param>
      <typeparam name="T">O tipo de itens na lista.</typeparam>
      <returns>O índice baseado em zero da última ocorrência do item dentro do intervalo de elementos na lista Immutable que se estende do primeiro elemento até o índice, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary>Procura o objeto especificado e retorna o índice baseado em zero da última ocorrência dentro do intervalo de elementos na lista imutável que se estende do primeiro elemento ao índice especificado.</summary>
      <param name="list">A lista a ser pesquisada.</param>
      <param name="item">O objeto a ser localizado na lista imutável. O valor pode ser nulo para tipos de referência.</param>
      <param name="startIndex">O índice inicial com base em zero da pesquisa inversa.</param>
      <param name="count">O número de elementos na seção a ser pesquisada.</param>
      <typeparam name="T">O tipo de itens na lista.</typeparam>
      <returns>O índice baseado em zero da última ocorrência do item dentro do intervalo de elementos na lista Immutable que se estende do primeiro elemento até o índice, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>Remove o valor especificado dessa lista.</summary>
      <param name="list">A lista a ser pesquisada.</param>
      <param name="value">O valor a ser removido.</param>
      <typeparam name="T">O tipo de itens na lista.</typeparam>
      <returns>Uma nova lista imutável com o elemento removido ou essa lista se o elemento não estiver nela.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Remove os valores especificados dessa lista.</summary>
      <param name="list">A lista a ser pesquisada.</param>
      <param name="items">Os itens a serem removidos se correspondências forem encontradas nessa lista.</param>
      <typeparam name="T">O tipo de itens na lista.</typeparam>
      <returns>Uma nova lista imutável com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)">
      <summary>Substitui o primeiro elemento igual na lista pelo elemento especificado.</summary>
      <param name="list">A lista a ser pesquisada.</param>
      <param name="oldValue">O elemento a ser substituído.</param>
      <param name="newValue">O elemento pelo qual substituir o elemento antigo.</param>
      <typeparam name="T">O tipo de itens na lista.</typeparam>
      <returns>A nova lista – mesmo que o valor que está sendo substituído seja igual ao novo valor daquela posição.</returns>
      <exception cref="T:System.ArgumentException">Gerado quando o valor antigo não existe na lista.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Enumera uma sequência e produz uma lista imutável de seu conteúdo.</summary>
      <param name="source">A sequência a ser enumerada.</param>
      <typeparam name="TSource">O tipo dos elementos na sequência.</typeparam>
      <returns>Uma lista imutável que contém os itens na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)">
      <summary>Cria uma lista imutável do conteúdo atual da coleção do construtor.</summary>
      <param name="builder">O construtor para o qual criar a lista imutável.</param>
      <typeparam name="TSource">O tipo dos elementos na lista.</typeparam>
      <returns>Cria uma lista imutável preenchida com o conteúdo atual da coleção do construtor.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1">
      <summary>Representa uma lista imutável, que é uma lista fortemente tipada de objetos que podem ser acessados por índice.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T">O tipo dos elementos na lista.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Add(`0)">
      <summary>Adiciona o objeto especificado ao final da lista imutável.</summary>
      <param name="value">O objeto a adicionar.</param>
      <returns>Uma nova lista imutável com o objeto adicionado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Adiciona os elementos da coleção especificada ao final da lista imutável.</summary>
      <param name="items">A coleção cujos elementos serão adicionados ao final da lista.</param>
      <returns>Uma nova lista imutável com os elementos adicionados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)">
      <summary>Pesquisa todo a lista classificada para um elemento usando o comparador padrão e retorna o índice baseado em zero do elemento.</summary>
      <param name="item">O objeto a ser localizado. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns>O índice baseado em zero do item na Lista classificada, se o item for encontrado; caso contrário, um número negativo que é o complemento bit a bit do índice do próximo elemento que é maior que o item ou, se não houver nenhum elemento maior, o complemento bit a bit de <see cref="P:System.Collections.ICollection.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">O comparador padrão não é capaz de encontrar uma implementação de comparador para o tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>Pesquisa um elemento em toda a lista classificada usando o comparador especificado e retorna o índice baseado em zero do elemento.</summary>
      <param name="item">O objeto a ser localizado. O valor pode ser nulo para tipos de referência.</param>
      <param name="comparer">A implementação de comparador a ser usada na comparação de elementos ou nulo para usar o comparador padrão.</param>
      <returns>O índice baseado em zero do item na Lista classificada, se o item for encontrado; caso contrário, um número negativo que é o complemento bit a bit do índice do próximo elemento que é maior que o item ou, se não houver nenhum elemento maior, o complemento bit a bit de <see cref="P:System.Collections.ICollection.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">O comparador é <see langword="null" /> e o comparador padrão não é capaz de encontrar uma implementação de comparador para o tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>Pesquisa um intervalo de elementos na lista classificada para encontrar um elemento que usa o comparador especificado e retorna o índice baseado em zero do elemento.</summary>
      <param name="index">O índice baseado em zero inicial do intervalo a ser pesquisado.</param>
      <param name="count">O tamanho do intervalo a ser procurado.</param>
      <param name="item">O objeto a ser localizado. O valor pode ser nulo para tipos de referência.</param>
      <param name="comparer">A implementação de comparador a ser usada na comparação de elementos ou <see langword="null" /> para usar o comparador padrão.</param>
      <returns>O índice baseado em zero do item na lista classificada, se o item for encontrado; caso contrário, um número negativo que é o complemento bit a bit do índice do próximo elemento que é maior que o item ou, se não houver nenhum elemento maior, o complemento bit a bit de <paramref name="count" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">índice é menor que 0 ou <paramref name="count" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">índice e <paramref name="count" /> não denotam um intervalo válido na lista.</exception>
      <exception cref="T:System.InvalidOperationException">O <see langword="null" /> é <paramref name="comparer" /> e o comparador padrão não é capaz de encontrar uma implementação de comparador para o tipo T.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Builder">
      <summary>Representa uma lista que muda com pouca ou nenhuma alocação de memória e que pode produzir ou criar instâncias de lista imutável de maneira muito eficiente.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)">
      <summary>Adiciona um item à lista imutável.</summary>
      <param name="item">O item a ser adicionado à lista.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Adiciona uma série de elementos no final dessa lista.</summary>
      <param name="items">Os elementos a serem adicionados ao final da lista.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)">
      <summary>Pesquisa um elemento em toda a <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> usando o comparador padrão e retorna o índice baseado em zero do elemento.</summary>
      <param name="item">O objeto a ser localizado. O valor pode ser nulo para tipos de referência.</param>
      <returns>O índice baseado em zero do item na <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, se o item for encontrado; caso contrário, um número negativo que seja o complemento bit a bit do índice do próximo elemento que for maior que <paramref name="item" />.</returns>
      <exception cref="T:System.InvalidOperationException">O comparador padrão <see cref="P:System.Collections.Generic.Comparer`1.Default" /> não consegue encontrar uma implementação da interface genérica <see cref="T:System.IComparable`1" /> ou da interface <see cref="T:System.IComparable" /> para o tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>Pesquisa um elemento em toda a <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> usando o comparador especificado e retorna o índice baseado em zero do elemento.</summary>
      <param name="item">O objeto a ser localizado. Esse valor pode ser nulo para tipos de referência.</param>
      <param name="comparer">A implementação a ser usada na comparação de elementos ou <see langword="null" /> para o comparador padrão.</param>
      <returns>O índice baseado em zero do item na <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, se o item for encontrado; caso contrário, um número negativo que seja o complemento bit a bit do índice do próximo elemento que for maior que <paramref name="item" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> é <see langword="null" />, e o comparador padrão <see cref="P:System.Collections.Generic.Comparer`1.Default" /> não pode encontrar uma implementação da interface genérica <see cref="T:System.IComparable`1" /> ou da interface <see cref="T:System.IComparable" /> para o tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>Pesquisa um elemento no intervalo especificado da <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> usando o comparador especificado e retorna o índice baseado em zero do elemento.</summary>
      <param name="index">O índice baseado em zero inicial do intervalo a ser pesquisado.</param>
      <param name="count">O tamanho do intervalo a ser procurado.</param>
      <param name="item">O objeto a ser localizado. Esse valor pode ser nulo para tipos de referência.</param>
      <param name="comparer">A implementação a ser usada na comparação de elementos ou <see langword="null" /> para o comparador padrão.</param>
      <returns>O índice baseado em zero do item na <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, se o item for encontrado; caso contrário, um número negativo que seja o complemento bit a bit do índice do próximo elemento que for maior que <paramref name="item" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0.

ou -

<paramref name="count" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> e <paramref name="count" /> não denotam um intervalo válido em <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> é <see langword="null" />, e o comparador padrão <see cref="P:System.Collections.Generic.Comparer`1.Default" /> não pode encontrar uma implementação da interface genérica <see cref="T:System.IComparable`1" /> ou da interface <see cref="T:System.IComparable" /> para o tipo T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Clear">
      <summary>Remove todos os itens da lista imutável.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)">
      <summary>Determina se a lista imutável contém um valor específico.</summary>
      <param name="item">O objeto a ser localizado na lista.</param>
      <returns>
        <see langword="true" /> se o item for encontrado na lista; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})">
      <summary>Cria uma nova lista imutável com base na lista representada por esse construtor, usando a função de conversor.</summary>
      <param name="converter">A função de conversor.</param>
      <typeparam name="TOutput">O tipo da saída da função de conversor de representante.</typeparam>
      <returns>Uma nova lista imutável com base na lista representada por este construtor.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])">
      <summary>Copia toda a lista imutável em uma matriz unidimensional compatível, começando pelo início da matriz de destino.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados da lista imutável. A matriz deve ter indexação com base em zero.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)">
      <summary>Copia toda a lista imutável para uma matriz unidimensional compatível, iniciando no índice especificado da matriz de destino.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados da lista imutável. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice de base zero na matriz no qual a cópia começa.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Copia toda a lista imutável para uma matriz unidimensional compatível, iniciando no índice especificado da matriz de destino.</summary>
      <param name="index">O índice baseado em zero na lista imutável de origem em que a cópia começa.</param>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados da lista imutável. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <param name="count">O número de elementos a serem copiados.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Count">
      <summary>Obtém o número de elementos nessa lista imutável.</summary>
      <returns>O número de elementos nesta lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})">
      <summary>Determina se a lista imutável contém elementos que correspondem às condições definidas pelo predicado especificado.</summary>
      <param name="match">O delegado que define as condições dos elementos a serem pesquisados.</param>
      <returns>
        <see langword="true" /> se a lista imutável contiver um ou mais elementos que correspondem às condições definidas pelo predicado especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})">
      <summary>Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna a primeira ocorrência em toda a lista imutável.</summary>
      <param name="match">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns>O primeiro elemento que corresponde às condições definidas pelo predicado especificado, se encontrado; caso contrário, o valor padrão para o tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})">
      <summary>Recupera todos os elementos que correspondem às condições definidas pelo predicado especificado.</summary>
      <param name="match">O delegado que define as condições dos elementos a serem pesquisados.</param>
      <returns>Uma lista imutável contendo todos os elementos que correspondem às condições definidas pelo predicado especificado, se encontrado; caso contrário, uma lista imutável vazia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Pesquisa um elemento que corresponda às condições definidas pelo predicado especificado e retorna o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos na lista imutável, que começa no índice especificado e contém o número de elementos especificado.</summary>
      <param name="startIndex">O índice inicial com base em zero da pesquisa.</param>
      <param name="count">O número de elementos na seção a ser pesquisada.</param>
      <param name="match">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns>O índice baseado em zero da primeira ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>Pesquisa um elemento que corresponda às condições definidas pelo predicado especificado e retorna o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos na lista imutável que se estende do índice especificado ao último elemento.</summary>
      <param name="startIndex">O índice inicial com base em zero da pesquisa.</param>
      <param name="match">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns>O índice baseado em zero da primeira ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})">
      <summary>Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna o índice baseado em zero da primeira ocorrência em toda a lista imutável.</summary>
      <param name="match">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns>O índice baseado em zero da primeira ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})">
      <summary>Pesquisa um elemento que corresponda às condições definidas pelo predicado especificado e retorna a primeira ocorrência em toda a lista imutável.</summary>
      <param name="match">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns>O último elemento que corresponde às condições definidas pelo predicado especificado, se encontrado; caso contrário, o valor padrão para o tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Pesquisa por um elemento que corresponda às condições definidas pelo predicado especificado e retorna o índice baseado em zero da última ocorrência no intervalo de elementos na lista imutável que contém o número de elementos especificado e termina no índice especificado.</summary>
      <param name="startIndex">O índice inicial com base em zero da pesquisa inversa.</param>
      <param name="count">O número de elementos na seção a ser pesquisada.</param>
      <param name="match">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns>O índice de base zero da última ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna o índice baseado em zero da última ocorrência dentro do intervalo de elementos na lista imutável que se estende do primeiro elemento ao índice especificado.</summary>
      <param name="startIndex">O índice inicial com base em zero da pesquisa inversa.</param>
      <param name="match">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns>O índice de base zero da última ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})">
      <summary>Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna o índice baseado em zero da última ocorrência em toda a lista imutável.</summary>
      <param name="match">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns>O índice de base zero da última ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})">
      <summary>Executa a ação especificada em cada elemento da lista.</summary>
      <param name="action">O delegado a ser executado em cada elemento da lista.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator">
      <summary>Retorna um enumerador que itera pela coleção.</summary>
      <returns>Um enumerador que pode ser usado para iterar na lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)">
      <summary>Cria uma cópia superficial de um intervalo de elementos na lista imutável de origem.</summary>
      <param name="index">O índice baseado em zero no qual é iniciado o intervalo.</param>
      <param name="count">O número de elementos no intervalo.</param>
      <returns>Uma cópia superficial de um intervalo de elementos na lista imutável de origem.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)">
      <summary>Pesquisa o objeto especificado e retorna o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos na lista imutável.</summary>
      <param name="item">O objeto a ser localizado na lista imutável. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns>O índice baseado em zero da primeira ocorrência de <paramref name="item" /> dentro do intervalo de elementos na lista imutável, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)">
      <summary>Procura o objeto especificado e retorna o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos na lista imutável que se estende do índice especificado até o último elemento.</summary>
      <param name="item">O objeto a ser localizado na lista imutável. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <param name="index">O índice inicial com base em zero da pesquisa. 0 (zero) é válido em uma lista vazia.</param>
      <returns>O índice baseado em zero da primeira ocorrência do item dentro do intervalo de elementos na lista imutável que se estende do <paramref name="index" /> até o último elemento, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary>Pesquisa o objeto especificado e retorna o índice baseado em zero da primeira ocorrência em um intervalo de elementos na lista imutável que começa no índice especificado e contém o número de elementos especificado.</summary>
      <param name="item">O objeto a ser localizado na lista imutável. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <param name="index">O índice inicial com base em zero da pesquisa. 0 (zero) é válido em uma lista vazia.</param>
      <param name="count">O número de elementos na seção a ser pesquisada.</param>
      <returns>O índice baseado em zero da primeira ocorrência do item no intervalo de elementos na lista imutável que começa em <paramref name="index" /> e contém a <paramref name="count" /> de número de elementos, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Pesquisa o objeto especificado e retorna o índice baseado em zero da primeira ocorrência em um intervalo de elementos no <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> que começa no índice especificado e contém o número de elementos especificado.</summary>
      <param name="item">O objeto a ser localizado na lista imutável. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <param name="index">O índice inicial com base em zero da pesquisa. 0 (zero) é válido em uma lista vazia.</param>
      <param name="count">O número de elementos a serem pesquisados.</param>
      <param name="equalityComparer">O comparador de valor a ser usado para comparar a igualdade de elementos.</param>
      <returns>O índice baseado em zero da primeira ocorrência do item no intervalo de elementos na lista imutável que começa em <paramref name="index" /> e contém a <paramref name="count" /> de número de elementos, se encontrado; caso contrário, -1</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)">
      <summary>Insere um item na lista imutável no índice especificado.</summary>
      <param name="index">O índice de base zero no qual o <paramref name="item" /> deve ser inserido.</param>
      <param name="item">O objeto a ser inserido na lista imutável.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Insere os elementos de uma coleção na lista imutável no índice especificado.</summary>
      <param name="index">O índice baseado em zero no qual os novos elementos devem ser inseridos.</param>
      <param name="items">A coleção cujos elementos devem ser inseridos na lista imutável. A coleção em si não pode ser <see langword="null" />, mas pode conter elementos que sejam nulos se o tipo <c>T</c> for um tipo de referência.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)">
      <summary>Obtém ou define o valor de um determinado índice na lista.</summary>
      <param name="index">O índice do item a ser obtido ou definido.</param>
      <returns>O valor no índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ItemRef(System.Int32)">
      <summary>Obtém uma referência somente leitura ao valor de <paramref name="index" /> determinado na lista.</summary>
      <param name="index">O índice do elemento desejado.</param>
      <returns>Uma referência somente leitura ao valor no <paramref name="index" /> especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)">
      <summary>Pesquisa o objeto especificado e retorna o índice baseado em zero da última ocorrência dentro de toda a lista imutável.</summary>
      <param name="item">O objeto a ser localizado na lista imutável. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns>O índice baseado em zero da última ocorrência de <paramref name="item" /> em toda a lista imutável, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary>Procura o objeto especificado e retorna o índice baseado em zero da última ocorrência dentro do intervalo de elementos na lista imutável que se estende do primeiro elemento ao índice especificado.</summary>
      <param name="item">O objeto a ser localizado na lista imutável. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <param name="startIndex">O índice inicial com base em zero da pesquisa inversa.</param>
      <returns>O índice baseado em zero da última ocorrência de <paramref name="item" /> dentro do intervalo de elementos na lista imutável que se estende do primeiro elemento até <paramref name="index" />, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>Pesquisa o objeto especificado e retorna o índice baseado em zero da última ocorrência no intervalo de elementos na lista imutável que contém o número de elementos especificado e termina no índice especificado.</summary>
      <param name="item">O objeto a ser localizado na lista imutável. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <param name="startIndex">O índice inicial com base em zero da pesquisa inversa.</param>
      <param name="count">O número de elementos na seção a ser pesquisada.</param>
      <returns>O índice baseado em zero da última ocorrência de <paramref name="item" /> dentro do intervalo de elementos na lista imutável que contém a <paramref name="count" /> de número de elementos e termina no <paramref name="index" />, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Pesquisa o objeto especificado e retorna o índice baseado em zero da última ocorrência no intervalo de elementos na lista imutável que contém o número de elementos especificado e termina no índice especificado.</summary>
      <param name="item">O objeto a ser localizado na lista imutável. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <param name="startIndex">O índice inicial com base em zero da pesquisa. 0 (zero) é válido em uma lista vazia.</param>
      <param name="count">O número de elementos a serem pesquisados.</param>
      <param name="equalityComparer">O comparador de valor a ser usado para comparar a igualdade de elementos.</param>
      <returns>O índice baseado em zero da primeira ocorrência do item no intervalo de elementos na lista imutável que começa em <paramref name="index" /> e contém a <paramref name="count" /> de número de elementos, se encontrado; caso contrário, -1</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)">
      <summary>Remove a primeira ocorrência de um objeto específico da lista imutável.</summary>
      <param name="item">O objeto a ser removido da lista.</param>
      <returns>
        <see langword="true" /> se o item tiver sido removido com êxito da lista; caso contrário, <see langword="false" />. Esse método também retornará <see langword="false" /> se o item não for encontrado na lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})">
      <summary>Remove todos os elementos que correspondem às condições definidas pelo predicado especificado.</summary>
      <param name="match">O delegado que define as condições dos elementos a serem removidos.</param>
      <returns>O número de elementos removidos da lista imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)">
      <summary>Remove o item no índice especificado da lista imutável.</summary>
      <param name="index">O índice baseado em zero do item a ser removido da lista.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse">
      <summary>Inverte a ordem dos elementos em toda a lista imutável.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)">
      <summary>Inverte a ordem dos elementos no intervalo especificado da lista imutável.</summary>
      <param name="index">O índice inicial baseado em zero do intervalo a ser revertido.</param>
      <param name="count">O número de elementos no intervalo a serem revertidos.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort">
      <summary>Classifica os elementos em toda a lista imutável usando o comparador padrão.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Classifica os elementos em toda a lista imutável usando o comparador especificado.</summary>
      <param name="comparer">A implementação a ser usada na comparação de elementos ou <see langword="null" /> para usar o comparador padrão (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})">
      <summary>Classifica os elementos em toda a lista imutável usando o objeto de comparação especificado.</summary>
      <param name="comparison">O objeto a ser usado na comparação de elementos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Classifica os elementos em um intervalo de elementos na lista imutável usando o comparador especificado.</summary>
      <param name="index">O índice inicial baseado em zero do intervalo a ser classificado.</param>
      <param name="count">O tamanho do intervalo a ser classificado.</param>
      <param name="comparer">A implementação a ser usada na comparação de elementos ou <see langword="null" /> para usar o comparador padrão (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtém um valor que indica se esta instância é somente leitura.</summary>
      <returns>
        <c>é sempre</c>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retorna um enumerador que itera pela coleção.</summary>
      <returns>Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos da lista em uma matriz, começando em um índice de matriz específico.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados da lista. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso ao <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera pela coleção.</summary>
      <returns>Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Add(System.Object)">
      <summary>Adiciona um item à lista.</summary>
      <param name="value">O objeto a ser adicionado à lista.</param>
      <returns>A posição na qual o novo elemento foi inserido, ou -1 para indicar que o item não foi inserido na coleção.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Clear">
      <summary>Remove todos os itens da lista.</summary>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Contains(System.Object)">
      <summary>Determina se a lista contém um valor específico.</summary>
      <param name="value">O objeto a ser localizado na lista.</param>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Object" /> for encontrado na lista; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determina o índice de um item específico na lista.</summary>
      <param name="value">O objeto a ser localizado na lista.</param>
      <returns>O índice de <paramref name="value" /> se encontrado na lista; caso contrário, -1.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Insere um item na lista no índice especificado.</summary>
      <param name="index">O índice de base zero no qual o <paramref name="value" /> deve ser inserido.</param>
      <param name="value">O objeto a ser inserido na lista.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsFixedSize">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.IList" /> tem um tamanho fixo.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.IList" /> tiver um valor fixo; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Item(System.Int32)">
      <summary>Obtém ou define o <see cref="T:System.Object" /> no índice especificado.</summary>
      <param name="index">O índice.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Remove(System.Object)">
      <summary>Remove a primeira ocorrência de um objeto específico da lista.</summary>
      <param name="value">O objeto a ser removido da lista.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable">
      <summary>Cria uma lista imutável de acordo com o conteúdo dessa instância.</summary>
      <returns>Uma lista imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})">
      <summary>Determina se cada elemento da lista imutável coincide com as condições definidas pelo predicado especificado.</summary>
      <param name="match">O delegado que define as condições a serem verificadas nos elementos.</param>
      <returns>
        <see langword="true" /> se cada elemento da lista imutável corresponder às condições definidas pelo predicado especificado; caso contrário, <see langword="false" />. Se a lista não tiver elementos, o valor retornado será <see langword="true" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Clear">
      <summary>Remove todos os elementos da lista imutável.</summary>
      <returns>Uma lista vazia que mantém a mesma classificação ou semântica não ordenada que esta instância tem.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Contains(`0)">
      <summary>Determina se esta lista imutável contém o valor especificado.</summary>
      <param name="value">O valor a ser localizado.</param>
      <returns>
        <see langword="true" /> se a lista contém o valor especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})">
      <summary>Converte os elementos na lista imutável atual em outro tipo e retorna uma lista contendo os elementos convertidos.</summary>
      <param name="converter">Um delegado que converte cada elemento de um tipo em outro tipo.</param>
      <typeparam name="TOutput">O tipo dos elementos da matriz de destino.</typeparam>
      <returns>Uma lista do tipo de destino que contém os elementos convertidos da <see cref="T:System.Collections.Immutable.ImmutableList`1" /> atual.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])">
      <summary>Copia toda a lista imutável em uma matriz unidimensional compatível, começando pelo início da matriz de destino.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados da lista imutável. A matriz deve ter indexação com base em zero.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)">
      <summary>Copia toda a lista imutável para uma matriz unidimensional compatível, iniciando no índice especificado da matriz de destino.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados da lista imutável. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Copia um intervalo de elementos da lista imutável para uma matriz unidimensional compatível, começando pelo índice especificado da matriz de destino.</summary>
      <param name="index">O índice baseado em zero na lista imutável de origem em que a cópia começa.</param>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados da lista imutável. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice de base zero na matriz no qual a cópia começa.</param>
      <param name="count">O número de elementos a serem copiados.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Count">
      <summary>Obtém o número de elementos contidos na lista.</summary>
      <returns>O número de elementos na lista.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableList`1.Empty">
      <summary>Obtém um conjunto vazio com o comparador de classificação padrão.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Enumerator">
      <summary>Enumera o conteúdo de uma árvore binária.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Dispose">
      <summary>Libera os recursos usados pela instância atual da classe <see cref="T:System.Collections.Immutable.ImmutableList`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.MoveNext">
      <summary>Avança a enumeração para o próximo elemento da lista imutável.</summary>
      <returns>
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Reset">
      <summary>Define o enumerador com sua posição inicial, que é antes do primeiro elemento da lista imutável.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>O elemento atual.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})">
      <summary>Determina se a lista imutável contém elementos que correspondem às condições definidas pelo predicado especificado.</summary>
      <param name="match">O delegado que define as condições dos elementos a serem pesquisados.</param>
      <returns>
        <see langword="true" /> se a lista imutável contiver um ou mais elementos que correspondem às condições definidas pelo predicado especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})">
      <summary>Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna a primeira ocorrência em toda a lista imutável.</summary>
      <param name="match">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns>O primeiro elemento que corresponde às condições definidas pelo predicado especificado, se encontrado; caso contrário, o valor padrão para o tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})">
      <summary>Recupera todos os elementos que correspondem às condições definidas pelo predicado especificado.</summary>
      <param name="match">O delegado que define as condições dos elementos a serem pesquisados.</param>
      <returns>Uma lista imutável que contém todos os elementos que correspondem às condições definidas pelo predicado especificado, se encontrado; caso contrário, uma lista imutável vazia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Pesquisa um elemento que corresponda às condições definidas pelo predicado especificado e retorna o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos na lista imutável, que começa no índice especificado e contém o número de elementos especificado.</summary>
      <param name="startIndex">O índice inicial com base em zero da pesquisa.</param>
      <param name="count">O número de elementos na seção a ser pesquisada.</param>
      <param name="match">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns>O índice baseado em zero da primeira ocorrência de um elemento que corresponde às condições definidas por correspondência, se for encontrado; caso contrário, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>Pesquisa um elemento que corresponda às condições definidas pelo predicado especificado e retorna o índice baseado em zero da primeira ocorrência dentro do intervalo de elementos na lista imutável que se estende do índice especificado ao último elemento.</summary>
      <param name="startIndex">O índice inicial com base em zero da pesquisa.</param>
      <param name="match">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns>O índice baseado em zero da primeira ocorrência de um elemento que corresponde às condições definidas por correspondência, se for encontrado; caso contrário, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})">
      <summary>Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna o índice baseado em zero da primeira ocorrência em toda a lista imutável.</summary>
      <param name="match">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns>O índice baseado em zero da primeira ocorrência de um elemento que corresponde às condições definidas por correspondência, se for encontrado; caso contrário, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})">
      <summary>Pesquisa um elemento que corresponda às condições definidas pelo predicado especificado e retorna a primeira ocorrência em toda a lista imutável.</summary>
      <param name="match">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns>O último elemento que corresponde às condições definidas pelo predicado especificado, se encontrado; caso contrário, o valor padrão para o tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Pesquisa por um elemento que corresponda às condições definidas pelo predicado especificado e retorna o índice baseado em zero da última ocorrência no intervalo de elementos na lista imutável que contém o número de elementos especificado e termina no índice especificado.</summary>
      <param name="startIndex">O índice inicial com base em zero da pesquisa inversa.</param>
      <param name="count">O número de elementos na seção a ser pesquisada.</param>
      <param name="match">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns>O índice baseado em zero da última ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna o índice baseado em zero da última ocorrência dentro do intervalo de elementos na lista imutável que se estende do primeiro elemento ao índice especificado.</summary>
      <param name="startIndex">O índice inicial com base em zero da pesquisa inversa.</param>
      <param name="match">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns>O índice baseado em zero da última ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})">
      <summary>Pesquisa um elemento que corresponde às condições definidas pelo predicado especificado e retorna o índice baseado em zero da última ocorrência em toda a lista imutável.</summary>
      <param name="match">O delegado que define as condições do elemento a ser pesquisado.</param>
      <returns>O índice baseado em zero da última ocorrência de um elemento que corresponde às condições definidas por <paramref name="match" />, se for encontrado; caso contrário, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})">
      <summary>Executa a ação especificada em cada elemento da lista imutável.</summary>
      <param name="action">O delegado a ser executado em cada elemento da lista imutável.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator">
      <summary>Retorna um enumerador que itera na lista imutável.</summary>
      <returns>Um enumerador que pode ser usado para iterar na lista imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)">
      <summary>Cria uma cópia superficial de um intervalo de elementos na lista imutável de origem.</summary>
      <param name="index">O índice baseado em zero no qual é iniciado o intervalo.</param>
      <param name="count">O número de elementos no intervalo.</param>
      <returns>Uma cópia superficial de um intervalo de elementos na lista imutável de origem.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)">
      <summary>Pesquisa o objeto especificado e retorna o índice baseado em zero da primeira ocorrência dentro de toda a lista imutável.</summary>
      <param name="value">O objeto a ser localizado na lista imutável. O valor pode ser <c>nulo</c> para tipos de referência.</param>
      <returns>O índice baseado em zero da primeira ocorrência de <paramref name="value" /> em toda a lista imutável, se encontrado; caso contrário, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Pesquisa o objeto especificado e retorna o índice baseado em zero da primeira ocorrência em um intervalo de elementos na lista que começa no índice especificado e contém o número de elementos especificado.</summary>
      <param name="item">O objeto a ser localizado na lista; o valor pode ser nulo para tipos de referência.</param>
      <param name="index">O índice inicial com base em zero da pesquisa. 0 (zero) é válido em uma lista vazia.</param>
      <param name="count">O número de elementos na seção a ser pesquisada.</param>
      <param name="equalityComparer">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns>O índice baseado em zero da primeira ocorrência do item no intervalo de elementos na lista que começa no índice e contém a contagem de número de elementos, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)">
      <summary>Insere o objeto especificado na lista imutável no índice especificado.</summary>
      <param name="index">O índice baseado em zero no qual inserir o objeto.</param>
      <param name="item">O objeto a ser inserido.</param>
      <returns>A nova lista imutável depois que o objeto é inserido.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Insere os elementos de uma coleção na lista imutável no índice especificado.</summary>
      <param name="index">O índice baseado em zero no qual inserir os elementos.</param>
      <param name="items">A coleção cujos elementos devem ser inseridos.</param>
      <returns>A nova lista imutável depois que os elementos foram inseridos.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.IsEmpty">
      <summary>Obtém um valor que indica se essa lista está vazia.</summary>
      <returns>
        <see langword="true" />se a lista estiver vazia; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Item(System.Int32)">
      <summary>Obtém o elemento no índice especificado da lista.</summary>
      <param name="index">O índice do elemento a ser recuperado.</param>
      <returns>O elemento no índice especificado.</returns>
      <exception cref="T:System.IndexOutOfRangeException">Em uma operação get, <paramref name="index" /> é negativo ou não menor que <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ItemRef(System.Int32)">
      <summary>Obtém uma referência somente leitura ao elemento do conjunto no <paramref name="index" /> especificado.</summary>
      <param name="index">O índice baseado em zero do elemento no conjunto a ser retornado.</param>
      <returns>Uma referência somente leitura ao elemento na posição especificada.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> é negativo ou não é menor que <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Pesquisa o objeto especificado e retorna o índice baseado em zero da última ocorrência no intervalo de elementos na lista que contém o número de elementos especificado e termina no índice especificado.</summary>
      <param name="item">O objeto a ser localizado na lista. O valor pode ser nulo para tipos de referência.</param>
      <param name="index">O índice inicial com base em zero da pesquisa inversa.</param>
      <param name="count">O número de elementos na seção a ser pesquisada.</param>
      <param name="equalityComparer">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns>O índice baseado em zero da última ocorrência do item dentro do intervalo de elementos na lista que contém a contagem de número de elementos e termina no índice, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)">
      <summary>Remove a primeira ocorrência do objeto especificado dessa lista imutável.</summary>
      <param name="value">O objeto a ser removido.</param>
      <returns>Uma nova lista com o objeto removido ou essa lista se o objeto especificado não estiver nessa lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Remove a primeira ocorrência do objeto que corresponde ao valor especificado dessa lista imutável.</summary>
      <param name="value">O valor do elemento a ser removido da lista.</param>
      <param name="equalityComparer">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns>Uma nova lista com o objeto removido ou essa lista se o objeto especificado não estiver nessa lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary>Remove todos os elementos que correspondem às condições definidas pelo predicado especificado.</summary>
      <param name="match">O delegado que define as condições dos elementos a serem removidos.</param>
      <returns>A nova lista com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)">
      <summary>Remove o elemento no índice especificado.</summary>
      <param name="index">O índice de base zero do elemento a ser removido.</param>
      <returns>Uma nova lista com o elemento removido.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Remove um intervalo de elementos dessa lista imutável.</summary>
      <param name="items">A coleção cujos elementos devem ser removidos se correspondências forem encontradas nessa lista.</param>
      <returns>Uma nova lista com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Remove os valores especificados dessa lista.</summary>
      <param name="items">Os itens a serem removidos se correspondências forem encontradas nessa lista.</param>
      <param name="equalityComparer">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns>Uma nova lista com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Remove um intervalo de elementos dessa lista imutável, começando pelo índice especificado e que contém o número especificado de elementos.</summary>
      <param name="index">O índice inicial para iniciar a remoção.</param>
      <param name="count">O número de elementos a serem removidos.</param>
      <returns>Uma nova lista com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)">
      <summary>Substitui o elemento especificado na lista imutável por um novo elemento.</summary>
      <param name="oldValue">O elemento a ser substituído.</param>
      <param name="newValue">O elemento com o qual substituir <paramref name="oldValue" />.</param>
      <returns>A nova lista com o elemento substituído, mesmo que ele seja igual ao elemento antigo.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> não existe na lista imutável.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Substitui o elemento especificado na lista imutável por um novo elemento.</summary>
      <param name="oldValue">O elemento a ser substituído na lista.</param>
      <param name="newValue">O elemento com o qual substituir <paramref name="oldValue" />.</param>
      <param name="equalityComparer">O comparador a ser usado para verificar quanto à igualdade.</param>
      <returns>Uma nova lista com o objeto substituído ou essa lista se o objeto especificado não estiver nessa lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse">
      <summary>Inverte a ordem dos elementos em toda a lista imutável.</summary>
      <returns>A lista invertida.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)">
      <summary>Inverte a ordem dos elementos no intervalo especificado da lista imutável.</summary>
      <param name="index">O índice inicial baseado em zero do intervalo a ser revertido.</param>
      <param name="count">O número de elementos no intervalo a serem revertidos.</param>
      <returns>A lista invertida.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)">
      <summary>Substitui um elemento em uma posição especificada na lista imutável pelo elemento especificado.</summary>
      <param name="index">A posição na lista do elemento a ser substituído.</param>
      <param name="value">O elemento pelo qual substituir o elemento antigo.</param>
      <returns>A nova lista com o elemento substituído, mesmo que ele seja igual ao elemento antigo naquela posição.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort">
      <summary>Classifica os elementos em toda a lista imutável usando o comparador padrão.</summary>
      <returns>A lista classificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Classifica os elementos em toda a lista imutável usando o comparador especificado.</summary>
      <param name="comparer">A implementação a ser usada na comparação de elementos ou <see langword="null" /> para usar o comparador padrão (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
      <returns>A lista classificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})">
      <summary>Classifica os elementos em toda a lista imutável usando o comparador especificado.</summary>
      <param name="comparison">O delegado a ser usado na comparação de elementos.</param>
      <returns>A lista classificada.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Classifica um intervalo de elementos na lista imutável usando o comparador especificado.</summary>
      <param name="index">O índice inicial baseado em zero do intervalo a ser classificado.</param>
      <param name="count">O tamanho do intervalo a ser classificado.</param>
      <param name="comparer">A implementação a ser usada na comparação de elementos ou <see langword="null" /> para usar o comparador padrão (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
      <returns>A lista classificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Adiciona o item especificado à lista imutável.</summary>
      <param name="item">O item a ser adicionado.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Remove todos os itens da lista imutável.</summary>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Remove a primeira ocorrência de um objeto específico da lista imutável.</summary>
      <param name="item">O objeto a ser removido.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> tiver sido removido com êxito da lista; caso contrário, <see langword="false" />. Esse método também retornará <see langword="false" /> se o <paramref name="item" /> não for encontrado na lista original.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retorna um enumerador que itera na lista imutável.</summary>
      <returns>Um enumerador que pode ser usado para iterar na lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Insere um objeto na lista imutável no índice especificado.</summary>
      <param name="index">O índice de base zero no qual o <paramref name="item" /> deve ser inserido.</param>
      <param name="item">O objeto a ser inserido.</param>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Obtém ou define o valor no índice especificado.</summary>
      <param name="index" />
      <exception cref="T:System.IndexOutOfRangeException">Gerado de getter quando <paramref name="index" /> for negativo ou não for menor que <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">Sempre lançado de setter.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Remove o valor no índice especificado.</summary>
      <param name="index">O índice com base em zero do item a ser removido.</param>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia toda a lista imutável para uma matriz unidimensional compatível, iniciando no índice especificado da matriz.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados da lista imutável.</param>
      <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized">
      <summary>Consulte a interface <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot">
      <summary>Consulte <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera na lista imutável.</summary>
      <returns>Um enumerador que pode ser usado para iterar na lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)">
      <summary>Adiciona um item à lista imutável.</summary>
      <param name="value">O objeto a ser adicionado à lista.</param>
      <returns>A posição na qual o novo elemento foi inserido ou -1 para indicar que o item não foi inserido na lista.</returns>
      <exception cref="T:System.NotSupportedException">Sempre lançada.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear">
      <summary>Remove todos os itens da lista imutável.</summary>
      <exception cref="T:System.NotSupportedException">Sempre lançada.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determina se a lista imutável contém um valor específico.</summary>
      <param name="value">O objeto a ser localizado na lista.</param>
      <returns>
        <see langword="true" /> se o objeto for encontrado na lista; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determina o índice de um item específico na lista imutável.</summary>
      <param name="value">O objeto a ser localizado na lista.</param>
      <returns>O índice de <paramref name="value" /> se encontrado na lista; caso contrário, -1.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Insere um item na lista imutável no índice especificado.</summary>
      <param name="index">O índice de base zero no qual o <paramref name="value" /> deve ser inserido.</param>
      <param name="value">O objeto a ser inserido na lista.</param>
      <exception cref="T:System.NotSupportedException">Sempre lançada.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.IList" /> tem um tamanho fixo.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.IList" /> tiver um valor fixo; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)">
      <summary>Obtém ou define o <see cref="T:System.Object" /> no índice especificado.</summary>
      <param name="index">O índice.</param>
      <returns>O valor no índice especificado.</returns>
      <exception cref="T:System.IndexOutOfRangeException">Gerado de getter quando <paramref name="index" /> for negativo ou não for menor que <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">Sempre lançado de setter.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)">
      <summary>Remove a primeira ocorrência de um objeto específico da lista imutável.</summary>
      <param name="value">O objeto a ser removido da lista.</param>
      <exception cref="T:System.NotSupportedException">Sempre lançada.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Remove o item no índice especificado da lista imutável.</summary>
      <param name="index">O índice com base em zero do item a ser removido.</param>
      <exception cref="T:System.NotSupportedException">Sempre lançada.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary>Adiciona o valor especificado a essa lista imutável.</summary>
      <param name="value">O valor a ser adicionado.</param>
      <returns>Uma nova lista com o elemento adicionado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Adiciona os valores especificados a essa lista imutável.</summary>
      <param name="items">Os valores a serem adicionados.</param>
      <returns>Uma nova lista com os elementos adicionados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary>Recupera uma lista vazia que tem as mesmas semânticas de classificação e ordenação que essa instância.</summary>
      <returns>Uma lista vazia que tem as mesmas semânticas de classificação e ordenação que essa instância.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary>Insere o elemento especificado no índice especificado na lista imutável.</summary>
      <param name="index">O índice no qual inserir o valor.</param>
      <param name="item">O elemento a ser inserido.</param>
      <returns>Uma nova lista imutável que inclui o elemento especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Insere os elementos especificados no índice especificado na lista imutável.</summary>
      <param name="index">O índice no qual inserir os elementos.</param>
      <param name="items">Os elementos a serem inseridos.</param>
      <returns>Uma nova lista imutável que inclui os elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Remove o elemento com o valor especificado da lista.</summary>
      <param name="value">O valor do elemento a ser removido da lista.</param>
      <param name="equalityComparer">O comparador a ser usado para comparar elementos quanto à igualdade.</param>
      <returns>Um novo <see cref="T:System.Collections.Immutable.ImmutableList`1" /> com o elemento especificado removido.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary>Remove todos os elementos que correspondem às condições definidas pelo predicado especificado.</summary>
      <param name="match">O delegado que define as condições dos elementos a serem removidos.</param>
      <returns>Uma nova lista imutável com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary>Remove o elemento no índice especificado da lista imutável.</summary>
      <param name="index">O índice do elemento a ser removido.</param>
      <returns>Uma nova lista com o elemento removido.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Remove um intervalo de elementos dessa lista imutável que correspondem aos itens especificados.</summary>
      <param name="items">O intervalo de itens a serem removidos da lista, se encontrado.</param>
      <param name="equalityComparer">O comparador de igualdade a ser usado para comparar os elementos.</param>
      <returns>Uma lista imutável com os itens removidos.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> ou <paramref name="equalityComparer" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary>Remove o número especificado de elementos no local especificado dessa lista.</summary>
      <param name="index">O índice inicial do intervalo de elementos a serem removidos.</param>
      <param name="count">O número de elementos a serem removidos.</param>
      <returns>Uma nova lista com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Substitui um elemento na lista pelo elemento especificado.</summary>
      <param name="oldValue">O elemento a ser substituído.</param>
      <param name="newValue">O elemento pelo qual substituir o elemento antigo.</param>
      <param name="equalityComparer">O comparador de igualdade a ser usado na pesquisa.</param>
      <returns>A nova lista.</returns>
      <exception cref="T:System.ArgumentException">Gerado quando o valor antigo não existe na lista.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary>Substitui um elemento na lista na posição especificada, pelo elemento especificado.</summary>
      <param name="index">A posição na lista do elemento a ser substituído.</param>
      <param name="value">O elemento pelo qual substituir o elemento antigo.</param>
      <returns>A nova lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ToBuilder">
      <summary>Cria uma lista que tem o mesmo conteúdo que essa lista e pode ser modificada com eficiência em várias operações usando interfaces mutáveis padrão.</summary>
      <returns>A lista criada com o mesmo conteúdo que essa lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})">
      <summary>Determina se cada elemento da lista imutável coincide com as condições definidas pelo predicado especificado.</summary>
      <param name="match">O delegado que define as condições a serem verificadas nos elementos.</param>
      <returns>
        <see langword="true" /> se cada elemento da lista imutável corresponder às condições definidas pelo predicado especificado; caso contrário, <see langword="false" />. Se a lista não tiver elementos, o valor retornado será <see langword="true" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue">
      <summary>Fornece um conjunto de métodos de inicialização para instâncias da classe <see cref="T:System.Collections.Immutable.ImmutableQueue`1" />.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1">
      <summary>Cria uma fila imutável vazia.</summary>
      <typeparam name="T">O tipo de itens a serem armazenados na fila imutável.</typeparam>
      <returns>Uma fila imutável vazia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0)">
      <summary>Cria uma nova fila imutável que contém o item especificado.</summary>
      <param name="item">O item com o qual preencher previamente a fila.</param>
      <typeparam name="T">O tipo de itens na fila imutável.</typeparam>
      <returns>Uma nova fila imutável que contém o item especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0[])">
      <summary>Cria uma nova fila imutável que contém a matriz especificada de itens.</summary>
      <param name="items">Uma matriz que contém os itens com os quais preencher previamente a fila.</param>
      <typeparam name="T">O tipo de itens na fila imutável.</typeparam>
      <returns>Uma nova fila imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Cria uma nova fila imutável que contém os itens especificados.</summary>
      <param name="items">Os itens a serem adicionados à fila antes que a imutabilidade seja aplicada.</param>
      <typeparam name="T">O tipo de elementos na fila.</typeparam>
      <returns>Uma fila imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Dequeue``1(System.Collections.Immutable.IImmutableQueue{``0},``0@)">
      <summary>Remove o item no início da fila imutável e retorna a nova fila.</summary>
      <param name="queue">A fila da qual remover o item.</param>
      <param name="value">Quando este método retorna, ele contém o item do início da fila.</param>
      <typeparam name="T">O tipo de elementos na fila imutável.</typeparam>
      <returns>A nova fila com o item removido.</returns>
      <exception cref="T:System.InvalidOperationException">A pilha está vazia.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1">
      <summary>Representa uma fila imutável.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T">O tipo de elementos na fila.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Clear">
      <summary>Remove todos os objetos da fila imutável.</summary>
      <returns>A fila imutável vazia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue">
      <summary>Remove o elemento no início da fila imutável e retorna a nova fila.</summary>
      <returns>A nova fila imutável; nunca <c>null</c>.</returns>
      <exception cref="T:System.InvalidOperationException">A fila está vazia.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)">
      <summary>Remove o item no início da fila imutável e retorna a nova fila.</summary>
      <param name="value">Quando este método retorna, ele contém o elemento do início da fila.</param>
      <returns>A nova fila imutável com o elemento de início removido.</returns>
      <exception cref="T:System.InvalidOperationException">A fila está vazia.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Empty">
      <summary>Obtém uma fila imutável vazia.</summary>
      <returns>Uma fila imutável vazia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)">
      <summary>Adiciona um elemento ao final da fila imutável e retorna a nova fila.</summary>
      <param name="value">O elemento a ser adicionado.</param>
      <returns>A nova fila imutável.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1.Enumerator">
      <summary>Enumera o conteúdo de uma fila imutável sem qualquer alocação de memória.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Enumerator.Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.MoveNext">
      <summary>Avança o enumerador para o próximo elemento da fila imutável.</summary>
      <returns>
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da fila.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.GetEnumerator">
      <summary>Retorna um enumerador que itera na fila imutável.</summary>
      <returns>Um enumerador que pode ser usado para iterar na fila.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.IsEmpty">
      <summary>Obtém um valor que indica se essa fila imutável está vazia.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <returns>
        <see langword="true" />Se essa fila estiver vazia; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Peek">
      <summary>Retorna o elemento no início da fila imutável sem removê-lo.</summary>
      <returns>O elemento no início da fila.</returns>
      <exception cref="T:System.InvalidOperationException">A fila está vazia.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.PeekRef">
      <summary>Obtém uma referência somente leitura ao elemento no início da fila.</summary>
      <exception cref="T:System.InvalidOperationException">A fila está vazia.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retorna um enumerador que itera pela coleção.</summary>
      <returns>Um enumerador que pode ser usado para iterar na coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um objeto <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Clear">
      <summary>Remove todos os elementos da fila imutável.</summary>
      <returns>A fila imutável vazia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Dequeue">
      <summary>Remove o elemento no início da fila imutável e retorna a nova fila.</summary>
      <returns>A nova fila imutável; nunca <c>null</c>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Enqueue(`0)">
      <summary>Adiciona um elemento ao final da fila imutável e retorna a nova fila.</summary>
      <param name="value">O elemento a ser adicionado.</param>
      <returns>A nova fila imutável.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary">
      <summary>Fornece um conjunto de métodos de inicialização para instâncias da classe <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2" />.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2">
      <summary>Cria um dicionário classificado imutável vazio.</summary>
      <typeparam name="TKey">O tipo de chaves armazenadas pelo dicionário.</typeparam>
      <typeparam name="TValue">O tipo de valores armazenados pelo dicionário.</typeparam>
      <returns>Um dicionário classificado imutável vazio.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0})">
      <summary>Cria um dicionário classificado imutável vazio que usa o comparador de chave especificado.</summary>
      <param name="keyComparer">A implementação a ser usada para determinar a igualdade de chaves no dicionário.</param>
      <typeparam name="TKey">O tipo de chaves armazenadas pelo dicionário.</typeparam>
      <typeparam name="TValue">O tipo de valores armazenados pelo dicionário.</typeparam>
      <returns>Um dicionário classificado imutável vazio.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Cria um dicionário classificado imutável vazio que usa os comparadores de chave e valor especificados.</summary>
      <param name="keyComparer">A implementação a ser usada para determinar a igualdade de chaves no dicionário.</param>
      <param name="valueComparer">A implementação a ser usada para determinar igualdade de valores no dicionário.</param>
      <typeparam name="TKey">O tipo de chaves armazenadas pelo dicionário.</typeparam>
      <typeparam name="TValue">O tipo de valores armazenados pelo dicionário.</typeparam>
      <returns>Um dicionário classificado imutável vazio.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2">
      <summary>Cria um novo construtor de dicionário classificado imutável.</summary>
      <typeparam name="TKey">O tipo de chaves armazenadas pelo dicionário.</typeparam>
      <typeparam name="TValue">O tipo de valores armazenados pelo dicionário.</typeparam>
      <returns>O construtor de coleção imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0})">
      <summary>Cria um novo construtor de dicionário classificado imutável.</summary>
      <param name="keyComparer">O comparador de chave.</param>
      <typeparam name="TKey">O tipo de chaves armazenadas pelo dicionário.</typeparam>
      <typeparam name="TValue">O tipo de valores armazenados pelo dicionário.</typeparam>
      <returns>O construtor de coleção imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Cria um novo construtor de dicionário classificado imutável.</summary>
      <param name="keyComparer">O comparador de chave.</param>
      <param name="valueComparer">O comparador de valor.</param>
      <typeparam name="TKey">O tipo de chaves armazenadas pelo dicionário.</typeparam>
      <typeparam name="TValue">O tipo de valores armazenados pelo dicionário.</typeparam>
      <returns>O construtor de coleção imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Cria um novo dicionário classificado imutável com base no intervalo especificado de itens com o comparador de chave especificado.</summary>
      <param name="keyComparer">A implementação de comparador a ser usada para avaliar as chaves quanto à igualdade e classificação.</param>
      <param name="items">Os itens a serem adicionados ao dicionário classificado.</param>
      <typeparam name="TKey">O tipo de chaves armazenadas no dicionário.</typeparam>
      <typeparam name="TValue">O tipo de valores armazenados no dicionário.</typeparam>
      <returns>O novo dicionário classificado imutável que contém os itens especificados e usa o comparador de chave especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Cria um novo dicionário classificado imutável com base no intervalo especificado de itens com os comparadores de chave e valor especificados.</summary>
      <param name="keyComparer">A implementação de comparador a ser usada para comparar as chaves quanto à igualdade e classificação.</param>
      <param name="valueComparer">A implementação de comparador a ser usada para comparar valores quanto à igualdade e classificação.</param>
      <param name="items">Os itens a serem adicionados ao dicionário classificado antes que ele seja imutável.</param>
      <typeparam name="TKey">O tipo de chaves armazenadas no dicionário.</typeparam>
      <typeparam name="TValue">O tipo de valores armazenados no dicionário.</typeparam>
      <returns>Um dicionário classificado imutável que contém os itens especificados e usa os comparadores especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Cria um dicionário classificado imutável que contém os itens especificados e usa o comparador padrão.</summary>
      <param name="items">Os itens a serem adicionados ao dicionário classificado antes que ele seja imutável.</param>
      <typeparam name="TKey">O tipo de chaves armazenadas no dicionário.</typeparam>
      <typeparam name="TValue">O tipo de valores armazenados no dicionário.</typeparam>
      <returns>Um dicionário classificado imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Enumera uma sequência de pares chave/valor e produz um dicionário classificado imutável de seu conteúdo.</summary>
      <param name="source">A sequência de pares chave/valor a ser enumerada.</param>
      <typeparam name="TKey">O tipo das chaves no dicionário.</typeparam>
      <typeparam name="TValue">O tipo dos valores no dicionário.</typeparam>
      <returns>Um dicionário classificado imutável que contém os pares chave/valor na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})">
      <summary>Enumera uma sequência de pares chave/valor e produz um dicionário imutável de seu conteúdo, usando o comparador de chave especificado.</summary>
      <param name="source">A sequência de pares chave/valor a ser enumerada.</param>
      <param name="keyComparer">O comparador de chave a ser usado ao criar o dicionário imutável.</param>
      <typeparam name="TKey">O tipo das chaves no dicionário.</typeparam>
      <typeparam name="TValue">O tipo dos valores no dicionário.</typeparam>
      <returns>Um dicionário classificado imutável que contém os pares chave/valor na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Enumera uma sequência de pares chave/valor e produz um dicionário classificado imutável de seu conteúdo, usando os comparadores de chave e valor especificados.</summary>
      <param name="source">A sequência de pares chave/valor a ser enumerada.</param>
      <param name="keyComparer">O comparador de chave a ser usado ao criar o dicionário imutável.</param>
      <param name="valueComparer">O comparador de valor a ser usado para o dicionário imutável.</param>
      <typeparam name="TKey">O tipo das chaves no dicionário.</typeparam>
      <typeparam name="TValue">O tipo dos valores no dicionário.</typeparam>
      <returns>Um dicionário classificado imutável que contém os pares chave/valor na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Immutable.ImmutableSortedDictionary{``0,``1}.Builder)">
      <summary>Cria um dicionário classificado imutável do conteúdo atual do dicionário do construtor.</summary>
      <param name="builder">O construtor para o qual criar o dicionário classificado imutável.</param>
      <typeparam name="TKey">O tipo das chaves no dicionário.</typeparam>
      <typeparam name="TValue">O tipo dos valores no dicionário.</typeparam>
      <returns>Cria um dicionário classificado imutável preenchido com o conteúdo atual do dicionário do construtor.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Enumera e transforma uma sequência e produz um dicionário classificado imutável com base em seu conteúdo.</summary>
      <param name="source">A sequência a ser enumerada para gerar o dicionário.</param>
      <param name="keySelector">A função que produzirá a chave para o dicionário de cada elemento de sequência.</param>
      <param name="elementSelector">A função que produzirá o valor para o dicionário de cada elemento de sequência.</param>
      <typeparam name="TSource">O tipo dos elementos na sequência.</typeparam>
      <typeparam name="TKey">O tipo das chaves no dicionário resultante.</typeparam>
      <typeparam name="TValue">O tipo dos valores no dicionário resultante.</typeparam>
      <returns>Um dicionário classificado imutável que contém os itens na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})">
      <summary>Enumera e transforma uma sequência e produz um dicionário classificado imutável com base em seu conteúdo usando o comparador de chave especificado.</summary>
      <param name="source">A sequência a ser enumerada para gerar o dicionário.</param>
      <param name="keySelector">A função que produzirá a chave para o dicionário de cada elemento de sequência.</param>
      <param name="elementSelector">A função que produzirá o valor para o dicionário de cada elemento de sequência.</param>
      <param name="keyComparer">O comparador de chave a ser usado para o dicionário.</param>
      <typeparam name="TSource">O tipo dos elementos na sequência.</typeparam>
      <typeparam name="TKey">O tipo das chaves no dicionário resultante.</typeparam>
      <typeparam name="TValue">O tipo dos valores no dicionário resultante.</typeparam>
      <returns>Um dicionário imutável que contém os itens na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Enumera e transforma uma sequência e produz um dicionário classificado imutável com base em seu conteúdo usando os comparadores de chave e valor especificados.</summary>
      <param name="source">A sequência a ser enumerada para gerar o dicionário.</param>
      <param name="keySelector">A função que produzirá a chave para o dicionário de cada elemento de sequência.</param>
      <param name="elementSelector">A função que produzirá o valor para o dicionário de cada elemento de sequência.</param>
      <param name="keyComparer">O comparador de chave a ser usado para o dicionário.</param>
      <param name="valueComparer">O comparador de valor a ser usado para o dicionário.</param>
      <typeparam name="TSource">O tipo dos elementos na sequência.</typeparam>
      <typeparam name="TKey">O tipo das chaves no dicionário resultante.</typeparam>
      <typeparam name="TValue">O tipo dos valores no dicionário resultante.</typeparam>
      <returns>Um dicionário classificado imutável que contém os itens na sequência especificada.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2">
      <summary>Representa um dicionário classificado imutável.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="TKey">O tipo da chave contida no dicionário.</typeparam>
      <typeparam name="TValue">O tipo do valor contido no dicionário.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Add(`0,`1)">
      <summary>Adiciona um elemento com a chave e o valor especificados ao dicionário classificado imutável.</summary>
      <param name="key">A chave da entrada a ser adicionada.</param>
      <param name="value">O valor da entrada a ser adicionada.</param>
      <returns>Um novo dicionário classificado imutável que contém o par chave/valor adicional.</returns>
      <exception cref="T:System.ArgumentException">A chave especificada já existe no dicionário, mas tem um valor diferente.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Adiciona os pares chave/valor específicos ao dicionário classificado imutável.</summary>
      <param name="items">Os pares chave/valor a serem adicionados.</param>
      <returns>Um novo dicionário imutável que contém os pares chave/valor adicionais.</returns>
      <exception cref="T:System.ArgumentException">Uma das chaves fornecidas já existe no dicionário, mas tem um valor diferente.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder">
      <summary>Representa um dicionário classificado que se modifica com pouca ou nenhuma alocação de memória e que pode produzir ou criar instâncias de dicionário classificado imutável de maneira muito eficiente.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)">
      <summary>Adiciona um elemento que tem a chave e o valor especificados ao dicionário classificado imutável.</summary>
      <param name="key">A chave do elemento a ser adicionada.</param>
      <param name="value">O valor do elemento a ser adicionado.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Adiciona o item especificado ao dicionário classificado imutável.</summary>
      <param name="item">O objeto a ser adicionado ao dicionário.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Adiciona uma sequência de valores ao dicionário classificado imutável.</summary>
      <param name="items">Os itens a serem adicionados ao dicionário.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear">
      <summary>Remove todos os itens do dicionário classificado imutável.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determina se o dicionário classificado imutável contém um valor específico.</summary>
      <param name="item">O objeto a ser localizado no dicionário.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> for encontrada no dicionário; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)">
      <summary>Determina se o dicionário classificado imutável contém um elemento com a chave especificada.</summary>
      <param name="key">A chave a ser localizada no dicionário.</param>
      <returns>
        <see langword="true" /> se o dicionário contiver um elemento com a chave; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)">
      <summary>Determina se o dicionário classificado imutável contém um elemento com o valor especificado.</summary>
      <param name="value">O valor a ser localizado no dicionário. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns>
        <see langword="true" /> se o dicionário classificado imutável contém um elemento com o valor especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count">
      <summary>Obtém o número de elementos neste dicionário classificado imutável.</summary>
      <returns>O número de elementos neste dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator">
      <summary>Retorna um enumerador que itera no dicionário classificado imutável.</summary>
      <returns>Um enumerador que pode ser usado para iterar no dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary>Obtém o valor de uma determinada chave, se uma chave correspondente existir no dicionário; caso contrário, o valor padrão.</summary>
      <param name="key">A chave a ser pesquisada.</param>
      <returns>O valor da chave ou <c>default(TValue)</c> se nenhuma chave correspondente for encontrada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary>Obtém o valor de uma determinada chave, se uma chave correspondente existir no dicionário; caso contrário, o valor padrão.</summary>
      <param name="key">A chave a ser pesquisada.</param>
      <param name="defaultValue">O valor padrão a ser retornado se nenhuma chave correspondente for encontrada no dicionário.</param>
      <returns>O valor da chave ou <paramref name="defaultValue" /> se nenhuma chave correspondente for encontrada.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Item(`0)">
      <summary>Obtém ou define o valor de uma chave especificada no dicionário classificado imutável.</summary>
      <param name="key">A chave para a qual recuperar o valor.</param>
      <returns>O valor associado à chave especificada.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer">
      <summary>Obtém ou define o comparador de chave.</summary>
      <returns>O comparador de chave.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys">
      <summary>Obtém uma coleção de elementos fortemente tipada e somente leitura.</summary>
      <returns>Uma coleção fortemente tipada de elementos somente leitura.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)">
      <summary>Remove o elemento com a chave especificada do dicionário classificado imutável.</summary>
      <param name="key">A chave do elemento a ser removido.</param>
      <returns>
        <see langword="true" /> se o elemento for removido com êxito; caso contrário, <see langword="false" />. Esse método também retornará <see langword="false" /> se <paramref name="key" /> não tiver sido encontrado no dicionário original.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Remove a primeira ocorrência de um objeto específico do dicionário classificado imutável.</summary>
      <param name="item">O objeto a ser removido do dicionário.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> tiver sido removido com êxito do dicionário; caso contrário, <see langword="false" />. Esse método também retornará <see langword="false" /> se o <paramref name="item" /> não for encontrado no dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Remove todas as entradas com chaves que correspondam àquelas encontradas na sequência especificada do dicionário classificado imutável.</summary>
      <param name="keys">As chaves das entradas a serem removidas do dicionário.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos do dicionário em uma matriz, começando em um índice de matriz específico.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados do dicionário. A matriz deve ter indexação com base em zero.</param>
      <param name="index">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso ao <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Adiciona um elemento com a chave e o valor fornecidos ao objeto de dicionário.</summary>
      <param name="key">A chave do elemento a ser adicionada.</param>
      <param name="value">O valor do elemento a ser adicionado.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determina se o objeto de dicionário contém um elemento com a chave especificada.</summary>
      <param name="key">A chave a ser localizada.</param>
      <returns>
        <see langword="true" /> se o dicionário contiver um elemento com a chave; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary>Retorna um objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para o dicionário.</summary>
      <returns>Um objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para o dicionário.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary>Obtém um valor que indica se o objeto <see cref="T:System.Collections.IDictionary" /> tem um tamanho fixo.</summary>
      <returns>
        <see langword="true" />Se o <see cref="T:System.Collections.IDictionary" /> objeto tiver um tamanho fixo; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary>Obtém ou define o elemento com a chave especificada.</summary>
      <param name="key">A chave.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary>Obtém um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém as chaves do <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém as chaves do objeto que implementa <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Remove o elemento com a chave especificada do dicionário.</summary>
      <param name="key">A chave do elemento a ser removido.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary>Obtém um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém os valores no <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém os valores no objeto que implementa <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um objeto enumerador que pode ser usado para iterar na coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable">
      <summary>Cria um dicionário classificado imutável de acordo com o conteúdo desta instância.</summary>
      <returns>Um dicionário classificado imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary>Determina se este dicionário contém uma chave especificada.</summary>
      <param name="equalKey">A chave a ser pesquisada.</param>
      <param name="actualKey">A chave correspondente localizada no dicionário, se encontrada, ou <c>equalkey</c> se nenhuma correspondência for encontrada.</param>
      <returns>
        <see langword="true" /> se uma correspondência para <paramref name="equalKey" /> for encontrada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary>Obtém o valor associado à chave especificada.</summary>
      <param name="key">A chave cujo valor será recuperado.</param>
      <param name="value">Quando esse método retorna, ele contém o valor associado à chave especificada, caso a chave seja encontrada; caso contrário, conterá o valor padrão para o tipo do parâmetro <paramref name="value" />. Este parâmetro é passado não inicializado.</param>
      <returns>
        <see langword="true" /> se o objeto que implementa o dicionário contiver um elemento com a chave especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer">
      <summary>Obtém ou define o comparador de valor.</summary>
      <returns>O comparador de valor.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueRef(`0)">
      <summary>Retorna uma referência somente leitura ao valor associado ao <paramref name="key" /> fornecido.</summary>
      <param name="key" />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">O <paramref name="key" /> não está presente.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values">
      <summary>Obtém uma coleção que contém os valores do dicionário classificado imutável.</summary>
      <returns>Uma coleção que contém os valores do objeto que implementa o dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Clear">
      <summary>Recupera um dicionário classificado imutável vazio que tem a mesma ordenação e regras de comparação de chave/valor que essa instância de dicionário.</summary>
      <returns>Um dicionário vazio com ordenação e regras de comparação de chave/valor equivalentes.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determina se esse dicionário classificado imutável contém o par chave/valor especificado.</summary>
      <param name="pair">O par chave/valor a ser localizado.</param>
      <returns>
        <see langword="true" /> se o par chave/valor especificado for encontrado no dicionário; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsKey(`0)">
      <summary>Determina se este mapa classificado imutável contém a chave especificada.</summary>
      <param name="key">A chave a ser localizada.</param>
      <returns>
        <see langword="true" /> se o dicionário imutável contiver a chave especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsValue(`1)">
      <summary>Determina se o dicionário classificado imutável contém um elemento com o valor especificado.</summary>
      <param name="value">O valor a ser localizado. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <returns>
        <see langword="true" /> se o dicionário contiver um elemento com o valor especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Count">
      <summary>Obtém o número de pares chave/valor no dicionário classificado imutável.</summary>
      <returns>O número de pares de chave/valor no dicionário.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedDictionary`2.Empty">
      <summary>Obtém um dicionário classificado imutável vazio.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator">
      <summary>Enumera o conteúdo de uma árvore binária.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Dispose">
      <summary>Libera os recursos usados pela instância atual da classe <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.MoveNext">
      <summary>Avança o enumerador para o próximo elemento do dicionário classificado imutável.</summary>
      <returns>
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final do dicionário classificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Reset">
      <summary>Define o enumerador com sua posição inicial, que é antes do primeiro elemento do dicionário classificado imutável.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>O elemento atual.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.GetEnumerator">
      <summary>Retorna um enumerador que itera no dicionário classificado imutável.</summary>
      <returns>Um enumerador que pode ser usado para iterar no dicionário.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.IsEmpty">
      <summary>Obtém um valor que indica se essa instância do dicionário classificado imutável está vazia.</summary>
      <returns>
        <see langword="true" />Se esta instância estiver vazia; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Item(`0)">
      <summary>Obtém o <paramref name="TValue" /> associado à chave especificada.</summary>
      <param name="key">A chave para a qual recuperar o valor.</param>
      <returns>O valor associado à chave especificada. Se nenhum resultado for encontrado, a operação lançará uma exceção.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.KeyComparer">
      <summary>Obtém o comparador de chave para o dicionário classificado imutável.</summary>
      <returns>O comparador de chave para o dicionário.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Keys">
      <summary>Obtém as chaves no dicionário classificado imutável.</summary>
      <returns>As chaves no dicionário imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Remove(`0)">
      <summary>Remove o elemento com o valor especificado do dicionário classificado imutável.</summary>
      <param name="value">O valor do elemento a ser removido.</param>
      <returns>Um novo dicionário imutável com o elemento especificado removido; ou esta instância, se o valor especificado não puder ser encontrado no dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Remove os elementos do dicionário classificado imutável com as chaves especificadas.</summary>
      <param name="keys">As chaves dos elementos a serem removidos.</param>
      <returns>Um novo dicionário imutável com as chaves especificadas removidas; ou esta instância, se a chave especificada não puder ser encontrada no dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItem(`0,`1)">
      <summary>Define a chave especificada e o valor no dicionário classificado imutável, possivelmente substituindo um valor existente para a chave especificada.</summary>
      <param name="key">A chave da entrada a ser adicionada.</param>
      <param name="value">O valor de chave a ser definido.</param>
      <returns>Um novo dicionário classificado imutável que contém o par chave/valor especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Define os pares chave/valor especificados no dicionário classificado imutável, possivelmente substituindo valores existente para as chaves.</summary>
      <param name="items">Os pares chave/valor a serem definidos no dicionário. Se qualquer uma das chaves já existir no dicionário, este método substituirá os respectivos valores anteriores.</param>
      <returns>Um dicionário imutável que contém os pares chave/valor especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos do dicionário em uma matriz, começando em um índice de matriz específico.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados do dicionário. A matriz deve ter indexação com base em zero.</param>
      <param name="index">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso à <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" />Se o <see cref="T:System.Collections.ICollection" /> acesso ao for sincronizado (thread-safe); caso <see langword="false" />contrário,.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Adiciona um elemento com a chave e o valor fornecidos ao objeto de dicionário.</summary>
      <param name="key">O objeto a ser usado como chave do elemento a ser adicionado.</param>
      <param name="value">O objeto a ser usado como o valor do elemento a ser adicionado.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Clear">
      <summary>Limpa essa instância.</summary>
      <exception cref="T:System.NotSupportedException">O objeto de dicionário é somente leitura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determina se o objeto dicionário imutável contém um elemento com a chave especificada.</summary>
      <param name="key">A chave a ser localizada no objeto de dicionário.</param>
      <returns>
        <see langword="true" /> se o dicionário contiver um elemento com a chave; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Retorna um objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para o objeto de dicionário imutável.</summary>
      <returns>Um objeto enumerador para o objeto de dicionário.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Obtém um valor que indica se o objeto <see cref="T:System.Collections.IDictionary" /> tem um tamanho fixo.</summary>
      <returns>
        <see langword="true" />Se o <see cref="T:System.Collections.IDictionary" /> objeto tiver um tamanho fixo; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Obtém ou define o elemento com a chave especificada.</summary>
      <param name="key">A chave.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>Obtém um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém as chaves do <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém as chaves do objeto que implementa <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Remove o elemento com a chave especificada do objeto de dicionário imutável.</summary>
      <param name="key">A chave do elemento a ser removido.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>Obtém um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém os valores no <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Um <see cref="T:System.Collections.Generic.ICollection`1" /> que contém os valores no objeto que implementa <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um objeto enumerador que pode ser usado para iterar na coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ToBuilder">
      <summary>Cria um dicionário classificado imutável com o mesmo conteúdo deste dicionário que pode ser modificado com eficiência em várias operações usando interfaces mutáveis padrão.</summary>
      <returns>Uma coleção com o mesmo conteúdo deste dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetKey(`0,`0@)">
      <summary>Determina se este dicionário contém uma chave especificada.</summary>
      <param name="equalKey">A chave a ser pesquisada.</param>
      <param name="actualKey">A chave correspondente localizada no dicionário, se encontrada, ou <c>equalkey</c> se nenhuma correspondência for encontrada.</param>
      <returns>
        <see langword="true" /> se uma correspondência para <paramref name="equalKey" /> for encontrada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>Obtém o valor associado à chave especificada.</summary>
      <param name="key">A chave cujo valor será recuperado.</param>
      <param name="value">Quando esse método retorna, ele contém o valor associado à chave especificada, caso a chave seja encontrada; caso contrário, conterá o valor padrão para o tipo do parâmetro <paramref name="value" />.</param>
      <returns>
        <see langword="true" /> se o dicionário contiver um elemento com a chave especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueComparer">
      <summary>Obtém o comparador de valor usado para determinar se os valores são iguais.</summary>
      <returns>O comparador de valor usado para determinar se os valores são iguais.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueRef(`0)">
      <summary>Retorna uma referência somente leitura ao valor associado ao <paramref name="key" /> fornecido.</summary>
      <param name="key" />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">O <paramref name="key" /> não está presente.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Values">
      <summary>Obtém os valores no dicionário classificado imutável.</summary>
      <returns>Os valores no dicionário.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0})">
      <summary>Obtém uma instância do dicionário classificado imutável que usa o comparador de chave especificado.</summary>
      <param name="keyComparer">O comparador de chave a ser usado.</param>
      <returns>Uma instância do dicionário imutável que usa o comparador especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>Obtém uma instância do dicionário classificado imutável que usa o comparador de chave e valor especificados.</summary>
      <param name="keyComparer">O comparador de chave a ser usado.</param>
      <param name="valueComparer">O comparador de valor a ser usado.</param>
      <returns>Uma instância do dicionário imutável que usa os comparadores especificados.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet">
      <summary>Fornece um conjunto de métodos de inicialização para instâncias da classe <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1" />.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1">
      <summary>Cria um conjunto classificado imutável vazio.</summary>
      <typeparam name="T">O tipo de itens a serem armazenados no conjunto imutável.</typeparam>
      <returns>Um conjunto classificado imutável vazio.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)">
      <summary>Cria um novo conjunto classificado imutável que contém o item especificado.</summary>
      <param name="item">O item com o qual preencher previamente o conjunto.</param>
      <typeparam name="T">O tipo de itens no conjunto imutável.</typeparam>
      <returns>Um novo conjunto imutável que contém o item especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])">
      <summary>Cria um novo conjunto classificado imutável que contém a matriz de itens especificada.</summary>
      <param name="items">Uma matriz que contém os itens com os quais preencher previamente o conjunto.</param>
      <typeparam name="T">O tipo de itens no conjunto imutável.</typeparam>
      <returns>Um novo conjunto imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})">
      <summary>Cria um conjunto classificado imutável vazio que usa o comparador especificado.</summary>
      <param name="comparer">A implementação a ser usada ao comparar os itens no conjunto.</param>
      <typeparam name="T">O tipo de itens no conjunto imutável.</typeparam>
      <returns>Um conjunto imutável vazio.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)">
      <summary>Cria um novo conjunto classificado imutável que contém o item especificado e usa o comparador especificado.</summary>
      <param name="comparer">A implementação a ser usada ao comparar os itens no conjunto.</param>
      <param name="item">O item com o qual preencher previamente o conjunto.</param>
      <typeparam name="T">O tipo de itens armazenados no conjunto imutável.</typeparam>
      <returns>Um novo conjunto imutável que contém o item especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])">
      <summary>Cria um novo conjunto classificado imutável que contém a matriz de itens especificada e usa o comparador especificado.</summary>
      <param name="comparer">A implementação a ser usada ao comparar os itens no conjunto.</param>
      <param name="items">Uma matriz que contém os itens com os quais preencher previamente o conjunto.</param>
      <typeparam name="T">O tipo de itens no conjunto imutável.</typeparam>
      <returns>Um novo conjunto imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1">
      <summary>Retorna uma coleção que pode ser usada para construir um conjunto classificado imutável.</summary>
      <typeparam name="T">O tipo de itens armazenados pela coleção.</typeparam>
      <returns>O construtor de coleção imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})">
      <summary>Retorna uma coleção que pode ser usada para construir um conjunto classificado imutável.</summary>
      <param name="comparer">O comparador usado para comparar os itens no conjunto em relação à igualdade.</param>
      <typeparam name="T">O tipo de itens armazenados pela coleção.</typeparam>
      <returns>A coleção imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Cria uma nova coleção imutável que contém os itens especificados.</summary>
      <param name="comparer">O comparador a ser usado para comparar elementos neste conjunto.</param>
      <param name="items">Os itens a serem adicionados ao conjunto antes que ele seja imutável.</param>
      <typeparam name="T">O tipo de itens armazenados pela coleção.</typeparam>
      <returns>O novo conjunto imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Cria uma nova coleção imutável que contém os itens especificados.</summary>
      <param name="items">Os itens a serem adicionados antes que ele seja imutável.</param>
      <typeparam name="T">O tipo de itens armazenados pela coleção.</typeparam>
      <returns>O novo conjunto imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Enumera uma sequência e produz um conjunto classificado imutável de seu conteúdo.</summary>
      <param name="source">A sequência a ser enumerada.</param>
      <typeparam name="TSource">O tipo dos elementos na sequência.</typeparam>
      <returns>Um conjunto classificado imutável que contém os itens na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>Enumera uma sequência, produz um conjunto classificado imutável de seu conteúdo e usa o comparador especificado.</summary>
      <param name="source">A sequência a ser enumerada.</param>
      <param name="comparer">O comparador a ser usado para inicializar e adicionar membros ao conjunto classificado.</param>
      <typeparam name="TSource">O tipo dos elementos na sequência.</typeparam>
      <returns>Um conjunto classificado imutável que contém os itens na sequência especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet{``0}.Builder)">
      <summary>Cria um conjunto classificado imutável do conteúdo atual do conjunto do construtor.</summary>
      <param name="builder">O construtor para o qual criar o conjunto classificado imutável.</param>
      <typeparam name="TSource">O tipo dos elementos no conjunto classificado imutável.</typeparam>
      <returns>Cria um conjunto classificado imutável preenchido com o conteúdo atual do conjunto do construtor.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1">
      <summary>Representa uma implementação de conjunto classificado imutável.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T">O tipo dos elementos no conjunto.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)">
      <summary>Adiciona o valor especificado a este conjunto classificado imutável.</summary>
      <param name="value">O valor a ser adicionado.</param>
      <returns>Um novo conjunto com o elemento adicionado ou esse conjunto se o elemento já está estiver nele.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Builder">
      <summary>Representa um conjunto classificado que permite alterações com pouca ou nenhuma alocação de memória e manipula ou cria conjuntos classificados imutáveis com eficiência.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)">
      <summary>Adiciona um elemento ao conjunto atual e retorna um valor para indicar se ele foi adicionado com êxito.</summary>
      <param name="item">O elemento a ser adicionado ao conjunto.</param>
      <returns>
        <see langword="true" /> se o elemento for adicionado ao conjunto; <see langword="false" /> se o elemento já estiver no conjunto</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear">
      <summary>Remove todos os elementos deste conjunto.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)">
      <summary>Determina se o conjunto atual contém o objeto especificado.</summary>
      <param name="item">O objeto a ser localizado no conjunto.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> for encontrado no conjunto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count">
      <summary>Obtém o número de elementos no conjunto classificado imutável.</summary>
      <returns>O número de elementos neste conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Remove o conjunto especificado de itens do conjunto atual.</summary>
      <param name="other">A coleção de itens a serem removidos do conjunto.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator">
      <summary>Retorna um enumerador que itera no conjunto.</summary>
      <returns>Um enumerador que pode ser usado para iterar no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica o conjunto atual para que ele contenha apenas elementos que também estejam em uma coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto atual é um subconjunto apropriado (estrito) de uma coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual for um subconjunto apropriado do <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto atual é um superconjunto apropriado (estrito) de uma coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual for um superconjunto apropriado de <paramref name="other" />, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto atual é um subconjunto de uma coleção especificada.</summary>
      <param name="other">A coleção é comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual for um subconjunto de <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto atual é um superconjunto de uma coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual for um superconjunto de <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)">
      <summary>Obtém o elemento do conjunto no índice especificado.</summary>
      <param name="index">O índice baseado em zero do elemento no conjunto a ser retornado.</param>
      <returns>O elemento na posição fornecida.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ItemRef(System.Int32)">
      <summary>Obtém uma referência somente leitura ao elemento do conjunto no <paramref name="index" /> especificado.</summary>
      <param name="index">O índice baseado em zero do elemento no conjunto a ser retornado.</param>
      <returns>Uma referência somente leitura ao elemento na posição especificada.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer">
      <summary>Obtém ou define o objeto que é usado para determinar igualdade para os valores no conjunto classificado imutável.</summary>
      <returns>O comparador usado para determinar a igualdade dos valores no conjunto.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max">
      <summary>Obtém o valor máximo no conjunto classificado imutável, conforme definido pelo comparador.</summary>
      <returns>O valor máximo no conjunto.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min">
      <summary>Obtém o valor mínimo no conjunto classificado imutável, conforme definido pelo comparador.</summary>
      <returns>O valor mínimo no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto atual se sobrepõe à coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual e <paramref name="other" /> compartilharem pelo menos um elemento comum; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)">
      <summary>Remove a primeira ocorrência do objeto especificado do conjunto.</summary>
      <param name="item">O objeto a ser removido do conjunto.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> tiver sido removido do conjunto; <see langword="false" /> se <paramref name="item" /> não for encontrado no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse">
      <summary>Retorna um enumerador que itera no conjunto classificado imutável em ordem inversa.</summary>
      <returns>Um enumerador iterado no conjunto na ordem inversa.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto atual e a coleção especificada contêm os mesmos elementos.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual for igual a <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica o conjunto atual para que ele contenha somente os elementos presentes no conjunto atual ou na coleção especificada, mas não em ambos.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Adiciona um elemento ao conjunto atual e retorna um valor para indicar se ele foi adicionado com êxito.</summary>
      <param name="item">O elemento a ser adicionado ao conjunto.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Copia os elementos da coleção em uma matriz, começando em um índice de matriz específico.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados da coleção. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtém um valor que indica se esta instância é somente leitura.</summary>
      <returns>
        <c>é sempre</c>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retorna um enumerador que itera pela coleção.</summary>
      <returns>Um enumerador que pode ser usado para iterar na coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos do conjunto em uma matriz, começando em um índice de matriz específico.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados do conjunto. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso a <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" />Se o <see cref="T:System.Collections.ICollection" /> acesso ao for sincronizado (thread-safe); caso <see langword="false" />contrário,.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera pela coleção.</summary>
      <returns>Um enumerador que pode ser usado para iterar na coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable">
      <summary>Cria um conjunto classificado imutável de acordo com o conteúdo desta instância.</summary>
      <returns>Um conjunto imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica o conjunto atual para que ele contenha todos os elementos que estão presentes no conjunto atual e na coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o estado atual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear">
      <summary>Remove todos os elementos do conjunto classificado imutável.</summary>
      <returns>Um conjunto vazio com os elementos removidos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)">
      <summary>Determina se este conjunto classificado imutável contém o valor especificado.</summary>
      <param name="value">O valor a ser verificado.</param>
      <returns>
        <see langword="true" /> se o conjunto contém o valor especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Count">
      <summary>Obtém o número de elementos no conjunto classificado imutável.</summary>
      <returns>O número de elementos no conjunto classificado imutável.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedSet`1.Empty">
      <summary>Obtém um conjunto classificado imutável vazio.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator">
      <summary>Enumera o conteúdo de uma árvore binária.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Current">
      <summary>Obtém o elemento na posição atual do enumerador.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <returns>O elemento na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Dispose">
      <summary>Libera os recursos usados pela instância atual da classe <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator" />.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.MoveNext">
      <summary>Avança o enumerador para o próximo elemento do conjunto classificado imutável.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <returns>
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final do conjunto classificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Reset">
      <summary>Define o enumerador com sua posição inicial, que é antes do primeiro elemento do conjunto classificado imutável.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>O elemento atual.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Remove um conjunto especificado de itens desse conjunto classificado imutável.</summary>
      <param name="other">Os itens a serem removidos desse conjunto.</param>
      <returns>Um novo conjunto com os itens removidos; ou o conjunto original se nenhum dos itens tiverem sido encontrados no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator">
      <summary>Retorna um enumerador que itera no conjunto classificado imutável.</summary>
      <returns>Um enumerador que pode ser usado para iterar no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)">
      <summary>Obtém a posição na qual o valor especificado aparece nesse conjunto classificado imutável.</summary>
      <param name="item">O valor cuja posição está sendo procurada.</param>
      <returns>O índice do <paramref name="item" /> especificado no conjunto classificado, caso <paramref name="item" /> seja encontrado. Caso <paramref name="item" /> não seja encontrado e for menor que um ou mais elementos nesse conjunto, esse método retornará um número negativo que será o complemento bit a bit do índice do primeiro elemento que for maior que o valor. Caso <paramref name="item" /> não seja encontrado e for maior que qualquer elemento no conjunto, esse método retornará um número negativo que será o complemento bit a bit do índice do último elemento mais 1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Cria um conjunto classificado imutável que contém elementos que existem neste conjunto e no conjunto especificado.</summary>
      <param name="other">O conjunto a ser interceptado por este.</param>
      <returns>Um novo conjunto classificado imutável que contém quaisquer elementos que existam nos dois conjuntos.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty">
      <summary>Obtém um valor que indica se esse conjunto classificado imutável está vazio.</summary>
      <returns>
        <see langword="true" />Se esse conjunto estiver vazio; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto classificado imutável atual é um subconjunto apropriado (estrito) da coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual for um subconjunto apropriado do <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto classificado imutável atual é um superconjunto apropriado de uma coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual for um superconjunto apropriado de <paramref name="other" />, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto classificado imutável atual é um subconjunto de uma coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual for um subconjunto de <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto classificado imutável atual é um superconjunto de uma coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual for um superconjunto de <paramref name="other" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)">
      <summary>Obtém o elemento do conjunto classificado imutável no índice especificado.</summary>
      <param name="index">O índice do elemento a ser recuperado do conjunto classificado.</param>
      <returns>O elemento no índice fornecido.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ItemRef(System.Int32)">
      <summary>Obtém uma referência somente leitura do elemento do conjunto no <paramref name="index" /> especificado.</summary>
      <param name="index">O índice baseado em zero do elemento no conjunto a ser retornado.</param>
      <returns>Uma referência somente leitura do elemento na posição especificada.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer">
      <summary>Obtém o comparador usado para classificar chaves no conjunto classificado imutável.</summary>
      <returns>O comparador usado para classificar chaves.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Max">
      <summary>Obtém o valor máximo no conjunto classificado imutável, conforme definido pelo comparador.</summary>
      <returns>O valor máximo no conjunto.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Min">
      <summary>Obtém o valor mínimo no conjunto classificado imutável, conforme definido pelo comparador.</summary>
      <returns>O valor mínimo no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto classificado imutável atual e uma coleção especificada compartilham elementos comuns.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se o conjunto atual e <paramref name="other" /> compartilharem pelo menos um elemento comum; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)">
      <summary>Remove o valor especificado desse conjunto classificado imutável.</summary>
      <param name="value">O elemento a ser removido.</param>
      <returns>Um novo conjunto classificado imutável com o elemento removido ou esse conjunto se o elemento não for encontrado no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse">
      <summary>Retorna um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que itera nesse conjunto classificado imutável em ordem inversa.</summary>
      <returns>Um enumerador que itera no conjunto classificado imutável em ordem inversa.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina se o conjunto classificado imutável atual e a coleção especificada contêm os mesmos elementos.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>
        <see langword="true" /> se os conjuntos forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Cria um conjunto classificado imutável que contém elementos que existem nesse conjunto ou em uma determinada sequência, mas não em ambos.</summary>
      <param name="other">A outra sequência de itens.</param>
      <returns>O novo conjunto classificado imutável.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Adiciona o valor especificado à coleção.</summary>
      <param name="item">O valor a ser adicionado.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Remove todos os itens da coleção.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Copia os elementos da coleção em uma matriz, começando em um índice de matriz específico.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados da coleção. A matriz deve ter indexação com base em zero.</param>
      <param name="arrayIndex">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Consulte a interface <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Remove a primeira ocorrência de um objeto específico da coleção.</summary>
      <param name="item">O objeto a ser removido da coleção.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> foi removido da coleção com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retorna um enumerador que itera pela coleção.</summary>
      <returns>Um enumerador que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Insere um item no conjunto no índice especificado.</summary>
      <param name="index">O índice de base zero no qual o <paramref name="item" /> deve ser inserido.</param>
      <param name="item">O objeto a ser inserido no conjunto.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Consulte a interface <see cref="T:System.Collections.Generic.IList`1" />.</summary>
      <param name="index" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Remove o item no índice especificado.</summary>
      <param name="index">O índice com base em zero do item a ser removido.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary>Adiciona um elemento ao conjunto atual e retorna um valor para indicar se ele foi adicionado com êxito.</summary>
      <param name="item">O elemento a ser adicionado ao conjunto.</param>
      <returns>
        <see langword="true" /> se o elemento for adicionado ao conjunto; <see langword="false" /> se o elemento já estiver no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Remove todos os elementos na coleção especificada do conjunto atual.</summary>
      <param name="other">A coleção de itens a serem removidos do conjunto.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica o conjunto atual para que ele contenha apenas elementos que também estejam em uma coleção especificada</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica o conjunto atual para que ele contenha somente os elementos presentes no conjunto atual ou na coleção especificada, mas não em ambos.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica o conjunto atual para que ele contenha todos os elementos que estão presentes no conjunto atual ou na coleção especificada.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos do conjunto em uma matriz, começando em um índice de matriz específico.</summary>
      <param name="array">A matriz unidimensional que é o destino dos elementos copiados do conjunto. A matriz deve ter indexação com base em zero.</param>
      <param name="index">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>Consulte a interface <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>Consulte <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um objeto enumerador que pode ser usado para iterar na coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)">
      <summary>Adiciona um item ao conjunto.</summary>
      <param name="value">O objeto a ser adicionado ao conjunto.</param>
      <returns>A posição na qual o novo elemento foi inserido, ou -1 para indicar que o item não foi inserido na coleção.</returns>
      <exception cref="T:System.NotSupportedException">O conjunto é somente leitura ou tem um tamanho fixo.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear">
      <summary>Remove todos os itens do conjunto.</summary>
      <exception cref="T:System.NotSupportedException">Gerada em todos os casos.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determina se o conjunto contém um valor específico.</summary>
      <param name="value">O objeto a ser localizado no conjunto.</param>
      <returns>
        <see langword="true" /> se o objeto for encontrado no conjunto; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determina o índice de um item específico no conjunto.</summary>
      <param name="value">O objeto a ser localizado no conjunto.</param>
      <returns>O índice de <paramref name="value" /> se encontrado na lista; caso contrário, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Insere um item no conjunto no índice especificado.</summary>
      <param name="index">O índice de base zero no qual o <paramref name="value" /> deve ser inserido.</param>
      <param name="value">O objeto a ser inserido no conjunto.</param>
      <exception cref="T:System.NotSupportedException">O conjunto é somente leitura ou tem um tamanho fixo.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.IList" /> tem um tamanho fixo.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.IList" /> tiver um valor fixo; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.Generic.ICollection`1" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)">
      <summary>Obtém ou define o <see cref="T:System.Object" /> no índice especificado.</summary>
      <param name="index">O índice.</param>
      <returns>O <see cref="T:System.Object" />.</returns>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)">
      <summary>Remove a primeira ocorrência de um objeto específico do conjunto.</summary>
      <param name="value">O objeto a ser removido do conjunto.</param>
      <exception cref="T:System.NotSupportedException">O conjunto é somente leitura ou tem um tamanho fixo.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Remove o item no índice especificado do conjunto.</summary>
      <param name="index">O índice com base em zero do item a ser removido.</param>
      <exception cref="T:System.NotSupportedException">O conjunto é somente leitura ou tem um tamanho fixo.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary>Adiciona o elemento especificado a este conjunto imutável.</summary>
      <param name="value">O elemento a ser adicionado.</param>
      <returns>Um novo conjunto com o elemento adicionado ou esse conjunto se o elemento já está estiver nele.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary>Recupera um conjunto imutável vazio que tem as mesmas semânticas de classificação e ordenação que essa instância.</summary>
      <returns>Um conjunto vazio que tem as mesmas semânticas de classificação e ordenação que essa instância.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Remove os elementos na coleção especificada do conjunto imutável atual.</summary>
      <param name="other">Os itens a serem removidos desse conjunto.</param>
      <returns>O novo conjunto com os itens removidos; ou o conjunto original se nenhum dos itens tiverem sido encontrados no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Cria um conjunto imutável que contém elementos que existem em ambos: nesse conjunto e no conjunto especificado.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>Um novo conjunto imutável que contém quaisquer elementos que existam nos dois conjuntos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary>Remove o elemento especificado desse conjunto imutável.</summary>
      <param name="value">O elemento a ser removido.</param>
      <returns>Um novo conjunto com o elemento especificado removido ou o conjunto atual se o elemento não puder ser encontrado no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Cria um conjunto imutável que contém somente os elementos que estão presentes no conjunto atual ou na coleção especificada, mas não em ambos.</summary>
      <param name="other">A coleção a ser comparada com o conjunto atual.</param>
      <returns>Um novo conjunto que contém os elementos que estão presentes somente no conjunto atual ou na coleção especificada, mas não em ambos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Cria um novo conjunto imutável que contém todos os elementos que estão presentes no conjunto atual ou na coleção especificada.</summary>
      <param name="other">A coleção da qual os elementos serão adicionados.</param>
      <returns>Um novo conjunto imutável com os itens adicionados; ou o conjunto original se todos os itens já estiverem no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder">
      <summary>Cria uma coleção que tem o mesmo conteúdo que esse conjunto classificado imutável e que pode ser manipulada com eficiência usando as interfaces mutáveis padrão.</summary>
      <returns>O construtor de conjunto classificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)">
      <summary>Pesquisa um determinado valor no conjunto e retorna o valor igual que for encontrado, se houver.</summary>
      <param name="equalValue">O valor a ser procurado.</param>
      <param name="actualValue">O valor do conjunto que foi encontrado pela pesquisa ou o valor original, se a pesquisa não gerou correspondência.</param>
      <returns>Um valor que indica se a pesquisa foi bem-sucedida.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Adiciona um determinado conjunto de itens a esse conjunto classificado imutável.</summary>
      <param name="other">Os itens a serem adicionados.</param>
      <returns>O novo conjunto com os itens adicionados; ou o conjunto original se todos os itens já estiverem no conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})">
      <summary>Retorna o conjunto classificado imutável que tem o comparador de chave especificado.</summary>
      <param name="comparer">O comparador a ser usado para verificar.</param>
      <returns>O conjunto classificado imutável que tem o comparador de chave especificado.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack">
      <summary>Fornece um conjunto de métodos de inicialização para instâncias da classe <see cref="T:System.Collections.Immutable.ImmutableStack`1" />.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1">
      <summary>Cria uma pilha imutável vazia.</summary>
      <typeparam name="T">O tipo de itens a serem armazenados na pilha imutável.</typeparam>
      <returns>Uma pilha imutável vazia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0)">
      <summary>Cria uma nova pilha imutável que contém o item especificado.</summary>
      <param name="item">O item com o qual preencher previamente a pilha.</param>
      <typeparam name="T">O tipo de itens na pilha imutável.</typeparam>
      <returns>Uma nova coleção imutável que contém o item especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0[])">
      <summary>Cria uma nova pilha imutável que contém a matriz especificada de itens.</summary>
      <param name="items">Uma matriz que contém os itens com os quais preencher previamente a pilha.</param>
      <typeparam name="T">O tipo de itens na pilha imutável.</typeparam>
      <returns>Uma nova pilha imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Cria uma nova pilha imutável que contém os itens especificados.</summary>
      <param name="items">Os itens a serem adicionados à pilha antes que ela seja imutável.</param>
      <typeparam name="T">O tipo de itens na pilha.</typeparam>
      <returns>Uma pilha imutável que contém os itens especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Pop``1(System.Collections.Immutable.IImmutableStack{``0},``0@)">
      <summary>Remove o item especificado de uma pilha imutável.</summary>
      <param name="stack">A pilha a ser modificada.</param>
      <param name="value">O item a ser removido da pilha.</param>
      <typeparam name="T">O tipo de itens contidos na pilha.</typeparam>
      <returns>Uma pilha; nunca <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException">A pilha está vazia.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1">
      <summary>Representa uma pilha imutável.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T">O tipo de elemento na pilha.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Clear">
      <summary>Remove todos os objetos da pilha imutável.</summary>
      <returns>Uma pilha imutável vazia.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Empty">
      <summary>Obtém uma pilha imutável vazia.</summary>
      <returns>Uma pilha imutável vazia.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1.Enumerator">
      <summary>Enumera o conteúdo de uma pilha imutável sem qualquer alocação de memória.  
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Enumerator.Current">
      <summary>Obtém o elemento na posição atual do enumerador.</summary>
      <returns>O elemento na posição atual do enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Enumerator.MoveNext">
      <summary>Avança o enumerador para o próximo elemento da pilha imutável.</summary>
      <returns>
        <see langword="true" /> se o enumerador foi avançado com êxito para o próximo elemento; <see langword="false" /> se o enumerador passou o final da pilha.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.GetEnumerator">
      <summary>Retorna um enumerador que itera na pilha imutável.</summary>
      <returns>Um enumerador que pode ser usado para iterar na pilha.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.IsEmpty">
      <summary>Obtém um valor que indica se essa instância da pilha imutável está vazia.</summary>
      <returns>
        <see langword="true" />Se esta instância estiver vazia; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Peek">
      <summary>Retorna o objeto que está no topo da pilha sem removê-lo.</summary>
      <returns>O objeto no topo da pilha.</returns>
      <exception cref="T:System.InvalidOperationException">A pilha está vazia.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.PeekRef">
      <summary>Obtém uma referência somente leitura ao elemento no início da pilha.</summary>
      <returns>Uma referência somente leitura ao elemento no início da pilha.</returns>
      <exception cref="T:System.InvalidOperationException">Gerada quando a pilha está vazia.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop">
      <summary>Remove o elemento que está no topo da pilha imutável e retorna a pilha após a remoção.</summary>
      <returns>Uma pilha; nunca <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException">A pilha está vazia.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop(`0@)">
      <summary>Remove o elemento especificado da pilha imutável e retorna a pilha após a remoção.</summary>
      <param name="value">O valor a ser removido da pilha.</param>
      <returns>Uma pilha; nunca <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Push(`0)">
      <summary>Insere um objeto no topo da pilha imutável e retorna a nova pilha.</summary>
      <param name="value">O objeto a ser enviado por push para a pilha.</param>
      <returns>A nova pilha.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Retorna um enumerador que itera pela coleção.</summary>
      <returns>Um enumerador que pode ser usado para iterar na coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um objeto <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Clear">
      <summary>Remove todos os elementos da pilha imutável.</summary>
      <returns>A pilha imutável vazia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Pop">
      <summary>Remove o elemento que está na parte superior da pilha imutável e retorna a nova pilha.</summary>
      <returns>A nova pilha; nunca <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Push(`0)">
      <summary>Insere um elemento na parte superior da pilha imutável e retorna a nova pilha.</summary>
      <param name="value">O elemento a ser enviado por push para a pilha.</param>
      <returns>A nova pilha.</returns>
    </member>
    <member name="T:System.Linq.ImmutableArrayExtensions">
      <summary>Substituições de método de extensão LINQ que oferecem maior eficiência para <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> que os métodos LINQ padrão 
 Pacote NuGet: System.Collections.Immutable (sobre coleções imutáveis e como instalá-las)</summary>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})">
      <summary>Aplica uma função a uma sequência de elementos de uma maneira cumulativa.</summary>
      <param name="immutableArray">A coleção à qual aplicar a função.</param>
      <param name="func">Uma função a ser invocada em cada elemento, de modo cumulativo.</param>
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>O valor final depois que a função cumulativa foi aplicada a todos os elementos.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})">
      <summary>Aplica uma função a uma sequência de elementos de uma maneira cumulativa.</summary>
      <param name="immutableArray">A coleção à qual aplicar a função.</param>
      <param name="seed">O valor inicial do acumulador.</param>
      <param name="func">Uma função a ser invocada em cada elemento, de modo cumulativo.</param>
      <typeparam name="TAccumulate">O tipo do valor acumulado.</typeparam>
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>O valor final do acumulador.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})">
      <summary>Aplica uma função a uma sequência de elementos de uma maneira cumulativa.</summary>
      <param name="immutableArray">A coleção à qual aplicar a função.</param>
      <param name="seed">O valor inicial do acumulador.</param>
      <param name="func">Uma função a ser invocada em cada elemento, de modo cumulativo.</param>
      <param name="resultSelector" />
      <typeparam name="TAccumulate">O tipo do valor acumulado.</typeparam>
      <typeparam name="TResult">O tipo de resultado retornado pelo seletor de resultado.</typeparam>
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>O valor final do acumulador.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Obtém um valor que indica se todos os elementos nesta matriz correspondem a uma determinada condição.</summary>
      <param name="immutableArray">A matriz na qual verificar se há correspondências.</param>
      <param name="predicate">O predicado.</param>
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>
        <see langword="true" /> se todos os elementos da sequência de origem forem aprovados no teste no predicado especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Obtém um valor que indica se a matriz contém elementos.</summary>
      <param name="immutableArray">A matriz na qual verificar se há elementos.</param>
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>
        <see langword="true" /> se a matriz contém elementos; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Obtém um valor que indica se a matriz contém elementos correspondentes a uma condição especificada.</summary>
      <param name="immutableArray">A matriz na qual verificar se há elementos.</param>
      <param name="predicate">O delegado que define a condição para corresponder a um elemento.</param>
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>
        <see langword="true" /> se um elemento corresponder à condição especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Retorna um valor que indica se esta coleção contém quaisquer elementos.</summary>
      <param name="builder">O construtor no qual verificar se há correspondências.</param>
      <typeparam name="T">O tipo dos elementos na matriz.</typeparam>
      <returns>
        <see langword="true" /> se o construtor da matriz contiver elementos; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary>Retorna o elemento de um índice especificado na matriz.</summary>
      <param name="immutableArray">A matriz na qual localizar um elemento.</param>
      <param name="index">O índice do elemento a se recuperar.</param>
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>O item no índice especificado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary>Retorna o elemento em um índice especificado em uma sequência ou um valor padrão se o índice estiver fora do intervalo.</summary>
      <param name="immutableArray">A matriz na qual localizar um elemento.</param>
      <param name="index">O índice do elemento a se recuperar.</param>
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>O item no índice especificado ou o valor padrão se o índice não for encontrado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Retorna o primeiro elemento em uma matriz.</summary>
      <param name="immutableArray">A matriz da qual obter um item.</param>
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>O primeiro item na matriz.</returns>
      <exception cref="T:System.InvalidOperationException">Se a matriz está vazia.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Retorna o primeiro elemento em uma sequência que satisfaz uma condição especificada.</summary>
      <param name="immutableArray">A matriz da qual obter um item.</param>
      <param name="predicate">O delegado que define as condições do elemento a ser pesquisado.</param>
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>O primeiro item na lista se ele atende à condição especificada por <paramref name="predicate" />.</returns>
      <exception cref="T:System.InvalidOperationException">Se a matriz está vazia.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Retorna o primeiro elemento na coleção.</summary>
      <param name="builder">O construtor do qual recuperar um item.</param>
      <typeparam name="T">O tipo de itens na matriz.</typeparam>
      <returns>O primeiro item na lista.</returns>
      <exception cref="T:System.InvalidOperationException">Se a matriz está vazia.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Retorna o primeiro elemento de uma sequência ou um valor padrão se a sequência não contém elementos.</summary>
      <param name="immutableArray">A matriz da qual recuperar itens.</param>
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>O primeiro item na lista, se encontrado; caso contrário, o valor padrão para o tipo de item.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Retorna o primeiro elemento da sequência que satisfaz uma condição ou um valor padrão, caso esse elemento não seja encontrado.</summary>
      <param name="immutableArray">A matriz da qual recuperar elementos.</param>
      <param name="predicate">O delegado que define as condições do elemento a ser pesquisado.</param>
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>O primeiro item na lista, se encontrado; caso contrário, o valor padrão para o tipo de item.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Retorna o primeiro elemento na coleção ou o valor padrão, se a coleção está vazia.</summary>
      <param name="builder">O construtor do qual recuperar um elemento.</param>
      <typeparam name="T">O tipo de item no construtor.</typeparam>
      <returns>O primeiro item na lista, se encontrado; caso contrário, o valor padrão para o tipo de item.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Retorna o último elemento da matriz.</summary>
      <param name="immutableArray">A matriz da qual recuperar itens.</param>
      <typeparam name="T">O tipo de elemento contido na matriz.</typeparam>
      <returns>O último elemento na matriz.</returns>
      <exception cref="T:System.InvalidOperationException">Gerada se a coleção está vazia.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Retorna o último elemento de uma sequência que satisfaz uma condição especificada.</summary>
      <param name="immutableArray">A matriz da qual recuperar elementos.</param>
      <param name="predicate">O delegado que define as condições do elemento a recuperar.</param>
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>O último elemento da matriz que satisfaz a condição <paramref name="predicate" />.</returns>
      <exception cref="T:System.InvalidOperationException">Gerada se a coleção está vazia.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Retorna o último elemento na coleção.</summary>
      <param name="builder">O construtor do qual recuperar elementos.</param>
      <typeparam name="T">O tipo de item no construtor.</typeparam>
      <returns>O último elemento no construtor.</returns>
      <exception cref="T:System.InvalidOperationException">Gerada se a coleção está vazia.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Retorna o último elemento de uma sequência ou um valor padrão se a sequência não contém elementos.</summary>
      <param name="immutableArray">A matriz da qual recuperar itens.</param>
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>O último elemento de uma sequência ou um valor padrão se a sequência não contém elementos.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Retorna o último elemento de uma sequência que satisfaz uma condição ou um valor padrão, caso esse elemento não seja encontrado.</summary>
      <param name="immutableArray">A matriz da qual recuperar um elemento.</param>
      <param name="predicate">O delegado que define as condições do elemento a ser pesquisado.</param>
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>O último elemento de uma sequência ou um valor padrão se a sequência não contém elementos.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Retorna o último elemento na coleção, ou o valor padrão se a coleção está vazia.</summary>
      <param name="builder">O construtor do qual recuperar um elemento.</param>
      <typeparam name="T">O tipo de item no construtor.</typeparam>
      <returns>O último elemento de uma sequência ou um valor padrão se a sequência não contém elementos.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary>Projeta cada elemento de uma sequência em um novo formulário.</summary>
      <param name="immutableArray">A matriz imutável da qual selecionar itens.</param>
      <param name="selector">Uma função de transformação a ser aplicada a cada elemento.</param>
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <typeparam name="TResult">O tipo do elemento de resultado.</typeparam>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos são o resultado da invocação da função de transformação em cada elemento da origem.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projeta cada elemento de uma sequência em um <see cref="T:System.Collections.Generic.IEnumerable`1" />, mescla as sequências resultantes em uma sequência e chama uma função de seletor de resultado em cada elemento contido nele.</summary>
      <param name="immutableArray">A matriz imutável.</param>
      <param name="collectionSelector">Uma função de transformação a ser aplicada a cada elemento da sequência de entrada.</param>
      <param name="resultSelector">Uma função de transformação a ser aplicada a cada elemento da sequência intermediária.</param>
      <typeparam name="TSource">O tipo dos elementos de <paramref name="immutableArray" />.</typeparam>
      <typeparam name="TCollection">O tipo dos elementos intermediários coletados por <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">O tipo dos elementos da sequência resultante.</typeparam>
      <returns>Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos são o resultado de chamar a função de transformação de um para muitos <paramref name="collectionSelector" /> em cada elemento de <paramref name="immutableArray" /> e, em seguida, mapear cada um desses elementos de sequência e seu elemento de origem correspondente para um elemento de resultado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Determina se duas sequências são iguais de acordo com um comparador de igualdade.</summary>
      <param name="immutableArray">A matriz a ser usada para comparação.</param>
      <param name="items">Os itens a serem usados para comparação.</param>
      <param name="comparer">O comparador a ser usado para verificar quanto à igualdade.</param>
      <typeparam name="TDerived">O tipo de elemento na matriz comparada.</typeparam>
      <typeparam name="TBase">O tipo de elemento contido na coleção.</typeparam>
      <returns>
        <see langword="true" /> para indicar que as sequências são iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Determina se duas sequências são iguais de acordo com um comparador de igualdade.</summary>
      <param name="immutableArray">A matriz a ser usada para comparação.</param>
      <param name="items">Os itens a serem usados para comparação.</param>
      <param name="comparer">O comparador a ser usado para verificar quanto à igualdade.</param>
      <typeparam name="TDerived">O tipo de elemento na matriz comparada.</typeparam>
      <typeparam name="TBase">O tipo de elemento contido na coleção.</typeparam>
      <returns>
        <see langword="true" /> para indicar que as sequências são iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})">
      <summary>Determina se duas sequências são iguais de acordo com um comparador de igualdade.</summary>
      <param name="immutableArray">A matriz a ser usada para comparação.</param>
      <param name="items">Os itens a serem usados para comparação.</param>
      <param name="predicate">O comparador a ser usado para verificar quanto à igualdade.</param>
      <typeparam name="TDerived">O tipo de elemento na matriz comparada.</typeparam>
      <typeparam name="TBase">O tipo de elemento contido na coleção.</typeparam>
      <returns>
        <see langword="true" /> para indicar que as sequências são iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Retornará o único elemento de uma sequência e lançará uma exceção se não houver exatamente um elemento na sequência.</summary>
      <param name="immutableArray">A matriz da qual recuperar o elemento.</param>
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>O elemento na sequência.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Retorna o único elemento de uma sequência que satisfaz uma condição especificada e gera uma exceção se houver mais de um tal elemento.</summary>
      <param name="immutableArray" />
      <param name="predicate" />
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>Retorna <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Retorna o único elemento da matriz ou um valor padrão se a sequência é vazia; esse método gera uma exceção se há mais de um elemento na sequência.</summary>
      <param name="immutableArray">A matriz.</param>
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>O elemento da matriz ou o valor padrão, se a matriz está vazia.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contém mais de um elemento.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Retorna o único elemento de uma sequência que satisfaz uma condição especificada ou um valor padrão se esse elemento não existir. Esse método lança uma exceção se mais de um elemento satisfizer a condição.</summary>
      <param name="immutableArray">A matriz da qual obter o elemento.</param>
      <param name="predicate">A condição que o elemento deve satisfazer.</param>
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>O elemento, se ele atende à condição especificada; caso contrário, o elemento padrão.</returns>
      <exception cref="T:System.InvalidOperationException">Mais de um elemento satisfaz a condição na <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Copia o conteúdo dessa matriz para uma matriz mutável.</summary>
      <param name="immutableArray" />
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>A matriz recém-instanciada.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})">
      <summary>Cria um dicionário com base no conteúdo desta matriz.</summary>
      <param name="immutableArray">A matriz com base na qual criar um dicionário.</param>
      <param name="keySelector">O seletor de chave.</param>
      <typeparam name="TKey">Tipo da chave.</typeparam>
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>O dicionário recentemente inicializado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Cria um dicionário com base no conteúdo desta matriz.</summary>
      <param name="immutableArray">A matriz com base na qual criar um dicionário.</param>
      <param name="keySelector">O seletor de chave.</param>
      <param name="comparer">O comparador com o qual inicializar o dicionário.</param>
      <typeparam name="TKey">Tipo da chave.</typeparam>
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>O dicionário recentemente inicializado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})">
      <summary>Cria um dicionário com base no conteúdo desta matriz.</summary>
      <param name="immutableArray">A matriz com base na qual criar um dicionário.</param>
      <param name="keySelector">O seletor de chave.</param>
      <param name="elementSelector">O seletor de elemento.</param>
      <typeparam name="TKey">Tipo da chave.</typeparam>
      <typeparam name="TElement">O tipo do elemento.</typeparam>
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>O dicionário recentemente inicializado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Cria um dicionário com base no conteúdo desta matriz.</summary>
      <param name="immutableArray">A matriz com base na qual criar um dicionário.</param>
      <param name="keySelector">O seletor de chave.</param>
      <param name="elementSelector">O seletor de elemento.</param>
      <param name="comparer">O comparador com o qual inicializar o dicionário.</param>
      <typeparam name="TKey">Tipo da chave.</typeparam>
      <typeparam name="TElement">O tipo do elemento.</typeparam>
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>O dicionário recentemente inicializado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Filtra uma sequência de valores com base em um predicado.</summary>
      <param name="immutableArray">A matriz a filtrar.</param>
      <param name="predicate">A condição a ser usada para filtrar o conteúdo da matriz.</param>
      <typeparam name="T">O tipo de elemento contido na coleção.</typeparam>
      <returns>Retorna <see cref="T:System.Collections.Generic.IEnumerable`1" />, que contém elementos que atendem à condição.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Transactions.Local</name>
  </assembly>
  <members>
    <member name="T:System.Transactions.CommittableTransaction">
      <summary>Descreve uma transação pode ser confirmada.</summary>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.CommittableTransaction" />.</summary>
      <exception cref="T:System.PlatformNotSupportedException">Uma tentativa de criar uma transação no Windows 98, Windows 98 Second Edition ou Windows Millennium Edition.</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.CommittableTransaction" /> com o valor <paramref name="timeout" /> especificado.</summary>
      <param name="timeout">O tempo máximo durante o qual a transação pode existir antes de ser anulada.</param>
      <exception cref="T:System.PlatformNotSupportedException">Uma tentativa de criar uma transação no Windows 98, Windows 98 Second Edition ou Windows Millennium Edition.</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.CommittableTransaction" /> com as opções de transação especificadas.</summary>
      <param name="options">Uma estrutura <see cref="T:System.Transactions.TransactionOptions" /> que descreve as opções de transação a serem usadas para a nova transação.</param>
      <exception cref="T:System.PlatformNotSupportedException">Uma tentativa de criar uma transação no Windows 98, Windows 98 Second Edition ou Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> é inválido.</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
      <summary>Inicia uma tentativa de confirmar a transação de forma assíncrona.</summary>
      <param name="asyncCallback">O delegado <see cref="T:System.AsyncCallback" /> que é invocado quando a transação é concluída. Esse parâmetro pode ser <see langword="null" />, caso em que o aplicativo não é notificado da conclusão da transação. Em vez disso, o aplicativo deve usar a interface <see cref="T:System.IAsyncResult" /> para verificar se a conclusão ocorreu e aguardar de forma adequada, ou então chamar <see cref="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)" /> para aguardar a conclusão.</param>
      <param name="asyncState">Um objeto, que pode conter informações de estado arbitrário, associado com a confirmação assíncrona. Esse objeto é passado para o retorno de chamada e não é interpretado por <see cref="N:System.Transactions" />. Uma referência nula é permitida.</param>
      <returns>Uma interface <see cref="T:System.IAsyncResult" /> que pode ser usada pelo chamador para verificar o status da operação assíncrona ou para aguardar a conclusão da operação.</returns>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.Commit">
      <summary>Tenta confirmar a transação.</summary>
      <exception cref="T:System.Transactions.TransactionInDoubtException">
        <see cref="M:System.Transactions.CommittableTransaction.Commit" /> é chamado em uma transação e a transação se torna <see cref="F:System.Transactions.TransactionStatus.InDoubt" />.</exception>
      <exception cref="T:System.Transactions.TransactionAbortedException">
        <see cref="M:System.Transactions.CommittableTransaction.Commit" /> é chamado e a transação é revertida pela primeira vez.</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
      <summary>Encerra uma tentativa de confirmar a transação de forma assíncrona.</summary>
      <param name="asyncResult">O objeto <see cref="T:System.IAsyncResult" /> associado à confirmação assíncrona.</param>
      <exception cref="T:System.Transactions.TransactionAbortedException">
        <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> é chamado e a transação é revertida pela primeira vez.</exception>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState">
      <summary>Obtém o objeto fornecido como o último parâmetro da chamada de método <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" />.</summary>
      <returns>O objeto fornecido como o último parâmetro da <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> chamada do método.</returns>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle">
      <summary>Obtém um <see cref="T:System.Threading.WaitHandle" /> que é usado para aguardar a conclusão de uma operação assíncrona.</summary>
      <returns>Um <see cref="T:System.Threading.WaitHandle" /> que é usado para aguardar a conclusão de uma operação assíncrona.</returns>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously">
      <summary>Obtém um valor que indica se a operação de confirmação assíncrona foi concluída de forma síncrona.</summary>
      <returns>
        <see langword="true" />se a operação de confirmação assíncrona tiver sido concluída de forma síncrona; caso contrário <see langword="false" />,. Essa propriedade sempre retorna <see langword="false" /> mesmo que a operação seja concluída de forma síncrona.</returns>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted">
      <summary>Obtém um valor que indica se a operação de confirmação assíncrona foi concluída.</summary>
      <returns>
        <see langword="true" /> se a operação for concluída; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Transactions.DependentCloneOption">
      <summary>Controla qual tipo de transação dependente criar.</summary>
    </member>
    <member name="F:System.Transactions.DependentCloneOption.BlockCommitUntilComplete">
      <summary>A transação dependente bloqueia o processo de confirmação da transação até que a transação pai atinja o tempo limite ou <see cref="M:System.Transactions.DependentTransaction.Complete" /> seja chamado. Nesse caso, o trabalho adicional pode ser feito na transação e novas inscrições podem ser criadas.</summary>
    </member>
    <member name="F:System.Transactions.DependentCloneOption.RollbackIfNotComplete">
      <summary>A transação dependente automaticamente cancelará a transação se Commit for chamado na transação pai antes de <see cref="M:System.Transactions.DependentTransaction.Complete" /> ser chamado.</summary>
    </member>
    <member name="T:System.Transactions.DependentTransaction">
      <summary>Descreve um clone de uma transação que assegura que a transação não pode ser confirmada até o aplicativo atingir o estado de repouso com relação ao trabalho na transação. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.Transactions.DependentTransaction.Complete">
      <summary>Tenta concluir a transação dependente.</summary>
      <exception cref="T:System.Transactions.TransactionException">Qualquer tentativa de trabalho adicional na transação depois que este método é chamado. Isso inclui invocar métodos como <see cref="Overload:System.Transactions.Transaction.EnlistVolatile" />, <see cref="Overload:System.Transactions.Transaction.EnlistDurable" />, <see cref="M:System.Transactions.Transaction.Clone" />, <see cref="M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)" /> ou todas as operações de serialização na transação.</exception>
    </member>
    <member name="T:System.Transactions.Enlistment">
      <summary>Facilita a comunicação entre um participante de transação inscrito e o gerenciador de transação durante a fase final da transação.</summary>
    </member>
    <member name="M:System.Transactions.Enlistment.Done">
      <summary>Indica que o participante da transação concluiu seu trabalho.</summary>
    </member>
    <member name="T:System.Transactions.EnlistmentOptions">
      <summary>Determina se o objeto deve ser inscrito durante a fase de preparação.</summary>
    </member>
    <member name="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired">
      <summary>O objeto deve se inscrever durante a fase inicial do processo de confirmação.</summary>
    </member>
    <member name="F:System.Transactions.EnlistmentOptions.None">
      <summary>O objeto não exige a inscrição durante a fase inicial do processo de confirmação.</summary>
    </member>
    <member name="T:System.Transactions.EnterpriseServicesInteropOption">
      <summary>Especifica como as transações distribuídas interagem com transações COM+.</summary>
    </member>
    <member name="F:System.Transactions.EnterpriseServicesInteropOption.Automatic">
      <summary>Pesquise por um contexto COM+ existente e sincronize com ele, se houver.</summary>
    </member>
    <member name="F:System.Transactions.EnterpriseServicesInteropOption.Full">
      <summary>O contexto <see cref="N:System.EnterpriseServices" /> (que pode ser recuperado chamando o método estático <see cref="P:System.EnterpriseServices.ContextUtil.Transaction" /> da classe <see cref="T:System.EnterpriseServices.ContextUtil" />) e a transação de ambiente <see cref="N:System.Transactions" /> (que pode ser recuperada chamando o método estático <see cref="P:System.Transactions.Transaction.Current" /> da classe<see cref="T:System.Transactions.Transaction" />) sempre são sincronizados. Isso introduz uma penalidade de desempenho porque pode ser necessário criar novos contextos <see cref="N:System.EnterpriseServices" />.</summary>
    </member>
    <member name="F:System.Transactions.EnterpriseServicesInteropOption.None">
      <summary>Não há sincronização entre <see cref="P:System.EnterpriseServices.ContextUtil.Transaction" /> e <see cref="P:System.Transactions.Transaction.Current" />.</summary>
    </member>
    <member name="T:System.Transactions.HostCurrentTransactionCallback">
      <summary>Fornece um mecanismo para o ambiente de hospedagem fornecer sua própria noção de padrão de <see cref="P:System.Transactions.Transaction.Current" />.</summary>
      <returns>Um objeto <see cref="T:System.Transactions.Transaction" />.</returns>
    </member>
    <member name="T:System.Transactions.IDtcTransaction">
      <summary>Descreve uma transação de DTC.</summary>
    </member>
    <member name="M:System.Transactions.IDtcTransaction.Abort(System.IntPtr,System.Int32,System.Int32)">
      <summary>Anula uma transação.</summary>
      <param name="reason">Um <see cref="T:System.EnterpriseServices.BOID" /> opcional que indica o motivo pelo qual a transação está sendo anulada. Esse parâmetro pode ser <see langword="null" />, indicando que não foi fornecido nenhum motivo para a anulação.</param>
      <param name="retaining">Esse valor precisa ser <see langword="false" />.</param>
      <param name="async">Quando <paramref name="async" /> é <see langword="true" />, uma operação de anulação assíncrona é executada e o chamador deve usar <see langword="ITransactionOutcomeEvents" /> para conhecer o resultado da transação.</param>
    </member>
    <member name="M:System.Transactions.IDtcTransaction.Commit(System.Int32,System.Int32,System.Int32)">
      <summary>Confirma uma transação.</summary>
      <param name="retaining">Esse valor precisa ser <see langword="false" />.</param>
      <param name="commitType">Um valor obtido da enumeração <see langword="XACTTC" /> de OLE DB.</param>
      <param name="reserved">Esse valor precisa ser zero.</param>
    </member>
    <member name="M:System.Transactions.IDtcTransaction.GetTransactionInfo(System.IntPtr)">
      <summary>Recupera informações sobre uma transação.</summary>
      <param name="transactionInformation">Ponteiro para a estrutura <see cref="T:System.EnterpriseServices.XACTTRANSINFO" /> alocada por chamador que receberá informações sobre a transação. Esse valor não deve ser <see langword="null" />.</param>
    </member>
    <member name="T:System.Transactions.IEnlistmentNotification">
      <summary>Descreve uma interface que um gerenciador de recursos deve implementar para fornecer dois retornos de chamada de notificação de confirmação de fase para o gerenciador de transação após a inscrição para a participação.</summary>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)">
      <summary>Notifica um objeto inscrito de que uma transação está sendo confirmada.</summary>
      <param name="enlistment">Um objeto <see cref="T:System.Transactions.Enlistment" /> usado para enviar uma resposta ao gerenciador de transação.</param>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)">
      <summary>Notifica um objeto inscrito de que o status de uma transação está duvidoso.</summary>
      <param name="enlistment">Um objeto <see cref="T:System.Transactions.Enlistment" /> usado para enviar uma resposta ao gerenciador de transação.</param>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)">
      <summary>Notifica um objeto inscrito de que uma transação está sendo preparada para confirmação.</summary>
      <param name="preparingEnlistment">Um objeto <see cref="T:System.Transactions.PreparingEnlistment" /> usado para enviar uma resposta para o gerenciador de transação.</param>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)">
      <summary>Notifica um objeto inscrito de que uma transação está sendo revertida (anulada).</summary>
      <param name="enlistment">Um objeto <see cref="T:System.Transactions.Enlistment" /> usado para enviar uma resposta para o gerenciador de transação.</param>
    </member>
    <member name="T:System.Transactions.IPromotableSinglePhaseNotification">
      <summary>Descreve um objeto que atua como um delegado de confirmação de uma transação não distribuída interna de um Resource Manager.</summary>
    </member>
    <member name="M:System.Transactions.IPromotableSinglePhaseNotification.Initialize">
      <summary>Notifica um participante da transação de que a inscrição foi concluída com êxito.</summary>
      <exception cref="T:System.Transactions.TransactionException">Uma tentativa de inscrever ou serializar uma transação.</exception>
    </member>
    <member name="M:System.Transactions.IPromotableSinglePhaseNotification.Rollback(System.Transactions.SinglePhaseEnlistment)">
      <summary>Notifica um objeto inscrito de que a transação está sendo revertida.</summary>
      <param name="singlePhaseEnlistment">Um objeto <see cref="T:System.Transactions.SinglePhaseEnlistment" /> usado para enviar uma resposta para o gerenciador de transação.</param>
    </member>
    <member name="M:System.Transactions.IPromotableSinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)">
      <summary>Notifica um objeto inscrito de que a transação está sendo confirmada.</summary>
      <param name="singlePhaseEnlistment">Uma interface <see cref="T:System.Transactions.SinglePhaseEnlistment" /> usada para enviar uma resposta para o gerenciador de transação.</param>
    </member>
    <member name="T:System.Transactions.ISimpleTransactionSuperior">
      <summary>Representa uma transação que não é uma transação raiz, mas pode ser escalonada para ser gerenciada pelo MSDTC.</summary>
    </member>
    <member name="M:System.Transactions.ISimpleTransactionSuperior.Rollback">
      <summary>Notifica um objeto inscrito de que a transação está sendo revertida.</summary>
    </member>
    <member name="T:System.Transactions.ISinglePhaseNotification">
      <summary>Descreve um objeto de recurso que dá suporte à otimização de confirmação de fase única para participar de uma transação.</summary>
    </member>
    <member name="M:System.Transactions.ISinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)">
      <summary>Representa a implementação do gerenciador de recursos do retorno de chamada para a otimização de confirmação de fase única.</summary>
      <param name="singlePhaseEnlistment">Um <see cref="T:System.Transactions.SinglePhaseEnlistment" /> usado para enviar uma resposta para o gerenciador de transação.</param>
    </member>
    <member name="T:System.Transactions.IsolationLevel">
      <summary>Especifica o nível de isolamento de uma transação.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Chaos">
      <summary>As alterações pendentes de transações com maior isolamento não podem ser substituídas.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.ReadCommitted">
      <summary>Dados voláteis não podem ser lidos durante a transação, mas podem ser modificados.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.ReadUncommitted">
      <summary>Dados voláteis podem ser lidos e modificados durante a transação.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.RepeatableRead">
      <summary>Dados voláteis podem ser lidos, mas não modificados durante a transação. Novos dados podem ser adicionados durante a transação.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Serializable">
      <summary>Dados voláteis podem ser lidos, mas não modificados, e não é possível adicionar dados novos durante a transação.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Snapshot">
      <summary>Dados voláteis podem ser lidos. Antes de uma transação modificar dados, ela verifica se outra transação alterou os dados depois de ter sido lida inicialmente. Se os dados tiverem sido atualizados, um erro será gerado. Isso permite que uma transação obtenha os valores dos dados confirmados anteriormente.
Quando você tentar promover uma transação que foi criada com o nível de isolamento <see langword="Snapshot" />, um <see cref="T:System.InvalidOperationException" /> será lançado com a mensagem de erro "Transações com instantâneo de nível de isolamento não podem ser promovidas".</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Unspecified">
      <summary>Um nível de isolamento diferente daquele especificado está sendo usado, mas não é possível determinar o nível. Uma exceção será lançada se esse valor for definido.</summary>
    </member>
    <member name="T:System.Transactions.ITransactionPromoter">
      <summary>Descreva uma transação delegada para uma transação existente que possa ser escalonada para ser gerenciada pelo MSDTC, quando necessário.</summary>
    </member>
    <member name="M:System.Transactions.ITransactionPromoter.Promote">
      <summary>Notifica um objeto inscrito solicitado por um escalonamento da transação delegada.</summary>
      <returns>Um token de propagação do transmissor/receptor que realiza marshaling de uma transação distribuída. Para obter mais informações, consulte <see cref="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])" />.</returns>
    </member>
    <member name="T:System.Transactions.PreparingEnlistment">
      <summary>Facilita a comunicação entre um participante da transação inscrita e o gerenciador de transação durante a fase de Preparação da transação.</summary>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.ForceRollback">
      <summary>Indica que a transação deve ser revertida.</summary>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.ForceRollback(System.Exception)">
      <summary>Indica que a transação deve ser revertida.</summary>
      <param name="e">Uma explicação do motivo pelo qual uma reversão é acionada.</param>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.Prepared">
      <summary>Indica que a transação pode ser confirmada.</summary>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.RecoveryInformation">
      <summary>Obtém as informações de recuperação de uma inscrição.</summary>
      <returns>As informações de recuperação de uma inscrição.</returns>
      <exception cref="T:System.InvalidOperationException">Uma tentativa de obter informações de recuperação dentro de uma inscrição volátil o que não gera nenhuma informação de recuperação.</exception>
    </member>
    <member name="T:System.Transactions.SinglePhaseEnlistment">
      <summary>Fornece um conjunto de retornos de chamada que facilitam a comunicação entre um participante inscrito na Única confirmação de fase e o gerenciador de transação quando a notificação <see cref="M:System.Transactions.ISinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)" /> é recebida.</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.Aborted">
      <summary>Representa um retorno de chamada usado para indicar ao gerenciador de transação que a transação deve ser revertida.</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.Aborted(System.Exception)">
      <summary>Representa um retorno de chamada usado para indicar ao gerenciador de transação que a transação deve ser revertida e fornece uma explicação.</summary>
      <param name="e">Um explicação do porquê uma reversão é iniciada.</param>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.Committed">
      <summary>Representa um retorno de chamada usado para indicar ao gerenciador de transação que o SinglePhaseCommit foi bem-sucedido.</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.InDoubt">
      <summary>Representa um retorno de chamada usado para indicar ao gerenciador de transação que o status da transação está em dúvida.</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.InDoubt(System.Exception)">
      <summary>Representa um retorno de chamada usado para indicar ao gerenciador de transação que o status da transação está em dúvida e fornece uma explicação.</summary>
      <param name="e">Uma explicação do porquê a transação está em dúvida.</param>
    </member>
    <member name="T:System.Transactions.SubordinateTransaction">
      <summary>Representa uma transação sem raiz que pode ser delegada. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.Transactions.SubordinateTransaction.#ctor(System.Transactions.IsolationLevel,System.Transactions.ISimpleTransactionSuperior)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.SubordinateTransaction" />.</summary>
      <param name="isoLevel">O nível de isolamento da transação</param>
      <param name="superior">Um <see cref="T:System.Transactions.ISimpleTransactionSuperior" /></param>
    </member>
    <member name="T:System.Transactions.Transaction">
      <summary>Representa uma transação.</summary>
    </member>
    <member name="M:System.Transactions.Transaction.Clone">
      <summary>Cria um clone da transação.</summary>
      <returns>Um <see cref="T:System.Transactions.Transaction" /> que é uma cópia do objeto de transação atual.</returns>
    </member>
    <member name="P:System.Transactions.Transaction.Current">
      <summary>Obtém ou define a transação de ambiente.</summary>
      <returns>Um <see cref="T:System.Transactions.Transaction" /> que descreve a transação atual.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)">
      <summary>Cria um clone dependente da transação.</summary>
      <param name="cloneOption">Um <see cref="T:System.Transactions.DependentCloneOption" /> que controla qual tipo de transação dependente criar.</param>
      <returns>Um <see cref="T:System.Transactions.DependentTransaction" /> que representa o clone dependente.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.Dispose">
      <summary>Libera os recursos que são mantidos pelo objeto.</summary>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)">
      <summary>Inscreve um gerenciador de recursos durável que dá suporte à confirmação em duas fases para participar de uma transação.</summary>
      <param name="resourceManagerIdentifier">’Um identificador exclusivo de um gerenciador de recursos, que deve persistir durante uma falha ou reinicialização do gerenciador de recursos.</param>
      <param name="enlistmentNotification">Um objeto que implementa a interface <see cref="T:System.Transactions.IEnlistmentNotification" /> para receber duas notificações de confirmação de fase.</param>
      <param name="enlistmentOptions">
        <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" /> se o gerenciador de recursos desejar realizar trabalho adicional durante a fase de preparação.</param>
      <returns>Um objeto <see cref="T:System.Transactions.Enlistment" /> que descreve a inscrição.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)">
      <summary>Inscreve um Resource Manager durável que dá suporte à otimização em fase única para participar de uma transação.</summary>
      <param name="resourceManagerIdentifier">’Um identificador exclusivo de um gerenciador de recursos, que deve persistir durante uma falha ou reinicialização do gerenciador de recursos.</param>
      <param name="singlePhaseNotification">Um objeto que implementa a interface <see cref="T:System.Transactions.ISinglePhaseNotification" />, a qual deve ser capaz de receber notificações de confirmação em uma e em duas fases.</param>
      <param name="enlistmentOptions">
        <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" /> se o gerenciador de recursos desejar realizar trabalho adicional durante a fase de preparação.</param>
      <returns>Um objeto <see cref="T:System.Transactions.Enlistment" /> que descreve a inscrição.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)">
      <summary>Inscreve um Resource Manager que tem uma transação interna usando uma PSPE (inscrição de fase única passível de promoção).</summary>
      <param name="promotableSinglePhaseNotification">Uma interface <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> implementada pelo participante.</param>
      <returns>Uma implementação de interface <see cref="T:System.Transactions.SinglePhaseEnlistment" /> que descreve a inscrição.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)">
      <summary>Inscreve um Resource Manager que tem uma transação interna usando uma PSPE (inscrição de fase única passível de promoção).</summary>
      <param name="promotableSinglePhaseNotification">Uma interface <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> implementada pelo participante.</param>
      <param name="promoterType">O tipo do processador de transação distribuída.</param>
      <returns>Uma implementação de interface <see cref="T:System.Transactions.SinglePhaseEnlistment" /> que descreve a inscrição.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)">
      <summary>Inscreve um Resource Manager volátil que dá suporte à confirmação em duas fases para participar de uma transação.</summary>
      <param name="enlistmentNotification">Um objeto que implementa a interface <see cref="T:System.Transactions.IEnlistmentNotification" /> para receber notificações de confirmação em duas fases.</param>
      <param name="enlistmentOptions">
        <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" /> se o gerenciador de recursos desejar realizar trabalho adicional durante a fase de preparação.</param>
      <returns>Um objeto <see cref="T:System.Transactions.Enlistment" /> que descreve a inscrição.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)">
      <summary>Inscreve um Resource Manager volátil que dá suporte à otimização em fase única para participar de uma transação.</summary>
      <param name="singlePhaseNotification">Um objeto que implementa a interface <see cref="T:System.Transactions.ISinglePhaseNotification" />, a qual deve ser capaz de receber notificações de confirmação em uma e em duas fases.</param>
      <param name="enlistmentOptions">
        <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" /> se o gerenciador de recursos desejar realizar trabalho adicional durante a fase de preparação.</param>
      <returns>Um objeto <see cref="T:System.Transactions.Enlistment" /> que descreve a inscrição.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.Equals(System.Object)">
      <summary>Determina se a transação e o objeto especificado são iguais.</summary>
      <param name="obj">O objeto a ser comparado com essa instância.</param>
      <returns>
        <see langword="true" /> se <paramref name="obj" /> e essa transação são idênticos; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.GetPromotedToken">
      <summary>Obtém o <c>byte []</c> retornado pelo método <c>Promote</c> quando a transação é promovida.</summary>
      <returns>O <c>byte []</c> retornado pelo método <c>Promote</c> quando a transação é promovida.</returns>
    </member>
    <member name="P:System.Transactions.Transaction.IsolationLevel">
      <summary>Obtém o nível de isolamento de uma transação.</summary>
      <returns>Um do valores <see cref="T:System.Transactions.IsolationLevel" /> que indica o nível de isolamento da transação.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)">
      <summary>Testa se duas instâncias de <see cref="T:System.Transactions.Transaction" /> especificadas são equivalentes.</summary>
      <param name="x">A instância de <see cref="T:System.Transactions.Transaction" /> que está à esquerda do operador de igualdade.</param>
      <param name="y">A instância de <see cref="T:System.Transactions.Transaction" /> que está à direita do operador de igualdade.</param>
      <returns>
        <see langword="true" /> se <paramref name="x" /> e <paramref name="y" /> forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)">
      <summary>Retorna um valor que indica se duas instâncias <see cref="T:System.Transactions.Transaction" /> não são iguais.</summary>
      <param name="x">A instância de <see cref="T:System.Transactions.Transaction" /> que está à esquerda do operador de desigualdade.</param>
      <param name="y">A instância de <see cref="T:System.Transactions.Transaction" /> que está à direita do operador de desigualdade.</param>
      <returns>
        <see langword="true" /> se <paramref name="x" /> e <paramref name="y" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)">
      <summary>Promove e inscreve um gerenciador de recursos durável que dá suporte à confirmação de duas fases para participar de uma transação.</summary>
      <param name="resourceManagerIdentifier">’Um identificador exclusivo de um gerenciador de recursos, que deve persistir durante uma falha ou reinicialização do gerenciador de recursos.</param>
      <param name="promotableNotification">Um objeto que atua como um delegado de confirmação de uma transação não distribuída interna de um gerenciador de recursos.</param>
      <param name="enlistmentNotification">Um objeto que implementa a interface <see cref="T:System.Transactions.IEnlistmentNotification" /> para receber duas notificações de confirmação de fase.</param>
      <param name="enlistmentOptions">
        <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" /> se o gerenciador de recursos desejar realizar trabalho adicional durante a fase de preparação.</param>
    </member>
    <member name="P:System.Transactions.Transaction.PromoterType">
      <summary>Identifica exclusivamente o formato do <c>byte []</c> retornado pelo método Promote quando a transação é promovida.</summary>
      <returns>Um GUID que identifica exclusivamente o formato do <c>byte []</c> retornado pelo método Promote quando a transação é promovida.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.Rollback">
      <summary>Reverte (anula) a transação.</summary>
    </member>
    <member name="M:System.Transactions.Transaction.Rollback(System.Exception)">
      <summary>Reverte (anula) a transação.</summary>
      <param name="e">Uma explicação do porquê uma reversão ocorreu.</param>
    </member>
    <member name="M:System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)">
      <summary>Define o identificador da transação distribuída gerado pelo promotor não MSDTC.</summary>
      <param name="promotableNotification">Uma interface <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> implementada pelo participante.</param>
      <param name="distributedTransactionIdentifier">O identificador da transação usado pelo gerenciador de transação distribuídas.</param>
    </member>
    <member name="M:System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Obtém um <see cref="T:System.Runtime.Serialization.SerializationInfo" /> com os dados necessários para serializar essa transação.</summary>
      <param name="serializationInfo">O <see cref="T:System.Runtime.Serialization.SerializationInfo" /> a ser preenchido com dados.</param>
      <param name="context">O destino (consulte <see cref="T:System.Runtime.Serialization.StreamingContext" />) dessa serialização.</param>
    </member>
    <member name="E:System.Transactions.Transaction.TransactionCompleted">
      <summary>Indica que a transação está concluída.</summary>
      <exception cref="T:System.ObjectDisposedException">Uma tentativa de assinar esse evento em uma transação que foi descartada.</exception>
    </member>
    <member name="P:System.Transactions.Transaction.TransactionInformation">
      <summary>Recupera informações adicionais sobre uma transação.</summary>
      <returns>Um <see cref="T:System.Transactions.TransactionInformation" /> que contém informações adicionais sobre a transação.</returns>
    </member>
    <member name="T:System.Transactions.TransactionAbortedException">
      <summary>A exceção que é lançada quando há a tentativa de uma operação em uma transação que já foi revertida ou quando é feita uma tentativa de confirmar a transação e a transação foi anulada.</summary>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionAbortedException" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionAbortedException" /> com as informações de serialização e contexto de fluxo especificadas.</summary>
      <param name="info">Um objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que descreve uma falha na serialização.</param>
      <param name="context">Um objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que descreve uma falha no contexto de serialização.</param>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionAbortedException" /> com a mensagem especificada.</summary>
      <param name="message">Um <see cref="T:System.String" /> que contém uma mensagem que explica o motivo da exceção.</param>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionAbortedException" /> com a mensagem e exceção interna especificadas.</summary>
      <param name="message">Um <see cref="T:System.String" /> que contém uma mensagem que explica o motivo da exceção.</param>
      <param name="innerException">Obtém a instância de exceção que provoca a exceção atual. Para obter mais informações, consulte a propriedade <see cref="P:System.Exception.InnerException" />.</param>
    </member>
    <member name="T:System.Transactions.TransactionCompletedEventHandler">
      <summary>Representa o método que manipula o evento <see cref="E:System.Transactions.Transaction.TransactionCompleted" /> de uma classe <see cref="T:System.Transactions.Transaction" />.</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">O <see cref="T:System.Transactions.TransactionEventArgs" /> que contém os dados do evento.</param>
    </member>
    <member name="T:System.Transactions.TransactionEventArgs">
      <summary>Fornece dados para os seguintes eventos de transação: <see cref="E:System.Transactions.TransactionManager.DistributedTransactionStarted" />, <see cref="E:System.Transactions.Transaction.TransactionCompleted" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionEventArgs.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionEventArgs" />.</summary>
    </member>
    <member name="P:System.Transactions.TransactionEventArgs.Transaction">
      <summary>Obtém a transação da qual o evento de status é fornecido.</summary>
      <returns>Um <see cref="T:System.Transactions.Transaction" /> para o qual o status do evento é fornecido.</returns>
    </member>
    <member name="T:System.Transactions.TransactionException">
      <summary>A exceção que é lançada durante a tentativa de trabalhar em uma transação que não pode aceitar o novo trabalho.</summary>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionException" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionException" /> com as informações de serialização e contexto de fluxo especificadas.</summary>
      <param name="info">Um objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que descreve uma falha na serialização.</param>
      <param name="context">Um objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que descreve uma falha no contexto de serialização.</param>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionException" /> com a mensagem especificada.</summary>
      <param name="message">Um <see cref="T:System.String" /> que contém uma mensagem que explica o motivo da exceção.</param>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionException" /> com a mensagem e exceção interna especificadas.</summary>
      <param name="message">Um <see cref="T:System.String" /> que contém uma mensagem que explica o motivo da exceção.</param>
      <param name="innerException">Obtém a instância de exceção que provoca a exceção atual. Para obter mais informações, consulte a propriedade <see cref="P:System.Exception.InnerException" />.</param>
    </member>
    <member name="T:System.Transactions.TransactionInDoubtException">
      <summary>A exceção que é lançada quando é feita uma tentativa de uma operação em uma transação que está em dúvida ou é feita uma tentativa de confirmar a transação e a transação retorna InDoubt.</summary>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionInDoubtException" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionInDoubtException" /> com as informações de serialização e contexto de fluxo especificadas.</summary>
      <param name="info">Um objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que descreve uma falha na serialização.</param>
      <param name="context">Um objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que descreve uma falha no contexto de serialização.</param>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionInDoubtException" /> com a mensagem especificada.</summary>
      <param name="message">Um <see cref="T:System.String" /> que contém uma mensagem que explica o motivo da exceção.</param>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionInDoubtException" /> com a mensagem e exceção interna especificadas.</summary>
      <param name="message">Um <see cref="T:System.String" /> que contém uma mensagem que explica o motivo da exceção.</param>
      <param name="innerException">Obtém a instância de exceção que provoca a exceção atual. Para obter mais informações, consulte a propriedade <see cref="P:System.Exception.InnerException" />.</param>
    </member>
    <member name="T:System.Transactions.TransactionInformation">
      <summary>Fornece informações adicionais sobre uma transação.</summary>
    </member>
    <member name="P:System.Transactions.TransactionInformation.CreationTime">
      <summary>Obtém a hora de criação da transação.</summary>
      <returns>Um <see cref="T:System.DateTime" /> que contém a hora de criação da transação.</returns>
    </member>
    <member name="P:System.Transactions.TransactionInformation.DistributedIdentifier">
      <summary>Obtém um identificador exclusivo da transação escalada.</summary>
      <returns>Um <see cref="T:System.Guid" /> que contém o identificador exclusivo da transação escalonada.</returns>
    </member>
    <member name="P:System.Transactions.TransactionInformation.LocalIdentifier">
      <summary>Obtém um identificador exclusivo da transação.</summary>
      <returns>Um identificador exclusivo da transação.</returns>
    </member>
    <member name="P:System.Transactions.TransactionInformation.Status">
      <summary>Obtém o status da transação.</summary>
      <returns>Um <see cref="T:System.Transactions.TransactionStatus" /> que contém o status da transação.</returns>
    </member>
    <member name="T:System.Transactions.TransactionInterop">
      <summary>Facilita a interação entre <see cref="N:System.Transactions" /> e componentes anteriormente escritos para interagir com o MSDTC, COM+ ou <see cref="N:System.EnterpriseServices" />. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetDtcTransaction(System.Transactions.Transaction)">
      <summary>Obtém uma instância <see cref="T:System.Transactions.IDtcTransaction" /> que representa um <see cref="T:System.Transactions.Transaction" />.</summary>
      <param name="transaction">Uma instância <see cref="T:System.Transactions.Transaction" /> em que será realizado marshaling.</param>
      <returns>Uma instância <see cref="T:System.Transactions.IDtcTransaction" /> que representa um <see cref="T:System.Transactions.Transaction" />.  A instância <see cref="T:System.Transactions.IDtcTransaction" /> é compatível com o formulário não gerenciado de ITransaction usado pelo MSDTC e com o formulário gerenciado do <see cref="T:System.EnterpriseServices.ITransaction" /> usado pelo <see cref="N:System.EnterpriseServices" />.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetExportCookie(System.Transactions.Transaction,System.Byte[])">
      <summary>Transforma um objeto de transação em um cookie de transação de exportação.</summary>
      <param name="transaction">O objeto <see cref="T:System.Transactions.Transaction" /> que terá marshal realizado.</param>
      <param name="whereabouts">Um endereço que descreve o local do gerenciador de transação de destino. Isso permite que dois gerenciadores de transações se comuniquem entre si e, portanto, propaguem uma transação de um sistema para outro.</param>
      <returns>Um cookie de transação de exportação representando o objeto <see cref="T:System.Transactions.Transaction" /> especificado.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction(System.Transactions.IDtcTransaction)">
      <summary>Gera um <see cref="T:System.Transactions.Transaction" /> de um <see cref="T:System.Transactions.IDtcTransaction" /> especificado.</summary>
      <param name="transactionNative">O objeto <see cref="T:System.Transactions.IDtcTransaction" /> que terá marshal realizado.</param>
      <returns>Uma instância <see cref="T:System.Transactions.Transaction" /> que representa o <see cref="T:System.Transactions.IDtcTransaction" /> determinado.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransactionFromExportCookie(System.Byte[])">
      <summary>Gera um <see cref="T:System.Transactions.Transaction" /> do especificado em um cookie de exportação.</summary>
      <param name="cookie">Um formulário com marshaling do objeto de transação.</param>
      <returns>Um <see cref="T:System.Transactions.Transaction" /> do especificado em um cookie de exportação.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])">
      <summary>Gera uma instância <see cref="T:System.Transactions.Transaction" /> do token de propagação do transmissor especificado.</summary>
      <param name="propagationToken">Um token de propagação que representa uma transação.</param>
      <returns>Um <see cref="T:System.Transactions.Transaction" /> do token de propagação do transmissor especificado.</returns>
      <exception cref="T:System.Transactions.TransactionManagerCommunicationException">A desserialização de uma transação falha porque o gerenciador de transação não pode ser contatado. Isso pode ser causado por configurações de firewall ou de segurança de rede.</exception>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransmitterPropagationToken(System.Transactions.Transaction)">
      <summary>Gera um token de propagação para o <see cref="T:System.Transactions.Transaction" /> especificado.</summary>
      <param name="transaction">Uma transação na qual deverá ser realizado marshal em um token de propagação.</param>
      <returns>Esse método, junto com o método <see cref="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])" />, fornece a funcionalidade de propagação do transmissor/receptor, em que a transação é "puxada" do computador remoto quando o último é chamado para desfazer marshal da transação.  
Para obter mais informações sobre modelos de propagação diferentes, consulte a classe <see cref="T:System.Transactions.TransactionInterop" />.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetWhereabouts">
      <summary>Obtém a localização do gerenciador de transação distribuída usado por <see cref="N:System.Transactions" />.</summary>
      <returns>A localização do gerenciador de transação distribuída usado por <see cref="N:System.Transactions" />.</returns>
    </member>
    <member name="F:System.Transactions.TransactionInterop.PromoterTypeDtc">
      <summary>O tipo do processador de transação distribuída.</summary>
    </member>
    <member name="T:System.Transactions.TransactionManager">
      <summary>Contém métodos usados para gerenciamento de transações. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="P:System.Transactions.TransactionManager.DefaultTimeout">
      <summary>Obtém o intervalo de tempo limite padrão para novas transações.</summary>
      <returns>Um valor <see cref="T:System.TimeSpan" /> que especifica o intervalo de tempo limite para novas transações.</returns>
    </member>
    <member name="E:System.Transactions.TransactionManager.DistributedTransactionStarted">
      <summary>Indica que uma transação distribuída foi iniciada.</summary>
    </member>
    <member name="P:System.Transactions.TransactionManager.HostCurrentCallback">
      <summary>Obtém ou define uma fábrica de transação personalizada.</summary>
      <returns>Um <see cref="T:System.Transactions.HostCurrentTransactionCallback" /> que contém uma fábrica de transação personalizada.</returns>
    </member>
    <member name="P:System.Transactions.TransactionManager.MaximumTimeout">
      <summary>Obtém o intervalo de tempo limite máximo padrão para novas transações.</summary>
      <returns>Um valor <see cref="T:System.TimeSpan" /> que especifica o intervalo de tempo limite máximo permitido ao criar novas transações.</returns>
    </member>
    <member name="M:System.Transactions.TransactionManager.RecoveryComplete(System.Guid)">
      <summary>Notifica o gerenciador de transação de que um Resource Manager em recuperação de falha finalizou a nova inscrição em todas as transações não resolvidas.</summary>
      <param name="resourceManagerIdentifier">Um <see cref="T:System.Guid" /> que identifica exclusivamente o recurso do qual realizar a recuperação.</param>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="resourceManagerIdentifier" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)">
      <summary>Reinscreve um participante durável em uma transação.</summary>
      <param name="resourceManagerIdentifier">Um <see cref="T:System.Guid" /> que identifica o gerenciador de recursos exclusivamente.</param>
      <param name="recoveryInformation">Contém informações adicionais de recuperação.</param>
      <param name="enlistmentNotification">Um objeto de recurso que implementa <see cref="T:System.Transactions.IEnlistmentNotification" /> para receber notificações.</param>
      <returns>Um <see cref="T:System.Transactions.Enlistment" /> que descreve a inscrição.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="recoveryInformation" /> é inválido.  

ou - 
As informações do Gerenciador de Transação em <paramref name="recoveryInformation" /> não correspondem ao gerenciador de transação configurado.  

ou - 
<paramref name="RecoveryInformation" /> não é reconhecido por <see cref="N:System.Transactions" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Transactions.TransactionManager.RecoveryComplete(System.Guid)" /> já foi chamado para o <paramref name="resourceManagerIdentifier" /> especificado. A nova inscrição foi rejeitada.</exception>
      <exception cref="T:System.Transactions.TransactionException">O <paramref name="resourceManagerIdentifier" /> não corresponde ao conteúdo das informações de recuperação especificadas em <paramref name="recoveryInformation" />.</exception>
    </member>
    <member name="T:System.Transactions.TransactionManagerCommunicationException">
      <summary>A exceção lançada quando um gerenciador de recursos não pode se comunicar com o gerenciador de transações.</summary>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionManagerCommunicationException" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> com as informações de serialização e contexto de fluxo especificadas.</summary>
      <param name="info">Um objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que descreve uma falha na serialização.</param>
      <param name="context">Um objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que descreve uma falha no contexto de serialização.</param>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> com a mensagem especificada.</summary>
      <param name="message">Um <see cref="T:System.String" /> que contém uma mensagem que explica o motivo da exceção.</param>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> com a mensagem e exceção interna especificadas.</summary>
      <param name="message">Um <see cref="T:System.String" /> que contém uma mensagem que explica o motivo da exceção.</param>
      <param name="innerException">Obtém a instância de exceção que provoca a exceção atual. Para obter mais informações, consulte a propriedade <see cref="P:System.Exception.InnerException" />.</param>
    </member>
    <member name="T:System.Transactions.TransactionOptions">
      <summary>Contém informações adicionais que especificam comportamentos de transação.</summary>
    </member>
    <member name="M:System.Transactions.TransactionOptions.Equals(System.Object)">
      <summary>Determina se essa instância <see cref="T:System.Transactions.TransactionOptions" /> e o objeto especificado são iguais.</summary>
      <param name="obj">O objeto a ser comparado com essa instância.</param>
      <returns>
        <see langword="true" /> se <paramref name="obj" /> e essa instância <see cref="T:System.Transactions.TransactionOptions" /> forem idênticos; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Transactions.TransactionOptions.GetHashCode">
      <summary>Retorna o código hash para essa instância.</summary>
      <returns>Um código de hash do inteiro assinado de 32 bits.</returns>
    </member>
    <member name="P:System.Transactions.TransactionOptions.IsolationLevel">
      <summary>Obtém ou define o nível de isolamento da transação.</summary>
      <returns>Uma enumeração <see cref="T:System.Transactions.IsolationLevel" /> que especifica o nível de isolamento da transação.</returns>
    </member>
    <member name="M:System.Transactions.TransactionOptions.op_Equality(System.Transactions.TransactionOptions,System.Transactions.TransactionOptions)">
      <summary>Testa se duas instâncias de <see cref="T:System.Transactions.TransactionOptions" /> especificadas são equivalentes.</summary>
      <param name="x">A instância de <see cref="T:System.Transactions.TransactionOptions" /> que está à esquerda do operador de igualdade.</param>
      <param name="y">A instância de <see cref="T:System.Transactions.TransactionOptions" /> que está à direita do operador de igualdade.</param>
      <returns>
        <see langword="true" /> se <paramref name="x" /> e <paramref name="y" /> forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Transactions.TransactionOptions.op_Inequality(System.Transactions.TransactionOptions,System.Transactions.TransactionOptions)">
      <summary>Retorna um valor que indica se duas instâncias <see cref="T:System.Transactions.TransactionOptions" /> não são iguais.</summary>
      <param name="x">A instância de <see cref="T:System.Transactions.TransactionOptions" /> que está à esquerda do operador de igualdade.</param>
      <param name="y">A instância de <see cref="T:System.Transactions.TransactionOptions" /> que está à direita do operador de igualdade.</param>
      <returns>
        <see langword="true" /> se <paramref name="x" /> e <paramref name="y" /> não forem iguais; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Transactions.TransactionOptions.Timeout">
      <summary>Obtém ou define o período de tempo limite da transação.</summary>
      <returns>Um valor <see cref="T:System.TimeSpan" /> que especifica o período de tempo limite da transação.</returns>
    </member>
    <member name="T:System.Transactions.TransactionPromotionException">
      <summary>A exceção lançada quando uma promoção falha.</summary>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionPromotionException" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionPromotionException" /> com as informações de serialização e contexto de fluxo especificadas.</summary>
      <param name="info">Um objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que descreve uma falha na serialização.</param>
      <param name="context">Um objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que descreve uma falha no contexto de serialização.</param>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionPromotionException" /> com a mensagem especificada.</summary>
      <param name="message">Um <see cref="T:System.String" /> que contém uma mensagem que explica o motivo da exceção.</param>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor(System.String,System.Exception)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionPromotionException" /> com a mensagem e exceção interna especificadas.</summary>
      <param name="message">Um <see cref="T:System.String" /> que contém uma mensagem que explica o motivo da exceção.</param>
      <param name="innerException">Obtém a instância de exceção que provoca a exceção atual. Para obter mais informações, consulte a propriedade <see cref="P:System.Exception.InnerException" />.</param>
    </member>
    <member name="T:System.Transactions.TransactionScope">
      <summary>Torna um bloco de códigos transacional. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionScope" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionScope" /> e define a transação especificada como a transação de ambiente, de modo que o trabalho transacional realizado dentro do escopo use essa transação.</summary>
      <param name="transactionToUse">A transação a ser definida como a transação de ambiente, para que o trabalho transacional realizado dentro do escopo use essa transação.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionScope" /> com o valor de tempo limite especificado e define a transação especificada como a transação de ambiente, de modo que o trabalho transacional realizado dentro do escopo use essa transação.</summary>
      <param name="transactionToUse">A transação a ser definida como a transação de ambiente, para que o trabalho transacional realizado dentro do escopo use essa transação.</param>
      <param name="scopeTimeout">O <see cref="T:System.TimeSpan" /> após o qual o escopo da transação atinge o tempo limite e anula a transação.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionScope" /> com os requisitos de interoperabilidade COM+ e o valor de tempo limite especificados e define a transação especificada como a transação de ambiente, de modo que o trabalho transacional realizado dentro do escopo use essa transação.</summary>
      <param name="transactionToUse">A transação a ser definida como a transação de ambiente, para que o trabalho transacional realizado dentro do escopo use essa transação.</param>
      <param name="scopeTimeout">O <see cref="T:System.TimeSpan" /> após o qual o escopo da transação atinge o tempo limite e anula a transação.</param>
      <param name="interopOption">Uma instância da enumeração <see cref="T:System.Transactions.EnterpriseServicesInteropOption" /> que descreve como a transação associada interage com transações COM+.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>[Suporte somente no .NET Framework 4.5.1 e versões posteriores] 
Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionScope" /> com o valor de tempo limite especificado e define a transação especificada como a transação de ambiente, de modo que o trabalho transacional realizado dentro do escopo use essa transação.</summary>
      <param name="transactionToUse">A transação a ser definida como a transação de ambiente, para que o trabalho transacional realizado dentro do escopo use essa transação.</param>
      <param name="scopeTimeout">O <see cref="T:System.TimeSpan" /> após o qual o escopo da transação atinge o tempo limite e anula a transação.</param>
      <param name="asyncFlowOption">Uma instância da enumeração <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> que descreve se a transação de ambiente associada ao escopo de transação fluirá pelas continuações de thread ao usar a Tarefa ou padrões de programação assíncrona/de espera .NET.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>[Suporte somente no .NET Framework 4.5.1 e versões posteriores] 
Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionScope" /> e define a transação especificada como a transação de ambiente, de modo que o trabalho transacional realizado dentro do escopo use essa transação.</summary>
      <param name="transactionToUse">A transação a ser definida como a transação de ambiente, para que o trabalho transacional realizado dentro do escopo use essa transação.</param>
      <param name="asyncFlowOption">Uma instância da enumeração <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> que descreve se a transação de ambiente associada ao escopo de transação fluirá pelas continuações de thread ao usar a Tarefa ou padrões de programação assíncrona/de espera .NET.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionScope" /> com a opção de fluxo assíncrono especificado.</summary>
      <param name="asyncFlowOption">Uma instância da enumeração <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> que descreve se a transação de ambiente associada ao escopo de transação fluirá pelas continuações de thread ao usar a Tarefa ou padrões de programação assíncrona/de espera .NET.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionScope" /> com os requisitos especificados.</summary>
      <param name="scopeOption">Uma instância da enumeração <see cref="T:System.Transactions.TransactionScopeOption" /> que descreve os requisitos de transação associados a este escopo de transação.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionScope" /> com o valor e requisitos de tempo limite especificados.</summary>
      <param name="scopeOption">Uma instância da enumeração <see cref="T:System.Transactions.TransactionScopeOption" /> que descreve os requisitos de transação associados a este escopo de transação.</param>
      <param name="scopeTimeout">O <see cref="T:System.TimeSpan" /> após o qual o escopo da transação atinge o tempo limite e anula a transação.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionScope" /> com os requisitos e a opção de fluxo assíncrono, bem como o valor de tempo limite especificados.</summary>
      <param name="scopeOption">Uma instância da enumeração <see cref="T:System.Transactions.TransactionScopeOption" /> que descreve os requisitos de transação associados a este escopo de transação.</param>
      <param name="scopeTimeout">O <see cref="T:System.TimeSpan" /> após o qual o escopo da transação atinge o tempo limite e anula a transação.</param>
      <param name="asyncFlowOption">Uma instância da enumeração <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> que descreve se a transação de ambiente associada ao escopo de transação fluirá pelas continuações de thread ao usar a Tarefa ou padrões de programação assíncrona/de espera .NET.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionScope" /> com os requisitos especificados.</summary>
      <param name="scopeOption">Uma instância da enumeração <see cref="T:System.Transactions.TransactionScopeOption" /> que descreve os requisitos de transação associados a este escopo de transação.</param>
      <param name="transactionOptions">Uma estrutura <see cref="T:System.Transactions.TransactionOptions" /> que descreve as opções de transação a serem usadas se uma nova transação for criada. Se uma transação existente for usada, o valor de tempo limite nesse parâmetro se aplicará ao escopo da transação. Se esse período expirar antes de o escopo ser descartado, a transação será anulada.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionScope" /> com o escopo especificado e os requisitos de interoperabilidade COM+ e opções de transação.</summary>
      <param name="scopeOption">Uma instância da enumeração <see cref="T:System.Transactions.TransactionScopeOption" /> que descreve os requisitos de transação associados a este escopo de transação.</param>
      <param name="transactionOptions">Uma estrutura <see cref="T:System.Transactions.TransactionOptions" /> que descreve as opções de transação a serem usadas se uma nova transação for criada. Se uma transação existente for usada, o valor de tempo limite nesse parâmetro se aplicará ao escopo da transação. Se esse período expirar antes de o escopo ser descartado, a transação será anulada.</param>
      <param name="interopOption">Uma instância da enumeração <see cref="T:System.Transactions.EnterpriseServicesInteropOption" /> que descreve como a transação associada interage com transações COM+.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>[Suporte somente no .NET Framework 4.5.1 e versões posteriores] 
Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionScope" /> com os requisitos e a opção de fluxo assíncrono especificados.</summary>
      <param name="scopeOption">Uma instância da enumeração <see cref="T:System.Transactions.TransactionScopeOption" /> que descreve os requisitos de transação associados a este escopo de transação.</param>
      <param name="transactionOptions">Uma estrutura <see cref="T:System.Transactions.TransactionOptions" /> que descreve as opções de transação a serem usadas se uma nova transação for criada. Se uma transação existente for usada, o valor de tempo limite nesse parâmetro se aplicará ao escopo da transação. Se esse período expirar antes de o escopo ser descartado, a transação será anulada.</param>
      <param name="asyncFlowOption">Uma instância da enumeração <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> que descreve se a transação de ambiente associada ao escopo de transação fluirá pelas continuações de thread ao usar a Tarefa ou padrões de programação assíncrona/de espera .NET.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.Transactions.TransactionScope" /> com os requisitos e a opção de fluxo assíncrono especificados.</summary>
      <param name="scopeOption">Uma instância da enumeração <see cref="T:System.Transactions.TransactionScopeOption" /> que descreve os requisitos de transação associados a este escopo de transação.</param>
      <param name="asyncFlowOption">Uma instância da enumeração <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> que descreve se a transação de ambiente associada ao escopo de transação fluirá pelas continuações de thread ao usar a Tarefa ou padrões de programação assíncrona/de espera .NET.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.Complete">
      <summary>Indica que todas as operações dentro do escopo foram concluídas com êxito.</summary>
      <exception cref="T:System.InvalidOperationException">Este método já foi chamado uma vez.</exception>
    </member>
    <member name="M:System.Transactions.TransactionScope.Dispose">
      <summary>Encerra o escopo da transação.</summary>
    </member>
    <member name="T:System.Transactions.TransactionScopeAsyncFlowOption">
      <summary>Especifica se o fluxo de transações em continuações de thread está habilitado para <see cref="T:System.Transactions.TransactionScope" />.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeAsyncFlowOption.Enabled">
      <summary>Especifica que o fluxo de transações em continuações de thread está habilitado.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeAsyncFlowOption.Suppress">
      <summary>Especifica que o fluxo de transações em continuações de thread está suprimido. Essa será a configuração padrão se nenhum <see langword="TransactionScopeAsyncFlowOption" /> for especificado no construtor <see cref="Overload:System.Transactions.TransactionScope.#ctor" />.</summary>
    </member>
    <member name="T:System.Transactions.TransactionScopeOption">
      <summary>Fornece opções adicionais para criar um escopo de transação.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeOption.Required">
      <summary>Uma transação é necessária para o escopo. Ela usará uma transação de ambiente se já existir um. Caso contrário, ela criará uma nova transação antes de inserir o escopo. Este é o valor padrão.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeOption.RequiresNew">
      <summary>Uma nova transação é sempre criada para o escopo.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeOption.Suppress">
      <summary>O contexto de transação de ambiente será suprimido ao criar o escopo. Todas as operações no escopo são executadas sem um contexto de transação de ambiente.</summary>
    </member>
    <member name="T:System.Transactions.TransactionStartedEventHandler">
      <summary>Representa o método que manipulará o evento de <see cref="E:System.Transactions.TransactionManager.DistributedTransactionStarted" /> de uma classe <see cref="T:System.Transactions.TransactionManager" />.</summary>
      <param name="sender">A fonte do evento.</param>
      <param name="e">O <see cref="T:System.Transactions.TransactionEventArgs" /> que contém a transação da qual informações de transação podem ser recuperadas.</param>
    </member>
    <member name="T:System.Transactions.TransactionStatus">
      <summary>Descreve o status atual de uma transação distribuída.</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.Aborted">
      <summary>A transação foi revertida.</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.Active">
      <summary>O status da transação é desconhecido, pois alguns participantes ainda devem ser sondados.</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.Committed">
      <summary>A transação foi confirmada.</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.InDoubt">
      <summary>O status da transação é desconhecido.</summary>
    </member>
  </members>
</doc>
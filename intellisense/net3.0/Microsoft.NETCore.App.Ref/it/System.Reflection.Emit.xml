<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.Emit</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.AssemblyBuilder">
      <summary>Definisce e rappresenta un assembly dinamico.</summary>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.CodeBase">
      <summary>Ottiene la posizione dell'assembly come specificata in origine, ad esempio in un oggetto <see cref="T:System.Reflection.AssemblyName" />.</summary>
      <returns>Posizione dell'assembly come specificata in origine.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato.</exception>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
      <summary>Definisce un assembly dinamico con il nome e i diritti di accesso specificati.</summary>
      <param name="name">Nome dell'assembly.</param>
      <param name="access">I diritti di accesso dell'assembly.</param>
      <returns>Oggetto che rappresenta il nuovo assembly.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
      <summary>Definisce un nuovo assembly con il nome, i diritti di accesso e gli attributi specificati.</summary>
      <param name="name">Nome dell'assembly.</param>
      <param name="access">I diritti di accesso dell'assembly.</param>
      <param name="assemblyAttributes">Raccolta che contiene gli attributi dell'assembly.</param>
      <returns>Oggetto che rappresenta il nuovo assembly.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)">
      <summary>Definisce un modulo dinamico temporaneo denominato nell'assembly.</summary>
      <param name="name">Nome del modulo dinamico.</param>
      <returns>Oggetto <see cref="T:System.Reflection.Emit.ModuleBuilder" /> che rappresenta il modulo dinamico definito.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> inizia con uno spazio vuoto.  
-oppure- 
La lunghezza di <paramref name="name" /> è zero.  
-oppure- 
La lunghezza di <paramref name="name" /> è maggiore della lunghezza massima definita nel sistema.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
      <exception cref="T:System.ExecutionEngineException">Non è possibile caricare l'assembly per un writer di simboli predefinito.  
 -oppure-  
 Non è possibile trovare il tipo che implementa l'interfaccia del writer di simboli predefinito.</exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.EntryPoint">
      <summary>Restituisce il punto di ingresso dell'assembly.</summary>
      <returns>Punto di ingresso dell'assembly.</returns>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)">
      <summary>Restituisce un valore che indica se questa istanza è uguale all'oggetto specificato.</summary>
      <param name="obj">Oggetto da confrontare con questa istanza o <see langword="null" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="obj" /> è uguale al tipo e al valore di questa istanza; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.FullName">
      <summary>Ottiene il nome visualizzato dell'assembly dinamico corrente.</summary>
      <returns>Nome visualizzato dell'assembly dinamico.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Restituisce tutti gli attributi personalizzati applicati all'oggetto <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> corrente.</summary>
      <param name="inherit">Questo argomento viene ignorato per gli oggetti di questo tipo.</param>
      <returns>Matrice contenente gli attributi personalizzati; la matrice è vuota se non sono presenti attributi.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Restituisce tutti gli attributi personalizzati applicati all'oggetto <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> corrente e che derivano da un tipo di attributo specificato.</summary>
      <param name="attributeType">Il tipo di base da cui derivano gli attributi.</param>
      <param name="inherit">Questo argomento viene ignorato per gli oggetti di questo tipo.</param>
      <returns>Matrice che contiene gli attributi personalizzati derivati, a qualsiasi livello, da <paramref name="attributeType" />; la matrice è vuota se non ci sono tali attributi.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> non è un oggetto <see cref="T:System.Type" /> fornito dal runtime. Ad esempio, <paramref name="attributeType" /> è un oggetto <see cref="T:System.Reflection.Emit.TypeBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributesData">
      <summary>Restituisce oggetti <see cref="T:System.Reflection.CustomAttributeData" /> che contengono informazioni sugli attributi applicati all'oggetto <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> corrente.</summary>
      <returns>Elenco generico di oggetti <see cref="T:System.Reflection.CustomAttributeData" /> che rappresentano i dati relativi agli attributi applicati al modulo corrente.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)">
      <summary>Restituisce il modulo dinamico con il nome specificato.</summary>
      <param name="name">Nome del modulo dinamico richiesto.</param>
      <returns>Oggetto ModuleBuilder che rappresenta il modulo dinamico richiesto.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">La lunghezza di <paramref name="name" /> è zero.</exception>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetExportedTypes">
      <summary>Ottiene i tipi esportati definiti nell'assembly.</summary>
      <returns>Matrice dell'oggetto <see cref="T:System.Type" /> contenente i tipi esportati definiti nell'assembly.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è implementato.</exception>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFile(System.String)">
      <summary>Ottiene un oggetto <see cref="T:System.IO.FileStream" /> per il file specificato nella tabella file del manifesto dell'assembly.</summary>
      <param name="name">Nome del file specificato.</param>
      <returns>Oggetto <see cref="T:System.IO.FileStream" /> per il file specificato oppure <see langword="null" /> se il file non viene trovato.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato.</exception>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFiles(System.Boolean)">
      <summary>Ottiene i file della tabella file di un manifesto dell'assembly, specificando se includere i moduli delle risorse.</summary>
      <param name="getResourceModules">
        <see langword="true" /> per includere i moduli delle risorse; in caso contrario, <see langword="false" />.</param>
      <returns>Matrice di oggetti <see cref="T:System.IO.FileStream" />.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato.</exception>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetHashCode">
      <summary>Restituisce il codice hash per l'istanza.</summary>
      <returns>Codice hash di un intero con segno a 32 bit.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetLoadedModules(System.Boolean)">
      <summary>Restituisce tutti i moduli caricati che fanno parte di questo assembly e, facoltativamente, comprende i moduli delle risorse.</summary>
      <param name="getResourceModules">
        <see langword="true" /> per includere i moduli delle risorse; in caso contrario, <see langword="false" />.</param>
      <returns>Moduli caricati che fanno parte di questo assembly.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)">
      <summary>Restituisce informazioni sul modo in cui la risorsa specificata è stata resa persistente.</summary>
      <param name="resourceName">Nome della risorsa.</param>
      <returns>Oggetto <see cref="T:System.Reflection.ManifestResourceInfo" /> compilato con informazioni relative alla topologia della risorsa oppure <see langword="null" /> se la risorsa non è stata trovata.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato.</exception>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames">
      <summary>Carica la risorsa del manifesto specificata da questo assembly.</summary>
      <returns>Matrice di tipo <see langword="String" /> che contiene i nomi di tutte le risorse.</returns>
      <exception cref="T:System.NotSupportedException">Il metodo non è supportato su un assembly dinamico. Per ottenere i nomi della risorsa del manifesto, utilizzare il metodo <see cref="M:System.Reflection.Assembly.GetManifestResourceNames" />.</exception>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)">
      <summary>Carica la risorsa del manifesto specificata da questo assembly.</summary>
      <param name="name">Nome della risorsa del manifesto richiesta.</param>
      <returns>Oggetto <see cref="T:System.IO.Stream" /> che rappresenta la risorsa del manifesto.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato.</exception>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.Type,System.String)">
      <summary>Carica la risorsa del manifesto specificata, definita per l'ambito dallo spazio dei nomi del tipo specificato, da questo assembly.</summary>
      <param name="type">Tipo il cui spazio dei nomi viene usato per definire l'ambito del nome della risorsa del manifesto.</param>
      <param name="name">Nome della risorsa del manifesto richiesta.</param>
      <returns>Oggetto <see cref="T:System.IO.Stream" /> che rappresenta la risorsa del manifesto.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato.</exception>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetModule(System.String)">
      <summary>Ottiene il modulo specificato in questo assembly.</summary>
      <param name="name">Nome del modulo richiesto.</param>
      <returns>Modulo richiesto o <see langword="null" /> se il modulo non viene trovato.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetModules(System.Boolean)">
      <summary>Ottiene tutti i moduli che fanno parte di questo assembly e, facoltativamente, comprende i moduli delle risorse.</summary>
      <param name="getResourceModules">
        <see langword="true" /> per includere i moduli delle risorse; in caso contrario, <see langword="false" />.</param>
      <returns>Moduli che fanno parte di questo assembly.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetName(System.Boolean)">
      <summary>Ottiene l'oggetto <see cref="T:System.Reflection.AssemblyName" /> specificato alla creazione dell'assembly dinamico corrente e imposta la codebase come specificato.</summary>
      <param name="copiedName">
        <see langword="true" /> per impostare la codebase sul percorso dell'assembly dopo che è stata eseguita la copia shadow; <see langword="false" /> per impostare la codebase sul percorso originale.</param>
      <returns>Nome dell'assembly dinamico.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetReferencedAssemblies">
      <summary>Ottiene un elenco incompleto di oggetti <see cref="T:System.Reflection.AssemblyName" /> per gli assembly a cui fa riferimento questo oggetto <see cref="T:System.Reflection.Emit.AssemblyBuilder" />.</summary>
      <returns>Matrice di nomi dell'assembly per gli assembly a cui si fa riferimento. Questa matrice non è un elenco completo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo)">
      <summary>Ottiene l'assembly satellite per le impostazioni cultura specificate.</summary>
      <param name="culture">Impostazioni cultura specificate.</param>
      <returns>Assembly satellite specificato.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> è <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException">L'assembly non è stato trovato.</exception>
      <exception cref="T:System.IO.FileLoadException">L'assembly satellite con un nome di file corrispondente è stato trovato, ma <see langword="CultureInfo" /> non corrisponde a quello specificato.</exception>
      <exception cref="T:System.BadImageFormatException">L'assembly satellite non è un assembly valido.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
      <summary>Ottiene la versione specificata dell'assembly satellite per le impostazioni cultura specificate.</summary>
      <param name="culture">Impostazioni cultura specificate.</param>
      <param name="version">Versione dell'assembly satellite.</param>
      <returns>Assembly satellite specificato.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> è <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileLoadException">È stato trovato l'assembly satellite con un nome file corrispondente, ma <see langword="CultureInfo" /> o la versione non corrisponde a quanto specificato.</exception>
      <exception cref="T:System.IO.FileNotFoundException">L'assembly non è stato trovato.</exception>
      <exception cref="T:System.BadImageFormatException">L'assembly satellite non è un assembly valido.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>Ottiene il tipo specificato dai tipi definiti e creati nell'oggetto <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> corrente.</summary>
      <param name="name">Nome del tipo di cui eseguire la ricerca.</param>
      <param name="throwOnError">
        <see langword="true" /> per generare un'eccezione se non è possibile trovare il tipo; in caso contrario, <see langword="false" />.</param>
      <param name="ignoreCase">
        <see langword="true" /> per ignorare la distinzione tra maiuscole e minuscole nel nome del tipo in fase di ricerca; in caso contrario, <see langword="false" />.</param>
      <returns>Il tipo specificato o <see langword="null" /> se il tipo non è stato trovato o non è stato ancora creato.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.GlobalAssemblyCache">
      <summary>Ottiene un valore che indica se l'assembly è stato caricato dalla Global Assembly Cache.</summary>
      <returns>Sempre <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.HostContext">
      <summary>Ottiene il contesto dell'host dove viene creato l'assembly dinamico.</summary>
      <returns>Valore che indica il contesto dell'host dove viene creato l'assembly dinamico.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ImageRuntimeVersion">
      <summary>Ottiene la versione di CLR (Common Language Runtime) che verrà salvata nel file che contiene il manifesto.</summary>
      <returns>Stringa che rappresenta la versione di Common Language Runtime.</returns>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Restituisce un valore che indica se a questo membro sono state applicate una o più istanze del tipo di attributo specificato.</summary>
      <param name="attributeType">Tipo di attributo per cui effettuare il test.</param>
      <param name="inherit">Questo argomento viene ignorato per gli oggetti di questo tipo.</param>
      <returns>
        <see langword="true" /> se una o più istanze di <paramref name="attributeType" /> sono applicate all'assembly dinamico; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.IsDynamic">
      <summary>Ottiene un valore che indica che l'assembly corrente è un assembly dinamico.</summary>
      <returns>Sempre <see langword="true" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.Location">
      <summary>Ottiene il percorso, in formato codebase, del file caricato che contiene il manifesto, se non è replicato.</summary>
      <returns>Percorso del file caricato che contiene il manifesto. Se il file caricato è stato replicato, <see langword="Location" /> corrisponde al percorso del file prima della replica.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato.</exception>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ManifestModule">
      <summary>Ottiene il modulo nell'oggetto <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> corrente che contiene il manifesto dell'assembly.</summary>
      <returns>Modulo manifesto.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ReflectionOnly">
      <summary>Ottiene un valore che indica se l'assembly dinamico si trova nel contesto solo reflection.</summary>
      <returns>
        <see langword="true" /> se l'assembly dinamico si trova nel contesto solo reflection; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Impostare un attributo personalizzato sull'assembly utilizzando un blob di attributi personalizzati specificato.</summary>
      <param name="con">Costruttore dell'attributo personalizzato.</param>
      <param name="binaryAttribute">BLOB di byte che rappresenta gli attributi.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> o <paramref name="binaryAttribute" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="con" /> non è un oggetto <see langword="RuntimeConstructorInfo" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Impostare un attributo personalizzato sull'assembly utilizzando un generatore di attributi personalizzati.</summary>
      <param name="customBuilder">Un'istanza di una classe helper per definire l'attributo personalizzato.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="T:System.Reflection.Emit.AssemblyBuilderAccess">
      <summary>Definisce le modalità di accesso per un assembly dinamico.</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.Run">
      <summary>L'assembly dinamico può essere eseguito ma non salvato.</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.RunAndCollect">
      <summary>L'assembly dinamico verrà automaticamente scaricato e la relativa memoria recuperata, quando non è più accessibile.</summary>
    </member>
    <member name="T:System.Reflection.Emit.ConstructorBuilder">
      <summary>Definisce e rappresenta un costruttore di una classe dinamica.</summary>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Attributes">
      <summary>Ottiene gli attributi per questo costruttore.</summary>
      <returns>Attributi per il costruttore.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.CallingConvention">
      <summary>Ottiene un valore <see cref="T:System.Reflection.CallingConventions" /> che dipende dal fatto che il tipo dichiarante sia generico o non generico.</summary>
      <returns>
        <see cref="F:System.Reflection.CallingConventions.HasThis" /> se il tipo dichiarante è generico. In caso contrario, <see cref="F:System.Reflection.CallingConventions.Standard" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.DeclaringType">
      <summary>Ottiene un riferimento all'oggetto <see cref="T:System.Type" /> per il tipo che dichiara questo membro.</summary>
      <returns>Tipo che dichiara il membro.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>Definisce un parametro del costruttore.</summary>
      <param name="iSequence">Posizione del parametro nell'elenco dei parametri. I parametri sono indicizzati iniziando da 1 per il primo parametro.</param>
      <param name="attributes">Attributi del parametro.</param>
      <param name="strParamName">Nome del parametro. Il nome può essere rappresentato dalla stringa null.</param>
      <returns>Oggetto che rappresenta il nuovo parametro del costruttore.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="iSequence" /> è minore di 0 (zero) oppure maggiore del numero di parametri del costruttore.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo contenitore è stato creato usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Restituisce tutti gli attributi personalizzati definiti per il costruttore.</summary>
      <param name="inherit">Controlla l'ereditarietà degli attributi personalizzati dalle classi base. Questo parametro viene ignorato.</param>
      <returns>Matrice di oggetti che rappresentano tutti gli attributi personalizzati del costruttore rappresentato da questa istanza <see cref="T:System.Reflection.Emit.ConstructorBuilder" />.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Restituisce gli attributi personalizzati identificati dal tipo dato.</summary>
      <param name="attributeType">Tipo di attributo personalizzato.</param>
      <param name="inherit">Controlla l'ereditarietà degli attributi personalizzati dalle classi base. Questo parametro viene ignorato.</param>
      <returns>Matrice di oggetti che rappresenta gli attributi di questo costruttore.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator">
      <summary>Ottiene un oggetto <see cref="T:System.Reflection.Emit.ILGenerator" /> per il costruttore.</summary>
      <returns>Oggetto <see cref="T:System.Reflection.Emit.ILGenerator" /> per questo costruttore.</returns>
      <exception cref="T:System.InvalidOperationException">Il costruttore è un costruttore senza parametri.  
In alternativa 
Il costruttore dispone di un flag <see cref="T:System.Reflection.MethodAttributes" /> o di un flag <see cref="T:System.Reflection.MethodImplAttributes" /> che indica che non deve essere presente il corpo di un metodo.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)">
      <summary>Ottiene una classe <see cref="T:System.Reflection.Emit.ILGenerator" />, con la dimensione di flusso MSIL specificata, che può essere utilizzata per compilare un corpo del metodo per questo costruttore.</summary>
      <param name="streamSize">Dimensione del flusso MSIL in byte.</param>
      <returns>Classe <see cref="T:System.Reflection.Emit.ILGenerator" /> per questo costruttore.</returns>
      <exception cref="T:System.InvalidOperationException">Il costruttore è un costruttore senza parametri.  
In alternativa 
Il costruttore dispone di un flag <see cref="T:System.Reflection.MethodAttributes" /> o di un flag <see cref="T:System.Reflection.MethodImplAttributes" /> che indica che non deve essere presente il corpo di un metodo.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags">
      <summary>Restituisce i flag di implementazione dei metodi per il costruttore.</summary>
      <returns>Flag di implementazione dei metodi per il costruttore.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetParameters">
      <summary>Restituisce i parametri del costruttore.</summary>
      <returns>Matrice che rappresenta i parametri di questo costruttore.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> non è stato chiamato sul tipo di questo costruttore in .NET Framework versioni 1.0 e 1.1.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> non è stato chiamato sul tipo di questo costruttore in .NET Framework versione 2.0.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.InitLocals">
      <summary>Ottiene o imposta un valore che indica se le variabili locali nel costruttore devono essere inizializzate a zero.</summary>
      <returns>Lettura/scrittura. Ottiene o imposta un valore che indica se le variabili locali nel costruttore devono essere inizializzate a zero.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Richiama in modo dinamico il costruttore ottenuto tramite reflection dall'istanza in questione con gli argomenti specificati, in base ai vincoli dell'oggetto <see langword="Binder" /> specificato.</summary>
      <param name="obj">Oggetto da reinizializzare.</param>
      <param name="invokeAttr">Uno dei valori di <see langword="BindingFlags" /> che specifica il tipo di associazione desiderata.</param>
      <param name="binder">Oggetto <see langword="Binder" /> che definisce un insieme di proprietà e attiva l'associazione, l'assegnazione forzata dei tipi di argomento e la chiamata dei membri tramite reflection. Se <paramref name="binder" /> è <see langword="null" />, viene utilizzato Binder.DefaultBinding.</param>
      <param name="parameters">Elenco di argomenti. Matrice di argomenti con lo stesso numero, ordine e tipo dei parametri del costruttore da richiamare. In assenza di parametri, deve essere un riferimento null (<see langword="Nothing" /> in Visual Basic).</param>
      <param name="culture">Oggetto <see cref="T:System.Globalization.CultureInfo" /> usato per regolare la coercizione dei tipi. Se tale parametro è Null, verrà usato l'oggetto <see cref="T:System.Globalization.CultureInfo" /> per il thread corrente.</param>
      <returns>Istanza della classe associata al costruttore.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato. È possibile recuperare il costruttore utilizzando il metodo <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> e chiamare il metodo <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> sull'oggetto <see cref="T:System.Reflection.ConstructorInfo" /> restituito.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Richiama in modo dinamico il costruttore rappresentato da questa istanza sull'oggetto indicato, passando i parametri specificati e con i vincoli del binder indicato.</summary>
      <param name="invokeAttr">È necessario che si tratti di un flag di bit da <see cref="T:System.Reflection.BindingFlags" />, come InvokeMethod, NonPublic e così via.</param>
      <param name="binder">Oggetto che consente l'associazione, la coercizione dei tipi di argomento, la chiamata dei membri e il recupero di oggetti <see langword="MemberInfo" /> tramite reflection. Se il binder è <see langword="null" />, viene usato quello predefinito. Vedere <see cref="T:System.Reflection.Binder" />.</param>
      <param name="parameters">Elenco di argomenti. Matrice di argomenti con lo stesso numero, ordine e tipo dei parametri del costruttore da richiamare. In assenza di parametri, deve essere <see langword="null" />.</param>
      <param name="culture">Istanza di <see cref="T:System.Globalization.CultureInfo" /> usata per regolare la coercizione dei tipi. Se tale parametro è Null, verrà usato l'oggetto <see cref="T:System.Globalization.CultureInfo" /> per il thread corrente. Questa condizione è necessaria, ad esempio, per convertire un oggetto <see cref="T:System.String" /> che rappresenta 1000 in un valore <see cref="T:System.Double" />, dal momento che 1000 è rappresentato in modo diverso in base alle varie impostazioni cultura.</param>
      <returns>Valore restituito dal costruttore richiamato.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato. È possibile recuperare il costruttore utilizzando il metodo <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> e chiamare il metodo <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> sull'oggetto <see cref="T:System.Reflection.ConstructorInfo" /> restituito.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Controlla se è definito il tipo di attributo personalizzato specificato.</summary>
      <param name="attributeType">Tipo di attributo personalizzato.</param>
      <param name="inherit">Controlla l'ereditarietà degli attributi personalizzati dalle classi base. Questo parametro viene ignorato.</param>
      <returns>
        <see langword="true" /> se è definito il tipo di attributo personalizzato specificato; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato. È possibile recuperare il costruttore utilizzando il metodo <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> e chiamare il metodo <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> sull'oggetto <see cref="T:System.Reflection.ConstructorInfo" /> restituito.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.MethodHandle">
      <summary>Ottiene l'handle interno per il metodo. Utilizzare questo handle per accedere all'handle dei metadati sottostante.</summary>
      <returns>Handle interno per il metodo. Utilizzare questo handle per accedere all'handle dei metadati sottostante.</returns>
      <exception cref="T:System.NotSupportedException">La proprietà non è supportata sulla classe in questione.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Module">
      <summary>Ottiene il modulo dinamico in cui il costruttore è definito.</summary>
      <returns>Oggetto <see cref="T:System.Reflection.Module" /> che rappresenta il modulo dinamico in cui il costruttore è definito.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Name">
      <summary>Recupera il nome del costruttore.</summary>
      <returns>Nome di questo costruttore.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.ReflectedType">
      <summary>Contiene un riferimento all'oggetto <see cref="T:System.Type" /> da cui l'oggetto in questione è stato ottenuto.</summary>
      <returns>
        <see langword="Type" /> Oggetto da cui è stato ottenuto questo oggetto.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Impostare un attributo personalizzato utilizzando un blob di attributi personalizzati specificato.</summary>
      <param name="con">Costruttore dell'attributo personalizzato.</param>
      <param name="binaryAttribute">BLOB di byte che rappresenta gli attributi.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> o <paramref name="binaryAttribute" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Impostare un attributo personalizzato usando un generatore di attributi personalizzati.</summary>
      <param name="customBuilder">Un'istanza di una classe helper per definire l'attributo personalizzato.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary>Imposta i flag di implementazione dei metodi per il costruttore.</summary>
      <param name="attributes">Flag di implementazione dei metodi.</param>
      <exception cref="T:System.InvalidOperationException">Il tipo contenitore è stato creato usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.ToString">
      <summary>Restituisce l'istanza dell'oggetto <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> come un oggetto <see cref="T:System.String" />.</summary>
      <returns>Stringa che contiene nome, attributi ed eccezioni di questo costruttore, seguita dal flusso MSIL (Microsoft Intermediate Language) corrente.</returns>
    </member>
    <member name="T:System.Reflection.Emit.EnumBuilder">
      <summary>Descrive e rappresenta un tipo di enumerazione.</summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Assembly">
      <summary>Recupera l'assembly dinamico che contiene la definizione dell'enum.</summary>
      <returns>Sola lettura. Assembly dinamico che contiene la definizione dell'enum.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
      <summary>Restituisce il percorso completo dell'enum qualificato dal nome visualizzato dell'assembly padre.</summary>
      <returns>Sola lettura. Percorso completo dell'enum qualificato dal nome visualizzato dell'assembly padre.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.BaseType">
      <summary>Restituisce il tipo <see cref="T:System.Type" /> padre del tipo, il quale è sempre <see cref="T:System.Enum" />.</summary>
      <returns>Sola lettura. Tipo <see cref="T:System.Type" /> padre del tipo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.CreateTypeInfo">
      <summary>Ottiene un oggetto <see cref="T:System.Reflection.TypeInfo" /> che rappresenta l'enumerazione.</summary>
      <returns>Oggetto che rappresenta l'enumerazione.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.DeclaringType">
      <summary>Restituisce il tipo con cui è stato dichiarato l'oggetto <see cref="T:System.Reflection.Emit.EnumBuilder" />.</summary>
      <returns>Sola lettura. Tipo con cui è stato dichiarato l'oggetto <see cref="T:System.Reflection.Emit.EnumBuilder" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
      <summary>Definisce un campo statico denominato in un tipo di enumerazione con il valore di costante specificato.</summary>
      <param name="literalName">Nome del campo statico.</param>
      <param name="literalValue">Valore costante del valore letterale.</param>
      <returns>Campo definito.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.FullName">
      <summary>Restituisce il percorso completo dell'enum.</summary>
      <returns>Sola lettura. Percorso completo dell'enum.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary>Restituisce una matrice di oggetti <see cref="T:System.Reflection.ConstructorInfo" /> che rappresentano i costruttori pubblici e non pubblici definiti per questa classe, come specificato.</summary>
      <param name="bindingAttr">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />: <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns>Restituisce una matrice di oggetti <see cref="T:System.Reflection.ConstructorInfo" /> che rappresentano i costruttori specificati definiti per questa classe. Se non è stato definito alcun costruttore, verrà restituita una matrice vuota.</returns>
      <exception cref="T:System.NotSupportedException">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Restituisce tutti gli attributi personalizzati definiti per il costruttore.</summary>
      <param name="inherit">Specifica se trovare gli attributi cercandoli nella catena di ereditarietà del membro.</param>
      <returns>Restituisce una matrice di oggetti che rappresentano tutti gli attributi personalizzati del costruttore rappresentato dall'istanza di <see cref="T:System.Reflection.Emit.ConstructorBuilder" />.</returns>
      <exception cref="T:System.NotSupportedException">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Restituisce gli attributi personalizzati identificati dal tipo dato.</summary>
      <param name="attributeType">Oggetto <see langword="Type" /> a cui vengono applicati gli attributi personalizzati.</param>
      <param name="inherit">Specifica se trovare gli attributi cercandoli nella catena di ereditarietà del membro.</param>
      <returns>Restituisce una matrice di oggetti che rappresenta gli attributi di questo costruttore che sono di <see cref="T:System.Type" /><paramref name="attributeType" />.</returns>
      <exception cref="T:System.NotSupportedException">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetElementType">
      <summary>La chiamata di questo metodo genera sempre un'eccezione <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Questo metodo non è supportato. Non vengono restituiti valori.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType">
      <summary>Restituisce il tipo Integer sottostante dell'enumerazione corrente, che viene impostato al momento della definizione del generatore di enumerazione.</summary>
      <returns>Tipo sottostante.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>Restituisce l'evento con il nome specificato.</summary>
      <param name="name">Nome dell'evento da ottenere.</param>
      <param name="bindingAttr">Attributo di chiamata. Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />: <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns>Restituisce un oggetto <see cref="T:System.Reflection.EventInfo" /> che rappresenta l'evento dichiarato o ereditato da questo tipo con il nome specificato. Se non ci sono corrispondenze, verrà restituito <see langword="null" />.</returns>
      <exception cref="T:System.NotSupportedException">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents">
      <summary>Restituisce gli eventi per gli eventi pubblici dichiarati o ereditati dal tipo.</summary>
      <returns>Restituisce una matrice di oggetti <see cref="T:System.Reflection.EventInfo" /> che rappresentano gli eventi pubblici dichiarati o ereditati da questo tipo. In assenza di eventi pubblici, viene restituita una matrice vuota.</returns>
      <exception cref="T:System.NotSupportedException">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary>Restituisce gli eventi pubblici e non pubblici dichiarati da questo tipo.</summary>
      <param name="bindingAttr">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />, ad esempio <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns>Restituisce una matrice di oggetti <see cref="T:System.Reflection.EventInfo" /> che rappresentano gli eventi pubblici e non pubblici dichiarati o ereditati da questo tipo. Se non sono presenti eventi, come specificato, verrà restituita una matrice vuota.</returns>
      <exception cref="T:System.NotSupportedException">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Restituisce il campo specificato con il nome specificato.</summary>
      <param name="name">Nome del campo da ottenere.</param>
      <param name="bindingAttr">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />: <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns>Restituisce l'oggetto <see cref="T:System.Reflection.FieldInfo" /> che rappresenta il campo dichiarato o ereditato da questo tipo con il nome specificato e il modificatore pubblico o non pubblico. Se sono presenti corrispondenze, verrà restituito null.</returns>
      <exception cref="T:System.NotSupportedException">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>Restituisce i campi pubblici e non pubblici dichiarati da questo tipo.</summary>
      <param name="bindingAttr">È necessario che si tratti di un flag di bit da <see cref="T:System.Reflection.BindingFlags" />, come InvokeMethod, NonPublic e così via.</param>
      <returns>Restituisce una matrice di oggetti <see cref="T:System.Reflection.FieldInfo" /> che rappresentano i campi pubblici e non pubblici dichiarati o ereditati da questo tipo. In assenza di campi, viene restituita una matrice vuota, come specificato.</returns>
      <exception cref="T:System.NotSupportedException">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
      <summary>Restituisce l'interfaccia implementata, direttamente o indirettamente, da questo tipo con il nome completo specificato.</summary>
      <param name="name">Nome dell'interfaccia.</param>
      <param name="ignoreCase">Se <see langword="true" />, la ricerca non fa distinzione tra maiuscole e minuscole. Se <see langword="false" />, la ricerca fa distinzione tra maiuscole e minuscole.</param>
      <returns>Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta l'interfaccia implementata. Restituisce Null se non viene trovato alcun nome di interfaccia corrispondente.</returns>
      <exception cref="T:System.NotSupportedException">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
      <summary>Restituisce un mapping di interfaccia per l'interfaccia richiesta.</summary>
      <param name="interfaceType">Tipo di interfaccia per il quale recuperare il mapping di interfaccia.</param>
      <returns>Mapping dell'interfaccia richiesta.</returns>
      <exception cref="T:System.ArgumentException">Il tipo non implementa l'interfaccia.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaces">
      <summary>Restituisce una matrice di tutte le interfacce implementate sulla classe e sulle relative classi base.</summary>
      <returns>Restituisce una matrice di oggetti <see cref="T:System.Type" /> che rappresentano le interfacce implementate. Se non è stata definita alcuna interfaccia, viene restituita una matrice vuota.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>Restituisce tutti i membri con il nome, il tipo e l'associazione specificati che vengono dichiarati o ereditati da questo tipo.</summary>
      <param name="name">Nome del membro.</param>
      <param name="type">Tipo del membro da restituire.</param>
      <param name="bindingAttr">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />: <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns>Restituisce una matrice di oggetti <see cref="T:System.Reflection.MemberInfo" /> che rappresentano i membri pubblici e non pubblici definiti sul tipo se è usato il parametro <paramref name="nonPublic" />; in caso contrario, vengono restituiti solo i membri pubblici.</returns>
      <exception cref="T:System.NotSupportedException">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary>Restituisce i membri specificati che vengono dichiarati o ereditati da questo tipo.</summary>
      <param name="bindingAttr">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />: <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns>Restituisce una matrice di oggetti <see cref="T:System.Reflection.MemberInfo" /> che rappresentano i membri pubblici o non pubblici dichiarati o ereditati da questo tipo. In assenza di membri corrispondenti, viene restituita una matrice vuota.</returns>
      <exception cref="T:System.NotSupportedException">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>Restituisce tutti i metodi pubblici e non pubblici dichiarati o ereditati da questo tipo, come specificato.</summary>
      <param name="bindingAttr">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />, ad esempio <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns>Restituisce una matrice di oggetti <see cref="T:System.Reflection.MethodInfo" /> che rappresentano i metodi pubblici e non pubblici definiti sul tipo se è usato il parametro <paramref name="nonPublic" />; in caso contrario, vengono restituiti solo i metodi pubblici.</returns>
      <exception cref="T:System.NotSupportedException">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>Restituisce il tipo annidato specificato che viene dichiarato da questo tipo.</summary>
      <param name="name">Oggetto <see cref="T:System.String" /> che contiene il nome del tipo annidato da ottenere.</param>
      <param name="bindingAttr">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.  
In alternativa 
Zero, per eseguire una ricerca di metodi pubblici con distinzione tra maiuscole e minuscole.</param>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo annidato corrispondente ai requisiti specificati, se presente; in caso contrario, <see langword="null" />.</returns>
      <exception cref="T:System.NotSupportedException">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>Restituisce i tipi annidati pubblici e non pubblici dichiarati o ereditati da questo tipo.</summary>
      <param name="bindingAttr">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />, ad esempio <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns>Matrice di oggetti <see cref="T:System.Type" /> che rappresentano tutti i tipi annidati nell'oggetto <see cref="T:System.Type" /> corrente che corrispondono ai vincoli di associazione specificati.  
Matrice vuota di tipo <see cref="T:System.Type" />, se l'oggetto <see cref="T:System.Type" /> corrente non contiene tipi annidati o se nessuno dei tipi annidati corrisponde ai vincoli di associazione.</returns>
      <exception cref="T:System.NotSupportedException">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary>Restituisce tutte le proprietà pubbliche e non pubbliche dichiarate o ereditate da questo tipo, come specificato.</summary>
      <param name="bindingAttr">Attributo di chiamata. Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />: <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns>Restituisce una matrice di oggetti <see cref="T:System.Reflection.PropertyInfo" /> che rappresentano le proprietà pubbliche e non pubbliche definite per questo tipo se viene usato il parametro <paramref name="nonPublic" />; in caso contrario, vengono restituite solo le proprietà pubbliche.</returns>
      <exception cref="T:System.NotSupportedException">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.GUID">
      <summary>Restituisce il GUID dell'enum.</summary>
      <returns>Sola lettura. GUID dell'enum.</returns>
      <exception cref="T:System.NotSupportedException">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Richiama il membro specificato. Il metodo da richiamare deve essere accessibile e fornire massima corrispondenza con l'elenco di argomenti specificato, in conformità ai vincoli del binder e degli attributi di chiamata specificati.</summary>
      <param name="name">Nome del membro da richiamare. Può essere un costruttore, un metodo, una proprietà o un campo. È necessario specificare un attributo di chiamata appropriato. Si noti che è possibile richiamare il membro predefinito di una classe passando una stringa vuota come nome del membro.</param>
      <param name="invokeAttr">Attributo di chiamata. Deve essere un flag di bit di <see langword="BindingFlags" />.</param>
      <param name="binder">Oggetto che consente l'associazione, la coercizione dei tipi di argomento, la chiamata dei membri e il recupero di oggetti <see langword="MemberInfo" /> tramite reflection. Se il binder è <see langword="null" />, viene usato quello predefinito. Vedere <see cref="T:System.Reflection.Binder" />.</param>
      <param name="target">Oggetto su cui richiamare il membro specificato. Se il membro è statico, il parametro viene ignorato.</param>
      <param name="args">Elenco di argomenti. Matrice di oggetti che contiene il numero, l'ordine e il tipo dei parametri del membro da richiamare. In assenza di parametri, deve essere Null.</param>
      <param name="modifiers">Matrice della stessa lunghezza di <paramref name="args" /> con elementi che rappresentano gli attributi associati agli argomenti del membro da richiamare. A un parametro sono associati attributi nei metadati. Vengono usati da vari servizi di interoperabilità. Per questo tipo di informazioni, vedere le specifiche dei metadati.</param>
      <param name="culture">Istanza di <see langword="CultureInfo" /> usata per regolare la coercizione dei tipi. Se tale parametro è Null, verrà usato l'oggetto <see langword="CultureInfo" /> per il thread corrente. Ciò è necessario, ad esempio, per convertire una stringa che rappresenta 1000 in un valore double, poiché 1000 è rappresentato in modo diverso nelle diverse impostazioni cultura.</param>
      <param name="namedParameters">Tutti i parametri nella matrice <paramref name="namedParameters" /> ottengono il valore nell'elemento corrispondente della matrice <paramref name="args" />. Se la lunghezza di <paramref name="args" /> è superiore a quella di <paramref name="namedParameters" />, i valori degli argomenti rimanenti vengono passati in ordine.</param>
      <returns>Restituisce il valore restituito del membro richiamato.</returns>
      <exception cref="T:System.NotSupportedException">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsConstructedGenericType">
      <summary>Ottiene un valore che indica se l'oggetto rappresenta un tipo generico costruito.</summary>
      <returns>
        <see langword="true" /> se questo oggetto rappresenta una definizione di tipo generico; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Controlla se è definito il tipo di attributo personalizzato specificato.</summary>
      <param name="attributeType">Oggetto <see langword="Type" /> a cui vengono applicati gli attributi personalizzati.</param>
      <param name="inherit">Specifica se trovare gli attributi cercandoli nella catena di ereditarietà del membro.</param>
      <returns>
        <see langword="true" /> se una o più istanze di <paramref name="attributeType" /> sono definite sul membro; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException">Il metodo non è attualmente supportato nei tipi non completi.</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsVariableBoundArray" />
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType">
      <summary>Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta una matrice unidimensionale del tipo corrente, con limite inferiore zero.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta una matrice unidimensionale del tipo corrente, con limite inferiore zero.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)">
      <summary>Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta una matrice del tipo corrente, con il numero specificato di dimensioni.</summary>
      <param name="rank">Numero di dimensioni della matrice. Il numero deve essere minore o uguale a 32.</param>
      <returns>Oggetto che rappresenta una matrice del tipo corrente, con il numero specificato di dimensioni.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> è minore di 1.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeByRefType">
      <summary>Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta il tipo corrente quando viene passato come parametro ref (parametro ByRef in Visual Basic).</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo corrente quando viene passato come parametro ref (parametro ByRef in Visual Basic).</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakePointerType">
      <summary>Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta un puntatore al tipo corrente.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta un puntatore al tipo corrente.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Module">
      <summary>Recupera il modulo dinamico che contiene la definizione di <see cref="T:System.Reflection.Emit.EnumBuilder" />.</summary>
      <returns>Sola lettura. Modulo dinamico che contiene la definizione di <see cref="T:System.Reflection.Emit.EnumBuilder" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Name">
      <summary>Restituisce il nome dell'enum.</summary>
      <returns>Sola lettura. Nome dell'enum.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Namespace">
      <summary>Restituisce lo spazio dei nomi dell'enum.</summary>
      <returns>Sola lettura. Spazio dei nomi dell'enum.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.ReflectedType">
      <summary>Restituisce il tipo utilizzato per ottenere l'oggetto <see cref="T:System.Reflection.Emit.EnumBuilder" />.</summary>
      <returns>Sola lettura. Tipo utilizzato per ottenere l'oggetto <see cref="T:System.Reflection.Emit.EnumBuilder" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Imposta un attributo personalizzato usando un BLOB di attributi personalizzati specificato.</summary>
      <param name="con">Costruttore dell'attributo personalizzato.</param>
      <param name="binaryAttribute">BLOB di byte che rappresenta gli attributi.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> o <paramref name="binaryAttribute" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Imposta un attributo personalizzato utilizzando un generatore di attributi personalizzato.</summary>
      <param name="customBuilder">Un'istanza di una classe helper per definire l'attributo personalizzato.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
      <summary>Recupera l'handle interno per l'enum.</summary>
      <returns>Sola lettura. Handle interno per l'enum.</returns>
      <exception cref="T:System.NotSupportedException">La proprietà non è attualmente supportata.</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingField">
      <summary>Restituisce il campo sottostante per l'enum.</summary>
      <returns>Sola lettura. Campo sottostante per l'enum.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingSystemType">
      <summary>Restituisce il tipo di sistema sottostante per l'enum.</summary>
      <returns>Sola lettura. Restituisce il tipo di sistema sottostante.</returns>
    </member>
    <member name="T:System.Reflection.Emit.EventBuilder">
      <summary>Definisce gli eventi per una classe.</summary>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Aggiunge uno degli altri metodi associati all'evento, ovvero un metodo diverso dai metodi "on" e "raise" associati a un evento. È possibile chiamare questa funzione più volte per aggiungere un numero qualsiasi di altri metodi.</summary>
      <param name="mdBuilder">Oggetto <see langword="MethodBuilder" /> che rappresenta l'altro metodo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato sul tipo di inclusione.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetAddOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Imposta il metodo utilizzato per la sottoscrizione dell'evento.</summary>
      <param name="mdBuilder">Oggetto <see langword="MethodBuilder" /> che rappresenta il metodo utilizzato per la sottoscrizione dell'evento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato sul tipo di inclusione.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Impostare un attributo personalizzato utilizzando un blob di attributi personalizzati specificato.</summary>
      <param name="con">Costruttore dell'attributo personalizzato.</param>
      <param name="binaryAttribute">BLOB di byte che rappresenta gli attributi.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> o <paramref name="binaryAttribute" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato sul tipo di inclusione.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Imposta un attributo personalizzato utilizzando un generatore di attributi personalizzato.</summary>
      <param name="customBuilder">Istanza di una classe di supporto per definire l'attributo personalizzato.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato sul tipo di inclusione.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRaiseMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Imposta il metodo utilizzato per generare l'evento.</summary>
      <param name="mdBuilder">Oggetto <see langword="MethodBuilder" /> che rappresenta il metodo utilizzato per generare l'evento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato sul tipo di inclusione.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRemoveOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Imposta il metodo utilizzato per annullare la sottoscrizione dell'evento.</summary>
      <param name="mdBuilder">Oggetto <see langword="MethodBuilder" /> che rappresenta il metodo utilizzato per annullare la sottoscrizione dell'evento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato sul tipo di inclusione.</exception>
    </member>
    <member name="T:System.Reflection.Emit.FieldBuilder">
      <summary>Definisce e rappresenta un campo. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Attributes">
      <summary>Indica gli attributi del campo. Questa proprietà è di sola lettura.</summary>
      <returns>Attributi del campo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.DeclaringType">
      <summary>Indica un riferimento all'oggetto <see cref="T:System.Type" /> per il tipo che dichiara il campo. Questa proprietà è di sola lettura.</summary>
      <returns>Riferimento all'oggetto <see cref="T:System.Type" /> per il tipo che dichiara il campo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldHandle">
      <summary>Indica l'handle di metadati interno per il campo. Questa proprietà è di sola lettura.</summary>
      <returns>Handle di metadati interno per il campo.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è supportato.</exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldType">
      <summary>Indica l'oggetto <see cref="T:System.Type" /> che rappresenta il tipo del campo. Questa proprietà è di sola lettura.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo del campo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Restituisce tutti gli attributi personalizzati definiti per il campo.</summary>
      <param name="inherit">Controlla l'ereditarietà degli attributi personalizzati dalle classi base.</param>
      <returns>Matrice di tipo <see cref="T:System.Object" /> che rappresenta tutti gli attributi personalizzati del costruttore indicato dall'istanza di <see cref="T:System.Reflection.Emit.FieldBuilder" />.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Restituisce tutti gli attributi personalizzati definiti per il campo identificato dal tipo indicato.</summary>
      <param name="attributeType">Tipo di attributo personalizzato.</param>
      <param name="inherit">Controlla l'ereditarietà degli attributi personalizzati dalle classi base.</param>
      <returns>Matrice di tipo <see cref="T:System.Object" /> che rappresenta tutti gli attributi personalizzati del costruttore indicato dall'istanza di <see cref="T:System.Reflection.Emit.FieldBuilder" />.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetValue(System.Object)">
      <summary>Recupera il valore del campo supportato dall'oggetto indicato.</summary>
      <param name="obj">Oggetto da utilizzare per accedere al campo.</param>
      <returns>Oggetto <see cref="T:System.Object" /> contenente il valore del campo ottenuto mediante reflection dall'istanza.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Indica se un attributo con il tipo specificato è definito in un campo.</summary>
      <param name="attributeType">Tipo dell'attributo.</param>
      <param name="inherit">Controlla l'ereditarietà degli attributi personalizzati dalle classi base.</param>
      <returns>
        <see langword="true" /> se una o più istanze di <paramref name="attributeType" /> sono definite nel campo; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato. Recuperare il campo utilizzando il metodo <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" /> e chiamare il metodo <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> per l'oggetto <see cref="T:System.Reflection.FieldInfo" /> restituito.</exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Module">
      <summary>Ottiene il modulo in cui viene definito il tipo che contiene questo campo.</summary>
      <returns>Oggetto <see cref="T:System.Reflection.Module" /> che rappresenta il modulo dinamico in cui viene definito questo campo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Name">
      <summary>Indica il nome del campo. Questa proprietà è di sola lettura.</summary>
      <returns>Oggetto <see cref="T:System.String" /> contenente il nome del campo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.ReflectedType">
      <summary>Indica il riferimento all'oggetto <see cref="T:System.Type" /> da cui è stato ottenuto l'oggetto. Questa proprietà è di sola lettura.</summary>
      <returns>Riferimento all'oggetto <see cref="T:System.Type" /> da cui è stata ottenuta l'istanza.</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetConstant(System.Object)">
      <summary>Imposta il valore predefinito del campo.</summary>
      <param name="defaultValue">Nuovo valore predefinito per il campo.</param>
      <exception cref="T:System.InvalidOperationException">Il tipo contenitore è stato creato usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
      <exception cref="T:System.ArgumentException">Il campo non è tra i tipi supportati.  
In alternativa 
Il tipo di <paramref name="defaultValue" /> e il tipo del campo non corrispondono.  
-oppure- 
Il tipo del campo è <see cref="T:System.Object" /> o un altro tipo di riferimento, <paramref name="defaultValue" /> non è <see langword="null" /> e il valore non può essere assegnato al tipo di riferimento.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Imposta un attributo personalizzato usando un BLOB di attributi personalizzati specificato.</summary>
      <param name="con">Costruttore dell'attributo personalizzato.</param>
      <param name="binaryAttribute">BLOB di byte che rappresenta gli attributi.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> o <paramref name="binaryAttribute" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo padre del campo è completo.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Imposta un attributo personalizzato utilizzando un generatore di attributi personalizzato.</summary>
      <param name="customBuilder">Un'istanza di una classe helper per definire l'attributo personalizzato.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo padre del campo è completo.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetOffset(System.Int32)">
      <summary>Specifica il layout dei campi.</summary>
      <param name="iOffset">Offset del campo all'interno del tipo contenente il campo.</param>
      <exception cref="T:System.InvalidOperationException">Il tipo contenitore è stato creato usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="iOffset" /> è minore di zero.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>Imposta il valore del campo supportato dall'oggetto specificato.</summary>
      <param name="obj">Oggetto da utilizzare per accedere al campo.</param>
      <param name="val">Valore da assegnare al campo.</param>
      <param name="invokeAttr">Membro di <see langword="IBinder" /> che specifica il tipo di associazione desiderata, ad esempio IBinder.CreateInstance e IBinder.ExactBinding.</param>
      <param name="binder">Set di proprietà che abilita l'associazione, la coercizione dei tipi di argomento e la chiamata dei membri tramite reflection. Se il gestore di associazione è null, verrà utilizzato IBinder.DefaultBinding.</param>
      <param name="culture">Preferenze software di determinate impostazioni cultura.</param>
      <exception cref="T:System.NotSupportedException">Questo metodo non è supportato.</exception>
    </member>
    <member name="T:System.Reflection.Emit.GenericTypeParameterBuilder">
      <summary>Definisce e crea parametri di tipo generico per tipi e metodi generici definiti dinamicamente. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Assembly">
      <summary>Ottiene un oggetto <see cref="T:System.Reflection.Assembly" /> che rappresenta l'assembly dinamico che contiene la definizione di tipo generico a cui appartiene il parametro di tipo corrente.</summary>
      <returns>Classe <see cref="T:System.Reflection.Assembly" /> che rappresenta l'assembly dinamico che contiene la definizione di tipo generico a cui appartiene il parametro di tipo corrente.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName">
      <summary>Ottiene <see langword="null" /> in tutti i casi.</summary>
      <returns>Riferimento null (<see langword="Nothing" /> in Visual Basic) in tutti i casi.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType">
      <summary>Ottiene il vincolo del tipo di base per il parametro di tipo generico corrente.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il vincolo di tipo di base del parametro di tipo generico oppure <see langword="null" /> se il parametro di tipo non dispone di vincoli di tipo di base.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters">
      <summary>Ottiene <see langword="true" /> in tutti i casi.</summary>
      <returns>
        <see langword="true" /> in tutti i casi.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod">
      <summary>Ottiene una classe <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo dichiarante se la classe <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> corrente rappresenta un parametro di tipo di un metodo generico.</summary>
      <returns>Classe <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo dichiarante se l'oggetto <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> corrente rappresenta un parametro di tipo di un metodo generico. In caso contrario, <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType">
      <summary>Ottiene la definizione di tipo generico o la definizione di metodo generico a cui il parametro di tipo generico appartiene.</summary>
      <returns>Se il parametro di tipo appartiene a un tipo generico, un oggetto <see cref="T:System.Type" /> che rappresenta tale tipo generico; se il parametro di tipo appartiene a un metodo generico, un oggetto <see cref="T:System.Type" /> che rappresenta il tipo in cui è stato dichiarato il metodo generico.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)">
      <summary>Verifica se l'oggetto dato è un'istanza di <see langword="EventToken" /> ed è uguale all'istanza corrente.</summary>
      <param name="o">Oggetto da confrontare con l'istanza corrente.</param>
      <returns>
        <see langword="true" /> se <paramref name="o" /> è un'istanza di <see langword="EventToken" /> ed è uguale all'istanza corrente, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.FullName">
      <summary>Ottiene <see langword="null" /> in tutti i casi.</summary>
      <returns>Riferimento null (<see langword="Nothing" /> in Visual Basic) in tutti i casi.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes">
      <summary>Ottiene una combinazione di flag <see cref="T:System.Reflection.GenericParameterAttributes" /> che descrivono la covariante e i vincoli speciali del parametro di tipo generico corrente.</summary>
      <returns>Combinazione bit per bit di valori che descrive la covariante e i vincoli speciali del parametro di tipo generico corrente.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition">
      <summary>Ottiene la posizione del parametro di tipo nell'elenco dei parametri di tipo del tipo generico o del metodo generico in cui il parametro è dichiarato.</summary>
      <returns>Posizione del parametro di tipo nell'elenco dei parametri di tipo del tipo o del metodo generico in cui il parametro è dichiarato.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary>Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="bindingAttr">Non supportato.</param>
      <returns>Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="inherit">Specifica se trovare gli attributi cercandoli nella catena di ereditarietà del membro.</param>
      <returns>Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="attributeType">Tipo di attributo da cercare. Vengono restituiti solo gli attributi assegnabili a questo tipo.</param>
      <param name="inherit">Specifica se trovare gli attributi cercandoli nella catena di ereditarietà del membro.</param>
      <returns>Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <returns>Il tipo a cui fa riferimento il tipo di matrice corrente, il tipo di puntatore o il tipo <see langword="ByRef" /> oppure <see langword="null" /> se il tipo corrente non è un tipo di matrice o di puntatore e se non viene passato dal riferimento.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="name">Non supportato.</param>
      <param name="bindingAttr">Non supportato.</param>
      <returns>Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents">
      <summary>Non supportato per i parametri di tipo generico incompleti.</summary>
      <returns>Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary>Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="bindingAttr">Non supportato.</param>
      <returns>Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="name">Non supportato.</param>
      <param name="bindingAttr">Non supportato.</param>
      <returns>Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="bindingAttr">Non supportato.</param>
      <returns>Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments">
      <summary>Non valido per i parametri di tipo generico.</summary>
      <returns>Non valido per i parametri di tipo generico.</returns>
      <exception cref="T:System.InvalidOperationException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition">
      <summary>Non valido per i parametri di tipo generico.</summary>
      <returns>Non valido per i parametri di tipo generico.</returns>
      <exception cref="T:System.InvalidOperationException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode">
      <summary>Restituisce un codice hash di valori interi a 32 bit per l'istanza corrente.</summary>
      <returns>Codice hash di valori interi a 32 bit.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
      <summary>Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="name">Nome dell'interfaccia.</param>
      <param name="ignoreCase">
        <see langword="true" /> per eseguire la ricerca senza distinzione tra maiuscole e minuscole; <see langword="false" /> per eseguire la ricerca con la distinzione tra maiuscole e minuscole.</param>
      <returns>Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
      <summary>Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="interfaceType">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di interfaccia per il quale recuperare il mapping.</param>
      <returns>Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces">
      <summary>Non supportato per i parametri di tipo generico incompleti.</summary>
      <returns>Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="name">Non supportato.</param>
      <param name="type">Non supportato.</param>
      <param name="bindingAttr">Non supportato.</param>
      <returns>Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary>Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="bindingAttr">Non supportato.</param>
      <returns>Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="bindingAttr">Non supportato.</param>
      <returns>Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="name">Non supportato.</param>
      <param name="bindingAttr">Non supportato.</param>
      <returns>Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="bindingAttr">Non supportato.</param>
      <returns>Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary>Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="bindingAttr">Non supportato.</param>
      <returns>Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID">
      <summary>Non supportato per i parametri di tipo generico incompleti.</summary>
      <returns>Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="name">Non supportato.</param>
      <param name="invokeAttr">Non supportato.</param>
      <param name="binder">Non supportato.</param>
      <param name="target">Non supportato.</param>
      <param name="args">Non supportato.</param>
      <param name="modifiers">Non supportato.</param>
      <param name="culture">Non supportato.</param>
      <param name="namedParameters">Non supportato.</param>
      <returns>Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="c">Oggetto da testare.</param>
      <returns>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType">
      <summary>Ottiene un valore che indica se l'oggetto rappresenta un tipo generico costruito.</summary>
      <returns>
        <see langword="true" /> se questo oggetto rappresenta una definizione di tipo generico; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="attributeType">Non supportato.</param>
      <param name="inherit">Non supportato.</param>
      <returns>Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter">
      <summary>Ottiene <see langword="true" /> in tutti i casi.</summary>
      <returns>
        <see langword="true" /> in tutti i casi.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType">
      <summary>Restituisce <see langword="false" /> in tutti i casi.</summary>
      <returns>
        <see langword="false" /> in tutti i casi.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition">
      <summary>Ottiene <see langword="false" /> in tutti i casi.</summary>
      <returns>
        <see langword="false" /> in tutti i casi.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
      <summary>Non supportato per i parametri di tipo generico incompleti.</summary>
      <param name="c">Non supportato.</param>
      <returns>Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsVariableBoundArray" />
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
      <summary>Restituisce il tipo di una matrice unidimensionale il cui tipo di elemento è il parametro di tipo generico.</summary>
      <returns>Classe <see cref="T:System.Type" /> che rappresenta il tipo di una matrice unidimensionale il cui tipo di elemento è il parametro di tipo generico.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
      <summary>Restituisce il tipo di una matrice il cui tipo di elemento è il parametro di tipo generico, con il numero specificato di dimensioni.</summary>
      <param name="rank">Numero di dimensioni della matrice.</param>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di una matrice il cui tipo di elemento è il parametro di tipo generico, con il numero specificato di dimensioni.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> non è un numero di dimensioni valido. Ad esempio, il suo valore è minore di 1.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
      <summary>Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta il parametro di tipo generico corrente quando è passato come parametro di riferimento.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il parametro di tipo generico corrente quando è passato come parametro di riferimento.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])">
      <summary>Non valido per i parametri di tipo generico incompleti.</summary>
      <param name="typeArguments">Matrice di argomenti di tipo.</param>
      <returns>Questo metodo non è valido per parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.InvalidOperationException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
      <summary>Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta un puntatore al parametro di tipo generico corrente.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta un puntatore al parametro di tipo generico corrente.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Module">
      <summary>Ottiene il modulo dinamico che contiene il parametro di tipo generico.</summary>
      <returns>Oggetto <see cref="T:System.Reflection.Module" /> che rappresenta il modulo dinamico che contiene il parametro di tipo generico.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Name">
      <summary>Ottiene il nome del parametro di tipo generico.</summary>
      <returns>Il nome del parametro di tipo generico.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Namespace">
      <summary>Ottiene <see langword="null" /> in tutti i casi.</summary>
      <returns>Riferimento null (<see langword="Nothing" /> in Visual Basic) in tutti i casi.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType">
      <summary>Ottiene l'oggetto <see cref="T:System.Type" /> utilizzato per ottenere la classe <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> utilizzato per ottenere la classe <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
      <summary>Imposta il tipo di base che un tipo deve ereditare per essere sostituito dal parametro di tipo.</summary>
      <param name="baseTypeConstraint">Classe <see cref="T:System.Type" /> che deve essere ereditata da qualsiasi tipo per cui sia richiesta la sostituzione con il parametro di tipo.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Imposta un attributo personalizzato usando un BLOB di attributi personalizzati specificato.</summary>
      <param name="con">Costruttore dell'attributo personalizzato.</param>
      <param name="binaryAttribute">Blob di byte che rappresenta l'attributo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> è <see langword="null" />.  
-oppure- 
 <paramref name="binaryAttribute" /> è un riferimento null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Impostare un attributo personalizzato usando un generatore di attributi personalizzati.</summary>
      <param name="customBuilder">Istanza di una classe di supporto che consente di definire l'attributo personalizzato.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
      <summary>Imposta le caratteristiche di varianza e i vincoli speciali del parametro generico, ad esempio il vincolo del costruttore senza parametri.</summary>
      <param name="genericParameterAttributes">Combinazione bit per bit di valori <see cref="T:System.Reflection.GenericParameterAttributes" /> che rappresentano le caratteristiche di varianza e i vincoli speciali del parametro di tipo generico.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
      <summary>Imposta le interfacce da implementare per un tipo, per consentirne la sostituzione con il parametro di tipo.</summary>
      <param name="interfaceConstraints">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano le interfacce da implementare per un tipo, per consentirne la sostituzione con il parametro di tipo.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.ToString">
      <summary>Restituisce una rappresentazione di stringa del parametro di tipo generico corrente.</summary>
      <returns>Stringa contenente il nome del parametro di tipo generico.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle">
      <summary>Non supportato per i parametri di tipo generico incompleti.</summary>
      <returns>Non supportato per i parametri di tipo generico incompleti.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType">
      <summary>Ottiene il parametro di tipo generico corrente.</summary>
      <returns>Oggetto <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> corrente.</returns>
    </member>
    <member name="T:System.Reflection.Emit.MethodBuilder">
      <summary>Definisce e rappresenta un metodo (o costruttore) su una classe dinamica.</summary>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Attributes">
      <summary>Recupera gli attributi per il metodo.</summary>
      <returns>Sola lettura. Recupera l'oggetto <see langword="MethodAttributes" /> per il metodo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.CallingConvention">
      <summary>Restituisce la convenzione di chiamata del metodo.</summary>
      <returns>Sola lettura. Convenzione di chiamata del metodo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters">
      <summary>Non supportata per questo tipo.</summary>
      <returns>Non supportato.</returns>
      <exception cref="T:System.NotSupportedException">Il metodo richiamato non è supportato nella classe base.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.DeclaringType">
      <summary>Restituisce il tipo che dichiara il metodo.</summary>
      <returns>Sola lettura. Tipo che dichiara il metodo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
      <summary>Imposta il numero di parametri di tipo generico per il metodo corrente, con l'indicazione dei relativi nomi, e restituisce una matrice di oggetti <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> che possono essere utilizzati per impostare i vincoli.</summary>
      <param name="names">Matrice di stringhe che rappresentano i nomi dei parametri di tipo generico.</param>
      <returns>Matrice di oggetti <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> che rappresentano i parametri di tipo del metodo generico.</returns>
      <exception cref="T:System.InvalidOperationException">I parametri di tipo generico sono già stati definiti per questo metodo.  
-oppure- 
Il metodo è stato già completato.  
-oppure- 
Il metodo <see cref="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)" /> è stato chiamato per il metodo corrente.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="names" /> è <see langword="null" />.  
-oppure- 
Un elemento di <paramref name="names" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="names" /> è una matrice vuota.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>Imposta gli attributi del parametro e il nome di un parametro di questo metodo oppure del valore restituito di questo metodo. Restituisce un oggetto ParameterBuilder che può essere usato per applicare attributi personalizzati.</summary>
      <param name="position">Posizione del parametro nell'elenco dei parametri. I parametri vengono indicizzati a partire dal numero 1 per il primo parametro. Il numero 0 rappresenta il valore restituito del metodo.</param>
      <param name="attributes">Attributi del parametro.</param>
      <param name="strParamName">Nome del parametro. Il nome può essere rappresentato dalla stringa null.</param>
      <returns>Restituisce un oggetto <see langword="ParameterBuilder" /> che rappresenta un parametro o il valore restituito di questo metodo.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Il metodo non ha parametri.  
-oppure- 
 <paramref name="position" /> è minore di zero.  
-oppure- 
 <paramref name="position" /> è maggiore del numero dei parametri del metodo.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo contenitore è stato creato in precedenza con <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
-oppure- 
Per il metodo corrente la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> è <see langword="true" />, ma la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)">
      <summary>Determina se l'oggetto indicato è uguale all'istanza.</summary>
      <param name="obj">Oggetto da confrontare con l'istanza di <see langword="MethodBuilder" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="obj" /> è un'istanza di <see langword="MethodBuilder" /> ed è uguale all'oggetto, in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetBaseDefinition">
      <summary>Restituisce l'implementazione di base per un metodo.</summary>
      <returns>Implementazione di base di questo metodo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Restituisce tutti gli attributi personalizzati definiti per il metodo.</summary>
      <param name="inherit">Specifica se effettuare una ricerca nella catena di ereditarietà di questo membro per trovare gli attributi personalizzati.</param>
      <returns>Restituisce una matrice di oggetti che rappresenta tutti gli attributi personalizzati del metodo.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato. Recuperare il metodo utilizzando il metodo <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> e chiamare il metodo <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> sull'oggetto <see cref="T:System.Reflection.MethodInfo" /> restituito.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Restituisce gli attributi personalizzati identificati dal tipo dato.</summary>
      <param name="attributeType">Tipo di attributo personalizzato.</param>
      <param name="inherit">Specifica se effettuare una ricerca nella catena di ereditarietà di questo membro per trovare gli attributi personalizzati.</param>
      <returns>Restituisce una matrice di oggetti che rappresenta gli attributi del metodo di tipo <paramref name="attributeType" />.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato. Recuperare il metodo utilizzando il metodo <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> e chiamare il metodo <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> sull'oggetto <see cref="T:System.Reflection.MethodInfo" /> restituito.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericArguments">
      <summary>Restituisce una matrice di oggetti <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> che rappresentano i parametri di tipo del metodo, se il metodo è generico.</summary>
      <returns>Matrice di oggetti <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> che rappresentano i parametri di tipo, se il metodo è generico, o <see langword="null" /> se il metodo non è generico.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition">
      <summary>Restituisce il metodo.</summary>
      <returns>Istanza corrente della classe <see cref="T:System.Reflection.Emit.MethodBuilder" />.</returns>
      <exception cref="T:System.InvalidOperationException">Il metodo corrente non è generico, Quindi la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> restituisce <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetHashCode">
      <summary>Ottiene il codice hash per il metodo.</summary>
      <returns>Codice hash per il metodo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator">
      <summary>Restituisce un oggetto <see langword="ILGenerator" /> per il metodo con una dimensione di flusso MSIL (Microsoft Intermediate Language) predefinita di 64 byte.</summary>
      <returns>Restituisce un oggetto <see langword="ILGenerator" /> per il metodo.</returns>
      <exception cref="T:System.InvalidOperationException">Questo metodo non ha un corpo a causa dei flag <see cref="T:System.Reflection.MethodAttributes" /> o <see cref="T:System.Reflection.MethodImplAttributes" />, ad esempio perché contiene il flag <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" />.  
-oppure- 
Il metodo è un metodo generico ma non una definizione di metodo generica. In altre parole, la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> è <see langword="true" />, ma la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)">
      <summary>Restituisce un oggetto <see langword="ILGenerator" /> per il metodo con la dimensione di flusso MSIL specificata.</summary>
      <param name="size">Dimensione del flusso MSIL in byte.</param>
      <returns>Restituisce un oggetto <see langword="ILGenerator" /> per il metodo.</returns>
      <exception cref="T:System.InvalidOperationException">Questo metodo non ha un corpo a causa dei flag <see cref="T:System.Reflection.MethodAttributes" /> o <see cref="T:System.Reflection.MethodImplAttributes" />, ad esempio perché contiene il flag <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" />.  
In alternativa 
Il metodo è un metodo generico ma non una definizione di metodo generica. In altre parole, la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> è <see langword="true" />, ma la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags">
      <summary>Restituisce i flag di implementazione per il metodo.</summary>
      <returns>Restituisce i flag di implementazione per il metodo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetParameters">
      <summary>Restituisce i parametri del metodo.</summary>
      <returns>Matrice di oggetti <see langword="ParameterInfo" /> che rappresenta i parametri del metodo.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato. Recuperare il metodo utilizzando il metodo <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> e chiamare il metodo <see langword="GetParameters" /> sull'oggetto <see cref="T:System.Reflection.MethodInfo" /> restituito.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.InitLocals">
      <summary>Ottiene o imposta un valore booleano che indica se le variabili locali all'interno del metodo sono inizializzate su zero. Il valore predefinito di questa proprietà è <see langword="true" />.</summary>
      <returns>
        <see langword="true" /> se le variabili locali all'interno del metodo sono inizializzate su zero; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.InvalidOperationException">Per il metodo corrente la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> è <see langword="true" />, ma la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> è <see langword="false" />. (ottenuta o impostata).</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Richiama dinamicamente il metodo ottenuto mediante reflection dall'istanza sull'oggetto indicato, passando i parametri specificati e con i vincoli del gestore di associazione indicato.</summary>
      <param name="obj">Oggetto su cui richiamare il metodo specificato. Se il metodo è statico, il parametro verrà ignorato.</param>
      <param name="invokeAttr">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />: <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <param name="binder">Oggetto che consente l'associazione, la coercizione dei tipi, la chiamata dei membri e il recupero di oggetti MemberInfo tramite reflection. Se il binder è <see langword="null" />, viene usato quello predefinito. Per informazioni dettagliate, vedere <see cref="T:System.Reflection.Binder" />.</param>
      <param name="parameters">Elenco di argomenti. Si tratta di una matrice di argomenti con lo stesso numero, ordine e tipo dei parametri del metodo da richiamare. In assenza di parametri, deve essere <see langword="null" />.</param>
      <param name="culture">Istanza di <see cref="T:System.Globalization.CultureInfo" /> usata per regolare la coercizione dei tipi. Se tale parametro è Null, verrà usato l'oggetto <see cref="T:System.Globalization.CultureInfo" /> per il thread corrente. Questo è necessario, ad esempio, per convertire un valore <see cref="T:System.String" /> che rappresenta 1000 in un valore <see cref="T:System.Double" />, poiché 1000 viene rappresentato in modo diverso dalle diverse impostazioni cultura.</param>
      <returns>Restituisce un oggetto contenente il valore restituito del metodo richiamato.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato. Recuperare il metodo utilizzando il metodo <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> e chiamare il metodo <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> sull'oggetto <see cref="T:System.Reflection.MethodInfo" /> restituito.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsConstructedGenericMethod" />
    <member name="M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Controlla se è definito il tipo di attributo personalizzato specificato.</summary>
      <param name="attributeType">Tipo di attributo personalizzato.</param>
      <param name="inherit">Specifica se effettuare una ricerca nella catena di ereditarietà di questo membro per trovare gli attributi personalizzati.</param>
      <returns>
        <see langword="true" /> se è definito il tipo di attributo personalizzato specificato; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato. Recuperare il metodo utilizzando il metodo <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> e chiamare il metodo <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> sull'oggetto <see cref="T:System.Reflection.MethodInfo" /> restituito.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod">
      <summary>Ottiene un valore che indica se il metodo è un metodo generico.</summary>
      <returns>
        <see langword="true" /> se il metodo è generico; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition">
      <summary>Ottiene un valore che indica se l'oggetto <see cref="T:System.Reflection.Emit.MethodBuilder" /> corrente rappresenta la definizione di un metodo generico.</summary>
      <returns>
        <see langword="true" /> se l'oggetto <see cref="T:System.Reflection.Emit.MethodBuilder" /> corrente rappresenta la definizione di un metodo generico; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecurityCritical">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <returns>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi. Questa proprietà non è supportata negli assembly dinamici.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <returns>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi. Questa proprietà non è supportata negli assembly dinamici.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecurityTransparent">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <returns>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi. Questa proprietà non è supportata negli assembly dinamici.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
      <summary>Restituisce un metodo generico costruito dalla definizione di metodo generica corrente tramite gli argomenti di tipo generico specificati.</summary>
      <param name="typeArguments">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano gli argomenti di tipo del metodo generico.</param>
      <returns>Classe <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo generico costruito dalla definizione di metodo generica corrente tramite gli argomenti di tipo generico specificati.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.MethodHandle">
      <summary>Recupera l'handle interno per il metodo. Utilizzare questo handle per accedere all'handle dei metadati sottostante.</summary>
      <returns>Sola lettura. Handle interno per il metodo. Utilizzare questo handle per accedere all'handle dei metadati sottostante.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato. Recuperare il metodo utilizzando il metodo <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> e chiamare il metodo <see cref="P:System.Reflection.MethodBase.MethodHandle" /> sull'oggetto <see cref="T:System.Reflection.MethodInfo" /> restituito.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Module">
      <summary>Ottiene il modulo in cui viene definito il metodo corrente.</summary>
      <returns>Classe <see cref="T:System.Reflection.Module" /> in cui viene definito il membro rappresentato dalla classe <see cref="T:System.Reflection.MemberInfo" /> corrente.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Name">
      <summary>Recupera il nome del metodo.</summary>
      <returns>Sola lettura. Recupera una stringa contenente il nome semplice del metodo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReflectedType">
      <summary>Recupera la classe utilizzata nella reflection per ottenere l'oggetto.</summary>
      <returns>Sola lettura. Tipo utilizzato per ottenere il metodo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnParameter">
      <summary>Ottiene un oggetto <see cref="T:System.Reflection.ParameterInfo" /> contenente informazioni sul tipo restituito dal metodo, ad esempio se il tipo restituito contiene modificatori personalizzati.</summary>
      <returns>Oggetto <see cref="T:System.Reflection.ParameterInfo" /> contenente informazioni relative al tipo restituito.</returns>
      <exception cref="T:System.InvalidOperationException">Il tipo di dichiarazione non è stato creato.</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnType">
      <summary>Ottiene il tipo restituito dal metodo rappresentato da questo oggetto <see cref="T:System.Reflection.Emit.MethodBuilder" />.</summary>
      <returns>Tipo restituito del metodo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes">
      <summary>Restituisce gli attributi personalizzati del tipo restituito del metodo.</summary>
      <returns>Sola lettura. Attributi personalizzati del tipo restituito del metodo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Imposta un attributo personalizzato usando un BLOB di attributi personalizzati specificato.</summary>
      <param name="con">Costruttore dell'attributo personalizzato.</param>
      <param name="binaryAttribute">BLOB di byte che rappresenta gli attributi.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> o <paramref name="binaryAttribute" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Per il metodo corrente la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> è <see langword="true" />, ma la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Imposta un attributo personalizzato utilizzando un generatore di attributi personalizzato.</summary>
      <param name="customBuilder">Istanza di una classe di supporto per definire l'attributo personalizzato.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Per il metodo corrente la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> è <see langword="true" />, ma la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary>Imposta i flag di implementazione per il metodo.</summary>
      <param name="attributes">Flag di implementazione da impostare.</param>
      <exception cref="T:System.InvalidOperationException">Il tipo contenitore è stato creato in precedenza con <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
In alternativa 
Per il metodo corrente la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> è <see langword="true" />, ma la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
      <summary>Imposta il numero e i tipi di parametri di un metodo.</summary>
      <param name="parameterTypes">Matrice di oggetti <see cref="T:System.Type" /> che rappresentano i tipi di parametro.</param>
      <exception cref="T:System.InvalidOperationException">Il metodo corrente è un metodo generico ma non una definizione di metodo generica. In altre parole, la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> è <see langword="true" />, ma la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
      <summary>Imposta il tipo restituito del metodo.</summary>
      <param name="returnType">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo restituito del metodo.</param>
      <exception cref="T:System.InvalidOperationException">Il metodo corrente è un metodo generico ma non una definizione di metodo generica. In altre parole, la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> è <see langword="true" />, ma la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>Imposta la firma del metodo, incluso il tipo restituito, i tipi di parametro e i modificatori personalizzati obbligatori e facoltativi del tipo restituito e dei tipi di parametro.</summary>
      <param name="returnType">Tipo restituito del metodo.</param>
      <param name="returnTypeRequiredCustomModifiers">Matrice di tipi che rappresenta i modificatori personalizzati obbligatori, come <see cref="T:System.Runtime.CompilerServices.IsConst" />, per il tipo restituito del metodo. Se il tipo restituito non ha modificatori personalizzati obbligatori, specificare <see langword="null" />.</param>
      <param name="returnTypeOptionalCustomModifiers">Matrice di tipi che rappresenta i modificatori personalizzati facoltativi, come <see cref="T:System.Runtime.CompilerServices.IsConst" />, per il tipo restituito del metodo. Se il tipo restituito non ha modificatori personalizzati facoltativi, specificare <see langword="null" />.</param>
      <param name="parameterTypes">Tipi dei parametri del metodo.</param>
      <param name="parameterTypeRequiredCustomModifiers">Matrice di matrici di tipi. Ogni matrice di tipi rappresenta i modificatori personalizzati obbligatori per il parametro corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" />. Se un parametro particolare non ha modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun parametro ha modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <param name="parameterTypeOptionalCustomModifiers">Matrice di matrici di tipi. Ogni matrice di tipi rappresenta i modificatori personalizzati facoltativi per il parametro corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" />. Se un parametro particolare non ha modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun parametro ha modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <exception cref="T:System.InvalidOperationException">Il metodo corrente è un metodo generico ma non una definizione di metodo generica. In altre parole, la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> è <see langword="true" />, ma la proprietà <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.ToString">
      <summary>Restituisce l'istanza dell'oggetto <see langword="MethodBuilder" /> in forma di stringa.</summary>
      <returns>Restituisce una stringa contenente il nome, gli attributi, la firma, le eccezioni e la firma locale del metodo, seguiti dal flusso MSIL (Microsoft Intermediate Language) corrente.</returns>
    </member>
    <member name="T:System.Reflection.Emit.ModuleBuilder">
      <summary>Definisce e rappresenta un modulo in un assembly dinamico.</summary>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Assembly">
      <summary>Ottiene l'assembly dinamico che ha definito questa istanza di <see cref="T:System.Reflection.Emit.ModuleBuilder" />.</summary>
      <returns>Assembly dinamico che ha definito il modulo dinamico corrente.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions">
      <summary>Completa le definizioni delle funzioni globali e quelle dei dati globali per il modulo dinamico.</summary>
      <exception cref="T:System.InvalidOperationException">Il metodo è stato chiamato in precedenza.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>Definisce un tipo di enumerazione, ovvero un tipo di valore con un solo campo non statico denominato <paramref name="value__" /> del tipo specificato.</summary>
      <param name="name">Percorso completo del tipo di enumerazione. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="visibility">Attributi del tipo per l'enumerazione. Gli attributi sono definiti per singolo bit dal campo <see cref="F:System.Reflection.TypeAttributes.VisibilityMask" />.</param>
      <param name="underlyingType">Tipo sottostante per l'enumerazione. Deve essere un tipo Integer incorporato.</param>
      <returns>Enumerazione definita.</returns>
      <exception cref="T:System.ArgumentException">Sono forniti gli attributi che non siano di visibilità.  
-oppure- 
Nell'assembly padre del modulo è presente un'enumerazione con il nome indicato.  
-oppure- 
Gli attributi di visibilità non corrispondono all'ambito dell'enumerazione. Ad esempio, <see cref="F:System.Reflection.TypeAttributes.NestedPublic" /> viene specificato per <paramref name="visibility" />, ma l'enumerazione non è un tipo annidato.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>Definisce un metodo globale con il nome, gli attributi, la convenzione di chiamata, il tipo restituito e i tipi di parametri specificati.</summary>
      <param name="name">Nome del metodo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attributes">Attributi del metodo. Il parametro <paramref name="attributes" /> deve includere il campo <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention">Convenzione di chiamata del metodo.</param>
      <param name="returnType">Tipo restituito del metodo.</param>
      <param name="parameterTypes">Tipi dei parametri del metodo.</param>
      <returns>Metodo globale definito.</returns>
      <exception cref="T:System.ArgumentException">Il metodo non è statico. In altre parole, <paramref name="attributes" /> non include <see cref="F:System.Reflection.MethodAttributes.Static" />.  
-oppure- 
Un elemento nella matrice <see cref="T:System.Type" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">L'oggetto <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> è stato chiamato in precedenza.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>Definisce un metodo globale con il nome, gli attributi, la convenzione di chiamata, il tipo restituito, i modificatori personalizzati per il tipo restituito, i tipi di parametri e i modificatori personalizzati per i tipi di parametri specificati.</summary>
      <param name="name">Nome del metodo. <paramref name="name" /> non può contenere caratteri null incorporati.</param>
      <param name="attributes">Attributi del metodo. Il parametro <paramref name="attributes" /> deve includere il campo <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention">Convenzione di chiamata del metodo.</param>
      <param name="returnType">Tipo restituito del metodo.</param>
      <param name="requiredReturnTypeCustomModifiers">Matrice di tipi che rappresentano i modificatori personalizzati obbligatori per il tipo restituito, come <see cref="T:System.Runtime.CompilerServices.IsConst" /> o <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Se il tipo restituito non ha modificatori personalizzati obbligatori, specificare <see langword="null" />.</param>
      <param name="optionalReturnTypeCustomModifiers">Matrice di tipi che rappresentano i modificatori personalizzati opzionali per il tipo restituito, come <see cref="T:System.Runtime.CompilerServices.IsConst" /> o <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Se il tipo restituito non ha modificatori personalizzati facoltativi, specificare <see langword="null" />.</param>
      <param name="parameterTypes">Tipi dei parametri del metodo.</param>
      <param name="requiredParameterTypeCustomModifiers">Matrice di matrici di tipi. Ciascuna matrice di tipi rappresenta i modificatori personalizzati obbligatori per il parametro corrispondente del metodo globale. Se un determinato argomento non dispone di modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di tipi. Se il metodo globale non dispone di argomenti oppure se nessun argomento dispone di modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <param name="optionalParameterTypeCustomModifiers">Matrice di matrici di tipi. Ciascuna matrice di tipi rappresenta i modificatori personalizzati opzionali per il parametro corrispondente. Se un determinato argomento non dispone di modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di tipi. Se il metodo globale non dispone di argomenti oppure se nessun argomento dispone di modificatori personalizzati opzionali, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <returns>Metodo globale definito.</returns>
      <exception cref="T:System.ArgumentException">Il metodo non è statico. In altre parole, <paramref name="attributes" /> non include <see cref="F:System.Reflection.MethodAttributes.Static" />.  
-oppure- 
Un elemento nella matrice <see cref="T:System.Type" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il metodo <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> è già stato chiamato in precedenza.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary>Definisce un metodo globale con il nome, gli attributi, il tipo restituito e i tipi di parametri specificati.</summary>
      <param name="name">Nome del metodo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attributes">Attributi del metodo. Il parametro <paramref name="attributes" /> deve includere il campo <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="returnType">Tipo restituito del metodo.</param>
      <param name="parameterTypes">Tipi dei parametri del metodo.</param>
      <returns>Metodo globale definito.</returns>
      <exception cref="T:System.ArgumentException">Il metodo non è statico. In altre parole, <paramref name="attributes" /> non include <see cref="F:System.Reflection.MethodAttributes.Static" />.  
-oppure- 
La lunghezza di <paramref name="name" /> è zero. 
-oppure- 
Un elemento nella matrice <see cref="T:System.Type" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">L'oggetto <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> è stato chiamato in precedenza.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary>Definisce un campo di dati inizializzati nella sezione .sdata del file PE (Portable Executable).</summary>
      <param name="name">Nome usato per fare riferimento ai dati. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="data">Oggetto binario di grandi dimensioni (BLOB) di dati.</param>
      <param name="attributes">Attributi per il campo. Il valore predefinito è <see langword="Static" />.</param>
      <returns>Campo di riferimento ai dati.</returns>
      <exception cref="T:System.ArgumentException">La lunghezza di <paramref name="name" /> è zero.  
-oppure- 
Le dimensioni dei <paramref name="data" /> sono minori di o uguali a zero oppure maggiori di o uguali a 0x3f0000.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> o <paramref name="data" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">L'oggetto <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> è stato chiamato in precedenza.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>Definisce un metodo <see langword="PInvoke" />, con il nome, il nome del file DLL nel quale viene definito il metodo, gli attributi, la convenzione di chiamata, il tipo restituito, i tipi di parametri e i flag <see langword="PInvoke" /> del metodo specificati.</summary>
      <param name="name">Nome del metodo <see langword="PInvoke" />. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="dllName">Nome della DLL in cui è definito il metodo <see langword="PInvoke" />.</param>
      <param name="attributes">Attributi del metodo.</param>
      <param name="callingConvention">Convenzione di chiamata del metodo.</param>
      <param name="returnType">Tipo restituito del metodo.</param>
      <param name="parameterTypes">Tipi dei parametri del metodo.</param>
      <param name="nativeCallConv">Convenzione di chiamata nativa.</param>
      <param name="nativeCharSet">Set di caratteri nativo del metodo.</param>
      <returns>Metodo <see langword="PInvoke" /> definito.</returns>
      <exception cref="T:System.ArgumentException">Il metodo non è statico o il tipo che lo contiene è un'interfaccia.  
 -oppure-  
 Il metodo è di tipo abstract.  
 In alternativa  
 Il metodo è stato definito in precedenza.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> o <paramref name="dllName" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo che lo contiene è stato creato in precedenza utilizzando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>Definisce un metodo <see langword="PInvoke" />, con il nome, il nome del file DLL nel quale viene definito il metodo, gli attributi, la convenzione di chiamata, il tipo restituito, i tipi di parametri e i flag <see langword="PInvoke" /> del metodo specificati.</summary>
      <param name="name">Nome del metodo <see langword="PInvoke" />. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="dllName">Nome della DLL in cui è definito il metodo <see langword="PInvoke" />.</param>
      <param name="entryName">Nome del punto di ingresso nella DLL.</param>
      <param name="attributes">Attributi del metodo.</param>
      <param name="callingConvention">Convenzione di chiamata del metodo.</param>
      <param name="returnType">Tipo restituito del metodo.</param>
      <param name="parameterTypes">Tipi dei parametri del metodo.</param>
      <param name="nativeCallConv">Convenzione di chiamata nativa.</param>
      <param name="nativeCharSet">Set di caratteri nativo del metodo.</param>
      <returns>Metodo <see langword="PInvoke" /> definito.</returns>
      <exception cref="T:System.ArgumentException">Il metodo non è statico oppure il tipo che lo contiene è un'interfaccia oppure il metodo è astratto oppure il metodo è stato definito in precedenza.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> o <paramref name="dllName" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo che lo contiene è stato creato in precedenza utilizzando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String)">
      <summary>Costruisce un oggetto <see langword="TypeBuilder" /> per un tipo privato con il nome specificato in questo modulo.</summary>
      <param name="name">Percorso completo del tipo, incluso lo spazio dei nomi. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <returns>Tipo privato con il nome specificato.</returns>
      <exception cref="T:System.ArgumentException">Nell'assembly padre del modulo esiste un tipo con il nome indicato.  
 -oppure-  
 Gli attributi di tipi annidati sono impostati su un tipo non annidato.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)">
      <summary>Costruisce un oggetto <see langword="TypeBuilder" />, dati il nome e gli attributi del tipo.</summary>
      <param name="name">Percorso completo del tipo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attr">Attributi del tipo definito.</param>
      <returns>
        <see langword="TypeBuilder" /> creato con tutti gli attributi richiesti.</returns>
      <exception cref="T:System.ArgumentException">Nell'assembly padre del modulo esiste un tipo con il nome indicato.  
 In alternativa  
 Gli attributi di tipi annidati sono impostati su un tipo non annidato.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>Costruisce un oggetto <see langword="TypeBuilder" />, dati il nome del tipo, i relativi attributi e il tipo esteso dal tipo definito.</summary>
      <param name="name">Percorso completo del tipo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attr">Attributo da associare al tipo.</param>
      <param name="parent">Tipo esteso dal tipo definito.</param>
      <returns>
        <see langword="TypeBuilder" /> creato con tutti gli attributi richiesti.</returns>
      <exception cref="T:System.ArgumentException">Nell'assembly padre del modulo esiste un tipo con il nome indicato.  
 -oppure-  
 Gli attributi di tipi annidati sono impostati su un tipo non annidato.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary>Costruisce un oggetto <see langword="TypeBuilder" />, dati il nome del tipo, gli attributi, il tipo esteso dal tipo definito e la dimensione totale del tipo.</summary>
      <param name="name">Percorso completo del tipo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attr">Attributi del tipo definito.</param>
      <param name="parent">Tipo esteso dal tipo definito.</param>
      <param name="typesize">Dimensione totale del tipo.</param>
      <returns>Oggetto <see langword="TypeBuilder" />.</returns>
      <exception cref="T:System.ArgumentException">Nell'assembly padre del modulo esiste un tipo con il nome indicato.  
 -oppure-  
 Gli attributi di tipi annidati sono impostati su un tipo non annidato.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary>Costruisce un oggetto <see langword="TypeBuilder" />, dati il nome del tipo, gli attributi, il tipo esteso dal tipo definito e la dimensione del tipo compresso.</summary>
      <param name="name">Percorso completo del tipo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attr">Attributi del tipo definito.</param>
      <param name="parent">Tipo esteso dal tipo definito.</param>
      <param name="packsize">Dimensione di compressione del tipo.</param>
      <returns>Oggetto <see langword="TypeBuilder" />.</returns>
      <exception cref="T:System.ArgumentException">Nell'assembly padre del modulo esiste un tipo con il nome indicato.  
 -oppure-  
 Gli attributi di tipi annidati sono impostati su un tipo non annidato.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary>Costruisce un oggetto <see langword="TypeBuilder" />, dati il nome del tipo, gli attributi, il tipo esteso dal tipo definito e la relativa dimensione compressa e totale.</summary>
      <param name="name">Percorso completo del tipo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attr">Attributi del tipo definito.</param>
      <param name="parent">Tipo esteso dal tipo definito.</param>
      <param name="packingSize">Dimensione di compressione del tipo.</param>
      <param name="typesize">Dimensione totale del tipo.</param>
      <returns>
        <see langword="TypeBuilder" /> creato con tutti gli attributi richiesti.</returns>
      <exception cref="T:System.ArgumentException">Nell'assembly padre del modulo esiste un tipo con il nome indicato.  
 In alternativa  
 Gli attributi di tipi annidati sono impostati su un tipo non annidato.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary>Costruisce un oggetto <see langword="TypeBuilder" />, dati il nome del tipo, gli attributi, il tipo esteso dal tipo definito e le interfacce da esso implementate.</summary>
      <param name="name">Percorso completo del tipo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attr">Attributi da associare al tipo.</param>
      <param name="parent">Tipo esteso dal tipo definito.</param>
      <param name="interfaces">Elenco delle interfacce implementate dal tipo.</param>
      <returns>
        <see langword="TypeBuilder" /> creato con tutti gli attributi richiesti.</returns>
      <exception cref="T:System.ArgumentException">Nell'assembly padre del modulo esiste un tipo con il nome indicato.  
 In alternativa  
 Gli attributi di tipi annidati sono impostati su un tipo non annidato.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary>Definisce un campo di dati non inizializzati nella sezione .sdata del file PE (Portable Executable).</summary>
      <param name="name">Nome usato per fare riferimento ai dati. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="size">Dimensione del campo dati.</param>
      <param name="attributes">Attributi per il campo.</param>
      <returns>Campo di riferimento ai dati.</returns>
      <exception cref="T:System.ArgumentException">La lunghezza di <paramref name="name" /> è zero.  
-oppure- 
 <paramref name="size" /> è minore di o uguale a zero oppure maggiore di o uguale a 0x003f0000.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">L'oggetto <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> è stato chiamato in precedenza.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.Equals(System.Object)">
      <summary>Restituisce un valore che indica se questa istanza è uguale all'oggetto specificato.</summary>
      <param name="obj">Oggetto da confrontare con questa istanza o <see langword="null" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="obj" /> è uguale al tipo e al valore di questa istanza; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.FullyQualifiedName">
      <summary>Ottiene un oggetto <see langword="String" /> che rappresenta il nome e il percorso completi del modulo.</summary>
      <returns>Nome completo del modulo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>Restituisce il metodo denominato su una classe di matrici.</summary>
      <param name="arrayClass">Classe di matrici.</param>
      <param name="methodName">Nome di un metodo sulla classe di matrici.</param>
      <param name="callingConvention">Convenzione di chiamata del metodo.</param>
      <param name="returnType">Tipo restituito del metodo.</param>
      <param name="parameterTypes">Tipi dei parametri del metodo.</param>
      <returns>Metodo denominato su una classe di matrici.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayClass" /> non è una matrice.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="arrayClass" /> o <paramref name="methodName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Restituisce tutti gli attributi personalizzati applicati all'oggetto <see cref="T:System.Reflection.Emit.ModuleBuilder" /> corrente.</summary>
      <param name="inherit">Questo argomento viene ignorato per gli oggetti di questo tipo.</param>
      <returns>Matrice contenente gli attributi personalizzati; la matrice è vuota se non sono presenti attributi.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Restituisce tutti gli attributi personalizzati applicati all'oggetto <see cref="T:System.Reflection.Emit.ModuleBuilder" /> corrente e che derivano da un tipo di attributo specificato.</summary>
      <param name="attributeType">Il tipo di base da cui derivano gli attributi.</param>
      <param name="inherit">Questo argomento viene ignorato per gli oggetti di questo tipo.</param>
      <returns>Una matrice che contiene gli attributi personalizzati derivati, a qualsiasi livello, da <paramref name="attributeType" />; la matrice è vuota se non ci sono tali attributi.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> non è un oggetto <see cref="T:System.Type" /> fornito dal runtime. Ad esempio, <paramref name="attributeType" /> è un oggetto <see cref="T:System.Reflection.Emit.TypeBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributesData">
      <summary>Restituisce informazioni sugli attributi applicati all'oggetto <see cref="T:System.Reflection.Emit.ModuleBuilder" /> corrente, espresse sotto forma di oggetti <see cref="T:System.Reflection.CustomAttributeData" />.</summary>
      <returns>Elenco generico di oggetti <see cref="T:System.Reflection.CustomAttributeData" /> che rappresentano i dati relativi agli attributi applicati al modulo corrente.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Restituisce un campo del livello di modulo, definito nell'area .sdata del file eseguibile di tipo PE che dispone del nome specificato e degli attributi di associazione.</summary>
      <param name="name">Nome del campo.</param>
      <param name="bindingAttr">Combinazione dei flag di bit <see langword="BindingFlags" /> utilizzati per controllare la ricerca.</param>
      <returns>Campo con il nome specificato e gli attributi di associazione, o <see langword="null" /> se il campo non esiste.</returns>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>Restituisce tutti i campi definiti nell'area .sdata del file eseguibile di tipo PE che corrispondono ai flag di associazione specificati.</summary>
      <param name="bindingFlags">Combinazione dei flag di bit <see langword="BindingFlags" /> utilizzati per controllare la ricerca.</param>
      <returns>Una matrice di campi che corrispondono ai flag specificati; la matrice è vuota se non esiste nessuno di questi campi.</returns>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetHashCode">
      <summary>Restituisce il codice hash per l'istanza.</summary>
      <returns>Codice hash di un intero con segno a 32 bit.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>Restituisce tutti i metodi definiti al livello di modulo per l'oggetto <see cref="T:System.Reflection.Emit.ModuleBuilder" /> corrente, e corrispondenti ai flag di associazione specificati.</summary>
      <param name="bindingFlags">Combinazione dei flag di bit <see langword="BindingFlags" /> utilizzati per controllare la ricerca.</param>
      <returns>Una matrice che contiene tutti i metodi a livello di modulo che corrispondono a <paramref name="bindingFlags" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)">
      <summary>Ottiene una coppia di valori che indica il tipo di codice in un modulo e la piattaforma di destinazione del modulo.</summary>
      <param name="peKind">Quando termina, questo metodo contiene una combinazione di valori <see cref="T:System.Reflection.PortableExecutableKinds" /> che indica il tipo di codice nel modulo.</param>
      <param name="machine">Quando termina, questo metodo contiene uno dei valori <see cref="T:System.Reflection.ImageFileMachine" /> che indica la piattaforma di destinazione del modulo.</param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String)">
      <summary>Ottiene il tipo denominato definito nel modulo.</summary>
      <param name="className">Nome dell'oggetto <see cref="T:System.Type" /> da ottenere.</param>
      <returns>Tipo richiesto, se il tipo è definito in questo modulo; in caso contrario <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">La lunghezza di <paramref name="className" /> è zero o maggiore di 1023.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">L'oggetto <see cref="T:System.Type" /> richiesto è di tipo non pubblico e il chiamante non dispone dell'autorizzazione <see cref="T:System.Security.Permissions.ReflectionPermission" /> per riprodurre gli oggetti non pubblici al di fuori dell'assembly corrente.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">Viene richiamato un inizializzatore di classi e viene generata un'eccezione.</exception>
      <exception cref="T:System.TypeLoadException">Si è verificato un errore durante il caricamento del <see cref="T:System.Type" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean)">
      <summary>Ottiene il tipo denominato definito nel modulo, ignorando facoltativamente la combinazione di maiuscole e minuscole del nome del tipo.</summary>
      <param name="className">Nome dell'oggetto <see cref="T:System.Type" /> da ottenere.</param>
      <param name="ignoreCase">Se <see langword="true" />, la ricerca non fa distinzione tra maiuscole e minuscole. Se <see langword="false" />, la ricerca fa distinzione tra maiuscole e minuscole.</param>
      <returns>Tipo richiesto, se il tipo è definito in questo modulo; in caso contrario <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">La lunghezza di <paramref name="className" /> è zero o maggiore di 1023.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">L'oggetto <see cref="T:System.Type" /> richiesto è di tipo non pubblico e il chiamante non dispone dell'autorizzazione <see cref="T:System.Security.Permissions.ReflectionPermission" /> per riprodurre gli oggetti non pubblici al di fuori dell'assembly corrente.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">Viene richiamato un inizializzatore di classi e viene generata un'eccezione.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>Ottiene il tipo denominato definito nel modulo, ignorando facoltativamente la combinazione di maiuscole e minuscole del nome del tipo. Genera facoltativamente un'eccezione se il tipo non viene trovato.</summary>
      <param name="className">Nome dell'oggetto <see cref="T:System.Type" /> da ottenere.</param>
      <param name="throwOnError">
        <see langword="true" /> per generare un'eccezione se non è possibile trovare il tipo; <see langword="false" /> per restituire <see langword="null" />.</param>
      <param name="ignoreCase">Se <see langword="true" />, la ricerca non fa distinzione tra maiuscole e minuscole. Se <see langword="false" />, la ricerca fa distinzione tra maiuscole e minuscole.</param>
      <returns>Tipo specificato, se il tipo è dichiarato in questo modulo; in caso contrario <see langword="null" />.</returns>
      <exception cref="T:System.ArgumentException">La lunghezza di <paramref name="className" /> è zero o maggiore di 1023.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">L'oggetto <see cref="T:System.Type" /> richiesto è di tipo non pubblico e il chiamante non dispone dell'autorizzazione <see cref="T:System.Security.Permissions.ReflectionPermission" /> per riprodurre gli oggetti non pubblici al di fuori dell'assembly corrente.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">Viene richiamato un inizializzatore di classi e viene generata un'eccezione.</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> è <see langword="true" /> e il tipo specificato non è stato trovato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetTypes">
      <summary>Restituisce tutte le classi definite all'interno del modulo.</summary>
      <returns>Matrice che contiene i tipi definiti all'interno del modulo ottenuto tramite reflection dall'istanza.</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">Non è stato possibile caricare una o più classi in un modulo.</exception>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Restituisce un valore che indica se il tipo di attributo specificato è stato applicato a questo modulo.</summary>
      <param name="attributeType">Tipo di attributo personalizzato per cui effettuare il test.</param>
      <param name="inherit">Questo argomento viene ignorato per gli oggetti di questo tipo.</param>
      <returns>
        <see langword="true" /> se una o più istanze di <paramref name="attributeType" /> sono state applicate al modulo; in caso contrario <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> non è un oggetto <see cref="T:System.Type" /> fornito dal runtime. Ad esempio, <paramref name="attributeType" /> è un oggetto <see cref="T:System.Reflection.Emit.TypeBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsResource">
      <summary>Ottiene un valore che indica se l'oggetto è una risorsa.</summary>
      <returns>
        <see langword="true" /> se l'oggetto è una risorsa; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.MDStreamVersion">
      <summary>Ottiene la versione del flusso di metadati.</summary>
      <returns>Intero a 32 bit che rappresenta la versione del flusso di metadati. I due byte più significativi rappresentano il numero di versione principale, mentre i due byte meno significativi rappresentano il numero di versione secondario.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.MetadataToken">
      <summary>Ottiene un token che identifica il modulo dinamico corrente nei metadati.</summary>
      <returns>Un token Integer che identifica il modulo corrente nei metadati.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.ModuleVersionId">
      <summary>Ottiene un nuovo UUID (Universally Unique Identifier) che può essere usato per la distinzione tra due versioni di un modulo.</summary>
      <returns>Oggetto <see cref="T:System.Guid" /> che può essere usato per la distinzione tra due versioni di un modulo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Name">
      <summary>Stringa che indica che questo è un modulo in memoria.</summary>
      <returns>Testo che indica che questo è un modulo in memoria.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveField(System.Int32,System.Type[],System.Type[])">
      <summary>Restituisce il campo identificato dal token di metadati specificato, nel contesto definito dai parametri di tipo generico specificati.</summary>
      <param name="metadataToken">Token di metadati che identifica un campo nel modulo.</param>
      <param name="genericTypeArguments">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta gli argomenti di tipo generico del tipo nel cui ambito si trova il token o <see langword="null" /> se non si tratta di un tipo generico.</param>
      <param name="genericMethodArguments">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta gli argomenti di tipo generico del metodo nel cui ambito si trova il token o <see langword="null" /> se non si tratta di un metodo generico.</param>
      <returns>Oggetto <see cref="T:System.Reflection.FieldInfo" /> che rappresenta il campo identificato dal token di metadati specificato.</returns>
      <exception cref="T:System.ArgumentException">il parametro <paramref name="metadataToken" /> non è un token per un campo nell'ambito del modulo corrente.  
In alternativa 
 <paramref name="metadataToken" /> identifica un campo il cui elemento padre <see langword="TypeSpec" /> presenta una firma contenente il tipo di elemento <see langword="var" /> (un tipo di parametro di un tipo generico) o <see langword="mvar" /> (un tipo di parametro di un metodo generico) e non sono stati specificati gli argomenti di tipo generico necessari per <paramref name="genericTypeArguments" /> o <paramref name="genericMethodArguments" /> o per entrambi.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> non è un token valido nell'ambito del modulo corrente.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveMember(System.Int32,System.Type[],System.Type[])">
      <summary>Restituisce il tipo o il membro identificato dal token di metadati specificato nel contesto definito dai parametri di tipo generico specificati.</summary>
      <param name="metadataToken">Token di metadati che identifica un tipo o un membro del modulo.</param>
      <param name="genericTypeArguments">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta gli argomenti di tipo generico del tipo nel cui ambito si trova il token o <see langword="null" /> se non si tratta di un tipo generico.</param>
      <param name="genericMethodArguments">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta gli argomenti di tipo generico del metodo nel cui ambito si trova il token o <see langword="null" /> se non si tratta di un metodo generico.</param>
      <returns>Oggetto <see cref="T:System.Reflection.MemberInfo" /> che rappresenta il tipo o il membro identificato dal token di metadati specificato.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> non è un token per un tipo o un membro nell'ambito del modulo corrente.  
-oppure- 
 <paramref name="metadataToken" /> è un tipo di elemento <see langword="MethodSpec" /> o <see langword="TypeSpec" /> la cui firma contiene il tipo di elemento <see langword="var" /> (un tipo di parametro di un tipo generico) o <see langword="mvar" /> (un tipo di parametro di un metodo generico) e non sono stati specificati gli argomenti di tipo generico necessari per <paramref name="genericTypeArguments" /> o <paramref name="genericMethodArguments" /> o per entrambi.  
-oppure- 
 <paramref name="metadataToken" /> identifica una proprietà o un evento.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> non è un token valido nell'ambito del modulo corrente.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveMethod(System.Int32,System.Type[],System.Type[])">
      <summary>Restituisce il metodo o il costruttore identificato dal token di metadati specificato nel contesto definito dai parametri di tipo generico specificati.</summary>
      <param name="metadataToken">Token di metadati che identifica un metodo o un costruttore nel modulo.</param>
      <param name="genericTypeArguments">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta gli argomenti di tipo generico del tipo nel cui ambito si trova il token o <see langword="null" /> se non si tratta di un tipo generico.</param>
      <param name="genericMethodArguments">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta gli argomenti di tipo generico del metodo nel cui ambito si trova il token o <see langword="null" /> se non si tratta di un metodo generico.</param>
      <returns>Oggetto <see cref="T:System.Reflection.MethodBase" /> che rappresenta il metodo identificato dal token di metadati specificato.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> non è un token per un metodo o un costruttore nell'ambito del modulo corrente.  
In alternativa 
 <paramref name="metadataToken" /> è un tipo di elemento <see langword="MethodSpec" /> la cui firma contiene il tipo di elemento <see langword="var" /> (un tipo di parametro di un tipo generico) o <see langword="mvar" /> (un tipo di parametro di un metodo generico) e non sono stati specificati gli argomenti di tipo generico necessari per <paramref name="genericTypeArguments" /> o <paramref name="genericMethodArguments" /> o per entrambi.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> non è un token valido nell'ambito del modulo corrente.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveSignature(System.Int32)">
      <summary>Restituisce il blob della firma identificato da un token di metadati.</summary>
      <param name="metadataToken">Token di metadati che identifica una firma nel modulo.</param>
      <returns>Matrice di byte che rappresenta il blob della firma.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> non è un elemento <see langword="MemberRef" />, <see langword="MethodDef" /> o <see langword="TypeSpec" />, una firma o un token <see langword="FieldDef" /> valido nell'ambito del modulo corrente.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> non è un token valido nell'ambito del modulo corrente.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveString(System.Int32)">
      <summary>Restituisce la stringa identificata dal token di metadati specificato.</summary>
      <param name="metadataToken">Token di metadati che identifica una stringa nell'heap delle stringhe del modulo.</param>
      <returns>
        <see cref="T:System.String" /> contenente un valore di stringa derivato dall'heap delle stringhe dei metadati.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> non è un token per una stringa nell'ambito del modulo corrente.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> non è un token valido nell'ambito del modulo corrente.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveType(System.Int32,System.Type[],System.Type[])">
      <summary>Restituisce il tipo identificato dal token di metadati specificato nel contesto definito dai parametri di tipo generico specificati.</summary>
      <param name="metadataToken">Token di metadati che identifica un tipo nel modulo.</param>
      <param name="genericTypeArguments">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta gli argomenti di tipo generico del tipo nel cui ambito si trova il token o <see langword="null" /> se non si tratta di un tipo generico.</param>
      <param name="genericMethodArguments">Matrice di oggetti <see cref="T:System.Type" /> che rappresenta gli argomenti di tipo generico del metodo nel cui ambito si trova il token o <see langword="null" /> se non si tratta di un metodo generico.</param>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo identificato dal token di metadati specificato.</returns>
      <exception cref="T:System.ArgumentException">Il parametro <paramref name="metadataToken" /> non è un token per un tipo nell'ambito del modulo corrente.  
-oppure- 
 <paramref name="metadataToken" /> è un tipo di elemento <see langword="TypeSpec" /> la cui firma contiene il tipo di elemento <see langword="var" /> (un tipo di parametro di un tipo generico) o <see langword="mvar" /> (un tipo di parametro di un metodo generico) e non sono stati specificati gli argomenti di tipo generico necessari per <paramref name="genericTypeArguments" /> o <paramref name="genericMethodArguments" /> o per entrambi.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> non è un token valido nell'ambito del modulo corrente.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.ScopeName">
      <summary>Ottiene una stringa che rappresenta il nome del modulo dinamico.</summary>
      <returns>Nome del modulo dinamico.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Applica un attributo personalizzato al modulo tramite un oggetto binario di grandi dimensioni (BLOB) specificato che rappresenta l'attributo.</summary>
      <param name="con">Costruttore dell'attributo personalizzato.</param>
      <param name="binaryAttribute">BLOB di byte che rappresenta l'attributo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> o <paramref name="binaryAttribute" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Applica un attributo personalizzato al modulo utilizzando un generatore di attributi personalizzati.</summary>
      <param name="customBuilder">Istanza di una classe di supporto che consente di specificare l'attributo personalizzato da applicare.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> è <see langword="null" />.</exception>
    </member>
    <member name="T:System.Reflection.Emit.PropertyBuilder">
      <summary>Definisce le proprietà per un tipo.</summary>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Aggiunge uno degli altri metodi associati a questa proprietà.</summary>
      <param name="mdBuilder">Oggetto <see langword="MethodBuilder" /> che rappresenta l'altro metodo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato sul tipo di inclusione.</exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Attributes">
      <summary>Ottiene gli attributi per questa proprietà.</summary>
      <returns>Attributi di questa proprietà.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanRead">
      <summary>Ottiene un valore che indica se è possibile leggere la proprietà.</summary>
      <returns>
        <see langword="true" /> se è possibile leggere la proprietà; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanWrite">
      <summary>Ottiene un valore che indica se è possibile scrivere nella proprietà.</summary>
      <returns>
        <see langword="true" /> se è possibile scrivere nella proprietà; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.DeclaringType">
      <summary>Ottiene la classe che dichiara questo membro.</summary>
      <returns>Oggetto <see langword="Type" /> per la classe che dichiara questo membro.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
      <summary>Restituisce una matrice delle funzioni di accesso <see langword="get" /> e <see langword="set" /> pubbliche e non pubbliche su questa proprietà.</summary>
      <param name="nonPublic">Indica se nella matrice <see langword="MethodInfo" /> devono essere restituiti metodi non pubblici. <see langword="true" /> se devono essere inclusi i metodi non pubblici; in caso contrario, <see langword="false" />.</param>
      <returns>Matrice di tipo <see langword="MethodInfo" /> contenente le funzioni di accesso pubbliche o non pubbliche corrispondenti oppure una matrice vuota se le funzioni di accesso corrispondenti non sono disponibili in questa proprietà.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Restituisce una matrice di tutti gli attributi personalizzati per questa proprietà.</summary>
      <param name="inherit">Se <see langword="true" />, esplora la catena di ereditarietà di questa proprietà per trovare gli attributi personalizzati.</param>
      <returns>Matrice di tutti gli attributi personalizzati.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Restituisce una matrice di attributi personalizzati identificati dall'oggetto <see cref="T:System.Type" />.</summary>
      <param name="attributeType">Matrice di attributi personalizzati identificati per tipo.</param>
      <param name="inherit">Se <see langword="true" />, esplora la catena di ereditarietà di questa proprietà per trovare gli attributi personalizzati.</param>
      <returns>Matrice di attributi personalizzati definiti su questo membro di cui si è eseguita la reflection oppure <see langword="null" /> se nessun attributo è stato definito su questo membro.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
      <summary>Restituisce la funzione di accesso get pubblica e non pubblica per questa proprietà.</summary>
      <param name="nonPublic">Indica se deve essere restituita una funzione di accesso get non pubblica. <see langword="true" /> se devono essere inclusi i metodi non pubblici; in caso contrario, <see langword="false" />.</param>
      <returns>Oggetto <see langword="MethodInfo" /> che rappresenta la funzione di accesso get per questa proprietà, se <paramref name="nonPublic" /> è <see langword="true" />. Restituisce <see langword="null" /> se <paramref name="nonPublic" /> è <see langword="false" /> e la funzione di accesso get non è pubblica oppure se <paramref name="nonPublic" /> è <see langword="true" /> ma non è disponibile alcuna funzione di accesso get.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters">
      <summary>Restituisce una matrice di tutti i parametri degli indici per la proprietà.</summary>
      <returns>Matrice di tipo <see langword="ParameterInfo" /> contenente i parametri per gli indici.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
      <summary>Restituisce la funzione di accesso set per questa proprietà.</summary>
      <param name="nonPublic">Indica se la funzione di accesso deve essere restituita se non è pubblica. <see langword="true" /> se devono essere inclusi i metodi non pubblici; in caso contrario, <see langword="false" />.</param>
      <returns>Metodo <see langword="Set" /> della proprietà oppure <see langword="null" />, come illustrato nella tabella seguente.  
  Value 
  Condizione 
  Oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo Set per questa proprietà.  

  La funzione di accesso set è pubblica.  

 <paramref name="nonPublic" /> è true e possono essere restituiti metodi non pubblici.  

  Null 
 <paramref name="nonPublic" /> è true, ma la proprietà è di sola lettura.  

 <paramref name="nonPublic" /> è false e la funzione di accesso set non è pubblica.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
      <summary>Ottiene il valore della proprietà indicizzata chiamando il metodo per il richiamo della proprietà.</summary>
      <param name="obj">Oggetto di cui verrà restituito il valore della proprietà.</param>
      <param name="index">Valori di indice facoltativi per le proprietà indicizzate. Il valore deve essere <see langword="null" /> per le proprietà non indicizzate.</param>
      <returns>Valore della proprietà indicizzata specificata.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Ottiene il valore di una proprietà con l'associazione, l'indice e l'oggetto <see langword="CultureInfo" /> specificati.</summary>
      <param name="obj">Oggetto di cui verrà restituito il valore della proprietà.</param>
      <param name="invokeAttr">Attributo di chiamata. È necessario che si tratti di un flag di bit da <see langword="BindingFlags" />: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> o <see langword="SetProperty" />. È necessario specificare un attributo di chiamata appropriato. Se occorre richiamare un membro statico, è necessario impostare il flag <see langword="Static" /> di <see langword="BindingFlags" />.</param>
      <param name="binder">Oggetto che consente l'associazione, la coercizione dei tipi di argomento, la chiamata dei membri e il recupero di oggetti <see langword="MemberInfo" /> tramite reflection. Se <paramref name="binder" /> è <see langword="null" />, verrà usato il binder predefinito.</param>
      <param name="index">Valori di indice facoltativi per le proprietà indicizzate. Il valore deve essere <see langword="null" /> per le proprietà non indicizzate.</param>
      <param name="culture">Oggetto <see langword="CultureInfo" /> che rappresenta le impostazioni cultura con le quali deve essere localizzata la risorsa. Se una risorsa non viene localizzata con queste impostazioni cultura, il metodo <see langword="CultureInfo.Parent" /> sarà successivamente chiamato in cerca di una corrispondenza. Se questo valore è <see langword="null" />, l'oggetto <see langword="CultureInfo" /> è ottenuto dalla proprietà <see langword="CultureInfo.CurrentUICulture" />.</param>
      <returns>Valore della proprietà per <paramref name="obj" />.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Indica se una o più istanze di <paramref name="attributeType" /> sono definite su questa proprietà.</summary>
      <param name="attributeType">Oggetto <see langword="Type" /> a cui vengono applicati gli attributi personalizzati.</param>
      <param name="inherit">Specifica se esplorare la catena di ereditarietà di questa proprietà per trovare gli attributi personalizzati.</param>
      <returns>
        <see langword="true" /> se una o più istanze di <paramref name="attributeType" /> sono definite su questa proprietà; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è supportato.</exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Module">
      <summary>Ottiene il modulo in cui viene definito il tipo che dichiara la proprietà corrente.</summary>
      <returns>Oggetto <see cref="T:System.Reflection.Module" /> in cui viene definito il tipo che dichiara la proprietà corrente.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Name">
      <summary>Ottiene il nome di questo membro.</summary>
      <returns>
        <see cref="T:System.String" /> che contiene il nome di questo membro.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.PropertyType">
      <summary>Ottiene il tipo del campo di questa proprietà.</summary>
      <returns>Tipo della proprietà.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.ReflectedType">
      <summary>Ottiene l'oggetto classe utilizzato per ottenere questa istanza di <see langword="MemberInfo" />.</summary>
      <returns>Oggetto <see langword="Type" /> tramite il quale è stato ottenuto questo oggetto <see langword="MemberInfo" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
      <summary>Imposta il valore predefinito di questa proprietà.</summary>
      <param name="defaultValue">Valore predefinito della proprietà.</param>
      <exception cref="T:System.InvalidOperationException">Il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato sul tipo di inclusione.</exception>
      <exception cref="T:System.ArgumentException">La proprietà non è tra i tipi supportati.  
-oppure- 
Il tipo dell'oggetto <paramref name="defaultValue" /> non corrisponde al tipo della proprietà.  
In alternativa 
Il tipo della proprietà è <see cref="T:System.Object" /> o un altro tipo di riferimento, <paramref name="defaultValue" /> non è <see langword="null" /> e il valore non può essere assegnato al tipo di riferimento.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Impostare un attributo personalizzato utilizzando un blob di attributi personalizzati specificato.</summary>
      <param name="con">Costruttore dell'attributo personalizzato.</param>
      <param name="binaryAttribute">BLOB di byte che rappresenta gli attributi.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> o <paramref name="binaryAttribute" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato sul tipo di inclusione.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Impostare un attributo personalizzato usando un generatore di attributi personalizzati.</summary>
      <param name="customBuilder">Un'istanza di una classe helper per definire l'attributo personalizzato.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">se <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato sul tipo di inclusione.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Imposta il metodo che ottiene il valore della proprietà.</summary>
      <param name="mdBuilder">Oggetto <see langword="MethodBuilder" /> che rappresenta il metodo che ottiene il valore della proprietà.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato sul tipo di inclusione.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>Imposta il metodo che imposta il valore della proprietà.</summary>
      <param name="mdBuilder">Oggetto <see langword="MethodBuilder" /> che rappresenta il metodo che imposta il valore della proprietà.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato sul tipo di inclusione.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
      <summary>Imposta il valore della proprietà con valori di indice facoltativi per le proprietà dell'indice.</summary>
      <param name="obj">Oggetto di cui verrà impostato il valore della proprietà.</param>
      <param name="value">Nuovo valore della proprietà.</param>
      <param name="index">Valori di indice facoltativi per le proprietà indicizzate. Il valore deve essere <see langword="null" /> per le proprietà non indicizzate.</param>
      <exception cref="T:System.NotSupportedException">Questo metodo non è supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Imposta il valore della proprietà per l'oggetto dato sul valore dato.</summary>
      <param name="obj">Oggetto di cui verrà restituito il valore della proprietà.</param>
      <param name="value">Nuovo valore della proprietà.</param>
      <param name="invokeAttr">Attributo di chiamata. È necessario che si tratti di un flag di bit da <see langword="BindingFlags" />: <see langword="InvokeMethod" />, <see langword="CreateInstance" />, <see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> o <see langword="SetProperty" />. È necessario specificare un attributo di chiamata appropriato. Se occorre richiamare un membro statico, è necessario impostare il flag <see langword="Static" /> di <see langword="BindingFlags" />.</param>
      <param name="binder">Oggetto che consente l'associazione, la coercizione dei tipi di argomento, la chiamata dei membri e il recupero di oggetti <see langword="MemberInfo" /> tramite reflection. Se <paramref name="binder" /> è <see langword="null" />, verrà usato il binder predefinito.</param>
      <param name="index">Valori di indice facoltativi per le proprietà indicizzate. Il valore deve essere <see langword="null" /> per le proprietà non indicizzate.</param>
      <param name="culture">Oggetto <see langword="CultureInfo" /> che rappresenta le impostazioni cultura con le quali deve essere localizzata la risorsa. Se una risorsa non viene localizzata con queste impostazioni cultura, il metodo <see langword="CultureInfo.Parent" /> sarà successivamente chiamato in cerca di una corrispondenza. Se questo valore è <see langword="null" />, l'oggetto <see langword="CultureInfo" /> è ottenuto dalla proprietà <see langword="CultureInfo.CurrentUICulture" />.</param>
      <exception cref="T:System.NotSupportedException">Questo metodo non è supportato.</exception>
    </member>
    <member name="T:System.Reflection.Emit.TypeBuilder">
      <summary>Definisce e crea nuove istanze delle classi in fase di esecuzione.</summary>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)">
      <summary>Aggiunge un'interfaccia implementata da questo tipo.</summary>
      <param name="interfaceType">Interfaccia implementata da questo tipo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="interfaceType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Assembly">
      <summary>Recupera l'assembly dinamico che contiene la definizione di tipo.</summary>
      <returns>Sola lettura. Recupera l'assembly dinamico che contiene la definizione di tipo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName">
      <summary>Restituisce il nome completo di questo tipo qualificato dal nome visualizzato dell'assembly.</summary>
      <returns>Sola lettura. Nome completo di questo tipo qualificato dal nome visualizzato dell'assembly.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.BaseType">
      <summary>Recupera il tipo di base del tipo.</summary>
      <returns>Sola lettura. Recupera il tipo di base del tipo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateType">
      <summary>Crea un oggetto <see cref="T:System.Type" /> per la classe. Dopo aver definito i campi e metodi della classe <see langword="CreateType" /> viene chiamato per caricare il relativo oggetto <see langword="Type" />.</summary>
      <returns>Restituisce il nuovo oggetto <see cref="T:System.Type" /> per questa classe.</returns>
      <exception cref="T:System.InvalidOperationException">Il tipo di inclusione non è stato creato.  
 In alternativa  
 Questo tipo è non astratto e contiene un metodo astratto.  
 -oppure-  
 Questo tipo è una classe o un'interfaccia non astratta e ha un metodo senza corpo.</exception>
      <exception cref="T:System.NotSupportedException">Il tipo contiene codice MSIL (Microsoft Intermediate Language) non valido.  
 In alternativa  
 La destinazione branch viene specificata usando un offset di 1 byte, ma la destinazione si trova a una distanza maggiore di 127 byte dal branch.</exception>
      <exception cref="T:System.TypeLoadException">Non è possibile caricare il tipo. Ad esempio, contiene un metodo <see langword="static" /> con la convenzione di chiamata <see cref="F:System.Reflection.CallingConventions.HasThis" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateTypeInfo">
      <summary>Ottiene un oggetto <see cref="T:System.Reflection.TypeInfo" /> che rappresenta il tipo.</summary>
      <returns>Oggetto che rappresenta il tipo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringMethod">
      <summary>Ottiene il metodo che ha dichiarato il parametro di tipo generico corrente.</summary>
      <returns>Oggetto<see cref="T:System.Reflection.MethodBase" /> che rappresenta il metodo che ha dichiarato il tipo corrente, se il tipo corrente è un parametro di tipo generico; in caso contrario, <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringType">
      <summary>Restituisce il tipo con cui è stato dichiarato questo tipo.</summary>
      <returns>Sola lettura. Tipo con cui è stato dichiarato questo tipo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])">
      <summary>Aggiunge un nuovo costruttore al tipo, con la firma e gli attributi specificati.</summary>
      <param name="attributes">Attributi del costruttore.</param>
      <param name="callingConvention">Convenzione di chiamata del costruttore.</param>
      <param name="parameterTypes">Tipi di parametro del costruttore.</param>
      <returns>Costruttore definito.</returns>
      <exception cref="T:System.InvalidOperationException">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])">
      <summary>Aggiunge un nuovo costruttore al tipo, con gli attributi specificati, la firma e i modificatori personalizzati.</summary>
      <param name="attributes">Attributi del costruttore.</param>
      <param name="callingConvention">Convenzione di chiamata del costruttore.</param>
      <param name="parameterTypes">Tipi di parametro del costruttore.</param>
      <param name="requiredCustomModifiers">Matrice di matrici di tipi. Ogni matrice di tipi rappresenta i modificatori personalizzati obbligatori per il parametro corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" />. Se un parametro particolare non ha modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun parametro ha modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <param name="optionalCustomModifiers">Matrice di matrici di tipi. Ogni matrice di tipi rappresenta i modificatori personalizzati facoltativi per il parametro corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" />. Se un parametro particolare non ha modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun parametro ha modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <returns>Costruttore definito.</returns>
      <exception cref="T:System.ArgumentException">La dimensione di <paramref name="requiredCustomModifiers" /> o <paramref name="optionalCustomModifiers" /> non è uguale a quella di <paramref name="parameterTypes" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
-oppure- 
Per il tipo dinamico corrente, la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> è <see langword="true" /> ma la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)">
      <summary>Definisce il costruttore senza parametri. Il costruttore definito qui chiamerà semplicemente il costruttore senza parametri dell'elemento padre.</summary>
      <param name="attributes">Oggetto <see langword="MethodAttributes" /> che rappresenta gli attributi da applicare al costruttore.</param>
      <returns>Restituisce il costruttore.</returns>
      <exception cref="T:System.NotSupportedException">Il tipo padre (tipo di base) non ha un costruttore senza parametri.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
-oppure- 
Per il tipo dinamico corrente, la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> è <see langword="true" /> ma la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)">
      <summary>Aggiunge un nuovo evento al tipo, con il nome, gli attributi e il tipo di evento specificati.</summary>
      <param name="name">Nome dell'evento. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attributes">Attributi dell'evento.</param>
      <param name="eventtype">Tipo di evento.</param>
      <returns>Evento definito.</returns>
      <exception cref="T:System.ArgumentException">La lunghezza di <paramref name="name" /> è zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.  
-oppure- 
 <paramref name="eventtype" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)">
      <summary>Aggiunge un nuovo campo al tipo, con il nome, gli attributi e il tipo di campo specificati.</summary>
      <param name="fieldName">Nome del campo. <paramref name="fieldName" /> non può contenere valori Null incorporati.</param>
      <param name="type">Tipo di campo.</param>
      <param name="attributes">Attributi del campo.</param>
      <returns>Campo definito.</returns>
      <exception cref="T:System.ArgumentException">La lunghezza di <paramref name="fieldName" /> è zero.  
In alternativa 
 <paramref name="type" /> è System.Void.  
In alternativa 
È stata specificata una dimensione totale per la classe padre di questo campo.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fieldName" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)">
      <summary>Aggiunge un nuovo campo al tipo, con il nome, gli attributi, il tipo di campo e i modificatori personalizzati specificati.</summary>
      <param name="fieldName">Nome del campo. <paramref name="fieldName" /> non può contenere valori Null incorporati.</param>
      <param name="type">Tipo di campo.</param>
      <param name="requiredCustomModifiers">Matrice di tipi che rappresentano i modificatori personalizzati obbligatori per il campo, come <see cref="T:Microsoft.VisualC.IsConstModifier" />.</param>
      <param name="optionalCustomModifiers">Matrice di tipi che rappresentano i modificatori personalizzati opzionali per il campo, come <see cref="T:Microsoft.VisualC.IsConstModifier" />.</param>
      <param name="attributes">Attributi del campo.</param>
      <returns>Campo definito.</returns>
      <exception cref="T:System.ArgumentException">La lunghezza di <paramref name="fieldName" /> è zero.  
-oppure- 
 <paramref name="type" /> è System.Void.  
-oppure- 
È stata specificata una dimensione totale per la classe padre di questo campo.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fieldName" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])">
      <summary>Definisce parametri di tipo generico per il tipo corrente, specificandone il numero e i nomi e restituisce una matrice di oggetti <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> che possono essere usati per impostare i vincoli.</summary>
      <param name="names">Matrice di nomi per i parametri di tipo generico.</param>
      <returns>Matrice di oggetti <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> che può essere usata per definire i vincoli dei parametri di tipo generico per il tipo corrente.</returns>
      <exception cref="T:System.InvalidOperationException">Parametri di tipo generico sono già stati definiti per questo tipo.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="names" /> è <see langword="null" />.  
In alternativa 
Un elemento di <paramref name="names" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="names" /> è una matrice vuota.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary>Definisce il campo di dati inizializzati nella sezione .sdata del file eseguibile di tipo PE.</summary>
      <param name="name">Nome usato per fare riferimento ai dati. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="data">BLOB di dati.</param>
      <param name="attributes">Attributi per il campo.</param>
      <returns>Campo di riferimento ai dati.</returns>
      <exception cref="T:System.ArgumentException">La lunghezza di <paramref name="name" /> è zero.  
-oppure- 
La dimensione dei dati è minore o uguale a zero oppure maggiore o uguale a 0x3f0000.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> o <paramref name="data" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">L'oggetto <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato in precedenza.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)">
      <summary>Aggiunge un nuovo metodo al tipo, con il nome e gli attributi del metodo specificati.</summary>
      <param name="name">Nome del metodo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attributes">Attributi del metodo.</param>
      <returns>Oggetto <see cref="T:System.Reflection.Emit.MethodBuilder" /> che rappresenta il metodo appena definito.</returns>
      <exception cref="T:System.ArgumentException">La lunghezza di <paramref name="name" /> è zero.  
-oppure- 
Il tipo dell'elemento padre di questo metodo è un'interfaccia e il metodo non è virtuale (<see langword="Overridable" /> in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
-oppure- 
Per il tipo dinamico corrente, la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> è <see langword="true" /> ma la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)">
      <summary>Aggiunge un nuovo metodo al tipo, con il nome e gli attributi del metodo e la convenzione di chiamata specificati.</summary>
      <param name="name">Nome del metodo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attributes">Attributi del metodo.</param>
      <param name="callingConvention">Convenzione di chiamata del metodo.</param>
      <returns>Oggetto <see cref="T:System.Reflection.Emit.MethodBuilder" /> che rappresenta il metodo appena definito.</returns>
      <exception cref="T:System.ArgumentException">La lunghezza di <paramref name="name" /> è zero.  
-oppure- 
Il tipo dell'elemento padre di questo metodo è un'interfaccia e il metodo non è virtuale (<see langword="Overridable" /> in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
In alternativa 
Per il tipo dinamico corrente, la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> è <see langword="true" /> ma la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>Aggiunge un nuovo metodo al tipo, con il nome, gli attributi del metodo, la convenzione di chiamata e la firma del metodo specificati.</summary>
      <param name="name">Nome del metodo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attributes">Attributi del metodo.</param>
      <param name="callingConvention">Convenzione di chiamata del metodo.</param>
      <param name="returnType">Tipo restituito del metodo.</param>
      <param name="parameterTypes">Tipi dei parametri del metodo.</param>
      <returns>Oggetto <see cref="T:System.Reflection.Emit.MethodBuilder" /> che rappresenta il metodo appena definito.</returns>
      <exception cref="T:System.ArgumentException">La lunghezza di <paramref name="name" /> è zero.  
In alternativa 
Il tipo dell'elemento padre di questo metodo è un'interfaccia e il metodo non è virtuale (<see langword="Overridable" /> in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
-oppure- 
Per il tipo dinamico corrente, la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> è <see langword="true" /> ma la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>Aggiunge un nuovo metodo al tipo, con il nome, gli attributi del metodo, la convenzione di chiamata, la firma del metodo e i modificatori personalizzati specificati.</summary>
      <param name="name">Nome del metodo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attributes">Attributi del metodo.</param>
      <param name="callingConvention">Convenzione di chiamata del metodo.</param>
      <param name="returnType">Tipo restituito del metodo.</param>
      <param name="returnTypeRequiredCustomModifiers">Matrice di tipi che rappresenta i modificatori personalizzati obbligatori, come <see cref="T:System.Runtime.CompilerServices.IsConst" />, per il tipo restituito del metodo. Se il tipo restituito non ha modificatori personalizzati obbligatori, specificare <see langword="null" />.</param>
      <param name="returnTypeOptionalCustomModifiers">Matrice di tipi che rappresenta i modificatori personalizzati facoltativi, come <see cref="T:System.Runtime.CompilerServices.IsConst" />, per il tipo restituito del metodo. Se il tipo restituito non ha modificatori personalizzati facoltativi, specificare <see langword="null" />.</param>
      <param name="parameterTypes">Tipi dei parametri del metodo.</param>
      <param name="parameterTypeRequiredCustomModifiers">Matrice di matrici di tipi. Ogni matrice di tipi rappresenta i modificatori personalizzati obbligatori per il parametro corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" />. Se un parametro particolare non ha modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun parametro ha modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <param name="parameterTypeOptionalCustomModifiers">Matrice di matrici di tipi. Ogni matrice di tipi rappresenta i modificatori personalizzati facoltativi per il parametro corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" />. Se un parametro particolare non ha modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun parametro ha modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <returns>Oggetto <see cref="T:System.Reflection.Emit.MethodBuilder" /> che rappresenta il metodo appena aggiunto.</returns>
      <exception cref="T:System.ArgumentException">La lunghezza di <paramref name="name" /> è zero.  
-oppure- 
Il tipo dell'elemento padre di questo metodo è un'interfaccia e il metodo non è virtuale (<see langword="Overridable" /> in Visual Basic).  
-oppure- 
La dimensione di <paramref name="parameterTypeRequiredCustomModifiers" /> o <paramref name="parameterTypeOptionalCustomModifiers" /> non è uguale a quella di <paramref name="parameterTypes" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
In alternativa 
Per il tipo dinamico corrente, la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> è <see langword="true" /> ma la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary>Aggiunge un nuovo metodo al tipo, con il nome, gli attributi e la firma del metodo specificati.</summary>
      <param name="name">Nome del metodo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attributes">Attributi del metodo.</param>
      <param name="returnType">Tipo restituito del metodo.</param>
      <param name="parameterTypes">Tipi dei parametri del metodo.</param>
      <returns>Metodo definito.</returns>
      <exception cref="T:System.ArgumentException">La lunghezza di <paramref name="name" /> è zero.  
In alternativa 
Il tipo dell'elemento padre di questo metodo è un'interfaccia e il metodo non è virtuale (<see langword="Overridable" /> in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
-oppure- 
Per il tipo dinamico corrente, la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> è <see langword="true" /> ma la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary>Specifica un corpo del metodo che implementa una data dichiarazione di metodo, potenzialmente con un nome diverso.</summary>
      <param name="methodInfoBody">Corpo del metodo da usare. Deve essere un oggetto <see langword="MethodBuilder" /> .</param>
      <param name="methodInfoDeclaration">Metodo di cui usare la dichiarazione.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="methodInfoBody" /> non appartiene a questa classe.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="methodInfoBody" /> o <paramref name="methodInfoDeclaration" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
In alternativa 
Il tipo dichiarante di <paramref name="methodInfoBody" /> non è il tipo rappresentato da questo oggetto <see cref="T:System.Reflection.Emit.TypeBuilder" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)">
      <summary>Definisce un tipo annidato, dato il relativo nome.</summary>
      <param name="name">Nome breve del tipo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <returns>Tipo annidato definito.</returns>
      <exception cref="T:System.ArgumentException">La lunghezza di <paramref name="name" /> è zero o maggiore di 1023.  
In alternativa 
Questa operazione creerebbe un tipo con un oggetto <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> duplicato nell'assembly corrente.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)">
      <summary>Definisce un tipo annidato, dato il relativo nome e attributi.</summary>
      <param name="name">Nome breve del tipo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attr">Attributi del tipo.</param>
      <returns>Tipo annidato definito.</returns>
      <exception cref="T:System.ArgumentException">L'attributo annidato non è specificato.  
-oppure- 
Questo tipo è sealed.  
-oppure- 
Questo tipo è una matrice.  
-oppure- 
Questo tipo è un'interfaccia, ma il tipo annidato non è un'interfaccia.  
-oppure- 
La lunghezza di <paramref name="name" /> è zero o maggiore di 1023.  
-oppure- 
Questa operazione creerebbe un tipo con un oggetto <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> duplicato nell'assembly corrente.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>Definisce un tipo annidato a partire dal nome, dagli attributi e dal tipo che estende.</summary>
      <param name="name">Nome breve del tipo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attr">Attributi del tipo.</param>
      <param name="parent">Tipo esteso dal tipo annidato.</param>
      <returns>Tipo annidato definito.</returns>
      <exception cref="T:System.ArgumentException">L'attributo annidato non è specificato.  
-oppure- 
Questo tipo è sealed.  
-oppure- 
Questo tipo è una matrice.  
-oppure- 
Questo tipo è un'interfaccia, ma il tipo annidato non è un'interfaccia.  
-oppure- 
La lunghezza di <paramref name="name" /> è zero o maggiore di 1023.  
-oppure- 
Questa operazione creerebbe un tipo con un oggetto <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> duplicato nell'assembly corrente.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary>Definisce un tipo annidato a partire dal nome, dagli attributi, dalla dimensione totale del tipo e dal tipo che estende.</summary>
      <param name="name">Nome breve del tipo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attr">Attributi del tipo.</param>
      <param name="parent">Tipo esteso dal tipo annidato.</param>
      <param name="typeSize">Dimensione totale del tipo.</param>
      <returns>Tipo annidato definito.</returns>
      <exception cref="T:System.ArgumentException">L'attributo annidato non è specificato.  
In alternativa 
Questo tipo è sealed.  
-oppure- 
Questo tipo è una matrice.  
-oppure- 
Questo tipo è un'interfaccia, ma il tipo annidato non è un'interfaccia.  
-oppure- 
La lunghezza di <paramref name="name" /> è zero o maggiore di 1023.  
In alternativa 
Questa operazione creerebbe un tipo con un oggetto <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> duplicato nell'assembly corrente.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary>Definisce un tipo annidato a partire dal nome, dagli attributi, dal tipo che estende e dalla dimensione di compressione.</summary>
      <param name="name">Nome breve del tipo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attr">Attributi del tipo.</param>
      <param name="parent">Tipo esteso dal tipo annidato.</param>
      <param name="packSize">Dimensione di compressione del tipo.</param>
      <returns>Tipo annidato definito.</returns>
      <exception cref="T:System.ArgumentException">L'attributo annidato non è specificato.  
In alternativa 
Questo tipo è sealed.  
In alternativa 
Questo tipo è una matrice.  
In alternativa 
Questo tipo è un'interfaccia, ma il tipo annidato non è un'interfaccia.  
-oppure- 
La lunghezza di <paramref name="name" /> è zero o maggiore di 1023.  
In alternativa 
Questa operazione creerebbe un tipo con un oggetto <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> duplicato nell'assembly corrente.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary>Definisce un tipo annidato a partire dal nome, dagli attributi, dalla dimensione e dal tipo che estende.</summary>
      <param name="name">Nome breve del tipo. L'oggetto <paramref name="name" /> non può contenere valori null incorporati.</param>
      <param name="attr">Attributi del tipo.</param>
      <param name="parent">Tipo esteso dal tipo annidato.</param>
      <param name="packSize">Dimensione di compressione del tipo.</param>
      <param name="typeSize">Dimensione totale del tipo.</param>
      <returns>Tipo annidato definito.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary>Definisce un tipo annidato a partire dal nome, dagli attributi, dal tipo che estende e dalle interfacce che implementa.</summary>
      <param name="name">Nome breve del tipo. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attr">Attributi del tipo.</param>
      <param name="parent">Tipo esteso dal tipo annidato.</param>
      <param name="interfaces">Interfacce implementate dal tipo annidato.</param>
      <returns>Tipo annidato definito.</returns>
      <exception cref="T:System.ArgumentException">L'attributo annidato non è specificato.  
-oppure- 
Questo tipo è sealed.  
-oppure- 
Questo tipo è una matrice.  
In alternativa 
Questo tipo è un'interfaccia, ma il tipo annidato non è un'interfaccia.  
In alternativa 
La lunghezza di <paramref name="name" /> è zero o maggiore di 1023.  
-oppure- 
Questa operazione creerebbe un tipo con un oggetto <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> duplicato nell'assembly corrente.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.  
-oppure- 
Un elemento della matrice <paramref name="interfaces" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>Definisce un metodo <see langword="PInvoke" /> in base al nome, al nome della DLL in cui è definito il metodo, agli attributi del metodo, alla convenzione di chiamata del metodo, al tipo restituito del metodo, ai tipi di parametri del metodo e ai flag <see langword="PInvoke" />.</summary>
      <param name="name">Nome del metodo <see langword="PInvoke" />. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="dllName">Nome della DLL in cui è definito il metodo <see langword="PInvoke" />.</param>
      <param name="attributes">Attributi del metodo.</param>
      <param name="callingConvention">Convenzione di chiamata del metodo.</param>
      <param name="returnType">Tipo restituito del metodo.</param>
      <param name="parameterTypes">Tipi dei parametri del metodo.</param>
      <param name="nativeCallConv">Convenzione di chiamata nativa.</param>
      <param name="nativeCharSet">Set di caratteri nativo del metodo.</param>
      <returns>Metodo <see langword="PInvoke" /> definito.</returns>
      <exception cref="T:System.ArgumentException">Il metodo non è statico.  
-oppure- 
Il tipo padre è un'interfaccia.  
-oppure- 
Il metodo è di tipo abstract.  
In alternativa 
Il metodo è stato definito in precedenza.  
-oppure- 
La lunghezza di <paramref name="name" /> o <paramref name="dllName" /> è zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> o <paramref name="dllName" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo contenitore è stato creato in precedenza con <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>Definisce un metodo <see langword="PInvoke" /> in base al nome, al nome della DLL in cui è definito il metodo, al nome del punto di ingresso, agli attributi del metodo, alla convenzione di chiamata del metodo, al tipo restituito del metodo, ai tipi di parametri del metodo e ai flag <see langword="PInvoke" />.</summary>
      <param name="name">Nome del metodo <see langword="PInvoke" />. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="dllName">Nome della DLL in cui è definito il metodo <see langword="PInvoke" />.</param>
      <param name="entryName">Nome del punto di ingresso nella DLL.</param>
      <param name="attributes">Attributi del metodo.</param>
      <param name="callingConvention">Convenzione di chiamata del metodo.</param>
      <param name="returnType">Tipo restituito del metodo.</param>
      <param name="parameterTypes">Tipi dei parametri del metodo.</param>
      <param name="nativeCallConv">Convenzione di chiamata nativa.</param>
      <param name="nativeCharSet">Set di caratteri nativo del metodo.</param>
      <returns>Metodo <see langword="PInvoke" /> definito.</returns>
      <exception cref="T:System.ArgumentException">Il metodo non è statico.  
-oppure- 
Il tipo padre è un'interfaccia.  
-oppure- 
Il metodo è di tipo abstract.  
-oppure- 
Il metodo è stato definito in precedenza.  
-oppure- 
La lunghezza di <paramref name="name" />, <paramref name="dllName" /> o <paramref name="entryName" /> è zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />, <paramref name="dllName" /> o <paramref name="entryName" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo contenitore è stato creato in precedenza con <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Type[][],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][])">
      <summary>Definisce un metodo <see langword="PInvoke" /> in base al nome, al nome della DLL in cui è definito il metodo, al nome del punto di ingresso, agli attributi del metodo, alla convenzione di chiamata del metodo, al tipo restituito del metodo, ai tipi di parametri del metodo, ai flag <see langword="PInvoke" /> e ai modificatori personalizzati relativi ai parametri e al tipo restituito.</summary>
      <param name="name">Nome del metodo <see langword="PInvoke" />. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="dllName">Nome della DLL in cui è definito il metodo <see langword="PInvoke" />.</param>
      <param name="parameterTypeOptionalCustomModifiers">Matrice di matrici di tipi. Ogni matrice di tipi rappresenta i modificatori personalizzati facoltativi per il parametro corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" />. Se un parametro particolare non ha modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun parametro ha modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <param name="nativeCallConv">Convenzione di chiamata nativa.</param>
      <param name="nativeCharSet">Set di caratteri nativo del metodo.</param>
      <param name="entryName">Nome del punto di ingresso nella DLL.</param>
      <param name="attributes">Attributi del metodo.</param>
      <param name="callingConvention">Convenzione di chiamata del metodo.</param>
      <param name="returnType">Tipo restituito del metodo.</param>
      <param name="returnTypeRequiredCustomModifiers">Matrice di tipi che rappresenta i modificatori personalizzati obbligatori, come <see cref="T:System.Runtime.CompilerServices.IsConst" />, per il tipo restituito del metodo. Se il tipo restituito non ha modificatori personalizzati obbligatori, specificare <see langword="null" />.</param>
      <param name="returnTypeOptionalCustomModifiers">Matrice di tipi che rappresenta i modificatori personalizzati facoltativi, come <see cref="T:System.Runtime.CompilerServices.IsConst" />, per il tipo restituito del metodo. Se il tipo restituito non ha modificatori personalizzati facoltativi, specificare <see langword="null" />.</param>
      <param name="parameterTypes">Tipi dei parametri del metodo.</param>
      <param name="parameterTypeRequiredCustomModifiers">Matrice di matrici di tipi. Ogni matrice di tipi rappresenta i modificatori personalizzati obbligatori per il parametro corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" />. Se un parametro particolare non ha modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun parametro ha modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <returns>Oggetto <see cref="T:System.Reflection.Emit.MethodBuilder" /> che rappresenta il metodo <see langword="PInvoke" /> definito.</returns>
      <exception cref="T:System.ArgumentException">Il metodo non è statico.  
In alternativa 
Il tipo padre è un'interfaccia.  
-oppure- 
Il metodo è di tipo abstract.  
In alternativa 
Il metodo è stato definito in precedenza.  
-oppure- 
La lunghezza di <paramref name="name" />, <paramref name="dllName" /> o <paramref name="entryName" /> è zero.  
-oppure- 
La dimensione di <paramref name="parameterTypeRequiredCustomModifiers" /> o <paramref name="parameterTypeOptionalCustomModifiers" /> non è uguale a quella di <paramref name="parameterTypes" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />, <paramref name="dllName" /> o <paramref name="entryName" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
-oppure- 
Per il tipo dinamico corrente, la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> è <see langword="true" /> ma la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>Aggiunge una nuova proprietà al tipo, con il nome, gli attributi, la convenzione di chiamata e la firma della proprietà specificati.</summary>
      <param name="name">Nome della proprietà. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attributes">Attributi della proprietà.</param>
      <param name="callingConvention">Convenzione di chiamata delle funzioni di accesso della proprietà.</param>
      <param name="returnType">Tipo restituito della proprietà.</param>
      <param name="parameterTypes">Tipi dei parametri della proprietà.</param>
      <returns>Proprietà definita.</returns>
      <exception cref="T:System.ArgumentException">La lunghezza di <paramref name="name" /> è zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.  
In alternativa 
Uno degli elementi della matrice <paramref name="parameterTypes" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>Aggiunge una nuova proprietà al tipo, con il nome, la convenzione di chiamata, la firma e i modificatori personalizzati specificati.</summary>
      <param name="name">Nome della proprietà. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attributes">Attributi della proprietà.</param>
      <param name="callingConvention">Convenzione di chiamata delle funzioni di accesso della proprietà.</param>
      <param name="returnType">Tipo restituito della proprietà.</param>
      <param name="returnTypeRequiredCustomModifiers">Matrice di tipi che rappresenta i modificatori personalizzati obbligatori, come <see cref="T:System.Runtime.CompilerServices.IsConst" />, per il tipo restituito della proprietà. Se il tipo restituito non ha modificatori personalizzati obbligatori, specificare <see langword="null" />.</param>
      <param name="returnTypeOptionalCustomModifiers">Matrice di tipi che rappresenta i modificatori personalizzati facoltativi, come <see cref="T:System.Runtime.CompilerServices.IsConst" />, per il tipo restituito della proprietà. Se il tipo restituito non ha modificatori personalizzati facoltativi, specificare <see langword="null" />.</param>
      <param name="parameterTypes">Tipi dei parametri della proprietà.</param>
      <param name="parameterTypeRequiredCustomModifiers">Matrice di matrici di tipi. Ogni matrice di tipi rappresenta i modificatori personalizzati obbligatori per il parametro corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" />. Se un parametro particolare non ha modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun parametro ha modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <param name="parameterTypeOptionalCustomModifiers">Matrice di matrici di tipi. Ogni matrice di tipi rappresenta i modificatori personalizzati facoltativi per il parametro corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" />. Se un parametro particolare non ha modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun parametro ha modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <returns>Proprietà definita.</returns>
      <exception cref="T:System.ArgumentException">La lunghezza di <paramref name="name" /> è zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.  
In alternativa 
Uno degli elementi della matrice <paramref name="parameterTypes" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])">
      <summary>Aggiunge una nuova proprietà al tipo, con il nome e la firma della proprietà specificati.</summary>
      <param name="name">Nome della proprietà. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attributes">Attributi della proprietà.</param>
      <param name="returnType">Tipo restituito della proprietà.</param>
      <param name="parameterTypes">Tipi dei parametri della proprietà.</param>
      <returns>Proprietà definita.</returns>
      <exception cref="T:System.ArgumentException">La lunghezza di <paramref name="name" /> è zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.  
-oppure- 
Uno degli elementi della matrice <paramref name="parameterTypes" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>Aggiunge una nuova proprietà al tipo, con il nome, la firma della proprietà e i modificatori personalizzati specificati.</summary>
      <param name="name">Nome della proprietà. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="attributes">Attributi della proprietà.</param>
      <param name="returnType">Tipo restituito della proprietà.</param>
      <param name="returnTypeRequiredCustomModifiers">Matrice di tipi che rappresenta i modificatori personalizzati obbligatori, come <see cref="T:System.Runtime.CompilerServices.IsConst" />, per il tipo restituito della proprietà. Se il tipo restituito non ha modificatori personalizzati obbligatori, specificare <see langword="null" />.</param>
      <param name="returnTypeOptionalCustomModifiers">Matrice di tipi che rappresenta i modificatori personalizzati facoltativi, come <see cref="T:System.Runtime.CompilerServices.IsConst" />, per il tipo restituito della proprietà. Se il tipo restituito non ha modificatori personalizzati facoltativi, specificare <see langword="null" />.</param>
      <param name="parameterTypes">Tipi dei parametri della proprietà.</param>
      <param name="parameterTypeRequiredCustomModifiers">Matrice di matrici di tipi. Ogni matrice di tipi rappresenta i modificatori personalizzati obbligatori per il parametro corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" />. Se un parametro particolare non ha modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun parametro ha modificatori personalizzati obbligatori, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <param name="parameterTypeOptionalCustomModifiers">Matrice di matrici di tipi. Ogni matrice di tipi rappresenta i modificatori personalizzati facoltativi per il parametro corrispondente, come <see cref="T:System.Runtime.CompilerServices.IsConst" />. Se un parametro particolare non ha modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di tipi. Se nessun parametro ha modificatori personalizzati facoltativi, specificare <see langword="null" /> invece di una matrice di matrici.</param>
      <returns>Proprietà definita.</returns>
      <exception cref="T:System.ArgumentException">La lunghezza di <paramref name="name" /> è zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />  
-oppure- 
Uno degli elementi della matrice <paramref name="parameterTypes" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer">
      <summary>Definisce l'inizializzatore per questo tipo.</summary>
      <returns>Restituisce un inizializzatore di tipo.</returns>
      <exception cref="T:System.InvalidOperationException">Il tipo contenitore è stato creato in precedenza con <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary>Definisce un campo di dati non inizializzati nella sezione <see langword=".sdata" /> del file eseguibile di tipo PE.</summary>
      <param name="name">Nome usato per fare riferimento ai dati. <paramref name="name" /> non può contenere valori Null incorporati.</param>
      <param name="size">Dimensione del campo dati.</param>
      <param name="attributes">Attributi per il campo.</param>
      <returns>Campo di riferimento ai dati.</returns>
      <exception cref="T:System.ArgumentException">La lunghezza di <paramref name="name" /> è zero.  
-oppure- 
 <paramref name="size" /> è minore di o uguale a zero oppure maggiore di o uguale a 0x003f0000.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.FullName">
      <summary>Recupera il percorso completo di questo tipo.</summary>
      <returns>Sola lettura. Recupera il percorso completo di questo tipo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterAttributes">
      <summary>Ottiene un valore che indica la covarianza e i vincoli speciali del parametro di tipo generico corrente.</summary>
      <returns>Combinazione bit per bit di valori <see cref="T:System.Reflection.GenericParameterAttributes" /> che descrive la covariante e i vincoli speciali del parametro di tipo generico corrente.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterPosition">
      <summary>Ottiene la posizione di un parametro di tipo nell'elenco dei parametri di tipo del tipo generico che ha dichiarato il parametro.</summary>
      <returns>Se l'oggetto <see cref="T:System.Reflection.Emit.TypeBuilder" /> corrente rappresenta un parametro di tipo generico, la posizione del parametro di tipo nell'elenco di parametri di tipo del tipo generico che ha dichiarato il parametro; in caso contrario, non definito.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)">
      <summary>Restituisce il costruttore del tipo generico costruito specificato che corrisponde al costruttore specificato della definizione di tipo generico.</summary>
      <param name="type">Tipo generico creato di cui viene restituito il costruttore.</param>
      <param name="constructor">Costruttore sulla definizione di tipo generico dell'oggetto <paramref name="type" />, che specifica il costruttore di <paramref name="type" /> da restituire.</param>
      <returns>Oggetto <see cref="T:System.Reflection.ConstructorInfo" /> che rappresenta il costruttore di <paramref name="type" /> corrispondente a <paramref name="constructor" />, che specifica un costruttore appartenente alla definizione di tipo generico di <paramref name="type" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> non rappresenta un tipo generico.  
In alternativa 
 <paramref name="type" /> non è di tipo <see cref="T:System.Reflection.Emit.TypeBuilder" />.  
-oppure- 
Il tipo dichiarante di <paramref name="constructor" /> non è una definizione di tipo generico.  
-oppure- 
Il tipo dichiarante di <paramref name="constructor" /> non è la definizione di tipo generico di <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary>Restituisce una matrice di oggetti <see cref="T:System.Reflection.ConstructorInfo" /> che rappresentano i costruttori pubblici e non pubblici definiti per questa classe, come specificato.</summary>
      <param name="bindingAttr">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />, come in <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns>Restituisce una matrice di oggetti <see cref="T:System.Reflection.ConstructorInfo" /> che rappresentano i costruttori specificati definiti per questa classe. Se non è stato definito alcun costruttore, verrà restituita una matrice vuota.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)">
      <summary>Restituisce tutti gli attributi personalizzati definiti per questo tipo.</summary>
      <param name="inherit">Specifica se trovare gli attributi cercandoli nella catena di ereditarietà del membro.</param>
      <returns>Restituisce una matrice di oggetti che rappresentano tutti gli attributi personalizzati di questo tipo.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato per i tipi incompleti. Recuperare il tipo usando <see cref="M:System.Type.GetType" /> e chiamare <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> nell'oggetto <see cref="T:System.Type" /> restituito.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Restituisce tutti gli attributi personalizzati del tipo corrente che è possibile assegnare a un tipo specificato.</summary>
      <param name="attributeType">Tipo di attributo da cercare. Vengono restituiti solo gli attributi assegnabili a questo tipo.</param>
      <param name="inherit">Specifica se trovare gli attributi cercandoli nella catena di ereditarietà del membro.</param>
      <returns>Matrice di attributi personalizzati definiti per il tipo corrente.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato per i tipi incompleti. Recuperare il tipo usando <see cref="M:System.Type.GetType" /> e chiamare <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> nell'oggetto <see cref="T:System.Type" />restituito.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Il tipo deve essere uno di quelli forniti dal sistema di runtime sottostante.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetElementType">
      <summary>La chiamata di questo metodo genera sempre un'eccezione <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Questo metodo non è supportato. Non vengono restituiti valori.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è supportato.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>Restituisce l'evento con il nome specificato.</summary>
      <param name="name">Nome dell'evento di cui eseguire la ricerca.</param>
      <param name="bindingAttr">Combinazione bit per bit dei valori <see cref="T:System.Reflection.BindingFlags" /> che limita la ricerca.</param>
      <returns>Oggetto <see cref="T:System.Reflection.EventInfo" /> che rappresenta l'evento dichiarato o ereditato da questo tipo con il nome specificato o <see langword="null" /> in assenza di corrispondenze.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents">
      <summary>Restituisce gli eventi pubblici dichiarati o ereditati da questo tipo.</summary>
      <returns>Restituisce una matrice di oggetti <see cref="T:System.Reflection.EventInfo" /> che rappresentano gli eventi pubblici dichiarati o ereditati da questo tipo. In assenza di eventi pubblici, viene restituita una matrice vuota.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary>Restituisce gli eventi pubblici e non pubblici dichiarati da questo tipo.</summary>
      <param name="bindingAttr">Combinazione bit per bit dei valori <see cref="T:System.Reflection.BindingFlags" /> che limita la ricerca.</param>
      <returns>Restituisce una matrice di oggetti <see cref="T:System.Reflection.EventInfo" /> che rappresentano gli eventi dichiarati o ereditati da questo tipo che corrispondono ai flag di binding specificati. In assenza di eventi corrispondenti, viene restituita una matrice vuota.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>Restituisce il campo specificato con il nome specificato.</summary>
      <param name="name">Nome del campo da ottenere.</param>
      <param name="bindingAttr">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />, come in <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns>Restituisce l'oggetto <see cref="T:System.Reflection.FieldInfo" /> che rappresenta il campo dichiarato o ereditato da questo tipo con il nome specificato e il modificatore pubblico o non pubblico. Se non sono presenti corrispondenze, verrà restituito <see langword="null" />.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)">
      <summary>Restituisce il campo del tipo generico specificato che corrisponde al campo specificato della definizione di tipo generico.</summary>
      <param name="type">Il tipo generico creato di cui viene restituito il campo.</param>
      <param name="field">Campo sulla definizione di tipo generico dell'oggetto <paramref name="type" />, che specifica il campo di <paramref name="type" /> da restituire.</param>
      <returns>Oggetto <see cref="T:System.Reflection.FieldInfo" /> che rappresenta il campo di <paramref name="type" /> corrispondente a <paramref name="field" />, che specifica un campo appartenente alla definizione di tipo generico di <paramref name="type" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> non rappresenta un tipo generico.  
-oppure- 
 <paramref name="type" /> non è di tipo <see cref="T:System.Reflection.Emit.TypeBuilder" />.  
In alternativa 
Il tipo dichiarante di <paramref name="field" /> non è una definizione di tipo generico.  
-oppure- 
Il tipo dichiarante di <paramref name="field" /> non è la definizione di tipo generico di <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>Restituisce i campi pubblici e non pubblici dichiarati da questo tipo.</summary>
      <param name="bindingAttr">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />: <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns>Restituisce una matrice di oggetti <see cref="T:System.Reflection.FieldInfo" /> che rappresentano i campi pubblici e non pubblici dichiarati o ereditati da questo tipo. In assenza di campi, viene restituita una matrice vuota, come specificato.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericArguments">
      <summary>Restituisce una matrice di oggetti <see cref="T:System.Type" /> che rappresentano gli argomenti di tipo di un tipo generico o i parametri di tipo di una definizione di tipo generico.</summary>
      <returns>Matrice di oggetti <see cref="T:System.Type" />. Gli elementi della matrice rappresentano gli argomenti tipo di un tipo generico o i parametri di tipo di una definizione di tipo generico.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition">
      <summary>Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta una definizione di tipo generico da cui è possibile ottenere il tipo generico.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta una definizione di tipo generico da cui è possibile ottenere il tipo generico.</returns>
      <exception cref="T:System.InvalidOperationException">Il tipo corrente non è generico. Ciò significa che <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> restituisce <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)">
      <summary>Restituisce l'interfaccia implementata (direttamente o indirettamente) da questa classe, con il nome completo corrispondente al nome di interfaccia specificato.</summary>
      <param name="name">Nome dell'interfaccia.</param>
      <param name="ignoreCase">Se <see langword="true" />, la ricerca non fa distinzione tra maiuscole e minuscole. Se <see langword="false" />, la ricerca fa distinzione tra maiuscole e minuscole.</param>
      <returns>Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta l'interfaccia implementata. Restituisce Null se non viene trovato alcun nome di interfaccia corrispondente.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)">
      <summary>Restituisce un mapping di interfaccia per l'interfaccia richiesta.</summary>
      <param name="interfaceType">Oggetto <see cref="T:System.Type" /> dell'interfaccia per cui recuperare il mapping.</param>
      <returns>Restituisce il mapping dell'interfaccia richiesto.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaces">
      <summary>Restituisce una matrice di tutte le interfacce implementate nel tipo e nei relativi tipi di base.</summary>
      <returns>Restituisce una matrice di oggetti <see cref="T:System.Type" /> che rappresentano le interfacce implementate. Se non è stata definita alcuna interfaccia, viene restituita una matrice vuota.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>Restituisce tutti i membri pubblici e non pubblici dichiarati o ereditati da questo tipo, come specificato.</summary>
      <param name="name">Nome del membro.</param>
      <param name="type">Tipo del membro da restituire.</param>
      <param name="bindingAttr">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />, come in <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns>Restituisce una matrice di oggetti <see cref="T:System.Reflection.MemberInfo" /> che rappresentano i membri pubblici e non pubblici definiti sul tipo se è usato il parametro <paramref name="nonPublic" />; in caso contrario, vengono restituiti solo i membri pubblici.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary>Restituisce i membri per i membri pubblici e non pubblici dichiarati o ereditati da questo tipo.</summary>
      <param name="bindingAttr">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />, ad esempio <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns>Restituisce una matrice di oggetti <see cref="T:System.Reflection.MemberInfo" /> che rappresentano i membri pubblici o non pubblici dichiarati o ereditati da questo tipo. In assenza di membri corrispondenti, viene restituita una matrice vuota.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)">
      <summary>Restituisce il metodo del tipo generico costruito specificato che corrisponde al metodo specificato della definizione di tipo generico.</summary>
      <param name="type">Tipo generico costruito di cui viene restituito il metodo.</param>
      <param name="method">Metodo sulla definizione di tipo generico dell'oggetto <paramref name="type" />, che specifica quale metodo di <paramref name="type" /> restituire.</param>
      <returns>Un oggetto <see cref="T:System.Reflection.MethodInfo" /> che rappresenta il metodo di <paramref name="type" /> corrispondente a <paramref name="method" />, che specifica un metodo appartenente alla definizione di tipo generico di <paramref name="type" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> è un metodo generico che non è una definizione di metodo generico.  
-oppure- 
 <paramref name="type" /> non rappresenta un tipo generico.  
-oppure- 
 <paramref name="type" /> non è di tipo <see cref="T:System.Reflection.Emit.TypeBuilder" />.  
-oppure- 
Il tipo dichiarante di <paramref name="method" /> non è una definizione di tipo generico.  
In alternativa 
Il tipo dichiarante di <paramref name="method" /> non è la definizione di tipo generico di <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>Restituisce tutti i metodi pubblici e non pubblici dichiarati o ereditati da questo tipo, come specificato.</summary>
      <param name="bindingAttr">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />, come in <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns>Restituisce una matrice di oggetti <see cref="T:System.Reflection.MethodInfo" /> che rappresentano i metodi pubblici e non pubblici definiti sul tipo se è usato il parametro <paramref name="nonPublic" />; in caso contrario, vengono restituiti solo i metodi pubblici.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>Restituisce i tipi annidati pubblici e non pubblici dichiarati da questo tipo.</summary>
      <param name="name">Oggetto <see cref="T:System.String" /> che contiene il nome del tipo annidato da ottenere.</param>
      <param name="bindingAttr">Maschera di bit costituita da uno o più <see cref="T:System.Reflection.BindingFlags" /> che consente di specificare le modalità di esecuzione della ricerca.  
-oppure- 
Zero, per eseguire una ricerca di metodi pubblici con distinzione tra maiuscole e minuscole.</param>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo annidato corrispondente ai requisiti specificati, se presente; in caso contrario, <see langword="null" />.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>Restituisce i tipi annidati pubblici e non pubblici dichiarati o ereditati da questo tipo.</summary>
      <param name="bindingAttr">Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />, come in <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns>Matrice di oggetti <see cref="T:System.Type" /> che rappresentano tutti i tipi annidati nell'oggetto <see cref="T:System.Type" /> corrente che corrispondono ai vincoli di associazione specificati.  
Matrice vuota di tipo <see cref="T:System.Type" />, se l'oggetto <see cref="T:System.Type" /> corrente non contiene tipi annidati o se nessuno dei tipi annidati corrisponde ai vincoli di associazione.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary>Restituisce tutte le proprietà pubbliche e non pubbliche dichiarate o ereditate da questo tipo, come specificato.</summary>
      <param name="bindingAttr">Attributo di chiamata. Deve essere un flag di bit di <see cref="T:System.Reflection.BindingFlags" />: <see langword="InvokeMethod" />, <see langword="NonPublic" /> e così via.</param>
      <returns>Restituisce una matrice di oggetti <see langword="PropertyInfo" /> che rappresentano le proprietà pubbliche e non pubbliche definite per questo tipo se viene usato il parametro <paramref name="nonPublic" />; in caso contrario, vengono restituite solo le proprietà pubbliche.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non viene implementato per i tipi incompleti.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GUID">
      <summary>Recupera il GUID di questo tipo.</summary>
      <returns>Sola lettura. Recupera il GUID di questo tipo</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>Richiama il membro specificato. Il metodo da richiamare deve essere accessibile e fornire massima corrispondenza con l'elenco di argomenti specificato, in conformità ai vincoli del binder e degli attributi di chiamata specificati.</summary>
      <param name="name">Nome del membro da richiamare. Può essere un costruttore, un metodo, una proprietà o un campo. È necessario specificare un attributo di chiamata appropriato. Si noti che è possibile richiamare il membro predefinito di una classe passando una stringa vuota come nome del membro.</param>
      <param name="invokeAttr">Attributo di chiamata. Deve essere un flag di bit di <see langword="BindingFlags" />.</param>
      <param name="binder">Oggetto che consente l'associazione, la coercizione dei tipi di argomento, la chiamata dei membri e il recupero di oggetti <see langword="MemberInfo" /> tramite reflection. Se il binder è <see langword="null" />, viene usato quello predefinito. Vedere <see cref="T:System.Reflection.Binder" />.</param>
      <param name="target">Oggetto su cui richiamare il membro specificato. Se il membro è statico, il parametro viene ignorato.</param>
      <param name="args">Elenco di argomenti. Matrice di oggetti che contiene il numero, l'ordine e il tipo dei parametri del membro da richiamare. In assenza di parametri, deve essere Null.</param>
      <param name="modifiers">Matrice della stessa lunghezza di <paramref name="args" /> con elementi che rappresentano gli attributi associati agli argomenti del membro da richiamare. A un parametro sono associati attributi nei metadati. Vengono usati da vari servizi di interoperabilità. Per informazioni dettagliate, vedere le specifiche dei metadati.</param>
      <param name="culture">Istanza di <see langword="CultureInfo" /> usata per regolare la coercizione dei tipi. Se tale parametro è Null, verrà usato l'oggetto <see langword="CultureInfo" /> per il thread corrente. Ciò è necessario, ad esempio, per convertire una stringa che rappresenta 1000 in un valore double, perché 1000 è rappresentato in modo diverso nelle diverse impostazioni cultura.</param>
      <param name="namedParameters">Tutti i parametri nella matrice <paramref name="namedParameters" /> ottengono il valore nell'elemento corrispondente della matrice <paramref name="args" />. Se la lunghezza di <paramref name="args" /> è superiore a quella di <paramref name="namedParameters" />, i valori degli argomenti rimanenti vengono passati in ordine.</param>
      <returns>Restituisce il valore restituito del membro richiamato.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato per i tipi incompleti.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)">
      <summary>Ottiene un valore che indica se all'oggetto è possibile assegnare un oggetto <see cref="T:System.Type" /> specificato.</summary>
      <param name="c">Oggetto da testare.</param>
      <returns>
        <see langword="true" /> se il parametro <paramref name="c" /> e il tipo corrente rappresentano lo stesso tipo oppure se il tipo corrente è nella gerarchia di ereditarietà di <paramref name="c" /> o è un'interfaccia che supporta <paramref name="c" />. <see langword="false" />se nessuna di queste condizioni è valida oppure se <paramref name="c" /> è <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsConstructedGenericType">
      <summary>Ottiene un valore che indica se l'oggetto rappresenta un tipo generico costruito.</summary>
      <returns>
        <see langword="true" /> se questo oggetto rappresenta una definizione di tipo generico; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsCreated">
      <summary>Restituisce un valore che indica se è stato creato il tipo dinamico corrente.</summary>
      <returns>
        <see langword="true" /> se il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> è stato chiamato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>Determina se un attributo personalizzato viene applicato al tipo corrente.</summary>
      <param name="attributeType">Tipo di attributo da cercare. Vengono restituiti solo gli attributi assegnabili a questo tipo.</param>
      <param name="inherit">Specifica se trovare gli attributi cercandoli nella catena di ereditarietà del membro.</param>
      <returns>
        <see langword="true" /> se una o più istanze di <paramref name="attributeType" />, o un attributo derivato da <paramref name="attributeType" />, sono definite in questo tipo; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException">Questo metodo non è attualmente supportato per i tipi incompleti. Recuperare il tipo usando <see cref="M:System.Type.GetType" /> e chiamare <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> nell'oggetto <see cref="T:System.Type" /> restituito.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> non è definito.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericParameter">
      <summary>Ottiene un valore che indica se il tipo corrente è un parametro di tipo generico.</summary>
      <returns>
        <see langword="true" /> se l'oggetto <see cref="T:System.Reflection.Emit.TypeBuilder" /> corrente rappresenta un parametro di tipo generico; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericType">
      <summary>Ottiene un valore che indica se il tipo corrente è un tipo generico.</summary>
      <returns>
        <see langword="true" /> se il tipo rappresentato dall'oggetto <see cref="T:System.Reflection.Emit.TypeBuilder" /> corrente è generico; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition">
      <summary>Ottiene un valore che indica se la classe <see cref="T:System.Reflection.Emit.TypeBuilder" /> corrente rappresenta una definizione di tipo generico, da cui è possibile costruire altri tipi generici.</summary>
      <returns>
        <see langword="true" /> se questo oggetto <see cref="T:System.Reflection.Emit.TypeBuilder" /> rappresenta una definizione di tipo generico; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical">
      <summary>Ottiene un valore che indica se il tipo corrente è critico per la sicurezza o critico per la sicurezza e richiamabile da codice trasparente e può pertanto eseguire operazioni critiche.</summary>
      <returns>
        <see langword="true" /> se il tipo corrente è critico per la sicurezza o critico per la sicurezza e richiamabile da codice trasparente; <see langword="false" /> se è trasparente.</returns>
      <exception cref="T:System.NotSupportedException">Il tipo dinamico corrente non è stato creato chiamando il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical">
      <summary>Ottiene un valore che indica se il tipo corrente è critico per la sicurezza, vale a dire se può eseguire operazioni critiche e se è possibile accedervi tramite codice trasparente.</summary>
      <returns>
        <see langword="true" /> se il tipo corrente è critico per la sicurezza, <see langword="false" /> se è critico per la sicurezza o trasparente.</returns>
      <exception cref="T:System.NotSupportedException">Il tipo dinamico corrente non è stato creato chiamando il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent">
      <summary>Ottiene un valore che indica se il tipo corrente è trasparente e pertanto non può eseguire operazioni critiche.</summary>
      <returns>
        <see langword="true" /> se il tipo è trasparente per la sicurezza; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.NotSupportedException">Il tipo dinamico corrente non è stato creato chiamando il metodo <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)">
      <summary>Determina se questo tipo è derivato da un tipo specificato.</summary>
      <param name="c">Oggetto <see cref="T:System.Type" /> da verificare.</param>
      <returns>Sola lettura. Restituisce <see langword="true" /> se questo tipo è lo stesso del tipo <paramref name="c" /> oppure è un sottotipo del tipo <paramref name="c" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsVariableBoundArray" />
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType">
      <summary>Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta una matrice unidimensionale del tipo corrente con un limite inferiore a zero.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta un tipo di matrice unidimensionale, il cui tipo di elemento è di tipo corrente con limite inferiore zero.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)">
      <summary>Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta una matrice del tipo corrente, con il numero specificato di dimensioni.</summary>
      <param name="rank">Numero di dimensioni della matrice.</param>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta una matrice unidimensionale del tipo corrente.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> non è una dimensione di matrice valida.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeByRefType">
      <summary>Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta il tipo corrente quando viene passato come parametro <see langword="ref" /> (<see langword="ByRef" /> in Visual Basic).</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo corrente quando viene passato come parametro <see langword="ref" /> (<see langword="ByRef" /> in Visual Basic).</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])">
      <summary>Sostituisce gli elementi di una matrice di tipi ai parametri di tipo della definizione di tipo generico corrente e restituisce il tipo costruito risultante.</summary>
      <param name="typeArguments">Matrice di tipi con cui sostituire i parametri di tipo della definizione di tipo generico corrente.</param>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo costruito ottenuto sostituendo i parametri di tipo del tipo generico corrente con gli elementi di <paramref name="typeArguments" />.</returns>
      <exception cref="T:System.InvalidOperationException">Il tipo corrente non rappresenta la definizione di un tipo generico. Ciò significa che <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> restituisce <see langword="false" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> è <see langword="null" />.  
-oppure- 
Qualsiasi elemento di <paramref name="typeArguments" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">La proprietà <see cref="P:System.Type.Module" /> di qualsiasi elemento di <paramref name="typeArguments" /> è <see langword="null" />.  
-oppure- 
La proprietà <see cref="P:System.Reflection.Module.Assembly" /> del modulo di qualsiasi elemento di <paramref name="typeArguments" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakePointerType">
      <summary>Restituisce un oggetto <see cref="T:System.Type" /> che rappresenta il tipo di un puntatore non gestito al tipo corrente.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di un puntatore non gestito al tipo corrente.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Module">
      <summary>Recupera il modulo dinamico che contiene la definizione di tipo.</summary>
      <returns>Sola lettura. Recupera il modulo dinamico che contiene la definizione di tipo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Name">
      <summary>Recupera il nome di questo tipo.</summary>
      <returns>Sola lettura. Recupera il nome dell'oggetto <see cref="T:System.String" /> di questo tipo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Namespace">
      <summary>Recupera lo spazio dei nomi in cui è definito <see langword="TypeBuilder" />.</summary>
      <returns>Sola lettura. Recupera lo spazio dei nomi in cui è definito <see langword="TypeBuilder" /> .</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.PackingSize">
      <summary>Recupera la dimensione di compressione di questo tipo.</summary>
      <returns>Sola lettura. Recupera la dimensione di compressione di questo tipo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.ReflectedType">
      <summary>Restituisce il tipo usato per ottenere questo tipo.</summary>
      <returns>Sola lettura. Tipo usato per ottenere questo tipo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>Imposta un attributo personalizzato usando un BLOB di attributi personalizzati specificato.</summary>
      <param name="con">Costruttore dell'attributo personalizzato.</param>
      <param name="binaryAttribute">BLOB di byte che rappresenta gli attributi.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> o <paramref name="binaryAttribute" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Per il tipo dinamico corrente, la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> è <see langword="true" /> ma la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>Impostare un attributo personalizzato usando un generatore di attributi personalizzati.</summary>
      <param name="customBuilder">Un'istanza di una classe helper per definire l'attributo personalizzato.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Per il tipo dinamico corrente, la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> è <see langword="true" /> ma la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> è <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetParent(System.Type)">
      <summary>Imposta il tipo di base del tipo che si sta creando.</summary>
      <param name="parent">Nuovo tipo di base.</param>
      <exception cref="T:System.InvalidOperationException">Il tipo è stato creato in precedenza usando <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />.  
In alternativa 
 <paramref name="parent" /> è <see langword="null" /> e l'istanza corrente rappresenta un'interfaccia i cui attributi non includono <see cref="F:System.Reflection.TypeAttributes.Abstract" />.  
-oppure- 
Per il tipo dinamico corrente, la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> è <see langword="true" /> ma la proprietà <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> è <see langword="false" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parent" /> è un'interfaccia. Questa condizione di eccezione è stata introdotta in .NET Framework versione 2.0.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Size">
      <summary>Recupera la dimensione totale di un tipo.</summary>
      <returns>Sola lettura. Recupera le dimensioni totali di questo tipo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.ToString">
      <summary>Restituisce il nome del tipo escluso lo spazio dei nomi.</summary>
      <returns>Sola lettura. Nome del tipo escluso lo spazio dei nomi.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.TypeHandle">
      <summary>Non supportato in moduli dinamici.</summary>
      <returns>Sola lettura.</returns>
      <exception cref="T:System.NotSupportedException">Non supportato in moduli dinamici.</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.UnderlyingSystemType">
      <summary>Restituisce il tipo di sistema sottostante per l'oggetto <see langword="TypeBuilder" />.</summary>
      <returns>Sola lettura. Restituisce il tipo di sistema sottostante.</returns>
      <exception cref="T:System.InvalidOperationException">Questo tipo è un'enumerazione, ma non esiste alcun tipo di sistema sottostante.</exception>
    </member>
    <member name="F:System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize">
      <summary>Indica che le dimensioni totali per il tipo non sono specificate.</summary>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ObjectModel</name>
  </assembly>
  <members>
    <member name="T:System.Collections.ObjectModel.KeyedCollection`2">
      <summary>Fornisce la classe base astratta per una raccolta le cui chiavi sono incorporate nei valori.</summary>
      <typeparam name="TKey">Tipo di chiavi nella raccolta.</typeparam>
      <typeparam name="TItem">Tipo di elementi nella raccolta.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> che utilizza l'operatore di confronto di uguaglianza predefinito.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> che utilizza l'operatore di confronto di uguaglianza specificato.</summary>
      <param name="comparer">Implementazione dell'interfaccia generica <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> da utilizzare durante il confronto delle chiavi o <see langword="null" /> per utilizzare l'operatore di confronto di uguaglianza predefinito per il tipo di chiave, ottenuto dalla proprietà <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> che utilizza l'operatore di confronto di uguaglianza specificato e crea un dizionario di ricerca quando viene superata la soglia specificata.</summary>
      <param name="comparer">Implementazione dell'interfaccia generica <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> da utilizzare durante il confronto delle chiavi o <see langword="null" /> per utilizzare l'operatore di confronto di uguaglianza predefinito per il tipo di chiave, ottenuto dalla proprietà <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />.</param>
      <param name="dictionaryCreationThreshold">Numero di elementi che la raccolta può contenere senza creare un dizionario di ricerca (0 crea il dizionario di ricerca quando viene aggiunto il primo elemento) oppure -1 per specificare che non deve mai venire creato un dizionario di ricerca.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dictionaryCreationThreshold" /> è minore di -1.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)">
      <summary>Modifica la chiave associata all'elemento specificato nel dizionario di ricerca.</summary>
      <param name="item">Elemento di cui modificare la chiave.</param>
      <param name="newKey">Nuova chiave per il parametro <paramref name="item" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> è <see langword="null" />.  
-oppure- 
 <paramref name="key" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> non trovata.  
In alternativa 
 <paramref name="key" /> esiste già nella classe <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems">
      <summary>Rimuove tutti gli elementi da <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer">
      <summary>Ottiene l'operatore di confronto di uguaglianza utilizzato per determinare l'uguaglianza delle chiavi nella raccolta.</summary>
      <returns>Implementazione dell'interfaccia generica <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> utilizzata per determinare l'uguaglianza delle chiavi nella raccolta.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)">
      <summary>Determina se la raccolta contiene un elemento con la chiave specificata.</summary>
      <param name="key">Chiave da individuare in <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</param>
      <returns>
        <see langword="true" /> se <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> contiene un elemento con la chiave specificata; in caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary">
      <summary>Ottiene il dizionario di ricerca della classe <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
      <returns>Dizionario di ricerca della classe <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />, se esistente; in caso contrario, <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)">
      <summary>Se implementato in una classe derivata, estrae la chiave dall'elemento specificato.</summary>
      <param name="item">Elemento da cui estrarre la chiave.</param>
      <returns>Chiave dell'elemento specificato.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)">
      <summary>Inserisce un elemento in <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero nel quale <paramref name="item" /> deve essere inserito.</param>
      <param name="item">Oggetto da inserire.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> è minore di 0.  
In alternativa 
 <paramref name="index" /> è maggiore di <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)">
      <summary>Ottiene l'elemento con la chiave specificata.</summary>
      <param name="key">Chiave dell'elemento da ottenere.</param>
      <returns>Elemento con la chiave specificata. Se un elemento con la chiave specificata non viene trovato, viene generata un'eccezione.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Un elemento con la chiave specificata non esiste nella raccolta.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)">
      <summary>Rimuove l'elemento con la chiave specificata da <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
      <param name="key">Chiave dell'elemento da rimuovere.</param>
      <returns>
        <see langword="true" /> se l'elemento viene rimosso correttamente; in caso contrario, <see langword="false" />.  Questo metodo restituisce anche <see langword="false" /> se il parametro <paramref name="key" /> non viene trovato nella classe <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)">
      <summary>Rimuove l'elemento in corrispondenza dell'indice specificato di <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />.</summary>
      <param name="index">Indice dell'elemento da rimuovere.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)">
      <summary>Sostituisce l'elemento in corrispondenza dell'indice specificato con l'elemento specificato.</summary>
      <param name="index">Indice in base zero dell'elemento da sostituire.</param>
      <param name="item">Nuovo elemento.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.KeyedCollection`2.TryGetValue(`0,`1@)">
      <param name="key" />
      <param name="item" />
    </member>
    <member name="T:System.Collections.ObjectModel.ObservableCollection`1">
      <summary>Rappresenta una raccolta di dati dinamica che fornisce notifiche in caso di aggiunta o rimozione di elementi oppure quando viene aggiornato l'intero elenco.</summary>
      <typeparam name="T">Tipo di elementi contenuti nella raccolta.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> che contiene gli elementi copiati dalla raccolta specificata.</summary>
      <param name="collection">Insieme da cui vengono copiati gli elementi.</param>
      <exception cref="T:System.ArgumentNullException">Il parametro <paramref name="collection" /> non può essere <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> che contiene gli elementi copiati dall'elenco specificato.</summary>
      <param name="list">Elenco da cui gli elementi vengono copiati.</param>
      <exception cref="T:System.ArgumentNullException">Il parametro <paramref name="list" /> non può essere <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy">
      <summary>Non consente tentativi di routine rientranti per modificare la raccolta.</summary>
      <returns>Oggetto <see cref="T:System.IDisposable" /> che può essere usato per eliminare l'oggetto.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.CheckReentrancy">
      <summary>Cerca i tentativi di routine rientranti per modificare la raccolta.</summary>
      <exception cref="T:System.InvalidOperationException">Se è stata effettuata una chiamata a <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy" /> di cui non è ancora stato eliminato il valore restituito <see cref="T:System.IDisposable" />. In genere, questo indica quando vengono eseguiti altri tentativi di modificare la raccolta durante un evento <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" />. Dipende tuttavia da quando le classi derivate scelgono di chiamare <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.ClearItems">
      <summary>Rimuove tutti gli elementi dalla raccolta.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged">
      <summary>Si verifica quando un elemento viene aggiunto, rimosso, modificato o spostato oppure quando viene aggiornato l'intero elenco.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)">
      <summary>Inserisce un elemento nella raccolta in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero nel quale <paramref name="item" /> deve essere inserito.</param>
      <param name="item">Oggetto da inserire.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.Move(System.Int32,System.Int32)">
      <summary>Sposta l'elemento in corrispondenza dell'indice specificato in una nuova posizione dell'insieme.</summary>
      <param name="oldIndex">Indice in base zero che specifica la posizione dell'elemento da spostare.</param>
      <param name="newIndex">Indice in base zero che specifica la nuova posizione dell'elemento.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.MoveItem(System.Int32,System.Int32)">
      <summary>Sposta l'elemento in corrispondenza dell'indice specificato in una nuova posizione dell'insieme.</summary>
      <param name="oldIndex">Indice in base zero che specifica la posizione dell'elemento da spostare.</param>
      <param name="newIndex">Indice in base zero che specifica la nuova posizione dell'elemento.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Genera l'evento <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> con gli argomenti forniti.</summary>
      <param name="e">Argomenti dell'evento da generare.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Genera l'evento <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> con gli argomenti forniti.</summary>
      <param name="e">Argomenti dell'evento da generare.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged">
      <summary>Generato quando il valore di una proprietà cambia.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)">
      <summary>Rimuove dall'insieme l'elemento in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero dell'elemento da rimuovere.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)">
      <summary>Sostituisce l'elemento in corrispondenza dell'indice specificato.</summary>
      <param name="index">Indice in base zero dell'elemento da sostituire.</param>
      <param name="item">Nuovo valore dell'elemento in corrispondenza dell'indice specificato.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Generato quando il valore di una proprietà cambia.</summary>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2">
      <summary>Rappresenta una raccolta generica di coppie chiave/valore di sola lettura.</summary>
      <typeparam name="TKey">Tipo delle chiavi nel dizionario.</typeparam>
      <typeparam name="TValue">Tipo dei valori nel dizionario.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>Consente di inizializzare una nuova istanza della classe <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> come wrapper per il dizionario specificato.</summary>
      <param name="dictionary">Dizionario di cui eseguire il wrapping.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ContainsKey(`0)">
      <summary>Determina se il dizionario contiene un elemento con la chiave specificata.</summary>
      <param name="key">Chiave da individuare nel dizionario.</param>
      <returns>
        <see langword="true" /> se il dizionario contiene un elemento con la chiave specificata. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Count">
      <summary>Ottiene il numero di elementi nel dizionario.</summary>
      <returns>Numero di elementi presenti nel dizionario.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Dictionary">
      <summary>Ottiene il dizionario su cui questo oggetto <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> ha eseguito il wrapping.</summary>
      <returns>Dizionario sottoposto al wrapping da questo oggetto.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.GetEnumerator">
      <summary>Restituisce un enumeratore che esegue l'iterazione di <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</summary>
      <returns>Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Item(`0)">
      <summary>Ottiene l'elemento che dispone della chiave specificata.</summary>
      <param name="key">Chiave dell'elemento da ottenere.</param>
      <returns>Elemento che dispone della chiave specificata.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">La proprietà viene recuperata e <paramref name="key" /> non viene trovato.</exception>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection">
      <summary>Rappresenta una raccolta di sola lettura delle chiavi di un oggetto <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>Copia gli elementi della raccolta in una matrice, a partire da un determinato indice della matrice.</summary>
      <param name="array">Matrice unidimensionale che rappresenta la destinazione degli elementi copiati dalla raccolta. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> è minore di 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> è multidimensionale.  
-oppure- 
Il numero degli elementi nella raccolta di origine è maggiore dello spazio disponibile da <paramref name="arrayIndex" /> alla fine del parametro <paramref name="array" /> di destinazione.  
-oppure- 
Non è possibile eseguire il cast automatico di <paramref name="T" /> del tipo sul tipo della <paramref name="array" /> di destinazione.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.Count">
      <summary>Ottiene il numero di elementi nella raccolta.</summary>
      <returns>Numero di elementi nella raccolta.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns>Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="item">Oggetto da aggiungere alla raccolta.</param>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>Determina se la raccolta contiene un valore specifico.</summary>
      <param name="item">Oggetto da individuare nella raccolta.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> è presente nella raccolta; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary>Ottiene un valore che indica se il dizionario è di sola lettura.</summary>
      <returns>
        <see langword="true" /> in tutti i casi.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="item">Oggetto da rimuovere dalla raccolta.</param>
      <returns>
        <see langword="true" /> se l'oggetto <paramref name="item" /> è stato rimosso correttamente dalla raccolta; in caso contrario, <see langword="false" />. Questo metodo restituisce anche <see langword="false" /> se l'oggetto <paramref name="item" /> non viene trovato nella raccolta originale.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia gli elementi della raccolta in una matrice, a partire da un determinato indice della matrice.</summary>
      <param name="array">Matrice unidimensionale che rappresenta la destinazione degli elementi copiati dalla raccolta. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="index">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> è minore di 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> è multidimensionale.  
-oppure- 
Il numero degli elementi nella raccolta di origine è maggiore dello spazio disponibile da <paramref name="index" /> alla fine del parametro <paramref name="array" /> di destinazione.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Ottiene un valore che indica se l'accesso alla raccolta è sincronizzato (thread-safe).</summary>
      <returns>
        <see langword="true" /> se l'accesso alla raccolta è sincronizzato (thread-safe), altrimenti <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>Ottiene un oggetto che può essere usato per sincronizzare l'accesso alla raccolta.</summary>
      <returns>Oggetto che può essere usato per sincronizzare l'accesso alla raccolta.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns>Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Keys">
      <summary>Ottiene una raccolta di chiavi che contiene le chiavi del dizionario.</summary>
      <returns>Raccolta di chiavi che contiene le chiavi del dizionario.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="item">Oggetto da aggiungere al dizionario.</param>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determina se il dizionario contiene un valore specifico.</summary>
      <param name="item">Oggetto da individuare nel dizionario.</param>
      <returns>
        <see langword="true" /> se l'oggetto <paramref name="item" /> viene trovato nel dizionario; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>Copia gli elementi del dizionario in una matrice, iniziando dall'indice di matrice specificato.</summary>
      <param name="array">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dal dizionario. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> è minore di 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> è multidimensionale.
-oppure- 
Il numero degli elementi nel dizionario di origine è maggiore dello spazio disponibile da <paramref name="arrayIndex" /> alla fine del parametro <paramref name="array" /> di destinazione.
-oppure- 
Non è possibile eseguire il cast automatico di <paramref name="T" /> del tipo sul tipo della <paramref name="array" /> di destinazione.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>Ottiene un valore che indica se il dizionario è di sola lettura.</summary>
      <returns>Restituisce <see langword="true" /> sempre per indicare che il dizionario è di sola lettura.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="item">Oggetto da rimuovere dal dizionario.</param>
      <returns>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="key">Oggetto da usare come chiave dell'elemento da aggiungere.</param>
      <param name="value">Oggetto da usare come valore dell'elemento da aggiungere.</param>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <summary>Ottiene l'elemento che dispone della chiave specificata.</summary>
      <param name="key">Chiave dell'elemento da ottenere o impostare.</param>
      <returns>Elemento che dispone della chiave specificata.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">La proprietà viene recuperata e <paramref name="key" /> non viene trovato.</exception>
      <exception cref="T:System.NotSupportedException">La proprietà è impostata.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>Ottiene una raccolta contenente le chiavi presenti nel dizionario.</summary>
      <returns>Raccolta contenente le chiavi dell'oggetto che implementa <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="key">Chiave dell'elemento da rimuovere.</param>
      <returns>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>Ottiene una raccolta contenente i valori presenti nel dizionario.</summary>
      <returns>Raccolta che contiene i valori dell'oggetto che implementa <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>Ottiene una raccolta enumerabile contenente le chiavi nel dizionario di sola lettura.</summary>
      <returns>Raccolta enumerabile contenente le chiavi nel dizionario di sola lettura.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>Ottiene una raccolta enumerabile contenente i valori nel dizionario di sola lettura.</summary>
      <returns>Raccolta enumerabile contenente i valori nel dizionario di sola lettura.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia gli elementi del dizionario in una matrice, iniziando dall'indice di matrice specificato.</summary>
      <param name="array">Matrice unidimensionale che costituisce la destinazione degli elementi copiati dal dizionario. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="index">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> è minore di zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> è multidimensionale.  
-oppure- 
Il numero degli elementi nel dizionario di origine è maggiore dello spazio disponibile da <paramref name="index" /> alla fine del parametro <paramref name="array" /> di destinazione.  
-oppure- 
Il tipo del dizionario di origine non può essere sottoposto automaticamente a cast sul tipo dell'elemento <paramref name="array" /> di destinazione.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Ottiene un valore che indica se l'accesso al dizionario è sincronizzato (thread safe).</summary>
      <returns>
        <see langword="true" /> se l'accesso al dizionario è sincronizzato (thread-safe), altrimenti <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Ottiene un oggetto che può essere utilizzato per sincronizzare l'accesso al dizionario.</summary>
      <returns>Oggetto che può essere utilizzato per sincronizzare l'accesso al dizionario.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="key">Chiave dell'elemento da aggiungere.</param>
      <param name="value">Valore dell'elemento da aggiungere.</param>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Clear">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determina se il dizionario contiene un elemento con la chiave specificata.</summary>
      <param name="key">Chiave da individuare nel dizionario.</param>
      <returns>
        <see langword="true" /> se il dizionario contiene un elemento con la chiave specificata. In caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Restituisce un enumeratore per il dizionario.</summary>
      <returns>Enumeratore per il dizionario.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Ottiene un valore che indica se le dimensioni del dizionario sono fisse.</summary>
      <returns>
        <see langword="true" /> se il dizionario è a dimensione fissa; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Ottiene un valore che indica se il dizionario è di sola lettura.</summary>
      <returns>
        <see langword="true" /> in tutti i casi.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Ottiene l'elemento che dispone della chiave specificata.</summary>
      <param name="key">Chiave dell'elemento da ottenere o impostare.</param>
      <returns>Elemento che dispone della chiave specificata.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">La proprietà è impostata.  
-oppure- 
La proprietà è impostata, <paramref name="key" /> non esiste nella raccolta e il dizionario è di dimensioni fisse.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Keys">
      <summary>Ottiene una raccolta contenente le chiavi presenti nel dizionario.</summary>
      <returns>Raccolta che contiene le chiavi del dizionario.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="key">Chiave dell'elemento da rimuovere.</param>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IDictionary#Values">
      <summary>Ottiene una raccolta contenente i valori presenti nel dizionario.</summary>
      <returns>Insieme contenente i valori presenti nel dizionario.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di eseguire l'iterazione di una raccolta.</summary>
      <returns>Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
      <summary>Recupera il valore associato alla chiave specificata.</summary>
      <param name="key">Chiave di cui verrà recuperato il valore.</param>
      <param name="value">Quando termina, questo metodo restituisce il valore associato alla chiave specificata nel caso in cui la chiave venga trovata; in caso contrario, il valore predefinito per il tipo di parametro <paramref name="value" />. Questo parametro viene passato non inizializzato.</param>
      <returns>
        <see langword="true" /> se l'oggetto che implementa l'interfaccia <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" /> contiene un elemento con la chiave specificata; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection">
      <summary>Rappresenta una raccolta di sola lettura dei valori di un oggetto <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>Copia gli elementi della raccolta in una matrice, a partire da un determinato indice della matrice.</summary>
      <param name="array">Matrice unidimensionale che rappresenta la destinazione degli elementi copiati dalla raccolta. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="arrayIndex">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> è minore di 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> è multidimensionale.  
-oppure- 
Il numero degli elementi nella raccolta di origine è maggiore dello spazio disponibile da <paramref name="arrayIndex" /> alla fine del parametro <paramref name="array" /> di destinazione.  
In alternativa 
Non è possibile eseguire il cast automatico di <paramref name="T" /> del tipo sul tipo della <paramref name="array" /> di destinazione.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.Count">
      <summary>Ottiene il numero di elementi nella raccolta.</summary>
      <returns>Numero di elementi nella raccolta.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns>Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="item">Oggetto da aggiungere alla raccolta.</param>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary>Determina se la raccolta contiene un valore specifico.</summary>
      <param name="item">Oggetto da individuare nella raccolta.</param>
      <returns>
        <see langword="true" /> se <paramref name="item" /> è presente nella raccolta; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary>Ottiene un valore che indica se la raccolta è di sola lettura.</summary>
      <returns>
        <see langword="true" /> in tutti i casi.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary>Genera un'eccezione <see cref="T:System.NotSupportedException" /> in tutti i casi.</summary>
      <param name="item">Oggetto da rimuovere dalla raccolta.</param>
      <returns>
        <see langword="true" /> se l'oggetto <paramref name="item" /> è stato rimosso correttamente dalla raccolta; in caso contrario, <see langword="false" />. Questo metodo restituisce <see langword="false" /> anche se l'elemento non viene trovato nella raccolta originale.</returns>
      <exception cref="T:System.NotSupportedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia gli elementi della raccolta in una matrice, a partire da un determinato indice della matrice.</summary>
      <param name="array">Matrice unidimensionale che rappresenta la destinazione degli elementi copiati dalla raccolta. La matrice deve avere un'indicizzazione in base zero.</param>
      <param name="index">Indice in base zero in <paramref name="array" /> in corrispondenza del quale viene avviata la copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> è minore di 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> è multidimensionale.  
In alternativa 
Il numero degli elementi nella raccolta di origine è maggiore dello spazio disponibile da <paramref name="index" /> alla fine del parametro <paramref name="array" /> di destinazione.</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Ottiene un valore che indica se l'accesso alla raccolta è sincronizzato (thread-safe).</summary>
      <returns>
        <see langword="true" /> se l'accesso alla raccolta è sincronizzato (thread-safe), altrimenti <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>Ottiene un oggetto che può essere usato per sincronizzare l'accesso alla raccolta.</summary>
      <returns>Oggetto che può essere usato per sincronizzare l'accesso alla raccolta.</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Restituisce un enumeratore che consente di scorrere la raccolta.</summary>
      <returns>Enumeratore che può essere usato per scorrere la raccolta.</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyDictionary`2.Values">
      <summary>Ottiene una raccolta contenente i valori presenti nel dizionario.</summary>
      <returns>Raccolta che contiene i valori dell'oggetto che implementa <see cref="T:System.Collections.ObjectModel.ReadOnlyDictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1">
      <summary>Rappresenta un oggetto <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> in sola lettura.</summary>
      <typeparam name="T">Tipo di elementi contenuti nella raccolta.</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" /> che funge da wrapper per l'oggetto <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> specificato.</summary>
      <param name="list">Oggetto <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> con cui creare questa istanza della classe <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> è <see langword="null" />.</exception>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged">
      <summary>Si verifica in seguito all'aggiunta o alla rimozione di un elemento.</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>Genera l'evento <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged" /> utilizzando gli argomenti specificati.</summary>
      <param name="args">Argomenti dell'evento da generare.</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>Genera l'evento <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged" /> utilizzando gli argomenti specificati.</summary>
      <param name="args">Argomenti dell'evento da generare.</param>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged">
      <summary>Generato quando il valore di una proprietà cambia.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>Si verifica quando la raccolta cambia.</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Generato quando il valore di una proprietà cambia.</summary>
    </member>
    <member name="T:System.Collections.Specialized.INotifyCollectionChanged">
      <summary>Notifica ai listener le modifiche dinamiche, ad esempio l'eventuale aggiunta e rimozione di un elemento o la cancellazione dell'intero elenco.</summary>
    </member>
    <member name="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged">
      <summary>Si verifica quando la raccolta cambia.</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedAction">
      <summary>Descrive l'azione che ha causato un evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add">
      <summary>Un elemento è stato aggiunto alla raccolta.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move">
      <summary>Un elemento è stato spostato all'interno della raccolta.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove">
      <summary>Un elemento è stato rimosso dalla raccolta.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace">
      <summary>Un elemento è stato sostituito nella raccolta.</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset">
      <summary>Il contenuto della raccolta è stato cancellato.</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs">
      <summary>Fornisce dati per l'evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> che descrive una modifica di <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />.</summary>
      <param name="action">Azione che ha causato l'evento. È necessario impostare questo parametro su <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />.</param>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> che descrive una modifica di più elementi.</summary>
      <param name="action">Azione che ha causato l'evento. Le impostazioni possibili sono <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" />o <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItems">Elementi interessati dalla modifica.</param>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> che descrive una modifica <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> di più elementi.</summary>
      <param name="action">Azione che ha causato l'evento. È possibile impostare questo parametro solo su <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItems">Elementi nuovi che sostituiscono gli elementi originali.</param>
      <param name="oldItems">Elementi originali sostituiti.</param>
      <exception cref="T:System.ArgumentException">Se <paramref name="action" /> non è Replace.</exception>
      <exception cref="T:System.ArgumentNullException">Se <paramref name="oldItems" /> o <paramref name="newItems" /> è null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> che descrive una modifica <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> di più elementi.</summary>
      <param name="action">Azione che ha causato l'evento. È possibile impostare questo parametro solo su <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItems">Elementi nuovi che sostituiscono gli elementi originali.</param>
      <param name="oldItems">Elementi originali sostituiti.</param>
      <param name="startingIndex">Indice del primo elemento degli elementi che vengono sostituiti.</param>
      <exception cref="T:System.ArgumentException">Se <paramref name="action" /> non è Replace.</exception>
      <exception cref="T:System.ArgumentNullException">Se <paramref name="oldItems" /> o <paramref name="newItems" /> è null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> che descrive una modifica di più elementi o una modifica di <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />.</summary>
      <param name="action">Azione che ha causato l'evento. È possibile impostare questo parametro su <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> o <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItems">Elementi interessati dalla modifica.</param>
      <param name="startingIndex">Indice in corrispondenza del quale è stata apportata la modifica.</param>
      <exception cref="T:System.ArgumentException">Se <paramref name="action" /> non è Reset, Add o Remove, se <paramref name="action" /> è Reset e <paramref name="changedItems" /> non è null o <paramref name="startingIndex" /> non è -1 oppure se l'azione è Add o Remove e <paramref name="startingIndex" /> è inferiore a -1.</exception>
      <exception cref="T:System.ArgumentNullException">Se <paramref name="action" /> è Add o Remove e <paramref name="changedItems" /> è null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> che descrive una modifica <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> di più elementi.</summary>
      <param name="action">Azione che ha causato l'evento. L'unica impostazione possibile è <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />.</param>
      <param name="changedItems">Elementi interessati dalla modifica.</param>
      <param name="index">Indice nuovo per gli elementi modificati.</param>
      <param name="oldIndex">Indice precedente per gli elementi modificati.</param>
      <exception cref="T:System.ArgumentException">Se <paramref name="action" /> non è Move o <paramref name="index" /> è minore di 0.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> che descrive una modifica di un elemento.</summary>
      <param name="action">Azione che ha causato l'evento. È possibile impostare questo parametro su <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> o <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItem">Elemento interessato dalla modifica.</param>
      <exception cref="T:System.ArgumentException">Se <paramref name="action" /> non è Reset, Add o Remove o se <paramref name="action" /> è Reset e <paramref name="changedItem" /> non è null.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> che descrive una modifica di un elemento.</summary>
      <param name="action">Azione che ha causato l'evento. È possibile impostare questo parametro su <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />, <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> o <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />.</param>
      <param name="changedItem">Elemento interessato dalla modifica.</param>
      <param name="index">Indice in corrispondenza del quale è stata apportata la modifica.</param>
      <exception cref="T:System.ArgumentException">Se <paramref name="action" /> non è Reset, Add o Remove o se <paramref name="action" /> è Reset e <paramref name="changedItems" /> non è null o <paramref name="index" /> non è -1.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> che descrive una modifica <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> di un elemento.</summary>
      <param name="action">Azione che ha causato l'evento. È possibile impostare questo parametro solo su <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />.</param>
      <param name="changedItem">Elemento interessato dalla modifica.</param>
      <param name="index">Indice nuovo per l'elemento modificato.</param>
      <param name="oldIndex">Indice precedente per l'elemento modificato.</param>
      <exception cref="T:System.ArgumentException">Se <paramref name="action" /> non è Move o <paramref name="index" /> è minore di 0.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> che descrive una modifica <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> di un elemento.</summary>
      <param name="action">Azione che ha causato l'evento. È possibile impostare questo parametro solo su <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItem">Elemento nuovo che sostituisce l'elemento originale.</param>
      <param name="oldItem">Elemento originale sostituito.</param>
      <exception cref="T:System.ArgumentException">Se <paramref name="action" /> non è Replace.</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> che descrive una modifica <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> di un elemento.</summary>
      <param name="action">Azione che ha causato l'evento. È possibile impostare questo parametro su <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />.</param>
      <param name="newItem">Elemento nuovo che sostituisce l'elemento originale.</param>
      <param name="oldItem">Elemento originale sostituito.</param>
      <param name="index">Indice dell'elemento sostituito.</param>
      <exception cref="T:System.ArgumentException">Se <paramref name="action" /> non è Replace.</exception>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action">
      <summary>Ottiene l'azione che ha causato l'evento.</summary>
      <returns>Valore <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction" /> che descrive l'azione che ha causato l'evento.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems">
      <summary>Ottiene l'elenco di elementi nuovi interessati dalla modifica.</summary>
      <returns>Elenco di elementi nuovi interessati dalla modifica.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex">
      <summary>Ottiene l'indice in corrispondenza del quale è stata eseguita la modifica.</summary>
      <returns>Indice in base zero in corrispondenza del quale è stata eseguita la modifica.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems">
      <summary>Ottiene l'elenco di elementi interessati da un'azione <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />, Remove o Move.</summary>
      <returns>Elenco di elementi interessati da un'azione <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />, Remove o Move.</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex">
      <summary>Ottiene l'indice in corrispondenza del quale è stata eseguita un'azione <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />, Remove o Replace.</summary>
      <returns>Indice in base zero in corrispondenza del quale è stata eseguita un'azione <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />, Remove o Replace.</returns>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventHandler">
      <summary>Rappresenta il metodo che gestisce l'evento <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.</summary>
      <param name="sender">Oggetto che ha generato l'evento.</param>
      <param name="e">Informazioni sull'evento.</param>
    </member>
    <member name="T:System.ComponentModel.DataErrorsChangedEventArgs">
      <summary>Fornisce dati per l'evento <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.DataErrorsChangedEventArgs.#ctor(System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.DataErrorsChangedEventArgs" />.</summary>
      <param name="propertyName">Nome della proprietà che contiene un errore.  <see langword="null" /> o <see cref="F:System.String.Empty" /> se l'errore è a livello di oggetto.</param>
    </member>
    <member name="P:System.ComponentModel.DataErrorsChangedEventArgs.PropertyName">
      <summary>Ottiene il nome della proprietà che contiene un errore.</summary>
      <returns>Nome della proprietà che contiene un errore. <see langword="null" /> o <see cref="F:System.String.Empty" /> se l'errore è a livello di oggetto.</returns>
    </member>
    <member name="T:System.ComponentModel.INotifyDataErrorInfo">
      <summary>Definisce i membri che le classi di entità dati possono implementare per fornire un supporto di convalida sincrono e asincrono personalizzato.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged">
      <summary>Si verifica quando gli errori di convalida cambiano per una proprietà o per l'intera entità.</summary>
    </member>
    <member name="M:System.ComponentModel.INotifyDataErrorInfo.GetErrors(System.String)">
      <summary>Ottiene gli errori di convalida per una proprietà specificata o per l'intera entità.</summary>
      <param name="propertyName">Nome della proprietà per cui recuperare gli errori di convalida, oppure <see langword="null" /> o <see cref="F:System.String.Empty" />, per recuperare errori a livello di entità.</param>
      <returns>Errori di convalida per la proprietà o per l'entità.</returns>
    </member>
    <member name="P:System.ComponentModel.INotifyDataErrorInfo.HasErrors">
      <summary>Ottiene un valore che indica se l'entità presenta errori di convalida.</summary>
      <returns>
        <see langword="true" /> se l'entità presenta attualmente errori di convalida; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanged">
      <summary>Notifica i client che il valore di una proprietà è cambiato.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
      <summary>Generato quando il valore di una proprietà cambia.</summary>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanging">
      <summary>Notifica ai client che il valore di una proprietà è in fase di modifica.</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging">
      <summary>Si verifica quando il valore di una proprietà è in corso di modifica.</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventArgs">
      <summary>Fornisce dati per l'evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventArgs.#ctor(System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />.</summary>
      <param name="propertyName">Nome della proprietà modificata.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName">
      <summary>Ottiene il nome della proprietà modificata.</summary>
      <returns>Nome della proprietà modificata.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventHandler">
      <summary>Rappresenta il metodo tramite il quale verrà gestito l'evento <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> generato quando viene modificata una proprietà su un componente.</summary>
      <param name="sender">Origine dell'evento.</param>
      <param name="e">Oggetto <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> che contiene i dati dell'evento.</param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventArgs">
      <summary>Fornisce dati per l'evento <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" />.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangingEventArgs.#ctor(System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.PropertyChangingEventArgs" />.</summary>
      <param name="propertyName">Nome della proprietà il cui valore è in fase di modifica.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyChangingEventArgs.PropertyName">
      <summary>Ottiene il nome della proprietà il cui valore è in fase di modifica.</summary>
      <returns>Nome della proprietà il cui valore è in fase di modifica.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventHandler">
      <summary>Rappresenta il metodo da cui verrà gestito l'evento <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" /> di un'interfaccia <see cref="T:System.ComponentModel.INotifyPropertyChanging" />.</summary>
      <param name="sender">Origine dell'evento.</param>
      <param name="e">Oggetto <see cref="T:System.ComponentModel.PropertyChangingEventArgs" /> che contiene i dati dell'evento.</param>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>Specifica il tipo da utilizzare come convertitore per l'oggetto a cui l'attributo è associato.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.TypeConverterAttribute" /> con il convertitore di tipi predefinito, ovvero una stringa vuota ("").</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.TypeConverterAttribute" />, utilizzando il nome del tipo specificato come convertitore di dati per l'oggetto a cui è associato questo attributo.</summary>
      <param name="typeName">Nome completo della classe da utilizzare per la conversione dei dati per l'oggetto a cui è associato questo attributo.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.TypeConverterAttribute" />, utilizzando il nome del tipo specificato come convertitore di dati per l'oggetto a cui è associato questo attributo.</summary>
      <param name="type">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo della classe del convertitore da utilizzare per la conversione dei dati per l'oggetto a cui è associato questo attributo.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>Ottiene il nome di tipo completo dell'oggetto <see cref="T:System.Type" /> da utilizzare come convertitore per l'oggetto a cui è associato questo attributo.</summary>
      <returns>Nome di tipo completo dell'oggetto <see cref="T:System.Type" /> da utilizzare come convertitore per l'oggetto a cui è associato questo attributo o, in mancanza, una stringa vuota (""). Il valore predefinito è una stringa vuota ("").</returns>
    </member>
    <member name="F:System.ComponentModel.TypeConverterAttribute.Default">
      <summary>Specifica il tipo da utilizzare come convertitore per l'oggetto a cui è associato questo attributo.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)">
      <summary>Specifica se il valore dell'oggetto specificato è uguale all'oggetto <see cref="T:System.ComponentModel.TypeConverterAttribute" /> corrente.</summary>
      <param name="obj">Oggetto di cui va verificata l'uguaglianza di valore.</param>
      <returns>
        <see langword="true" /> se il valore dell'oggetto specificato è uguale a quello dell'oggetto corrente <see cref="T:System.ComponentModel.TypeConverterAttribute" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.GetHashCode">
      <summary>Restituisce il codice hash per l'istanza.</summary>
      <returns>Codice hash per l'oggetto <see cref="T:System.ComponentModel.TypeConverterAttribute" /> corrente.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProviderAttribute">
      <summary>Specifica il provider della descrizione dei tipi personalizzato per una classe. Questa classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> utilizzando il nome del tipo specificato.</summary>
      <param name="typeName">Nome completo del tipo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.Type)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> utilizzando il tipo specificato.</summary>
      <param name="type">Tipo da archiviare nell'attributo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptionProviderAttribute.TypeName">
      <summary>Ottiene il nome del tipo per il provider della descrizione dei tipi.</summary>
      <returns>Oggetto <see cref="T:System.String" /> contenente il nome completo del tipo per l'oggetto <see cref="T:System.ComponentModel.TypeDescriptionProvider" />.</returns>
    </member>
    <member name="T:System.Reflection.ICustomTypeProvider">
      <summary>Rappresenta un oggetto che fornisce un tipo personalizzato.</summary>
    </member>
    <member name="M:System.Reflection.ICustomTypeProvider.GetCustomType">
      <summary>Ottiene il tipo personalizzato fornito da questo oggetto.</summary>
      <returns>Tipo personalizzato.</returns>
    </member>
    <member name="T:System.Windows.Input.ICommand">
      <summary>Definisce un comando.</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
      <summary>Definisce il metodo che determina se il comando può essere eseguito nello stato corrente.</summary>
      <param name="parameter">Dati usati dal comando.  Se il comando non richiede dati da passare, questo oggetto può essere impostato su <see langword="null" />.</param>
      <returns>
        <see langword="true" /> se il comando può essere eseguito. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="E:System.Windows.Input.ICommand.CanExecuteChanged">
      <summary>Si verifica quando ci sono modifiche che determinano se il comando deve o meno essere eseguito.</summary>
    </member>
    <member name="M:System.Windows.Input.ICommand.Execute(System.Object)">
      <summary>Definisce il metodo da chiamare quando il comando viene richiamato.</summary>
      <param name="parameter">Dati usati dal comando.  Se il comando non richiede dati da passare, questo oggetto può essere impostato su <see langword="null" />.</param>
    </member>
    <member name="T:System.Windows.Markup.ValueSerializerAttribute">
      <summary>Identifica la classe <see cref="T:System.Windows.Markup.ValueSerializer" /> che un tipo o una proprietà deve utilizzare in caso di serializzazione.</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> utilizzando una stringa del nome completo del tipo di assembly.</summary>
      <param name="valueSerializerTypeName">Stringa di nome completo del tipo di assembly da utilizzare per la classe <see cref="T:System.Windows.Markup.ValueSerializer" />.</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.Type)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> utilizzando il tipo specificato.</summary>
      <param name="valueSerializerType">Tipo che rappresenta il tipo della classe <see cref="T:System.Windows.Markup.ValueSerializer" />.</param>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerType">
      <summary>Ottiene il tipo della classe <see cref="T:System.Windows.Markup.ValueSerializer" /> indicato da questo attributo.</summary>
      <returns>Tipo di <see cref="T:System.Windows.Markup.ValueSerializer" />.</returns>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerTypeName">
      <summary>Ottiene il nome completo di assembly del tipo <see cref="T:System.Windows.Markup.ValueSerializer" /> per questo tipo o proprietà.</summary>
      <returns>Nome completo di assembly del tipo.</returns>
    </member>
  </members>
</doc>
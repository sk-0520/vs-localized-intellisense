<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.InteropServices</name>
  </assembly>
  <members>
    <member name="T:System.DataMisalignedException">
      <summary>データの単位が、データ サイズの倍数ではないアドレスから読み込まれたり、アドレスに書き込まれたりしたときにスローされる例外。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor">
      <summary>
        <see cref="T:System.DataMisalignedException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.DataMisalignedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを記述する <see cref="T:System.String" /> オブジェクト。 <paramref name="message" /> の内容は、ユーザーが理解できる内容にします。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと基になる例外を使用して、<see cref="T:System.DataMisalignedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを記述する <see cref="T:System.String" /> オブジェクト。 <paramref name="message" /> の内容は、ユーザーが理解できる内容にします。 このコンストラクターの呼び出し元は、この文字列が現在のシステムのカルチャに合わせてローカライズ済みであることを確認しておく必要があります。</param>
      <param name="innerException">現在の <see cref="T:System.DataMisalignedException" /> の原因である例外。 <paramref name="innerException" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.DllNotFoundException">
      <summary>DLL インポートで指定した DLL が見つからない場合にスローされる例外。</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor">
      <summary>
        <see cref="T:System.DllNotFoundException" /> クラスの新しいインスタンスを、既定のプロパティを使用して初期化します。</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータを使用して、<see cref="T:System.DllNotFoundException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">スローされている例外に関するシリアル化済みオブジェクト データを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">転送元または転送先についてのコンテキスト情報を含む <see cref="T:System.Runtime.Serialization.StreamingContext" /> です。</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.DllNotFoundException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.DllNotFoundException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner">現在の例外の原因となった例外。 <paramref name="inner" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.IO.UnmanagedMemoryAccessor">
      <summary>メモリのアンマネージド ブロックにマネージド コードからランダムにアクセスできるようにします。</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor">
      <summary>
        <see cref="T:System.IO.UnmanagedMemoryAccessor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary>指定されたバッファー、オフセット、および容量を使用して、<see cref="T:System.IO.UnmanagedMemoryAccessor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="buffer">アクセサーを格納するバッファー。</param>
      <param name="offset">アクセサーの開始位置のバイト。</param>
      <param name="capacity">割り当てるメモリのサイズ (バイト単位)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> に <paramref name="capacity" /> を加算した値が <paramref name="buffer" /> を超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> または <paramref name="capacity" /> が 0 未満です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="offset" /> に <paramref name="capacity" /> を加算した値は、アドレス空間の最大値をラップします。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>指定されたバッファー、オフセット、容量、およびアクセス権を使用して、<see cref="T:System.IO.UnmanagedMemoryAccessor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="buffer">アクセサーを格納するバッファー。</param>
      <param name="offset">アクセサーの開始位置のバイト。</param>
      <param name="capacity">割り当てるメモリのサイズ (バイト単位)。</param>
      <param name="access">メモリに対して許可されているアクセス権の種類。 既定値は、<see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" /> です。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> に <paramref name="capacity" /> を加算した値が <paramref name="buffer" /> を超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> または <paramref name="capacity" /> が 0 未満です。  

または - 
<paramref name="access" /> が有効な <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 列挙値ではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="offset" /> に <paramref name="capacity" /> を加算した値は、アドレス空間の最大値をラップします。</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanRead">
      <summary>アクセサーが読み取り可能かどうかを決定します。</summary>
      <returns>アクセサーが読み取り可能な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanWrite">
      <summary>アクセサーが書き込み可能かどうかを決定します。</summary>
      <returns>アクセサーが書き込み可能な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.Capacity">
      <summary>アクセサーの容量を取得します。</summary>
      <returns>アクセサーの容量。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose">
      <summary>
        <see cref="T:System.IO.UnmanagedMemoryAccessor" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.IO.UnmanagedMemoryAccessor" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>アクセサーの初期値を設定します。</summary>
      <param name="buffer">アクセサーを格納するバッファー。</param>
      <param name="offset">アクセサーの開始位置のバイト。</param>
      <param name="capacity">割り当てるメモリのサイズ (バイト単位)。</param>
      <param name="access">メモリに対して許可されているアクセス権の種類。 既定値は、<see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" /> です。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> に <paramref name="capacity" /> を加算した値が <paramref name="buffer" /> を超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> または <paramref name="capacity" /> が 0 未満です。  

または - 
<paramref name="access" /> が有効な <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> 列挙値ではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="offset" /> に <paramref name="capacity" /> を加算した値は、アドレス空間の最大値をラップします。</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.IsOpen">
      <summary>現在、アクセサーがプロセスによって開かれているかどうかを確認します。</summary>
      <returns>アクセサーが開かれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)">
      <summary>アクセサーから指定された参照に <paramref name="T" /> 型の構造体を読み取ります。</summary>
      <param name="position">アクセサー内の読み取り開始位置。</param>
      <param name="structure">読み取りデータが格納されている構造体。</param>
      <typeparam name="T">構造体の型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 型の構造体で読み取るための <paramref name="T" /> の後のバイト数が不足しています。  

または - 
<see langword="T" /> は 1 つ以上の参照型を含む値型です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary>アクセサーから <paramref name="T" /> 型の配列に <paramref name="T" /> 型の構造体を読み取ります。</summary>
      <param name="position">アクセサーの読み取り開始位置 (バイト数)。</param>
      <param name="array">アクセサーから読み取った構造体を格納する配列。</param>
      <param name="offset">最初にコピーされた構造体を配置する <paramref name="array" /> 内のインデックス。</param>
      <param name="count">アクセサーから読み取る <c>T</c> 型の構造体の数。</param>
      <typeparam name="T">構造体の型。</typeparam>
      <returns>
        <paramref name="array" /> に読み取った構造体の数。 構造体の数が <paramref name="count" /> よりも少ない場合、戻り値は count よりも小さくなります。また、アクセサーの末尾に到達した場合は 0 が返されます。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が、構造体の <paramref name="count" /> (<paramref name="position" /> から開始) を格納するのに十分な大きさではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)">
      <summary>アクセサーからブール値を読み取ります。</summary>
      <param name="position">アクセサーの読み取り開始位置 (バイト数)。</param>
      <returns>
        <see langword="true" /> または <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)">
      <summary>アクセサーからバイト値を読み取ります。</summary>
      <param name="position">アクセサーの読み取り開始位置 (バイト数)。</param>
      <returns>読み取られた値。</returns>
      <exception cref="T:System.ArgumentException">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)">
      <summary>アクセサーから文字を読み取ります。</summary>
      <param name="position">アクセサーの読み取り開始位置 (バイト数)。</param>
      <returns>読み取られた値。</returns>
      <exception cref="T:System.ArgumentException">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)">
      <summary>アクセサーから 10 進値を読み取ります。</summary>
      <param name="position">アクセサーの読み取り開始位置 (バイト数)。</param>
      <returns>読み取られた値。</returns>
      <exception cref="T:System.ArgumentException">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。  

または - 
読み取る 10 進数が無効です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)">
      <summary>アクセサーから倍精度浮動小数点値を読み取ります。</summary>
      <param name="position">アクセサーの読み取り開始位置 (バイト数)。</param>
      <returns>読み取られた値。</returns>
      <exception cref="T:System.ArgumentException">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)">
      <summary>アクセサーから 16 ビットの整数を読み取ります。</summary>
      <param name="position">アクセサーの読み取り開始位置 (バイト数)。</param>
      <returns>読み取られた値。</returns>
      <exception cref="T:System.ArgumentException">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)">
      <summary>アクセサーから 32 ビットの整数を読み取ります。</summary>
      <param name="position">アクセサーの読み取り開始位置 (バイト数)。</param>
      <returns>読み取られた値。</returns>
      <exception cref="T:System.ArgumentException">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)">
      <summary>アクセサーから 64 ビットの整数を読み取ります。</summary>
      <param name="position">アクセサーの読み取り開始位置 (バイト数)。</param>
      <returns>読み取られた値。</returns>
      <exception cref="T:System.ArgumentException">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)">
      <summary>アクセサーから 8 ビットの符号付き整数を読み取ります。</summary>
      <param name="position">アクセサーの読み取り開始位置 (バイト数)。</param>
      <returns>読み取られた値。</returns>
      <exception cref="T:System.ArgumentException">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)">
      <summary>アクセサーから単精度浮動小数点値を読み取ります。</summary>
      <param name="position">アクセサーの読み取り開始位置 (バイト数)。</param>
      <returns>読み取られた値。</returns>
      <exception cref="T:System.ArgumentException">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)">
      <summary>アクセサーから 16 ビットの符号なし整数を読み取ります。</summary>
      <param name="position">アクセサーの読み取り開始位置 (バイト数)。</param>
      <returns>読み取られた値。</returns>
      <exception cref="T:System.ArgumentException">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)">
      <summary>アクセサーから 32 ビットの符号なし整数を読み取ります。</summary>
      <param name="position">アクセサーの読み取り開始位置 (バイト数)。</param>
      <returns>読み取られた値。</returns>
      <exception cref="T:System.ArgumentException">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)">
      <summary>アクセサーから 64 ビットの符号なし整数を読み取ります。</summary>
      <param name="position">アクセサーの読み取り開始位置 (バイト数)。</param>
      <returns>読み取られた値。</returns>
      <exception cref="T:System.ArgumentException">値を読み取るための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが読み取りをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)">
      <summary>アクセサーにブール値を書き込みます。</summary>
      <param name="position">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value">書き込む値。</param>
      <exception cref="T:System.ArgumentException">値を書き込むための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)">
      <summary>アクセサーにバイト値を書き込みます。</summary>
      <param name="position">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value">書き込む値。</param>
      <exception cref="T:System.ArgumentException">値を書き込むための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)">
      <summary>アクセサーに文字を書き込みます。</summary>
      <param name="position">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value">書き込む値。</param>
      <exception cref="T:System.ArgumentException">値を書き込むための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)">
      <summary>アクセサーに 10 進値を書き込みます。</summary>
      <param name="position">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value">書き込む値。</param>
      <exception cref="T:System.ArgumentException">値を書き込むための <paramref name="position" /> の後のバイト数が不足しています。  
または 
10 進数が無効です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)">
      <summary>アクセサーに <see langword="Double" /> 値を書き込みます。</summary>
      <param name="position">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value">書き込む値。</param>
      <exception cref="T:System.ArgumentException">値を書き込むための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)">
      <summary>アクセサーに 16 ビットの整数を書き込みます。</summary>
      <param name="position">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value">書き込む値。</param>
      <exception cref="T:System.ArgumentException">値を書き込むための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)">
      <summary>アクセサーに 32 ビットの整数を書き込みます。</summary>
      <param name="position">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value">書き込む値。</param>
      <exception cref="T:System.ArgumentException">値を書き込むための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)">
      <summary>アクセサーに 64 ビットの整数を書き込みます。</summary>
      <param name="position">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value">書き込む値。</param>
      <exception cref="T:System.ArgumentException">値を書き込むための position の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)">
      <summary>アクセサーに 8 ビットの整数を書き込みます。</summary>
      <param name="position">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value">書き込む値。</param>
      <exception cref="T:System.ArgumentException">値を書き込むための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)">
      <summary>アクセサーに <see langword="Single" /> を書き込みます。</summary>
      <param name="position">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value">書き込む値。</param>
      <exception cref="T:System.ArgumentException">値を書き込むための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)">
      <summary>アクセサーに 16 ビットの符号なし整数を書き込みます。</summary>
      <param name="position">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value">書き込む値。</param>
      <exception cref="T:System.ArgumentException">値を書き込むための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)">
      <summary>アクセサーに 32 ビットの符号なし整数を書き込みます。</summary>
      <param name="position">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value">書き込む値。</param>
      <exception cref="T:System.ArgumentException">値を書き込むための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)">
      <summary>アクセサーに 64 ビットの符号なし整数を書き込みます。</summary>
      <param name="position">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="value">書き込む値。</param>
      <exception cref="T:System.ArgumentException">値を書き込むための <paramref name="position" /> の後のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)">
      <summary>アクセサーに構造体を書き込みます。</summary>
      <param name="position">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="structure">書き込む構造体。</param>
      <typeparam name="T">構造体の型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> 型の構造体を書き込むための <paramref name="T" /> の後のアクセサー内のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary>
        <paramref name="T" /> 型の配列からアクセサーに構造体を書き込みます。</summary>
      <param name="position">アクセサーの書き込み開始位置 (バイト数)。</param>
      <param name="array">アクセサーに書き込む配列。</param>
      <param name="offset">書き込みの開始位置を示す、<paramref name="array" /> のインデックス。</param>
      <param name="count">書き込む <paramref name="array" /> 内の構造体の数。</param>
      <typeparam name="T">構造体の型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="position" /> で指定された構造体の数を書き込むための、<paramref name="count" /> の後のアクセサー内のバイト数が不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> が、0 未満か、アクセサーの容量を超えています。  
または 
 <paramref name="offset" /> または <paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">アクセサーが書き込みをサポートしていません。</exception>
      <exception cref="T:System.ObjectDisposedException">アクセサーは破棄されています。</exception>
    </member>
    <member name="T:System.IO.UnmanagedMemoryStream">
      <summary>マネージド コードからメモリのアンマネージド ブロックにアクセスできるようにします。</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor">
      <summary>
        <see cref="T:System.IO.UnmanagedMemoryStream" /> クラスの新しいインスタンスを初期化します。</summary>
      <exception cref="T:System.Security.SecurityException">ユーザーに必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)">
      <summary>指定した位置とメモリ長を使用して、<see cref="T:System.IO.UnmanagedMemoryStream" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="pointer">アンマネージ メモリ位置へのポインター。</param>
      <param name="length">使用するメモリの長さ。</param>
      <exception cref="T:System.Security.SecurityException">ユーザーに必要なアクセス許可がありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 値が 0 未満です。  

または - 
<paramref name="length" /> がオーバーフローの原因となりうる長さです。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>指定した位置、メモリ長、メモリ総量、およびファイル アクセス値を使用して、<see cref="T:System.IO.UnmanagedMemoryStream" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="pointer">アンマネージ メモリ位置へのポインター。</param>
      <param name="length">使用するメモリの長さ。</param>
      <param name="capacity">ストリームに割り当てられたメモリの総量。</param>
      <param name="access">
        <see cref="T:System.IO.FileAccess" /> 値のいずれか 1 つ。</param>
      <exception cref="T:System.Security.SecurityException">ユーザーに必要なアクセス許可がありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 値が 0 未満です。  

または - 
<paramref name="capacity" /> 値が 0 未満です。  

または - 
<paramref name="length" /> 値が <paramref name="capacity" /> 値を超えています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary>指定したオフセットおよび長さを使用して、セーフ バッファーに <see cref="T:System.IO.UnmanagedMemoryStream" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="buffer">アンマネージ メモリ ストリームを格納するバッファー。</param>
      <param name="offset">バッファー内のアンマネージ メモリ ストリームの開始バイト位置。</param>
      <param name="length">アンマネージ メモリ ストリームの長さ。</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>指定したオフセット、長さ、およびファイル アクセスを使用して、セーフ バッファーに <see cref="T:System.IO.UnmanagedMemoryStream" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="buffer">アンマネージ メモリ ストリームを格納するバッファー。</param>
      <param name="offset">バッファー内のアンマネージ メモリ ストリームの開始バイト位置。</param>
      <param name="length">アンマネージ メモリ ストリームの長さ。</param>
      <param name="access">アンマネージ メモリ ストリームへのファイル アクセスのモード。</param>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanRead">
      <summary>ストリームが読み取りをサポートしているかどうかを示す値を取得します。</summary>
      <returns>ストリームの読み取りが含まれていない <paramref name="access" /> パラメーターを持つコンストラクターによってオブジェクトが作成された場合、およびストリームが閉じている場合は <see langword="false" />。それ以外の場合は <see langword="true" />。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanSeek">
      <summary>ストリームがシークをサポートしているかどうかを示す値を取得します。</summary>
      <returns>ストリームが閉じている場合は <see langword="false" />。それ以外の場合は <see langword="true" />。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.CanWrite">
      <summary>ストリームが書き込みをサポートしているかどうかを示す値を取得します。</summary>
      <returns>書き込みをサポートする <paramref name="access" /> パラメーター値を持つコンストラクター、またはパラメーターを持たないコンストラクターによってオブジェクトが作成された場合、あるいはストリームが閉じている場合は <see langword="false" />。それ以外の場合は <see langword="true" />。</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Capacity">
      <summary>ストリームの長さ (サイズ)、またはストリームに割り当てられたメモリの総量 (容量) を取得します。</summary>
      <returns>ストリームのサイズまたは容量。</returns>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.IO.UnmanagedMemoryStream" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Flush">
      <summary>アクションが実行されないように、<see cref="M:System.IO.Stream.Flush" /> メソッドをオーバーライドします。</summary>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>指定した場合にオペレーションがキャンセルされるが他のアクションは実行されないように、<see cref="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)" /> メソッドをオーバーライドします。</summary>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期のフラッシュ操作を表すタスク。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>アンマネージ メモリ位置へのポインターを使用して、<see cref="T:System.IO.UnmanagedMemoryStream" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="pointer">アンマネージ メモリ位置へのポインター。</param>
      <param name="length">使用するメモリの長さ。</param>
      <param name="capacity">ストリームに割り当てられたメモリの総量。</param>
      <param name="access">
        <see cref="T:System.IO.FileAccess" /> 値のいずれか 1 つ。</param>
      <exception cref="T:System.Security.SecurityException">ユーザーに必要なアクセス許可がありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 値が 0 未満です。  

または - 
<paramref name="capacity" /> 値が 0 未満です。  

または 
<paramref name="length" /> 値がオーバーフローの原因になりうる長さです。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>指定したオフセット、長さ、およびファイル アクセスを使用して、セーフ バッファーに <see cref="T:System.IO.UnmanagedMemoryStream" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="buffer">アンマネージ メモリ ストリームを格納するバッファー。</param>
      <param name="offset">バッファー内のアンマネージ メモリ ストリームの開始バイト位置。</param>
      <param name="length">アンマネージ メモリ ストリームの長さ。</param>
      <param name="access">アンマネージ メモリ ストリームへのファイル アクセスのモード。</param>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Length">
      <summary>ストリーム内のデータ長を取得します。</summary>
      <returns>ストリーム内のデータ長。</returns>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.Position">
      <summary>ストリーム内の現在位置を取得または設定します。</summary>
      <returns>ストリームの現在の位置。</returns>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">位置が 0 未満の値に設定されています。または、位置が <see cref="F:System.Int32.MaxValue" /> を超えているか、現在のポインターに追加したときにオーバーフローが発生しました。</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryStream.PositionPointer">
      <summary>ストリーム内の現在位置に基づいて、ストリームへのバイト ポインターを取得または設定します。</summary>
      <returns>バイト ポインター。</returns>
      <exception cref="T:System.IndexOutOfRangeException">現在位置は、ストリームの容量を超えています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">設定されている位置は、現在のストリーム内の有効な位置ではありません。</exception>
      <exception cref="T:System.IO.IOException">ポインターがストリームの開始位置よりも低い値に設定されています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> で使用するためにストリームが初期化されました。 <see cref="P:System.IO.UnmanagedMemoryStream.PositionPointer" /> プロパティは、<see cref="T:System.Byte" /> ポインターで初期化されるストリームに対してのみ有効です。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>指定したバイト数を指定した配列に読み取ります。</summary>
      <param name="buffer">このメソッドが返されるときに、指定したバイト配列の <paramref name="offset" /> から (<paramref name="offset" /> + <paramref name="count" /> - 1) までの値が、現在のソースから読み取られたバイトに置き換えられます。 このパラメーターは初期化せずに渡されます。</param>
      <param name="offset">現在のストリームから読み取ったデータの格納を開始する位置を示す <paramref name="buffer" /> 内のバイト オフセット。インデックス番号は 0 から始まります。</param>
      <param name="count">現在のストリームから読み取る最大バイト数。</param>
      <returns>バッファーに読み取られた合計バイト数。 要求しただけのバイト数を読み取ることができなかった場合、この値は要求したバイト数より小さくなります。ストリームの末尾に到達した場合は 0 (ゼロ) になることがあります。</returns>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.NotSupportedException">基になるメモリが読み取りをサポートしていません。  

または - 
<see cref="P:System.IO.UnmanagedMemoryStream.CanRead" /> プロパティが <see langword="false" /> に設定されている。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> パラメーターを <see langword="null" /> に設定します。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> パラメーターが 0 未満。  
または 
<paramref name="count" /> パラメーターが 0 未満。</exception>
      <exception cref="T:System.ArgumentException">バッファー配列の長さから <paramref name="offset" /> パラメーターを引いた値が、<paramref name="count" /> パラメーター未満です。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Read(System.Span{System.Byte})">
      <summary>このアンマネージ メモリ ストリームのすべてのバイトを、指定したバイトの範囲に読み取ります。</summary>
      <param name="destination">このメソッドから制御が戻るときに、この範囲にはアンマネージ メモリ ストリームのすべてのバイトが含まれます。</param>
      <returns>同期先に読み取られた合計バイト数。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>指定したバイト数を指定した配列に非同期に読み取ります。</summary>
      <param name="buffer">データを書き込むバッファー。</param>
      <param name="offset">ストリームからのデータの書き込み開始位置を示す <paramref name="buffer" /> 内のバイト オフセット。</param>
      <param name="count">読み取る最大バイト数。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の読み取り操作を表すタスク。 <paramref name="TResult" /> パラメーターの値には、バッファーに読み込まれるバイトの合計数が含まれます。 現在使用できるバイト数が要求した数より小さい場合、結果の値は要求したバイト数より小さくなることがあります。また、ストリームの末尾に到達した場合は 0 になることがあります。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>アンマネージ メモリ ストリーム バイトをメモリ領域に非同期に読み取ります。</summary>
      <param name="buffer">非同期メソッドが完了すると、このメモリ領域にはアンマネージ メモリ ストリームから読み取られたすべてのバイトが含まれます。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の読み取り操作を表し、バッファーに読み取られたバイト数の合計をラップするタスク。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.ReadByte">
      <summary>ストリームから 1 バイトを読み取り、ストリーム内の位置を 1 バイト分進めます。ストリームの末尾の場合は -1 を返します。</summary>
      <returns>
        <see cref="T:System.Int32" /> オブジェクトにキャストされた符号なしバイト。ストリームの末尾の場合は -1。</returns>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.NotSupportedException">基になるメモリが読み取りをサポートしていません。  
または
 現在の位置はストリームの末尾です。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>現在のストリームの現在位置を、指定した値に設定します。</summary>
      <param name="offset">シークの開始位置 <c>origin</c> からの相対的なポイント。</param>
      <param name="loc">
        <see cref="T:System.IO.SeekOrigin" /> 型の値を使用して、<c>origin</c> の参照ポイントとして先頭、末尾、または現在位置を指定します。</param>
      <returns>ストリームの新しい位置。</returns>
      <exception cref="T:System.IO.IOException">ストリームの開始前に、シークしようとしました。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 値がストリームの最大サイズを超えています。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="loc" /> が無効です。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)">
      <summary>ストリーム長を、指定した値に設定します。</summary>
      <param name="value">ストリーム長。</param>
      <exception cref="T:System.IO.IOException">I/O エラーが発生しました。</exception>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.NotSupportedException">基になるメモリが書き込みをサポートしていません。  
または 
ストリームへの書き込みが行われようとしましたが、<see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> プロパティが <see langword="false" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定した <paramref name="value" /> がストリームの容量を超えています。  

または - 
指定した <paramref name="value" /> が負の値です。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>バッファーのデータを使用して、現在のストリームにバイトのブロックを書き込みます。</summary>
      <param name="buffer">現在のストリームにコピーするバイトのコピー元となるバイト配列。</param>
      <param name="offset">現在のストリームへのバイトのコピーを開始する位置のバッファーのオフセット。</param>
      <param name="count">現在のストリームに書き込むバイト数。</param>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.NotSupportedException">基になるメモリが書き込みをサポートしていません。  
または 
ストリームへの書き込みが行われようとしましたが、<see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> プロパティが <see langword="false" /> です。  

または - 
<paramref name="count" /> 値がストリームの容量を超えています。  

または - 
位置がストリーム容量の末尾です。</exception>
      <exception cref="T:System.IO.IOException">I/O エラーが発生します。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定したパラメーターのいずれかが 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> パラメーターから <paramref name="buffer" /> パラメーターの長さを引いた値が <paramref name="count" /> パラメーター未満です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>指定されたバイトの範囲のデータを使用して、現在のアンマネージ メモリ ストリームにバイトのブロックを書き込みます。</summary>
      <param name="source">現在のアンマネージ メモリ ストリームへのバイトのコピー元となるバイトの範囲。</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>現在のストリームにバイト シーケンスを非同期に書き込み、書き込んだバイト数だけストリーム内の現在位置を進め、キャンセル要求を監視します。</summary>
      <param name="buffer">データの書き込み元となるバッファー。</param>
      <param name="offset">ストリームへのバイトのコピーを開始する位置を示す <paramref name="buffer" /> 内のバイト オフセット。インデックス番号は 0 から始まります。</param>
      <param name="count">書き込む最大バイト数。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>現在のストリームにバイトの範囲を非同期で書き込み、書き込んだバイト数だけストリーム内の現在位置を進め、キャンセル要求を監視します。</summary>
      <param name="buffer">データの書き込み元となるバッファー。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <returns>非同期の書き込み操作を表すタスク。</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)">
      <summary>ファイル ストリームの現在位置にバイトを書き込みます。</summary>
      <param name="value">ストリームに書き込むバイト値。</param>
      <exception cref="T:System.ObjectDisposedException">ストリームは閉じられています。</exception>
      <exception cref="T:System.NotSupportedException">基になるメモリが書き込みをサポートしていません。  
または 
ストリームへの書き込みが行われようとしましたが、<see cref="P:System.IO.UnmanagedMemoryStream.CanWrite" /> プロパティが <see langword="false" /> です。  
または 
現在位置はストリームの容量の末尾です。</exception>
      <exception cref="T:System.IO.IOException">指定した <paramref name="value" /> によって、ストリームがその最大容量を超えることになります。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.IDispatchConstantAttribute">
      <summary>属性付きのフィールドまたはパラメーターの既定値が <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> のインスタンスであり、<see cref="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject" /> が <see langword="null" /> であることを示します。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IDispatchConstantAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.IDispatchConstantAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IDispatchConstantAttribute.Value">
      <summary>属性に格納されている <see langword="IDispatch" /> 定数を取得します。</summary>
      <returns>属性に格納されている <see langword="IDispatch" /> 定数。 <see langword="null" /> 定数値としては、<see langword="IDispatch" /> だけが許可されます。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IUnknownConstantAttribute">
      <summary>属性付きのフィールドまたはパラメーターの既定値が <see cref="T:System.Runtime.InteropServices.UnknownWrapper" /> のインスタンスであり、<see cref="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject" /> が <see langword="null" /> であることを示します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IUnknownConstantAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.CompilerServices.IUnknownConstantAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IUnknownConstantAttribute.Value">
      <summary>属性に格納されている <see langword="IUnknown" /> 定数を取得します。</summary>
      <returns>属性に格納されている <see langword="IUnknown" /> 定数。 <see langword="null" /> 定数値としては、<see langword="IUnknown" /> だけが許可されます。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute">
      <summary>アンマネージド メソッドがマネージド メソッドを呼び出せるようにします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ArrayWithOffset">
      <summary>指定した配列内の配列とオフセットをカプセル化します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.#ctor(System.Object,System.Int32)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="array">マネージド配列。</param>
      <param name="offset">プラットフォーム呼び出しによって渡される要素のオフセット (バイト単位)。</param>
      <exception cref="T:System.ArgumentException">配列は 2 GB を超えています。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)">
      <summary>指定したオブジェクトが現在の <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトに一致するかどうかを示します。</summary>
      <param name="obj">現在のインスタンスと比較する対象のオブジェクト。</param>
      <returns>オブジェクトが現在の <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> に一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>指定した <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトが現在のインスタンスに一致するかどうかを示します。</summary>
      <param name="obj">このインスタンスと比較する <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクト。</param>
      <returns>指定された <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトが現在のインスタンスと一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetArray">
      <summary>
        <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> が参照するマネージド配列を返します。</summary>
      <returns>対象のインスタンスが参照するマネージド配列。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetHashCode">
      <summary>値型に対するハッシュ コードを返します。</summary>
      <returns>対象のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetOffset">
      <summary>
        <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> の構築時に指定されたオフセットを返します。</summary>
      <returns>対象のインスタンスのオフセット。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Equality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>指定した 2 つの <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトの値が同一かどうかを判断します。</summary>
      <param name="a">
        <paramref name="b" /> パラメーターと比較する <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクト。</param>
      <param name="b">
        <paramref name="a" /> パラメーターと比較する <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクト。</param>
      <returns>
        <paramref name="a" /> の値が <paramref name="b" /> の値と同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Inequality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>指定した 2 つの <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトの値が異なるかどうかを判断します。</summary>
      <param name="a">
        <paramref name="b" /> パラメーターと比較する <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクト。</param>
      <param name="b">
        <paramref name="a" /> パラメーターと比較する <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクト。</param>
      <returns>
        <paramref name="a" /> の値が <paramref name="b" /> の値と異なる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AutomationProxyAttribute">
      <summary>Automation Marshaler またはカスタムのプロキシとスタブを使用して、型をマーシャリングするかどうかを指定します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AutomationProxyAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.AutomationProxyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="val">Automation Marshaler を使用してクラスをマーシャリングする場合は <see langword="true" />。プロキシ スタブ マーシャラーを使用する場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.AutomationProxyAttribute.Value">
      <summary>使用するマーシャラーの種類を示す値を取得します。</summary>
      <returns>Automation Marshaler を使用してクラスをマーシャリングする場合は <see langword="true" />。プロキシ スタブ マーシャラーを使用する場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BestFitMappingAttribute">
      <summary>Unicode 文字を、その文字に一番近い ANSI 文字に変換するかどうかを制御します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BestFitMappingAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" /> プロパティの値を設定して、<see cref="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="BestFitMapping">最適マッピングが有効なことを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping">
      <summary>Unicode 文字を ANSI 文字に変換するときの、最適マッピングの動作を取得します。</summary>
      <returns>最適マッピングが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="F:System.Runtime.InteropServices.BestFitMappingAttribute.ThrowOnUnmappableChar">
      <summary>マップできない Unicode 文字 (ANSI の "?" に変換される文字) が見つかったときに、例外をスローするかどうかを指定します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.BStrWrapper">
      <summary>
        <see langword="VT_BSTR" /> 型のデータをマネージド コードからアンマネージド コードにマーシャリングします。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.Object)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> オブジェクトを指定して、<see cref="T:System.Object" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">ラップされ、<see langword="VT_BSTR" /> としてマーシャリングされるオブジェクト。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.String)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> オブジェクトを指定して、<see cref="T:System.String" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">ラップされ、<see langword="VT_BSTR" /> としてマーシャリングされるオブジェクト。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BStrWrapper.WrappedObject">
      <summary>
        <see langword="VT_BSTR" /> 型としてマーシャリングされる、ラップされた <see cref="T:System.String" /> オブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> によりラップされるオブジェクト。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CallingConvention">
      <summary>アンマネージ コードで実装されたメソッドを呼び出すために必要な呼び出し規約を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Cdecl">
      <summary>呼び出し元がスタックを消去します。 これを使用すると、<see langword="varargs" /> で関数を呼び出すことができます。<see langword="Printf" /> など、受け取るパラメーターの数が可変のメソッドで使用します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.FastCall">
      <summary>この呼び出し規約はサポートされていません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.StdCall">
      <summary>呼び出し先がスタックを消去します。 これは、プラットフォーム呼び出しでアンマネージ関数を呼び出すための既定の規約です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.ThisCall">
      <summary>最初のパラメーターは <see langword="this" /> ポインターで、レジスタ ECX に格納されます。 その他のパラメーターは、スタックにプッシュされます。 この呼び出し規約は、アンマネージ DLL からエクスポートしたクラスのメソッドを呼び出すために使用します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Winapi">
      <summary>このメンバーは実際には呼び出し規約ではありません。代わりに、既定のプラットフォーム呼び出し規約を使用します。 たとえば、Windows では <see cref="F:System.Runtime.InteropServices.CallingConvention.StdCall" />、Windows CE .NET では <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl" /> が既定値になります。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
      <summary>インターフェイスが生成される場合、COM に公開されているクラスに対して生成されるクラス インターフェイスの型を指定します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 列挙値を指定して、<see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="classInterfaceType">クラスに対して生成するインターフェイスの型について説明します。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
      <summary>指定した <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> 列挙体メンバーを使用して、<see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="classInterfaceType">クラスに対して生成するインターフェイスの型について説明する <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 値の 1 つ。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
      <summary>クラスに対して生成するインターフェイスの型について説明する <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 値を取得します。</summary>
      <returns>クラスに対して生成するインターフェイスの型について説明する <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> 値。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceType">
      <summary>クラスに対して生成するクラス インターフェイスの型を識別します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
      <summary>クラスが COM クライアントに対して遅延バインディングだけをサポートすることを示します。 クラスの <see langword="dispinterface" /> は、要求に応じて自動的に COM クライアントに公開されます。 Tlbexp.exe (Type Library Exporter) によって生成されるタイプ ライブラリには、<see langword="dispinterface" /> の型情報は含まれません。これは、クライアントがこのインターフェイスの DISPID をキャッシュしないようにするためです。 クライアントがこの <see langword="dispinterface" /> に対して実行できるのは遅延バインディングだけであるため、<see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> に示されているバージョン管理の問題は、このインターフェイスでは発生しません。
これは、<see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> の既定の設定です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
      <summary>クラスに対してデュアル クラス インターフェイスを自動的に生成し、COM に公開することを示します。 型情報は、クラス インターフェイスに対して作成され、タイプ ライブラリで公開されます。 <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> で説明したようなバージョン管理の制約があるため、<see langword="AutoDual" /> は使用しないことを強くお勧めします。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.None">
      <summary>クラスに対してクラス インターフェイスを生成しないことを示します。 インターフェイスを明示的に実装していないクラスには、<see langword="IDispatch" /> インターフェイスを通じた遅延バインディングによってしかアクセスできません。 これは、<see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> の推奨値です。 このクラスが明示的に実装しているインターフェイスを通じて機能を公開するには、<see langword="ClassInterfaceType.None" /> の使用が唯一の方法です。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CoClassAttribute">
      <summary>タイプ ライブラリからインポートされるコクラスのクラス ID を指定します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CoClassAttribute.#ctor(System.Type)">
      <summary>元のコクラスのクラス ID を使用して、<see cref="T:System.Runtime.InteropServices.CoClassAttribute" /> の新しいインスタンスを初期化します。</summary>
      <param name="coClass">元のコクラスのクラス ID を格納している <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.CoClassAttribute.CoClass">
      <summary>元のコクラスのクラス ID を取得します。</summary>
      <returns>元のコクラスのクラス ID を格納している <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAliasNameAttribute">
      <summary>パラメーターまたはフィールドの種類の COM エイリアスを示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAliasNameAttribute.#ctor(System.String)">
      <summary>属性フィールドまたはパラメーターのエイリアスを使用して、<see cref="T:System.Runtime.InteropServices.ComAliasNameAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="alias">インポートしたときにタイプ ライブラリに検出されたフィールドまたはパラメーターのエイリアス。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAliasNameAttribute.Value">
      <summary>インポートしたときにタイプ ライブラリに検出されたフィールドまたはパラメーターのエイリアスを取得します。</summary>
      <returns>インポートしたときにタイプ ライブラリに検出されたフィールドまたはパラメーターのエイリアス。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAwareEventInfo">
      <summary>イベント ハンドラーの遅延バインディング登録を許可します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
      <summary>指定された型およびその型のイベント名を使用して、<see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">オブジェクトの型。</param>
      <param name="eventName">
        <paramref name="type" /> のイベント名。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>イベント ハンドラーを COM オブジェクトにアタッチします。</summary>
      <param name="target">イベント デリゲートをバインドするターゲット オブジェクト。</param>
      <param name="handler">イベント デリゲート。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
      <summary>このイベントの属性を取得します。</summary>
      <returns>このイベントの読み取り専用属性。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
      <summary>このメンバーを宣言するクラスを取得します。</summary>
      <returns>このメンバーを宣言するクラスの <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
      <summary>イベント ハンドラー デリゲートをイベント ソースに追加するために使用されたメソッドを取得します。</summary>
      <param name="nonPublic">非パブリック メソッドを返す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>イベント ハンドラー デリゲートをイベント ソースに追加するために使用されたメソッド。</returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> が <see langword="true" /> で、イベント ハンドラー デリゲートの追加に使われたメソッドがパブリックではないが、呼び出し元が非パブリック メソッドに対するリフレクション アクセス許可を持っていません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
      <summary>派生クラスでオーバーライドされると、このメンバーに適用されているすべてのカスタム属性が格納されている配列を取得します。</summary>
      <param name="inherit">このメンバーの継承チェーンを検索して属性を見つける場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>すべてのカスタム属性が格納されている配列。定義されている属性がない場合は要素を持たない配列。</returns>
      <exception cref="T:System.InvalidOperationException">このメンバーは、リフレクションのみのコンテキストに読み込まれる型に属します。 「方法: リフレクションのみのコンテキストにアセンブリを読み込む」を参照してください。</exception>
      <exception cref="T:System.TypeLoadException">カスタム属性の型を読み込むことはできません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>派生クラスでオーバーライドされると、このメンバーに適用されている指定した型のすべてのカスタム属性が格納されている配列を取得します。</summary>
      <param name="attributeType">検索する属性の型。 この型に割り当てることができる属性だけが返されます。</param>
      <param name="inherit">このメンバーの継承チェーンを検索して属性を見つける場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>指定した型のすべてのカスタム属性が格納されている配列。定義されている属性がない場合は要素を持たない配列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">このメンバーは、リフレクションのみのコンテキストに読み込まれる型に属します。 「方法: リフレクションのみのコンテキストにアセンブリを読み込む」を参照してください。</exception>
      <exception cref="T:System.TypeLoadException">カスタム属性の型を読み込むことはできません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributesData">
      <summary>現在の <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> の <see cref="T:System.Reflection.CustomAttributeData" /> オブジェクトのリストを返します。</summary>
      <returns>現在の <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> に適用されている属性に関するデータを表す <see cref="T:System.Reflection.CustomAttributeData" /> オブジェクトのジェネリック リスト。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetOtherMethods(System.Boolean)">
      <summary>メタデータ内のイベントに関連付けられているパブリックまたは非パブリック メソッドを返します。</summary>
      <param name="nonPublic">非パブリック メソッドを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>メタデータ内のイベントに関連付けられているメソッドを表す配列。 そのようなメソッドがない場合は、空の配列が返されます。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
      <summary>派生クラスでオーバーライドされると、イベントの発生時に呼び出されたメソッドを返します。</summary>
      <param name="nonPublic">非パブリック メソッドを返す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>イベントの発生時に呼び出されたオブジェクト。</returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> が <see langword="true" /> で、イベント ハンドラー デリゲートの追加に使われたメソッドがパブリックではないが、呼び出し元が非パブリック メソッドに対するリフレクション アクセス許可を持っていません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
      <summary>派生クラスでオーバーライドされると、イベントのメソッドを削除するための <see cref="T:System.Reflection.MethodInfo" /> オブジェクトを取得します。</summary>
      <param name="nonPublic">非パブリック メソッドを返す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>イベント ハンドラー デリゲートをイベント ソースから削除するために使用されたメソッド。</returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> が <see langword="true" /> で、イベント ハンドラー デリゲートの追加に使われたメソッドがパブリックではないが、呼び出し元が非パブリック メソッドに対するリフレクション アクセス許可を持っていません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
      <summary>指定された属性型のインスタンスが 1 つ以上このメンバーに適用されているかどうかを示します。</summary>
      <param name="attributeType">検索する属性の型。</param>
      <param name="inherit">このメンバーの継承チェーンを検索して属性を見つける場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>指定された属性がこのメンバーに適用されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.MetadataToken">
      <summary>現在の <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> オブジェクトに関連付けられているメタデータ トークンを取得します。</summary>
      <returns>メタデータトークンを表す32ビット整数。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Module">
      <summary>現在の <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> オブジェクトに関連付けられているモジュールを取得します。</summary>
      <returns>現在<see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" />のオブジェクトに関連付けられているモジュール。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
      <summary>現在のメンバーの名前を取得します。</summary>
      <returns>このメンバーの名前。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
      <summary>このインスタンスを初期化するために使用されたクラス オブジェクトを取得します。</summary>
      <returns>現在のオブジェクトを初期化するために使用された <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>COM オブジェクトからイベント ハンドラーをデタッチします。</summary>
      <param name="target">イベント デリゲートをバインドするターゲット オブジェクト。</param>
      <param name="handler">イベント デリゲート。</param>
      <exception cref="T:System.InvalidOperationException">イベントにパブリック <see langword="remove" /> アクセサーがありません。</exception>
      <exception cref="T:System.ArgumentException">渡されたハンドラーは使用できません。</exception>
      <exception cref="T:System.Reflection.TargetException">Windows ストア アプリ用 .NET またはポータブル クラス ライブラリでは、<see cref="T:System.Exception" /> を代わりにキャッチします。  


            

 <paramref name="target" /> パラメーターは <see langword="null" /> で、イベントは静的でありません。  

または - 
<see cref="T:System.Reflection.EventInfo" /> はターゲットで宣言されていません。</exception>
      <exception cref="T:System.MethodAccessException">Windows ストア アプリ用 .NET またはポータブル クラス ライブラリでは、基本クラスの例外である <see cref="T:System.MemberAccessException" /> を代わりにキャッチします。  


            

 呼び出し元には、このメンバーに対するアクセス許可がありません。</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute">
      <summary>現在のバージョンのアセンブリ内のクラスはすべて、以前のバージョンのアセンブリ内のクラスと互換性があることを COM クライアントに対して示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComCompatibleVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>アセンブリのメジャー バージョン番号、マイナー バージョン番号、ビルド番号、およびリビジョン番号を指定して、<see cref="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="major">アセンブリのメジャー バージョン番号。</param>
      <param name="minor">アセンブリのマイナー バージョン番号。</param>
      <param name="build">アセンブリのビルド番号。</param>
      <param name="revision">アセンブリのリビジョン番号。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.BuildNumber">
      <summary>アセンブリのビルド番号を取得します。</summary>
      <returns>アセンブリのビルド番号。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MajorVersion">
      <summary>アセンブリのメジャー バージョン番号を取得します。</summary>
      <returns>アセンブリのメジャー バージョン番号。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MinorVersion">
      <summary>アセンブリのマイナー バージョン番号を取得します。</summary>
      <returns>アセンブリのマイナー バージョン番号。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.RevisionNumber">
      <summary>アセンブリのリビジョン番号を取得します。</summary>
      <returns>アセンブリのリビジョン番号。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComConversionLossAttribute">
      <summary>タイプ ライブラリからアセンブリにインポートしたときに、クラスまたはインターフェイスについての情報が失われたことを示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComConversionLossAttribute.#ctor">
      <summary>
        <see langword="ComConversionLossAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute">
      <summary>COM に公開する既定のインターフェイスを指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.#ctor(System.Type)">
      <summary>COM に公開する既定のインターフェイスとして <see cref="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute" /> オブジェクトを指定して、<see cref="T:System.Type" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="defaultInterface">COM に公開する既定のインターフェイスを示す <see cref="T:System.Type" /> 値。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.Value">
      <summary>COM に公開する既定のインターフェイスを指定する <see cref="T:System.Type" /> オブジェクトを取得します。</summary>
      <returns>COM に公開する既定のインターフェイスを指定する <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
      <summary>ソース インターフェイスと、コクラスが COM タイプ ライブラリからインポートされるときに生成されるイベント インターフェイスのメソッドを実装するクラスとを識別します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)">
      <summary>ソース インターフェイスとイベント プロバイダー クラスを指定して、<see cref="T:System.Runtime.InteropServices.ComEventInterfaceAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="SourceInterface">タイプ ライブラリからの元のソース インターフェイスを格納する <see cref="T:System.Type" />。 COM はこのインターフェイスを使用してマネージド クラスにコールバックします。</param>
      <param name="EventProvider">イベント インターフェイスのメソッドを実装するクラスを格納する <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
      <summary>イベント インターフェイスのメソッドを実装するクラスを取得します。</summary>
      <returns>イベント インターフェイスのメソッドを実装するクラスを格納する <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface">
      <summary>タイプ ライブラリから元のソース インターフェイスを取得します。</summary>
      <returns>ソース インターフェイスを格納している <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventsHelper">
      <summary>イベントを処理する .NET Framework デリゲートについて、COM オブジェクトとの間でその追加および削除を行うためのメソッドを提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Combine(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary>COM オブジェクトから生成されるイベントの呼び出しリストにデリゲートを追加します。</summary>
      <param name="rcw">呼び出し元が応答するイベントの発生元の COM オブジェクト。</param>
      <param name="iid">イベントを発生させるために COM オブジェクトによって使用されるソース インターフェイスの識別子。</param>
      <param name="dispid">ソース インターフェイスのメソッドのディスパッチ識別子。</param>
      <param name="d">COM イベントの発生時に呼び出すデリゲート。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Remove(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary>COM オブジェクトから生成されるイベントの呼び出しリストからデリゲートを削除します。</summary>
      <param name="rcw">デリゲートがアタッチされている COM オブジェクト。</param>
      <param name="iid">イベントを発生させるために COM オブジェクトによって使用されるソース インターフェイスの識別子。</param>
      <param name="dispid">ソース インターフェイスのメソッドのディスパッチ識別子。</param>
      <param name="d">呼び出しリストから削除するデリゲート。</param>
      <returns>呼び出しリストから削除されたデリゲート。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.COMException">
      <summary>COM メソッドの呼び出しによって、認識されない HRESULT が返された場合にスローされる例外。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor">
      <summary>
        <see cref="T:System.Runtime.InteropServices.COMException" /> クラスの新しいインスタンスを既定値で初期化します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化データから、<see cref="T:System.Runtime.InteropServices.COMException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持する <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報を提供する <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.Runtime.InteropServices.COMException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の理由を示すメッセージ。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Runtime.InteropServices.COMException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner">現在の例外の原因となった例外。 <paramref name="inner" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Int32)">
      <summary>指定したメッセージとエラー コードを使用して、<see cref="T:System.Runtime.InteropServices.COMException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外が発生した理由を示すメッセージ。</param>
      <param name="errorCode">この例外に関連付けられているエラー コード (HRESULT) 値。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.ToString">
      <summary>例外の内容を文字列に変換します。</summary>
      <returns>例外の <see cref="P:System.Exception.HResult" />、<see cref="P:System.Exception.Message" />、<see cref="P:System.Exception.InnerException" />、<see cref="P:System.Exception.StackTrace" /> の各プロパティを含んでいる文字列。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComImportAttribute">
      <summary>属性の型が以前に COM で定義されたことを示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComImportAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComInterfaceType">
      <summary>COM に対するインターフェイスの公開方法を識別します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual">
      <summary>このインターフェイスが COM にデュアル インターフェイスとして公開されることを示し、事前バインディングと遅延バインディングの両方を有効にします。 既定値は<see cref="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual" /> です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch">
      <summary>インターフェイスが COM に ディスパッチ インターフェイスとして公開されることを示し、遅延バインディングのみを有効にします。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIInspectable">
      <summary>インターフェイスが COM に Windows ランタイム インターフェイスとして公開されることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown">
      <summary>インターフェイスが COM に IUnknown から派生したインターフェイスとして公開されることを示し、事前バインディングのみを有効にします。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComMemberType">
      <summary>COM メンバーの型について説明します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.Method">
      <summary>メンバーは通常のメソッドです。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropGet">
      <summary>メンバーはプロパティを取得します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropSet">
      <summary>メンバーはプロパティを設定します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute">
      <summary>アセンブリを COM から使用できるように登録するときに呼び出すメソッドを指定します。これにより、登録処理中にユーザー記述のコードを実行できるようになります。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComRegisterFunctionAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute">
      <summary>属性付きクラスの COM イベント ソースとして公開されるインターフェイスのリストを識別します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.String)">
      <summary>イベント ソース インターフェイスの名前を指定して、<see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="sourceInterfaces">イベント ソース インターフェイスの完全修飾名の null 区切りリスト。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type)">
      <summary>ソース インターフェイスとして使用する型を指定して、<see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="sourceInterface">ソース インターフェイスの <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type)">
      <summary>ソース インターフェイスとして使用する型を指定して、<see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="sourceInterface1">既定のソース インターフェイスの <see cref="T:System.Type" />。</param>
      <param name="sourceInterface2">ソース インターフェイスの <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type)">
      <summary>ソース インターフェイスとして使用する型を指定して、<see langword="ComSourceInterfacesAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="sourceInterface1">既定のソース インターフェイスの <see cref="T:System.Type" />。</param>
      <param name="sourceInterface2">ソース インターフェイスの <see cref="T:System.Type" />。</param>
      <param name="sourceInterface3">ソース インターフェイスの <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type,System.Type)">
      <summary>ソース インターフェイスとして使用する型を指定して、<see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="sourceInterface1">既定のソース インターフェイスの <see cref="T:System.Type" />。</param>
      <param name="sourceInterface2">ソース インターフェイスの <see cref="T:System.Type" />。</param>
      <param name="sourceInterface3">ソース インターフェイスの <see cref="T:System.Type" />。</param>
      <param name="sourceInterface4">ソース インターフェイスの <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComSourceInterfacesAttribute.Value">
      <summary>イベント ソース インターフェイスの完全限定名を取得します。</summary>
      <returns>イベント ソース インターフェイスの完全限定名。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ADVF">
      <summary>オブジェクトを使用してアドバイズ シンクまたはキャッシュ コネクションを設定する場合に要求される動作を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_DATAONSTOP">
      <summary>データのアドバイザリ コネクションの場合に、データへのアクセシビリティを確保します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_NODATA">
      <summary>データのアドバイザリ コネクション (<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> または <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />) の場合、このフラグは、データ オブジェクトが <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> の呼び出し時にデータを送信しないよう要求します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_ONLYONCE">
      <summary>コネクションを削除する前に、オブジェクトが 1 回だけ変更通知またはキャッシュの更新を行うよう要求します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_PRIMEFIRST">
      <summary>オブジェクトがデータまたは表示の変更を待機せずに <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> の初期呼び出し (データまたは表示のアドバイザリ コネクションの場合) またはキャッシュの更新 (キャッシュ コネクションの場合) を行うよう要求します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN">
      <summary>この値は、オブジェクトの描画を実行する DLL オブジェクト アプリケーションおよびオブジェクト ハンドラーによって使用されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_NOHANDLER">
      <summary>頻繁に使用される <see cref="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN" /> のシノニム。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_ONSAVE">
      <summary>キャッシュ コネクションの場合、このフラグは、キャッシュを格納しているオブジェクトの保存時にだけ、キャッシュされている表示を更新します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BIND_OPTS">
      <summary>モニカー バインディング操作中に使用するパラメーターを格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.cbStruct">
      <summary>
        <see langword="BIND_OPTS" /> 構造体のサイズをバイト単位で指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.dwTickCountDeadline">
      <summary>バインディング操作を完了するために呼び出し元が指定した時間 (<see langword="GetTickCount" /> 関数が返すミリ秒単位の時間) を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfFlags">
      <summary>モニカー バインディング操作のあらゆる局面を制御します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfMode">
      <summary>モニカーが識別するオブジェクトを格納しているファイルを開くときに使用するフラグを表します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BINDPTR">
      <summary>バインド先の <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 構造体、<see cref="T:System.Runtime.InteropServices.VARDESC" /> 構造体、または <see langword="ITypeComp" /> インターフェイスへのポインターを格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpfuncdesc">
      <summary>
        <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 構造体へのポインターを表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lptcomp">
      <summary>
        <see cref="T:System.Runtime.InteropServices.ComTypes.ITypeComp" /> インターフェイスへのポインターを表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpvardesc">
      <summary>
        <see cref="T:System.Runtime.InteropServices.VARDESC" /> 構造体へのポインターを表します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CALLCONV">
      <summary>METHODDATA 構造体で記述されたメソッドが使用する呼び出し規則を識別します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_CDECL">
      <summary>メソッドに対して CDECL (C declaration) 呼び出し規約を使用することを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MACPASCAL">
      <summary>メソッドに対して MACPASCAL (Macintosh Pascal) 呼び出し規約を使用することを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MAX">
      <summary>
        <see cref="T:System.Runtime.InteropServices.ComTypes.CALLCONV" /> 列挙体の末尾を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWCDECL">
      <summary>メソッドに対して MPW (Macintosh Programmers' Workbench) CDECL 呼び出し規約を使用することを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWPASCAL">
      <summary>メソッドに対して MPW (Macintosh Programmers' Workbench) PASCAL 呼び出し規約を使用することを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MSCPASCAL">
      <summary>メソッドに対して MSCPASCAL (MSC Pascal) 呼び出し規約を使用することを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_PASCAL">
      <summary>メソッドに対して Pascal 呼び出し規約が使用されることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_RESERVED">
      <summary>この値は、今後使用するために予約されています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_STDCALL">
      <summary>メソッドに対して STDCALL (標準呼び出し規約) を使用することを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_SYSCALL">
      <summary>メソッドに対して標準 SYSCALL 呼び出し規約を使用することを示します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CONNECTDATA">
      <summary>指定したコネクション ポイントに存在する接続を記述します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.dwCookie">
      <summary>
        <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> への呼び出しによって返された接続トークンを表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.pUnk">
      <summary>接続されたアドバイズ シンク上の <see langword="IUnknown" /> インターフェイスへのポインターを表します。 <see langword="IUnknown::Release" /> 構造体が必要なくなったときに、呼び出し元からこのポインターの指す <see langword="CONNECTDATA" /> を呼び出す必要があります。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DATADIR">
      <summary>
        <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> メソッドの <paramref name="dwDirection" /> パラメーターのデータ フローの方向を指定します。 これにより、結果の列挙子が列挙できる形式が決定されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_GET">
      <summary>
        <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> が、<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> で指定できる形式の列挙子を提供することを要求します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_SET">
      <summary>
        <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> が、<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" /> で指定できる形式の列挙子を提供することを要求します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DESCKIND">
      <summary>バインドされている型の記述を識別します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_FUNCDESC">
      <summary>
        <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 構造体が返されたことを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_IMPLICITAPPOBJ">
      <summary>
        <see langword="IMPLICITAPPOBJ" /> が返されたことを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_MAX">
      <summary>列挙体末尾のマーカーを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_NONE">
      <summary>一致が見つからなかったことを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_TYPECOMP">
      <summary>
        <see langword="TYPECOMP" /> が返されたことを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_VARDESC">
      <summary>
        <see langword="VARDESC" /> が返されたことを示します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DISPPARAMS">
      <summary>
        <see langword="IDispatch::Invoke" /> によってメソッドまたはプロパティに渡された引数を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cArgs">
      <summary>引数の数を表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cNamedArgs">
      <summary>名前つき引数の数を表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgdispidNamedArgs">
      <summary>名前つき引数のディスパッチ ID を表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgvarg">
      <summary>引数の配列への参照を表します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DVASPECT">
      <summary>データの描画時または取得時にオブジェクトのデータやビューに必要な特徴を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_CONTENT">
      <summary>オブジェクトをコンテナー内の埋め込みオブジェクトとして表示するオブジェクトの表現。 この値は通常、複合ドキュメント オブジェクトに指定されます。 この表示形式は、画面またはプリンターに対して指定できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_DOCPRINT">
      <summary>[ファイル] メニューの [印刷] を使用してプリンターに印刷したような画面上のオブジェクトの表現。 記述されるデータでページのシーケンスを表現できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_ICON">
      <summary>オブジェクトのアイコン表示。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_THUMBNAIL">
      <summary>参照ツールでオブジェクトが表示されるようにする、オブジェクトのサムネイル表示。 サムネイルは、約 120 × 120 ピクセル、16 色 (推奨) のデバイスに依存しないビットマップで、メタファイルにラップされる場合があります。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC">
      <summary>変数、関数、または関数パラメーターの、型の説明およびプロセス転送情報を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.desc">
      <summary>要素に関する情報を格納します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION">
      <summary>要素に関する情報を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.idldesc">
      <summary>要素をリモート処理するための情報を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.paramdesc">
      <summary>パラメーターに関する情報を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.tdesc">
      <summary>要素の型を識別します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.EXCEPINFO">
      <summary>
        <see langword="IDispatch::Invoke" /> 中に発生する例外を記述します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrDescription">
      <summary>ユーザーに対して表示するエラーを記述します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrHelpFile">
      <summary>エラーに関する詳細な情報が含まれているヘルプ ファイルの、ドライブ名、パス名、およびファイル名から成る完全修飾名を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrSource">
      <summary>例外の理由を示すメッセージです。 通常は、これはアプリケーション名です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.dwHelpContext">
      <summary>ヘルプ ファイル内のトピックのヘルプ コンテキスト ID を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pfnDeferredFillIn">
      <summary>引数として <see cref="T:System.Runtime.InteropServices.EXCEPINFO" />構造体をとり、HRESULT 値を返す関数を指すポインターを表します。 遅延読み込みを行わない場合は、このフィールドは <see langword="null" /> に設定されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pvReserved">
      <summary>このフィールドは予約されています。<see langword="null" /> に設定する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.scode">
      <summary>エラーについて記述する戻り値です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wCode">
      <summary>エラーを識別するエラー コードを表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wReserved">
      <summary>このフィールドは予約されています。0 に設定する必要があります。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FILETIME">
      <summary>1601 年 1 月 1 日以降の 100 ナノ秒間隔の数を表します。 この構造体は 64 ビット値です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwHighDateTime">
      <summary>
        <see langword="FILETIME" /> の上位の 32 ビット値を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwLowDateTime">
      <summary>
        <see langword="FILETIME" /> の下位の 32 ビット値を指定します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FORMATETC">
      <summary>汎用のクリップボード形式を表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.cfFormat">
      <summary>関係する特定のクリップボード形式を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect">
      <summary>表示に含まれる必要がある詳細情報を示す <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> 列挙定数の 1 つを指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex">
      <summary>データがページ境界を越えて分割される必要があるときの特性の部分を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.ptd">
      <summary>構成されているデータの対象デバイスに関する情報を格納している <see langword="DVTARGETDEVICE" /> 構造体へのポインターを指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed">
      <summary>オブジェクトのデータを転送するために使用するストレージ メディアの種類を示す <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 列挙定数の 1 つを指定します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCDESC">
      <summary>関数の記述を定義します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.callconv">
      <summary>関数の呼び出し規約を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParams">
      <summary>パラメーターの合計数をカウントします。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParamsOpt">
      <summary>オプションのパラメーターをカウントします。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cScodes">
      <summary>許可されている戻り値をカウントします。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.elemdescFunc">
      <summary>関数の戻り値の型を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.funckind">
      <summary>関数が仮想、静的、またはディスパッチ専用かどうかを指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.invkind">
      <summary>プロパティ関数の型を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgelemdescParam">
      <summary>
        <see cref="F:System.Runtime.InteropServices.FUNCDESC.cParams" /> のサイズを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgscode">
      <summary>関数が 16 ビットのシステム上で返すことができるエラーの数を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.memid">
      <summary>関数メンバーの ID を識別します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.oVft">
      <summary>
        <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL" /> の仮想関数テーブル (VTBL: Virtual Function Table) 内のオフセットを指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.wFuncFlags">
      <summary>関数の <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" /> を示します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCFLAGS">
      <summary>関数のプロパティを定義する定数を識別します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FBINDABLE">
      <summary>データ連結をサポートしている関数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTBIND">
      <summary>オブジェクトを最もよく表す関数です。 型の 1 つの関数だけが、この属性を持つことができます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM">
      <summary>コンパイラが "abc" の型で "xyz" という名前のメンバーを検索する場合に最適化を許可します。 このようなメンバーが検出され、既定のコレクション要素のアクセサー関数としてフラグが付けられている場合は、そのメンバー関数への呼び出しが生成されます。 dispinterface およびインターフェイスのメンバーでは許可されますが、モジュールでは許可されません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDISPLAYBIND">
      <summary>ユーザーに対して表示されるバインド可能な関数です。 <see cref="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE" /> も設定する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FHIDDEN">
      <summary>関数は存在し、バインド可能ですが、ユーザーに対して表示しないでください。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND">
      <summary>個別のバインド可能なプロパティとして割り当てられます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FNONBROWSABLE">
      <summary>プロパティはオブジェクト ブラウザーには表示されますが、プロパティ ブラウザーには表示されません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREPLACEABLE">
      <summary>インターフェイスが既定の動作を備えていることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREQUESTEDIT">
      <summary>設定した場合は、そのプロパティを設定したメソッドを呼び出すと、初めに <see langword="IPropertyNotifySink::OnRequestEdit" /> が呼び出されます。 <see langword="OnRequestEdit" /> を実装すると、呼び出しがこのプロパティを設定できるかどうかを確認します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FRESTRICTED">
      <summary>関数は、マクロ言語からはアクセスできません。 このフラグは、システムレベル関数または型ブラウザーに表示しない関数で使用します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FSOURCE">
      <summary>関数は、イベントの発生元のオブジェクトを返します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUIDEFAULT">
      <summary>型情報メンバーは、ユーザー インターフェイスに表示する既定のメンバーです。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR">
      <summary>関数は <see langword="GetLastError" /> をサポートしています。 関数の実行中にエラーが発生した場合、呼び出し元は <see langword="GetLastError" /> を呼び出してエラー コードを取得できます。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCKIND">
      <summary>関数にアクセスする方法を定義します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_DISPATCH">
      <summary>関数には、<see langword="IDispatch" /> を使用したときにだけアクセスできます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_NONVIRTUAL">
      <summary>関数は、<see langword="static" /> アドレスによってアクセスし、暗黙の <see langword="this" /> ポインターを取得します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_PUREVIRTUAL">
      <summary>関数は、仮想関数テーブル (VTBL: virtual function table) を使用してアクセスし、暗黙の <see langword="this" /> ポインターを取得します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_STATIC">
      <summary>関数は、<see langword="static" /> アドレスを使用してアクセスし、暗黙の <see langword="this" /> ポインターを取得しません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_VIRTUAL">
      <summary>関数は、実装されている場合を除き、<see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL" /> と同様にアクセスします。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IAdviseSink">
      <summary>
        <see langword="IAdviseSink" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnClose">
      <summary>登録されているすべてのアドバイズ シンクに、オブジェクトが実行状態から読み込み済み状態に変更されたことを通知します。  このメソッドは、サーバーから呼び出されます。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>現在アドバイズ シンクが登録されているすべてのデータ オブジェクトに、オブジェクトのデータが変更されたことを通知します。</summary>
      <param name="format">呼び出し元データ オブジェクトの形式、対象デバイス、レンダリング、およびストレージ情報が記述されている <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> (参照渡し)。</param>
      <param name="stgmedium">呼び出し元データ オブジェクトのストレージ メディア (グローバル メモリ、ディスク ファイル、ストレージ オブジェクト、ストリーム オブジェクト、グラフィック デバイス インターフェイス (GDI: Graphics Device Interface) オブジェクト、または未定義) およびそのメディアの所有権を定義する <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> (参照渡し)。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnRename(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>登録されているすべてのアドバイズ シンクに、オブジェクトの名前が変更されたことを通知します。 このメソッドは、サーバーから呼び出されます。</summary>
      <param name="moniker">オブジェクトの新しく完全なモニカーの <see langword="IMoniker" /> インターフェイスへのポインター。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnSave">
      <summary>登録されているすべてのアドバイズ シンクに、オブジェクトの名前が保存されたことを通知します。 このメソッドは、サーバーから呼び出されます。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnViewChange(System.Int32,System.Int32)">
      <summary>オブジェクトの、登録されているアドバイズ シンクに、ビューが変更されたことを通知します。 このメソッドは、サーバーから呼び出されます。</summary>
      <param name="aspect">オブジェクトの特性またはビュー。 <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> 列挙体から取得された値を格納します。</param>
      <param name="index">ビューの変更部分。 現在、-1 だけが有効です。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IBindCtx">
      <summary>
        <see langword="IBindCtx" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.EnumObjectParam(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary>コンテキスト オブジェクト パラメーターの内部で維持されるテーブルのキーである文字列を列挙します。</summary>
      <param name="ppenum">このメソッドが返されるときに、オブジェクト パラメーター列挙子への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary>現在のバインド コンテキストに格納されている現在のバインディング オプションを返します。</summary>
      <param name="pbindopts">バインディング オプションを受け取る構造体へのポインター。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetObjectParam(System.String,System.Object@)">
      <summary>コンテキスト オブジェクト パラメーターの内部で維持されるテーブルで特定のキーを検索し、存在する場合は対応するオブジェクトを返します。</summary>
      <param name="pszKey">検索する対象となるオブジェクトの名前。</param>
      <param name="ppunk">このメソッドが返されるときに、オブジェクトのインターフェイス ポインターを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetRunningObjectTable(System.Runtime.InteropServices.ComTypes.IRunningObjectTable@)">
      <summary>このバインディング プロセスに関連するランニング オブジェクト テーブル (ROT: Running Object Table) へのアクセスを返します。</summary>
      <param name="pprot">このメソッドが返されるときに、ランニング オブジェクト テーブル (ROT) への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)">
      <summary>モニカー操作中にバインドされ、操作完了時に解放する必要があるオブジェクトの 1 つとして、渡されたオブジェクトを登録します。</summary>
      <param name="punk">解放のために登録するオブジェクト。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectParam(System.String,System.Object)">
      <summary>オブジェクト ポインターの内部で維持されるテーブルで、指定した名前を使用して指定したオブジェクト ポインターを登録します。</summary>
      <param name="pszKey">
        <paramref name="punk" /> の登録に使用する名前。</param>
      <param name="punk">登録するオブジェクト。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.ReleaseBoundObjects">
      <summary>
        <see cref="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)" /> メソッドによってバインド コンテキストに現在登録されているすべてのオブジェクトを解放します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectBound(System.Object)">
      <summary>解放する必要がある登録済みオブジェクトのセットからオブジェクトを削除します。</summary>
      <param name="punk">解放のために登録を解除するオブジェクト。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectParam(System.String)">
      <summary>コンテキスト オブジェクト パラメーターの内部で維持されるテーブルで、キーが現在登録されている場合、そのキーを使用して現在検出されているオブジェクトの登録を取り消します。</summary>
      <param name="pszKey">登録を解除するキー。</param>
      <returns>指定したキーがテーブルから正常に削除された場合は <see langword="S_OK" /><see langword="HRESULT" /> 値。それ以外の場合は <see langword="S_FALSE" /><see langword="HRESULT" /> 値。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.SetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary>一連のパラメーターをバインド コンテキストに格納します。 これらのパラメーターは、以降に実行される <see langword="UCOMIMoniker" /> 操作のうち、このバインド コンテキストを使用する操作に適用されます。</summary>
      <param name="pbindopts">設定するバインディング オプションを格納している構造体。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPoint">
      <summary>
        <see langword="IConnectionPoint" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)">
      <summary>コネクション ポイントと呼び出し元のシンク オブジェクト間にアドバイザリ コネクションを確立します。</summary>
      <param name="pUnkSink">このコネクション ポイントが管理するアウトゴーイング インターフェイスへの呼び出しを受信するためのシンクへの参照。</param>
      <param name="pdwCookie">このメソッドが返されるときに、接続クッキーを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.EnumConnections(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary>コネクション ポイントに存在する接続を反復処理するための列挙子オブジェクトを作成します。</summary>
      <param name="ppEnum">このメソッドが返されるときに、新しく作成された列挙子を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionInterface(System.Guid@)">
      <summary>コネクション ポイントが管理するアウトゴーイング インターフェイスの IID を返します。</summary>
      <param name="pIID">このパラメーターが返されるときに、このコネクション ポイントが管理するアウトゴーイング インターフェイスの IID を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionPointContainer(System.Runtime.InteropServices.ComTypes.IConnectionPointContainer@)">
      <summary>概念上このコネクション ポイントを所有している接続可能オブジェクトへの <see langword="IConnectionPointContainer" /> インターフェイス ポインターを取得します。</summary>
      <param name="ppCPC">このパラメーターが返されるときに、接続可能オブジェクトの <see langword="IConnectionPointContainer" /> インターフェイスを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Unadvise(System.Int32)">
      <summary>
        <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> メソッドが以前に確立したアドバイザリ コネクションを終了します。</summary>
      <param name="dwCookie">
        <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> メソッドが以前に返した接続クッキー。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer">
      <summary>
        <see langword="IConnectionPointContainer" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.EnumConnectionPoints(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary>IID あたり 1 つのコネクション ポイントとして、接続可能オブジェクトでサポートされているすべてのコネクション ポイントの列挙子を作成します。</summary>
      <param name="ppEnum">このメソッドが返されるときに、列挙子のインターフェイス ポインターを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.FindConnectionPoint(System.Guid@,System.Runtime.InteropServices.ComTypes.IConnectionPoint@)">
      <summary>特定の IID のコネクション ポイントが存在するかどうかを接続可能オブジェクトに確認し、存在する場合はそのコネクション ポイントへの <see langword="IConnectionPoint" /> インターフェイス ポインターを返します。</summary>
      <param name="riid">コネクション ポイントを要求しているアウトゴーイング インターフェイス IID への参照。</param>
      <param name="ppCP">このメソッドが返されるときに、アウトゴーイング インターフェイス <paramref name="riid" /> を管理するコネクション ポイントを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDataObject">
      <summary>
        <see langword="IDataObject" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
      <summary>データ オブジェクトとアドバイズ シンク間の接続を作成します。 このメソッドは、アドバイズ シンクをサポートするオブジェクトによって呼び出され、オブジェクトのデータの変更をアドバイズ シンクに通知できるようにします。</summary>
      <param name="pFormatetc">今後の通知のために使用される形式、対象デバイス、特性、およびメディアを定義する <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体 (参照渡し)。</param>
      <param name="advf">アドバイザリ コネクションの制御用フラグのグループを指定する <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> 値の 1 つ。</param>
      <param name="adviseSink">変更通知を受信するアドバイズ シンク上の <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> インターフェイスへのポインター。</param>
      <param name="connection">このメソッドから制御が戻るときに、この接続を識別する DWORD トークンへのポインターを格納します。 このトークンを後で <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)" /> に渡して、アドバイザリ コネクションを削除できます。 この値が 0 の場合、接続は確立されていません。 このパラメーターは初期化せずに渡されます。</param>
      <returns>このメソッドは、標準の戻り値である E_INVALIDARG、E_UNEXPECTED、および E_OUTOFMEMORY をサポートすると同時に、次の値もサポートしています。 
  [値] 
  説明 
  S_OK 
  アドバイザリ コネクションが作成されました。  
  E_NOTIMPL 
  このメソッドは、データ オブジェクトには実装されていません。  
  DV_E_LINDEX 
  <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> に無効な値があります。現在は -1 だけがサポートされています。  
  DV_E_FORMATETC 
  <paramref name="pFormatetc" /> パラメーターに無効な値があります。  
  OLE_E_ADVISENOTSUPPORTED 
  データ オブジェクトは、変更通知をサポートしていません。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)">
      <summary>以前に確立されていた通知の接続を破棄します。</summary>
      <param name="connection">削除する接続を指定する DWORD トークン。 接続が最初に確立されたときに、<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> から返された値を使用します。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumDAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>現在のアドバイザリ コネクションを列挙するために使用できるオブジェクトを作成します。</summary>
      <param name="enumAdvise">このメソッドから制御が戻るときに、新しい列挙子オブジェクトへのインターフェイス ポインターを受け取る <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA" /> を格納します。 実装によって <paramref name="enumAdvise" /> が <see langword="null" /> に設定される場合、現時点ではアドバイズ シンクへの接続はありません。 このパラメーターは初期化せずに渡されます。</param>
      <returns>このメソッドは、標準の戻り値である E_OUTOFMEMORY をサポートすると同時に、次の値もサポートしています。  
  [値]  

  説明  

  S_OK  

  列挙子オブジェクトが正常にインスタンス化されたか、接続がありません。  

  OLE_E_ADVISENOTSUPPORTED  

  このオブジェクトは、アドバイザリの通知をサポートしていません。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)">
      <summary>データ オブジェクトの <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体を列挙するためのオブジェクトを作成します。 これらの構造体は、<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> または <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" /> の呼び出しで使用されます。</summary>
      <param name="direction">データの方向を指定する <see cref="T:System.Runtime.InteropServices.ComTypes.DATADIR" /> 値の 1 つ。</param>
      <returns>このメソッドは、標準の戻り値である E_INVALIDARG および E_OUTOFMEMORY をサポートすると同時に、次の値もサポートしています。 
  [値] 
  説明 
  S_OK 
  列挙子オブジェクトが正常に作成されました。  
  E_NOTIMPL 
  <paramref name="direction" /> パラメーターで指定された方向はサポートされていません。  
  OLE_S_USEREG 
  OLE がレジストリから形式を列挙するように要求します。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>より複雑な構造体と論理的に等価な、標準の <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体を提供します。 このメソッドを使用して、2 つの異なる <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体が同一のデータを返すかどうかを確認し、表示を二重化する必要をなくします。</summary>
      <param name="formatIn">
        <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> などの後続の呼び出しで、呼び出し元がデータを取得するために使用する必要がある、形式、メディア、および対象デバイスを定義する <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 構造体へのポインター (参照渡し)。 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> メンバーは、この場合には重要ではないため、無視する必要があります。</param>
      <param name="formatOut">このメソッドから制御が戻るときに、特定の表示で最も一般的な情報を格納している <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体へのポインターを格納し、<c>formatetcIn</c> と規準的等価にします。 呼び出し元でこの構造体を割り当て、<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)" /> メソッドでデータを格納する必要があります。 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> などの後続の呼び出しでデータを取得するには、指定された値が <see langword="null" /> の場合を除き、呼び出し元は <paramref name="formatOut" /> に指定された値を使用します。 このメソッドが <see langword="null" /> を返す場合、この値は <see langword="DATA_S_SAMEFORMATETC" /> です。 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> メンバーは、この場合には重要ではないため、無視する必要があります。 このパラメーターは初期化せずに渡されます。</param>
      <returns>このメソッドは、標準の戻り値である E_INVALIDARG、E_UNEXPECTED、および E_OUTOFMEMORY をサポートすると同時に、次の値もサポートしています。 
  [値] 
  説明 
  S_OK 
  返される <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体は、渡された構造体とは異なります。  
  DATA_S_SAMEFORMATETC 
  複数の <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体が同一で、<paramref name="formatOut" /> パラメーターに <see langword="null" /> が返されます。  
  DV_E_LINDEX 
  <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> に無効な値があります。現在は -1 だけがサポートされています。  
  DV_E_FORMATETC 
  <paramref name="pFormatetc" /> パラメーターに無効な値があります。  
  OLE_E_NOTRUNNING 
  アプリケーションが実行されていません。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>ソース データ オブジェクトからデータを取得します。 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> メソッドは、データ コンシューマーによって呼び出され、指定された <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体に記述されているデータを表示し、指定された <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 構造体を使用してそのデータを転送します。 呼び出し元は、その後で <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 構造体を解放する必要があります。</summary>
      <param name="format">データを渡すときに使用する形式、メディア、および対象デバイスを定義する <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体へのポインター (参照渡し)。 ブール型の OR 演算子を使用して複数のメディアを指定し、メソッドがそれらの指定の中から最良のメディアを選択できるようにします。</param>
      <param name="medium">このメソッドから制御が戻るときに、<see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> メンバーを通じて返されたデータを格納しているストレージ メディアと、その <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed" /> メンバーの値を通じてメディアを解放する必要性を示す <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 構造体へのポインターを格納します。 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> が <see langword="null" /> の場合は、メディアを受け取ったら、そのメディアを解放する必要があります。それ以外の場合は、<see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> が適切なオブジェクトの <see langword="IUnknown" /> インターフェイスを指すため、その <see langword="Release" /> メソッドを呼び出すことができます。 メディアは、<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> で割り当て、情報を格納する必要があります。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>ソース データ オブジェクトからデータを取得します。 このメソッドはデータ コンシューマーによって呼び出され、呼び出し元が、指定したストレージ メディアを割り当て、解放する必要があるという点で <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> メソッドとは異なります。</summary>
      <param name="format">データを渡すときに使用する形式、メディア、および対象デバイスを定義する <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体へのポインター (参照渡し)。 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> に指定できるのは 1 つのメディアだけです。また、有効な <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 値は、<see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE" />、<see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM" />、<see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL" />、または <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE" /> だけです。</param>
      <param name="medium">転送されるデータを格納しているストレージ メディアを定義する <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> (参照渡し)。 メディアは、呼び出し元で割り当て、<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> で情報を格納する必要があります。 呼び出し元は、メディアを解放する必要もあります。 このメソッドの実装では、常に、このパラメーターが指している <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 構造体の<see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> メンバーに <see langword="null" /> 値を与える必要があります。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>データ オブジェクトが、<see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体で記述されているデータを表示できるかどうかを確認します。 貼り付け操作またはドロップ操作をしようとしているオブジェクトは、<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> を呼び出す前にこのメソッドを呼び出して、操作が正常に実行できるかどうかを示す値を取得できます。</summary>
      <param name="format">問い合わせに使用する形式、メディア、および対象デバイスを定義する <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体へのポインター (参照渡し)。</param>
      <returns>このメソッドは、標準の戻り値である E_INVALIDARG、E_UNEXPECTED、および E_OUTOFMEMORY をサポートすると同時に、次の値もサポートしています。 
  [値] 
  説明 
  S_OK 
  後続の <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> の呼び出しは、正常に実行されないこともあります。  
  DV_E_LINDEX 
  <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> の無効な値。現在は -1 だけがサポートされています。  
  DV_E_FORMATETC 
  <paramref name="pFormatetc" /> パラメーターの無効な値。  
  DV_E_TYMED 
  正しくない <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed" /> 値。  
  DV_E_DVASPECT 
  正しくない <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect" /> 値。  
  OLE_E_NOTRUNNING 
  アプリケーションが実行されていません。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
      <summary>このメソッドを実装するオブジェクトにデータを転送します。 このメソッドは、データ ソースを格納しているオブジェクトから呼び出されます。</summary>
      <param name="formatIn">ストレージ メディアに格納されているデータを解釈するときに、データ オブジェクトによって使用される形式を定義する <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体 (参照渡し)。</param>
      <param name="medium">データが渡されるストレージ メディアを定義する <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 構造体 (参照渡し)。</param>
      <param name="release">
        <see langword="true" /> を指定すると、呼び出しから制御が戻った後、<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" /> を実装する呼び出されるデータ オブジェクトがストレージ メディアを所有します。 つまり、データ オブジェクトは、<see langword="ReleaseStgMedium" /> 関数の呼び出しによって使用された後に、メディアを解放する必要があります。 <see langword="false" /> を指定すると、呼び出し元がストレージ メディアの所有権を保持し、呼び出されるデータ オブジェクトは呼び出しの期間だけストレージ メディアを使用します。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLDESC">
      <summary>構造体の要素、パラメーター、または関数の戻り値をプロセス間で転送するために必要な情報を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.dwReserved">
      <summary>予約済み。<see langword="null" /> に設定されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.wIDLFlags">
      <summary>型を記述する <see cref="T:System.Runtime.InteropServices.IDLFLAG" /> 値を示します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLFLAG">
      <summary>構造体の要素、パラメーター、または関数の戻り値をプロセス間で転送する方法を記述します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FIN">
      <summary>パラメーターは、呼び出し元から呼び出し先に情報を渡します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FLCID">
      <summary>パラメーターは、クライアント アプリケーションのローカル ID です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FOUT">
      <summary>パラメーターは、呼び出し先から呼び出し元に情報を返します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FRETVAL">
      <summary>パラメーターは、メンバーの戻り値です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_NONE">
      <summary>パラメーターが情報を渡すか、情報を受け取るかを指定しません。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints">
      <summary>
        <see langword="IEnumConnectionPoints" /> インターフェイスの定義を管理します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary>現在の列挙状態と同じ列挙状態を含む新しい列挙子を作成します。</summary>
      <param name="ppenum">このメソッドから制御が戻るときに、新しく作成された列挙子への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IConnectionPoint[],System.IntPtr)">
      <summary>列挙体シーケンス内の指定した数の項目を取得します。</summary>
      <param name="celt">
        <paramref name="rgelt" /> に返される <see langword="IConnectionPoint" /> の参照の数。</param>
      <param name="rgelt">このメソッドが返されるときに、列挙された接続への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pceltFetched">このメソッドが返されるときに、<paramref name="rgelt" /> に列挙された実際の接続数への参照を格納します。</param>
      <returns>
        <paramref name="pceltFetched" /> パラメーターが <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Reset">
      <summary>列挙のシーケンスを最初にリセットします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Skip(System.Int32)">
      <summary>列挙体シーケンス内の指定した数の項目をスキップします。</summary>
      <param name="celt">列挙体内でスキップする要素の数。</param>
      <returns>スキップした要素の数が <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnections">
      <summary>
        <see langword="IEnumConnections" /> インターフェイスの定義を管理します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary>現在の列挙状態と同じ列挙状態を含む新しい列挙子を作成します。</summary>
      <param name="ppenum">このメソッドから制御が戻るときに、新しく作成された列挙子への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Next(System.Int32,System.Runtime.InteropServices.ComTypes.CONNECTDATA[],System.IntPtr)">
      <summary>列挙体シーケンス内の指定した数の項目を取得します。</summary>
      <param name="celt">
        <paramref name="rgelt" /> に返される <see cref="T:System.Runtime.InteropServices.CONNECTDATA" /> 構造体の数。</param>
      <param name="rgelt">このメソッドが返されるときに、列挙された接続への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pceltFetched">このメソッドが返されるときに、<paramref name="rgelt" /> に列挙された実際の接続数への参照を格納します。</param>
      <returns>
        <paramref name="pceltFetched" /> パラメーターが <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Reset">
      <summary>列挙のシーケンスを最初にリセットします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Skip(System.Int32)">
      <summary>列挙体シーケンス内の指定した数の項目をスキップします。</summary>
      <param name="celt">列挙体内でスキップする要素の数。</param>
      <returns>スキップした要素の数が <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC">
      <summary>
        <see langword="IEnumFORMATETC" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Clone(System.Runtime.InteropServices.ComTypes.IEnumFORMATETC@)">
      <summary>現在の列挙状態と同じ列挙状態を格納する新しい列挙子を作成します。</summary>
      <param name="newEnum">このメソッドから制御が戻るときに、新しく作成された列挙子への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Next(System.Int32,System.Runtime.InteropServices.ComTypes.FORMATETC[],System.Int32[])">
      <summary>列挙体シーケンス内の指定した数の項目を取得します。</summary>
      <param name="celt">
        <paramref name="rgelt" /> に返される <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> の参照の数。</param>
      <param name="rgelt">このメソッドから制御が戻るときに、列挙された <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 参照への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pceltFetched">このメソッドから制御が戻るときに、<paramref name="rgelt" /> に列挙された参照の実数への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <returns>
        <paramref name="pceltFetched" /> パラメーターが <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Reset">
      <summary>列挙のシーケンスを最初にリセットします。</summary>
      <returns>
        <see langword="S_OK" /> 値を保持している HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Skip(System.Int32)">
      <summary>列挙体シーケンス内の指定した数の項目をスキップします。</summary>
      <param name="celt">列挙体内でスキップする要素の数。</param>
      <returns>スキップした要素の数が <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumMoniker">
      <summary>
        <see langword="IEnumMoniker" /> インターフェイスの定義を管理します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Clone(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>現在の列挙状態と同じ列挙状態を含む新しい列挙子を作成します。</summary>
      <param name="ppenum">このメソッドから制御が戻るときに、新しく作成された列挙子への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker[],System.IntPtr)">
      <summary>列挙体シーケンス内の指定した数の項目を取得します。</summary>
      <param name="celt">
        <paramref name="rgelt" /> に返されるモニカーの数。</param>
      <param name="rgelt">このメソッドが返されるときに、列挙されたモニカーへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pceltFetched">このメソッドが返されるときに、<paramref name="rgelt" /> に列挙されたモニカーの実数への参照を格納します。</param>
      <returns>
        <paramref name="pceltFetched" /> パラメーターが <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Reset">
      <summary>列挙のシーケンスを最初にリセットします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Skip(System.Int32)">
      <summary>列挙体シーケンス内の指定した数の項目をスキップします。</summary>
      <param name="celt">列挙体内でスキップする要素の数。</param>
      <returns>スキップした要素の数が <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA">
      <summary>
        <see langword="IEnumSTATDATA" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Clone(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>現在の列挙状態と同じ列挙状態を格納する新しい列挙子を作成します。</summary>
      <param name="newEnum">このメソッドから制御が戻るときに、新しく作成された列挙子への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Next(System.Int32,System.Runtime.InteropServices.ComTypes.STATDATA[],System.Int32[])">
      <summary>列挙体シーケンス内の指定した数の項目を取得します。</summary>
      <param name="celt">
        <paramref name="rgelt" /> に返される <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> の参照の数。</param>
      <param name="rgelt">このメソッドから制御が戻るときに、列挙された <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> 参照への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pceltFetched">このパラメーターが返されるときに、<paramref name="rgelt" /> に列挙された参照の実数への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <returns>
        <paramref name="pceltFetched" /> パラメーターが <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Reset">
      <summary>列挙のシーケンスを最初にリセットします。</summary>
      <returns>
        <see langword="S_OK" /> 値を保持している HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Skip(System.Int32)">
      <summary>列挙体シーケンス内の指定した数の項目をスキップします。</summary>
      <param name="celt">列挙体内でスキップする要素の数。</param>
      <returns>スキップした要素の数が <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumString">
      <summary>
        <see langword="IEnumString" /> インターフェイスの定義を管理します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Clone(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary>現在の列挙状態と同じ列挙状態を含む新しい列挙子を作成します。</summary>
      <param name="ppenum">このメソッドから制御が戻るときに、新しく作成された列挙子への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Next(System.Int32,System.String[],System.IntPtr)">
      <summary>列挙体シーケンス内の指定した数の項目を取得します。</summary>
      <param name="celt">
        <paramref name="rgelt" /> に返す文字列の数。</param>
      <param name="rgelt">このメソッドが返されるときに、列挙された文字列への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pceltFetched">このメソッドが返されるときに、<paramref name="rgelt" /> に列挙された文字列の実数への参照を格納します。</param>
      <returns>
        <paramref name="pceltFetched" /> パラメーターが <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Reset">
      <summary>列挙のシーケンスを最初にリセットします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Skip(System.Int32)">
      <summary>列挙体シーケンス内の指定した数の項目をスキップします。</summary>
      <param name="celt">列挙体内でスキップする要素の数。</param>
      <returns>スキップした要素の数が <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT">
      <summary>
        <see langword="IEnumVARIANT" /> インターフェイスの定義を管理します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Clone">
      <summary>現在の列挙状態と同じ列挙状態を含む新しい列挙子を作成します。</summary>
      <returns>新しく作成された列挙子への <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT" /> 参照。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Next(System.Int32,System.Object[],System.IntPtr)">
      <summary>列挙体シーケンス内の指定した数の項目を取得します。</summary>
      <param name="celt">
        <c>rgelt</c> で返される要素の数。</param>
      <param name="rgVar">このメソッドが返されるときに、列挙された要素への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pceltFetched">このメソッドが返されるときに、<c>rgelt</c> に列挙された実際の要素数への参照を格納します。</param>
      <returns>
        <paramref name="pceltFetched" /> パラメーターが <paramref name="celt" /> パラメーターに等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Reset">
      <summary>列挙のシーケンスを最初にリセットします。</summary>
      <returns>
        <see langword="S_OK" /> 値を保持している HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Skip(System.Int32)">
      <summary>列挙体シーケンス内の指定した数の項目をスキップします。</summary>
      <param name="celt">列挙体内でスキップする要素の数。</param>
      <returns>スキップした要素の数が <paramref name="celt" /> に等しい場合は <see langword="S_OK" />。それ以外の場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMoniker">
      <summary>
        <see langword="IMoniker" /> および <see langword="IPersist" /> の COM 機能を備えた <see langword="IPersistStream" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToObject(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary>モニカーを使用して、そのモニカーが識別するオブジェクトにバインドします。</summary>
      <param name="pbc">このバインド操作で使用するバインド コンテキスト オブジェクトの <see langword="IBindCtx" /> インターフェイスへの参照。</param>
      <param name="pmkToLeft">モニカーが複合モニカーの一部である場合、現在のモニカーの左側にあるモニカーへの参照。</param>
      <param name="riidResult">モニカーが識別するオブジェクトと通信するために、クライアントが使用するインターフェイスのインターフェイス ID (IID: Interface Identifier)。</param>
      <param name="ppvResult">このメソッドが返されるときに、<paramref name="riidResult" /> によって要求されたインターフェイスへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToStorage(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary>モニカーで識別されるオブジェクトが格納されているストレージへのインターフェイス ポインターを取得します。</summary>
      <param name="pbc">このバインド操作で使用するバインド コンテキスト オブジェクトの <see langword="IBindCtx" /> インターフェイスへの参照。</param>
      <param name="pmkToLeft">モニカーが複合モニカーの一部である場合、現在のモニカーの左側にあるモニカーへの参照。</param>
      <param name="riid">要求したストレージ インターフェイスのインターフェイス ID (IID: Interface Identifier)。</param>
      <param name="ppvObj">このメソッドが返されるときに、<paramref name="riid" /> によって要求されたインターフェイスへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.CommonPrefixWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>このモニカーが別のモニカーと共有する、共通のプリフィックスに基づいて、新しいモニカーを作成します。</summary>
      <param name="pmkOther">共通のプリフィックス作成のために現在のモニカーと比較する別のモニカーの <see langword="IMoniker" /> インターフェイスへの参照。</param>
      <param name="ppmkPrefix">このメソッドが返されるときに、現在のモニカーと <paramref name="pmkOther" /> の共通のプリフィックスであるモニカーを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ComposeWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Boolean,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>現在のモニカーと別のモニカーを結合し、新しい複合モニカーを作成します。</summary>
      <param name="pmkRight">現在のモニカーの末尾に追加するモニカーの <see langword="IMoniker" /> インターフェイスへの参照。</param>
      <param name="fOnlyIfNotGeneric">呼び出し元が汎用的でない複合を必要としている場合は <see langword="true" /> とします。 この場合、<paramref name="pmkRight" /> が汎用的な複合モニカーを形成しないような方法で現在のモニカーを複合できるモニカー クラスである場合に限り、操作が続行されます。 メソッドが必要に応じて汎用的な複合モニカーを作成できる場合は <see langword="false" /> とします。</param>
      <param name="ppmkComposite">このメソッドが返されるときに、作成された複合モニカーへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Enum(System.Boolean,System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>複合モニカーのコンポーネントを列挙できる列挙子へのポインターを提供します。</summary>
      <param name="fForward">モニカーを左から右へ列挙する場合は <see langword="true" />。 右から左へ列挙する場合は <see langword="false" />。</param>
      <param name="ppenumMoniker">このメソッドが返されるときに、モニカーの列挙子オブジェクトへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetClassID(System.Guid@)">
      <summary>オブジェクトのクラス ID (CLSID: Class Identifier) を取得します。</summary>
      <param name="pClassID">このメソッドが返されるときに、CLSID を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String@)">
      <summary>現在のモニカーについてユーザーが解釈できる形式の表示名を取得します。</summary>
      <param name="pbc">この操作に使用するバインド コンテキストへの参照。</param>
      <param name="pmkToLeft">モニカーが複合モニカーの一部である場合、現在のモニカーの左側にあるモニカーへの参照。</param>
      <param name="ppszDisplayName">このメソッドが返されるときに、表示名文字列を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetSizeMax(System.Int64@)">
      <summary>オブジェクトを保存するために必要なストリームのサイズをバイト単位で返します。</summary>
      <param name="pcbSize">このメソッドが返されるときに、このオブジェクトを保存するために必要なストリームのサイズをバイト単位で示す <see langword="long" /> 値を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>このモニカーで識別されるオブジェクトが、最後に変更された時刻を表す数値を示します。</summary>
      <param name="pbc">このバインド操作に使用するバインド コンテキストへの参照。</param>
      <param name="pmkToLeft">モニカーが複合モニカーの一部である場合、現在のモニカーの左側にあるモニカーへの参照。</param>
      <param name="pFileTime">このメソッドが返されるときに、最後の変更時刻を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Hash(System.Int32@)">
      <summary>モニカーの内部状態を使用して、32 ビット整数を計算します。</summary>
      <param name="pdwHash">このメソッドが返されるときに、このモニカーのハッシュ値を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Inverse(System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>現在のモニカーまたは類似の構造を持つモニカーの右側に複合された場合に、他の何にも複合されないモニカーを示します。</summary>
      <param name="ppmk">このメソッドが返されるときに、現在のモニカーと逆のモニカーを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsDirty">
      <summary>最後に保存した時点からオブジェクトが変更されたかどうかを確認します。</summary>
      <returns>オブジェクトが変更されている場合は <see langword="S_OK" /><see langword="HRESULT" /> 値。それ以外の場合は <see langword="S_FALSE" /><see langword="HRESULT" /> 値。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsEqual(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>指定したモニカーと現在のモニカーを比較し、同一かどうかを示します。</summary>
      <param name="pmkOtherMoniker">比較に使用するモニカーへの参照。</param>
      <returns>モニカーが同一の場合は <see langword="S_OK" /><see langword="HRESULT" /> 値。それ以外の場合は <see langword="S_FALSE" /><see langword="HRESULT" /> 値。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsRunning(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>現在のモニカーで識別されるオブジェクトが現在読み込まれ、実行中かどうかを判断します。</summary>
      <param name="pbc">このバインド操作に使用するバインド コンテキストへの参照。</param>
      <param name="pmkToLeft">モニカーが複合モニカーの一部である場合、現在のモニカーの左側にあるモニカーへの参照。</param>
      <param name="pmkNewlyRunning">ランニング オブジェクト テーブル (ROT: Running Object Table) に最後に追加されたモニカーへの参照。</param>
      <returns>モニカーが実行中の場合は <see langword="S_OK" /><see langword="HRESULT" /> 値。モニカーが実行されていない場合は <see langword="S_FALSE" /><see langword="HRESULT" /> 値。それ以外の場合は <see langword="E_UNEXPECTED" /><see langword="HRESULT" /> 値。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsSystemMoniker(System.Int32@)">
      <summary>このモニカーがシステム指定のモニカー クラスの 1 つかどうかを示します。</summary>
      <param name="pdwMksys">このメソッドが返されるときに、<see langword="MKSYS" /> 列挙体からの値の 1 つであり、COM モニカー クラスの 1 つを参照する整数へのポインターを格納します。 このパラメーターは初期化せずに渡されます。</param>
      <returns>モニカーがシステム モニカーの場合は <see langword="S_OK" /><see langword="HRESULT" /> 値。それ以外の場合は <see langword="S_FALSE" /><see langword="HRESULT" /> 値。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Load(System.Runtime.InteropServices.ComTypes.IStream)">
      <summary>オブジェクトが以前格納されたストリームから、そのオブジェクトを初期化します。</summary>
      <param name="pStm">読み込まれるオブジェクトが格納されているストリーム。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>指定した表示名の文字を読み取るときに、<see cref="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)" /> が読み取った部分に対応するモニカーを理解および構築するために必要な文字数だけ読み取ります。</summary>
      <param name="pbc">このバインド操作に使用するバインド コンテキストへの参照。</param>
      <param name="pmkToLeft">このポイントまでの表示名から構築されたモニカーへの参照。</param>
      <param name="pszDisplayName">解析する対象の、残りの表示名を格納している文字列への参照。</param>
      <param name="pchEaten">このメソッドが返されるときに、<paramref name="pszDisplayName" /> の解析に使用した文字数を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="ppmkOut">このメソッドが返されるときに、<paramref name="pszDisplayName" /> から構築されたモニカーへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Reduce(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>現在のモニカーと同じオブジェクトを参照するが、それ以上に効率的にバインドできる縮小された別のモニカーを返します。</summary>
      <param name="pbc">このバインド操作で使用するバインド コンテキストの <see langword="IBindCtx" /> インターフェイスへの参照。</param>
      <param name="dwReduceHowFar">現在のモニカーを縮小する程度を指定する値。</param>
      <param name="ppmkToLeft">現在のモニカーの左側のモニカーへの参照。</param>
      <param name="ppmkReduced">このメソッドが返されるときに、現在のモニカーの縮小形式への参照を格納します。エラーが発生したか、現在のモニカーが縮小されなかった場合は、<see langword="null" /> を格納することができます。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.RelativePathTo(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>現在のモニカー (または、同様の構造体を持つモニカー) に追加された場合に、指定したモニカーを生成するモニカーを示します。</summary>
      <param name="pmkOther">相対パスを取得する必要があるモニカーへの参照。</param>
      <param name="ppmkRelPath">このメソッドが返されるときに、関連モニカーへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Save(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)">
      <summary>指定したストリームにオブジェクトを保存します。</summary>
      <param name="pStm">オブジェクトの保存先ストリーム。</param>
      <param name="fClearDirty">保存の完了後に変更フラグをクリアする場合は、<see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS">
      <summary>実装された型のインターフェイスまたは継承された型のインターフェイスの属性を定義します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULT">
      <summary>インターフェイスまたは dispinterface は、ソースまたはシンクの既定値を表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULTVTABLE">
      <summary>シンクは、仮想関数テーブル (VTBL: virtual function table) を経由してイベントを受け取ります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FRESTRICTED">
      <summary>メンバーは、ユーザーが表示したり、プログラミングしたりできません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FSOURCE">
      <summary>コクラスのこのメンバーは、実装されるのではなく呼び出されます。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND">
      <summary>
        <see langword="IDispatch::Invoke" /> で関数を呼び出す方法を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_FUNC">
      <summary>メンバーは、通常の関数呼び出しの構文を使用して呼び出されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYGET">
      <summary>関数は、通常のプロパティ アクセスの構文を使用して呼び出されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUT">
      <summary>関数は、プロパティ値割り当ての構文を使用して呼び出されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUTREF">
      <summary>関数は、プロパティ参照割り当ての構文を使用して呼び出されます。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IPersistFile">
      <summary>
        <see langword="IPersistFile" /> 機能を備えた <see langword="IPersist" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetClassID(System.Guid@)">
      <summary>オブジェクトのクラス ID (CLSID: Class Identifier) を取得します。</summary>
      <param name="pClassID">このメソッドが返されるときに、CLSID への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetCurFile(System.String@)">
      <summary>オブジェクトの現在の作業ファイルへの絶対パスを取得します。現在の作業ファイルがない場合は、オブジェクトの既定のファイル名プロンプトを取得します。</summary>
      <param name="ppszFileName">このメソッドが返されるときに、現在のファイルのパスを含む 0 で終わる文字列へのポインターのアドレス、または既定のファイル名プロンプト (*.txt など) を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.IsDirty">
      <summary>現在のファイルを最後に保存した時点からオブジェクトが変更されたかどうかを確認します。</summary>
      <returns>最後に保存した時点からファイルが変更された場合は <see langword="S_OK" />。最後に保存した時点からファイルが変更されていない場合は <see langword="S_FALSE" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Load(System.String,System.Int32)">
      <summary>指定したファイルを開き、ファイルに含まれているオブジェクトを初期化します。</summary>
      <param name="pszFileName">開くファイルの絶対パスを含む 0 で終わる文字列。</param>
      <param name="dwMode">
        <paramref name="pszFileName" /> を開くためのアクセス モードを示す、<see langword="STGM" /> 列挙体からの値の組み合わせ。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Save(System.String,System.Boolean)">
      <summary>指定したファイルにオブジェクトのコピーを保存します。</summary>
      <param name="pszFileName">オブジェクトの保存先ファイルの絶対パスを含む、0 で終わる文字列。</param>
      <param name="fRemember">現在の作業ファイルとして <paramref name="pszFileName" /> パラメーターを使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.SaveCompleted(System.String)">
      <summary>ファイルに書き込むことができることをオブジェクトに通知します。</summary>
      <param name="pszFileName">オブジェクトが前回保存されたファイルの絶対パス。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IRunningObjectTable">
      <summary>
        <see langword="IRunningObjectTable" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.EnumRunning(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>現在実行中として登録されているオブジェクトを列挙します。</summary>
      <param name="ppenumMoniker">このメソッドが返されるときに、ランニング オブジェクト テーブル (ROT: Running Object Table) の新しい列挙子を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetObject(System.Runtime.InteropServices.ComTypes.IMoniker,System.Object@)">
      <summary>指定したオブジェクト名が実行中として登録されている場合は、登録済みのオブジェクトを返します。</summary>
      <param name="pmkObjectName">ROT で検索するモニカーへの参照。</param>
      <param name="ppunkObject">このメソッドが返されるときに、要求された実行中オブジェクトを格納します。 このパラメーターは初期化せずに渡されます。</param>
      <returns>操作が成功したかどうかを示す <see langword="HRESULT" /> 値。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>ROT でモニカーを検索し、変更時刻が記録されていれば報告します。</summary>
      <param name="pmkObjectName">ROT で検索するモニカーへの参照。</param>
      <param name="pfiletime">このオブジェクトが返されるときに、オブジェクトの最後の変更時刻を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <returns>操作が成功したかどうかを示す <see langword="HRESULT" /> 値。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.IsRunning(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>指定したモニカーが現在 ROT に登録されているかどうかを確認します。</summary>
      <param name="pmkObjectName">ROT で検索するモニカーへの参照。</param>
      <returns>操作が成功したかどうかを示す <see langword="HRESULT" /> 値。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>
        <see langword="IMoniker::GetTimeOfLastChange" /> が適切な変更時刻を報告できるように、特定のオブジェクトが変更された時刻を記録します。</summary>
      <param name="dwRegister">変更されたオブジェクトの ROT エントリ。</param>
      <param name="pfiletime">オブジェクトの最後の変更時刻への参照。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Register(System.Int32,System.Object,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>指定したオブジェクトが実行状態になったことを登録します。</summary>
      <param name="grfFlags">
        <paramref name="punkObject" /> への ROT 参照が、ウィーク参照かストロング参照かを指定し、ROT のエントリを使用してオブジェクトへのアクセスを制御します。</param>
      <param name="punkObject">実行中として登録されているオブジェクトへの参照。</param>
      <param name="pmkObjectName">
        <paramref name="punkObject" /> を識別するモニカーへの参照。</param>
      <returns>
        <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)" /> または <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)" /> への後続の呼び出しで、この ROT エントリを識別するために使用できる値。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)">
      <summary>ROT から指定したオブジェクトの登録を解除します。</summary>
      <param name="dwRegister">登録解除する ROT エントリ。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IStream">
      <summary>
        <see langword="IStream" /> 機能を備えた <see langword="ISequentialStream" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
      <summary>元のストリームと同じバイトを参照する独自のシーク ポインターで、新しいストリーム オブジェクトを作成します。</summary>
      <param name="ppstm">このメソッドが返されるときに、新しいストリーム オブジェクトを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)">
      <summary>トランザクション モードで開かれたストリーム オブジェクトに加えた変更が、親ストレージに反映されるようにします。</summary>
      <param name="grfCommitFlags">ストリーム オブジェクトへの変更をコミットする方法を制御する値。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
      <summary>ストリームの現在のシーク ポインターから別のストリームの現在のシーク ポインターに指定したバイト数をコピーします。</summary>
      <param name="pstm">コピー先ストリームへの参照。</param>
      <param name="cb">コピー元ストリームからコピーするバイト数。</param>
      <param name="pcbRead">正常に返された場合は、コピー元から読み取られた実際のバイト数を格納します。</param>
      <param name="pcbWritten">正常に返された場合は、コピー先に書き込まれた実際のバイト数を格納します。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)">
      <summary>ストリームの指定したバイト範囲へのアクセスを制限します。</summary>
      <param name="libOffset">範囲の先頭のバイト オフセット。</param>
      <param name="cb">制限する範囲のバイト単位の長さ。</param>
      <param name="dwLockType">範囲へのアクセスに対して要求する制限。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Read(System.Byte[],System.Int32,System.IntPtr)">
      <summary>現在のシーク ポインターを開始点として、ストリーム オブジェクトからメモリに指定したバイト数を読み取ります。</summary>
      <param name="pv">このメソッドが返されるときに、ストリームから読み取られたデータを格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="cb">ストリーム オブジェクトから読み取るバイト数。</param>
      <param name="pcbRead">ストリーム オブジェクトから読み取られた実際のバイト数を受け取る <see langword="ULONG" /> 変数へのポインター。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Revert">
      <summary>最後の <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)" /> 呼び出し以降に処理されたストリームに加えられたすべての変更を破棄します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Seek(System.Int64,System.Int32,System.IntPtr)">
      <summary>ストリームの先頭、ストリームの末尾、または現在のシーク ポインターに対して相対的な新しい場所にシーク ポインターを移動します。</summary>
      <param name="dlibMove">
        <paramref name="dwOrigin" /> に追加する変位。</param>
      <param name="dwOrigin">シークの開始点。 開始点は、ファイルの先頭、現在のシーク ポインター、またはファイルの末尾にできます。</param>
      <param name="plibNewPosition">正常に返された場合は、ストリームの先頭からのシーク ポインターのオフセットを格納します。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.SetSize(System.Int64)">
      <summary>ストリーム オブジェクトのサイズを変更します。</summary>
      <param name="libNewSize">ストリームの新しいサイズ (バイト数)。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
      <summary>ストリームの <see cref="T:System.Runtime.InteropServices.STATSTG" /> 構造体を取得します。</summary>
      <param name="pstatstg">このメソッドが返されるときに、このストリーム オブジェクトについて記述する <see langword="STATSTG" /> 構造体を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="grfStatFlag">
        <see langword="STATSTG" /> 構造体のメンバーのうち、このメソッドが返さないメンバー (不要なメモリ割り当てが行われないようにするため)。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
      <summary>以前に <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)" /> メソッドで制限したバイト範囲へのアクセス制限を解除します。</summary>
      <param name="libOffset">範囲の先頭のバイト オフセット。</param>
      <param name="cb">制限する範囲のバイト単位の長さ。</param>
      <param name="dwLockType">以前にその範囲に与えたアクセス制限。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Write(System.Byte[],System.Int32,System.IntPtr)">
      <summary>現在のシーク ポインターを開始点として、ストリーム オブジェクトに指定したバイト数だけ書き込みます。</summary>
      <param name="pv">ストリームを書き込むバッファー。</param>
      <param name="cb">ストリームに書き込むバイト数。</param>
      <param name="pcbWritten">正常に返された場合は、ストリーム オブジェクトに書き込まれた実際のバイト数を格納します。 呼び出し元がこのポインターを <see cref="F:System.IntPtr.Zero" /> に設定した場合、このメソッドは書き込まれた実際のバイト数を示しません。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeComp">
      <summary>
        <see langword="ITypeComp" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.Bind(System.String,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.DESCKIND@,System.Runtime.InteropServices.ComTypes.BINDPTR@)">
      <summary>型のメンバーに名前を割り当てたり、タイプ ライブラリに格納されているグローバル変数、および関数をバインドしたりします。</summary>
      <param name="szName">バインドする名前。</param>
      <param name="lHashVal">
        <see langword="LHashValOfNameSys" /> によって計算された <paramref name="szName" /> のハッシュ値。</param>
      <param name="wFlags">
        <see langword="INVOKEKIND" /> 列挙体に定義されている 1 つ以上の呼び出しフラグを含んでいる単語。</param>
      <param name="ppTInfo">
        <see langword="FUNCDESC" /> または <see langword="VARDESC" /> が返された場合は、このメソッドが返されるときに、バインド先の項目を格納している型の説明への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pDescKind">このメソッドが返されるときに、バインド先の名前が <see langword="DESCKIND" />、<see langword="VARDESC" />、<see langword="FUNCDESC" /> のいずれであるかを示す <see langword="TYPECOMP" /> 列挙子への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pBindPtr">このメソッドが返されるときに、バインド先の <see langword="VARDESC" />、<see langword="FUNCDESC" />、または <see langword="ITypeComp" /> インターフェイスへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.BindType(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>タイプ ライブラリ内に格納されている型の説明にバインドします。</summary>
      <param name="szName">バインドする名前。</param>
      <param name="lHashVal">
        <see langword="LHashValOfNameSys" /> によって決定された <paramref name="szName" /> のハッシュ値。</param>
      <param name="ppTInfo">このメソッドが返されるときに、<paramref name="szName" /> がバインドされた型の <see langword="ITypeInfo" /> への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="ppTComp">このメソッドが返されるときに、<see langword="ITypeComp" /> 変数への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo">
      <summary>コンポーネント オートメーションの ITypeInfo インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary>DLL 内で定義されている静的な関数または変数のアドレスを取得します。</summary>
      <param name="memid">取得する <see langword="static" /> メンバーのアドレスのメンバー ID。</param>
      <param name="invKind">メンバーがプロパティかどうかを指定し、プロパティである場合はその種類を示す <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 値の 1 つ。</param>
      <param name="ppv">このメソッドが返されるときに、<see langword="static" /> メンバーへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary>コンポーネント クラス (coclass) を記述する型の新しいインスタンスを作成します。</summary>
      <param name="pUnkOuter">制御側の <see langword="IUnknown" /> として機能するオブジェクト。</param>
      <param name="riid">作成されたオブジェクトと通信するために、呼び出し元が使用するインターフェイスの IID。</param>
      <param name="ppvObj">このメソッドが返されるときに、作成されたオブジェクトへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary>型の説明が格納されているタイプ ライブラリと、そのタイプ ライブラリ内におけるその型の説明のインデックスを取得します。</summary>
      <param name="ppTLB">このメソッドが返されるときに、この型の説明が格納されているタイプ ライブラリへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pIndex">このメソッドが返されるときに、型の説明が格納されているタイプ ライブラリ内におけるその説明のインデックスを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>DLL 内の関数へのエントリ ポイントの記述または仕様を取得します。</summary>
      <param name="memid">DLL エントリの記述を取得するメンバー関数の ID。</param>
      <param name="invKind">
        <paramref name="memid" /> で識別されるメンバーの種類を指定する <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 値の 1 つ。</param>
      <param name="pBstrDllName">
        <see langword="null" /> ではない場合、関数は <paramref name="pBstrDllName" /> を DLL の名前が格納されている <see langword="BSTR" /> に設定します。</param>
      <param name="pBstrName">
        <see langword="null" /> ではない場合、関数は <c>lpbstrName</c> をエントリ ポイントの名前が含まれている <see langword="BSTR" /> に設定します。</param>
      <param name="pwOrdinal">
        <see langword="null" /> ではない場合、関数は序数によって定義されます。<c>lpwOrdinal</c> はその序数を指すように設定されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>指定した型の説明に対するヘルプ トピックのドキュメント文字列、ヘルプ ファイルの完全限定名とパス、およびコンテキスト ID を取得します。</summary>
      <param name="index">ドキュメントを取得するメンバーの ID。</param>
      <param name="strName">このメソッドが返されるときに、項目メソッドの名前を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="strDocString">このメソッドから制御が戻るときに、指定した項目のドキュメント文字列を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="dwHelpContext">このメソッドが返されるときに、指定した項目に関連付けられたヘルプ コンテキストへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="strHelpFile">このメソッドが返されるときに、ヘルプ ファイルの完全修飾名を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary>指定した関数に関する情報を格納している <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 構造体を取得します。</summary>
      <param name="index">取得する関数の説明のインデックス。</param>
      <param name="ppFuncDesc">このメソッドが返されるときに、指定した関数について記述する <see langword="FUNCDESC" /> 構造体への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary>メンバー名をメンバー ID に、パラメーター名をパラメーター ID に割り当てます。</summary>
      <param name="rgszNames">割り当てる名前の配列。</param>
      <param name="cNames">割り当てる名前の数。</param>
      <param name="pMemId">このメソッドが返されるときに、名前の割り当てを格納する配列への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary>型の説明で実装されたインターフェイスまたは基本インターフェイスに対する <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> 値を取得します。</summary>
      <param name="index">実装されたインターフェイスまたは基本インターフェイスのインデックス。</param>
      <param name="pImplTypeFlags">このメソッドが返されるときに、<see langword="IMPLTYPEFLAGS" /> 列挙体への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetMops(System.Int32,System.String@)">
      <summary>マーシャリング情報を取得します。</summary>
      <param name="memid">必要なマーシャリング情報を示すメンバー ID。</param>
      <param name="pBstrMops">このメソッドが返されるときに、参照先の型の説明で記述されている、構造体のフィールドのマーシャリングに使用する <see langword="opcode" /> 文字列への参照を格納します。返す情報がない場合は、<see langword="null" /> を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary>指定した関数 ID に対応する指定したメンバー ID の変数 (またはプロパティやメソッドの名前とそのパラメーター) を取得します。</summary>
      <param name="memid">1 つ以上の名前が返されるメンバーの ID。</param>
      <param name="rgBstrNames">このメソッドが返されるときに、メンバーと関連付けられた 1 つ以上の名前を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="cMaxNames">
        <paramref name="rgBstrNames" /> 配列の長さ。</param>
      <param name="pcNames">このメソッドが返されるときに、<paramref name="rgBstrNames" /> 配列内の名前の数を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>型の説明が別の型の説明を参照している場合に、参照先の型の説明を取得します。</summary>
      <param name="hRef">取得する参照先の型の説明へのハンドル。</param>
      <param name="ppTI">このメソッドが返されるときに、参照先の型の説明を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary>型の説明が COM クラスの記述である場合に、実装されたインターフェイス型に関する型の説明を取得します。</summary>
      <param name="index">ハンドルを取得する実装された型のインデックス。</param>
      <param name="href">このメソッドが返されるときに、実装されたインターフェイスのハンドルへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)">
      <summary>型の説明の属性を格納している <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 構造体を取得します。</summary>
      <param name="ppTypeAttr">このメソッドが返されるときに、この型の説明の属性を格納する構造体への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>型の説明の <see langword="ITypeComp" /> インターフェイスを取得します。これを使用すると、クライアント コンパイラを型の説明のメンバーにバインドできます。</summary>
      <param name="ppTComp">このメソッドが返されるときに、型の説明が格納されているタイプ ライブラリの <see langword="ITypeComp" /> インターフェイスへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary>指定した変数を記述している <see langword="VARDESC" /> 構造体を取得します。</summary>
      <param name="index">取得する変数の説明のインデックス。</param>
      <param name="ppVarDesc">このメソッドが返されるときに、指定した変数について記述する <see langword="VARDESC" /> 構造体への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary>型の説明により説明されるインターフェイスを実装しているオブジェクトについて、メソッドを呼び出したりプロパティにアクセスしたりします。</summary>
      <param name="pvInstance">型の説明で記述されているインターフェイスへの参照。</param>
      <param name="memid">インターフェイス メンバーを識別する値。</param>
      <param name="wFlags">呼び出しのコンテキストを記述するフラグ。</param>
      <param name="pDispParams">引数の配列、名前付き引数の DISPID の配列、各配列内の要素数のカウントを格納している構造体への参照。</param>
      <param name="pVarResult">結果が格納される場所への参照。 <paramref name="wFlags" /> が <see langword="DISPATCH_PROPERTYPUT" /> または <see langword="DISPATCH_PROPERTYPUTREF" /> を指定している場合、<paramref name="pVarResult" /> は無視されます。 結果が必要ない場合は、<see langword="null" /> に設定します。</param>
      <param name="pExcepInfo">
        <see langword="DISP_E_EXCEPTION" /> が返される場合にだけ情報が格納される例外情報構造体へのポインター。</param>
      <param name="puArgErr">
        <see langword="Invoke" /> が <see langword="DISP_E_TYPEMISMATCH" /> を返す場合、<paramref name="puArgErr" /> は、型が正しくない引数について <c>rgvarg</c> 内のインデックスを示します。 複数の引数がエラーを返す場合、<paramref name="puArgErr" /> はエラーのある最初の引数だけを示します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseFuncDesc(System.IntPtr)">
      <summary>以前に <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> メソッドによって返された <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" /> 構造体を解放します。</summary>
      <param name="pFuncDesc">解放する <see langword="FUNCDESC" /> 構造体への参照。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseTypeAttr(System.IntPtr)">
      <summary>以前に <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> メソッドによって返された <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" /> 構造体を解放します。</summary>
      <param name="pTypeAttr">解放する <see langword="TYPEATTR" /> 構造体への参照。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseVarDesc(System.IntPtr)">
      <summary>以前に <see langword="VARDESC" /> メソッドによって返された <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" /> 構造体を解放します。</summary>
      <param name="pVarDesc">解放する <see langword="VARDESC" /> 構造体への参照。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo2">
      <summary>
        <see langword="ITypeInfo2" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary>DLL 内で定義されている静的な関数または変数のアドレスを取得します。</summary>
      <param name="memid">取得する <see langword="static" /> メンバーのアドレスのメンバー ID。</param>
      <param name="invKind">メンバーがプロパティかどうかを指定し、プロパティである場合はその種類を示す <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 値の 1 つ。</param>
      <param name="ppv">このメソッドが返されるときに、<see langword="static" /> メンバーへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary>コンポーネント クラス (coclass) を記述する型の新しいインスタンスを作成します。</summary>
      <param name="pUnkOuter">制御側の <see langword="IUnknown" /> として機能するオブジェクト。</param>
      <param name="riid">作成されたオブジェクトと通信するために、呼び出し元が使用するインターフェイスの IID。</param>
      <param name="ppvObj">このメソッドが返されるときに、作成されたオブジェクトへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllCustData(System.IntPtr)">
      <summary>ライブラリのすべてのカスタム データ項目を取得します。</summary>
      <param name="pCustData">すべてのカスタム データ項目を格納する <see langword="CUSTDATA" /> へのポインター。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllFuncCustData(System.Int32,System.IntPtr)">
      <summary>指定した関数からすべてのカスタム データを取得します。</summary>
      <param name="index">カスタム データを取得する関数のインデックス。</param>
      <param name="pCustData">すべてのカスタム データ項目を格納する <see langword="CUSTDATA" /> へのポインター。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllImplTypeCustData(System.Int32,System.IntPtr)">
      <summary>指定した実装型のすべてのカスタム データを取得します。</summary>
      <param name="index">カスタム データの実装型のインデックス。</param>
      <param name="pCustData">すべてのカスタム データ項目を格納する <see langword="CUSTDATA" /> へのポインター。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllParamCustData(System.Int32,System.Int32,System.IntPtr)">
      <summary>指定した関数パラメーターのすべてのカスタム データを取得します。</summary>
      <param name="indexFunc">カスタム データを取得する関数のインデックス。</param>
      <param name="indexParam">カスタム データを取得するこの関数のパラメーターのインデックス。</param>
      <param name="pCustData">すべてのカスタム データ項目を格納する <see langword="CUSTDATA" /> へのポインター。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllVarCustData(System.Int32,System.IntPtr)">
      <summary>カスタム データの変数を取得します。</summary>
      <param name="index">カスタム データを取得する変数のインデックス。</param>
      <param name="pCustData">すべてのカスタム データ項目を格納する <see langword="CUSTDATA" /> へのポインター。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary>型の説明が格納されているタイプ ライブラリと、そのタイプ ライブラリ内におけるその型の説明のインデックスを取得します。</summary>
      <param name="ppTLB">このメソッドが返されるときに、この型の説明が格納されているタイプ ライブラリへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pIndex">このメソッドが返されるときに、型の説明が格納されているタイプ ライブラリ内におけるその説明のインデックスを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetCustData(System.Guid@,System.Object@)">
      <summary>カスタム データを取得します。</summary>
      <param name="guid">データの識別に使用する GUID。</param>
      <param name="pVarVal">このメソッドが戻るときに、取得したデータを格納する場所を指定する <see langword="Object" /> が含まれています。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>DLL 内の関数へのエントリ ポイントの記述または仕様を取得します。</summary>
      <param name="memid">DLL エントリの記述を取得するメンバー関数の ID。</param>
      <param name="invKind">
        <paramref name="memid" /> で識別されるメンバーの種類を指定する <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 値の 1 つ。</param>
      <param name="pBstrDllName">
        <see langword="null" /> ではない場合、関数は <paramref name="pBstrDllName" /> を DLL の名前が格納されている <see langword="BSTR" /> に設定します。</param>
      <param name="pBstrName">
        <see langword="null" /> ではない場合、関数は <c>lpbstrName</c> をエントリ ポイントの名前が含まれている <see langword="BSTR" /> に設定します。</param>
      <param name="pwOrdinal">
        <see langword="null" /> ではない場合、関数は序数によって定義されます。<c>lpwOrdinal</c> はその序数を指すように設定されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>指定した型の説明に対するヘルプ トピックのドキュメント文字列、ヘルプ ファイルの完全限定名とパス、およびコンテキスト ID を取得します。</summary>
      <param name="index">ドキュメントを取得するメンバーの ID。</param>
      <param name="strName">このメソッドが返されるときに、項目メソッドの名前を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="strDocString">このメソッドから制御が戻るときに、指定した項目のドキュメント文字列を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="dwHelpContext">このメソッドが返されるときに、指定した項目に関連付けられたヘルプ コンテキストへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="strHelpFile">このメソッドが返されるときに、ヘルプ ファイルの完全修飾名を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary>ドキュメントの文字列、完全なヘルプ ファイルの名前とパス、使用するローカリゼーション コンテキスト、およびヘルプ ファイル内のライブラリ ヘルプ トピック用のコンテキスト ID を取得します。</summary>
      <param name="memid">型の説明のメンバー識別子。</param>
      <param name="pbstrHelpString">このメソッドが呼び出し元に復帰するときに、指定された項目の名前を含む <see langword="BSTR" /> が含まれています。 呼び出し元が項目名を必要としない場合、<paramref name="pbstrHelpString" /> を <see langword="null" /> にすることができます。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pdwHelpStringContext">このメソッドが呼び出し元に復帰するときに、ヘルプのローカリゼーション コンテキストが含まれています。 呼び出し元がヘルプ コンテキストを必要としない場合、<paramref name="pdwHelpStringContext" /> を <see langword="null" /> にすることができます。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pbstrHelpStringDll">このメソッドが呼び出し元に復帰するときに、ヘルプ ファイルで使用される DLL を含むファイルの完全修飾名を含む <see langword="BSTR" /> が含まれています。 呼び出し元がファイル名を必要としない場合、<paramref name="pbstrHelpStringDll" /> を <see langword="null" /> にすることができます。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>指定した関数からカスタム データを取得します。</summary>
      <param name="index">カスタム データを取得する関数のインデックス。</param>
      <param name="guid">データの識別に使用する GUID。</param>
      <param name="pVarVal">このメソッドが戻るときに、データを格納する場所を指定した <see langword="Object" /> を含みます。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary>指定した関数に関する情報を格納している <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> 構造体を取得します。</summary>
      <param name="index">取得する関数の説明のインデックス。</param>
      <param name="ppFuncDesc">このメソッドが返されるときに、指定した関数について記述する <see langword="FUNCDESC" /> 構造体への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncIndexOfMemId(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.Int32@)">
      <summary>既知の DISPID に基づいて特定のメンバーにバインドしますが、ここでメンバー名は不明です (たとえば、既定のメンバーにバインドする場合)。</summary>
      <param name="memid">メンバーの識別子。</param>
      <param name="invKind">memid によって識別されるメンバーの種類を指定する <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> 値の 1 つ。</param>
      <param name="pFuncIndex">このメソッドから制御が戻った時点で、インデックスが関数に格納されます。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary>メンバー名をメンバー ID に、パラメーター名をパラメーター ID に割り当てます。</summary>
      <param name="rgszNames">割り当てる名前の配列。</param>
      <param name="cNames">割り当てる名前の数。</param>
      <param name="pMemId">このメソッドが返されるときに、名前の割り当てを格納する配列への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>カスタム データの実装の種類を取得します。</summary>
      <param name="index">カスタム データの実装型のインデックス。</param>
      <param name="guid">データの識別に使用する GUID。</param>
      <param name="pVarVal">このメソッドが戻るときに、取得したデータを格納する場所を指定する <see langword="Object" /> が含まれています。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary>型の説明で実装されたインターフェイスまたは基本インターフェイスに対する <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> 値を取得します。</summary>
      <param name="index">実装されたインターフェイスまたは基本インターフェイスのインデックス。</param>
      <param name="pImplTypeFlags">このメソッドが返されるときに、<see langword="IMPLTYPEFLAGS" /> 列挙体への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetMops(System.Int32,System.String@)">
      <summary>マーシャリング情報を取得します。</summary>
      <param name="memid">必要なマーシャリング情報を示すメンバー ID。</param>
      <param name="pBstrMops">このメソッドが返されるときに、参照先の型の説明で記述されている、構造体のフィールドのマーシャリングに使用する <see langword="opcode" /> 文字列への参照を格納します。返す情報がない場合は、<see langword="null" /> を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary>指定した関数 ID に対応する指定したメンバー ID の変数 (またはプロパティやメソッドの名前とそのパラメーター) を取得します。</summary>
      <param name="memid">1 つ以上の名前が返されるメンバーの ID。</param>
      <param name="rgBstrNames">このメソッドが返されるときに、メンバーと関連付けられた 1 つ以上の名前を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="cMaxNames">
        <paramref name="rgBstrNames" /> 配列の長さ。</param>
      <param name="pcNames">このメソッドが返されるときに、<paramref name="rgBstrNames" /> 配列内の名前の数を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetParamCustData(System.Int32,System.Int32,System.Guid@,System.Object@)">
      <summary>指定されたカスタム データ パラメーターを取得します。</summary>
      <param name="indexFunc">カスタム データを取得する関数のインデックス。</param>
      <param name="indexParam">カスタム データを取得するこの関数のパラメーターのインデックス。</param>
      <param name="guid">データの識別に使用する GUID。</param>
      <param name="pVarVal">このメソッドが戻るときに、取得したデータを格納する場所を指定する <see langword="Object" /> が含まれています。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>型の説明が別の型の説明を参照している場合に、参照先の型の説明を取得します。</summary>
      <param name="hRef">取得する参照先の型の説明へのハンドル。</param>
      <param name="ppTI">このメソッドが返されるときに、参照先の型の説明を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary>型の説明が COM クラスの記述である場合に、実装されたインターフェイス型に関する型の説明を取得します。</summary>
      <param name="index">ハンドルを取得する実装された型のインデックス。</param>
      <param name="href">このメソッドが返されるときに、実装されたインターフェイスのハンドルへの参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeAttr(System.IntPtr@)">
      <summary>型の説明の属性を格納している <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> 構造体を取得します。</summary>
      <param name="ppTypeAttr">このメソッドが返されるときに、この型の説明の属性を格納する構造体への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>型の説明の <see langword="ITypeComp" /> インターフェイスを取得します。これを使用すると、クライアント コンパイラを型の説明のメンバーにバインドできます。</summary>
      <param name="ppTComp">このメソッドが返されるときに、型の説明が格納されているタイプ ライブラリの <see langword="ITypeComp" /> への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeFlags(System.Int32@)">
      <summary>割り当てを行わず型フラグを返します。 このメソッドは、<see langword="TYPEATTR" /> (型の属性) を拡張せずに型のフラグを拡張する <see langword="DWORD" /> 型フラグを返します。</summary>
      <param name="pTypeFlags">このメソッドが戻った時点で、<see langword="TYPEFLAG" /> への <see langword="DWORD" /> 参照が格納されます。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeKind(System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>割り当てを一切実行せずに、<see langword="TYPEKIND" /> 列挙型を迅速に返します。</summary>
      <param name="pTypeKind">このメソッドが戻った時点で、<see langword="TYPEKIND" /> 列挙型への参照が格納されます。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>カスタム データの変数を取得します。</summary>
      <param name="index">カスタム データを取得する変数のインデックス。</param>
      <param name="guid">データの識別に使用する GUID。</param>
      <param name="pVarVal">このメソッドが戻るときに、取得したデータを格納する場所を指定する <see langword="Object" /> が含まれています。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary>指定した変数を記述している <see langword="VARDESC" /> 構造体を取得します。</summary>
      <param name="index">取得する変数の説明のインデックス。</param>
      <param name="ppVarDesc">このメソッドが返されるときに、指定した変数について記述する <see langword="VARDESC" /> 構造体への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarIndexOfMemId(System.Int32,System.Int32@)">
      <summary>既知の <see langword="DISPID" /> に基づいて特定のメンバーにバインドしますが、ここでメンバー名は不明です (たとえば、既定のメンバーにバインドする場合)。</summary>
      <param name="memid">メンバーの識別子。</param>
      <param name="pVarIndex">このメソッドから制御が戻った時点で、<paramref name="memid" /> のインデックスが格納されます。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary>型の説明により説明されるインターフェイスを実装しているオブジェクトについて、メソッドを呼び出したりプロパティにアクセスしたりします。</summary>
      <param name="pvInstance">型の説明で記述されているインターフェイスへの参照。</param>
      <param name="memid">インターフェイス メンバーの識別子。</param>
      <param name="wFlags">呼び出しのコンテキストを記述するフラグ。</param>
      <param name="pDispParams">引数の配列、名前付き引数の DISPID の配列、各配列内の要素数のカウントを格納している構造体への参照。</param>
      <param name="pVarResult">結果が格納される場所への参照。 <paramref name="wFlags" /> が <see langword="DISPATCH_PROPERTYPUT" /> または <see langword="DISPATCH_PROPERTYPUTREF" /> を指定している場合、<paramref name="pVarResult" /> は無視されます。 結果が必要ない場合は、<see langword="null" /> に設定します。</param>
      <param name="pExcepInfo">
        <see langword="DISP_E_EXCEPTION" /> が返される場合にだけ情報が格納される例外情報構造体へのポインター。</param>
      <param name="puArgErr">
        <see langword="Invoke" /> が <see langword="DISP_E_TYPEMISMATCH" /> を返す場合、<paramref name="puArgErr" /> は、型が正しくない引数のインデックスを示します。 複数の引数がエラーを返す場合、<paramref name="puArgErr" /> はエラーのある最初の引数だけを示します。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseFuncDesc(System.IntPtr)">
      <summary>以前に <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> メソッドによって返された <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" /> 構造体を解放します。</summary>
      <param name="pFuncDesc">解放する <see langword="FUNCDESC" /> 構造体への参照。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseTypeAttr(System.IntPtr)">
      <summary>以前に <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> メソッドによって返された <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" /> 構造体を解放します。</summary>
      <param name="pTypeAttr">解放する <see langword="TYPEATTR" /> 構造体への参照。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseVarDesc(System.IntPtr)">
      <summary>以前に <see langword="VARDESC" /> メソッドによって返された <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" /> 構造体を解放します。</summary>
      <param name="pVarDesc">解放する <see langword="VARDESC" /> 構造体への参照。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib">
      <summary>
        <see langword="ITypeLib" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary>タイプ ライブラリで型の説明を検索します。</summary>
      <param name="szNameBuf">検索する名前。 これは in/out パラメーターです。</param>
      <param name="lHashVal">
        <see langword="LHashValOfNameSys" /> 関数によって計算され、検索を高速化するハッシュ値。 <paramref name="lHashVal" /> が 0 の場合、値が計算されます。</param>
      <param name="ppTInfo">このメソッドが返されるときに、<paramref name="szNameBuf" /> で指定した名前を含む型の説明へのポインターの配列を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="rgMemId">検出された項目の <see langword="MEMBERID" /> の配列。<paramref name="rgMemId" />[i] は、<paramref name="ppTInfo" />[i] によって指定される型の説明にインデックスを作成する <see langword="MEMBERID" /> です。 <see langword="null" /> にすることはできません。</param>
      <param name="pcFound">開始時に、検索するインスタンス数を示します。 たとえば、最初の項目を検索するには、<paramref name="pcFound" /> = 1 を呼び出します。 検索は 1 つのインスタンスが見つかったときに停止します。  
終了時には、検索されたインスタンス数を示します。 <paramref name="pcFound" /> の <see langword="in" /> 値と <see langword="out" /> 値が同じ場合は、その名前を含む型の説明がもっと多く存在している可能性があります。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>ヘルプ ファイルのライブラリ ヘルプ トピックのライブラリ ドキュメント文字列、完全なヘルプ ファイル名とパス、およびコンテキスト識別子を取得します。</summary>
      <param name="index">ドキュメントを取得する型の説明のインデックス。</param>
      <param name="strName">このメソッドが返されるときに、指定した項目の名前を表す文字列を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="strDocString">このメソッドが返されるときに、指定した項目のドキュメント文字列を表す文字列を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="dwHelpContext">このメソッドが返されるときに、指定した項目に関連付けられたヘルプ コンテキストの識別子を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="strHelpFile">このメソッドが返されるときに、ヘルプ ファイルの完全修飾名を表す文字列を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)">
      <summary>ライブラリの属性を格納している構造体を取得します。</summary>
      <param name="ppTLibAttr">このメソッドが返されるときに、ライブラリの属性を格納している構造体を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>クライアント コンパイラがライブラリの型、変数、定数、およびグローバル関数をバインドできるようにします。</summary>
      <param name="ppTComp">このメソッドが返されるときに、この <see langword="ITypeComp" /> の <see langword="ITypeLib" /> インスタンスを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>ライブラリ内の指定した型の説明を取得します。</summary>
      <param name="index">取得する <see langword="ITypeInfo" /> インターフェイスのインデックス。</param>
      <param name="ppTI">このメソッドが返されるときに、<paramref name="index" /> が参照する型について記述する <see langword="ITypeInfo" /> を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoCount">
      <summary>タイプ ライブラリにある型の説明の数を返します。</summary>
      <returns>タイプ ライブラリにある型の説明の数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>指定された GUID に対応するタイプ記述を取得します。</summary>
      <param name="guid">インターフェイスの IID または型情報が要求されたクラスの CLSID。</param>
      <param name="ppTInfo">このメソッドが返されるときに、要求された <see langword="ITypeInfo" /> インターフェイスを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>型の説明の型を取得します。</summary>
      <param name="index">タイプ ライブラリ内の型の説明のインデックス。</param>
      <param name="pTKind">このメソッドが返されるときに、型の説明の <see langword="TYPEKIND" /> 列挙体への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.IsName(System.String,System.Int32)">
      <summary>渡された文字列がライブラリで記述される型またはメンバーの名前を格納しているかどうかを示します。</summary>
      <param name="szNameBuf">テストする文字列。 これは in/out パラメーターです。</param>
      <param name="lHashVal">
        <paramref name="szNameBuf" /> のハッシュ値。</param>
      <returns>
        <paramref name="szNameBuf" /> がタイプ ライブラリに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.ReleaseTLibAttr(System.IntPtr)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> メソッドから初めに取得した <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" /> 構造体を解放します。</summary>
      <param name="pTLibAttr">解放する <see langword="TLIBATTR" /> 構造体。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib2">
      <summary>
        <see langword="ITypeLib2" /> インターフェイスのマネージド定義を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary>タイプ ライブラリで型の説明を検索します。</summary>
      <param name="szNameBuf">検索する名前。</param>
      <param name="lHashVal">
        <see langword="LHashValOfNameSys" /> 関数によって計算され、検索を高速化するハッシュ値。 <paramref name="lHashVal" /> が 0 の場合、値が計算されます。</param>
      <param name="ppTInfo">このメソッドが返されるときに、<paramref name="szNameBuf" /> で指定した名前を含む型の説明へのポインターの配列を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="rgMemId">このメソッドから制御が戻るときに、検出された項目の <see langword="MEMBERID" /> の配列を格納します。<paramref name="rgMemId" />[i] は、<paramref name="ppTInfo" />[i] によって指定される型の説明にインデックスを作成する <see langword="MEMBERID" /> です。 このパラメーターを <see langword="null" /> とすることはできません。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pcFound">検索するインスタンス数を示している、開始時の値 (参照渡し)。 たとえば、最初の項目を検索するには、<paramref name="pcFound" /> = 1 を呼び出します。 検索は 1 つのインスタンスが見つかったときに停止します。  
終了時には、検索されたインスタンス数を示します。 <paramref name="pcFound" /> の <see langword="in" /> 値と <see langword="out" /> 値が同じ場合は、その名前を含む型の説明がもっと多く存在している可能性があります。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetAllCustData(System.IntPtr)">
      <summary>ライブラリのすべてのカスタム データ項目を取得します。</summary>
      <param name="pCustData">すべてのカスタム データ項目を格納する <see langword="CUSTDATA" /> へのポインター。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetCustData(System.Guid@,System.Object@)">
      <summary>カスタム データを取得します。</summary>
      <param name="guid">
        <see cref="T:System.Guid" />、参照によって渡され、データの識別に使用されます。</param>
      <param name="pVarVal">このメソッドが戻るときに、取得したデータを格納する場所を指定するオブジェクトが含まれています。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>ヘルプ ファイルのライブラリ ヘルプ トピックのライブラリ ドキュメント文字列、完全なヘルプ ファイル名とパス、およびコンテキスト識別子を取得します。</summary>
      <param name="index">ドキュメントを取得する型の説明のインデックス。</param>
      <param name="strName">このメソッドから制御が戻るときに、指定した項目の名前を指定する文字列を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="strDocString">このメソッドから制御が戻るときに、指定した項目のドキュメント文字列を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="dwHelpContext">このメソッドが返されるときに、指定した項目に関連付けられたヘルプ コンテキストの識別子を格納します。 このパラメーターは初期化せずに渡されます。</param>
      <param name="strHelpFile">このメソッドから制御が戻るときに、ヘルプ ファイルの完全修飾名を指定する文字列を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary>ライブラリのドキュメントの文字列、完全なヘルプ ファイルの名前とパス、使用するローカリゼーション コンテキスト、およびヘルプ ファイル内のライブラリ ヘルプ トピック用のコンテキスト ID を取得します。</summary>
      <param name="index">返されるドキュメントの種類の説明のインデックス。<paramref name="index" /> が -1 の場合、ライブラリのドキュメントが返されます。</param>
      <param name="pbstrHelpString">このメソッドが呼び出し元に復帰するときに、指定された項目の名前を指定する BSTR が含まれています。 呼び出し元が項目名を必要としない場合、<paramref name="pbstrHelpString" /> を <see langword="null" /> にすることができます。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pdwHelpStringContext">このメソッドが呼び出し元に復帰するときに、ヘルプのローカリゼーション コンテキストが含まれています。 呼び出し元がヘルプ コンテキストを必要としない場合、<paramref name="pdwHelpStringContext" /> を <see langword="null" /> にすることができます。 このパラメーターは初期化せずに渡されます。</param>
      <param name="pbstrHelpStringDll">このメソッドが呼び出し元に復帰するときに、ヘルプ ファイルで使用される DLL を含むファイルの完全修飾名を指定する BSTR が含まれています。 呼び出し元がファイル名を必要としない場合、<paramref name="pbstrHelpStringDll" /> を <see langword="null" /> にすることができます。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibAttr(System.IntPtr@)">
      <summary>ライブラリの属性を格納している構造体を取得します。</summary>
      <param name="ppTLibAttr">このメソッドが返されるときに、ライブラリの属性を格納している構造体を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibStatistics(System.IntPtr,System.Int32@)">
      <summary>ハッシュ テーブルの効果的なサイズ変更に必要なタイプ ライブラリに関する統計情報を返します。</summary>
      <param name="pcUniqueNames">一意名の数へのポインター。 呼び出し元がこの情報を必要としない場合は、<see langword="null" /> に設定します。</param>
      <param name="pcchUniqueNames">このメソッドから制御が戻るときに、一意名の数の変更へのポインターを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>クライアント コンパイラがライブラリの型、変数、定数、およびグローバル関数をバインドできるようにします。</summary>
      <param name="ppTComp">このメソッドから制御が戻るときに、この <see langword="ITypeComp" /> の <see langword="ITypeLib" /> インスタンスを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>ライブラリ内の指定した型の説明を取得します。</summary>
      <param name="index">取得する <see langword="ITypeInfo" /> インターフェイスのインデックス。</param>
      <param name="ppTI">このメソッドが返されるときに、<paramref name="index" /> が参照する型について記述する <see langword="ITypeInfo" /> を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoCount">
      <summary>タイプ ライブラリにある型の説明の数を返します。</summary>
      <returns>タイプ ライブラリにある型の説明の数。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>指定された GUID に対応するタイプ記述を取得します。</summary>
      <param name="guid">型情報を要求されたクラスの <see langword="CLSID" /> インターフェイスの IID を表す <see cref="T:System.Guid" /> (参照渡し)。</param>
      <param name="ppTInfo">このメソッドが返されるときに、要求された <see langword="ITypeInfo" /> インターフェイスを格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>型の説明の型を取得します。</summary>
      <param name="index">タイプ ライブラリ内の型の説明のインデックス。</param>
      <param name="pTKind">このメソッドが返されるときに、型の説明の <see langword="TYPEKIND" /> 列挙体への参照を格納します。 このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.IsName(System.String,System.Int32)">
      <summary>渡された文字列がライブラリで記述される型またはメンバーの名前を格納しているかどうかを示します。</summary>
      <param name="szNameBuf">テストする文字列。</param>
      <param name="lHashVal">
        <paramref name="szNameBuf" /> のハッシュ値。</param>
      <returns>
        <paramref name="szNameBuf" /> がタイプ ライブラリに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.ReleaseTLibAttr(System.IntPtr)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> メソッドから初めに取得した <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" /> 構造体を解放します。</summary>
      <param name="pTLibAttr">解放する <see langword="TLIBATTR" /> 構造体。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.LIBFLAGS">
      <summary>タイプ ライブラリに適用するフラグを定義します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FCONTROL">
      <summary>タイプ ライブラリはコントロールについて記述します。表示できる形式を持たないオブジェクト用の型ブラウザーには表示しないでください。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHASDISKIMAGE">
      <summary>タイプ ライブラリは、ディスク上の永続化されたフォームに存在しています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHIDDEN">
      <summary>タイプ ライブラリの使用は制限されませんが、ユーザーに対しては表示しないでください。 タイプ ライブラリは、コントロールによって使用される必要があります。 ホストでは、エクステンダー プロパティと共にコントロールをラップする新しいタイプ ライブラリを作成することをお勧めします。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FRESTRICTED">
      <summary>タイプ ライブラリは制限されています。ユーザーに対して表示しないでください。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMDESC">
      <summary>構造体の要素、パラメーター、または関数の戻り値をプロセス間で転送する方法に関する情報を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.lpVarValue">
      <summary>プロセス間で渡されている値へのポインターを表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.wParamFlags">
      <summary>構造体要素、パラメーター、または戻り値を記述するビットマスク値を表します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMFLAG">
      <summary>構造体の要素、パラメーター、または関数の戻り値をプロセス間で転送する方法を記述します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASCUSTDATA">
      <summary>パラメーターは、カスタム データを保持しています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASDEFAULT">
      <summary>パラメーターは、定義された既定の動作を保持しています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FIN">
      <summary>パラメーターは、呼び出し元から呼び出し先に情報を渡します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FLCID">
      <summary>パラメーターは、クライアント アプリケーションのローカル ID です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOPT">
      <summary>パラメーターはオプションです。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOUT">
      <summary>パラメーターは、呼び出し先から呼び出し元に情報を返します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FRETVAL">
      <summary>パラメーターは、メンバーの戻り値です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_NONE">
      <summary>パラメーターが情報を渡すか、情報を受け取るかを指定しません。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATDATA">
      <summary>
        <see langword="STATDATA" /> 構造体のマネージド定義を提供します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advf">
      <summary>アドバイズ シンクがデータの変更を通知される時点を決定する <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> 列挙値を表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advSink">
      <summary>変更通知を受け取る <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> インターフェイスを表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.connection">
      <summary>アドバイザリ コネクションを一意に識別するトークンを表します。 このトークンは、アドバイザリ コネクションを設定するメソッドによって返されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.formatetc">
      <summary>アドバイズ シンクが必要とするデータの <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体を表します。 アドバイズ シンクは、この <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 構造体で指定されたデータの変更の通知を受け取ります。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATSTG">
      <summary>開いているストレージ、ストリーム、またはバイト配列オブジェクトに関する統計情報を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.atime">
      <summary>ストレージ、ストリーム、またはバイト配列に対する最後のアクセス時刻を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.cbSize">
      <summary>ストリームまたはバイト配列のサイズをバイト単位で指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.clsid">
      <summary>ストレージ オブジェクトのクラス識別子を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.ctime">
      <summary>ストレージ、ストリーム、またはバイト配列の作成時刻を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfLocksSupported">
      <summary>ストリームまたはバイト配列がサポートしている領域ロックの種類を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfMode">
      <summary>オブジェクトを開いたときに指定されたアクセス モードを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfStateBits">
      <summary>ストレージ オブジェクトの現在の状態ビット (最後に <see langword="IStorage::SetStateBits" /> メソッドによって設定された値) を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.mtime">
      <summary>ストレージ、ストリーム、またはバイト配列に対する最後の変更時刻を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.pwcsName">
      <summary>構造体が記述するオブジェクトの名前を格納している、終端が null の文字列へのポインターを表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.reserved">
      <summary>将来使用するために予約されています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.type">
      <summary>
        <see langword="STGTY" /> 列挙体の値の 1 つで、ストレージ オブジェクトの種類を示します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM">
      <summary>
        <see langword="STGMEDIUM" /> 構造体のマネージド定義を提供します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease">
      <summary>受信プロセスが <see langword="ReleaseStgMedium" /> 関数を呼び出したときにストレージが解放される方法を送信プロセスが制御できるようにするインターフェイス インスタンスへのポインターを表します。 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> が <see langword="null" /> の場合、<see langword="ReleaseStgMedium" /> は既定プロシージャを使用してストレージを解放します。それ以外の場合、<see langword="ReleaseStgMedium" /> は指定された <see langword="IUnknown" /> インターフェイスを使用します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed">
      <summary>ストレージ メディアの種類を指定します。 マーシャリング ルーチンとマーシャリング解除ルーチンは、この値を使用して、どの共用体メンバーが使用されたかを確認します。 この値は、<see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 列挙体の要素のいずれかである必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.unionmember">
      <summary>受信プロセスが、転送されるデータにアクセスするために使用できるハンドル、文字列、またはインターフェイス ポインターを表します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.SYSKIND">
      <summary>ターゲット オペレーティング システムのプラットフォームを識別します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_MAC">
      <summary>タイプ ライブラリの対象オペレーティング システムは、Apple Macintosh です。 既定では、すべてのデータ フィールドは偶数バイト境界に配置されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN16">
      <summary>タイプ ライブラリの対象オペレーティング システムは、16 ビット Windows システムです。 既定では、データ フィールドはパックされます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN32">
      <summary>タイプ ライブラリの対象オペレーティング システムは、32 ビット Windows システムです。 既定では、データ メンバーは自然に配置されます。たとえば、2 バイト整数は偶数バイト境界に配置され、4 バイト整数はクワドワード境界に配置されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN64">
      <summary>タイプ ライブラリの対象オペレーティング システムは、64 ビット Windows システムです。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYMED">
      <summary>
        <see langword="TYMED" /> 構造体のマネージド定義を提供します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ENHMF">
      <summary>ストレージ メディアは、拡張メタファイルです。 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> メンバーが <see langword="null" /> の場合、目的のプロセスは <see langword="DeleteEnhMetaFile" /> を使用してビットマップを削除する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE">
      <summary>ストレージ メディアは、パスで識別されるディスク ファイルです。 <see langword="STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> メンバーが <see langword="null" /> の場合、目的のプロセスは <see langword="OpenFile" /> を使用してファイルを削除する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_GDI">
      <summary>ストレージ メディアは、グラフィック デバイス インターフェイス (GDI: Graphics Device Interface) コンポーネント (HBITMAP) です。 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> メンバーが <see langword="null" /> の場合、目的のプロセスは <see langword="DeleteObject" /> を使用してビットマップを削除する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL">
      <summary>ストレージ メディアは、グローバル メモリ ハンドル (HGLOBAL) です。 GMEM_SHARE フラグを使用して、グローバル メモリ ハンドルを割り当てます。 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> メンバーが <see langword="null" /> の場合、目的のプロセスは <see langword="GlobalFree" /> を使用してメモリを解放する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE">
      <summary>ストレージ メディアは、<see langword="IStorage" /> ポインターで識別されるストレージ コンポーネントです。 データはストリーム内にあり、ストレージはこの <see langword="IStorage" /> インスタンスにより格納されます。 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> メンバーが <see langword="null" /> でない場合、目的のプロセスは <see langword="IStorage::Release" /> を使用してストレージ コンポーネントを解放する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM">
      <summary>ストレージ メディアは、<see langword="IStream" /> ポインターで識別されるストリーム オブジェクトです。 <see langword="ISequentialStream::Read" /> を使用してデータを読み取ります。 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> メンバーが <see langword="null" /> でない場合、目的のプロセスは <see langword="IStream::Release" /> を使用してストリーム コンポーネントを解放する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_MFPICT">
      <summary>ストレージ メディアは、メタファイル (HMETAFILE) です。 Windows 関数または Win32 関数を使用して、メタフェイルのデータにアクセスします。 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> メンバーが <see langword="null" /> の場合、目的のプロセスは <see langword="DeleteMetaFile" /> を使用してビットマップを削除する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_NULL">
      <summary>データが渡されていません。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEATTR">
      <summary>
        <see langword="UCOMITypeInfo" /> の属性を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbAlignment">
      <summary>この型のインスタンスのバイト配置を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeInstance">
      <summary>この型のインスタンスのサイズ。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeVft">
      <summary>この型の仮想メソッド テーブル (VTBL) のサイズ。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cFuncs">
      <summary>構造体が記述するインターフェイス上の関数の数を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cImplTypes">
      <summary>構造体が記述するインターフェイス上で実装されたインターフェイスの数を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cVars">
      <summary>構造体が記述するインターフェイス上の変数とデータ フィールドの数を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.dwReserved">
      <summary>将来使用するために予約されています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.guid">
      <summary>型情報の GUID。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.idldescType">
      <summary>記述された型の IDL 属性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lcid">
      <summary>メンバー名とドキュメント文字列のロケール。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lpstrSchema">
      <summary>将来使用するために予約されています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.MEMBER_ID_NIL">
      <summary>
        <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidConstructor" /> フィールドと <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidDestructor" /> フィールドで使用する定数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidConstructor">
      <summary>コンストラクターの ID。または存在しない場合は <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidDestructor">
      <summary>デストラクターの ID。または存在しない場合は <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.tdescAlias">
      <summary>
        <see cref="F:System.Runtime.InteropServices.TYPEATTR.typekind" /> == <see cref="F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS" /> の場合は、この型をエイリアスとする元の型を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.typekind">
      <summary>この情報が記述している型を記述する <see cref="T:System.Runtime.InteropServices.TYPEKIND" /> 値。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMajorVerNum">
      <summary>メジャー バージョン番号。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMinorVerNum">
      <summary>マイナー バージョン番号。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wTypeFlags">
      <summary>この情報を記述する <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> 値。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEDESC">
      <summary>変数の型、関数の戻り値の型、関数パラメーターの型を記述します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.lpValue">
      <summary>変数が <see langword="VT_SAFEARRAY" /> または <see langword="VT_PTR" /> の場合、<see langword="lpValue" /> フィールドは要素の型を指定する <see langword="TYPEDESC" /> へのポインターを格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.vt">
      <summary>
        <see langword="TYPEDESC" /> が記述する項目のバリアントの型を示します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEFLAGS">
      <summary>型の説明のプロパティと属性を定義します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAGGREGATABLE">
      <summary>クラスは、集約をサポートしています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAPPOBJECT">
      <summary>
        <see langword="Application" /> オブジェクトを記述する型の説明。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCANCREATE">
      <summary>型のインスタンスは、<see langword="ITypeInfo::CreateInstance" /> で作成できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCONTROL">
      <summary>型は他の型の派生元になるコントロールであり、ユーザーには表示されません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDISPATCHABLE">
      <summary>インターフェイスが <see langword="IDispatch" /> から直接または間接に派生したものであることを示します。 このフラグは計算されます。このフラグのオブジェクト記述言語はありません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDUAL">
      <summary>インターフェイスは、<see langword="IDispatch" /> と VTBL バインディングの両方を提供します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FHIDDEN">
      <summary>型はブラウザーに表示しないでください。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FLICENSED">
      <summary>型はライセンス付きです。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FNONEXTENSIBLE">
      <summary>インターフェイスは、実行時にメンバーを追加できません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FOLEAUTOMATION">
      <summary>インターフェイスで使用される型は、VTBL バインディングのサポートを含むオートメーションに完全に準拠しています。 インターフェイスでデュアルを設定すると、このフラグと <see cref="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL" /> が設定されます。 このフラグはディスパッチ インターフェイスには設定できません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPREDECLID">
      <summary>型は定義済みです。 クライアント アプリケーションは、この属性を持つオブジェクトの単一のインスタンスを自動的に作成します。 オブジェクトを指す変数の名前は、そのオブジェクトのクラス名と同じです。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPROXY">
      <summary>インターフェイスはプロキシ/スタブ ダイナミック リンク ライブラリを使用することを示します。 このフラグは、タイプ ライブラリの登録が解除されている場合に、タイプ ライブラリ プロキシの登録を解除してはいけないことを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREPLACEABLE">
      <summary>オブジェクトは、<see langword="IConnectionPointWithDefault" /> をサポートし、既定の動作を備えています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FRESTRICTED">
      <summary>マクロ言語からはアクセスできません。 このフラグは、システム レベルの型または型ブラウザーに表示しない型で使用します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREVERSEBIND">
      <summary>基本インターフェイスが、名前解決を確認してから子を確認することを示します。これは既定の反対の動作です。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEKIND">
      <summary>データおよび関数のさまざまな型を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ALIAS">
      <summary>別の型のエイリアスである型です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_COCLASS">
      <summary>実装されたコンポーネントのインターフェイス セットです。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_DISPATCH">
      <summary>
        <see langword="IDispatch::Invoke" /> を使用してアクセスできるメソッド、およびプロパティのセット。 既定では、デュアル インターフェイスは <see langword="TKIND_DISPATCH" /> を返します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ENUM">
      <summary>列挙子のセットです。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_INTERFACE">
      <summary>すべて純粋仮想関数である仮想関数を持つ型です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MAX">
      <summary>列挙体末尾のマーカー。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MODULE">
      <summary>静的関数および静的データ (DLL など) だけを保持できるモジュール。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_RECORD">
      <summary>メソッドを持たない構造体。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_UNION">
      <summary>ゼロのオフセットを持つ、すべてのメンバーの和集合。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPELIBATTR">
      <summary>特定のタイプ ライブラリを識別し、メンバー名のローカライズ サポートを提供します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.guid">
      <summary>タイプ ライブラリのグローバル一意ライブラリ識別子を表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.lcid">
      <summary>タイプ ライブラリのロケール ID を表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.syskind">
      <summary>タイプ ライブラリの対象のハードウェア プラットフォームを表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wLibFlags">
      <summary>ライブラリ フラグを表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMajorVerNum">
      <summary>タイプ ライブラリのメジャー バージョン番号を表します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMinorVerNum">
      <summary>タイプ ライブラリのマイナー バージョン番号を表します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC">
      <summary>変数、定数、またはデータ メンバーを記述します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.desc">
      <summary>変数に関する情報を格納します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION">
      <summary>変数に関する情報を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.lpvarValue">
      <summary>記号定数を記述します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.oInst">
      <summary>インスタンス内でこの変数のオフセットを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.elemdescVar">
      <summary>変数を格納します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.lpstrSchema">
      <summary>このフィールドは将来使用するために予約されています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.memid">
      <summary>変数のメンバー ID を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.varkind">
      <summary>変数をマーシャリングする方法を定義します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.wVarFlags">
      <summary>変数のプロパティを指定します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARFLAGS">
      <summary>変数のプロパティを定義する定数を識別します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FBINDABLE">
      <summary>変数はデータ連結をサポートしています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTBIND">
      <summary>変数は、オブジェクトを最もよく表す単一のプロパティです。 型情報の 1 つの変数だけが、この属性を持つことができます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTCOLLELEM">
      <summary>コンパイラが "abc" の型で "xyz" という名前のメンバーを検索する場合に最適化を許可します。 そのようなメンバーが見つかり、既定のコレクション要素のアクセサー関数であることを示すフラグが付いている場合、そのメンバー関数の呼び出しが生成されます。 dispinterface およびインターフェイスのメンバーでは許可されますが、モジュールでは許可されません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDISPLAYBIND">
      <summary>変数は、連結できる状態でユーザーに表示されます。 <see cref="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE" /> も設定する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FHIDDEN">
      <summary>連結できる変数が存在しますが、ユーザーのブラウザーには表示されません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FIMMEDIATEBIND">
      <summary>変数は、個別のバインド可能なプロパティとして割り当てられます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FNONBROWSABLE">
      <summary>変数はオブジェクト ブラウザーに表示されますが、プロパティ ブラウザーには表示されません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREADONLY">
      <summary>変数への割り当ては許可しないでください。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREPLACEABLE">
      <summary>インターフェイスが既定の動作を備えていることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREQUESTEDIT">
      <summary>設定した場合は、そのプロパティを直接変更しようとすると <see langword="IPropertyNotifySink::OnRequestEdit" /> が呼び出されます。 <see langword="OnRequestEdit" /> の実装は、変更を受け入れるかどうかを判断します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FRESTRICTED">
      <summary>変数は、マクロ言語からはアクセスできません。 このフラグは、システム レベル変数または型ブラウザーに表示しない変数で使用します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FSOURCE">
      <summary>変数は、イベントの発生元のオブジェクトを返します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FUIDEFAULT">
      <summary>変数は、ユーザー インターフェイスの既定の表示です。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARKIND">
      <summary>変数の種類を定義します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_CONST">
      <summary>
        <see langword="VARDESC" /> 構造体は、記号定数を記述します。 記号定数に関連付けられたメモリはありません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_DISPATCH">
      <summary>変数には、<see langword="IDispatch::Invoke" /> を使用したときにだけアクセスできます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_PERINSTANCE">
      <summary>変数は、フィールドまたは型のメンバーです。 それぞれの型のインスタンス内の固定オフセットに存在します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_STATIC">
      <summary>変数のインスタンスは 1 つしか存在しません。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute">
      <summary>COM で使用できるように登録したアセンブリの登録を解除するときに呼び出すメソッドを指定します。これにより、登録解除中にユーザー記述コードを実行できます。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComUnregisterFunctionAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CurrencyWrapper">
      <summary>マーシャラーが <see langword="VT_CY" /> としてマーシャリングする必要があるオブジェクトをラップします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Decimal)">
      <summary>ラップされ、型 <see langword="Decimal" /> としてマーシャリングされる <see langword="VT_CY" /> を指定して、<see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="obj">ラップされ、<see langword="Decimal" /> としてマーシャリングされる <see langword="VT_CY" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Object)">
      <summary>ラップされ、型 <see langword="Decimal" /> としてマーシャリングされる <see langword="VT_CY" /> を格納しているオブジェクトを指定して、<see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="obj">ラップされ、<see langword="Decimal" /> としてマーシャリングされる <see langword="VT_CY" /> を格納しているオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> パラメーターが <see cref="T:System.Decimal" /> 型ではありません。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.CurrencyWrapper.WrappedObject">
      <summary>型 <see langword="VT_CY" /> としてマーシャリングされる、ラップされたオブジェクトを取得します。</summary>
      <returns>型 <see langword="VT_CY" /> としてマーシャリングされる、ラップされたオブジェクト。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceMode">
      <summary>
        <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> メソッドの IUnknown::QueryInterface 呼び出しで <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> インターフェイスを使用できるかどうかを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Allow">
      <summary>IUnknown::QueryInterface メソッドの呼び出しは <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> インターフェイスを使用できます。 この値を使用する場合、<see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> メソッド オーバーロードは、<see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" /> オーバーロードと同じように動作します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Ignore">
      <summary>IUnknown::QueryInterface メソッドの呼び出しは <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> インターフェイスを無視する必要があります。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceResult">
      <summary>
        <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> メソッドの戻り値を提供します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Failed">
      <summary>特定のインターフェイス ID のインターフェイスを使用できません。 この場合、返されるインターフェイスは <see langword="null" /> です。 IUnknown::QueryInterface の呼び出し元に E_NOINTERFACE が返されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled">
      <summary>
        <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> メソッドから返されるインターフェイス ポインターは、IUnknown::QueryInterface の結果として使用できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled">
      <summary>カスタムの <see langword="QueryInterface" /> は使用されていません。 代わりに、IUnknown::QueryInterface の既定の実装を使用する必要があります。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultCharSetAttribute">
      <summary>
        <see cref="T:System.Runtime.InteropServices.CharSet" /> 列挙体の値を指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultCharSetAttribute.#ctor(System.Runtime.InteropServices.CharSet)">
      <summary>指定した <see cref="T:System.Runtime.InteropServices.CharSet" /> 値を使用して、<see cref="T:System.Runtime.InteropServices.DefaultCharSetAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="charSet">
        <see cref="T:System.Runtime.InteropServices.CharSet" /> 値のいずれか。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultCharSetAttribute.CharSet">
      <summary>
        <see cref="T:System.Runtime.InteropServices.CharSet" /> の任意の呼び出しに対する <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> の既定値を取得します。</summary>
      <returns>
        <see cref="T:System.Runtime.InteropServices.CharSet" /> の任意の呼び出しに対する <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> の既定値。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute">
      <summary>プラットフォーム呼び出しに関数を提供する DLL の検索に使用するパスを指定します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.#ctor(System.Runtime.InteropServices.DllImportSearchPath)">
      <summary>プラットフォームの対象の検索を呼び出すときに使用するパスを指定して、<see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="paths">
        <c>LoadLibraryEx</c> 関数がプラットフォーム呼び出しの間に検索するパスを指定する列挙値のビットごとの組み合わせ。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.Paths">
      <summary>
        <c>LoadLibraryEx</c> 関数がプラットフォーム呼び出しの間に検索するパスを指定する列挙値のビットごとの組み合わせを取得します。</summary>
      <returns>プラットフォーム呼び出しの検索パスを指定する列挙値のビットごとの組み合わせ。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultParameterValueAttribute">
      <summary>既定のパラメーターをサポートする言語から呼び出された場合の、パラメーターの既定値を設定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultParameterValueAttribute.#ctor(System.Object)">
      <summary>パラメーターの既定値を使用して、<see cref="T:System.Runtime.InteropServices.DefaultParameterValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">パラメーターの既定値を表すオブジェクト。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultParameterValueAttribute.Value">
      <summary>パラメーターの既定値を取得します。</summary>
      <returns>パラメーターの既定値を表すオブジェクト。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispatchWrapper">
      <summary>マーシャラーが <see langword="VT_DISPATCH" /> としてマーシャリングする必要があるオブジェクトをラップします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispatchWrapper.#ctor(System.Object)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> クラスの新しいインスタンスを、ラップするオブジェクトを使用して初期化します。</summary>
      <param name="obj">ラップして <see cref="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH" /> に変換するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> がクラスまたは配列ではありません。  

または - 
<paramref name="obj" /> では、<see langword="IDispatch" /> がサポートされません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="obj" /> パラメーターは、値 <see langword="false" /> を渡された <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> 属性でマークされました。  

または - 
<paramref name="obj" /> パラメーターは、値 <see langword="false" /> を渡された <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> 属性でマークされた型から継承します。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject">
      <summary>
        <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> がラップするオブジェクトを取得します。</summary>
      <returns>オブジェクトは <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> によってラップされます。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispIdAttribute">
      <summary>メソッド、フィールドまたはプロパティの COM ディスパッチ識別子 (DISPID) を指定します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispIdAttribute.#ctor(System.Int32)">
      <summary>指定した DISPID を使用して、<see langword="DispIdAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dispId">メンバーの DISPID。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DispIdAttribute.Value">
      <summary>メンバーの DISPID を取得します。</summary>
      <returns>メンバーの DISPID。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportAttribute">
      <summary>属性付きメソッドがアンマネージ DLL (Dynamic-Link Library) によって静的エントリ ポイントとして公開されることを示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> クラスの新しいインスタンスを、インポートするメソッドを格納した DLL の名前を使用して初期化します。</summary>
      <param name="dllName">アンマネージ メソッドを格納する DLL の名前。 DLL がアセンブリに含まれている場合、これにはアセンブリの表示名を含めることができます。</param>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
      <summary>Unicode 文字を ANSI 文字に変換するときの、最適マッピング動作のオン/オフを切り替えます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
      <summary>エントリ ポイントの呼び出し規約を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
      <summary>文字列パラメーターをメソッドにマーシャリングし、名前マングルを制御する方法を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
      <summary>呼び出す DLL エントリ ポイントの名前または序数を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
      <summary>
        <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> フィールドで、指定された名前以外のエントリ ポイント名をアンマネージ DLL から共通言語ランタイムに検索させるかどうかを制御します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
      <summary>戻り値が <see langword="HRESULT" /> または <see langword="retval" /> であるアンマネージ メソッドを直接変換するか、戻り値 <see langword="HRESULT" /> または <see langword="retval" /> を自動的に例外に変換するかを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
      <summary>属性付きメソッドから戻る前に、呼び出し先が <see langword="SetLastError" /> Windows API 関数を呼び出すかどうかを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
      <summary>マップできない Unicode 文字 (ANSI の "?" に変換される文字) が見つかったときに、例外をスローするかどうかを指定します。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.DllImportAttribute.Value">
      <summary>エントリ ポイントを含む DLL ファイルの名前を取得します。</summary>
      <returns>エントリ ポイントを含む DLL ファイルの名前。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportResolver">
      <summary>コールバック経由でネイティブ ライブラリを解決するためのデリゲートを提供します。</summary>
      <param name="libraryName">解決するネイティブ ライブラリ。</param>
      <param name="assembly">解決を要求するアセンブリ。</param>
      <param name="searchPath">PInvoke 上の <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> (存在する場合)。 それ以外の場合、アセンブリ上の <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> (存在する場合)。 それ以外の場合は <see langword="null" /> を返します。</param>
      <returns>成功した場合は、読み込まれたネイティブ ライブラリのハンドル。失敗した場合は、<see cref="F:System.IntPtr.Zero" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportSearchPath">
      <summary>プラットフォーム呼び出しに関数を提供する DLL の検索に使用するパスを指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.ApplicationDirectory">
      <summary>DLL 検索パスのアプリケーション ディレクトリを含めます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory">
      <summary>アセンブリの依存関係を検索する場合、アセンブリ自体を含むディレクトリを含め、そのディレクトリを最初に検索します。 この値は .NET Framework で、パスが Win32 LoadLibraryEx 関数に渡される前に使用されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior">
      <summary>アプリケーション ディレクトリを検索し、次に <c>LOAD_WITH_ALTERED_SEARCH_PATH</c> フラグを持つ Win32 LoadLibraryEx 関数を呼び出します。 この値は、他の値が指定されていない場合は無視されます。 <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> 属性をサポートしていないオペレーティング システムではこの値を使用し、他の値は無視されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories">
      <summary>アプリケーション ディレクトリ、<see langword="%WinDir%\System32" /> ディレクトリ、および DLL 検索パスのユーザー ディレクトリを含めます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.System32">
      <summary>DLL 検索パスの <see langword="%WinDir%\System32" /> ディレクトリを含めます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UseDllDirectoryForDependencies">
      <summary>DLL が別のフォルダーを検索する前に位置するフォルダーの DLL 依存関係を検索します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UserDirectories">
      <summary>Win32 <c>AddDllDirectory</c> 関数を使用してプロセス全体の検索パスに明示的に追加された任意のパスを含めます。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ErrorWrapper">
      <summary>マーシャラーが <see langword="VT_ERROR" /> としてマーシャリングする必要があるオブジェクトをラップします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Exception)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> クラスの新しいインスタンスを、提供される例外に対応する HRESULT を使用して初期化します。</summary>
      <param name="e">エラー コードに変換する例外。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Int32)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> クラスの新しいインスタンスを、エラーの HRESULT を使用して初期化します。</summary>
      <param name="errorCode">エラーの HRESULT。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Object)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> クラスの新しいインスタンスを、エラーの HRESULT を格納しているオブジェクトを使用して初期化します。</summary>
      <param name="errorCode">エラーの HRESULT を格納しているオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="errorCode" /> パラメーターが <see cref="T:System.Int32" /> 型ではありません。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode">
      <summary>ラッパーのエラー コードを取得します。</summary>
      <returns>エラーの HRESULT。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GuidAttribute">
      <summary>自動 GUID が望ましくない場合に、明示的な <see cref="T:System.Guid" /> を指定します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
      <summary>指定した GUID を使用して、<see cref="T:System.Runtime.InteropServices.GuidAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="guid">割り当てる <see cref="T:System.Guid" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
      <summary>クラスの <see cref="T:System.Guid" /> を取得します。</summary>
      <returns>クラスの <see cref="T:System.Guid" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleCollector">
      <summary>保留状態のハンドルを追跡し、指定したしきい値に達したときに、強制的にガベージ コレクションを実行します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)">
      <summary>名前およびハンドル コレクションを開始するしきい値を使用して、<see cref="T:System.Runtime.InteropServices.HandleCollector" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">コレクターの名前。 このパラメーターにより、ハンドルの種類を個別に追跡するコレクターに名前を付けることができます。</param>
      <param name="initialThreshold">コレクションを開始するポイントを指定する値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialThreshold" /> パラメーターが 0 未満です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)">
      <summary>名前、ハンドル コレクションを開始するしきい値、およびハンドル コレクションを強制的に実行するしきい値を使用して、<see cref="T:System.Runtime.InteropServices.HandleCollector" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">コレクターの名前。  このパラメーターにより、ハンドルの種類を個別に追跡するコレクターに名前を付けることができます。</param>
      <param name="initialThreshold">コレクションを開始するポイントを指定する値。</param>
      <param name="maximumThreshold">コレクションを強制的に実行するポイントを指定する値。 この値は、使用できるハンドルの最大数に設定する必要があります。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialThreshold" /> パラメーターが 0 未満です。  

または - 
<paramref name="maximumThreshold" /> パラメーターが 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="maximumThreshold" /> パラメーターが <paramref name="initialThreshold" /> パラメーター未満です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Add">
      <summary>現在のハンドル カウントをインクリメントします。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> プロパティが 0 未満です。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Count">
      <summary>収集したハンドルの数を取得します。</summary>
      <returns>収集したハンドルの数。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.InitialThreshold">
      <summary>コレクションを開始するポイントを指定する値を取得します。</summary>
      <returns>コレクションを開始するポイントを指定する値。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.MaximumThreshold">
      <summary>コレクションを強制的に実行するポイントを指定する値を取得します。</summary>
      <returns>コレクションを強制的に実行するポイントを指定する値。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Name">
      <summary>
        <see cref="T:System.Runtime.InteropServices.HandleCollector" /> オブジェクトの名前を取得します。</summary>
      <returns>この <see cref="P:System.Runtime.InteropServices.HandleCollector.Name" /> プロパティにより、ハンドルの種類を個別に追跡するコレクターに名前を付けることができます。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Remove">
      <summary>現在のハンドル カウントをデクリメントします。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> プロパティが 0 未満です。</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleRef">
      <summary>プラットフォーム呼び出しを使用してアンマネージド コードに渡されるリソースへのハンドルを保持しているマネージド オブジェクトをラップします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)">
      <summary>ラップするオブジェクトと、アンマネージ コードで使用するリソースへのハンドルを指定して、<see cref="T:System.Runtime.InteropServices.HandleRef" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="wrapper">プラットフォーム呼び出しが返されるまで終了しないマネージド オブジェクト。</param>
      <param name="handle">リソースへのハンドルを示す <see cref="T:System.IntPtr" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Handle">
      <summary>リソースへのハンドルを取得します。</summary>
      <returns>リソースへのハンドル。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
      <summary>指定した <see cref="T:System.Runtime.InteropServices.HandleRef" /> オブジェクトのリソースへのハンドルを返します。</summary>
      <param name="value">ハンドルを必要とするオブジェクト。</param>
      <returns>指定した <see cref="T:System.Runtime.InteropServices.HandleRef" /> オブジェクトのリソースへのハンドル。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.HandleRef" /> オブジェクトの内部整数表現を返します。</summary>
      <param name="value">内部整数表現の取得元の <see cref="T:System.Runtime.InteropServices.HandleRef" /> オブジェクト。</param>
      <returns>
        <see cref="T:System.IntPtr" /> オブジェクトを表す <see cref="T:System.Runtime.InteropServices.HandleRef" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Wrapper">
      <summary>リソースへのハンドルを保持しているオブジェクトを取得します。</summary>
      <returns>リソースへのハンドルを保持しているオブジェクト。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomAdapter">
      <summary>クライアントが、カスタム マーシャラーによって渡されるアダプター オブジェクトではなく、実際のオブジェクトにアクセスできるようにします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomAdapter.GetUnderlyingObject">
      <summary>カスタム マーシャラーによってラップされたオブジェクトにアクセスできるようにします。</summary>
      <returns>アダプター オブジェクトに格納されているオブジェクト。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomFactory">
      <summary>
        <see cref="T:System.MarshalByRefObject" /> を拡張するマネージド オブジェクトのアクティベーション コードを、ユーザーが書き込むことができるようにします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomFactory.CreateInstance(System.Type)">
      <summary>指定した型の新しいインスタンスを作成します。</summary>
      <param name="serverType">アクティブにする型。</param>
      <returns>指定した型に関連付けられている <see cref="T:System.MarshalByRefObject" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomMarshaler">
      <summary>メソッド呼び出しを処理するためのカスタム ラッパーを提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)">
      <summary>不要になったときに、マネージド データの必要なクリーンアップを実行します。</summary>
      <param name="ManagedObj">破棄するマネージド オブジェクト。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)">
      <summary>不要になったときに、アンマネージ データの必要なクリーンアップを実行します。</summary>
      <param name="pNativeData">破棄するアンマネージ データを指すポインター。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize">
      <summary>マーシャリングするネイティブ データのサイズを返します。</summary>
      <returns>ネイティブ データのバイト単位のサイズ。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)">
      <summary>マネージド データをアンマネージド データに変換します。</summary>
      <param name="ManagedObj">変換されるマネージド オブジェクト。</param>
      <returns>マネージド オブジェクトの COM ビューへのポインター。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)">
      <summary>アンマネージド データをマネージド データに変換します。</summary>
      <param name="pNativeData">ラップするアンマネージ データを指すポインター。</param>
      <returns>COM データのマネージド ビューを表すオブジェクト。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomQueryInterface">
      <summary>IUnknown::QueryInterface(REFIID riid, void **ppvObject) メソッドのカスタムのマネージド実装を開発者が提供できるようにします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)">
      <summary>指定したインターフェイス ID に従ってインターフェイスを返します。</summary>
      <param name="iid">要求されたインターフェイスの GUID。</param>
      <param name="ppv">要求されたインターフェイスへの参照 (このメソッドから制御が戻るとき)。</param>
      <returns>IUnknown::QueryInterface のカスタム実装が使用されたかどうかを示す列挙値の 1 つ。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute">
      <summary>アセンブリ内で定義された型が、タイプ ライブラリで初めに定義されたことを示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.#ctor(System.String)">
      <summary>元のタイプ ライブラリ ファイルの名前を使用して、<see cref="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tlbFile">元のタイプ ライブラリ ファイルの位置。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.Value">
      <summary>元のタイプ ライブラリ ファイルの名前を取得します。</summary>
      <returns>元のタイプ ライブラリ ファイルの名前。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InterfaceTypeAttribute">
      <summary>COM への公開時に、マネージド インターフェイスがデュアル、ディスパッチ専用、または <see langword="IUnknown" /> 専用のいずれであるかを示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Int16)">
      <summary>指定した <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> 列挙体メンバーを使用して、<see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="interfaceType">インターフェイスを COM クライアントに公開する方法を記述します。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)">
      <summary>指定した <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> 列挙体メンバーを使用して、<see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="interfaceType">インターフェイスを COM クライアントに公開する方法を記述する <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 値の 1 つ。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.InterfaceTypeAttribute.Value">
      <summary>インターフェイスを COM に公開する方法を記述する <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 値を取得します。</summary>
      <returns>インターフェイスを COM に公開する方法を記述する <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> 値。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidComObjectException">
      <summary>無効な COM オブジェクトを使用したときにスローされる例外。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor">
      <summary>
        <see langword="InvalidComObjectException" /> のインスタンスを既定のプロパティを使用して初期化します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化データから、<see langword="COMException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String)">
      <summary>メッセージを使用して <see langword="InvalidComObjectException" /> のインスタンスを初期化します。</summary>
      <param name="message">例外の理由を示すメッセージ。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Runtime.InteropServices.InvalidComObjectException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner">現在の例外の原因となった例外。 <paramref name="inner" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
      <summary>マネージド コードにマーシャリングできないバリアント型の引数が見つかった場合に、マーシャラーによってスローされる例外。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor">
      <summary>
        <see langword="InvalidOleVariantTypeException" /> クラスの新しいインスタンスを既定値で初期化します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化データから、<see langword="InvalidOleVariantTypeException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see langword="InvalidOleVariantTypeException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の理由を示すメッセージ。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner">現在の例外の原因となった例外。 <paramref name="inner" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.LCIDConversionAttribute">
      <summary>メソッドのアンマネージ シグネチャにロケール識別子 (LCID) パラメーターが必要であることを示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.LCIDConversionAttribute.#ctor(System.Int32)">
      <summary>アンマネージ シグネチャ内での LCID の位置を指定して、<see langword="LCIDConversionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="lcid">アンマネージ シグネチャ内での引数 LCID の位置を示します。0 は、最初の引数を示します。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.LCIDConversionAttribute.Value">
      <summary>アンマネージ シグネチャ内での引数 LCID の位置を取得します。</summary>
      <returns>アンマネージ シグネチャ内での引数 LCID の位置。0 は、最初の引数を示します。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute">
      <summary>マネージ型から COM への相互運用シナリオにおけるユーザーによる相互運用スタブのカスタマイズのサポートを提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.#ctor(System.Type,System.String)">
      <summary>指定されたクラス型とメソッド名を使用して、<see cref="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="classType">必要なスタブ メソッドを格納するクラス。</param>
      <param name="methodName">スタブ メソッドの名前。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="methodName" /> が見つかりません。  

または - 
メソッドが静的メソッドまたは非ジェネリック メソッドではありません。  

または 
メソッドのパラメーター リストが、スタブに必要なパラメーター リストと一致していません。</exception>
      <exception cref="T:System.MethodAccessException">スタブ メソッドのアクセシビリティが private または protected であるか、セキュリティ上の問題があるために、マネージド相互運用メソッドを格納しているインターフェイスがスタブ メソッドにアクセスできません。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ClassType">
      <summary>必要なスタブ メソッドを格納するクラスを取得します。</summary>
      <returns>カスタマイズされた相互運用スタブを格納するクラス。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.MethodName">
      <summary>スタブ メソッドの名前を取得します。</summary>
      <returns>カスタマイズされた相互運用スタブの名前。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshal">
      <summary>アンマネージド コードを扱うときに使用できるさまざまなメソッドを提供します。これらのメソッドを使用すると、アンマネージド メモリの割り当て、アンマネージド メモリ ブロックのコピー、マネージド型からアンマネージド型への変換などができます。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)">
      <summary>指定したインターフェイスの参照カウントをインクリメントします。</summary>
      <param name="pUnk">インクリメントするインターフェイスの参照カウント。</param>
      <returns>
        <paramref name="pUnk" /> パラメーターの参照カウントの新しい値。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)">
      <summary>COM タスク メモリ アロケーターから、指定したサイズのメモリ ブロックを割り当てます。</summary>
      <param name="cb">割り当てるメモリ ブロックのサイズ。</param>
      <returns>割り当てられたメモリ ブロックのアドレスを表す整数。 このメモリは、<see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" /> を使用して解放する必要があります。</returns>
      <exception cref="T:System.OutOfMemoryException">メモリが不足しているため要求を満たせません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)">
      <summary>指定したバイト数を使用して、プロセスのアンマネージ メモリからメモリを割り当てます。</summary>
      <param name="cb">メモリ内で必要なバイト数。</param>
      <returns>新しく割り当てられたメモリへのポインター。 このメモリは、<see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> メソッドを使用して解放する必要があります。</returns>
      <exception cref="T:System.OutOfMemoryException">メモリが不足しているため要求を満たせません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)">
      <summary>指定したバイト数へのポインターを使用して、プロセスのアンマネージ メモリからメモリを割り当てます。</summary>
      <param name="cb">メモリ内で必要なバイト数。</param>
      <returns>新しく割り当てられたメモリへのポインター。 このメモリは、<see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> メソッドを使用して解放する必要があります。</returns>
      <exception cref="T:System.OutOfMemoryException">メモリが不足しているため要求を満たせません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup">
      <summary>任意のコンテキストからのランタイム呼び出し可能ラッパー (RCW: Runtime Callable Wrapper) をクリーンアップに使用できるかどうかを示します。</summary>
      <returns>任意の RCW をクリーンアップに使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)">
      <summary>指定したモニカーによって識別されるインターフェイス ポインターを取得します。</summary>
      <param name="monikerName">必要なインターフェイス ポインターに対応するモニカー。</param>
      <returns>
        <paramref name="monikerName" /> パラメーターによって識別されるインターフェイス ポインターへの参照を格納しているオブジェクト。 モニカーは名前であり、この場合、モニカーはインターフェイスによって定義されます。</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">アンマネージド <see langword="BindToMoniker" /> メソッドから、認識されない HRESULT が返されました。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)">
      <summary>オブジェクトの  COM 呼び出し可能ラッパー  (CCW) ハンドルの強度を変更します。</summary>
      <param name="otp">参照カウント付きハンドルを保持する CCW を持つオブジェクト。 CCW の参照カウントがゼロを超える場合はハンドルが strong。それ以外の場合は weak。</param>
      <param name="fIsWeak">参照カウントに関係なく、<paramref name="otp" /> パラメーターのハンドルの強さを weak に変更する場合は <see langword="true" />。<paramref name="otp" /> のハンドルの強さをリセットしてカウントされた参照にする場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext">
      <summary>現在のコンテキストで割り当てられたすべての  ランタイム呼び出し可能ラッパー  (RCW: Runtime Callable Wrapper) をクリーンアップすることをランタイムに通知します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
      <summary>1 次元の 8 ビット符号なし整数のマネージド配列のデータをアンマネージド メモリ ポインターにコピーします。</summary>
      <param name="source">コピー元の 1 次元配列。</param>
      <param name="startIndex">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</param>
      <param name="destination">コピー先のメモリ ポインター。</param>
      <param name="length">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
      <summary>1 次元の文字列のマネージド配列のデータをアンマネージド メモリ ポインターにコピーします。</summary>
      <param name="source">コピー元の 1 次元配列。</param>
      <param name="startIndex">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</param>
      <param name="destination">コピー先のメモリ ポインター。</param>
      <param name="length">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startIndex" />、<paramref name="destination" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
      <summary>1 次元の倍精度浮動小数点数のマネージド配列のデータをアンマネージド メモリ ポインターにコピーします。</summary>
      <param name="source">コピー元の 1 次元配列。</param>
      <param name="startIndex">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</param>
      <param name="destination">コピー先のメモリ ポインター。</param>
      <param name="length">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
      <summary>1 次元の 16 ビット符号付き整数のマネージド配列のデータをアンマネージド メモリ ポインターにコピーします。</summary>
      <param name="source">コピー元の 1 次元配列。</param>
      <param name="startIndex">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</param>
      <param name="destination">コピー先のメモリ ポインター。</param>
      <param name="length">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
      <summary>1 次元の 32 ビット符号付き整数のマネージド配列のデータをアンマネージド メモリ ポインターにコピーします。</summary>
      <param name="source">コピー元の 1 次元配列。</param>
      <param name="startIndex">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</param>
      <param name="destination">コピー先のメモリ ポインター。</param>
      <param name="length">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startIndex" /> または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
      <summary>1 次元の 64 ビット符号付き整数のマネージド配列のデータをアンマネージド メモリ ポインターにコピーします。</summary>
      <param name="source">コピー元の 1 次元配列。</param>
      <param name="startIndex">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</param>
      <param name="destination">コピー先のメモリ ポインター。</param>
      <param name="length">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
      <summary>アンマネージド メモリ ポインターのデータを 8 ビット符号なし整数のマネージド配列にコピーします。</summary>
      <param name="source">コピー元のメモリ ポインター。</param>
      <param name="destination">コピー先の配列。</param>
      <param name="startIndex">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</param>
      <param name="length">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
      <summary>アンマネージド メモリ ポインターのデータを文字列のマネージド配列にコピーします。</summary>
      <param name="source">コピー元のメモリ ポインター。</param>
      <param name="destination">コピー先の配列。</param>
      <param name="startIndex">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</param>
      <param name="length">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
      <summary>アンマネージド メモリ ポインターのデータを倍精度浮動小数点数のマネージド配列にコピーします。</summary>
      <param name="source">コピー元のメモリ ポインター。</param>
      <param name="destination">コピー先の配列。</param>
      <param name="startIndex">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</param>
      <param name="length">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
      <summary>アンマネージド メモリ ポインターのデータを 16 ビット符号付き整数のマネージド配列にコピーします。</summary>
      <param name="source">コピー元のメモリ ポインター。</param>
      <param name="destination">コピー先の配列。</param>
      <param name="startIndex">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</param>
      <param name="length">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
      <summary>アンマネージド メモリ ポインターのデータを 32 ビット符号付き整数のマネージド配列にコピーします。</summary>
      <param name="source">コピー元のメモリ ポインター。</param>
      <param name="destination">コピー先の配列。</param>
      <param name="startIndex">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</param>
      <param name="length">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
      <summary>アンマネージド メモリ ポインターのデータを 64 ビット符号付き整数のマネージド配列にコピーします。</summary>
      <param name="source">コピー元のメモリ ポインター。</param>
      <param name="destination">コピー先の配列。</param>
      <param name="startIndex">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</param>
      <param name="length">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
      <summary>アンマネージド メモリ ポインターのデータをマネージド <see cref="T:System.IntPtr" /> 配列にコピーします。</summary>
      <param name="source">コピー元のメモリ ポインター。</param>
      <param name="destination">コピー先の配列。</param>
      <param name="startIndex">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</param>
      <param name="length">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
      <summary>アンマネージド メモリ ポインターのデータを単精度浮動小数点数のマネージド配列にコピーします。</summary>
      <param name="source">コピー元のメモリ ポインター。</param>
      <param name="destination">コピー先の配列。</param>
      <param name="startIndex">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</param>
      <param name="length">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)">
      <summary>1 次元の <see cref="T:System.IntPtr" /> マネージド配列のデータをアンマネージド メモリ ポインターにコピーします。</summary>
      <param name="source">コピー元の 1 次元配列。</param>
      <param name="startIndex">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</param>
      <param name="destination">コピー先のメモリ ポインター。</param>
      <param name="length">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
      <summary>1 次元の単精度浮動小数点数のマネージド配列のデータをアンマネージド メモリ ポインターにコピーします。</summary>
      <param name="source">コピー元の 1 次元配列。</param>
      <param name="startIndex">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</param>
      <param name="destination">コピー先のメモリ ポインター。</param>
      <param name="length">コピーする配列要素の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)">
      <summary>指定した COM オブジェクトを使用してマネージド オブジェクトを集約します。</summary>
      <param name="pOuter">外部 <see langword="IUnknown" /> ポインター。</param>
      <param name="o">集約するオブジェクト。</param>
      <returns>マネージド オブジェクトの内部 <see langword="IUnknown" /> ポインター。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> は Windows ランタイム オブジェクト。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)">
      <summary>[.NET Framework 4.5.1 以降のバージョンでサポート]  
 指定した COM オブジェクトを使用して、指定した型のマネージド オブジェクトを集約します。</summary>
      <param name="pOuter">外部 IUnknown ポインター。</param>
      <param name="o">集計するマネージド オブジェクト。</param>
      <typeparam name="T">集約するマネージド オブジェクトの型。</typeparam>
      <returns>内部 IUnknown マネージド オブジェクトのポインター。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> は Windows ランタイム オブジェクト。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)">
      <summary>指定した型のオブジェクト内の、指定した COM オブジェクトをラップします。</summary>
      <param name="o">ラップされるオブジェクト。</param>
      <param name="t">作成するラッパーの型。</param>
      <returns>指定した型のインスタンスとなる新しくラップされたオブジェクト。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> は <see langword="__ComObject" /> から派生する必要があります。  

または - 
<paramref name="t" /> は Windows ランタイム 型です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> はすべての必要なインターフェイスをサポートしていないため、ソース オブジェクトをターゲットの型に変換することはできません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)">
      <summary>[.NET Framework 4.5.1 以降のバージョンでサポート]  
 指定した型のオブジェクト内の、指定した COM オブジェクトをラップします。</summary>
      <param name="o">ラップされるオブジェクト。</param>
      <typeparam name="T">ラップするオブジェクトの型。</typeparam>
      <typeparam name="TWrapper">返すオブジェクトの型。</typeparam>
      <returns>新しくラップされたオブジェクト。</returns>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> は <see langword="__ComObject" /> から派生する必要があります。  
または 
 <typeparamref name="T" /> は Windows ランタイム 型です。</exception>
      <exception cref="T:System.InvalidCastException">必要なすべてのインターフェイスをサポートしていないため、<paramref name="o" /> は <paramref name="TWrapper" /> に変換できません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)">
      <summary>指定したアンマネージ メモリ ブロックが指す、すべてのサブ構造体を解放します。</summary>
      <param name="ptr">アンマネージ メモリ ブロックへのポインター。</param>
      <param name="structuretype">書式指定クラスの型。 これは、<paramref name="ptr" /> パラメーター内のバッファーを削除するために必要なレイアウト情報を提供します。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="structureType" /> のレイアウトが自動レイアウトです。 代わりに、sequential または explicit を使用します。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)">
      <summary>[.NET Framework 4.5.1 以降のバージョンでサポート]  
 指定したアンマネージ メモリ ブロックが指す、指定した型のすべてのサブ構造体を解放します。</summary>
      <param name="ptr">アンマネージ メモリ ブロックへのポインター。</param>
      <typeparam name="T">形式構造体の型です。 これは、<paramref name="ptr" /> パラメーター内のバッファーを削除するために必要なレイアウト情報を提供します。</typeparam>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> のレイアウトが自動レイアウトです。 代わりに、sequential または explicit を使用します。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)">
      <summary>ランタイム呼び出し可能ラッパー (RCW: Runtime Callable Wrapper) の参照カウントを 0 に設定することによって、RCW へのすべての参照を解放します。</summary>
      <param name="o">解放する RCW。</param>
      <returns>RCW の参照カウントの新しい値に関連付けられている、<paramref name="o" /> パラメーターで、このリリースでは、成功した場合は 0 (ゼロ)。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> は有効な COM オブジェクトではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)">
      <summary>COM  SysFreeString  関数を使用して、<see langword="BSTR" /> を解放します。</summary>
      <param name="ptr">解放する BSTR のアドレス。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)">
      <summary>アンマネージ COM タスク メモリ アロケーターによって割り当てられたメモリ ブロックを解放します。</summary>
      <param name="ptr">解放するメモリのアドレス。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">
      <summary>以前にプロセスのアンマネージ メモリから割り当てられたメモリを解放します。</summary>
      <param name="hglobal">
        <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> への元の一致する呼び出しによって返されたハンドル。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)">
      <summary>指定した型のグローバル一意識別子 (GUID: Globally Unique Identifier) を返すか、タイプ ライブラリ エクスポーター (Tlbexp.exe) で使用されるアルゴリズムを使用して GUID を生成します。</summary>
      <param name="type">GUID 生成の対象となる型。</param>
      <returns>指定した型の識別子。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)">
      <summary>指定した型のプログラム ID (ProgID) を返します。</summary>
      <param name="type">ProgID を取得する対象の型。</param>
      <returns>指定した型の ProgID。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> パラメーターは、COM で作成できるクラスではありません。 クラスはパブリックであり、パラメーターなしのパブリック コンストラクターがあり、COM 参照可能である必要があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)">
      <summary>指定したオブジェクトの指定したインターフェイスを表す IUnknown インターフェイスへのポインターを返します。 カスタム クエリ インターフェイス アクセスは既定で有効になっています。</summary>
      <param name="o">インターフェイスを提供するオブジェクト。</param>
      <param name="T">要求されるインターフェイスの型。</param>
      <returns>オブジェクトの指定したインターフェイスを表すインターフェイス ポインター。</returns>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> パラメーターがインターフェイスではありません。  
または 
型が COM から参照できません。  

または - 
<typeparamref name="T" /> パラメーターがジェネリック型定義です。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> パラメーターが要求されたインターフェイスをサポートしていません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> パラメーターが <see langword="null" /> です。  

または - 
<typeparamref name="T" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)">
      <summary>指定したオブジェクトの指定したインターフェイスを表す IUnknown インターフェイスへのポインターを返します。 カスタム クエリ インターフェイス アクセスは、指定したカスタマイズ モードで制御されます。</summary>
      <param name="o">インターフェイスを提供するオブジェクト。</param>
      <param name="T">要求されるインターフェイスの型。</param>
      <param name="mode">
        <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> によって提供される <see langword="IUnknown::QueryInterface" /> カスタマイズを適用するかどうかを示す列挙値のいずれか。</param>
      <returns>オブジェクトのインターフェイスを表すインターフェイス ポインター。</returns>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> パラメーターがインターフェイスではありません。  
または 
型が COM から参照できません。  

または - 
<typeparamref name="T" /> パラメーターがジェネリック型定義です。</exception>
      <exception cref="T:System.InvalidCastException">オブジェクト <paramref name="o" /> が要求されたインターフェイスをサポートしていません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> パラメーターが <see langword="null" /> です。  
または 
<typeparamref name="T" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)">
      <summary>[.NET Framework 4.5.1 以降のバージョンでサポート] 
指定した型のオブジェクトの指定したインターフェイスを表す IUnknown インターフェイスへのポインターを返します。 カスタム クエリ インターフェイス アクセスは既定で有効になっています。</summary>
      <param name="o">インターフェイスを提供するオブジェクト。</param>
      <typeparam name="T">
        <paramref name="o" /> の型。</typeparam>
      <typeparam name="TInterface">返すインターフェイスの型。</typeparam>
      <returns>
        <paramref name="TInterface" /> インターフェイスを表すインターフェイス ポインター。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="TInterface" /> パラメーターがインターフェイスではありません。  
または 
型が COM から参照できません。  
または 
<typeparamref name="T" /> パラメーターがオープン ジェネリック型です。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> パラメーターが <paramref name="TInterface" /> インターフェイスをサポートしていません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)">
      <summary>指定した COM オブジェクトから、指定したキーによって参照されているデータを取得します。</summary>
      <param name="obj">目的のデータを格納している COM オブジェクト。</param>
      <param name="key">データの取得対象となる <paramref name="obj" /> の内部ハッシュ テーブルにあるキー。</param>
      <returns>
        <paramref name="obj" /> パラメーターの内部ハッシュ テーブルにある <paramref name="key" /> パラメーターで表されるデータ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> は <see langword="null" />です。  

または - 
<paramref name="key" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> はCOM オブジェクトではありません。  

または - 
<paramref name="obj" /> は Windows ランタイム オブジェクト。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
      <summary>アンマネージ関数ポインターをデリゲートに変換します。</summary>
      <param name="ptr">変換するアンマネージ関数ポインター。</param>
      <param name="t">返されるデリゲートの型。</param>
      <returns>適切なデリゲート型にキャストできるデリゲート インスタンス。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> パラメーターは、デリゲートでもジェネリックでもありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ptr" /> パラメーターが <see langword="null" /> です。  
または 
<paramref name="t" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)">
      <summary>[.NET Framework 4.5.1 以降のバージョンでサポート]  
 アンマネージ関数ポインターを指定した型のデリゲートに変換します。</summary>
      <param name="ptr">変換するアンマネージ関数ポインター。</param>
      <typeparam name="TDelegate">返すデリゲートの型。</typeparam>
      <returns>指定したデリゲート型のインスタンス。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> ジェネリック パラメーターはデリゲートでない、またはオープン ジェネリック型です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ptr" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)">
      <summary>型が COM に公開されたときの仮想テーブル (V テーブルまたは VTBL) の最後のスロットを取得します。</summary>
      <param name="t">インターフェイスまたはクラスを表す型。</param>
      <returns>COM に公開されたときのインターフェイスの最後の VTBL スロット。 <paramref name="t" /> パラメーターがクラスの場合、返された VTBL スロットはそのクラスから生成されるインターフェイス内の最終スロットです。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionCode">
      <summary>発生した例外の型を識別するコードを取得します。</summary>
      <returns>例外の型。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)">
      <summary>指定した HRESULT エラー コードを対応する <see cref="T:System.Exception" /> オブジェクトに変換します。</summary>
      <param name="errorCode">変換される HRESULT。</param>
      <returns>変換後の HRESULT を表すオブジェクト。または HRESULT 値がエラー コード (<see langword="S_OK" /> や <see langword="S_FALSE" /> など) ではない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)">
      <summary>例外オブジェクトの IErrorInfoインターフェイスに渡された追加エラー情報を使用して、指定した HRESULT エラー コードを対応する <see cref="T:System.Exception" /> オブジェクトに変換します。</summary>
      <param name="errorCode">変換される HRESULT。</param>
      <param name="errorInfo">エラーの詳細情報を提供する <see langword="IErrorInfo" /> インターフェイスへのポインター。 <c>IntPtr(0)</c> を指定すると、現在の <see langword="IErrorInfo" /> インターフェイスを使用できます。または <c>IntPtr(-1)</c> を指定すると、現在の <see langword="IErrorInfo" /> インターフェイスを無視し、エラー コードだけを使用して例外を構築できます。</param>
      <returns>変換後の HRESULT を表すオブジェクトと <paramref name="errorInfo" /> から取得された情報。または HRESULT 値がエラー コード (<see langword="S_OK" /> や <see langword="S_FALSE" /> など) ではない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionPointers">
      <summary>例外発生時に、コンピューターに依存しない例外の記述、およびスレッドに対して存在した状態に関する情報を取得します。</summary>
      <returns>EXCEPTION_POINTERS 構造体へのポインター。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)">
      <summary>アンマネージ コードから呼び出すことができる関数ポインターにデリゲートを変換します。</summary>
      <param name="d">アンマネージ コードに渡されるデリゲート。</param>
      <returns>アンマネージド コードに渡すことができる値。アンマネージド コードはこの値を使用して、基になるマネージド デリゲートを呼び出すことができます。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="d" /> パラメーターがジェネリック型定義です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)">
      <summary>[.NET Framework 4.5.1 以降のバージョンでサポート]  
 指定した型のデリゲートをアンマネージ コードから呼び出すことができる関数ポインターに変換します。</summary>
      <param name="d">アンマネージ コードに渡されるデリゲート。</param>
      <typeparam name="TDelegate">変換するデリゲートの型。</typeparam>
      <returns>アンマネージド コードに渡すことができる値。アンマネージド コードはこの値を使用して、基になるマネージド デリゲートを呼び出すことができます。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="d" /> パラメーターがジェネリック型定義です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)">
      <summary>指定したモジュールのインスタンス ハンドル (HINSTANCE) を返します。</summary>
      <param name="m">目的の HINSTANCE を持つモジュール。</param>
      <returns>
        <paramref name="m" /> の HINSTANCE。モジュールに HINSTANCE がない場合は -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="m" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)">
      <summary>指定した例外を HRESULT に変換します。</summary>
      <param name="e">HRESULT に変換する例外。</param>
      <returns>提供された例外に割り当てられる HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error">
      <summary>
        <see cref="T:System.Runtime.InteropServices.Marshal" /> を使用して実行した Win32 コードが原因の最終エラーに対応する HRESULT を返します。</summary>
      <returns>最終 Win32 エラー コードに対応する HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)">
      <summary>マネージド オブジェクトから IDispatch インターフェイスを返します。</summary>
      <param name="o">要求される <see langword="IDispatch" /> インターフェイスを持つオブジェクト。</param>
      <returns>
        <paramref name="o" /> パラメーターの <see langword="IDispatch" /> ポインター。</returns>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> が要求されたインターフェイスをサポートしていません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)">
      <summary>マネージド オブジェクトから IUnknown インターフェイスを返します。</summary>
      <param name="o">要求される <see langword="IUnknown" /> インターフェイスを持つオブジェクト。</param>
      <returns>
        <paramref name="o" /> パラメーターの <see langword="IUnknown" /> ポインター。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error">
      <summary>
        <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" /> フラグが設定され、プラットフォーム呼び出しを使用して呼び出された、最終アンマネージ関数によって返されるエラー コードを返します。</summary>
      <returns>Win32 SetLastError 関数への呼び出しで最後に設定されたエラー コード。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)">
      <summary>オブジェクトを COM VARIANT に変換します。</summary>
      <param name="obj">COM VARIANT の取得対象となるオブジェクト。</param>
      <param name="pDstNativeVariant">
        <paramref name="obj" /> パラメーターに対応する VARIANT を受け取るポインター。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> パラメーターがジェネリック型のインスタンスです。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)">
      <summary>[.NET Framework 4.5.1 以降のバージョンでサポート]  
 指定した型のオブジェクトを COM VARIANT に変換します。</summary>
      <param name="obj">COM VARIANT の取得対象となるオブジェクト。</param>
      <param name="pDstNativeVariant">
        <paramref name="obj" /> パラメーターに対応する VARIANT を受け取るポインター。</param>
      <typeparam name="T">変換対象のオブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)">
      <summary>COM オブジェクトを IUnknown インターフェイスへのポインターによって表す型のインスタンスを返します。</summary>
      <param name="pUnk">
        <see langword="IUnknown" /> インターフェイスへのポインター。</param>
      <returns>指定したアンマネージ COM オブジェクトを表すオブジェクト。</returns>
      <exception cref="">
        <paramref name="pUnk" /> が <see cref="F:System.IntPtr.Zero" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)">
      <summary>COM VARIANT をオブジェクトに変換します。</summary>
      <param name="pSrcNativeVariant">COM VARIANT へのポインター。</param>
      <returns>
        <paramref name="pSrcNativeVariant" /> パラメーターに対応するオブジェクト。</returns>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
        <paramref name="pSrcNativeVariant" /> が有効な VARIANT 型ではありません。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pSrcNativeVariant" /> に、サポートされていない型があります。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)">
      <summary>[.NET Framework 4.5.1 以降のバージョンでサポート]  
 COM VARIANT を、指定した型のオブジェクトに変換します。</summary>
      <param name="pSrcNativeVariant">COM VARIANT へのポインター。</param>
      <typeparam name="T">COM VARIANT の変換先の型。</typeparam>
      <returns>
        <paramref name="pSrcNativeVariant" /> パラメーターに対応する、指定した型のオブジェクト。</returns>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
        <paramref name="pSrcNativeVariant" /> が有効な VARIANT 型ではありません。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pSrcNativeVariant" /> に、サポートされていない型があります。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)">
      <summary>COM VARIANTs の配列をオブジェクトの配列に変換します。</summary>
      <param name="aSrcNativeVariant">COM VARIANT の配列の最初の要素へのポインター。</param>
      <param name="cVars">
        <paramref name="aSrcNativeVariant" /> 内の COM VARIANT の数。</param>
      <returns>
        <paramref name="aSrcNativeVariant" /> に対応するオブジェクト配列。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cVars" /> は負の値です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)">
      <summary>[.NET Framework 4.5.1 以降のバージョンでサポート]  
 COM VARIANT の配列を指定した型の配列に変換します。</summary>
      <param name="aSrcNativeVariant">COM VARIANT の配列の最初の要素へのポインター。</param>
      <param name="cVars">
        <paramref name="aSrcNativeVariant" /> 内の COM VARIANT の数。</param>
      <typeparam name="T">返す配列の型。</typeparam>
      <returns>
        <paramref name="aSrcNativeVariant" />. に対応する <typeparamref name="T" /> オブジェクトの配列。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cVars" /> は負の値です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)">
      <summary>ユーザー定義のメソッドを格納している、仮想関数テーブル (V テーブルまたは VTBL) の最初のスロットを取得します。</summary>
      <param name="t">インターフェイスまたはクラスを表す型。</param>
      <returns>ユーザー定義のメソッドを格納している最初の VTBL スロット。 IUnknown に基づくインターフェイスの場合、最初のスロットは 3 です。IDispatch に基づくインターフェイスの場合、最初のスロットは 7 です。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> は COM から参照できません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)">
      <summary>COM オブジェクトを表す、指定した型のマネージド オブジェクトを返します。</summary>
      <param name="pUnk">アンマネージ オブジェクトの <see langword="IUnknown" />インターフェイスへのポインター。</param>
      <param name="t">要求されたマネージド クラスの型。</param>
      <returns>要求されたアンマネージ COM オブジェクトを表す、<see cref="T:System.Type" /> オブジェクトに対応するクラスのインスタンス。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> は <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />を持つ属性ではありません。  
または 
 <paramref name="t" /> は Windows ランタイム 型です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)">
      <summary>指定したクラス ID (CLSID) に関連付けられている型を返します。</summary>
      <param name="clsid">返す型の CLSID。</param>
      <returns>CLSID が有効かどうかに関係なく <see langword="System.__ComObject" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)">
      <summary>ITypeInfo オブジェクトで表される型の名前を取得します。</summary>
      <param name="typeInfo">
        <see langword="ITypeInfo" /> ポインターを表すオブジェクト。</param>
      <returns>
        <paramref name="typeInfo" /> パラメーターが指す型の名前。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeInfo" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)">
      <summary>指定された IUnknown インターフェイスの一意の  ランタイム呼び出し可能ラッパー  (RCW: Runtime Callable Wrapper) オブジェクトを作成します。</summary>
      <param name="unknown">
        <see langword="IUnknown" /> インターフェイスへのマネージド ポインター。</param>
      <returns>指定した <see langword="IUnknown" /> インターフェイスの一意の RCW。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)">
      <summary>指定したオブジェクトが COM オブジェクトを表すかどうかを示します。</summary>
      <param name="o">確認する対象のオブジェクト。</param>
      <returns>
        <paramref name="o" /> パラメーターが COM 型である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)">
      <summary>型が COM クライアントに表示されるかどうかを示します。</summary>
      <param name="t">COM の参照可能範囲を確認する対象の型。</param>
      <returns>型が COM から参照できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)">
      <summary>マネージド クラスのアンマネージド フォームのフィールド オフセットを返します。</summary>
      <param name="t">マネージド クラスを指定する値型または書式指定参照型。 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> をクラスに適用する必要があります。</param>
      <param name="fieldName">
        <paramref name="t" /> パラメーター内のフィールド。</param>
      <returns>プラットフォーム呼び出しによって宣言される指定したクラス内の <paramref name="fieldName" /> パラメーターのバイト単位のオフセット。</returns>
      <exception cref="T:System.ArgumentException">クラスを構造体としてエクスポートできません。またはフィールドが非パブリックです。 .NET Framework Version 2.0 から開始すると、フィールドはプライベートになる場合があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)">
      <summary>[.NET Framework 4.5.1 以降のバージョンでサポート]  
 指定されたマネージド クラスのアンマネージド フォームのフィールド オフセットを返します。</summary>
      <param name="fieldName">
        <paramref name="T" /> 型内のフィールドの名前。</param>
      <typeparam name="T">マネージド値型または書式指定参照型。 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 属性をクラスに適用する必要があります。</typeparam>
      <returns>プラットフォーム呼び出しによって宣言される指定したクラス内の <paramref name="fieldName" /> パラメーターのバイト単位のオフセット。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)">
      <summary>メソッドを呼び出さずに、一度だけ実行されるメソッド セットアップ タスクを実行します。</summary>
      <param name="m">チェックするメソッド。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="m" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="m" /> パラメーターが <see cref="T:System.Reflection.MethodInfo" /> オブジェクトではありません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)">
      <summary>クラスのすべてのメソッドに対してリンク前の確認を実行します。</summary>
      <param name="c">メソッドをチェックするクラス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)">
      <summary>アンマネージド ANSI 文字列から最初の null 文字に遭遇するまでのすべての文字をマネージド <see cref="T:System.String" /> にコピーし、各 ANSI 文字を Unicode に拡張します。</summary>
      <param name="ptr">アンマネージ文字列の最初の文字のアドレス。</param>
      <returns>アンマネージド ANSI 文字列のコピーを保持するマネージド文字列。 <paramref name="ptr" /> が <see langword="null" /> の場合、このメソッドは null 文字列を返します。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)">
      <summary>マネージド <see cref="T:System.String" /> を割り当て、アンマネージド ANSI 文字列から指定された数の文字をコピーし、各 ANSI 文字を Unicode に変換します。</summary>
      <param name="ptr">アンマネージ文字列の最初の文字のアドレス。</param>
      <param name="len">コピーする入力文字列のバイト数。</param>
      <returns>
        <paramref name="ptr" /> パラメーターの値が <see langword="null" /> でない場合は、ネイティブ ANSI 文字列のコピーを保持するマネージド文字列。それ以外の場合、このメソッドは <see langword="null" />.を返します。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="len" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)">
      <summary>マネージド <see cref="T:System.String" /> を割り当て、最初の null 文字に遭遇するまでの文字をアンマネージド メモリに格納されている文字列からすべてコピーします。</summary>
      <param name="ptr">Unicode プラットフォームの場合は、先頭の Unicode 文字のアドレス。  

または -  

 ANSI プラットフォームの場合は、先頭の ANSI 文字のアドレス。</param>
      <returns>
        <paramref name="ptr" /> パラメーターの値が <see langword="null" /> でない場合は、アンマネージド文字列のコピーを保持するマネージド文字列。それ以外の場合、このメソッドは <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)">
      <summary>マネージド <see cref="T:System.String" /> を割り当て、アンマネージド メモリに格納されている文字列から指定された数の文字をそれにコピーします。</summary>
      <param name="ptr">Unicode プラットフォームの場合は、先頭の Unicode 文字のアドレス。  

または -  

 ANSI プラットフォームの場合は、先頭の ANSI 文字のアドレス。</param>
      <param name="len">コピーする文字数。</param>
      <returns>
        <paramref name="ptr" /> パラメーターの値が <see langword="null" /> でない場合は、ネイティブ文字列のコピーを保持するマネージド文字列。それ以外の場合、このメソッドは <see langword="null" /> を返します。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="len" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)">
      <summary>マネージド <see cref="T:System.String" /> を割り当て、アンマネージド メモリに格納されている バイナリ文字列 (BSTR)  をコピーします。</summary>
      <param name="ptr">アンマネージ文字列の最初の文字のアドレス。</param>
      <returns>アンマネージド文字列のコピーを保持するマネージド文字列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ptr" /> と <see cref="F:System.IntPtr.Zero" /> は等しい。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)">
      <summary>マネージド <see cref="T:System.String" /> を割り当て、アンマネージド Unicode 文字列から最初の null 文字に遭遇するまでの文字をすべてコピーします。</summary>
      <param name="ptr">アンマネージ文字列の最初の文字のアドレス。</param>
      <returns>
        <paramref name="ptr" /> パラメーターの値が <see langword="null" /> でない場合は、アンマネージド文字列のコピーを保持するマネージド文字列。それ以外の場合、このメソッドは <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)">
      <summary>マネージド <see cref="T:System.String" /> を割り当て、アンマネージド Unicode 文字列から指定された数の文字をコピーします。</summary>
      <param name="ptr">アンマネージ文字列の最初の文字のアドレス。</param>
      <param name="len">コピーする Unicode 文字の数。</param>
      <returns>
        <paramref name="ptr" /> パラメーターの値が <see langword="null" /> でない場合は、アンマネージド文字列のコピーを保持するマネージド文字列。それ以外の場合、このメソッドは <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)">
      <param name="ptr" />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)">
      <param name="ptr" />
      <param name="byteLen" />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)">
      <summary>アンマネージド メモリ ブロックからマネージド オブジェクトにデータをマーシャリングします。</summary>
      <param name="ptr">アンマネージ メモリ ブロックへのポインター。</param>
      <param name="structure">データのコピー先のオブジェクト。 これは、書式指定クラスのインスタンスである必要があります。</param>
      <exception cref="T:System.ArgumentException">構造体のレイアウトがシーケンシャルまたは明示的ではありません。  

または -  

 構造体は、ボックス化された値型です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)">
      <summary>アンマネージド メモリ ブロックから、指定した型の、新しく割り当てられたマネージド オブジェクトにデータをマーシャリングします。</summary>
      <param name="ptr">アンマネージ メモリ ブロックへのポインター。</param>
      <param name="structureType">作成するオブジェクトの型。 このオブジェクトは、書式指定クラスまたは構造体を表す必要があります。</param>
      <returns>
        <paramref name="ptr" /> パラメーターが指すデータを格納しているマネージド オブジェクト。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="structureType" /> パラメーターのレイアウトがシーケンシャルまたは明示的ではありません。  
または 
<paramref name="structureType" /> パラメーターがジェネリック型定義です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="structureType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.MissingMethodException">
        <paramref name="structureType" /> で指定したクラスに、アクセスできるパラメーターなしのコンストラクターがありません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)">
      <summary>[.NET Framework 4.5.1 以降のバージョンでサポート]  
 アンマネージド メモリ ブロックから、ジェネリック型パラメーターによって指定された型の、新しく割り当てられたマネージド オブジェクトにデータをマーシャリングします。</summary>
      <param name="ptr">アンマネージ メモリ ブロックへのポインター。</param>
      <typeparam name="T">データをコピーする先のオブジェクトの型。 これは、書式指定クラスまたは構造体である必要があります。</typeparam>
      <returns>
        <paramref name="ptr" /> パラメーターが指すデータを格納しているマネージド オブジェクト。</returns>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> のレイアウトがシーケンシャルまたは明示的ではありません。</exception>
      <exception cref="T:System.MissingMethodException">
        <typeparamref name="T" /> で指定したクラスに、アクセスできるパラメーターなしのコンストラクターがありません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)">
      <summary>[.NET Framework 4.5.1 以降のバージョンでサポート]  
 アンマネージド メモリ ブロックから、指定した型のマネージド オブジェクトにデータをマーシャリングします。</summary>
      <param name="ptr">アンマネージ メモリ ブロックへのポインター。</param>
      <param name="structure">データのコピー先のオブジェクト。</param>
      <typeparam name="T">
        <paramref name="structure" /> の型。 書式が設定されたクラスである必要があります。</typeparam>
      <exception cref="T:System.ArgumentException">構造体のレイアウトがシーケンシャルまたは明示的ではありません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)">
      <summary>COM オブジェクトから指定したインターフェイスへのポインターを要求します。</summary>
      <param name="pUnk">照会するインターフェイス。</param>
      <param name="iid">要求したインターフェイスのインターフェイス ID (IID: Interface Identifier)。</param>
      <param name="ppv">このメソッドが返されるときに、返されたインターフェイスへの参照を格納します。</param>
      <returns>呼び出しの成功または失敗を示す HRESULT。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)">
      <summary>アンマネージ メモリから 1 バイトを読み取ります。</summary>
      <param name="ptr">読み込み元となるアンマネージ メモリ内のアドレス。</param>
      <returns>アンマネージ メモリから読み取られたバイト。</returns>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> が認識された形式ではありません。  

または - 
<paramref name="ptr" /> は <see langword="null" />です。  

または 
 <paramref name="ptr" /> が無効です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)">
      <summary>アンマネージ メモリから、指定したオフセット (またはインデックス) の 1 バイトを読み取ります。</summary>
      <param name="ptr">読み込み元となるアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs">読み取りの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <returns>アンマネージ メモリの指定されたオフセットから読み取られたバイト。</returns>
      <exception cref="T:System.AccessViolationException">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)">
      <summary>アンマネージ メモリから、指定したオフセット (またはインデックス) の 1 バイトを読み取ります。</summary>
      <param name="ptr">ソース オブジェクトのアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs">読み取りの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <returns>アンマネージ メモリの指定されたオフセットから読み取られたバイト。</returns>
      <exception cref="T:System.AccessViolationException">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> が <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)">
      <summary>アンマネージ メモリから 16 ビット符号付き整数を読み取ります。</summary>
      <param name="ptr">読み込み元となるアンマネージ メモリ内のアドレス。</param>
      <returns>アンマネージ メモリから読み取られた 16 ビット符号付き整数。</returns>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> が認識された形式ではありません。  

または - 
<paramref name="ptr" /> は <see langword="null" />です。  

または - 
<paramref name="ptr" /> が無効です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)">
      <summary>アンマネージ メモリの指定されたオフセットから 16 ビット符号付き整数を読み取ります。</summary>
      <param name="ptr">読み込み元となるアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs">読み取りの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <returns>アンマネージ メモリの指定されたオフセットから読み取られた 16 ビット符号付き整数。</returns>
      <exception cref="T:System.AccessViolationException">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)">
      <summary>アンマネージ メモリの指定されたオフセットから 16 ビット符号付き整数を読み取ります。</summary>
      <param name="ptr">ソース オブジェクトのアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs">読み取りの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <returns>アンマネージ メモリの指定されたオフセットから読み取られた 16 ビット符号付き整数。</returns>
      <exception cref="T:System.AccessViolationException">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> が <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)">
      <summary>アンマネージ メモリから 32 ビット符号付き整数を読み取ります。</summary>
      <param name="ptr">読み込み元となるアンマネージ メモリ内のアドレス。</param>
      <returns>アンマネージ メモリから読み取られた 32 ビット符号付き整数。</returns>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> が認識された形式ではありません。  
または 
 <paramref name="ptr" /> は <see langword="null" />です。  

または - 
<paramref name="ptr" /> が無効です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)">
      <summary>アンマネージ メモリの指定されたオフセットから 32 ビット符号付き整数を読み取ります。</summary>
      <param name="ptr">読み込み元となるアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs">読み取りの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <returns>アンマネージ メモリから読み取られた 32 ビット符号付き整数。</returns>
      <exception cref="T:System.AccessViolationException">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)">
      <summary>アンマネージ メモリの指定されたオフセットから 32 ビット符号付き整数を読み取ります。</summary>
      <param name="ptr">ソース オブジェクトのアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs">読み取りの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <returns>アンマネージ メモリの指定されたオフセットから読み取られた 32 ビット符号付き整数。</returns>
      <exception cref="T:System.AccessViolationException">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> が <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)">
      <summary>アンマネージ メモリから 64 ビット符号付き整数を読み取ります。</summary>
      <param name="ptr">読み込み元となるアンマネージ メモリ内のアドレス。</param>
      <returns>アンマネージ メモリから読み取られた 64 ビット符号付き整数。</returns>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> が認識された形式ではありません。  

または - 
<paramref name="ptr" /> は <see langword="null" />です。  

または 
 <paramref name="ptr" /> が無効です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)">
      <summary>アンマネージ メモリの指定されたオフセットから 64 ビット符号付き整数を読み取ります。</summary>
      <param name="ptr">読み込み元となるアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs">読み取りの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <returns>アンマネージ メモリの指定されたオフセットから読み取られた 64 ビット符号付き整数。</returns>
      <exception cref="T:System.AccessViolationException">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)">
      <summary>アンマネージ メモリの指定されたオフセットから 64 ビット符号付き整数を読み取ります。</summary>
      <param name="ptr">ソース オブジェクトのアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs">読み取りの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <returns>アンマネージ メモリの指定されたオフセットから読み取られた 64 ビット符号付き整数。</returns>
      <exception cref="T:System.AccessViolationException">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> が <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)">
      <summary>アンマネージ メモリからプロセッサ ネイティブ サイズの整数を読み取ります。</summary>
      <param name="ptr">読み込み元となるアンマネージ メモリ内のアドレス。</param>
      <returns>アンマネージ メモリから読み取られた整数。 32 ビット コンピューター上では 32 ビット整数が返され、64 ビット コンピューター上では 64 ビット整数が返されます。</returns>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> が認識された形式ではありません。  
または 
 <paramref name="ptr" /> は <see langword="null" />です。  

または - 
<paramref name="ptr" /> が無効です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)">
      <summary>アンマネージ メモリの指定されたオフセットからプロセッサ ネイティブ サイズの整数を読み取ります。</summary>
      <param name="ptr">読み込み元となるアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs">読み取りの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <returns>アンマネージ メモリの指定されたオフセットから読み取られた整数。</returns>
      <exception cref="T:System.AccessViolationException">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)">
      <summary>アンマネージ メモリからプロセッサ ネイティブ サイズの整数を読み取ります。</summary>
      <param name="ptr">ソース オブジェクトのアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs">読み取りの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <returns>アンマネージ メモリの指定されたオフセットから読み取られた整数。</returns>
      <exception cref="T:System.AccessViolationException">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> が <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)">
      <summary>以前に <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" /> を使用して割り当てられたメモリ ブロックのサイズを変更します。</summary>
      <param name="pv">
        <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" /> を使用して割り当てられたメモリへのポインター。</param>
      <param name="cb">割り当てられたブロックの新しいサイズ。</param>
      <returns>再割り当てされたメモリ ブロックのアドレスを表す整数。 このメモリは、<see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" /> を使用して解放する必要があります。</returns>
      <exception cref="T:System.OutOfMemoryException">メモリが不足しているため要求を満たせません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)">
      <summary>以前に <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> を使用して割り当てられたメモリ ブロックのサイズを変更します。</summary>
      <param name="pv">
        <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> を使用して割り当てられたメモリへのポインター。</param>
      <param name="cb">割り当てられたブロックの新しいサイズ。 これはポインターではありません。<see cref="T:System.IntPtr" /> 型にキャストされた、要求しているバイト数です。 ポインターを渡すと、サイズとして扱われます。</param>
      <returns>再割り当てされたメモリへのポインター。 このメモリは、<see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> を使用して解放する必要があります。</returns>
      <exception cref="T:System.OutOfMemoryException">メモリが不足しているため要求を満たせません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)">
      <summary>指定したインターフェイスの参照カウントをデクリメントします。</summary>
      <param name="pUnk">解放するインターフェイス。</param>
      <returns>
        <paramref name="pUnk" /> パラメーターで指定したインターフェイスの参照カウントの新しい値。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)">
      <summary>指定した COM オブジェクトに関連付けられている指定した  ランタイム呼び出し可能ラッパー  (RCW: Runtime Callable Wrapper) の参照カウントをデクリメントします。</summary>
      <param name="o">解放する COM オブジェクト。</param>
      <returns>
        <paramref name="o" /> に関連付けられている RCW の参照カウントの新しい値。 この値は通常 0 です。RCW は、ラップされた COM オブジェクトへの参照を、それを呼び出しているマネージド クライアントの数に関係なく、1 つしか保持しないためです。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> は有効な COM オブジェクトではありません。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="o" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)">
      <summary>アンマネージドの  バイナリ文字列 (BSTR) を割り当て、それにマネージド <see cref="T:System.Security.SecureString" /> オブジェクトの内容をコピーします。</summary>
      <param name="s">コピーするマネージド オブジェクト。</param>
      <returns>
        <paramref name="s" /> パラメーターのコピー先となったアンマネージ メモリ内のアドレス。null オブジェクトが指定された場合は 0。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">現在のコンピューターは、Microsoft Windows 2000 Service Pack 3 以降を実行していません。</exception>
      <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary>アンマネージド COM タスク アロケーターから割り当てられたメモリ ブロックに、マネージド <see cref="T:System.Security.SecureString" /> オブジェクトの内容をコピーします。</summary>
      <param name="s">コピーするマネージド オブジェクト。</param>
      <returns>
        <paramref name="s" /> パラメーターのコピー先となったアンマネージ メモリ内のアドレス。null オブジェクトが指定された場合は 0。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">現在のコンピューターは、Microsoft Windows 2000 Service Pack 3 以降を実行していません。</exception>
      <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary>アンマネージド COM タスク アロケーターから割り当てられたメモリ ブロックに、マネージド <see cref="T:System.Security.SecureString" /> オブジェクトの内容をコピーします。</summary>
      <param name="s">コピーするマネージド オブジェクト。</param>
      <returns>
        <paramref name="s" /> パラメーターのコピー先となったアンマネージ メモリ内のアドレス。null オブジェクトが指定された場合は 0。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">現在のコンピューターは、Microsoft Windows 2000 Service Pack 3 以降を実行していません。</exception>
      <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary>マネージド <see cref="T:System.Security.SecureString" /> の内容をアンマネージド メモリにコピーし、コピー時に ANSI 形式に変換します。</summary>
      <param name="s">コピーするマネージド オブジェクト。</param>
      <returns>
        <paramref name="s" /> パラメーターのコピー先となったアンマネージ メモリ内のアドレス。null オブジェクトが指定された場合は 0。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">現在のコンピューターは、Microsoft Windows 2000 Service Pack 3 以降を実行していません。</exception>
      <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary>マネージド <see cref="T:System.Security.SecureString" /> オブジェクトの内容をアンマネージド メモリにコピーします。</summary>
      <param name="s">コピーするマネージド オブジェクト。</param>
      <returns>
        <paramref name="s" /> のコピー先となった (アンマネージ メモリ内の) アドレス。<paramref name="s" /> が長さ 0 の <see cref="T:System.Security.SecureString" /> オブジェクトである場合は 0。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">現在のコンピューターは、Microsoft Windows 2000 Service Pack 3 以降を実行していません。</exception>
      <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)">
      <summary>指定した COM オブジェクトに、指定したキーで参照するデータを設定します。</summary>
      <param name="obj">データを格納する COM オブジェクト。</param>
      <param name="key">データを格納する COM オブジェクトの内部ハッシュ テーブルにあるキー。</param>
      <param name="data">設定するデータ。</param>
      <returns>データが正常に設定された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> は <see langword="null" />です。  

または - 
<paramref name="key" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> はCOM オブジェクトではありません。  
または 
 <paramref name="obj" /> は Windows ランタイム オブジェクト。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)">
      <summary>オブジェクトのアンマネージ サイズをバイト単位で返します。</summary>
      <param name="structure">サイズが返されるオブジェクト。</param>
      <returns>アンマネージ コードの指定したオブジェクトのサイズ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="structure" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)">
      <summary>アンマネージ型のサイズを返します (バイト単位)。</summary>
      <param name="t">サイズが返される型。</param>
      <returns>アンマネージ コードの指定した型のサイズ。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> パラメーターがジェネリック型定義です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1">
      <summary>[.NET Framework 4.5.1 以降のバージョンでサポート]  
 アンマネージ型のサイズを返します (バイト単位)。</summary>
      <typeparam name="T">サイズが返される型。</typeparam>
      <returns>
        <typeparamref name="T" /> ジェネリック型パラメーターで指定される型のサイズ (バイト単位)。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)">
      <summary>[.NET Framework 4.5.1 以降のバージョンでサポート]  
 指定された型のオブジェクトのアンマネージのサイズをバイト数で返します。</summary>
      <param name="structure">サイズが返されるオブジェクト。</param>
      <typeparam name="T">
        <paramref name="structure" /> パラメーターの型。</typeparam>
      <returns>アンマネージ コードの指定したオブジェクトのサイズ (バイト単位)。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="structure" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)">
      <summary>BSTR を割り当て、それにマネージド <see cref="T:System.String" /> の内容をコピーします。</summary>
      <param name="s">コピーするマネージド文字列。</param>
      <returns>
        <see langword="BSTR" /> へのアンマネージ ポインター。<paramref name="s" /> が null の場合は 0。</returns>
      <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> の長さが範囲外です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)">
      <summary>アンマネージド COM タスク アロケーターから割り当てられたメモリ ブロックに、マネージド <see cref="T:System.String" /> の内容をコピーします。</summary>
      <param name="s">コピーされるマネージド文字列。</param>
      <returns>文字列に割り当てられたメモリ ブロックへのポインターを表す整数。<paramref name="s" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> パラメーターがオペレーティング システムで許可されている最大長を超えています。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)">
      <summary>アンマネージド COM タスク アロケーターから割り当てられたメモリ ブロックに、マネージド <see cref="T:System.String" /> の内容をコピーします。</summary>
      <param name="s">コピーされるマネージド文字列。</param>
      <returns>割り当てられたメモリ ブロック。<paramref name="s" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> の長さが範囲外です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)">
      <summary>アンマネージド COM タスク アロケーターから割り当てられたメモリ ブロックに、マネージド <see cref="T:System.String" /> の内容をコピーします。</summary>
      <param name="s">コピーされるマネージド文字列。</param>
      <returns>文字列に割り当てられたメモリ ブロックへのポインターを表す整数。s が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> パラメーターがオペレーティング システムで許可されている最大長を超えています。</exception>
      <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)">
      <param name="s" />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)">
      <summary>マネージド <see cref="T:System.String" /> の内容をアンマネージド メモリにコピーし、コピー時に ANSI 形式に変換します。</summary>
      <param name="s">コピーされるマネージド文字列。</param>
      <returns>
        <paramref name="s" /> のコピー先となったアンマネージ メモリ内のアドレス。<paramref name="s" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> パラメーターがオペレーティング システムで許可されている最大長を超えています。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)">
      <summary>マネージド <see cref="T:System.String" /> の内容をアンマネージド メモリにコピーし、必要に応じて ANSI 形式に変換します。</summary>
      <param name="s">コピーされるマネージド文字列。</param>
      <returns>文字列のコピー先となったアンマネージ メモリ内のアドレス。<paramref name="s" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)">
      <summary>マネージド <see cref="T:System.String" /> の内容をアンマネージド メモリにコピーします。</summary>
      <param name="s">コピーされるマネージド文字列。</param>
      <returns>
        <paramref name="s" /> のコピー先となったアンマネージ メモリ内のアドレス。<paramref name="s" /> が <see langword="null" /> の場合は 0。</returns>
      <exception cref="T:System.OutOfMemoryException">メソッドが十分なネイティブ ヒープ メモリを割り当てることができませんでした。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="s" /> パラメーターがオペレーティング システムで許可されている最大長を超えています。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
      <summary>マネージド オブジェクトからアンマネージド メモリ ブロックにデータをマーシャリングします。</summary>
      <param name="structure">マーシャリングするデータを保持すマネージド オブジェクト。 このオブジェクトは、書式指定クラスの構造体またはインスタンスである必要があります。</param>
      <param name="ptr">このメソッドを呼び出す前に割り当てる必要があるアンマネージ メモリ ブロックへのポインター。</param>
      <param name="fDeleteOld">このメソッドがデータをコピーする前に、<paramref name="ptr" /> パラメーターに対して <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" /> メソッドを呼び出す場合は <see langword="true" />。 ブロックには有効なデータを含める必要があります。 メモリ ブロックに既にデータが格納されているときに <see langword="false" /> を渡すと、メモリ リークが発生する可能性があることに注意してください。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="structure" /> は書式指定クラスではない参照型です。  

または - 
<paramref name="structure" /> がジェネリック型のインスタンスです (.NET Framework 4.5 以前のバージョンのみ)</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)">
      <summary>[.NET Framework 4.5.1 以降のバージョンでサポート]  
 指定した型のマネージド オブジェクトから、アンマネージド メモリ ブロックにデータをマーシャリングします。</summary>
      <param name="structure">マーシャリングするデータを保持すマネージド オブジェクト。 オブジェクトは、書式指定クラスの構造体またはインスタンスである必要があります。</param>
      <param name="ptr">このメソッドを呼び出す前に割り当てる必要があるアンマネージ メモリ ブロックへのポインター。</param>
      <param name="fDeleteOld">このメソッドがデータをコピーする前に、<paramref name="ptr" /> パラメーターに対して <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)" /> メソッドを呼び出す場合は <see langword="true" />。 ブロックには有効なデータを含める必要があります。 メモリ ブロックに既にデータが格納されているときに <see langword="false" /> を渡すと、メモリ リークが発生する可能性があることに注意してください。</param>
      <typeparam name="T">マネージド オブジェクトの型。</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="structure" /> は書式指定クラスではない参照型です。</exception>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize">
      <summary>システムの既定の文字サイズを表します。Unicode システムの既定の文字サイズは 2 で、ANSI システムの場合は 1 です。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize">
      <summary>現在のオペレーティング システムでの 2 バイト文字セット (DBCS) サイズの上限をバイト単位で表します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)">
      <summary>特定の失敗 HRESULT 値を使用して例外をスローします。</summary>
      <param name="errorCode">必要な例外に対応する HRESULT。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)">
      <summary>指定した IErrorInfo.aspx) インターフェイスに基づいて、特定のエラー HRESULT を含む例外をスローします。</summary>
      <param name="errorCode">必要な例外に対応する HRESULT。</param>
      <param name="errorInfo">エラーの詳細情報を提供する IErrorInfo インターフェイスへのポインター。 <c>IntPtr(0)</c> を指定すると、現在の IErrorInfo インターフェイスを使用できます。また <c>IntPtr(-1)</c> を指定すると、現在の IErrorInfo インターフェイスを無視して、エラー コードだけを使用して例外を作成できます。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)">
      <summary>指定した配列内の、指定したインデックス位置にある要素のアドレスを取得します。</summary>
      <param name="arr">目的の要素を格納している配列。</param>
      <param name="index">必要な要素の、<paramref name="arr" /> パラメーター内のインデックス。</param>
      <returns>
        <paramref name="arr" /> 内の <paramref name="index" /> のアドレス。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)">
      <summary>[.NET Framework 4.5.1 以降のバージョンでサポート]  
 指定された型の配列内の、指定したインデックス位置にある要素のアドレスを取得します。</summary>
      <param name="arr">目的の要素を格納している配列。</param>
      <param name="index">
        <paramref name="arr" /> 配列内の目的の要素のインデックス。</param>
      <typeparam name="T">配列の型。</typeparam>
      <returns>
        <paramref name="arr" /> 内の <paramref name="index" /> のアドレス。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)">
      <summary>1 バイト値をアンマネージ メモリに書き込みます。</summary>
      <param name="ptr">書き込み先となるアンマネージ メモリ内のアドレス。</param>
      <param name="val">書き込む値。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> が認識された形式ではありません。  

または - 
<paramref name="ptr" /> は <see langword="null" />です。  

または - 
<paramref name="ptr" /> が無効です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)">
      <summary>1 バイトをアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
      <param name="ptr">書き込み先となるアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs">書き込みの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <param name="val">書き込む値。</param>
      <exception cref="T:System.AccessViolationException">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)">
      <summary>1 バイトをアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
      <param name="ptr">対象のオブジェクトのアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs">書き込みの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <param name="val">書き込む値。</param>
      <exception cref="T:System.AccessViolationException">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> が <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)">
      <summary>文字を 16 ビット整数としてアンマネージ メモリに書き込みます。</summary>
      <param name="ptr">書き込み先となるアンマネージ メモリ内のアドレス。</param>
      <param name="val">書き込む値。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> が認識された形式ではありません。  

または - 
<paramref name="ptr" /> は <see langword="null" />です。  

または - 
<paramref name="ptr" /> が無効です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)">
      <summary>アンマネージ メモリに 16 ビット整数を書き込みます。</summary>
      <param name="ptr">書き込み先となるアンマネージ メモリ内のアドレス。</param>
      <param name="val">書き込む値。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> が認識された形式ではありません。  

または - 
<paramref name="ptr" /> は <see langword="null" />です。  

または - 
<paramref name="ptr" /> が無効です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)">
      <summary>16 ビット符号付き整数値をアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
      <param name="ptr">書き込み先となるネイティブ ヒープ内のベース アドレス。</param>
      <param name="ofs">書き込みの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <param name="val">書き込む値。</param>
      <exception cref="T:System.AccessViolationException">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
      <summary>16 ビット符号付き整数をアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
      <param name="ptr">書き込み先となるアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs">書き込みの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <param name="val">書き込む値。</param>
      <exception cref="T:System.AccessViolationException">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)">
      <summary>16 ビット符号付き整数値をアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
      <param name="ptr">対象のオブジェクトのアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs">書き込みの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <param name="val">書き込む値。</param>
      <exception cref="T:System.AccessViolationException">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> が <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)">
      <summary>16 ビット符号付き整数値をアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
      <param name="ptr">対象のオブジェクトのアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs">書き込みの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <param name="val">書き込む値。</param>
      <exception cref="T:System.AccessViolationException">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> が <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)">
      <summary>アンマネージ メモリに 32 ビット符号付き整数を書き込みます。</summary>
      <param name="ptr">書き込み先となるアンマネージ メモリ内のアドレス。</param>
      <param name="val">書き込む値。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> が認識された形式ではありません。  
または 
 <paramref name="ptr" /> は <see langword="null" />です。  
または 
 <paramref name="ptr" /> が無効です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
      <summary>32 ビット符号付き整数をアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
      <param name="ptr">書き込み先となるアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs">書き込みの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <param name="val">書き込む値。</param>
      <exception cref="T:System.AccessViolationException">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)">
      <summary>32 ビット符号付き整数値をアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
      <param name="ptr">対象のオブジェクトのアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs">書き込みの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <param name="val">書き込む値。</param>
      <exception cref="T:System.AccessViolationException">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> が <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
      <summary>64 ビット符号付き整数値をアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
      <param name="ptr">書き込み先となるアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs">書き込みの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <param name="val">書き込む値。</param>
      <exception cref="T:System.AccessViolationException">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)">
      <summary>アンマネージ メモリに 64 ビット符号付き整数を書き込みます。</summary>
      <param name="ptr">書き込み先となるアンマネージ メモリ内のアドレス。</param>
      <param name="val">書き込む値。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> が認識された形式ではありません。  
または 
 <paramref name="ptr" /> は <see langword="null" />です。  

または - 
<paramref name="ptr" /> が無効です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)">
      <summary>64 ビット符号付き整数値をアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
      <param name="ptr">対象のオブジェクトのアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs">書き込みの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <param name="val">書き込む値。</param>
      <exception cref="T:System.AccessViolationException">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> が <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
      <summary>アンマネージ メモリの指定されたオフセット位置にプロセッサ ネイティブ サイズの整数値を書き込みます。</summary>
      <param name="ptr">書き込み先となるアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs">書き込みの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <param name="val">書き込む値。</param>
      <exception cref="T:System.AccessViolationException">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)">
      <summary>アンマネージ メモリにプロセッサ ネイティブ サイズの整数を書き込みます。</summary>
      <param name="ptr">書き込み先となるアンマネージ メモリ内のアドレス。</param>
      <param name="val">書き込む値。</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> が認識された形式ではありません。  
または 
 <paramref name="ptr" /> は <see langword="null" />です。  
または 
 <paramref name="ptr" /> が無効です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)">
      <summary>アンマネージ メモリにプロセッサ ネイティブ サイズの整数を書き込みます。</summary>
      <param name="ptr">対象のオブジェクトのアンマネージ メモリ内のベース アドレス。</param>
      <param name="ofs">書き込みの前に <paramref name="ptr" /> パラメーターに追加される追加のバイト オフセット。</param>
      <param name="val">書き込む値。</param>
      <exception cref="T:System.AccessViolationException">ベース アドレス (<paramref name="ptr" />) にオフセット バイト (<paramref name="ofs" />) を足すと、null または無効なアドレスが生成されます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> が <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは、<see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーターを受け入れません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)">
      <summary>
        <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)" /> メソッドを使用して割り当てられた BSTR ポインターを解放します。</summary>
      <param name="s">解放する <see langword="BSTR" /> のアドレス。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)">
      <summary>
        <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)" /> メソッドを使用して割り当てられたアンマネージ文字列ポインターを解放します。</summary>
      <param name="s">解放するアンマネージ文字列のアドレス。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)">
      <summary>
        <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)" /> メソッドを使用して割り当てられたアンマネージ文字列ポインターを解放します。</summary>
      <param name="s">解放するアンマネージ文字列のアドレス。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)">
      <param name="s" />
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)">
      <summary>
        <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)" /> メソッドを使用して割り当てられたアンマネージ文字列ポインターを解放します。</summary>
      <param name="s">解放するアンマネージ文字列のアドレス。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)">
      <summary>
        <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)" /> メソッドを使用して割り当てられたアンマネージ文字列ポインターを解放します。</summary>
      <param name="s">解放するアンマネージ文字列のアドレス。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalAsAttribute">
      <summary>マネージド コードとアンマネージド コードとの間のデータのマーシャリング方法を示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Int16)">
      <summary>指定した <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 値を使用して、<see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="unmanagedType">マーシャリング後のデータの値。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)">
      <summary>指定した <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> 列挙体メンバーを使用して、<see cref="T:System.Runtime.InteropServices.UnmanagedType" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="unmanagedType">マーシャリング後のデータの値。</param>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType">
      <summary>アンマネージの <see cref="F:System.Runtime.InteropServices.UnmanagedType.LPArray" /> または <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValArray" /> の要素の型を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex">
      <summary>COM で使用されるアンマネージ <see langword="iid_is" /> 属性のパラメーター インデックスを指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie">
      <summary>カスタム マーシャラーに追加の情報を提供します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType">
      <summary>カスタム マーシャラーの完全修飾名を指定します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef">
      <summary>
        <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> を型として実装します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType">
      <summary>
        <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" /> の要素の型を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArrayUserDefinedSubType">
      <summary>
        <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" /> のユーザー定義要素の型を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst">
      <summary>固定長配列の要素の数、またはインポートする文字列の文字数 (バイト数ではない) を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex">
      <summary>COM の <see langword="size_is" /> のように、0 から始まる配列要素のカウントを格納しているパラメーターを示します。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.MarshalAsAttribute.Value">
      <summary>マーシャリング後データの <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 値を取得します。</summary>
      <returns>マーシャリング後のデータの <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> 値。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalDirectiveException">
      <summary>マーシャラーが、サポートしていない <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> を検出した場合にスローする例外。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor">
      <summary>
        <see langword="MarshalDirectiveException" /> クラスの新しいインスタンスを、既定のプロパティを使用して初期化します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化データから、<see langword="MarshalDirectiveException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see langword="MarshalDirectiveException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を指定するエラー メッセージ。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Runtime.InteropServices.MarshalDirectiveException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner">現在の例外の原因となった例外。 <paramref name="inner" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.NativeLibrary">
      <summary>ネイティブ ライブラリを管理するための API を提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Free(System.IntPtr)">
      <summary>特定の読み込まれたライブラリ ハンドルを開放します。または、入力ハンドルが <see cref="F:System.IntPtr.Zero" /> の場合は何も操作を行いません。</summary>
      <param name="handle">解放されるネイティブ ライブラリ ハンドル。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.GetExport(System.IntPtr,System.String)">
      <summary>エクスポートされたシンボルのアドレスを取得します。</summary>
      <param name="handle">ネイティブ ライブラリ ハンドル。</param>
      <param name="name">エクスポートされたシンボルの名前。</param>
      <returns>シンボルのアドレス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handle" /> または <paramref name="name" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.EntryPointNotFoundException">シンボルが見つかりません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String)">
      <summary>OS ローダーをラップし、既定のフラグを使用するネイティブ ライブラリを読み込むための単純な API を提供します。</summary>
      <param name="libraryPath">読み込まれるネイティブ ライブラリの名前。</param>
      <returns>読み込まれたネイティブ ライブラリのハンドル。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="libraryPath" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.DllNotFoundException">ライブラリが見つかりません。</exception>
      <exception cref="T:System.BadImageFormatException">ライブラリが無効です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath})">
      <summary>ネイティブ ライブラリを読み込むための高度な API を提供します。</summary>
      <param name="libraryName">読み込まれるネイティブ ライブラリの名前。</param>
      <param name="assembly">ネイティブ ライブラリを読み込むアセンブリ。</param>
      <param name="searchPath">検索パス。</param>
      <returns>読み込まれたライブラリのハンドル。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="libraryName" /> または <paramref name="assembly" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assembly" /> が <see langword="RuntimeAssembly" /> ではありません。</exception>
      <exception cref="T:System.DllNotFoundException">ライブラリが見つかりません。</exception>
      <exception cref="T:System.BadImageFormatException">ライブラリが無効です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.SetDllImportResolver(System.Reflection.Assembly,System.Runtime.InteropServices.DllImportResolver)">
      <summary>アセンブリからのネイティブ ライブラリのインポートを解決するためのコールバックを設定します。</summary>
      <param name="assembly">リゾルバーが登録されるアセンブリ。</param>
      <param name="resolver">登録するリゾルバー コールバック。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> または paramref name="resolver" /&gt; は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">リゾルバーはこのアセンブリに既に設定されています。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryGetExport(System.IntPtr,System.String,System.IntPtr@)">
      <summary>エクスポートされたシンボルのアドレスを取得し、メソッドの呼び出しが成功したかどうかを示す値を返します。</summary>
      <param name="handle">ネイティブ ライブラリ ハンドル。</param>
      <param name="name">エクスポートされたシンボルの名前。</param>
      <param name="address">メソッドが戻ると、シンボルのアドレスが含まれます (ある場合)。</param>
      <returns>メソッドが正常に戻った場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handle" /> または <paramref name="name" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.IntPtr@)">
      <summary>ネイティブ ライブラリを読み込むための単純な API を提供し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="libraryPath">読み込まれるネイティブ ライブラリの名前。</param>
      <param name="handle">メソッドが戻るときの、読み込まれたネイティブ ライブラリのハンドル。</param>
      <returns>ネイティブ ライブラリが正常に読み込まれた場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="libraryPath" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath},System.IntPtr@)">
      <summary>ネイティブ ライブラリを読み込む高度な API を提供し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="libraryName">読み込まれるネイティブ ライブラリの名前。</param>
      <param name="assembly">ネイティブ ライブラリを読み込むアセンブリ。</param>
      <param name="searchPath">検索パス。</param>
      <param name="handle">メソッドが戻るときの、読み込まれたネイティブ ライブラリのハンドル。</param>
      <returns>読み込み操作が成功した場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="libraryPath" /> または <paramref name="assembly" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assembly" /> が <see langword="RuntimeAssembly" /> ではありません。</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.OptionalAttribute">
      <summary>パラメーターが省略可能であることを示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OptionalAttribute.#ctor">
      <summary>
        <see langword="OptionalAttribute" /> クラスの新しいインスタンスを既定値で初期化します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PreserveSigAttribute">
      <summary>COM 相互運用呼び出し中に発生する HRESULT または <see langword="retval" /> シグネチャ変換を中止することを示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PreserveSigAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.InteropServices.PreserveSigAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute">
      <summary>この属性が適用されたアセンブリが、プライマリ相互運用機能アセンブリであることを示します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.#ctor(System.Int32,System.Int32)">
      <summary>このアセンブリがプライマリ相互運用機能アセンブリとなるタイプ ライブラリのメジャー バージョン番号とマイナー バージョン番号を指定して、<see cref="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute" /> クラスのインスタンスを初期化します。</summary>
      <param name="major">作成するアセンブリがプライマリ相互運用機能アセンブリとなるタイプ ライブラリのメジャー バージョン。</param>
      <param name="minor">作成するアセンブリがプライマリ相互運用機能アセンブリとなるタイプ ライブラリのマイナー バージョン。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MajorVersion">
      <summary>対象のアセンブリがプライマリ相互運用機能アセンブリであるタイプ ライブラリのメジャー バージョン番号を取得します。</summary>
      <returns>対象のアセンブリがプライマリ相互運用機能アセンブリであるタイプ ライブラリのメジャー バージョン番号。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MinorVersion">
      <summary>対象のアセンブリがプライマリ相互運用機能アセンブリであるタイプ ライブラリのマイナー バージョン番号を取得します。</summary>
      <returns>対象のアセンブリがプライマリ相互運用機能アセンブリであるタイプ ライブラリのマイナー バージョン番号。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ProgIdAttribute">
      <summary>ユーザーがクラスの ProgID を指定することを許可します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ProgIdAttribute.#ctor(System.String)">
      <summary>指定した ProgID を使用して、<see langword="ProgIdAttribute" /> の新しいインスタンスを初期化します。</summary>
      <param name="progId">クラスに割り当てる ProgID。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ProgIdAttribute.Value">
      <summary>クラスの ProgID を取得します。</summary>
      <returns>クラスの ProgID。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.RuntimeEnvironment">
      <summary>共通言語ランタイム環境に関する情報を返す <see langword="static" /> メソッドのコレクションを提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.FromGlobalAccessCache(System.Reflection.Assembly)">
      <summary>指定したアセンブリがグローバル アセンブリ キャッシュに読み込まれているかどうかをテストします。</summary>
      <param name="a">テスト対象のアセンブリ。</param>
      <returns>アセンブリがグローバル アセンブリ キャッシュに読み込まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory">
      <summary>共通言語ランタイムがインストールされているディレクトリを返します。</summary>
      <returns>共通言語ランタイムがインストールされているディレクトリへのパスを含んでいる文字列。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsIntPtr(System.Guid,System.Guid)">
      <summary>指定されたクラスの指定されたインターフェイスを返します。</summary>
      <param name="clsid">目的のクラスの識別子。</param>
      <param name="riid">目的のインターフェイスの識別子。</param>
      <returns>要求されたインターフェイスへのアンマネージ ポインター。</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">IUnknown::QueryInterface エラーです。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsObject(System.Guid,System.Guid)">
      <summary>COM オブジェクトを <see langword="IUnknown" /> インターフェイスへのポインターによって表す型のインスタンスを返します。</summary>
      <param name="clsid">目的のクラスの識別子。</param>
      <param name="riid">目的のインターフェイスの識別子。</param>
      <returns>指定したアンマネージ COM オブジェクトを表すオブジェクト。</returns>
      <exception cref="T:System.Runtime.InteropServices.COMException">IUnknown::QueryInterface エラーです。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetSystemVersion">
      <summary>現在のプロセスを実行している共通言語ランタイムのバージョン番号を取得します。</summary>
      <returns>共通言語ランタイムのバージョン番号を含んでいる文字列。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.RuntimeEnvironment.SystemConfigurationFile">
      <summary>システム構成ファイルへのパスを取得します。</summary>
      <returns>システム構成ファイルへのパス。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayRankMismatchException">
      <summary>着信 <see langword="SAFEARRAY" /> のランクが、マネージド シグネチャで指定したランクと一致しない場合にスローされる例外。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor">
      <summary>
        <see langword="SafeArrayTypeMismatchException" /> クラスの新しいインスタンスを既定値で初期化します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化データから、<see langword="SafeArrayTypeMismatchException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see langword="SafeArrayRankMismatchException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の理由を示すメッセージ。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Runtime.InteropServices.SafeArrayRankMismatchException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner">現在の例外の原因となった例外。 <paramref name="inner" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException">
      <summary>着信 <see langword="SAFEARRAY" /> の型が、マネージド シグネチャで指定した型と一致しない場合にスローされる例外。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor">
      <summary>
        <see langword="SafeArrayTypeMismatchException" /> クラスの新しいインスタンスを既定値で初期化します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化データから、<see langword="SafeArrayTypeMismatchException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see langword="SafeArrayTypeMismatchException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の理由を示すメッセージ。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner">現在の例外の原因となった例外。 <paramref name="inner" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeBuffer">
      <summary>読み取り用および書き込み用に使用できる管理されたメモリ バッファーを提供します。 管理されたバッファーの外部にあるメモリにアクセスしようとした場合 (アンダーランおよびオーバーラン)、例外が発生します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> クラスの新しいインスタンスを作成し、バッファー ハンドルを安全に解放するかどうかを指定します。</summary>
      <param name="ownsHandle">終了処理中にハンドルを確実にリリースする場合は <see langword="true" />。信頼性の高いリリースを実行しない場合は <see langword="false" /> (お勧めしません)。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)">
      <summary>
        <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> オブジェクトからメモリ ブロックのポインターを取得します。</summary>
      <param name="pointer">
        <see cref="T:System.Runtime.InteropServices.SafeBuffer" /> オブジェクト内からポインターを受け取るための参照渡しされるバイト ポインター。 このポインターは、このメソッドを呼び出す前に <see langword="null" /> に設定する必要があります。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> メソッドが呼び出されていません。</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeBuffer.ByteLength">
      <summary>バッファーのサイズを取得します (バイト単位)。</summary>
      <returns>メモリ バッファー内のバイト数。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> メソッドが呼び出されていません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)">
      <summary>指定された要素数および要素サイズを使用して、メモリ バッファーの割り当てサイズを指定します。 このメソッドは、<see cref="T:System.Runtime.InteropServices.SafeBuffer" /> インスタンスを使用する前に呼び出す必要があります。</summary>
      <param name="numElements">バッファー内の要素の数。</param>
      <param name="sizeOfEachElement">バッファー内の各要素のサイズ。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numElements" /> が 0 未満です。  
または 
 <paramref name="sizeOfEachElement" /> が 0 未満です。  

または - 
<paramref name="numElements" /> に <paramref name="sizeOfEachElement" /> を乗算した値が、利用できるアドレス空間を超えています。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)">
      <summary>メモリ領域の割り当てサイズを定義します (バイト単位)。 このメソッドは、<see cref="T:System.Runtime.InteropServices.SafeBuffer" /> インスタンスを使用する前に呼び出す必要があります。</summary>
      <param name="numBytes">バッファー内のバイト数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numBytes" /> が 0 未満です。  
または 
 <paramref name="numBytes" /> が、利用できるアドレス空間を超えています。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)">
      <summary>値型の数を指定して、メモリ領域の割り当てサイズを定義します。 このメソッドは、<see cref="T:System.Runtime.InteropServices.SafeBuffer" /> インスタンスを使用する前に呼び出す必要があります。</summary>
      <param name="numElements">メモリを割り当てる対象の値型の要素の数。</param>
      <typeparam name="T">メモリを割り当てる対象の値型。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="numElements" /> が 0 未満です。  

または - 
<paramref name="numElements" /> と各要素のサイズを乗算した値が、利用できるアドレス空間を超えています。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)">
      <summary>メモリの指定されたオフセット位置の値型を読み取ります。</summary>
      <param name="byteOffset">値型を読み取る位置。 アライメントの問題を考慮する必要があります。</param>
      <typeparam name="T">読み取る値型。</typeparam>
      <returns>メモリから読み取られた値型。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> メソッドが呼び出されていません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
      <summary>メモリの指定したオフセットから指定した数の値型を読み取り、指定したインデックスから始まる配列にそれらを書き込みます。</summary>
      <param name="byteOffset">読み取りを開始する位置。</param>
      <param name="array">データを書き込む先の出力配列。</param>
      <param name="index">書き込みが開始される出力配列内の位置。</param>
      <param name="count">入力配列から読み取って出力配列に書き込む値型の数。</param>
      <typeparam name="T">読み取る値型。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。  

または - 
<paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">配列の長さからインデックスを減算した値が <paramref name="count" /> 未満です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> メソッドが呼び出されていません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.ReleasePointer">
      <summary>
        <see cref="M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)" /> メソッドによって取得されたポインターを解放します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> メソッドが呼び出されていません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)">
      <summary>値型をメモリの指定した位置に書き込みます。</summary>
      <param name="byteOffset">書き込みを開始する位置。 アライメントの問題を考慮する必要があります。</param>
      <param name="value">書き込む値。</param>
      <typeparam name="T">書き込む値型。</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> メソッドが呼び出されていません。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)">
      <summary>入力配列内の指定した位置からバイトを読み取ることによって、指定した数の値型をメモリ位置に書き込みます。</summary>
      <param name="byteOffset">書き込み先のメモリ内の位置。</param>
      <param name="array">入力配列。</param>
      <param name="index">読み取りを開始する配列内のオフセット。</param>
      <param name="count">書き込む値型の数。</param>
      <typeparam name="T">書き込む値型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">入力配列の長さから <paramref name="index" /> を減算した値が <paramref name="count" /> 未満です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Runtime.InteropServices.SafeBuffer.Initialize" /> メソッドが呼び出されていません。</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.SEHException">
      <summary>構造化例外処理 (SEH) エラーを表します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor">
      <summary>
        <see cref="T:System.Runtime.InteropServices.SEHException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化データから、<see cref="T:System.Runtime.InteropServices.SEHException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.Runtime.InteropServices.SEHException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の理由を示すメッセージ。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Runtime.InteropServices.SEHException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="inner">現在の例外の原因となった例外。 <paramref name="inner" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.CanResume">
      <summary>例外から回復できるかどうか、および例外がスローされたポイントからコードを続行できるかどうかを示します。</summary>
      <returns>再開可能な例外は実装されていないため、常に <see langword="false" /> が返されます。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.StandardOleMarshalObject">
      <summary>標準の共通言語ランタイム (CLR) フリー スレッド化マーシャラーを標準の OLE STA マーシャラーで置き換えます。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StandardOleMarshalObject.#ctor">
      <summary>
        <see cref="T:System.Runtime.InteropServices.StandardOleMarshalObject" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
      <summary>型の同値のサポートを提供します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor">
      <summary>
        <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> クラスの新しいインスタンスを作成します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)">
      <summary>指定されたスコープと識別子を使用して、<see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="scope">1 番目の型の同値文字列。</param>
      <param name="identifier">2 番目の型の同値文字列。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier">
      <summary>
        <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /> コンストラクターに渡された <paramref name="identifier" /> パラメーターの値を取得します。</summary>
      <returns>コンストラクターの <paramref name="identifier" /> パラメーターの値。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Scope">
      <summary>
        <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" /> コンストラクターに渡された <paramref name="scope" /> パラメーターの値を取得します。</summary>
      <returns>コンストラクターの <paramref name="scope" /> パラメーターの値。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncAttribute">
      <summary>COM タイプ ライブラリからこのメソッド用に元来インポートされた <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" /> を格納します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Int16)">
      <summary>指定した <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 値を使用して、<see langword="TypeLibFuncAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="flags">インポート元のタイプ ライブラリに検出された属性付きメソッドの <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 値。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Runtime.InteropServices.TypeLibFuncFlags)">
      <summary>指定した <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 値を使用して、<see langword="TypeLibFuncAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="flags">インポート元のタイプ ライブラリに検出された属性付きメソッドの <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 値。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibFuncAttribute.Value">
      <summary>このメソッドの <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 値を取得します。</summary>
      <returns>このメソッドの <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> 値。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncFlags">
      <summary>このメソッドがインポートされた COM タイプ ライブラリに <see langword="FUNCFLAGS" /> の元の設定を記述します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable">
      <summary>データ連結をサポートしている関数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultBind">
      <summary>オブジェクトを最もよく表す関数です。 型情報の 1 つの関数だけが、この属性を持つことができます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultCollelem">
      <summary>型 "abc" で "xyz" という名前のメンバーをコンパイラが検索する場合に最適化を許可します。 そのようなメンバーが見つかり、既定のコレクション要素のアクセサー関数であることを示すフラグが付いている場合、そのメンバー関数の呼び出しが生成されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDisplayBind">
      <summary>ユーザーに対して表示されるバインド可能な関数です。 <see cref="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable" /> も設定する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FHidden">
      <summary>関数は存在し、バインド可能ですが、ユーザーに対して表示しないでください。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FImmediateBind">
      <summary>関数は、個別のバインド可能なプロパティとして割り当てられます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FNonBrowsable">
      <summary>プロパティはオブジェクト ブラウザーには表示されますが、プロパティ ブラウザーには表示されません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FReplaceable">
      <summary>インターフェイスが既定の動作を備えていることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRequestEdit">
      <summary>設定した場合は、そのプロパティを設定したメソッドを呼び出すと、初めに <see langword="IPropertyNotifySink::OnRequestEdit" /> が呼び出されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRestricted">
      <summary>このフラグは、システムレベル関数または型ブラウザーに表示しない関数で使用します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FSource">
      <summary>関数は、イベントの発生元のオブジェクトを返します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUiDefault">
      <summary>型情報メンバーは、ユーザー インターフェイスに表示する既定のメンバーです。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUsesGetLastError">
      <summary>関数は <see langword="GetLastError" /> をサポートしています。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibImportClassAttribute">
      <summary>インターフェイスを排他的に使用する <see cref="T:System.Type" /> を指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibImportClassAttribute.#ctor(System.Type)">
      <summary>インターフェイスを排他的に使用する <see cref="T:System.Runtime.InteropServices.TypeLibImportClassAttribute" /> を指定して、<see cref="T:System.Type" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="importClass">インターフェイスを排他的に使用する <see cref="T:System.Type" /> オブジェクト。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibImportClassAttribute.Value">
      <summary>インターフェイスを排他的に使用する <see cref="T:System.Type" /> オブジェクトの名前を取得します。</summary>
      <returns>インターフェイスを排他的に使用する <see cref="T:System.Type" /> オブジェクトの名前。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeAttribute">
      <summary>COM タイプ ライブラリからこの型用に元来インポートされた <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> を格納します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Int16)">
      <summary>指定した <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 値を使用して、<see langword="TypeLibTypeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="flags">インポート元のタイプ ライブラリに検出された属性付き型の <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 値。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Runtime.InteropServices.TypeLibTypeFlags)">
      <summary>指定した <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 値を使用して、<see langword="TypeLibTypeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="flags">インポート元のタイプ ライブラリに検出された属性付き型の <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 値。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibTypeAttribute.Value">
      <summary>この型の <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 値を取得します。</summary>
      <returns>この型の <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> 値。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeFlags">
      <summary>この型がインポートされた COM タイプ ライブラリに <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> の元の設定を記述します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAggregatable">
      <summary>クラスは、集約をサポートしています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAppObject">
      <summary>
        <see langword="Application" /> オブジェクトを記述する型の説明。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FCanCreate">
      <summary>型のインスタンスは、<see langword="ITypeInfo::CreateInstance" /> で作成できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FControl">
      <summary>型は他の型の派生元になるコントロールであり、ユーザーには表示されません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDispatchable">
      <summary>インターフェイスが <see langword="IDispatch" /> から直接または間接に派生したものであることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDual">
      <summary>インターフェイスは、<see langword="IDispatch" /> と V テーブル バインディングの両方を提供します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FHidden">
      <summary>型はブラウザーに表示しないでください。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FLicensed">
      <summary>型はライセンス付きです。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FNonExtensible">
      <summary>インターフェイスは、実行時にメンバーを追加できません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FOleAutomation">
      <summary>インターフェイスで使用される型は、V テーブル バインディングのサポートを含むオートメーションに完全に準拠しています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FPreDeclId">
      <summary>型は定義済みです。 クライアント アプリケーションは、この属性を持つオブジェクトの単一のインスタンスを自動的に作成します。 オブジェクトを指す変数の名前は、そのオブジェクトのクラス名と同じです。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReplaceable">
      <summary>オブジェクトは、<see langword="IConnectionPointWithDefault" /> をサポートし、既定の動作を備えています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FRestricted">
      <summary>このフラグは、システム レベルの型または型ブラウザーに表示しない型で使用します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReverseBind">
      <summary>名前解決のために基本インターフェイスをチェックしてから子インターフェイスをチェックする必要があることを示します。 これは既定と反対の動作です。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarAttribute">
      <summary>COM タイプ ライブラリからこのフィールド用に元来インポートされた <see cref="T:System.Runtime.InteropServices.VARFLAGS" /> を格納します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Int16)">
      <summary>指定した <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 値を使用して、<see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="flags">インポート元のタイプ ライブラリに検出された属性付きフィールドの <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 値。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Runtime.InteropServices.TypeLibVarFlags)">
      <summary>指定した <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 値を使用して、<see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="flags">インポート元のタイプ ライブラリに検出された属性付きフィールドの <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 値。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVarAttribute.Value">
      <summary>このフィールドの <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 値を取得します。</summary>
      <returns>このフィールドの <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> 値。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarFlags">
      <summary>この変数がインポートされた COM タイプ ライブラリに <see cref="T:System.Runtime.InteropServices.VARFLAGS" /> の元の設定を記述します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable">
      <summary>変数はデータ連結をサポートしています。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultBind">
      <summary>変数は、オブジェクトを最もよく表す単一のプロパティです。 型情報の 1 つの変数だけが、この値を持つことができます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultCollelem">
      <summary>型 "abc" で "xyz" という名前のメンバーをコンパイラが検索する場合に最適化を許可します。 そのようなメンバーが見つかり、既定のコレクション要素のアクセサー関数であることを示すフラグが付いている場合、そのメンバー関数の呼び出しが生成されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDisplayBind">
      <summary>変数はバインド可能として表示されます。 <see cref="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable" /> も設定する必要があります。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FHidden">
      <summary>変数は存在し、バインド可能ですが、ブラウザーには表示しないでください。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FImmediateBind">
      <summary>変数は、個別のバインド可能なプロパティとして割り当てられます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FNonBrowsable">
      <summary>変数はオブジェクト ブラウザーに表示されますが、プロパティ ブラウザーには表示されません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReadOnly">
      <summary>変数への割り当ては許可しないでください。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReplaceable">
      <summary>インターフェイスが既定の動作を備えていることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRequestEdit">
      <summary>プロパティが COM <see langword="OnRequestEdit" /> 通知をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRestricted">
      <summary>このフラグは、システムレベル関数または型ブラウザーに表示しない関数で使用します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FSource">
      <summary>変数は、イベントの発生元のオブジェクトを返します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FUiDefault">
      <summary>ユーザー インターフェイスの既定の表示。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVersionAttribute">
      <summary>エクスポートされたタイプ ライブラリのバージョン番号を指定します。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVersionAttribute.#ctor(System.Int32,System.Int32)">
      <summary>タイプ ライブラリのメジャー バージョン番号とマイナー バージョン番号を使用して、<see cref="T:System.Runtime.InteropServices.TypeLibVersionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="major">タイプ ライブラリのメジャー バージョン番号。</param>
      <param name="minor">タイプ ライブラリのマイナー バージョン番号。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MajorVersion">
      <summary>タイプ ライブラリのメジャー バージョン番号を取得します。</summary>
      <returns>タイプ ライブラリのメジャー バージョン番号。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MinorVersion">
      <summary>タイプ ライブラリのマイナー バージョン番号を取得します。</summary>
      <returns>タイプ ライブラリのマイナー バージョン番号。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnknownWrapper">
      <summary>マーシャラーが <see langword="VT_UNKNOWN" /> としてマーシャリングする必要があるオブジェクトをラップします。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnknownWrapper.#ctor(System.Object)">
      <summary>ラップするオブジェクトを使用して、<see cref="T:System.Runtime.InteropServices.UnknownWrapper" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="obj">ラップするオブジェクト。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject">
      <summary>ラッパーに格納されているオブジェクトを取得します。</summary>
      <returns>ラップされたオブジェクト。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute">
      <summary>アンマネージ コードとの間でアンマネージ関数ポインターとしてやり取りされるデリゲート シグネチャのマーシャリング動作を制御します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)">
      <summary>呼び出し規約を指定して、<see cref="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="callingConvention">指定した呼び出し規約。</param>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.BestFitMapping">
      <summary>Unicode 文字を ANSI 文字に変換するときの、最適マッピング動作のオン/オフを切り替えます。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CallingConvention">
      <summary>呼び出し規約の値を取得します。</summary>
      <returns>
        <see cref="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)" /> コンストラクターによって指定された呼び出し規約の値。</returns>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CharSet">
      <summary>文字列パラメーターをメソッドにマーシャリングする方法を示し、名前マングルを制御します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.SetLastError">
      <summary>属性付きメソッドから戻る前に、呼び出し先が <see langword="SetLastError" /> Windows API 関数を呼び出すかどうかを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.ThrowOnUnmappableChar">
      <summary>マップできない Unicode 文字 (ANSI の "?" に変換される文字) が見つかったときに、例外をスローするかどうかを指定します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedType">
      <summary>パラメーターまたはフィールドをアンマネージ コードにマーシャリングする方法を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AnsiBStr">
      <summary>長さを示すプレフィックスを付けた 1 バイトの ANSI 文字列。 このメンバーは <see cref="T:System.String" /> データ型で使用できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AsAny">
      <summary>実行時にオブジェクトの型を確認し、その型としてオブジェクトをマーシャリングする動的な型。 このメンバーは、プラットフォーム呼び出しメソッドにのみ有効です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Bool">
      <summary>4 バイトの Boolean 値 (<see langword="true" /> != 0、<see langword="false" /> = 0)。 これは Win32 BOOL 型です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.BStr">
      <summary>長さを示すプリフィックスを付けた 2 バイトの Unicode 文字列。 このメンバー (COM の既定の文字列) は、<see cref="T:System.String" /> データ型で使用できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValArray">
      <summary>
        <see cref="P:System.Runtime.InteropServices.MarshalAsAttribute.Value" /> プロパティを <see langword="ByValArray" /> に設定した場合、<see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> フィールドは、配列の要素数を示すように設定する必要があります。 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" /> フィールドには、文字列型を区別する必要がある場合に、オプションとして配列要素の <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> を格納できます。 この <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> は、要素が構造体にフィールドとして定義されている配列でのみ使用できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr">
      <summary>構造体に定義されているインライン固定長文字配列で使用します。 <see langword="ByValTStr" /> 型は、構造体内の C スタイルの固定サイズの文字列 (たとえば、<c>char s[5]</c>) のように動作します。 <see langword="ByValTStr" /> で使用する文字型は、格納される構造体に適用する <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 属性の引数 <see cref="T:System.Runtime.InteropServices.CharSet" /> によって決定されます。 配列のサイズを示す場合は、常に <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> フィールドを使用します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Currency">
      <summary>通貨型。 10 進値を <see langword="Decimal" /> ではなく、COM 通貨型としてマーシャリングするために、<see cref="T:System.Decimal" /> で使用します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler">
      <summary>
        <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> または <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef" /> フィールドと共に使用する場合に、カスタム マーシャラー クラスを指定します。 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie" /> フィールドは、カスタム マーシャラーに追加の情報を渡すために使用できます。 このメンバーは任意の参照型で使用できます。 このメンバーは、パラメーターと戻り値にのみ有効です。 フィールドでは使用できません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Error">
      <summary>
        <see cref="F:System.Runtime.InteropServices.UnmanagedType.I4" /> または <see cref="F:System.Runtime.InteropServices.UnmanagedType.U4" /> に関連付けられたネイティブな型。この型により、パラメーターはエクスポート先のタイプ ライブラリに HRESULT としてエクスポートされます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.FunctionPtr">
      <summary>C スタイルの関数ポインターとして使用できる整数値。 このメンバーは、<see cref="T:System.Delegate" /> データ型または <see cref="T:System.Delegate" /> から継承した型で使用できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.HString">
      <summary>Windows ランタイム 文字列。 このメンバーは <see cref="T:System.String" /> データ型で使用できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I1">
      <summary>1 バイト符号付き整数。 このメンバーを使用すると、Boolean 値を 1 バイトの C スタイル <see langword="bool" /> (<see langword="true" /> = 1、<see langword="false" /> = 0) に変換できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I2">
      <summary>2 バイト符号付き整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I4">
      <summary>4 バイト符号付き整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I8">
      <summary>8 バイト符号付き整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IDispatch">
      <summary>COM の <see langword="IDispatch" /> ポインター (Microsoft Visual Basic 6.0 では<see langword="Object" /> )。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IInspectable">
      <summary>Windows ランタイム インターフェイス ポインター。 このメンバーは <see cref="T:System.Object" /> データ型で使用できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Interface">
      <summary>COM インターフェイス ポインター。 インターフェイスの <see cref="T:System.Guid" /> は、クラス メタデータから取得します。 インターフェイス型を直接指定する場合、またはクラスに適用する場合は既定のインターフェイス型を指定する場合に、このメンバーを使用します。 このメンバーは、<see cref="T:System.Object" /> データ型に適用すると、<see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" /> と同じ動作を生成します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IUnknown">
      <summary>COM <see langword="IUnknown" /> ポインター。 このメンバーは <see cref="T:System.Object" /> データ型で使用できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPArray">
      <summary>C スタイル配列の最初の要素へのポインター。 マネージド コードからアンマネージド コードにマーシャリングする場合、配列長はマネージド配列長によって決定されます。 アンマネージド コードからマネージド コードにマーシャリングする場合、配列の長さは <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> フィールドと <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" /> フィールドによって決まります。文字列の型を区別する必要がある場合は、配列内の要素のアンマネージド型も考慮されます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStr">
      <summary>終端が null の 1 バイトの ANSI 文字列。 このメンバーは、<see cref="T:System.String" /> データ型および <see cref="T:System.Text.StringBuilder" /> データ型で使用できます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStruct">
      <summary>マネージド書式指定クラスをマーシャリングするときに使用する C スタイル構造体へのポインター。 このメンバーは、プラットフォーム呼び出しメソッドにのみ有効です。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPTStr">
      <summary>プラットフォームに依存する文字列: Windows 98 の場合は ANSI。Windows NT および Windows XP の場合は Unicode。 型 <see langword="LPTStr" /> の文字列のエクスポートがサポートされていないため、この値は COM 相互運用ではサポートされず、プラットフォーム呼び出しのみでサポートされます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPUTF8Str">
      <summary>UTF-8 でエンコードされた文字列へのポインター。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPWStr">
      <summary>終端が null の 2 バイトの Unicode 文字列。 文字列がアンマネージド <see langword="CoTaskMemAlloc" /> 関数を使用して作成されない限り、アンマネージド文字列で <see langword="LPWStr" /> 値を使用することはできません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R4">
      <summary>4 バイトの浮動小数点数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R8">
      <summary>8 バイトの浮動小数点数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SafeArray">
      <summary>
        <see langword="SafeArray" /> は、関連付けられた配列データの型、ランク、および境界を格納する自己記述型の配列です。 <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" /> フィールドと併せてこのメンバーを使用することによって、既定の要素の型をオーバーライドできます。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Struct">
      <summary>マネージド書式指定クラスと値型をマーシャリングするために使用する VARIANT。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysInt">
      <summary>プラットフォームに依存した符号付き整数: 32 ビット Windows の場合は 4 バイト。64 ビット Windows の場合は 8 バイト。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysUInt">
      <summary>プラットフォームに依存した、符号なし整数: 32 ビット Windows の場合は 4 バイト。64 ビット Windows の場合は 8 バイト。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.TBStr">
      <summary>固定長のプラットフォームに依存した <see langword="char" />文字列: Windows 98 の場合は ANSI。Windows NT の場合は Unicode。 この BSTR に似たメンバーを使用することはほとんどありません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U1">
      <summary>1 バイト符号なし整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U2">
      <summary>2 バイト符号なし整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U4">
      <summary>4 バイト符号なし整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U8">
      <summary>8 バイト符号なし整数。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VariantBool">
      <summary>2 バイトの OLE 定義 VARIANT_BOOL 型 (<see langword="true" /> = -1、<see langword="false" /> = 0)。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VBByRefStr">
      <summary>Visual Basic で、アンマネージド コードの文字列を変更し、結果をマネージド コードに反映できるようにする値。 この値は、プラットフォーム呼び出しでだけサポートされます。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VarEnum">
      <summary>配列が <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" /> としてマネージド コードからアンマネージド コードにマーシャリングされる場合の、配列要素のマーシャリング方法を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ARRAY">
      <summary>
        <see langword="SAFEARRAY" /> ポインターを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB">
      <summary>長さのプリフィックスが付いたバイトを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB_OBJECT">
      <summary>BLOB がオブジェクトを格納していることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BOOL">
      <summary>ブール値を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BSTR">
      <summary>BSTR 文字列を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BYREF">
      <summary>値が参照であることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CARRAY">
      <summary>C スタイル配列を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CF">
      <summary>クリップボード形式を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CLSID">
      <summary>クラス ID を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CY">
      <summary>通貨の値を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DATE">
      <summary>DATE 値を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DECIMAL">
      <summary>
        <see langword="decimal" /> 値を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH">
      <summary>
        <see langword="IDispatch" /> ポインターを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_EMPTY">
      <summary>値が指定されなかったことを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ERROR">
      <summary>SCODE を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_FILETIME">
      <summary>FILETIME 値を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_HRESULT">
      <summary>HRESULT を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I1">
      <summary>
        <see langword="char" /> 値を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I2">
      <summary>
        <see langword="short" /> 整数を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I4">
      <summary>
        <see langword="long" /> 整数を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I8">
      <summary>64 ビット整数を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_INT">
      <summary>整数値を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPSTR">
      <summary>null で終わる文字列を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPWSTR">
      <summary>
        <see langword="null" /> で終わるワイド文字列を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_NULL">
      <summary>null 値を示します。これは、SQL における null 値に相当します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_PTR">
      <summary>ポインター型を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R4">
      <summary>
        <see langword="float" /> 値を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R8">
      <summary>
        <see langword="double" /> 値を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_RECORD">
      <summary>ユーザー定義型を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_SAFEARRAY">
      <summary>SAFEARRAY を示します。 VARIANT では有効ではありません。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORAGE">
      <summary>ストレージの名前が続くことを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORED_OBJECT">
      <summary>ストレージがオブジェクトを格納していることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAM">
      <summary>ストリームの名前が続くことを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAMED_OBJECT">
      <summary>ストリームがオブジェクトを格納していることを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI1">
      <summary>
        <see langword="byte" /> を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI2">
      <summary>
        <see langword="unsigned" />
        <see langword="short" /> を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI4">
      <summary>
        <see langword="unsigned" />
        <see langword="long" /> を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI8">
      <summary>64 ビット符号なし整数を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UINT">
      <summary>
        <see langword="unsigned" /> 整数値を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UNKNOWN">
      <summary>
        <see langword="IUnknown" /> ポインターを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_USERDEFINED">
      <summary>ユーザー定義型を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VARIANT">
      <summary>VARIANT <see langword="far" /> ポインターを示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VECTOR">
      <summary>カウントされた単純な配列を示します。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VOID">
      <summary>C スタイル <see langword="void" /> を示します。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VariantWrapper">
      <summary>
        <see langword="VT_VARIANT | VT_BYREF" /> 型のデータをマネージド コードからアンマネージド コードにマーシャリングします。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)">
      <summary>指定した <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> パラメーターの <see cref="T:System.Object" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="obj">マーシャリングするオブジェクト。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject">
      <summary>
        <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> オブジェクトによってラップされたオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> オブジェクトによってラップされたオブジェクト。</returns>
    </member>
    <member name="T:System.Security.SecureString">
      <summary>不要になったときにコンピューターのメモリから削除するなどして機密を保持する必要があるテキストを表します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Security.SecureString.#ctor">
      <summary>
        <see cref="T:System.Security.SecureString" /> クラスの新しいインスタンスを初期化します。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">このインスタンスの値を暗号化または復号化するときにエラーが発生しました。</exception>
      <exception cref="T:System.NotSupportedException">この操作は、このプラットフォームではサポートされていません。</exception>
    </member>
    <member name="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
      <summary>
        <see cref="T:System.Char" /> オブジェクトのサブ配列から <see cref="T:System.Security.SecureString" /> クラスの新しいインスタンスを初期化します。  
このコンストラクターは、CLS 準拠ではありません。 CLS 準拠の代わりとして <see cref="M:System.Security.SecureString.#ctor" /> を使用できます。</summary>
      <param name="value">
        <see cref="T:System.Char" /> オブジェクトの配列へのポインター。</param>
      <param name="length">新しいインスタンスに含める <paramref name="value" /> の要素の数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> が 0 未満か、65,536 を超えています。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">このセキュリティ文字列の値を暗号化または復号化するときにエラーが発生しました。</exception>
      <exception cref="T:System.NotSupportedException">この操作は、このプラットフォームではサポートされていません。</exception>
    </member>
    <member name="M:System.Security.SecureString.AppendChar(System.Char)">
      <summary>現在のセキュリティ文字列の末尾に、文字を 1 つ追加します。</summary>
      <param name="c">このセキュリティ文字列に追加される文字。</param>
      <exception cref="T:System.ObjectDisposedException">このセキュリティ文字列は既に破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException">このセキュリティ文字列は読み取り専用です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">この操作を実行すると、このセキュリティ文字列の長さが 65,536 文字を超えます。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">このセキュリティ文字列の値を暗号化または復号化するときにエラーが発生しました。</exception>
    </member>
    <member name="M:System.Security.SecureString.Clear">
      <summary>現在のセキュリティ文字列の値を削除します。</summary>
      <exception cref="T:System.ObjectDisposedException">このセキュリティ文字列は既に破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException">このセキュリティ文字列は読み取り専用です。</exception>
    </member>
    <member name="M:System.Security.SecureString.Copy">
      <summary>現在のセキュリティ文字列のコピーを作成します。</summary>
      <returns>このセキュリティ文字列の複製。</returns>
      <exception cref="T:System.ObjectDisposedException">このセキュリティ文字列は既に破棄されています。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">このセキュリティ文字列の値を暗号化または復号化するときにエラーが発生しました。</exception>
    </member>
    <member name="M:System.Security.SecureString.Dispose">
      <summary>現在の <see cref="T:System.Security.SecureString" /> オブジェクトによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
      <summary>このセキュリティ文字列の指定したインデックス位置に文字を挿入します。</summary>
      <param name="index">パラメーター <paramref name="c" /> が挿入されるインデックス位置。</param>
      <param name="c">挿入する文字。</param>
      <exception cref="T:System.ObjectDisposedException">このセキュリティ文字列は既に破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException">このセキュリティ文字列は読み取り専用です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、0 未満か、このセキュリティ文字列の長さを超えています。  
または 
この操作を実行すると、このセキュリティ文字列の長さが 65,536 文字を超えます。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">このセキュリティ文字列の値を暗号化または復号化するときにエラーが発生しました。</exception>
    </member>
    <member name="M:System.Security.SecureString.IsReadOnly">
      <summary>このセキュリティ文字列が読み取り専用としてマークされているかどうかを示します。</summary>
      <returns>このセキュリティ文字列が読み取り専用にマークされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">このセキュリティ文字列は既に破棄されています。</exception>
    </member>
    <member name="P:System.Security.SecureString.Length">
      <summary>現在のセキュリティ文字列内の文字数を取得します。</summary>
      <returns>このセキュリティ文字列に含まれる <see cref="T:System.Char" /> オブジェクトの数。</returns>
      <exception cref="T:System.ObjectDisposedException">このセキュリティ文字列は既に破棄されています。</exception>
    </member>
    <member name="M:System.Security.SecureString.MakeReadOnly">
      <summary>このセキュリティ文字列のテキスト値を読み取り専用にします。</summary>
      <exception cref="T:System.ObjectDisposedException">このセキュリティ文字列は既に破棄されています。</exception>
    </member>
    <member name="M:System.Security.SecureString.RemoveAt(System.Int32)">
      <summary>このセキュリティ文字列の指定されたインデックス位置にある文字を削除します。</summary>
      <param name="index">このセキュリティ文字列に含まれる文字のインデックス位置。</param>
      <exception cref="T:System.ObjectDisposedException">このセキュリティ文字列は既に破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException">このセキュリティ文字列は読み取り専用です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、0 未満か、このセキュリティ文字列の長さ以上です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">このセキュリティ文字列の値を暗号化または復号化するときにエラーが発生しました。</exception>
    </member>
    <member name="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
      <summary>指定されたインデックス位置にある既存の文字を別の文字に置き換えます。</summary>
      <param name="index">このセキュリティ文字列に含まれる既存の文字のインデックス位置。</param>
      <param name="c">既存の文字を置換する文字。</param>
      <exception cref="T:System.ObjectDisposedException">このセキュリティ文字列は既に破棄されています。</exception>
      <exception cref="T:System.InvalidOperationException">このセキュリティ文字列は読み取り専用です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が、0 未満か、このセキュリティ文字列の長さ以上です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">このセキュリティ文字列の値を暗号化または復号化するときにエラーが発生しました。</exception>
    </member>
    <member name="T:System.Security.SecureStringMarshal">
      <summary>アンマネージ メモリを割り当て、アンマネージ メモリ ブロックをコピーするメソッドのコレクションを提供します。</summary>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary>アンマネージド COM タスク アロケーターから割り当てられたメモリ ブロックに、マネージド <see cref="T:System.Security.SecureString" /> オブジェクトの内容をコピーします。</summary>
      <param name="s">コピーするマネージド オブジェクト。</param>
      <returns>
        <paramref name="s" /> パラメーターのコピー先となったアンマネージ メモリ内のアドレス。null オブジェクトが指定された場合は 0。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">現在のコンピューターは、Microsoft Windows 2000 Service Pack 3 以降を実行していません。</exception>
      <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary>アンマネージド COM タスク アロケーターから割り当てられたメモリ ブロックに、マネージド <see cref="T:System.Security.SecureString" /> オブジェクトの内容をコピーします。</summary>
      <param name="s">コピーするマネージド オブジェクト。</param>
      <returns>
        <paramref name="s" /> パラメーターのコピー先となったアンマネージ メモリ内のアドレス。null オブジェクトが指定された場合は 0。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">現在のコンピューターは、Microsoft Windows 2000 Service Pack 3 以降を実行していません。</exception>
      <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary>マネージド <see cref="T:System.Security.SecureString" /> の内容をアンマネージド メモリにコピーし、コピー時に ANSI 形式に変換します。</summary>
      <param name="s">コピーするマネージド オブジェクト。</param>
      <returns>
        <paramref name="s" /> パラメーターのコピー先となったアンマネージ メモリ内のアドレス。null オブジェクトが指定された場合は 0。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">現在のコンピューターは、Microsoft Windows 2000 Service Pack 3 以降を実行していません。</exception>
      <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary>マネージド <see cref="T:System.Security.SecureString" /> オブジェクトの内容をアンマネージド メモリにコピーします。</summary>
      <param name="s">コピーするマネージド オブジェクト。</param>
      <returns>
        <paramref name="s" /> のコピー先となった (アンマネージ メモリ内の) アドレス。<paramref name="s" /> が長さ 0 の <see cref="T:System.Security.SecureString" /> オブジェクトである場合は 0。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">現在のコンピューターは、Microsoft Windows 2000 Service Pack 3 以降を実行していません。</exception>
      <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Numerics.Vectors</name>
  </assembly>
  <members>
    <member name="T:System.Numerics.Matrix3x2">
      <summary>3 × 2 行列を表します。</summary>
    </member>
    <member name="M:System.Numerics.Matrix3x2.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>指定した成分の 3 × 2 行列を作成します。</summary>
      <param name="m11">最初の行の最初の要素に代入する値。</param>
      <param name="m12">最初の行の 2 番目の要素に代入する値。</param>
      <param name="m21">2 番目の行の最初の要素に代入する値。</param>
      <param name="m22">2 番目の行の 2 番目の要素に代入する値。</param>
      <param name="m31">3 番目の行の最初の要素に代入する値。</param>
      <param name="m32">3 番目の行の 2 番目の要素に代入する値。</param>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Add(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>1 つの行列の各要素に、2 番目の行列の対応する要素を加算します。</summary>
      <param name="value1">最初の行列。</param>
      <param name="value2">2 番目の行列。</param>
      <returns>
        <paramref name="value1" /> と <paramref name="value2" /> の加算結果の値を内容とする行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateRotation(System.Single)">
      <summary>ラジアンで指定した回転を使用して回転行列を作成します。</summary>
      <param name="radians">回転の量 (ラジアン)。</param>
      <returns>回転行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateRotation(System.Single,System.Numerics.Vector2)">
      <summary>ラジアンで指定した回転量、および中心点を使用して、回転行列を作成します。</summary>
      <param name="radians">回転の量 (ラジアン)。</param>
      <param name="centerPoint">中心点。</param>
      <returns>回転行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2)">
      <summary>指定したベクトル拡大率から、拡大縮小行列を作成します。</summary>
      <param name="scales">使用する拡大率。</param>
      <returns>拡大縮小行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>指定された中心点からのオフセットで、指定されたベクトル拡大率に基づいて、拡大縮小行列を作成します。</summary>
      <param name="scales">使用する拡大率。</param>
      <param name="centerPoint">中心オフセット。</param>
      <returns>拡大縮小行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single)">
      <summary>指定された拡大率による一様拡大縮小を表す拡大縮小行列を作成します。</summary>
      <param name="scale">使用する一様拡大率。</param>
      <returns>拡大縮小行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Numerics.Vector2)">
      <summary>指定された中心からのオフセットで、指定された拡大率の一様拡大縮小を表す拡大縮小行列を作成します。</summary>
      <param name="scale">使用する一様拡大率。</param>
      <param name="centerPoint">中心オフセット。</param>
      <returns>拡大縮小行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Single)">
      <summary>指定した X および Y 成分による拡大縮小行列を作成します。</summary>
      <param name="xScale">X 軸方向の拡大縮小値。</param>
      <param name="yScale">Y 軸方向の拡大縮小値。</param>
      <returns>拡大縮小行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Single,System.Numerics.Vector2)">
      <summary>特定の中心点をオフセットとする拡大縮小行列を作成します。</summary>
      <param name="xScale">X 軸方向の拡大縮小値。</param>
      <param name="yScale">Y 軸方向の拡大縮小値。</param>
      <param name="centerPoint">中心点。</param>
      <returns>拡大縮小行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateSkew(System.Single,System.Single)">
      <summary>ラジアンで指定した角度から、傾斜行列を作成します。</summary>
      <param name="radiansX">X 角度 (ラジアン)。</param>
      <param name="radiansY">Y 角度 (ラジアン)。</param>
      <returns>傾斜行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateSkew(System.Single,System.Single,System.Numerics.Vector2)">
      <summary>ラジアンで指定した角度、および中心点から、傾斜行列を作成します。</summary>
      <param name="radiansX">X 角度 (ラジアン)。</param>
      <param name="radiansY">Y 角度 (ラジアン)。</param>
      <param name="centerPoint">中心点。</param>
      <returns>傾斜行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateTranslation(System.Numerics.Vector2)">
      <summary>指定した 2 次元ベクトルから平行移動行列を作成します。</summary>
      <param name="position">平行移動位置。</param>
      <returns>平行移動行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateTranslation(System.Single,System.Single)">
      <summary>指定した X および Y 成分から平行移動行列を作成します。</summary>
      <param name="xPosition">X 位置。</param>
      <param name="yPosition">Y 位置。</param>
      <returns>平行移動行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Equals(System.Numerics.Matrix3x2)">
      <summary>このインスタンスと、別の 3 × 2 行列が等しいかどうかを示す値を返します。</summary>
      <param name="other">もう 1 つの行列。</param>
      <returns>2 つの行列が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Equals(System.Object)">
      <summary>このインスタンスと、指定したオブジェクトが等しいかどうかを示す値を返します。</summary>
      <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
      <returns>現在のインスタンスと <paramref name="obj" /> が等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 <paramref name="obj" /> が <see langword="null" /> の場合、メソッドは <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.GetDeterminant">
      <summary>この行列の行列式を計算します。</summary>
      <returns>行列式。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>ハッシュ コード。</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.Identity">
      <summary>積単位行列を取得します。</summary>
      <returns>積単位行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Invert(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2@)">
      <summary>指定した行列の逆行列を計算します。 戻り値は、演算が成功したかどうかを示します。</summary>
      <param name="matrix">逆行列を計算する行列。</param>
      <param name="result">操作が成功した場合、このメソッドから戻る際に、逆行列が入れられます。</param>
      <returns>
        <paramref name="matrix" /> が正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.IsIdentity">
      <summary>現在の行列が単位行列かどうかを示します。</summary>
      <returns>現在の行列が単位行列である場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Lerp(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2,System.Single)">
      <summary>1 つの行列から 2 番目の行列までの線形補間を、2 番目の行列の重み付けを指定する値に基づいて実行します。</summary>
      <param name="matrix1">最初の行列。</param>
      <param name="matrix2">2 番目の行列。</param>
      <param name="amount">
        <paramref name="matrix2" /> の相対的な重み付け。</param>
      <returns>補間結果の行列。</returns>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M11">
      <summary>最初の行の最初の要素。</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M12">
      <summary>最初の行の 2 番目の要素。</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M21">
      <summary>2 番目の行の最初の要素。</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M22">
      <summary>2 番目の行の 2 番目の要素。</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M31">
      <summary>3 番目の行の最初の要素。</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M32">
      <summary>3 番目の行の 2 番目の要素。</summary>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>2 つの行列の乗算結果となる積行列を返します。</summary>
      <param name="value1">最初の行列。</param>
      <param name="value2">2 番目の行列。</param>
      <returns>積行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Single)">
      <summary>指定した行列のすべての要素をスカラー因子倍した行列を返します。</summary>
      <param name="value1">スカラー倍演算の対象となる行列。</param>
      <param name="value2">使用する倍率値。</param>
      <returns>スケール調節された行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Negate(System.Numerics.Matrix3x2)">
      <summary>指定した行列のすべての成分値に -1 を乗算することにより、その符号を反転します。</summary>
      <param name="value">符号反転の対象となる行列。</param>
      <returns>符号反転された行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Addition(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>1 つの行列の各要素に、2 番目の行列の対応する要素を加算します。</summary>
      <param name="value1">最初の行列。</param>
      <param name="value2">2 番目の行列。</param>
      <returns>加算結果の値を内容とする行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Equality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>指定された行列が等しいかどうかを示す値を返します。</summary>
      <param name="value1">比較対象の 1 番目の行列。</param>
      <param name="value2">比較対象の 2 番目の行列。</param>
      <returns>
        <see langword="true" /> と <paramref name="value1" /> が等しい場合は <paramref name="value2" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Inequality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>指定された行列が等しくないかどうかを示す値を返します。</summary>
      <param name="value1">比較対象の 1 番目の行列。</param>
      <param name="value2">比較対象の 2 番目の行列。</param>
      <returns>
        <paramref name="value1" /> と <paramref name="value2" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>2 つの行列の乗算結果となる積行列を返します。</summary>
      <param name="value1">最初の行列。</param>
      <param name="value2">2 番目の行列。</param>
      <returns>積行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Single)">
      <summary>指定した行列のすべての要素をスカラー因子倍した行列を返します。</summary>
      <param name="value1">スカラー倍演算の対象となる行列。</param>
      <param name="value2">使用する倍率値。</param>
      <returns>スケール調節された行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Subtraction(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>2 番目の行列の各要素を、最初の行列の対応する要素からそれぞれ減算します。</summary>
      <param name="value1">最初の行列。</param>
      <param name="value2">2 番目の行列。</param>
      <returns>
        <paramref name="value2" /> の各要素を、<paramref name="value1" /> の中の対応する要素から減算した結果の値を内容とする行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_UnaryNegation(System.Numerics.Matrix3x2)">
      <summary>指定した行列のすべての成分値に -1 を乗算することにより、その符号を反転します。</summary>
      <param name="value">符号反転の対象となる行列。</param>
      <returns>符号反転された行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Subtract(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>2 番目の行列の各要素を、最初の行列の対応する要素からそれぞれ減算します。</summary>
      <param name="value1">最初の行列。</param>
      <param name="value2">2 番目の行列。</param>
      <returns>
        <paramref name="value2" /> の各要素を、<paramref name="value1" /> の中の対応する要素から減算した結果の値を内容とする行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.ToString">
      <summary>この行列を表す文字列を返します。</summary>
      <returns>この行列の文字列表現。</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.Translation">
      <summary>この行列の平行移動成分を取得または設定します。</summary>
      <returns>現在のインスタンスの平行移動成分。</returns>
    </member>
    <member name="T:System.Numerics.Matrix4x4">
      <summary>4 × 4 行列を表します。</summary>
    </member>
    <member name="M:System.Numerics.Matrix4x4.#ctor(System.Numerics.Matrix3x2)">
      <summary>指定した <see cref="T:System.Numerics.Matrix3x2" /> オブジェクトに基づいて <see cref="T:System.Numerics.Matrix4x4" /> オブジェクトを作成します。</summary>
      <param name="value">3 × 2 行列。</param>
    </member>
    <member name="M:System.Numerics.Matrix4x4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>指定した成分から 4 × 4 行列を作成します。</summary>
      <param name="m11">最初の行の最初の要素に代入する値。</param>
      <param name="m12">最初の行の 2 番目の要素に代入する値。</param>
      <param name="m33">3 番目の行の 3 番目の要素に代入する値。</param>
      <param name="m34">3 番目の行の 4 番目の要素に代入する値。</param>
      <param name="m41">4 番目の行の最初の要素に代入する値。</param>
      <param name="m42">4 番目の行の 2 番目の要素に代入する値。</param>
      <param name="m43">4 番目の行の 3 番目の要素に代入する値。</param>
      <param name="m44">4 番目の行の 4 番目の要素に代入する値。</param>
      <param name="m13">最初の行の 3 番目の要素に代入する値。</param>
      <param name="m14">最初の行の 4 番目の要素に代入する値。</param>
      <param name="m21">2 番目の行の最初の要素に代入する値。</param>
      <param name="m22">2 番目の行の 2 番目の要素に代入する値。</param>
      <param name="m23">2 番目の行の 3 番目の要素に代入する値。</param>
      <param name="m24">2 番目の行の 3 番目の要素に代入する値。</param>
      <param name="m31">3 番目の行の最初の要素に代入する値。</param>
      <param name="m32">3 番目の行の 2 番目の要素に代入する値。</param>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Add(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>1 つの行列の各要素に、2 番目の行列の対応する要素を加算します。</summary>
      <param name="value1">最初の行列。</param>
      <param name="value2">2 番目の行列。</param>
      <returns>
        <paramref name="value1" /> と <paramref name="value2" /> の加算結果の値を内容とする行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateBillboard(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>オブジェクトの指定位置を中心に回転する球ビルボードを作成します。</summary>
      <param name="objectPosition">オブジェクトのうち、ビルボードの回転の中心となる位置。</param>
      <param name="cameraPosition">カメラの位置。</param>
      <param name="cameraUpVector">カメラの上方向ベクトル。</param>
      <param name="cameraForwardVector">カメラの前方向ベクトル。</param>
      <returns>作成されたビルボード。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateConstrainedBillboard(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>指定した軸を中心に回転する円筒ビルボードを作成します。</summary>
      <param name="objectPosition">オブジェクトのうち、ビルボードの回転の中心となる位置。</param>
      <param name="cameraPosition">カメラの位置。</param>
      <param name="rotateAxis">ビルボードの回転軸。</param>
      <param name="cameraForwardVector">カメラの前方向ベクトル。</param>
      <param name="objectForwardVector">オブジェクトの前方向ベクトル。</param>
      <returns>ビルボード行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)">
      <summary>任意のベクトルを中心とした回転を表す行列を作成します。</summary>
      <param name="axis">回転の中心軸。</param>
      <param name="angle">
        <paramref name="axis" /> を中心とする回転角度 (ラジアン)。</param>
      <returns>回転行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromQuaternion(System.Numerics.Quaternion)">
      <summary>指定された四元数回転値から、回転の行列を作成します。</summary>
      <param name="quaternion">元の四元数。</param>
      <returns>回転行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>指定したヨー、ピッチ、およびロールから回転行列を作成します。</summary>
      <param name="yaw">Y 軸を中心とする回転の角度 (ラジアン)。</param>
      <param name="pitch">X 軸を中心とする回転の角度 (ラジアン)。</param>
      <param name="roll">Z 軸を中心とする回転の角度 (ラジアン)。</param>
      <returns>回転行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateLookAt(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>ビュー行列を作成します。</summary>
      <param name="cameraPosition">カメラの位置。</param>
      <param name="cameraTarget">カメラが指す対象となるターゲット。</param>
      <param name="cameraUpVector">カメラの観点で上になる方向。</param>
      <returns>ビュー行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
      <summary>指定されたビュー ボリューム次元から、平行透視行列を作成します。</summary>
      <param name="width">ビュー ボリュームの幅。</param>
      <param name="height">ビュー ボリュームの高さ。</param>
      <param name="zNearPlane">ビュー ボリュームの最小 Z 値。</param>
      <param name="zFarPlane">ビュー ボリュームの最大 Z 値。</param>
      <returns>平行投影行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>カスタマイズされた平行投影行列を作成します。</summary>
      <param name="left">ビュー ボリュームの最小 X 値。</param>
      <param name="right">ビュー ボリュームの最大 X 値。</param>
      <param name="bottom">ビュー ボリュームの最小 Y 値。</param>
      <param name="top">ビュー ボリュームの最大 Y 値。</param>
      <param name="zNearPlane">ビュー ボリュームの最小 Z 値。</param>
      <param name="zFarPlane">ビュー ボリュームの最大 Z 値。</param>
      <returns>平行投影行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
      <summary>指定されたビュー ボリューム次元から、透視投影行列を作成します。</summary>
      <param name="width">ニア ビュー平面でのビュー ボリュームの幅。</param>
      <param name="height">ニア ビュー平面でのビュー ボリュームの高さ。</param>
      <param name="nearPlaneDistance">ニア ビュー平面までの距離。</param>
      <param name="farPlaneDistance">ファー ビュー平面までの距離。</param>
      <returns>透視投影行列。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nearPlaneDistance" /> が 0 以下です。  

または - 
<paramref name="farPlaneDistance" /> が 0 以下です。  

または - 
<paramref name="nearPlaneDistance" /> が <paramref name="farPlaneDistance" /> 以上です。</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
      <summary>視野、縦横比、そしてニアおよびファー ビュー平面距離に基づいて、透視投影行列作成します。</summary>
      <param name="fieldOfView">y 方向の視野 (ラジアン)。</param>
      <param name="aspectRatio">ビュー領域の幅を高さで割った値として定義される縦横比。</param>
      <param name="nearPlaneDistance">ニア ビュー平面までの距離。</param>
      <param name="farPlaneDistance">ファー ビュー平面までの距離。</param>
      <returns>透視投影行列。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldOfView" /> が 0 以下です。  

または - 
<paramref name="fieldOfView" /> が <see cref="F:System.Math.PI" /> 以上です。  

 <paramref name="nearPlaneDistance" /> が 0 以下です。  
または 
 <paramref name="farPlaneDistance" /> が 0 以下です。  

または - 
<paramref name="nearPlaneDistance" /> が <paramref name="farPlaneDistance" /> 以上です。</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>カスタマイズされた透視投影行列を作成します。</summary>
      <param name="left">ニア ビュー平面でのビュー ボリュームの最小 x 値。</param>
      <param name="right">ニア ビュー平面でのビュー ボリュームの最大 x 値。</param>
      <param name="bottom">ニア ビュー平面でのビュー ボリュームの最小 y 値。</param>
      <param name="top">ニア ビュー平面でのビュー ボリュームの最大 y 値。</param>
      <param name="nearPlaneDistance">ニア ビュー平面までの距離。</param>
      <param name="farPlaneDistance">ファー ビュー平面までの距離。</param>
      <returns>透視投影行列。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nearPlaneDistance" /> が 0 以下です。  

または - 
<paramref name="farPlaneDistance" /> が 0 以下です。  

または - 
<paramref name="nearPlaneDistance" /> が <paramref name="farPlaneDistance" /> 以上です。</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateReflection(System.Numerics.Plane)">
      <summary>指定した平面についての座標系反射を表す行列を作成します。</summary>
      <param name="value">反射面。</param>
      <returns>反射を表す新しい行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationX(System.Single)">
      <summary>X 軸を中心とした点の回転を表す行列を作成します。</summary>
      <param name="radians">X 軸の周りの回転量 (ラジアン)。</param>
      <returns>回転行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationX(System.Single,System.Numerics.Vector3)">
      <summary>中心点からの X 軸を中心とした点の回転を表す行列を作成します。</summary>
      <param name="radians">X 軸の周りの回転量 (ラジアン)。</param>
      <param name="centerPoint">中心点。</param>
      <returns>回転行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationY(System.Single)">
      <summary>Y 軸を中心とした点の回転を表す行列を作成します。</summary>
      <param name="radians">Y 軸の周りの回転量 (ラジアン)。</param>
      <returns>回転行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationY(System.Single,System.Numerics.Vector3)">
      <summary>中心点からの Y 軸回転量 (ラジアン)。</summary>
      <param name="radians">Y 軸の周りの回転量 (ラジアン)。</param>
      <param name="centerPoint">中心点。</param>
      <returns>回転行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationZ(System.Single)">
      <summary>Z 軸を中心とした点の回転を表す行列を作成します。</summary>
      <param name="radians">Z 軸の周りの回転量 (ラジアン)。</param>
      <returns>回転行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationZ(System.Single,System.Numerics.Vector3)">
      <summary>中心点からの Z 軸を中心とした点の回転を表す行列を作成します。</summary>
      <param name="radians">Z 軸の周りの回転量 (ラジアン)。</param>
      <param name="centerPoint">中心点。</param>
      <returns>回転行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Numerics.Vector3)">
      <summary>指定したベクトル拡大率から、拡大縮小行列を作成します。</summary>
      <param name="scales">使用する拡大率。</param>
      <returns>拡大縮小行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>特定の点を中心とした拡大縮小行列を作成します。</summary>
      <param name="scales">各軸上の拡大率を内容とするベクトル。</param>
      <param name="centerPoint">中心点。</param>
      <returns>拡大縮小行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single)">
      <summary>各軸上に一様に拡大縮小する一様拡大縮小行列を作成します。</summary>
      <param name="scale">一様拡大率。</param>
      <returns>拡大縮小行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Numerics.Vector3)">
      <summary>特定の点を中心に各軸上に一様に拡大縮小する一様拡大縮小行列を作成します。</summary>
      <param name="scale">一様拡大率。</param>
      <param name="centerPoint">中心点。</param>
      <returns>拡大縮小行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single)">
      <summary>指定した X、Y、Z 成分による拡大縮小行列を作成します。</summary>
      <param name="xScale">X 軸方向の拡大縮小値。</param>
      <param name="yScale">Y 軸方向の拡大縮小値。</param>
      <param name="zScale">Z 軸方向の拡大縮小値。</param>
      <returns>拡大縮小行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single,System.Numerics.Vector3)">
      <summary>特定の中心点をオフセットとする拡大縮小行列を作成します。</summary>
      <param name="xScale">X 軸方向の拡大縮小値。</param>
      <param name="yScale">Y 軸方向の拡大縮小値。</param>
      <param name="zScale">Z 軸方向の拡大縮小値。</param>
      <param name="centerPoint">中心点。</param>
      <returns>拡大縮小行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateShadow(System.Numerics.Vector3,System.Numerics.Plane)">
      <summary>指定された光源から影を落とす方法による、指定した平面への幾何射影の行列を作成します。</summary>
      <param name="lightDirection">影を作る光の入射方向。</param>
      <param name="plane">新しい行列の幾何射影により影を落とす先の平面。</param>
      <returns>指定方向から指定平面上への幾何射影をするために使用する新しい行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateTranslation(System.Numerics.Vector3)">
      <summary>指定した 3 次元ベクトルから平行移動行列を作成します。</summary>
      <param name="position">各軸の平行移動量。</param>
      <returns>平行移動行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateTranslation(System.Single,System.Single,System.Single)">
      <summary>指定した X、Y、Z 成分から平行移動行列を作成します。</summary>
      <param name="xPosition">X 軸方向の平行移動量。</param>
      <param name="yPosition">Y 軸方向の平行移動量。</param>
      <param name="zPosition">Z 軸方向の平行移動量。</param>
      <returns>平行移動行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateWorld(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>指定したパラメーターによるワールド行列を作成します。</summary>
      <param name="position">オブジェクトの位置。</param>
      <param name="forward">オブジェクトの前方向。</param>
      <param name="up">オブジェクトの上方向。 通常、その値は <c>[0, 1, 0]</c> です。</param>
      <returns>ワールド行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Decompose(System.Numerics.Matrix4x4,System.Numerics.Vector3@,System.Numerics.Quaternion@,System.Numerics.Vector3@)">
      <summary>指定された拡大縮小、回転、または平行移動行列から、拡大縮小、平行移動、および回転の成分の抽出を試みます。 戻り値は、演算が成功したかどうかを示します。</summary>
      <param name="matrix">元となる行列。</param>
      <param name="scale">操作が成功した場合、このメソッドから戻る際に、変換行列の拡大縮小成分が入れられます。</param>
      <param name="rotation">操作が成功した場合、このメソッドから戻る際に、変換行列の回転成分が入れられます。</param>
      <param name="translation">操作が成功した場合、このメソッドから戻る際に、変換行列の平行移動成分が入れられます。</param>
      <returns>
        <paramref name="matrix" /> が正常に成分分解された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Equals(System.Numerics.Matrix4x4)">
      <summary>このインスタンスと、別の 4 × 4 行列が等しいかどうかを示す値を返します。</summary>
      <param name="other">もう 1 つの行列。</param>
      <returns>2 つの行列が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Equals(System.Object)">
      <summary>このインスタンスと、指定したオブジェクトが等しいかどうかを示す値を返します。</summary>
      <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
      <returns>現在のインスタンスと <paramref name="obj" /> が等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 <paramref name="obj" /> が <see langword="null" /> の場合、メソッドは <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.GetDeterminant">
      <summary>現在の 4 x 4 行列の行列式を計算します。</summary>
      <returns>行列式。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>ハッシュ コード。</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.Identity">
      <summary>積単位行列を取得します。</summary>
      <returns>積単位行列を取得します。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Invert(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4@)">
      <summary>指定した行列の逆行列を計算します。 戻り値は、演算が成功したかどうかを示します。</summary>
      <param name="matrix">逆行列を計算する行列。</param>
      <param name="result">操作が成功した場合、このメソッドから戻る際に、逆行列が入れられます。</param>
      <returns>
        <paramref name="matrix" /> が正常に変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.IsIdentity">
      <summary>現在の行列が単位行列かどうかを示します。</summary>
      <returns>現在の行列が単位行列である場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Lerp(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,System.Single)">
      <summary>1 つの行列から 2 番目の行列までの線形補間を、2 番目の行列の重み付けを指定する値に基づいて実行します。</summary>
      <param name="matrix1">最初の行列。</param>
      <param name="matrix2">2 番目の行列。</param>
      <param name="amount">
        <paramref name="matrix2" /> の相対的な重み付け。</param>
      <returns>補間結果の行列。</returns>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M11">
      <summary>最初の行の最初の要素。</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M12">
      <summary>最初の行の 2 番目の要素。</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M13">
      <summary>最初の行の 3 番目の要素。</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M14">
      <summary>最初の行の 4 番目の要素。</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M21">
      <summary>2 番目の行の最初の要素。</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M22">
      <summary>2 番目の行の 2 番目の要素。</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M23">
      <summary>2 番目の行の 3 番目の要素。</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M24">
      <summary>2 番目の行の 4 番目の要素。</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M31">
      <summary>3 番目の行の最初の要素。</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M32">
      <summary>3 番目の行の 2 番目の要素。</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M33">
      <summary>3 番目の行の 3 番目の要素。</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M34">
      <summary>3 番目の行の 4 番目の要素。</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M41">
      <summary>4 番目の行の最初の要素。</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M42">
      <summary>4 番目の行の 2 番目の要素。</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M43">
      <summary>4 番目の行の 3 番目の要素。</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M44">
      <summary>4 番目の行の 4 番目の要素。</summary>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Multiply(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>2 つの行列の乗算結果となる積行列を返します。</summary>
      <param name="value1">最初の行列。</param>
      <param name="value2">2 番目の行列。</param>
      <returns>積行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Multiply(System.Numerics.Matrix4x4,System.Single)">
      <summary>指定した行列のすべての要素をスカラー因子倍した行列を返します。</summary>
      <param name="value1">スカラー倍演算の対象となる行列。</param>
      <param name="value2">使用する倍率値。</param>
      <returns>スケール調節された行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Negate(System.Numerics.Matrix4x4)">
      <summary>指定した行列のすべての成分値に -1 を乗算することにより、その符号を反転します。</summary>
      <param name="value">符号反転の対象となる行列。</param>
      <returns>符号反転された行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Addition(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>1 つの行列の各要素に、2 番目の行列の対応する要素を加算します。</summary>
      <param name="value1">最初の行列。</param>
      <param name="value2">2 番目の行列。</param>
      <returns>加算結果の値を内容とする行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Equality(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>指定された行列が等しいかどうかを示す値を返します。</summary>
      <param name="value1">比較対象の 1 番目の行列。</param>
      <param name="value2">比較対象の 2 番目の行列。</param>
      <returns>
        <see langword="true" /> と <paramref name="value1" /> が等しい場合は <paramref name="value2" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Inequality(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>指定された行列が等しくないかどうかを示す値を返します。</summary>
      <param name="value1">比較対象の 1 番目の行列。</param>
      <param name="value2">比較対象の 2 番目の行列。</param>
      <returns>
        <paramref name="value1" /> と <paramref name="value2" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Multiply(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>2 つの行列の乗算結果となる積行列を返します。</summary>
      <param name="value1">最初の行列。</param>
      <param name="value2">2 番目の行列。</param>
      <returns>積行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Multiply(System.Numerics.Matrix4x4,System.Single)">
      <summary>指定した行列のすべての要素をスカラー因子倍した行列を返します。</summary>
      <param name="value1">スカラー倍演算の対象となる行列。</param>
      <param name="value2">使用する倍率値。</param>
      <returns>スケール調節された行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Subtraction(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>2 番目の行列の各要素を、最初の行列の対応する要素からそれぞれ減算します。</summary>
      <param name="value1">最初の行列。</param>
      <param name="value2">2 番目の行列。</param>
      <returns>
        <paramref name="value2" /> の各要素を、<paramref name="value1" /> の中の対応する要素から減算した結果の値を内容とする行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_UnaryNegation(System.Numerics.Matrix4x4)">
      <summary>指定した行列のすべての成分値に -1 を乗算することにより、その符号を反転します。</summary>
      <param name="value">符号反転の対象となる行列。</param>
      <returns>符号反転された行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Subtract(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>2 番目の行列の各要素を、最初の行列の対応する要素からそれぞれ減算します。</summary>
      <param name="value1">最初の行列。</param>
      <param name="value2">2 番目の行列。</param>
      <returns>
        <paramref name="value2" /> の各要素を、<paramref name="value1" /> の中の対応する要素から減算した結果の値を内容とする行列。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.ToString">
      <summary>この行列を表す文字列を返します。</summary>
      <returns>この行列の文字列表現。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Transform(System.Numerics.Matrix4x4,System.Numerics.Quaternion)">
      <summary>指定した四元数回転を適用することにより、指定したマトリックスを変換します。</summary>
      <param name="value">変換対象の行列。</param>
      <param name="rotation">適用する回転。</param>
      <returns>変換結果の行列。</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.Translation">
      <summary>この行列の平行移動成分を取得または設定します。</summary>
      <returns>現在のインスタンスの平行移動成分。</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Transpose(System.Numerics.Matrix4x4)">
      <summary>行列の行と列を入れ替えます。</summary>
      <param name="matrix">転置演算の対象となる行列。</param>
      <returns>転置結果の行列。</returns>
    </member>
    <member name="T:System.Numerics.Plane">
      <summary>3 次元空間の平面を表します。</summary>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>法線と、原点からの法線に沿った距離を指定して、<see cref="T:System.Numerics.Plane" /> オブジェクトを作成します。</summary>
      <param name="normal">平面の法線ベクトル。</param>
      <param name="d">原点から平面への法線ベクトルに沿った距離。</param>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Numerics.Vector4)">
      <summary>4 次元ベクトルを指定して <see cref="T:System.Numerics.Plane" /> オブジェクトを作成します。</summary>
      <param name="value">最初の 3 つの要素で法線ベクトルを記述し、その法線に沿った原点からの距離を <see cref="F:System.Numerics.Vector4.W" /> で定義するベクトル。</param>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>法線の X 成分、Y 成分、および Z 成分と、原点からの法線に沿った距離を指定して、<see cref="T:System.Numerics.Plane" /> オブジェクトを作成します。</summary>
      <param name="x">法線の X 成分。</param>
      <param name="y">法線の Y 成分。</param>
      <param name="z">法線の Z 成分。</param>
      <param name="d">原点から平面への法線に沿った距離。</param>
    </member>
    <member name="M:System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>3 つの指定したポイントを含む <see cref="T:System.Numerics.Plane" /> オブジェクトを作成します。</summary>
      <param name="point1">平面を定義する最初のポイント。</param>
      <param name="point2">平面を定義する 2 番目のポイント。</param>
      <param name="point3">平面を定義する 3 番目のポイント。</param>
      <returns>3 つのポイントを含む平面。</returns>
    </member>
    <member name="F:System.Numerics.Plane.D">
      <summary>原点から平面への法線に沿った距離。</summary>
    </member>
    <member name="M:System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)">
      <summary>平面と 4 次元ベクトルのドット積を計算します。</summary>
      <param name="plane">平面。</param>
      <param name="value">4 次元ベクトル。</param>
      <returns>ドット積。</returns>
    </member>
    <member name="M:System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)">
      <summary>指定した 3 次元ベクトルと、この平面の法線ベクトルと距離 (<see cref="F:System.Numerics.Plane.D" />) 値とのドット積を返します。</summary>
      <param name="plane">平面。</param>
      <param name="value">3 次元ベクトル。</param>
      <returns>ドット積。</returns>
    </member>
    <member name="M:System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)">
      <summary>指定した 3 次元ベクトルと、この平面の <see cref="F:System.Numerics.Plane.Normal" /> ベクトルとのドット積を返します。</summary>
      <param name="plane">平面。</param>
      <param name="value">3 次元ベクトル。</param>
      <returns>ドット積。</returns>
    </member>
    <member name="M:System.Numerics.Plane.Equals(System.Numerics.Plane)">
      <summary>このインスタンスと、別の平面オブジェクトが等しいかどうかを示す値を返します。</summary>
      <param name="other">他方の平面。</param>
      <returns>2 つの平面が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Plane.Equals(System.Object)">
      <summary>このインスタンスと、指定したオブジェクトが等しいかどうかを示す値を返します。</summary>
      <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
      <returns>現在のインスタンスと <paramref name="obj" /> が等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 <paramref name="obj" /> が <see langword="null" /> の場合、メソッドは <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Numerics.Plane.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>ハッシュ コード。</returns>
    </member>
    <member name="F:System.Numerics.Plane.Normal">
      <summary>平面の法線ベクトル。</summary>
    </member>
    <member name="M:System.Numerics.Plane.Normalize(System.Numerics.Plane)">
      <summary>ソース平面の正規化された法線ベクトルを法線ベクトルとする新しい <see cref="T:System.Numerics.Plane" /> オブジェクトを作成します。</summary>
      <param name="value">ソース平面。</param>
      <returns>正規化された平面。</returns>
    </member>
    <member name="M:System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)">
      <summary>2 つの平面が等しいかどうかを示す値を返します。</summary>
      <param name="value1">比較する最初の平面。</param>
      <param name="value2">比較する 2 番目の平面。</param>
      <returns>
        <see langword="true" /> と <paramref name="value1" /> が等しい場合は <paramref name="value2" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)">
      <summary>2 つの平面が等しくないかどうかを示す値を返します。</summary>
      <param name="value1">比較する最初の平面。</param>
      <param name="value2">比較する 2 番目の平面。</param>
      <returns>
        <paramref name="value1" /> と <paramref name="value2" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Plane.ToString">
      <summary>この平面オブジェクトの文字列表現を返します。</summary>
      <returns>この <see cref="T:System.Numerics.Plane" /> オブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)">
      <summary>正規化された平面を 4 × 4 行列によって変換します。</summary>
      <param name="plane">変換する対象の、正規化された平面。</param>
      <param name="matrix">
        <paramref name="plane" /> に適用する変換行列。</param>
      <returns>変換された平面。</returns>
    </member>
    <member name="M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)">
      <summary>正規化された平面を四元数ローテーションによって変換します。</summary>
      <param name="plane">変換する対象の、正規化された平面。</param>
      <param name="rotation">平面に適用する四元数ローテーション。</param>
      <returns>四元数ローテーション適用した結果の、新しい平面。</returns>
    </member>
    <member name="T:System.Numerics.Quaternion">
      <summary>3 次元物理回転をエンコードするために使用されるベクトルを表します。</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>指定したベクトルおよび回転部分から四元数を作成します。</summary>
      <param name="vectorPart">四元数のベクトル部分。</param>
      <param name="scalarPart">四元数の回転部分。</param>
    </member>
    <member name="M:System.Numerics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>指定した成分から四元数を構築します。</summary>
      <param name="x">四元数の X 成分に代入する値。</param>
      <param name="y">四元数の Y 成分に代入する値。</param>
      <param name="z">四元数の Z 成分に代入する値。</param>
      <param name="w">四元数の W 成分に代入する値。</param>
    </member>
    <member name="M:System.Numerics.Quaternion.Add(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>1 つの四元数の各要素に、2 番目の四元数の対応する要素を加算します。</summary>
      <param name="value1">最初の四元数。</param>
      <param name="value2">2 番目の四元数。</param>
      <returns>
        <paramref name="value1" /> と <paramref name="value2" /> の加算結果の値を内容とする四元数。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>2 つの四元数を連結します。</summary>
      <param name="value1">シリーズの最初の四元数回転。</param>
      <param name="value2">シリーズの 2 番目の四元数回転。</param>
      <returns>
        <paramref name="value1" /> の回転の後に <paramref name="value2" /> の回転をするという連結を表す新しい四元数。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Conjugate(System.Numerics.Quaternion)">
      <summary>指定した四元数の共役を返します。</summary>
      <param name="value">四元数。</param>
      <returns>
        <see langword="value" /> の共役である新しい四元数。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)">
      <summary>単位ベクトルとベクトルの周りの回転角度から四元数を作成します。</summary>
      <param name="axis">回転軸となる単位ベクトル。</param>
      <param name="angle">ベクトルの周りの回転角度 (ラジアン)。</param>
      <returns>新しく作成される四元数。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromRotationMatrix(System.Numerics.Matrix4x4)">
      <summary>指定した回転行列から四元数を作成します。</summary>
      <param name="matrix">回転行列。</param>
      <returns>新しく作成される四元数。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>特定のヨー、ピッチ、およびロールから新しい四元数を作成します。</summary>
      <param name="yaw">Y 軸の周りのヨー角度 (ラジアン)。</param>
      <param name="pitch">X 軸の周りのピッチ角度 (ラジアン)。</param>
      <param name="roll">Z 軸の周りのロール角度 (ラジアン)。</param>
      <returns>結果として得られる四元数。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>ある四元数を 2 番目の四元数で除算します。</summary>
      <param name="value1">被除数。</param>
      <param name="value2">除数。</param>
      <returns>
        <paramref name="value1" /> を <paramref name="value2" /> で除算した結果の四元数。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>2 つの四元数のドット積を計算します。</summary>
      <param name="quaternion1">最初の四元数。</param>
      <param name="quaternion2">2 番目の四元数。</param>
      <returns>ドット積。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Equals(System.Numerics.Quaternion)">
      <summary>このインスタンスと、別の四元数が等しいかどうかを示す値を返します。</summary>
      <param name="other">もう 1 つの四元数。</param>
      <returns>2 つの四元数が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Equals(System.Object)">
      <summary>このインスタンスと、指定したオブジェクトが等しいかどうかを示す値を返します。</summary>
      <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
      <returns>現在のインスタンスと <paramref name="obj" /> が等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 <paramref name="obj" /> が <see langword="null" /> の場合、メソッドは <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>ハッシュ コード。</returns>
    </member>
    <member name="P:System.Numerics.Quaternion.Identity">
      <summary>回転なしを表す四元数を取得します。</summary>
      <returns>値が<c>(0, 0, 0, 1)</c>である四元数。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)">
      <summary>四元数の逆数を返します。</summary>
      <param name="value">四元数。</param>
      <returns>逆四元数。</returns>
    </member>
    <member name="P:System.Numerics.Quaternion.IsIdentity">
      <summary>現在のインスタンスが単位四元数かどうかを示す値を取得します。</summary>
      <returns>現在のインスタンスが単位四元数である場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Length">
      <summary>四元数の長さを計算します。</summary>
      <returns>計算された四元数の長さ。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.LengthSquared">
      <summary>四元数の長さの 2 乗を計算します。</summary>
      <returns>2 乗された四元数の長さ。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
      <summary>2 つの四元数の間の線形補間を、2 番目の四元数の重み付けを指定する値に基づいて実行します。</summary>
      <param name="quaternion1">最初の四元数。</param>
      <param name="quaternion2">2 番目の四元数。</param>
      <param name="amount">補間での <paramref name="quaternion2" /> の相対的重み。</param>
      <returns>補間四元数。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>2 つの四元数を乗算することによって生成される四元数を返します。</summary>
      <param name="value1">最初の四元数。</param>
      <param name="value2">2 番目の四元数。</param>
      <returns>積四元数。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Single)">
      <summary>指定した四元数のすべての成分をスカラー因子倍した四元数を返します。</summary>
      <param name="value1">元の四元数。</param>
      <param name="value2">スカラー値。</param>
      <returns>スケール調節した結果の四元数。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Negate(System.Numerics.Quaternion)">
      <summary>四元数の各成分の符号を反転させます。</summary>
      <param name="value">符号反転する四元数。</param>
      <returns>符号反転した結果の四元数。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Normalize(System.Numerics.Quaternion)">
      <summary>指定した <see cref="T:System.Numerics.Quaternion" /> の各成分を、その長さで除算します。</summary>
      <param name="value">正規化する四元数。</param>
      <returns>正規化した結果の四元数。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>1 つの四元数の各要素に、2 番目の四元数の対応する要素を加算します。</summary>
      <param name="value1">最初の四元数。</param>
      <param name="value2">2 番目の四元数。</param>
      <returns>
        <paramref name="value1" /> と <paramref name="value2" /> の加算結果の値を内容とする四元数。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>ある四元数を 2 番目の四元数で除算します。</summary>
      <param name="value1">被除数。</param>
      <param name="value2">除数。</param>
      <returns>
        <paramref name="value1" /> を <paramref name="value2" /> で除算した結果の四元数。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>2 つの四元数が等しいかどうかを示す値を返します。</summary>
      <param name="value1">比較する最初の四元数。</param>
      <param name="value2">比較する 2 番目の四元数。</param>
      <returns>2 つの四元数が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>2 つの四元数が等しくないかどうかを示す値を返します。</summary>
      <param name="value1">比較する最初の四元数。</param>
      <param name="value2">比較する 2 番目の四元数。</param>
      <returns>
        <paramref name="value1" /> と <paramref name="value2" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>2 つの四元数を乗算することによって生成される四元数を返します。</summary>
      <param name="value1">最初の四元数。</param>
      <param name="value2">2 番目の四元数。</param>
      <returns>積四元数。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Single)">
      <summary>指定した四元数のすべての成分をスカラー因子倍した四元数を返します。</summary>
      <param name="value1">元の四元数。</param>
      <param name="value2">スカラー値。</param>
      <returns>スケール調節した結果の四元数。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>最初の四元数の各要素から、2 番目の四元数の対応する要素をそれぞれ減算します。</summary>
      <param name="value1">最初の四元数。</param>
      <param name="value2">2 番目の四元数。</param>
      <returns>
        <paramref name="value2" /> の各要素を、<paramref name="value1" /> の中の対応する要素から減算した結果の値を内容とする四元数。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_UnaryNegation(System.Numerics.Quaternion)">
      <summary>四元数の各成分の符号を反転させます。</summary>
      <param name="value">符号反転する四元数。</param>
      <returns>符号反転した結果の四元数。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
      <summary>球面線形補間を使用して 2 つの四元数の間を補間します。</summary>
      <param name="quaternion1">最初の四元数。</param>
      <param name="quaternion2">2 番目の四元数。</param>
      <param name="amount">補間での 2 番目の四元数の相対的な重み。</param>
      <returns>補間四元数。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>最初の四元数の各要素から、2 番目の四元数の対応する要素をそれぞれ減算します。</summary>
      <param name="value1">最初の四元数。</param>
      <param name="value2">2 番目の四元数。</param>
      <returns>
        <paramref name="value2" /> の各要素を、<paramref name="value1" /> の中の対応する要素から減算した結果の値を内容とする四元数。</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.ToString">
      <summary>この四元数を表す文字列を返します。</summary>
      <returns>この四元数の文字列形式。</returns>
    </member>
    <member name="F:System.Numerics.Quaternion.W">
      <summary>四元数の回転成分。</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.X">
      <summary>四元数のベクトル成分の X 値。</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.Y">
      <summary>四元数のベクトル成分の Y 値。</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.Z">
      <summary>四元数のベクトル成分の Z 値。</summary>
    </member>
    <member name="T:System.Numerics.Vector">
      <summary>ジェネリックなベクトルの作成、操作、結合、変換を行う便利な静的メソッドのコレクションを提供します。</summary>
    </member>
    <member name="M:System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})">
      <summary>指定したベクトルの要素の絶対値を要素とする新しいベクトルを返します。</summary>
      <param name="value">ソース ベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>絶対値ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>指定した 2 つのベクトルの要素の各ペアの合計値をその値とする新しいベクトルを返します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>加算結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>2 つのベクトルの対応する要素の各ペアに対してビット単位の And Not 演算を実行して、新しいベクトルを返します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})">
      <summary>指定したベクトルのビットを、符号なしバイトのベクトルのビットとして再解釈します。</summary>
      <param name="value">ソース ベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>再解釈されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})">
      <summary>指定したベクトルのビットを、倍精度浮動小数点のベクトルのビットとして再解釈します。</summary>
      <param name="value">ソース ベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>再解釈されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})">
      <summary>指定したベクトルのビットを、16 ビット整数のベクトルのビットとして再解釈します。</summary>
      <param name="value">ソース ベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>再解釈されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})">
      <summary>指定したベクトルのビットを、整数のベクトルのビットとして再解釈します。</summary>
      <param name="value">ソース ベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>再解釈されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})">
      <summary>指定したベクトルのビットを、長整数のベクトルのビットとして再解釈します。</summary>
      <param name="value">ソース ベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>再解釈されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})">
      <summary>指定したベクトルのビットを、符号付きバイトのベクトルのビットとして再解釈します。</summary>
      <param name="value">ソース ベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>再解釈されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})">
      <summary>指定したベクトルのビットを、単精度浮動小数点のベクトルのビットとして再解釈します。</summary>
      <param name="value">ソース ベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>再解釈されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})">
      <summary>指定したベクトルのビットを、符号なし 16 ビット整数のベクトルのビットとして再解釈します。</summary>
      <param name="value">ソース ベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>再解釈されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})">
      <summary>指定したベクトルのビットを、符号なし整数のベクトルのビットとして再解釈します。</summary>
      <param name="value">ソース ベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>再解釈されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})">
      <summary>指定したベクトルのビットを、符号なし長整数のベクトルのビットとして再解釈します。</summary>
      <param name="value">ソース ベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>再解釈されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>2 つのベクトルの要素の各ペアに対してビット単位の <see langword="And" /> 演算を実行して、新しいベクトルを返します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>2 つのベクトルの要素の各ペアに対してビット単位の <see langword="Or" /> 演算を実行して、新しいベクトルを返します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>指定した 2 つの単精度ソース ベクトルの間で、整数のマスク ベクトルに基づいて選択した値を要素とする新しい単精度ベクトルを作成します。</summary>
      <param name="condition">選択を行うために使用される整数のマスク ベクトル。</param>
      <param name="left">最初のソース ベクトル。</param>
      <param name="right">2 番目のソース ベクトル。</param>
      <returns>マスクに基づいて選択した値を要素とする新しいベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>指定した 2 つの倍精度ソース ベクトルの間で、整数のマスク ベクトルに基づいて選択した値を要素とする新しい倍精度ベクトルを作成します。</summary>
      <param name="condition">選択を行うために使用される整数のマスク ベクトル。</param>
      <param name="left">最初のソース ベクトル。</param>
      <param name="right">2 番目のソース ベクトル。</param>
      <returns>マスクに基づいて選択した値を要素とする新しいベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>指定した同じ型の 2 つのソース ベクトルの間で、整数のマスク ベクトルに基づいて選択した値を要素とする、指定した型の新しいベクトルを作成します。</summary>
      <param name="condition">選択を行うために使用される整数のマスク ベクトル。</param>
      <param name="left">最初のソース ベクトル。</param>
      <param name="right">2 番目のソース ベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>マスクに基づいて選択した値を要素とする新しいベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.Int64})">
      <summary>
        <see cref="System.Numerics.Vector{System.Int64}" /> を <see cref="System.Numerics.Vector{System.Double}" />に変換します。</summary>
      <param name="value">ソース ベクトル。</param>
      <returns>変換されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.UInt64})">
      <summary>
        <see cref="System.Numerics.Vector{System.UInt64}" /> を <see cref="System.Numerics.Vector{System.Double}" />に変換します。</summary>
      <param name="value">ソース ベクトル。</param>
      <returns>変換されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToInt32(System.Numerics.Vector{System.Single})">
      <summary>
        <see cref="System.Numerics.Vector{System.Single}" /> を <see cref="System.Numerics.Vector{System.Int32}" />に変換します。</summary>
      <param name="value">ソース ベクトル。</param>
      <returns>変換されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToInt64(System.Numerics.Vector{System.Double})">
      <summary>
        <see cref="System.Numerics.Vector{System.Double}" /> を <see cref="System.Numerics.Vector{System.Int64}" />に変換します。</summary>
      <param name="value">ソース ベクトル。</param>
      <returns>変換されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.Int32})">
      <summary>
        <see cref="System.Numerics.Vector{System.Int32}" /> を <see cref="System.Numerics.Vector{System.Single}" />に変換します。</summary>
      <param name="value">ソース ベクトル。</param>
      <returns>変換されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.UInt32})">
      <summary>
        <see cref="System.Numerics.Vector{System.UInt32}" /> を <see cref="System.Numerics.Vector{System.Single}" />に変換します。</summary>
      <param name="value">ソース ベクトル。</param>
      <returns>変換されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToUInt32(System.Numerics.Vector{System.Single})">
      <summary>
        <see cref="System.Numerics.Vector{System.Single}" /> を <see cref="System.Numerics.Vector{System.UInt32}" />に変換します。</summary>
      <param name="value">ソース ベクトル。</param>
      <returns>変換されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToUInt64(System.Numerics.Vector{System.Double})">
      <summary>
        <see cref="System.Numerics.Vector{System.Double}" /> を <see cref="System.Numerics.Vector{System.UInt64}" />に変換します。</summary>
      <param name="value">ソース ベクトル。</param>
      <returns>変換されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>最初のベクトルの要素を 2 番目のベクトル内の対応する要素で除算した結果を値とする新しいベクトルを返します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>除算されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>2 つのベクトルのドット積を返します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>ドット積。</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>指定した 2 つの倍精度ベクトル内の要素が等しいかどうかを通知する値を要素とする新しい整数ベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>結果の整数ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>指定した 2 つの整数ベクトル内の要素が等しいかどうかを通知する値を要素とする新しい整数ベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>結果の整数ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>指定した 2 つの長整数ベクトル内の要素が等しいかどうかを通知する値を要素とする新しいベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>結果の長整数ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>指定した 2 つの単精度ベクトル内の要素が等しいかどうかを通知する値を要素とする新しい整数ベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>結果の整数ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>指定した同じ型の 2 つのベクトル内の要素が等しいかどうかを通知する値を要素とする、指定した型の新しいベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>指定したベクトルの要素の各ペアが等しいかどうかを示す値を返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>
        <paramref name="left" /> と <paramref name="right" /> のすべての要素が等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>指定したベクトルの要素のいずれか 1 つのペアが等しいかどうかを示す値を返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>
        <paramref name="left" /> と <paramref name="right" /> のいずれかの要素ペアが等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>1 つの倍精度浮動小数点のベクトル内の要素が、2 番目の倍精度浮動小数点のベクトル内の対応する要素より大きいかどうかを通知する値を要素とする、新しい整数ベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>結果の整数ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>1 つの整数ベクトル内の要素が 2 番目の整数ベクトル内の対応する要素より大きいかどうかを通知する値を要素とする新しい整数ベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>結果の整数ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>1 つの長整数ベクトル内の要素が 2 番目の長整数ベクトル内の対応する要素より大きいかどうかを通知する値を要素とする新しい長整数ベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>結果の長整数ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>1 つの単精度浮動小数点のベクトル内の要素が、2 番目の単精度浮動小数点のベクトル内の対応する要素より大きいかどうかを通知する値を要素とする、新しい整数ベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>結果の整数ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>指定した型の 1 つのベクトル内の要素が、同じ型の 2 番目のベクトル内の対応する要素より大きいかどうかを通知する値を要素とする、新しいベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>最初のベクトル内のすべての要素が 2 番目のベクトル内の対応する要素より大きいかどうかを示す値を返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>
        <paramref name="left" /> 内のすべての要素が <paramref name="right" /> 内の対応する要素より大きい場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>最初のベクトル内のいずれかの要素が 2 番目のベクトル内の対応する要素より大きいかどうかを示す値を返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>
        <paramref name="left" /> 内のいずれかの要素が <paramref name="right" /> 内の対応する要素より大きい場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>1 つのベクトル内の要素が 2 番目の倍精度浮動小数点ベクトル内の対応する要素より大きいか等しいことを通知する値を要素とする新しい整数ベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>結果の整数ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>1 つの整数ベクトル内の要素が 2 番目の整数ベクトル内の対応する要素より大きいか等しいことを通知する値を要素とする新しい整数ベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>結果の整数ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>1 つの長整数ベクトル内の要素が 2 番目の長整数ベクトル内の対応する要素より大きいか等しいことを通知する値を要素とする新しい長整数ベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>結果の長整数ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>1 つのベクトル内の要素が 2 番目の単精度浮動小数点ベクトル内の対応する要素より大きいか等しいことを通知する値を要素とする新しい整数ベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>結果の整数ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>指定した型の 1 つのベクトル内の要素が、同じ型の 2 番目のベクトル内の対応する要素より大きいか等しいことを通知する値を要素とする、新しいベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>最初のベクトル内のすべての要素が 2 番目のベクトル内の対応する要素より大きいか等しいことを示す値を返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>
        <paramref name="left" /> 内のすべての要素が <paramref name="right" /> 内の対応する要素より大きいか等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>最初のベクトル内のいずれかの要素が 2 番目のベクトル内の対応する要素より大きいか等しいことを示す値を返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>
        <paramref name="left" /> 内のいずれかの要素が <paramref name="right" /> 内の対応する要素より大きいか等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Numerics.Vector.IsHardwareAccelerated">
      <summary>ベクトル演算が JIT の組み込みサポートによりハードウェア アクセラレータの対象になるかどうかを示す値を取得します。</summary>
      <returns>ベクトル演算がハードウェア アクセラレータの対象になる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>1 つの倍精度浮動小数点のベクトル内の要素が、2 番目の倍精度浮動小数点のベクトル内の対応する要素より小さいかどうかを通知する値を要素とする、新しい整数ベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>結果の整数ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>1 つの整数ベクトル内の要素が 2 番目の整数ベクトル内の対応する要素より小さいかどうかを通知する値を要素とする新しい整数ベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>結果の整数ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>1 つの長整数ベクトル内の要素が 2 番目の長整数ベクトル内の対応する要素より小さいかどうかを通知する値を要素とする新しい長整数ベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>結果の長整数ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>1 つの単精度のベクトル内の要素が、2 番目の単精度のベクトル内の対応する要素より小さいかどうかを通知する値を要素とする、新しい整数ベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>結果の整数ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>1 つのベクトル内の要素が 2 番目のベクトル内の対応する要素より小さいかどうかを通知する値を要素とする、指定した型の新しいベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>最初のベクトル内のすべての要素が 2 番目のベクトル内の対応する要素より小さいかどうかを示す値を返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>
        <paramref name="left" /> 内のすべての要素が <paramref name="right" /> 内の対応する要素より小さい場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>最初のベクトル内のいずれかの要素が 2 番目のベクトル内の対応する要素より小さいかどうかを示す値を返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>
        <paramref name="left" /> 内のいずれかの要素が <paramref name="right" /> 内の対応する要素より小さい場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>1 つの倍精度浮動小数点のベクトル内の要素が、2 番目の倍精度浮動小数点のベクトル内の対応する要素より小さいか等しいことを通知する値を要素とする、新しい整数ベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>結果の整数ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>1 つの整数ベクトル内の要素が 2 番目の整数ベクトル内の対応する要素より小さいか等しいことを通知する値を要素とする新しい整数ベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>結果の整数ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>1 つの長整数ベクトル内の要素が 2 番目の長整数ベクトル内の対応する要素より小さいか等しいことを通知する値を要素とする新しい長整数ベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>結果の長整数ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>1 つの単精度浮動小数点のベクトル内の要素が、2 番目の単精度浮動小数点のベクトル内の対応する要素より小さいか等しいことを通知する値を要素とする、新しい整数ベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>結果の整数ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>1 つのベクトル内の要素が 2 番目のベクトル内の対応する要素より小さいか等しいことを通知する値を要素とする新しいベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>最初のベクトル内のすべての要素が 2 番目のベクトル内の対応する要素より小さいか等しいことを示す値を返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>
        <paramref name="left" /> 内のすべての要素が <paramref name="right" /> 内の対応する要素より小さいか等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>最初のベクトル内のいずれかの要素が 2 番目のベクトル内の対応する要素より小さいか等しいことを示す値を返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>
        <paramref name="left" /> 内のいずれかの要素が <paramref name="right" /> 内の対応する要素より小さいか等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>指定した 2 つのベクトルの要素の各ペアの最大値を要素とする新しいベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>最大値のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>指定した 2 つのベクトルの要素の各ペアの最小値を要素とする新しいベクトルを返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>最小値のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})">
      <summary>指定したベクトルの各値を乗算したスカラー値を値とする新しいベクトルを返します。</summary>
      <param name="left">スカラー値。</param>
      <param name="right">ベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>スケール調節されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)">
      <summary>指定したベクトルの各値をスカラー値で乗算した値を値とする新しいベクトルを返します。</summary>
      <param name="left">ベクトル。</param>
      <param name="right">スカラー値。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>スケール調節されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>指定した 2 つのベクトルの要素の各ペアを乗算した値を値とする新しいベクトルを返します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>要素ごとの積ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>2 つの <see cref="System.Numerics.Vector{System.Double}" /> インスタンスを 1 つの <see cref="System.Numerics.Vector{System.Single}" /> に縮小します。</summary>
      <param name="source1">要素が戻り値の下位インデックス要素になる最初のソース ベクトル。</param>
      <param name="source2">要素が戻り値の上位インデックス要素になる 2 番目のソース ベクトル。</param>
      <returns>ソース ベクトルから絞り込まれた要素を含む <see cref="System.Numerics.Vector{System.Single}" />。</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int16})">
      <summary>2 つの <see cref="System.Numerics.Vector{System.Int16}" /> インスタンスを 1 つの <see cref="System.Numerics.Vector{System.SByte}" /> に縮小します。</summary>
      <param name="source1">要素が戻り値の下位インデックス要素になる最初のソース ベクトル。</param>
      <param name="source2">要素が戻り値の上位インデックス要素になる 2 番目のソース ベクトル。</param>
      <returns>ソース ベクトルから絞り込まれた要素を含む <see cref="System.Numerics.Vector{System.SByte}" />。</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>2 つの <see cref="System.Numerics.Vector{System.Int32}" /> インスタンスを 1 つの <see cref="System.Numerics.Vector{System.Int16}" /> に縮小します。</summary>
      <param name="source1">要素が戻り値の下位インデックス要素になる最初のソース ベクトル。</param>
      <param name="source2">要素が戻り値の上位インデックス要素になる 2 番目のソース ベクトル。</param>
      <returns>ソース ベクトルから絞り込まれた要素を含む <see cref="System.Numerics.Vector{System.Int16}" />。</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>2 つの <see cref="System.Numerics.Vector{System.Int64}" /> インスタンスを 1 つの <see cref="System.Numerics.Vector{System.Int32}" /> に縮小します。</summary>
      <param name="source1">要素が戻り値の下位インデックス要素になる最初のソース ベクトル。</param>
      <param name="source2">要素が戻り値の上位インデックス要素になる 2 番目のソース ベクトル。</param>
      <returns>ソース ベクトルから絞り込まれた要素を含む <see cref="System.Numerics.Vector{System.Int32}" />。</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt16})">
      <summary>2 つの <see cref="System.Numerics.Vector{System.UInt16}" /> インスタンスを 1 つの <see cref="System.Numerics.Vector{System.Byte}" /> に縮小します。</summary>
      <param name="source1">要素が戻り値の下位インデックス要素になる最初のソース ベクトル。</param>
      <param name="source2">要素が戻り値の上位インデックス要素になる 2 番目のソース ベクトル。</param>
      <returns>ソース ベクトルから絞り込まれた要素を含む <see cref="System.Numerics.Vector{System.Byte}" />。</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt32})">
      <summary>2 つの <see cref="System.Numerics.Vector{System.UInt32}" /> インスタンスを 1 つの <see cref="System.Numerics.Vector{System.UInt16}" /> に縮小します。</summary>
      <param name="source1">要素が戻り値の下位インデックス要素になる最初のソース ベクトル。</param>
      <param name="source2">要素が戻り値の上位インデックス要素になる 2 番目のソース ベクトル。</param>
      <returns>ソース ベクトルから絞り込まれた要素を含む <see cref="System.Numerics.Vector{System.UInt16}" />。</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt64},System.Numerics.Vector{System.UInt64})">
      <summary>2 つの <see cref="System.Numerics.Vector{System.UInt64}" /> インスタンスを 1 つの <see cref="System.Numerics.Vector{System.UInt32}" /> に縮小します。</summary>
      <param name="source1">要素が戻り値の下位インデックス要素になる最初のソース ベクトル。</param>
      <param name="source2">要素が戻り値の上位インデックス要素になる 2 番目のソース ベクトル。</param>
      <returns>ソース ベクトルから絞り込まれた要素を含む <see cref="System.Numerics.Vector{System.UInt32}" />。</returns>
    </member>
    <member name="M:System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})">
      <summary>指定したベクトルの要素を符号反転した値を要素とする新しいベクトルを返します。</summary>
      <param name="value">ソース ベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>符号反転後のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})">
      <summary>指定したベクトルの要素の 1 の補数をとった値を要素とする新しいベクトルを返します。</summary>
      <param name="value">ソース ベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})">
      <summary>指定したベクトルの要素の平方根を要素とする新しいベクトルを返します。</summary>
      <param name="value">ソース ベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>ベクトルの平方根。</returns>
    </member>
    <member name="M:System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>2 番目のベクトルの要素と最初のベクトルの対応する要素の差を値とする新しいベクトルを返します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>差ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Byte},System.Numerics.Vector{System.UInt16}@,System.Numerics.Vector{System.UInt16}@)">
      <summary>
        <see cref="System.Numerics.Vector{System.Byte}" /> を 2 つの <see cref="System.Numerics.Vector{System.UInt16}" /> インスタンスに拡張します。</summary>
      <param name="source">要素が出力に拡張されるソース ベクトル。</param>
      <param name="dest1">要素にソース ベクトルの下位インデックスから拡張された要素を含む、最初の出力ベクトル。</param>
      <param name="dest2">要素がソース ベクトルの上位インデックスから拡張された要素を含む、2 番目の出力ベクトル。</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int32}@,System.Numerics.Vector{System.Int32}@)">
      <summary>
        <see cref="System.Numerics.Vector{System.Int16}" /> を 2 つの <see cref="System.Numerics.Vector{System.Int32}" /> インスタンスに拡張します。</summary>
      <param name="source">要素が出力に拡張されるソース ベクトル。</param>
      <param name="dest1">要素にソース ベクトルの下位インデックスから拡張された要素を含む、最初の出力ベクトル。</param>
      <param name="dest2">要素がソース ベクトルの上位インデックスから拡張された要素を含む、2 番目の出力ベクトル。</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int64}@,System.Numerics.Vector{System.Int64}@)">
      <summary>
        <see cref="System.Numerics.Vector{System.Int32}" /> を 2 つの <see cref="System.Numerics.Vector{System.Int64}" /> インスタンスに拡張します。</summary>
      <param name="source">要素が出力に拡張されるソース ベクトル。</param>
      <param name="dest1">要素にソース ベクトルの下位インデックスから拡張された要素を含む、最初の出力ベクトル。</param>
      <param name="dest2">要素がソース ベクトルの上位インデックスから拡張された要素を含む、2 番目の出力ベクトル。</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.SByte},System.Numerics.Vector{System.Int16}@,System.Numerics.Vector{System.Int16}@)">
      <summary>
        <see cref="System.Numerics.Vector{System.SByte}" /> を 2 つの <see cref="System.Numerics.Vector{System.Int16}" /> インスタンスに拡張します。</summary>
      <param name="source">要素が出力に拡張されるソース ベクトル。</param>
      <param name="dest1">要素にソース ベクトルの下位インデックスから拡張された要素を含む、最初の出力ベクトル。</param>
      <param name="dest2">要素がソース ベクトルの上位インデックスから拡張された要素を含む、2 番目の出力ベクトル。</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Double}@,System.Numerics.Vector{System.Double}@)">
      <summary>
        <see cref="System.Numerics.Vector{System.Single}" /> を 2 つの <see cref="System.Numerics.Vector{System.Double}" /> インスタンスに拡張します。</summary>
      <param name="source">要素が出力に拡張されるソース ベクトル。</param>
      <param name="dest1">要素にソース ベクトルの下位インデックスから拡張された要素を含む、最初の出力ベクトル。</param>
      <param name="dest2">要素がソース ベクトルの上位インデックスから拡張された要素を含む、2 番目の出力ベクトル。</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt32}@,System.Numerics.Vector{System.UInt32}@)">
      <summary>
        <see cref="System.Numerics.Vector{System.UInt16}" /> を 2 つの <see cref="System.Numerics.Vector{System.UInt32}" /> インスタンスに拡張します。</summary>
      <param name="source">要素が出力に拡張されるソース ベクトル。</param>
      <param name="dest1">要素にソース ベクトルの下位インデックスから拡張された要素を含む、最初の出力ベクトル。</param>
      <param name="dest2">要素がソース ベクトルの上位インデックスから拡張された要素を含む、2 番目の出力ベクトル。</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt64}@,System.Numerics.Vector{System.UInt64}@)">
      <summary>
        <see cref="System.Numerics.Vector{System.UInt32}" /> を 2 つの <see cref="System.Numerics.Vector{System.UInt64}" /> インスタンスに拡張します。</summary>
      <param name="source">要素が出力に拡張されるソース ベクトル。</param>
      <param name="dest1">要素にソース ベクトルの下位インデックスから拡張された要素を含む、最初の出力ベクトル。</param>
      <param name="dest2">要素がソース ベクトルの上位インデックスから拡張された要素を含む、2 番目の出力ベクトル。</param>
    </member>
    <member name="M:System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>2 つのベクトルの要素の各ペアに対してビット単位の排他的論理和 (<see langword="XOr" />) 演算を実行して、新しいベクトルを返します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
      <returns>結果のベクトル。</returns>
    </member>
    <member name="T:System.Numerics.Vector`1">
      <summary>並列アルゴリズムの下位レベルでの最適化に適する、指定した数値型の 1 つのベクトルを表します。</summary>
      <typeparam name="T">ベクトルの型。 <c>T</c>には、任意のプリミティブ数値型を指定できます。</typeparam>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0)">
      <summary>指定した型を成分とするベクトルを作成します。</summary>
      <param name="value">ベクトルの成分の型を定義する数値型。</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0[])">
      <summary>指定した配列からベクトルを作成します。</summary>
      <param name="values">数値の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0[],System.Int32)">
      <summary>指定した配列の、指定したインデックス位置を開始位置として、ベクトルを作成します。</summary>
      <param name="values">数値の配列。</param>
      <param name="index">ベクトルを作成するための開始インデックス位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> が 0 未満です。  

または - 
<paramref name="values" /> の長さから <paramref name="index" /> を引いた長さが <see cref="P:System.Numerics.Vector`1.Count" /> 未満です。</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.ReadOnlySpan{`0})">
      <summary>指定した <see cref="T:System.ReadOnlySpan`1" /> からベクトルを構築します。</summary>
      <param name="values">型 T のオブジェクトの読み取り専用の範囲として、ベクトルに追加する値。この範囲には少なくとも <see cref="P:System.Numerics.Vector`1.Count" /> の要素が含まれている必要があります。</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>指定したバイトの読み取り専用の範囲からベクトルを構築します。</summary>
      <param name="values">ベクトルに追加する値を含む、バイトの読み取り専用の範囲。 この範囲には少なくとも <see cref="P:System.Numerics.Vector`1.Count" /> の要素が含まれている必要があります。</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.Span{`0})">
      <summary>指定した <see cref="T:System.Span`1" /> からベクトルを構築します。</summary>
      <param name="values">型 T のオブジェクトの範囲として、ベクトルに追加する値。この範囲には少なくとも <see cref="P:System.Numerics.Vector`1.Count" /> の要素が含まれている必要があります。</param>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(`0[])">
      <summary>指定した宛先の配列に、ベクトルのインスタンスをコピーします。</summary>
      <param name="destination">ベクトルの値のコピーを受け取る配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">現在のベクトル内の要素数が、<paramref name="destination" /> 配列内の使用可能な要素数を超えています。</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(`0[],System.Int32)">
      <summary>指定した宛先の配列に、指定したインデックス位置を開始位置として、ベクトルのインスタンスをコピーします。</summary>
      <param name="destination">ベクトルの値のコピーを受け取る配列。</param>
      <param name="startIndex">コピー操作を開始する、<paramref name="destination" /> 内の開始インデックス位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">現在のインスタンスの要素数が、<paramref name="destination" /> 配列の <paramref name="startIndex" /> から末尾までの使用可能な要素数を超えています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> の値が 0 未満であるか、<paramref name="destination" /> の最後のインデックスの値を超えています。</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(System.Span{`0})">
      <summary>ベクトルを指定した範囲にコピーします。 .</summary>
      <param name="destination">値のコピー先の範囲。 コピー先の範囲は、サイズ <see cref="P:System.Numerics.Vector`1.Count" /> 以上である必要があります。</param>
      <exception cref="T:System.ArgumentException">ソース ベクトルの要素数が、コピー先の範囲で利用できる数を超えています。</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(System.Span{System.Byte})">
      <summary>ベクトルを指定した <see cref="T:System.Span`1" /> にコピーします。</summary>
      <param name="destination">値のコピー先の範囲。 コピー先の範囲は、サイズ <see cref="P:System.Numerics.Vector`1.Count" /> 以上である必要があります。</param>
      <exception cref="T:System.ArgumentException">ソース ベクトルの要素数が、コピー先の範囲で利用できる数を超えています。</exception>
    </member>
    <member name="P:System.Numerics.Vector`1.Count">
      <summary>ベクトルに格納されている要素の数を返します。</summary>
      <returns>ベクトルに格納されている要素の数。</returns>
      <exception cref="T:System.NotSupportedException">リフレクションを使用してプロパティ get アクセス操作子にアクセスすることは、サポートされていません。</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})">
      <summary>このインスタンスが、指定したベクトルと等しいかどうかを示す値を返します。</summary>
      <param name="other">このインスタンスと比較するベクトル。</param>
      <returns>現在のインスタンスと <paramref name="other" /> が等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.Equals(System.Object)">
      <summary>このインスタンスが、指定されたオブジェクトと等価であるかどうかを示す値を返します。</summary>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
      <returns>現在のインスタンスと <paramref name="obj" /> が等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 このメソッドは、<paramref name="obj" /> が null の場合、または <paramref name="obj" /> が現在のインスタンスとは異なる型のベクトルである場合に、<see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>ハッシュ コード。</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.Item(System.Int32)">
      <summary>指定したインデックス位置にある要素を取得します。</summary>
      <param name="index">返される要素のインデックス。</param>
      <returns>インデックス位置 <paramref name="index" /> にある要素。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> が 0 未満です。  

または - 
<paramref name="index" /> が <see cref="P:System.Numerics.Vector`1.Count" /> 以上です。</exception>
    </member>
    <member name="P:System.Numerics.Vector`1.One">
      <summary>すべての要素が 1 のベクトルを返します。</summary>
      <returns>すべての要素が 1 のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>2 つのベクトルを加算します。</summary>
      <param name="left">加算する最初のベクトル。</param>
      <param name="right">加算する 2 番目のベクトル。</param>
      <returns>加算結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>2 つのベクトルの各要素に対してビット単位の <see langword="And" /> 演算を実行して、新しいベクトルを返します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <returns>
        <paramref name="left" /> と <paramref name="right" /> のビット単位の <see langword="And" /> 演算を実行した結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>2 つのベクトルの各要素に対してビット単位の <see langword="Or" /> 演算を実行して、新しいベクトルを返します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <returns>
        <paramref name="left" /> と <paramref name="right" /> の要素のビット単位の <see langword="Or" /> 演算を実行した結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>最初のベクトルを 2 番目のベクトルで除算します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <returns>
        <paramref name="left" /> を <paramref name="right" /> で除算した結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>指定した 2 つのベクトルの要素の各ペアが等しいかどうかを示す値を返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>
        <see langword="true" /> と <paramref name="left" /> が等しい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>2 つのベクトルの各要素に対してビット単位の <see langword="XOr" /> 演算を実行して、新しいベクトルを返します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <returns>
        <paramref name="left" /> と <paramref name="right" /> の要素のビット単位の <see langword="XOr" /> 演算を実行した結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}">
      <summary>指定したベクトルのビットを、<see cref="T:System.Byte" /> 型のベクトルとして再解釈します。</summary>
      <param name="value">再解釈するベクトル。</param>
      <returns>再解釈されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}">
      <summary>指定したベクトルのビットを、<see cref="T:System.Double" /> 型のベクトルとして再解釈します。</summary>
      <param name="value">再解釈するベクトル。</param>
      <returns>再解釈されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}">
      <summary>指定したベクトルのビットを、<see cref="T:System.Int16" /> 型のベクトルとして再解釈します。</summary>
      <param name="value">再解釈するベクトル。</param>
      <returns>再解釈されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}">
      <summary>指定したベクトルのビットを、<see cref="T:System.Int32" /> 型のベクトルとして再解釈します。</summary>
      <param name="value">再解釈するベクトル。</param>
      <returns>再解釈されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}">
      <summary>指定したベクトルのビットを、<see cref="T:System.Int64" /> 型のベクトルとして再解釈します。</summary>
      <param name="value">再解釈するベクトル。</param>
      <returns>再解釈されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}">
      <summary>指定したベクトルのビットを、<see cref="T:System.SByte" /> 型のベクトルとして再解釈します。</summary>
      <param name="value">再解釈するベクトル。</param>
      <returns>再解釈されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}">
      <summary>指定したベクトルのビットを、<see cref="T:System.Single" /> 型のベクトルとして再解釈します。</summary>
      <param name="value">再解釈するベクトル。</param>
      <returns>再解釈されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}">
      <summary>指定したベクトルのビットを、<see cref="T:System.UInt16" /> 型のベクトルとして再解釈します。</summary>
      <param name="value">再解釈するベクトル。</param>
      <returns>再解釈されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}">
      <summary>指定したベクトルのビットを、<see cref="T:System.UInt32" /> 型のベクトルとして再解釈します。</summary>
      <param name="value">再解釈するベクトル。</param>
      <returns>再解釈されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}">
      <summary>指定したベクトルのビットを、<see cref="T:System.UInt64" /> 型のベクトルとして再解釈します。</summary>
      <param name="value">再解釈するベクトル。</param>
      <returns>再解釈されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>指定したベクトルの要素のいずれか 1 つのペアが等しいかどうかを示す値を返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>左辺と右辺でいずれかの要素ペアが等しい場合は <see langword="true" />。 等しい要素ペアがない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})">
      <summary>ベクトルを、指定したスカラー値で乗算します。</summary>
      <param name="factor">スカラー値。</param>
      <param name="value">ソース ベクトル。</param>
      <returns>スケール調節されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)">
      <summary>ベクトルを、指定したスカラー値で乗算します。</summary>
      <param name="value">ソース ベクトル。</param>
      <param name="factor">スカラー値。</param>
      <returns>スケール調節されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>指定した 2 つのベクトルの要素の各ペアを乗算した値を値とする新しいベクトルを返します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <returns>要素ごとの積ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})">
      <summary>指定したベクトルの要素の 1 の補数をとった値を要素とする新しいベクトルを返します。</summary>
      <param name="value">ソース ベクトル。</param>
      <returns>1 の補数ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>最初のベクトルから 2 番目のベクトルを減算します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <returns>
        <paramref name="left" /> から <paramref name="right" /> を減算した結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})">
      <summary>指定したベクトルを符号反転します。</summary>
      <param name="value">符号反転するベクトル。</param>
      <returns>符号反転後のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString">
      <summary>既定の書式設定を使用してこのベクトルの文字列表現を返します。</summary>
      <returns>このベクトルの文字列表現。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString(System.String)">
      <summary>指定した書式設定文字列を使用して個々の要素を書式設定することにより、このベクトルの文字列表現を返します。</summary>
      <param name="format">個々の要素の書式を定義する、 または 。</param>
      <returns>現在のインスタンスの文字列表現。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)">
      <summary>指定した書式設定文字列を使用して個々の要素を書式設定し、さらに、指定した書式設定プロバイダーを使用してカルチャ固有書式設定を定義することによって、このベクトルの文字列表現を返します。</summary>
      <param name="format">個々の要素の書式を定義する、 または 。</param>
      <param name="formatProvider">カルチャ固有の書式情報を提供する書式設定プロバイダー。</param>
      <returns>現在のインスタンスの文字列表現。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.TryCopyTo(System.Span{`0})">
      <summary>指定した <see cref="T:System.Span`1" /> にベクトルをコピーしようとします。</summary>
      <param name="destination">値のコピー先の範囲。 コピー先の範囲は、サイズ <see cref="P:System.Numerics.Vector`1.Count" /> 以上である必要があります。</param>
      <returns>ソース ベクトルが正常に <paramref name="destination" /> にコピーされた場合は <see langword="true" />。 <paramref name="destination" /> はソース ベクトルを保持できるほど大きくない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.TryCopyTo(System.Span{System.Byte})">
      <summary>指定したバイト範囲にベクトルをコピーしようとします。</summary>
      <param name="destination">値のコピー先の範囲。 コピー先の範囲は、サイズ <see cref="P:System.Numerics.Vector`1.Count" /> 以上である必要があります。</param>
      <returns>ソース ベクトルが正常に <paramref name="destination" /> にコピーされた場合は <see langword="true" />。 <paramref name="destination" /> はソース ベクトルを保持できるほど大きくない場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.Zero">
      <summary>すべての要素がゼロのベクトルを返します。</summary>
      <returns>すべての要素がゼロのベクトル。</returns>
    </member>
    <member name="T:System.Numerics.Vector2">
      <summary>2 つの単精度浮動小数点値を持つベクトルを表します。</summary>
    </member>
    <member name="M:System.Numerics.Vector2.#ctor(System.Single)">
      <summary>2 つの要素が同じ値を持つ新しい <see cref="T:System.Numerics.Vector2" /> オブジェクトを作成します。</summary>
      <param name="value">両方の要素に割り当てる値。</param>
    </member>
    <member name="M:System.Numerics.Vector2.#ctor(System.Single,System.Single)">
      <summary>指定した値を要素とするベクトルを作成します。</summary>
      <param name="x">
        <see cref="F:System.Numerics.Vector2.X" /> フィールドに代入する値。</param>
      <param name="y">
        <see cref="F:System.Numerics.Vector2.Y" /> フィールドに代入する値。</param>
    </member>
    <member name="M:System.Numerics.Vector2.Abs(System.Numerics.Vector2)">
      <summary>指定したベクトルの各要素の絶対値を要素とするベクトルを返します。</summary>
      <param name="value">ベクトル。</param>
      <returns>絶対値ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Add(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>2 つのベクトルを加算します。</summary>
      <param name="left">加算する最初のベクトル。</param>
      <param name="right">加算する 2 番目のベクトル。</param>
      <returns>加算結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Clamp(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>ベクトルを最小値と最大値の間に制限します。</summary>
      <param name="value1">制限するベクトル。</param>
      <param name="min">最小値。</param>
      <param name="max">最大値。</param>
      <returns>制限付きベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.CopyTo(System.Single[])">
      <summary>ベクトルの要素を、指定された配列にコピーします。</summary>
      <param name="array">コピー先の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">現在のインスタンスの要素数が、配列内の要素数を超えています。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> が多次元です。</exception>
    </member>
    <member name="M:System.Numerics.Vector2.CopyTo(System.Single[],System.Int32)">
      <summary>指定した配列に、指定したインデックス位置を開始位置として、ベクトルの要素をコピーします。</summary>
      <param name="array">コピー先の配列。</param>
      <param name="index">ベクトルの最初の要素のコピー先位置のインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">現在のインスタンスの要素数が、配列内の要素数を超えています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。  

または - 
<paramref name="index" /> が配列の長さ以上です。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> が多次元です。</exception>
    </member>
    <member name="M:System.Numerics.Vector2.Distance(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>指定した 2 点間のユークリッド距離を計算します。</summary>
      <param name="value1">最初の点。</param>
      <param name="value2">2 番目の点。</param>
      <returns>距離。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.DistanceSquared(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>指定した 2 点間のユークリッド距離の 2 乗を返します。</summary>
      <param name="value1">最初の点。</param>
      <param name="value2">2 番目の点。</param>
      <returns>距離の 2 乗。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>最初のベクトルを 2 番目のベクトルで除算します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <returns>除算結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Single)">
      <summary>指定したベクトルを、指定したスカラー値で除算します。</summary>
      <param name="left">ベクトル。</param>
      <param name="divisor">スカラー値。</param>
      <returns>除算結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Dot(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>2 つのベクトルのドット積を返します。</summary>
      <param name="value1">最初のベクトル。</param>
      <param name="value2">2 番目のベクトル。</param>
      <returns>ドット積。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Equals(System.Numerics.Vector2)">
      <summary>このインスタンスと、別のベクトルが等しいかどうかを示す値を返します。</summary>
      <param name="other">もう 1 つのベクトル。</param>
      <returns>2 つのベクトルが等しい場合は <see langword="true" />、そうでない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Equals(System.Object)">
      <summary>このインスタンスと、指定したオブジェクトが等しいかどうかを示す値を返します。</summary>
      <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
      <returns>現在のインスタンスと <paramref name="obj" /> が等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 <paramref name="obj" /> が <see langword="null" /> の場合、メソッドは <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>ハッシュ コード。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Length">
      <summary>ベクトルの長さを返します。</summary>
      <returns>ベクトルの長さ。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.LengthSquared">
      <summary>ベクトルの長さの 2 乗を返します。</summary>
      <returns>ベクトルの長さの 2 乗。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
      <summary>指定された重み付けに基づいて、2 つのベクトル間の線形補間を実行します。</summary>
      <param name="value1">最初のベクトル。</param>
      <param name="value2">2 番目のベクトル。</param>
      <param name="amount">
        <paramref name="value2" /> の重みを示す 0 と 1 の間の値。</param>
      <returns>補間ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Max(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>指定した 2 つのベクトルの要素の各ペアの大きい方を要素とするベクトルを返します。</summary>
      <param name="value1">最初のベクトル。</param>
      <param name="value2">2 番目のベクトル。</param>
      <returns>最大化ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Min(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>指定した 2 つのベクトルの要素の各ペアの小さい方を要素とするベクトルを返します。</summary>
      <param name="value1">最初のベクトル。</param>
      <param name="value2">2 番目のベクトル。</param>
      <returns>最小化ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>指定した 2 つのベクトルの要素の各ペアを乗算した値を値とする新しいベクトルを返します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <returns>要素ごとの積ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Single)">
      <summary>ベクトルに、指定したスカラーを乗算します。</summary>
      <param name="left">乗算するベクトル。</param>
      <param name="right">スカラー値。</param>
      <returns>スケール調節されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Single,System.Numerics.Vector2)">
      <summary>指定したベクトルとスカラー値を乗算します。</summary>
      <param name="left">スケール調節された値。</param>
      <param name="right">ベクトル。</param>
      <returns>スケール調節されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Negate(System.Numerics.Vector2)">
      <summary>指定したベクトルの符号を反転します。</summary>
      <param name="value">符号反転するベクトル。</param>
      <returns>符号反転後のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Normalize(System.Numerics.Vector2)">
      <summary>指定したベクトルと方向が同じで、長さが 1 であるベクトルを返します。</summary>
      <param name="value">正規化するベクトル。</param>
      <returns>正規化後のベクトル。</returns>
    </member>
    <member name="P:System.Numerics.Vector2.One">
      <summary>2 つの要素が 1 に等しいベクトルを取得します。</summary>
      <returns>2つの要素が1に等しいベクトル (つまり、ベクトル<c>(1, 1)</c>を返します。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Addition(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>2 つのベクトルを加算します。</summary>
      <param name="left">加算する最初のベクトル。</param>
      <param name="right">加算する 2 番目のベクトル。</param>
      <returns>加算結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>最初のベクトルを 2 番目のベクトルで除算します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <returns>
        <paramref name="left" /> を <paramref name="right" /> で除算した結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Single)">
      <summary>指定したベクトルを、指定したスカラー値で除算します。</summary>
      <param name="value1">ベクトル。</param>
      <param name="value2">スカラー値。</param>
      <returns>除算結果。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Equality(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>指定した 2 つのベクトルの要素の各ペアが等しいかどうかを示す値を返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>
        <see langword="true" /> と <paramref name="left" /> が等しい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Inequality(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>指定した 2 つのベクトルが等しくないかどうかを示す値を返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>
        <paramref name="left" /> と <paramref name="right" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>指定した 2 つのベクトルの要素の各ペアを乗算した値を値とする新しいベクトルを返します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <returns>要素ごとの積ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Single)">
      <summary>指定したベクトルを、指定したスカラー値で乗算します。</summary>
      <param name="left">ベクトル。</param>
      <param name="right">スカラー値。</param>
      <returns>スケール調節されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Single,System.Numerics.Vector2)">
      <summary>スカラー値に、指定されたベクトルを乗算します。</summary>
      <param name="left">ベクトル。</param>
      <param name="right">スカラー値。</param>
      <returns>スケール調節されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Subtraction(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>最初のベクトルから 2 番目のベクトルを減算します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <returns>
        <paramref name="left" /> から <paramref name="right" /> を減算した結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_UnaryNegation(System.Numerics.Vector2)">
      <summary>指定したベクトルを符号反転します。</summary>
      <param name="value">符号反転するベクトル。</param>
      <returns>符号反転後のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Reflect(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>指定した法線を持つ表面からのベクトルの反射を返します。</summary>
      <param name="vector">ソース ベクトル。</param>
      <param name="normal">反射の基準となる表面の法線。</param>
      <returns>反射されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.SquareRoot(System.Numerics.Vector2)">
      <summary>指定したベクトルの各要素の平方根を要素として持つベクトルを返します。</summary>
      <param name="value">ベクトル。</param>
      <returns>ベクトルの平方根。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Subtract(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>最初のベクトルから 2 番目のベクトルを減算します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <returns>差ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString">
      <summary>既定の書式設定を使用して現在のインスタンスの文字列表現を返します。</summary>
      <returns>現在のインスタンスの文字列表現。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString(System.String)">
      <summary>指定した書式設定文字列を使用して個々の要素を書式設定することにより、現在のインスタンスの文字列表現を返します。</summary>
      <param name="format">個々の要素の書式を定義する、標準またはカスタム数値書式文字列。</param>
      <returns>現在のインスタンスの文字列表現。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString(System.String,System.IFormatProvider)">
      <summary>指定した書式設定文字列を使用して個々の要素を書式設定し、また、指定した書式設定プロバイダーを使用してカルチャ固有書式設定を定義することによって、現在のインスタンスの文字列表現を返します。</summary>
      <param name="format">個々の要素の書式を定義する、標準またはカスタム数値書式文字列。</param>
      <param name="formatProvider">カルチャ固有の書式情報を提供する書式設定プロバイダー。</param>
      <returns>現在のインスタンスの文字列表現。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix3x2)">
      <summary>指定した 3 x 2 行列でベクトルを変換します。</summary>
      <param name="position">変換するベクトル。</param>
      <param name="matrix">変換行列。</param>
      <returns>変換されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>指定した 4 x 4 行列でベクトルを変換します。</summary>
      <param name="position">変換するベクトル。</param>
      <param name="matrix">変換行列。</param>
      <returns>変換されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)">
      <summary>指定した四元数回転値によって、ベクトルを変換します。</summary>
      <param name="value">回転するベクトル。</param>
      <param name="rotation">適用する回転。</param>
      <returns>変換されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix3x2)">
      <summary>特定の 3 x 2 行列でベクトル法線を変換します。</summary>
      <param name="normal">ソース ベクトル。</param>
      <param name="matrix">行列。</param>
      <returns>変換されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>特定の 4 x 4 行列でベクトル法線を変換します。</summary>
      <param name="normal">ソース ベクトル。</param>
      <param name="matrix">行列。</param>
      <returns>変換されたベクトル。</returns>
    </member>
    <member name="P:System.Numerics.Vector2.UnitX">
      <summary>ベクトル (1,0) を取得します。</summary>
      <returns>ベクター <c>(1, 0)</c>。</returns>
    </member>
    <member name="P:System.Numerics.Vector2.UnitY">
      <summary>ベクトル (0,1) を取得します。</summary>
      <returns>ベクター <c>(0, 1)</c>。</returns>
    </member>
    <member name="F:System.Numerics.Vector2.X">
      <summary>ベクトルの X 成分。</summary>
    </member>
    <member name="F:System.Numerics.Vector2.Y">
      <summary>ベクトルの Y 成分。</summary>
    </member>
    <member name="P:System.Numerics.Vector2.Zero">
      <summary>2 つの要素が 0 に等しいベクトルを返します。</summary>
      <returns>2つの要素が0に等しいベクトル (つまり、ベクトル<c>(0, 0)</c>を返します。</returns>
    </member>
    <member name="T:System.Numerics.Vector3">
      <summary>3 つの単精度浮動小数点値を持つベクトルを表します。</summary>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Single)">
      <summary>指定した <see cref="T:System.Numerics.Vector2" /> オブジェクトと指定した値から、新しい <see cref="T:System.Numerics.Vector3" /> オブジェクトを作成します。</summary>
      <param name="value">2 つの要素を持つベクトル。</param>
      <param name="z">
        <see cref="F:System.Numerics.Vector3.Z" /> フィールドに代入する追加の値。</param>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Single)">
      <summary>3 つの要素が同じ値を持つ新しい <see cref="T:System.Numerics.Vector3" /> オブジェクトを作成します。</summary>
      <param name="value">3 つの要素すべてに代入する値。</param>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>指定した値を要素とするベクトルを作成します。</summary>
      <param name="x">
        <see cref="F:System.Numerics.Vector3.X" /> フィールドに代入する値。</param>
      <param name="y">
        <see cref="F:System.Numerics.Vector3.Y" /> フィールドに代入する値。</param>
      <param name="z">
        <see cref="F:System.Numerics.Vector3.Z" /> フィールドに代入する値。</param>
    </member>
    <member name="M:System.Numerics.Vector3.Abs(System.Numerics.Vector3)">
      <summary>指定したベクトルの各要素の絶対値を要素とするベクトルを返します。</summary>
      <param name="value">ベクトル。</param>
      <returns>絶対値ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>2 つのベクトルを加算します。</summary>
      <param name="left">加算する最初のベクトル。</param>
      <param name="right">加算する 2 番目のベクトル。</param>
      <returns>加算結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>ベクトルを最小値と最大値の間に制限します。</summary>
      <param name="value1">制限するベクトル。</param>
      <param name="min">最小値。</param>
      <param name="max">最大値。</param>
      <returns>制限付きベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.CopyTo(System.Single[])">
      <summary>ベクトルの要素を、指定された配列にコピーします。</summary>
      <param name="array">コピー先の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">現在のインスタンスの要素数が、配列内の要素数を超えています。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> が多次元です。</exception>
    </member>
    <member name="M:System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)">
      <summary>指定した配列に、指定したインデックス位置を開始位置として、ベクトルの要素をコピーします。</summary>
      <param name="array">コピー先の配列。</param>
      <param name="index">ベクトルの最初の要素のコピー先位置のインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">現在のインスタンスの要素数が、配列内の要素数を超えています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。  

または - 
<paramref name="index" /> が配列の長さ以上です。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> が多次元です。</exception>
    </member>
    <member name="M:System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>2 つのベクターのクロス積を計算します。</summary>
      <param name="vector1">最初のベクトル。</param>
      <param name="vector2">2 番目のベクトル。</param>
      <returns>クロス積。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>指定した 2 点間のユークリッド距離を計算します。</summary>
      <param name="value1">最初の点。</param>
      <param name="value2">2 番目の点。</param>
      <returns>距離。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>指定した 2 点間のユークリッド距離の 2 乗を返します。</summary>
      <param name="value1">最初の点。</param>
      <param name="value2">2 番目の点。</param>
      <returns>距離の 2 乗。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>最初のベクトルを 2 番目のベクトルで除算します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <returns>除算結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Single)">
      <summary>指定したベクトルを、指定したスカラー値で除算します。</summary>
      <param name="left">ベクトル。</param>
      <param name="divisor">スカラー値。</param>
      <returns>除算結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>2 つのベクトルのドット積を返します。</summary>
      <param name="vector1">最初のベクトル。</param>
      <param name="vector2">2 番目のベクトル。</param>
      <returns>ドット積。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Equals(System.Numerics.Vector3)">
      <summary>このインスタンスと、別のベクトルが等しいかどうかを示す値を返します。</summary>
      <param name="other">もう 1 つのベクトル。</param>
      <returns>2 つのベクトルが等しい場合は <see langword="true" />、そうでない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Equals(System.Object)">
      <summary>このインスタンスと、指定したオブジェクトが等しいかどうかを示す値を返します。</summary>
      <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
      <returns>現在のインスタンスと <paramref name="obj" /> が等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 <paramref name="obj" /> が <see langword="null" /> の場合、メソッドは <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>ハッシュ コード。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Length">
      <summary>このベクトル オブジェクトの長さを返します。</summary>
      <returns>ベクトルの長さ。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.LengthSquared">
      <summary>ベクトルの長さの 2 乗を返します。</summary>
      <returns>ベクトルの長さの 2 乗。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)">
      <summary>指定された重み付けに基づいて、2 つのベクトル間の線形補間を実行します。</summary>
      <param name="value1">最初のベクトル。</param>
      <param name="value2">2 番目のベクトル。</param>
      <param name="amount">
        <paramref name="value2" /> の重みを示す 0 と 1 の間の値。</param>
      <returns>補間ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>指定した 2 つのベクトルの要素の各ペアの大きい方を要素とするベクトルを返します。</summary>
      <param name="value1">最初のベクトル。</param>
      <param name="value2">2 番目のベクトル。</param>
      <returns>最大化ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>指定した 2 つのベクトルの要素の各ペアの小さい方を要素とするベクトルを返します。</summary>
      <param name="value1">最初のベクトル。</param>
      <param name="value2">2 番目のベクトル。</param>
      <returns>最小化ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>指定した 2 つのベクトルの要素の各ペアを乗算した値を値とする新しいベクトルを返します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <returns>要素ごとの積ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Single)">
      <summary>ベクトルに、指定したスカラーを乗算します。</summary>
      <param name="left">乗算するベクトル。</param>
      <param name="right">スカラー値。</param>
      <returns>スケール調節されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Single,System.Numerics.Vector3)">
      <summary>指定したベクトルとスカラー値を乗算します。</summary>
      <param name="left">スケール調節された値。</param>
      <param name="right">ベクトル。</param>
      <returns>スケール調節されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Negate(System.Numerics.Vector3)">
      <summary>指定したベクトルの符号を反転します。</summary>
      <param name="value">符号反転するベクトル。</param>
      <returns>符号反転後のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Normalize(System.Numerics.Vector3)">
      <summary>指定したベクトルと方向が同じで、長さが 1 であるベクトルを返します。</summary>
      <param name="value">正規化するベクトル。</param>
      <returns>正規化後のベクトル。</returns>
    </member>
    <member name="P:System.Numerics.Vector3.One">
      <summary>3 つの要素が 1 に等しいベクトルを取得します。</summary>
      <returns>3つの要素が1に等しいベクトル (つまり、ベクトル<c>(1, 1, 1)</c>を返します。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>2 つのベクトルを加算します。</summary>
      <param name="left">加算する最初のベクトル。</param>
      <param name="right">加算する 2 番目のベクトル。</param>
      <returns>加算結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>最初のベクトルを 2 番目のベクトルで除算します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <returns>
        <paramref name="left" /> を <paramref name="right" /> で除算した結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)">
      <summary>指定したベクトルを、指定したスカラー値で除算します。</summary>
      <param name="value1">ベクトル。</param>
      <param name="value2">スカラー値。</param>
      <returns>除算結果。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>指定した 2 つのベクトルの要素の各ペアが等しいかどうかを示す値を返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>
        <see langword="true" /> と <paramref name="left" /> が等しい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>指定した 2 つのベクトルが等しくないかどうかを示す値を返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>
        <paramref name="left" /> と <paramref name="right" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>指定した 2 つのベクトルの要素の各ペアを乗算した値を値とする新しいベクトルを返します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <returns>要素ごとの積ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)">
      <summary>指定したベクトルを、指定したスカラー値で乗算します。</summary>
      <param name="left">ベクトル。</param>
      <param name="right">スカラー値。</param>
      <returns>スケール調節されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Single,System.Numerics.Vector3)">
      <summary>スカラー値に、指定されたベクトルを乗算します。</summary>
      <param name="left">ベクトル。</param>
      <param name="right">スカラー値。</param>
      <returns>スケール調節されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>最初のベクトルから 2 番目のベクトルを減算します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <returns>
        <paramref name="left" /> から <paramref name="right" /> を減算した結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)">
      <summary>指定したベクトルを符号反転します。</summary>
      <param name="value">符号反転するベクトル。</param>
      <returns>符号反転後のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>指定した法線を持つ表面からのベクトルの反射を返します。</summary>
      <param name="vector">ソース ベクトル。</param>
      <param name="normal">反射の基準となる表面の法線。</param>
      <returns>反射されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)">
      <summary>指定したベクトルの各要素の平方根を要素として持つベクトルを返します。</summary>
      <param name="value">ベクトル。</param>
      <returns>ベクトルの平方根。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>最初のベクトルから 2 番目のベクトルを減算します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <returns>差ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString">
      <summary>既定の書式設定を使用して現在のインスタンスの文字列表現を返します。</summary>
      <returns>現在のインスタンスの文字列表現。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString(System.String)">
      <summary>指定した書式設定文字列を使用して個々の要素を書式設定することにより、現在のインスタンスの文字列表現を返します。</summary>
      <param name="format">個々の要素の書式を定義する、標準またはカスタム数値書式文字列。</param>
      <returns>現在のインスタンスの文字列表現。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString(System.String,System.IFormatProvider)">
      <summary>指定した書式設定文字列を使用して個々の要素を書式設定し、また、指定した書式設定プロバイダーを使用してカルチャ固有書式設定を定義することによって、現在のインスタンスの文字列表現を返します。</summary>
      <param name="format">個々の要素の書式を定義する、標準またはカスタム数値書式文字列。</param>
      <param name="formatProvider">カルチャ固有の書式情報を提供する書式設定プロバイダー。</param>
      <returns>現在のインスタンスの文字列表現。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>指定した 4 x 4 行列でベクトルを変換します。</summary>
      <param name="position">変換するベクトル。</param>
      <param name="matrix">変換行列。</param>
      <returns>変換されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
      <summary>指定した四元数回転値によって、ベクトルを変換します。</summary>
      <param name="value">回転するベクトル。</param>
      <param name="rotation">適用する回転。</param>
      <returns>変換されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>特定の 4 x 4 行列でベクトル法線を変換します。</summary>
      <param name="normal">ソース ベクトル。</param>
      <param name="matrix">行列。</param>
      <returns>変換されたベクトル。</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitX">
      <summary>ベクトル (1,0,0) を取得します。</summary>
      <returns>ベクター <c>(1, 0, 0)</c>。</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitY">
      <summary>ベクトル (0,1,0) を取得します。</summary>
      <returns>ベクター <c>(0, 1, 0)</c>。</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitZ">
      <summary>ベクトル (0,0,1) を取得します。</summary>
      <returns>ベクトル<c>(0, 0, 1)</c>。</returns>
    </member>
    <member name="F:System.Numerics.Vector3.X">
      <summary>ベクトルの X 成分。</summary>
    </member>
    <member name="F:System.Numerics.Vector3.Y">
      <summary>ベクトルの Y 成分。</summary>
    </member>
    <member name="F:System.Numerics.Vector3.Z">
      <summary>ベクトルの Z 成分。</summary>
    </member>
    <member name="P:System.Numerics.Vector3.Zero">
      <summary>3 つの要素が 0 に等しいベクトルを取得します。</summary>
      <returns>3つの要素が0に等しいベクトル (つまり、ベクトル<c>(0,</c>0, 0) を返します。</returns>
    </member>
    <member name="T:System.Numerics.Vector4">
      <summary>4 つの単精度浮動小数点値からなるベクトルを表します。</summary>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Numerics.Vector2,System.Single,System.Single)">
      <summary>指定された <see cref="T:System.Numerics.Vector2" /> オブジェクト、そして Z および W 成分から、新しい <see cref="T:System.Numerics.Vector4" /> オブジェクトを作成します。</summary>
      <param name="value">X 成分と Y 成分のために使用するベクトル。</param>
      <param name="z">Z 成分。</param>
      <param name="w">W 成分。</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>指定された <see cref="T:System.Numerics.Vector3" /> オブジェクトおよび W 成分から、新しい <see cref="T:System.Numerics.Vector4" /> オブジェクトを構成します。</summary>
      <param name="value">X、Y、Z の各成分のために使用するベクトル。</param>
      <param name="w">W 成分。</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Single)">
      <summary>4 つの要素の値が同じである新しい <see cref="T:System.Numerics.Vector4" /> オブジェクトを作成します。</summary>
      <param name="value">4 つの要素すべてに代入する値。</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>指定した値を要素とするベクトルを作成します。</summary>
      <param name="x">
        <see cref="F:System.Numerics.Vector4.X" /> フィールドに代入する値。</param>
      <param name="y">
        <see cref="F:System.Numerics.Vector4.Y" /> フィールドに代入する値。</param>
      <param name="z">
        <see cref="F:System.Numerics.Vector4.Z" /> フィールドに代入する値。</param>
      <param name="w">
        <see cref="F:System.Numerics.Vector4.W" /> フィールドに代入する値。</param>
    </member>
    <member name="M:System.Numerics.Vector4.Abs(System.Numerics.Vector4)">
      <summary>指定したベクトルの各要素の絶対値を要素とするベクトルを返します。</summary>
      <param name="value">ベクトル。</param>
      <returns>絶対値ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Add(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>2 つのベクトルを加算します。</summary>
      <param name="left">加算する最初のベクトル。</param>
      <param name="right">加算する 2 番目のベクトル。</param>
      <returns>加算結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Clamp(System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>ベクトルを最小値と最大値の間に制限します。</summary>
      <param name="value1">制限するベクトル。</param>
      <param name="min">最小値。</param>
      <param name="max">最大値。</param>
      <returns>制限付きベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.CopyTo(System.Single[])">
      <summary>ベクトルの要素を、指定された配列にコピーします。</summary>
      <param name="array">コピー先の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">現在のインスタンスの要素数が、配列内の要素数を超えています。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> が多次元です。</exception>
    </member>
    <member name="M:System.Numerics.Vector4.CopyTo(System.Single[],System.Int32)">
      <summary>指定した配列に、指定したインデックス位置を開始位置として、ベクトルの要素をコピーします。</summary>
      <param name="array">コピー先の配列。</param>
      <param name="index">ベクトルの最初の要素のコピー先位置のインデックス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">現在のインスタンスの要素数が、配列内の要素数を超えています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。  
または 
 <paramref name="index" /> が配列の長さ以上です。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> が多次元です。</exception>
    </member>
    <member name="M:System.Numerics.Vector4.Distance(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>指定した 2 点間のユークリッド距離を計算します。</summary>
      <param name="value1">最初の点。</param>
      <param name="value2">2 番目の点。</param>
      <returns>距離。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.DistanceSquared(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>指定した 2 点間のユークリッド距離の 2 乗を返します。</summary>
      <param name="value1">最初の点。</param>
      <param name="value2">2 番目の点。</param>
      <returns>距離の 2 乗。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>最初のベクトルを 2 番目のベクトルで除算します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <returns>除算結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Single)">
      <summary>指定したベクトルを、指定したスカラー値で除算します。</summary>
      <param name="left">ベクトル。</param>
      <param name="divisor">スカラー値。</param>
      <returns>除算結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Dot(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>2 つのベクトルのドット積を返します。</summary>
      <param name="vector1">最初のベクトル。</param>
      <param name="vector2">2 番目のベクトル。</param>
      <returns>ドット積。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Equals(System.Numerics.Vector4)">
      <summary>このインスタンスと、別のベクトルが等しいかどうかを示す値を返します。</summary>
      <param name="other">もう 1 つのベクトル。</param>
      <returns>2 つのベクトルが等しい場合は <see langword="true" />、そうでない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Equals(System.Object)">
      <summary>このインスタンスと、指定したオブジェクトが等しいかどうかを示す値を返します。</summary>
      <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
      <returns>現在のインスタンスと <paramref name="obj" /> が等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 <paramref name="obj" /> が <see langword="null" /> の場合、メソッドは <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>ハッシュ コード。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Length">
      <summary>このベクトル オブジェクトの長さを返します。</summary>
      <returns>ベクトルの長さ。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.LengthSquared">
      <summary>ベクトルの長さの 2 乗を返します。</summary>
      <returns>ベクトルの長さの 2 乗。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Lerp(System.Numerics.Vector4,System.Numerics.Vector4,System.Single)">
      <summary>指定された重み付けに基づいて、2 つのベクトル間の線形補間を実行します。</summary>
      <param name="value1">最初のベクトル。</param>
      <param name="value2">2 番目のベクトル。</param>
      <param name="amount">
        <paramref name="value2" /> の重みを示す 0 と 1 の間の値。</param>
      <returns>補間ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Max(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>指定した 2 つのベクトルの要素の各ペアの大きい方を要素とするベクトルを返します。</summary>
      <param name="value1">最初のベクトル。</param>
      <param name="value2">2 番目のベクトル。</param>
      <returns>最大化ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Min(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>指定した 2 つのベクトルの要素の各ペアの小さい方を要素とするベクトルを返します。</summary>
      <param name="value1">最初のベクトル。</param>
      <param name="value2">2 番目のベクトル。</param>
      <returns>最小化ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>指定した 2 つのベクトルの要素の各ペアを乗算した値を値とする新しいベクトルを返します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <returns>要素ごとの積ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Single)">
      <summary>ベクトルに、指定したスカラーを乗算します。</summary>
      <param name="left">乗算するベクトル。</param>
      <param name="right">スカラー値。</param>
      <returns>スケール調節されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Single,System.Numerics.Vector4)">
      <summary>指定したベクトルとスカラー値を乗算します。</summary>
      <param name="left">スケール調節された値。</param>
      <param name="right">ベクトル。</param>
      <returns>スケール調節されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Negate(System.Numerics.Vector4)">
      <summary>指定したベクトルの符号を反転します。</summary>
      <param name="value">符号反転するベクトル。</param>
      <returns>符号反転後のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Normalize(System.Numerics.Vector4)">
      <summary>指定したベクトルと方向が同じで、長さが 1 であるベクトルを返します。</summary>
      <param name="vector">正規化するベクトル。</param>
      <returns>正規化後のベクトル。</returns>
    </member>
    <member name="P:System.Numerics.Vector4.One">
      <summary>4 つの要素が 1 に等しいベクトルを取得します。</summary>
      <returns>
        <see cref="T:System.Numerics.Vector4" /> を返します。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Addition(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>2 つのベクトルを加算します。</summary>
      <param name="left">加算する最初のベクトル。</param>
      <param name="right">加算する 2 番目のベクトル。</param>
      <returns>加算結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>最初のベクトルを 2 番目のベクトルで除算します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <returns>
        <paramref name="left" /> を <paramref name="right" /> で除算した結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Single)">
      <summary>指定したベクトルを、指定したスカラー値で除算します。</summary>
      <param name="value1">ベクトル。</param>
      <param name="value2">スカラー値。</param>
      <returns>除算結果。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Equality(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>指定した 2 つのベクトルの要素の各ペアが等しいかどうかを示す値を返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>
        <see langword="true" /> と <paramref name="left" /> が等しい場合は <paramref name="right" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Inequality(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>指定した 2 つのベクトルが等しくないかどうかを示す値を返します。</summary>
      <param name="left">比較する最初のベクトル。</param>
      <param name="right">比較する 2 番目のベクトル。</param>
      <returns>
        <paramref name="left" /> と <paramref name="right" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>指定した 2 つのベクトルの要素の各ペアを乗算した値を値とする新しいベクトルを返します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <returns>要素ごとの積ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Single)">
      <summary>指定したベクトルを、指定したスカラー値で乗算します。</summary>
      <param name="left">ベクトル。</param>
      <param name="right">スカラー値。</param>
      <returns>スケール調節されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Single,System.Numerics.Vector4)">
      <summary>スカラー値に、指定されたベクトルを乗算します。</summary>
      <param name="left">ベクトル。</param>
      <param name="right">スカラー値。</param>
      <returns>スケール調節されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Subtraction(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>最初のベクトルから 2 番目のベクトルを減算します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <returns>
        <paramref name="left" /> から <paramref name="right" /> を減算した結果のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_UnaryNegation(System.Numerics.Vector4)">
      <summary>指定したベクトルを符号反転します。</summary>
      <param name="value">符号反転するベクトル。</param>
      <returns>符号反転後のベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.SquareRoot(System.Numerics.Vector4)">
      <summary>指定したベクトルの各要素の平方根を要素として持つベクトルを返します。</summary>
      <param name="value">ベクトル。</param>
      <returns>ベクトルの平方根。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Subtract(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>最初のベクトルから 2 番目のベクトルを減算します。</summary>
      <param name="left">最初のベクトル。</param>
      <param name="right">2 番目のベクトル。</param>
      <returns>差ベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString">
      <summary>既定の書式設定を使用して現在のインスタンスの文字列表現を返します。</summary>
      <returns>現在のインスタンスの文字列表現。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString(System.String)">
      <summary>指定した書式設定文字列を使用して個々の要素を書式設定することにより、現在のインスタンスの文字列表現を返します。</summary>
      <param name="format">個々の要素の書式を定義する、標準またはカスタム数値書式文字列。</param>
      <returns>現在のインスタンスの文字列表現。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString(System.String,System.IFormatProvider)">
      <summary>指定した書式設定文字列を使用して個々の要素を書式設定し、また、指定した書式設定プロバイダーを使用してカルチャ固有書式設定を定義することによって、現在のインスタンスの文字列表現を返します。</summary>
      <param name="format">個々の要素の書式を定義する、標準またはカスタム数値書式文字列。</param>
      <param name="formatProvider">カルチャ固有の書式情報を提供する書式設定プロバイダー。</param>
      <returns>現在のインスタンスの文字列表現。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>指定した 4 × 4 行列によって 2 次元ベクトルを変換します。</summary>
      <param name="position">変換するベクトル。</param>
      <param name="matrix">変換行列。</param>
      <returns>変換されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)">
      <summary>指定した四元数回転値によって、2 次元ベクトルを変換します。</summary>
      <param name="value">回転するベクトル。</param>
      <param name="rotation">適用する回転。</param>
      <returns>変換されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>指定した 4 × 4 行列によって 3 次元ベクトルを変換します。</summary>
      <param name="position">変換するベクトル。</param>
      <param name="matrix">変換行列。</param>
      <returns>変換されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
      <summary>指定した四元数回転値によって、3 次元ベクトルを変換します。</summary>
      <param name="value">回転するベクトル。</param>
      <param name="rotation">適用する回転。</param>
      <returns>変換されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Matrix4x4)">
      <summary>指定した 4 × 4 行列によって 4 次元ベクトルを変換します。</summary>
      <param name="vector">変換するベクトル。</param>
      <param name="matrix">変換行列。</param>
      <returns>変換されたベクトル。</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Quaternion)">
      <summary>指定した四元数回転値によって、4 次元ベクトルを変換します。</summary>
      <param name="value">回転するベクトル。</param>
      <param name="rotation">適用する回転。</param>
      <returns>変換されたベクトル。</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitW">
      <summary>ベクトル (0,0,0,1) を取得します。</summary>
      <returns>ベクター <c>(0、0、0、1)</c>。</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitX">
      <summary>ベクトル (1,0,0,0) を取得します。</summary>
      <returns>ベクター <c>(1, 0, 0, 0)</c>。</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitY">
      <summary>ベクトル (0,1,0,0) を取得します。</summary>
      <returns>ベクター <c>(0, 1, 0, 0)</c>。</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitZ">
      <summary>ベクトル (0,0,1,0) を取得します。</summary>
      <returns>ベクトル<c>(0, 0, 1, 0)</c>。</returns>
    </member>
    <member name="F:System.Numerics.Vector4.W">
      <summary>ベクトルの W 成分。</summary>
    </member>
    <member name="F:System.Numerics.Vector4.X">
      <summary>ベクトルの X 成分。</summary>
    </member>
    <member name="F:System.Numerics.Vector4.Y">
      <summary>ベクトルの Y 成分。</summary>
    </member>
    <member name="F:System.Numerics.Vector4.Z">
      <summary>ベクトルの Z 成分。</summary>
    </member>
    <member name="P:System.Numerics.Vector4.Zero">
      <summary>4 つの要素が 0 に等しいベクトルを取得します。</summary>
      <returns>4つの要素が0に等しいベクトル (つまり、ベクトル<c>(0, 0</c>, 0, 0) を返します。</returns>
    </member>
  </members>
</doc>
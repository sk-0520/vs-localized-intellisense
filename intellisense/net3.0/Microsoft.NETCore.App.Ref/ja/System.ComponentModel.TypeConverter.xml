<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.TypeConverter</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.AddingNewEventArgs">
      <summary>
        <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor">
      <summary>パラメーターを使用せずに <see cref="T:System.ComponentModel.AddingNewEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor(System.Object)">
      <summary>指定したオブジェクトを新しい項目として使用して、<see cref="T:System.ComponentModel.AddingNewEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="newObject">新しい項目値として使用する <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.ComponentModel.AddingNewEventArgs.NewObject">
      <summary>バインディング リストに追加するオブジェクトを取得または設定します。</summary>
      <returns>新しい項目として、関連付けられているコレクションに追加する <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventHandler">
      <summary>
        <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。通常は、データ コンテナーまたはデータ バインド コレクション。</param>
      <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.AddingNewEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.AmbientValueAttribute">
      <summary>プロパティに渡す値を指定し、そのプロパティが別のソースから値を取得するようにします。 これは "アンビエンス" と呼ばれています。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Boolean)">
      <summary>値としてブール値を指定して、<see cref="T:System.ComponentModel.AmbientValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">この属性の値。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Byte)">
      <summary>値として 8 ビット符号なし整数を指定して、<see cref="T:System.ComponentModel.AmbientValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">この属性の値。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Char)">
      <summary>値として Unicode 文字を指定して、<see cref="T:System.ComponentModel.AmbientValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">この属性の値。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Double)">
      <summary>値として倍精度浮動小数点数を指定して、<see cref="T:System.ComponentModel.AmbientValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">この属性の値。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int16)">
      <summary>値として 16 ビット符号付き整数を指定して、<see cref="T:System.ComponentModel.AmbientValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">この属性の値。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int32)">
      <summary>値として 32 ビット符号付き整数を指定して、<see cref="T:System.ComponentModel.AmbientValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">この属性の値。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int64)">
      <summary>値として 64 ビット符号付き整数を指定して、<see cref="T:System.ComponentModel.AmbientValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">この属性の値。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Object)">
      <summary>値としてオブジェクトを指定して、<see cref="T:System.ComponentModel.AmbientValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">この属性の値。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Single)">
      <summary>値として単精度浮動小数点数を指定して、<see cref="T:System.ComponentModel.AmbientValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">この属性の値。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.String)">
      <summary>値として文字列を設定して、<see cref="T:System.ComponentModel.AmbientValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">この属性の値。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Type,System.String)">
      <summary>値とその型を指定して、<see cref="T:System.ComponentModel.AmbientValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">
        <paramref name="value" /> パラメーターの <see cref="T:System.Type" />。</param>
      <param name="value">この属性の値。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.Equals(System.Object)">
      <summary>指定した <see cref="T:System.ComponentModel.AmbientValueAttribute" /> が現在の <see cref="T:System.ComponentModel.AmbientValueAttribute" /> と等しいかどうかを示します。</summary>
      <param name="obj">現在の <see cref="T:System.ComponentModel.AmbientValueAttribute" /> と比較する <see cref="T:System.ComponentModel.AmbientValueAttribute" />。</param>
      <returns>指定した <see langword="true" /> が現在の <see cref="T:System.ComponentModel.AmbientValueAttribute" /> と等しい場合は <see cref="T:System.ComponentModel.AmbientValueAttribute" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>現在の <see cref="T:System.ComponentModel.AmbientValueAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.AmbientValueAttribute.Value">
      <summary>
        <see cref="T:System.ComponentModel.AmbientValueAttribute" /> の値であるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.AmbientValueAttribute" /> の値であるオブジェクト。</returns>
    </member>
    <member name="T:System.ComponentModel.ArrayConverter">
      <summary>
        <see cref="T:System.Array" /> 型オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.ArrayConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>値オブジェクトを目的の型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <paramref name="value" /> の変換後のカルチャ。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">値の変換後の <see cref="T:System.Type" />。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>value パラメーターに指定された配列型のプロパティのコレクションを取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">プロパティを取得する対象となる配列の型を指定する <see cref="T:System.Object" />。</param>
      <param name="attributes">フィルターとして使用される、<see cref="T:System.Attribute" /> 型の配列。</param>
      <returns>配列に対して公開されているプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。コレクションにプロパティが格納されていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>このオブジェクトがプロパティをサポートしているかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>このオブジェクトのプロパティを見つけるために <see cref="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> を呼び出す必要があるので、<see langword="true" />。 このメソッドが <see langword="false" /> を返すことはありません。</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeCollection">
      <summary>属性のコレクションを表します。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.AttributeCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
      <summary>
        <see cref="T:System.ComponentModel.AttributeCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="attributes">コレクションの属性を提供する <see cref="T:System.Attribute" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributes" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Attributes">
      <summary>属性のコレクションを取得します。</summary>
      <returns>属性のコレクション。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
      <summary>指定した属性が属性コレクションに格納されているかどうかを判断します。</summary>
      <param name="attribute">コレクション内で検索する <see cref="T:System.Attribute" />。</param>
      <returns>指定した属性がコレクションに格納されているか、指定した属性型の既定の属性が格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
      <summary>属性配列にある指定したすべての属性が属性コレクションに格納されているかどうかを判断します。</summary>
      <param name="attributes">コレクション内で検索する <see cref="T:System.Attribute" /> 型の配列。</param>
      <returns>コレクションにすべての属性が格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
      <summary>指定したインデックスを開始位置として、配列にコレクションをコピーします。</summary>
      <param name="array">コレクションのコピー先の <see cref="T:System.Array" />。</param>
      <param name="index">コピーの開始位置を示すインデックス。</param>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Count">
      <summary>属性の数を取得します。</summary>
      <returns>属性の数。</returns>
    </member>
    <member name="F:System.ComponentModel.AttributeCollection.Empty">
      <summary>新しいコレクションを作成するのではなく、使用できる空のコレクションを指定します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
      <summary>既存の <see cref="T:System.ComponentModel.AttributeCollection" /> から新しい <see cref="T:System.ComponentModel.AttributeCollection" /> を作成します。</summary>
      <param name="existing">コピー元の <see cref="T:System.ComponentModel.AttributeCollection" />。</param>
      <param name="newAttributes">コレクションの属性を提供する <see cref="T:System.Attribute" /> 型の配列。 <see langword="null" /> の可能性があります。</param>
      <returns>
        <paramref name="existing" /> のコピーである新しい <see cref="T:System.ComponentModel.AttributeCollection" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="existing" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
      <summary>指定した <see cref="T:System.Attribute" /> の既定の <see cref="T:System.Type" /> を返します。</summary>
      <param name="attributeType">取得する属性の <see cref="T:System.Type" />。</param>
      <returns>指定された <paramref name="attributeType" /> の既定の <see cref="T:System.Attribute" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetEnumerator">
      <summary>このコレクションの列挙子を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 型の列挙子。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
      <summary>指定したインデックス番号の属性を取得します。</summary>
      <param name="index">
        <see cref="T:System.ComponentModel.AttributeCollection" /> の 0 から始まるインデックス。</param>
      <returns>指定したインデックス番号を持つ <see cref="T:System.Attribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
      <summary>指定した型の属性を取得します。</summary>
      <param name="attributeType">コレクションから取得する <see cref="T:System.Type" /> の <see cref="T:System.Attribute" />。</param>
      <returns>指定した型の <see cref="T:System.Attribute" />。そのような属性が存在しない場合は、指定した属性型の既定値。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
      <summary>指定した属性がコレクション内の属性と同じかどうかを判断します。</summary>
      <param name="attribute">コレクション内の属性と比較する対象の <see cref="T:System.Attribute" /> のインスタンス。</param>
      <returns>指定した属性がコレクションに格納されていて、その値がコレクション内の属性の値と同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
      <summary>指定した配列内の属性がコレクション内の属性と同じかどうかを判断します。</summary>
      <param name="attributes">コレクション内の属性と比較する対象の <see cref="T:System.CodeDom.MemberAttributes" /> の配列。</param>
      <returns>配列内の属性がコレクションに格納されていて、その値がコレクション内の属性の値と同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count">
      <summary>コレクションに格納されている要素の数を取得します。</summary>
      <returns>コレクションに格納されている要素の数。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary>コレクションへのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>コレクションへのアクセスが同期されている (スレッド セーフである) 場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary>コレクションへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>コレクションへのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
        <see cref="T:System.Collections.IEnumerator" /> の <see cref="T:System.Collections.IDictionary" /> を返します。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> の <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeProviderAttribute">
      <summary>属性のリダイレクトを有効にします。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)">
      <summary>指定した型名を使用して <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeName">指定する型の名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)">
      <summary>指定した型名とプロパティ名を使用して、<see cref="T:System.ComponentModel.AttributeProviderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeName">指定する型の名前。</param>
      <param name="propertyName">属性を取得するプロパティの名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)">
      <summary>指定した型を使用して、<see cref="T:System.ComponentModel.AttributeProviderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">指定する型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.PropertyName">
      <summary>属性を取得するプロパティの名前を取得します。</summary>
      <returns>属性を取得するプロパティの名前。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.TypeName">
      <summary>コンストラクターに渡されるアセンブリ修飾型名を取得します。</summary>
      <returns>コンストラクターで指定されたアセンブリ修飾型名。</returns>
    </member>
    <member name="T:System.ComponentModel.BaseNumberConverter">
      <summary>非浮動小数点型の基本型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、任意の型のオブジェクトをコンバーターのネイティブな型に変換できるかどうかを判断します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns>このコンバーターが操作を実行できる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="t">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns>このコンバーターが操作を実行できる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>特定のオブジェクトをコンバーターのネイティブな型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">数を表すカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換対象のオブジェクト。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.Exception">
        <paramref name="value" /> は、変換後の型として有効な値ではありません。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定したオブジェクトを別の型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">数を表すカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換対象のオブジェクト。</param>
      <param name="destinationType">オブジェクトの変換後の型。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="T:System.ComponentModel.BindableAttribute">
      <summary>メンバーが通常、バインディングに使用されるかどうかを指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean)">
      <summary>Boolean 値を指定して、<see cref="T:System.ComponentModel.BindableAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="bindable">プロパティをバインディングに使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean,System.ComponentModel.BindingDirection)">
      <summary>
        <see cref="T:System.ComponentModel.BindableAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="bindable">プロパティをバインディングに使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.BindingDirection" /> 値のいずれか。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>
        <see cref="T:System.ComponentModel.BindableAttribute" /> クラスの新しいインスタンスを <see cref="T:System.ComponentModel.BindableSupport" /> の値のいずれかで初期化します。</summary>
      <param name="flags">
        <see cref="T:System.ComponentModel.BindableSupport" /> 値のいずれか 1 つ。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport,System.ComponentModel.BindingDirection)">
      <summary>
        <see cref="T:System.ComponentModel.BindableAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="flags">
        <see cref="T:System.ComponentModel.BindableSupport" /> 値のいずれか。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.BindingDirection" /> 値のいずれか。</param>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Bindable">
      <summary>プロパティが通常、バインドに使用されることを示す値を取得します。</summary>
      <returns>プロパティが通常、バインドに使用される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.BindableAttribute" /> の既定値 (<see cref="F:System.ComponentModel.BindableAttribute.No" />) を指定します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Direction">
      <summary>このプロパティのデータ バインディングの方向を示す値を取得します。</summary>
      <returns>このプロパティのデータバインディングの方向。</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.Equals(System.Object)">
      <summary>2 つの <see cref="T:System.ComponentModel.BindableAttribute" /> オブジェクトが等しいかどうかを判断します。</summary>
      <param name="obj">比較対象のオブジェクト。</param>
      <returns>指定した <see cref="T:System.ComponentModel.BindableAttribute" /> が現在の <see cref="T:System.ComponentModel.BindableAttribute" /> と等しい場合は <see langword="true" />。等しくない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.GetHashCode">
      <summary>
        <see cref="T:System.ComponentModel.BindableAttribute" /> クラスのハッシュ関数として機能します。</summary>
      <returns>現在の <see cref="T:System.ComponentModel.BindableAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.IsDefaultAttribute">
      <summary>この属性が既定値かどうかを判断します。</summary>
      <returns>属性がこの属性クラスの既定値の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.No">
      <summary>プロパティが通常はバインドに使用されないことを指定します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Yes">
      <summary>プロパティが通常、バインドに使用されることを指定します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="T:System.ComponentModel.BindableSupport">
      <summary>プロパティをデータ要素または別のプロパティに連結できるかどうかを示す値を指定します。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Default">
      <summary>プロパティは既定値に設定されます。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.No">
      <summary>このプロパティは、デザイン時には連結できません。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Yes">
      <summary>このプロパティは、デザイン時に連結できます。</summary>
    </member>
    <member name="T:System.ComponentModel.BindingDirection">
      <summary>テンプレートを一方向または双方向のいずれでバインドできるのかを指定します。</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.OneWay">
      <summary>テンプレートはプロパティ値を受け入れるのみです。 ジェネリックな <see cref="T:System.Web.UI.ITemplate" /> で使用します。</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.TwoWay">
      <summary>テンプレートはプロパティ値を受け入れて公開できます。 <see cref="T:System.Web.UI.IBindableTemplate" /> で使用します。</summary>
    </member>
    <member name="T:System.ComponentModel.BindingList`1">
      <summary>データ バインディングをサポートしているジェネリック コレクションを提供します。</summary>
      <typeparam name="T">リスト内の要素の型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor">
      <summary>既定値を使用して <see cref="T:System.ComponentModel.BindingList`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>指定したリストを使用して、<see cref="T:System.ComponentModel.BindingList`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="list">
        <see cref="T:System.Collections.Generic.IList`1" /> に格納される項目の <see cref="T:System.ComponentModel.BindingList`1" />。</param>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.AddingNew">
      <summary>項目がリストに追加される前に発生します。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNew">
      <summary>新しい項目をコレクションに追加します。</summary>
      <returns>リストに追加された項目。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Forms.BindingSource.AllowNew" /> プロパティが <see langword="false" /> に設定されている。  

または - 
現在の項目の型に対応するパラメーターなしのパブリック コンストラクターがありません。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNewCore">
      <summary>コレクションの末尾に新しい項目を追加します。</summary>
      <returns>コレクションに追加された項目。</returns>
      <exception cref="T:System.InvalidCastException">新しい項目が、<see cref="T:System.ComponentModel.BindingList`1" /> に格納されているオブジェクトと同じ型ではありません。</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowEdit">
      <summary>リスト内の項目を編集できるかどうかを示す値を取得または設定します。</summary>
      <returns>リスト項目を編集できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowNew">
      <summary>
        <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> メソッドを使用してリストに項目を追加できるかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> メソッドを使用してリストに項目を追加できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、リストに含まれている、基になる型によって異なります。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowRemove">
      <summary>コレクションから項目を削除できるかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> メソッドを使用して、リストから項目を削除できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>派生クラスでオーバーライドされた場合は、項目を並べ替えます。それ以外の場合は <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="prop">並べ替える対象のプロパティを指定する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 値のいずれか 1 つ。</param>
      <exception cref="T:System.NotSupportedException">メソッドは、派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.CancelNew(System.Int32)">
      <summary>保留中の新しい項目を破棄します。</summary>
      <param name="itemIndex">追加する新しい項目のインデックス。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ClearItems">
      <summary>コレクションからすべての要素を削除します。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.EndNew(System.Int32)">
      <summary>保留中の新しい項目をコレクションにコミットします。</summary>
      <param name="itemIndex">追加する新しい項目のインデックス。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>検索が派生クラスに実装されている場合、指定した値の指定したプロパティ記述子を持つ項目のインデックスを検索します。実装されていない場合は <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="prop">検索対象の <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key">検索条件として使用する <paramref name="prop" /> の値。</param>
      <returns>プロパティ記述子に一致し、指定した値を格納している項目の 0 から始まるインデックス。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)" /> は、派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.InsertItem(System.Int32,`0)">
      <summary>リスト内の指定したインデックス位置に、指定した項目を挿入します。</summary>
      <param name="index">項目を挿入する位置の 0 から始まるインデックス番号。</param>
      <param name="item">リストに挿入する項目。</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.IsSortedCore">
      <summary>リストが並べ替えられたかどうかを示す値を取得します。</summary>
      <returns>リストが並べ替えられている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.ListChanged">
      <summary>リストまたはリスト内の項目が変更された場合に発生します。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.BindingList`1.AddingNew" /> イベントを発生させます。</summary>
      <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.AddingNewEventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> イベントを発生させます。</summary>
      <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.RaiseListChangedEvents">
      <summary>リストの項目を追加または削除すると <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> イベントが発生するかどうかを示す値を取得または設定します。</summary>
      <returns>項目を追加または削除すると <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> イベントが発生する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)">
      <summary>指定したインデックスにある項目を削除します。</summary>
      <param name="index">削除する項目の 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException">新しく追加された項目を削除しようとしており、<see cref="P:System.ComponentModel.IBindingList.AllowRemove" /> が <see langword="false" /> に設定されています。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveSortCore">
      <summary>派生クラスで並べ替えが実装されている場合は、<see cref="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> を使用して適用された並べ替えをすべて解除します。それ以外の場合は <see cref="T:System.NotSupportedException" /> を発生させます。</summary>
      <exception cref="T:System.NotSupportedException">メソッドは、派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetBindings">
      <summary>種類が <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> の <see cref="F:System.ComponentModel.ListChangedType.Reset" /> イベントを発生させます。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetItem(System.Int32)">
      <summary>指定した位置の項目に対して、種類が <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> の <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> イベントを発生させます。</summary>
      <param name="position">リセットされる項目の 0 から始まるインデックス。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.SetItem(System.Int32,`0)">
      <summary>指定したインデックス位置の項目を、指定した項目で置き換えます。</summary>
      <param name="index">置き換えられる項目の 0 から始まるインデックス。</param>
      <param name="item">指定したインデックス位置に存在する項目の新しい値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。  

または - 
<paramref name="index" /> が <see cref="P:System.Collections.ObjectModel.Collection`1.Count" /> より大きくなっています。</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortDirectionCore">
      <summary>リストが並べ替えられる順序を取得します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDirection" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.ComponentModel.ListSortDirection.Ascending" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortPropertyCore">
      <summary>派生クラスで並べ替えが実装されている場合、リストの並べ替えに使用されるプロパティ記述子を取得します。実装されていない場合は <see langword="null" /> を返します。</summary>
      <returns>リストの並べ替えに使用される <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsChangeNotificationCore">
      <summary>
        <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> イベントが有効かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> イベントがサポートされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSearchingCore">
      <summary>リストが検索をサポートしているかどうかを示す値を取得します。</summary>
      <returns>リストが検索をサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSortingCore">
      <summary>リストが並べ替えをサポートしているかどうかを示す値を取得します。</summary>
      <returns>リストが並べ替えをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>このメンバーの説明については、<see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" /> のトピックを参照してください。</summary>
      <param name="prop">検索条件として追加する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddNew">
      <summary>リストに新しい項目を追加します。 詳細については、「<see cref="M:System.ComponentModel.IBindingList.AddNew" />」を参照してください。</summary>
      <returns>リストに追加された項目。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowEdit">
      <summary>リスト内の項目を編集できるかどうかを示す値を取得します。</summary>
      <returns>リスト項目を編集できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowNew">
      <summary>
        <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> メソッドを使用してリストに新しい項目を追加できるかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> メソッドを使用してリストに項目を追加できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、リストに含まれている、基になる型によって異なります。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowRemove">
      <summary>リストから項目を削除できるかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> メソッドを使用して、リストから項目を削除できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> と <see cref="T:System.ComponentModel.ListSortDirection" /> に基づいて並べ替えを行います。 このメンバーの詳細については、<see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> のトピックを参照してください。</summary>
      <param name="prop">並べ替えのキーとなる <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 値のいずれか 1 つ。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>このメンバーの詳細については、「<see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />」をご覧ください。</summary>
      <param name="prop">検索対象の <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key">検索する <paramref name="prop" /> パラメーターの値。</param>
      <returns>指定された <see cref="T:System.ComponentModel.PropertyDescriptor" /> を保持する行のインデックス。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#IsSorted">
      <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.IsSorted" />」をご覧ください。</summary>
      <returns>
        <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" /> が呼び出され、<see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> は呼び出されていない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>このメンバーの説明については、<see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" /> のトピックを参照してください。</summary>
      <param name="prop">検索に使用されるインデックスから削除する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveSort">
      <summary>このメンバーの説明については、<see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> のトピックを参照してください。</summary>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortDirection">
      <summary>このメンバーの説明については、<see cref="P:System.ComponentModel.IBindingList.SortDirection" /> のトピックを参照してください。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDirection" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortProperty">
      <summary>このメンバーの説明については、<see cref="P:System.ComponentModel.IBindingList.SortProperty" /> のトピックを参照してください。</summary>
      <returns>並べ替えに使用されている <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />」をご覧ください。</summary>
      <returns>リストまたはリスト内の項目が変更されたときに <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> イベントを発生させる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />」をご覧ください。</summary>
      <returns>リストが <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> メソッドを使用した検索をサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />」をご覧ください。</summary>
      <returns>リストが並べ替えをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
      <summary>項目のプロパティ値が変更されると、種類が <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> の <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> イベントが発生するかどうかを示す値を取得します。 このメンバーは、派生クラスでオーバーライドすることはできません。</summary>
      <returns>
        <see langword="true" />リスト型がを実装<see cref="T:System.ComponentModel.INotifyPropertyChanged" />している<see langword="false" />場合は。それ以外の場合は。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="T:System.ComponentModel.BooleanConverter">
      <summary>
        <see cref="T:System.Boolean" /> 型オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.BooleanConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、指定したコンテキストを使用して特定の型のオブジェクトを Boolean オブジェクトに変換できるかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns>このオブジェクトが変換を実行できる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>特定の値オブジェクトを Boolean オブジェクトに変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">変換後のカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <returns>変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、変換後の型として有効な値ではありません。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Boolean データ型の標準値コレクションを取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>有効値の標準セットが格納されている <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> メソッドから返された標準値のリストが、排他的リストかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> から返された <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> が有効値の排他的リストであるため、<see langword="true" />。 このメソッドが <see langword="false" /> を返すことはありません。</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>リストから選択できる標準値セットをこのオブジェクトがサポートしているかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>オブジェクトがサポートしている標準値セットを見つけるために <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> を呼び出すことができるので、<see langword="true" />。 このメソッドが <see langword="false" /> を返すことはありません。</returns>
    </member>
    <member name="T:System.ComponentModel.ByteConverter">
      <summary>8 ビット符号なし整数オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.ByteConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.ByteConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventHandler">
      <summary>キャンセルできるイベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.CancelEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.CharConverter">
      <summary>Unicode 文字オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.CharConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、指定したコンテキストを使用して特定の型のオブジェクトを Unicode 文字オブジェクトに変換できるかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換元の型を表す <see cref="T:System.Type" />。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>特定のオブジェクトを Unicode 文字オブジェクトに変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <paramref name="value" /> の変換後のカルチャ。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <returns>変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、変換後の型として有効な値ではありません。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>引数を使用して、指定した値オブジェクトを Unicode 文字オブジェクトに変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <paramref name="value" /> の変換後のカルチャ。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">値の変換後の <see cref="T:System.Type" />。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeAction">
      <summary>コレクションがどのように変更されるかを示します。</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Add">
      <summary>コレクションに要素が追加されたことを示します。</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Refresh">
      <summary>コレクション全体が変更されたことを示します。 このような変更は、<see cref="M:System.Collections.CollectionBase.Clear" /> など、コレクション全体を操作するメソッドを使用した場合に発生します。</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Remove">
      <summary>コレクションから要素が削除されたことを示します。</summary>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventArgs">
      <summary>
        <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionChangeEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,System.Object)">
      <summary>
        <see cref="T:System.ComponentModel.CollectionChangeEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">コレクションがどのように変更されたかを示す <see cref="T:System.ComponentModel.CollectionChangeAction" /> 値の 1 つ。</param>
      <param name="element">変更されたコレクションのインスタンスを指定する <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Action">
      <summary>コレクションがどのように変更されたかを示すアクションを取得します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.CollectionChangeAction" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Element">
      <summary>変更されたコレクションのインスタンスを取得します。</summary>
      <returns>変更されたコレクションのインスタンスを表す <see cref="T:System.Object" />。コレクションを更新する場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventHandler">
      <summary>コレクションに要素を追加したり、コレクションから要素を削除したりすると発生する <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.CollectionConverter">
      <summary>コレクション オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.CollectionConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>値オブジェクトを目的の型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <paramref name="value" /> の変換後のカルチャ。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。 このパラメーターは、<see cref="T:System.Collections.ICollection" /> から継承する必要があります。</param>
      <param name="destinationType">値の変換後の <see cref="T:System.Type" />。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>指定したコンテキストと属性を使用して、value パラメーターで指定された配列型のプロパティのコレクションを取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">プロパティを取得する対象となる配列の型を指定する <see cref="T:System.Object" />。</param>
      <param name="attributes">フィルターとして使用される、<see cref="T:System.Attribute" /> 型の配列。</param>
      <returns>指定されたデータ型に対して公開されているプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。コレクションにプロパティが格納されていない場合は <see langword="null" />。 このメソッドは常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>このオブジェクトがプロパティをサポートしているかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>このオブジェクトのプロパティを見つけるために <see cref="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> を呼び出すことはできないので、<see langword="false" />。 このメソッドが <see langword="true" /> を返すことはありません。</returns>
    </member>
    <member name="T:System.ComponentModel.ComplexBindingPropertiesAttribute">
      <summary>複合データ バインディングをサポートするコンポーネントのデータ ソース プロパティおよびデータ メンバー プロパティを指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor">
      <summary>パラメーターを使用せずに <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String)">
      <summary>指定したデータ ソースを使用して、<see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dataSource">データ ソースとして使用するプロパティの名前。</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String,System.String)">
      <summary>指定したデータ ソースとデータ メンバーを使用して、<see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dataSource">データ ソースとして使用するプロパティの名前。</param>
      <param name="dataMember">データ ソースとして使用するプロパティの名前。</param>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataMember">
      <summary>
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> のバインド先となるコンポーネントのデータ メンバー プロパティの名前を取得します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> のバインド先となるコンポーネントのデータ メンバー プロパティの名前。</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataSource">
      <summary>
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> のバインド先となるコンポーネントのデータ ソース プロパティの名前を取得します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> のバインド先となるコンポーネントのデータ ソース プロパティの名前。</returns>
    </member>
    <member name="F:System.ComponentModel.ComplexBindingPropertiesAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> クラスの既定値を表します。</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> が、現在の <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> インスタンスと等しいかどうかを判断します。</summary>
      <param name="obj">現在の <see cref="T:System.Object" /> インスタンスと比較する <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />。</param>
      <returns>オブジェクトが現在のインスタンスと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" /> で、これらが等しくないことを示します。</returns>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentConverter">
      <summary>コンポーネントのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.#ctor(System.Type)">
      <summary>
        <see cref="T:System.ComponentModel.ComponentConverter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">このコンポーネント コンバーターに関連付ける型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>value パラメーターに指定された配列型のプロパティのコレクションを取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">プロパティを取得する対象のコンポーネントの型を指定する <see cref="T:System.Object" />。</param>
      <param name="attributes">フィルターとして使用される、<see cref="T:System.Attribute" /> 型の配列。</param>
      <returns>指定されたコンポーネントに対して公開されているプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。コレクションにプロパティが格納されていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>指定したコンテキストを使用して、オブジェクトがプロパティをサポートしているかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>このオブジェクトのプロパティを見つけるために <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> を呼び出す必要があるので、<see langword="true" />。 このメソッドが <see langword="false" /> を返すことはありません。</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentEditor">
      <summary>カスタムのコンポーネント エディターの基本クラスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.ComponentEditor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>コンポーネントを編集し、指定したコンテキストに基づいてコンポーネントが変更されたかどうかを示す値を返します。</summary>
      <param name="context">編集に関する詳細情報を取得するために使用できるオプションのコンテキスト オブジェクト。</param>
      <param name="component">編集対象のコンポーネント。</param>
      <returns>コンポーネントが変更された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.Object)">
      <summary>コンポーネントを編集し、このコンポーネントが変更されたかどうかを示す値を返します。</summary>
      <param name="component">編集対象のコンポーネント。</param>
      <returns>コンポーネントが変更された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentResourceManager">
      <summary>コンポーネントまたはオブジェクトのリソースを列挙するための簡単な機能を提供します。 <see cref="T:System.ComponentModel.ComponentResourceManager" /> クラスは、<see cref="T:System.Resources.ResourceManager" /> です。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.ComponentResourceManager" /> クラスの新しいインスタンスを既定値で初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor(System.Type)">
      <summary>指定した <see cref="T:System.ComponentModel.ComponentResourceManager" /> の情報に基づいて、サテライト アセンブリでリソースを検索する <see cref="T:System.Type" /> を作成します。</summary>
      <param name="t">
        <see cref="T:System.Type" /> がリソース ファイルを検索するための情報をすべて取得する元となる <see cref="T:System.ComponentModel.ComponentResourceManager" />。</param>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String)">
      <summary>オブジェクトの対応するプロパティにリソースの値を適用します。</summary>
      <param name="value">適用されるプロパティ値を格納する <see cref="T:System.Object" />。</param>
      <param name="objectName">リソースを検索するためのオブジェクトの名前を格納する <see cref="T:System.String" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> または <paramref name="objectName" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary>オブジェクトの対応するプロパティにリソースの値を適用します。</summary>
      <param name="value">適用されるプロパティ値を格納する <see cref="T:System.Object" />。</param>
      <param name="objectName">リソースを検索するためのオブジェクトの名前を格納する <see cref="T:System.String" />。</param>
      <param name="culture">リソースを適用するカルチャ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> または <paramref name="objectName" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.ComponentModel.Container">
      <summary>0 個以上のコンポーネントをカプセル化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Container" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent)">
      <summary>指定した <see cref="T:System.ComponentModel.Component" /> を <see cref="T:System.ComponentModel.Container" /> に追加します。 コンポーネントに名前が付いていません。</summary>
      <param name="component">追加するコンポーネント。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)">
      <summary>指定した <see cref="T:System.ComponentModel.Component" /> を <see cref="T:System.ComponentModel.Container" /> に追加し、名前を割り当てます。</summary>
      <param name="component">追加するコンポーネント。</param>
      <param name="name">コンポーネントに割り当てる、大文字小文字を区別しない一意の名前。  

または - 
コンポーネントに名前を付けない場合は <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> が一意ではありません。</exception>
    </member>
    <member name="P:System.ComponentModel.Container.Components">
      <summary>
        <see cref="T:System.ComponentModel.Container" /> 内のすべてのコンポーネントを取得します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Container" /> 内のコンポーネントを格納しているコレクション。</returns>
    </member>
    <member name="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>指定した <see cref="T:System.ComponentModel.ISite" /> 用にサイト <see cref="T:System.ComponentModel.IComponent" /> を作成し、そのサイトに特定の名前を割り当てます。</summary>
      <param name="component">サイトを作成する <see cref="T:System.ComponentModel.IComponent" />。</param>
      <param name="name">
        <paramref name="component" /> に割り当てる名前。名前の割り当てをスキップする場合は <see langword="null" />。</param>
      <returns>新規作成されたサイト。</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose">
      <summary>
        <see cref="T:System.ComponentModel.Container" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.Container" /> が使用しているアンマネージド リソースを解放します。オプションとして、マネージド リソースを解放することもできます。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Container.Finalize">
      <summary>
        <see cref="T:System.ComponentModel.Container" /> がガベージ コレクションによってクリアされる前に、アンマネージ リソースを解放し、その他のクリーンアップ操作を実行します。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.GetService(System.Type)">
      <summary>指定した型のサービス オブジェクトがある場合は、そのオブジェクトを取得します。</summary>
      <param name="service">取得するサービスの <see cref="T:System.Type" />。</param>
      <returns>要求したサービスを実装している <see cref="T:System.Object" />。サービスを解決できない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)">
      <summary>
        <see cref="T:System.ComponentModel.Container" /> からコンポーネントを削除します。</summary>
      <param name="component">削除するコンポーネント。</param>
    </member>
    <member name="M:System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)">
      <summary>
        <see cref="T:System.ComponentModel.Container" /> に <see langword="null" /> を設定しないで、<see cref="P:System.ComponentModel.IComponent.Site" /> からコンポーネントを削除します。</summary>
      <param name="component">削除するコンポーネント。</param>
    </member>
    <member name="M:System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)">
      <summary>コンポーネント名がこのコンテナーで一意であるかどうかを判断します。</summary>
      <param name="component">名前付きコンポーネント。</param>
      <param name="name">検証対象のコンポーネント名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> が一意ではありません。</exception>
    </member>
    <member name="T:System.ComponentModel.ContainerFilterService">
      <summary>コンテナー フィルター サービスの基本クラスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.ContainerFilterService" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.FilterComponents(System.ComponentModel.ComponentCollection)">
      <summary>コンポーネント コレクションのフィルター処理を行います。</summary>
      <param name="components">フィルター処理を行うコンポーネント コレクション。</param>
      <returns>変更したコレクションを表す <see cref="T:System.ComponentModel.ComponentCollection" />。</returns>
    </member>
    <member name="T:System.ComponentModel.CultureInfoConverter">
      <summary>
        <see cref="T:System.Globalization.CultureInfo" /> 型オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.CultureInfoConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、指定したコンテキストを使用して特定の型のオブジェクトを <see cref="T:System.Globalization.CultureInfo" /> に変換できるかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定した値オブジェクトを <see cref="T:System.Globalization.CultureInfo" /> に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">変換後のカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> に無効なカルチャが指定されています。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>値オブジェクトを目的の型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">変換後のカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">値の変換後の <see cref="T:System.Type" />。</param>
      <returns>変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetCultureName(System.Globalization.CultureInfo)">
      <summary>指定したカルチャの名前を取得します。</summary>
      <param name="culture">名前を取得するカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <returns>指定したカルチャの名前。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>指定したコンテキストを使用して <see cref="T:System.Globalization.CultureInfo" /> オブジェクトの標準値コレクションを取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>有効値の標準セットを格納している <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />。データ型が標準値セットをサポートしていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> から返された標準値のコレクションが、排他的リストかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> から返された <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> が、有効値の排他的リストではないので (他の値も有効であるため)、<see langword="false" />。 このメソッドが <see langword="true" /> を返すことはありません。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>指定したコンテキストを使用して、リストから選択できる標準値セットをオブジェクトがサポートするかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>オブジェクトがサポートしている標準値セットを見つけるために <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> を呼び出す必要があるので、<see langword="true" />。 このメソッドが <see langword="false" /> を返すことはありません。</returns>
    </member>
    <member name="T:System.ComponentModel.CustomTypeDescriptor">
      <summary>
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> インターフェイスの単純な既定の実装を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
      <summary>親のカスタムの型記述子を使用して、<see cref="T:System.ComponentModel.CustomTypeDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="parent">親のカスタムの型記述子。</param>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetAttributes">
      <summary>この型記述子によって表される型のカスタム属性のコレクションを返します。</summary>
      <returns>型の属性を格納している <see cref="T:System.ComponentModel.AttributeCollection" />。 既定値は、<see cref="F:System.ComponentModel.AttributeCollection.Empty" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetClassName">
      <summary>この型記述子によって表されるクラスの完全修飾名を返します。</summary>
      <returns>この型記述子によって記述される型の完全修飾クラス名を格納している <see cref="T:System.String" />。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetComponentName">
      <summary>この型記述子によって表されるクラスの名前を返します。</summary>
      <returns>この型記述子が記述するコンポーネント インスタンスの名前を格納している <see cref="T:System.String" />。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetConverter">
      <summary>この型記述子によって表される型の型コンバーターを返します。</summary>
      <returns>この型記述子によって表される型の <see cref="T:System.ComponentModel.TypeConverter" />。 既定値は新しく作成された <see cref="T:System.ComponentModel.TypeConverter" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent">
      <summary>この型記述子によって表されるオブジェクトの既定のイベントに使用するイベント記述子を返します。</summary>
      <returns>この型記述子によって表されるオブジェクトの既定のイベントに使用する <see cref="T:System.ComponentModel.EventDescriptor" />。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultProperty">
      <summary>この型記述子によって表されるオブジェクトの既定のプロパティに使用するプロパティ記述子を返します。</summary>
      <returns>この型記述子によって表されるオブジェクトの既定のプロパティに使用する <see cref="T:System.ComponentModel.PropertyDescriptor" />。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEditor(System.Type)">
      <summary>この型記述子によって表されるクラスに関連付けられる指定した型のエディターを返します。</summary>
      <param name="editorBaseType">取得するエディターの基本型。</param>
      <returns>この型記述子によって表されるクラスに関連付けられる指定した型のエディター。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents">
      <summary>この型記述子によって表されるオブジェクトのイベント記述子のコレクションを返します。</summary>
      <returns>この型記述子によって表されるオブジェクトのイベント記述子を格納している <see cref="T:System.ComponentModel.EventDescriptorCollection" />。 既定値は、<see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>この型記述子によって表されるオブジェクトのイベント記述子のフィルター処理されたコレクションを返します。</summary>
      <param name="attributes">フィルターとして使用される属性の配列。 この値は、<see langword="null" /> でもかまいません。</param>
      <returns>この型記述子によって表されるオブジェクトのイベント記述子を格納している <see cref="T:System.ComponentModel.EventDescriptorCollection" />。 既定値は、<see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties">
      <summary>この型記述子によって表されるオブジェクトのプロパティ記述子のコレクションを返します。</summary>
      <returns>この型記述子によって表されるオブジェクトのプロパティ記述子を格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。 既定値は、<see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>この型記述子によって表されるオブジェクトのプロパティ記述子のフィルター処理されたコレクションを返します。</summary>
      <param name="attributes">フィルターとして使用される属性の配列。 この値は、<see langword="null" /> でもかまいません。</param>
      <returns>この型記述子によって表されるオブジェクトのプロパティ記述子を格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。 既定値は、<see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>指定したプロパティ記述子によって記述されたプロパティを含むオブジェクトを返します。</summary>
      <param name="pd">所有オブジェクトを取得するプロパティ記述子。</param>
      <returns>型記述子によって指定されたプロパティを所有する <see cref="T:System.Object" />。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectAttribute">
      <summary>ある型を、<see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> オブジェクトへのバインドに適したオブジェクトとして識別します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.DataObjectAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.DataObjectAttribute" /> クラスの新しいインスタンスを初期化し、オブジェクトが <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> オブジェクトへのバインドに適しているかどうかを示します。</summary>
      <param name="isDataObject">オブジェクトが <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> オブジェクトへのバインドに適している場合は<see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.DataObject">
      <summary>クラスがデザイン時の <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> オブジェクトへのバインドに適していることを示します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.Default">
      <summary>クラスがデザイン時の <see cref="T:System.ComponentModel.DataObjectAttribute" /> オブジェクトへのバインドに適していることを示す、<see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> クラスの既定値を表します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.Equals(System.Object)">
      <summary>
        <see cref="T:System.ComponentModel.DataObjectAttribute" /> のこのインスタンスが別のオブジェクトのパターンと一致するかどうかを確認します。</summary>
      <param name="obj">
        <see cref="T:System.ComponentModel.DataObjectAttribute" /> のこのインスタンスと比較するオブジェクト。</param>
      <returns>このインスタンスが <paramref name="obj" /> パラメーターで指定されたインスタンスと同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectAttribute.IsDataObject">
      <summary>オブジェクトがデザイン時の <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> オブジェクトへのバインドに適していると見なされるかどうかを示す値を取得します。</summary>
      <returns>オブジェクトが <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> オブジェクトへのバインドに適していると見なされる場合は<see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.IsDefaultAttribute">
      <summary>属性の現在の値が既定値かどうかを示す値を取得します。</summary>
      <returns>属性の現在の値が既定値である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.NonDataObject">
      <summary>クラスがデザイン時の <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> オブジェクトへのバインドに適していないことを示します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="T:System.ComponentModel.DataObjectFieldAttribute">
      <summary>データ フィールドを表すプロパティのメタデータを提供します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> クラスの新しいインスタンスを初期化し、フィールドがデータ行の主キーかどうかを示します。</summary>
      <param name="primaryKey">フィールドがデータ行の主キーに含まれることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> クラスの新しいインスタンスを初期化し、フィールドがデータ行の主キーかどうか、フィールドがデータベースの ID フィールドかどうかを示します。</summary>
      <param name="primaryKey">フィールドがデータ行の主キーに含まれることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="isIdentity">フィールドがデータ行を一意に識別する ID フィールドであることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> クラスの新しいインスタンスを初期化し、フィールドがデータ行の主キーかどうか、フィールドがデータベースの ID フィールドかどうか、フィールドを null にできるかどうかを示します。</summary>
      <param name="primaryKey">フィールドがデータ行の主キーに含まれることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="isIdentity">フィールドがデータ行を一意に識別する ID フィールドであることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="isNullable">データ ストア内でフィールドを null にできることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary>
        <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> クラスの新しいインスタンスを初期化し、フィールドがデータ行の主キーかどうか、データベースの ID フィールドかどうか、null にできるかどうかを示し、フィールドの長さも設定します。</summary>
      <param name="primaryKey">フィールドがデータ行の主キーに含まれることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="isIdentity">フィールドがデータ行を一意に識別する ID フィールドであることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="isNullable">データ ストア内でフィールドを null にできることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="length">フィールドの長さ (バイト単位)。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.Equals(System.Object)">
      <summary>このインスタンスが指定されたオブジェクトに等しいかどうかを示す値を返します。</summary>
      <param name="obj">
        <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> のこのインスタンスと比較するオブジェクト。</param>
      <returns>このインスタンスが <paramref name="obj" /> パラメーターで指定されたインスタンスと同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsIdentity">
      <summary>プロパティが、基になるデータの ID フィールドを表しているかどうかを示す値を取得します。</summary>
      <returns>プロパティが、基になるデータの ID フィールドを表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsNullable">
      <summary>プロパティが、基になるデータ ストア内で null にできるフィールドを表しているかどうかを示す値を取得します。</summary>
      <returns>プロパティが、基になるデータ ストア内で null にできるフィールドを表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.Length">
      <summary>バイト単位のプロパティの長さを取得します。</summary>
      <returns>バイト単位のプロパティの長さ。設定されていない場合は -1。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.PrimaryKey">
      <summary>プロパティが、基になるデータの主キーに含まれるかどうかを示す値を取得します。</summary>
      <returns>プロパティが、データ ストアの主キーに含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodAttribute">
      <summary>型、メソッドが実行する操作の種類、およびメソッドが既定のデータ メソッドであるかどうかによって公開される、データ操作メソッドを識別します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType)">
      <summary>
        <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> クラスの新しいインスタンスを初期化し、メソッドによって実行されるデータ操作の種類を識別します。</summary>
      <param name="methodType">メソッドによって実行されるデータ操作を示す <see cref="T:System.ComponentModel.DataObjectMethodType" /> 値の 1 つ。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType,System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> クラスの新しいインスタンスを初期化して、メソッドによって実行されるデータ操作の種類を識別し、さらにそのメソッドがそのデータ オブジェクトによって公開される既定のデータ メソッドかどうかを識別します。</summary>
      <param name="methodType">メソッドによって実行されるデータ操作を示す <see cref="T:System.ComponentModel.DataObjectMethodType" /> 値の 1 つ。</param>
      <param name="isDefault">この属性が適用されるメソッドが、指定した <paramref name="methodType" /> のデータ オブジェクトの既定のメソッドである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Equals(System.Object)">
      <summary>このインスタンスが指定されたオブジェクトに等しいかどうかを示す値を返します。</summary>
      <param name="obj">
        <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> のこのインスタンスと比較するオブジェクト。</param>
      <returns>このインスタンスが <paramref name="obj" /> パラメーターで指定されたインスタンスと同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.IsDefault">
      <summary>
        <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> が適用されるメソッドが、特定のメソッドの種類のデータ オブジェクトによって公開される既定のデータ メソッドであるかどうかを示す値を取得します。</summary>
      <returns>メソッドが、オブジェクトによって公開されるメソッドの種類の既定のメソッドである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Match(System.Object)">
      <summary>対象のインスタンスが、指定した属性と共通のパターンを共有するかどうかを示す値を取得します。</summary>
      <param name="obj">
        <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> のこのインスタンスと比較するオブジェクト。</param>
      <returns>このインスタンスが <paramref name="obj" /> パラメーターで指定されたインスタンスと同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.MethodType">
      <summary>メソッドによって実行されるデータ操作の種類を示す <see cref="T:System.ComponentModel.DataObjectMethodType" /> 値を取得します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.DataObjectMethodType" /> が適用されるメソッドによって実行されるデータ操作の種類を示す <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 値の 1 つ。</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodType">
      <summary>メソッドに適用された <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> で指定された、メソッドによって実行されるデータ操作の種類を示します。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Delete">
      <summary>メソッドが、データを削除するデータ操作に使用されることを示します。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Fill">
      <summary>メソッドが、<see cref="T:System.Data.DataSet" /> オブジェクトにデータを格納するデータ操作に使用されることを示します。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Insert">
      <summary>メソッドが、データを挿入するデータ操作に使用されることを示します。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Select">
      <summary>メソッドが、データを取得するデータ操作に使用されることを示します。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Update">
      <summary>メソッドが、データを更新するデータ操作に使用されることを示します。</summary>
    </member>
    <member name="T:System.ComponentModel.DateTimeConverter">
      <summary>
        <see cref="T:System.DateTime" /> 型オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.DateTimeConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、指定したコンテキストを使用して特定の型のオブジェクトを <see cref="T:System.DateTime" /> に変換できるかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns>このオブジェクトが変換を実行できる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定した値オブジェクトを <see cref="T:System.DateTime" /> に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">オプションの <see cref="T:System.Globalization.CultureInfo" />。 指定されなかった場合は、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <returns>変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、変換後の型として有効な値ではありません。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>引数を使用して、指定した値オブジェクトを <see cref="T:System.DateTime" /> に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">オプションの <see cref="T:System.Globalization.CultureInfo" />。 指定されなかった場合は、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">値の変換後の <see cref="T:System.Type" />。</param>
      <returns>変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="T:System.ComponentModel.DateTimeOffsetConverter">
      <summary>
        <see cref="T:System.DateTimeOffset" /> 構造体のさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.DateTimeOffsetConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指定した変換元の型のオブジェクトを <see cref="T:System.DateTimeOffset" /> に変換できるかどうか示す値を返します。</summary>
      <param name="context">日付形式コンテキスト。</param>
      <param name="sourceType">確認する対象の変換元の型。</param>
      <returns>指定した型を <see cref="T:System.DateTimeOffset" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指定した型のオブジェクトに <see cref="T:System.DateTimeOffset" /> を変換できるかどうか示す値を返します。</summary>
      <param name="context">日付形式コンテキスト。</param>
      <param name="destinationType">確認する対象の変換先の型。</param>
      <returns>指定した型に <see cref="T:System.DateTimeOffset" /> を変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したオブジェクトを <see cref="T:System.DateTimeOffset" /> に変換します。</summary>
      <param name="context">日付形式コンテキスト。</param>
      <param name="culture">日付カルチャ。</param>
      <param name="value">変換されるオブジェクト。</param>
      <returns>指定したオブジェクトを表す <see cref="T:System.DateTimeOffset" />。</returns>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <see cref="T:System.DateTimeOffset" /> を、指定した型のオブジェクトに変換します。</summary>
      <param name="context">日付形式コンテキスト。</param>
      <param name="culture">日付カルチャ。</param>
      <param name="value">変換される <see cref="T:System.DateTimeOffset" />。</param>
      <param name="destinationType">変換後の型。</param>
      <returns>
        <see cref="T:System.DateTimeOffset" /> を表す指定した型のオブジェクト。</returns>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="T:System.ComponentModel.DecimalConverter">
      <summary>
        <see cref="T:System.Decimal" /> 型オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.DecimalConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>引数を使用して、指定した値オブジェクトを <see cref="T:System.Decimal" /> に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">オプションの <see cref="T:System.Globalization.CultureInfo" />。 指定されなかった場合は、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">値の変換後の <see cref="T:System.Type" />。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="T:System.ComponentModel.DefaultBindingPropertyAttribute">
      <summary>コンポーネントの既定のバインディング プロパティを指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor">
      <summary>パラメーターを使用せずに <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor(System.String)">
      <summary>指定したプロパティ名を使用して、<see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">既定のバインディング プロパティの名前。</param>
    </member>
    <member name="F:System.ComponentModel.DefaultBindingPropertyAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> クラスの既定値を表します。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> が、現在の <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> インスタンスと等しいかどうかを判断します。</summary>
      <param name="obj">現在の <see cref="T:System.Object" /> インスタンスと比較する <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />。</param>
      <returns>オブジェクトが現在のインスタンスと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" /> で、これらが等しくないことを示します。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultBindingPropertyAttribute.Name">
      <summary>
        <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> のバインド先となるコンポーネントで使用する既定のバインディング プロパティの名前を取得します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> のバインド先となるコンポーネントで使用する既定のバインディング プロパティの名前。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultEventAttribute">
      <summary>コンポーネントの既定のイベントを指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.ComponentModel.DefaultEventAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">この属性が関連付けられているコンポーネントの既定のイベント名。</param>
    </member>
    <member name="F:System.ComponentModel.DefaultEventAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.DefaultEventAttribute" /> の既定値 (<see langword="null" />) を指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.Equals(System.Object)">
      <summary>指定したオブジェクトの値が現在の <see cref="T:System.ComponentModel.DefaultEventAttribute" /> と等しいかどうかを示す値を返します。</summary>
      <param name="obj">値が等しいかどうかを確認するオブジェクト。</param>
      <returns>指定したオブジェクトの値が現在の値と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultEventAttribute.Name">
      <summary>この属性が関連付けられているコンポーネントの既定のイベント名を取得します。</summary>
      <returns>この属性が関連付けられているコンポーネントの既定のイベント名。 既定値は <see langword="null" /> です。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultPropertyAttribute">
      <summary>コンポーネントの既定のプロパティを指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">この属性が関連付けられているコンポーネントの既定のプロパティ名。</param>
    </member>
    <member name="F:System.ComponentModel.DefaultPropertyAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> の既定値 (<see langword="null" />) を指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.Equals(System.Object)">
      <summary>指定したオブジェクトの値が現在の <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> と等しいかどうかを示す値を返します。</summary>
      <param name="obj">値が等しいかどうかを確認するオブジェクト。</param>
      <returns>指定したオブジェクトの値が現在の値と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultPropertyAttribute.Name">
      <summary>この属性が関連付けられているコンポーネントの既定のプロパティ名を取得します。</summary>
      <returns>この属性が関連付けられているコンポーネントの既定のプロパティ名。 既定値は <see langword="null" /> です。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventArgs">
      <summary>
        <see cref="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ActiveDesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.Design.IDesignerHost)">
      <summary>
        <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="oldDesigner">これからアクティブでなくなるドキュメント。</param>
      <param name="newDesigner">これからアクティブになるドキュメント。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.NewDesigner">
      <summary>これからアクティブになるドキュメントを取得します。</summary>
      <returns>アクティブになるドキュメントを表す <see cref="T:System.ComponentModel.Design.IDesignerHost" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.OldDesigner">
      <summary>これからアクティブでなくなるドキュメントを取得します。</summary>
      <returns>アクティブでなくなるドキュメントを表す <see cref="T:System.ComponentModel.Design.IDesignerHost" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventHandler">
      <summary>
        <see cref="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.CheckoutException">
      <summary>ソース コード管理プログラムにチェックインされているファイルのチェックアウトをキャンセルするか、チェックアウトが失敗した場合にスローされる例外。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor">
      <summary>メッセージやエラー コードを関連付けずに、<see cref="T:System.ComponentModel.Design.CheckoutException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>指定したシリアル化データとコンテキストを使用して、<see cref="T:System.ComponentModel.Design.CheckoutException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">逆シリアル化に使用する <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">逆シリアル化に使用する転送先。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.ComponentModel.Design.CheckoutException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Exception)">
      <summary>詳細説明と例外を指定して、<see cref="T:System.ComponentModel.Design.CheckoutException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーの詳細説明。</param>
      <param name="innerException">この例外の原因である内部例外への参照。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Int32)">
      <summary>指定したメッセージおよびエラー コードを使用して、<see cref="T:System.ComponentModel.Design.CheckoutException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するメッセージ。</param>
      <param name="errorCode">渡すエラー コード。</param>
    </member>
    <member name="F:System.ComponentModel.Design.CheckoutException.Canceled">
      <summary>チェックアウトがキャンセルされたことを示す、<see cref="T:System.ComponentModel.Design.CheckoutException" /> クラスの新しいインスタンスを初期化します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.CommandID">
      <summary>数値コマンド ID と GUID メニュー グループ ID から構成される一意のコマンド ID を表します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.#ctor(System.Guid,System.Int32)">
      <summary>指定したメニュー グループ GUID とコマンド ID 番号を使用して、<see cref="T:System.ComponentModel.Design.CommandID" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="menuGroup">メニュー コマンドが属するグループの GUID。</param>
      <param name="commandID">このメニュー コマンドの数値 ID。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.Equals(System.Object)">
      <summary>2 つの <see cref="T:System.ComponentModel.Design.CommandID" /> インスタンスが等しいかどうかを判断します。</summary>
      <param name="obj">比較対象のオブジェクト。</param>
      <returns>指定したオブジェクトがこのオブジェクトに等しい場合は、<see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。</summary>
      <returns>現在の <see cref="T:System.Object" /> のハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.Guid">
      <summary>
        <see cref="T:System.ComponentModel.Design.CommandID" /> で識別されるメニュー コマンドが属するメニュー グループの GUID を取得します。</summary>
      <returns>コマンドのコマンド グループの GUID。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.ID">
      <summary>数値コマンド ID を取得します。</summary>
      <returns>コマンド ID 番号。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.ToString">
      <summary>現在のオブジェクトを表す <see cref="T:System.String" /> を返します。</summary>
      <returns>GUID および整数 ID の両方のコマンド ID 情報を含む文字列。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> イベントのデータを提供します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangedEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>
        <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="component">変更されたコンポーネント。</param>
      <param name="member">変更されたメンバーを表す <see cref="T:System.ComponentModel.MemberDescriptor" />。</param>
      <param name="oldValue">変更されたメンバーの変更前の値。</param>
      <param name="newValue">変更されたメンバーの変更後の値。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Component">
      <summary>変更されたコンポーネントを取得します。</summary>
      <returns>変更されたコンポーネントを表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Member">
      <summary>変更されたメンバーを取得します。</summary>
      <returns>変更されたメンバーを示す <see cref="T:System.ComponentModel.MemberDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.NewValue">
      <summary>変更されたメンバーの変更後の値を取得します。</summary>
      <returns>変更されたメンバーの変更後の値。 このプロパティは <see langword="null" /> に設定できます。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.OldValue">
      <summary>変更されたメンバーの変更前の値を取得します。</summary>
      <returns>変更されたメンバーの変更前の値。 このプロパティは <see langword="null" /> に設定できます。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventHandler">
      <summary>
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> イベントのデータを提供します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangingEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>
        <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="component">変更されようとしているコンポーネント。</param>
      <param name="member">変更されようとしているコンポーネントのメンバーを示す <see cref="T:System.ComponentModel.MemberDescriptor" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Component">
      <summary>変更されようとしているコンポーネント、または変更されようとしているメンバーの親コンテナーであるコンポーネントを取得します。</summary>
      <returns>変更されようとしているメンバーを持つコンポーネント。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Member">
      <summary>変更されようとしているメンバーを取得します。</summary>
      <returns>変更されようとしているメンバーが判明している場合は、そのメンバーを示す <see cref="T:System.ComponentModel.MemberDescriptor" />。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventHandler">
      <summary>
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> イベント。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> の各イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentEventArgs.#ctor(System.ComponentModel.IComponent)">
      <summary>
        <see cref="T:System.ComponentModel.Design.ComponentEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="component">イベントのソースであるコンポーネント。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentEventArgs.Component">
      <summary>イベントに関連付けられているコンポーネントを取得します。</summary>
      <returns>イベントに関連付けられているコンポーネント。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventHandler">
      <summary>コンポーネント レベルのイベントに対して発生する <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> の各イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentRenameEventArgs.#ctor(System.Object,System.String,System.String)">
      <summary>
        <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="component">名前が変更されるコンポーネント。</param>
      <param name="oldName">コンポーネントの変更前の名前。</param>
      <param name="newName">コンポーネントの変更後の名前。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.Component">
      <summary>名前が変更されるコンポーネントを取得します。</summary>
      <returns>名前が変更されるコンポーネント。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.NewName">
      <summary>名前変更イベントが発生した後のコンポーネントの名前を取得します。</summary>
      <returns>名前変更イベントが発生した後のコンポーネントの名前。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.OldName">
      <summary>名前変更イベントが発生する前のコンポーネントの名前を取得します。</summary>
      <returns>コンポーネントの変更前の名前。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventHandler">
      <summary>
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerCollection">
      <summary>デザイナーのコレクションを表します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.Collections.IList)">
      <summary>指定した一連のデザイナーを格納する、<see cref="T:System.ComponentModel.Design.DesignerCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="designers">追加するデザイナーのコレクションを含むリスト。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.ComponentModel.Design.IDesignerHost[])">
      <summary>指定したデザイナーを格納する、<see cref="T:System.ComponentModel.Design.DesignerCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="designers">格納する <see cref="T:System.ComponentModel.Design.IDesignerHost" /> オブジェクトの配列。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Count">
      <summary>コレクション内のデザイナーの数を取得します。</summary>
      <returns>コレクション内のデザイナーの数。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.GetEnumerator">
      <summary>コレクションの新しい列挙子を取得します。</summary>
      <returns>コレクションを列挙する <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Item(System.Int32)">
      <summary>指定したインデックスにあるデザイナーを取得します。</summary>
      <param name="index">返されるデザイナーのインデックス。</param>
      <returns>指定したインデックスにあるデザイナー。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>コレクションの要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array">コレクションから要素がコピーされる 1 次元の <see cref="T:System.Array" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#Count">
      <summary>コレクションに格納されている要素の数を取得します。</summary>
      <returns>コレクションに格納されている要素の数。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#SyncRoot">
      <summary>コレクションへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>コレクションへのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションの新しい列挙子を取得します。</summary>
      <returns>コレクションを列挙する <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> イベントおよび <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="host">ドキュメントの <see cref="T:System.ComponentModel.Design.IDesignerHost" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerEventArgs.Designer">
      <summary>ドキュメントのホストを取得します。</summary>
      <returns>ドキュメントの <see cref="T:System.ComponentModel.Design.IDesignerHost" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventHandler">
      <summary>ドキュメントが作成または破棄されるときにそれぞれ発生する <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> イベントと <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.Design.DesignerEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService">
      <summary>デザイナーのオプションの値を取得および設定するために使用する基本クラスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerOptionService" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.CreateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.String,System.Object)">
      <summary>名前を指定して新しい <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> を作成し、指定した親に追加します。</summary>
      <param name="parent">デザイナー オプションの親コレクション。 ルート オブジェクトのコレクションを除き、すべてのコレクションが親を持ちます。</param>
      <param name="name">このコレクションの名前。</param>
      <param name="value">このコレクションのプロパティを提供するオブジェクト。 コレクションがプロパティを提供しない場合は <see langword="null" /> でもかまいません。</param>
      <returns>指定された名前を持つ新しい <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parent" /> または <paramref name="name" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> が空の文字列です。</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection">
      <summary>デザイナー オプションのコレクションを格納します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>コレクション全体を互換性のある 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まります。</summary>
      <param name="array">コレクションから要素がコピーされる 1 次元の <see cref="T:System.Array" />。 <paramref name="array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Count">
      <summary>この <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> が格納する子オプション コレクションの数を取得します。</summary>
      <returns>この <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> が格納する子オプション コレクションの数。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.GetEnumerator">
      <summary>このコレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" /> を返します。</summary>
      <returns>このコレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.IndexOf(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>このコレクションの範囲で、指定した値が最初に見つかった位置のインデックスを返します。</summary>
      <param name="value">コレクション内で検索するオブジェクト。</param>
      <returns>コレクション全体で値が見つかった場合は、その値が最初に見つかった位置のインデックス。それ以外の場合は、コレクションの下限 - 1。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.Int32)">
      <summary>指定したインデックス位置にある子コレクションを取得します。</summary>
      <param name="index">取得する子コレクションの、0 から始まるインデックス。</param>
      <returns>指定したインデックス位置にある子コレクション。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.String)">
      <summary>指定した名前を持つ子コレクションを取得します。</summary>
      <param name="name">子コレクションの名前。</param>
      <returns>
        <paramref name="name" /> パラメーターで指定された名前を持つ子コレクション。名前が見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Name">
      <summary>この <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> の名前を取得します。</summary>
      <returns>この <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> の名前。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Parent">
      <summary>親コレクション オブジェクトを取得します。</summary>
      <returns>親コレクション オブジェクト。親が存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Properties">
      <summary>この <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> によって提供されるプロパティのコレクションと、そのすべての子を取得します。</summary>
      <returns>この <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> によって提供されるプロパティのコレクションと、そのすべての子。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.ShowDialog">
      <summary>ユーザーがこの <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> のオプションを構成できるダイアログ ボックス ユーザー インターフェイス (UI) を表示します。</summary>
      <returns>ダイアログ ボックスを表示できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary>コレクションへのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>コレクションへのアクセスが同期されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#SyncRoot">
      <summary>コレクションへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>コレクションへのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Add(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> に項目を追加します。</summary>
      <param name="value">
        <see cref="T:System.Object" /> に追加する <see cref="T:System.Collections.IList" />。</param>
      <returns>新しい要素が挿入された位置。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Clear">
      <summary>コレクションからすべての項目を削除します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Contains(System.Object)">
      <summary>コレクションに特定の値が格納されているかどうかを判断します。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Object" /> がコレクション内で見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>コレクション内での指定した項目のインデックスを調べます。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.Object" />。</param>
      <returns>リストに存在する場合は <paramref name="value" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>コレクション内の指定したインデックスの位置に項目を挿入します。</summary>
      <param name="index">
        <paramref name="value" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="value">コレクションに挿入する <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsFixedSize">
      <summary>コレクションが固定サイズかどうかを示す値を取得します。</summary>
      <returns>コレクションが固定サイズの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsReadOnly">
      <summary>コレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>コレクションが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary>指定したインデックスにある要素を取得または設定します。</summary>
      <param name="index">取得または設定する要素の、0 から始まるインデックス番号。</param>
      <returns>指定したインデックス位置にある要素。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary>特定のオブジェクトの最初に出現したものをコレクションから削除します。</summary>
      <param name="value">コレクションから削除する <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>指定したインデックスにあるコレクション項目を削除します。</summary>
      <param name="index">削除する項目の 0 から始まるインデックス。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.Options">
      <summary>このサービスのオプション コレクションを取得します。</summary>
      <returns>使用できるデザイナー オプションが設定される <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> を値を読み込みます。</summary>
      <param name="options">値を読み込むコレクション。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.ShowDialog(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.Object)">
      <summary>指定したオブジェクトのオプション ダイアログ ボックスを表示します。</summary>
      <param name="options">呼び出すオブジェクトを格納するオプション コレクション。</param>
      <param name="optionObject">実際のオプション オブジェクト。</param>
      <returns>ダイアログ ボックスが表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#GetOptionValue(System.String,System.String)">
      <summary>パッケージで定義したオプションの値を取得します。</summary>
      <param name="pageName">オプションのバインド先となるページ。</param>
      <param name="valueName">オプション値の名前。</param>
      <returns>
        <paramref name="valueName" /> という名前のオプションの値。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pageName" /> または <paramref name="valueName" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#SetOptionValue(System.String,System.String,System.Object)">
      <summary>パッケージで定義したオプションの値を設定します。</summary>
      <param name="pageName">オプションのバインド先となるページ。</param>
      <param name="valueName">オプション値の名前。</param>
      <param name="value">オプションの値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pageName" /> または <paramref name="valueName" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransaction">
      <summary>パフォーマンスを向上し、ほとんどの変更内容を元に戻せるようにするために、デザイン時の一連の操作をグループ化する手段を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor">
      <summary>説明を指定せずに <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)">
      <summary>トランザクションの説明を指定して、<see cref="T:System.ComponentModel.Design.DesignerTransaction" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="description">トランザクションの説明。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Cancel">
      <summary>トランザクションをキャンセルし、そのトランザクションのイベントによって行われた変更をすべて元に戻そうとします。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Canceled">
      <summary>トランザクションがキャンセルされたかどうかを示す値を取得します。</summary>
      <returns>トランザクションがキャンセルされた場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Commit">
      <summary>トランザクションをコミットします。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Committed">
      <summary>トランザクションがコミットされたかどうかを示す値を取得します。</summary>
      <returns>トランザクションがコミットされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Description">
      <summary>トランザクションの説明を取得します。</summary>
      <returns>トランザクションの説明。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Finalize">
      <summary>オブジェクトと関連付けられたリソースを解放します。 このトランザクションがまだコミットされていなかった場合、このオーバーライドがこのトランザクションをコミットします。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCancel">
      <summary>
        <see langword="Cancel" /> イベントを発生させます。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCommit">
      <summary>トランザクションの実際のコミット処理を実行します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> イベントおよび <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean)">
      <summary>デザイナーがトランザクションに対して <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> を呼び出したかどうかを示す値を指定して、<see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="commit">トランザクションがコミットされたかどうかを示す値。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean,System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="commit">トランザクションがコミットされたかどうかを示す値。</param>
      <param name="lastTransaction">このトランザクションが最後に閉じるトランザクションである場合、<see langword="true" />。それ以外の場合は、<see langword="false" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.LastTransaction">
      <summary>このトランザクションが最後に閉じるトランザクションかどうかを示す値を取得します。</summary>
      <returns>このトランザクションが最後に閉じるトランザクションである場合、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.TransactionCommitted">
      <summary>デザイナーがトランザクションに対して <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> を呼び出したかどうかを示します。</summary>
      <returns>デザイナーがトランザクションに対して <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> を呼び出した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventHandler">
      <summary>デザイナーの <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> イベントと <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerb">
      <summary>デザイナーから呼び出すことができる動詞を表します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">ユーザーに対して表示されるメニュー コマンドのテキスト。</param>
      <param name="handler">動詞のアクションを実行するイベント ハンドラー。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="text">ユーザーに対して表示されるメニュー コマンドのテキスト。</param>
      <param name="handler">動詞のアクションを実行するイベント ハンドラー。</param>
      <param name="startCommandID">動詞の開始コマンド ID。 既定では、動詞のコマンド ID の範囲は、デザイナー アーキテクチャによって指定されます。 カスタムのコマンド ID を指定することにより、この既定値をオーバーライドできます。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Description">
      <summary>動詞に関するメニュー項目の説明を取得または設定します。</summary>
      <returns>メニュー項目を説明する文字列。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Text">
      <summary>メニュー上の動詞コマンドを説明するテキストを取得します。</summary>
      <returns>動詞コマンドの説明。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.ToString">
      <summary>
        <see cref="M:System.Object.ToString" /> をオーバーライドします。</summary>
      <returns>動詞のテキスト。テキスト フィールドが空の場合は空の文字列 ("")。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerbCollection">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor(System.ComponentModel.Design.DesignerVerb[])">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> オブジェクトの指定した配列を使用して、<see cref="T:System.ComponentModel.Design.DesignerVerb" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value">コレクション内に格納する動詞を示す <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Add(System.ComponentModel.Design.DesignerVerb)">
      <summary>指定された <see cref="T:System.ComponentModel.Design.DesignerVerb" /> をコレクションに追加します。</summary>
      <param name="value">コレクションに追加する <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
      <returns>動詞が追加された位置を示す、コレクション内のインデックス。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerb[])">
      <summary>指定した一連のデザイナー動詞をコレクションに追加します。</summary>
      <param name="value">コレクションに追加する <see cref="T:System.ComponentModel.Design.DesignerVerb" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerbCollection)">
      <summary>デザイナー動詞の指定したコレクションをコレクションに追加します。</summary>
      <param name="value">コレクションに追加する <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Contains(System.ComponentModel.Design.DesignerVerb)">
      <summary>指定した <see cref="T:System.ComponentModel.Design.DesignerVerb" /> がコレクション内に存在するかどうかを示す値を取得します。</summary>
      <param name="value">コレクション内で検索される <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
      <returns>指定したオブジェクトがコレクション内に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.CopyTo(System.ComponentModel.Design.DesignerVerb[],System.Int32)">
      <summary>指定したインデックスを開始位置として、指定した <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 配列にコレクション メンバーをコピーします。</summary>
      <param name="array">コレクション メンバーのコピー先の配列。</param>
      <param name="index">コピーの開始位置を示す、コピー先の配列内のインデックス。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.IndexOf(System.ComponentModel.Design.DesignerVerb)">
      <summary>指定した <see cref="T:System.ComponentModel.Design.DesignerVerb" /> のインデックスを取得します。</summary>
      <param name="value">コレクション内のインデックスを取得する対象の <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
      <returns>指定したオブジェクトのインデックスがリスト内に見つかった場合はそのインデックス。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerVerb)">
      <summary>指定したインデックス位置に指定した <see cref="T:System.ComponentModel.Design.DesignerVerb" /> を挿入します。</summary>
      <param name="index">動詞を挿入する位置を示す、コレクション内のインデックス。</param>
      <param name="value">コレクションに挿入する <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerbCollection.Item(System.Int32)">
      <summary>指定したインデックス位置にある <see cref="T:System.ComponentModel.Design.DesignerVerb" /> を取得または設定します。</summary>
      <param name="index">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> を取得または設定する位置のインデックス。</param>
      <returns>コレクション内の有効な各インデックスにある <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnClear">
      <summary>
        <see langword="Clear" /> イベントを発生させます。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnInsert(System.Int32,System.Object)">
      <summary>
        <see langword="Insert" /> イベントを発生させます。</summary>
      <param name="index">項目を挿入する位置のインデックス。</param>
      <param name="value">挿入するオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnRemove(System.Int32,System.Object)">
      <summary>
        <see langword="Remove" /> イベントを発生させます。</summary>
      <param name="index">項目を削除する位置のインデックス。</param>
      <param name="value">削除するオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>
        <see langword="Set" /> イベントを発生させます。</summary>
      <param name="index">項目を設定する位置のインデックス。</param>
      <param name="oldValue">古いオブジェクト。</param>
      <param name="newValue">新しいオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnValidate(System.Object)">
      <summary>
        <see langword="Validate" /> イベントを発生させます。</summary>
      <param name="value">検証対象のオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Remove(System.ComponentModel.Design.DesignerVerb)">
      <summary>指定された <see cref="T:System.ComponentModel.Design.DesignerVerb" /> をコレクションから削除します。</summary>
      <param name="value">コレクションから削除する <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContext">
      <summary>デザイン時にライセンス プロバイダーをサポートできるデザイン時ライセンス コンテキストを表します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>保存されているライセンス キーを取得します。</summary>
      <param name="type">ライセンス キーの型。</param>
      <param name="resourceAssembly">キーの取得元のアセンブリ。</param>
      <returns>指定した型と一致する、保存されているライセンス キー。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>保存されているライセンス キーを設定します。</summary>
      <param name="type">ライセンス キーの型。</param>
      <param name="key">ライセンス キー。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesigntimeLicenseContext.UsageMode">
      <summary>ライセンス使用モードを取得します。</summary>
      <returns>コンテキストのライセンス使用モードを示す <see cref="T:System.ComponentModel.LicenseUsageMode" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContextSerializer">
      <summary>デザイン時ライセンス コンテキストのシリアル化をサポートできるようにします。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)">
      <summary>指定したキーと出力ストリームを使用して、指定したデザイン時ライセンス コンテキスト内のライセンスをシリアル化します。</summary>
      <param name="o">出力先のストリーム。</param>
      <param name="cryptoKey">暗号化のために使用するキー。</param>
      <param name="context">ライセンス コンテキストを示す <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.HelpContextType">
      <summary>ヘルプ情報の要求元であるコンテキストに関する情報を示す識別子を定義します。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Ambient">
      <summary>標準コンテキスト。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Selection">
      <summary>選択項目。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.ToolWindowSelection">
      <summary>ツール ウィンドウの選択項目。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Window">
      <summary>ウィンドウ。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordAttribute">
      <summary>クラスまたはメンバーのコンテキスト キーワードを指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="keyword">ヘルプ キーワード値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.Type)">
      <summary>特定の型の <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="t">ヘルプ キーワードの取得元となる型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> の既定値を表します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.Equals(System.Object)">
      <summary>2 つの <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> インスタンスが等しいかどうかを判断します。</summary>
      <param name="obj">現在の <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> と比較する <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />。</param>
      <returns>指定した <see langword="true" /> が現在の <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> と等しい場合は <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>現在の <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.HelpKeywordAttribute.HelpKeyword">
      <summary>この属性が提供するヘルプ キーワードを取得します。</summary>
      <returns>この属性が提供するヘルプ キーワード。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.IsDefaultAttribute">
      <summary>ヘルプ キーワードが <see langword="null" /> かどうかを判断します。</summary>
      <returns>ヘルプ キーワードが <see langword="true" /> の場合は <see langword="null" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordType">
      <summary>ヘルプ キーワードの種類を示す識別子を定義します。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.F1Keyword">
      <summary>関連するヘルプ情報を要求するために F1 キーが押されたキーワード。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.FilterKeyword">
      <summary>フィルター キーワード。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.GeneralKeyword">
      <summary>標準キーワード。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentChangeService">
      <summary>コンポーネントの追加、変更、削除、または名前変更のイベントのイベント ハンドラーを追加および削除するためのインターフェイスを提供すると共に、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> イベントまたは <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> イベントを発生させるメソッドを提供します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded">
      <summary>コンポーネントが追加されたときに発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding">
      <summary>コンポーネントが追加されているときに発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged">
      <summary>コンポーネントが変更されたときに発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging">
      <summary>コンポーネントが変更されているときに発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved">
      <summary>コンポーネントが削除されたときに発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving">
      <summary>コンポーネントが削除されているときに発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename">
      <summary>コンポーネントの名前が変更されたときに発生します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>コンポーネント変更サービスに対して、特定のコンポーネントが変更されたことを通知します。</summary>
      <param name="component">変更されたコンポーネント。</param>
      <param name="member">変更されたメンバー。 変更が単一のメンバーに関連していない場合は <see langword="null" /> になります。</param>
      <param name="oldValue">変更前のメンバーの値。 メンバーが <see langword="null" /> ではない場合にだけ有効です。</param>
      <param name="newValue">変更後のメンバーの値。 メンバーが <see langword="null" /> ではない場合にだけ有効です。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>コンポーネント変更サービスに対して、特定のコンポーネントがこれから変更されることを通知します。</summary>
      <param name="component">変更されようとしているコンポーネント。</param>
      <param name="member">変更されようとしているメンバー。 変更が単一のメンバーに関連していない場合は <see langword="null" /> になります。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentDiscoveryService">
      <summary>デザイン時のコンポーネントの列挙を有効にします。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
      <summary>利用可能なコンポーネント型のリストを取得します。</summary>
      <param name="designerHost">デザイン時サービスを提供するデザイナー ホスト。 <see langword="null" /> の可能性があります。</param>
      <param name="baseType">取得するコンポーネントを指定する基本型。 <see langword="null" /> の可能性があります。</param>
      <returns>利用可能なコンポーネント型のリスト。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentInitializer">
      <summary>コンポーネント作成中に推奨される既定値のセットを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary>コンポーネントのインスタンスを既定の状態に戻します。</summary>
      <param name="defaultValues">コンポーネントの状態をリセットするために使用する、名前と値のペアで構成された既定のプロパティ値のディクショナリ。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeNewComponent(System.Collections.IDictionary)">
      <summary>推奨値のセットを使用して、新しいコンポーネントを初期化します。</summary>
      <param name="defaultValues">コンポーネントの状態を初期化するために使用する、名前と値のペアで構成された既定のプロパティ値のディクショナリ。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesigner">
      <summary>カスタム デザイナーを構築するための基本フレームワークを提供します。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Component">
      <summary>デザイナーがデザインする基本コンポーネントを取得します。</summary>
      <returns>デザイナーがデザインする基本コンポーネントを示す <see cref="T:System.ComponentModel.IComponent" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.DoDefaultAction">
      <summary>デザイナーの既定のアクションを実行します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>コンポーネントを指定して、デザイナーを初期化します。</summary>
      <param name="component">デザイナーに関連付けるコンポーネント。</param>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Verbs">
      <summary>デザイナーでサポートされているデザイン時動詞のコレクションを取得します。</summary>
      <returns>デザイナーでサポートされている動詞を含む <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />。コンポーネントに動詞がない場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerEventService">
      <summary>ルート デザイナーが追加および削除されたとき、選択したコンポーネントが変更されたとき、および現在のルート デザイナーが変更されたときにイベント通知を提供します。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner">
      <summary>現在アクティブなドキュメントのルート デザイナーを取得します。</summary>
      <returns>現在アクティブなドキュメント。アクティブなドキュメントがない場合は <see langword="null" />。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged">
      <summary>現在のルート デザイナーが変更されたときに発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated">
      <summary>ルート デザイナーが作成されたときに発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed">
      <summary>ドキュメントのルート デザイナーが破棄されるときに発生します。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.Designers">
      <summary>開発環境で現在アクティブなデザイン ドキュメントのルート デザイナーのコレクションを取得します。</summary>
      <returns>作成され、まだ破棄されていないルート デザイナーを格納している <see cref="T:System.ComponentModel.Design.DesignerCollection" />。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.SelectionChanged">
      <summary>現在のデザイン ビューで選択されている内容が変更されたときに発生します。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerFilter">
      <summary>コンポーネント デザイナーがデザイン時環境に対して公開できるプロパティ、属性、イベントの各記述子を格納する <see cref="T:System.ComponentModel.TypeDescriptor" /> のディクショナリにデザイナーがアクセスし、フィルター処理を実行できるようにするインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)">
      <summary>派生クラスでオーバーライドされた場合、デザイナーが <see cref="T:System.ComponentModel.TypeDescriptor" /> を通じて公開する一連の属性の項目を変更または削除できるようにします。</summary>
      <param name="attributes">コンポーネントのクラスの <see cref="T:System.Attribute" /> オブジェクト。 属性のディクショナリ内でのキーは、属性の <see cref="P:System.Attribute.TypeId" /> 値です。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)">
      <summary>派生クラスでオーバーライドされた場合、デザイナーが <see cref="T:System.ComponentModel.TypeDescriptor" /> を通じて公開する一連のイベントの項目を変更または削除できるようになります。</summary>
      <param name="events">コンポーネントのクラスのイベントを表す <see cref="T:System.ComponentModel.EventDescriptor" /> オブジェクト。 イベントのディクショナリ内でのキーは、イベント名です。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)">
      <summary>派生クラスでオーバーライドされた場合、デザイナーが <see cref="T:System.ComponentModel.TypeDescriptor" /> を通じて公開する一連のプロパティの項目を変更または削除できるようになります。</summary>
      <param name="properties">コンポーネントのクラスのプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクト。 プロパティのディクショナリ内でのキーは、プロパティ名です。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)">
      <summary>派生クラスでオーバーライドされた場合、デザイナーが <see cref="T:System.ComponentModel.TypeDescriptor" /> を通じて公開する一連の属性に項目を追加できるようにします。</summary>
      <param name="attributes">コンポーネントのクラスの <see cref="T:System.Attribute" /> オブジェクト。 属性のディクショナリ内でのキーは、属性の <see cref="P:System.Attribute.TypeId" /> 値です。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)">
      <summary>派生クラスでオーバーライドされた場合、デザイナーが <see cref="T:System.ComponentModel.TypeDescriptor" /> を通じて公開する一連のイベントに項目を追加できるようにします。</summary>
      <param name="events">コンポーネントのクラスのイベントを表す <see cref="T:System.ComponentModel.EventDescriptor" /> オブジェクト。 イベントのディクショナリ内でのキーは、イベント名です。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)">
      <summary>派生クラスでオーバーライドされた場合、デザイナーが <see cref="T:System.ComponentModel.TypeDescriptor" /> を通じて公開する一連のプロパティに項目を追加できるようにします。</summary>
      <param name="properties">コンポーネントのクラスのプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクト。 プロパティのディクショナリ内でのキーは、プロパティ名です。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHost">
      <summary>デザイナーのトランザクションおよびコンポーネントを管理するためのインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.Activate">
      <summary>ホストしているデザイナーをアクティブにします。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Activated">
      <summary>デザイナーがアクティブになるときに発生します。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Container">
      <summary>デザイナー ホストのコンテナーを取得します。</summary>
      <returns>ホストの <see cref="T:System.ComponentModel.IContainer" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)">
      <summary>指定した型のコンポーネントを作成し、そのコンポーネントをデザイン ドキュメントに追加します。</summary>
      <param name="componentClass">作成するコンポーネントの型。</param>
      <returns>新規作成したコンポーネント。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)">
      <summary>指定した型および名前のコンポーネントを作成し、そのコンポーネントをデザイン ドキュメントに追加します。</summary>
      <param name="componentClass">作成するコンポーネントの型。</param>
      <param name="name">コンポーネントの名前。</param>
      <returns>新規作成したコンポーネント。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction">
      <summary>一連のイベントをカプセル化することでパフォーマンスを向上させ、"元に戻す" 機能や "やり直し" 機能をサポートできるようにする <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> を作成します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> の新しいインスタンス。 トランザクションの手順が完了したら、このオブジェクトに対して <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> を呼び出す必要があります。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)">
      <summary>指定したトランザクションの説明を使用して、一連のイベントをカプセル化することでパフォーマンスを向上させ、"元に戻す" 機能や "やり直し" 機能をサポートできるようにする <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> を作成します。</summary>
      <param name="description">新規作成したトランザクションのタイトルまたは説明。</param>
      <returns>新しい <see cref="T:System.ComponentModel.Design.DesignerTransaction" />。 トランザクションの手順が完了したら、このオブジェクトに対して <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> を呼び出す必要があります。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Deactivated">
      <summary>デザイナーがアクティブでなくなるときに発生します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)">
      <summary>指定したコンポーネントを破棄し、デザイナー コンテナーからそのコンポーネントを削除します。</summary>
      <param name="component">破棄するコンポーネント。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)">
      <summary>指定したコンポーネントを格納しているデザイナー インスタンスを取得します。</summary>
      <param name="component">デザイナーを取得する対象の <see cref="T:System.ComponentModel.IComponent" />。</param>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesigner" />。指定したコンポーネントのデザイナーがない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetType(System.String)">
      <summary>指定した完全限定型名のインスタンスを取得します。</summary>
      <param name="typeName">読み込む型の名前。</param>
      <returns>指定した型名の型オブジェクト。型が見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.InTransaction">
      <summary>デザイナー ホストが現在トランザクションを実行中かどうかを示す値を取得します。</summary>
      <returns>トランザクションを実行中の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.LoadComplete">
      <summary>デザイナーがドキュメントの読み込みを完了したときに発生します。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Loading">
      <summary>デザイナー ホストが現在ドキュメントを読み込み中かどうかを示す値を取得します。</summary>
      <returns>デザイナー ホストがドキュメントを読み込み中の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponent">
      <summary>現在のデザインのルート コンポーネントとして使用される、基本クラスのインスタンスを取得します。</summary>
      <returns>ルート コンポーネント クラスのインスタンス。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponentClassName">
      <summary>デザイン対象のクラスの完全限定名を取得します。</summary>
      <returns>基本コンポーネント クラスの完全限定名。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed">
      <summary>
        <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> イベントのイベント ハンドラーを追加します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing">
      <summary>
        <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> イベントのイベント ハンドラーを追加します。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.TransactionDescription">
      <summary>現在のトランザクションの説明を取得します。</summary>
      <returns>現在のトランザクションの説明。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened">
      <summary>
        <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened" /> イベントのイベント ハンドラーを追加します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening">
      <summary>
        <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening" /> イベントのイベント ハンドラーを追加します。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHostTransactionState">
      <summary>トランザクションの状態について報告するデザイナー ホストのメソッドを指定します。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHostTransactionState.IsClosingTransaction">
      <summary>デザイナー ホストがトランザクションを終了中かどうかを示す値を取得します。</summary>
      <returns>デザイナーがトランザクションを終了中の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerOptionService">
      <summary>Visual Studio 開発環境で [ツール] メニューの [オプション] コマンドにある各デザイナー オプションへのアクセスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(System.String,System.String)">
      <summary>指定した Windows フォーム デザイナー‏ オプションの値を取得します。</summary>
      <param name="pageName">オプションを定義するページの名前。</param>
      <param name="valueName">オプション プロパティの名前。</param>
      <returns>指定したオプションの値。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(System.String,System.String,System.Object)">
      <summary>指定した Windows フォーム デザイナー‏ オプションの値を設定します。</summary>
      <param name="pageName">オプションを定義するページの名前。</param>
      <param name="valueName">オプション プロパティの名前。</param>
      <param name="value">新しい値。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDictionaryService">
      <summary>サービスを通じて、デザイナーがユーザー定義データを格納するために使用できる、基本的な、コンポーネント サイト固有の、キーと値のペアのディクショナリを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetKey(System.Object)">
      <summary>指定した値に対応するキーを取得します。</summary>
      <param name="value">ディクショナリ内で検索する値。</param>
      <returns>関連付けられているキー。キーがない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetValue(System.Object)">
      <summary>指定したキーに対応する値を取得します。</summary>
      <param name="key">値を検索する対象のキー。</param>
      <returns>関連付けられている値。値がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.SetValue(System.Object,System.Object)">
      <summary>指定したキーと値の組み合わせを設定します。</summary>
      <param name="key">値に関連付けるキーとして使用するオブジェクト。</param>
      <param name="value">格納する値。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IEventBindingService">
      <summary>コンポーネントのイベントに対するイベント ハンドラーを登録するためのサービスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>指定したコンポーネントおよびイベントのイベント ハンドラー メソッドに対して一意の名前を作成します。</summary>
      <param name="component">イベントを関連付ける対象のコンポーネント インスタンス。</param>
      <param name="e">名前を作成する対象のイベント。</param>
      <returns>指定したイベントのイベント ハンドラー メソッドに推奨される名前。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary>指定したイベントと互換性のあるメソッド シグネチャを持つイベント ハンドラー メソッドのコレクションを取得します。</summary>
      <param name="e">互換性のあるイベント ハンドラー メソッドを取得する対象のイベント。</param>
      <returns>文字列のコレクション。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)">
      <summary>指定したプロパティ記述子がイベントを表す場合、そのイベントの <see cref="T:System.ComponentModel.EventDescriptor" /> を取得します。</summary>
      <param name="property">イベントを表すプロパティ。</param>
      <returns>プロパティが表すイベントの <see cref="T:System.ComponentModel.EventDescriptor" />。プロパティがイベントを表さない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)">
      <summary>一連のイベント記述子を一連のプロパティ記述子に変換します。</summary>
      <param name="events">プロパティに変換する対象のイベント。</param>
      <returns>一連のイベントを説明する <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトの配列。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)">
      <summary>単一のイベント記述子をプロパティ記述子に変換します。</summary>
      <param name="e">変換対象のイベント。</param>
      <returns>イベントを説明する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode">
      <summary>デザイナーに関連するコードを表示します。</summary>
      <returns>コードが表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>指定したイベントに関連するコードを表示します。</summary>
      <param name="component">イベントを関連付ける対象のコンポーネント。</param>
      <param name="e">表示するイベント。</param>
      <returns>コードが表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)">
      <summary>デザイナーに関連するコードの指定した行を表示します。</summary>
      <param name="lineNumber">カレット (＾) を配置する行番号。</param>
      <returns>コードが表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderListService">
      <summary>拡張プロバイダーのリストを生成できるインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderListService.GetExtenderProviders">
      <summary>コンポーネントの一連の拡張プロバイダーを取得します。</summary>
      <returns>アクティブな拡張プロバイダーを格納している <see cref="T:System.ComponentModel.IExtenderProvider" /> 型の配列。 プロバイダーがない場合は、空の配列が返されます。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderProviderService">
      <summary>デザイン時に拡張プロバイダーを追加および削除するためのインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>指定した拡張プロバイダーを追加します。</summary>
      <param name="provider">追加する拡張プロバイダー。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>指定した拡張プロバイダーを削除します。</summary>
      <param name="provider">削除する拡張プロバイダー。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IHelpService">
      <summary>デザイン時に、ヘルプ トピックを表示し、ヘルプ キーワードの追加と削除を行うためのメソッドを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary>コンテキスト属性をドキュメントに追加します。</summary>
      <param name="name">追加する属性の名前。</param>
      <param name="value">属性の値。</param>
      <param name="keywordType">キーワードの種類を示す、列挙体 <see cref="T:System.ComponentModel.Design.HelpKeywordType" /> の値。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ClearContextAttributes">
      <summary>ドキュメントから既存のコンテキスト属性をすべて削除します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)">
      <summary>ローカル <see cref="T:System.ComponentModel.Design.IHelpService" /> を作成し、サブコンテキストを管理します。</summary>
      <param name="contextType">追加するサブコンテキストの優先順位の種類。</param>
      <returns>新しく作成された <see cref="T:System.ComponentModel.Design.IHelpService" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary>以前に追加したコンテキスト属性を削除します。</summary>
      <param name="name">削除する属性の名前。</param>
      <param name="value">削除する属性の値。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveLocalContext(System.ComponentModel.Design.IHelpService)">
      <summary>
        <see cref="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)" /> を使用して作成したコンテキストを削除します。</summary>
      <param name="localContext">削除するローカル コンテキスト <see cref="T:System.ComponentModel.Design.IHelpService" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromKeyword(System.String)">
      <summary>指定したキーワードに対応するヘルプ トピックを表示します。</summary>
      <param name="helpKeyword">表示するヘルプ トピックのキーワード。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromUrl(System.String)">
      <summary>指定した URL に対応するヘルプ トピックを表示します。</summary>
      <param name="helpUrl">表示するヘルプ トピックの URL。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IInheritanceService">
      <summary>コンポーネントの構成要素を識別するためのメソッドが用意されています。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary>指定したコンポーネントから <see cref="T:System.ComponentModel.IComponent" /> インターフェイスを実装するフィールドを検索し、指定したコンテナーに各フィールドを追加して、<see cref="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)" /> メソッドで取得できるそれぞれの継承レベルを格納します。</summary>
      <param name="component">検索する <see cref="T:System.ComponentModel.IComponent" />。 このコンポーネントから検索が始まります。</param>
      <param name="container">コンポーネントの追加先となる <see cref="T:System.ComponentModel.IContainer" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary>指定したコンポーネントの継承属性を取得します。</summary>
      <param name="component">継承属性の取得対象となる <see cref="T:System.ComponentModel.IComponent" />。</param>
      <returns>指定したコンポーネントの継承レベルが記述された <see cref="T:System.ComponentModel.InheritanceAttribute" /> のインスタンス。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IMenuCommandService">
      <summary>グローバル デザイナー動詞とデザイン モードで使用できるメニュー コマンドを管理し、いくつかの種類のショートカット メニューを表示するためのメソッドを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>指定した標準メニュー コマンドをメニューに追加します。</summary>
      <param name="command">追加する <see cref="T:System.ComponentModel.Design.MenuCommand" />。</param>
      <exception cref="T:System.InvalidOperationException">指定した <see cref="T:System.ComponentModel.Design.CommandID" /> の <see cref="T:System.ComponentModel.Design.MenuCommand" /> が、既にメニュー上に存在します。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>指定したデザイナー動詞をグローバル デザイナー動詞のセットに追加します。</summary>
      <param name="verb">追加する <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary>指定したコマンド ID を検索し、その ID に関連付けられているメニュー コマンドを返します。</summary>
      <param name="commandID">検索対象の <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
      <returns>コマンド ID に関連付けられている <see cref="T:System.ComponentModel.Design.MenuCommand" />。コマンドが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
      <summary>指定したコマンド ID に一致するメニューまたはデザイナー動詞コマンドを呼び出します。</summary>
      <param name="commandID">検索および実行対象のコマンドの <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
      <returns>コマンドが見つかり、正常に呼び出された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>指定した標準メニュー コマンドをメニューから削除します。</summary>
      <param name="command">削除する <see cref="T:System.ComponentModel.Design.MenuCommand" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>指定したデザイナー動詞をグローバル デザイナー動詞のコレクションから削除します。</summary>
      <param name="verb">削除する <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
      <summary>指定した位置に指定したショートカット メニューを表示します。</summary>
      <param name="menuID">表示するショートカット メニューの <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
      <param name="x">メニューを表示する位置の x 座標 (画面座標)。</param>
      <param name="y">メニューを表示する位置の y 座標 (画面座標)。</param>
    </member>
    <member name="P:System.ComponentModel.Design.IMenuCommandService.Verbs">
      <summary>現在使用できるデザイナー動詞のコレクションを取得します。</summary>
      <returns>現在使用できるデザイナー動詞の <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IReferenceService">
      <summary>名前や型でプロジェクト内のオブジェクトへの参照を取得したり、指定したオブジェクトの名前を取得したり、デザイナー プロジェクト内で指定したオブジェクトの親を見つけたりするためのインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetComponent(System.Object)">
      <summary>指定したコンポーネントを格納しているコンポーネントを取得します。</summary>
      <param name="reference">親コンポーネントを取得するオブジェクト。</param>
      <returns>指定したオブジェクトを格納している基本 <see cref="T:System.ComponentModel.IComponent" />。親コンポーネントが存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetName(System.Object)">
      <summary>指定したコンポーネントの名前を取得します。</summary>
      <param name="reference">名前を返すオブジェクト。</param>
      <returns>オブジェクト参照の名前。オブジェクト参照が有効でない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReference(System.String)">
      <summary>指定した名前に名前が一致するコンポーネントへの参照を取得します。</summary>
      <param name="name">参照を返すコンポーネントの名前。</param>
      <returns>指定した、参照する名前のオブジェクト。参照が見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences">
      <summary>プロジェクト コンポーネントへの使用可能な参照をすべて取得します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.IReferenceService" /> に使用可能な参照を持つすべてのオブジェクトの配列。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences(System.Type)">
      <summary>指定した型のコンポーネントへの使用可能なすべての参照を取得します。</summary>
      <param name="baseType">インスタンスへの参照を返す対象となるオブジェクトの型。</param>
      <returns>指定した型の使用可能なすべてのオブジェクトの配列。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IResourceService">
      <summary>デザイナーが、特定の <see cref="T:System.Globalization.CultureInfo" /> のリソースの種類に対するリソース リーダーやリソース ライターにアクセスするためのインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceReader(System.Globalization.CultureInfo)">
      <summary>指定したカルチャのリソース リーダーを検索し、そのリソース リーダーを返します。</summary>
      <param name="info">リソース リーダーを取得する対象のリソースの <see cref="T:System.Globalization.CultureInfo" />。</param>
      <returns>指定したカルチャのリソースを含む <see cref="T:System.Resources.IResourceReader" /> インターフェイス。カルチャのリソースが存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceWriter(System.Globalization.CultureInfo)">
      <summary>指定したカルチャのリソース ライターを検索し、そのリソース ライターを返します。</summary>
      <param name="info">リソース ライターを作成する対象のリソースの <see cref="T:System.Globalization.CultureInfo" />。</param>
      <returns>指定したカルチャの <see cref="T:System.Resources.IResourceWriter" /> インターフェイス。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IRootDesigner">
      <summary>ルート レベルのデザイナー ビュー テクノロジのサポートを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IRootDesigner.GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary>指定したビュー技術のビュー オブジェクトを取得します。</summary>
      <param name="technology">特定のビュー技術を示す <see cref="T:System.ComponentModel.Design.ViewTechnology" />。</param>
      <returns>デザイナーのビューを表すオブジェクト。</returns>
      <exception cref="T:System.ArgumentException">指定したビュー技術がサポートされていないか、存在しません。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies">
      <summary>デザイナーがサポートできる表示用の一連の技術を取得します。</summary>
      <returns>サポートされている <see cref="T:System.ComponentModel.Design.ViewTechnology" /> 値の配列。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ISelectionService">
      <summary>デザイナーがコンポーネントを選択するために必要なインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetComponentSelected(System.Object)">
      <summary>指定したコンポーネントが現在選択されているかどうかを示す値を取得します。</summary>
      <param name="component">テスト対象のコンポーネント。</param>
      <returns>コンポーネントが現在選択されている内容に含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetSelectedComponents">
      <summary>現在選択されているコンポーネントのコレクションを取得します。</summary>
      <returns>現在選択されている一連のコンポーネントを表すコレクション。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.PrimarySelection">
      <summary>現在の主要選択オブジェクトであるオブジェクトを取得します。</summary>
      <returns>現在の主要選択オブジェクトであるオブジェクト。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanged">
      <summary>現在の選択が変更したときに発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanging">
      <summary>現在選択されている対象がこれから変更されるときに発生します。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.SelectionCount">
      <summary>選択されているオブジェクトの数を取得します。</summary>
      <returns>選択されているオブジェクトの数。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection)">
      <summary>コンポーネントの指定したコレクションを選択します。</summary>
      <param name="components">選択対象のコンポーネントのコレクション。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
      <summary>指定した選択の種類と一致するコンポーネントの指定したコレクション内からコンポーネントを選択します。</summary>
      <param name="components">選択対象のコンポーネントのコレクション。</param>
      <param name="selectionType">
        <see cref="T:System.ComponentModel.Design.SelectionTypes" /> 列挙体の値。 既定値は、<see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" /> です。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IServiceContainer">
      <summary>サービスのコンテナーを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>指定したサービスをサービス コンテナーに追加します。</summary>
      <param name="serviceType">追加するサービスの型。</param>
      <param name="callback">サービスを作成するために使用されるコールバック オブジェクト。 これにより、サービスを使用可能として宣言できますが、オブジェクトの作成はそのサービスが要求されるまで延期されます。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>指定したサービスをサービス コンテナーに追加します。指定内容に応じて、そのサービスを親サービス コンテナーに昇格させます。</summary>
      <param name="serviceType">追加するサービスの型。</param>
      <param name="callback">サービスを作成するために使用されるコールバック オブジェクト。 これにより、サービスを使用可能として宣言できますが、オブジェクトの作成はそのサービスが要求されるまで延期されます。</param>
      <param name="promote">この要求を任意の親サービス コンテナーに渡す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)">
      <summary>指定したサービスをサービス コンテナーに追加します。</summary>
      <param name="serviceType">追加するサービスの型。</param>
      <param name="serviceInstance">追加するサービス型のインスタンス。 このオブジェクトは、<paramref name="serviceType" /> パラメーターに指定された型を実装しているか、またはその型から継承していることが必要です。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>指定したサービスをサービス コンテナーに追加します。指定内容に応じて、そのサービスを親サービス コンテナーに昇格させます。</summary>
      <param name="serviceType">追加するサービスの型。</param>
      <param name="serviceInstance">追加するサービス型のインスタンス。 このオブジェクトは、<paramref name="serviceType" /> パラメーターに指定された型を実装しているか、またはその型から継承していることが必要です。</param>
      <param name="promote">この要求を任意の親サービス コンテナーに渡す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)">
      <summary>指定したサービスの型をサービス コンテナーから削除します。</summary>
      <param name="serviceType">削除するサービスの型。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>指定したサービスの型をサービス コンテナーから削除します。指定内容に応じて、そのサービスを親サービス コンテナーに昇格させます。</summary>
      <param name="serviceType">削除するサービスの型。</param>
      <param name="promote">この要求を任意の親サービス コンテナーに渡す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ITreeDesigner">
      <summary>関連するカスタム デザイナーのセットの構築をサポートします。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Children">
      <summary>子デザイナーのコレクションを取得します。</summary>
      <returns>現在のデザイナーの <see cref="T:System.Collections.ICollection" /> 子オブジェクトのレクションを格納する <see cref="T:System.ComponentModel.Design.IDesigner" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Parent">
      <summary>親デザイナーを取得します。</summary>
      <returns>親デザイナーを表す <see cref="T:System.ComponentModel.Design.IDesigner" />。または、親がないときは <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDescriptorFilterService">
      <summary>デザイン モードでコンポーネントの一連のメンバー記述子を変更するためのインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>
        <see cref="T:System.ComponentModel.TypeDescriptor" /> を通じてコンポーネントが公開する属性をフィルター処理します。</summary>
      <param name="component">属性をフィルター処理する対象のコンポーネント。</param>
      <param name="attributes">変更できる属性のディクショナリ。</param>
      <returns>フィルター処理した一連の属性をキャッシュに保存する場合は <see langword="true" />。フィルター サービスが再照会する必要がある場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>
        <see cref="T:System.ComponentModel.TypeDescriptor" /> を通じてコンポーネントが公開するイベントをフィルター処理します。</summary>
      <param name="component">イベントをフィルター処理する対象のコンポーネント。</param>
      <param name="events">変更できるイベントのディクショナリ。</param>
      <returns>フィルター処理した一連のイベントをキャッシュに保存する場合は <see langword="true" />。フィルター サービスが再照会する必要がある場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>
        <see cref="T:System.ComponentModel.TypeDescriptor" /> を通じてコンポーネントが公開するプロパティをフィルター処理します。</summary>
      <param name="component">プロパティをフィルター処理する対象のコンポーネント。</param>
      <param name="properties">変更できるプロパティのディクショナリ。</param>
      <returns>フィルター処理した一連のプロパティをキャッシュに保存する場合は <see langword="true" />。フィルター サービスが再照会する必要がある場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDiscoveryService">
      <summary>デザイン時に使用できる型を探索します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)">
      <summary>使用できる型のリストを取得します。</summary>
      <param name="baseType">一致する基本型。 <see langword="null" /> の可能性があります。</param>
      <param name="excludeGlobalTypes">すべての参照アセンブリの型をチェックするかどうかを示します。</param>
      <returns>
        <paramref name="baseType" /> および <paramref name="excludeGlobalTypes" /> で指定された基準に一致する型のコレクション。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeResolutionService">
      <summary>名前によってアセンブリまたは型を取得するインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName)">
      <summary>要求されたアセンブリを取得します。</summary>
      <param name="name">取得するアセンブリの名前。</param>
      <returns>要求されたアセンブリのインスタンス。アセンブリが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)">
      <summary>要求されたアセンブリを取得します。</summary>
      <param name="name">取得するアセンブリの名前。</param>
      <param name="throwOnError">アセンブリが見つからないときにこのメソッドが例外をスローする必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。アセンブリが見つからない場合、このメソッドは <see langword="null" /> を返します。</param>
      <returns>要求されたアセンブリのインスタンス。アセンブリが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)">
      <summary>アセンブリの読み込み元のファイルへのパスを取得します。</summary>
      <param name="name">アセンブリの名前。</param>
      <returns>アセンブリの読み込み元のファイルへのパス。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String)">
      <summary>指定した名前で型を読み込みます。</summary>
      <param name="name">型の名前。 型名がアセンブリを示す完全限定名でない場合、このサービスは参照先アセンブリの内部セットを検索します。</param>
      <returns>指定した名前に対応する <see cref="T:System.Type" /> のインスタンス。型が見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean)">
      <summary>指定した名前で型を読み込みます。</summary>
      <param name="name">型の名前。 型名がアセンブリを示す完全限定名でない場合、このサービスは参照先アセンブリの内部セットを検索します。</param>
      <param name="throwOnError">アセンブリが見つからないときにこのメソッドが例外をスローする必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。アセンブリが見つからない場合、このメソッドは <see langword="null" /> を返します。</param>
      <returns>指定した名前に対応する <see cref="T:System.Type" /> のインスタンス。型が見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>指定した名前で型を読み込みます。</summary>
      <param name="name">型の名前。 型名がアセンブリを示す完全限定名でない場合、このサービスは参照先アセンブリの内部セットを検索します。</param>
      <param name="throwOnError">アセンブリが見つからないときにこのメソッドが例外をスローする必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。アセンブリが見つからない場合、このメソッドは <see langword="null" /> を返します。</param>
      <param name="ignoreCase">型を検索するときに大文字と小文字を区別しない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>指定した名前に対応する <see cref="T:System.Type" /> のインスタンス。型が見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)">
      <summary>指定したアセンブリに参照を追加します。</summary>
      <param name="name">参照するアセンブリを示す <see cref="T:System.Reflection.AssemblyName" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommand">
      <summary>Windows メニューまたはツール バーのコマンド項目を表します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>
        <see cref="T:System.ComponentModel.Design.MenuCommand" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="handler">ユーザーがメニュー項目またはツール バー ボタンを選択したときに発生するイベント。</param>
      <param name="command">メニュー コマンドを実行環境のメニューに結びつける一意のコマンド ID。</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Checked">
      <summary>メニュー項目がチェックされているかどうかを示す値を取得または設定します。</summary>
      <returns>項目がチェックされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="E:System.ComponentModel.Design.MenuCommand.CommandChanged">
      <summary>メニュー コマンドが変更されたときに発生します。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.CommandID">
      <summary>メニュー コマンドに関連付けられている <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。</summary>
      <returns>メニュー コマンドに関連付けられている <see cref="T:System.ComponentModel.Design.CommandID" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Enabled">
      <summary>メニュー項目を使用できるかどうかを示す値を取得します。</summary>
      <returns>項目が有効である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke">
      <summary>コマンドを呼び出します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)">
      <summary>指定したパラメーターを使用して、コマンドが呼び出されます。</summary>
      <param name="arg">このコマンドで使用するオプションの引数。</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.OleStatus">
      <summary>メニュー項目の OLE コマンド ステータス コードを取得します。</summary>
      <returns>メニュー項目の状態を反映する複数のステータス フラグの組み合わせを含んでいる整数。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.Design.MenuCommand.CommandChanged" /> イベントを発生させます。</summary>
      <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Properties">
      <summary>
        <see cref="T:System.ComponentModel.Design.MenuCommand" /> に関連付けられているパブリック プロパティを取得します。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> のパブリック プロパティを格納している <see cref="T:System.ComponentModel.Design.MenuCommand" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Supported">
      <summary>メニュー項目がサポートされているかどうかを示す値を取得または設定します。</summary>
      <returns>項目がサポートされている場合は <see langword="true" /> (既定値)。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.ToString">
      <summary>メニュー コマンドの文字列形式を返します。</summary>
      <returns>
        <see cref="P:System.ComponentModel.Design.MenuCommand.CommandID" /> プロパティの値に、設定されているフラグの名前が縦線 (|) で区切って追加されている文字列。 これらのフラグ プロパティには、<see cref="P:System.ComponentModel.Design.MenuCommand.Checked" />、<see cref="P:System.ComponentModel.Design.MenuCommand.Enabled" />、<see cref="P:System.ComponentModel.Design.MenuCommand.Supported" />、および <see cref="P:System.ComponentModel.Design.MenuCommand.Visible" /> があります。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Visible">
      <summary>メニュー項目を表示するかどうかを示す値を取得または設定します。</summary>
      <returns>メニュー項目を表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.SelectionTypes">
      <summary>選択の種類を示す識別子を定義します。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Add">
      <summary>選択されたコンポーネントを現在の選択に追加するための、追加選択を表します。これにより、選択されたコンポーネントの現在のセットが維持されます。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Auto">
      <summary>通常の選択を表します。 選択サービスは、Ctrl キーと Shift キーに対応し、コンポーネントを選択範囲に含めたり、選択範囲から外したりする動作をサポートします。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Click">
      <summary>ユーザーがコンポーネントをクリックしたときに発生する選択を表します。 新しく選択したコンポーネントが既に選択されている状態の場合、キャンセルされるのではなく、そのコンポーネントが主要選択コンポーネントになります。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseDown">
      <summary>マウス ポインターがコンポーネントの上にあるときにユーザーがマウス ボタンを押すと発生する選択を表します。 ポインターの下にあるコンポーネントが既に選択されている状態の場合、キャンセルされるのではなく、そのコンポーネントが主要選択コンポーネントになります。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseUp">
      <summary>コンポーネントが選択された直後にユーザーがマウス ボタンを離すと発生する選択を表します。 新しく選択したコンポーネントが既に選択されている状態の場合、キャンセルされるのではなく、そのコンポーネントが主要選択コンポーネントになります。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Normal">
      <summary>通常の選択を表します。 選択サービスは、Ctrl キーと Shift キーに対応し、コンポーネントを選択範囲に含めたり、選択範囲から外したりする動作をサポートします。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Primary">
      <summary>ユーザーがコンポーネントをクリックしたときに発生する主要選択を表します。 選択リストのコンポーネントが既に選択されている状態の場合、そのコンポーネントが主要選択になります。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Remove">
      <summary>選択されたコンポーネントを現在の選択から削除するための、削除選択を表します。これにより、選択されたコンポーネントの現在のセットが維持されます。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Replace">
      <summary>選択の内容が置き換えられたときに発生する選択を表します。 選択サービスは、現在の選択内容を別の内容で置き換えます。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Toggle">
      <summary>現在の選択と新たに指定された選択との間の切り替えを行う、切り替え選択を表します。 コンポーネントが既に選択されている状態で、<see cref="Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents" /> の選択の種類が <see cref="F:System.ComponentModel.Design.SelectionTypes.Toggle" /> に渡された場合、コンポーネントの選択状態はキャンセルされます。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Valid">
      <summary>有効な選択の種類として、<see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />、<see cref="F:System.ComponentModel.Design.SelectionTypes.Replace" />、<see cref="F:System.ComponentModel.Design.SelectionTypes.MouseDown" />、<see cref="F:System.ComponentModel.Design.SelectionTypes.MouseUp" />、または <see cref="F:System.ComponentModel.Design.SelectionTypes.Click" /> を識別します。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ComponentSerializationService">
      <summary>一連のコンポーネントまたはシリアル化可能なオブジェクトを、シリアル化ストアにシリアル化するための基本クラスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.CreateStore">
      <summary>新しい <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> を作成します。</summary>
      <returns>新規作成されたシリアル化ストア。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)">
      <summary>指定したストアを逆シリアル化し、オブジェクトのコレクションを生成します。</summary>
      <param name="store">逆シリアル化を行う対象の <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <returns>格納されている状態に従って作成されたオブジェクトのコレクション。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> には、シリアル化コンテナーが処理できる形式でデータが格納されていません。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>指定したストアを逆シリアル化し、逆シリアル化された <see cref="T:System.ComponentModel.IContainer" /> オブジェクトを指定した <see cref="T:System.ComponentModel.IComponent" /> に追加します。</summary>
      <param name="store">逆シリアル化を行う対象の <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container">
        <see cref="T:System.ComponentModel.IContainer" /> オブジェクトの追加先となる <see cref="T:System.ComponentModel.IComponent" />。</param>
      <returns>格納されている状態に従って作成されたオブジェクトのコレクション。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> または <paramref name="container" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> には、シリアル化コンテナーが処理できる形式でデータが格納されていません。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>指定した <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> を指定したコンテナーに逆シリアル化します。</summary>
      <param name="store">逆シリアル化を行う対象の <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container">
        <see cref="T:System.ComponentModel.IComponent" /> オブジェクトの追加先となるコンテナー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> または <paramref name="container" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> には、シリアル化コンテナーが処理できる形式でデータが格納されていません。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean)">
      <summary>指定した <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> を指定したコンテナーに逆シリアル化します。オプションで、リサイクルされた型を検証することもできます。</summary>
      <param name="store">逆シリアル化を行う対象の <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container">
        <see cref="T:System.ComponentModel.IComponent" /> オブジェクトの追加先となるコンテナー。</param>
      <param name="validateRecycledTypes">同じ型のオブジェクトに適用された場合にだけ、逆シリアル化が機能することを保証する場合は <see langword="true" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> または <paramref name="container" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> には、シリアル化コンテナーが処理できる形式でデータが格納されていません。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean,System.Boolean)">
      <summary>指定した <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> を指定したコンテナーに逆シリアル化します。オプションで、既定のプロパティ値を適用することもできます。</summary>
      <param name="store">逆シリアル化を行う対象の <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container">
        <see cref="T:System.ComponentModel.IComponent" /> オブジェクトの追加先となるコンテナー。</param>
      <param name="validateRecycledTypes">同じ型のオブジェクトに適用された場合にだけ、逆シリアル化が機能することを保証する場合は <see langword="true" />。</param>
      <param name="applyDefaults">既定のプロパティ値を適用する必要があることを示す場合は <see langword="true" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> または <paramref name="container" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> には、シリアル化コンテナーが処理できる形式でデータが格納されていません。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.LoadStore(System.IO.Stream)">
      <summary>ストリームから <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> を読み込みます。</summary>
      <param name="stream">ストアの読み込み元である <see cref="T:System.IO.Stream" />。</param>
      <returns>新しい <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> インスタンス。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="stream" /> には、<see cref="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)" /> の以前の呼び出しによって保存されたデータが格納されていません。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Serialize(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>指定したオブジェクトを指定した <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> にシリアル化します。</summary>
      <param name="store">
        <paramref name="value" /> の状態の書き込み先となる <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="value">シリアル化するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> または <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> が閉じているか、または <paramref name="store" /> がサポートされている型のシリアル化ストアではありません。 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> によって返されたストアを使用してください。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>既定のプロパティ値から成る、指定したオブジェクトをシリアル化します。</summary>
      <param name="store">
        <paramref name="value" /> の状態のシリアル化先となる <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="value">シリアル化するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> または <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> が閉じているか、または <paramref name="store" /> がサポートされている型のシリアル化ストアではありません。 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> によって返されたストアを使用してください。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>指定されたオブジェクトの指定されたメンバーをシリアル化します。</summary>
      <param name="store">
        <paramref name="member" /> の状態のシリアル化先となる <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="owningObject">
        <paramref name="member" /> が割り当てられているオブジェクト。</param>
      <param name="member">シリアル化するメンバーを指定する <see cref="T:System.ComponentModel.MemberDescriptor" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> または <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> が閉じているか、または <paramref name="store" /> がサポートされている型のシリアル化ストアではありません。 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> によって返されたストアを使用してください。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>既定のプロパティ値を構成する、指定したオブジェクトの指定したメンバーをシリアル化します。</summary>
      <param name="store">
        <paramref name="member" /> の状態のシリアル化先となる <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="owningObject">
        <paramref name="member" /> が割り当てられているオブジェクト。</param>
      <param name="member">シリアル化するメンバー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> または <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> が閉じているか、または <paramref name="store" /> がサポートされている型のシリアル化ストアではありません。 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> によって返されたストアを使用してください。</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ContextStack">
      <summary>入れ子のシリアライザーで情報を使用できるように、シリアライザーによって使用するスタック オブジェクトを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
      <summary>スタックの最上位にオブジェクトをプッシュせずに、スタックの末尾にオブジェクトを追加します。</summary>
      <param name="context">スタックに追加するコンテキスト オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
      <summary>スタック上の現在のオブジェクトを取得します。</summary>
      <returns>スタック上の現在のオブジェクト。プッシュされたオブジェクトがない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
      <summary>スタック上で、指定したレベルのオブジェクトを取得します。</summary>
      <param name="level">スタック上で取得する対象のオブジェクトのレベル。 レベル 0 は、スタックの最上位レベル、レベル 1 は最上位の 1 つ下のレベルです。以下同様です。 このレベルは 0 以上である必要があります。 レベルがスタック上でのレベル数より大きい場合は、<see langword="null" /> を返します。</param>
      <returns>スタック上にある、指定したレベルのオブジェクト。そのレベルのオブジェクトがない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="level" /> が 0 未満です。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
      <summary>スタック上で、指定した型から継承されるか、指定した型を実装する最初のオブジェクトを取得します。</summary>
      <param name="type">コンテキスト スタックから取得する型。</param>
      <returns>スタック上で、指定した型から継承されるか、指定した型を実装する最初のオブジェクト。その型を実装するオブジェクトがスタック上にない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
      <summary>スタックから現在のオブジェクトを削除し、そのオブジェクトの値を返します。</summary>
      <returns>スタックから削除されたオブジェクト。スタックにオブジェクトがない場合は、<see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
      <summary>指定したオブジェクトをスタックにプッシュ (格納) します。</summary>
      <param name="context">スタックにプッシュするコンテキスト オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 属性はシリアライザーに設定され、その型のシリアライザーの既定のプロバイダーとして使用するクラスを示します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.String)">
      <summary>名前付きのプロバイダーの種類を使用して <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="providerTypeName">シリアル化プロバイダーの種類の名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerTypeName" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.Type)">
      <summary>指定したプロバイダーの種類を使用して、<see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="providerType">シリアル化プロバイダーの <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerType" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.ProviderTypeName">
      <summary>シリアル化プロバイダーの型名を取得します。</summary>
      <returns>プロバイダーの名前を含む文字列。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerLoader">
      <summary>カスタム デザイナー ローダーの実装に使用できる基本デザイナー ローダー インターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)">
      <summary>デザイナーの読み込みを開始します。</summary>
      <param name="host">このローダーがコンポーネントを読み込むために使用するローダー ホスト。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Dispose">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Flush">
      <summary>キャッシュに保存された変更を、デザイナーの読み込み元の位置に書き込みます。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerLoader.Loading">
      <summary>ローダーが現在ドキュメントを読み込んでいるかどうかを示す値を取得します。</summary>
      <returns>ローダーが現在ドキュメントを読み込んでいる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute">
      <summary>この属性が適用される型の値をシリアル化するためにシリアル化マネージャーが使用するシリアライザーを示します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="serializerTypeName">シリアライザーのデータ型の完全修飾名。</param>
      <param name="baseSerializerTypeName">シリアライザーのデータ型の完全修飾名。 シリアライザーの基本型がすべて異なっている場合に限り、1 つのクラスに複数のシリアライザーを提供できます。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.Type)">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="serializerTypeName">シリアライザーのデータ型の完全修飾名。</param>
      <param name="baseSerializerType">シリアライザーの基本データ型。 シリアライザーの基本型がすべて異なっている場合に限り、1 つのクラスに複数のシリアライザーを提供できます。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.Type,System.Type)">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="serializerType">シリアライザーのデータ型。</param>
      <param name="baseSerializerType">シリアライザーの基本データ型。 シリアライザーの基本型がすべて異なっている場合に限り、1 つのクラスに複数のシリアライザーを提供できます。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>シリアライザー基本型の完全修飾型名を取得します。</summary>
      <returns>シリアライザー基本型の完全修飾型名。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName">
      <summary>シリアライザーの完全修飾型名を取得します。</summary>
      <returns>シリアライザーの完全修飾型名。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.TypeId">
      <summary>この属性型の一意の ID を示します。</summary>
      <returns>この属性型の一意の ID。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost">
      <summary>シリアル化された状態からの読み込みをサポートするためのデザイナー ホストを拡張できるインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(System.String,System.Boolean,System.Collections.ICollection)">
      <summary>デザイナー読み込み操作を終了します。</summary>
      <param name="baseClassName">このデザイナーがデザインしているドキュメントの基本クラスの完全限定名。</param>
      <param name="successful">デザイナーが正常に読み込まれた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="errorCollection">読み込み中に検出されたエラーがある場合は、そのエラーを格納するコレクション。 エラーが検出されなかった場合は、空のコレクションまたは <see langword="null" /> を渡します。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload">
      <summary>デザイン ドキュメントを再読み込みします。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> を拡張し、デザイン ドキュメントの読み込み中にエラーを許容するかどうかを指定するインターフェイスを提供します。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.CanReloadWithErrors">
      <summary>エラーがある場合に再読み込みができるかどうかを示す値を取得または設定します。</summary>
      <returns>エラーが検出された場合にデザイナー ローダーがデザイン ドキュメントを再読み込みできる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.IgnoreErrorsDuringReload">
      <summary>
        <see cref="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload" /> の呼び出し時にエラーを無視する必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>再読み込み時にデザイナー ローダーでエラーを無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService">
      <summary>外部コンポーネントの非同期読み込みをサポートするためにデザイナー ローダーを拡張できるインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency">
      <summary>外部コンポーネントを、このインターフェイスが管理する読み込みプロセスの一部として登録します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)">
      <summary>依存読み込みプロセスの 1 つが終了したことを示します。</summary>
      <param name="successful">デザイナーの読み込みが正常に終了した場合は <see langword="true" />。エラーが原因で読み込みを完了できなかった場合は <see langword="false" />。</param>
      <param name="errorCollection">読み込み中に発生したエラーがある場合は、そのエラーのコレクション。 エラーが発生しなかった場合は、空のコレクションまたは <see langword="null" /> を渡します。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload">
      <summary>デザイン ドキュメントを再読み込みします。</summary>
      <returns>再読み込み要求が受け入れられた場合は <see langword="true" />。ローダーが再読み込みを許可しない場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager">
      <summary>デザイン時のシリアル化を管理するためのインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>指定したシリアル化プロバイダーをシリアル化マネージャーに追加します。</summary>
      <param name="provider">追加するシリアル化プロバイダー。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <summary>シリアライザー間の通信に役立つスタック ベースのユーザー定義ストレージ エリアを取得します。</summary>
      <returns>データを格納する <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary>指定した型のインスタンスを作成し、作成したインスタンスを名前付きインスタンスのコレクションに追加します。</summary>
      <param name="type">作成するデータ型。</param>
      <param name="arguments">型のコンストラクターに渡す引数。</param>
      <param name="name">オブジェクトの名前。 この名前は、<see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" /> を使用して後からオブジェクトにアクセスするときに使用できます。 <see langword="null" /> が渡された場合でもオブジェクトは作成されますが、そのオブジェクトには名前を指定する方法ではアクセスできません。</param>
      <param name="addToContainer">
        <see langword="true" /> の場合、オブジェクトはデザイン コンテナーに追加されます。 この値を有効にするには、オブジェクトが <see cref="T:System.ComponentModel.IComponent" /> を実装していることが必要です。</param>
      <returns>新しく作成したオブジェクト インスタンス。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)">
      <summary>指定した名前で作成されたオブジェクトのインスタンスを取得します。そのようなオブジェクトが存在しない場合は <see langword="null" /> を取得します。</summary>
      <param name="name">取得するオブジェクトの名前。</param>
      <returns>指定した名前を持つオブジェクトのインスタンス。その名前のオブジェクトが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)">
      <summary>指定したオブジェクトの名前を取得します。オブジェクトに名前がない場合は <see langword="null" /> を取得します。</summary>
      <param name="value">名前を取得する対象のオブジェクト。</param>
      <returns>オブジェクトの名前。オブジェクトに名前がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary>指定したオブジェクト型に対応する、要求された型のシリアライザーを取得します。</summary>
      <param name="objectType">シリアライザーを取得する対象のオブジェクトの型。</param>
      <param name="serializerType">取得するシリアライザーの型。</param>
      <returns>要求されたシリアライザーのインスタンス。該当するシリアライザーが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)">
      <summary>指定した名前の型を取得します。</summary>
      <param name="typeName">読み込まれる型の完全修飾名。</param>
      <returns>型のインスタンス。型を読み込めない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <summary>有効なシリアライザーを使用してシリアル化できるカスタム プロパティを示します。</summary>
      <returns>シリアル化されるプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>カスタム シリアル化プロバイダーをシリアル化マネージャーから削除します。</summary>
      <param name="provider">削除するプロバイダー。 このオブジェクトは、<see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" /> を使用して追加されていることが必要です。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)">
      <summary>シリアル化時のエラーを報告します。</summary>
      <param name="errorInformation">報告するエラー。 この情報オブジェクトには、任意のオブジェクト型を使用できます。 オブジェクトが例外である場合は、例外のメッセージが抽出され、ユーザーに報告されます。 それ以外の型である場合は、<see cref="M:System.Object.ToString" /> が呼び出され、ユーザーに対して情報が表示されます。</param>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName">
      <summary>
        <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)" /> が、指定した名前をシリアル化マネージャーの名前テーブルで見つけることができない場合に発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete">
      <summary>シリアル化が完了したときに発生します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)">
      <summary>指定した既存のオブジェクトの名前を設定します。</summary>
      <param name="instance">名前を付ける対象のオブジェクト。</param>
      <param name="name">インスタンスに付ける名前。</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider">
      <summary>シリアライザーにアクセスできるようにするインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
      <summary>指定した属性を使用してシリアライザーを取得します。</summary>
      <param name="manager">シリアライザーを要求しているシリアル化マネージャー。</param>
      <param name="currentSerializer">指定した型の現在のシリアライザーのインスタンス。 指定した型のシリアライザーがない場合、この値は <see langword="null" /> になります。</param>
      <param name="objectType">シリアル化するオブジェクトのデータ型。</param>
      <param name="serializerType">作成するシリアライザーのデータ型。</param>
      <returns>要求された型のシリアライザーのインスタンス。要求を満たすシリアライザーがない場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationService">
      <summary>シリアル化と逆シリアル化を起動できるインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(System.Object)">
      <summary>指定したシリアル化データ オブジェクトを逆シリアル化し、そのデータと等価なオブジェクトのコレクションを返します。</summary>
      <param name="serializationData">シリアル化されたデータから構成されるオブジェクト。</param>
      <returns>指定したシリアル化データ オブジェクトから再ビルドしたオブジェクトの <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(System.Collections.ICollection)">
      <summary>指定したオブジェクトのコレクションをシリアル化し、シリアル化されたデータをシリアル化データ オブジェクトに格納します。</summary>
      <param name="objects">シリアル化するオブジェクトのコレクション。</param>
      <returns>指定したオブジェクトのコレクションのシリアル化された状態を格納するオブジェクト。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.INameCreationService">
      <summary>オブジェクトの一意の名前を生成できるサービスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)">
      <summary>指定したコンテナー内でどのコンポーネントとも重複しない新しい名前を作成します。</summary>
      <param name="container">新しいオブジェクトが追加される先のコンテナー。</param>
      <param name="dataType">名前を受け取るオブジェクトのデータ型。</param>
      <returns>データ型の一意の名前。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)">
      <summary>指定した名前が有効かどうかを示す値を取得します。</summary>
      <param name="name">検証対象の名前。</param>
      <returns>名前が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)">
      <summary>指定した名前が有効かどうかを示す値を取得します。</summary>
      <param name="name">検証対象の名前。</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.InstanceDescriptor">
      <summary>オブジェクトのインスタンスを作成するために必要な情報を提供します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection)">
      <summary>メンバー情報と引数を指定して、<see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="member">記述子のメンバー情報。 これは、<see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.ConstructorInfo" />、<see cref="T:System.Reflection.FieldInfo" />、または <see cref="T:System.Reflection.PropertyInfo" /> である場合もあります。 これが <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" />、または <see cref="T:System.Reflection.PropertyInfo" /> である場合は、<see langword="static" /> メンバーを表している必要があります。</param>
      <param name="arguments">メンバーに渡される引数のコレクション。 引数がない場合、このパラメーターは <see langword="null" /> または空のコレクションになります。 コレクションは、<see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> の他のインスタンスから構成されることもあります。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> の型が <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" />、または <see cref="T:System.Reflection.PropertyInfo" /> であり、<see langword="static" /> メンバーを表していません。  

または - 
<paramref name="member" /> の型が <see cref="T:System.Reflection.PropertyInfo" /> であり、読み取り可能ではありません。  

または 
<paramref name="member" /> の型が <see cref="T:System.Reflection.MethodInfo" /> または <see cref="T:System.Reflection.ConstructorInfo" /> であり、<paramref name="arguments" /> の引数の数が <paramref name="member" /> のシグネチャに一致しません。

または -

<paramref name="member" /> の型が <see cref="T:System.Reflection.ConstructorInfo" /> であり、<see langword="static" /> メンバーを表しています。  
または 
<paramref name="member" /> の型が <see cref="T:System.Reflection.FieldInfo" /> であり、<paramref name="arguments" /> の引数の数が 0 以外です。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection,System.Boolean)">
      <summary>メンバー情報、引数、およびこれらの情報がインスタンスの完全な記述であるかどうかを示す値を指定して、<see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="member">記述子のメンバー情報。 これは、<see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.ConstructorInfo" />、<see cref="T:System.Reflection.FieldInfo" />、または <see cref="T:System.Reflection.PropertyInfo" /> である場合もあります。 これが <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" />、または <see cref="T:System.Reflection.PropertyInfo" /> である場合は、<see langword="static" /> メンバーを表している必要があります。</param>
      <param name="arguments">メンバーに渡される引数のコレクション。 引数がない場合、このパラメーターは <see langword="null" /> または空のコレクションになります。 コレクションは、<see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> の他のインスタンスから構成されることもあります。</param>
      <param name="isComplete">指定した情報がインスタンスの完全な記述である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> の型が <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" /> または <see cref="T:System.Reflection.PropertyInfo" /> であり、<see langword="static" /> メンバーを表していません。 
 <paramref name="member" /> の型が <see cref="T:System.Reflection.PropertyInfo" /> であり、読み取り可能ではありません。  
 <paramref name="member" /> の型が <see cref="T:System.Reflection.MethodInfo" /> または <see cref="T:System.Reflection.ConstructorInfo" /> であり、<paramref name="arguments" /> の引数の数が <paramref name="member" /> のシグネチャに一致しません。  
 <paramref name="member" /> の型が <see cref="T:System.Reflection.ConstructorInfo" /> であり、<see langword="static" /> メンバーを表しています。 
 <paramref name="member" /> の型が <see cref="T:System.Reflection.FieldInfo" /> であり、<paramref name="arguments" /> の引数の数が 0 以外です。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.Arguments">
      <summary>このインスタンス記述子が表すオブジェクトのインスタンスを再構築するために使用できる引数のコレクションを取得します。</summary>
      <returns>オブジェクトを作成するために使用できる引数の <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke">
      <summary>このインスタンス記述子を呼び出し、記述子が記述するオブジェクトを返します。</summary>
      <returns>このインスタンス記述子が記述するオブジェクト。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.IsComplete">
      <summary>この <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> の内容でインスタンスを完全に識別できるかどうかを示す値を取得します。</summary>
      <returns>インスタンスが完全に記述されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.MemberInfo">
      <summary>この記述子が関連付けられているインスタンスを記述するメンバー情報を取得します。</summary>
      <returns>このオブジェクトが関連付けられているインスタンスを記述する <see cref="T:System.Reflection.MemberInfo" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationship">
      <summary>オブジェクトとメンバー間の単一のリレーションシップを表します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="owner">
        <paramref name="member" /> を所有するオブジェクト。</param>
      <param name="member">
        <paramref name="owner" /> に関連付けられるメンバー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> または <paramref name="member" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty">
      <summary>空のメンバー リレーションシップを表します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.Equals(System.Object)">
      <summary>2 つの <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> インスタンスが等しいかどうかを判断します。</summary>
      <param name="obj">現在の <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> と比較する <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />。</param>
      <returns>指定した <see langword="true" /> が現在の <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> と等しい場合は <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>現在の <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> のハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.IsEmpty">
      <summary>このリレーションシップが <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> リレーションシップに等しいかどうかを示す値を取得します。</summary>
      <returns>このリレーションシップが <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> リレーションシップと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Member">
      <summary>関連するメンバーを取得します。</summary>
      <returns>
        <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" /> に渡されるメンバー。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Equality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>指定した 2 つの <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 構造体が等しいかどうかをテストします。</summary>
      <param name="left">等値演算子の左側に表示される <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 構造体。</param>
      <param name="right">等値演算子の右側に表示される <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 構造体。</param>
      <returns>2 つの <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 構造体が等しい場合、この演算子は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Inequality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>指定した 2 つの <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 構造体が異なるかどうかをテストします。</summary>
      <param name="left">非等値演算子の左側に表示される <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 構造体。</param>
      <param name="right">非等値演算子の右側に表示される <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 構造体。</param>
      <returns>2 つの <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 構造体が異なる場合、この演算子は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Owner">
      <summary>所有オブジェクトを取得します。</summary>
      <returns>
        <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" /> に渡される所有オブジェクト。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationshipService">
      <summary>1 つのメンバーを別のメンバーに関連付けるための基本クラスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationshipService" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.GetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>指定したソース リレーションシップとのリレーションシップを取得します。</summary>
      <param name="source">ソース リレーションシップ。</param>
      <returns>
        <paramref name="source" /> とのリレーションシップ。リレーションシップが存在しない場合は <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>ソース オブジェクトとターゲット オブジェクトの間のリレーションシップを確立します。</summary>
      <param name="source">ソース リレーションシップ。 これは、リレーションシップの代入式の左辺です。</param>
      <returns>
        <paramref name="source" /> に関連付けられている現在のリレーションシップ。リレーションシップが存在しない場合は <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> が空であるか、またはサービスでリレーションシップがサポートされていません。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>ソース オブジェクトとターゲット オブジェクトの間のリレーションシップを確立します。</summary>
      <param name="sourceOwner">ソース リレーションシップの所有者。</param>
      <param name="sourceMember">ソース リレーションシップのメンバー。</param>
      <returns>ソース オブジェクトとターゲット オブジェクトの間のリレーションシップをカプセル化する <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />構造体。リレーションシップが存在しない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceOwner" /> または <paramref name="sourceMember" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceOwner" /> または <paramref name="sourceMember" /> が空であるか、またはサービスでリレーションシップがサポートされていません。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>ソース オブジェクトとターゲット リレーションシップの間のリレーションシップを作成します。</summary>
      <param name="source">ソース リレーションシップ。</param>
      <param name="relationship">ソースに設定するリレーションシップ。</param>
      <exception cref="T:System.ArgumentException">リレーションシップがサービスでサポートされていません。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>指定したリレーションシップがサポートされているかどうかを示す値を取得します。</summary>
      <param name="source">ソース リレーションシップ。</param>
      <param name="relationship">ソースに設定するリレーションシップ。</param>
      <returns>2 つのオブジェクト間のリレーションシップがサポートされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.#ctor(System.String)">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">解決する名前。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Name">
      <summary>解決するオブジェクトの名前を取得します。</summary>
      <returns>解決するオブジェクトの名前。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Value">
      <summary>名前と一致するオブジェクトを取得または設定します。</summary>
      <returns>名前に関連付けられているオブジェクト。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventHandler">
      <summary>シリアル化マネージャーの <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
      <summary>ルート デザイナー オブジェクトのために使用する基本シリアライザーを示します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>属性を指定して、<see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="serializerTypeName">シリアライザーのデータ型の完全修飾名。</param>
      <param name="baseSerializerTypeName">シリアライザーの基本型の名前。 シリアライザーの基本型がすべて異なっているため、1 つのクラスに複数のシリアライザーを組み込むことができます。</param>
      <param name="reloadable">このシリアライザーがドキュメントの動的な再読み込みをサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
      <summary>属性を指定して、<see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="serializerTypeName">シリアライザーのデータ型の完全修飾名。</param>
      <param name="baseSerializerType">シリアライザーの基本型の名前。 シリアライザーの基本型がすべて異なっているため、1 つのクラスに複数のシリアライザーを組み込むことができます。</param>
      <param name="reloadable">このシリアライザーがドキュメントの動的な再読み込みをサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
      <summary>属性を指定して、<see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="serializerType">シリアライザーのデータ型。</param>
      <param name="baseSerializerType">シリアライザーの基本型。 シリアライザーの基本型がすべて異なっているため、1 つのクラスに複数のシリアライザーを組み込むことができます。</param>
      <param name="reloadable">このシリアライザーがドキュメントの動的な再読み込みをサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
      <summary>ルート シリアライザーが、デザイナー ホストを解放することなく実行されるデザイン ドキュメントの再読み込みをサポートするかどうかを示す値を取得します。</summary>
      <returns>ルート シリアライザーが再読み込みをサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>シリアライザーの基本型の完全修飾型名を取得します。</summary>
      <returns>シリアライザーの基本型の名前。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName">
      <summary>シリアライザーの完全修飾型名を取得します。</summary>
      <returns>シリアライザーの型の名前。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
      <summary>この属性型の一意の ID を取得します。</summary>
      <returns>この属性型の一意の ID を格納しているオブジェクト。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.SerializationStore">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" /> のシリアル化データを格納するための基本クラスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Close">
      <summary>シリアル化ストアを閉じます。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.SerializationStore.Errors">
      <summary>シリアル化中または逆シリアル化中に発生したエラーのコレクションを取得します。</summary>
      <returns>シリアル化中または逆シリアル化中に発生したエラーを格納する <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)">
      <summary>指定したストリームにストアを保存します。</summary>
      <param name="stream">ストアのシリアル化先のストリーム。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.System#IDisposable#Dispose">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceContainer">
      <summary>
        <see cref="T:System.ComponentModel.Design.IServiceContainer" /> インターフェイスの単純な実装を提供します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.ServiceContainer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)">
      <summary>親サービス プロバイダーを指定して、<see cref="T:System.ComponentModel.Design.ServiceContainer" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="parentProvider">親サービス プロバイダー。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>指定したサービスをサービス コンテナーに追加します。</summary>
      <param name="serviceType">追加するサービスの型。</param>
      <param name="callback">サービスを作成できるコールバック オブジェクト。 これにより、サービスを使用可能として宣言できますが、オブジェクトの作成はそのサービスが要求されるまで延期されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> または <paramref name="callback" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">型のサービス <paramref name="serviceType" /> はコンテナー内に既に存在します。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>指定したサービスをサービス コンテナーに追加します。</summary>
      <param name="serviceType">追加するサービスの型。</param>
      <param name="callback">サービスを作成できるコールバック オブジェクト。 これにより、サービスを使用可能として宣言できますが、オブジェクトの作成はそのサービスが要求されるまで延期されます。</param>
      <param name="promote">サービスを任意の親サービス コンテナーに追加する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> または <paramref name="callback" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">型のサービス <paramref name="serviceType" /> はコンテナー内に既に存在します。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)">
      <summary>指定したサービスをサービス コンテナーに追加します。</summary>
      <param name="serviceType">追加するサービスの型。</param>
      <param name="serviceInstance">追加するサービスのインスタンス。 このオブジェクトは、<paramref name="serviceType" /> パラメーターに指定された型を実装しているか、またはその型から継承していることが必要です。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> または <paramref name="serviceInstance" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">型のサービス <paramref name="serviceType" /> はコンテナー内に既に存在します。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>指定したサービスをサービス コンテナーに追加します。</summary>
      <param name="serviceType">追加するサービスの型。</param>
      <param name="serviceInstance">追加するサービス型のインスタンス。 このオブジェクトは、<paramref name="serviceType" /> パラメーターに指定された型を実装しているか、またはその型から継承していることが必要です。</param>
      <param name="promote">サービスを任意の親サービス コンテナーに追加する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> または <paramref name="serviceInstance" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">型のサービス <paramref name="serviceType" /> はコンテナー内に既に存在します。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.ServiceContainer.DefaultServices">
      <summary>
        <see cref="T:System.ComponentModel.Design.ServiceContainer" /> によって直接実装されている既定のサービスを取得します。</summary>
      <returns>既定のサービス。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose">
      <summary>このサービス コンテナーを破棄します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose(System.Boolean)">
      <summary>このサービス コンテナーを破棄します。</summary>
      <param name="disposing">
        <see cref="T:System.ComponentModel.Design.ServiceContainer" /> が破棄処理中である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)">
      <summary>要求したサービスを取得します。</summary>
      <param name="serviceType">取得するサービスの型。</param>
      <returns>サービスが見つかった場合はそのサービスのインスタンス。サービスが見つからなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)">
      <summary>指定したサービスの型をサービス コンテナーから削除します。</summary>
      <param name="serviceType">削除するサービスの型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>指定したサービスの型をサービス コンテナーから削除します。</summary>
      <param name="serviceType">削除するサービスの型。</param>
      <param name="promote">任意の親サービス コンテナーからサービスを削除する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceCreatorCallback">
      <summary>要求に応じてサービスのインスタンスを作成できるコールバック機構を提供します。</summary>
      <param name="container">サービスの作成を要求したサービス コンテナー。</param>
      <param name="serviceType">作成するサービスの型。</param>
      <returns>
        <paramref name="serviceType" /> によって指定されたサービス。サービスが作成されなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.StandardCommands">
      <summary>ほとんどのアプリケーションで使用できる一連の標準コマンドの識別子を定義します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardCommands.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.StandardCommands" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignBottom">
      <summary>AlignBottom コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignHorizontalCenters">
      <summary>AlignHorizontalCenters コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignLeft">
      <summary>AlignLeft コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignRight">
      <summary>AlignRight コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignToGrid">
      <summary>AlignToGrid コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignTop">
      <summary>AlignTop コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignVerticalCenters">
      <summary>AlignVerticalCenters コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeBottom">
      <summary>ArrangeBottom コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeIcons">
      <summary>ArrangeIcons コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeRight">
      <summary>ArrangeRight コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringForward">
      <summary>BringForward コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringToFront">
      <summary>BringToFront コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterHorizontally">
      <summary>CenterHorizontally コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterVertically">
      <summary>CenterVertically コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Copy">
      <summary>Copy コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Cut">
      <summary>Cut コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Delete">
      <summary>Delete コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.DocumentOutline">
      <summary>Document Outline コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.F1Help">
      <summary>F1Help コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Group">
      <summary>Group コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceConcatenate">
      <summary>HorizSpaceConcatenate コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceDecrease">
      <summary>HorizSpaceDecrease コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceIncrease">
      <summary>HorizSpaceIncrease コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceMakeEqual">
      <summary>HorizSpaceMakeEqual コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LineupIcons">
      <summary>LineupIcons コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LockControls">
      <summary>LockControls コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelRedo">
      <summary>MultiLevelRedo コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelUndo">
      <summary>MultiLevelUndo コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Paste">
      <summary>Paste コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Properties">
      <summary>Properties コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.PropertiesWindow">
      <summary>PropertiesWindow コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Redo">
      <summary>Redo コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Replace">
      <summary>Replace コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SelectAll">
      <summary>SelectAll コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendBackward">
      <summary>SendBackward コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendToBack">
      <summary>SendToBack コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowGrid">
      <summary>ShowGrid コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowLargeIcons">
      <summary>ShowLargeIcons コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControl">
      <summary>SizeToControl コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlHeight">
      <summary>SizeToControlHeight コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlWidth">
      <summary>SizeToControlWidth コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToFit">
      <summary>SizeToFit コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToGrid">
      <summary>SizeToGrid コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SnapToGrid">
      <summary>SnapToGrid コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.TabOrder">
      <summary>TabOrder コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Undo">
      <summary>Undo コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Ungroup">
      <summary>Ungroup コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbFirst">
      <summary>一連の動詞の先頭を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbLast">
      <summary>一連の動詞の末尾を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceConcatenate">
      <summary>VertSpaceConcatenate コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceDecrease">
      <summary>VertSpaceDecrease コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceIncrease">
      <summary>VertSpaceIncrease コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceMakeEqual">
      <summary>VertSpaceMakeEqual コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewCode">
      <summary>ViewCode コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewGrid">
      <summary>ViewGrid コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.StandardToolWindows">
      <summary>デザイン環境で使用できる一連の標準ツール ウィンドウに対応する GUID 識別子を定義します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardToolWindows.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.StandardToolWindows" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ObjectBrowser">
      <summary>オブジェクト ブラウザーの GUID を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.OutputWindow">
      <summary>出力ウィンドウの GUID を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ProjectExplorer">
      <summary>ソリューション エクスプローラーの GUID を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.PropertyBrowser">
      <summary>[プロパティ] ウィンドウの GUID を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.RelatedLinks">
      <summary>関連するリンク フレームの GUID を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ServerExplorer">
      <summary>サーバー エクスプローラーの GUID を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.TaskList">
      <summary>タスク一覧の GUID を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.Toolbox">
      <summary>ツールボックスの GUID を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.TypeDescriptionProviderService">
      <summary>指定された型に対応する型説明のプロバイダーを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.TypeDescriptionProviderService" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Object)">
      <summary>指定されたオブジェクトに対応する型説明のプロバイダーを取得します。</summary>
      <param name="instance">型説明のプロバイダーを取得するオブジェクト。</param>
      <returns>
        <paramref name="instance" /> に対応する <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Type)">
      <summary>指定された型に対応する型説明のプロバイダーを取得します。</summary>
      <param name="type">型説明のプロバイダーを取得する型。</param>
      <returns>
        <paramref name="type" /> に対応する <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ViewTechnology">
      <summary>デザイナー ホストがサポートする一連の技術の識別子を定義します。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Default">
      <summary>既定のビュー技術サポートを指定します。
ルート デザイナーから任意の種類のオブジェクトが返される可能性がありますが、そのオブジェクトはホストのテクノロジに対するアダプターと互換性を持つ必要があります。 Visual Studio などのホスティング環境には、新しいビュー テクノロジ アダプターをプラグインする方法が用意されています。 Windows フォーム デザイナー用の既定のビュー オブジェクトは、<see cref="T:System.Windows.Forms.Control" /> インスタンスです。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
      <summary>ビュー オブジェクトを開発環境に直接渡すモードを表します。
ビュー オブジェクトでは、開発環境で求められるインターフェイスを実装する必要があります。 Visual Studio 開発環境でサポートされるビュー・オブジェクトは、ActiveX コントロール、アクティブ ドキュメント、または Visual Studio VSI (Visual Studio Integration) プログラムを介して使用可能な IVsWindowPane インターフェイスを実装するオブジェクトのいずれかです。 Visual Studio 開発環境では、このビューテクノロジに対するサポートが提供されています。 このビュー テクノロジのサポートは、必ずしもすべての開発環境で利用できるわけではありません。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
      <summary>Windows フォーム コントロール オブジェクトがルート デザイナーにおける表示を提供するモードを表します。 デザイナー ホストは、開発環境のドキュメントウィンドウに Windows フォーム コントロールを埋め込みます。</summary>
    </member>
    <member name="T:System.ComponentModel.DesignerAttribute">
      <summary>コンポーネントのデザイン時サービスを実装するために使用されるクラスを指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String)">
      <summary>デザイン時サービスを提供する型の名前を指定して、<see cref="T:System.ComponentModel.DesignerAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="designerTypeName">この属性がバインドされているコンポーネントに対してデザイン時サービスを提供する型の完全修飾名の連結、および、格納されているこの型のアセンブリの名前。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.String)">
      <summary>デザイナーの型とデザイナーの基本クラスを指定して、<see cref="T:System.ComponentModel.DesignerAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="designerTypeName">この属性がバインドされているコンポーネントに対してデザイン時サービスを提供する型の完全修飾名の連結、および、格納されているこの型のアセンブリの名前。</param>
      <param name="designerBaseTypeName">デザイナー クラスと関連付ける基本クラスの完全修飾名。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.Type)">
      <summary>デザイナー クラスの名前とデザイナーの基本クラスを指定して、<see cref="T:System.ComponentModel.DesignerAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="designerTypeName">この属性がバインドされているコンポーネントに対してデザイン時サービスを提供する型の完全修飾名の連結、および、格納されているこの型のアセンブリの名前。</param>
      <param name="designerBaseType">
        <paramref name="designerTypeName" /> と関連付ける基本クラスを表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type)">
      <summary>デザイン時サービスを提供する型を指定して、<see cref="T:System.ComponentModel.DesignerAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="designerType">この属性がバインドされているコンポーネントに対してデザイン時サービスを提供するクラスを表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type,System.Type)">
      <summary>デザイナーの型とデザイナー基本クラスを指定して、<see cref="T:System.ComponentModel.DesignerAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="designerType">この属性がバインドされているコンポーネントに対してデザイン時サービスを提供するクラスを表す <see cref="T:System.Type" />。</param>
      <param name="designerBaseType">
        <paramref name="designerType" /> と関連付ける基本クラスを表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerBaseTypeName">
      <summary>このデザイナーの基本型の名前を取得します。</summary>
      <returns>このデザイナーの基本型の名前。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerTypeName">
      <summary>このデザイナー属性と関連付けられているデザイナー型の名前を取得します。</summary>
      <returns>このデザイナー属性と関連付けられているデザイナー型の名前。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.Equals(System.Object)">
      <summary>指定したオブジェクトの値が現在の <see cref="T:System.ComponentModel.DesignerAttribute" /> と等しいかどうかを示す値を返します。</summary>
      <param name="obj">値が等しいかどうかを確認するオブジェクト。</param>
      <returns>指定したオブジェクトの値が現在の値と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.TypeId">
      <summary>この属性型の一意の ID を取得します。</summary>
      <returns>この属性型の一意の ID。</returns>
    </member>
    <member name="T:System.ComponentModel.DesignTimeVisibleAttribute">
      <summary>
        <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> は、コンポーネントの可視性をマークします。 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes" /> が設定されている場合、ビジュアル デザイナーは、このコンポーネントをデザイナーに表示できます。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor">
      <summary>既定値の <see langword="false" /> に設定した、新しい <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> を作成します。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> プロパティに <paramref name="visible" /> で指定された値を設定して、新しい <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> を作成します。</summary>
      <param name="visible">
        <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> プロパティに設定される値。</param>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Default">
      <summary>既定の可視性は <see langword="Yes" /> です。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.Equals(System.Object)">
      <summary>このインスタンスが、指定されたオブジェクトと等価であるかどうかを示す値を返します。</summary>
      <param name="obj">このインスタンスまたは null 参照 (Visual Basic では <see langword="Nothing" />) と比較するオブジェクト。</param>
      <returns>
        <see langword="true" /> がこのインスタンスの型および値に等しい場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.IsDefaultAttribute">
      <summary>このインスタンスが <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" /> 値と等しいかどうかを示す値を取得します。</summary>
      <returns>インスタンスが <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" /> 値と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.No">
      <summary>コンポーネントをビジュアル デザイナーで参照できないことをマークします。</summary>
    </member>
    <member name="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible">
      <summary>コンポーネントがデザイン時に表示されるかどうかを取得または設定します。</summary>
      <returns>このコンポーネントがデザイン時に表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes">
      <summary>コンポーネントをビジュアル デザイナーで参照できることをマークします。</summary>
    </member>
    <member name="T:System.ComponentModel.DoubleConverter">
      <summary>倍精度浮動小数点数オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.DoubleConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.DoubleConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.EditorAttribute">
      <summary>プロパティの変更に使用するエディターを指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor">
      <summary>既定のエディターを指定して、<see cref="T:System.ComponentModel.EditorAttribute" /> クラスの新しいインスタンスを初期化します。つまり、エディターは指定されません。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.String)">
      <summary>エディターの型名と基本型名を指定して、<see cref="T:System.ComponentModel.EditorAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeName">エディターの完全修飾型名。</param>
      <param name="baseTypeName">エディターを検索するためのキーとして使用する基本クラスまたは基本インターフェイスの完全修飾型名。 このクラスは、<see cref="T:System.Drawing.Design.UITypeEditor" /> であるか、またはそこから派生している必要があります。</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.Type)">
      <summary>型名と基本型を指定して、<see cref="T:System.ComponentModel.EditorAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeName">エディターの完全修飾型名。</param>
      <param name="baseType">エディターを検索するためのキーとして使用する基本クラスまたは基本インターフェイスの <see cref="T:System.Type" />。 このクラスは、<see cref="T:System.Drawing.Design.UITypeEditor" /> であるか、またはそこから派生している必要があります。</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.Type,System.Type)">
      <summary>型と基本型を指定して、<see cref="T:System.ComponentModel.EditorAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">エディターの型を表す <see cref="T:System.Type" />。</param>
      <param name="baseType">エディターを検索するためのキーとして使用する基本クラスまたは基本インターフェイスの <see cref="T:System.Type" />。 このクラスは、<see cref="T:System.Drawing.Design.UITypeEditor" /> であるか、またはそこから派生している必要があります。</param>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorBaseTypeName">
      <summary>エディターを検索するためのキーとして使用する基本クラスまたは基本インターフェイスの名前を取得します。</summary>
      <returns>エディターを検索するためのキーとして機能する基本クラスまたは基本インターフェイスの名前。</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorTypeName">
      <summary>
        <see cref="P:System.Type.AssemblyQualifiedName" /> 形式のエディター クラス名を取得します。</summary>
      <returns>
        <see cref="P:System.Type.AssemblyQualifiedName" /> 形式のエディター クラス名。</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.Equals(System.Object)">
      <summary>指定したオブジェクトの値が現在の <see cref="T:System.ComponentModel.EditorAttribute" /> と等しいかどうかを示す値を返します。</summary>
      <param name="obj">値が等しいかどうかを確認するオブジェクト。</param>
      <returns>指定したオブジェクトの値が現在のオブジェクトの値と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.TypeId">
      <summary>この属性型の一意の ID を取得します。</summary>
      <returns>この属性型の一意の ID。</returns>
    </member>
    <member name="T:System.ComponentModel.EnumConverter">
      <summary>
        <see cref="T:System.Enum" /> 型オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.#ctor(System.Type)">
      <summary>特定の型の <see cref="T:System.ComponentModel.EnumConverter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">この列挙体コンバーターに関連付ける列挙体の型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、指定したコンテキストを使用して特定の型のオブジェクトを列挙オブジェクトに変換できるかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Comparer">
      <summary>列挙値を並べ替えるために使用できる <see cref="T:System.Collections.IComparer" /> を取得します。</summary>
      <returns>列挙値を並べ替えるための <see cref="T:System.Collections.IComparer" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定した値オブジェクトを列挙オブジェクトに変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">オプションの <see cref="T:System.Globalization.CultureInfo" />。 指定されなかった場合は、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <returns>変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、変換後の型として有効な値ではありません。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>値オブジェクトを目的の型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">オプションの <see cref="T:System.Globalization.CultureInfo" />。 指定されなかった場合は、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">値の変換後の <see cref="T:System.Type" />。</param>
      <returns>変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> は、列挙体に対して有効な値ではありません。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.EnumType">
      <summary>このコンバーターが関連付けられている列挙子の型を指定します。</summary>
      <returns>このコンバーターが関連付けられている列挙子の型。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>検証コントロールがデザインされた対象のデータ型の標準値のコレクションを取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>正しい値の標準セットを保持する <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />。データ型が標準値セットをサポートしていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>指定したコンテキストを使用して、<see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> から返された標準値のリストが排他的リストかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>
        <see langword="true" /> から返された <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> が、有効値の排他的なリストの場合は <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />。他の値も有効である場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>指定したコンテキストを使用して、リストから選択できる標準値セットをオブジェクトがサポートするかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>オブジェクトがサポートしている標準値セットを見つけるために <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> を呼び出す必要があるので、<see langword="true" />。 このメソッドが <see langword="false" /> を返すことはありません。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>指定したオブジェクトの値がこの型に対して有効かどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">テスト対象の <see cref="T:System.Object" />。</param>
      <returns>指定した値がオブジェクトに対して有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Values">
      <summary>この列挙体の有効な値を指定する <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> を取得または設定します。</summary>
      <returns>この列挙体の有効な値を指定する <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />。</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptor">
      <summary>イベントに関する情報を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>指定した <see cref="T:System.ComponentModel.EventDescriptor" /> 内の名前と属性を使用して、<see cref="T:System.ComponentModel.MemberDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="descr">イベントの名前とその属性を格納している <see cref="T:System.ComponentModel.MemberDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>指定した <see cref="T:System.ComponentModel.EventDescriptor" /> 内の名前と、<see cref="T:System.ComponentModel.MemberDescriptor" /> および <see cref="T:System.ComponentModel.MemberDescriptor" /> 配列の両方に格納されている属性を使用して、<see cref="T:System.Attribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="descr">メンバーの名前とその属性を格納している <see cref="T:System.ComponentModel.MemberDescriptor" />。</param>
      <param name="attrs">イベントの説明に追加する属性を格納している <see cref="T:System.Attribute" /> 配列。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>名前と属性配列を指定して、<see cref="T:System.ComponentModel.EventDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">イベントの名前です。</param>
      <param name="attrs">イベントの属性を格納している <see cref="T:System.Attribute" /> 型の配列。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)">
      <summary>派生クラスでオーバーライドされた場合、イベントをコンポーネントに関連付けます。</summary>
      <param name="component">デリゲートにイベントを提供するコンポーネント。</param>
      <param name="value">イベントを処理するメソッドを表すデリゲート。</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.ComponentType">
      <summary>派生クラスでオーバーライドされた場合、イベントが関連付けられているコンポーネントの型を取得します。</summary>
      <returns>イベントが関連付けられているコンポーネントの型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.EventType">
      <summary>派生クラスでオーバーライドされた場合、イベントのデリゲートの型を取得します。</summary>
      <returns>イベントのデリゲートの型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.IsMulticast">
      <summary>派生クラスでオーバーライドされた場合、イベント デリゲートがマルチキャスト デリゲートかどうかを示す値を取得します。</summary>
      <returns>イベント デリゲートがマルチキャストの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>派生クラスでオーバーライドされた場合、コンポーネントとデリゲートの関連付けを解除し、デリゲートがコンポーネントからイベントを受信しなくなるようにします。</summary>
      <param name="component">デリゲートが関連付けられているコンポーネント。</param>
      <param name="value">コンポーネントとの関連付けを解除するデリゲート。</param>
    </member>
    <member name="T:System.ComponentModel.EventDescriptorCollection">
      <summary>
        <see cref="T:System.ComponentModel.EventDescriptor" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])">
      <summary>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> オブジェクトの配列を指定して、<see cref="T:System.ComponentModel.EventDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="events">コレクションにイベントを提供する、<see cref="T:System.ComponentModel.EventDescriptor" /> 型の配列。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> オブジェクトの配列を指定して、<see cref="T:System.ComponentModel.EventDescriptor" /> クラスの新しいインスタンスを初期化します。 このコレクションは、オプションで読み取り専用にできます。</summary>
      <param name="events">コレクションにイベントを提供する、<see cref="T:System.ComponentModel.EventDescriptor" /> 型の配列。</param>
      <param name="readOnly">コレクションを読み取り専用に指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)">
      <summary>コレクションの末尾に <see cref="T:System.ComponentModel.EventDescriptor" /> を追加します。</summary>
      <param name="value">コレクションに追加する <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <returns>コレクション内の <see cref="T:System.ComponentModel.EventDescriptor" /> の位置。</returns>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Clear">
      <summary>コレクションからすべてのオブジェクトを削除します。</summary>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)">
      <summary>指定した <see cref="T:System.ComponentModel.EventDescriptor" /> がコレクションに格納されているかどうかを示す値を返します。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <returns>指定した <paramref name="value" /> パラメーターがコレクションに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Count">
      <summary>コレクション内のイベント記述子の数を取得します。</summary>
      <returns>コレクション内のイベント記述子の数。</returns>
    </member>
    <member name="F:System.ComponentModel.EventDescriptorCollection.Empty">
      <summary>項目が格納されていないコレクションを新規作成するのではなく、空のコレクションを使用することを指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>コレクション内の指定した名前を持つイベントの説明を取得します。</summary>
      <param name="name">コレクションから取得するイベントの名前。</param>
      <param name="ignoreCase">イベントの大文字と小文字を区別しない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>指定した名前の <see cref="T:System.ComponentModel.EventDescriptor" />。イベントが存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.GetEnumerator">
      <summary>この <see cref="T:System.ComponentModel.EventDescriptorCollection" /> の列挙子を取得します</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> を実装している列挙子。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)">
      <summary>指定した <see cref="T:System.ComponentModel.EventDescriptor" /> のインデックスを返します。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <returns>コレクション内の指定した <see cref="T:System.ComponentModel.EventDescriptor" /> のインデックス。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)">
      <summary>コレクション内の指定したインデックス位置に <see cref="T:System.ComponentModel.EventDescriptor" /> を挿入します。</summary>
      <param name="index">コレクション内の <paramref name="value" /> パラメーターの挿入位置を示すインデックス。</param>
      <param name="value">コレクションに挿入する <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>指定した <see cref="T:System.ComponentModel.EventDescriptorCollection" /> を使用して、<see cref="T:System.Collections.IComparer" /> のメンバーを並べ替えます。</summary>
      <param name="sorter">コレクション内の <see cref="T:System.ComponentModel.EventDescriptor" /> オブジェクトを並べ替えるために使用する比較子。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])">
      <summary>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> のメンバーを並べ替えます。 指定した順序が最初に適用され、次にコレクションの既定の並べ替え順序が適用されます。既定の並べ替え順序は、通常はアルファベット順です。</summary>
      <param name="names">コレクション内の <see cref="T:System.ComponentModel.EventDescriptor" /> オブジェクトを並べ替える順序を記述する文字列の配列。</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)">
      <summary>指定したインデックス番号のイベントを取得または設定します。</summary>
      <param name="index">取得または設定する <see cref="T:System.ComponentModel.EventDescriptor" /> の、0 から始まるインデックス番号。</param>
      <returns>指定したインデックス番号を持つ <see cref="T:System.ComponentModel.EventDescriptor" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> が <see cref="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)" /> の有効なインデックスではありません。</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.String)">
      <summary>指定した名前を持つイベントを取得または設定します。</summary>
      <param name="name">取得または設定する <see cref="T:System.ComponentModel.EventDescriptor" /> の名前。</param>
      <returns>指定した名前の <see cref="T:System.ComponentModel.EventDescriptor" />。イベントが存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)">
      <summary>指定された <see cref="T:System.ComponentModel.EventDescriptor" /> をコレクションから削除します。</summary>
      <param name="value">コレクションから削除する <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)">
      <summary>指定したインデックス位置にある <see cref="T:System.ComponentModel.EventDescriptor" /> をコレクションから削除します。</summary>
      <param name="index">削除する <see cref="T:System.ComponentModel.EventDescriptor" /> のインデックス。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort">
      <summary>コレクションの既定の並べ替え順序を使用して、<see cref="T:System.ComponentModel.EventDescriptorCollection" /> のメンバーを並べ替えます。既定の並べ替え順序は、通常はアルファベット順です。</summary>
      <returns>新しい <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>指定した <see cref="T:System.ComponentModel.EventDescriptorCollection" /> を使用して、<see cref="T:System.Collections.IComparer" /> のメンバーを並べ替えます。</summary>
      <param name="comparer">コレクション内の <see cref="T:System.Collections.IComparer" /> オブジェクトを並べ替えるために使用する <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <returns>新しい <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])">
      <summary>指定した並べ替え順序で、<see cref="T:System.ComponentModel.EventDescriptorCollection" /> のメンバーを並べ替えます。</summary>
      <param name="names">コレクション内の <see cref="T:System.ComponentModel.EventDescriptor" /> オブジェクトを並べ替える順序を記述する文字列の配列。</param>
      <returns>新しい <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>指定した並べ替え順序と <see cref="T:System.ComponentModel.EventDescriptorCollection" /> を使用して、<see cref="T:System.Collections.IComparer" /> のメンバーを並べ替えます。</summary>
      <param name="names">コレクション内の <see cref="T:System.ComponentModel.EventDescriptor" /> オブジェクトを並べ替える順序を記述する文字列の配列。</param>
      <param name="comparer">コレクション内の <see cref="T:System.Collections.IComparer" /> オブジェクトを並べ替えるために使用する <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <returns>新しい <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>コレクションの要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array">コレクションから要素がコピーされる 1 次元の <see cref="T:System.Array" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#Count">
      <summary>コレクションに格納されている要素の数を取得します。</summary>
      <returns>コレクションに格納されている要素の数。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>コレクションへのアクセスの同期がとられているかどうかを示す値を取得します。</summary>
      <returns>コレクションへのアクセスが同期されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary>コレクションへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>コレクションへのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary>項目をコレクションに追加します。</summary>
      <param name="value">コレクションに追加する <see cref="T:System.Object" />。</param>
      <returns>新しい要素が挿入された位置。</returns>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Clear">
      <summary>コレクションからすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary>コレクションに特定の値が格納されているかどうかを判断します。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Object" /> がコレクション内で見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>コレクション内での指定した項目のインデックスを調べます。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.Object" />。</param>
      <returns>リストに存在する場合は <paramref name="value" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>コレクション内の指定したインデックスの位置に項目を挿入します。</summary>
      <param name="index">
        <paramref name="value" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="value">コレクションに挿入する <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary>コレクションが固定サイズかどうかを示す値を取得します。</summary>
      <returns>コレクションが固定サイズの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary>コレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>コレクションが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary>指定したインデックスにある要素を取得または設定します。</summary>
      <param name="index">取得または設定する要素の、0 から始まるインデックス番号。</param>
      <returns>指定したインデックス位置にある要素。</returns>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> が 0 未満です。  

または - 
<paramref name="index" /> が <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" /> 以上になっています。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary>特定のオブジェクトの最初に出現したものをコレクションから削除します。</summary>
      <param name="value">コレクションから削除する <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>指定したインデックスにある項目を削除します。</summary>
      <param name="index">削除する項目の 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="T:System.ComponentModel.ExpandableObjectConverter">
      <summary>拡張可能なオブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.ExpandableObjectConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>value パラメーターに指定されたオブジェクト型のプロパティのコレクションを取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">プロパティを取得する対象となるオブジェクトの型を指定する <see cref="T:System.Object" />。</param>
      <param name="attributes">フィルターとして使用される、<see cref="T:System.Attribute" /> 型の配列。</param>
      <returns>指定されたコンポーネントに対して公開されているプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。コレクションにプロパティが格納されていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>指定したコンテキストを使用して、オブジェクトがプロパティをサポートしているかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>このオブジェクトのプロパティを見つけるために <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> を呼び出す必要があるので、<see langword="true" />。 このメソッドが <see langword="false" /> を返すことはありません。</returns>
    </member>
    <member name="T:System.ComponentModel.ExtenderProvidedPropertyAttribute">
      <summary>拡張プロバイダーによって提供されるプロパティを指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.ExtenderProvidedPropertyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals(System.Object)">
      <summary>このインスタンスが、指定されたオブジェクトと等価であるかどうかを示す値を返します。</summary>
      <param name="obj">このインスタンスまたは null 参照と比較する <see cref="T:System.Object" /> (Visual Basic では <see langword="Nothing" />)。</param>
      <returns>
        <see langword="true" /> がこのインスタンスの型および値に等しい場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ExtenderProperty">
      <summary>提供されるプロパティを取得します。</summary>
      <returns>提供されるプロパティをカプセル化する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.IsDefaultAttribute">
      <summary>このインスタンスの値が派生クラスの既定値かどうかを示します。</summary>
      <returns>このインスタンスがクラスの既定の属性である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.Provider">
      <summary>プロパティを提供している拡張プロバイダーを取得します。</summary>
      <returns>プロパティを提供している <see cref="T:System.ComponentModel.IExtenderProvider" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ReceiverType">
      <summary>プロパティを受け取ることができるオブジェクトの型を取得します。</summary>
      <returns>プロパティを受け取ることができるオブジェクトの型を示す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.ComponentModel.GuidConverter">
      <summary>
        <see cref="T:System.Guid" /> 型オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.GuidConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、コンテキストを使用して特定の型のオブジェクトを GUID オブジェクトに変換できるかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>特定のオブジェクトを GUID オブジェクトに変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">オプションの <see cref="T:System.Globalization.CultureInfo" />。 指定されなかった場合は、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <returns>変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定したオブジェクトを別の型に変換します。</summary>
      <param name="context">フォーマッタ コンテキスト。</param>
      <param name="culture">
        <paramref name="value" /> の変換後のカルチャ。</param>
      <param name="value">変換対象のオブジェクト。</param>
      <param name="destinationType">オブジェクトの変換後の型。</param>
      <returns>変換後のオブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="T:System.ComponentModel.HandledEventArgs">
      <summary>イベント ハンドラーで完全に処理できるイベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor">
      <summary>既定の <see cref="T:System.ComponentModel.HandledEventArgs" /> プロパティ値である <see langword="false" /> を使用して、<see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.HandledEventArgs" /> プロパティの指定した既定値を使用して、<see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="defaultHandledValue">
        <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> プロパティの既定値。</param>
    </member>
    <member name="P:System.ComponentModel.HandledEventArgs.Handled">
      <summary>イベント ハンドラーがイベントを完全に処理したかどうか、またはシステムが独自の処理を継続する必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>イベントが完全に処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventHandler">
      <summary>イベント ハンドラーが戻った後に、さらに処理を必要とする場合と必要がない場合があるイベントを処理できるメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.HandledEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.IBindingList">
      <summary>データ ソースへの連結時の複雑な処理と単純な処理を両方ともサポートするために必要な機能を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>検索に使用されるインデックスに <see cref="T:System.ComponentModel.PropertyDescriptor" /> を追加します。</summary>
      <param name="property">検索に使用されるインデックスに追加する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddNew">
      <summary>リストに新しい項目を追加します。</summary>
      <returns>リストに追加された項目。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.AllowNew" /> は <see langword="false" />です。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowEdit">
      <summary>リストの項目を更新できるかどうかを示す値を取得します。</summary>
      <returns>リストの項目を更新できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowNew">
      <summary>
        <see cref="M:System.ComponentModel.IBindingList.AddNew" /> を使用してリストに項目を追加できるかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="M:System.ComponentModel.IBindingList.AddNew" /> を使用してリストに項目を追加できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowRemove">
      <summary>
        <see cref="M:System.Collections.IList.Remove(System.Object)" /> または <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" /> を使用してリストから項目を削除できるかどうかを示す値を取得します。</summary>
      <returns>リストから項目を削除できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> と <see cref="T:System.ComponentModel.ListSortDirection" /> に基づいて並べ替えを行います。</summary>
      <param name="property">並べ替えのキーとなる <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 値のいずれか。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> が <see langword="false" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>指定された <see cref="T:System.ComponentModel.PropertyDescriptor" /> を保持する行のインデックスを返します。</summary>
      <param name="property">検索対象の <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key">検索する <paramref name="property" /> パラメーターの値。</param>
      <returns>指定された <see cref="T:System.ComponentModel.PropertyDescriptor" /> を保持する行のインデックス。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" /> は <see langword="false" />です。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.IsSorted">
      <summary>リストの項目が並べ替え済みかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> が呼び出され、<see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> は呼び出されていない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> は <see langword="false" />です。</exception>
    </member>
    <member name="E:System.ComponentModel.IBindingList.ListChanged">
      <summary>リストまたはリスト内の項目が変更された場合に発生します。</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>検索に使用されるインデックスから <see cref="T:System.ComponentModel.PropertyDescriptor" /> を削除します。</summary>
      <param name="property">検索に使用されるインデックスから削除する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveSort">
      <summary>
        <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> を使用して並べ替えを適用した場合は、その並べ替えを削除します。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> は <see langword="false" />です。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortDirection">
      <summary>並べ替えの順序を取得します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDirection" /> 値のいずれか 1 つ。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> は <see langword="false" />です。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortProperty">
      <summary>並べ替えに使用されている <see cref="T:System.ComponentModel.PropertyDescriptor" /> を取得します。</summary>
      <returns>並べ替えに使用されている <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> は <see langword="false" />です。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsChangeNotification">
      <summary>リストまたはリスト内の項目が変更されたときに、<see cref="E:System.ComponentModel.IBindingList.ListChanged" /> イベントを発生させるかどうかを示す値を取得します。</summary>
      <returns>リストまたはリスト内の項目が変更されたときに <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> イベントを発生させる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSearching">
      <summary>リストが <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> メソッドを使用した検索をサポートしているかどうかを示す値を取得します。</summary>
      <returns>リストが <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> メソッドを使用した検索をサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSorting">
      <summary>リストが並べ替えをサポートしているかどうかを示す値を取得します。</summary>
      <returns>リストが並べ替えをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.IBindingListView">
      <summary>高度な並べ替えとフィルター処理の機能を提供して、<see cref="T:System.ComponentModel.IBindingList" /> インターフェイスを拡張します。</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary>指定した <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> に基づいて、データ ソースを並べ替えます。</summary>
      <param name="sorts">データ ソースに適用する並べ替えを格納する <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />。</param>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.Filter">
      <summary>データ ソースによって返された項目のコレクションから項目を除外するときに使用するフィルターを取得または設定します。</summary>
      <returns>データ ソースによって返される項目のコレクションに含まれる項目をフィルター処理するときに使用する文字列。</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.RemoveFilter">
      <summary>データ ソースに適用されている現在のフィルターを削除します。</summary>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SortDescriptions">
      <summary>現在データ ソースに適用されている並べ替えに関する説明のコレクションを取得します。</summary>
      <returns>現在データ ソースに適用されている <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting">
      <summary>データ ソースが高度な並べ替えをサポートしているかどうかを示す値を取得します。</summary>
      <returns>データ ソースが高度な並べ替えをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsFiltering">
      <summary>データ ソースがフィルター処理をサポートしているかどうかを示す値を取得します。</summary>
      <returns>データ ソースがフィルター処理をサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ICancelAddNew">
      <summary>コレクションに新しい項目を追加する際のトランザクション機能を追加します。</summary>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)">
      <summary>保留中の新しい項目をコレクションから破棄します。</summary>
      <param name="itemIndex">コレクションに既に追加されている項目のインデックス。</param>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.EndNew(System.Int32)">
      <summary>保留中の新しい項目をコレクションにコミットします。</summary>
      <param name="itemIndex">コレクションに既に追加されている項目のインデックス。</param>
    </member>
    <member name="T:System.ComponentModel.IComNativeDescriptorHandler">
      <summary>COM オブジェクトと <see cref="T:System.ComponentModel.TypeDescriptor" /> の間の最上位のマップ レイヤーを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetAttributes(System.Object)">
      <summary>指定したコンポーネントの属性を取得します。</summary>
      <param name="component">属性を取得する対象のコンポーネント。</param>
      <returns>
        <paramref name="component" /> の属性のコレクション。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetClassName(System.Object)">
      <summary>指定したコンポーネントのクラス名を取得します。</summary>
      <param name="component">クラス名を取得する対象のコンポーネント。</param>
      <returns>
        <paramref name="component" /> に対応するクラスの名前。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetConverter(System.Object)">
      <summary>指定したコンポーネントの型コンバーターを取得します。</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.TypeConverter" /> を取得する対象のコンポーネント。</param>
      <returns>
        <paramref name="component" /> の <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultEvent(System.Object)">
      <summary>指定したコンポーネントの既定のイベントを取得します。</summary>
      <param name="component">既定のイベントを取得する対象のコンポーネント。</param>
      <returns>
        <paramref name="component" /> の既定のイベントを表す <see cref="T:System.ComponentModel.EventDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultProperty(System.Object)">
      <summary>指定したコンポーネントの既定のプロパティを取得します。</summary>
      <param name="component">既定のプロパティを取得するコンポーネント。</param>
      <returns>
        <paramref name="component" /> の既定のプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEditor(System.Object,System.Type)">
      <summary>指定したコンポーネントのエディターを取得します。</summary>
      <param name="component">取得するエディターの対象のコンポーネント。</param>
      <param name="baseEditorType">
        <paramref name="component" /> のエディターの基本型。</param>
      <returns>
        <paramref name="component" /> のエディター。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object)">
      <summary>指定したコンポーネントのイベントを取得します。</summary>
      <param name="component">イベントを取得する対象のコンポーネント。</param>
      <returns>
        <paramref name="component" /> のイベント記述子のコレクション。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object,System.Attribute[])">
      <summary>指定したコンポーネントの指定した属性を持つイベントを取得します。</summary>
      <param name="component">イベントを取得する対象のコンポーネント。</param>
      <param name="attributes">イベントにフィルターをかけるために使用する属性。</param>
      <returns>
        <paramref name="component" /> のイベント記述子のコレクション。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetName(System.Object)">
      <summary>指定したコンポーネントの名前を取得します。</summary>
      <param name="component">名前を取得する対象のコンポーネント。</param>
      <returns>
        <paramref name="component" /> の名前。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetProperties(System.Object,System.Attribute[])">
      <summary>指定したコンポーネントの指定した属性を持つプロパティを取得します。</summary>
      <param name="component">イベントを取得する対象のコンポーネント。</param>
      <param name="attributes">プロパティにフィルターをかけるために使用する属性。</param>
      <returns>
        <paramref name="component" /> のプロパティ記述子のコレクション。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.Int32,System.Boolean@)">
      <summary>指定したディスパッチ識別子を持つプロパティの値を取得します。</summary>
      <param name="component">プロパティが属するオブジェクト。</param>
      <param name="dispid">ディスパッチ識別子。</param>
      <param name="success">プロパティが取得されたかどうかを受け取る <see cref="T:System.Boolean" />。参照渡しで指定します。</param>
      <returns>指定したディスパッチ識別子を持つプロパティの値。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.String,System.Boolean@)">
      <summary>指定した名前のプロパティの値を取得します。</summary>
      <param name="component">プロパティが属するオブジェクト。</param>
      <param name="propertyName">プロパティの名前。</param>
      <param name="success">プロパティが取得されたかどうかを受け取る <see cref="T:System.Boolean" />。参照渡しで指定します。</param>
      <returns>指定した名前のプロパティの値。</returns>
    </member>
    <member name="T:System.ComponentModel.ICustomTypeDescriptor">
      <summary>オブジェクトの動的なカスタム型情報を提供するインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetAttributes">
      <summary>コンポーネントのこのインスタンスのカスタム属性のコレクションを返します。</summary>
      <returns>このオブジェクトの属性を格納している <see cref="T:System.ComponentModel.AttributeCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetClassName">
      <summary>コンポーネントのこのインスタンスのクラス名を返します。</summary>
      <returns>オブジェクトのクラス名。クラスに名前がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetComponentName">
      <summary>コンポーネントのこのインスタンスの名前を返します。</summary>
      <returns>オブジェクト名。オブジェクトに名前がない場合は <see langword="null" /> 。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetConverter">
      <summary>コンポーネントのこのインスタンスの型コンバーターを返します。</summary>
      <returns>このオブジェクトのコンバーターである <see cref="T:System.ComponentModel.TypeConverter" />。このオブジェクトの <see cref="T:System.ComponentModel.TypeConverter" /> がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent">
      <summary>コンポーネントのこのインスタンスの既定のイベントを返します。</summary>
      <returns>このオブジェクトの既定のイベントを表す <see cref="T:System.ComponentModel.EventDescriptor" /> 。このオブジェクトにイベントがない場合は <see langword="null" /> 。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty">
      <summary>コンポーネントのこのインスタンスの既定のプロパティを返します。</summary>
      <returns>このオブジェクトの既定のプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptor" />。このオブジェクトにプロパティがない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type)">
      <summary>コンポーネントのこのインスタンスに対して指定されている型のエディターを返します。</summary>
      <param name="editorBaseType">このオブジェクトのエディターを表す <see cref="T:System.Type" />。</param>
      <returns>指定した型の、このオブジェクトのエディターとなる <see cref="T:System.Object" />。エディターが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents">
      <summary>コンポーネントのこのインスタンスのイベントを返します。</summary>
      <returns>このコンポーネント インスタンスのイベントを表す <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>フィルターとして指定された属性配列を使用して、コンポーネントのこのインスタンスのイベントを返します。</summary>
      <param name="attributes">フィルターとして使用される <see cref="T:System.Attribute" /> 型の配列。</param>
      <returns>このコンポーネント インスタンスのフィルター処理したイベントを表す <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties">
      <summary>コンポーネントのこのインスタンスのプロパティを返します。</summary>
      <returns>このコンポーネント インスタンスのプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>属性配列をフィルターとして使用して、コンポーネントのこのインスタンスのプロパティを返します。</summary>
      <param name="attributes">フィルターとして使用される <see cref="T:System.Attribute" /> 型の配列。</param>
      <returns>このコンポーネント インスタンスのフィルター処理したプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>指定したプロパティ記述子によって記述されたプロパティを含むオブジェクトを返します。</summary>
      <param name="pd">所有者を見つけるプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns>指定したプロパティの所有者を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.IDataErrorInfo">
      <summary>ユーザー インターフェイスをバインドできる、カスタム エラー情報を提示するための機能を提供します。</summary>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Error">
      <summary>オブジェクトに関する間違いを示すエラー メッセージを取得します。</summary>
      <returns>オブジェクトに関する間違いを示すエラー メッセージ。 既定値は、空の文字列 ("") です。</returns>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Item(System.String)">
      <summary>指定した名前のプロパティに関するエラー メッセージを取得します。</summary>
      <param name="columnName">エラー メッセージを取得する対象のプロパティの名前。</param>
      <returns>プロパティに関するエラー メッセージ。 既定値は、空の文字列 ("") です。</returns>
    </member>
    <member name="T:System.ComponentModel.IExtenderProvider">
      <summary>プロパティの適用範囲をコンテナー内のほかのコンポーネントまで拡張するインターフェイスを定義します。</summary>
    </member>
    <member name="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)">
      <summary>オブジェクトが、指定したオブジェクトに対してエクステンダー プロパティを提供できるかどうかを指定します。</summary>
      <param name="extendee">エクステンダー プロパティを受け取る <see cref="T:System.Object" />。</param>
      <returns>オブジェクトが、指定したオブジェクトに対してエクステンダー プロパティを提供できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.IIntellisenseBuilder">
      <summary>効率的にビルダーの名前を検索して、ビルダーを表示するインターフェイスを提供します。</summary>
    </member>
    <member name="P:System.ComponentModel.IIntellisenseBuilder.Name">
      <summary>ローカライズされた名前を取得します。</summary>
      <returns>ローカライズされた名前。</returns>
    </member>
    <member name="M:System.ComponentModel.IIntellisenseBuilder.Show(System.String,System.String,System.String@)">
      <summary>ビルダーを表示します。</summary>
      <param name="language">ビルダーを呼び出す言語サービス。</param>
      <param name="value">編集される式。</param>
      <param name="newValue">新しい値。</param>
      <returns>値を <paramref name="newValue" /> に置き換える必要がある場合は <see langword="true" />。それ以外の場合 (ユーザーがキャンセルした場合など) は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.IListSource">
      <summary>データ ソースに連結できるリストを返す機能をオブジェクトに提供します。</summary>
    </member>
    <member name="P:System.ComponentModel.IListSource.ContainsListCollection">
      <summary>コレクションが <see cref="T:System.Collections.IList" /> オブジェクトのコレクションかどうかを示す値を取得します。</summary>
      <returns>コレクションが <see cref="T:System.Collections.IList" /> オブジェクトのコレクションである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IListSource.GetList">
      <summary>それ自体は <see cref="T:System.Collections.IList" /> を実装していないオブジェクトから、データ ソースに連結できる <see cref="T:System.Collections.IList" /> を返します。</summary>
      <returns>オブジェクトからデータ ソースに連結できる <see cref="T:System.Collections.IList" />。</returns>
    </member>
    <member name="T:System.ComponentModel.INestedContainer">
      <summary>入れ子になったコンテナーを処理する機能を提供します。入れ子になったコンテナーは、論理上 0 個以上のコンポーネントを格納し、親コンポーネントによって所有されています。</summary>
    </member>
    <member name="P:System.ComponentModel.INestedContainer.Owner">
      <summary>入れ子になったコンテナーの所有コンポーネントを取得します。</summary>
      <returns>入れ子になったコンテナーを所有している <see cref="T:System.ComponentModel.IComponent" />。</returns>
    </member>
    <member name="T:System.ComponentModel.INestedSite">
      <summary>コンポーネントの入れ子になった完全名を取得できるようにします。</summary>
    </member>
    <member name="P:System.ComponentModel.INestedSite.FullName">
      <summary>このサイト内のコンポーネントの完全名を取得します。</summary>
      <returns>このサイト内のコンポーネントの完全名。</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceAttribute">
      <summary>この属性に関連付けられているコンポーネントが基本クラスから継承されたかどうかを示します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.InheritanceAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor(System.ComponentModel.InheritanceLevel)">
      <summary>継承レベルを指定して、<see cref="T:System.ComponentModel.InheritanceAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="inheritanceLevel">属性に設定する継承のレベルを示す <see cref="T:System.ComponentModel.InheritanceLevel" />。</param>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.InheritanceAttribute" /> の既定値として <see cref="F:System.ComponentModel.InheritanceAttribute.NotInherited" /> を指定します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.Equals(System.Object)">
      <summary>オーバーライドして等しいかどうかを確認します。</summary>
      <param name="value">テストするオブジェクト。</param>
      <returns>オブジェクトが同一である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.GetHashCode">
      <summary>このオブジェクトのハッシュコードを返します。</summary>
      <returns>現在の <see cref="T:System.ComponentModel.InheritanceAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.InheritanceAttribute.InheritanceLevel">
      <summary>属性に格納されている現在の継承レベルを取得または設定します。</summary>
      <returns>属性に格納されている <see cref="T:System.ComponentModel.InheritanceLevel" />。</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Inherited">
      <summary>コンポーネントが継承されることを指定します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.InheritedReadOnly">
      <summary>コンポーネントが継承され、読み取り専用であることを指定します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.IsDefaultAttribute">
      <summary>属性の現在の値が既定値かどうかを示す値を取得します。</summary>
      <returns>属性の現在の値が既定値である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.NotInherited">
      <summary>コンポーネントが継承されないことを指定します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.ToString">
      <summary>この属性を文字列に変換します。</summary>
      <returns>この <see cref="T:System.ComponentModel.InheritanceAttribute" /> を表す文字列。</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceLevel">
      <summary>さまざまな種類の継承レベルを示す識別子を定義します。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.Inherited">
      <summary>オブジェクトは継承されます。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.InheritedReadOnly">
      <summary>オブジェクトは継承されますが、読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.NotInherited">
      <summary>オブジェクトは継承されません。</summary>
    </member>
    <member name="T:System.ComponentModel.InstallerTypeAttribute">
      <summary>型に対して、コンポーネントをインストールするインストーラーを指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.String)">
      <summary>コンポーネントのインストーラー型の名前を使用して、<see cref="T:System.ComponentModel.InstallerTypeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeName">この属性が連結されているコンポーネントのインストーラーを表す <see cref="T:System.Type" /> の名前。 このクラスは、<see cref="T:System.ComponentModel.Design.IDesigner" /> を実装する必要があります。</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.Type)">
      <summary>コンポーネントのインストーラーを表す <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> が指定されている場合、<see cref="T:System.Type" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="installerType">この属性が連結されているコンポーネントのインストーラーを表す <see cref="T:System.Type" />。 このクラスは、<see cref="T:System.ComponentModel.Design.IDesigner" /> を実装する必要があります。</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.Equals(System.Object)">
      <summary>指定したオブジェクトの値が現在の <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> と等しいかどうかを示す値を返します。</summary>
      <param name="obj">値が等しいかどうかを確認するオブジェクト。</param>
      <returns>指定したオブジェクトの値が現在の値と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.GetHashCode">
      <summary>このオブジェクトのハッシュコードを返します。</summary>
      <returns>現在の <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.InstallerTypeAttribute.InstallerType">
      <summary>この属性に関連付けられているインストーラーの型を取得します。</summary>
      <returns>この属性に関連付けられているインストーラーの型を表す <see cref="T:System.Type" />。インストーラーがない場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.InstanceCreationEditor">
      <summary>
        <see cref="T:System.Windows.Forms.PropertyGrid" /> 内のドロップダウン ボックスから特定の型のプロパティのインスタンスを作成します。</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.InstanceCreationEditor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>派生クラスでオーバーライドされた場合は、指定した型のインスタンスを返します。</summary>
      <param name="context">文脈情報。</param>
      <param name="instanceType">指定された型。</param>
      <returns>指定した型のインスタンスまたは <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.InstanceCreationEditor.Text">
      <summary>指定したテキストを取得します。</summary>
      <returns>指定されたテキスト。</returns>
    </member>
    <member name="T:System.ComponentModel.Int16Converter">
      <summary>16 ビット符号付き整数オブジェクトのほかの表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Int16Converter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Int16Converter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.Int32Converter">
      <summary>32 ビット符号付き整数オブジェクトのほかの表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Int32Converter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Int32Converter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.Int64Converter">
      <summary>64 ビット符号付き整数オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Int64Converter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Int64Converter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.InvalidAsynchronousStateException">
      <summary>操作を実行するスレッドが存在しない場合、またはスレッドにメッセージ ループがない場合に、スローされます。</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>指定した <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> と <see cref="T:System.Runtime.Serialization.SerializationInfo" /> を使用して、<see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">逆シリアル化に使用する <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">逆シリアル化に使用する転送先。</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String)">
      <summary>詳細説明を指定して、<see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーの詳細説明。</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String,System.Exception)">
      <summary>詳細説明と例外を指定して、<see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーの詳細説明。</param>
      <param name="innerException">この例外の原因である内部例外への参照。</param>
    </member>
    <member name="T:System.ComponentModel.IRaiseItemChangedEvents">
      <summary>クラスがプロパティ変更のイベントを <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> イベントに変換するかどうかを示します。</summary>
    </member>
    <member name="P:System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents">
      <summary>
        <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> オブジェクトが <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> イベントを発生させるかどうかを示す値を取得します。</summary>
      <returns>プロパティ値のいずれかが変更されたときに <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> オブジェクトが <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> イベントを発生させる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ISupportInitializeNotification">
      <summary>コンポーネントとそのコンポーネントに依存するプロパティの初期化を調整できるようにします。</summary>
    </member>
    <member name="E:System.ComponentModel.ISupportInitializeNotification.Initialized">
      <summary>コンポーネントの初期化が完了したときに発生します。</summary>
    </member>
    <member name="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized">
      <summary>コンポーネントが初期化されているかどうかを示す値を取得します。</summary>
      <returns>コンポーネントの初期化が完了していることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary>コンテナーやプロパティ記述子などの、コンポーネントに関するコンテキスト情報を提供します。</summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary>
        <see cref="T:System.ComponentModel.TypeDescriptor" /> 要求を表すコンテナーを取得します。</summary>
      <returns>この <see cref="T:System.ComponentModel.IContainer" /> が使用する一連のオブジェクトを格納する <see cref="T:System.ComponentModel.TypeDescriptor" />。コンテナーがない場合、または <see cref="T:System.ComponentModel.TypeDescriptor" /> が外部オブジェクトを使用しない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary>この型記述子の要求に関連付けられているオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.TypeDescriptor" /> でメソッドを呼び出すオブジェクト。この呼び出しを行うオブジェクトがない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary>
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> イベントを発生させます。</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary>
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> イベントを発生させます。</summary>
      <returns>このオブジェクトを変更できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary>特定のコンテキスト項目に関連付けられている <see cref="T:System.ComponentModel.PropertyDescriptor" /> を取得します。</summary>
      <returns>特定のコンテキスト項目について説明する <see cref="T:System.ComponentModel.PropertyDescriptor" />。呼び出しを行う <see cref="T:System.ComponentModel.PropertyDescriptor" /> がない場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ITypedList">
      <summary>バインドに利用できるプロパティがバインド先のオブジェクトのパブリック プロパティと異なる場合に、バインド可能リストのスキーマを検出できるようにします。</summary>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>データ バインドに使用される各項目のプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> を返します。</summary>
      <param name="listAccessors">コレクション内で検索するバインド可能な <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトの配列。 この値は、<see langword="null" /> でもかまいません。</param>
      <returns>データ バインドに使用される各項目のプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>リストの名前を返します。</summary>
      <param name="listAccessors">リスト名を返す対象の <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトの配列。 この値は、<see langword="null" /> でもかまいません。</param>
      <returns>リストの名前。</returns>
    </member>
    <member name="T:System.ComponentModel.License">
      <summary>すべてのライセンスの <see langword="abstract" /> 基本クラスを提供します。 ライセンスは、コンポーネントの特定のインスタンスに付与されます。</summary>
    </member>
    <member name="M:System.ComponentModel.License.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.License" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.License.Dispose">
      <summary>派生クラスでオーバーライドされた場合、ライセンスによって使用されているリソースを破棄します。</summary>
    </member>
    <member name="P:System.ComponentModel.License.LicenseKey">
      <summary>派生クラスでオーバーライドされた場合、コンポーネントに与えられたライセンス キーを取得します。</summary>
      <returns>コンポーネントに与えられたライセンス キー。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseContext">
      <summary>ライセンスを与えられたオブジェクトをいつ使用できるかを指定し、そのドメイン内で実行するライセンスをサポートするために必要な追加のサービスを取得する方法を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.LicenseContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>派生クラスでオーバーライドされた場合、指定されたリソース アセンブリから、指定された型に対して保存されているライセンス キーを返します。</summary>
      <param name="type">コンポーネントの型を表す <see cref="T:System.Type" />。</param>
      <param name="resourceAssembly">ライセンス キーを持つ <see cref="T:System.Reflection.Assembly" />。</param>
      <returns>指定した型の <see cref="P:System.ComponentModel.License.LicenseKey" />。 このメソッドは、オーバーライドされない限り <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetService(System.Type)">
      <summary>要求されたサービスがある場合は、そのサービスを取得します。</summary>
      <param name="type">取得するサービスの型。</param>
      <returns>サービスのインスタンス。サービスが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>派生クラスでオーバーライドされた場合、指定された型のライセンス キーを設定します。</summary>
      <param name="type">ライセンス キーに関連付けられているコンポーネントを表す <see cref="T:System.Type" />。</param>
      <param name="key">コンポーネントの型に対して保存する <see cref="P:System.ComponentModel.License.LicenseKey" />。</param>
    </member>
    <member name="P:System.ComponentModel.LicenseContext.UsageMode">
      <summary>派生クラスでオーバーライドされた場合、ライセンスをいつ使用できるかを指定する値を取得します。</summary>
      <returns>ライセンスをいつ使用できるかを指定する <see cref="T:System.ComponentModel.LicenseUsageMode" /> 値の 1 つ。 既定値は、<see cref="F:System.ComponentModel.LicenseUsageMode.Runtime" /> です。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseException">
      <summary>コンポーネントにライセンスが与えられなかった場合にスローされる例外を表します。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>指定した <see cref="T:System.ComponentModel.LicenseException" /> と <see cref="T:System.Runtime.Serialization.SerializationInfo" /> を使用して、<see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">逆シリアル化に使用する <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">逆シリアル化に使用する転送先。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type)">
      <summary>ライセンスを拒否されたコンポーネントの型を指定して、<see cref="T:System.ComponentModel.LicenseException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">ライセンスが与えられなかったコンポーネントの型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object)">
      <summary>ライセンスを拒否されたコンポーネントの型とインスタンスを指定して、<see cref="T:System.ComponentModel.LicenseException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">ライセンスが与えられなかったコンポーネントの型を表す <see cref="T:System.Type" />。</param>
      <param name="instance">ライセンスが与えられなかったコンポーネントのインスタンス。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String)">
      <summary>ライセンスを拒否されたコンポーネントの型とインスタンス、表示するメッセージを指定して、<see cref="T:System.ComponentModel.LicenseException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">ライセンスが与えられなかったコンポーネントの型を表す <see cref="T:System.Type" />。</param>
      <param name="instance">ライセンスが与えられなかったコンポーネントのインスタンス。</param>
      <param name="message">表示する例外メッセージ。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)">
      <summary>ライセンスを拒否されたコンポーネントの型とインスタンス、表示するメッセージ、スローされた元の例外を指定して、<see cref="T:System.ComponentModel.LicenseException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">ライセンスが与えられなかったコンポーネントの型を表す <see cref="T:System.Type" />。</param>
      <param name="instance">ライセンスが与えられなかったコンポーネントのインスタンス。</param>
      <param name="message">表示する例外メッセージ。</param>
      <param name="innerException">元の例外を表す <see cref="T:System.Exception" />。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>例外に関する情報を含む <see cref="T:System.Runtime.Serialization.SerializationInfo" /> を設定します。</summary>
      <param name="info">逆シリアル化に使用する <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">逆シリアル化に使用する転送先。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseException.LicensedType">
      <summary>ライセンスが与えられなかったコンポーネントの型を取得します。</summary>
      <returns>ライセンスが与えられなかったコンポーネントの型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseManager">
      <summary>コンポーネントにライセンスを追加し、<see cref="T:System.ComponentModel.LicenseProvider" /> を管理するためのプロパティとメソッドを提供します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
      <summary>ライセンス付きのインスタンスを使用できるコンテキストを指定して、指定した型のインスタンスを作成します。</summary>
      <param name="type">作成する型を表す <see cref="T:System.Type" />。</param>
      <param name="creationContext">ライセンス付きのインスタンスをいつ使用できるかを指定する <see cref="T:System.ComponentModel.LicenseContext" />。</param>
      <returns>指定した型のインスタンス。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
      <summary>引数と、ライセンス付きのインスタンスを使用できるコンテキストを指定して、指定した型のインスタンスを作成します。</summary>
      <param name="type">作成する型を表す <see cref="T:System.Type" />。</param>
      <param name="creationContext">ライセンス付きのインスタンスをいつ使用できるかを指定する <see cref="T:System.ComponentModel.LicenseContext" />。</param>
      <param name="args">型の引数を表す <see cref="T:System.Object" /> 型の配列。</param>
      <returns>指定した配列の引数を持つ、指定した型のインスタンス。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.CurrentContext">
      <summary>ライセンス付きのオブジェクトをいつ使用できるかを指定する現在の <see cref="T:System.ComponentModel.LicenseContext" /> を取得または設定します。</summary>
      <returns>ライセンス付きのオブジェクトをいつ使用できるかを指定する <see cref="T:System.ComponentModel.LicenseContext" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> プロパティは、現在ロックされており、変更できません。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
      <summary>指定した型が有効なライセンスを与えられているかどうかを示す値を返します。</summary>
      <param name="type">有効なライセンスを与えられているかどうかを調べる対象の <see cref="T:System.Type" />。</param>
      <returns>指定した型がライセンス付きである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
      <summary>指定した型に有効なライセンスを与えることができるかどうかを判断します。</summary>
      <param name="type">
        <see cref="T:System.Type" /> を要求するオブジェクトの型を表す <see cref="T:System.ComponentModel.License" />。</param>
      <returns>有効なライセンスを与えることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
      <summary>型の指定したインスタンスに対して、有効なライセンスを与えることができるかどうかを判断します。 このメソッドは、有効な <see cref="T:System.ComponentModel.License" /> を作成します。</summary>
      <param name="type">ライセンスを要求するオブジェクトの型を表す <see cref="T:System.Type" />。</param>
      <param name="instance">指定した型、または指定した型から派生した型のオブジェクト。</param>
      <param name="license">有効なライセンスである <see cref="T:System.ComponentModel.License" />。有効なライセンスが与えられない場合は、<see langword="null" />。</param>
      <returns>有効な <see cref="T:System.ComponentModel.License" /> を与えることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
      <summary>指定したオブジェクトの現在の <see cref="T:System.ComponentModel.LicenseContext" /> を変更できないようにします。</summary>
      <param name="contextUser">現在のコンテキストをロックする対象のオブジェクト。</param>
      <exception cref="T:System.InvalidOperationException">コンテキストが既にロックされています。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
      <summary>指定したオブジェクトの現在の <see cref="T:System.ComponentModel.LicenseContext" /> を変更できるようにします。</summary>
      <param name="contextUser">現在のコンテキストのロックを解除する対象のオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contextUser" /> は、前の <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" /> 呼び出しで指定されたユーザーとは異なることを表します。</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.UsageMode">
      <summary>
        <see cref="T:System.ComponentModel.LicenseUsageMode" /> においてライセンス付きのオブジェクトをいつ使用できるかを指定する <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> を取得します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.LicenseUsageMode" /> プロパティで指定されている、<see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 値の 1 つ。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
      <summary>指定した型にライセンスを与えることができるかどうかを判断します。</summary>
      <param name="type">ライセンスを要求するオブジェクトの型を表す <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ComponentModel.LicenseException">
        <see cref="T:System.ComponentModel.License" /> を与えることができません。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
      <summary>指定した型のインスタンスに対して、ライセンスを与えることができるかどうかを判断します。</summary>
      <param name="type">ライセンスを要求するオブジェクトの型を表す <see cref="T:System.Type" />。</param>
      <param name="instance">指定した型、または指定した型から派生した型の <see cref="T:System.Object" />。</param>
      <returns>有効な <see cref="T:System.ComponentModel.License" />。</returns>
      <exception cref="T:System.ComponentModel.LicenseException">型はライセンス付きですが、<see cref="T:System.ComponentModel.License" /> を与えることができません。</exception>
    </member>
    <member name="T:System.ComponentModel.LicenseProvider">
      <summary>ライセンス プロバイダーを実装するための <see langword="abstract" /> 基本クラスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.LicenseProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>派生クラスでオーバーライドされた場合、コンテキストと、ライセンスが拒否された場合に例外がスローされるかどうかが指定されたときに、コンポーネントのインスタンスまたは型に対するライセンスを取得します。</summary>
      <param name="context">ライセンス付きのオブジェクトを使用できる位置を指定する <see cref="T:System.ComponentModel.LicenseContext" />。</param>
      <param name="type">ライセンスを要求しているコンポーネントを表す <see cref="T:System.Type" />。</param>
      <param name="instance">ライセンスを要求しているオブジェクト。</param>
      <param name="allowExceptions">コンポーネントにライセンスが与えられなかったときに <see cref="T:System.ComponentModel.LicenseException" /> をスローする必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>有効な <see cref="T:System.ComponentModel.License" />。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProviderAttribute">
      <summary>クラスと一緒に使用する <see cref="T:System.ComponentModel.LicenseProvider" /> を指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor">
      <summary>ライセンス プロバイダーを指定せずに、<see cref="T:System.ComponentModel.LicenseProviderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.String)">
      <summary>型を指定して、<see cref="T:System.ComponentModel.LicenseProviderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeName">ライセンス プロバイダー クラスの完全修飾名。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.Type)">
      <summary>ライセンス プロバイダーの種類を指定して、<see cref="T:System.ComponentModel.LicenseProviderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">ライセンス プロバイダー クラスの型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="F:System.ComponentModel.LicenseProviderAttribute.Default">
      <summary>プロバイダーなしを意味する既定値を指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.Equals(System.Object)">
      <summary>このインスタンスと指定したオブジェクトが等しいかどうかを示します。</summary>
      <param name="value">比較対象のもう 1 つのオブジェクト。</param>
      <returns>
        <see langword="true" /> がこのインスタンスと等しい場合は <paramref name="value" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>現在の <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.LicenseProvider">
      <summary>関連付けられているクラスと一緒に使用する必要があるライセンス プロバイダーを取得します。</summary>
      <returns>ライセンス プロバイダーの種類を表す <see cref="T:System.Type" />。 既定値は <see langword="null" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.TypeId">
      <summary>この属性型の一意の ID を示します。</summary>
      <returns>この属性型の一意の ID。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseUsageMode">
      <summary>
        <see cref="T:System.ComponentModel.License" /> をいつ使用できるかを指定します。</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Designtime">
      <summary>ビジュアル デザイナーまたはコンパイラによるデザイン時に使用します。</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Runtime">
      <summary>実行時に使用します。</summary>
    </member>
    <member name="T:System.ComponentModel.LicFileLicenseProvider">
      <summary>
        <see cref="T:System.ComponentModel.LicenseProvider" /> の実装を提供します。 このプロバイダーは、Microsoft .NET Framework の標準ライセンス モデルと同様に機能します。</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.LicFileLicenseProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)">
      <summary>指定した型のキーを返します。</summary>
      <param name="type">キーを返すオブジェクト型。</param>
      <returns>
        <paramref name="type" /> パラメーターの型にライセンスが与えられているかどうかの確認。</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>コンポーネントのインスタンスに与えられるライセンスがある場合は、そのライセンスを返します。</summary>
      <param name="context">ライセンス付きのオブジェクトを使用できる位置を指定する <see cref="T:System.ComponentModel.LicenseContext" />。</param>
      <param name="type">
        <see cref="T:System.Type" /> を要求しているコンポーネントを表す <see cref="T:System.ComponentModel.License" />。</param>
      <param name="instance">
        <see cref="T:System.ComponentModel.License" /> を要求するオブジェクト。</param>
      <param name="allowExceptions">コンポーネントにライセンスが与えられなかったときに <see cref="T:System.ComponentModel.LicenseException" /> をスローする必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>有効な <see cref="T:System.ComponentModel.License" />。 このメソッドは、有効な <see cref="T:System.ComponentModel.License" /> または <paramref name="context" /> パラメーターが見つからなかった場合は <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)">
      <summary>
        <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> メソッドが取得したキーが、指定した型に対して有効かどうかを判断します。</summary>
      <param name="key">確認対象の <see cref="P:System.ComponentModel.License.LicenseKey" />。</param>
      <param name="type">
        <see cref="T:System.Type" /> を要求しているコンポーネントを表す <see cref="T:System.ComponentModel.License" />。</param>
      <returns>キーが指定した型に対して有効な <see cref="P:System.ComponentModel.License.LicenseKey" /> である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ListBindableAttribute">
      <summary>リストをデータ ソースとして使用できることを指定します。 ビジュアル デザイナーは、この属性を使用して、データ連結ピッカーに特定のリストを表示するかどうかを決定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.Boolean)">
      <summary>リストが連結可能かどうかを示す値を指定して、<see cref="T:System.ComponentModel.ListBindableAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="listBindable">リストが連結可能である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>リストが連結可能かどうかを示す <see cref="T:System.ComponentModel.ListBindableAttribute" /> を指定して、<see cref="T:System.ComponentModel.BindableSupport" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="flags">リストが連結可能かどうかを示す <see cref="T:System.ComponentModel.BindableSupport" />。</param>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.ListBindableAttribute" /> の既定値を表します。</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.Equals(System.Object)">
      <summary>渡されたオブジェクトがこの <see cref="T:System.ComponentModel.ListBindableAttribute" /> と等しいかどうかを返します。</summary>
      <param name="obj">等しいかどうかを確認する対象のオブジェクト。</param>
      <returns>渡されたオブジェクトがこの <see cref="T:System.ComponentModel.ListBindableAttribute" /> に等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>現在の <see cref="T:System.ComponentModel.ListBindableAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.IsDefaultAttribute">
      <summary>
        <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> が既定値に設定されているかどうかを示す値を返します。</summary>
      <returns>
        <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> が既定値に設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListBindableAttribute.ListBindable">
      <summary>リストが連結可能かどうかを示す値を取得します。</summary>
      <returns>リストが連結可能である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.No">
      <summary>リストが連結可能でないことを指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Yes">
      <summary>リストが連結可能であることを指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)">
      <summary>変更の種類と影響を受ける <see cref="T:System.ComponentModel.ListChangedEventArgs" /> を指定して、<see cref="T:System.ComponentModel.PropertyDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="listChangedType">変更の種類を示す <see cref="T:System.ComponentModel.ListChangedType" /> 値。</param>
      <param name="propDesc">追加、削除、または変更された <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32)">
      <summary>変更の種類と影響を受ける項目のインデックスを指定して、<see cref="T:System.ComponentModel.ListChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="listChangedType">変更の種類を示す <see cref="T:System.ComponentModel.ListChangedType" /> 値。</param>
      <param name="newIndex">追加、変更、または削除された項目のインデックス。</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>変更の種類、影響を受ける項目のインデックス、および影響を受ける項目を記述する <see cref="T:System.ComponentModel.ListChangedEventArgs" /> を指定して、<see cref="T:System.ComponentModel.PropertyDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="listChangedType">変更の種類を示す <see cref="T:System.ComponentModel.ListChangedType" /> 値。</param>
      <param name="newIndex">追加または変更された項目のインデックス。</param>
      <param name="propDesc">項目を記述する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
      <summary>変更の種類と、移動された項目の古いインデックスと新しいインデックスを指定して、<see cref="T:System.ComponentModel.ListChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="listChangedType">変更の種類を示す <see cref="T:System.ComponentModel.ListChangedType" /> 値。</param>
      <param name="newIndex">移動された項目の新しいインデックス。</param>
      <param name="oldIndex">移動された項目の古いインデックス。</param>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.ListChangedType">
      <summary>変更の種類を取得します。</summary>
      <returns>変更の種類を示す <see cref="T:System.ComponentModel.ListChangedType" /> 値。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.NewIndex">
      <summary>変更の影響を受ける項目のインデックスを取得します。</summary>
      <returns>変更の影響を受ける項目のインデックス。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.OldIndex">
      <summary>移動された項目の古いインデックスを取得します。</summary>
      <returns>移動された項目の古いインデックス。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.PropertyDescriptor">
      <summary>追加、変更、または削除された <see cref="T:System.ComponentModel.PropertyDescriptor" /> を取得します。</summary>
      <returns>変更により影響を受ける <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventHandler">
      <summary>
        <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> クラスの <see cref="T:System.ComponentModel.IBindingList" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.ListChangedType">
      <summary>リストがどのように変更されたかを示します。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemAdded">
      <summary>リストに項目が追加されました。 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> は、追加された項目のインデックスを格納します。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemChanged">
      <summary>リスト内の項目が変更されました。 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> は、変更された項目のインデックスを格納します。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemDeleted">
      <summary>リストから項目が削除されました。 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> は、削除された項目のインデックスを格納します。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemMoved">
      <summary>リスト内で項目が移動しました。 <see cref="P:System.ComponentModel.ListChangedEventArgs.OldIndex" /> は項目の以前のインデックスを格納し、<see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> は項目の新しいインデックスを格納します。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorAdded">
      <summary>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> が追加され、それによってスキーマが変更されました。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorChanged">
      <summary>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> が変更され、それによってスキーマが変更されました。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorDeleted">
      <summary>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> が削除され、それによってスキーマが変更されました。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.Reset">
      <summary>リストの大半部が変更されました。 イベントを待機しているすべてのコントロールで、このリストから取得しているデータをすべて更新する必要があります。</summary>
    </member>
    <member name="T:System.ComponentModel.ListSortDescription">
      <summary>データ ソースに適用される並べ替え操作に関する説明を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescription.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>プロパティの説明および方向を指定して、<see cref="T:System.ComponentModel.ListSortDescription" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="property">データ ソースの並べ替えに使用するプロパティを説明する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDescription" /> 値のいずれか 1 つ。</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.PropertyDescriptor">
      <summary>この <see cref="T:System.ComponentModel.ListSortDescription" /> に関連付けられているクラスのプロパティの概要説明を取得または設定します。</summary>
      <returns>この <see cref="T:System.ComponentModel.PropertyDescriptor" /> に関連付けられている <see cref="T:System.ComponentModel.ListSortDescription" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.SortDirection">
      <summary>この <see cref="T:System.ComponentModel.ListSortDescription" /> に関連付けられている並べ替え操作の方向を取得または設定します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDirection" /> 値のいずれか。</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDescriptionCollection">
      <summary>
        <see cref="T:System.ComponentModel.ListSortDescription" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor(System.ComponentModel.ListSortDescription[])">
      <summary>
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> オブジェクトの指定した配列を使用して、<see cref="T:System.ComponentModel.ListSortDescription" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="sorts">コレクションに格納される <see cref="T:System.ComponentModel.ListSortDescription" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.Contains(System.Object)">
      <summary>
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> に特定の値が格納されているかどうかを確認します。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Object" /> がコレクション内で見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>コピー先に指定した配列のインデックスを開始位置として、指定した配列にコレクションの内容をコピーします。</summary>
      <param name="array">コレクションからコピーされる項目のコピー先配列。</param>
      <param name="index">コピーを開始する位置のコピー先配列のインデックス。</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Count">
      <summary>コレクション内の項目の数を取得します。</summary>
      <returns>コレクション内の項目数。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.IndexOf(System.Object)">
      <summary>コレクション内の指定した項目のインデックスを返します。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.Object" />。</param>
      <returns>リストに存在する場合は <paramref name="value" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Item(System.Int32)">
      <summary>指定した <see cref="T:System.ComponentModel.ListSortDescription" /> を取得または設定します。</summary>
      <param name="index">コレクション内で取得または設定する <see cref="T:System.ComponentModel.ListSortDescription" /> の、0 から始まるインデックス。</param>
      <returns>指定したインデックスを持つ <see cref="T:System.ComponentModel.ListSortDescription" />。</returns>
      <exception cref="T:System.InvalidOperationException">項目が、読み取り専用の <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> に設定されています。</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary>コレクションへのアクセスがスレッド セーフかどうかを示す値を取得します。</summary>
      <returns>常に <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#SyncRoot">
      <summary>コレクションへのアクセスを同期するために使用できる現在のインスタンスを取得します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> の現在のインスタンス。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" /> を取得します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Add(System.Object)">
      <summary>項目をコレクションに追加します。</summary>
      <param name="value">コレクションに追加する項目。</param>
      <returns>新しい要素が挿入された位置。</returns>
      <exception cref="T:System.InvalidOperationException">すべての場合。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Clear">
      <summary>コレクションからすべての項目を削除します。</summary>
      <exception cref="T:System.InvalidOperationException">すべての場合。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>コレクション内の指定したインデックスの位置に項目を挿入します。</summary>
      <param name="index">コレクション内で取得または設定する <see cref="T:System.ComponentModel.ListSortDescription" /> の、0 から始まるインデックス。</param>
      <param name="value">コレクションに挿入する項目。</param>
      <exception cref="T:System.InvalidOperationException">すべての場合。</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsFixedSize">
      <summary>コレクションが固定サイズかどうかを示す値を取得します。</summary>
      <returns>常に <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsReadOnly">
      <summary>コレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>常に <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary>指定した <see cref="T:System.ComponentModel.ListSortDescription" /> を取得します。</summary>
      <param name="index">コレクション内で取得する <see cref="T:System.ComponentModel.ListSortDescription" /> の 0 から始まるインデックス。</param>
      <returns>指定したインデックスを持つ <see cref="T:System.ComponentModel.ListSortDescription" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary>最初に出現する項目をコレクションから削除します。</summary>
      <param name="value">コレクションから削除する項目。</param>
      <exception cref="T:System.InvalidOperationException">すべての場合。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>コレクション内の指定したインデックスの項目を削除します。</summary>
      <param name="index">コレクションから削除する <see cref="T:System.ComponentModel.ListSortDescription" /> の 0 から始まるインデックス。</param>
      <exception cref="T:System.InvalidOperationException">すべての場合。</exception>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary>並べ替え操作の方向を指定します。</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary>昇順の並べ替えを行います。</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary>降順の並べ替えを行います。</summary>
    </member>
    <member name="T:System.ComponentModel.LookupBindingPropertiesAttribute">
      <summary>検索ベースのバインディングをサポートするプロパティを指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor">
      <summary>パラメーターを使用せずに <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dataSource">データ ソースとして使用するプロパティの名前。</param>
      <param name="displayMember">表示名に使用するプロパティの名前。</param>
      <param name="valueMember">値のソースとして使用するプロパティの名前。</param>
      <param name="lookupMember">検索に使用するプロパティの名前。</param>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DataSource">
      <summary>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> のバインド先となるコンポーネントのデータ ソース プロパティの名前を取得します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> のバインド先となるコンポーネントのデータ ソース プロパティ。</returns>
    </member>
    <member name="F:System.ComponentModel.LookupBindingPropertiesAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> クラスの既定値を表します。</summary>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DisplayMember">
      <summary>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> のバインド先となるコンポーネントの表示メンバー プロパティの名前を取得します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> のバインド先となるコンポーネントの表示メンバー プロパティの名前。</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> が、現在の <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> インスタンスと等しいかどうかを判断します。</summary>
      <param name="obj">現在の <see cref="T:System.Object" /> インスタンスと比較する <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />。</param>
      <returns>オブジェクトが現在のインスタンスと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" /> で、これらが等しくないことを示します。</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>現在の <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.LookupMember">
      <summary>この属性のバインド先となるコンポーネントの検索メンバーの名前を取得します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> のバインド先となるコンポーネントの検索メンバーの名前。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.ValueMember">
      <summary>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> のバインド先となるコンポーネントの値メンバー プロパティの名前を取得します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> のバインド先となるコンポーネントの値メンバー プロパティの名前。</returns>
    </member>
    <member name="T:System.ComponentModel.MarshalByValueComponent">
      <summary>
        <see cref="T:System.ComponentModel.IComponent" /> を実装し、値渡しでマーシャリングされた (シリアル化されたオブジェクトのコピーが渡された) リモート処理可能なコンポーネントの基本の実装を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.MarshalByValueComponent" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Container">
      <summary>コンポーネントを格納するコンテナーを取得します。</summary>
      <returns>コンポーネントのコンテナーを表す、<see cref="T:System.ComponentModel.IContainer" /> インターフェイスを実装しているオブジェクト。コンポーネントにサイトがない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.DesignMode">
      <summary>コンポーネントが現在デザイン モードかどうかを示す値を取得します。</summary>
      <returns>コンポーネントがデザイン モードの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose">
      <summary>
        <see cref="T:System.ComponentModel.MarshalByValueComponent" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.MarshalByValueComponent" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="E:System.ComponentModel.MarshalByValueComponent.Disposed">
      <summary>コンポーネントの <see cref="E:System.ComponentModel.MarshalByValueComponent.Disposed" /> イベントを待機するイベント ハンドラーを追加します。</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Events">
      <summary>コンポーネントに結び付けられているイベント ハンドラーのリストを取得します。</summary>
      <returns>コンポーネントのデリゲートを提供する <see cref="T:System.ComponentModel.EventHandlerList" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Finalize">
      <summary>オブジェクトが、ガベージ コレクションによって収集される前に、リソースの解放とその他のクリーンアップ操作の実行を試みることができるようにします。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.GetService(System.Type)">
      <summary>
        <see cref="T:System.IServiceProvider" /> を実装しているオブジェクトを取得します。</summary>
      <param name="service">目的のサービスの型を表す <see cref="T:System.Type" />。</param>
      <returns>
        <see cref="T:System.Object" /> を実装しているオブジェクトを表す <see cref="T:System.IServiceProvider" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Site">
      <summary>コンポーネントのサイトを取得または設定します。</summary>
      <returns>コンポーネントのサイトを表す、<see cref="T:System.ComponentModel.ISite" /> インターフェイスを実装しているオブジェクト。</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.ToString">
      <summary>
        <see cref="T:System.ComponentModel.Component" /> の名前 (存在する場合) を格納する <see cref="T:System.String" /> を返します。 このメソッドはオーバーライドできません。</summary>
      <returns>
        <see cref="T:System.String" /> (ある場合) の名前を格納している <see cref="T:System.ComponentModel.Component" />。  
 <see cref="T:System.ComponentModel.Component" /> に名前がない場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextProvider">
      <summary>
        <see cref="T:System.Windows.Forms.MaskedTextBox" /> コントロールなど、マスクをサポートする多数のコントロールで使用できるマスク解析サービスを表します。</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String)">
      <summary>指定したマスクを使用して、<see cref="T:System.ComponentModel.MaskedTextProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="mask">入力マスクを表す <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)">
      <summary>指定したマスクと ASCII 制限値を使用して、<see cref="T:System.ComponentModel.MaskedTextProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="mask">入力マスクを表す <see cref="T:System.String" />。</param>
      <param name="restrictToAscii">入力を ASCII 互換文字に制限する場合は <see langword="true" />。Unicode セット全体を許可する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)">
      <summary>指定したマスク、パスワード文字、プロンプト使用値を使用して、<see cref="T:System.ComponentModel.MaskedTextProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="mask">入力マスクを表す <see cref="T:System.String" />。</param>
      <param name="passwordChar">パスワード文字列に入力された文字用に表示される <see cref="T:System.Char" />。</param>
      <param name="allowPromptAsInput">プロンプト文字を入力として許可する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary>指定したマスクとカルチャを使用して、<see cref="T:System.ComponentModel.MaskedTextProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="mask">入力マスクを表す <see cref="T:System.String" />。</param>
      <param name="culture">地域によって異なる区切り記号の設定に使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
      <summary>指定したマスク、カルチャ、および ASCII 制限値を使用して、<see cref="T:System.ComponentModel.MaskedTextProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="mask">入力マスクを表す <see cref="T:System.String" />。</param>
      <param name="culture">地域によって異なる区切り記号の設定に使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="restrictToAscii">入力を ASCII 互換文字に制限する場合は <see langword="true" />。Unicode セット全体を許可する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)">
      <summary>指定したマスク、カルチャ、プロンプト使用値、プロンプト文字、パスワード文字、および ASCII 制限値を使用して、<see cref="T:System.ComponentModel.MaskedTextProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="mask">入力マスクを表す <see cref="T:System.String" />。</param>
      <param name="culture">地域によって異なる区切り記号の設定に使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="allowPromptAsInput">プロンプト文字を有効な入力文字として許可する必要があるかどうかを指定する <see cref="T:System.Boolean" /> 値。</param>
      <param name="promptChar">ユーザー入力のプレースホルダーとして表示する <see cref="T:System.Char" />。</param>
      <param name="passwordChar">パスワード文字列に入力された文字用に表示される <see cref="T:System.Char" />。</param>
      <param name="restrictToAscii">入力を ASCII 互換文字に制限する場合は <see langword="true" />。Unicode セット全体を許可する場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">マスク パラメーターが <see langword="null" /> または <see cref="F:System.String.Empty" /> です。  

または - 
マスクに印字不可能な文字が 1 文字以上含まれています。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)">
      <summary>指定したマスク、カルチャ、パスワード文字、およびプロンプト使用値を使用して、<see cref="T:System.ComponentModel.MaskedTextProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="mask">入力マスクを表す <see cref="T:System.String" />。</param>
      <param name="culture">地域によって異なる区切り記号の設定に使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="passwordChar">パスワード文字列に入力された文字用に表示される <see cref="T:System.Char" />。</param>
      <param name="allowPromptAsInput">プロンプト文字を入力として許可する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char)">
      <summary>書式設定された文字列の末尾に指定した入力文字を追加します。</summary>
      <param name="input">書式設定された文字列に追加する <see cref="T:System.Char" /> 値。</param>
      <returns>入力文字が正常に追加された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>書式設定された文字列の末尾に指定した入力文字を追加し、位置と説明の情報を出力します。</summary>
      <param name="input">書式設定された文字列に追加する <see cref="T:System.Char" /> 値。</param>
      <param name="testPosition">文字を追加しようとした、書式設定された文字列内のインデックス番号が 0 から始まる位置。 出力パラメーター。</param>
      <param name="resultHint">操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <returns>入力文字が正常に追加された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String)">
      <summary>書式設定された文字列の末尾に指定した入力文字列内の文字を追加します。</summary>
      <param name="input">書式設定された文字列に追加する文字値を格納する <see cref="T:System.String" />。</param>
      <returns>入力文字列のすべての文字が正常に追加された場合は <see langword="true" />。それ以外の場合は、文字が追加されなかったことを示す <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>書式設定された文字列の末尾に指定した入力文字列内の文字を追加し、位置と説明の情報を出力します。</summary>
      <param name="input">書式設定された文字列に追加する文字値を格納する <see cref="T:System.String" />。</param>
      <param name="testPosition">文字を追加しようとした、書式設定された文字列内のインデックス番号が 0 から始まる位置。 出力パラメーター。</param>
      <param name="resultHint">操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <returns>入力文字列のすべての文字が正常に追加された場合は <see langword="true" />。それ以外の場合は、文字が追加されなかったことを示す <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput">
      <summary>プロンプト文字を有効な入力文字として扱う必要があるかどうかを示す値を取得します。</summary>
      <returns>ユーザーがコントロールに <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> を入力できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AsciiOnly">
      <summary>マスクで ASCII 文字セット以外の文字を受け入れるかどうかを示す値を取得します。</summary>
      <returns>ASCII だけを受け入れる場合は <see langword="true" />。<see cref="T:System.ComponentModel.MaskedTextProvider" /> が任意の Unicode 文字を受け入れることができる場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount">
      <summary>入力値が既に正常に割り当てられている、編集可能な文字位置の数を取得します。</summary>
      <returns>書式設定された文字列で文字値が既に割り当てられている、入力マスク内の編集可能な文字位置の数を格納する <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount">
      <summary>入力値がまだ割り当てられていない、入力マスク内の編集可能な文字位置の数を取得します。</summary>
      <returns>文字値がまだ割り当てられていない、編集可能な文字位置の数を格納する <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear">
      <summary>書式設定された文字列から、編集可能なすべての入力文字を消去し、プロンプト文字に置き換えます。</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)">
      <summary>書式設定された文字列から、編集可能なすべての入力文字を消去し、プロンプト文字に置き換えた後、説明の情報を出力します。</summary>
      <param name="resultHint">操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clone">
      <summary>現在の <see cref="T:System.ComponentModel.MaskedTextProvider" /> のコピーを作成します。</summary>
      <returns>このメソッドが作成し、オブジェクトとしてキャストする <see cref="T:System.ComponentModel.MaskedTextProvider" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Culture">
      <summary>入力マスク内のローカライズ可能な区切り記号とプレースホルダーの値を決定するカルチャを取得します。</summary>
      <returns>入力マスクに関連付けられたカルチャ情報を格納する <see cref="T:System.Globalization.CultureInfo" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar">
      <summary>ユーザー入力を隠すために使用する既定のパスワード文字を取得します。</summary>
      <returns>既定のパスワード文字を表す <see cref="T:System.Char" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositionCount">
      <summary>書式設定された文字列内の編集可能な位置の数を取得します。</summary>
      <returns>書式設定された文字列内の編集可能な位置の数を格納する <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositions">
      <summary>書式設定された文字列内の編集可能な位置に対して新しく作成された列挙子を取得します。</summary>
      <returns>書式設定された文字列内の編集可能な位置に対して列挙体をサポートする <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary>指定した検索方向で、指定した位置より後にある、入力が割り当てられた最初の編集可能な位置を返します。</summary>
      <param name="position">検索を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="direction">検索方向を示す <see cref="T:System.Boolean" />。前方に検索する場合は <see langword="true" />。後方に検索する場合は <see langword="false" />。</param>
      <returns>検索が成功した場合は、最初に見つかった入力が割り当てられた編集可能な位置のインデックス番号が 0 から始まる位置を表す <see cref="T:System.Int32" />。それ以外の場合は <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>指定した検索方向で、指定した 2 つの位置の間にある、入力が割り当てられた最初の編集可能な位置を返します。</summary>
      <param name="startPosition">検索を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="endPosition">検索を終了する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="direction">検索方向を示す <see cref="T:System.Boolean" />。前方に検索する場合は <see langword="true" />。後方に検索する場合は <see langword="false" />。</param>
      <returns>検索が成功した場合は、最初に見つかった入力が割り当てられた編集可能な位置のインデックス番号が 0 から始まる位置を表す <see cref="T:System.Int32" />。それ以外の場合は <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)">
      <summary>指定した検索方向で、指定した位置より後にある最初の編集可能な位置を返します。</summary>
      <param name="position">検索を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="direction">検索方向を示す <see cref="T:System.Boolean" />。前方に検索する場合は <see langword="true" />。後方に検索する場合は <see langword="false" />。</param>
      <returns>検索が成功した場合は、最初に見つかった編集可能な位置のインデックス番号が 0 から始まる位置を表す <see cref="T:System.Int32" />。それ以外の場合は <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>指定した検索方向で、指定した 2 つの位置の間にある最初の編集可能な位置を返します。</summary>
      <param name="startPosition">検索を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="endPosition">検索を終了する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="direction">検索方向を示す <see cref="T:System.Boolean" />。前方に検索する場合は <see langword="true" />。後方に検索する場合は <see langword="false" />。</param>
      <returns>検索が成功した場合は、最初に見つかった編集可能な位置のインデックス番号が 0 から始まる位置を表す <see cref="T:System.Int32" />。それ以外の場合は <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)">
      <summary>指定した検索方向で、指定した位置より後にある最初の編集不可能な位置を返します。</summary>
      <param name="position">検索を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="direction">検索方向を示す <see cref="T:System.Boolean" />。前方に検索する場合は <see langword="true" />。後方に検索する場合は <see langword="false" />。</param>
      <returns>検索が成功した場合は、最初に見つかったリテラル位置のインデックス番号が 0 から始まる位置を表す <see cref="T:System.Int32" />。それ以外の場合は <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>指定した検索方向で、指定した 2 つの位置の間にある最初の編集不可能な位置を返します。</summary>
      <param name="startPosition">検索を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="endPosition">検索を終了する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="direction">検索方向を示す <see cref="T:System.Boolean" />。前方に検索する場合は <see langword="true" />。後方に検索する場合は <see langword="false" />。</param>
      <returns>検索が成功した場合は、最初に見つかったリテラル位置のインデックス番号が 0 から始まる位置を表す <see cref="T:System.Int32" />。それ以外の場合は <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary>指定した検索方向で、指定した位置より後にある、入力が割り当てられていない最初の編集可能な位置を返します。</summary>
      <param name="position">検索を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="direction">検索方向を示す <see cref="T:System.Boolean" />。前方に検索する場合は <see langword="true" />。後方に検索する場合は <see langword="false" />。</param>
      <returns>検索が成功した場合は、最初に見つかった、入力が割り当てられていない編集可能な位置のインデックス番号が 0 から始まる位置を表す <see cref="T:System.Int32" />。それ以外の場合は <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>指定した検索方向で、指定した 2 つの位置の間にある、入力が割り当てられていない最初の編集可能な位置を返します。</summary>
      <param name="startPosition">検索を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="endPosition">検索を終了する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="direction">検索方向を示す <see cref="T:System.Boolean" />。前方に検索する場合は <see langword="true" />。後方に検索する場合は <see langword="false" />。</param>
      <returns>検索が成功した場合は、最初に見つかった、入力が割り当てられていない編集可能な位置のインデックス番号が 0 から始まる位置を表す <see cref="T:System.Int32" />。それ以外の場合は <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)">
      <summary>指定した <see cref="T:System.ComponentModel.MaskedTextResultHint" /> が、成功または失敗のどちらを示しているかを判断します。</summary>
      <param name="hint">以前の操作の出力パラメーターとして通常取得される <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 値。</param>
      <returns>指定した <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 値が成功を表している場合は <see langword="true" />。失敗を表している場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals">
      <summary>入力マスク内のリテラル文字を、書式設定された文字列に含める必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>リテラルを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludePrompt">
      <summary>書式設定された文字列を表示するときに、<see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> を使用してユーザー入力がないことを表すかどうかを示す値を取得または設定します。</summary>
      <returns>プロンプト文字を使用して、ユーザー入力が行われなかった位置を表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)">
      <summary>書式設定された文字列内の指定した位置に指定した文字を挿入します。</summary>
      <param name="input">挿入する <see cref="T:System.Char" />。</param>
      <param name="position">文字を挿入する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <returns>挿入が正常に実行された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>書式設定された文字列内の指定した位置に指定した文字を挿入し、最後の挿入位置と操作のステータスを返します。</summary>
      <param name="input">挿入する <see cref="T:System.Char" />。</param>
      <param name="position">文字を挿入する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="testPosition">メソッドが正常に実行された場合は、文字が挿入された最後の位置。それ以外の場合は、挿入が失敗した最初の位置。 出力パラメーター。</param>
      <param name="resultHint">挿入操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <returns>挿入が正常に実行された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)">
      <summary>書式設定された文字列内の指定した位置に指定した文字列を挿入します。</summary>
      <param name="input">挿入する <see cref="T:System.String" />。</param>
      <param name="position">入力文字列を挿入する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <returns>挿入が正常に実行された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>書式設定された文字列内の指定した位置に指定した文字列を挿入し、最後の挿入位置と操作のステータスを返します。</summary>
      <param name="input">挿入する <see cref="T:System.String" />。</param>
      <param name="position">入力文字列を挿入する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="testPosition">メソッドが正常に実行された場合は、文字が挿入された最後の位置。それ以外の場合は、挿入が失敗した最初の位置。 出力パラメーター。</param>
      <param name="resultHint">挿入操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <returns>挿入が正常に実行された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.InvalidIndex">
      <summary>無効なインデックスの範囲の上限を取得します。</summary>
      <returns>プロバイダー実装によって判断された無効な最大インデックスを表す値。 たとえば、有効な最小インデックスが 0 の場合、このプロパティは -1 を返します。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)">
      <summary>指定した位置を入力の割り当てに使用できるかどうかを判断します。</summary>
      <param name="position">テスト対象となるマスク内のインデックス番号が 0 から始まる位置。</param>
      <returns>書式設定された文字列内の指定した位置が編集可能であり、入力がまだ割り当てられていない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)">
      <summary>指定した位置が編集可能かどうかを判断します。</summary>
      <param name="position">テスト対象となるマスク内のインデックス番号が 0 から始まる位置。</param>
      <returns>書式設定された文字列内の指定した位置が編集可能な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IsPassword">
      <summary>書式設定された文字列に、パスワードによる保護を適用する必要があるかどうかを決定する値を取得または設定します。</summary>
      <returns>入力文字列をパスワード文字列として扱う場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)">
      <summary>指定した文字が有効な入力文字かどうかを判断します。</summary>
      <param name="c">テストする <see cref="T:System.Char" /> 値。</param>
      <returns>指定した文字に有効な入力値が含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)">
      <summary>指定した文字が有効なマスク文字かどうかを判断します。</summary>
      <param name="c">テストする <see cref="T:System.Char" /> 値。</param>
      <returns>指定した文字に有効なマスク値が含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)">
      <summary>指定した文字が有効なパスワード文字かどうかを判断します。</summary>
      <param name="c">テストする <see cref="T:System.Char" /> 値。</param>
      <returns>指定した文字に有効なパスワード値が含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)">
      <summary>書式設定された文字列内の指定した位置にある要素を取得します。</summary>
      <param name="index">取得する要素の 0 から始まるインデックス。</param>
      <returns>書式設定された文字列内の指定した位置にある <see cref="T:System.Char" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> が 0 未満か、マスクの <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> 以上の値です。</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition">
      <summary>マスクに割り当てられている右端の入力文字のマスク内のインデックスを取得します。</summary>
      <returns>マスクに入力文字が少なくとも 1 文字割り当てられている場合は、文字が割り当てられている右端の位置のインデックスを格納する <see cref="T:System.Int32" />。文字が割り当てられた位置がない場合は <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Length">
      <summary>マスク修飾子文字を除いたマスクの長さを取得します。</summary>
      <returns>マスク入力を修飾する文字を除く、マスク内の位置の数を格納する <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Mask">
      <summary>入力マスクを取得します。</summary>
      <returns>フル マスクを格納する <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskCompleted">
      <summary>すべての必須入力が、書式設定された文字列に入力されているかどうかを示す値を取得します。</summary>
      <returns>必須の入力がすべてマスクに入力された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskFull">
      <summary>すべての必須入力と省略可能な入力が、書式設定された文字列に入力されているかどうかを示す値を取得します。</summary>
      <returns>必須およびオプションの入力がすべて入力された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PasswordChar">
      <summary>実際の入力文字を置き換える文字を取得または設定します。</summary>
      <returns>パスワード文字として使用される <see cref="T:System.Char" /> 値。</returns>
      <exception cref="T:System.InvalidOperationException">このプロパティの設定時に指定したパスワード文字は、現在のプロンプト文字 <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> と同じです。 この 2 つは異なる必要があります。</exception>
      <exception cref="T:System.ArgumentException">このプロパティの設定時に指定した文字は、<see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> メソッドによって判断された有効なパスワード文字ではありません。</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PromptChar">
      <summary>使用できるすべての編集位置に対してユーザー入力がないことを表す際に使用する文字を取得または設定します。</summary>
      <returns>ユーザーに入力を要求するために使用される文字。 既定値はアンダースコア (_) です。</returns>
      <exception cref="T:System.InvalidOperationException">このプロパティの設定時に指定したプロンプト文字は、現在のパスワード文字 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> と同じです。 この 2 つは異なる必要があります。</exception>
      <exception cref="T:System.ArgumentException">このプロパティの設定時に指定した文字は、<see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> メソッドによって判断された有効なパスワード文字ではありません。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove">
      <summary>書式設定された文字列から、割り当てられた最後の文字を削除します。</summary>
      <returns>文字が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>書式設定された文字列から、割り当てられた最後の文字を削除し、削除位置と説明の情報を出力します。</summary>
      <param name="testPosition">文字が実際に削除された、書式設定された文字列内のインデックス番号が 0 から始まる位置。 出力パラメーター。</param>
      <param name="resultHint">操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <returns>文字が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)">
      <summary>書式設定された文字列から、指定した位置にある割り当てられた文字を削除します。</summary>
      <param name="position">削除する割り当てられた文字のインデックス番号が 0 から始まる位置。</param>
      <returns>文字が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)">
      <summary>書式設定された文字列から、指定した 2 つの位置の間にある割り当てられた文字を削除します。</summary>
      <param name="startPosition">削除対象の、割り当てられた最初の文字の 0 から始まるインデックス。</param>
      <param name="endPosition">削除対象の、割り当てられた最後の文字の 0 から始まるインデックス。</param>
      <returns>文字が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>書式設定された文字列から、指定した 2 つの位置の間にある割り当てられた文字を削除し、削除位置と説明の情報を出力します。</summary>
      <param name="startPosition">削除対象の、割り当てられた最初の文字の 0 から始まるインデックス。</param>
      <param name="endPosition">削除対象の、割り当てられた最後の文字の 0 から始まるインデックス。</param>
      <param name="testPosition">削除が正常に実行された場合は、文字が実際に削除された、書式設定された文字列内のインデックス番号が 0 から始まる位置。それ以外の場合は、操作が失敗した最初の位置。 出力パラメーター。</param>
      <param name="resultHint">操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <returns>文字が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)">
      <summary>指定した位置以降にある単一の文字を指定した文字値に置き換えます。</summary>
      <param name="input">既存の値を置き換える <see cref="T:System.Char" /> 値。</param>
      <param name="position">置換する最初の編集可能な文字の検索対象となる、インデックス番号が 0 から始まる位置。</param>
      <returns>文字が正常に置き換えられた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>指定した開始位置と終了位置の間にある単一の文字を指定した文字値に置き換え、削除位置と説明の情報を出力します。</summary>
      <param name="input">既存の値を置き換える <see cref="T:System.Char" /> 値。</param>
      <param name="startPosition">置換を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="endPosition">置換を終了する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="testPosition">置換が正常に実行された場合は、最後の文字が実際に置き換えられた、書式設定された文字列内のインデックス番号が 0 から始まる位置。それ以外の場合は、操作が失敗した最初の位置。 出力パラメーター。</param>
      <param name="resultHint">置換操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <returns>文字が正常に置き換えられた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>指定した位置以降にある単一の文字を指定した文字値に置き換え、削除位置と説明の情報を出力します。</summary>
      <param name="input">既存の値を置き換える <see cref="T:System.Char" /> 値。</param>
      <param name="position">置換する最初の編集可能な文字の検索対象となる、インデックス番号が 0 から始まる位置。</param>
      <param name="testPosition">置換が正常に実行された場合は、最後の文字が実際に置き換えられた、書式設定された文字列内のインデックス番号が 0 から始まる位置。それ以外の場合は、操作が失敗した最初の位置。 出力パラメーター。</param>
      <param name="resultHint">置換操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <returns>文字が正常に置き換えられた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)">
      <summary>指定した位置から始まる編集可能な文字の範囲を、指定した文字列に置き換えます。</summary>
      <param name="input">既存の編集可能な文字を置き換える <see cref="T:System.String" /> 値。</param>
      <param name="position">置換する最初の編集可能な文字の検索対象となる、インデックス番号が 0 から始まる位置。</param>
      <returns>すべての文字が正常に置き換えられた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>指定した開始位置と終了位置の間にある編集可能な文字の範囲を指定した文字列に置き換え、削除位置と説明の情報を出力します。</summary>
      <param name="input">既存の編集可能な文字を置き換える <see cref="T:System.String" /> 値。</param>
      <param name="startPosition">置換を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="endPosition">置換を終了する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="testPosition">置換が正常に実行された場合は、最後の文字が実際に置き換えられた、書式設定された文字列内のインデックス番号が 0 から始まる位置。それ以外の場合は、操作が失敗した最初の位置。 出力パラメーター。</param>
      <param name="resultHint">置換操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <returns>すべての文字が正常に置き換えられた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>指定した位置から始まる編集可能な文字の範囲を指定した文字列に置き換え、削除位置と説明の情報を出力します。</summary>
      <param name="input">既存の編集可能な文字を置き換える <see cref="T:System.String" /> 値。</param>
      <param name="position">置換する最初の編集可能な文字の検索対象となる、インデックス番号が 0 から始まる位置。</param>
      <param name="testPosition">置換が正常に実行された場合は、最後の文字が実際に置き換えられた、書式設定された文字列内のインデックス番号が 0 から始まる位置。それ以外の場合は、操作が失敗した最初の位置。 出力パラメーター。</param>
      <param name="resultHint">置換操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <returns>すべての文字が正常に置き換えられた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt">
      <summary>プロンプト文字と一致する入力文字を処理する方法を決定する値を取得または設定します。</summary>
      <returns>入力されたプロンプト文字によって、マスク内の現在の編集可能な位置がリセットされる場合は <see langword="true" />。それ以外の場合、プロンプト文字が通常の入力文字として処理されることを示すには <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace">
      <summary>空白の入力文字の処理方法を決定する値を取得または設定します。</summary>
      <returns>空白の入力文字によって、マスク内の現在の編集可能な位置がリセットされる場合は <see langword="true" />。それ以外の場合、通常の入力文字として処理されることを示すには <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String)">
      <summary>書式設定された文字列に指定した入力文字列を設定します。</summary>
      <param name="input">書式設定された文字列の設定に使用する <see cref="T:System.String" /> 値。</param>
      <returns>すべての文字が正常に設定された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>書式設定された文字列に指定した入力文字列を設定し、削除位置と説明の情報を出力します。</summary>
      <param name="input">書式設定された文字列の設定に使用する <see cref="T:System.String" /> 値。</param>
      <param name="testPosition">設定が正常に実行された場合は、最後の文字が実際に設定された、書式設定された文字列内のインデックス番号が 0 から始まる位置。それ以外の場合は、操作が失敗した最初の位置。 出力パラメーター。</param>
      <param name="resultHint">設定操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <returns>すべての文字が正常に設定された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.SkipLiterals">
      <summary>マスク内のリテラル文字の位置を、同じ値で上書きできるかどうかを示す値を取得または設定します。</summary>
      <returns>リテラルを再び追加できる場合は <see langword="true" />。ユーザーがリテラル文字を上書きできない場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToDisplayString">
      <summary>表示できる形式で書式設定された文字列を返します。</summary>
      <returns>プロンプトとマスク リテラルを含む、書式設定された <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString">
      <summary>割り当てられたすべての文字値を含む、書式設定された文字列を返します。</summary>
      <returns>割り当てられたすべての文字値を含む、書式設定された <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)">
      <summary>書式設定された文字列を返します。パスワード文字が含まれる場合もあります。</summary>
      <param name="ignorePasswordChar">実際の編集可能な文字を返す場合は <see langword="true" />。<see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> プロパティが有効であることを示す場合は <see langword="false" />。</param>
      <returns>リテラル、プロンプト、および場合によってはパスワード文字を含む、書式設定された <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)">
      <summary>書式設定された文字列を返します。プロンプト文字やリテラル文字が含まれる場合もあります。</summary>
      <param name="includePrompt">返される文字列にプロンプト文字が含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="includeLiterals">返される文字列にリテラル文字が含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>割り当てられたすべての文字値、および場合によってはリテラルまたはプロンプトを含む、書式設定された <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>書式設定された文字列の部分文字列を返します。プロンプト文字、リテラル文字、およびパスワード文字が含まれる場合もあります。</summary>
      <param name="ignorePasswordChar">実際の編集可能な文字を返す場合は <see langword="true" />。<see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> プロパティが有効であることを示す場合は <see langword="false" />。</param>
      <param name="includePrompt">返される文字列にプロンプト文字が含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="includeLiterals">返される文字列にリテラル文字が含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="startPosition">出力を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="length">返される文字数。</param>
      <returns>正常に実行された場合は、割り当てられたすべての文字値、および場合によってはリテラル、プロンプト、パスワード文字を含む、書式設定された <see cref="T:System.String" /> の部分文字列。それ以外の場合は <see cref="F:System.String.Empty" /> 文字列。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>書式設定された文字列の部分文字列を返します。プロンプト文字やリテラル文字が含まれる場合もあります。</summary>
      <param name="includePrompt">返される文字列にプロンプト文字が含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="includeLiterals">返される文字列にリテラル文字が含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="startPosition">出力を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="length">返される文字数。</param>
      <returns>正常に実行された場合は、割り当てられたすべての文字値、および場合によってはリテラルとプロンプトを含む、書式設定された <see cref="T:System.String" /> の部分文字列。それ以外の場合は <see cref="F:System.String.Empty" /> 文字列。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)">
      <summary>書式設定された文字列の部分文字列を返します。パスワード文字が含まれる場合もあります。</summary>
      <param name="ignorePasswordChar">実際の編集可能な文字を返す場合は <see langword="true" />。<see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> プロパティが有効であることを示す場合は <see langword="false" />。</param>
      <param name="startPosition">出力を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="length">返される文字数。</param>
      <returns>正常に実行された場合は、リテラル、プロンプト、および場合によってはパスワード文字を含む、書式設定された <see cref="T:System.String" /> の部分文字列。それ以外の場合は <see cref="F:System.String.Empty" /> 文字列。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)">
      <summary>書式設定された文字列の部分文字列を返します。</summary>
      <param name="startPosition">出力を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="length">返される文字数。</param>
      <returns>正常に実行された場合は、割り当てられたすべての文字値を含む、書式設定された <see cref="T:System.String" /> の部分文字列。それ以外の場合は <see cref="F:System.String.Empty" /> 文字列。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)">
      <summary>指定した文字を指定した位置に正常に設定できるかどうかをテストします。</summary>
      <param name="input">テストする <see cref="T:System.Char" /> 値。</param>
      <param name="position">入力文字をテストするマスク内の位置。</param>
      <param name="hint">操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <returns>指定した文字が指定した位置に対して有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)">
      <summary>指定した文字が指定した位置でエスケープされるかどうかをテストします。</summary>
      <param name="input">テストする <see cref="T:System.Char" /> 値。</param>
      <param name="position">入力文字をテストするマスク内の位置。</param>
      <returns>指定した文字が指定した位置でエスケープされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String)">
      <summary>指定した文字列を正常に設定できるかどうかをテストします。</summary>
      <param name="input">テストする <see cref="T:System.String" /> 値。</param>
      <returns>指定した文字列が有効な入力を表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>指定した文字列を正常に設定できるかどうかをテストし、位置と説明の情報を出力します。</summary>
      <param name="input">テストする <see cref="T:System.String" /> 値。</param>
      <param name="testPosition">正常に実行された場合は、実際にテストされた最後の文字のインデックス番号が 0 から始まる位置。それ以外の場合は、テストが失敗した最初の位置。 出力パラメーター。</param>
      <param name="resultHint">テスト操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <returns>指定した文字列が有効な入力を表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextResultHint">
      <summary>マスクされたテキストの解析操作の結果を簡潔に説明する値を指定します。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AlphanumericCharacterExpected">
      <summary>操作が成功しませんでした。英数字以外の入力文字が見つかりました。 .</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AsciiCharacterExpected">
      <summary>操作が成功しませんでした。ASCII 文字セットにはない入力文字が見つかりました。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.CharacterEscaped">
      <summary>成功。 リテラル文字、プロンプト文字、または空白文字がエスケープ文字であったため、操作が正常に行われました。 エスケープ文字の詳細については、<see cref="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)" /> メソッドのトピックを参照してください。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.DigitExpected">
      <summary>操作が成功しませんでした。 数字以外の入力文字が見つかりました。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.InvalidInput">
      <summary>操作が成功しませんでした。 無効な入力文字が見つかりました。 無効な文字の詳細については、<see cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" /> メソッドのトピックを参照してください。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.LetterExpected">
      <summary>操作が成功しませんでした。 文字ではない入力文字が見つかりました。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NoEffect">
      <summary>成功。 必要がなかったため主要な操作は実行されませんでした。したがって、副作用は発生しませんでした。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NonEditPosition">
      <summary>操作が成功しませんでした。 書式設定された文字列内の現在の位置はリテラル文字です。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PositionOutOfRange">
      <summary>操作が成功しませんでした。 指定した位置が対象の文字列の範囲外です。通常、これはゼロ未満の値か、対象の文字列の長さより大きい値です。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PromptCharNotAllowed">
      <summary>操作が成功しませんでした。 入力時のプロンプト文字が有効ではありません。原因としては、<see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" /> プロパティが <see langword="false" /> に設定されていることが考えられます。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SideEffect">
      <summary>成功。 必要がなかったため主要な操作は実行されませんでしたが、メソッドで副作用が発生しました。 たとえば、<see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" /> メソッドは未割り当ての編集位置を削除できるため、書式設定された文字列で後続文字が左にシフトされます。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SignedDigitExpected">
      <summary>操作が成功しませんでした。 符号付き数値以外の入力文字が見つかりました。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Success">
      <summary>成功。 主要な操作が正常に行われました。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.UnavailableEditPosition">
      <summary>操作が成功しませんでした。 要求を実行するのに十分な編集位置がありませんでした。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Unknown">
      <summary>不明。 操作の結果を判断できませんでした。</summary>
    </member>
    <member name="T:System.ComponentModel.MemberDescriptor">
      <summary>プロパティやイベントなどのクラス メンバーを表します。 これは抽象基本クラスです。</summary>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>
        <see cref="T:System.ComponentModel.MemberDescriptor" /> を指定して、<see cref="T:System.ComponentModel.MemberDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="descr">メンバーの名前と属性を格納している <see cref="T:System.ComponentModel.MemberDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>指定した <see cref="T:System.ComponentModel.MemberDescriptor" /> 内の名前と、古い <see cref="T:System.ComponentModel.MemberDescriptor" /> および <see cref="T:System.ComponentModel.MemberDescriptor" /> 配列の両方に格納されている属性を使用して、<see cref="T:System.Attribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="oldMemberDescriptor">メンバーの名前とその属性を格納している <see cref="T:System.ComponentModel.MemberDescriptor" />。</param>
      <param name="newAttributes">メンバーに追加する属性を格納している、<see cref="T:System.Attribute" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String)">
      <summary>メンバーの名前を指定して、<see cref="T:System.ComponentModel.MemberDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">メンバーの名前。</param>
      <exception cref="T:System.ArgumentException">この名前は空の文字列 ("") か、または <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>メンバーの名前と属性の配列を指定して、<see cref="T:System.ComponentModel.MemberDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">メンバーの名前。</param>
      <param name="attributes">メンバーの属性を格納している <see cref="T:System.Attribute" /> 型の配列。</param>
      <exception cref="T:System.ArgumentException">この名前は空の文字列 ("") か、または <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.AttributeArray">
      <summary>属性の配列を取得または設定します。</summary>
      <returns>メンバーの属性を格納している <see cref="T:System.Attribute" /> 型の配列。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Attributes">
      <summary>メンバーの属性のコレクションを取得します。</summary>
      <returns>このメンバーに属性を提供する <see cref="T:System.ComponentModel.AttributeCollection" />。<see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" /> 内に属性がない場合は、空のコレクション。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Category">
      <summary>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> で指定されている、メンバーが属するカテゴリの名前を取得します。</summary>
      <returns>メンバーが属しているカテゴリの名前。 <see cref="T:System.ComponentModel.CategoryAttribute" /> がない場合、カテゴリ名は既定のカテゴリである <see langword="Misc" /> に設定されます。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection">
      <summary>コンストラクターに渡された属性配列を使用して、属性のコレクションを作成します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" /> 属性を格納している新しい <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Description">
      <summary>
        <see cref="T:System.ComponentModel.DescriptionAttribute" /> で指定されている、メンバーの説明を取得します。</summary>
      <returns>メンバーの説明。 <see cref="T:System.ComponentModel.DescriptionAttribute" /> がない場合、このプロパティの値は既定値である空の文字列 ("") に設定されます。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DesignTimeOnly">
      <summary>
        <see cref="T:System.ComponentModel.DesignOnlyAttribute" /> で指定されている、メンバーを設定できるのがデザイン時だけかどうかを示す値を取得します。</summary>
      <returns>メンバーを設定できるのがデザイン時だけの場合は <see langword="true" />。実行時に設定できる場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DisplayName">
      <summary>[プロパティ] ウィンドウなどのウィンドウに表示できる名前を取得します。</summary>
      <returns>表示するメンバー名。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.Equals(System.Object)">
      <summary>現在のインスタンスと指定したオブジェクトを比較して、等しいかどうかを確認します。</summary>
      <param name="obj">現在のインスタンスと比較する対象のオブジェクト。</param>
      <returns>両者が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)">
      <summary>派生クラスでオーバーライドされた場合、親クラスの指定した属性リストに継承クラスの属性を追加します。</summary>
      <param name="attributeList">親クラスの属性を格納している <see cref="T:System.Collections.IList" />。 初期状態では、このリストは空です。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)">
      <summary>パブリック メソッドだけを検索対象として、指定したメソッドをリフレクションによって検索します。</summary>
      <param name="componentClass">メソッドを格納しているコンポーネント。</param>
      <param name="name">検索するメソッドの名前。</param>
      <param name="args">オーバーロードされたメソッドの中からメソッドを選択するために使用される、メソッドのパラメーターを格納している配列。</param>
      <param name="returnType">メソッドの戻り値の型。</param>
      <returns>メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。メソッドが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)">
      <summary>パブリック メソッドだけを検索対象とすることを指定して、特定のメソッドをリフレクションによって検索します。</summary>
      <param name="componentClass">メソッドを格納しているコンポーネント。</param>
      <param name="name">検索するメソッドの名前。</param>
      <param name="args">オーバーロードされたメソッドの中からメソッドを選択するために使用される、メソッドのパラメーターを格納している配列。</param>
      <param name="returnType">メソッドの戻り値の型。</param>
      <param name="publicOnly">検索対象をパブリック メソッドに限定するかどうかを示します。</param>
      <returns>メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。メソッドが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>現在の <see cref="T:System.ComponentModel.MemberDescriptor" /> のハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary>メンバーの呼び出し中に使用するオブジェクトを取得します。</summary>
      <param name="type">呼び出し対象の <see cref="T:System.Type" />。</param>
      <param name="instance">呼び出し対象になる可能性があるインスタンス。</param>
      <returns>メンバーの呼び出し中に使用するオブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> または <paramref name="instance" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)">
      <summary>メソッドを呼び出す対象のコンポーネントを取得します。</summary>
      <param name="componentClass">
        <see cref="T:System.Type" /> が関連付けられているコンポーネントの型を表す <see cref="T:System.ComponentModel.MemberDescriptor" />。 たとえば、<see cref="T:System.ComponentModel.MemberDescriptor" /> がプロパティについて説明している場合、このパラメーターはそのプロパティが宣言されているクラスになります。</param>
      <param name="component">メソッドを呼び出す対象のオブジェクトのインスタンス。</param>
      <returns>メソッドを呼び出す対象のコンポーネントのインスタンス。 このメソッドは、プロパティがビジュアル デザイナーに結び付けられている場合は、ビジュアル デザイナーを返します。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentClass" /> または <paramref name="component" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)">
      <summary>指定したコンポーネントのコンポーネント サイトを取得します。</summary>
      <param name="component">サイトを検索する対象のコンポーネント。</param>
      <returns>コンポーネントのサイト。サイトが存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.IsBrowsable">
      <summary>
        <see cref="T:System.ComponentModel.BrowsableAttribute" /> で指定されている、メンバーが参照可能かどうかを示す値を取得します。</summary>
      <returns>メンバーが参照可能である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see cref="T:System.ComponentModel.BrowsableAttribute" /> がない場合、プロパティ値は既定値である <see langword="true" /> に設定されます。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Name">
      <summary>メンバーの名前を取得します。</summary>
      <returns>メンバーの名前。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.NameHashCode">
      <summary>
        <see cref="M:System.String.GetHashCode" /> で指定されている、メンバーの名前のハッシュ コードを取得します。</summary>
      <returns>メンバーの名前のハッシュ コード。</returns>
    </member>
    <member name="T:System.ComponentModel.MultilineStringConverter">
      <summary>複数行文字列から単純文字列への変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.MultilineStringConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定したコンテキストとカルチャ情報を使用して、指定した値オブジェクトを、指定した型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。 <see langword="null" /> を渡すと、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">value パラメーターの変換後の <see cref="T:System.Type" />。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>指定したコンテキストと属性を使用して、<paramref name="value" /> パラメーターで指定された配列型のプロパティのコレクションを返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">プロパティを取得する対象となる配列の型を指定する <see cref="T:System.Object" /> 。</param>
      <param name="attributes">フィルターとして使用される <see cref="T:System.Attribute" /> 型の配列。</param>
      <returns>指定されたデータ型に対して公開されているプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。コレクションにプロパティが格納されていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>指定したコンテキストを使用して、オブジェクトがプロパティをサポートしているかどうかを示す値を返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>このオブジェクトのプロパティを見つけるために <see cref="Overload:System.ComponentModel.MultilineStringConverter.GetProperties" /> を呼び出す必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.NestedContainer">
      <summary>
        <see cref="T:System.ComponentModel.INestedContainer" /> インターフェイスの基本実装を提供し、コンテナーが所有コンポーネントを持つことができるようにします。</summary>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
      <summary>
        <see cref="T:System.ComponentModel.NestedContainer" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="owner">この入れ子になったコンテナーを所有している <see cref="T:System.ComponentModel.IComponent" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>コンテナー内にコンポーネント用のサイトを作成します。</summary>
      <param name="component">サイトを作成する <see cref="T:System.ComponentModel.IComponent" />。</param>
      <param name="name">
        <paramref name="component" /> に割り当てる名前。名前の割り当てをスキップする場合は <see langword="null" />。</param>
      <returns>新しく作成された <see cref="T:System.ComponentModel.ISite" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
      <summary>入れ子になったコンテナーによって使用されているリソースを解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
      <summary>指定した型のサービス オブジェクトがある場合は、そのオブジェクトを取得します。</summary>
      <param name="service">取得するサービスの <see cref="T:System.Type" />。</param>
      <returns>要求したサービスを実装する <see cref="T:System.Object" />。サービスを解決できない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.Owner">
      <summary>この入れ子になったコンテナーの所有コンポーネントを取得します。</summary>
      <returns>この入れ子になったコンテナーを所有している <see cref="T:System.ComponentModel.IComponent" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.OwnerName">
      <summary>所有コンポーネントの名前を取得します。</summary>
      <returns>所有コンポーネントの名前。</returns>
    </member>
    <member name="T:System.ComponentModel.NullableConverter">
      <summary>null 許容型とその基になるプリミティブ型の間の自動変換を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.#ctor(System.Type)">
      <summary>
        <see cref="T:System.ComponentModel.NullableConverter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">指定された、null 許容型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> が null 許容型ではありません。</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、指定したコンテキストを使用して、指定された型のオブジェクトをこのコンバーターの型に変換できるかどうかを返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが指定のコンテキストを使用して、オブジェクトを指定の型に変換できるかどうかを返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したコンテキストとカルチャ情報を使用して、指定されたオブジェクトをこのコンバーターの型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">現在のカルチャとして使用する <see cref="T:System.Globalization.CultureInfo" /> 。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定したコンテキストとカルチャ情報を使用して、指定した値オブジェクトを、指定した型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">現在のカルチャとして使用する <see cref="T:System.Globalization.CultureInfo" /> 。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">value パラメーターの変換後の <see cref="T:System.Type" />。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>この <see cref="T:System.ComponentModel.TypeConverter" /> を関連付ける型のインスタンスを作成します。指定されたコンテキストと、与えられているオブジェクトのプロパティ値のセットを使用します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="propertyValues">新しいプロパティ値の <see cref="T:System.Collections.IDictionary" />。</param>
      <returns>指定した <see cref="T:System.Object" /> を表す <see cref="T:System.Collections.IDictionary" />。オブジェクトを作成できない場合は <see langword="null" />。 このメソッドは常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>このオブジェクトの値を変更するときに、指定したコンテキストを使用して <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> を呼び出して、新しい値を作成する必要があるかどうかを返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>このオブジェクトのプロパティを変更するときに <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> を呼び出して新しい値を作成する必要がある場合は <see langword="true" />、必要がない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>指定したコンテキストと属性を使用して、value パラメーターで指定された配列型のプロパティのコレクションを返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">プロパティを取得する対象となる配列の型を指定する <see cref="T:System.Object" /> 。</param>
      <param name="attributes">フィルターとして使用される、<see cref="T:System.Attribute" /> 型の配列。</param>
      <returns>指定されたデータ型に対して公開されているプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。コレクションにプロパティが格納されていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>指定したコンテキストを使用して、オブジェクトがプロパティをサポートしているかどうかを示す値を返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>このオブジェクトのプロパティを見つけるために <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> を呼び出す必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>書式指定コンテキストが指定されている場合、型コンバーターがデザインされた対象のデータ型の標準値のコレクションを返します。</summary>
      <param name="context">書式コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。これを使用すると、このコンバーターが呼び出される環境についての追加情報を抽出できます。 このパラメーターまたはこのパラメーターのプロパティには、<see langword="null" /> を指定できます。</param>
      <returns>有効値の標準セットを保持している <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />。データ型が標準値セットをサポートしていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>指定したコンテキストを使用して、<see cref="Overload:System.ComponentModel.TypeConverter.GetStandardValues" /> から返された標準値のコレクションが有効値の排他的なリストかどうかを示す値を返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>
        <see langword="true" /> から返された <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> が、有効値の排他的なリストの場合は <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />。他の値も有効である場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>指定したコンテキストを使用して、リストから選択できる標準値セットをオブジェクトがサポートするかどうかを示す値を返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>オブジェクトがサポートしている標準値セットを見つけるために <see langword="true" /> を呼び出す必要がある場合は <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>指定した値オブジェクトが、型および指定したコンテキストに対して有効かどうかを示す値を返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">有効かどうかを確認する対象の <see cref="T:System.Object" />。</param>
      <returns>指定した値がオブジェクトに対して有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.NullableType">
      <summary>null 許容型を取得します。</summary>
      <returns>null 許容型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingType">
      <summary>基になる型を取得します。</summary>
      <returns>基になる型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingTypeConverter">
      <summary>基になる型コンバーターを取得します。</summary>
      <returns>基になる型コンバーターを表す <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="T:System.ComponentModel.PasswordPropertyTextAttribute">
      <summary>アスタリスクなどの文字で、オブジェクトのテキスト表記を隠すように指示します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> クラスの新しいインスタンスを初期化して、オプションでパスワード テキストを示します。</summary>
      <param name="password">プロパティをパスワード テキストとして表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</param>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> の既定値を指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.Equals(System.Object)">
      <summary>2 つの <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> インスタンスが等しいかどうかを判断します。</summary>
      <param name="o">現在の <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> と比較する <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />。</param>
      <returns>指定した <see langword="true" /> が現在の <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> と等しい場合は <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>現在の <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.IsDefaultAttribute">
      <summary>このインスタンスの値が既定値であるかどうかを示す値を返します。</summary>
      <returns>このインスタンスがクラスの既定の属性である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.No">
      <summary>テキスト プロパティをパスワードとして使用しないことを指定します。 この <see langword="static" /> (Visual Basic では <see langword="Shared" />) フィールドは読み取り専用です。</summary>
    </member>
    <member name="P:System.ComponentModel.PasswordPropertyTextAttribute.Password">
      <summary>
        <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> が定義されているプロパティをパスワード テキストとして表示するかどうかを示す値を取得します。</summary>
      <returns>プロパティをパスワード テキストとして表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Yes">
      <summary>テキスト プロパティをパスワードとして使用することを指定します。 この <see langword="static" /> (Visual Basic では <see langword="Shared" />) フィールドは読み取り専用です。</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary>クラスのプロパティの抽象化を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>指定した <see cref="T:System.ComponentModel.PropertyDescriptor" /> 内の名前と属性を使用して、<see cref="T:System.ComponentModel.MemberDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="descr">プロパティの名前と属性を格納している <see cref="T:System.ComponentModel.MemberDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>指定した <see cref="T:System.ComponentModel.PropertyDescriptor" /> 内の名前と、<see cref="T:System.ComponentModel.MemberDescriptor" /> および <see cref="T:System.ComponentModel.MemberDescriptor" /> 配列の両方に格納されている属性を使用して、<see cref="T:System.Attribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="descr">メンバーの名前とその属性を格納している <see cref="T:System.ComponentModel.MemberDescriptor" />。</param>
      <param name="attrs">プロパティに関連付ける属性を格納している <see cref="T:System.Attribute" /> 配列。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>名前と属性を指定して、<see cref="T:System.ComponentModel.PropertyDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">プロパティの名前。</param>
      <param name="attrs">プロパティの属性を格納している <see cref="T:System.Attribute" /> 型の配列。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary>プロパティが変更されたときに、ほかのオブジェクトに通知できるようにします。</summary>
      <param name="component">ハンドラーを追加する対象のコンポーネント。</param>
      <param name="handler">リスナーとして追加されるデリゲート。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> または <paramref name="handler" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)">
      <summary>派生クラスでオーバーライドされた場合、オブジェクトをリセットしたときに、そのオブジェクトの値が変化するかどうかを示す値を返します。</summary>
      <param name="component">リセット機能について調べる対象のコンポーネント。</param>
      <returns>コンポーネントをリセットするとコンポーネントの値が変化する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.ComponentType">
      <summary>派生クラスでオーバーライドされた場合、プロパティが関連付けられているコンポーネントの型を取得します。</summary>
      <returns>プロパティが関連付けられているコンポーネントの型を表す <see cref="T:System.Type" />。 <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> メソッドまたは <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> メソッドが呼び出される場合、指定されたオブジェクトはこの型のインスタンスである可能性があります。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.Converter">
      <summary>プロパティの型コンバーターを取得します。</summary>
      <returns>プロパティの <see cref="T:System.ComponentModel.TypeConverter" /> を変換するために使用する <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)">
      <summary>指定した型のインスタンスを作成します。</summary>
      <param name="type">作成する型を表す <see cref="T:System.Type" />。</param>
      <returns>指定した型の新しいインスタンス。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)">
      <summary>プロパティ記述子を別のオブジェクトと比較して、等しいかどうかを確認します。</summary>
      <param name="obj">この <see cref="T:System.ComponentModel.PropertyDescriptor" /> と比較するオブジェクト。</param>
      <returns>両方の値が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)">
      <summary>指定した親クラスの属性リストに <see cref="T:System.ComponentModel.PropertyDescriptor" /> の属性を追加します。</summary>
      <param name="attributeList">親クラスの属性を格納している <see cref="T:System.Collections.IList" />。 初期状態では、このリストは空です。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties">
      <summary>既定の <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> を返します。</summary>
      <returns>プロパティ記述子のコレクション。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])">
      <summary>指定した属性配列をフィルターとして使用して、<see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> を返します。</summary>
      <param name="filter">フィルターとして使用される、<see cref="T:System.Attribute" /> 型の配列。</param>
      <returns>指定した属性に一致するプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)">
      <summary>指定したオブジェクトの <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> を返します。</summary>
      <param name="instance">プロパティを取得する対象のコンポーネント。</param>
      <returns>指定したコンポーネントのプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary>指定した属性配列をフィルターとして使用して、指定したオブジェクトの <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> を返します。</summary>
      <param name="instance">プロパティを取得する対象のコンポーネント。</param>
      <param name="filter">フィルターとして使用される、<see cref="T:System.Attribute" /> 型の配列。</param>
      <returns>指定したコンポーネントのプロパティのうち、指定した属性に一致するプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)">
      <summary>指定した型のエディターを取得します。</summary>
      <param name="editorBaseType">プロパティがサポートしている複数のエディターを区別するために使用される、エディターの基本型。</param>
      <returns>要求したエディター型のインスタンス。エディターが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetHashCode">
      <summary>このオブジェクトのハッシュ コードを返します。</summary>
      <returns>このオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary>このメソッドでは、メンバーの呼び出し中に使用するオブジェクトが返されます。</summary>
      <param name="type">呼び出し対象の <see cref="T:System.Type" />。</param>
      <param name="instance">呼び出し対象になる可能性があるインスタンス。</param>
      <returns>メンバーの呼び出し中に使用する <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)">
      <summary>型名を使用して型を返します。</summary>
      <param name="typeName">取得する型のアセンブリ修飾名。</param>
      <returns>指定した型名と一致する <see cref="T:System.Type" />。一致する型が見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)">
      <summary>派生クラスでオーバーライドされた場合、コンポーネントのプロパティの現在の値を取得します。</summary>
      <param name="component">値の取得対象であるプロパティを持つコンポーネント。</param>
      <returns>指定したコンポーネントのプロパティの値。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)">
      <summary>特定のコンポーネントについて現在の <c>ValueChanged</c> イベント ハンドラー セットを取得します。</summary>
      <param name="component">イベント ハンドラーの取得対象のコンポーネント。</param>
      <returns>結合されたマルチキャスト イベント ハンドラー。現在イベント ハンドラーが <paramref name="component" /> に関連付けられていない場合は、<see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsLocalizable">
      <summary>プロパティをローカライズする必要があるかどうかを示す、<see cref="T:System.ComponentModel.LocalizableAttribute" /> で指定されている値を取得します。</summary>
      <returns>メンバーの <see cref="T:System.ComponentModel.LocalizableAttribute" /> が <see langword="true" /> に設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsReadOnly">
      <summary>派生クラスでオーバーライドされた場合、プロパティが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>プロパティが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)">
      <summary>実装した <c>ValueChanged</c> イベントを発生させます。</summary>
      <param name="component">イベントを発生させるオブジェクト。</param>
      <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.PropertyType">
      <summary>派生クラスでオーバーライドされた場合、プロパティの型を取得します。</summary>
      <returns>プロパティの型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary>プロパティが変更されたときに、ほかのオブジェクトに通知できるようにします。</summary>
      <param name="component">ハンドラーを削除する対象のコンポーネント。</param>
      <param name="handler">リスナーとして削除されるデリゲート。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> または <paramref name="handler" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)">
      <summary>派生クラスでオーバーライドされた場合、コンポーネントのプロパティの値を既定値にリセットします。</summary>
      <param name="component">既定値にリセットする対象のプロパティ値を持つコンポーネント。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SerializationVisibility">
      <summary>プロパティをシリアル化する必要があるかどうかを示す、<see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" /> で指定されている値を取得します。</summary>
      <returns>プロパティをシリアル化する必要があるかどうかを指定する <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 列挙値の 1 つ。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>派生クラスでオーバーライドされた場合、コンポーネントの値を別の値に設定します。</summary>
      <param name="component">設定する対象のプロパティ値を持つコンポーネント。</param>
      <param name="value">新しい値。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>派生クラスでオーバーライドされた場合、プロパティの値を永続化する必要があるかどうかを示す値を決定します。</summary>
      <param name="component">永続性について調べる対象のプロパティを持つコンポーネント。</param>
      <returns>プロパティを永続化する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents">
      <summary>このプロパティの値変更通知をプロパティ記述子以外から発生させてよいかどうかを示す値を取得します。</summary>
      <returns>値変更通知をプロパティ記述子以外から発生させてよい場合は <see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptorCollection">
      <summary>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])">
      <summary>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="properties">コレクションのプロパティを提供する <see cref="T:System.ComponentModel.PropertyDescriptor" /> 型の配列。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)">
      <summary>オプションで読み取り専用にできる <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> クラスの新しい空のインスタンスを初期化します。</summary>
      <param name="properties">コレクションのプロパティを提供する <see cref="T:System.ComponentModel.PropertyDescriptor" /> 型の配列。</param>
      <param name="readOnly">
        <see langword="true" /> の場合、コレクションを変更できません。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)">
      <summary>指定された <see cref="T:System.ComponentModel.PropertyDescriptor" /> をコレクションに追加します。</summary>
      <param name="value">コレクションに追加する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns>コレクションに追加された <see cref="T:System.ComponentModel.PropertyDescriptor" /> のインデックス。</returns>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Clear">
      <summary>コレクションからすべての <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトを削除します。</summary>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)">
      <summary>指定した <see cref="T:System.ComponentModel.PropertyDescriptor" /> がコレクションに格納されているかどうかを示す値を返します。</summary>
      <param name="value">コレクション内で検索する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns>指定した <see cref="T:System.ComponentModel.PropertyDescriptor" /> がコレクションに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)">
      <summary>指定したインデックス番号を開始位置として、配列にコレクション全体をコピーします。</summary>
      <param name="array">コレクションの要素のコピー先である <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトの配列。</param>
      <param name="index">コピーの開始位置を示す、<paramref name="array" /> パラメーターのインデックス。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Count">
      <summary>コレクション内のプロパティ記述子の数を取得します。</summary>
      <returns>コレクション内のプロパティ記述子の数。</returns>
    </member>
    <member name="F:System.ComponentModel.PropertyDescriptorCollection.Empty">
      <summary>項目のない新しいコレクションを作成する代わりに使用できる、空のコレクションを指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>大文字と小文字の違いを無視するかどうかを示すブール値を使用して、指定した名前の <see cref="T:System.ComponentModel.PropertyDescriptor" /> を返します。</summary>
      <param name="name">コレクションから返す <see cref="T:System.ComponentModel.PropertyDescriptor" /> の名前。</param>
      <param name="ignoreCase">プロパティ名の大文字と小文字を区別しない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>指定した名前の <see cref="T:System.ComponentModel.PropertyDescriptor" />。そのようなプロパティが存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator">
      <summary>クラスの列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 型の列挙子。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)">
      <summary>指定した <see cref="T:System.ComponentModel.PropertyDescriptor" /> のインデックスを返します。</summary>
      <param name="value">インデックスを返す対象の <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns>指定した <see cref="T:System.ComponentModel.PropertyDescriptor" /> のインデックス。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>コレクション内の指定したインデックス番号の位置に <see cref="T:System.ComponentModel.PropertyDescriptor" /> を追加します。</summary>
      <param name="index">
        <paramref name="value" /> パラメーターに指定されたプロパティ記述子を追加する位置を示す、コレクション内のインデックス。</param>
      <param name="value">コレクションに追加する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>指定した <see cref="T:System.Collections.IComparer" /> を使用して、コレクションのメンバーを並べ替えます。</summary>
      <param name="sorter">コレクション内の <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトを並べ替えるために使用する比較子。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])">
      <summary>このコレクションのメンバーを並べ替えます。 指定した順序が最初に適用され、次にコレクションの既定の並べ替え順序が適用されます。既定の並べ替え順序は、通常はアルファベット順です。</summary>
      <param name="names">コレクション内の <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトを並べ替える順序を記述する文字列の配列。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)">
      <summary>指定したインデックス番号にある <see cref="T:System.ComponentModel.PropertyDescriptor" /> を取得または設定します。</summary>
      <param name="index">取得または設定する <see cref="T:System.ComponentModel.PropertyDescriptor" /> の 0 から始まるインデックス番号。</param>
      <returns>指定したインデックス番号を持つ <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> パラメーターが、<see cref="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)" /> に対して有効なインデックスではありません。</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)">
      <summary>指定した名前の <see cref="T:System.ComponentModel.PropertyDescriptor" /> を取得または設定します。</summary>
      <param name="name">コレクションから取得する <see cref="T:System.ComponentModel.PropertyDescriptor" /> の名前。</param>
      <returns>指定した名前の <see cref="T:System.ComponentModel.PropertyDescriptor" />。そのようなプロパティが存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)">
      <summary>指定された <see cref="T:System.ComponentModel.PropertyDescriptor" /> をコレクションから削除します。</summary>
      <param name="value">コレクションから削除する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)">
      <summary>指定したインデックス位置にある <see cref="T:System.ComponentModel.PropertyDescriptor" /> をコレクションから削除します。</summary>
      <param name="index">コレクションから削除する <see cref="T:System.ComponentModel.PropertyDescriptor" /> のインデックス。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort">
      <summary>このコレクションの既定の並べ替えを使用して、このコレクションのメンバーを並べ替えます。既定の並べ替えは、通常はアルファベット順です。</summary>
      <returns>並べ替えられた <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> オブジェクトを格納している新しい <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>指定した <see cref="T:System.Collections.IComparer" /> を使用して、コレクションのメンバーを並べ替えます。</summary>
      <param name="comparer">コレクション内の <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトを並べ替えるために使用する比較子。</param>
      <returns>並べ替えられた <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> オブジェクトを格納している新しい <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])">
      <summary>このコレクションのメンバーを並べ替えます。 指定した順序が最初に適用され、次にコレクションの既定の並べ替え順序が適用されます。既定の並べ替え順序は、通常はアルファベット順です。</summary>
      <param name="names">コレクション内の <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトを並べ替える順序を記述する文字列の配列。</param>
      <returns>並べ替えられた <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> オブジェクトを格納している新しい <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>このコレクションのメンバーを並べ替えます。 指定した順序が最初に適用され、指定した <see cref="T:System.Collections.IComparer" /> を使用した並べ替えが次に行われます。</summary>
      <param name="names">コレクション内の <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトを並べ替える順序を記述する文字列の配列。</param>
      <param name="comparer">コレクション内の <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトを並べ替えるために使用する比較子。</param>
      <returns>並べ替えられた <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> オブジェクトを格納している新しい <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count">
      <summary>コレクションに格納されている要素の数を取得します。</summary>
      <returns>コレクションに格納されている要素の数。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>コレクションへのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>コレクションへのアクセスが同期されている (スレッド セーフである) 場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary>コレクションへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>コレクションへのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>指定したキーおよび値を持つ要素を <see cref="T:System.Collections.IDictionary" /> オブジェクトに追加します。</summary>
      <param name="key">追加する要素のキーとして使用する <see cref="T:System.Object" />。</param>
      <param name="value">追加する要素の値として使用する <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> からすべての要素を削除します。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)">
      <summary>指定したキーの要素が <see cref="T:System.Collections.IDictionary" /> に格納されているかどうかを確認します。</summary>
      <param name="key">
        <see cref="T:System.Collections.IDictionary" /> 内で検索されるキー。</param>
      <returns>指定したキーを持つ要素を <see langword="true" /> が保持している場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator">
      <summary>クラスの列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 型の列挙子。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)">
      <summary>指定したキーを持つ要素を取得または設定します。</summary>
      <param name="key">取得または設定する要素のキー。</param>
      <returns>指定したキーを持つ要素。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys">
      <summary>
        <see cref="T:System.Collections.ICollection" /> のキーを保持している <see cref="T:System.Collections.IDictionary" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> のキーを保持している <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)">
      <summary>指定したキーを持つ要素を <see cref="T:System.Collections.IDictionary" /> から削除します。</summary>
      <param name="key">削除する要素のキー。</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values">
      <summary>
        <see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.IDictionary" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
        <see cref="T:System.Collections.IEnumerator" /> の <see cref="T:System.Collections.IDictionary" /> を返します。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> の <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" /> に項目を追加します。</summary>
      <param name="value">コレクションに追加する項目。</param>
      <returns>新しい要素が挿入された位置。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear">
      <summary>コレクションからすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary>コレクションに特定の値が格納されているかどうかを判断します。</summary>
      <param name="value">コレクション内で検索する項目。</param>
      <returns>項目がコレクションで見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>コレクション内で指定した項目のインデックスを調べます。</summary>
      <param name="value">コレクション内で検索する項目。</param>
      <returns>リストに存在する場合は <paramref name="value" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>コレクション内の指定したインデックスの位置に項目を挿入します。</summary>
      <param name="index">
        <paramref name="value" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="value">コレクションに挿入する項目。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary>コレクションが固定サイズかどうかを示す値を取得します。</summary>
      <returns>コレクションが固定サイズの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary>コレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>コレクションが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary>コレクション内の指定したインデックス位置の項目を取得または設定します。</summary>
      <param name="index">取得または設定する項目の、0 から始まるインデックス。</param>
      <returns>指定したインデックス位置にある要素。</returns>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が <see cref="T:System.ComponentModel.PropertyDescriptor" /> ではありません。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> が 0 未満です。  

または - 
<paramref name="index" /> が <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" /> 以上になっています。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary>最初に出現する指定値をコレクションから削除します。</summary>
      <param name="value">コレクションから削除する項目。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>指定したインデックスにある項目を削除します。</summary>
      <param name="index">削除する項目の 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="T:System.ComponentModel.PropertyTabAttribute">
      <summary>指定したクラスに対して表示するプロパティ タブを識別します。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.PropertyTabAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String)">
      <summary>タブ クラスの名前を指定して、<see cref="T:System.ComponentModel.PropertyTabAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tabClassName">作成するタブの型のアセンブリ修飾名。 この書式指定規則の例については、<see cref="P:System.Type.AssemblyQualifiedName" /> のトピックを参照してください。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String,System.ComponentModel.PropertyTabScope)">
      <summary>タブ クラスの名前とタブのスコープを指定して、<see cref="T:System.ComponentModel.PropertyTabAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tabClassName">作成するタブの型のアセンブリ修飾名。 この書式指定規則の例については、<see cref="P:System.Type.AssemblyQualifiedName" /> のトピックを参照してください。</param>
      <param name="tabScope">タブのスコープを示す <see cref="T:System.ComponentModel.PropertyTabScope" />。スコープが <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> の場合、タブは対応する <see cref="T:System.ComponentModel.PropertyTabAttribute" /> を持つコンポーネントに対してだけ表示されます。 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> の場合は、ドキュメント上のすべてのコンポーネントに対して表示されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScope" /> が、<see cref="F:System.ComponentModel.PropertyTabScope.Document" /> でも <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> でもありません。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type)">
      <summary>タブの型を指定して、<see cref="T:System.ComponentModel.PropertyTabAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tabClass">作成するタブの型。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type,System.ComponentModel.PropertyTabScope)">
      <summary>タブの型とタブのスコープを指定して、<see cref="T:System.ComponentModel.PropertyTabAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tabClass">作成するタブの型。</param>
      <param name="tabScope">タブのスコープを示す <see cref="T:System.ComponentModel.PropertyTabScope" />。スコープが <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> の場合、タブは対応する <see cref="T:System.ComponentModel.PropertyTabAttribute" /> を持つコンポーネントに対してだけ表示されます。 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> の場合は、ドキュメント上のすべてのコンポーネントに対して表示されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScope" /> が、<see cref="F:System.ComponentModel.PropertyTabScope.Document" /> でも <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> でもありません。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.ComponentModel.PropertyTabAttribute)">
      <summary>対象のインスタンスが、指定した属性に等しいかどうかを示す値を返します。</summary>
      <param name="other">このインスタンスと比較する <see cref="T:System.ComponentModel.PropertyTabAttribute" />。または、<see langword="null" />。</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyTabAttribute" /> インスタンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.TypeLoadException">
        <paramref name="other" /> パラメーターの <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> プロパティで指定された型が見つかりません。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.Object)">
      <summary>このインスタンスが指定されたオブジェクトに等しいかどうかを示す値を返します。</summary>
      <param name="other">このインスタンスと比較するオブジェクト、または <see langword="null" />。</param>
      <returns>
        <paramref name="other" /> が同じ <see cref="T:System.ComponentModel.PropertyTabAttribute" /> インスタンスを参照している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.TypeLoadException">
        <paramref name="other" /> パラメーターの <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> プロパティで指定された型が見つかりませんでした。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.GetHashCode">
      <summary>オブジェクトのハッシュ コードを取得します。</summary>
      <returns>属性が属しているオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.String[],System.ComponentModel.PropertyTabScope[])">
      <summary>タブ クラスの名前とタブのスコープの配列を指定して、属性を初期化します。</summary>
      <param name="tabClassNames">[プロパティ] ウィンドウのタブに対して作成する型の完全修飾型名の配列。</param>
      <param name="tabScopes">各タブのスコープ。スコープが <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> の場合、タブは対応する <see cref="T:System.ComponentModel.PropertyTabAttribute" /> を持つコンポーネントに対してだけ表示されます。 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> の場合は、ドキュメント上のすべてのコンポーネントに対して表示されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScopes" /> 内の値に、<see cref="F:System.ComponentModel.PropertyTabScope.Document" /> または <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> のいずれでもないものがあります。  

または - 
<paramref name="tabClassNames" /> 配列と <paramref name="tabScopes" /> 配列の長さが違います。  

または - 
<paramref name="tabClassNames" /> または <paramref name="tabScopes" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.Type[],System.ComponentModel.PropertyTabScope[])">
      <summary>タブ クラスの名前とタブのスコープの配列を指定して、属性を初期化します。</summary>
      <param name="tabClasses">作成するタブの型。</param>
      <param name="tabScopes">各タブのスコープ。スコープが <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> の場合、タブは対応する <see cref="T:System.ComponentModel.PropertyTabAttribute" /> を持つコンポーネントに対してだけ表示されます。 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> の場合は、ドキュメント上のすべてのコンポーネントに対して表示されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScopes" /> 内の値に、<see cref="F:System.ComponentModel.PropertyTabScope.Document" /> または <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> のいずれでもないものがあります。  

または - 
<paramref name="tabClassNames" /> 配列と <paramref name="tabScopes" /> 配列の長さが違います。  

または 
 <paramref name="tabClassNames" /> または <paramref name="tabScopes" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClasses">
      <summary>属性が使用するタブの型を取得します。</summary>
      <returns>属性が使用するタブの型を示す型配列。</returns>
      <exception cref="T:System.TypeLoadException">
        <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> プロパティで指定された型が見つかりませんでした。</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClassNames">
      <summary>属性が使用するタブ クラスの名前を取得します。</summary>
      <returns>属性が使用するタブ クラスの名前。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabScopes">
      <summary>
        <see cref="T:System.ComponentModel.PropertyTabAttribute" /> の各タブのスコープの配列を取得します。</summary>
      <returns>タブのスコープを示す <see cref="T:System.ComponentModel.PropertyTabScope" /> オブジェクトの配列。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabScope">
      <summary>[プロパティ] ウィンドウにあるタブのスコープの永続性を示す識別子を定義します。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Component">
      <summary>このタブは、現在のコンポーネントに固有のタブです。 このタブは、現在のコンポーネントに関してだけ [プロパティ] ウィンドウに追加され、そのコンポーネントが選択されなくなった時点で削除されます。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Document">
      <summary>このタブは、現在のドキュメントに固有のタブです。 このタブは [プロパティ] ウィンドウに追加され、現在選択されているドキュメントが変更された時点で削除されます。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Global">
      <summary>このタブは [プロパティ] ウィンドウに追加され、親コンポーネントだけが明示的に削除できます。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Static">
      <summary>このタブは [プロパティ] ウィンドウに追加され、削除はできません。</summary>
    </member>
    <member name="T:System.ComponentModel.ProvidePropertyAttribute">
      <summary>
        <see cref="T:System.ComponentModel.IExtenderProvider" /> の実装側が他のコンポーネントに提供するプロパティの名前を指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)">
      <summary>プロパティの名前とそのプロパティを受け取る側の型を指定して、<see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="propertyName">指定した型のオブジェクトに拡張するプロパティの名前。</param>
      <param name="receiverTypeName">このプロパティが拡張できるデータ型の名前。</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)">
      <summary>プロパティの名前とその <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> を指定して、<see cref="T:System.Type" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="propertyName">指定した型のオブジェクトに拡張するプロパティの名前。</param>
      <param name="receiverType">プロパティを受け取ることができるオブジェクトのデータ型の <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)">
      <summary>指定したオブジェクトの値が現在の <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> と等しいかどうかを示す値を返します。</summary>
      <param name="obj">値が等しいかどうかを確認するオブジェクト。</param>
      <returns>指定したオブジェクトの値が現在の値と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>現在の <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.PropertyName">
      <summary>このクラスが提供するプロパティの名前を取得します。</summary>
      <returns>このクラスが提供するプロパティの名前。</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName">
      <summary>このプロパティが拡張できるデータ型の名前を取得します。</summary>
      <returns>このプロパティが拡張できるデータ型の名前。</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.TypeId">
      <summary>この属性の一意の識別子を取得します。</summary>
      <returns>この属性の一意の識別子である <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.RecommendedAsConfigurableAttribute">
      <summary>プロパティをアプリケーションの設定値として使用できることを指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="recommendedAsConfigurable">この属性が関連付けられているプロパティをアプリケーションの設定値として使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> の既定値 (<see cref="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No" />) を指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.Equals(System.Object)">
      <summary>このインスタンスと指定したオブジェクトが等しいかどうかを示します。</summary>
      <param name="obj">比較対象のもう 1 つのオブジェクト。</param>
      <returns>
        <see langword="true" /> がこのインスタンスと等しい場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>現在の <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.IsDefaultAttribute">
      <summary>このインスタンス内の値がクラスの既定値であるかどうかを示します。</summary>
      <returns>このインスタンスがクラスの既定の属性である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No">
      <summary>プロパティをアプリケーションの設定値として使用できないことを指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="P:System.ComponentModel.RecommendedAsConfigurableAttribute.RecommendedAsConfigurable">
      <summary>この属性が関連付けられているプロパティをアプリケーション設定値として使用できるかどうかを示す値を取得します。</summary>
      <returns>この属性が関連付けられているプロパティをアプリケーションの設定値として使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Yes">
      <summary>プロパティをアプリケーションの設定値として使用できることを指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="T:System.ComponentModel.ReferenceConverter">
      <summary>オブジェクト参照のほかの表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.#ctor(System.Type)">
      <summary>
        <see cref="T:System.ComponentModel.ReferenceConverter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">この参照コンバーターに関連付ける型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、指定したコンテキストを使用して特定の型のオブジェクトを参照オブジェクトに変換できるかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns>このオブジェクトが変換を実行できる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したオブジェクトを参照型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">フォントを表すときに使用するカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <returns>変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定したコンテキストと引数を使用して、値オブジェクトを参照型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">フォントを表すときに使用するカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">オブジェクトの変換後の型。</param>
      <returns>変換後のオブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>参照データ型の標準値コレクションを取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>有効値の標準セットを保持している <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />。データ型が標準値セットをサポートしていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> から返された標準値のコレクションが、排他的リストかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> から返された <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> が有効値の排他的リストであるため、<see langword="true" />。 このメソッドが <see langword="false" /> を返すことはありません。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>リストから選択できる標準値セットをこのオブジェクトがサポートしているかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>オブジェクトがサポートしている標準値セットを見つけるために <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> を呼び出すことができるので、<see langword="true" />。 このメソッドが <see langword="false" /> を返すことはありません。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>特定の値を標準値コレクションに追加できるかどうかを示す値を返します。</summary>
      <param name="context">追加コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">チェックする値。</param>
      <returns>標準値コレクションに値を追加できる場合は <see langword="true" />。標準値コレクションに値を追加できない場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Object)">
      <summary>変更されたコンポーネントを使用して、<see cref="T:System.ComponentModel.RefreshEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="componentChanged">変更されたコンポーネント。</param>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Type)">
      <summary>変更されたコンポーネントの型を使用して、<see cref="T:System.ComponentModel.RefreshEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeChanged">変更された <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.ComponentChanged">
      <summary>プロパティ、イベント、またはエクステンダーが変更されたコンポーネントを取得します。</summary>
      <returns>プロパティ、イベント、またはエクステンダーが変更されたコンポーネント。同じ型のコンポーネントがすべて変更された場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.TypeChanged">
      <summary>プロパティまたはイベントが変更された <see cref="T:System.Type" /> を取得します。</summary>
      <returns>プロパティまたはイベントが変更された <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventHandler">
      <summary>デザイン時に <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> またはコンポーネントが変更された場合に発生する <see cref="T:System.Type" /> イベントを処理するメソッドを表します</summary>
      <param name="e">変更されたコンポーネントまたは <see cref="T:System.ComponentModel.RefreshEventArgs" /> を格納する <see cref="T:System.Type" />。</param>
    </member>
    <member name="T:System.ComponentModel.RunInstallerAttribute">
      <summary>アセンブリのインストール時に、Visual Studio の Custom Action Installer または Installutil.exe (インストーラー ツール) が起動されるかどうかを指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.RunInstallerAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="runInstaller">アセンブリのインストール中にインストーラーを起動する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Default">
      <summary>既定の可視性である <see cref="F:System.ComponentModel.RunInstallerAttribute.No" /> を指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.Equals(System.Object)">
      <summary>指定した <see cref="T:System.ComponentModel.RunInstallerAttribute" /> の値が、現在の <see cref="T:System.ComponentModel.RunInstallerAttribute" /> と等しいかどうかを判断します。</summary>
      <param name="obj">比較対象のオブジェクト。</param>
      <returns>指定した <see langword="true" /> が現在の <see cref="T:System.ComponentModel.RunInstallerAttribute" /> と等しい場合は <see cref="T:System.ComponentModel.RunInstallerAttribute" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.GetHashCode">
      <summary>現在の <see cref="T:System.ComponentModel.RunInstallerAttribute" /> のハッシュ コードを生成します。</summary>
      <returns>現在の <see cref="T:System.ComponentModel.RunInstallerAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.IsDefaultAttribute">
      <summary>この属性が既定値かどうかを判断します。</summary>
      <returns>属性がこの属性クラスの既定値の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.No">
      <summary>アセンブリのインストール時に、Visual Studio の Custom Action Installer または Installutil.exe (インストーラー ツール) を起動しないことを指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="P:System.ComponentModel.RunInstallerAttribute.RunInstaller">
      <summary>アセンブリのインストール中にインストーラーを起動するかどうかを示す値を取得します。</summary>
      <returns>アセンブリのインストール中にインストーラーを起動する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Yes">
      <summary>アセンブリのインストール時に、Visual Studio の Custom Action Installer または Installutil.exe (インストーラー ツール) を起動することを指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="T:System.ComponentModel.SByteConverter">
      <summary>8 ビット符号なし整数オブジェクトの文字列への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.SByteConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.SByteConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.SettingsBindableAttribute">
      <summary>コンポーネント プロパティをアプリケーション設定にバインドできる場合を指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.SettingsBindableAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="bindable">プロパティが設定のバインド先として適切であること指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.ComponentModel.SettingsBindableAttribute.Bindable">
      <summary>プロパティが設定のバインド先として適切であるかどうかを示す値を取得します。</summary>
      <returns>プロパティが設定のバインド先として適切である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.Equals(System.Object)">
      <summary>このインスタンスが、指定されたオブジェクトと等価であるかどうかを示す値を返します。</summary>
      <param name="obj">このインスタンスまたは null 参照と比較する <see cref="T:System.Object" /> (Visual Basic では <see langword="Nothing" />)。</param>
      <returns>
        <see langword="true" /> がこのインスタンスの型および値に等しい場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.No">
      <summary>プロパティが設定のバインド先として適切ではないことを指定します。</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.Yes">
      <summary>プロパティが設定のバインド先として適切であることを指定します。</summary>
    </member>
    <member name="T:System.ComponentModel.SingleConverter">
      <summary>単精度浮動小数点数オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.SingleConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.SingleConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.StringConverter">
      <summary>文字列オブジェクトのほかの表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.StringConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターで、指定したコンテキストを使用して、指定したソース型のオブジェクトを文字列に変換できるかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定した値オブジェクトを <see cref="T:System.String" /> オブジェクトに変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException">変換できませんでした。</exception>
    </member>
    <member name="T:System.ComponentModel.SyntaxCheck">
      <summary>コンピューター名とパスが特定の構文に準拠しているかどうかを検証するメソッドを提供します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)">
      <summary>コンピューター名の構文をチェックして、"\" が含まれていないことを確認します。</summary>
      <param name="value">チェックするコンピューター名が含まれている文字列。</param>
      <returns>
        <paramref name="value" /> が適切なコンピューター名の形式に一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckPath(System.String)">
      <summary>パスの構文をチェックして、"\\" で始まるかどうかを確認します。</summary>
      <param name="value">チェックするパスが含まれている文字列。</param>
      <returns>
        <paramref name="value" /> が適切なパスの形式に一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)">
      <summary>パスの構文をチェックして、"\" またはドライブ文字 "C:" で始まるかどうかを確認します。</summary>
      <param name="value">チェックするパスが含まれている文字列。</param>
      <returns>
        <paramref name="value" /> が適切なパスの形式に一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TimeSpanConverter">
      <summary>
        <see cref="T:System.TimeSpan" /> 型オブジェクトのほかの表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.TimeSpanConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、指定したコンテキストを使用して特定の型のオブジェクトを <see cref="T:System.TimeSpan" /> に変換できるかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、変換後の型として有効な値ではありません。</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したオブジェクトを <see cref="T:System.TimeSpan" /> に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">オプションの <see cref="T:System.Globalization.CultureInfo" />。 指定されなかった場合は、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は、変換後の型として有効な値ではありません。</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定したオブジェクトを別の型に変換します。</summary>
      <param name="context">フォーマッタ コンテキスト。</param>
      <param name="culture">
        <paramref name="value" /> の変換後のカルチャ。</param>
      <param name="value">変換対象のオブジェクト。</param>
      <param name="destinationType">オブジェクトの変換後の型。</param>
      <returns>変換後のオブジェクト。</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemAttribute">
      <summary>ツールボックス項目の属性を表します。</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> クラスの新しいインスタンスを初期化し、既定の初期値を使用するかどうかを指定します。</summary>
      <param name="defaultType">既定の型でツールボックス項目の属性を作成する場合は <see langword="true" />。この属性に既定のツールボックス項目のサポートを関連付けない場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.String)">
      <summary>指定した名前と型を使用して、<see cref="T:System.ComponentModel.ToolboxItemAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="toolboxItemTypeName">ツールボックス項目の型名と、その型を格納するアセンブリの名前。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Type)">
      <summary>指定したツールボックス項目の型を使用して、<see cref="T:System.ComponentModel.ToolboxItemAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="toolboxItemType">ツールボックス項目の型。</param>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> クラスの新しいインスタンスを初期化し、ツールボックス項目の型を既定の <see cref="T:System.Drawing.Design.ToolboxItem" /> に設定します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.Equals(System.Object)">
      <summary>このインスタンスが、指定されたオブジェクトと等価であるかどうかを示す値を返します。</summary>
      <param name="obj">このインスタンスまたは null 参照と比較する <see cref="T:System.Object" /> (Visual Basic では <see langword="Nothing" />)。</param>
      <returns>
        <see langword="true" /> がこのインスタンスの型および値に等しい場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute">
      <summary>属性の現在の値が既定値かどうかを示す値を取得します。</summary>
      <returns>属性の現在の値が既定値である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.None">
      <summary>
        <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> クラスの新しいインスタンスを初期化し、ツールボックス項目の型を <see langword="null" /> に設定します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemType">
      <summary>ツールボックス項目の型を取得または設定します。</summary>
      <returns>ツールボックス項目の型。</returns>
      <exception cref="T:System.ArgumentException">型が見つかりません。</exception>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemTypeName">
      <summary>現在の <see cref="T:System.Drawing.Design.ToolboxItem" /> の型名を取得または設定します。</summary>
      <returns>現在のツールボックス項目の完全限定型名。</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterAttribute">
      <summary>ツールボックスの項目のために使用するフィルター文字列およびフィルターの種類を指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String)">
      <summary>フィルター文字列を指定して、<see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="filterString">ツールボックス項目のフィルター文字列。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String,System.ComponentModel.ToolboxItemFilterType)">
      <summary>フィルター文字列とフィルターの種類を指定して、<see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="filterString">ツールボックス項目のフィルター文字列。</param>
      <param name="filterType">フィルターの種類を示す <see cref="T:System.ComponentModel.ToolboxItemFilterType" />。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Equals(System.Object)">
      <summary>このインスタンスが、指定されたオブジェクトと等価であるかどうかを示す値を返します。</summary>
      <param name="obj">このインスタンスまたは null 参照と比較する <see cref="T:System.Object" /> (Visual Basic では <see langword="Nothing" />)。</param>
      <returns>
        <see langword="true" /> がこのインスタンスの型および値に等しい場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterString">
      <summary>ツールボックス項目のフィルター文字列を取得します。</summary>
      <returns>ツールボックス項目のフィルター文字列。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterType">
      <summary>フィルターの種類を取得します。</summary>
      <returns>フィルターの種類を示す <see cref="T:System.ComponentModel.ToolboxItemFilterType" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Match(System.Object)">
      <summary>指定したオブジェクトが一致するフィルター文字列を持っているかどうかを示します。</summary>
      <param name="obj">一致するフィルター文字列のテストを行うオブジェクト。</param>
      <returns>指定したオブジェクトが一致するフィルター文字列を持っている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.TypeId">
      <summary>属性の型 ID を取得します。</summary>
      <returns>属性の型 ID。 同じフィルター文字列を持つすべての <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> オブジェクトは、同じ型 ID を返します。</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterType">
      <summary>
        <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> が使用するフィルターの種類を示すために使用される識別子を定義します。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Allow">
      <summary>ツールボックス項目のフィルター文字列は許容されるが必須ではないことを示します。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Custom">
      <summary>ツールボックス項目のフィルター文字列を使用するかどうかを判断するために、カスタム処理が必要であることを示します。 デザイナーがコードを介してツールボックス項目の受け入れるか拒否するかを示すために、通常はルート デザイナー クラス上で指定されます。 デザイナーは、<see cref="T:System.Drawing.Design.IToolboxUser" /> インターフェイスの <see cref="M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)" /> メソッドを実装する必要があります。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Prevent">
      <summary>ツールボックス項目のフィルター文字列が使用できないことを示します。 デザイナーとコンポーネント クラスの両方にフィルター文字列があり、その値が <c>ToolboxItemFilterType.Prevent</c> である場合、ツールボックス項目は使用できません。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Require">
      <summary>有効にするツールボックス項目のフィルター文字列が存在する必要があることを示します。  フィルターの種類が<c>必須</c>であるツールボックス項目を有効にする場合は、デザイナーとコンポーネント クラスのフィルター文字列が一致している必要があります。 さらに、デザイナクラスとコンポーネント クラスどちらもにおいても、有効にするツールボックス項目のフィルターの種類を<c>防止</c>にすることはできません。</summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary>値の型を他の型に変換し、標準値とサブプロパティにアクセスするための統一的な方法を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.TypeConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、指定したコンテキストを使用して、指定された型のオブジェクトをこのコンバーターの型に変換できるかどうかを返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary>コンバーターが特定の型のオブジェクトをコンバーターの型に変換できるかどうかを示す値を返します。</summary>
      <param name="sourceType">変換元の型を表す <see cref="T:System.Type" />。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが指定のコンテキストを使用して、オブジェクトを指定の型に変換できるかどうかを返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary>コンバーターがオブジェクトを指定した型に変換できるかどうかを示す値を返します。</summary>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したコンテキストとカルチャ情報を使用して、指定されたオブジェクトをこのコンバーターの型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">現在のカルチャとして使用する <see cref="T:System.Globalization.CultureInfo" /> 。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary>指定した値をコンバーターの型に変換します。</summary>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>インバリアント カルチャと指定したコンテキストを使用して、指定した文字列をコンバーターの型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="text">変換対象の <see cref="T:System.String" />。</param>
      <returns>変換後のテキストを表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
      <summary>インバリアント カルチャを使用して、指定した文字列をコンバーターの型に変換します。</summary>
      <param name="text">変換対象の <see cref="T:System.String" />。</param>
      <returns>変換後のテキストを表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary>指定したコンテキストとカルチャ情報を使用して、指定したテキストをオブジェクトに変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。 <see langword="null" /> を渡すと、現在のカルチャが使用されます。</param>
      <param name="text">変換対象の <see cref="T:System.String" />。</param>
      <returns>変換後のテキストを表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>指定したコンテキストを使用して、指定したテキストをオブジェクトに変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="text">変換対象の <see cref="T:System.String" />。</param>
      <returns>変換後のテキストを表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary>指定したテキストをオブジェクトに変換します。</summary>
      <param name="text">変換対象のオブジェクトのテキスト形式。</param>
      <returns>変換後のテキストを表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException">文字列を適切なオブジェクトに変換できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定したコンテキストとカルチャ情報を使用して、指定した値オブジェクトを、指定した型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。 <see langword="null" /> を渡すと、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">
        <paramref name="value" /> パラメーターの変換後の <see cref="T:System.Type" />。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary>引数を使用して、指定した値オブジェクトを、指定した型に変換します。</summary>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">
        <paramref name="value" /> パラメーターの変換後の <see cref="T:System.Type" />。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>指定したコンテキストを使用して、指定した値をインバリアント カルチャを使用した文字列形式に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <returns>変換後の値を表す <see cref="T:System.String" />。</returns>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
      <summary>指定した値を、インバリアント カルチャを使用した文字列形式に変換します。</summary>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <returns>変換後の値を表す <see cref="T:System.String" />。</returns>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したコンテキストとカルチャ情報を使用して、指定した値を文字列形式に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。 <see langword="null" /> を渡すと、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>指定したコンテキストを使用して、指定した値を文字列形式に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary>指定した値を文字列形式に変換します。</summary>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
      <summary>
        <see cref="T:System.Object" /> の一連のプロパティ値を指定して、そのオブジェクトを再作成します。</summary>
      <param name="propertyValues">新しいプロパティ値のディクショナリを表す <see cref="T:System.Collections.IDictionary" />。</param>
      <returns>指定した <see cref="T:System.Object" /> を表す <see cref="T:System.Collections.IDictionary" />。オブジェクトを作成できない場合は <see langword="null" />。 このメソッドは常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>この <see cref="T:System.ComponentModel.TypeConverter" /> を関連付ける型のインスタンスを作成します。指定されたコンテキストと、与えられているオブジェクトのプロパティ値のセットを使用します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="propertyValues">新しいプロパティ値の <see cref="T:System.Collections.IDictionary" />。</param>
      <returns>指定した <see cref="T:System.Object" /> を表す <see cref="T:System.Collections.IDictionary" />。オブジェクトを作成できない場合は <see langword="null" />。 このメソッドは常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
      <summary>変換を実行できなかった場合にスローされる例外を返します。</summary>
      <param name="value">変換対象の <see cref="T:System.Object" />。オブジェクトを使用できない場合は、<see langword="null" />。</param>
      <returns>変換を実行できなかった場合にスローされる例外を表す <see cref="T:System.Exception" />。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドによって自動的にスローされます。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
      <summary>変換を実行できなかった場合にスローされる例外を返します。</summary>
      <param name="value">変換対象の <see cref="T:System.Object" />。オブジェクトを使用できない場合は、<see langword="null" />。</param>
      <param name="destinationType">変換しようとした型を表す <see cref="T:System.Type" />。</param>
      <returns>変換を実行できなかった場合にスローされる例外を表す <see cref="T:System.Exception" />。</returns>
      <exception cref="T:System.NotSupportedException">このメソッドによって自動的にスローされます。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
      <summary>このオブジェクトの値を変更するときに <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> メソッドを呼び出して、新しい値を作成する必要があるかどうかを返します。</summary>
      <returns>このオブジェクトのプロパティを変更するときに <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> を呼び出して新しい値を作成する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>このオブジェクトの値を変更するときに、指定したコンテキストを使用して <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> を呼び出して、新しい値を作成する必要があるかどうかを返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>このオブジェクトのプロパティを変更するときに <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> を呼び出して新しい値を作成する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>指定したコンテキストを使用して、value パラメーターで指定された配列型のプロパティのコレクションを返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">プロパティを取得する対象となる配列の型を指定する <see cref="T:System.Object" />。</param>
      <returns>指定されたデータ型に対して公開されているプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。コレクションにプロパティが格納されていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>指定したコンテキストと属性を使用して、value パラメーターで指定された配列型のプロパティのコレクションを返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">プロパティを取得する対象となる配列の型を指定する <see cref="T:System.Object" /> 。</param>
      <param name="attributes">フィルターとして使用される、<see cref="T:System.Attribute" /> 型の配列。</param>
      <returns>指定されたデータ型に対して公開されているプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。コレクションにプロパティが格納されていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
      <summary>value パラメーターに指定された配列型のプロパティのコレクションを返します。</summary>
      <param name="value">プロパティを取得する対象となる配列の型を指定する <see cref="T:System.Object" />。</param>
      <returns>指定されたデータ型に対して公開されているプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。コレクションにプロパティが格納されていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
      <summary>オブジェクトがプロパティをサポートしているかどうかを示す値を返します。</summary>
      <returns>このオブジェクトのプロパティを見つけるために <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> を呼び出す必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>指定したコンテキストを使用して、オブジェクトがプロパティをサポートしているかどうかを示す値を返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>このオブジェクトのプロパティを見つけるために <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> を呼び出す必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues">
      <summary>型コンバーターがデザインされた対象であるデータ型の既定のコンテキストから、標準値のコレクションを返します。</summary>
      <returns>有効値の標準セットを格納している <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />。データ型が標準値セットをサポートしていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>書式指定コンテキストが指定されている場合、型コンバーターがデザインされた対象のデータ型の標準値のコレクションを返します。</summary>
      <param name="context">書式コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。これを使用すると、このコンバーターが呼び出される環境についての追加情報を抽出できます。 このパラメーターまたはこのパラメーターのプロパティには、<see langword="null" /> を指定できます。</param>
      <returns>有効値の標準セットを保持している <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />。データ型が標準値セットをサポートしていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
      <summary>
        <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> から返された標準値のコレクションが、排他的なリストかどうかを示す値を返します。</summary>
      <returns>
        <see langword="true" /> から返された <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> が、有効値の排他的なリストの場合は <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />。他の値も有効である場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>指定したコンテキストを使用して、<see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> から返された標準値のコレクションが有効値の排他的なリストかどうかを示す値を返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>
        <see langword="true" /> から返された <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> が、有効値の排他的なリストの場合は <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />。他の値も有効である場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
      <summary>リストから選択できる標準値セットをオブジェクトがサポートするかどうかを示す値を返します。</summary>
      <returns>オブジェクトがサポートしている標準値セットを見つけるために <see langword="true" /> を呼び出す必要がある場合は <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>指定したコンテキストを使用して、リストから選択できる標準値セットをオブジェクトがサポートするかどうかを示す値を返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>オブジェクトがサポートしている標準値セットを見つけるために <see langword="true" /> を呼び出す必要がある場合は <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>指定した値オブジェクトが、型および指定したコンテキストに対して有効かどうかを示す値を返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">有効かどうかを確認する対象の <see cref="T:System.Object" />。</param>
      <returns>指定した値がオブジェクトに対して有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
      <summary>指定した値オブジェクトが型に対して有効かどうかを示す値を返します。</summary>
      <param name="value">有効かどうかを確認する対象のオブジェクト。</param>
      <returns>指定した値がオブジェクトに対して有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor">
      <summary>プロパティを持たないオブジェクトにプロパティを提供する <see langword="abstract" /> クラスを表します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type)">
      <summary>
        <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="componentType">プロパティ記述子が関連付けられているコンポーネントの型を表す <see cref="T:System.Type" />。</param>
      <param name="name">プロパティの名前。</param>
      <param name="propertyType">プロパティのデータ型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>
        <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="componentType">プロパティ記述子が関連付けられているコンポーネントの型を表す <see cref="T:System.Type" />。</param>
      <param name="name">プロパティの名前。</param>
      <param name="propertyType">プロパティのデータ型を表す <see cref="T:System.Type" />。</param>
      <param name="attributes">プロパティに関連付ける属性を格納している <see cref="T:System.Attribute" /> 配列。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.CanResetValue(System.Object)">
      <summary>コンポーネントをリセットするとコンポーネントの値が変更されるかどうかを示す値を返します。</summary>
      <param name="component">リセット機能について調べる対象のコンポーネント。</param>
      <returns>コンポーネントをリセットするとコンポーネントの値が変更される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ComponentType">
      <summary>プロパティ記述子が関連付けられているコンポーネントの型を取得します。</summary>
      <returns>プロパティが関連付けられているコンポーネントの型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.IsReadOnly">
      <summary>プロパティが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>プロパティが読み取り専用の場合は <see langword="true" />。プロパティが読み書き可能の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.PropertyType">
      <summary>プロパティの型を取得します。</summary>
      <returns>プロパティの型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ResetValue(System.Object)">
      <summary>コンポーネントの特定のプロパティの値をリセットします。</summary>
      <param name="component">リセットする対象のプロパティ値を持つコンポーネント。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>プロパティの値を永続化できるかどうかを示す値を返します。</summary>
      <param name="component">永続性について調べる対象のプロパティを持つコンポーネント。</param>
      <returns>プロパティの値を永続化できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
      <summary>プロパティのコレクションを並べ替えます。</summary>
      <param name="props">並べ替える対象のプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</param>
      <param name="names">コレクション内でプロパティを並べ替える順序で並べた名前の配列。</param>
      <returns>並べ替えられたプロパティを格納した <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.StandardValuesCollection">
      <summary>値のコレクションを表します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.#ctor(System.Collections.ICollection)">
      <summary>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="values">コレクションに格納するオブジェクトを表す <see cref="T:System.Collections.ICollection" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.CopyTo(System.Array,System.Int32)">
      <summary>コレクションの内容を配列にコピーします。</summary>
      <param name="array">コピー先の配列を表す <see cref="T:System.Array" />。</param>
      <param name="index">コピーの開始位置を示すインデックス。</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Count">
      <summary>コレクション内のオブジェクトの数を取得します。</summary>
      <returns>コレクション内のオブジェクトの数。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.GetEnumerator">
      <summary>コレクションの列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 型の列挙子。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Item(System.Int32)">
      <summary>指定したインデックス番号にあるオブジェクトを取得します。</summary>
      <param name="index">コレクションから取得する <see cref="T:System.Object" /> の 0 から始まるインデックス。</param>
      <returns>指定したインデックスを持つ <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#IsSynchronized">
      <summary>このメンバーの説明については、<see cref="P:System.Collections.ICollection.IsSynchronized" /> のトピックを参照してください。</summary>
      <returns>常に <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#SyncRoot">
      <summary>このメンバーの詳細については、「<see cref="P:System.Collections.ICollection.SyncRoot" />」をご覧ください。</summary>
      <returns>常に <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>この属性が関連付けられているオブジェクトのコンバーターとして使用する型を指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>既定の型コンバーターである空の文字列 ("") を使用して、<see cref="T:System.ComponentModel.TypeConverterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>この属性が関連付けられているオブジェクトのデータ コンバーターとして指定した型名を使用して、<see cref="T:System.ComponentModel.TypeConverterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeName">この属性が関連付けられているオブジェクトのデータ変換で使用するクラスの完全修飾名。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>この属性が関連付けられているオブジェクトのデータ コンバーターとして型名を指定して、<see cref="T:System.ComponentModel.TypeConverterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">この属性が関連付けられているオブジェクトのデータ変換で使用するコンバーター クラスの型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>この属性が関連付けられているオブジェクトのコンバーターとして使用する <see cref="T:System.Type" /> の完全修飾型名を取得します。</summary>
      <returns>この属性が関連付けられているオブジェクトのコンバーターとして使用する <see cref="T:System.Type" /> の完全修飾型名。コンバーターとして使用する型がない場合は空の文字列 ("")。 既定値は、空の文字列 ("") です。</returns>
    </member>
    <member name="F:System.ComponentModel.TypeConverterAttribute.Default">
      <summary>この属性が関連付けられているオブジェクトのコンバーターとして使用する型を指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)">
      <summary>指定したオブジェクトの値が現在の <see cref="T:System.ComponentModel.TypeConverterAttribute" /> と等しいかどうかを示す値を返します。</summary>
      <param name="obj">値が等しいかどうかを確認するオブジェクト。</param>
      <returns>指定したオブジェクトの値が現在の <see cref="T:System.ComponentModel.TypeConverterAttribute" /> の値と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>現在の <see cref="T:System.ComponentModel.TypeConverterAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProvider">
      <summary>
        <see cref="T:System.ComponentModel.TypeDescriptor" /> に追加メタデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
      <summary>親の型説明のプロバイダーを使用して、<see cref="T:System.ComponentModel.TypeDescriptionProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="parent">親の型説明のプロバイダー。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary>別のデータ型の代わりに使用できるオブジェクトを作成します。</summary>
      <param name="provider">省略可能なサービス プロバイダー。</param>
      <param name="objectType">作成するオブジェクトの型。 このパラメーターは、<see langword="null" /> にはできません。</param>
      <param name="argTypes">オブジェクトのコンストラクターに渡されるパラメーター型を表す型の配列 (省略可能)。 この配列は、<see langword="null" /> にすることも、長さ 0 にすることもできます。</param>
      <param name="args">オブジェクトのコンストラクターに渡すパラメーターの値の省略可能な配列。</param>
      <returns>代替の <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
      <summary>キーと値のペアの <see cref="T:System.Collections.IDictionary" /> としてアクセスされる、オブジェクトごとのキャッシュを取得します。</summary>
      <param name="instance">キャッシュの取得対象となるオブジェクト。</param>
      <returns>提供されるオブジェクトがキャッシュをサポートしている場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
      <summary>指定されたオブジェクトの拡張されたカスタムの型記述子を取得します。</summary>
      <param name="instance">拡張された型記述子の取得対象となるオブジェクト。</param>
      <returns>オブジェクトの拡張されたメタデータを提供できる <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)">
      <summary>指定したオブジェクトの拡張プロバイダーを取得します。</summary>
      <param name="instance">拡張プロバイダーを取得する対象のオブジェクト。</param>
      <returns>
        <paramref name="instance" /> の拡張プロバイダーの配列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
      <summary>指定したコンポーネントの名前を取得します。コンポーネントに名前がない場合は <see langword="null" /> を取得します。</summary>
      <param name="component">指定したコンポーネント。</param>
      <returns>指定したコンポーネントの名前。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
      <summary>指定されたオブジェクトに対して通常のリフレクションを実行します。</summary>
      <param name="instance">型のインスタンス (<see langword="null" /> にはできません)。</param>
      <returns>この <paramref name="instance" /> のリフレクションの型です。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
      <summary>型に対して通常のリフレクションを実行します。</summary>
      <param name="objectType">
        <see cref="T:System.Reflection.IReflect" /> の取得対象となるオブジェクトの型。</param>
      <returns>この <paramref name="objectType" /> のリフレクションの型です。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectType" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
      <summary>指定された型の指定されたオブジェクトに対して通常のリフレクションを実行します。</summary>
      <param name="objectType">
        <see cref="T:System.Reflection.IReflect" /> の取得対象となるオブジェクトの型。</param>
      <param name="instance">型のインスタンス。 <see langword="null" /> の可能性があります。</param>
      <returns>この <paramref name="objectType" /> のリフレクションの型です。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
      <summary>リフレクション型をランタイム型に変換します。</summary>
      <param name="reflectionType">等価のランタイム型に変換する型。</param>
      <returns>
        <paramref name="reflectionType" /> に等価のランタイム型を表す <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reflectionType" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
      <summary>指定されたオブジェクトのカスタムの型記述子を取得します。</summary>
      <param name="instance">型のインスタンス。 <see cref="T:System.ComponentModel.TypeDescriptor" /> にインスタンスが渡されなかった場合、<see langword="null" /> でもかまいません。</param>
      <returns>型のメタデータを提供できる <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)">
      <summary>指定された型のカスタムの型記述子を取得します。</summary>
      <param name="objectType">型記述子の取得対象となるオブジェクトの型。</param>
      <returns>型のメタデータを提供できる <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary>指定された型およびオブジェクトのカスタムの型記述子を取得します。</summary>
      <param name="objectType">型記述子の取得対象となるオブジェクトの型。</param>
      <param name="instance">型のインスタンス。 <see cref="T:System.ComponentModel.TypeDescriptor" /> にインスタンスが渡されなかった場合、<see langword="null" /> でもかまいません。</param>
      <returns>型のメタデータを提供できる <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)">
      <summary>指定した型が型説明および型説明のプロバイダーのチェーンと互換性があるかどうかを示す値を取得します。</summary>
      <param name="type">互換性をテストする型。</param>
      <returns>
        <paramref name="type" /> が型説明および型説明のプロバイダーのチェーンと互換性がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> は <see langword="null" />です。</exception>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProviderAttribute">
      <summary>クラスのカスタムの型説明のプロバイダーを指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.String)">
      <summary>型名を指定して、<see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeName">型の修飾名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.Type)">
      <summary>型を指定して、<see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">属性に格納する型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptionProviderAttribute.TypeName">
      <summary>型説明のプロバイダーの型名を取得します。</summary>
      <returns>
        <see cref="T:System.String" /> の修飾型名を格納する <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptor">
      <summary>属性、プロパティ、イベントなど、コンポーネントの特性に関する情報を提供します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])">
      <summary>対象コンポーネントのインスタンスにクラス レベルの属性を追加します。</summary>
      <param name="instance">対象コンポーネントのインスタンス。</param>
      <param name="attributes">コンポーネントのクラスに追加する <see cref="T:System.Attribute" /> オブジェクトの配列。</param>
      <returns>指定した属性を追加する際に使用された、新しく作成された <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
      <exception cref="T:System.ArgumentNullException">一方または両方のパラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])">
      <summary>対象のコンポーネントの型にクラス レベルの属性を追加します。</summary>
      <param name="type">対象のコンポーネントの <see cref="T:System.Type" />。</param>
      <param name="attributes">コンポーネントのクラスに追加する <see cref="T:System.Attribute" /> オブジェクトの配列。</param>
      <returns>指定した属性を追加する際に使用された、新しく作成された <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
      <exception cref="T:System.ArgumentNullException">一方または両方のパラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)">
      <summary>指定されたエディターの基本型のエディター テーブルを追加します。</summary>
      <param name="editorBaseType">エディター テーブルを追加する対象のエディター基本型。 この型のテーブルが既に存在する場合、このメソッドは何も実行しません。</param>
      <param name="table">追加する <see cref="T:System.Collections.Hashtable" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>コンポーネントの単一インスタンスの型説明の提供元を追加します。</summary>
      <param name="provider">追加する <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance">対象コンポーネントのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">一方または両方のパラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>コンポーネント クラスの型説明のプロバイダーを追加します。</summary>
      <param name="provider">追加する <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type">対象のコンポーネントの <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">一方または両方のパラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>コンポーネントの単一インスタンスの型説明の提供元を追加します。</summary>
      <param name="provider">追加する <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance">対象コンポーネントのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">一方または両方のパラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>コンポーネント クラスの型説明のプロバイダーを追加します。</summary>
      <param name="provider">追加する <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type">対象のコンポーネントの <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">一方または両方のパラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler">
      <summary>ターゲット コンポーネントの Component Object Model (COM) 型情報のプロバイダーを取得または設定します。</summary>
      <returns>COM 型情報プロバイダーを表す <see cref="T:System.ComponentModel.IComNativeDescriptorHandler" /> インスタンス。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComObjectType">
      <summary>対象となるコンポーネントによって表されるコンポーネント オブジェクト モデル (COM) の型を取得します。</summary>
      <returns>このコンポーネントによって表される COM オブジェクトの <see cref="T:System.Type" />。COM 以外のオブジェクトの場合 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)">
      <summary>2 つのオブジェクト間にプライマリとセカンダリの関連付けを作成します。</summary>
      <param name="primary">プライマリ <see cref="T:System.Object" />。</param>
      <param name="secondary">セカンダリ <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">一方または両方のパラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="primary" /> と <paramref name="secondary" /> が等価です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)">
      <summary>指定したコンポーネントに関連するデザイナーおよび指定した型のデザイナーのインスタンスを作成します。</summary>
      <param name="component">デザイナーに関連付けるコンポーネントを指定する <see cref="T:System.ComponentModel.IComponent" />。</param>
      <param name="designerBaseType">作成するデザイナーの型を表す <see cref="T:System.Type" />。</param>
      <returns>コンポーネントのデザイナーのインスタンスである <see cref="T:System.ComponentModel.Design.IDesigner" />。デザイナーが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])">
      <summary>既存の <see cref="T:System.ComponentModel.EventDescriptor" /> が渡された場合、既存のイベント記述子と同じである新しいイベント記述子を作成します。</summary>
      <param name="componentType">新しいイベントを作成するコンポーネントの型。</param>
      <param name="oldEventDescriptor">既存のイベント情報。</param>
      <param name="attributes">新しい属性。</param>
      <returns>指定されたメタデータ属性と既存のメタデータ属性をマージした新しい <see cref="T:System.ComponentModel.EventDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>型で指定したイベントから記述子情報を動的に生成することによって既存のイベント記述子と同じになる新しいイベント記述子を作成します。</summary>
      <param name="componentType">イベントが関連付けられているコンポーネントの型。</param>
      <param name="name">イベントの名前です。</param>
      <param name="type">イベントを処理するデリゲートの型。</param>
      <param name="attributes">イベントの属性。</param>
      <returns>型にバインドされている <see cref="T:System.ComponentModel.EventDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary>別のデータ型の代わりに使用できるオブジェクトを作成します。</summary>
      <param name="provider">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> サービスを提供するサービス プロバイダー。 このパラメーターは、<see langword="null" /> に設定できます。</param>
      <param name="objectType">作成するオブジェクトの <see cref="T:System.Type" />。</param>
      <param name="argTypes">オブジェクトのコンストラクターに渡されるパラメーター型の配列 (省略可能)。 このパラメーターは、<see langword="null" /> にすることも長さ 0 の配列にすることもできます。</param>
      <param name="args">オブジェクトのコンストラクターに渡すパラメーターの値の省略可能な配列。 <see langword="null" /> でない場合、要素の数は <paramref name="argTypes" /> と同じでなければなりません。</param>
      <returns>関連付けられた <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> が検出される場合は代替のデータ型のインスタンス。それ以外の場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectType" /> は <see langword="null" /> です。または、<paramref name="args" /> が <see langword="null" /> ではないときは、<paramref name="argTypes" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argTypes" /> と <paramref name="args" /> の要素数が異なります。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary>指定した既存の <see cref="T:System.ComponentModel.PropertyDescriptor" /> と属性配列を使用して、既存のプロパティ記述子から新しいプロパティ記述子を作成します。</summary>
      <param name="componentType">プロパティをメンバーとして持つコンポーネントの <see cref="T:System.Type" />。</param>
      <param name="oldPropertyDescriptor">既存のプロパティ記述子。</param>
      <param name="attributes">プロパティの新しい属性。</param>
      <returns>指定したメタデータ属性を既存のメタデータ属性にマージした、新しい <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>指定したプロパティ名、型、および属性配列を使用して、プロパティ記述子を作成し、型に動的に関連付けます。</summary>
      <param name="componentType">プロパティをメンバーとして持つコンポーネントの <see cref="T:System.Type" />。</param>
      <param name="name">プロパティの名前。</param>
      <param name="type">プロパティの <see cref="T:System.Type" />。</param>
      <param name="attributes">プロパティの新しい属性。</param>
      <returns>指定した型に関連付けられ、指定したメタデータ属性が既存のメタデータ属性にマージされている <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)">
      <summary>指定したプライマリ オブジェクトに関連付けられた型のインスタンスを返します。</summary>
      <param name="type">対象のコンポーネントの <see cref="T:System.Type" />。</param>
      <param name="primary">関連付けのプライマリ オブジェクト。</param>
      <returns>関連付けが存在する場合は、プライマリ オブジェクトに関連付けられているセカンダリの型のインスタンス。指定した関連付けが存在しない場合は <paramref name="primary" />。</returns>
      <exception cref="T:System.ArgumentNullException">一方または両方のパラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)">
      <summary>指定したコンポーネントの属性のコレクションを返します。</summary>
      <param name="component">属性を取得する対象のコンポーネント。</param>
      <returns>コンポーネントの属性を格納している <see cref="T:System.ComponentModel.AttributeCollection" />。 <paramref name="component" /> が <see langword="null" /> の場合、このメソッドは空のコレクションを返します。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)">
      <summary>指定したコンポーネントの属性のコレクションと、カスタムの型記述子が作成されていることを示すブール値を返します。</summary>
      <param name="component">属性を取得する対象のコンポーネント。</param>
      <param name="noCustomTypeDesc">
        <paramref name="component" /> が <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 型の場合に、カスタムの型記述子から属性のベースライン セットを使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>コンポーネントの属性を格納している <see cref="T:System.ComponentModel.AttributeCollection" />。 コンポーネントが <see langword="null" /> の場合、このメソッドは空のコレクションを返します。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)">
      <summary>指定したコンポーネントの型の属性のコレクションを返します。</summary>
      <param name="componentType">対象のコンポーネントの <see cref="T:System.Type" />。</param>
      <returns>コンポーネントの型の属性を格納している <see cref="T:System.ComponentModel.AttributeCollection" />。 コンポーネントが <see langword="null" /> の場合、このメソッドは空のコレクションを返します。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object)">
      <summary>既定の型記述子を使用して、指定したコンポーネントのクラスの名前を返します。</summary>
      <param name="component">クラス名を取得する対象の <see cref="T:System.Object" />。</param>
      <returns>指定したコンポーネントのクラスの名前を格納している <see cref="T:System.String" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)">
      <summary>カスタムの型記述子を使用して、指定したコンポーネントのクラスの名前を返します。</summary>
      <param name="component">クラス名を取得する対象の <see cref="T:System.Object" />。</param>
      <param name="noCustomTypeDesc">カスタムの型の記述情報を考慮する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>指定したコンポーネントのクラスの名前を格納している <see cref="T:System.String" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> は、プロセス間のリモート オブジェクトです。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Type)">
      <summary>指定した型のクラスの名前を返します。</summary>
      <param name="componentType">対象のコンポーネントの <see cref="T:System.Type" />。</param>
      <returns>指定したコンポーネントの型のクラス名を格納している <see cref="T:System.String" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentType" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)">
      <summary>既定の型記述子を使用して、指定したコンポーネントの名前を返します。</summary>
      <param name="component">クラス名を取得する対象の <see cref="T:System.Object" />。</param>
      <returns>指定したコンポーネントの名前を格納している <see cref="T:System.String" />。コンポーネント名が存在しない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> は、プロセス間のリモート オブジェクトです。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)">
      <summary>カスタムの型記述子を使用して、指定したコンポーネントの名前を返します。</summary>
      <param name="component">クラス名を取得する対象の <see cref="T:System.Object" />。</param>
      <param name="noCustomTypeDesc">カスタムの型の記述情報を考慮する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>指定したコンポーネントのクラスの名前。コンポーネント名が存在しない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> は、プロセス間のリモート オブジェクトです。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)">
      <summary>指定したコンポーネントの型の型コンバーターを返します。</summary>
      <param name="component">コンバーターを取得する対象のコンポーネント。</param>
      <returns>指定したコンポーネントの <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> は、プロセス間のリモート オブジェクトです。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)">
      <summary>カスタムの型記述子を使用して、指定したコンポーネントの型の型コンバーターを返します。</summary>
      <param name="component">コンバーターを取得する対象のコンポーネント。</param>
      <param name="noCustomTypeDesc">カスタムの型の記述情報を考慮する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>指定したコンポーネントの <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> は、プロセス間のリモート オブジェクトです。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)">
      <summary>指定した型の型コンバーターを返します。</summary>
      <param name="type">対象のコンポーネントの <see cref="T:System.Type" />。</param>
      <returns>指定した型の <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)">
      <summary>指定したコンポーネントの既定のイベントを返します。</summary>
      <param name="component">イベントを取得する対象のコンポーネント。</param>
      <returns>既定のイベントを保持している <see cref="T:System.ComponentModel.EventDescriptor" />。イベントが存在しない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> は、プロセス間のリモート オブジェクトです。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)">
      <summary>カスタムの型記述子を使用して、コンポーネントの既定のイベントを返します。</summary>
      <param name="component">イベントを取得する対象のコンポーネント。</param>
      <param name="noCustomTypeDesc">カスタムの型の記述情報を考慮する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>既定のイベントを保持している <see cref="T:System.ComponentModel.EventDescriptor" />。イベントが存在しない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> は、プロセス間のリモート オブジェクトです。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)">
      <summary>指定したコンポーネントの型の既定のイベントを返します。</summary>
      <param name="componentType">対象のコンポーネントの <see cref="T:System.Type" />。</param>
      <returns>既定のイベントを保持している <see cref="T:System.ComponentModel.EventDescriptor" />。イベントが存在しない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentType" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)">
      <summary>指定したコンポーネントの既定のプロパティを返します。</summary>
      <param name="component">既定のプロパティを取得するコンポーネント。</param>
      <returns>既定のプロパティを保持している <see cref="T:System.ComponentModel.PropertyDescriptor" />。プロパティが存在しない場合は <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> は、プロセス間のリモート オブジェクトです。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)">
      <summary>カスタムの型記述子を使用して、指定したコンポーネントの既定のプロパティを返します。</summary>
      <param name="component">既定のプロパティを取得するコンポーネント。</param>
      <param name="noCustomTypeDesc">カスタムの型の記述情報を考慮する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>既定のプロパティを保持している <see cref="T:System.ComponentModel.PropertyDescriptor" />。プロパティが存在しない場合は <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> は、プロセス間のリモート オブジェクトです。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)">
      <summary>指定したコンポーネントの型の既定のプロパティを返します。</summary>
      <param name="componentType">プロパティを取得する対象のクラスを表す <see cref="T:System.Type" />。</param>
      <returns>既定のプロパティを保持している <see cref="T:System.ComponentModel.PropertyDescriptor" />。プロパティが存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)">
      <summary>指定したコンポーネントで使用される、指定した基本型のエディターを取得します。</summary>
      <param name="component">取得するエディターの対象のコンポーネント。</param>
      <param name="editorBaseType">検索するエディターの基本型を表す <see cref="T:System.Type" />。</param>
      <returns>指定したエディターの型にキャストできるエディターのインスタンス。要求された型のエディターが見つからない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> または <paramref name="editorBaseType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> は、プロセス間のリモート オブジェクトです。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)">
      <summary>指定したコンポーネントで使用され、カスタムの型記述子が関連付けられている、指定した基本型のエディターを返します。</summary>
      <param name="component">取得するエディターの対象のコンポーネント。</param>
      <param name="editorBaseType">検索するエディターの基本型を表す <see cref="T:System.Type" />。</param>
      <param name="noCustomTypeDesc">カスタムの型の記述情報を考慮する必要があるかどうかを示すフラグ。</param>
      <returns>指定したエディターの型にキャストできるエディターのインスタンス。要求された型のエディターが見つからない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> または <paramref name="editorBaseType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> は、プロセス間のリモート オブジェクトです。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)">
      <summary>指定した型で使用される、指定した基本型のエディターを返します。</summary>
      <param name="type">対象のコンポーネントの <see cref="T:System.Type" />。</param>
      <param name="editorBaseType">検索しようとしているエディターの基本型を表す <see cref="T:System.Type" />。</param>
      <returns>指定した基本型にキャストできるエディター オブジェクトのインスタンス。要求された型のエディターが見つからない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> または <paramref name="editorBaseType" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object)">
      <summary>指定したコンポーネントのイベントのコレクションを返します。</summary>
      <param name="component">イベントを取得する対象のコンポーネント。</param>
      <returns>指定したコンポーネントのイベントを格納している <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> は、プロセス間のリモート オブジェクトです。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])">
      <summary>指定した属性配列をフィルターとして使用して、指定したコンポーネントのイベントのコレクションを返します。</summary>
      <param name="component">イベントを取得する対象のコンポーネント。</param>
      <param name="attributes">フィルターとして使用できる、<see cref="T:System.Attribute" /> 型の配列。</param>
      <returns>指定したコンポーネントのイベントのうち、指定した属性に一致するイベントを格納している <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> は、プロセス間のリモート オブジェクトです。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)">
      <summary>指定した属性配列をフィルターとして使用し、カスタムの型記述子を使用して、指定したコンポーネントのイベントのコレクションを返します。</summary>
      <param name="component">イベントを取得する対象のコンポーネント。</param>
      <param name="attributes">フィルターとして使用される、<see cref="T:System.Attribute" /> 型の配列。</param>
      <param name="noCustomTypeDesc">カスタムの型の記述情報を考慮する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>指定したコンポーネントのイベントのうち、指定した属性に一致するイベントを格納している <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> は、プロセス間のリモート オブジェクトです。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)">
      <summary>カスタムの型記述子を使用して、指定したコンポーネントのイベントのコレクションを返します。</summary>
      <param name="component">イベントを取得する対象のコンポーネント。</param>
      <param name="noCustomTypeDesc">カスタムの型の記述情報を考慮する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>指定したコンポーネントのイベントを格納している <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> は、プロセス間のリモート オブジェクトです。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type)">
      <summary>指定したコンポーネントの型のイベントのコレクションを返します。</summary>
      <param name="componentType">対象のコンポーネントの <see cref="T:System.Type" />。</param>
      <returns>指定したコンポーネントのイベントを格納している <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])">
      <summary>指定した属性配列をフィルターとして使用して、指定したコンポーネントの型のイベントのコレクションを返します。</summary>
      <param name="componentType">対象のコンポーネントの <see cref="T:System.Type" />。</param>
      <param name="attributes">フィルターとして使用できる、<see cref="T:System.Attribute" /> 型の配列。</param>
      <returns>指定したコンポーネントのイベントのうち、指定した属性に一致するイベントを格納している <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)">
      <summary>コンポーネントの完全修飾名を返します。</summary>
      <param name="component">名前の検索対象となる <see cref="T:System.ComponentModel.Component" />。</param>
      <returns>指定したコンポーネントの完全修飾名。コンポーネントに名前がない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)">
      <summary>指定したコンポーネントのプロパティのコレクションを返します。</summary>
      <param name="component">プロパティを取得する対象のコンポーネント。</param>
      <returns>指定したコンポーネントのプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> は、プロセス間のリモート オブジェクトです。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])">
      <summary>指定した属性配列をフィルターとして使用して、指定したコンポーネントのプロパティのコレクションを返します。</summary>
      <param name="component">プロパティを取得する対象のコンポーネント。</param>
      <param name="attributes">フィルターとして使用される、<see cref="T:System.Attribute" /> 型の配列。</param>
      <returns>指定したコンポーネントのプロパティのうち、指定した属性に一致するプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> は、プロセス間のリモート オブジェクトです。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)">
      <summary>指定した属性配列をフィルターとして使用し、カスタムの型記述子を使用して、指定したコンポーネントのプロパティのコレクションを返します。</summary>
      <param name="component">プロパティを取得する対象のコンポーネント。</param>
      <param name="attributes">フィルターとして使用する型 <see cref="T:System.Attribute" /> の配列。</param>
      <param name="noCustomTypeDesc">カスタムの型の記述情報を考慮する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>指定したコンポーネントのプロパティのうち、指定した属性に一致するイベントを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> は、プロセス間のリモート オブジェクトです。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)">
      <summary>既定の型記述子を使用して、指定したコンポーネントのプロパティのコレクションを返します。</summary>
      <param name="component">プロパティを取得する対象のコンポーネント。</param>
      <param name="noCustomTypeDesc">カスタムの型の説明情報を考慮しない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>指定したコンポーネントのプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> は、プロセス間のリモート オブジェクトです。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type)">
      <summary>指定したコンポーネントの型のプロパティのコレクションを返します。</summary>
      <param name="componentType">プロパティを取得する対象のコンポーネントを表す <see cref="T:System.Type" />。</param>
      <returns>指定したコンポーネントの型のプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])">
      <summary>指定した属性配列をフィルターとして使用して、指定したコンポーネントの型のプロパティのコレクションを返します。</summary>
      <param name="componentType">対象のコンポーネントの <see cref="T:System.Type" />。</param>
      <param name="attributes">フィルターとして使用される、<see cref="T:System.Attribute" /> 型の配列。</param>
      <returns>指定したコンポーネントの型のプロパティのうち、指定した属性に一致するプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Object)">
      <summary>指定したコンポーネントの型説明のプロバイダーを返します。</summary>
      <param name="instance">対象コンポーネントのインスタンス。</param>
      <returns>指定したコンポーネントに関連付けられている <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Type)">
      <summary>指定した型の型説明のプロバイダーを返します。</summary>
      <param name="type">対象のコンポーネントの <see cref="T:System.Type" />。</param>
      <returns>指定した型に関連付けられている <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)">
      <summary>オブジェクトに応じて、リフレクションの実行に使用できる <see cref="T:System.Type" /> を返します。</summary>
      <param name="instance">対象コンポーネントのインスタンス。</param>
      <returns>指定したオブジェクトの <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)">
      <summary>クラス型に応じて、リフレクションの実行に使用できる <see cref="T:System.Type" /> を返します。</summary>
      <param name="type">対象のコンポーネントの <see cref="T:System.Type" />。</param>
      <returns>指定したクラスの <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.InterfaceType">
      <summary>すべてのインターフェイス型に対する型説明のプロバイダーを表す型を取得します。</summary>
      <returns>すべてのインターフェイス型に対するカスタムの型説明のプロバイダーを表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)">
      <summary>指定したコンポーネントのプロパティとイベントをキャッシュから消去します。</summary>
      <param name="component">プロパティまたはイベントが変更されたコンポーネント。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)">
      <summary>指定したアセンブリのプロパティとイベントをキャッシュから消去します。</summary>
      <param name="assembly">更新する対象のアセンブリを表す <see cref="T:System.Reflection.Assembly" />。 指定したアセンブリ内の各 <see cref="T:System.Type" /> が更新されます。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)">
      <summary>指定したモジュールのプロパティとイベントをキャッシュから消去します。</summary>
      <param name="module">更新する対象のモジュールを表す <see cref="T:System.Reflection.Module" />。 指定したモジュール内の各 <see cref="T:System.Type" /> が更新されます。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Type)">
      <summary>指定したコンポーネントの型のプロパティとイベントをキャッシュから消去します。</summary>
      <param name="type">対象のコンポーネントの <see cref="T:System.Type" />。</param>
    </member>
    <member name="E:System.ComponentModel.TypeDescriptor.Refreshed">
      <summary>コンポーネントのキャッシュが消去されたときに発生します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)">
      <summary>2 つのオブジェクト間の関連付けを削除します。</summary>
      <param name="primary">プライマリ <see cref="T:System.Object" />。</param>
      <param name="secondary">セカンダリ <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">一方または両方のパラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)">
      <summary>プライマリ オブジェクトのすべての関連付けを削除します。</summary>
      <param name="primary">関連付けにおけるプライマリ <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="primary" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>指定したオブジェクトに関連付けられている、以前に追加した型説明のプロバイダーを削除します。</summary>
      <param name="provider">削除する <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance">対象コンポーネントのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">一方または両方のパラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>指定した型に関連付けられている、以前に追加した型説明のプロバイダーを削除します。</summary>
      <param name="provider">削除する <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type">対象のコンポーネントの <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">一方または両方のパラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>指定したオブジェクトに関連付けられている、以前に追加した型説明のプロバイダーを削除します。</summary>
      <param name="provider">削除する <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance">対象コンポーネントのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">一方または両方のパラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>指定した型に関連付けられている、以前に追加した型説明のプロバイダーを削除します。</summary>
      <param name="provider">削除する <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type">対象のコンポーネントの <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">一方または両方のパラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)">
      <summary>記述子を名前で並べ替えます。</summary>
      <param name="infos">並べ替える対象の記述子を格納している <see cref="T:System.Collections.IList" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="infos" /> は <see langword="null" />です。</exception>
    </member>
    <member name="T:System.ComponentModel.TypeListConverter">
      <summary>使用できる型をリスト ボックスに読み込むために使用できる型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.#ctor(System.Type[])">
      <summary>使用可能な型として型の配列を使用して、<see cref="T:System.ComponentModel.TypeListConverter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="types">使用可能な型として使用する <see cref="T:System.Type" /> 型の配列。</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、特定のコンテキストを使用してソース オブジェクトの特定の <see cref="T:System.Type" /> を変換できるかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">ソース オブジェクトの <see cref="T:System.Type" />。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したオブジェクトをコンバーターのネイティブな型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">フォントを表すときに使用するカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>値オブジェクトを目的の型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">オプションの <see cref="T:System.Globalization.CultureInfo" />。 指定されなかった場合は、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">値の変換後の <see cref="T:System.Type" />。</param>
      <returns>変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>検証コントロールがデザインされた対象のデータ型の標準値のコレクションを取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>正しい値の標準セットを保持する <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />。データ型が標準値セットをサポートしていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> メソッドから返された標準値のリストが、排他的リストかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> から返された <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> が有効値の排他的リストであるため、<see langword="true" />。 このメソッドが <see langword="false" /> を返すことはありません。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>指定したコンテキストを使用して、リストから選択できる標準値セットをオブジェクトがサポートするかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>オブジェクトがサポートしている標準値セットを見つけるために <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> を呼び出す必要があるので、<see langword="true" />。 このメソッドが <see langword="false" /> を返すことはありません。</returns>
    </member>
    <member name="T:System.ComponentModel.UInt16Converter">
      <summary>16 ビット符号なし整数オブジェクトのほかの表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt16Converter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.UInt16Converter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.UInt32Converter">
      <summary>32 ビット符号なし整数オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt32Converter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.UInt32Converter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.UInt64Converter">
      <summary>64 ビット符号なし整数オブジェクトのほかの表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt64Converter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.UInt64Converter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.VersionConverter">
      <summary>
        <see cref="T:System.Version" /> 型オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.VersionConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、特定の変換元の型のオブジェクトを <see cref="T:System.Version" /> に変換できるかどうかを示す値を取得します。</summary>
      <param name="context">コンテキスト情報を提供するオブジェクト。</param>
      <param name="sourceType">変換するオブジェクトの型。</param>
      <returns>コンバーターが sourceType を <see cref="T:System.Version" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <param name="context">コンテキスト情報を提供するオブジェクト。</param>
      <param name="destinationType">変換後の型。</param>
      <returns>このコンバーターがオブジェクトを目的の型に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したオブジェクトを <see cref="T:System.Version" /> に変換します。</summary>
      <param name="context">コンテキスト情報を提供するオブジェクト。</param>
      <param name="culture">変換に使用するカルチャ。</param>
      <param name="value">
        <see cref="T:System.Version" /> へと変換する値。</param>
      <returns>
        <see cref="T:System.Version" /> 値に変換された <paramref name="value" />。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> は有効な <see cref="T:System.Version" /> 文字列ではありません。</exception>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定したコンテキストと引数を使用して、指定した値を指定した目的の型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">変換のために書式設定情報を提供するカルチャ。</param>
      <param name="value">変換する値。</param>
      <param name="destinationType">値パラメーターの変換先となる型。</param>
      <returns>変換後の値を表すオブジェクト。</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>この型、および指定されたコンテキストに対して、指定された値オブジェクトが有効であるかどうかを示す値を返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">有効かどうかを確認する対象のオブジェクト。</param>
      <returns>指定した値がオブジェクトに対して有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.WarningException">
      <summary>エラーではなく警告として処理される例外を指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.WarningException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>指定したシリアル化データとコンテキストを使用して、<see cref="T:System.ComponentModel.WarningException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">逆シリアル化に使用する <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">逆シリアル化に使用する転送先。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String)">
      <summary>指定したメッセージを使用し、ヘルプ ファイルは指定せずに <see cref="T:System.ComponentModel.WarningException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エンド ユーザーに表示するメッセージ。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.Exception)">
      <summary>詳細説明と例外を指定して、<see cref="T:System.ComponentModel.WarningException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーの詳細説明。</param>
      <param name="innerException">この例外の原因である内部例外への参照。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String)">
      <summary>指定したメッセージを用意し、特定のヘルプ ファイルにアクセスできるように指定して、<see cref="T:System.ComponentModel.WarningException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エンド ユーザーに表示するメッセージ。</param>
      <param name="helpUrl">ユーザーがヘルプを要求した場合に表示するヘルプ ファイル。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String,System.String)">
      <summary>指定したメッセージを用意し、指定したヘルプ ファイルやヘルプ トピックへアクセスできるようにして、<see cref="T:System.ComponentModel.WarningException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エンド ユーザーに表示するメッセージ。</param>
      <param name="helpUrl">ユーザーがヘルプを要求した場合に表示するヘルプ ファイル。</param>
      <param name="helpTopic">ユーザーがヘルプを要求した場合に表示するヘルプ トピック。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>パラメーター名と追加の例外情報を使用して <see cref="T:System.Runtime.Serialization.SerializationInfo" /> を設定します。</summary>
      <param name="info">
        <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> がシリアル化または逆シリアル化していたオブジェクトを、シリアル化または逆シリアル化するために使用したデータを格納します。</param>
      <param name="context">例外を生成したストリームの転送元および転送先を記述し、そのコンテキストと追加の呼び出し元定義のコンテキストを保持するためのシリアル化の手段を提供します。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpTopic">
      <summary>警告に関連付けられているヘルプ トピックを取得します。</summary>
      <returns>警告に関連付けられたヘルプ トピック。</returns>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpUrl">
      <summary>警告に関連付けられているヘルプ ファイルを取得します。</summary>
      <returns>警告に関連付けられたヘルプ ファイル。</returns>
    </member>
    <member name="T:System.Drawing.ColorConverter">
      <summary>あるデータ型の色を別の色に変換します。 このクラスには <see cref="T:System.ComponentModel.TypeDescriptor" /> を使用してアクセスします。</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.#ctor">
      <summary>
        <see cref="T:System.Drawing.ColorConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、任意の型のオブジェクトをコンバーターのネイティブな型に変換できるかどうかを判断します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。 このオブジェクトを使用すると、コンバーターが呼び出されている環境についての追加情報を取得できます。</param>
      <param name="sourceType">変換する型。</param>
      <returns>このオブジェクトが変換を実行できる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns>このコンバーターが操作を実行できる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>特定のオブジェクトをコンバーターのネイティブな型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.TypeDescriptor" />。 このオブジェクトを使用すると、コンバーターが呼び出されている環境についての追加情報を取得できます。</param>
      <param name="culture">色を表すカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換対象のオブジェクト。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentException">変換を実行できません。</exception>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定したオブジェクトを別の型に変換します。</summary>
      <param name="context">フォーマッタ コンテキスト。 このコンバーターが呼び出される環境に関する追加情報を抽出するには、このオブジェクトを使用します。 この値が <see langword="null" /> であるかどうかを常に確認してください。 また、コンテキスト オブジェクトのプロパティも <see langword="null" /> を返す場合があります。</param>
      <param name="culture">色を表すカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換対象のオブジェクト。</param>
      <param name="destinationType">オブジェクトの変換後の型。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationtype" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>この検証コントロールがデザインされた対象のデータ型の標準値セットを含むコレクションを取得します。 データ型が値の標準セットをサポートしていない場合は、<see langword="null" /> が返されます。</summary>
      <param name="context">フォーマッタ コンテキスト。 このコンバーターが呼び出される環境に関する追加情報を抽出するには、このオブジェクトを使用します。 この値が <see langword="null" /> であるかどうかを常に確認してください。 また、コンテキスト オブジェクトのプロパティも <see langword="null" /> を返す場合があります。</param>
      <returns>
        <see langword="null" /> または有効な値の標準セットを含むコレクション。 既定の実装では、常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>リストから選択できる値の標準セットをこのオブジェクトがサポートしているかどうかを判断します。</summary>
      <param name="context">追加のコンテキストを指定できる場合に使用する <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <returns>オブジェクトがサポートしている標準値セットを見つけるために <see cref="Overload:System.Drawing.ColorConverter.GetStandardValues" /> を呼び出す必要がある場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="T:System.Drawing.PointConverter">
      <summary>
        <see cref="T:System.Drawing.Point" /> オブジェクトのデータ型を別のデータ型に変換します。</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.#ctor">
      <summary>
        <see cref="T:System.Drawing.PointConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、任意の型のオブジェクトをコンバーターのネイティブな型に変換できるかどうかを判断します。</summary>
      <param name="context">フォーマッタ コンテキスト。 このオブジェクトを使用して、このコンバーターを呼び出している環境についての追加情報を取得できます。 この値は <see langword="null" /> になる場合があるため、常に確認してください。 また、コンテキスト オブジェクト上のプロパティも <see langword="null" /> を返す場合があります。</param>
      <param name="sourceType">変換前の型。</param>
      <returns>このオブジェクトが変換を実行できる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> オブジェクト。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" /> オブジェクト。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定のオブジェクトを <see cref="T:System.Drawing.Point" /> オブジェクトに変換します。</summary>
      <param name="context">フォーマッタ コンテキスト。 このオブジェクトを使用して、このコンバーターを呼び出している環境についての追加情報を取得できます。 この値は <see langword="null" /> になる場合があるため、常に確認してください。 また、コンテキスト オブジェクト上のプロパティも <see langword="null" /> を返す場合があります。</param>
      <param name="culture">特定のカルチャと関連付けられた言語、暦、文化的な慣例などのカルチャ固有の情報を格納するオブジェクト。 これは RFC 1766 標準に準拠しています。</param>
      <param name="value">変換対象のオブジェクト。</param>
      <returns>変換後のオブジェクト。</returns>
      <exception cref="T:System.NotSupportedException">変換を完了できません。</exception>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定したオブジェクトを指定した型に変換します。</summary>
      <param name="context">フォーマッタ コンテキスト。 このオブジェクトを使用して、このコンバーターを呼び出している環境についての追加情報を取得できます。 この値は <see langword="null" /> になる場合があるため、常に確認してください。 また、コンテキスト オブジェクト上のプロパティも <see langword="null" /> を返す場合があります。</param>
      <param name="culture">特定のカルチャと関連付けられた言語、暦、文化的な慣例などのカルチャ固有の情報を格納するオブジェクト。 これは RFC 1766 標準に準拠しています。</param>
      <param name="value">変換対象のオブジェクト。</param>
      <param name="destinationType">オブジェクトの変換後の型。</param>
      <returns>変換後のオブジェクト。</returns>
      <exception cref="T:System.NotSupportedException">変換を完了できません。</exception>
    </member>
    <member name="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>オブジェクトのプロパティ値が設定された、この型のインスタンスを作成します。</summary>
      <param name="context">追加のコンテキストが提供されるときに使用する型記述子。</param>
      <param name="propertyValues">新しいプロパティ値のディクショナリ。 ディクショナリは、<see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> から返された各プロパティに 1 つずつある、名前と値の一連の組み合わせを格納しています。</param>
      <returns>新しく作成したオブジェクト。オブジェクトを作成できなかった場合は <see langword="null" />。 既定の実装では、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>このオブジェクトの値を変更するために、<see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> を呼び出して新しい値を作成する必要があるかどうかを判断します。</summary>
      <param name="context">追加のコンテキストを指定できる場合に使用する <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <returns>このオブジェクトの 1 つ以上のプロパティを変更するときに、<see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> メソッドを呼び出す必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>この型のプロパティ セットを取得します。 既定では、型はプロパティを返しません。</summary>
      <param name="context">追加のコンテキストが提供されるときに使用する型記述子。</param>
      <param name="value">プロパティを取得する対象となるオブジェクトの値。</param>
      <param name="attributes">プロパティを説明する <see cref="T:System.Attribute" /> オブジェクトの配列。</param>
      <returns>このデータ型で公開するプロパティ セット。 公開するプロパティがない場合、このメソッドは <see langword="null" /> を返します。 既定の実装では、常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>このオブジェクトがプロパティをサポートするかどうかを判断します。 既定値は <see langword="false" /> です。</summary>
      <param name="context">追加のコンテキストを指定できる場合に使用する <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <returns>このオブジェクトのプロパティを見つけるために <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> を呼び出す必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Drawing.RectangleConverter">
      <summary>四角形のデータ型を別のデータ型に変換します。 このクラスには <see cref="T:System.ComponentModel.TypeDescriptor" /> を使用してアクセスします。</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.#ctor">
      <summary>
        <see cref="T:System.Drawing.RectangleConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、任意の型のオブジェクトをコンバーターのネイティブな型に変換できるかどうかを判断します。</summary>
      <param name="context">フォーマッタ コンテキスト。 このオブジェクトを使用して、このコンバーターを呼び出している環境についての追加情報を取得できます。 この値は <see langword="null" /> になる場合があるため、常に確認してください。 また、コンテキスト オブジェクト上のプロパティも <see langword="null" /> を返す場合があります。</param>
      <param name="sourceType">変換前の型。</param>
      <returns>このメソッドは、オブジェクトが変換を実行できる場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> オブジェクト。 この値は <see langword="null" /> になる場合があるため、必ず確認してください。 また、コンテキスト オブジェクトのプロパティも <see langword="null" /> を返す場合があります。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" /> オブジェクト。</param>
      <returns>このメソッドは、コンバーターが変換を実行できる場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>特定のオブジェクトを <see cref="T:System.Drawing.Rectangle" /> オブジェクトに変換します。</summary>
      <param name="context">このコンバーターの呼び出し元の環境についての追加情報を取得するために使用できる <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。 この値は <see langword="null" /> になる場合があるため、常に確認してください。 また、コンテキスト オブジェクト上のプロパティも <see langword="null" /> を返す場合があります。</param>
      <param name="culture">特定のカルチャと関連付けられた言語、暦、文化的な慣例などのカルチャ固有の情報を格納する <see cref="T:System.Globalization.CultureInfo" />。 これは RFC 1766 標準に準拠しています。</param>
      <param name="value">変換対象のオブジェクト。</param>
      <returns>変換後のオブジェクト。</returns>
      <exception cref="T:System.NotSupportedException">変換を完了できません。</exception>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定したオブジェクトを指定した型に変換します。</summary>
      <param name="context">このコンバーターの呼び出し元の環境についての追加情報を取得するために使用できる <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。 この値は <see langword="null" /> になる場合があるため、常に確認してください。 また、コンテキスト オブジェクト上のプロパティも <see langword="null" /> を返す場合があります。</param>
      <param name="culture">特定のカルチャと関連付けられた言語、暦、文化的な慣例などのカルチャ固有の情報を格納する <see cref="T:System.Globalization.CultureInfo" />。 これは RFC 1766 標準に準拠しています。</param>
      <param name="value">変換対象のオブジェクト。</param>
      <param name="destinationType">オブジェクトの変換後の型。</param>
      <returns>変換後のオブジェクト。</returns>
      <exception cref="T:System.NotSupportedException">変換を完了できません。</exception>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>オブジェクトのプロパティ値が設定された、この型のインスタンスを作成します。 これは、変更可能なプロパティを提供する必要のある不変のオブジェクトには便利です。</summary>
      <param name="context">追加のコンテキストを指定できる場合に使用する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="propertyValues">新しいプロパティ値のディクショナリ。 このディクショナリは、<see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> メソッドの呼び出しで返された各プロパティに 1 つずつある、名前と値の一連の組み合わせを格納しています。</param>
      <returns>新しく作成したオブジェクト。オブジェクトを作成できなかった場合は <see langword="null" />。 既定の実装では、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>このオブジェクトの値を変更するために、<see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> を呼び出して新しい値を作成する必要があるかどうかを判断します。</summary>
      <param name="context">追加のコンテキストが提供されるときに使用する型記述子。</param>
      <returns>このオブジェクトの 1 つ以上のプロパティを変更するときに、<see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> を呼び出す必要がある場合、このメソッドは <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>この型のプロパティ セットを取得します。 既定では、型はプロパティを返しません。</summary>
      <param name="context">追加のコンテキストを指定できる場合に使用する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">プロパティを取得する対象となるオブジェクトの値。</param>
      <param name="attributes">プロパティを説明する <see cref="T:System.Attribute" /> オブジェクトの配列。</param>
      <returns>このデータ型で公開する必要があるプロパティ セット。 プロパティを公開する必要がない場合は、<see langword="null" /> を返すことがあります。 既定の実装では、常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>このオブジェクトがプロパティをサポートするかどうかを判断します。 既定値は <see langword="false" /> です。</summary>
      <param name="context">追加のコンテキストを指定できる場合に使用する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>このオブジェクトのプロパティを見つけるために <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> を呼び出す必要がある場合、このメソッドは <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</returns>
    </member>
    <member name="T:System.Drawing.SizeConverter">
      <summary>
        <see cref="T:System.Drawing.SizeConverter" /> クラスは、あるデータ型を別のデータ型に変換する場合に使用します。 <see cref="T:System.ComponentModel.TypeDescriptor" /> オブジェクトを通じてこのクラスにアクセスします。</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.#ctor">
      <summary>新しい <see cref="T:System.Drawing.SizeConverter" /> オブジェクトを初期化します。</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>対象のコンバーターが、指定した変換前の型のオブジェクトをそのコンバーターのネイティブな型に変換できるかどうかを確認します。</summary>
      <param name="context">このコンバーターの呼び出し元の環境についての追加情報を取得するために使用できる <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。 この値は <see langword="null" /> になる場合があるため、常に確認してください。 また、コンテキスト オブジェクト上のプロパティも <see langword="null" /> を返す場合があります。</param>
      <param name="sourceType">変換前の型。</param>
      <returns>オブジェクトが変換を実行できる場合、このメソッドは <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <param name="context">このコンバーターの呼び出し元の環境についての追加情報を取得するために使用できる <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。 これは <see langword="null" /> の場合があるため、常に確認してください。 また、コンテキスト オブジェクトのプロパティも <see langword="null" /> を返す場合があります。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns>このメソッドは、コンバーターが変換を実行できる場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したオブジェクトをコンバーターのネイティブな型に変換します。</summary>
      <param name="context">このコンバーターの呼び出し元の環境についての追加情報を取得するために使用できる <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。 この値は <see langword="null" /> になる場合があるため、常に確認してください。 また、コンテキスト オブジェクト上のプロパティも <see langword="null" /> を返す場合があります。</param>
      <param name="culture">特定のカルチャと関連付けられた言語、暦、文化的な慣例などのカルチャ固有の情報を格納する <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。 これは RFC 1766 標準に準拠しています。</param>
      <param name="value">変換対象のオブジェクト。</param>
      <returns>変換後のオブジェクト。</returns>
      <exception cref="T:System.NotSupportedException">変換を完了できません。</exception>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定したオブジェクトを指定した型に変換します。</summary>
      <param name="context">このコンバーターの呼び出し元の環境についての追加情報を取得するために使用できる <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。 この値は <see langword="null" /> になる場合があるため、常に確認してください。 また、コンテキスト オブジェクト上のプロパティも <see langword="null" /> を返す場合があります。</param>
      <param name="culture">特定のカルチャと関連付けられた言語、暦、文化的な慣例などのカルチャ固有の情報を格納する <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。 これは RFC 1766 標準に準拠しています。</param>
      <param name="value">変換対象のオブジェクト。</param>
      <param name="destinationType">オブジェクトの変換後の型。</param>
      <returns>変換後のオブジェクト。</returns>
      <exception cref="T:System.NotSupportedException">変換を完了できません。</exception>
    </member>
    <member name="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>この型のオブジェクトそのオブジェクトのプロパティ値の指定のセットを使用して作成します。 これは、変更できるプロパティを持つ変更できない、オブジェクトを作成する場合に便利です。</summary>
      <param name="context">追加のコンテキストを指定できる場合に使用する <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <param name="propertyValues">新しいプロパティ値のディクショナリ。 このディクショナリには、名前と値の一連のペアが格納されています。各プロパティに対する名前と値のペアは、<see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> メソッドから返されます。</param>
      <returns>新しく作成したオブジェクト。オブジェクトを作成できなかった場合は <see langword="null" />。 既定の実装では、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>このオブジェクトの値を変更するために、<see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> メソッドを呼び出して新しい値を作成する必要があるかどうかを判断します。</summary>
      <param name="context">追加のコンテキストを指定できる場合に使用する <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <returns>このオブジェクトの 1 つ以上のプロパティを変更するときに、<see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> オブジェクトを呼び出す必要がある場合は <see langword="true" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>この型のプロパティ セットを取得します。 既定では、型はプロパティを返しません。</summary>
      <param name="context">追加のコンテキストを指定できる場合に使用する <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <param name="value">プロパティを取得する対象となるオブジェクトの値。</param>
      <param name="attributes">プロパティを説明する <see cref="T:System.Attribute" /> オブジェクトの配列。</param>
      <returns>このデータ型で公開する必要があるプロパティ セット。 プロパティを公開する必要がない場合は、<see langword="null" /> を返すことがあります。 既定の実装では、常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>このオブジェクトがプロパティをサポートしているかどうかを確認します。 既定値は <see langword="false" /> です。</summary>
      <param name="context">追加のコンテキストを指定できる場合に使用する <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <returns>このオブジェクトのプロパティを見つけるために <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> メソッドを呼び出す必要がある場合は <see langword="true" />。</returns>
    </member>
    <member name="T:System.Drawing.SizeFConverter">
      <summary>ある型の <see cref="T:System.Drawing.SizeF" /> オブジェクトを別の型に変換します。</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.#ctor">
      <summary>
        <see cref="T:System.Drawing.SizeFConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>コンバーターが、指定したコンテキストを使用して、指定した型を <see cref="T:System.Drawing.SizeF" /> 型に変換できるかどうかを示す値を返します。</summary>
      <param name="context">追加のコンテキストを指定するときに使用する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns>変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <see cref="T:System.Drawing.SizeFConverter" /> が <see cref="T:System.Drawing.SizeF" /> を指定した型に変換できるかどうかを示す値を返します。</summary>
      <param name="context">追加のコンテキストを指定するときに使用する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">変換元の型を表す <see cref="T:System.Type" />。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したコンテキストとカルチャ情報を使用して、指定されたオブジェクトをこのコンバーターの型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">現在のカルチャとして使用する <see cref="T:System.Globalization.CultureInfo" /> 。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定したコンテキストとカルチャ情報を使用して、指定した値オブジェクトを、指定した型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。 null 値を渡すと、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">value パラメーターの変換後の <see cref="T:System.Type" />。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>指定したコンテキストを使用して、指定したプロパティ値を持つ <see cref="T:System.Drawing.SizeF" /> のインスタンスを作成します。</summary>
      <param name="context">追加のコンテキストを指定するときに使用する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="propertyValues">プロパティの名前と値を格納している <see cref="T:System.Collections.IDictionary" />。</param>
      <returns>新しい <see cref="T:System.Object" /> を表す <see cref="T:System.Drawing.SizeF" />。オブジェクトを作成できない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>このオブジェクトの値を変更するときに、<see cref="Overload:System.Drawing.SizeFConverter.CreateInstance" /> メソッドを呼び出して新しい値を作成する必要があるかどうかを示す値を返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。 <see langword="null" /> でもかまいません。</param>
      <returns>常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>指定したコンテキストおよび属性を使用して、<see cref="T:System.Drawing.SizeF" /> 型の一連のプロパティを取得します。</summary>
      <param name="context">追加のコンテキストを指定するときに使用する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">プロパティを返す <see cref="T:System.Object" />。</param>
      <param name="attributes">プロパティを説明する <see cref="T:System.Attribute" /> オブジェクトの配列。</param>
      <returns>プロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="T:System.Drawing.SizeF" /> 型がプロパティをサポートしているかどうかを示す値を返します。</summary>
      <param name="context">追加のコンテキストを指定するときに使用する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter">
      <summary>
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> クラスは、受信クライアント接続を検証するためにサーバーで使用される拡張保護ポリシーの型コンバーターを表します。</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.#ctor">
      <summary>
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>コンバーターがオブジェクトを指定した型に変換できるかどうかを示す値を返します。</summary>
      <param name="context">変換対象のオブジェクト。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns>コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>オブジェクトを指定した型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。 <see langword="null" /> を渡すと、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。 これは <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> オブジェクトである必要があります。</param>
      <param name="destinationType">value パラメーターの変換後の <see cref="T:System.Type" />。</param>
      <returns>変換後の <paramref name="value" /> パラメーターを表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">変換できませんでした。</exception>
    </member>
    <member name="T:System.Timers.ElapsedEventArgs">
      <summary>
        <see cref="E:System.Timers.Timer.Elapsed" /> イベントのデータを提供します。</summary>
    </member>
    <member name="P:System.Timers.ElapsedEventArgs.SignalTime">
      <summary>
        <see cref="E:System.Timers.Timer.Elapsed" /> イベントが発生した日付/時刻を取得します。</summary>
      <returns>
        <see cref="E:System.Timers.Timer.Elapsed" /> イベントが発生した時刻。</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventHandler">
      <summary>
        <see cref="E:System.Timers.Timer.Elapsed" /> の <see cref="T:System.Timers.Timer" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.Timers.ElapsedEventArgs" /> オブジェクト。</param>
    </member>
    <member name="T:System.Timers.Timer">
      <summary>一定の間隔の経過後にイベントを生成します。オプションとして、反復イベントを生成することもできます。</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor">
      <summary>
        <see cref="T:System.Timers.Timer" /> クラスの新しいインスタンスを初期化し、すべてのプロパティを初期値に設定します。</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor(System.Double)">
      <summary>
        <see cref="T:System.Timers.Timer" /> クラスの新しいインスタンスを初期化し、<see cref="P:System.Timers.Timer.Interval" /> プロパティを指定したミリ秒数に設定します。</summary>
      <param name="interval">ミリ秒単位でのイベントの発生間隔。 この値はゼロより大きく、<see cref="F:System.Int32.MaxValue" /> 以下である必要があります。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="interval" /> パラメーターの値は 0 以下か、または <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="P:System.Timers.Timer.AutoReset">
      <summary>
        <see cref="T:System.Timers.Timer" /> が <see cref="E:System.Timers.Timer.Elapsed" /> イベントを一度のみ発生させる (<see langword="false" />) か、または繰り返し発生させる (<see langword="true" />) かを示すブール値を取得または設定します。</summary>
      <returns>指定した間隔が経過するたびに <see cref="T:System.Timers.Timer" /> で <see cref="E:System.Timers.Timer.Elapsed" /> イベントを発生させる場合は <see langword="true" />。最初の間隔が経過した後に 1 回だけ <see langword="false" /> イベントを発生させる場合は <see cref="E:System.Timers.Timer.Elapsed" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="M:System.Timers.Timer.BeginInit">
      <summary>フォームまたは別のコンポーネントで使用する <see cref="T:System.Timers.Timer" /> の実行時の初期化を開始します。</summary>
    </member>
    <member name="M:System.Timers.Timer.Close">
      <summary>
        <see cref="T:System.Timers.Timer" /> で使用したリソースを解放します。</summary>
    </member>
    <member name="M:System.Timers.Timer.Dispose(System.Boolean)">
      <summary>現在の <see cref="T:System.Timers.Timer" /> によって使用されているすべてのリソースを解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="E:System.Timers.Timer.Elapsed">
      <summary>間隔が経過すると発生します。</summary>
    </member>
    <member name="P:System.Timers.Timer.Enabled">
      <summary>
        <see cref="T:System.Timers.Timer" /> で <see cref="E:System.Timers.Timer.Elapsed" /> イベントを発生させる必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Timers.Timer" /> で <see cref="E:System.Timers.Timer.Elapsed" /> イベントを発生させる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
      <exception cref="T:System.ObjectDisposedException">タイマーが破棄されたため、このプロパティは設定できません。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Timers.Timer.Interval" /> プロパティは、タイマーが有効になる前に <see cref="F:System.Int32.MaxValue" /> より大きい値に設定されました。</exception>
    </member>
    <member name="M:System.Timers.Timer.EndInit">
      <summary>フォームまたは別のコンポーネントで使用する <see cref="T:System.Timers.Timer" /> の実行時の初期化を終了します。</summary>
    </member>
    <member name="P:System.Timers.Timer.Interval">
      <summary>
        <see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生間隔を取得または設定します。</summary>
      <returns>ミリ秒単位での <see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生間隔。 この値はゼロより大きく、<see cref="F:System.Int32.MaxValue" /> 以下である必要があります。 既定値は 100 ミリ秒です。</returns>
      <exception cref="T:System.ArgumentException">間隔が 0 以下です。  

または - 
間隔が <see cref="F:System.Int32.MaxValue" /> よりも大きく、タイマーが現在有効になっています。 (タイマーが現在有効になっていない場合は、有効になるまで例外はスローされません。)</exception>
    </member>
    <member name="P:System.Timers.Timer.Site">
      <summary>デザイン モードで <see cref="T:System.Timers.Timer" /> をコンテナーにバインドするサイトを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Timers.Timer" /> オブジェクトをコンテナーにバインドするサイトを表す <see cref="T:System.ComponentModel.ISite" /> インターフェイス。</returns>
    </member>
    <member name="M:System.Timers.Timer.Start">
      <summary>
        <see cref="P:System.Timers.Timer.Enabled" /> を <see langword="true" /> に設定して、<see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生を開始します。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="T:System.Timers.Timer" /> の作成時に設定された間隔が <see cref="F:System.Int32.MaxValue" /> + 1 以上か、0 未満に設定されています。</exception>
    </member>
    <member name="M:System.Timers.Timer.Stop">
      <summary>
        <see cref="P:System.Timers.Timer.Enabled" /> を <see langword="false" /> に設定して、<see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生を停止します。</summary>
    </member>
    <member name="P:System.Timers.Timer.SynchronizingObject">
      <summary>指定した間隔が経過したときに発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを取得または設定します。</summary>
      <returns>指定した間隔が経過したときに発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを表す <see cref="T:System.ComponentModel.ISynchronizeInvoke" />。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="T:System.Timers.TimersDescriptionAttribute">
      <summary>イベント、エクステンダー、またはプロパティの参照時に、ビジュアルなデザイナーで表示できる説明を設定します。</summary>
    </member>
    <member name="M:System.Timers.TimersDescriptionAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Timers.TimersDescriptionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="description">使用する説明。</param>
    </member>
    <member name="P:System.Timers.TimersDescriptionAttribute.Description">
      <summary>イベント、エクステンダー、またはプロパティの参照時に、ビジュアルなデザイナーで表示できる説明を取得します。</summary>
      <returns>イベント、エクステンダー、またはプロパティの説明。</returns>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary>
        <see cref="T:System.String" /> 型から <see cref="T:System.Uri" /> 型、またはその逆の変換を実行します。</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary>
        <see cref="T:System.UriTypeConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>コンバーターが特定の型のオブジェクトをコンバーターの型に変換できるかどうかを示す値を返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns>
        <paramref name="sourceType" /> が <see cref="T:System.String" /> 型の場合、または <paramref name="sourceType" /> から <see cref="T:System.Uri" /> 型への代入が可能である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceType" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが指定のコンテキストを使用して、オブジェクトを指定の型に変換できるかどうかを返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns>
        <paramref name="destinationType" /> が <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 型、<see cref="T:System.String" /> 型、または <see cref="T:System.Uri" /> 型の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したコンテキストとカルチャ情報を使用して、指定されたオブジェクトをこのコンバーターの型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">現在のカルチャとして使用する <see cref="T:System.Globalization.CultureInfo" /> 。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定したコンテキストとカルチャ情報を使用して、指定した値オブジェクトを、指定した型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。 <see langword="null" /> を渡すと、現在のカルチャが使用されます。</param>
      <param name="value">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType">
        <paramref name="value" /> パラメーターの変換後の <see cref="T:System.Type" />。</param>
      <returns>変換後の値を表す <see cref="T:System.Object" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">変換を実行できません。</exception>
    </member>
    <member name="M:System.UriTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>指定された値オブジェクトが <see cref="T:System.Uri" /> であるかどうか、または、そのオブジェクトから <see cref="T:System.Uri" /> を生成できるかどうかを返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">有効かどうかを確認する対象の <see cref="T:System.Object" />。</param>
      <returns>
        <paramref name="value" /> が <see cref="T:System.Uri" /> である場合、または <see cref="T:System.String" /> を生成可能な <see cref="T:System.Uri" /> である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.TypeConverter</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.AddingNewEventArgs">
      <summary>
        <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor">
      <summary>매개 변수를 사용하지 않고 <see cref="T:System.ComponentModel.AddingNewEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor(System.Object)">
      <summary>지정된 개체를 새 항목으로 사용하여 <see cref="T:System.ComponentModel.AddingNewEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="newObject">새 항목 값으로 사용할 <see cref="T:System.Object" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.AddingNewEventArgs.NewObject">
      <summary>바인딩 목록에 추가할 개체를 가져오거나 설정합니다.</summary>
      <returns>연결된 컬렉션에 새 항목으로 추가할 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventHandler">
      <summary>
        <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트의 소스로, 대개 데이터 컨테이너나 데이터 바인딩된 컬렉션입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.AddingNewEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.AmbientValueAttribute">
      <summary>속성이 다른 소스에서 값을 가져오도록 속성에 전달할 값을 지정합니다. 이를 앰비언스라고 합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Boolean)">
      <summary>해당 값에 대해 부울 값을 지정하여 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">이 특성의 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Byte)">
      <summary>해당 값에 대해 8비트 부호 없는 정수를 지정하여 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">이 특성의 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Char)">
      <summary>해당 값에 대해 유니코드 문자를 지정하여 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">이 특성의 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Double)">
      <summary>해당 값에 대해 배정밀도 부동 소수점 숫자를 지정하여 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">이 특성의 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int16)">
      <summary>해당 값에 대해 16비트 부호 있는 정수를 지정하여 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">이 특성의 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int32)">
      <summary>해당 값에 대해 32비트 부호 있는 정수를 지정하여 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">이 특성의 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int64)">
      <summary>해당 값에 대해 64비트 부호 있는 정수를 지정하여 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">이 특성의 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Object)">
      <summary>해당 값에 대해 개체를 지정하여 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">이 특성의 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Single)">
      <summary>해당 값에 대해 단정밀도 부동 소수점 숫자를 지정하여 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">이 특성의 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.String)">
      <summary>해당 값에 대해 문자열을 지정하여 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">이 특성의 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Type,System.String)">
      <summary>값 및 형식을 지정하여 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">
        <paramref name="value" /> 매개 변수의 <see cref="T:System.Type" />입니다.</param>
      <param name="value">이 특성의 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.Equals(System.Object)">
      <summary>지정한 <see cref="T:System.ComponentModel.AmbientValueAttribute" />가 현재 <see cref="T:System.ComponentModel.AmbientValueAttribute" />와 같은지 여부를 확인합니다.</summary>
      <param name="obj">현재 <see cref="T:System.ComponentModel.AmbientValueAttribute" />과 비교할 <see cref="T:System.ComponentModel.AmbientValueAttribute" />입니다.</param>
      <returns>지정된 <see langword="true" />가 현재<see cref="T:System.ComponentModel.AmbientValueAttribute" />와 같으면 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>현재 <see cref="T:System.ComponentModel.AmbientValueAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.AmbientValueAttribute.Value">
      <summary>이 <see cref="T:System.ComponentModel.AmbientValueAttribute" />의 값인 개체를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.ComponentModel.AmbientValueAttribute" />의 값인 개체입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ArrayConverter">
      <summary>
        <see cref="T:System.Array" /> 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.ArrayConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>주어진 값 개체를 지정한 대상 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">
        <paramref name="value" />가 변환될 문화권입니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType">값을 변환할 대상 <see cref="T:System.Type" />입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>값 매개 변수로 지정된 배열 형식에 대한 속성 컬렉션을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value">속성을 가져올 배열 형식을 지정하는 <see cref="T:System.Object" />입니다.</param>
      <param name="attributes">필터로 사용할 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns>배열에 노출되는 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다. 속성이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>이 개체에서 속성을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>이 개체의 속성을 찾으려면 <see cref="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />를 호출해야 하기 때문에 <see langword="true" />입니다. 이 메서드는 <see langword="false" />를 반환하지 않습니다.</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeCollection">
      <summary>특성 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.AttributeCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
      <summary>
        <see cref="T:System.ComponentModel.AttributeCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="attributes">이 컬렉션의 특성을 제공하는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributes" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Attributes">
      <summary>특성 컬렉션을 가져옵니다.</summary>
      <returns>특성 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
      <summary>이 특성 컬렉션에 지정된 특성이 있는지 확인합니다.</summary>
      <param name="attribute">컬렉션에서 찾을 <see cref="T:System.Attribute" />입니다.</param>
      <returns>컬렉션에 해당 특성이 포함되어 있거나 해당 특성 형식에 대한 기본 특성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
      <summary>이 특성 컬렉션에 특성 배열의 지정된 특성이 모두 포함되어 있는지 확인합니다.</summary>
      <param name="attributes">컬렉션에서 찾을 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns>컬렉션에 모든 특성이 포함되어 있으면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
      <summary>컬렉션을 지정된 인덱스에서 시작하여 배열에 복사합니다.</summary>
      <param name="array">컬렉션을 복사할 대상 <see cref="T:System.Array" />입니다.</param>
      <param name="index">복사를 시작할 인덱스입니다.</param>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Count">
      <summary>특성의 개수를 가져옵니다.</summary>
      <returns>특성의 개수입니다.</returns>
    </member>
    <member name="F:System.ComponentModel.AttributeCollection.Empty">
      <summary>새 컬렉션을 만드는 대신 사용할 수 있는 빈 컬렉션을 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
      <summary>기존 <see cref="T:System.ComponentModel.AttributeCollection" />에서 새 <see cref="T:System.ComponentModel.AttributeCollection" />을 만듭니다.</summary>
      <param name="existing">복사본을 만들 <see cref="T:System.ComponentModel.AttributeCollection" />입니다.</param>
      <param name="newAttributes">이 컬렉션의 특성을 제공하는 <see cref="T:System.Attribute" /> 형식의 배열입니다. <see langword="null" />일 수 있습니다.</param>
      <returns>
        <paramref name="existing" />의 복사본인 새 <see cref="T:System.ComponentModel.AttributeCollection" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="existing" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
      <summary>지정된 <see cref="T:System.Attribute" />의 기본 <see cref="T:System.Type" />를 반환합니다.</summary>
      <param name="attributeType">검색할 특성의 <see cref="T:System.Type" />입니다.</param>
      <returns>지정된 <paramref name="attributeType" />의 기본 <see cref="T:System.Attribute" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetEnumerator">
      <summary>이 컬렉션의 열거자를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 형식의 열거자입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
      <summary>지정된 인덱스 번호가 있는 특성을 가져옵니다.</summary>
      <param name="index">
        <see cref="T:System.ComponentModel.AttributeCollection" />의 인덱스이며 0에서 시작합니다.</param>
      <returns>지정된 인덱스 번호가 있는 <see cref="T:System.Attribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
      <summary>지정된 형식의 특성을 가져옵니다.</summary>
      <param name="attributeType">목록에서 가져올 <see cref="T:System.Type" />의 <see cref="T:System.Attribute" />입니다.</param>
      <returns>지정된 형식의 <see cref="T:System.Attribute" />이거나, 해당 특성이 없으면 해당 특성 형식의 기본값입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
      <summary>지정된 특성이 컬렉션의 특성과 같은지 확인합니다.</summary>
      <param name="attribute">이 컬렉션의 특성과 비교할 <see cref="T:System.Attribute" />의 인스턴스입니다.</param>
      <returns>해당 특성이 컬렉션 내에 포함되어 있으며 컬렉션의 특성과 같은 값을 가지면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
      <summary>지정된 배열의 특성이 컬렉션의 특성과 같은지 확인합니다.</summary>
      <param name="attributes">이 컬렉션의 특성과 비교할 <see cref="T:System.CodeDom.MemberAttributes" />의 배열입니다.</param>
      <returns>배열의 모든 특성이 해당 컬렉션에 포함되어 있으며 해당 컬렉션의 특성과 같은 값을 가지고 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count">
      <summary>컬렉션에 포함된 요소 수를 가져옵니다.</summary>
      <returns>컬렉션에 포함된 요소 수입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary>해당 컬렉션에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary>컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
        <see cref="T:System.Collections.IEnumerator" />의 <see cref="T:System.Collections.IDictionary" />를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />에 대한 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeProviderAttribute">
      <summary>특성 리디렉션을 활성화합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)">
      <summary>지정된 형식 이름을 사용하여 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeName">지정할 형식의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)">
      <summary>지정된 형식 이름과 속성 이름을 사용하여 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeName">지정할 형식의 이름입니다.</param>
      <param name="propertyName">특성을 검색할 속성의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)">
      <summary>지정된 형식을 사용하여 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">지정할 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.PropertyName">
      <summary>특성을 검색할 속성의 이름을 가져옵니다.</summary>
      <returns>특성을 검색할 속성의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.TypeName">
      <summary>생성자에 전달된 어셈블리로 한정된 형식 이름을 가져옵니다.</summary>
      <returns>생성자에 지정된 어셈블리로 한정된 형식 이름입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.BaseNumberConverter">
      <summary>비 부동 소수점 숫자 형식에 대한 기본 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>이 변환기가 지정된 소스 형식의 개체를 변환기의 네이티브 형식으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType">변환할 원본 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기가 작업을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="t">변환할 대상 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기가 작업을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 개체를 변환기의 네이티브 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">숫자를 나타내는 문화권이 지정된 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value">변환할 개체입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.Exception">
        <paramref name="value" />가 대상 형식의 올바른 값이 아닌 경우</exception>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>지정된 개체를 다른 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">숫자를 나타내는 문화권이 지정된 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value">변환할 개체입니다.</param>
      <param name="destinationType">개체를 변환할 대상 유형입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="T:System.ComponentModel.BindableAttribute">
      <summary>멤버가 일반적으로 바인딩에 사용되는지 여부를 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean)">
      <summary>부울 값을 사용하여 <see cref="T:System.ComponentModel.BindableAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="bindable">바인딩에 속성을 사용하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean,System.ComponentModel.BindingDirection)">
      <summary>
        <see cref="T:System.ComponentModel.BindableAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="bindable">바인딩에 속성을 사용하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.BindingDirection" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>
        <see cref="T:System.ComponentModel.BindableSupport" /> 값 중 하나를 사용하여 <see cref="T:System.ComponentModel.BindableAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="flags">
        <see cref="T:System.ComponentModel.BindableSupport" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport,System.ComponentModel.BindingDirection)">
      <summary>
        <see cref="T:System.ComponentModel.BindableAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="flags">
        <see cref="T:System.ComponentModel.BindableSupport" /> 값 중 하나입니다.</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.BindingDirection" /> 값 중 하나입니다.</param>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Bindable">
      <summary>일반적으로 바인딩에 속성이 사용됨을 나타내는 값을 가져옵니다.</summary>
      <returns>일반적으로 바인딩에 속성이 사용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.BindableAttribute" />의 기본값인 <see cref="F:System.ComponentModel.BindableAttribute.No" />을 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Direction">
      <summary>이 속성의 데이터 바인딩 방향을 나타내는 값을 가져옵니다.</summary>
      <returns>이 속성의 데이터 바인딩의 방향입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.Equals(System.Object)">
      <summary>두 <see cref="T:System.ComponentModel.BindableAttribute" /> 개체가 서로 같은지 확인합니다.</summary>
      <param name="obj">비교할 개체입니다.</param>
      <returns>지정된 <see cref="T:System.ComponentModel.BindableAttribute" />가 현재 <see cref="T:System.ComponentModel.BindableAttribute" />와 같으면 <see langword="true" />이고, 같지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.GetHashCode">
      <summary>
        <see cref="T:System.ComponentModel.BindableAttribute" /> 클래스에 대한 해시 함수 역할을 합니다.</summary>
      <returns>현재 <see cref="T:System.ComponentModel.BindableAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.IsDefaultAttribute">
      <summary>이 특성이 기본값인지 여부를 확인합니다.</summary>
      <returns>이 특성이 특성 클래스의 기본값이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.No">
      <summary>일반적으로 바인딩에 속성이 사용되지 않도록 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Yes">
      <summary>일반적으로 바인딩에 속성이 사용되도록 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="T:System.ComponentModel.BindableSupport">
      <summary>속성이 데이터 요소 또는 다른 속성에 바인딩할 수 있는 속성인지 여부를 나타내는 값을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Default">
      <summary>이 속성은 기본값으로 설정되어 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.No">
      <summary>이 속성은 디자인 타임에 바인딩할 수 없습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Yes">
      <summary>이 속성은 디자인 타임에 바인딩할 수 있습니다.</summary>
    </member>
    <member name="T:System.ComponentModel.BindingDirection">
      <summary>템플릿을 단방향 또는 양방향으로 바인딩할 수 있는지 여부를 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.OneWay">
      <summary>템플릿에서 속성 값을 받아들일 수만 있습니다. 제네릭 <see cref="T:System.Web.UI.ITemplate" />과 함께 사용됩니다.</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.TwoWay">
      <summary>템플릿에서 속성 값을 받아들이고 노출할 수 있습니다. <see cref="T:System.Web.UI.IBindableTemplate" />과 함께 사용됩니다.</summary>
    </member>
    <member name="T:System.ComponentModel.BindingList`1">
      <summary>데이터 바인딩을 지원하는 제네릭 컬렉션을 제공합니다.</summary>
      <typeparam name="T">목록에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor">
      <summary>기본값을 사용하여 <see cref="T:System.ComponentModel.BindingList`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>지정된 목록을 사용하여 <see cref="T:System.ComponentModel.BindingList`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="list">
        <see cref="T:System.Collections.Generic.IList`1" />에 포함될 항목의 <see cref="T:System.ComponentModel.BindingList`1" />입니다.</param>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.AddingNew">
      <summary>항목이 목록에 추가되기 전에 발생합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNew">
      <summary>컬렉션에 새 항목을 추가합니다.</summary>
      <returns>목록에 추가되는 항목입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Forms.BindingSource.AllowNew" /> 속성은 <see langword="false" />로 설정됩니다.  
또는 
현재 항목 종류에 대한 공용 매개 변수가 없는 생성자를 찾을 수 없습니다.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNewCore">
      <summary>컬렉션의 끝에 새 항목을 추가합니다.</summary>
      <returns>컬렉션에 추가된 항목입니다.</returns>
      <exception cref="T:System.InvalidCastException">새 항목의 형식이 <see cref="T:System.ComponentModel.BindingList`1" />에 포함된 개체의 형식과 같지 않은 경우</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowEdit">
      <summary>목록의 항목을 편집할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>목록 항목을 편집할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowNew">
      <summary>
        <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 메서드를 사용하여 목록에 항목을 추가할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 메서드를 사용하여 목록에 항목을 추가할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 목록에 포함된 내부 형식에 따라 달라집니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowRemove">
      <summary>컬렉션에서 항목을 제거할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> 메서드를 사용하여 목록에서 항목을 제거할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>파생 클래스에서 재정의되면 항목을 정렬하고, 그렇지 않으면 <see cref="T:System.NotSupportedException" />을 throw합니다.</summary>
      <param name="prop">정렬할 속성을 지정하는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 값 중 하나입니다.</param>
      <exception cref="T:System.NotSupportedException">메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.CancelNew(System.Int32)">
      <summary>보류 중인 새 항목을 삭제합니다.</summary>
      <param name="itemIndex">추가할 새 항목의 인덱스입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ClearItems">
      <summary>컬렉션에서 모든 요소를 제거합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.EndNew(System.Int32)">
      <summary>보류 중인 새 항목을 컬렉션에 커밋합니다.</summary>
      <param name="itemIndex">추가할 새 항목의 인덱스입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>파생 클래스에서 검색 기능이 구현되었으면 지정된 값을 가진 지정된 속성 설명자가 있는 항목의 인덱스를 검색하고, 그렇지 않으면 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <param name="prop">검색할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <param name="key">일치시킬 <paramref name="prop" /> 값입니다.</param>
      <returns>속성 설명자와 일치하고 지정된 값을 포함하는 항목의 인덱스(0부터 시작)입니다.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)" />가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.InsertItem(System.Int32,`0)">
      <summary>지정된 항목을 목록의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index">항목을 삽입할 인덱스(0부터 시작)입니다.</param>
      <param name="item">목록에 삽입할 항목입니다.</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.IsSortedCore">
      <summary>목록이 정렬되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>목록이 정렬되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.ListChanged">
      <summary>목록이나 목록의 항목이 변경될 때 발생합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.BindingList`1.AddingNew" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.AddingNewEventArgs" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.ListChangedEventArgs" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.RaiseListChangedEvents">
      <summary>목록에서 항목을 추가하거나 제거하면 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 이벤트가 발생하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>항목을 추가하거나 제거하는 경우 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 이벤트가 발생하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)">
      <summary>지정한 인덱스에서 해당 항목을 제거합니다.</summary>
      <param name="index">제거할 항목의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.NotSupportedException">새로 추가된 항목을 제거하면 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />가 <see langword="false" />로 설정됩니다.</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveSortCore">
      <summary>정렬 기능이 파생 클래스에서 구현되었으면 <see cref="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />를 사용하여 적용된 정렬을 제거하고, 그렇지 않으면 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <exception cref="T:System.NotSupportedException">메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetBindings">
      <summary>
        <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 형식의 <see cref="F:System.ComponentModel.ListChangedType.Reset" /> 이벤트를 발생시킵니다.</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetItem(System.Int32)">
      <summary>지정된 위치에 있는 항목에 대해 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 형식의 <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> 이벤트를 발생시킵니다.</summary>
      <param name="position">다시 설정할 항목의 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.SetItem(System.Int32,`0)">
      <summary>지정된 인덱스에 있는 항목을 지정된 항목으로 바꿉니다.</summary>
      <param name="index">바꿀 항목의 인덱스(0부터 시작)입니다.</param>
      <param name="item">지정된 인덱스에 있는 항목의 새 값입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="index" />가 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />보다 큰 경우</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortDirectionCore">
      <summary>목록이 정렬되는 방향을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDirection" /> 값 중 하나입니다. 기본값은 <see cref="F:System.ComponentModel.ListSortDirection.Ascending" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortPropertyCore">
      <summary>정렬 기능이 파생 클래스에서 구현되었으면 목록의 정렬에 사용되는 속성 설명자를 가져오고, 그렇지 않으면 <see langword="null" />을 반환합니다.</summary>
      <returns>목록의 정렬에 사용되는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsChangeNotificationCore">
      <summary>
        <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 이벤트가 사용되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 이벤트가 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSearchingCore">
      <summary>목록에서 검색 기능을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>목록에서 검색 기능을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSortingCore">
      <summary>목록에서 정렬 기능을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>목록에서 정렬 기능을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />를 참조하세요.</summary>
      <param name="prop">검색 조건으로 추가할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddNew">
      <summary>목록에 새 항목을 추가합니다. 자세한 내용은 <see cref="M:System.ComponentModel.IBindingList.AddNew" />을 참조하세요.</summary>
      <returns>목록에 추가되는 항목입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드는 지원되지 않습니다.</exception>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowEdit">
      <summary>목록의 항목을 편집할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>목록 항목을 편집할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowNew">
      <summary>
        <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 메서드를 사용하여 목록에 새 항목을 추가할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 메서드를 사용하여 목록에 항목을 추가할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 목록에 포함된 내부 형식에 따라 달라집니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowRemove">
      <summary>목록에서 항목을 제거할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> 메서드를 사용하여 목록에서 항목을 제거할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 및 <see cref="T:System.ComponentModel.ListSortDirection" />에 따라 목록을 정렬합니다. 이 멤버에 대한 전체 설명은 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />를 참조하십시오.</summary>
      <param name="prop">정렬에 사용할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />를 참조하세요.</summary>
      <param name="prop">검색할 대상 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <param name="key">검색할 <paramref name="prop" /> 매개 변수의 이름입니다.</param>
      <returns>지정된 <see cref="T:System.ComponentModel.PropertyDescriptor" />가 있는 행의 인덱스입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#IsSorted">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />를 참조하세요.</summary>
      <returns>
        <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" />가 호출되고 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />는 호출되지 않았으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />를 참조하십시오.</summary>
      <param name="prop">검색에 사용되는 인덱스에서 제거할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveSort">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />를 참조하십시오.</summary>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortDirection">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />를 참조하세요.</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDirection" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortProperty">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />를 참조하세요.</summary>
      <returns>정렬에 사용되는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />를 참조하세요.</summary>
      <returns>목록이나 항목이 변경될 때 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 이벤트가 발생하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />를 참조하십시오.</summary>
      <returns>목록에서 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 메서드를 사용한 검색 기능을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />를 참조하십시오.</summary>
      <returns>목록에서 정렬 기능을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
      <summary>항목 속성 값이 변경되면 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 형식의 <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> 이벤트가 발생하는지 여부를 나타내는 값을 가져옵니다. 이 멤버는 파생 클래스에서 재정의될 수 없습니다.</summary>
      <returns>
        <see langword="true" /> 목록 형식이 구현 하는 경우 <see cref="T:System.ComponentModel.INotifyPropertyChanged" />고, 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.BooleanConverter">
      <summary>
        <see cref="T:System.Boolean" /> 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.BooleanConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>지정된 컨텍스트를 사용하여 이 변환기가 지정된 소스 형식의 개체를 부울 개체로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 개체가 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 값 개체를 부울 개체로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">변환할 대상 문화권을 지정하는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <returns>변환된 <paramref name="value" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 대상 형식의 올바른 값이 아닌 경우</exception>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Boolean 데이터 형식에 대한 표준 값 컬렉션을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>유효한 값의 표준 집합을 포함하는 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 메서드에서 반환된 표준 값 목록이 단독 목록인지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />에서 반환된 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />이 가능한 값을 포함하는 단독 목록이므로 <see langword="true" />입니다. 이 메서드는 <see langword="false" />를 반환하지 않습니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>이 개체가 목록에서 선택할 수 있는 표준 값 집합을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>개체가 지원하는 공통되는 값 집합을 찾기 위해 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />를 호출해야 하므로 <see langword="true" />입니다. 이 메서드는 <see langword="false" />를 반환하지 않습니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ByteConverter">
      <summary>부호 없는 8비트 정수 개체와 여러 가지 다른 표현을 상호 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ByteConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.ByteConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventHandler">
      <summary>취소할 수 있는 이벤트를 처리하는 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.CancelEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.CharConverter">
      <summary>유니코드 문자 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.CharConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>지정된 컨텍스트를 사용하여 이 변환기가 지정된 소스 형식의 개체를 유니코드 문자 개체로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 개체를 유니코드 문자 개체로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">
        <paramref name="value" />가 변환될 문화권입니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <returns>변환된 <paramref name="value" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 대상 형식의 올바른 값이 아닌 경우</exception>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>인수를 사용하여 지정된 값 개체를 유니코드 문자 개체로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">
        <paramref name="value" />가 변환될 문화권입니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType">값을 변환할 대상 <see cref="T:System.Type" />입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeAction">
      <summary>컬렉션을 변경하는 방법을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Add">
      <summary>컬렉션에 요소를 추가했음을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Refresh">
      <summary>전체 컬렉션이 변경된 것으로 지정합니다. 이것은 <see cref="M:System.Collections.CollectionBase.Clear" />처럼 전체 컬렉션을 처리하는 메서드를 사용하면 발생합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Remove">
      <summary>컬렉션에서 요소를 제거했음을 지정합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventArgs">
      <summary>
        <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionChangeEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,System.Object)">
      <summary>
        <see cref="T:System.ComponentModel.CollectionChangeEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="action">컬렉션이 변경된 방법을 지정하는 <see cref="T:System.ComponentModel.CollectionChangeAction" /> 값 중 하나입니다.</param>
      <param name="element">변경된 컬렉션의 인스턴스를 지정하는 <see cref="T:System.Object" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Action">
      <summary>컬렉션이 변경된 방법을 지정하는 동작을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.CollectionChangeAction" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Element">
      <summary>변경된 컬렉션의 인스턴스를 가져옵니다.</summary>
      <returns>변경된 컬렉션의 인스턴스를 나타내는 <see cref="T:System.Object" />이거나 컬렉션을 새로 고친 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventHandler">
      <summary>컬렉션에 요소를 추가하거나 컬렉션에서 요소를 제거할 때 발생하는 <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> 이벤트를 처리하는 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.CollectionConverter">
      <summary>개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.CollectionConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>주어진 값 개체를 지정한 대상 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">
        <paramref name="value" />가 변환될 문화권입니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다. 이 매개 변수는 반드시 <see cref="T:System.Collections.ICollection" />에서 상속되어야 합니다.</param>
      <param name="destinationType">값을 변환할 대상 <see cref="T:System.Type" />입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>지정된 컨텍스트 및 특성을 사용하여, 값 매개 변수로 지정한 배열 형식에 대한 속성 컬렉션을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value">속성을 가져올 배열 형식을 지정하는 <see cref="T:System.Object" />입니다.</param>
      <param name="attributes">필터로 사용할 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns>이 데이터 형식에 대해 노출된 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />이거나, 속성이 없는 경우 <see langword="null" />입니다. 이 메서드는 항상 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>이 개체에서 속성을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>이 개체의 속성을 찾으려면 <see cref="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />를 호출하지 않아야 하므로 <see langword="false" />입니다. 이 메서드는 <see langword="true" />를 반환하지 않습니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ComplexBindingPropertiesAttribute">
      <summary>복합 데이터 바인딩을 지원하는 구성 요소의 데이터 소스 및 데이터 멤버 속성을 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor">
      <summary>매개 변수를 사용하지 않고 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String)">
      <summary>지정된 데이터 소스를 사용하여 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dataSource">데이터 소스로 사용할 속성의 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String,System.String)">
      <summary>지정된 데이터 소스와 데이터 멤버를 사용하여 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dataSource">데이터 소스로 사용할 속성의 이름입니다.</param>
      <param name="dataMember">데이터에 대한 소스로 사용할 속성의 이름입니다.</param>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataMember">
      <summary>
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />가 바인딩되는 구성 요소에 대한 데이터 멤버 속성의 이름을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />가 바인딩되는 구성 요소에 대한 데이터 멤버 속성의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataSource">
      <summary>
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />가 바인딩되는 구성 요소에 대한 데이터 소스 속성의 이름을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />가 바인딩되는 구성 요소에 대한 데이터 소스 속성의 이름입니다.</returns>
    </member>
    <member name="F:System.ComponentModel.ComplexBindingPropertiesAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 클래스의 기본값을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.Equals(System.Object)">
      <summary>지정한 <see cref="T:System.Object" />가 현재 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 인스턴스와 같은지 여부를 확인합니다.</summary>
      <param name="obj">현재 <see cref="T:System.Object" /> 인스턴스와 비교할 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />입니다.</param>
      <returns>개체가 현재 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 같지 않다고 나타내는 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentConverter">
      <summary>컴포넌트와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.#ctor(System.Type)">
      <summary>
        <see cref="T:System.ComponentModel.ComponentConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">이 구성 요소 변환기와 연결할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>값 매개 변수로 지정된 구성 요소의 형식에 대한 속성 컬렉션을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value">속성을 가져올 구성 요소의 형식을 지정하는 <see cref="T:System.Object" />입니다.</param>
      <param name="attributes">필터로 사용할 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns>구성 요소에 대해 노출된 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />이거나, 속성이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>지정된 컨텍스트를 사용하여, 이 개체에서 속성을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>이 개체의 속성을 찾으려면 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />를 호출해야 하기 때문에 <see langword="true" />입니다. 이 메서드는 <see langword="false" />를 반환하지 않습니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentEditor">
      <summary>사용자 지정 구성 요소 편집기의 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.ComponentEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>구성 요소를 편집하고 해당 구성 요소가 지정된 컨텍스트를 기반으로 수정되었는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="context">편집에 대한 추가 정보를 얻는 데 사용될 수 있는 선택적 컨텍스트 개체입니다.</param>
      <param name="component">편집될 구성 요소입니다.</param>
      <returns>구성 요소가 수정되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.Object)">
      <summary>구성 요소를 편집하고 해당 구성 요소가 수정되었는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="component">편집될 구성 요소입니다.</param>
      <returns>구성 요소가 수정되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentResourceManager">
      <summary>구성 요소나 개체의 리소스를 열거하는 간단한 기능을 제공합니다. <see cref="T:System.ComponentModel.ComponentResourceManager" /> 클래스는 <see cref="T:System.Resources.ResourceManager" />입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor">
      <summary>기본값을 사용하여 <see cref="T:System.ComponentModel.ComponentResourceManager" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor(System.Type)">
      <summary>지정된 <see cref="T:System.ComponentModel.ComponentResourceManager" />의 정보를 기초로 위성 어셈블리에서 리소스를 찾는 <see cref="T:System.Type" />를 만듭니다.</summary>
      <param name="t">
        <see cref="T:System.Type" />가 리소스 파일을 찾는 데 필요한 모든 정보를 파생시키는 <see cref="T:System.ComponentModel.ComponentResourceManager" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String)">
      <summary>리소스의 값을 개체의 해당 속성에 적용합니다.</summary>
      <param name="value">적용할 속성 값이 들어 있는 <see cref="T:System.Object" />입니다.</param>
      <param name="objectName">리소스에서 찾을 개체의 이름이 들어 있는 <see cref="T:System.String" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 또는 <paramref name="objectName" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary>리소스의 값을 개체의 해당 속성에 적용합니다.</summary>
      <param name="value">적용할 속성 값이 들어 있는 <see cref="T:System.Object" />입니다.</param>
      <param name="objectName">리소스에서 찾을 개체의 이름이 들어 있는 <see cref="T:System.String" />입니다.</param>
      <param name="culture">리소스를 적용할 문화권입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 또는 <paramref name="objectName" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.ComponentModel.Container">
      <summary>0개 이상의 구성 요소를 캡슐화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Container" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent)">
      <summary>지정된 <see cref="T:System.ComponentModel.Component" />을 <see cref="T:System.ComponentModel.Container" />에 추가합니다. 이름이 지정되지 않은 구성 요소입니다.</summary>
      <param name="component">추가할 구성 요소입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)">
      <summary>지정된 <see cref="T:System.ComponentModel.Component" />를 <see cref="T:System.ComponentModel.Container" />에 추가하고 이름을 지정합니다.</summary>
      <param name="component">추가할 구성 요소입니다.</param>
      <param name="name">구성 요소에 할당할 대/소문자를 구분하지 않는 고유한 이름  
또는 
 구성 요소의 이름을 지정하지 않는 <see langword="null" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />이 고유하지 않은 경우</exception>
    </member>
    <member name="P:System.ComponentModel.Container.Components">
      <summary>
        <see cref="T:System.ComponentModel.Container" />의 모든 구성 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Container" />에 있는 구성 요소를 포함하는 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>지정된 <see cref="T:System.ComponentModel.ISite" />의 <see cref="T:System.ComponentModel.IComponent" /> 사이트를 만들고 지정된 이름을 이 사이트에 할당합니다.</summary>
      <param name="component">해당 사이트를 만들 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
      <param name="name">
        <paramref name="component" />에 할당할 이름이거나, 이름을 할당하지 않으려면 <see langword="null" />입니다.</param>
      <returns>새로 만든 사이트입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose">
      <summary>
        <see cref="T:System.ComponentModel.Container" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.Container" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Container.Finalize">
      <summary>가비지 수집에 의해 <see cref="T:System.ComponentModel.Container" />가 회수되기 전에 관리되지 않는 리소스를 해제하고 기타 정리 작업을 수행합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Container.GetService(System.Type)">
      <summary>가능한 경우, 지정된 형식의 서비스 개체를 가져옵니다.</summary>
      <param name="service">검색할 서비스의 <see cref="T:System.Type" />입니다.</param>
      <returns>요청된 서비스를 구현하는 <see cref="T:System.Object" />이거나, 서비스를 확인할 수 없는 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)">
      <summary>
        <see cref="T:System.ComponentModel.Container" />에서 구성 요소를 제거합니다.</summary>
      <param name="component">제거할 구성 요소입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)">
      <summary>
        <see cref="T:System.ComponentModel.Container" />를 <see langword="null" />로 설정하지 않고 <see cref="P:System.ComponentModel.IComponent.Site" />에서 구성 요소를 제거합니다.</summary>
      <param name="component">제거할 구성 요소입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)">
      <summary>구성 요소 이름이 이 컨테이너에서 고유한지 여부를 확인합니다.</summary>
      <param name="component">명명된 구성 요소입니다.</param>
      <param name="name">유효성을 검사할 구성 요소 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />이 고유하지 않은 경우</exception>
    </member>
    <member name="T:System.ComponentModel.ContainerFilterService">
      <summary>컨테이너 필터 서비스에 대한 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.ContainerFilterService" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.FilterComponents(System.ComponentModel.ComponentCollection)">
      <summary>구성 요소 컬렉션을 필터링합니다.</summary>
      <param name="components">필터링할 구성 요소 컬렉션입니다.</param>
      <returns>수정된 컬렉션을 나타내는 <see cref="T:System.ComponentModel.ComponentCollection" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.CultureInfoConverter">
      <summary>
        <see cref="T:System.Globalization.CultureInfo" /> 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.CultureInfoConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>지정된 컨텍스트를 사용하여 이 변환기가 지정된 소스 형식의 개체를 <see cref="T:System.Globalization.CultureInfo" />으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 값 개체를 <see cref="T:System.Globalization.CultureInfo" />로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">변환할 대상 문화권을 지정하는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />가 유효하지 않은 문화권을 나타내는 경우</exception>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>주어진 값 개체를 지정한 대상 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">변환할 대상 문화권을 지정하는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType">값을 변환할 대상 <see cref="T:System.Type" />입니다.</param>
      <returns>변환된 <paramref name="value" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetCultureName(System.Globalization.CultureInfo)">
      <summary>지정된 문화권의 이름을 검색합니다.</summary>
      <param name="culture">이름을 가져올 문화권을 지정하는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <returns>지정된 문화권의 이름입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>지정한 컨텍스트를 사용하여 <see cref="T:System.Globalization.CultureInfo" /> 개체의 표준 값 컬렉션을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>유효한 표준 값 집합을 포함하는 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />이거나 데이터 형식이 표준 값 집합을 지원하지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />에서 반환된 표준 값 목록이 단독 목록인지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />에서 반환된 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />이 가능한 값을 모두 포함하는 단독 목록이 아니므로 <see langword="false" />입니다. 이 경우 다른 값을 사용할 수 있습니다. 이 메서드는 <see langword="true" />를 반환하지 않습니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>지정된 컨텍스트를 사용하여, 이 개체가 목록에서 선택할 수 있는 표준 값 집합을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>개체가 지원하는 공통되는 값 집합을 찾기 위해 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />를 호출해야 하므로 <see langword="true" />입니다. 이 메서드는 <see langword="false" />를 반환하지 않습니다.</returns>
    </member>
    <member name="T:System.ComponentModel.CustomTypeDescriptor">
      <summary>
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 인터페이스의 간단한 기본 구현을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
      <summary>부모 사용자 지정 형식 설명자를 사용하여 <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="parent">부모 사용자 지정 형식 설명자입니다.</param>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetAttributes">
      <summary>이 형식 설명자가 나타내는 형식에 대한 사용자 지정 특성의 컬렉션을 반환합니다.</summary>
      <returns>형식의 특성을 포함하는 <see cref="T:System.ComponentModel.AttributeCollection" />입니다. 기본값은 <see cref="F:System.ComponentModel.AttributeCollection.Empty" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetClassName">
      <summary>이 형식 설명자가 나타내는 클래스의 정규화된 이름을 반환합니다.</summary>
      <returns>이 형식 설명자가 설명하는 형식의 정규화된 클래스 이름을 포함하는 <see cref="T:System.String" />입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetComponentName">
      <summary>이 형식 설명자가 나타내는 클래스의 이름을 반환합니다.</summary>
      <returns>이 형식 설명자가 설명하는 구성 요소 인스턴스의 이름을 포함하는 <see cref="T:System.String" />입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetConverter">
      <summary>이 형식 설명자가 나타내는 형식에 대한 형식 변환기를 반환합니다.</summary>
      <returns>이 형식 설명자가 나타내는 형식에 대한 <see cref="T:System.ComponentModel.TypeConverter" />입니다. 기본값은 새로 만들어진 <see cref="T:System.ComponentModel.TypeConverter" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent">
      <summary>이 형식 설명자가 나타내는 개체의 기본 이벤트에 대한 이벤트 설명자를 반환합니다.</summary>
      <returns>이 형식 설명자가 나타내는 개체의 기본 이벤트에 대한 <see cref="T:System.ComponentModel.EventDescriptor" />입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultProperty">
      <summary>이 형식 설명자가 나타내는 개체의 기본 속성에 대한 속성 설명자를 반환합니다.</summary>
      <returns>이 형식 설명자가 나타내는 개체의 기본 속성에 대한 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEditor(System.Type)">
      <summary>이 형식 설명자가 나타내는 클래스와 연결될 지정된 형식의 편집기를 반환합니다.</summary>
      <param name="editorBaseType">검색할 편집기의 기본 형식입니다.</param>
      <returns>이 형식 설명자가 나타내는 클래스와 연결될 지정된 형식의 편집기입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents">
      <summary>이 형식 설명자가 나타내는 개체에 대한 이벤트 설명자의 컬렉션을 반환합니다.</summary>
      <returns>이 형식 설명자가 나타내는 개체에 대한 이벤트 설명자를 포함하는 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다. 기본값은 <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>이 형식 설명자가 나타내는 개체에 대한 이벤트 설명자의 필터링된 컬렉션을 반환합니다.</summary>
      <param name="attributes">필터로 사용할 특성의 배열입니다. 이 매개 변수는 <see langword="null" />이 될 수 있습니다.</param>
      <returns>이 형식 설명자가 나타내는 개체에 대한 이벤트 설명을 포함하는 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다. 기본값은 <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties">
      <summary>이 형식 설명자가 나타내는 개체에 대한 속성 설명자의 컬렉션을 반환합니다.</summary>
      <returns>이 형식 설명자가 나타내는 개체에 대한 속성 설명을 포함하는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다. 기본값은 <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>이 형식 설명자가 나타내는 개체에 대한 속성 설명자의 필터링된 컬렉션을 반환합니다.</summary>
      <param name="attributes">필터로 사용할 특성의 배열입니다. 이 매개 변수는 <see langword="null" />이 될 수 있습니다.</param>
      <returns>이 형식 설명자가 나타내는 개체에 대한 속성 설명을 포함하는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다. 기본값은 <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>지정된 속성 설명자가 설명하는 속성이 포함된 개체를 반환합니다.</summary>
      <param name="pd">소유 개체를 검색할 속성 설명자입니다.</param>
      <returns>형식 설명자가 지정하는 주어진 속성을 소유하는 <see cref="T:System.Object" />입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectAttribute">
      <summary>
        <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 개체에 바인딩하는 데 적합한 개체로 형식을 식별합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.DataObjectAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.DataObjectAttribute" /> 클래스의 새 인스턴스를 초기화하고 개체가 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 개체에 바인딩하는 데 적합한지 여부를 나타냅니다.</summary>
      <param name="isDataObject">개체가 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 개체에 바인딩하는 데 적합하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.DataObject">
      <summary>클래스가 디자인 타임에 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 개체에 바인딩하는 데 적합함을 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.Default">
      <summary>클래스가 디자인 타임에 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 개체에 바인딩하는 데 적합함을 나타내는 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 클래스의 기본값을 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.Equals(System.Object)">
      <summary>
        <see cref="T:System.ComponentModel.DataObjectAttribute" />의 이 인스턴스가 다른 개체의 패턴과 일치하는지 여부를 확인합니다.</summary>
      <param name="obj">이 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 인스턴스와 비교할 개체입니다.</param>
      <returns>이 인스턴스가 <paramref name="obj" /> 매개 변수에서 지정하는 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectAttribute.IsDataObject">
      <summary>개체가 디자인 타임에 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 개체에 바인딩하는 데 적합한 것으로 간주되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>개체가 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 개체에 바인딩하는 데 적합한 것으로 간주되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.IsDefaultAttribute">
      <summary>현재 특성 값이 해당 특성의 기본값인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 특성 값이 기본값이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.NonDataObject">
      <summary>클래스가 디자인 타임에 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 개체에 바인딩하는 데 적합하지 않음을 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="T:System.ComponentModel.DataObjectFieldAttribute">
      <summary>데이터 필드를 나타내는 속성에 대한 메타데이터를 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 클래스의 새 인스턴스를 초기화하고 필드가 데이터 행의 기본 키인지 여부를 나타냅니다.</summary>
      <param name="primaryKey">필드가 데이터 행의 기본 키에 있음을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 클래스의 새 인스턴스를 초기화하고 필드가 데이터 행의 기본 키인지 여부와 필드가 데이터베이스 ID 필드인지 여부를 나타냅니다.</summary>
      <param name="primaryKey">필드가 데이터 행의 기본 키에 있음을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="isIdentity">필드가 데이터 행을 고유하게 식별하는 ID 필드임을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 클래스의 새 인스턴스를 초기화하고 필드가 데이터 행의 기본 키인지 여부, 필드가 데이터베이스 ID 필드인지 여부 및 필드가 null일 수 있는지 여부를 나타냅니다.</summary>
      <param name="primaryKey">필드가 데이터 행의 기본 키에 있음을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="isIdentity">필드가 데이터 행을 고유하게 식별하는 ID 필드임을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="isNullable">필드가 데이터 저장소에서 null일 수 있음을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary>
        <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 클래스의 새 인스턴스를 초기화하며, 필드가 데이터 행의 기본 키인지 여부, 필드가 데이터베이스 ID 필드인지 여부 및 필드가 null일 수 있는지 여부를 나타내고 필드의 길이를 설정합니다.</summary>
      <param name="primaryKey">필드가 데이터 행의 기본 키에 있음을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="isIdentity">필드가 데이터 행을 고유하게 식별하는 ID 필드임을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="isNullable">필드가 데이터 저장소에서 null일 수 있음을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="length">필드의 길이(바이트)입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.Equals(System.Object)">
      <summary>이 인스턴스가 지정된 개체와 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="obj">이 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 인스턴스와 비교할 개체입니다.</param>
      <returns>이 인스턴스가 <paramref name="obj" /> 매개 변수에서 지정하는 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsIdentity">
      <summary>속성이 내부 데이터의 ID 필드를 나타내는지 여부를 보여 주는 값을 가져옵니다.</summary>
      <returns>속성이 내부 데이터의 ID 필드를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsNullable">
      <summary>속성이 내부 데이터 저장소에서 null일 수 있는 필드를 나타내는지 여부를 보여 주는 값을 가져옵니다.</summary>
      <returns>속성이 내부 데이터 저장소에서 null일 수 있는 필드를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.Length">
      <summary>속성의 길이(바이트)를 가져옵니다.</summary>
      <returns>속성의 길이(바이트)이거나, 설정되지 않았으면 -1입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.PrimaryKey">
      <summary>속성이 내부 데이터의 기본 키에 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>속성이 데이터 저장소의 기본 키에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodAttribute">
      <summary>형식에서 노출하는 데이터 작업 메서드, 메서드가 수행하는 작업의 형식 및 메서드가 기본 데이터 메서드인지 여부를 식별합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType)">
      <summary>
        <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 클래스의 새 인스턴스를 초기화하고 메서드가 수행하는 데이터 작업의 형식을 식별합니다.</summary>
      <param name="methodType">메서드가 수행하는 데이터 작업을 설명하는 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType,System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 클래스의 새 인스턴스를 초기화하고, 메서드가 수행하는 데이터 작업의 형식을 식별하며, 메서드가 데이터 개체에서 노출하는 기본 데이터 메서드인지 여부를 식별합니다.</summary>
      <param name="methodType">메서드가 수행하는 데이터 작업을 설명하는 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 값 중 하나입니다.</param>
      <param name="isDefault">특성이 적용되는 메서드가 지정된 <paramref name="methodType" />에 대한 데이터 개체의 기본 메서드임을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Equals(System.Object)">
      <summary>이 인스턴스가 지정된 개체와 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="obj">이 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 인스턴스와 비교할 개체입니다.</param>
      <returns>이 인스턴스가 <paramref name="obj" /> 매개 변수에서 지정하는 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.IsDefault">
      <summary>
        <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />가 적용되는 메서드가 특정 메서드 형식에 대한 데이터 개체에서 노출하는 기본 데이터 메서드인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>메서드가 메서드 형식에 대한 개체에서 노출하는 기본 메서드이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Match(System.Object)">
      <summary>이 인스턴스가 지정된 특성과 공통 패턴을 공유하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="obj">이 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 인스턴스와 비교할 개체입니다.</param>
      <returns>이 인스턴스가 <paramref name="obj" /> 매개 변수에서 지정하는 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.MethodType">
      <summary>메서드가 수행하는 데이터 작업의 형식을 나타내는 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.DataObjectMethodType" />가 적용되는 메서드가 수행하는 데이터 작업의 형식을 식별하는 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 값 중 하나입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodType">
      <summary>메서드가 수행하는 데이터 작업의 형식을 식별합니다. 데이터 작업의 형식은 메서드에 적용된 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />에 지정됩니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Delete">
      <summary>메서드가 데이터를 삭제하는 데이터 작업에 사용됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Fill">
      <summary>메서드가 <see cref="T:System.Data.DataSet" /> 개체를 채우는 데이터 작업에 사용됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Insert">
      <summary>메서드가 데이터를 삽입하는 데이터 작업에 사용됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Select">
      <summary>메서드가 데이터를 검색하는 데이터 작업에 사용됨을 나타냅니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Update">
      <summary>메서드가 데이터를 업데이트하는 데이터 작업에 사용됨을 나타냅니다.</summary>
    </member>
    <member name="T:System.ComponentModel.DateTimeConverter">
      <summary>
        <see cref="T:System.DateTime" /> 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.DateTimeConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>지정된 컨텍스트를 사용하여 이 변환기가 지정된 소스 형식의 개체를 <see cref="T:System.DateTime" />으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 개체가 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 값 개체를 <see cref="T:System.DateTime" />으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">선택적 <see cref="T:System.Globalization.CultureInfo" />입니다. 제공되지 않으면 현재 문화권으로 가정합니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <returns>변환된 <paramref name="value" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 대상 형식의 올바른 값이 아닌 경우</exception>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>인수를 사용하여 지정된 값 개체를 <see cref="T:System.DateTime" />로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">선택적 <see cref="T:System.Globalization.CultureInfo" />입니다. 제공되지 않으면 현재 문화권으로 가정합니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType">값을 변환할 대상 <see cref="T:System.Type" />입니다.</param>
      <returns>변환된 <paramref name="value" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="T:System.ComponentModel.DateTimeOffsetConverter">
      <summary>
        <see cref="T:System.DateTimeOffset" /> 구조와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.DateTimeOffsetConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>지정된 소스 형식의 개체를 <see cref="T:System.DateTimeOffset" />으로 변환할 수 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="context">날짜 서식 컨텍스트입니다.</param>
      <param name="sourceType">확인할 소스 형식입니다.</param>
      <returns>지정된 형식을 <see cref="T:System.DateTimeOffset" />으로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <see cref="T:System.DateTimeOffset" />을 지정된 형식의 개체로 변환할 수 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="context">날짜 서식 컨텍스트입니다.</param>
      <param name="destinationType">확인할 대상 형식입니다.</param>
      <returns>
        <see cref="T:System.DateTimeOffset" />을 지정된 형식으로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정한 개체를 <see cref="T:System.DateTimeOffset" />으로 변환합니다.</summary>
      <param name="context">날짜 서식 컨텍스트입니다.</param>
      <param name="culture">날짜 문화권입니다.</param>
      <param name="value">변환될 개체입니다.</param>
      <returns>지정된 개체를 나타내는 <see cref="T:System.DateTimeOffset" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <see cref="T:System.DateTimeOffset" />을 지정된 형식의 개체로 변환합니다.</summary>
      <param name="context">날짜 서식 컨텍스트입니다.</param>
      <param name="culture">날짜 문화권입니다.</param>
      <param name="value">변환될 <see cref="T:System.DateTimeOffset" />입니다.</param>
      <param name="destinationType">변환할 대상 형식입니다.</param>
      <returns>
        <see cref="T:System.DateTimeOffset" />을 나타내는 지정된 형식의 개체입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="T:System.ComponentModel.DecimalConverter">
      <summary>
        <see cref="T:System.Decimal" /> 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.DecimalConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>인수를 사용하여 지정된 값 개체를 <see cref="T:System.Decimal" />로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">선택적 <see cref="T:System.Globalization.CultureInfo" />입니다. 제공되지 않으면 현재 문화권으로 가정합니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType">값을 변환할 대상 <see cref="T:System.Type" />입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="T:System.ComponentModel.DefaultBindingPropertyAttribute">
      <summary>구성 요소의 기본 바인딩 속성을 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor">
      <summary>매개 변수를 사용하지 않고 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor(System.String)">
      <summary>지정된 속성 이름을 사용하여 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">기본 바인딩 속성의 이름입니다.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultBindingPropertyAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 클래스의 기본값을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.Equals(System.Object)">
      <summary>지정한 <see cref="T:System.Object" />가 현재 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 인스턴스와 같은지 여부를 확인합니다.</summary>
      <param name="obj">현재 <see cref="T:System.Object" /> 인스턴스와 비교할 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />입니다.</param>
      <returns>개체가 현재 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 같지 않다고 나타내는 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultBindingPropertyAttribute.Name">
      <summary>
        <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />가 바인딩되는 구성 요소에 대한 기본 바인딩 속성의 이름을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />가 바인딩되는 구성 요소에 대한 기본 바인딩 속성의 이름입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultEventAttribute">
      <summary>구성 요소의 기본 이벤트를 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.ComponentModel.DefaultEventAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">이 특성이 바인딩되는 구성 요소의 기본 이벤트 이름입니다.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultEventAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.DefaultEventAttribute" />의 기본값인 <see langword="null" />을 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.Equals(System.Object)">
      <summary>주어진 개체의 값이 현재 <see cref="T:System.ComponentModel.DefaultEventAttribute" />와 같은지 여부를 반환합니다.</summary>
      <param name="obj">값이 같은지 테스트할 개체입니다.</param>
      <returns>주어진 개체의 값이 현재 개체의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultEventAttribute.Name">
      <summary>이 특성이 바인딩되는 구성 요소의 기본 이벤트 이름을 가져옵니다.</summary>
      <returns>이 특성이 바인딩되는 구성 요소의 기본 이벤트 이름입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultPropertyAttribute">
      <summary>구성 요소의 기본 속성을 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">이 특성이 바인딩되는 구성 요소의 기본 속성 이름입니다.</param>
    </member>
    <member name="F:System.ComponentModel.DefaultPropertyAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />의 기본값인 <see langword="null" />을 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.Equals(System.Object)">
      <summary>주어진 개체의 값이 현재 <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />와 같은지 여부를 반환합니다.</summary>
      <param name="obj">값이 같은지 테스트할 개체입니다.</param>
      <returns>주어진 개체의 값이 현재 개체의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultPropertyAttribute.Name">
      <summary>이 특성이 바인딩되는 구성 요소의 기본 속성 이름을 가져옵니다.</summary>
      <returns>이 특성이 바인딩되는 구성 요소의 기본 속성 이름입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventArgs">
      <summary>
        <see cref="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ActiveDesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.Design.IDesignerHost)">
      <summary>
        <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="oldDesigner">문서의 활성화가 해제됩니다.</param>
      <param name="newDesigner">문서가 활성화됩니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.NewDesigner">
      <summary>활성화된 문서를 가져옵니다.</summary>
      <returns>문서가 활성화되는 것을 나타내는 <see cref="T:System.ComponentModel.Design.IDesignerHost" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.OldDesigner">
      <summary>활성화가 해제된 문서를 가져옵니다.</summary>
      <returns>문서의 활성화가 해제되는 것을 나타내는 <see cref="T:System.ComponentModel.Design.IDesignerHost" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventHandler">
      <summary>
        <see cref="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.CheckoutException">
      <summary>소스 코드 관리 프로그램에 체크 인된 파일을 체크 아웃하려는 경우 체크 아웃 작업이 취소되거나 실패했을 때 throw된 예외입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor">
      <summary>관련된 메시지나 오류 코드가 없는 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>지정된 serialization 데이터와 컨텍스트를 사용하여 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">deserialization에 사용할 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</param>
      <param name="context">deserialization에 사용할 대상입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String)">
      <summary>지정된 메시지를 사용하여 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Exception)">
      <summary>지정된 예외 및 자세한 설명을 사용하여 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류에 대한 자세한 설명입니다.</param>
      <param name="innerException">이 예외의 원인인 내부 예외에 대한 참조입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Int32)">
      <summary>지정된 메시지와 오류 코드를 사용하여 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다.</param>
      <param name="errorCode">전달할 오류 코드입니다.</param>
    </member>
    <member name="F:System.ComponentModel.Design.CheckoutException.Canceled">
      <summary>체크 아웃이 취소되었음을 나타내는 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 클래스의 새 인스턴스를 초기화합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.CommandID">
      <summary>숫자 명령 ID와 GUID 메뉴 그룹 식별자로 구성된 고유한 명령 식별자를 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.#ctor(System.Guid,System.Int32)">
      <summary>지정된 메뉴 그룹 GUID와 명령 ID 번호를 사용하여 <see cref="T:System.ComponentModel.Design.CommandID" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="menuGroup">해당 메뉴 명령이 속할 그룹의 GUID입니다.</param>
      <param name="commandID">이 메뉴 명령의 숫자 식별자입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.Equals(System.Object)">
      <summary>두 개의 <see cref="T:System.ComponentModel.Design.CommandID" /> 인스턴스가 같은지 여부를 확인합니다.</summary>
      <param name="obj">비교할 개체입니다.</param>
      <returns>지정된 개체가 이 개체와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.GetHashCode">
      <summary>특정 형식에 대한 해시 함수 역할을 합니다.</summary>
      <returns>현재 <see cref="T:System.Object" />의 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.Guid">
      <summary>이 <see cref="T:System.ComponentModel.Design.CommandID" />에 의해 확인된 메뉴 명령이 속할 메뉴 그룹의 GUID를 가져옵니다.</summary>
      <returns>해당 명령에 대한 명령 그룹의 GUID입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.ID">
      <summary>숫자 명령 ID를 가져옵니다.</summary>
      <returns>명령 ID 번호입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.ToString">
      <summary>현재 개체를 나타내는 <see cref="T:System.String" />을 반환합니다.</summary>
      <returns>명령 ID 정보, GUID와 정수 식별자 모두를 포함하는 문자열입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 이벤트에 대한 데이터를 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangedEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>
        <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="component">변경된 구성 요소입니다.</param>
      <param name="member">변경된 멤버를 나타내는 <see cref="T:System.ComponentModel.MemberDescriptor" />입니다.</param>
      <param name="oldValue">변경된 멤버의 이전 값입니다.</param>
      <param name="newValue">변경된 멤버의 새 값입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Component">
      <summary>수정된 구성 요소를 가져옵니다.</summary>
      <returns>수정된 구성 요소를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Member">
      <summary>변경된 멤버를 가져옵니다.</summary>
      <returns>변경된 멤버를 나타내는 <see cref="T:System.ComponentModel.MemberDescriptor" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.NewValue">
      <summary>변경된 멤버의 새 값을 가져옵니다.</summary>
      <returns>변경된 멤버의 새 값입니다. 이 속성이 <see langword="null" />일 수 있습니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.OldValue">
      <summary>변경된 멤버의 이전 값을 가져옵니다.</summary>
      <returns>변경된 멤버의 이전 값입니다. 이 속성이 <see langword="null" />일 수 있습니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventHandler">
      <summary>
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 이벤트에 대한 데이터를 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangingEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>
        <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="component">변경할 구성 요소입니다.</param>
      <param name="member">변경할 구성 요소의 멤버를 나타내는 <see cref="T:System.ComponentModel.MemberDescriptor" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Component">
      <summary>변경할 구성 요소 또는 변경할 멤버의 부모 컨테이너인 구성 요소를 가져옵니다.</summary>
      <returns>멤버를 변경할 구성 요소입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Member">
      <summary>변경할 멤버를 가져옵니다.</summary>
      <returns>변경할 멤버를 나타내면 <see cref="T:System.ComponentModel.MemberDescriptor" />이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventHandler">
      <summary>
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터가 들어 있는 <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> 이벤트입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />, <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> 및 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentEventArgs.#ctor(System.ComponentModel.IComponent)">
      <summary>
        <see cref="T:System.ComponentModel.Design.ComponentEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="component">이벤트 소스인 구성 요소입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentEventArgs.Component">
      <summary>이벤트와 관련된 구성 요소를 가져옵니다.</summary>
      <returns>이벤트와 관련된 구성 요소입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventHandler">
      <summary>구성 요소 수준의 이벤트에서 발생한 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" /> , <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" /> , <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> 및 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> 이벤트를 처리하는 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentRenameEventArgs.#ctor(System.Object,System.String,System.String)">
      <summary>
        <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="component">이름을 바꿀 구성 요소입니다.</param>
      <param name="oldName">구성 요소의 이전 이름입니다.</param>
      <param name="newName">구성 요소의 새 이름입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.Component">
      <summary>이름을 바꿀 구성 요소를 가져옵니다.</summary>
      <returns>이름을 바꿀 구성 요소입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.NewName">
      <summary>이벤트의 이름을 바꾼 후에 구성 요소의 이름을 가져옵니다.</summary>
      <returns>이벤트 이름을 바꾼 후의 구성 요소 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.OldName">
      <summary>이벤트 이름을 바꾸기 전에 구성 요소 이름을 가져옵니다.</summary>
      <returns>구성 요소의 이전 이름입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventHandler">
      <summary>
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerCollection">
      <summary>디자이너의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.Collections.IList)">
      <summary>지정된 디자이너 집합을 포함하는 <see cref="T:System.ComponentModel.Design.DesignerCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="designers">추가할 디자이너의 컬렉션이 들어 있는 목록입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.ComponentModel.Design.IDesignerHost[])">
      <summary>지정된 디자이너를 포함하는 <see cref="T:System.ComponentModel.Design.DesignerCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="designers">저장할 <see cref="T:System.ComponentModel.Design.IDesignerHost" /> 개체의 배열입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Count">
      <summary>컬렉션의 디자이너 수를 가져옵니다.</summary>
      <returns>컬렉션의 디자이너 수입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.GetEnumerator">
      <summary>이 컬렉션에 대한 새 열거자를 가져옵니다.</summary>
      <returns>컬렉션을 열거하는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Item(System.Int32)">
      <summary>지정된 인덱스의 디자이너를 가져옵니다.</summary>
      <param name="index">반환할 디자이너의 인덱스입니다.</param>
      <returns>지정된 인덱스의 디자이너입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>특정 <see cref="T:System.Array" /> 인덱스부터 시작하여 컬렉션의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">컬렉션에서 복사한 요소의 대상인 1차원 <see cref="T:System.Array" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#Count">
      <summary>컬렉션에 포함된 요소 수를 가져옵니다.</summary>
      <returns>컬렉션에 포함된 요소 수입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#SyncRoot">
      <summary>컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>이 컬렉션에 대한 새 열거자를 가져옵니다.</summary>
      <returns>컬렉션을 열거하는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> 및 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="host">문서의 <see cref="T:System.ComponentModel.Design.IDesignerHost" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerEventArgs.Designer">
      <summary>문서의 호스트를 가져옵니다.</summary>
      <returns>문서의 <see cref="T:System.ComponentModel.Design.IDesignerHost" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventHandler">
      <summary>문서를 만들거나 삭제할 때 발생하는 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> 및 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.DesignerEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService">
      <summary>디자이너에 대한 옵션 값을 가져오고 설정하는 데 사용할 수 있는 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerOptionService" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.CreateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.String,System.Object)">
      <summary>지정한 이름을 사용하여 새 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />을 만들고 지정된 부모에 추가합니다.</summary>
      <param name="parent">부모 디자이너 옵션 컬렉션입니다. 루트 개체 컬렉션을 제외한 모든 컬렉션에는 부모가 있습니다.</param>
      <param name="name">이 컬렉션의 이름입니다.</param>
      <param name="value">이 컬렉션의 속성을 제공하는 개체입니다. 컬렉션이 속성을 제공하지 않을 경우 <see langword="null" />일 수 있습니다.</param>
      <returns>지정된 이름을 가진 새 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parent" /> 또는 <paramref name="name" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />이 빈 문자열인 경우</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection">
      <summary>디자이너 옵션의 컬렉션을 포함합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>대상 배열의 지정된 인덱스에서 시작하여 전체 컬렉션을 호환되는 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">컬렉션에서 복사한 요소의 대상인 1차원 <see cref="T:System.Array" />입니다. <paramref name="array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Count">
      <summary>이 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />에 포함된 자식 옵션 컬렉션의 수를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />에 포함된 자식 옵션 컬렉션의 수입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.GetEnumerator">
      <summary>이 컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />를 반환합니다.</summary>
      <returns>이 컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.IndexOf(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>이 컬렉션의 범위에서 맨 처음 발견되는 특정 값의 인덱스를 반환합니다.</summary>
      <param name="value">컬렉션에서 찾을 개체입니다.</param>
      <returns>발견된 값이 있으면 전체 컬렉션에서 맨 처음 발견되는 값의 인덱스이고, 그렇지 않으면 컬렉션의 하한에서 1을 뺀 값입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.Int32)">
      <summary>제공된 인덱스에 있는 자식 컬렉션을 가져옵니다.</summary>
      <param name="index">가져올 자식 컬렉션의 인덱스(0부터 시작)입니다.</param>
      <returns>지정된 인덱스에 있는 자식 컬렉션입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.String)">
      <summary>제공된 이름에 있는 자식 컬렉션을 가져옵니다.</summary>
      <param name="name">자식 컬렉션의 이름입니다.</param>
      <returns>
        <paramref name="name" /> 매개 변수에 의해 지정된 이름을 가진 자식 컬렉션이거나, 이름을 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Name">
      <summary>이 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />의 이름을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Parent">
      <summary>부모 컬렉션 개체를 가져옵니다.</summary>
      <returns>부모 컬렉션 개체이거나, 부모가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Properties">
      <summary>이 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />이 제공하는 속성 컬렉션과 컬렉션의 모든 자식을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />이 제공하는 속성 컬렉션과 컬렉션의 모든 자식입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.ShowDialog">
      <summary>사용자가 이 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />의 옵션을 구성하는 데 사용할 수 있는 대화 상자 UI(사용자 인터페이스)를 표시합니다.</summary>
      <returns>대화 상자를 표시할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary>컬렉션에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션에 대한 액세스가 동기화되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#SyncRoot">
      <summary>컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Add(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" />에 항목을 추가합니다.</summary>
      <param name="value">
        <see cref="T:System.Object" />에 추가할 <see cref="T:System.Collections.IList" />입니다.</param>
      <returns>새 요소가 삽입된 위치입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Clear">
      <summary>컬렉션에서 모든 항목을 제거합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Contains(System.Object)">
      <summary>컬렉션에 특정 값이 있는지 여부를 확인합니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.Object" />입니다.</param>
      <returns>
        <see cref="T:System.Object" />가 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>컬렉션에 있는 특정 항목의 인덱스를 확인합니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.Object" />입니다.</param>
      <returns>목록에 있으면 <paramref name="value" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>항목을 컬렉션 내의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index">
        <paramref name="value" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="value">컬렉션에 삽입할 <see cref="T:System.Object" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsFixedSize">
      <summary>컬렉션의 크기가 고정되어 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션의 크기가 고정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsReadOnly">
      <summary>컬렉션이 읽기 전용인지를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션이 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary>지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</summary>
      <param name="index">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</param>
      <returns>지정한 인덱스의 요소입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary>컬렉션에서 첫 번째로 나타나는 특정 개체를 제거합니다.</summary>
      <param name="value">컬렉션에서 제거할 <see cref="T:System.Object" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>지정된 인덱스에서 컬렉션 항목을 제거합니다.</summary>
      <param name="index">제거할 항목의 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.Options">
      <summary>이 서비스에 대한 옵션 컬렉션을 가져옵니다.</summary>
      <returns>사용 가능한 디자이너 옵션으로 채워진 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />을 채웁니다.</summary>
      <param name="options">채울 컬렉션입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.ShowDialog(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.Object)">
      <summary>지정한 개체에 대한 옵션 대화 상자를 표시합니다.</summary>
      <param name="options">호출할 개체가 포함된 옵션 컬렉션입니다.</param>
      <param name="optionObject">실제 옵션 개체입니다.</param>
      <returns>대화 상자가 표시되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#GetOptionValue(System.String,System.String)">
      <summary>이 패키지에 정의된 옵션 값을 가져옵니다.</summary>
      <param name="pageName">옵션이 바인딩될 페이지입니다.</param>
      <param name="valueName">옵션 값의 이름입니다.</param>
      <returns>이름이 <paramref name="valueName" />인 옵션 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pageName" /> 또는 <paramref name="valueName" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#SetOptionValue(System.String,System.String,System.Object)">
      <summary>이 패키지에 정의된 옵션 값을 설정합니다.</summary>
      <param name="pageName">옵션이 바인딩될 페이지입니다.</param>
      <param name="valueName">옵션 값의 이름입니다.</param>
      <param name="value">옵션의 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pageName" /> 또는 <paramref name="valueName" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransaction">
      <summary>성능을 개선하고 대부분의 종류의 변경을 취소할 수 있도록 일련의 디자인 타임 동작을 그룹화하는 방법을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor">
      <summary>설명을 사용하지 않고 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)">
      <summary>지정된 트랜잭션 설명을 사용하여 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="description">이 트랜잭션에 대한 설명입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Cancel">
      <summary>트랜잭션을 취소하고 트랜잭션의 이벤트에 의해 변경된 내용을 롤백합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Canceled">
      <summary>트랜잭션이 취소되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>트랜잭션이 취소되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Commit">
      <summary>이 트랜잭션을 커밋합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Committed">
      <summary>트랜잭션이 커밋되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>트랜잭션이 커밋되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Description">
      <summary>트랜잭션에 대한 설명을 가져옵니다.</summary>
      <returns>트랜잭션에 대한 설명입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerTransaction" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Finalize">
      <summary>이 개체와 연결된 리소스를 해제합니다. 이 재정의는 이 트랜잭션이 이미 커밋되지 않은 경우 트랜잭션을 커밋합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCancel">
      <summary>
        <see langword="Cancel" /> 이벤트를 발생시킵니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCommit">
      <summary>트랜잭션을 실제로 커밋하는 작업을 수행합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerTransaction" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 및 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean)">
      <summary>디자이너가 트랜잭션에서 <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />을 호출할지 여부를 나타내는 지정된 값을 사용하여 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="commit">트랜잭션을 커밋할지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean,System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="commit">트랜잭션을 커밋할지 여부를 나타내는 값입니다.</param>
      <param name="lastTransaction">이 트랜잭션이 닫을 마지막 트랜잭션이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.LastTransaction">
      <summary>이 트랜잭션이 닫을 마지막 트랜잭션인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 트랜잭션이 닫을 마지막 트랜잭션이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.TransactionCommitted">
      <summary>디자이너가 트랜잭션에서 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />을 호출할지 여부를 나타냅니다.</summary>
      <returns>디자이너가 트랜잭션에서 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />을 호출한 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventHandler">
      <summary>디자이너의 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 및 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerb">
      <summary>디자이너에서 실행할 수 있는 동사를 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="text">사용자에게 표시되는 메뉴 명령의 텍스트입니다.</param>
      <param name="handler">동사 작업을 수행하는 이벤트 처리기입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="text">사용자에게 표시되는 메뉴 명령의 텍스트입니다.</param>
      <param name="handler">동사 작업을 수행하는 이벤트 처리기입니다.</param>
      <param name="startCommandID">해당 동사에 대한 시작 명령 ID입니다. 기본적으로 디자이너 아키텍처는 동사에 대한 명령 ID의 범위를 따로 만듭니다. 사용자 지정 명령 ID를 제공하여 이 범위를 재정의할 수 있습니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Description">
      <summary>동사의 메뉴 항목에 대한 설명을 가져오거나 설정합니다.</summary>
      <returns>메뉴 항목을 설명하는 문자열입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Text">
      <summary>메뉴의 동사 명령에 대한 텍스트 설명을 가져옵니다.</summary>
      <returns>동사 명령에 대한 설명입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.ToString">
      <summary>
        <see cref="M:System.Object.ToString" />를 재정의합니다.</summary>
      <returns>동사의 텍스트이거나, 텍스트 필드가 비어 있는 경우 빈 문자열("")입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerbCollection">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor(System.ComponentModel.Design.DesignerVerb[])">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 개체의 지정된 배열을 사용하여 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션에 포함할 동사를 나타내는 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Add(System.ComponentModel.Design.DesignerVerb)">
      <summary>지정된 <see cref="T:System.ComponentModel.Design.DesignerVerb" />를 컬렉션에 추가합니다.</summary>
      <param name="value">컬렉션에 추가할 <see cref="T:System.ComponentModel.Design.DesignerVerb" />입니다.</param>
      <returns>동사가 추가된 컬렉션의 인덱스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerb[])">
      <summary>디자이너 동사의 지정된 집합을 컬렉션에 추가합니다.</summary>
      <param name="value">컬렉션에 추가할 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 가 <see langword="null" />일 수 있습니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerbCollection)">
      <summary>디자이너 동사의 지정된 컬렉션을 컬렉션에 추가합니다.</summary>
      <param name="value">컬렉션에 추가할 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Contains(System.ComponentModel.Design.DesignerVerb)">
      <summary>지정된 <see cref="T:System.ComponentModel.Design.DesignerVerb" />가 컬렉션에 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value">컬렉션에서 검색할 <see cref="T:System.ComponentModel.Design.DesignerVerb" />입니다.</param>
      <returns>지정된 개체가 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.CopyTo(System.ComponentModel.Design.DesignerVerb[],System.Int32)">
      <summary>지정된 대상 인덱스에서 시작하는 지정된 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 배열에 컬렉션 멤버를 복사합니다.</summary>
      <param name="array">컬렉션 멤버를 복사할 배열입니다.</param>
      <param name="index">복사를 시작할 대상 인덱스입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.IndexOf(System.ComponentModel.Design.DesignerVerb)">
      <summary>지정된 <see cref="T:System.ComponentModel.Design.DesignerVerb" />의 인덱스를 가져옵니다.</summary>
      <param name="value">컬렉션에서 가져올 인덱스의 <see cref="T:System.ComponentModel.Design.DesignerVerb" />입니다.</param>
      <returns>목록에 있으면 지정된 개체의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerVerb)">
      <summary>지정된 인덱스에 지정된 <see cref="T:System.ComponentModel.Design.DesignerVerb" />를 삽입합니다.</summary>
      <param name="index">동사를 삽입할 컬렉션의 인덱스입니다.</param>
      <param name="value">컬렉션에 삽입할 <see cref="T:System.ComponentModel.Design.DesignerVerb" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerbCollection.Item(System.Int32)">
      <summary>지정된 인덱스에 있는 <see cref="T:System.ComponentModel.Design.DesignerVerb" />를 가져오거나 설정합니다.</summary>
      <param name="index">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" />를 가져오거나 설정할 인덱스입니다.</param>
      <returns>컬렉션의 유효한 각 인덱스에 있는 <see cref="T:System.ComponentModel.Design.DesignerVerb" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnClear">
      <summary>
        <see langword="Clear" /> 이벤트를 발생시킵니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnInsert(System.Int32,System.Object)">
      <summary>
        <see langword="Insert" /> 이벤트를 발생시킵니다.</summary>
      <param name="index">항목을 삽입할 인덱스입니다.</param>
      <param name="value">삽입할 개체입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnRemove(System.Int32,System.Object)">
      <summary>
        <see langword="Remove" /> 이벤트를 발생시킵니다.</summary>
      <param name="index">항목을 제거할 인덱스입니다.</param>
      <param name="value">제거할 개체입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>
        <see langword="Set" /> 이벤트를 발생시킵니다.</summary>
      <param name="index">항목을 설정할 인덱스입니다.</param>
      <param name="oldValue">이전 개체입니다.</param>
      <param name="newValue">새 개체입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnValidate(System.Object)">
      <summary>
        <see langword="Validate" /> 이벤트를 발생시킵니다.</summary>
      <param name="value">유효성을 검사할 개체입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Remove(System.ComponentModel.Design.DesignerVerb)">
      <summary>지정된 <see cref="T:System.ComponentModel.Design.DesignerVerb" />를 컬렉션에서 제거합니다.</summary>
      <param name="value">컬렉션에서 제거할 <see cref="T:System.ComponentModel.Design.DesignerVerb" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContext">
      <summary>디자인 타임에서 라이선스 공급자를 지원할 수 있는 디자인 타임 라이선스 컨텍스트를 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>저장된 라이선스 키를 가져옵니다.</summary>
      <param name="type">라이선스 키의 형식입니다.</param>
      <param name="resourceAssembly">키를 가져올 어셈블리입니다.</param>
      <returns>지정된 형식과 일치하는 저장된 라이선스 키입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>저장된 라이선스 키를 설정합니다.</summary>
      <param name="type">라이선스 키의 형식입니다.</param>
      <param name="key">라이선스 키입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesigntimeLicenseContext.UsageMode">
      <summary>라이선스 사용 모드를 가져옵니다.</summary>
      <returns>컨텍스트에 대한 라이선스 모드를 나타내는 <see cref="T:System.ComponentModel.LicenseUsageMode" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContextSerializer">
      <summary>디자인 타임 라이선스 컨텍스트 serialization에 대한 지원을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)">
      <summary>지정된 키와 출력 스트림을 사용하여 지정된 디자인 타임 라이선스 컨텍스트 내의 라이선스를 serialize합니다.</summary>
      <param name="o">출력할 스트림입니다.</param>
      <param name="cryptoKey">암호화에 사용할 키입니다.</param>
      <param name="context">라이선스 컨텍스트를 나타내는 <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.HelpContextType">
      <summary>도움말 정보에 대한 요청이 발생한 컨텍스트 정보를 나타내는 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Ambient">
      <summary>일반 컨텍스트입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Selection">
      <summary>선택 영역입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.ToolWindowSelection">
      <summary>도구 창 선택 영역입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Window">
      <summary>창입니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordAttribute">
      <summary>클래스나 멤버의 컨텍스트 키워드를 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="keyword">도움말 키워드 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.Type)">
      <summary>제공된 형식에서 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="t">도움말 키워드를 가져올 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />의 기본값을 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.Equals(System.Object)">
      <summary>두 개의 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 인스턴스가 같은지 여부를 확인합니다.</summary>
      <param name="obj">현재 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />과 비교할 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />입니다.</param>
      <returns>지정된 <see langword="true" />가 현재<see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />와 같으면 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>현재 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.HelpKeywordAttribute.HelpKeyword">
      <summary>이 특성이 제공하는 도움말 키워드를 가져옵니다.</summary>
      <returns>이 특성이 제공하는 도움말 키워드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.IsDefaultAttribute">
      <summary>도움말 키워드가 <see langword="null" />인지 여부를 확인합니다.</summary>
      <returns>도움말 키워드가 <see langword="true" />이면 <see langword="null" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordType">
      <summary>도움말 키워드의 형식을 나타내는 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.F1Keyword">
      <summary>도움말 요청을 위해 F1 키를 누르는 키워드입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.FilterKeyword">
      <summary>필터 키워드입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.GeneralKeyword">
      <summary>일반 키워드입니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentChangeService">
      <summary>구성 요소를 추가, 변경, 제거하거나 구성 요소의 이름을 바꾸는 이벤트에 대한 이벤트 처리기를 추가하고 제거하는 인터페이스를 제공하며 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 또는 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 이벤트를 발생시키는 메서드를 제공합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded">
      <summary>구성 요소가 추가되면 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding">
      <summary>구성 요소가 추가되는 동안에 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged">
      <summary>구성 요소가 변경되면 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging">
      <summary>구성 요소가 변경되는 동안에 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved">
      <summary>구성 요소가 제거되면 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving">
      <summary>구성 요소가 제거되는 동안에 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename">
      <summary>구성 요소의 이름을 바꾸면 발생합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>구성 요소 변경 서비스에 특정 구성 요소가 변경되었음을 알립니다.</summary>
      <param name="component">변경된 구성 요소입니다.</param>
      <param name="member">변경된 멤버입니다. 이 변경 사항이 단일 멤버와 관련되어 있지 않으면 이 멤버는 <see langword="null" />이 됩니다.</param>
      <param name="oldValue">멤버의 이전 값입니다. 이 값은 멤버가 <see langword="null" />이 아닌 경우에만 유효합니다.</param>
      <param name="newValue">멤버의 새 값입니다. 이 값은 멤버가 <see langword="null" />이 아닌 경우에만 유효합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>구성 요소 변경 서비스에 특정 구성 요소가 변경 중임을 알립니다.</summary>
      <param name="component">변경할 구성 요소입니다.</param>
      <param name="member">변경 중인 멤버입니다. 이 변경 사항이 단일 멤버와 관련되어 있지 않으면 이 멤버는 <see langword="null" />이 됩니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentDiscoveryService">
      <summary>디자인 타임에 구성 요소 열거형을 사용합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
      <summary>사용할 수 있는 구성 요소 형식의 목록을 가져옵니다.</summary>
      <param name="designerHost">디자인 타임 서비스를 제공하는 디자이너 호스트입니다. <see langword="null" />일 수 있습니다.</param>
      <param name="baseType">검색할 구성 요소를 지정하는 기본 형식입니다. <see langword="null" />일 수 있습니다.</param>
      <returns>사용할 수 있는 구성 요소 형식의 목록입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentInitializer">
      <summary>구성 요소를 만드는 동안 권장 기본값 집합을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary>구성 요소의 인스턴스를 기본 상태로 복원합니다.</summary>
      <param name="defaultValues">구성 요소 상태를 다시 설정하는 데 사용되는 이름/값 쌍인 기본 속성 값의 사전입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeNewComponent(System.Collections.IDictionary)">
      <summary>권장 값 집합을 사용하여 새 구성 요소를 초기화합니다.</summary>
      <param name="defaultValues">구성 요소 상태를 초기화하는 데 사용되는 이름/값 쌍인 기본 속성 값의 사전입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesigner">
      <summary>사용자 지정 디자이너를 빌드하기 위한 기본 프레임워크를 제공합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Component">
      <summary>해당 디자이너가 디자인하고 있는 기본 구성 요소를 가져옵니다.</summary>
      <returns>해당 디자이너가 디자인하고 있는 기본 구성 요소를 나타내는 <see cref="T:System.ComponentModel.IComponent" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.DoDefaultAction">
      <summary>이 디자이너에 대한 기본 작업을 수행합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>디자이너를 지정된 구성 요소로 초기화합니다.</summary>
      <param name="component">해당 디자이너와 관련된 구성 요소입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Verbs">
      <summary>디자이너가 지원하는 디자인 타임 동사의 컬렉션을 가져옵니다.</summary>
      <returns>디자이너가 지원하는 동사를 포함하는 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 또는 구성 요소에 동사가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerEventService">
      <summary>루트 디자이너가 추가되거나 제거되는 경우, 선택된 구성 요소가 변경되는 경우 및 현재 루트 디자이너가 변경되는 경우에 이벤트 알림을 제공합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner">
      <summary>현재 활성화된 문서의 루트 디자이너를 가져옵니다.</summary>
      <returns>현재 활성화되어 있는 문서이거나, 활성화된 문서가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged">
      <summary>현재 루트 디자이너가 변경될 때 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated">
      <summary>루트 디자이너를 만들 때 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed">
      <summary>문서의 루트 디자이너가 삭제될 때 발생합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.Designers">
      <summary>개발 환경에서 현재 활성화된 디자인 문서에 대한 루트 디자이너의 컬렉션을 가져옵니다.</summary>
      <returns>만든 후 아직 삭제하지 않은 루트 디자이너가 포함된 <see cref="T:System.ComponentModel.Design.DesignerCollection" />입니다.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.SelectionChanged">
      <summary>현재 디자인 뷰 선택 항목이 변경될 때 발생합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerFilter">
      <summary>구성 요소 디자이너에서 디자인 타임 환경에 노출될 수 있는 속성, 특성 및 이벤트 설명자가 저장되어 있는 <see cref="T:System.ComponentModel.TypeDescriptor" />의 사전을 디자이너에서 액세스하고 필터링할 수 있도록 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)">
      <summary>파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 특성 집합에서 항목을 변경하거나 제거할 수 있습니다.</summary>
      <param name="attributes">구성 요소의 클래스에 대한 <see cref="T:System.Attribute" /> 개체입니다. 특성의 사전에 포함된 키는 특성의 <see cref="P:System.Attribute.TypeId" /> 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)">
      <summary>파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 이벤트 집합에서 항목을 변경하거나 제거하도록 합니다.</summary>
      <param name="events">구성 요소 클래스의 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptor" /> 개체입니다. 이벤트의 사전에 포함된 키는 이벤트 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)">
      <summary>파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 속성 집합에서 항목을 변경하거나 제거할 수 있습니다.</summary>
      <param name="properties">구성 요소 클래스의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체입니다. 속성의 사전에 포함된 키는 속성 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)">
      <summary>파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 특성 집합에 항목을 추가하도록 합니다.</summary>
      <param name="attributes">구성 요소의 클래스에 대한 <see cref="T:System.Attribute" /> 개체입니다. 특성의 사전에 포함된 키는 특성의 <see cref="P:System.Attribute.TypeId" /> 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)">
      <summary>파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 이벤트 집합에 항목을 추가하도록 합니다.</summary>
      <param name="events">구성 요소 클래스의 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptor" /> 개체입니다. 이벤트의 사전에 포함된 키는 이벤트 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)">
      <summary>파생 클래스에서 재정의할 때 디자이너에서 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출된 속성 집합에 항목을 추가하도록 합니다.</summary>
      <param name="properties">구성 요소 클래스의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체입니다. 속성의 사전에 포함된 키는 속성 이름입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHost">
      <summary>디자이너 트랜잭션과 구성 요소를 관리하기 위한 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.Activate">
      <summary>이 호스트가 호스팅 중인 디자이너를 활성화합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Activated">
      <summary>이 디자이너가 활성화될 때 발생합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Container">
      <summary>이 디자이너 호스트에 대한 컨테이너를 가져옵니다.</summary>
      <returns>이 호스트에 대한 <see cref="T:System.ComponentModel.IContainer" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)">
      <summary>지정된 형식의 구성 요소를 만들어 디자인 문서에 추가합니다.</summary>
      <param name="componentClass">만들 구성 요소의 형식입니다.</param>
      <returns>새로 만들어진 구성 요소입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)">
      <summary>지정된 형식과 이름의 구성 요소를 만들어 디자인 문서에 추가합니다.</summary>
      <param name="componentClass">만들 구성 요소의 형식입니다.</param>
      <param name="name">구성 요소의 이름입니다.</param>
      <returns>새로 만들어진 구성 요소입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction">
      <summary>이벤트 순서를 캡슐화하여 성능을 개선하고 다시 실행 및 실행 취소 기능을 지원할 수 있는 <see cref="T:System.ComponentModel.Design.DesignerTransaction" />을 만듭니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignerTransaction" />의 새 인스턴스입니다. 트랜잭션 단계를 완료할 때 이 개체에 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />을 호출해야 합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)">
      <summary>지정된 트랜잭션 설명을 통해 이벤트 순서를 캡슐화하여 성능을 개선하고 다시 실행 및 실행 취소 기능을 지원할 수 있는 <see cref="T:System.ComponentModel.Design.DesignerTransaction" />을 만듭니다.</summary>
      <param name="description">새로 만들어진 트랜잭션에 대한 제목 또는 설명입니다.</param>
      <returns>새 <see cref="T:System.ComponentModel.Design.DesignerTransaction" />입니다. 트랜잭션 단계를 완료했으면 이 개체에 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />을 호출해야 합니다.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Deactivated">
      <summary>이 디자이너가 비활성화될 때 발생합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)">
      <summary>지정된 구성 요소를 소멸시키고 디자이너 컨테이너에서 이를 제거합니다.</summary>
      <param name="component">소멸시킬 구성 요소입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)">
      <summary>지정된 구성 요소가 들어 있는 디자이너 인스턴스를 가져옵니다.</summary>
      <param name="component">디자이너를 검색할 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesigner" />이거나, 지정된 구성 요소에 대한 디자이너가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetType(System.String)">
      <summary>지정된, 정규화된 형식 이름의 인스턴스를 가져옵니다.</summary>
      <param name="typeName">로드할 형식의 이름입니다.</param>
      <returns>지정된 형식 이름에 대한 형식 개체이거나, 형식을 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.InTransaction">
      <summary>디자이너 호스트가 현재 트랜잭션에 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>트랜잭션이 처리 중이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.LoadComplete">
      <summary>이 디자이너에서 문서 로드를 완료할 때 발생합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Loading">
      <summary>디자이너 호스트가 현재 문서를 로드 중인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>디자이너 호스트가 현재 문서를 로드 중이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponent">
      <summary>현재 디자인에 대한 루트 구성 요소로 사용된 기본 클래스의 인스턴스를 가져옵니다.</summary>
      <returns>루트 구성 요소 클래스의 인스턴스입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponentClassName">
      <summary>디자인하고 있는 클래스의 정규화된 이름을 가져옵니다.</summary>
      <returns>기본 구성 요소 클래스의 정규화된 이름입니다.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed">
      <summary>
        <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 이벤트에 대한 이벤트 처리기를 추가합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing">
      <summary>
        <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 이벤트에 대한 이벤트 처리기를 추가합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.TransactionDescription">
      <summary>현재 트랜잭션에 대한 설명을 가져옵니다.</summary>
      <returns>현재 트랜잭션에 대한 설명입니다.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened">
      <summary>
        <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened" /> 이벤트에 대한 이벤트 처리기를 추가합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening">
      <summary>
        <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening" /> 이벤트에 대한 이벤트 처리기를 추가합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHostTransactionState">
      <summary>디자이너 호스트가 트랜잭션의 상태에 대해 보고할 수 있는 메서드를 지정합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHostTransactionState.IsClosingTransaction">
      <summary>디자이너 호스트가 트랜잭션을 닫고 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>디자이너가 트랜잭션을 닫고 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerOptionService">
      <summary>Visual Studio 개발 환경에서 옵션 명령 아래에 있는 도구 메뉴에 위치한 디자이너 옵션에 대한 액세스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(System.String,System.String)">
      <summary>지정된 Windows Forms 디자이너 옵션의 값을 가져옵니다.</summary>
      <param name="pageName">옵션을 정의하는 페이지의 이름입니다.</param>
      <param name="valueName">옵션 속성의 이름입니다.</param>
      <returns>지정된 옵션의 값입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(System.String,System.String,System.Object)">
      <summary>지정된 Windows Forms 디자이너 옵션의 값을 설정합니다.</summary>
      <param name="pageName">옵션을 정의하는 페이지의 이름입니다.</param>
      <param name="valueName">옵션 속성의 이름입니다.</param>
      <param name="value">새 값입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDictionaryService">
      <summary>디자이너가 사용자 정의 데이터를 저장하는 데 사용할 수 있는 서비스를 통해 구성 요소 사이트별 키/값 쌍 기본 사전을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetKey(System.Object)">
      <summary>지정한 값에 해당하는 키를 가져옵니다.</summary>
      <param name="value">사전에서 찾을 값입니다.</param>
      <returns>관련된 키이거나, 키가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetValue(System.Object)">
      <summary>지정한 키에 해당하는 값을 가져옵니다.</summary>
      <param name="key">값을 찾을 키입니다.</param>
      <returns>관련된 값이거나, 값이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.SetValue(System.Object,System.Object)">
      <summary>지정된 키-값 쌍을 설정합니다.</summary>
      <param name="key">값을 연결할 키로 사용할 개체입니다.</param>
      <param name="value">저장할 값입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IEventBindingService">
      <summary>구성 요소 이벤트의 이벤트 처리기를 등록하기 위한 서비스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>지정된 구성 요소와 이벤트에 대한 이벤트 처리기 메서드의 고유 이름을 만듭니다.</summary>
      <param name="component">이벤트가 연결된 구성 요소 인스턴스입니다.</param>
      <param name="e">이름을 만들 이벤트입니다.</param>
      <returns>이 이벤트에 대한 이벤트 처리기의 권장 이름입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary>지정된 이벤트와 호환되는 메서드 시그니처를 가진 이벤트 처리기 메서드의 컬렉션을 가져옵니다.</summary>
      <param name="e">호환되는 이벤트 처리기 메서드를 가져올 이벤트입니다.</param>
      <returns>문자열의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)">
      <summary>이벤트를 표시하는 경우 지정된 속성 설명자가 표시하는 이벤트에 대한 <see cref="T:System.ComponentModel.EventDescriptor" />를 가져옵니다.</summary>
      <param name="property">이벤트를 표시하는 속성입니다.</param>
      <returns>속성이 표시하는 이벤트에 대한 <see cref="T:System.ComponentModel.EventDescriptor" />이거나, 속성이 이벤트를 표시하지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)">
      <summary>일련의 이벤트 설명자를 일련의 속성 설명자로 변환합니다.</summary>
      <param name="events">속성으로 변환할 이벤트입니다.</param>
      <returns>이벤트 집합을 설명하는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 배열입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)">
      <summary>단일 이벤트 설명자를 속성 설명자로 변환합니다.</summary>
      <param name="e">변환할 이벤트입니다.</param>
      <returns>이벤트를 설명하는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode">
      <summary>디자이너에 대한 사용자 코드를 표시합니다.</summary>
      <returns>코드가 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>지정된 이벤트에 대한 사용자 코드를 표시합니다.</summary>
      <param name="component">이벤트가 연결된 구성 요소입니다.</param>
      <param name="e">표시할 이벤트입니다.</param>
      <returns>코드가 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)">
      <summary>지정된 줄에서 디자이너에 대한 사용자 코드를 표시합니다.</summary>
      <param name="lineNumber">캐럿을 놓을 줄 번호입니다.</param>
      <returns>코드가 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderListService">
      <summary>Extender 공급자를 나열할 수 있는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderListService.GetExtenderProviders">
      <summary>구성 요소에 대한 Extender 공급자 집합을 가져옵니다.</summary>
      <returns>활성화된 extender 공급자를 나열하는 <see cref="T:System.ComponentModel.IExtenderProvider" /> 형식의 배열입니다. 이러한 공급자가 없으면 빈 배열이 반환됩니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderProviderService">
      <summary>디자인 타임에 Extender 공급자를 추가하거나 제거하기 위한 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>지정된 extender 공급자를 추가합니다.</summary>
      <param name="provider">추가할 extender 공급자입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>지정된 extender 공급자를 제거합니다.</summary>
      <param name="provider">제거할 extender 공급자입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IHelpService">
      <summary>디자인 타임에 도움말 항목을 표시하고 도움말 키워드를 추가하고 제거하는 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary>컨텍스트 특성을 문서에 추가합니다.</summary>
      <param name="name">추가할 특성의 이름입니다.</param>
      <param name="value">특성 값</param>
      <param name="keywordType">
        <see cref="T:System.ComponentModel.Design.HelpKeywordType" /> 열거형의 키워드 형식입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ClearContextAttributes">
      <summary>모든 기존 컨텍스트 특성을 문서에서 제거합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)">
      <summary>하위 컨텍스트를 관리하는 로컬 <see cref="T:System.ComponentModel.Design.IHelpService" />를 만듭니다.</summary>
      <param name="contextType">추가할 하위 컨텍스트의 우선 순위 형식입니다.</param>
      <returns>새로 만든 <see cref="T:System.ComponentModel.Design.IHelpService" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary>이전에 추가된 컨텍스트 특성을 제거합니다.</summary>
      <param name="name">제거할 특성의 이름입니다.</param>
      <param name="value">제거할 특성의 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveLocalContext(System.ComponentModel.Design.IHelpService)">
      <summary>
        <see cref="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)" />으로 만들어진 컨텍스트를 제거합니다.</summary>
      <param name="localContext">제거할 로컬 컨텍스트 <see cref="T:System.ComponentModel.Design.IHelpService" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromKeyword(System.String)">
      <summary>지정된 키에 일치하는 도움말 항목을 나타냅니다.</summary>
      <param name="helpKeyword">표시할 도움말 항목의 키워드입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromUrl(System.String)">
      <summary>지정된 URL에 해당하는 도움말 항목을 표시합니다.</summary>
      <param name="helpUrl">표시할 도움말 항목의 URL입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IInheritanceService">
      <summary>구성 요소의 구성 요소들을 식별하는 데 사용하는 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary>지정된 구성 요소에서 <see cref="T:System.ComponentModel.IComponent" /> 인터페이스를 구현하는 필드를 검색하고 각 필드를 지정된 컨테이너에 추가함으로써 <see cref="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)" /> 메서드를 사용하여 검색할 수 있는 각 필드의 상속 수준을 저장합니다.</summary>
      <param name="component">검색할 <see cref="T:System.ComponentModel.IComponent" />입니다. 이 구성 요소에서 검색이 시작됩니다.</param>
      <param name="container">구성 요소를 추가할 <see cref="T:System.ComponentModel.IContainer" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary>지정된 구성 요소의 상속 특성을 가져옵니다.</summary>
      <param name="component">상속 특성을 검색할 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
      <returns>지정된 구성 요소의 상속 수준을 설명하는 <see cref="T:System.ComponentModel.InheritanceAttribute" />의 인스턴스입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IMenuCommandService">
      <summary>디자인 모드에서 사용 가능한 메뉴 명령과 전역 디자이너 동사를 관리하고 바로 가기 메뉴의 일부 형식을 보여 주는 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>지정된 표준 메뉴 명령을 메뉴에 추가합니다.</summary>
      <param name="command">추가할 <see cref="T:System.ComponentModel.Design.MenuCommand" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">지정된 <see cref="T:System.ComponentModel.Design.CommandID" />의 <see cref="T:System.ComponentModel.Design.MenuCommand" />가 이미 메뉴에 있습니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>지정된 디자이너 동사를 전역 디자이너 동사 집합에 추가합니다.</summary>
      <param name="verb">추가할 <see cref="T:System.ComponentModel.Design.DesignerVerb" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary>지정된 명령 ID를 검색하고 그와 관련된 메뉴 명령을 반환합니다.</summary>
      <param name="commandID">검색할 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</param>
      <returns>명령 ID와 관련된 <see cref="T:System.ComponentModel.Design.MenuCommand" />이거나 명령을 찾을 수 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
      <summary>지정된 명령 ID와 일치하는 메뉴나 디자이너 동사 명령을 호출합니다.</summary>
      <param name="commandID">검색하고 실행할 명령의 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</param>
      <returns>명령을 찾아 성공적으로 실행한 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>지정된 표준 메뉴 명령을 메뉴에서 제거합니다.</summary>
      <param name="command">제거할 <see cref="T:System.ComponentModel.Design.MenuCommand" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>지정된 디자이너 동사를 전역 디자이너 동사 컬렉션에서 제거합니다.</summary>
      <param name="verb">제거할 <see cref="T:System.ComponentModel.Design.DesignerVerb" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
      <summary>지정된 위치에서 지정된 바로 가기 메뉴를 보여 줍니다.</summary>
      <param name="menuID">표시할 바로 가기 메뉴에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</param>
      <param name="x">화면 좌표에서 메뉴를 표시할 x 좌표입니다.</param>
      <param name="y">화면 좌표에서 메뉴를 표시할 y 좌표입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.IMenuCommandService.Verbs">
      <summary>현재 사용할 수 있는 디자이너 동사의 컬렉션을 가져옵니다.</summary>
      <returns>현재 사용할 수 있는 디자이너 동사를 포함하는 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IReferenceService">
      <summary>이름이나 형식으로 프로젝트에서 개체에 대한 참조를 얻고, 지정된 개체의 이름을 얻으며, 디자이너 프로젝트에서 지정된 개체의 부모를 찾는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetComponent(System.Object)">
      <summary>지정된 구성 요소가 포함된 구성 요소를 가져옵니다.</summary>
      <param name="reference">부모 구성 요소를 검색할 개체입니다.</param>
      <returns>지정된 개체가 포함된 기본 <see cref="T:System.ComponentModel.IComponent" />이거나, 부모 구성 요소가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetName(System.Object)">
      <summary>지정된 구성 요소의 이름을 가져옵니다.</summary>
      <param name="reference">이름을 반환할 개체입니다.</param>
      <returns>참조된 개체의 이름이거나, 개체 참조를 사용할 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReference(System.String)">
      <summary>지정된 이름과 일치하는 이름을 가진 구성 요소에 대한 참조를 가져옵니다.</summary>
      <param name="name">참조를 반환할 구성 요소의 이름입니다.</param>
      <returns>지정된 이름을 참조하는 개체이거나, 참조를 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences">
      <summary>프로젝트 구성 요소에 대한 사용 가능한 모든 참조를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.IReferenceService" />에서 사용할 수 있는 참조를 가진 모든 개체의 배열입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences(System.Type)">
      <summary>지정된 형식의 구성 요소에 대한 사용 가능한 모든 참조를 가져옵니다.</summary>
      <param name="baseType">인스턴스에 대한 참조를 반환할 개체의 형식입니다.</param>
      <returns>지정된 형식의 사용할 수 있는 모든 개체의 배열입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IResourceService">
      <summary>디자이너가 특정한 <see cref="T:System.Globalization.CultureInfo" /> 리소스 형식에 대한 리소스 판독기와 작성기에 액세스할 수 있는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceReader(System.Globalization.CultureInfo)">
      <summary>지정된 문화권의 리소스 판독기를 찾아 반환합니다.</summary>
      <param name="info">리소스 판독기를 검색하는 리소스의 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <returns>문화권에 대한 리소스가 들어 있는 <see cref="T:System.Resources.IResourceReader" /> 인터페이스이거나, 문화권에 대한 리소스가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceWriter(System.Globalization.CultureInfo)">
      <summary>지정된 문화권의 리소스 작성기를 찾아 반환합니다.</summary>
      <param name="info">리소스 작성기를 만드는 리소스의 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <returns>지정된 문화권의 <see cref="T:System.Resources.IResourceWriter" /> 인터페이스입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IRootDesigner">
      <summary>루트 수준 디자이너 뷰 기술을 지원합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IRootDesigner.GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary>지정한 뷰 기술에 대한 뷰 개체를 가져옵니다.</summary>
      <param name="technology">특정 뷰 기술을 나타내는 <see cref="T:System.ComponentModel.Design.ViewTechnology" />입니다.</param>
      <returns>해당 디자이너에 대한 뷰를 나타내는 개체입니다.</returns>
      <exception cref="T:System.ArgumentException">지정한 뷰 기술이 지원되지 않거나 없는 경우</exception>
    </member>
    <member name="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies">
      <summary>해당 디자이너에서 표시하기 위해 지원할 수 있는 기술을 가져옵니다.</summary>
      <returns>지원되는 <see cref="T:System.ComponentModel.Design.ViewTechnology" /> 값의 배열입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ISelectionService">
      <summary>디자이너가 구성 요소를 선택할 수 있는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetComponentSelected(System.Object)">
      <summary>지정된 구성 요소가 현재 선택되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="component">테스트할 구성 요소입니다.</param>
      <returns>구성 요소가 사용자의 현재 선택의 일부분이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetSelectedComponents">
      <summary>현재 선택된 구성 요소의 컬렉션을 가져옵니다.</summary>
      <returns>선택된 구성 요소의 현재 집합을 나타내는 컬렉션입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.PrimarySelection">
      <summary>현재 기본 선택 개체인 개체를 가져옵니다.</summary>
      <returns>현재 기본 선택 개체입니다.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanged">
      <summary>현재 선택이 변경될 때 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanging">
      <summary>현재 선택이 변경되려 할 경우 발생합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.SelectionCount">
      <summary>선택된 개체의 수를 가져옵니다.</summary>
      <returns>선택된 개체의 수입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection)">
      <summary>지정된 구성 요소의 컬렉션을 선택합니다.</summary>
      <param name="components">선택할 구성 요소의 컬렉션입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
      <summary>지정된 선택 형식과 일치하는 지정된 구성 요소의 컬렉션에서 구성 요소를 선택합니다.</summary>
      <param name="components">선택할 구성 요소의 컬렉션입니다.</param>
      <param name="selectionType">
        <see cref="T:System.ComponentModel.Design.SelectionTypes" /> 열거형의 값입니다. 기본값은 <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.IServiceContainer">
      <summary>서비스에 대한 컨테이너를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>지정된 서비스를 서비스 컨테이너에 추가합니다.</summary>
      <param name="serviceType">추가할 서비스 형식입니다.</param>
      <param name="callback">서비스를 만드는 데 사용할 콜백 개체입니다. 이 콜백 개체를 사용하면 서비스가 사용 가능으로 선언되지만 해당 서비스를 요청할 때까지 개체 만들기가 지연됩니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>지정된 서비스를 서비스 컨테이너에 추가하고, 필요에 따라 부모 서비스 컨테이너로 서비스의 수준을 올립니다.</summary>
      <param name="serviceType">추가할 서비스 형식입니다.</param>
      <param name="callback">서비스를 만드는 데 사용할 콜백 개체입니다. 이 콜백 개체를 사용하면 서비스가 사용 가능으로 선언되지만 해당 서비스를 요청할 때까지 개체 만들기가 지연됩니다.</param>
      <param name="promote">이 요청의 수준을 부모 서비스 컨테이너로 올리려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)">
      <summary>지정된 서비스를 서비스 컨테이너에 추가합니다.</summary>
      <param name="serviceType">추가할 서비스 형식입니다.</param>
      <param name="serviceInstance">추가할 서비스 형식의 인스턴스입니다. 이 개체는 <paramref name="serviceType" /> 매개 변수가 나타내는 형식을 구현하거나 해당 형식에서 상속되어야 합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>지정된 서비스를 서비스 컨테이너에 추가합니다. 그리고 필요에 따라 부모 서비스 컨테이너로 서비스의 수준을 올립니다.</summary>
      <param name="serviceType">추가할 서비스 형식입니다.</param>
      <param name="serviceInstance">추가할 서비스 형식의 인스턴스입니다. 이 개체는 <paramref name="serviceType" /> 매개 변수가 나타내는 형식을 구현하거나 해당 형식에서 상속되어야 합니다.</param>
      <param name="promote">이 요청의 수준을 부모 서비스 컨테이너로 올리려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)">
      <summary>지정된 서비스 형식을 서비스 컨테이너에서 제거합니다.</summary>
      <param name="serviceType">제거할 서비스 형식입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>지정된 서비스 형식을 서비스 컨테이너에서 제거하고 필요에 따라 부모 서비스 컨테이너로 서비스의 수준을 올립니다.</summary>
      <param name="serviceType">제거할 서비스 형식입니다.</param>
      <param name="promote">이 요청의 수준을 부모 서비스 컨테이너로 올리려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.ITreeDesigner">
      <summary>관련된 사용자 지정 디자이너 집합을 빌드할 수 있도록 지원합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Children">
      <summary>자식 디자이너의 컬렉션을 가져옵니다.</summary>
      <returns>현재 디자이너의 <see cref="T:System.Collections.ICollection" /> 자식 개체 컬렉션을 포함하는 <see cref="T:System.ComponentModel.Design.IDesigner" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Parent">
      <summary>부모 디자이너를 가져옵니다.</summary>
      <returns>부모 디자이너를 나타내는 <see cref="T:System.ComponentModel.Design.IDesigner" />이거나, 부모가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDescriptorFilterService">
      <summary>디자인 모드에서 구성 요소에 대한 멤버 설명자의 집합을 수정할 수 있는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>구성 요소가 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출한 특성을 필터링합니다.</summary>
      <param name="component">특성을 필터링할 구성 요소입니다.</param>
      <param name="attributes">수정할 수 있는 특성의 사전입니다.</param>
      <returns>필터링된 특성 집합이 캐시되도록 하려면 <see langword="true" />이고, 필터 서비스가 다시 쿼리하도록 하려면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>구성 요소가 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출한 이벤트를 필터링합니다.</summary>
      <param name="component">이벤트를 필터링할 구성 요소입니다.</param>
      <param name="events">수정할 수 있는 이벤트의 사전입니다.</param>
      <returns>필터링된 이벤트 집합이 캐시되도록 하려면 <see langword="true" />이고, 필터 서비스가 다시 쿼리하도록 하려면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>구성 요소가 <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 노출한 속성을 필터링합니다.</summary>
      <param name="component">속성을 필터링할 구성 요소입니다.</param>
      <param name="properties">수정할 수 있는 속성의 사전입니다.</param>
      <returns>필터링된 속성 집합이 캐시되도록 하려면 <see langword="true" />이고, 필터 서비스가 다시 쿼리하도록 하려면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDiscoveryService">
      <summary>디자인 타임에 사용 가능한 형식을 검색합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)">
      <summary>사용 가능한 형식 목록을 검색합니다.</summary>
      <param name="baseType">일치시킬 기본 형식입니다. <see langword="null" />일 수 있습니다.</param>
      <param name="excludeGlobalTypes">모든 참조된 어셈블리의 형식을 확인할지 여부를 나타냅니다.</param>
      <returns>
        <paramref name="baseType" /> 및 <paramref name="excludeGlobalTypes" />가 지정한 조건에 일치시킬 형식의 컬렉션입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeResolutionService">
      <summary>어셈블리나 형식을 이름으로 검색하는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName)">
      <summary>요청한 어셈블리를 가져옵니다.</summary>
      <param name="name">검색할 어셈블리의 이름입니다.</param>
      <returns>요청한 어셈블리의 인스턴스이거나, 어셈블리가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)">
      <summary>요청한 어셈블리를 가져옵니다.</summary>
      <param name="name">검색할 어셈블리의 이름입니다.</param>
      <param name="throwOnError">어셈블리를 찾을 수 없는 경우 이 메서드가 예외를 throw하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 그리고 어셈블리를 찾을 수 없는 경우 이 메서드는 <see langword="null" />을 반환합니다.</param>
      <returns>요청한 어셈블리의 인스턴스이거나, 어셈블리가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)">
      <summary>어셈블리가 로드된 파일의 경로를 가져옵니다.</summary>
      <param name="name">어셈블리의 이름입니다.</param>
      <returns>어셈블리가 로드된 파일의 경로입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String)">
      <summary>지정된 이름으로 형식을 로드합니다.</summary>
      <param name="name">형식의 이름입니다. 형식 이름이 어셈블리를 나타내는 정규화된 이름이 아니면 이 서비스는 참조된 어셈블리의 내부 집합을 검색합니다.</param>
      <returns>지정된 이름에 일치하는 <see cref="T:System.Type" />의 인스턴스이거나, 형식을 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean)">
      <summary>지정된 이름으로 형식을 로드합니다.</summary>
      <param name="name">형식의 이름입니다. 형식 이름이 어셈블리를 나타내는 정규화된 이름이 아니면 이 서비스는 참조된 어셈블리의 내부 집합을 검색합니다.</param>
      <param name="throwOnError">어셈블리를 찾을 수 없는 경우 이 메서드가 예외를 throw하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 그리고 어셈블리를 찾을 수 없는 경우 이 메서드는 <see langword="null" />을 반환합니다.</param>
      <returns>지정된 이름에 일치하는 <see cref="T:System.Type" />의 인스턴스이거나, 형식을 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>지정된 이름으로 형식을 로드합니다.</summary>
      <param name="name">형식의 이름입니다. 형식 이름이 어셈블리를 나타내는 정규화된 이름이 아니면 이 서비스는 참조된 어셈블리의 내부 집합을 검색합니다.</param>
      <param name="throwOnError">어셈블리를 찾을 수 없는 경우 이 메서드가 예외를 throw하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 그리고 어셈블리를 찾을 수 없는 경우 이 메서드는 <see langword="null" />을 반환합니다.</param>
      <param name="ignoreCase">형식을 검색할 때 대/소문자를 무시하려면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>지정된 이름에 일치하는 <see cref="T:System.Type" />의 인스턴스이거나, 형식을 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)">
      <summary>참조를 지정된 어셈블리에 추가합니다.</summary>
      <param name="name">참조할 어셈블리를 나타내는 <see cref="T:System.Reflection.AssemblyName" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommand">
      <summary>창 메뉴 또는 도구 모음 명령 항목을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>
        <see cref="T:System.ComponentModel.Design.MenuCommand" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="handler">메뉴 항목이나 도구 모음 단추를 선택한 경우 발생하는 이벤트입니다.</param>
      <param name="command">이 메뉴 명령을 환경 메뉴에 연결하는 고유 명령 ID입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Checked">
      <summary>이 메뉴 항목이 선택되어 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>해당 항목이 선택되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="E:System.ComponentModel.Design.MenuCommand.CommandChanged">
      <summary>메뉴 명령이 변경될 경우 발생합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.CommandID">
      <summary>이 메뉴 명령과 관련된 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다.</summary>
      <returns>메뉴 명령과 관련된 <see cref="T:System.ComponentModel.Design.CommandID" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Enabled">
      <summary>이 메뉴 항목을 사용할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>항목을 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke">
      <summary>명령을 호출합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)">
      <summary>지정한 매개 변수가 있는 명령을 호출합니다.</summary>
      <param name="arg">명령에 사용할 선택적 인수입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.OleStatus">
      <summary>이 메뉴 항목에 대한 OLE 명령 상태 코드를 가져옵니다.</summary>
      <returns>이 메뉴 항목의 상태를 반영하는 상태 플래그가 혼합된 정수입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.Design.MenuCommand.CommandChanged" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Properties">
      <summary>
        <see cref="T:System.ComponentModel.Design.MenuCommand" />와 연결된 public 속성을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" />의 public 속성이 들어 있는 <see cref="T:System.ComponentModel.Design.MenuCommand" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Supported">
      <summary>이 메뉴 항목이 지원되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>항목이 지원되는 경우 <see langword="true" />이고 이것이 기본값이며, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.ToString">
      <summary>이 메뉴 명령의 문자열 표현을 반환합니다.</summary>
      <returns>설정된 플래그 이름이 세로줄(|)로 구분되어 추가된 <see cref="P:System.ComponentModel.Design.MenuCommand.CommandID" /> 속성 값을 포함하는 문자열입니다. 이 플래그 속성에는 <see cref="P:System.ComponentModel.Design.MenuCommand.Checked" /> , <see cref="P:System.ComponentModel.Design.MenuCommand.Enabled" /> , <see cref="P:System.ComponentModel.Design.MenuCommand.Supported" /> 및 <see cref="P:System.ComponentModel.Design.MenuCommand.Visible" />이 포함됩니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Visible">
      <summary>이 메뉴 항목이 표시되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>항목이 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.SelectionTypes">
      <summary>선택 형식을 나타내는 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Add">
      <summary>현재 선택에 선택된 구성 요소를 추가하여 선택된 구성 요소의 현재 집합을 유지하는 추가 선택을 나타냅니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Auto">
      <summary>일반적인 선택을 나타냅니다. 선택 서비스는 Ctrl 키와 Shift 키에 응답하여 선택에서 구성 요소를 추가하거나 제거하는 작업을 지원합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Click">
      <summary>사용자가 구성 요소를 클릭할 때 발생하는 선택을 나타냅니다. 새로 선택한 구성 요소가 이미 선택되어 있으면 취소하는 대신 기본 선택 구성 요소로 수준을 올립니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseDown">
      <summary>마우스 포인터가 구성 요소 위에 있을 때 사용자가 마우스 단추를 누를 경우 발생하는 선택을 나타냅니다. 포인터 아래에 있는 구성 요소가 이미 선택되어 있으면 취소하는 대신 기본 선택 구성 요소로 수준을 올립니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseUp">
      <summary>구성 요소를 선택한 후 즉시 사용자가 마우스 단추를 떼었을 때 발생하는 선택을 나타냅니다. 새로 선택한 구성 요소가 이미 선택되어 있으면 취소하는 대신 기본 선택 구성 요소로 수준을 올립니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Normal">
      <summary>일반적인 선택을 나타냅니다. 선택 서비스는 Ctrl 키와 Shift 키에 응답하여 선택에서 구성 요소를 추가하거나 제거하는 작업을 지원합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Primary">
      <summary>사용자가 구성 요소를 클릭할 때 발생하는 기본 선택을 나타냅니다. 선택 목록에 있는 구성 요소가 이미 선택되어 있으면 기본 선택 구성 요소로 수준을 올립니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Remove">
      <summary>현재 선택에서 선택된 구성 요소를 제거하여 선택된 구성 요소의 현재 집합을 유지하는 제거 선택을 나타냅니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Replace">
      <summary>선택 내용이 바뀔 때 발생하는 선택을 나타냅니다. 선택 서비스는 현재 선택을 대체 선택으로 바꿉니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Toggle">
      <summary>현재 선택과 제공된 선택 간을 전환하는 토글 선택을 나타냅니다. 구성 요소가 이미 선택되어 있고 <see cref="Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents" /> 선택 형식과 함께 <see cref="F:System.ComponentModel.Design.SelectionTypes.Toggle" />로 전달된 경우 구성 요소 선택은 취소됩니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Valid">
      <summary>
        <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" /> , <see cref="F:System.ComponentModel.Design.SelectionTypes.Replace" /> , <see cref="F:System.ComponentModel.Design.SelectionTypes.MouseDown" /> , <see cref="F:System.ComponentModel.Design.SelectionTypes.MouseUp" /> 또는 <see cref="F:System.ComponentModel.Design.SelectionTypes.Click" /> 등의 사용할 수 있는 선택 형식을 식별합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ComponentSerializationService">
      <summary>구성 요소 또는 serialize 가능한 개체의 집합을 serialization 저장소에 serialize하기 위한 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.CreateStore">
      <summary>새 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />를 만듭니다.</summary>
      <returns>새로 생성된 serialization 저장소입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)">
      <summary>지정한 저장소를 deserialize하여 개체 컬렉션을 생성합니다.</summary>
      <param name="store">deserialize할 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <returns>저장된 상태에 따라 만들어진 개체의 컬렉션입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" />에 serialization 컨테이너에서 처리할 수 있는 형식의 데이터가 포함되어 있지 않은 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>특정 저장소를 deserialize하고 특정 <see cref="T:System.ComponentModel.IContainer" />를 deserialize된 <see cref="T:System.ComponentModel.IComponent" /> 개체로 채웁니다.</summary>
      <param name="store">deserialize할 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <param name="container">
        <see cref="T:System.ComponentModel.IContainer" /> 개체가 추가될 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
      <returns>저장된 상태에 따라 만들어진 개체의 컬렉션입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 또는 <paramref name="container" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" />에 serialization 컨테이너에서 처리할 수 있는 형식의 데이터가 포함되어 있지 않은 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>지정된 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />를 지정된 컨테이너에 deserialize합니다.</summary>
      <param name="store">deserialize할 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <param name="container">
        <see cref="T:System.ComponentModel.IComponent" /> 개체가 추가될 컨테이너입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 또는 <paramref name="container" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" />에 serialization 컨테이너에서 처리할 수 있는 형식의 데이터가 포함되어 있지 않은 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean)">
      <summary>재생된 형식의 유효성을 선택적으로 검사하여 지정된 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />를 지정된 컨테이너에 deserialize합니다.</summary>
      <param name="store">deserialize할 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <param name="container">
        <see cref="T:System.ComponentModel.IComponent" /> 개체가 추가될 컨테이너입니다.</param>
      <param name="validateRecycledTypes">형식이 같은 개체에 적용되는 경우에만 deserialization이 작동하도록 하려면 <see langword="true" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 또는 <paramref name="container" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" />에 serialization 컨테이너에서 처리할 수 있는 형식의 데이터가 포함되어 있지 않은 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean,System.Boolean)">
      <summary>선택적으로 기본 속성 값을 적용하여 특정 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />를 특정 컨테이너에 deserialize합니다.</summary>
      <param name="store">deserialize할 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <param name="container">
        <see cref="T:System.ComponentModel.IComponent" /> 개체가 추가될 컨테이너입니다.</param>
      <param name="validateRecycledTypes">형식이 같은 개체에 적용되는 경우에만 deserialization이 작동하도록 하려면 <see langword="true" />입니다.</param>
      <param name="applyDefaults">기본 속성 값을 적용하려면 <see langword="true" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 또는 <paramref name="container" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" />에 serialization 컨테이너에서 처리할 수 있는 형식의 데이터가 포함되어 있지 않은 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.LoadStore(System.IO.Stream)">
      <summary>스트림에서 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />를 로드합니다.</summary>
      <param name="stream">저장소가 로드될 <see cref="T:System.IO.Stream" />입니다.</param>
      <returns>새 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 인스턴스입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="stream" />이 이전 <see cref="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)" /> 호출에 의해 저장된 데이터를 포함하지 않는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Serialize(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>지정된 개체를 지정된 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />에 serialize합니다.</summary>
      <param name="store">
        <paramref name="value" />의 상태가 작성될 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <param name="value">serialize할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" />가 닫혀 있거나 <paramref name="store" />가 지원되지 않는 serialization 저장소 형식인 경우 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />에서 반환하는 저장소를 사용합니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>기본 속성 값을 설명하는 지정된 개체를 serialize합니다.</summary>
      <param name="store">
        <paramref name="value" />의 상태가 serialize될 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <param name="value">serialize할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" />가 닫혀 있거나 <paramref name="store" />가 지원되지 않는 serialization 저장소 형식인 경우 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />에서 반환하는 저장소를 사용합니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>지정된 개체의 지정된 멤버를 serialize합니다.</summary>
      <param name="store">
        <paramref name="member" />의 상태가 serialize될 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <param name="owningObject">
        <paramref name="member" />가 연결된 개체입니다.</param>
      <param name="member">serialize할 멤버를 지정하는 <see cref="T:System.ComponentModel.MemberDescriptor" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" />가 닫혀 있거나 <paramref name="store" />가 지원되지 않는 serialization 저장소 형식인 경우 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />에서 반환하는 저장소를 사용합니다.</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>기본 속성 값을 설명하는 지정된 개체의 지정된 멤버를 serialize합니다.</summary>
      <param name="store">
        <paramref name="member" />의 상태가 serialize될 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />입니다.</param>
      <param name="owningObject">
        <paramref name="member" />가 연결된 개체입니다.</param>
      <param name="member">serialize할 멤버입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" />가 닫혀 있거나 <paramref name="store" />가 지원되지 않는 serialization 저장소 형식인 경우 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />에서 반환하는 저장소를 사용합니다.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ContextStack">
      <summary>정보를 중첩된 serializer에 사용할 수 있게 할 serializer가 사용하는 스택 개체를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
      <summary>개체를 스택의 맨 위에 푸시하지 않고 스택의 맨 아래에 추가합니다.</summary>
      <param name="context">스택에 추가할 컨텍스트 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
      <summary>현재 스택에 있는 개체를 가져옵니다.</summary>
      <returns>스택의 현재 개체이거나 푸시된 개체가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
      <summary>지정된 수준에 있는 스택의 개체를 가져옵니다.</summary>
      <param name="level">스택에서 검색할 개체의 수준입니다. 수준 0은 스택의 맨 위이고 수준 1은 그 다음이며 나머지도 마찬가지입니다. 이 수준은 0 이상이어야 합니다. 수준이 스택의 수준 수보다 크면 <see langword="null" />을 반환합니다.</param>
      <returns>지정된 수준에 있는 스택의 개체입니다. 해당 수준에 개체가 없는 경우 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="level" />가 0보다 작습니다.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
      <summary>상속하거나 지정된 형식을 구현하는 스택의 첫 번째 개체를 가져옵니다.</summary>
      <param name="type">컨텍스트 스택에서 검색할 형식입니다.</param>
      <returns>상속하거나 지정된 형식을 구현한 스택의 첫 번째 개체입니다. 스택에 형식을 구현한 개체가 없는 경우 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
      <summary>스택에서 현재 개체를 제거하고 이 개체의 값을 반환합니다.</summary>
      <returns>스택에서 제거된 개체입니다. 스택에 개체가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
      <summary>지정된 개체를 스택에 푸시하거나 저장합니다.</summary>
      <param name="context">스택에 푸시할 컨택스트 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute">
      <summary>클래스를 해당 형식의 serializer에 대한 기본 공급자로 사용하도록 지정하려면 <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 특성을 serializer에 배치합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.String)">
      <summary>명명된 공급자 형식을 사용하여 <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="providerTypeName">serialization 공급자 형식의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerTypeName" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.Type)">
      <summary>지정된 공급자 형식을 사용하여 <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="providerType">serialization 공급자의 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerType" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.ProviderTypeName">
      <summary>serialization 공급자의 형식 이름을 가져옵니다.</summary>
      <returns>공급자의 이름이 들어 있는 문자열입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerLoader">
      <summary>사용자 지정 디자이너 로더를 구현하는데 사용할 수 있는 기본 디자이너 로더 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)">
      <summary>디자이너를 로딩하기 시작합니다.</summary>
      <param name="host">이 로더가 구성 요소를 로드하는 데 사용하는 로더 호스트입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Dispose">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Flush">
      <summary>캐시된 변경 사항을 디자이너가 로드된 위치에 씁니다.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerLoader.Loading">
      <summary>로더가 문서를 현재 로딩하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>로더가 문서를 현재 로딩하면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute">
      <summary>serialization 관리자가 이 특성이 적용되는 형식 값을 serialize하는 데 사용하는 serializer를 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="serializerTypeName">serializer의 데이터 형식의 정규화된 이름입니다.</param>
      <param name="baseSerializerTypeName">serializer의 기본 데이터 형식의 정규화된 이름입니다. serializer의 기본 형식이 각각 다른 경우 한 클래스에 여러 serializer를 제공할 수 있습니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.Type)">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="serializerTypeName">serializer의 데이터 형식의 정규화된 이름입니다.</param>
      <param name="baseSerializerType">serializer의 기본 데이터 형식입니다. serializer의 기본 형식이 각각 다른 경우 한 클래스에 여러 serializer를 제공할 수 있습니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.Type,System.Type)">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="serializerType">serializer의 데이터 형식입니다.</param>
      <param name="baseSerializerType">serializer의 기본 데이터 형식입니다. serializer의 기본 형식이 각각 다른 경우 한 클래스에 여러 serializer를 제공할 수 있습니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>serializer 기본 형식의 정규화된 형식 이름을 가져옵니다.</summary>
      <returns>serializer 기본 형식의 정규화된 형식 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName">
      <summary>serializer의 정규화된 형식 이름을 가져옵니다.</summary>
      <returns>serializer의 정규화된 형식이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.TypeId">
      <summary>이 특성 형식의 고유 ID를 나타냅니다.</summary>
      <returns>이 특성 형식의 고유 ID입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost">
      <summary>serialize된 상태로부터 로딩을 지원하도록 디자이너 호스트를 확장할 수 있는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(System.String,System.Boolean,System.Collections.ICollection)">
      <summary>디자이너 로딩 작업을 종료합니다.</summary>
      <param name="baseClassName">이 디자이너가 디자인하고 있는 문서의 기본 클래스의 정규화된 이름입니다.</param>
      <param name="successful">디자이너가 성공적으로 로드되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="errorCollection">로딩하는 동안 오류가 발생한 경우 해당 오류가 들어 있는 컬렉션입니다. 오류가 발생하지 않았으면 빈 컬렉션이나 <see langword="null" />을 전달합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload">
      <summary>디자인 문서를 다시 로드합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2">
      <summary>디자인 문서를 로드하는 동안 오류를 허용할지 여부를 지정하기 위해 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" />를 확장하는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.CanReloadWithErrors">
      <summary>오류가 발생한 경우 다시 로드할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>오류가 발견된 경우 디자이너 로더가 디자인 문서를 다시 로드할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.IgnoreErrorsDuringReload">
      <summary>
        <see cref="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload" />가 호출되는 경우 오류를 무시할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>디자이너 로더가 디자인 문서를 다시 로드할 때 오류를 무시하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService">
      <summary>외부 구성 요소의 비동기 로딩을 지원하도록 디자이너 로더를 확장시킬 수 있는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency">
      <summary>이 인터페이스가 관리한 로드 프로세스의 일부로 외부 구성 요소를 등록합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)">
      <summary>종속 로드가 종료되었음을 나타냅니다.</summary>
      <param name="successful">디자이너의 로드가 성공적이면 <see langword="true" />이고, 오류 때문에 로드를 끝내지 못하면 <see langword="false" />입니다.</param>
      <param name="errorCollection">로딩하는 동안 오류가 발생한 경우 발생한 오류의 컬렉션입니다. 오류가 발생하지 않으면 빈 컬렉션이나 <see langword="null" />을 전달합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload">
      <summary>디자인 문서를 다시 로드합니다.</summary>
      <returns>다시 로드 요청이 받아들여지면 <see langword="true" />이고, 로더가 다시 로드를 허용하지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager">
      <summary>디자인 타임 serialization을 관리할 수 있는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>지정된 serialization 공급자를 serialization 관리자에 추가합니다.</summary>
      <param name="provider">추가할 serialization 공급자입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <summary>serializer 간의 통신에 유용한 스택 기반의 사용자 정의 스토리지 영역을 가져옵니다.</summary>
      <returns>데이터를 저장하는 <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary>지정된 형식의 인스턴스를 만들어 명명된 인스턴스의 컬렉션에 추가합니다.</summary>
      <param name="type">만들 데이터 형식입니다.</param>
      <param name="arguments">이 형식에 대한 생성자에 전달할 인수입니다.</param>
      <param name="name">개체의 이름입니다. 이 이름은 나중에 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" />를 통해 개체에 액세스하는 데 사용할 수 있습니다. <see langword="null" />이 전달되면 개체는 계속 만들어지지만 이름을 통해 개체에 액세스할 수는 없습니다.</param>
      <param name="addToContainer">
        <see langword="true" />이면 이 개체가 디자인 컨테이너에 추가됩니다. 개체에서는 영향을 줄 수 있도록 이에 대한 <see cref="T:System.ComponentModel.IComponent" />를 구현해야 합니다.</param>
      <returns>새로 만들어진 개체 인스턴스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)">
      <summary>지정된 이름으로 만들어진 개체 인스턴스를 가져오거나, 해당 개체가 없으면 <see langword="null" />입니다.</summary>
      <param name="name">검색할 개체의 이름입니다.</param>
      <returns>지정된 이름의 개체 인스턴스이거나, 해당 이름의 개체를 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)">
      <summary>지정된 개체의 이름을 가져오거나, 개체에 이름이 없으면 <see langword="null" />입니다.</summary>
      <param name="value">이름을 검색할 개체입니다.</param>
      <returns>개체의 이름이거나, 개체에 이름이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary>지정된 개체 형식에 대한 요청된 형식의 serializer를 가져옵니다.</summary>
      <param name="objectType">serializer를 가져올 개체의 형식입니다.</param>
      <param name="serializerType">검색할 serializer의 형식입니다.</param>
      <returns>요청된 serializer의 인스턴스이거나, 적절한 serializer를 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)">
      <summary>지정된 이름의 형식을 가져옵니다.</summary>
      <param name="typeName">로드할 형식의 정규화된 이름입니다.</param>
      <returns>형식의 인스턴스이거나, 형식이 로드될 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <summary>사용 가능한 serializer를 통해 serialize할 수 있는 사용자 지정 속성을 나타냅니다.</summary>
      <returns>serialize될 속성이 들어 있는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>사용자 지정 serialization 공급자를 serialization 관리자에서 제거합니다.</summary>
      <param name="provider">제거할 공급자입니다. 이 개체는 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />를 사용하여 추가해야 합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)">
      <summary>serialization의 오류를 보고합니다.</summary>
      <param name="errorInformation">보고할 오류입니다. 이 정보 개체는 모든 개체 형식일 수 있습니다. 이 개체가 예외인 경우에는 예외 메시지를 추출하여 사용자에게 보고하고 다른 형식인 경우에는 <see cref="M:System.Object.ToString" />을 호출하여 정보를 사용자에게 표시합니다.</param>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName">
      <summary>
        <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)" />이 지정된 이름을 serialization 관리자의 이름 테이블에서 찾을 수 없을 때 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete">
      <summary>serialization이 완료되었을 때 발생합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)">
      <summary>지정된 기존 개체의 이름을 설정합니다.</summary>
      <param name="instance">이름을 지정할 개체 인스턴스입니다.</param>
      <param name="name">인스턴스에 지정할 이름입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider">
      <summary>serializer에 액세스할 수 있게 하는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
      <summary>지정된 특성을 사용하는 serializer를 가져옵니다.</summary>
      <param name="manager">serializer를 요청하는 serialization 관리자입니다.</param>
      <param name="currentSerializer">지정된 형식의 현재 serializer의 인스턴스입니다. 지정한 형식의 serializer가 없으면 이 인스턴스가 <see langword="null" />일 수 있습니다.</param>
      <param name="objectType">serialize할 개체의 데이터 형식입니다.</param>
      <param name="serializerType">만들 serializer의 데이터 형식입니다.</param>
      <returns>요청된 형식의 serializer의 인스턴스이거나 요청이 만족되지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationService">
      <summary>serialization과 deserialization을 호출할 수 있는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(System.Object)">
      <summary>지정된 serialization 데이터 개체를 deserialize하고 해당 데이터가 표시한 개체의 컬렉션을 반환합니다.</summary>
      <param name="serializationData">serialize된 데이터로 구성된 개체입니다.</param>
      <returns>지정된 serialization 데이터 개체에서 다시 빌드된 개체의 <see cref="T:System.Collections.ICollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(System.Collections.ICollection)">
      <summary>지정된 개체의 컬렉션을 serialize하여 serialization 데이터 개체에 저장합니다.</summary>
      <param name="objects">serialize할 개체의 컬렉션입니다.</param>
      <returns>지정된 개체 컬렉션의 serialize된 상태가 들어 있는 개체입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.INameCreationService">
      <summary>개체에 대한 고유 이름을 만들 수 있는 서비스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)">
      <summary>지정된 컨테이터의 모든 구성 요소에 고유한 새 이름을 만듭니다.</summary>
      <param name="container">새 개체가 추가되는 컨테이너입니다.</param>
      <param name="dataType">이름을 받을 개체의 데이터 형식입니다.</param>
      <returns>데이터 형식에 대한 고유 이름입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)">
      <summary>지정된 이름이 유효한지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="name">유효성을 확인할 이름입니다.</param>
      <returns>유효한 이름이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)">
      <summary>지정된 이름이 유효한지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="name">유효성을 확인할 이름입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.InstanceDescriptor">
      <summary>개체의 인스턴스를 만드는 데 필요한 정보를 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection)">
      <summary>지정된 멤버 정보와 인수를 사용하는 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="member">설명자에 대한 멤버 정보입니다. 이것은 <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.FieldInfo" /> 또는 <see cref="T:System.Reflection.PropertyInfo" />입니다. 이것이 <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> 또는 <see cref="T:System.Reflection.PropertyInfo" />이면, <see langword="static" /> 멤버를 나타내야 합니다.</param>
      <param name="arguments">멤버에게 전달할 인수의 컬렉션입니다. 인수가 없으면 이 매개 변수는 <see langword="null" />이거나 빈 컬렉션이 될 수 있습니다. 컬렉션도 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />의 다른 인수로 구성되어 있습니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" />가 <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> 또는 <see cref="T:System.Reflection.PropertyInfo" /> 형식이고 <see langword="static" /> 멤버를 나타내지 않는 경우  
또는 
<paramref name="member" />가 <see cref="T:System.Reflection.PropertyInfo" /> 형식이고 읽을 수 없는 경우  
또는 
<paramref name="member" />가 <see cref="T:System.Reflection.MethodInfo" /> 또는 <see cref="T:System.Reflection.ConstructorInfo" /> 형식이고 <paramref name="arguments" />의 인수 수가 <paramref name="member" />의 시그니처와 일치하지 않는 경우
또는
<paramref name="member" />가 <see cref="T:System.Reflection.ConstructorInfo" /> 형식이고 <see langword="static" /> 멤버를 나타내는 경우  
또는 
<paramref name="member" />가 <see cref="T:System.Reflection.FieldInfo" /> 형식이고 <paramref name="arguments" />의 인수 수가 0이 아닌 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection,System.Boolean)">
      <summary>지정된 멤버 정보, 인수, 그리고 지정된 정보가 인스턴스를 완벽하게 설명하는지 여부를 나타내는 값을 사용하는 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="member">설명자에 대한 멤버 정보입니다. 이것은 <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.ConstructorInfo" />, <see cref="T:System.Reflection.FieldInfo" /> 또는 <see cref="T:System.Reflection.PropertyInfo" />입니다. 이것이 <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> 또는 <see cref="T:System.Reflection.PropertyInfo" />이면, <see langword="static" /> 멤버를 나타내야 합니다.</param>
      <param name="arguments">멤버에게 전달할 인수의 컬렉션입니다. 인수가 없으면 이 매개 변수는 <see langword="null" />이거나 빈 컬렉션이 될 수 있습니다. 컬렉션도 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />의 다른 인수로 구성되어 있습니다.</param>
      <param name="isComplete">지정된 정보가 인스턴스를 완벽하게 설명하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" />가 <see cref="T:System.Reflection.MethodInfo" />, <see cref="T:System.Reflection.FieldInfo" /> 또는 <see cref="T:System.Reflection.PropertyInfo" /> 형식이고 <see langword="static" /> 멤버를 나타내지 않는 경우 
 <paramref name="member" />가 <see cref="T:System.Reflection.PropertyInfo" /> 형식이고 읽을 수 없는 경우  
 <paramref name="member" />가 <see cref="T:System.Reflection.MethodInfo" /> 또는 <see cref="T:System.Reflection.ConstructorInfo" /> 형식이고 <paramref name="arguments" />의 인수 수가 <paramref name="member" />의 시그니처와 일치하지 않는 경우  
 <paramref name="member" />가 <see cref="T:System.Reflection.ConstructorInfo" /> 형식이고 <see langword="static" /> 멤버를 나타내는 경우 
 <paramref name="member" />가 <see cref="T:System.Reflection.FieldInfo" /> 형식이고 <paramref name="arguments" />의 인수 수가 0이 아닌 경우</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.Arguments">
      <summary>이 인스턴스 설명자가 나타내는 개체의 인스턴스를 다시 구성하는 데 사용할 수 있는 인수의 컬렉션을 가져옵니다.</summary>
      <returns>개체를 만드는 데 사용할 수 있는 인수의 <see cref="T:System.Collections.ICollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke">
      <summary>이 인스턴스 설명자를 호출하고 설명자가 설명하는 개체를 반환합니다.</summary>
      <returns>이 인스턴스 설명자가 설명하는 개체입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.IsComplete">
      <summary>이 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />의 내용이 인스턴스를 완벽하게 식별하는지 여부를 나타내는 값을 가져옵니다</summary>
      <returns>인스턴스가 완벽하게 설명되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.MemberInfo">
      <summary>이 설명자가 연결된 인스턴스를 설명하는 멤버 정보를 가져옵니다.</summary>
      <returns>이 개체가 연결된 인스턴스를 설명하는 <see cref="T:System.Reflection.MemberInfo" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationship">
      <summary>개체와 멤버 사이의 단일 관계를 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="owner">
        <paramref name="member" />를 소유하는 개체입니다.</param>
      <param name="member">
        <paramref name="owner" />에 연관시킬 멤버입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> 또는 <paramref name="member" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty">
      <summary>빈 멤버 관계를 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.Equals(System.Object)">
      <summary>두 개의 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 인스턴스가 같은지 여부를 확인합니다.</summary>
      <param name="obj">현재 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />과 비교할 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />입니다.</param>
      <returns>지정된 <see langword="true" />가 현재<see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />와 같으면 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>현재 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />의 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.IsEmpty">
      <summary>이 관계가 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> 관계와 같은지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 관계가 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> 관계와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Member">
      <summary>연관된 멤버를 가져옵니다.</summary>
      <returns>
        <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" />에 전달되는 멤버입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Equality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>지정된 두 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 구조체가 동일한지 여부를 테스트합니다.</summary>
      <param name="left">같은 연산자의 왼쪽에 있는 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 구조체입니다.</param>
      <param name="right">같음 연산자의 오른쪽에 있는 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 구조체입니다.</param>
      <returns>두 개의 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 구조체가 동일하면 이 연산자는 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Inequality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>두 개의 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 구조체가 다른지 여부를 테스트합니다.</summary>
      <param name="left">같지 않음 연산자의 왼쪽에 있는 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 구조체입니다.</param>
      <param name="right">같지 않음 연산자의 오른쪽에 있는 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 구조체입니다.</param>
      <returns>두 개의 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 구조체가 다르면 이 연산자는 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Owner">
      <summary>소유하는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" />에 전달되는 소유하는 개체입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationshipService">
      <summary>멤버를 다른 멤버와 연결하기 위한 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationshipService" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.GetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>지정된 소스 관계에 관계를 가져옵니다.</summary>
      <param name="source">소스 관계입니다.</param>
      <returns>
        <paramref name="source" />에 대한 관계이거나, 관계가 없으면 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>소스 개체와 대상 개체의 관계를 설정합니다.</summary>
      <param name="source">소스 관계입니다. 관계 할당의 왼쪽 부분입니다.</param>
      <returns>
        <paramref name="source" />와 연결된 현재 관계이거나, 관계가 없으면 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" />가 비어 있거나 서비스에서 관계를 지원하지 않는 경우</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>소스 개체와 대상 개체의 관계를 설정합니다.</summary>
      <param name="sourceOwner">소스 관계의 소유자입니다.</param>
      <param name="sourceMember">소스 관계의 멤버입니다.</param>
      <returns>소스 개체와 대상 개체의 관계를 캡슐화하는 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 구조체이거나, 관계가 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceOwner" /> 또는 <paramref name="sourceMember" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceOwner" /> 또는 <paramref name="sourceMember" />가 비어 있거나 서비스에서 관계를 지원하지 않는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>소스 개체와 대상 관계 사이의 관계를 만듭니다.</summary>
      <param name="source">소스 관계입니다.</param>
      <param name="relationship">소스에 설정할 관계입니다.</param>
      <exception cref="T:System.ArgumentException">서비스에서 관계를 지원하지 않는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>지정된 관계가 지원되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="source">소스 관계입니다.</param>
      <param name="relationship">소스에 설정할 관계입니다.</param>
      <returns>지정된 두 개체 사이의 관계가 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.#ctor(System.String)">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">확인할 이름입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Name">
      <summary>확인할 개체의 이름을 가져옵니다.</summary>
      <returns>확인할 개체의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Value">
      <summary>이름이 일치하는 개체를 가져오거나 설정합니다.</summary>
      <returns>이름과 관련있는 개체입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventHandler">
      <summary>serialization 관리자의 <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> 이벤트를 처리하는 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
      <summary>루트 디자이너 개체에 대해 사용할 기본 serializer를 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>지정된 특성을 사용하는 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="serializerTypeName">serializer의 데이터 형식의 정규화된 이름입니다.</param>
      <param name="baseSerializerTypeName">serializer 기본 형식의 이름입니다. serializer들의 기본 형식이 모두 다르므로 클래스에 여러 serializer가 포함될 수 있습니다.</param>
      <param name="reloadable">이 serializer가 문서의 동적 재로딩을 지원하면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
      <summary>지정된 특성을 사용하는 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="serializerTypeName">serializer의 데이터 형식의 정규화된 이름입니다.</param>
      <param name="baseSerializerType">serializer 기본 형식의 이름입니다. serializer들의 기본 형식이 모두 다르므로 클래스에 여러 serializer가 포함될 수 있습니다.</param>
      <param name="reloadable">이 serializer가 문서의 동적 재로딩을 지원하면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
      <summary>지정된 특성을 사용하는 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="serializerType">serializer의 데이터 형식입니다.</param>
      <param name="baseSerializerType">serializer의 기본 형식입니다. serializer들의 기본 형식이 모두 다르므로 클래스에 여러 serializer가 포함될 수 있습니다.</param>
      <param name="reloadable">이 serializer가 문서의 동적 재로딩을 지원하면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
      <summary>루트 serializer가 디자이너 호스트를 먼저 삭제하지 않고 디자인 문서의 재로딩을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>루트 serializer가 재로딩을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>serializer의 기본 형식의 정규화된 형식 이름을 가져옵니다.</summary>
      <returns>serializer 기본 형식의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName">
      <summary>serializer의 정규화된 형식 이름을 가져옵니다.</summary>
      <returns>serializer 형식의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
      <summary>이 특성 형식의 고유 ID를 가져옵니다.</summary>
      <returns>이 특성 형식의 고유 ID가 포함된 개체입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.SerializationStore">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" />에 대한 serialization 데이터를 저장하기 위한 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Close">
      <summary>Serialization 저장소를 닫습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.SerializationStore.Errors">
      <summary>serialization 또는 deserialization 도중 발생한 오류의 컬렉션을 가져옵니다.</summary>
      <returns>Serialization 또는 deserialization 도중 발생한 오류가 포함된 <see cref="T:System.Collections.ICollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)">
      <summary>지정된 스트림에 저장소를 저장합니다.</summary>
      <param name="stream">저장소가 serialize될 스트림입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.System#IDisposable#Dispose">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceContainer">
      <summary>
        <see cref="T:System.ComponentModel.Design.IServiceContainer" /> 인터페이스의 기본 구현을 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)">
      <summary>지정된 부모 서비스 공급자를 사용하여 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="parentProvider">부모 서비스 공급자입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>지정된 서비스를 서비스 컨테이너에 추가합니다.</summary>
      <param name="serviceType">추가할 서비스 형식입니다.</param>
      <param name="callback">서비스를 만들 수 있는 콜백 개체입니다. 이 콜백 개체를 사용하면 서비스가 사용 가능으로 선언되지만 해당 서비스를 요청할 때까지 개체 만들기가 지연됩니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 또는 <paramref name="callback" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="serviceType" /> 형식의 서비스가 이미 컨테이너에 있는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>지정된 서비스를 서비스 컨테이너에 추가합니다.</summary>
      <param name="serviceType">추가할 서비스 형식입니다.</param>
      <param name="callback">서비스를 만들 수 있는 콜백 개체입니다. 이 콜백 개체를 사용하면 서비스가 사용 가능으로 선언되지만 해당 서비스를 요청할 때까지 개체 만들기가 지연됩니다.</param>
      <param name="promote">이 서비스가 부모 서비스 컨테이너에 추가되어야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 또는 <paramref name="callback" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="serviceType" /> 형식의 서비스가 이미 컨테이너에 있는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)">
      <summary>지정된 서비스를 서비스 컨테이너에 추가합니다.</summary>
      <param name="serviceType">추가할 서비스 형식입니다.</param>
      <param name="serviceInstance">추가할 서비스의 인스턴스입니다. 이 개체는 <paramref name="serviceType" /> 매개 변수가 나타내는 형식을 구현하거나 해당 형식에서 상속되어야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 또는 <paramref name="serviceInstance" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="serviceType" /> 형식의 서비스가 이미 컨테이너에 있는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>지정된 서비스를 서비스 컨테이너에 추가합니다.</summary>
      <param name="serviceType">추가할 서비스 형식입니다.</param>
      <param name="serviceInstance">추가할 서비스 형식의 인스턴스입니다. 이 개체는 <paramref name="serviceType" /> 매개 변수가 나타내는 형식을 구현하거나 해당 형식에서 상속되어야 합니다.</param>
      <param name="promote">이 서비스가 부모 서비스 컨테이너에 추가되어야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 또는 <paramref name="serviceInstance" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="serviceType" /> 형식의 서비스가 이미 컨테이너에 있는 경우</exception>
    </member>
    <member name="P:System.ComponentModel.Design.ServiceContainer.DefaultServices">
      <summary>
        <see cref="T:System.ComponentModel.Design.ServiceContainer" />에 의해 직접 구현된 기본 서비스를 가져옵니다.</summary>
      <returns>기본 서비스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose">
      <summary>이 서비스 컨테이너를 삭제합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose(System.Boolean)">
      <summary>이 서비스 컨테이너를 삭제합니다.</summary>
      <param name="disposing">
        <see cref="T:System.ComponentModel.Design.ServiceContainer" />가 삭제되는 중이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)">
      <summary>요청한 서비스를 가져옵니다.</summary>
      <param name="serviceType">검색할 서비스의 형식입니다.</param>
      <returns>서비스를 찾을 수 있으면 해당 서비스의 인스턴스이고, 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)">
      <summary>지정된 서비스 형식을 서비스 컨테이너에서 제거합니다.</summary>
      <param name="serviceType">제거할 서비스 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>지정된 서비스 형식을 서비스 컨테이너에서 제거합니다.</summary>
      <param name="serviceType">제거할 서비스 형식입니다.</param>
      <param name="promote">이 서비스가 부모 서비스 컨테이너에서 제거되어야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceCreatorCallback">
      <summary>필요할 때 서비스의 인스턴스를 만들 수 있는 콜백 메커니즘을 제공합니다.</summary>
      <param name="container">서비스 만들기를 요청한 서비스 컨테이너입니다.</param>
      <param name="serviceType">만들 서비스의 형식입니다.</param>
      <returns>
        <paramref name="serviceType" />로 지정된 서비스이거나, 해당 서비스를 만들 수 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.StandardCommands">
      <summary>대부분의 애플리케이션에서 사용할 수 있는 표준 명령 집합에 대한 식별자를 정의합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardCommands.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.StandardCommands" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignBottom">
      <summary>AlignBottom 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignHorizontalCenters">
      <summary>AlignHorizontalCenters 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignLeft">
      <summary>AlignLeft 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignRight">
      <summary>AlignRight 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignToGrid">
      <summary>AlignToGrid 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignTop">
      <summary>AlignTop 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignVerticalCenters">
      <summary>AlignVerticalCenters 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeBottom">
      <summary>ArrangeBottom 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeIcons">
      <summary>ArrangeIcons 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeRight">
      <summary>ArrangeRight 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringForward">
      <summary>BringForward 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringToFront">
      <summary>BringToFront 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterHorizontally">
      <summary>CenterHorizontally 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterVertically">
      <summary>CenterVertically 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Copy">
      <summary>Copy 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Cut">
      <summary>Cut 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Delete">
      <summary>Delete 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.DocumentOutline">
      <summary>Document Outline 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.F1Help">
      <summary>F1Help 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Group">
      <summary>Group 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceConcatenate">
      <summary>HorizSpaceConcatenate 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceDecrease">
      <summary>HorizSpaceDecrease 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceIncrease">
      <summary>HorizSpaceIncrease 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceMakeEqual">
      <summary>HorizSpaceMakeEqual 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LineupIcons">
      <summary>LineupIcons 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LockControls">
      <summary>LockControls 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelRedo">
      <summary>MultiLevelRedo 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelUndo">
      <summary>MultiLevelUndo 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Paste">
      <summary>Paste 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Properties">
      <summary>Properties 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.PropertiesWindow">
      <summary>PropertiesWindow 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Redo">
      <summary>Redo 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Replace">
      <summary>Replace 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SelectAll">
      <summary>SelectAll 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendBackward">
      <summary>SendBackward 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendToBack">
      <summary>SendToBack 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowGrid">
      <summary>ShowGrid 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowLargeIcons">
      <summary>ShowLargeIcons 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControl">
      <summary>SizeToControl 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlHeight">
      <summary>SizeToControlHeight 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlWidth">
      <summary>SizeToControlWidth 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToFit">
      <summary>SizeToFit 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToGrid">
      <summary>SizeToGrid 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SnapToGrid">
      <summary>SnapToGrid 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.TabOrder">
      <summary>TabOrder 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Undo">
      <summary>Undo 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Ungroup">
      <summary>Ungroup 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbFirst">
      <summary>동사 집합에서 첫 번째 동사를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbLast">
      <summary>동사 집합에서 마지막 동사를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceConcatenate">
      <summary>VertSpaceConcatenate 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceDecrease">
      <summary>VertSpaceDecrease 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceIncrease">
      <summary>VertSpaceIncrease 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceMakeEqual">
      <summary>VertSpaceMakeEqual 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewCode">
      <summary>ViewCode 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewGrid">
      <summary>ViewGrid 명령에 대한 <see cref="T:System.ComponentModel.Design.CommandID" />를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.StandardToolWindows">
      <summary>디자인 환경에서 사용할 수 있는 도구 창의 표준 세트에 해당하는 GUID 식별자를 정의합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardToolWindows.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.StandardToolWindows" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ObjectBrowser">
      <summary>개체 브라우저에 대한 GUID를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.OutputWindow">
      <summary>출력 창에 대한 GUID를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ProjectExplorer">
      <summary>솔루션 탐색기에 대한 GUID를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.PropertyBrowser">
      <summary>속성 창에 대한 GUID를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.RelatedLinks">
      <summary>관련 링크 프레임에 대한 GUID를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ServerExplorer">
      <summary>서버 탐색기에 대한 GUID를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.TaskList">
      <summary>작업 목록에 대한 GUID를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.Toolbox">
      <summary>도구 상자의 GUID를 가져옵니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Design.TypeDescriptionProviderService">
      <summary>지정된 형식에 대한 형식 설명 공급자를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Design.TypeDescriptionProviderService" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Object)">
      <summary>지정된 개체에 대한 형식 설명 공급자를 가져옵니다.</summary>
      <param name="instance">형식 설명 공급자를 가져올 개체입니다.</param>
      <returns>
        <paramref name="instance" />에 해당하는 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Type)">
      <summary>지정된 형식에 대한 형식 설명 공급자를 가져옵니다.</summary>
      <param name="type">형식 설명 공급자를 가져올 형식입니다.</param>
      <returns>
        <paramref name="type" />에 해당하는 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ViewTechnology">
      <summary>디자이너 호스트가 지원하는 기술 세트에 대한 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Default">
      <summary>기본 뷰 기술 지원을 지정합니다.
루트 디자이너 개체의 모든 형식을 반환할 수 있지만, 개체는 호스트 기술에 사용되는 어댑터와 호환되어야 합니다. Visual Studio와 같은 호스팅 환경에는 새로운 보기 기술 어댑터에 연결하는 방법을 제공합니다. Windows Forms 디자이너의 기본 보기 개체는 <see cref="T:System.Windows.Forms.Control" /> 인스턴스입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
      <summary>뷰 개체가 개발 환경에 직접 전달되는 모드를 나타냅니다.
보기 개체는 개발 환경에 필요한 모든 인터페이스를 구현해야 합니다. Visual Studio 개발 환경에서는 ActiveX 컨트롤, 액티브 문서 또는 Visual Studio VSI(Visual Studio 통합) 프로그램을 통해 사용할 수 있는 IVsWindowPane 인터페이스를 구현하는 개체인 보기 개체를 지원합니다. Visual Studio 개발 환경에서는 이 보기 기술을 지원합니다. 모든 개발 환경에서 이 보기 기술이 지원되는 것은 아닙니다.</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
      <summary>Windows Forms 컨트롤 개체가 루트 디자이너를 위한 디스플레이를 제공하는 모드를 나타냅니다. 디자이너 호스트는 Windows Forms 컨트롤을 사용하여 개발 환경 문서 창을 채웁니다.</summary>
    </member>
    <member name="T:System.ComponentModel.DesignerAttribute">
      <summary>구성 요소에 대한 디자인 타임 서비스를 구현하는 데 사용되는 클래스를 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String)">
      <summary>디자인 타임 서비스를 제공하는 형식의 이름을 사용하여 <see cref="T:System.ComponentModel.DesignerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="designerTypeName">이 특성이 바인딩되는 구성 요소에 디자인 타임 서비스를 제공하는 형식의 정규화된 이름과 이 형식이 속하는 어셈블리의 이름을 연결합니다.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.String)">
      <summary>디자이너 형식 및 디자이너 기본 클래스를 사용하여 <see cref="T:System.ComponentModel.DesignerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="designerTypeName">이 특성이 바인딩되는 구성 요소에 디자인 타임 서비스를 제공하는 형식의 정규화된 이름과 이 형식이 속하는 어셈블리의 이름을 연결합니다.</param>
      <param name="designerBaseTypeName">디자이너 클래스와 연결할 기본 클래스의 정규화된 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.Type)">
      <summary>디자이너 클래스 이름 및 디자이너 기본 클래스를 사용하여 <see cref="T:System.ComponentModel.DesignerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="designerTypeName">이 특성이 바인딩되는 구성 요소에 디자인 타임 서비스를 제공하는 형식의 정규화된 이름과 이 형식이 속하는 어셈블리의 이름을 연결합니다.</param>
      <param name="designerBaseType">
        <paramref name="designerTypeName" />과 연결할 기본 클래스를 나타내는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type)">
      <summary>디자인 타임 서비스를 제공하는 형식을 사용하여 <see cref="T:System.ComponentModel.DesignerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="designerType">이 특성이 바인딩되는 구성 요소에 디자인 타임 서비스를 제공하는 클래스를 나타내는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type,System.Type)">
      <summary>디자이너 형식 및 디자이너 기본 클래스를 사용하여 <see cref="T:System.ComponentModel.DesignerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="designerType">이 특성이 바인딩되는 구성 요소에 디자인 타임 서비스를 제공하는 클래스를 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="designerBaseType">
        <paramref name="designerType" />과 연결할 기본 클래스를 나타내는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerBaseTypeName">
      <summary>이 디자이너의 기본 형식 이름을 가져옵니다.</summary>
      <returns>이 디자이너의 기본 형식 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerTypeName">
      <summary>이 디자이너 특성과 관련된 디자이너 형식 이름을 가져옵니다.</summary>
      <returns>이 디자이너 특성과 관련된 디자이너 형식 이름입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.Equals(System.Object)">
      <summary>주어진 개체의 값이 현재 <see cref="T:System.ComponentModel.DesignerAttribute" />와 같은지 여부를 반환합니다.</summary>
      <param name="obj">값이 같은지 테스트할 개체입니다.</param>
      <returns>주어진 개체의 값이 현재 개체의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.TypeId">
      <summary>이 특성 형식의 고유 ID를 가져옵니다.</summary>
      <returns>이 특성 형식의 고유 ID입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DesignTimeVisibleAttribute">
      <summary>
        <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" />는 구성 요소의 표시 여부를 표시합니다. <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes" />가 있으면 비주얼 디자이너에서 이 구성 요소를 디자이너에 표시할 수 있습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor">
      <summary>기본값이 <see langword="false" />인 새 <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" />를 만듭니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> 속성이 <paramref name="visible" />에 지정된 값으로 설정된 새 <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" />를 만듭니다.</summary>
      <param name="visible">
        <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> 속성이 설정될 값입니다.</param>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Default">
      <summary>
        <see langword="Yes" />로 지정된 기본 표시 여부입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.Equals(System.Object)">
      <summary>이 인스턴스가 지정한 개체와 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="obj">이 인스턴스와 비교할 개체이거나 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</param>
      <returns>
        <see langword="true" />가 이 인스턴스의 형식 및 값과 같으면 <paramref name="obj" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.IsDefaultAttribute">
      <summary>이 인스턴스가 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" /> 값과 같은지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 인스턴스가 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" /> 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.No">
      <summary>비주얼 디자이너에서 구성 요소가 표시되지 않도록 지정합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible">
      <summary>디자인 타임에 구성 요소가 표시될지 여부를 가져오거나 설정합니다.</summary>
      <returns>이 구성 요소가 디자인 타임에 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes">
      <summary>비주얼 디자이너에서 구성 요소가 표시되도록 지정합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.DoubleConverter">
      <summary>배정밀도 부동 소수점 숫자 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DoubleConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.DoubleConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.EditorAttribute">
      <summary>속성을 변경하는 데 사용할 편집기를 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor">
      <summary>기본 편집기(편집기 없음)를 사용하여 <see cref="T:System.ComponentModel.EditorAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.String)">
      <summary>편집기의 형식 이름 및 기본 형식 이름을 사용하여 <see cref="T:System.ComponentModel.EditorAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeName">편집기의 정규화된 형식 이름입니다.</param>
      <param name="baseTypeName">편집기의 조회 키로 사용할 기본 클래스 또는 인터페이스의 정규화된 형식 이름입니다. 이 클래스는 <see cref="T:System.Drawing.Design.UITypeEditor" />이거나 이 클래스에서 파생되어야 합니다.</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.Type)">
      <summary>형식 이름과 기본 형식을 사용하여 <see cref="T:System.ComponentModel.EditorAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeName">편집기의 정규화된 형식 이름입니다.</param>
      <param name="baseType">편집기의 조회 키로 사용할 기본 클래스 또는 인터페이스의 <see cref="T:System.Type" />입니다. 이 클래스는 <see cref="T:System.Drawing.Design.UITypeEditor" />이거나 이 클래스에서 파생되어야 합니다.</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.Type,System.Type)">
      <summary>형식과 기본 형식을 사용하여 <see cref="T:System.ComponentModel.EditorAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">편집기의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="baseType">편집기의 조회 키로 사용할 기본 클래스 또는 인터페이스의 <see cref="T:System.Type" />입니다. 이 클래스는 <see cref="T:System.Drawing.Design.UITypeEditor" />이거나 이 클래스에서 파생되어야 합니다.</param>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorBaseTypeName">
      <summary>이 편집기의 조회 키로 사용되는 기본 클래스 또는 인터페이스 이름을 가져옵니다.</summary>
      <returns>이 편집기의 조회 키로 사용되는 기본 클래스 또는 인터페이스 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorTypeName">
      <summary>
        <see cref="P:System.Type.AssemblyQualifiedName" /> 형식의 편집기 클래스 이름을 가져옵니다.</summary>
      <returns>
        <see cref="P:System.Type.AssemblyQualifiedName" /> 형식의 편집기 클래스 이름입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.Equals(System.Object)">
      <summary>주어진 개체의 값이 현재 <see cref="T:System.ComponentModel.EditorAttribute" />와 같은지 여부를 반환합니다.</summary>
      <param name="obj">값이 같은지 테스트할 개체입니다.</param>
      <returns>주어진 개체의 값이 현재 개체의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.TypeId">
      <summary>이 특성 형식의 고유 ID를 가져옵니다.</summary>
      <returns>이 특성 형식의 고유 ID입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.EnumConverter">
      <summary>
        <see cref="T:System.Enum" /> 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.#ctor(System.Type)">
      <summary>지정된 형식에 대한 <see cref="T:System.ComponentModel.EnumConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">이 열거형 변환기에 연결할 열거형 유형을 나타내는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>지정된 컨텍스트를 사용하여 이 변환기가 지정된 소스 형식의 개체를 열거형 개체로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Comparer">
      <summary>열거형 값을 정렬하는 데 사용할 수 있는 <see cref="T:System.Collections.IComparer" />를 가져옵니다.</summary>
      <returns>열거형 값을 저장하기 위한 <see cref="T:System.Collections.IComparer" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 값 개체를 열거형 개체로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">선택적 <see cref="T:System.Globalization.CultureInfo" />입니다. 제공되지 않으면 현재 문화권으로 가정합니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <returns>변환된 <paramref name="value" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 대상 형식의 올바른 값이 아닌 경우</exception>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>주어진 값 개체를 지정한 대상 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">선택적 <see cref="T:System.Globalization.CultureInfo" />입니다. 제공되지 않으면 현재 문화권으로 가정합니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType">값을 변환할 대상 <see cref="T:System.Type" />입니다.</param>
      <returns>변환된 <paramref name="value" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />가 열거형에 대한 올바른 값이 아닌 경우</exception>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.EnumType">
      <summary>이 변환기를 연결할 열거자의 유형을 지정합니다.</summary>
      <returns>이 변환기를 연결할 열거자의 형식입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>이 유효성 검사기를 사용하도록 디자인된 데이터 형식의 표준 값 컬렉션을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>유효한 표준 값 집합을 포함하는 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />이거나 데이터 형식이 표준 값 집합을 지원하지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>지정된 컨텍스트를 사용하여 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />에서 반환된 표준 값 목록이 단독 목록인지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>
        <see langword="true" />에서 반환된 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />이 가능한 값에 대한 단독 목록이면 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />이고, 그 외에 다른 값을 사용할 수 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>지정된 컨텍스트를 사용하여, 이 개체가 목록에서 선택할 수 있는 표준 값 집합을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>개체가 지원하는 공통되는 값 집합을 찾기 위해 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />를 호출해야 하므로 <see langword="true" />입니다. 이 메서드는 <see langword="false" />를 반환하지 않습니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>지정된 개체 값이 이 형식에 대해 유효한지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value">테스트할 <see cref="T:System.Object" />입니다.</param>
      <returns>지정된 값을 이 개체에 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Values">
      <summary>열거형에 사용할 수 있는 값을 지정하는 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />을 가져오거나 설정합니다.</summary>
      <returns>열거형에 사용할 수 있는 값을 지정하는 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptor">
      <summary>이벤트에 대한 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>지정된 <see cref="T:System.ComponentModel.EventDescriptor" />의 이름과 특성을 사용하여 <see cref="T:System.ComponentModel.MemberDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="descr">이벤트 이름 및 특성이 들어 있는 <see cref="T:System.ComponentModel.MemberDescriptor" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>지정된 <see cref="T:System.ComponentModel.EventDescriptor" />의 이름과 <see cref="T:System.ComponentModel.MemberDescriptor" /> 및 <see cref="T:System.ComponentModel.MemberDescriptor" /> 배열 모두의 특성을 사용하여 <see cref="T:System.Attribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="descr">멤버 이름 및 특성이 들어 있는 <see cref="T:System.ComponentModel.MemberDescriptor" />입니다.</param>
      <param name="attrs">이 이벤트 설명에 추가할 특성이 들어 있는 <see cref="T:System.Attribute" /> 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>지정된 이름과 특성 배열을 사용하여 <see cref="T:System.ComponentModel.EventDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">이벤트의 이름입니다.</param>
      <param name="attrs">이벤트 특성이 들어 있는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)">
      <summary>파생 클래스에서 재정의된 경우 이벤트를 구성 요소에 바인딩합니다.</summary>
      <param name="component">대리자에 이벤트를 제공하는 구성 요소입니다.</param>
      <param name="value">이벤트를 처리하는 메서드를 나타내는 대리자입니다.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.ComponentType">
      <summary>파생 클래스에서 재정의된 경우 이 이벤트가 바인딩된 구성 요소의 형식을 가져옵니다.</summary>
      <returns>이벤트가 바인딩된 구성 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.EventType">
      <summary>파생 클래스에서 재정의된 경우 이벤트의 대리자 형식을 가져옵니다.</summary>
      <returns>이벤트의 대리자 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.IsMulticast">
      <summary>파생 클래스에서 재정의된 경우 이벤트 대리자가 멀티캐스트 대리자인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이벤트 대리자가 멀티캐스트이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>파생 클래스에서 재정의된 경우 대리자가 구성 요소로부터 더 이상 이벤트를 받지 않도록 해당 구성 요소에서 대리자를 바인딩 해제합니다.</summary>
      <param name="component">대리자가 바인딩된 구성 요소입니다.</param>
      <param name="value">구성 요소에서 바인딩 해제할 대리자입니다.</param>
    </member>
    <member name="T:System.ComponentModel.EventDescriptorCollection">
      <summary>
        <see cref="T:System.ComponentModel.EventDescriptor" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])">
      <summary>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 개체의 지정된 배열을 사용하여 <see cref="T:System.ComponentModel.EventDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="events">이 컬렉션의 이벤트를 제공하는 <see cref="T:System.ComponentModel.EventDescriptor" /> 형식의 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 개체의 지정된 배열을 사용하여 <see cref="T:System.ComponentModel.EventDescriptor" /> 클래스의 새 인스턴스를 초기화합니다. 컬렉션은 선택적으로 읽기 전용으로 만들 수 있습니다.</summary>
      <param name="events">이 컬렉션의 이벤트를 제공하는 <see cref="T:System.ComponentModel.EventDescriptor" /> 형식의 배열입니다.</param>
      <param name="readOnly">컬렉션을 읽기 전용으로 지정하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)">
      <summary>
        <see cref="T:System.ComponentModel.EventDescriptor" />를 컬렉션의 끝 부분에 추가합니다.</summary>
      <param name="value">컬렉션에 추가할 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</param>
      <returns>컬렉션 내의 <see cref="T:System.ComponentModel.EventDescriptor" /> 위치입니다.</returns>
      <exception cref="T:System.NotSupportedException">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Clear">
      <summary>컬렉션에서 모든 개체를 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)">
      <summary>컬렉션에 지정된 <see cref="T:System.ComponentModel.EventDescriptor" />가 들어 있는지 여부를 반환합니다.</summary>
      <param name="value">컬렉션 내에서 찾을 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</param>
      <returns>컬렉션에 지정된 <paramref name="value" /> 매개 변수가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Count">
      <summary>컬렉션에 있는 이벤트 설명자의 개수를 가져옵니다.</summary>
      <returns>컬렉션에 있는 이벤트 설명자의 개수입니다.</returns>
    </member>
    <member name="F:System.ComponentModel.EventDescriptorCollection.Empty">
      <summary>항목이 없는 새 컬렉션을 만드는 대신 사용할 빈 컬렉션을 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>컬렉션에서 지정된 이름의 이벤트에 대한 설명을 가져옵니다.</summary>
      <param name="name">컬렉션에서 가져올 이벤트의 이름입니다.</param>
      <param name="ignoreCase">이벤트의 대/소문자를 무시하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>지정된 이름의 <see cref="T:System.ComponentModel.EventDescriptor" />이거나, 해당 이벤트가 없을 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.GetEnumerator">
      <summary>이 <see cref="T:System.ComponentModel.EventDescriptorCollection" />에 대한 열거자를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />를 구현하는 열거자입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)">
      <summary>지정된 <see cref="T:System.ComponentModel.EventDescriptor" />의 인덱스를 반환합니다.</summary>
      <param name="value">컬렉션 내에서 찾을 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</param>
      <returns>컬렉션 내에 있는 지정된 <see cref="T:System.ComponentModel.EventDescriptor" />의 인덱스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)">
      <summary>
        <see cref="T:System.ComponentModel.EventDescriptor" />를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index">컬렉션 내에서 <paramref name="value" /> 매개 변수를 삽입할 인덱스입니다.</param>
      <param name="value">컬렉션에 삽입할 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</param>
      <exception cref="T:System.NotSupportedException">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>지정된 <see cref="T:System.ComponentModel.EventDescriptorCollection" />를 사용하여 이 <see cref="T:System.Collections.IComparer" />의 멤버를 정렬합니다.</summary>
      <param name="sorter">이 컬렉션의 <see cref="T:System.ComponentModel.EventDescriptor" /> 개체를 정렬하는 데 사용할 비교자입니다.</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])">
      <summary>이 <see cref="T:System.ComponentModel.EventDescriptorCollection" />의 멤버를 정렬합니다. 지정된 순서가 먼저 적용된 다음 대개 사전순인 이 컬렉션의 기본 정렬 순서가 적용됩니다.</summary>
      <param name="names">이 컬렉션에 있는 <see cref="T:System.ComponentModel.EventDescriptor" /> 개체의 정렬 순서를 기술하는 문자열 배열입니다.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)">
      <summary>지정된 인덱스 번호를 갖는 이벤트를 가져오거나 설정합니다.</summary>
      <param name="index">가져오거나 설정할 <see cref="T:System.ComponentModel.EventDescriptor" />의 인덱스(0부터 시작) 번호입니다.</param>
      <returns>지정된 인덱스 번호가 있는 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" />가 <see cref="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)" />에 대해 유효한 인덱스가 아닌 경우</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.String)">
      <summary>지정된 이름의 이벤트를 가져오거나 설정합니다.</summary>
      <param name="name">가져오거나 설정할 <see cref="T:System.ComponentModel.EventDescriptor" />의 이름입니다.</param>
      <returns>지정된 이름의 <see cref="T:System.ComponentModel.EventDescriptor" />이거나, 해당 이벤트가 없을 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)">
      <summary>지정된 <see cref="T:System.ComponentModel.EventDescriptor" />를 컬렉션에서 제거합니다.</summary>
      <param name="value">컬렉션에서 제거할 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</param>
      <exception cref="T:System.NotSupportedException">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)">
      <summary>컬렉션에서 지정된 인덱스의 <see cref="T:System.ComponentModel.EventDescriptor" />를 제거합니다.</summary>
      <param name="index">제거할 <see cref="T:System.ComponentModel.EventDescriptor" />의 인덱스입니다.</param>
      <exception cref="T:System.NotSupportedException">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort">
      <summary>대개 사전순인 이 컬렉션의 기본 정렬 순서를 사용하여 이 <see cref="T:System.ComponentModel.EventDescriptorCollection" />의 멤버를 정렬합니다.</summary>
      <returns>새 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>지정된 <see cref="T:System.ComponentModel.EventDescriptorCollection" />를 사용하여 이 <see cref="T:System.Collections.IComparer" />의 멤버를 정렬합니다.</summary>
      <param name="comparer">이 컬렉션의 <see cref="T:System.Collections.IComparer" /> 개체를 정렬하는 데 사용할 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</param>
      <returns>새 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])">
      <summary>지정된 정렬 순서를 사용하여 이 <see cref="T:System.ComponentModel.EventDescriptorCollection" />의 멤버를 정렬합니다.</summary>
      <param name="names">컬렉션에 있는 <see cref="T:System.ComponentModel.EventDescriptor" /> 개체의 정렬 순서를 기술하는 문자열 배열입니다.</param>
      <returns>새 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>지정된 정렬 순서 및 <see cref="T:System.ComponentModel.EventDescriptorCollection" />를 사용하여 이 <see cref="T:System.Collections.IComparer" />의 멤버를 정렬합니다.</summary>
      <param name="names">컬렉션에 있는 <see cref="T:System.ComponentModel.EventDescriptor" /> 개체의 정렬 순서를 기술하는 문자열 배열입니다.</param>
      <param name="comparer">이 컬렉션의 <see cref="T:System.Collections.IComparer" /> 개체를 정렬하는 데 사용할 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</param>
      <returns>새 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>특정 <see cref="T:System.Array" /> 인덱스부터 시작하여 컬렉션의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">컬렉션에서 복사한 요소의 대상인 1차원 <see cref="T:System.Array" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#Count">
      <summary>컬렉션에 포함된 요소 수를 가져옵니다.</summary>
      <returns>컬렉션에 포함된 요소 수입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>컬렉션에 대한 액세스가 동기화되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션에 대한 액세스가 동기화되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary>컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary>컬렉션에 항목을 추가합니다.</summary>
      <param name="value">컬렉션에 추가할 <see cref="T:System.Object" />입니다.</param>
      <returns>새 요소가 삽입된 위치입니다.</returns>
      <exception cref="T:System.NotSupportedException">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Clear">
      <summary>컬렉션에서 모든 항목을 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary>컬렉션에 특정 값이 있는지 여부를 확인합니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.Object" />입니다.</param>
      <returns>
        <see cref="T:System.Object" />가 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>컬렉션에 있는 특정 항목의 인덱스를 확인합니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.Object" />입니다.</param>
      <returns>목록에 있으면 <paramref name="value" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>항목을 컬렉션 내의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index">
        <paramref name="value" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="value">컬렉션에 삽입할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.NotSupportedException">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary>컬렉션의 크기가 고정되어 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션의 크기가 고정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary>컬렉션이 읽기 전용인지를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션이 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary>지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</summary>
      <param name="index">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</param>
      <returns>지정한 인덱스의 요소입니다.</returns>
      <exception cref="T:System.NotSupportedException">컬렉션이 읽기 전용입니다.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="index" />가 <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />보다 크거나 같은 경우</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary>컬렉션에서 첫 번째로 나타나는 특정 개체를 제거합니다.</summary>
      <param name="value">컬렉션에서 제거할 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.NotSupportedException">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>지정한 인덱스에서 해당 항목을 제거합니다.</summary>
      <param name="index">제거할 항목의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.NotSupportedException">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="T:System.ComponentModel.ExpandableObjectConverter">
      <summary>확장할 수 있는 개체와 여러 가지 다른 표현 간에 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.ExpandableObjectConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>값 매개 변수로 지정된 개체의 형식에 대한 속성 컬렉션을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value">속성을 가져올 개체의 형식을 지정하는 <see cref="T:System.Object" />입니다.</param>
      <param name="attributes">필터로 사용할 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns>구성 요소에 대해 노출된 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />이거나, 속성이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>지정된 컨텍스트를 사용하여, 이 개체에서 속성을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>이 개체의 속성을 찾으려면 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />를 호출해야 하기 때문에 <see langword="true" />입니다. 이 메서드는 <see langword="false" />를 반환하지 않습니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ExtenderProvidedPropertyAttribute">
      <summary>Extender 공급자에서 제공하는 속성을 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.ExtenderProvidedPropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals(System.Object)">
      <summary>이 인스턴스가 지정한 개체와 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="obj">이 인스턴스와 비교할 <see cref="T:System.Object" />이거나 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</param>
      <returns>
        <see langword="true" />가 이 인스턴스의 형식 및 값과 같으면 <paramref name="obj" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ExtenderProperty">
      <summary>제공되는 속성을 가져옵니다.</summary>
      <returns>제공되는 속성을 캡슐화하는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.IsDefaultAttribute">
      <summary>이 인스턴스의 값이 파생 클래스의 기본값인지 여부를 나타냅니다.</summary>
      <returns>이 인스턴스가 클래스에 대한 기본 특성이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.Provider">
      <summary>속성을 제공하는 Extender 공급자를 가져옵니다.</summary>
      <returns>속성을 제공하는 <see cref="T:System.ComponentModel.IExtenderProvider" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ReceiverType">
      <summary>속성을 받을 수 있는 개체의 형식을 가져옵니다.</summary>
      <returns>속성을 받을 수 있는 개체의 형식을 설명하는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.GuidConverter">
      <summary>
        <see cref="T:System.Guid" /> 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.GuidConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>이 변환기가 지정된 소스 형식의 개체를 컨텍스트를 사용하여 GUID 개체로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 개체를 GUID 개체로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">선택적 <see cref="T:System.Globalization.CultureInfo" />입니다. 제공되지 않으면 현재 문화권으로 가정합니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <returns>변환된 <paramref name="value" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>지정된 개체를 다른 형식으로 변환합니다.</summary>
      <param name="context">포맷터 컨텍스트입니다.</param>
      <param name="culture">
        <paramref name="value" />가 변환될 문화권입니다.</param>
      <param name="value">변환할 개체입니다.</param>
      <param name="destinationType">개체를 변환할 대상 유형입니다.</param>
      <returns>변환된 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="T:System.ComponentModel.HandledEventArgs">
      <summary>이벤트 처리기에서 완전히 처리할 수 있는 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor">
      <summary>기본 <see cref="T:System.ComponentModel.HandledEventArgs" /> 속성 값으로 <see langword="false" />를 사용하여 <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.HandledEventArgs" /> 속성의 지정된 기본값을 사용하여 <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="defaultHandledValue">
        <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 속성의 기본값입니다.</param>
    </member>
    <member name="P:System.ComponentModel.HandledEventArgs.Handled">
      <summary>이벤트 처리기에서 이벤트를 완전히 처리했는지 아니면 시스템에서 처리를 계속해야 하는지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>이벤트가 완전히 처리되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventHandler">
      <summary>이벤트 처리기가 반환된 후 추가 처리가 필요하거나 필요하지 않을 수 있는 이벤트를 처리할 수 있는 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.HandledEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.IBindingList">
      <summary>데이터 소스에 바인딩할 때 복잡하거나 간단한 시나리오 모두를 지원하는 데 필요한 기능을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>검색에 사용되는 인덱스에 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 추가합니다.</summary>
      <param name="property">검색에 사용되는 인덱스에 추가할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddNew">
      <summary>목록에 새 항목을 추가합니다.</summary>
      <returns>목록에 추가되는 항목입니다.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.AllowNew" />가 <see langword="false" />입니다.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowEdit">
      <summary>목록의 항목을 업데이트할 수 있는지 여부를 가져옵니다.</summary>
      <returns>목록의 항목을 업데이트할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowNew">
      <summary>
        <see cref="M:System.ComponentModel.IBindingList.AddNew" />를 사용하여 목록에 항목을 추가할 수 있는지 여부를 가져옵니다.</summary>
      <returns>
        <see cref="M:System.ComponentModel.IBindingList.AddNew" />를 사용하여 목록에 항목을 추가할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowRemove">
      <summary>
        <see cref="M:System.Collections.IList.Remove(System.Object)" /> 또는 <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />를 사용하여 목록에서 항목을 제거할 수 있는지 여부를 가져옵니다.</summary>
      <returns>목록에서 항목을 제거할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 및 <see cref="T:System.ComponentModel.ListSortDirection" />에 따라 목록을 정렬합니다.</summary>
      <param name="property">정렬에 사용할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 값 중 하나입니다.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />가 <see langword="false" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>지정된 <see cref="T:System.ComponentModel.PropertyDescriptor" />가 있는 행의 인덱스를 반환합니다.</summary>
      <param name="property">검색할 대상 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <param name="key">검색할 <paramref name="property" /> 매개 변수의 이름입니다.</param>
      <returns>지정된 <see cref="T:System.ComponentModel.PropertyDescriptor" />가 있는 행의 인덱스입니다.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />가 <see langword="false" />입니다.</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.IsSorted">
      <summary>목록의 항목이 정렬되는지 여부를 가져옵니다.</summary>
      <returns>
        <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />가 호출되고 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />는 호출되지 않았으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />가 <see langword="false" />인 경우</exception>
    </member>
    <member name="E:System.ComponentModel.IBindingList.ListChanged">
      <summary>목록 또는 목록의 항목이 변경될 때 발생합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>검색에 사용되는 인덱스에서 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 제거합니다.</summary>
      <param name="property">검색에 사용되는 인덱스에서 제거할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveSort">
      <summary>
        <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />를 사용하여 적용되는 모든 정렬을 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />가 <see langword="false" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortDirection">
      <summary>정렬 방향을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDirection" /> 값 중 하나입니다.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />가 <see langword="false" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortProperty">
      <summary>정렬에 사용되는 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 가져옵니다.</summary>
      <returns>정렬에 사용되는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />가 <see langword="false" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsChangeNotification">
      <summary>목록이 변경되거나 목록의 항목이 변경될 때 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 이벤트가 발생되는지 여부를 가져옵니다.</summary>
      <returns>목록이나 항목이 변경될 때 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 이벤트가 발생하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSearching">
      <summary>목록이 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 메서드를 사용한 검색 기능을 지원하는지 여부를 가져옵니다.</summary>
      <returns>목록에서 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 메서드를 사용한 검색 기능을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSorting">
      <summary>목록이 정렬을 지원하는지 여부를 가져옵니다.</summary>
      <returns>목록에서 정렬 기능을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.IBindingListView">
      <summary>고급 정렬 및 필터링 기능을 제공하여 <see cref="T:System.ComponentModel.IBindingList" /> 인터페이스를 확장합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary>지정한 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />을 기준으로 데이터 소스를 정렬합니다.</summary>
      <param name="sorts">데이터 소스에 적용할 정렬이 포함된 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.Filter">
      <summary>데이터 소스에서 반환된 항목 컬렉션에서 항목을 제외하는 데 사용할 필터를 가져오거나 설정합니다.</summary>
      <returns>데이터 소스에서 반환된 항목 컬렉션에서 항목을 필터링하는 데 사용되는 문자열입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.RemoveFilter">
      <summary>데이터 소스에 적용된 현재 필터를 제거합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SortDescriptions">
      <summary>데이터 소스에 현재 적용된 정렬 설명의 컬렉션을 가져옵니다.</summary>
      <returns>데이터 소스에 현재 적용된 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting">
      <summary>데이터 소스에서 고급 정렬을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>데이터 소스에서 고급 정렬을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsFiltering">
      <summary>데이터 소스에서 필터링을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>데이터 소스에서 필터링을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ICancelAddNew">
      <summary>컬렉션에 새 항목을 추가할 때 트랜잭션 기능을 추가합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)">
      <summary>보류 중인 새 항목을 컬렉션에서 삭제합니다.</summary>
      <param name="itemIndex">컬렉션에 이전에 추가된 항목의 인덱스입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.EndNew(System.Int32)">
      <summary>보류 중인 새 항목을 컬렉션에 커밋합니다.</summary>
      <param name="itemIndex">컬렉션에 이전에 추가된 항목의 인덱스입니다.</param>
    </member>
    <member name="T:System.ComponentModel.IComNativeDescriptorHandler">
      <summary>COM 개체와 <see cref="T:System.ComponentModel.TypeDescriptor" /> 사이의 최상위 매핑 계층을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetAttributes(System.Object)">
      <summary>지정된 구성 요소의 특성을 가져옵니다.</summary>
      <param name="component">특성을 가져올 구성 요소입니다.</param>
      <returns>
        <paramref name="component" />에 대한 특성의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetClassName(System.Object)">
      <summary>지정된 구성 요소에 대한 클래스 이름을 가져옵니다.</summary>
      <param name="component">클래스 이름을 가져올 구성 요소입니다.</param>
      <returns>
        <paramref name="component" />에 해당하는 클래스의 이름입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetConverter(System.Object)">
      <summary>지정된 구성 요소에 대한 형식 변환기를 가져옵니다.</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.TypeConverter" />를 가져올 구성 요소입니다.</param>
      <returns>
        <paramref name="component" />의 <see cref="T:System.ComponentModel.TypeConverter" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultEvent(System.Object)">
      <summary>지정된 구성 요소에 대한 기본 이벤트를 가져옵니다.</summary>
      <param name="component">기본 이벤트를 가져올 구성 요소입니다.</param>
      <returns>
        <paramref name="component" />의 기본 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultProperty(System.Object)">
      <summary>지정된 구성 요소의 기본 속성을 가져옵니다.</summary>
      <param name="component">관련된 기본 속성을 가져올 구성 요소입니다.</param>
      <returns>
        <paramref name="component" />의 기본 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEditor(System.Object,System.Type)">
      <summary>지정된 구성 요소의 편집기를 가져옵니다.</summary>
      <param name="component">관련된 편집기를 가져올 구성 요소입니다.</param>
      <param name="baseEditorType">
        <paramref name="component" />에 대한 편집기의 기본 형식입니다.</param>
      <returns>
        <paramref name="component" />에 대한 편집기입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object)">
      <summary>지정된 구성 요소의 이벤트를 가져옵니다.</summary>
      <param name="component">관련된 이벤트를 가져올 구성 요소입니다.</param>
      <returns>
        <paramref name="component" />에 대한 이벤트 설명자의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object,System.Attribute[])">
      <summary>지정된 구성 요소의 지정된 특성이 있는 이벤트를 가져옵니다.</summary>
      <param name="component">관련된 이벤트를 가져올 구성 요소입니다.</param>
      <param name="attributes">이벤트를 필터링하는 데 사용되는 특성입니다.</param>
      <returns>
        <paramref name="component" />에 대한 이벤트 설명자의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetName(System.Object)">
      <summary>지정된 구성 요소의 이름을 가져옵니다.</summary>
      <param name="component">관련된 이름을 가져올 구성 요소입니다.</param>
      <returns>
        <paramref name="component" />의 이름입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetProperties(System.Object,System.Attribute[])">
      <summary>지정된 구성 요소의 지정된 특성이 있는 속성을 가져옵니다.</summary>
      <param name="component">관련된 이벤트를 가져올 구성 요소입니다.</param>
      <param name="attributes">속성을 필터링하는 데 사용되는 특성입니다.</param>
      <returns>
        <paramref name="component" />에 대한 속성 설명자의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.Int32,System.Boolean@)">
      <summary>지정된 디스패치 식별자를 가진 속성의 값을 가져옵니다.</summary>
      <param name="component">속성이 속해 있는 개체입니다.</param>
      <param name="dispid">디스패치 식별자입니다.</param>
      <param name="success">속성이 검색되었는지 여부를 나타내는 <see cref="T:System.Boolean" />으로, 참조로 전달됩니다.</param>
      <returns>지정된 디스패치 식별자를 가진 속성의 값입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.String,System.Boolean@)">
      <summary>지정된 이름을 가진 속성의 값을 가져옵니다.</summary>
      <param name="component">속성이 속해 있는 개체입니다.</param>
      <param name="propertyName">속성의 이름입니다.</param>
      <param name="success">속성이 검색되었는지 여부를 나타내는 <see cref="T:System.Boolean" />으로, 참조로 전달됩니다.</param>
      <returns>지정된 이름을 가진 속성의 값입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ICustomTypeDescriptor">
      <summary>개체의 사용자 지정 동적 형식 정보를 제공하는 인터페이스입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetAttributes">
      <summary>해당 구성 요소 인스턴스에 대한 사용자 지정 특성의 컬렉션을 반환합니다.</summary>
      <returns>해당 개체의 특성이 포함된 <see cref="T:System.ComponentModel.AttributeCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetClassName">
      <summary>해당 구성 요소 인스턴스의 클래스 이름을 반환합니다.</summary>
      <returns>개체의 클래스 이름이거나, 클래스에 이름이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetComponentName">
      <summary>해당 구성 요소 인스턴스의 이름을 반환합니다.</summary>
      <returns>개체의 이름이거나, 개체에 이름이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetConverter">
      <summary>해당 구성 요소 인스턴스에 대한 형식 변환기를 반환합니다.</summary>
      <returns>해당 개체의 변환기인 <see cref="T:System.ComponentModel.TypeConverter" />이거나, 개체의 <see cref="T:System.ComponentModel.TypeConverter" />가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent">
      <summary>해당 구성 요소 인스턴스의 기본 이벤트를 반환합니다.</summary>
      <returns>이 개체의 기본 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptor" /> 또는, 이 개체에 이벤트가 없으면 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty">
      <summary>해당 구성 요소 인스턴스의 기본 속성을 반환합니다.</summary>
      <returns>해당 개체의 기본 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor" />이거나, 개체에 속성이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type)">
      <summary>해당 구성 요소 인스턴스에 대한 지정된 형식의 편집기를 반환합니다.</summary>
      <param name="editorBaseType">해당 개체의 편집기를 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>해당 개체의 편집기인 지정된 형식의 <see cref="T:System.Object" />이거나, 편집기를 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents">
      <summary>해당 구성 요소 인스턴스의 이벤트를 반환합니다.</summary>
      <returns>해당 구성 요소 인스턴스의 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>지정된 특성 배열을 필터로 사용하여 해당 구성 요소 인스턴스의 이벤트를 반환합니다.</summary>
      <param name="attributes">필터로 사용되는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns>해당 구성 요소 인스턴스의 필터링된 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties">
      <summary>해당 구성 요소 인스턴스의 속성을 반환합니다.</summary>
      <returns>해당 구성 요소 인스턴스의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>특성 배열을 필터로 사용하여 해당 구성 요소 인스턴스의 속성을 반환합니다.</summary>
      <param name="attributes">필터로 사용되는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns>해당 구성 요소 인스턴스의 필터링된 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>지정된 속성 설명자가 설명하는 속성이 포함된 개체를 반환합니다.</summary>
      <param name="pd">소유자가 있는 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <returns>지정된 속성의 소유자를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.IDataErrorInfo">
      <summary>사용자 인터페이스가 바인딩될 수 있는 사용자 지정 오류 정보를 표시하는 기능을 제공합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Error">
      <summary>이 개체의 문제를 나타내는 오류 메시지를 가져옵니다.</summary>
      <returns>이 개체의 문제를 나타내는 오류 메시지입니다. 기본값은 빈 문자열("")입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Item(System.String)">
      <summary>지정된 이름의 속성에 대한 오류 메시지를 가져옵니다.</summary>
      <param name="columnName">오류 메시지를 가져올 해당 속성의 이름입니다.</param>
      <returns>해당 속성에 대한 오류 메시지입니다. 기본값은 빈 문자열("")입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.IExtenderProvider">
      <summary>속성을 컨테이너의 다른 구성 요소로 확장하기 위한 인터페이스를 정의합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)">
      <summary>이 개체가 지정된 개체에 Extender 속성을 제공할 수 있는지 여부를 지정합니다.</summary>
      <param name="extendee">Extender 속성을 받을 <see cref="T:System.Object" />입니다.</param>
      <returns>이 개체가 지정된 개체에 Extender 속성을 제공할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.IIntellisenseBuilder">
      <summary>빌더의 이름을 쉽게 검색하고 빌더를 표시하는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.IIntellisenseBuilder.Name">
      <summary>지역화된 이름을 가져옵니다.</summary>
      <returns>지역화된 이름입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IIntellisenseBuilder.Show(System.String,System.String,System.String@)">
      <summary>빌더를 표시합니다.</summary>
      <param name="language">빌더를 호출하는 언어 서비스입니다.</param>
      <param name="value">편집되는 식입니다.</param>
      <param name="newValue">새 값입니다.</param>
      <returns>값이 <paramref name="newValue" />로 바뀌어야 하면 <see langword="true" />이고, 그렇지 않으면(예: 사용자가 취소함) <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.IListSource">
      <summary>데이터 소스에 바인딩될 수 있는 목록을 반환하는 기능을 개체에 제공합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.IListSource.ContainsListCollection">
      <summary>해당 컬렉션이 <see cref="T:System.Collections.IList" /> 개체의 컬렉션인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>해당 컬렉션이 <see cref="T:System.Collections.IList" /> 개체의 컬렉션이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IListSource.GetList">
      <summary>
        <see cref="T:System.Collections.IList" />를 직접 구현하지 않는 개체에서 데이터 소스에 바인딩될 수 있는 <see cref="T:System.Collections.IList" />를 반환합니다.</summary>
      <returns>해당 개체에서 데이터 소스에 바인딩될 수 있는 <see cref="T:System.Collections.IList" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.INestedContainer">
      <summary>논리적으로 다른 구성 요소를 0개 이상 포함하고 부모 구성 요소가 소유하는 중첩 컨테이너에 대한 기능을 제공합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.INestedContainer.Owner">
      <summary>중첩 컨테이너의 소유 구성 요소를 가져옵니다.</summary>
      <returns>중첩 컨테이너를 소유하는 <see cref="T:System.ComponentModel.IComponent" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.INestedSite">
      <summary>구성 요소의 전체 중첩 이름을 검색하는 기능을 제공합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.INestedSite.FullName">
      <summary>이 사이트에 있는 구성 요소의 전체 이름을 가져옵니다.</summary>
      <returns>이 사이트에 있는 구성 요소의 전체 이름입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceAttribute">
      <summary>이 특성과 관련된 구성 요소가 기본 클래스에서 상속되었는지 여부를 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.InheritanceAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor(System.ComponentModel.InheritanceLevel)">
      <summary>지정된 상속 수준을 사용하여 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="inheritanceLevel">이 특성에 설정된 상속 수준을 나타내는 <see cref="T:System.ComponentModel.InheritanceLevel" />입니다.</param>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.InheritanceAttribute" />의 기본값이 <see cref="F:System.ComponentModel.InheritanceAttribute.NotInherited" />가 되도록 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.Equals(System.Object)">
      <summary>재정의하여 같은지 테스트합니다.</summary>
      <param name="value">테스트할 개체입니다.</param>
      <returns>개체가 동일하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.GetHashCode">
      <summary>이 개체의 해시 코드를 반환합니다.</summary>
      <returns>현재 <see cref="T:System.ComponentModel.InheritanceAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.InheritanceAttribute.InheritanceLevel">
      <summary>이 특성에 저장된 현재 상속 수준을 가져오거나 설정합니다.</summary>
      <returns>이 특성에 저장된 <see cref="T:System.ComponentModel.InheritanceLevel" />입니다.</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Inherited">
      <summary>구성 요소가 상속되도록 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.InheritedReadOnly">
      <summary>구성 요소가 상속되며 읽기 전용이도록 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.IsDefaultAttribute">
      <summary>현재 특성 값이 해당 특성의 기본값인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 특성 값이 기본값이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.NotInherited">
      <summary>구성 요소가 상속되지 않도록 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.ToString">
      <summary>이 특성을 문자열로 변환합니다.</summary>
      <returns>이 <see cref="T:System.ComponentModel.InheritanceAttribute" />를 나타내는 문자열입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceLevel">
      <summary>상속 수준 유형에 대한 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.Inherited">
      <summary>해당 개체가 상속됩니다.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.InheritedReadOnly">
      <summary>해당 개체가 상속되지만 읽기 전용 권한이 포함되어 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.NotInherited">
      <summary>해당 개체가 상속되지 않습니다.</summary>
    </member>
    <member name="T:System.ComponentModel.InstallerTypeAttribute">
      <summary>구성 요소를 설치하는 형식의 설치 관리자를 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.String)">
      <summary>구성 요소의 설치 관리자 형식 이름을 사용하여 <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeName">이 특성이 바인딩되는 구성 요소의 설치 관리자를 나타내는 <see cref="T:System.Type" /> 이름입니다. 이 클래스에서 <see cref="T:System.ComponentModel.Design.IDesigner" />를 구현해야 합니다.</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.Type)">
      <summary>구성 요소의 설치 관리자를 나타내는 <see cref="T:System.ComponentModel.InstallerTypeAttribute" />이 주어지면 <see cref="T:System.Type" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="installerType">해당 특성이 바인딩되는 구성 요소의 설치 관리자를 나타내는 <see cref="T:System.Type" />입니다. 이 클래스에서 <see cref="T:System.ComponentModel.Design.IDesigner" />를 구현해야 합니다.</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.Equals(System.Object)">
      <summary>주어진 개체의 값이 현재 <see cref="T:System.ComponentModel.InstallerTypeAttribute" />와 같은지 여부를 반환합니다.</summary>
      <param name="obj">값이 같은지 테스트할 개체입니다.</param>
      <returns>주어진 개체의 값이 현재 개체의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.GetHashCode">
      <summary>이 개체의 해시 코드를 반환합니다.</summary>
      <returns>현재 <see cref="T:System.ComponentModel.InstallerTypeAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.InstallerTypeAttribute.InstallerType">
      <summary>해당 특성과 관련된 설치 관리자 형식을 가져옵니다.</summary>
      <returns>해당 특성과 관련된 설치 관리자 형식을 나타내는 <see cref="T:System.Type" />이거나, 설치 관리자가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.InstanceCreationEditor">
      <summary>
        <see cref="T:System.Windows.Forms.PropertyGrid" />에 있는 드롭다운 상자에서 특정 형식의 속성 인스턴스를 만듭니다.</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.InstanceCreationEditor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>파생 클래스에서 재정의되는 경우 지정된 형식의 인스턴스를 반환합니다.</summary>
      <param name="context">컨텍스트 정보입니다.</param>
      <param name="instanceType">지정된 형식입니다.</param>
      <returns>지정된 형식의 인스턴스이거나, <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.InstanceCreationEditor.Text">
      <summary>지정된 텍스트를 가져옵니다.</summary>
      <returns>지정한 텍스트</returns>
    </member>
    <member name="T:System.ComponentModel.Int16Converter">
      <summary>16비트 부호 있는 정수 개체와 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Int16Converter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Int16Converter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Int32Converter">
      <summary>32비트 부호 있는 정수 개체와 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Int32Converter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Int32Converter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.Int64Converter">
      <summary>64비트 부호 있는 정수 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Int64Converter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Int64Converter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.InvalidAsynchronousStateException">
      <summary>작업이 실행될 스레드가 더 이상 없거나 작업이 실행될 스레드에 메시지 루프가 없을 때 throw됩니다.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>지정된 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 및 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 사용하여 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">deserialization에 사용할 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</param>
      <param name="context">deserialization에 사용할 대상입니다.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String)">
      <summary>지정된 자세한 설명을 사용하여 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류에 대한 자세한 설명입니다.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String,System.Exception)">
      <summary>지정된 예외 및 자세한 설명을 사용하여 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류에 대한 자세한 설명입니다.</param>
      <param name="innerException">이 예외의 원인인 내부 예외에 대한 참조입니다.</param>
    </member>
    <member name="T:System.ComponentModel.IRaiseItemChangedEvents">
      <summary>클래스가 속성 변경 이벤트를 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 이벤트로 변환하는지 여부를 나타냅니다.</summary>
    </member>
    <member name="P:System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents">
      <summary>
        <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> 개체가 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 이벤트를 발생시키는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>속성 값 중 하나가 변경될 때 <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> 개체가 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 이벤트를 발생시키면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ISupportInitializeNotification">
      <summary>구성 요소와 해당 종속 속성에 대한 초기화를 조정할 수 있도록 합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.ISupportInitializeNotification.Initialized">
      <summary>구성 요소의 초기화가 완료되면 이 이벤트가 발생합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized">
      <summary>이 구성 요소가 초기화되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>구성 요소의 초기화가 완료되었음을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary>컨테이너 및 속성 설명자와 같은 구성 요소에 대한 컨텍스트 정보를 제공합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary>이 <see cref="T:System.ComponentModel.TypeDescriptor" /> 요청을 나타내는 컨테이너를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.ComponentModel.IContainer" />에 대한 개체 집합이 포함된 <see cref="T:System.ComponentModel.TypeDescriptor" />이거나, 컨테이너가 없거나 <see cref="T:System.ComponentModel.TypeDescriptor" />에서 외부 개체를 사용하지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary>이 형식 설명자 요청과 연결된 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.TypeDescriptor" />에서 메서드를 호출하는 개체이거나 호출을 담당하는 개체가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary>
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 이벤트를 발생시킵니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary>
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 이벤트를 발생시킵니다.</summary>
      <returns>해당 개체를 변경할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary>지정된 컨텍스트 항목과 연결된 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 가져옵니다.</summary>
      <returns>지정된 컨텍스트 항목을 설명하는 <see cref="T:System.ComponentModel.PropertyDescriptor" />이거나, 호출을 담당하는 <see cref="T:System.ComponentModel.PropertyDescriptor" />가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ITypedList">
      <summary>바인딩 가능한 목록의 스키마를 발견하는 기능을 제공합니다. 여기에서 바인딩할 수 있는 속성은 바인딩되는 개체의 공용 속성과 다릅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>데이터를 바인딩하는데 사용되는 각 항목의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />를 반환합니다.</summary>
      <param name="listAccessors">컬렉션에서 찾을 바인딩 가능한 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 배열입니다. 이 매개 변수는 <see langword="null" />이 될 수 있습니다.</param>
      <returns>데이터를 바인딩하는데 사용되는 각 항목의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>해당 목록의 이름을 반환합니다.</summary>
      <param name="listAccessors">목록 이름이 반환되는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 배열입니다. 이 매개 변수는 <see langword="null" />이 될 수 있습니다.</param>
      <returns>목록 이름입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.License">
      <summary>모든 라이선스에 대한 <see langword="abstract" /> 기본 클래스를 제공합니다. 라이선스는 구성 요소의 특정 인스턴스에 부여됩니다.</summary>
    </member>
    <member name="M:System.ComponentModel.License.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.License" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.License.Dispose">
      <summary>파생 클래스에서 재정의된 경우 라이선스에서 사용하는 리소스를 삭제합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.License.LicenseKey">
      <summary>파생 클래스에서 재정의된 경우 이 구성 요소에 부여된 라이선스 키를 가져옵니다.</summary>
      <returns>이 구성 요소에 부여된 라이선스 키입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseContext">
      <summary>라이선스 있는 개체의 사용 가능 시기를 지정하고 도메인 내부에서 실행 중인 라이선스를 지원하는 데 필요한 추가 서비스를 얻는 방법을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.LicenseContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>파생 클래스에서 재정의된 경우 지정된 리소스 어셈블리로부터 지정된 형식에 대해 저장된 라이선스 키를 반환합니다.</summary>
      <param name="type">구성 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="resourceAssembly">라이선스 키가 포함된 <see cref="T:System.Reflection.Assembly" />입니다.</param>
      <returns>지정된 형식에 대한 <see cref="P:System.ComponentModel.License.LicenseKey" />입니다. 사용자가 재정의하지 않는 경우 이 메서드는 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetService(System.Type)">
      <summary>요청된 서비스를 사용할 수 있는 경우 해당 서비스를 가져옵니다.</summary>
      <param name="type">검색할 서비스의 형식입니다.</param>
      <returns>서비스의 인스턴스입니다. 서비스를 찾을 수 없는 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>파생 클래스에서 재정의된 경우 지정된 형식에 대한 라이선스 키를 설정합니다.</summary>
      <param name="type">라이선스 키와 관련된 구성 요소를 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="key">구성 요소 형식에 대해 저장할 <see cref="P:System.ComponentModel.License.LicenseKey" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.LicenseContext.UsageMode">
      <summary>파생 클래스에서 재정의된 경우 라이선스의 사용 가능 시기를 지정하는 값을 가져옵니다.</summary>
      <returns>라이선스의 사용 가능 시기를 지정하는 <see cref="T:System.ComponentModel.LicenseUsageMode" /> 값 중 하나입니다. 기본값은 <see cref="F:System.ComponentModel.LicenseUsageMode.Runtime" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseException">
      <summary>구성 요소에 라이선스를 부여할 수 없을 때 throw되는 예외를 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>지정된 <see cref="T:System.ComponentModel.LicenseException" /> 및 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 사용하여 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">deserialization에 사용할 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</param>
      <param name="context">deserialization에 사용할 대상입니다.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type)">
      <summary>라이선스가 거부된 구성 요소의 형식에 대해 <see cref="T:System.ComponentModel.LicenseException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">라이선스가 부여되지 않은 구성 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object)">
      <summary>라이선스가 거부된 구성 요소의 형식 및 인스턴스에 대해 <see cref="T:System.ComponentModel.LicenseException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">라이선스가 부여되지 않은 구성 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="instance">라이선스가 부여되지 않은 구성 요소의 인스턴스입니다.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String)">
      <summary>라이선스가 거부된 구성 요소의 형식 및 인스턴스에 대해, 표시할 메시지와 함께 <see cref="T:System.ComponentModel.LicenseException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">라이선스가 부여되지 않은 구성 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="instance">라이선스가 부여되지 않은 구성 요소의 인스턴스입니다.</param>
      <param name="message">표시할 예외 메시지입니다.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)">
      <summary>라이선스가 거부된 구성 요소의 형식 및 인스턴스에 대해, 표시할 메시지 및 throw된 원래 예외와 함께 <see cref="T:System.ComponentModel.LicenseException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">라이선스가 부여되지 않은 구성 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="instance">라이선스가 부여되지 않은 구성 요소의 인스턴스입니다.</param>
      <param name="message">표시할 예외 메시지입니다.</param>
      <param name="innerException">원래 예외를 나타내는 <see cref="T:System.Exception" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>예외에 대한 정보를 사용하여 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 설정합니다.</summary>
      <param name="info">deserialization에 사용할 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</param>
      <param name="context">deserialization에 사용할 대상입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseException.LicensedType">
      <summary>라이선스가 부여되지 않은 구성 요소의 형식을 가져옵니다.</summary>
      <returns>라이선스가 부여되지 않은 구성 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseManager">
      <summary>라이선스를 구성 요소에 추가하고 <see cref="T:System.ComponentModel.LicenseProvider" />를 관리하기 위한 속성과 메서드를 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
      <summary>라이선스가 있는 인스턴스를 사용할 수 있는 컨텍스트를 지정하여, 지정된 형식의 인스턴스를 만듭니다.</summary>
      <param name="type">만들 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="creationContext">라이선스가 있는 인스턴스를 사용할 수 있는 시기를 지정하는 <see cref="T:System.ComponentModel.LicenseContext" />입니다.</param>
      <returns>지정된 형식의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
      <summary>라이선스가 있는 인스턴스를 사용할 수 있는 컨텍스트를 지정하여, 지정된 인수가 포함된 지정된 형식의 인스턴스를 만듭니다.</summary>
      <param name="type">만들 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="creationContext">라이선스가 있는 인스턴스를 사용할 수 있는 시기를 지정하는 <see cref="T:System.ComponentModel.LicenseContext" />입니다.</param>
      <param name="args">해당 형식에 대한 인수를 나타내는 <see cref="T:System.Object" /> 형식의 배열입니다.</param>
      <returns>지정된 인수 배열이 포함된 지정된 형식의 인스턴스입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.CurrentContext">
      <summary>라이선스가 있는 개체를 사용할 수 있는 시기를 지정하는 현재 <see cref="T:System.ComponentModel.LicenseContext" />를 가져오거나 설정합니다.</summary>
      <returns>라이선스가 있는 개체를 사용할 수 있는 시기를 지정하는 <see cref="T:System.ComponentModel.LicenseContext" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 속성이 현재 잠겨 있으므로 변경할 수 없습니다.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
      <summary>지정된 형식에 유효한 라이선스가 있는지 여부를 반환합니다.</summary>
      <param name="type">유효한 라이선스를 찾을 <see cref="T:System.Type" />입니다.</param>
      <returns>지정된 형식에 라이선스가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
      <summary>지정된 형식에 대해 유효한 라이선스를 부여할 수 있는지 여부를 확인합니다.</summary>
      <param name="type">
        <see cref="T:System.Type" />를 요청하는 개체의 형식을 나타내는 <see cref="T:System.ComponentModel.License" />입니다.</param>
      <returns>유효한 라이선스를 부여할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
      <summary>지정된 형식 인스턴스에 대해 유효한 라이선스를 부여할 수 있는지 여부를 확인합니다. 이 메서드는 유효한 <see cref="T:System.ComponentModel.License" />를 만듭니다.</summary>
      <param name="type">라이선스를 요청하는 개체의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="instance">지정된 형식 또는 지정된 형식에서 파생된 형식의 개체입니다.</param>
      <param name="license">유효한 라이선스인 <see cref="T:System.ComponentModel.License" />입니다. 유효한 라이선스를 부여할 수 없는 경우 <see langword="null" />입니다.</param>
      <returns>유효한 <see cref="T:System.ComponentModel.License" />를 부여할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
      <summary>지정된 개체의 현재 <see cref="T:System.ComponentModel.LicenseContext" />를 변경하지 못하도록 합니다.</summary>
      <param name="contextUser">현재 컨텍스트를 잠글 개체입니다.</param>
      <exception cref="T:System.InvalidOperationException">컨텍스트가 이미 잠겨 있습니다.</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
      <summary>지정된 개체의 현재 <see cref="T:System.ComponentModel.LicenseContext" />를 변경할 수 있도록 합니다.</summary>
      <param name="contextUser">현재 컨텍스트를 잠금 해제할 개체입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contextUser" />는 이전의 <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" /> 호출에 지정된 사용자가 아닌 다른 사용자를 나타냅니다.</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.UsageMode">
      <summary>
        <see cref="T:System.ComponentModel.LicenseUsageMode" />에 대해 라이선스가 있는 개체를 사용할 수 있는 시기를 지정하는 <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.LicenseUsageMode" /> 속성에 지정된 <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 값 중 하나입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
      <summary>지정된 형식에 대해 라이선스를 부여할 수 있는지 여부를 확인합니다.</summary>
      <param name="type">라이선스를 요청하는 개체의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ComponentModel.LicenseException">
        <see cref="T:System.ComponentModel.License" />를 부여할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
      <summary>지정된 형식의 인스턴스에 대해 라이선스를 부여할 수 있는지 여부를 확인합니다.</summary>
      <param name="type">라이선스를 요청하는 개체의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="instance">지정된 형식 또는 지정된 형식에서 파생된 형식의 <see cref="T:System.Object" />입니다.</param>
      <returns>유효한 <see cref="T:System.ComponentModel.License" />입니다.</returns>
      <exception cref="T:System.ComponentModel.LicenseException">형식에 라이선스가 있지만 <see cref="T:System.ComponentModel.License" />를 부여할 수 없는 경우</exception>
    </member>
    <member name="T:System.ComponentModel.LicenseProvider">
      <summary>라이선스 공급자를 구현하기 위한 <see langword="abstract" /> 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.LicenseProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>파생 클래스에서 재정의된 경우, 컨텍스트 및 라이선스가 거부되면 예외가 throw되는지 여부를 지정하면 구성 요소의 인스턴스 또는 형식에 대한 라이선스를 가져옵니다.</summary>
      <param name="context">라이선스가 있는 개체를 사용할 수 있는 경우를 지정하는 <see cref="T:System.ComponentModel.LicenseContext" />입니다.</param>
      <param name="type">라이선스를 요청하는 구성 요소를 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="instance">라이선스를 요청하는 개체입니다.</param>
      <param name="allowExceptions">구성 요소에 라이선스를 부여할 수 없는 경우 <see cref="T:System.ComponentModel.LicenseException" />이 throw되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>유효한 <see cref="T:System.ComponentModel.License" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProviderAttribute">
      <summary>클래스와 함께 사용할 <see cref="T:System.ComponentModel.LicenseProvider" />를 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor">
      <summary>라이선스 공급자를 사용하지 않고 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.String)">
      <summary>지정된 형식을 사용하여 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeName">라이선스 공급자 클래스의 정규화된 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.Type)">
      <summary>지정된 라이선스 공급자 형식을 사용하여 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">라이선스 공급자 클래스의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="F:System.ComponentModel.LicenseProviderAttribute.Default">
      <summary>기본값인 공급자가 없음을 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.Equals(System.Object)">
      <summary>이 인스턴스와 지정된 개체가 같은지 여부를 나타냅니다.</summary>
      <param name="value">비교할 다른 개체입니다.</param>
      <returns>
        <see langword="true" />가 이 인스턴스와 같으면 <paramref name="value" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>현재 <see cref="T:System.ComponentModel.LicenseProviderAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.LicenseProvider">
      <summary>관련 클래스와 함께 사용해야 할 라이선스 공급자를 가져옵니다.</summary>
      <returns>라이선스 공급자의 형식을 나타내는 <see cref="T:System.Type" />입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.TypeId">
      <summary>이 특성 형식의 고유 ID를 나타냅니다.</summary>
      <returns>이 특성 형식의 고유 ID입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseUsageMode">
      <summary>
        <see cref="T:System.ComponentModel.License" />를 사용할 수 있는 시점을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Designtime">
      <summary>디자인 타임 동안 비주얼 디자이너 또는 컴파일러에서 사용됩니다.</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Runtime">
      <summary>런타임 동안 사용됩니다.</summary>
    </member>
    <member name="T:System.ComponentModel.LicFileLicenseProvider">
      <summary>
        <see cref="T:System.ComponentModel.LicenseProvider" />를 구현합니다. 이 공급자는 Microsoft .NET Framework의 표준 라이선스 모델과 유사한 방식으로 작동합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.LicFileLicenseProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)">
      <summary>지정된 형식에 대한 키를 반환합니다.</summary>
      <param name="type">키를 반환할 개체 형식입니다.</param>
      <returns>
        <paramref name="type" /> 매개 변수에 라이선스가 있는지 확인하는 값입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>구성 요소의 인스턴스에 대한 라이선스를 사용할 수 있으면 해당 라이선스를 반환합니다.</summary>
      <param name="context">라이선스가 있는 개체를 사용할 수 있는 경우를 지정하는 <see cref="T:System.ComponentModel.LicenseContext" />입니다.</param>
      <param name="type">
        <see cref="T:System.Type" />를 요청하는 구성 요소를 나타내는 <see cref="T:System.ComponentModel.License" />입니다.</param>
      <param name="instance">
        <see cref="T:System.ComponentModel.License" />를 요청하는 개체입니다.</param>
      <param name="allowExceptions">구성 요소에 라이선스를 부여할 수 없는 경우 <see cref="T:System.ComponentModel.LicenseException" />이 throw되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>유효한 <see cref="T:System.ComponentModel.License" />입니다. 이 메서드는 유효한 <see cref="T:System.ComponentModel.License" />나 유효한 <paramref name="context" /> 매개 변수를 찾을 수 없는 경우 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)">
      <summary>
        <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> 메서드에서 검색한 키가 지정된 형식에 대해 유효한지 여부를 확인합니다.</summary>
      <param name="key">확인할 <see cref="P:System.ComponentModel.License.LicenseKey" />입니다.</param>
      <param name="type">
        <see cref="T:System.Type" />를 요청하는 구성 요소를 나타내는 <see cref="T:System.ComponentModel.License" />입니다.</param>
      <returns>해당 키가 지정된 형식에 대해 유효한 <see cref="P:System.ComponentModel.License.LicenseKey" />이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ListBindableAttribute">
      <summary>목록을 데이터 소스로 사용할 수 있도록 지정합니다. 비주얼 디자이너에서는 이 특성을 사용하여 데이터 바인딩 방법을 선택할 때 특정 목록을 표시할지 여부를 결정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.Boolean)">
      <summary>목록이 바인딩 가능한지 여부를 나타내는 값을 사용하여 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="listBindable">목록이 바인딩 가능하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>목록이 바인딩 가능한지 여부를 나타내는 <see cref="T:System.ComponentModel.ListBindableAttribute" />를 사용하여 <see cref="T:System.ComponentModel.BindableSupport" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="flags">목록이 바인딩 가능한지 여부를 나타내는 <see cref="T:System.ComponentModel.BindableSupport" />입니다.</param>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.ListBindableAttribute" />의 기본값을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.Equals(System.Object)">
      <summary>전달된 개체가 이 <see cref="T:System.ComponentModel.ListBindableAttribute" />와 같은지 여부를 반환합니다.</summary>
      <param name="obj">같은지 테스트할 개체입니다.</param>
      <returns>전달된 개체가 이 <see cref="T:System.ComponentModel.ListBindableAttribute" />와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>현재 <see cref="T:System.ComponentModel.ListBindableAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.IsDefaultAttribute">
      <summary>
        <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" />이 기본값으로 설정되어 있는지 여부를 반환합니다.</summary>
      <returns>
        <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" />이 기본값으로 설정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ListBindableAttribute.ListBindable">
      <summary>목록의 바인딩 가능 여부를 가져옵니다.</summary>
      <returns>목록이 바인딩 가능하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.No">
      <summary>목록이 바인딩되지 않도록 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Yes">
      <summary>목록이 바인딩되도록 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)">
      <summary>변경 형식과 영향을 받는 <see cref="T:System.ComponentModel.ListChangedEventArgs" />를 사용하여 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="listChangedType">변경 형식을 나타내는 <see cref="T:System.ComponentModel.ListChangedType" /> 값입니다.</param>
      <param name="propDesc">추가, 제거 또는 변경된 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32)">
      <summary>변경 형식과 영향을 받는 항목의 인덱스를 사용하여 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="listChangedType">변경 형식을 나타내는 <see cref="T:System.ComponentModel.ListChangedType" /> 값입니다.</param>
      <param name="newIndex">추가, 변경 또는 제거된 항목의 인덱스입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>변경 형식, 영향을 받는 항목의 인덱스 및 영향을 받는 항목을 설명하는 <see cref="T:System.ComponentModel.ListChangedEventArgs" />를 사용하여 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="listChangedType">변경 형식을 나타내는 <see cref="T:System.ComponentModel.ListChangedType" /> 값입니다.</param>
      <param name="newIndex">추가되거나 변경된 항목의 인덱스입니다.</param>
      <param name="propDesc">항목을 설명하는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
      <summary>변경 형식과 이동한 항목의 이전 인덱스와 새 인덱스를 사용하여 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="listChangedType">변경 형식을 나타내는 <see cref="T:System.ComponentModel.ListChangedType" /> 값입니다.</param>
      <param name="newIndex">이동한 항목의 새 인덱스입니다.</param>
      <param name="oldIndex">이동한 항목의 이전 인덱스입니다.</param>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.ListChangedType">
      <summary>변경 형식을 가져옵니다.</summary>
      <returns>변경 형식을 나타내는 <see cref="T:System.ComponentModel.ListChangedType" /> 값입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.NewIndex">
      <summary>변경의 영향을 받는 항목의 인덱스를 가져옵니다.</summary>
      <returns>변경의 영향을 받는 항목의 인덱스입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.OldIndex">
      <summary>이동한 항목의 이전 인덱스를 가져옵니다.</summary>
      <returns>이동한 항목의 이전 인덱스입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.PropertyDescriptor">
      <summary>추가, 변경 또는 삭제된 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 가져옵니다.</summary>
      <returns>변경의 영향을 받는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventHandler">
      <summary>
        <see cref="T:System.ComponentModel.IBindingList" /> 클래스의 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.ListChangedEventArgs" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.ListChangedType">
      <summary>목록을 변경하는 방법을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemAdded">
      <summary>목록에 추가되는 항목입니다. <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" />에는 추가된 항목의 인덱스가 들어 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemChanged">
      <summary>목록에서 변경된 항목입니다. <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" />에는 변경된 항목의 인덱스가 들어 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemDeleted">
      <summary>목록에서 삭제된 항목입니다. <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" />에는 삭제된 항목의 인덱스가 들어 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemMoved">
      <summary>목록 내에서 이동된 항목입니다. <see cref="P:System.ComponentModel.ListChangedEventArgs.OldIndex" />에는 해당 항목에 대한 이전 인덱스가 들어 있는 반면 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" />에는 해당 항목에 대한 새 인덱스가 들어 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorAdded">
      <summary>
        <see cref="T:System.ComponentModel.PropertyDescriptor" />가 추가되었으며 이로 인해 스키마가 변경되었습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorChanged">
      <summary>
        <see cref="T:System.ComponentModel.PropertyDescriptor" />가 변경되었으며 이로 인해 스키마가 변경되었습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorDeleted">
      <summary>
        <see cref="T:System.ComponentModel.PropertyDescriptor" />가 삭제되었으며 이로 인해 스키마가 변경되었습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.Reset">
      <summary>목록의 대부분이 변경되었습니다. 수신하는 컨트롤은 목록에서 모든 데이터를 새로 고쳐야 합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.ListSortDescription">
      <summary>데이터 소스에 적용된 정렬 작업에 대한 설명을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescription.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>지정한 속성 설명과 방향을 사용하여 <see cref="T:System.ComponentModel.ListSortDescription" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="property">데이터 소스를 정렬하는 데 사용되는 속성을 설명하는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDescription" /> 값 중 하나입니다.</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.PropertyDescriptor">
      <summary>이 <see cref="T:System.ComponentModel.ListSortDescription" />과 연결된 클래스 속성에 대한 추상적인 설명을 가져오거나 설정합니다.</summary>
      <returns>이 <see cref="T:System.ComponentModel.PropertyDescriptor" />와 연결된 <see cref="T:System.ComponentModel.ListSortDescription" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.SortDirection">
      <summary>이 <see cref="T:System.ComponentModel.ListSortDescription" />과 연결된 정렬 작업의 방향을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDirection" /> 값 중 하나입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDescriptionCollection">
      <summary>
        <see cref="T:System.ComponentModel.ListSortDescription" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor(System.ComponentModel.ListSortDescription[])">
      <summary>
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 개체의 지정한 배열을 사용하여 <see cref="T:System.ComponentModel.ListSortDescription" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="sorts">컬렉션에 포함할 <see cref="T:System.ComponentModel.ListSortDescription" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.Contains(System.Object)">
      <summary>
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.Object" />입니다.</param>
      <returns>
        <see cref="T:System.Object" />가 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>지정한 대상 배열 인덱스로부터 컬렉션의 내용을 지정한 배열에 복사합니다.</summary>
      <param name="array">컬렉션에서 복사되는 항목의 대상 배열입니다.</param>
      <param name="index">복사를 시작할 대상 배열의 인덱스입니다.</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Count">
      <summary>컬렉션의 항목 수를 가져옵니다.</summary>
      <returns>컬렉션의 항목 수입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.IndexOf(System.Object)">
      <summary>컬렉션에서 지정된 항목의 인덱스를 반환합니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.Object" />입니다.</param>
      <returns>목록에 있으면 <paramref name="value" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Item(System.Int32)">
      <summary>지정한 <see cref="T:System.ComponentModel.ListSortDescription" />를 가져오거나 설정합니다.</summary>
      <param name="index">컬렉션에서 가져오거나 설정할 <see cref="T:System.ComponentModel.ListSortDescription" />의 인덱스(0부터 시작)입니다.</param>
      <returns>지정된 인덱스의 <see cref="T:System.ComponentModel.ListSortDescription" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">읽기 전용 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />에 항목을 설정하는 경우</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary>컬렉션에 대한 액세스가 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>모든 경우에 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#SyncRoot">
      <summary>컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 현재 인스턴스를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />의 현재 인스턴스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />를 가져옵니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Add(System.Object)">
      <summary>컬렉션에 항목을 추가합니다.</summary>
      <param name="value">컬렉션에 추가할 항목입니다.</param>
      <returns>새 요소가 삽입된 위치입니다.</returns>
      <exception cref="T:System.InvalidOperationException">모든 경우</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Clear">
      <summary>컬렉션에서 모든 항목을 제거합니다.</summary>
      <exception cref="T:System.InvalidOperationException">모든 경우</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>항목을 컬렉션 내의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index">컬렉션에서 가져오거나 설정할 <see cref="T:System.ComponentModel.ListSortDescription" />의 인덱스(0부터 시작)입니다.</param>
      <param name="value">컬렉션에 삽입할 항목입니다.</param>
      <exception cref="T:System.InvalidOperationException">모든 경우</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsFixedSize">
      <summary>컬렉션의 크기가 고정되어 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>모든 경우에 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsReadOnly">
      <summary>컬렉션이 읽기 전용인지를 나타내는 값을 가져옵니다.</summary>
      <returns>모든 경우에 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary>지정된 <see cref="T:System.ComponentModel.ListSortDescription" />를 가져옵니다.</summary>
      <param name="index">컬렉션에서 가져올 <see cref="T:System.ComponentModel.ListSortDescription" />의 인덱스(0부터 시작)입니다.</param>
      <returns>지정된 인덱스의 <see cref="T:System.ComponentModel.ListSortDescription" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary>컬렉션에서 맨 처음 발견되는 항목을 제거합니다.</summary>
      <param name="value">컬렉션에서 제거할 항목입니다.</param>
      <exception cref="T:System.InvalidOperationException">모든 경우</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>지정한 인덱스에 있는 컬렉션의 항목을 제거합니다.</summary>
      <param name="index">컬렉션에서 제거할 <see cref="T:System.ComponentModel.ListSortDescription" />의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.InvalidOperationException">모든 경우</exception>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary>정렬 작업의 방향을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary>오름차순으로 정렬합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary>내림차순으로 정렬합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.LookupBindingPropertiesAttribute">
      <summary>조회 기반 바인딩을 지원하는 속성을 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor">
      <summary>매개 변수를 사용하지 않고 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dataSource">데이터 소스로 사용할 속성의 이름입니다.</param>
      <param name="displayMember">표시 이름에 사용할 속성의 이름입니다.</param>
      <param name="valueMember">값에 대한 소스로 사용할 속성의 이름입니다.</param>
      <param name="lookupMember">조회에 사용할 속성의 이름입니다.</param>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DataSource">
      <summary>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />가 바인딩되는 구성 요소에 대한 데이터 소스 속성의 이름을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />가 바인딩되는 구성 요소에 대한 데이터 소스 속성입니다.</returns>
    </member>
    <member name="F:System.ComponentModel.LookupBindingPropertiesAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 클래스의 기본값을 나타냅니다.</summary>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DisplayMember">
      <summary>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />가 바인딩되는 구성 요소에 대한 표시 멤버 속성의 이름을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />가 바인딩되는 구성 요소에 대한 표시 멤버 속성의 이름입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.Equals(System.Object)">
      <summary>지정한 <see cref="T:System.Object" />가 현재 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 인스턴스와 같은지 여부를 확인합니다.</summary>
      <param name="obj">현재 <see cref="T:System.Object" /> 인스턴스와 비교할 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />입니다.</param>
      <returns>개체가 현재 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 같지 않다고 나타내는 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>현재 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.LookupMember">
      <summary>이 특성이 바인딩되는 구성 요소에 대한 조회 멤버의 이름을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />가 바인딩되는 구성 요소에 대한 조회 멤버의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.ValueMember">
      <summary>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />가 바인딩되는 구성 요소에 대한 값 멤버 속성의 이름을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />가 바인딩되는 구성 요소에 대한 값 멤버 속성의 이름입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.MarshalByValueComponent">
      <summary>
        <see cref="T:System.ComponentModel.IComponent" />를 구현하고 값으로 마샬링(serialize된 개체의 복사본이 전달)되는 원격 가능 구성 요소를 기본 구현합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.MarshalByValueComponent" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Container">
      <summary>구성 요소의 컨테이너를 가져옵니다.</summary>
      <returns>구성 요소의 컨테이너를 나타내는 <see cref="T:System.ComponentModel.IContainer" /> 인터페이스를 구현하는 개체이거나, 구성 요소에 사이트가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.DesignMode">
      <summary>구성 요소가 현재 디자인 모드에 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>구성 요소가 디자인 모드에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose">
      <summary>
        <see cref="T:System.ComponentModel.MarshalByValueComponent" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.MarshalByValueComponent" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="E:System.ComponentModel.MarshalByValueComponent.Disposed">
      <summary>구성 요소에 대한 <see cref="E:System.ComponentModel.MarshalByValueComponent.Disposed" /> 이벤트를 수신하는 이벤트 처리기를 추가합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Events">
      <summary>이 구성 요소에 연결된 이벤트 처리기의 목록을 가져옵니다.</summary>
      <returns>이 구성 요소의 대리자를 제공하는 <see cref="T:System.ComponentModel.EventHandlerList" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Finalize">
      <summary>가비지 컬렉션이 회수하기 전에 개체가 리소스를 해제하고 다른 정리 작업을 수행할 수 있게 합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.GetService(System.Type)">
      <summary>
        <see cref="T:System.IServiceProvider" />의 구현자를 가져옵니다.</summary>
      <param name="service">필요한 서비스 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>
        <see cref="T:System.Object" />의 구현자를 나타내는 <see cref="T:System.IServiceProvider" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Site">
      <summary>구성 요소의 사이트를 가져오거나 설정합니다.</summary>
      <returns>구성 요소의 사이트를 나타내는 <see cref="T:System.ComponentModel.ISite" /> 인터페이스를 구현하는 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.ToString">
      <summary>
        <see cref="T:System.ComponentModel.Component" />의 이름이 포함된 <see cref="T:System.String" />을 반환합니다(있는 경우). 이 메서드는 재정의할 수 없습니다.</summary>
      <returns>
        <see cref="T:System.String" />의 이름이 포함된 <see cref="T:System.ComponentModel.Component" />입니다.  
 <see cref="T:System.ComponentModel.Component" />의 이름이 지정되지 않은 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextProvider">
      <summary>
        <see cref="T:System.Windows.Forms.MaskedTextBox" /> 컨트롤과 같이 마스킹을 지원하는 컨트롤에서 사용할 수 있는 마스크 구문 분석 서비스를 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String)">
      <summary>지정된 마스크를 사용하여 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="mask">입력 마스크를 나타내는 <see cref="T:System.String" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)">
      <summary>지정된 마스크와 ASCII 제한 값을 사용하여 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="mask">입력 마스크를 나타내는 <see cref="T:System.String" />입니다.</param>
      <param name="restrictToAscii">입력을 ASCII 호환 문자로 제한하려면 <see langword="true" />이고, 전체 유니코드 집합을 허용하려면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)">
      <summary>지정된 마스크, 암호 문자 및 프롬프트 용도 값을 사용하여 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="mask">입력 마스크를 나타내는 <see cref="T:System.String" />입니다.</param>
      <param name="passwordChar">암호 문자열에 입력된 문자에 대해 표시될 <see cref="T:System.Char" />입니다.</param>
      <param name="allowPromptAsInput">프롬프트 문자를 입력으로 허용하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary>지정된 마스크와 culture를 사용하여 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="mask">입력 마스크를 나타내는 <see cref="T:System.String" />입니다.</param>
      <param name="culture">영역을 구분하는 구분 문자를 설정하는 데 사용되는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
      <summary>지정된 마스크, culture 및 ASCII 제한 값을 사용하여 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="mask">입력 마스크를 나타내는 <see cref="T:System.String" />입니다.</param>
      <param name="culture">영역을 구분하는 구분 문자를 설정하는 데 사용되는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="restrictToAscii">입력을 ASCII 호환 문자로 제한하려면 <see langword="true" />이고, 전체 유니코드 집합을 허용하려면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)">
      <summary>지정된 마스크, culture, 프롬프트 용도 값, 프롬프트 문자, 암호 문자 및 ASCII 제한 값을 사용하여 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="mask">입력 마스크를 나타내는 <see cref="T:System.String" />입니다.</param>
      <param name="culture">영역을 구분하는 구분 문자를 설정하는 데 사용되는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="allowPromptAsInput">프롬프트 문자가 유효한 입력 문자로 허용되는지 여부를 지정하는 <see cref="T:System.Boolean" /> 값입니다.</param>
      <param name="promptChar">사용자 입력에 대한 자리 표시자로 표시될 <see cref="T:System.Char" />입니다.</param>
      <param name="passwordChar">암호 문자열에 입력된 문자에 대해 표시될 <see cref="T:System.Char" />입니다.</param>
      <param name="restrictToAscii">입력을 ASCII 호환 문자로 제한하려면 <see langword="true" />이고, 전체 유니코드 집합을 허용하려면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException">마스크 매개 변수가 <see langword="null" />이거나 <see cref="F:System.String.Empty" />인 경우  
또는 
마스크에 하나 이상의 인쇄할 수 없는 문자가 포함된 경우</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)">
      <summary>지정된 마스크, culture, 암호 문자 및 프롬프트 용도 값을 사용하여 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="mask">입력 마스크를 나타내는 <see cref="T:System.String" />입니다.</param>
      <param name="culture">영역을 구분하는 구분 문자를 설정하는 데 사용되는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="passwordChar">암호 문자열에 입력된 문자에 대해 표시될 <see cref="T:System.Char" />입니다.</param>
      <param name="allowPromptAsInput">프롬프트 문자를 입력으로 허용하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char)">
      <summary>서식이 지정된 문자열의 끝에 지정된 입력 문자를 추가합니다.</summary>
      <param name="input">서식이 지정된 문자열에 추가할 <see cref="T:System.Char" /> 값입니다.</param>
      <returns>입력 문자가 성공적으로 추가되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>서식이 지정된 문자열의 끝에 지정된 입력 문자를 추가한 다음 위치와 설명 정보를 출력합니다.</summary>
      <param name="input">서식이 지정된 문자열에 추가할 <see cref="T:System.Char" /> 값입니다.</param>
      <param name="testPosition">문자를 추가하려고 한 서식이 지정된 문자열의 위치(0부터 시작)입니다. 출력 매개 변수입니다.</param>
      <param name="resultHint">작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <returns>입력 문자가 성공적으로 추가되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String)">
      <summary>서식이 지정된 문자열의 끝에 지정된 입력 문자열의 문자를 추가합니다.</summary>
      <param name="input">서식이 지정된 문자열에 추가할 문자 값을 포함하는 <see cref="T:System.String" />입니다.</param>
      <returns>입력 문자열의 모든 문자가 성공적으로 추가되었으면 <see langword="true" />이고, 추가된 문자가 없음을 나타내면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>서식이 지정된 문자열의 끝에 지정된 입력 문자열의 문자를 추가한 다음 위치와 설명 정보를 출력합니다.</summary>
      <param name="input">서식이 지정된 문자열에 추가할 문자 값을 포함하는 <see cref="T:System.String" />입니다.</param>
      <param name="testPosition">문자를 추가하려고 한 서식이 지정된 문자열의 위치(0부터 시작)입니다. 출력 매개 변수입니다.</param>
      <param name="resultHint">작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <returns>입력 문자열의 모든 문자가 성공적으로 추가되었으면 <see langword="true" />이고, 추가된 문자가 없음을 나타내면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput">
      <summary>프롬프트 문자가 유효한 입력 문자로 처리되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>사용자가 컨트롤에 <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" />를 입력할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AsciiOnly">
      <summary>마스크에 ASCII 문자 집합 밖에 있는 문자가 허용되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>ASCII만 허용되면 <see langword="true" />이고, <see cref="T:System.ComponentModel.MaskedTextProvider" />에서 임의의 유니코드 문자를 허용하면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount">
      <summary>입력 값이 이미 성공적으로 할당된 편집 가능한 문자 위치의 수를 가져옵니다.</summary>
      <returns>서식이 지정된 문자열에서 문자 값이 이미 할당된 입력 마스크의 편집 가능한 문자 위치 수를 포함하는 <see cref="T:System.Int32" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount">
      <summary>입력 값이 아직 할당되지 않은 입력 마스크의 편집 가능한 문자 위치 수를 가져옵니다.</summary>
      <returns>문자 값이 아직 할당되지 않은 편집 가능한 문자 위치 수를 포함하는 <see cref="T:System.Int32" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear">
      <summary>서식이 지정된 문자열에서 편집 가능한 입력 문자를 모두 지우고 프롬프트 문자로 바꿉니다.</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)">
      <summary>서식이 지정된 문자열에서 편집 가능한 입력 문자를 모두 지우고 프롬프트 문자로 바꾼 다음 설명 정보를 출력합니다.</summary>
      <param name="resultHint">작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clone">
      <summary>현재 <see cref="T:System.ComponentModel.MaskedTextProvider" />의 복사본을 만듭니다.</summary>
      <returns>이 메서드가 만들고 개체로 캐스팅하는 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 개체입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Culture">
      <summary>입력 마스크에서 지역화할 수 있는 구분 기호와 자리 표시자의 값을 결정하는 culture를 가져옵니다.</summary>
      <returns>입력 마스크와 연결된 culture 정보를 포함하는 <see cref="T:System.Globalization.CultureInfo" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar">
      <summary>사용자 입력을 숨기는 데 사용되는 기본 암호 문자를 가져옵니다.</summary>
      <returns>기본 암호 문자를 나타내는 <see cref="T:System.Char" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositionCount">
      <summary>서식이 지정된 문자열의 편집 가능한 위치 수를 가져옵니다.</summary>
      <returns>서식이 지정된 문자열의 편집 가능한 위치 수를 포함하는 <see cref="T:System.Int32" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositions">
      <summary>서식이 지정된 문자열의 편집 가능한 위치에 대해 새로 만든 열거자를 가져옵니다.</summary>
      <returns>서식이 지정된 문자열의 편집 가능한 위치에 대한 열거를 지원하는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary>지정된 검색 방향을 사용하여 지정된 위치 다음의 첫 번째 할당된 편집 가능한 위치를 반환합니다.</summary>
      <param name="position">검색을 시작할 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="direction">검색 방향을 나타내는 <see cref="T:System.Boolean" />으로, 앞으로 검색하려면 <see langword="true" />를 지정하고 뒤로 검색하려면 <see langword="false" />를 지정합니다.</param>
      <returns>검색에 성공하면 첫 번째 할당된 편집 가능한 위치(0부터 시작)를 나타내는 <see cref="T:System.Int32" />이고, 그렇지 않으면 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>지정된 검색 방향을 사용하여 지정된 위치 사이에 있는 첫 번째 할당된 편집 가능한 위치를 반환합니다.</summary>
      <param name="startPosition">검색이 시작되는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="endPosition">검색이 끝나는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="direction">검색 방향을 나타내는 <see cref="T:System.Boolean" />으로, 앞으로 검색하려면 <see langword="true" />를 지정하고 뒤로 검색하려면 <see langword="false" />를 지정합니다.</param>
      <returns>검색에 성공하면 첫 번째 할당된 편집 가능한 위치(0부터 시작)를 나타내는 <see cref="T:System.Int32" />이고, 그렇지 않으면 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)">
      <summary>지정된 검색 방향을 사용하여 지정된 위치 다음의 첫 번째 편집 가능한 위치를 반환합니다.</summary>
      <param name="position">검색을 시작할 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="direction">검색 방향을 나타내는 <see cref="T:System.Boolean" />으로, 앞으로 검색하려면 <see langword="true" />를 지정하고 뒤로 검색하려면 <see langword="false" />를 지정합니다.</param>
      <returns>검색에 성공하면 첫 번째 편집 가능한 위치(0부터 시작)를 나타내는 <see cref="T:System.Int32" />이고, 그렇지 않으면 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>지정된 검색 방향을 사용하여 지정된 위치 사이에 있는 첫 번째 편집 가능한 위치를 반환합니다.</summary>
      <param name="startPosition">검색이 시작되는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="endPosition">검색이 끝나는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="direction">검색 방향을 나타내는 <see cref="T:System.Boolean" />으로, 앞으로 검색하려면 <see langword="true" />를 지정하고 뒤로 검색하려면 <see langword="false" />를 지정합니다.</param>
      <returns>검색에 성공하면 첫 번째 편집 가능한 위치(0부터 시작)를 나타내는 <see cref="T:System.Int32" />이고, 그렇지 않으면 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)">
      <summary>지정된 검색 방향을 사용하여 지정된 위치 다음의 첫 번째 편집 가능하지 않은 위치를 반환합니다.</summary>
      <param name="position">검색을 시작할 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="direction">검색 방향을 나타내는 <see cref="T:System.Boolean" />으로, 앞으로 검색하려면 <see langword="true" />를 지정하고 뒤로 검색하려면 <see langword="false" />를 지정합니다.</param>
      <returns>검색에 성공하면 첫 번째 리터럴 위치(0부터 시작)를 나타내는 <see cref="T:System.Int32" />이고, 그렇지 않으면 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>지정된 검색 방향을 사용하여 지정된 위치 사이에 있는 첫 번째 편집 가능하지 않은 위치를 반환합니다.</summary>
      <param name="startPosition">검색이 시작되는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="endPosition">검색이 끝나는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="direction">검색 방향을 나타내는 <see cref="T:System.Boolean" />으로, 앞으로 검색하려면 <see langword="true" />를 지정하고 뒤로 검색하려면 <see langword="false" />를 지정합니다.</param>
      <returns>검색에 성공하면 첫 번째 리터럴 위치(0부터 시작)를 나타내는 <see cref="T:System.Int32" />이고, 그렇지 않으면 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary>지정된 검색 방향을 사용하여 지정된 위치 다음의 첫 번째 할당되지 않은 편집 가능한 위치를 반환합니다.</summary>
      <param name="position">검색을 시작할 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="direction">검색 방향을 나타내는 <see cref="T:System.Boolean" />으로, 앞으로 검색하려면 <see langword="true" />를 지정하고 뒤로 검색하려면 <see langword="false" />를 지정합니다.</param>
      <returns>검색에 성공하면 첫 번째 할당되지 않은 편집 가능한 위치(0부터 시작)를 나타내는 <see cref="T:System.Int32" />이고, 그렇지 않으면 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>지정된 검색 방향을 사용하여 지정된 위치 사이에 있는 첫 번째 할당되지 않은 편집 가능한 위치를 반환합니다.</summary>
      <param name="startPosition">검색이 시작되는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="endPosition">검색이 끝나는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="direction">검색 방향을 나타내는 <see cref="T:System.Boolean" />으로, 앞으로 검색하려면 <see langword="true" />를 지정하고 뒤로 검색하려면 <see langword="false" />를 지정합니다.</param>
      <returns>검색에 성공하면 첫 번째 할당되지 않은 편집 가능한 위치(0부터 시작)를 나타내는 <see cref="T:System.Int32" />이고, 그렇지 않으면 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)">
      <summary>지정된 <see cref="T:System.ComponentModel.MaskedTextResultHint" />가 성공을 나타내는지 아니면 실패를 나타내는지를 확인합니다.</summary>
      <param name="hint">대개 이전 작업의 출력 매개 변수로 가져온 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 값입니다.</param>
      <returns>지정된 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 값이 성공을 나타내면 <see langword="true" />이고, 실패를 나타내면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals">
      <summary>입력 마스크의 리터럴 문자가 서식이 지정된 문자열에 포함되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>리터럴이 포함되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludePrompt">
      <summary>
        <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />가 서식이 지정된 문자열을 표시할 때 사용자 입력이 없음을 나타내는 데 사용되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>프롬프트 문자가 사용자 입력이 제공되지 않은 위치를 나타내는 데 사용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)">
      <summary>서식이 지정된 문자열의 지정된 위치에 지정한 문자를 삽입합니다.</summary>
      <param name="input">삽입할 <see cref="T:System.Char" />입니다.</param>
      <param name="position">문자를 삽입할 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <returns>성공적으로 삽입되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>서식이 지정된 문자열의 지정된 위치에 지정한 문자를 삽입하고 마지막 삽입 위치와 작업의 상태를 반환합니다.</summary>
      <param name="input">삽입할 <see cref="T:System.Char" />입니다.</param>
      <param name="position">문자를 삽입할 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="testPosition">메서드가 성공적으로 수행되면 문자가 삽입된 마지막 위치이고, 그렇지 않으면 삽입에 실패한 첫 번째 위치입니다. 출력 매개 변수입니다.</param>
      <param name="resultHint">삽입 작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <returns>성공적으로 삽입되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)">
      <summary>서식이 지정된 문자열의 지정된 위치에 지정한 문자열을 삽입합니다.</summary>
      <param name="input">삽입할 <see cref="T:System.String" />입니다.</param>
      <param name="position">입력 문자열을 삽입할 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <returns>성공적으로 삽입되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>서식이 지정된 문자열의 지정된 위치에 지정한 문자열을 삽입하고 마지막 삽입 위치와 작업의 상태를 반환합니다.</summary>
      <param name="input">삽입할 <see cref="T:System.String" />입니다.</param>
      <param name="position">입력 문자열을 삽입할 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="testPosition">메서드가 성공적으로 수행되면 문자가 삽입된 마지막 위치이고, 그렇지 않으면 삽입에 실패한 첫 번째 위치입니다. 출력 매개 변수입니다.</param>
      <param name="resultHint">삽입 작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <returns>성공적으로 삽입되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.InvalidIndex">
      <summary>잘못된 인덱스 범위의 상한을 가져옵니다.</summary>
      <returns>가장 큰 잘못된 인덱스를 나타내는 값으로, 공급자 구현에서 확인됩니다. 예를 들어, 가장 작은 유효한 인덱스가 0이면 이 속성은 -1을 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)">
      <summary>지정된 위치에 할당할 수 있는지 여부를 확인합니다.</summary>
      <param name="position">테스트할 마스크의 위치(0부터 시작)입니다.</param>
      <returns>서식이 지정된 문자열의 지정된 위치가 편집 가능하고 아직 할당되지 않았으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)">
      <summary>지정된 위치가 편집 가능한지 여부를 확인합니다.</summary>
      <param name="position">테스트할 마스크의 위치(0부터 시작)입니다.</param>
      <returns>서식이 지정된 문자열의 지정된 위치가 편집 가능하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IsPassword">
      <summary>암호 보호가 서식이 지정된 문자열에 적용되는지 여부를 결정하는 값을 가져오거나 설정합니다.</summary>
      <returns>입력 문자열이 암호 문자열로 처리되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)">
      <summary>지정된 문자가 유효한 입력 문자인지 여부를 확인합니다.</summary>
      <param name="c">테스트할 <see cref="T:System.Char" /> 값입니다.</param>
      <returns>지정된 문자에 유효한 입력 값이 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)">
      <summary>지정된 문자가 유효한 마스크 문자인지 여부를 확인합니다.</summary>
      <param name="c">테스트할 <see cref="T:System.Char" /> 값입니다.</param>
      <returns>지정된 문자에 유효한 마스크 값이 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)">
      <summary>지정된 문자가 유효한 암호 문자인지 여부를 확인합니다.</summary>
      <param name="c">테스트할 <see cref="T:System.Char" /> 값입니다.</param>
      <returns>지정된 문자에 유효한 암호 값이 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)">
      <summary>서식이 지정된 문자열의 지정된 위치에서 요소를 가져옵니다.</summary>
      <param name="index">검색할 요소의 인덱스(0부터 시작)입니다.</param>
      <returns>서식이 지정된 문자열의 지정된 위치에 있는 <see cref="T:System.Char" />입니다.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" />가 0보다 작거나 마스크의 <see cref="P:System.ComponentModel.MaskedTextProvider.Length" />보다 크거나 같은 경우</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition">
      <summary>마스크에 할당된 가장 오른쪽 입력 문자에 대한 마스크의 인덱스를 가져옵니다.</summary>
      <returns>입력 문자가 하나 이상 마스크에 할당되었으면 할당된 가장 오른쪽 위치의 인덱스를 포함하는 <see cref="T:System.Int32" />이고, 할당된 위치가 없으면 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Length">
      <summary>마스크 한정자 문자를 제외한 마스크의 길이를 가져옵니다.</summary>
      <returns>마스크 입력을 수정하는 문자를 제외한 마스크의 위치 수를 포함하는 <see cref="T:System.Int32" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Mask">
      <summary>입력 마스크를 가져옵니다.</summary>
      <returns>전체 마스크를 포함하는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskCompleted">
      <summary>모든 필수 입력이 서식이 지정된 문자열에 입력되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>모든 필수 입력이 마스크에 입력되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskFull">
      <summary>모든 필수 입력과 선택적 입력이 서식이 지정된 문자열에 입력되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>모든 필수 입력과 선택적 입력이 입력되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PasswordChar">
      <summary>실제 입력 문자를 대체할 문자를 가져오거나 설정합니다.</summary>
      <returns>암호 문자로 사용되는 <see cref="T:System.Char" /> 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 속성을 설정할 때 지정되는 암호 문자가 현재 프롬프트 문자 <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" />와 같은 경우. 둘은 달라야 합니다.</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> 메서드에서 확인한 결과 이 속성을 설정할 때 지정되는 문자가 유효한 암호 문자가 아닌 경우</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PromptChar">
      <summary>사용 가능한 모든 편집 위치에 대해 사용자 입력이 없음을 나타내는 데 사용되는 문자를 가져오거나 설정합니다.</summary>
      <returns>사용자에게 입력하라고 요청하는 데 사용되는 문자입니다. 기본값은 밑줄(_)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 속성을 설정할 때 지정되는 프롬프트 문자가 현재 암호 문자 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />와 같은 경우. 둘은 달라야 합니다.</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> 메서드에서 확인한 결과 이 속성을 설정할 때 지정되는 문자가 유효한 암호 문자가 아닌 경우</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove">
      <summary>서식이 지정된 문자열에서 마지막 할당된 문자를 제거합니다.</summary>
      <returns>문자가 성공적으로 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>서식이 지정된 문자열에서 마지막 할당된 문자를 제거한 다음 제거 위치와 설명 정보를 출력합니다.</summary>
      <param name="testPosition">서식이 지정된 문자열에서 문자가 실제로 제거된 위치(0부터 시작)입니다. 출력 매개 변수입니다.</param>
      <param name="resultHint">작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <returns>문자가 성공적으로 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)">
      <summary>서식이 지정된 문자열에서 지정된 위치에 있는 할당된 문자를 제거합니다.</summary>
      <param name="position">제거할 할당된 문자의 위치(0부터 시작)입니다.</param>
      <returns>문자가 성공적으로 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)">
      <summary>서식이 지정된 문자열에서 지정된 위치 사이에 있는 할당된 문자를 제거합니다.</summary>
      <param name="startPosition">제거할 첫 번째 할당된 문자의 인덱스(0부터 시작)입니다.</param>
      <param name="endPosition">제거할 마지막 할당된 문자의 인덱스(0부터 시작)입니다.</param>
      <returns>문자가 성공적으로 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>서식이 지정된 문자열에서 지정된 위치 사이에 있는 할당된 문자를 제거한 다음 제거 위치와 설명 정보를 출력합니다.</summary>
      <param name="startPosition">제거할 첫 번째 할당된 문자의 인덱스(0부터 시작)입니다.</param>
      <param name="endPosition">제거할 마지막 할당된 문자의 인덱스(0부터 시작)입니다.</param>
      <param name="testPosition">성공하면 서식이 지정된 문자열에서 문자가 실제로 제거된 위치(0부터 시작)이고, 그렇지 않으면 작업에 실패한 첫 번째 위치입니다. 출력 매개 변수입니다.</param>
      <param name="resultHint">작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <returns>문자가 성공적으로 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)">
      <summary>지정된 위치나 그 뒤에 있는 한 문자를 지정된 문자 값으로 바꿉니다.</summary>
      <param name="input">기존 값을 바꾸는 <see cref="T:System.Char" /> 값입니다.</param>
      <param name="position">바꿀 첫 번째 편집 가능한 문자를 검색할 위치(0부터 시작)입니다.</param>
      <returns>문자가 성공적으로 바뀌었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>지정된 시작 위치와 끝 위치 사이에 있는 한 문자를 지정된 문자 값으로 바꾼 다음 제거 위치와 설명 정보를 출력합니다.</summary>
      <param name="input">기존 값을 바꾸는 <see cref="T:System.Char" /> 값입니다.</param>
      <param name="startPosition">바꾸기가 시작되는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="endPosition">바꾸기가 끝나는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="testPosition">성공하면 서식이 지정된 문자열에서 마지막 문자가 실제로 바뀐 위치(0부터 시작)이고, 그렇지 않으면 작업에 실패한 첫 번째 위치입니다. 출력 매개 변수입니다.</param>
      <param name="resultHint">바꾸기 작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <returns>문자가 성공적으로 바뀌었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>지정된 위치나 그 뒤에 있는 한 문자를 지정된 문자 값으로 바꾼 다음 제거 위치와 설명 정보를 출력합니다.</summary>
      <param name="input">기존 값을 바꾸는 <see cref="T:System.Char" /> 값입니다.</param>
      <param name="position">바꿀 첫 번째 편집 가능한 문자를 검색할 위치(0부터 시작)입니다.</param>
      <param name="testPosition">성공하면 서식이 지정된 문자열에서 마지막 문자가 실제로 바뀐 위치(0부터 시작)이고, 그렇지 않으면 작업에 실패한 첫 번째 위치입니다. 출력 매개 변수입니다.</param>
      <param name="resultHint">바꾸기 작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <returns>문자가 성공적으로 바뀌었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)">
      <summary>지정된 위치에서 시작하는 편집 가능한 문자의 범위를 지정된 문자열로 바꿉니다.</summary>
      <param name="input">기존의 편집 가능한 문자를 바꾸는 데 사용되는 <see cref="T:System.String" /> 값입니다.</param>
      <param name="position">바꿀 첫 번째 편집 가능한 문자를 검색할 위치(0부터 시작)입니다.</param>
      <returns>모든 문자가 성공적으로 바뀌었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>지정된 시작 위치와 끝 위치 사이에 있는 편집 가능한 문자의 범위를 지정된 문자열로 바꾼 다음 제거 위치와 설명 정보를 출력합니다.</summary>
      <param name="input">기존의 편집 가능한 문자를 바꾸는 데 사용되는 <see cref="T:System.String" /> 값입니다.</param>
      <param name="startPosition">바꾸기가 시작되는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="endPosition">바꾸기가 끝나는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="testPosition">성공하면 서식이 지정된 문자열에서 마지막 문자가 실제로 바뀐 위치(0부터 시작)이고, 그렇지 않으면 작업에 실패한 첫 번째 위치입니다. 출력 매개 변수입니다.</param>
      <param name="resultHint">바꾸기 작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <returns>모든 문자가 성공적으로 바뀌었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>지정된 위치에서 시작하는 편집 가능한 문자의 범위를 지정된 문자열로 바꾼 다음 제거 위치와 설명 정보를 출력합니다.</summary>
      <param name="input">기존의 편집 가능한 문자를 바꾸는 데 사용되는 <see cref="T:System.String" /> 값입니다.</param>
      <param name="position">바꿀 첫 번째 편집 가능한 문자를 검색할 위치(0부터 시작)입니다.</param>
      <param name="testPosition">성공하면 서식이 지정된 문자열에서 마지막 문자가 실제로 바뀐 위치(0부터 시작)이고, 그렇지 않으면 작업에 실패한 첫 번째 위치입니다. 출력 매개 변수입니다.</param>
      <param name="resultHint">바꾸기 작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <returns>모든 문자가 성공적으로 바뀌었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt">
      <summary>프롬프트 문자와 일치하는 입력 문자가 처리되는 방법을 결정하는 값을 가져오거나 설정합니다.</summary>
      <returns>입력 문자로 입력된 프롬프트 문자 때문에 마스크의 현재 편집 가능한 위치가 다시 설정되면 <see langword="true" />이고, 프롬프트 문자가 일반 입력 문자로 처리됨을 나타내면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace">
      <summary>공백 입력 문자가 처리되는 방법을 결정하는 값을 가져오거나 설정합니다.</summary>
      <returns>공백 입력 문자 때문에 마스크의 현재 편집 가능한 위치가 다시 설정되면 <see langword="true" />이고, 공백 입력 문자가 일반 입력 문자로 처리됨을 나타내면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String)">
      <summary>서식이 지정된 문자열을 지정된 입력 문자열로 설정합니다.</summary>
      <param name="input">서식이 지정된 문자열을 설정하는 데 사용되는 <see cref="T:System.String" /> 값입니다.</param>
      <returns>모든 문자가 성공적으로 설정되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>서식이 지정된 문자열을 지정된 입력 문자열로 설정한 다음 제거 위치와 설명 정보를 출력합니다.</summary>
      <param name="input">서식이 지정된 문자열을 설정하는 데 사용되는 <see cref="T:System.String" /> 값입니다.</param>
      <param name="testPosition">성공하면 서식이 지정된 문자열에서 마지막 문자가 실제로 설정된 위치(0부터 시작)이고, 그렇지 않으면 작업에 실패한 첫 번째 위치입니다. 출력 매개 변수입니다.</param>
      <param name="resultHint">설정 작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <returns>모든 문자가 성공적으로 설정되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.SkipLiterals">
      <summary>마스크의 리터럴 문자 위치를 해당하는 같은 값으로 덮어쓸 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>리터럴을 다시 추가할 수 있도록 하려면 <see langword="true" />이고, 사용자가 리터럴 문자를 덮어쓸 수 없게 하려면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToDisplayString">
      <summary>서식이 지정된 문자열을 표시 가능한 형태로 반환합니다.</summary>
      <returns>프롬프트와 마스크 리터럴을 포함하는 형식이 지정된 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString">
      <summary>할당된 모든 문자 값을 포함하는 서식이 지정된 문자열을 반환합니다.</summary>
      <returns>할당된 모든 문자 값을 포함하는 형식이 지정된 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)">
      <summary>암호 문자를 선택적으로 포함하여 서식이 지정된 문자열을 반환합니다.</summary>
      <param name="ignorePasswordChar">실제 편집 가능한 문자를 반환하려면 <see langword="true" />이고, <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 속성이 적용됨을 나타내려면 <see langword="false" />입니다.</param>
      <returns>리터럴과 프롬프트를 포함하고 암호 문자를 선택적으로 포함하는 형식이 지정된 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)">
      <summary>프롬프트 및 리터럴 문자를 선택적으로 포함하여 서식이 지정된 문자열을 반환합니다.</summary>
      <param name="includePrompt">반환 문자열에 프롬프트 문자를 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="includeLiterals">반환 문자열에 리터럴 문자를 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>할당된 모든 문자 값을 포함하고 리터럴과 프롬프트를 선택적으로 포함하는 형식이 지정된 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>프롬프트, 리터럴 및 암호 문자를 선택적으로 포함하여 서식이 지정된 문자열의 부분 문자열을 반환합니다.</summary>
      <param name="ignorePasswordChar">실제 편집 가능한 문자를 반환하려면 <see langword="true" />이고, <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 속성이 적용됨을 나타내려면 <see langword="false" />입니다.</param>
      <param name="includePrompt">반환 문자열에 프롬프트 문자를 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="includeLiterals">반환 문자열에서 리터럴 문자를 반환하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="startPosition">출력이 시작되는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="length">반환할 문자 수입니다.</param>
      <returns>성공하면 할당된 모든 문자 값을 포함하고 리터럴, 프롬프트 및 암호 문자를 선택적으로 포함하는 형식이 지정된 <see cref="T:System.String" />의 부분 문자열이고, 그렇지 않으면 <see cref="F:System.String.Empty" /> 문자열입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>프롬프트 및 리터럴 문자를 선택적으로 포함하여 서식이 지정된 문자열의 부분 문자열을 반환합니다.</summary>
      <param name="includePrompt">반환 문자열에 프롬프트 문자를 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="includeLiterals">반환 문자열에 리터럴 문자를 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="startPosition">출력이 시작되는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="length">반환할 문자 수입니다.</param>
      <returns>성공하면 할당된 모든 문자 값을 포함하고 리터럴과 프롬프트를 선택적으로 포함하는 형식이 지정된 <see cref="T:System.String" />의 부분 문자열이고, 그렇지 않으면 <see cref="F:System.String.Empty" /> 문자열입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)">
      <summary>암호 문자를 선택적으로 포함하여 서식이 지정된 문자열의 부분 문자열을 반환합니다.</summary>
      <param name="ignorePasswordChar">실제 편집 가능한 문자를 반환하려면 <see langword="true" />이고, <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 속성이 적용됨을 나타내려면 <see langword="false" />입니다.</param>
      <param name="startPosition">출력이 시작되는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="length">반환할 문자 수입니다.</param>
      <returns>성공하면 리터럴과 프롬프트를 포함하고 암호 문자를 선택적으로 포함하는 형식이 지정된 <see cref="T:System.String" />의 부분 문자열이고, 그렇지 않으면 <see cref="F:System.String.Empty" /> 문자열입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)">
      <summary>서식이 지정된 문자열의 부분 문자열을 반환합니다.</summary>
      <param name="startPosition">출력이 시작되는 서식이 지정된 문자열의 위치(0부터 시작)입니다.</param>
      <param name="length">반환할 문자 수입니다.</param>
      <returns>성공하면 할당된 모든 문자 값을 포함하는 형식이 지정된 <see cref="T:System.String" />의 부분 문자열이고, 그렇지 않으면 <see cref="F:System.String.Empty" /> 문자열입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)">
      <summary>지정된 문자가 지정된 위치에서 성공적으로 설정될 수 있는지 여부를 테스트합니다.</summary>
      <param name="input">테스트할 <see cref="T:System.Char" /> 값입니다.</param>
      <param name="position">입력 문자를 테스트할 마스크의 위치입니다.</param>
      <param name="hint">작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <returns>지정된 문자를 지정된 위치에서 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)">
      <summary>지정된 문자가 지정된 위치에서 이스케이프되는지 여부를 테스트합니다.</summary>
      <param name="input">테스트할 <see cref="T:System.Char" /> 값입니다.</param>
      <param name="position">입력 문자를 테스트할 마스크의 위치입니다.</param>
      <returns>지정된 문자가 지정된 위치에서 이스케이프되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String)">
      <summary>지정된 문자열이 성공적으로 설정될 수 있는지 여부를 테스트합니다.</summary>
      <param name="input">테스트할 <see cref="T:System.String" /> 값입니다.</param>
      <returns>지정된 문자열이 유효한 입력을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>지정된 문자열이 성공적으로 설정될 수 있는지 여부를 테스트한 다음 위치와 설명 정보를 출력합니다.</summary>
      <param name="input">테스트할 <see cref="T:System.String" /> 값입니다.</param>
      <param name="testPosition">성공하면 실제로 테스트한 마지막 문자의 위치(0부터 시작)이고, 그렇지 않으면 테스트에 실패한 첫 번째 위치입니다. 출력 매개 변수입니다.</param>
      <param name="resultHint">테스트 작업의 결과를 간략하게 설명하는 <see cref="T:System.ComponentModel.MaskedTextResultHint" />입니다. 출력 매개 변수입니다.</param>
      <returns>지정된 문자열이 유효한 입력을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextResultHint">
      <summary>마스킹된 텍스트 구문 분석 작업의 결과를 간략하게 설명하는 값을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AlphanumericCharacterExpected">
      <summary>작업을 수행하지 못했습니다. 영숫자가 아닌 입력 문자가 있습니다. .</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AsciiCharacterExpected">
      <summary>작업을 수행하지 못했습니다. ASCII 문자 집합에 속하지 않은 입력 문자가 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.CharacterEscaped">
      <summary>성공 리터럴, 프롬프트 또는 공백 문자가 이스케이프된 문자이기 때문에 작업을 수행했습니다. 이스케이프된 문자에 대한 자세한 내용은 <see cref="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)" /> 메서드를 참조하십시오.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.DigitExpected">
      <summary>작업을 수행하지 못했습니다. 숫자가 아닌 입력 문자가 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.InvalidInput">
      <summary>작업을 수행하지 못했습니다. 프로그램에서 잘못된 입력 문자를 발견했습니다. 잘못된 문자에 대한 자세한 내용은 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" /> 메서드를 참조하십시오.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.LetterExpected">
      <summary>작업을 수행하지 못했습니다. 문자가 아닌 입력 문자가 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NoEffect">
      <summary>성공 기본 작업이 필요하지 않기 때문에 수행되지 않았습니다. 따라서 파생 작업이 생성되지 않았습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NonEditPosition">
      <summary>작업을 수행하지 못했습니다. 서식이 지정된 문자열의 현재 위치가 리터럴 문자입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PositionOutOfRange">
      <summary>작업을 수행하지 못했습니다. 지정된 위치가 대상 문자열의 범위 안에 없습니다. 일반적으로 지정된 위치가 0보다 작거나 대상 문자열의 길이보다 큽니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PromptCharNotAllowed">
      <summary>작업을 수행하지 못했습니다. 프롬프트 문자를 입력에 사용할 수 없습니다. <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" /> 속성이 <see langword="false" />로 설정되어 있을 수 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SideEffect">
      <summary>성공 기본 작업이 필요하지 않기 때문에 수행되지 않았지만 메서드에서 파생 작업을 생성했습니다. 예를 들어, <see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" /> 메서드는 할당되지 않은 편집 위치를 삭제할 수 있으며 이로 인해 서식이 지정된 문자열의 이후 문자들이 왼쪽으로 이동할 수 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SignedDigitExpected">
      <summary>작업을 수행하지 못했습니다. 부호 있는 숫자가 아닌 입력 문자가 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Success">
      <summary>성공 기본 작업을 수행했습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.UnavailableEditPosition">
      <summary>작업을 수행하지 못했습니다. 요청을 수행하는 데 사용할 수 있는 편집 위치가 충분하지 않습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Unknown">
      <summary>알 수 없습니다. 작업의 결과를 확인할 수 없습니다.</summary>
    </member>
    <member name="T:System.ComponentModel.MemberDescriptor">
      <summary>속성이나 이벤트와 같은 클래스 멤버를 나타냅니다. 이 클래스는 추상 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>지정된 <see cref="T:System.ComponentModel.MemberDescriptor" />를 사용하여 <see cref="T:System.ComponentModel.MemberDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="descr">멤버 이름 및 특성이 들어 있는 <see cref="T:System.ComponentModel.MemberDescriptor" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>지정된 <see cref="T:System.ComponentModel.MemberDescriptor" />의 이름과 기존 <see cref="T:System.ComponentModel.MemberDescriptor" /> 및 <see cref="T:System.ComponentModel.MemberDescriptor" /> 배열 모두의 특성을 사용하여 <see cref="T:System.Attribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="oldMemberDescriptor">멤버 이름 및 특성이 들어 있는 <see cref="T:System.ComponentModel.MemberDescriptor" />입니다.</param>
      <param name="newAttributes">멤버에 추가할 특성이 들어 있는 <see cref="T:System.Attribute" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String)">
      <summary>지정된 멤버 이름을 사용하여 <see cref="T:System.ComponentModel.MemberDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">멤버의 이름입니다.</param>
      <exception cref="T:System.ArgumentException">이름이 빈 문자열("")이거나 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>지정된 멤버 이름과 특성 배열을 사용하여 <see cref="T:System.ComponentModel.MemberDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">멤버의 이름입니다.</param>
      <param name="attributes">멤버 특성이 들어 있는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentException">이름이 빈 문자열("")이거나 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.AttributeArray">
      <summary>특성 배열을 가져오거나 설정합니다.</summary>
      <returns>이 멤버의 특성이 들어 있는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Attributes">
      <summary>이 멤버에 대한 특성 컬렉션을 가져옵니다.</summary>
      <returns>이 멤버에 대한 특성을 제공하는 <see cref="T:System.ComponentModel.AttributeCollection" />입니다. <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" />에 특성이 없는 경우에는 빈 컬렉션입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Category">
      <summary>
        <see cref="T:System.ComponentModel.CategoryAttribute" />에 지정된, 해당 멤버가 속해 있는 범주의 이름을 가져옵니다.</summary>
      <returns>해당 멤버가 속해 있는 범주의 이름입니다. <see cref="T:System.ComponentModel.CategoryAttribute" />가 없으면 범주 이름은 기본 범주인 <see langword="Misc" />로 설정됩니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection">
      <summary>생성자에 전달된 특성 배열을 사용하여 특성 컬렉션을 만듭니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" /> 특성이 들어 있는 새 <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Description">
      <summary>
        <see cref="T:System.ComponentModel.DescriptionAttribute" />에 지정된 멤버 설명을 가져옵니다.</summary>
      <returns>멤버 설명입니다. <see cref="T:System.ComponentModel.DescriptionAttribute" />가 없으면 속성 값은 기본값인 빈 문자열("")로 설정됩니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DesignTimeOnly">
      <summary>
        <see cref="T:System.ComponentModel.DesignOnlyAttribute" />에 지정된, 이 멤버가 디자인 타임에만 설정되어야 하는지 여부를 가져옵니다.</summary>
      <returns>이 멤버가 디자인 타임에만 설정되어야 하면 <see langword="true" />이고, 런타임에 설정될 수 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DisplayName">
      <summary>속성 창 등의 창에 표시될 수 있는 이름을 가져옵니다.</summary>
      <returns>해당 멤버에 대해 표시할 이름입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.Equals(System.Object)">
      <summary>이 인스턴스를 지정된 개체와 비교하여 이 둘이 같은지 확인합니다.</summary>
      <param name="obj">현재 인스턴스와 비교할 개체입니다.</param>
      <returns>같으면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)">
      <summary>파생 클래스에서 재정의된 경우, 상속하는 클래스의 특성을 부모 클래스에 있는 지정된 특성 목록에 추가합니다.</summary>
      <param name="attributeList">부모 클래스에 있는 특성을 나열하는 <see cref="T:System.Collections.IList" />입니다. 처음에는 이 컬렉션이 비어 있습니다.</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)">
      <summary>리플렉션을 통해 지정된 메서드를 찾습니다. 이때 공용 메서드만 검색합니다.</summary>
      <param name="componentClass">해당 메서드가 들어 있는 구성 요소입니다.</param>
      <param name="name">찾을 메서드의 이름입니다.</param>
      <param name="args">오버로드된 메서드 중에서 선택하는 데 사용되는, 메서드의 매개 변수 배열입니다.</param>
      <param name="returnType">해당 메서드에 대해 반환할 형식입니다.</param>
      <returns>메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다. 이 메서드가 없는 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)">
      <summary>리플렉션을 통해 지정된 메서드를 찾습니다. 이때 공용 메서드만 검색하는 옵션을 사용합니다.</summary>
      <param name="componentClass">해당 메서드가 들어 있는 구성 요소입니다.</param>
      <param name="name">찾을 메서드의 이름입니다.</param>
      <param name="args">오버로드된 메서드 중에서 선택하는 데 사용되는, 메서드의 매개 변수 배열입니다.</param>
      <param name="returnType">해당 메서드에 대해 반환할 형식입니다.</param>
      <param name="publicOnly">공용 메서드로 검색을 제한할지 여부를 나타냅니다.</param>
      <returns>메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" />입니다. 이 메서드가 없는 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>현재 <see cref="T:System.ComponentModel.MemberDescriptor" />의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary>멤버를 호출하는 동안 사용해야 하는 개체를 검색합니다.</summary>
      <param name="type">호출 대상의 <see cref="T:System.Type" />입니다.</param>
      <param name="instance">잠재적인 호출 대상입니다.</param>
      <returns>멤버를 호출하는 동안 사용할 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 또는 <paramref name="instance" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)">
      <summary>메서드를 호출할 대상 구성 요소를 가져옵니다.</summary>
      <param name="componentClass">이 <see cref="T:System.Type" />가 바인딩된 구성 요소의 형식을 나타내는 <see cref="T:System.ComponentModel.MemberDescriptor" />입니다. 예를 들어, 이 <see cref="T:System.ComponentModel.MemberDescriptor" />가 속성을 기술하는 경우 이 매개 변수는 해당 속성이 선언된 클래스이어야 합니다.</param>
      <param name="component">호출할 개체의 인스턴스입니다.</param>
      <returns>호출할 구성 요소의 인스턴스입니다. 해당 속성이 비주얼 디자이너에 연결되어 있으면 이 메서드는 비주얼 디자이너를 반환합니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentClass" /> 또는 <paramref name="component" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)">
      <summary>지정된 구성 요소에 대한 구성 요소 사이트를 가져옵니다.</summary>
      <param name="component">사이트를 찾을 구성 요소입니다.</param>
      <returns>구성 요소의 사이트이거나, 사이트가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.IsBrowsable">
      <summary>
        <see cref="T:System.ComponentModel.BrowsableAttribute" />에 지정된, 해당 멤버를 찾아볼 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>해당 멤버를 찾아볼 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see cref="T:System.ComponentModel.BrowsableAttribute" />가 없으면 해당 속성 값은 기본값인 <see langword="true" />로 설정됩니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Name">
      <summary>해당 멤버의 이름을 가져옵니다.</summary>
      <returns>멤버의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.NameHashCode">
      <summary>
        <see cref="M:System.String.GetHashCode" />에 지정된, 멤버 이름의 해시 코드를 가져옵니다.</summary>
      <returns>멤버 이름의 해시 코드입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.MultilineStringConverter">
      <summary>여러 줄 문자열을 단순 문자열로 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.MultilineStringConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>지정된 컨텍스트 및 문화권 정보를 사용하여 지정된 값 개체를 지정된 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />
        <see langword="null" /> 이 전달되면 현재 문화권이 가정됩니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType">값 매개 변수를 변환할 <see cref="T:System.Type" />입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>지정된 컨텍스트 및 특성을 사용하여 <paramref name="value" /> 매개 변수에서 지정하는 배열 형식에 대한 속성 컬렉션을 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value">속성을 가져올 배열 형식을 지정하는 <see cref="T:System.Object" /> 입니다.</param>
      <param name="attributes">필터로 사용되는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns>이 데이터 형식에 대해 노출된 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />이거나, 속성이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>지정된 컨텍스트를 사용하여 이 개체가 속성을 지원하는지 여부를 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>이 개체의 속성을 찾기 위해 <see langword="true" />를 호출하면 <see cref="Overload:System.ComponentModel.MultilineStringConverter.GetProperties" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.NestedContainer">
      <summary>컨테이너에 소유 구성 요소가 포함될 수 있도록 하는 <see cref="T:System.ComponentModel.INestedContainer" /> 인터페이스에 대한 기본 구현을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
      <summary>
        <see cref="T:System.ComponentModel.NestedContainer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="owner">이 중첩 컨테이너를 소유하는 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>컨테이너에서 구성 요소에 대한 사이트를 만듭니다.</summary>
      <param name="component">해당 사이트를 만들 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
      <param name="name">
        <paramref name="component" />에 할당할 이름이거나, 이름을 할당하지 않으려면 <see langword="null" />입니다.</param>
      <returns>새로 만든 <see cref="T:System.ComponentModel.ISite" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
      <summary>중첩 컨테이너에서 사용하는 리소스를 해제합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
      <summary>가능한 경우, 지정된 형식의 서비스 개체를 가져옵니다.</summary>
      <param name="service">검색할 서비스의 <see cref="T:System.Type" />입니다.</param>
      <returns>요청된 서비스를 구현하는 <see cref="T:System.Object" />이거나, 서비스를 확인할 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.Owner">
      <summary>이 중첩 컨테이너의 소유 구성 요소를 가져옵니다.</summary>
      <returns>이 중첩 컨테이너를 소유하는 <see cref="T:System.ComponentModel.IComponent" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.OwnerName">
      <summary>소유 구성 요소의 이름을 가져옵니다.</summary>
      <returns>소유 구성 요소의 이름입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.NullableConverter">
      <summary>Nullable 형식과 그 기본 형식 사이의 자동 변환 기능을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.#ctor(System.Type)">
      <summary>
        <see cref="T:System.ComponentModel.NullableConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">지정된 nullable 형식입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" />이 nullable 형식이 아닌 경우</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>지정된 컨텍스트를 사용하여 이 변환기가 지정된 형식의 개체를 이 변환기의 형식으로 변환할 수 있는지 여부를 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>지정된 컨텍스트를 사용하여 이 변환기에서 개체를 지정된 형식으로 변환할 수 있는지 여부를 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 컨텍스트 및 문화권 정보를 사용하여 지정된 개체를 이 변환기 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">현재 문화권으로 사용할 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>지정된 컨텍스트 및 문화권 정보를 사용하여 지정된 값 개체를 지정된 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">현재 문화권으로 사용할 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType">값 매개 변수를 변환할 <see cref="T:System.Type" />입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>지정된 컨텍스트를 사용하여 이 <see cref="T:System.ComponentModel.TypeConverter" />가 연결된 형식의 인스턴스를 만들어 개체의 속성 값 집합을 제공합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="propertyValues">새 속성 값의 <see cref="T:System.Collections.IDictionary" />입니다.</param>
      <returns>지정된 <see cref="T:System.Collections.IDictionary" />를 나타내는 <see cref="T:System.Object" />이거나, 개체를 만들 수 없으면 <see langword="null" />입니다. 이 메서드는 항상 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>이 개체의 값을 변경할 때 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />를 호출하여 지정된 컨텍스트로 새 값을 만들어야 하는지 여부를 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>이 개체의 속성을 변경하려는 경우 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 호출을 통해 새 값을 만들어야 하면 <see langword="true" />이고, 만들지 않아야 하면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>지정된 컨텍스트 및 특성을 사용하여 값 매개 변수로 지정된 배열 형식에 대한 속성 컬렉션을 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value">속성을 가져올 배열 형식을 지정하는 <see cref="T:System.Object" /> 입니다.</param>
      <param name="attributes">필터로 사용되는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns>이 데이터 형식에 대해 공개된 속성을 가진 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 또는 속성이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>지정된 컨텍스트를 사용하여 이 개체가 속성을 지원하는지 여부를 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>이 개체의 속성을 찾기 위해 <see langword="true" />를 호출하면 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>형식 컨텍스트가 제공될 때 이 형식 변환기를 사용하도록 디자인된 데이터 형식의 표준 값 컬렉션을 반환합니다.</summary>
      <param name="context">이 변환기가 호출되는 환경에 대한 추가 정보를 추출하는 데 사용할 수 있는 형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다. 이 매개 변수 또는 이 매개 변수의 속성은 <see langword="null" />일 수 있습니다.</param>
      <returns>유효한 값의 표준 집합을 보유하는 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 또는 데이터 형식이 표준 값 집합을 지원하지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>지정된 컨텍스트를 사용하여, <see cref="Overload:System.ComponentModel.TypeConverter.GetStandardValues" />에서 반환된 표준 값 컬렉션이 가능한 값에 대한 단독 목록인지 여부를 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>
        <see langword="true" />에서 반환된 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />이 가능한 값에 대한 단독 목록이면 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />이고, 그 외에 다른 값을 사용할 수 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>지정된 컨텍스트를 사용하여, 이 개체가 목록에서 선택할 수 있는 표준 값 집합을 지원하는지 여부를 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>개체가 지원하는 일반 값 집합을 찾기 위해 <see langword="true" />를 호출해야 하는 경우 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>지정된 값 개체를 이 형식 및 지정된 컨텍스트에 사용할 수 있는지 여부를 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value">유효성을 테스트할 <see cref="T:System.Object" />입니다.</param>
      <returns>지정된 값이 이 개체에 대해 유효하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.NullableType">
      <summary>nullable 형식을 가져옵니다.</summary>
      <returns>nullable 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingType">
      <summary>내부 형식을 가져옵니다.</summary>
      <returns>내부 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingTypeConverter">
      <summary>내부 형식 변환기를 가져옵니다.</summary>
      <returns>내부 형식 변환기를 나타내는 <see cref="T:System.ComponentModel.TypeConverter" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.PasswordPropertyTextAttribute">
      <summary>개체의 텍스트 표현이 별표와 같은 문자로 가려져 있음을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor(System.Boolean)">
      <summary>암호 텍스트를 선택적으로 표시하여 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="password">속성이 암호 텍스트로 표시됨을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</param>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />의 기본값을 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.Equals(System.Object)">
      <summary>두 개의 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 인스턴스가 같은지 여부를 확인합니다.</summary>
      <param name="o">현재 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />과 비교할 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />입니다.</param>
      <returns>지정된 <see langword="true" />가 현재<see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />와 같으면 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>현재 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.IsDefaultAttribute">
      <summary>이 인스턴스의 값이 기본값인지 여부를 나타내는 값을 반환합니다.</summary>
      <returns>이 인스턴스가 클래스에 대한 기본 특성이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.No">
      <summary>텍스트 속성이 암호로 사용되지 않도록 지정합니다. 이 <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />) 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="P:System.ComponentModel.PasswordPropertyTextAttribute.Password">
      <summary>
        <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />가 정의된 속성이 암호 텍스트로 표시되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>속성이 암호 텍스트로 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Yes">
      <summary>텍스트 속성이 암호로 사용되도록 지정합니다. 이 <see langword="static" />(Visual Basic의 경우 <see langword="Shared" />) 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary>클래스의 속성에 대한 추상화를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>지정된 <see cref="T:System.ComponentModel.PropertyDescriptor" />의 이름과 특성을 사용하여 <see cref="T:System.ComponentModel.MemberDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="descr">속성 이름 및 특성이 들어 있는 <see cref="T:System.ComponentModel.MemberDescriptor" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>지정된 <see cref="T:System.ComponentModel.PropertyDescriptor" />의 이름과 <see cref="T:System.ComponentModel.MemberDescriptor" /> 및 <see cref="T:System.ComponentModel.MemberDescriptor" /> 배열 모두의 특성을 사용하여 <see cref="T:System.Attribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="descr">멤버 이름 및 특성이 들어 있는 <see cref="T:System.ComponentModel.MemberDescriptor" />입니다.</param>
      <param name="attrs">속성과 연결할 특성이 들어 있는 <see cref="T:System.Attribute" /> 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>지정된 이름과 특성을 사용하여 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">속성의 이름입니다.</param>
      <param name="attrs">속성 특성이 들어 있는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary>이 속성이 변경되면 다른 개체에서 알림을 받을 수 있도록 합니다.</summary>
      <param name="component">처리기를 추가할 구성 요소입니다.</param>
      <param name="handler">수신기로 추가할 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 또는 <paramref name="handler" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)">
      <summary>파생 클래스에서 재정의된 경우 개체를 다시 설정하면 해당 값이 변경되는지 여부를 반환합니다.</summary>
      <param name="component">다시 설정 기능을 테스트할 구성 요소입니다.</param>
      <returns>구성 요소를 다시 설정하면 해당 값이 변경되는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.ComponentType">
      <summary>파생 클래스에서 재정의된 경우 이 속성이 바인딩된 구성 요소의 형식을 가져옵니다.</summary>
      <returns>이 속성이 바인딩된 구성 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다. <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> 또는 <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> 메서드가 호출될 때, 지정된 개체는 이 형식의 인스턴스가 될 수 있습니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.Converter">
      <summary>이 속성의 형식 변환기를 가져옵니다.</summary>
      <returns>이 속성의 <see cref="T:System.ComponentModel.TypeConverter" />을 변환하는 데 사용되는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)">
      <summary>지정된 형식의 인스턴스를 만듭니다.</summary>
      <param name="type">만들 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>해당 형식의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)">
      <summary>이 개체를 다른 개체와 비교하여 두 개체가 같은지 확인합니다.</summary>
      <param name="obj">이 <see cref="T:System.ComponentModel.PropertyDescriptor" />과 비교할 개체입니다.</param>
      <returns>값이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)">
      <summary>
        <see cref="T:System.ComponentModel.PropertyDescriptor" />의 특성을 부모 클래스의 지정된 특성 목록에 추가합니다.</summary>
      <param name="attributeList">부모 클래스에 있는 특성을 나열하는 <see cref="T:System.Collections.IList" />입니다. 처음에는 이 컬렉션이 비어 있습니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties">
      <summary>기본 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />을 반환합니다.</summary>
      <returns>속성 설명자의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])">
      <summary>지정된 특성 배열을 필터로 사용하여 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />을 반환합니다.</summary>
      <param name="filter">필터로 사용할 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns>지정된 특성과 일치하는 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)">
      <summary>지정된 개체에 대해 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />을 반환합니다.</summary>
      <param name="instance">속성을 가져올 구성 요소입니다.</param>
      <returns>지정된 구성 요소의 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary>지정된 특성 배열을 필터로 사용하여 지정된 개체에 대한 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />을 반환합니다.</summary>
      <param name="instance">속성을 가져올 구성 요소입니다.</param>
      <param name="filter">필터로 사용할 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns>지정된 구성 요소의 지정된 특성과 일치하는 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)">
      <summary>지정된 형식의 편집기를 가져옵니다.</summary>
      <param name="editorBaseType">속성이 지원하는 여러 편집기를 구별하는 데 사용되는 기본 편집기 형식입니다.</param>
      <returns>요청된 편집기 형식의 인스턴스이거나, 편집기를 찾을 수 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetHashCode">
      <summary>해당 개체의 해시 코드를 반환합니다.</summary>
      <returns>이 개체의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary>이 메서드는 멤버를 호출하는 동안 사용해야 하는 개체를 반환합니다.</summary>
      <param name="type">호출 대상의 <see cref="T:System.Type" />입니다.</param>
      <param name="instance">잠재적인 호출 대상입니다.</param>
      <returns>멤버를 호출하는 동안 사용해야 하는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)">
      <summary>해당 이름을 사용하는 형식을 반환합니다.</summary>
      <param name="typeName">검색할 형식에 대한 어셈블리의 정규화된 이름입니다.</param>
      <returns>지정된 형식 이름과 일치하는 <see cref="T:System.Type" />이거나, 일치하는 형식을 찾을 수 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)">
      <summary>파생 클래스에서 재정의된 경우 구성 요소에 대한 현재 속성 값을 가져옵니다.</summary>
      <param name="component">값을 검색할 속성이 포함된 구성 요소입니다.</param>
      <returns>지정된 구성 요소에 대한 속성 값입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)">
      <summary>특정 구성 요소에 대한 <c>ValueChanged</c> 이벤트 처리기의 현재 집합을 검색합니다.</summary>
      <param name="component">이벤트 처리기를 검색할 구성 요소입니다.</param>
      <returns>결합된 멀티캐스트 이벤트 처리기입니다. <paramref name="component" />에 이벤트 처리기가 현재 할당되지 않은 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsLocalizable">
      <summary>
        <see cref="T:System.ComponentModel.LocalizableAttribute" />에 지정된, 이 속성이 지역화되어야 하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>멤버의 <see cref="T:System.ComponentModel.LocalizableAttribute" />가 <see langword="true" />로 설정된 것으로 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsReadOnly">
      <summary>파생 클래스에서 재정의된 경우 이 속성이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>속성이 읽기 전용이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)">
      <summary>구현된 <c>ValueChanged</c> 이벤트를 발생시킵니다.</summary>
      <param name="component">이벤트를 발생시키는 개체입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.PropertyType">
      <summary>파생 클래스에서 재정의된 경우 속성 형식을 가져옵니다.</summary>
      <returns>속성 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary>이 속성이 변경되면 다른 개체에서 알림을 받을 수 있도록 합니다.</summary>
      <param name="component">처리기를 제거할 구성 요소입니다.</param>
      <param name="handler">수신기로 제거할 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 또는 <paramref name="handler" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)">
      <summary>파생 클래스에서 재정의된 경우 구성 요소의 이 속성 값을 기본값으로 다시 설정합니다.</summary>
      <param name="component">기본값으로 다시 설정될 속성 값이 포함된 구성 요소입니다.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SerializationVisibility">
      <summary>
        <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" />에 지정된, 이 속성이 serialize되어야 하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 속성이 serialize되어야 하는지 여부를 지정하는 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 열거형 값 중 하나입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>파생 클래스에서 재정의된 경우 구성 요소의 값을 다른 값으로 설정합니다.</summary>
      <param name="component">설정될 속성 값이 포함된 구성 요소입니다.</param>
      <param name="value">새 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>파생 클래스에서 재정의된 경우 이 속성 값이 지속되어야 하는지 여부를 나타내는 값을 확인합니다.</summary>
      <param name="component">지속성을 검사할 속성이 포함된 구성 요소입니다.</param>
      <returns>속성을 지속시켜야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents">
      <summary>이 속성의 값 변경 알림이 속성 설명자 외부에서 발생되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>값 변경 알림이 속성 설명자 외부에서 발생되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptorCollection">
      <summary>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])">
      <summary>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="properties">이 컬렉션의 속성을 제공하는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 형식의 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 클래스의 새 인스턴스를 초기화합니다. 이 인스턴스는 선택적으로 읽기 전용으로 만들 수 있습니다.</summary>
      <param name="properties">이 컬렉션의 속성을 제공하는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 형식의 배열입니다.</param>
      <param name="readOnly">
        <see langword="true" />이면 컬렉션을 수정할 수 없습니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)">
      <summary>지정된 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 컬렉션에 추가합니다.</summary>
      <param name="value">컬렉션에 추가할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <returns>컬렉션에 추가된 <see cref="T:System.ComponentModel.PropertyDescriptor" />의 인덱스입니다.</returns>
      <exception cref="T:System.NotSupportedException">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Clear">
      <summary>컬렉션에서 모든 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체를 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)">
      <summary>컬렉션에 지정된 <see cref="T:System.ComponentModel.PropertyDescriptor" />가 들어 있는지 여부를 반환합니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <returns>컬렉션에 지정된 <see cref="T:System.ComponentModel.PropertyDescriptor" />가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)">
      <summary>전체 컬렉션을 지정된 인덱스 번호에서 시작하여 배열에 복사합니다.</summary>
      <param name="array">컬렉션의 요소를 복사할 대상 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 배열입니다.</param>
      <param name="index">복사가 시작되는 <paramref name="array" /> 매개 변수의 인덱스입니다.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Count">
      <summary>컬렉션에 있는 속성 설명자의 개수를 가져옵니다.</summary>
      <returns>컬렉션에 있는 속성 설명자의 개수입니다.</returns>
    </member>
    <member name="F:System.ComponentModel.PropertyDescriptorCollection.Empty">
      <summary>항목이 없는 새 컬렉션을 만드는 대신 사용할 수 있는 빈 컬렉션을 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>대/소문자를 무시할지 여부를 나타내는 부울 값을 사용하여 지정된 이름의 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 반환합니다.</summary>
      <param name="name">컬렉션에서 반환할 <see cref="T:System.ComponentModel.PropertyDescriptor" />의 이름입니다.</param>
      <param name="ignoreCase">속성 이름의 대/소문자를 무시하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>지정된 이름의 <see cref="T:System.ComponentModel.PropertyDescriptor" />이거나, 해당 속성이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator">
      <summary>이 클래스에 대한 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 형식의 열거자입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)">
      <summary>지정된 <see cref="T:System.ComponentModel.PropertyDescriptor" />의 인덱스를 반환합니다.</summary>
      <param name="value">인덱스를 반환할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <returns>지정된 <see cref="T:System.ComponentModel.PropertyDescriptor" />의 인덱스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>
        <see cref="T:System.ComponentModel.PropertyDescriptor" />를 지정된 컬렉션의 지정된 인덱스 번호에 추가합니다.</summary>
      <param name="index">컬렉션에서 <paramref name="value" /> 매개 변수를 추가할 인덱스입니다.</param>
      <param name="value">컬렉션에 추가할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <exception cref="T:System.NotSupportedException">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>지정된 <see cref="T:System.Collections.IComparer" />를 사용하여 이 컬렉션의 멤버를 정렬합니다.</summary>
      <param name="sorter">이 컬렉션의 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체를 정렬하는 데 사용할 비교자입니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])">
      <summary>이 컬렉션의 멤버를 정렬합니다. 지정된 순서가 먼저 적용된 다음 대개 사전순인 이 컬렉션의 기본 정렬 순서가 적용됩니다.</summary>
      <param name="names">이 컬렉션에 있는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 정렬 순서를 기술하는 문자열 배열입니다.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)">
      <summary>지정한 인덱스 번호의 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 가져오거나 설정합니다.</summary>
      <param name="index">가져오거나 설정할 <see cref="T:System.ComponentModel.PropertyDescriptor" />의 인덱스(0부터 시작)입니다.</param>
      <returns>지정된 인덱스 번호가 있는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 매개 변수가 <see cref="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)" />에 대해 유효한 인덱스가 아닌 경우</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)">
      <summary>지정된 이름을 가진 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 가져오거나 설정합니다.</summary>
      <param name="name">컬렉션에서 가져올 <see cref="T:System.ComponentModel.PropertyDescriptor" />의 이름입니다.</param>
      <returns>지정된 이름의 <see cref="T:System.ComponentModel.PropertyDescriptor" />이거나, 해당 속성이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)">
      <summary>지정된 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 컬렉션에서 제거합니다.</summary>
      <param name="value">컬렉션에서 제거할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <exception cref="T:System.NotSupportedException">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)">
      <summary>컬렉션에서 지정된 인덱스의 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 제거합니다.</summary>
      <param name="index">컬렉션에서 제거할 <see cref="T:System.ComponentModel.PropertyDescriptor" />의 인덱스입니다.</param>
      <exception cref="T:System.NotSupportedException">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort">
      <summary>대개 사전순인 이 컬렉션의 기본 정렬 순서를 사용하여 이 컬렉션의 멤버를 정렬합니다.</summary>
      <returns>정렬된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 개체가 들어 있는 새 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>지정된 <see cref="T:System.Collections.IComparer" />를 사용하여 이 컬렉션의 멤버를 정렬합니다.</summary>
      <param name="comparer">이 컬렉션의 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체를 정렬하는 데 사용할 비교자입니다.</param>
      <returns>정렬된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 개체가 들어 있는 새 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])">
      <summary>이 컬렉션의 멤버를 정렬합니다. 지정된 순서가 먼저 적용된 다음 대개 사전순인 이 컬렉션의 기본 정렬 순서가 적용됩니다.</summary>
      <param name="names">이 컬렉션에 있는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 정렬 순서를 기술하는 문자열 배열입니다.</param>
      <returns>정렬된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 개체가 들어 있는 새 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>이 컬렉션의 멤버를 정렬합니다. 지정된 순서가 먼저 적용된 다음 지정된 <see cref="T:System.Collections.IComparer" />를 사용하여 정렬됩니다.</summary>
      <param name="names">이 컬렉션에 있는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 정렬 순서를 기술하는 문자열 배열입니다.</param>
      <param name="comparer">이 컬렉션의 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체를 정렬하는 데 사용할 비교자입니다.</param>
      <returns>정렬된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 개체가 들어 있는 새 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count">
      <summary>컬렉션에 포함된 요소 수를 가져옵니다.</summary>
      <returns>컬렉션에 포함된 요소 수입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>해당 컬렉션에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션에 대한 액세스가 동기화(스레드로부터 안전)되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary>컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>제공된 키와 값을 가진 요소를 <see cref="T:System.Collections.IDictionary" />에 추가합니다.</summary>
      <param name="key">추가할 요소의 키로 사용하는 <see cref="T:System.Object" />입니다.</param>
      <param name="value">추가할 요소의 값으로 사용하는 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.NotSupportedException">컬렉션이 읽기 전용입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear">
      <summary>
        <see cref="T:System.Collections.IDictionary" />에서 요소를 모두 제거합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)">
      <summary>지정된 키를 갖는 요소가 <see cref="T:System.Collections.IDictionary" />에 들어 있는지 여부를 결정합니다.</summary>
      <param name="key">
        <see cref="T:System.Collections.IDictionary" />에서 찾을 수 있는 키입니다.</param>
      <returns>
        <see langword="true" />에 해당 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator">
      <summary>이 클래스에 대한 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 형식의 열거자입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IDictionary" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />의 크기가 고정되어 있으면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.IDictionary" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)">
      <summary>지정한 키를 가진 요소를 가져오거나 설정합니다.</summary>
      <param name="key">가져오거나 설정할 요소의 키입니다.</param>
      <returns>지정한 키가 있는 요소입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys">
      <summary>
        <see cref="T:System.Collections.ICollection" />의 키를 포함하는 <see cref="T:System.Collections.IDictionary" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />의 키를 포함하는 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)">
      <summary>
        <see cref="T:System.Collections.IDictionary" />에서 지정한 키를 가지는 요소를 제거합니다.</summary>
      <param name="key">제거할 요소의 키입니다.</param>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values">
      <summary>
        <see cref="T:System.Collections.ICollection" />의 값이 들어 있는 <see cref="T:System.Collections.IDictionary" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />의 값을 포함하는 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
        <see cref="T:System.Collections.IEnumerator" />의 <see cref="T:System.Collections.IDictionary" />를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />에 대한 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" />에 항목을 추가합니다.</summary>
      <param name="value">컬렉션에 추가할 항목입니다.</param>
      <returns>새 요소가 삽입된 위치입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear">
      <summary>컬렉션에서 모든 항목을 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary>컬렉션에 특정 값이 있는지 여부를 확인합니다.</summary>
      <param name="value">컬렉션에서 찾을 항목입니다.</param>
      <returns>항목이 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>컬렉션에 있는 특정 항목의 인덱스를 확인합니다.</summary>
      <param name="value">컬렉션에서 찾을 항목입니다.</param>
      <returns>목록에 <paramref name="value" />가 있으면 해당 값의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>항목을 컬렉션 내의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index">
        <paramref name="value" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="value">컬렉션에 삽입할 항목입니다.</param>
      <exception cref="T:System.NotSupportedException">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary>컬렉션의 크기가 고정되어 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션의 크기가 고정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary>컬렉션이 읽기 전용인지를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션이 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary>컬렉션에서 지정한 인덱스에 있는 항목을 가져오거나 설정합니다.</summary>
      <param name="index">가져오거나 설정할 항목의 인덱스(0부터 시작)입니다.</param>
      <returns>지정한 인덱스의 요소입니다.</returns>
      <exception cref="T:System.NotSupportedException">컬렉션이 읽기 전용입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />가 <see cref="T:System.ComponentModel.PropertyDescriptor" />가 아닌 경우</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="index" />가 <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />보다 크거나 같은 경우</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary>컬렉션에서 맨 처음 발견되는 지정된 값을 제거합니다.</summary>
      <param name="value">컬렉션에서 제거할 항목입니다.</param>
      <exception cref="T:System.NotSupportedException">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>지정한 인덱스에서 해당 항목을 제거합니다.</summary>
      <param name="index">제거할 항목의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.NotSupportedException">컬렉션이 읽기 전용입니다.</exception>
    </member>
    <member name="T:System.ComponentModel.PropertyTabAttribute">
      <summary>지정된 클래스에 대해 표시할 속성 탭을 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String)">
      <summary>지정된 탭 클래스 이름을 사용하여 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="tabClassName">만들 탭 형식의 어셈블리로 한정된 이름입니다. 이 형식 규칙의 예를 보려면 <see cref="P:System.Type.AssemblyQualifiedName" />을 참조하십시오.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String,System.ComponentModel.PropertyTabScope)">
      <summary>지정된 탭 클래스 이름과 탭 범위를 사용하여 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="tabClassName">만들 탭 형식의 어셈블리로 한정된 이름입니다. 이 형식 규칙의 예를 보려면 <see cref="P:System.Type.AssemblyQualifiedName" />을 참조하십시오.</param>
      <param name="tabScope">이 탭의 범위를 나타내는 <see cref="T:System.ComponentModel.PropertyTabScope" />입니다. 범위가 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />이면 해당 <see cref="T:System.ComponentModel.PropertyTabAttribute" />가 포함된 구성 요소에 대해서만 탭이 표시됩니다. 범위가 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />이면 해당 문서의 모든 구성 요소에 대해 탭이 표시됩니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScope" />이 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 또는 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />이 아닌 경우</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type)">
      <summary>지정된 탭 형식을 사용하여 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="tabClass">만들 탭의 형식입니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type,System.ComponentModel.PropertyTabScope)">
      <summary>지정된 탭 형식과 탭 범위를 사용하여 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="tabClass">만들 탭의 형식입니다.</param>
      <param name="tabScope">이 탭의 범위를 나타내는 <see cref="T:System.ComponentModel.PropertyTabScope" />입니다. 범위가 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />이면 해당 <see cref="T:System.ComponentModel.PropertyTabAttribute" />가 포함된 구성 요소에 대해서만 탭이 표시됩니다. 범위가 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />이면 해당 문서의 모든 구성 요소에 대해 탭이 표시됩니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScope" />이 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 또는 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />이 아닌 경우</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.ComponentModel.PropertyTabAttribute)">
      <summary>이 인스턴스가 지정된 특성과 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="other">이 인스턴스와 비교할 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 또는 <see langword="null" />입니다.</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 인스턴스가 서로 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.TypeLoadException">
        <paramref name="other" /> 매개 변수의 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 속성에 지정된 형식을 찾을 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.Object)">
      <summary>이 인스턴스가 지정된 개체와 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="other">이 인스턴스와 비교할 개체 또는 <see langword="null" />입니다.</param>
      <returns>
        <paramref name="other" />가 동일한 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 인스턴스를 참조하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.TypeLoadException">
        <paramref name="other" /> 매개 변수의 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 속성에 지정된 형식을 찾을 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.GetHashCode">
      <summary>해당 개체의 해시 코드를 가져옵니다.</summary>
      <returns>해당 특성이 속해 있는 개체의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.String[],System.ComponentModel.PropertyTabScope[])">
      <summary>지정된 탭 클래스 이름 및 탭 범위 배열을 사용하여 특성을 초기화합니다.</summary>
      <param name="tabClassNames">속성 창에서 탭에 대해 만들 형식의 정규화된 형식 이름 배열입니다.</param>
      <param name="tabScopes">각 탭의 범위입니다. 범위가 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />이면 해당 <see cref="T:System.ComponentModel.PropertyTabAttribute" />가 포함된 구성 요소에 대해서만 탭이 표시됩니다. 범위가 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />이면 해당 문서의 모든 구성 요소에 대해 탭이 표시됩니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScopes" />에 있는 하나 이상의 값이 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 또는 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />가 아닌 경우  
또는 
<paramref name="tabClassNames" />와 <paramref name="tabScopes" /> 배열의 길이가 다른 경우  
또는 
 <paramref name="tabClassNames" /> 또는 <paramref name="tabScopes" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.Type[],System.ComponentModel.PropertyTabScope[])">
      <summary>지정된 탭 클래스 이름 및 탭 범위 배열을 사용하여 특성을 초기화합니다.</summary>
      <param name="tabClasses">만들 탭 형식입니다.</param>
      <param name="tabScopes">각 탭의 범위입니다. 범위가 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />이면 해당 <see cref="T:System.ComponentModel.PropertyTabAttribute" />가 포함된 구성 요소에 대해서만 탭이 표시됩니다. 범위가 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />이면 해당 문서의 모든 구성 요소에 대해 탭이 표시됩니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScopes" />에 있는 하나 이상의 값이 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 또는 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />가 아닌 경우  
또는 
<paramref name="tabClassNames" />와 <paramref name="tabScopes" /> 배열의 길이가 다른 경우  
또는 
 <paramref name="tabClassNames" /> 또는 <paramref name="tabScopes" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClasses">
      <summary>이 특성이 사용하는 탭 형식을 가져옵니다.</summary>
      <returns>이 특성이 사용하는 탭 형식을 나타내는 형식 배열입니다.</returns>
      <exception cref="T:System.TypeLoadException">
        <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 속성에 지정된 형식을 찾을 수 없는 경우</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClassNames">
      <summary>이 특성에서 사용하는 탭 클래스의 이름을 가져옵니다.</summary>
      <returns>이 특성이 사용하는 탭 클래스의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabScopes">
      <summary>이 <see cref="T:System.ComponentModel.PropertyTabAttribute" />의 각 탭에 대한 탭 범위 배열을 가져옵니다.</summary>
      <returns>해당 탭의 범위를 나타내는 <see cref="T:System.ComponentModel.PropertyTabScope" /> 개체의 배열입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabScope">
      <summary>속성 창에서의 탭 지속성 범위를 나타내는 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Component">
      <summary>이 탭은 현재 구성 요소에 고유합니다. 이 탭은 현재 구성 요소에 대해서만 속성 창에 추가되며 해당 구성 요소가 더 이상 선택되지 않으면 제거됩니다.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Document">
      <summary>이 탭은 현재 문서에 고유합니다. 이 탭은 속성 창에 추가되며 현재 선택한 문서가 변경되면 제거됩니다.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Global">
      <summary>이 탭은 속성 창에 추가되며 부모 구성 요소에 의해 명시적으로만 제거될 수 있습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Static">
      <summary>이 탭은 속성 창에 추가되며 제거할 수 없습니다.</summary>
    </member>
    <member name="T:System.ComponentModel.ProvidePropertyAttribute">
      <summary>
        <see cref="T:System.ComponentModel.IExtenderProvider" />의 구현자가 다른 구성 요소에 제공하는 속성의 이름을 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)">
      <summary>속성 이름과 해당 수신자의 형식을 사용하여 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="propertyName">지정된 형식의 개체로 확장되는 속성의 이름입니다.</param>
      <param name="receiverTypeName">이 속성을 확장할 수 있는 데이터 형식의 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)">
      <summary>속성의 이름과 해당 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" />으로 <see cref="T:System.Type" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="propertyName">지정된 형식의 개체로 확장되는 속성의 이름입니다.</param>
      <param name="receiverType">속성을 받을 수 있는 개체 데이터 형식의 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)">
      <summary>주어진 개체의 값이 현재 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" />와 같은지 여부를 반환합니다.</summary>
      <param name="obj">값이 같은지 테스트할 개체입니다.</param>
      <returns>주어진 개체의 값이 현재 개체의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>현재 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.PropertyName">
      <summary>이 클래스가 제공하는 속성의 이름을 가져옵니다.</summary>
      <returns>이 클래스가 제공하는 속성의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName">
      <summary>이 속성을 확장할 수 있는 데이터 형식의 이름을 가져옵니다.</summary>
      <returns>이 속성을 확장할 수 있는 데이터 형식의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.TypeId">
      <summary>이 특성에 대한 고유 식별자를 가져옵니다.</summary>
      <returns>특성에 대한 고유 식별자인 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.RecommendedAsConfigurableAttribute">
      <summary>속성을 애플리케이션 설정으로 사용할 수 있도록 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="recommendedAsConfigurable">이 특성이 바인딩되는 속성을 애플리케이션 설정으로 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" />의 기본값인 <see cref="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No" />을 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.Equals(System.Object)">
      <summary>이 인스턴스와 지정된 개체가 같은지 여부를 나타냅니다.</summary>
      <param name="obj">비교할 다른 개체입니다.</param>
      <returns>
        <see langword="true" />가 이 인스턴스와 같으면 <paramref name="obj" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>현재 <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.IsDefaultAttribute">
      <summary>이 인스턴스의 값이 클래스의 기본값인지 여부를 나타냅니다.</summary>
      <returns>이 인스턴스가 클래스에 대한 기본 특성이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No">
      <summary>속성을 애플리케이션 설정으로 사용할 수 없도록 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="P:System.ComponentModel.RecommendedAsConfigurableAttribute.RecommendedAsConfigurable">
      <summary>이 특성이 바인딩되는 속성을 애플리케이션 설정으로 사용할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 특성이 바인딩되는 속성을 애플리케이션 설정으로 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Yes">
      <summary>속성을 애플리케이션 설정으로 사용할 수 있도록 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="T:System.ComponentModel.ReferenceConverter">
      <summary>개체 참조와 다른 표현 간에 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.#ctor(System.Type)">
      <summary>
        <see cref="T:System.ComponentModel.ReferenceConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">이 참조 변환기에 연결할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>지정된 컨텍스트를 사용하여 이 변환기가 지정된 소스 형식의 개체를 참조 개체로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 개체가 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 개체를 참조 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">글꼴을 나타내는 데 사용할 문화권을 지정하는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <returns>변환된 <paramref name="value" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>지정된 컨텍스트 및 인수를 사용하여 지정된 값 개체를 참조 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">글꼴을 나타내는 데 사용할 문화권을 지정하는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType">개체를 변환할 대상 유형입니다.</param>
      <returns>변환된 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>참조 데이터 형식에 대한 표준 값 컬렉션을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>유효한 표준 값 집합을 포함하는 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />이거나 데이터 형식이 표준 값 집합을 지원하지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />에서 반환된 표준 값 목록이 단독 목록인지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />에서 반환된 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />이 가능한 값을 포함하는 단독 목록이므로 <see langword="true" />입니다. 이 메서드는 <see langword="false" />를 반환하지 않습니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>이 개체가 목록에서 선택할 수 있는 표준 값 집합을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>개체가 지원하는 공통되는 값 집합을 찾기 위해 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />를 호출해야 하므로 <see langword="true" />입니다. 이 메서드는 <see langword="false" />를 반환하지 않습니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>특정 값을 표준 값 컬렉션에 추가할 수 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="context">추가 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value">확인할 값입니다.</param>
      <returns>해당 값을 사용하여 표준 값 컬렉션에 추가할 수 있으면 <see langword="true" />이고, 이 값을 표준 값 컬렉션에 추가할 수 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Object)">
      <summary>변경된 구성 요소를 사용하여 <see cref="T:System.ComponentModel.RefreshEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="componentChanged">변경된 구성 요소입니다.</param>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Type)">
      <summary>변경된 구성 요소의 형식을 사용하여 <see cref="T:System.ComponentModel.RefreshEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeChanged">변경된 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.ComponentChanged">
      <summary>속성, 이벤트 또는 extender가 변경된 구성 요소를 가져옵니다.</summary>
      <returns>속성, 이벤트 또는 extender가 변경된 구성 요소이거나, 같은 형식의 구성 요소가 모두 변경되었으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.TypeChanged">
      <summary>속성 또는 이벤트가 변경된 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>속성 또는 이벤트가 변경된 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventHandler">
      <summary>디자인 타임 동안 <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> 또는 구성 요소가 변경될 때 발생하는 <see cref="T:System.Type" /> 이벤트를 처리하는 메서드를 나타냅니다.</summary>
      <param name="e">변경된 구성 요소 또는 <see cref="T:System.ComponentModel.RefreshEventArgs" />이 들어 있는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.RunInstallerAttribute">
      <summary>어셈블리가 설치될 때 Visual Studio 사용자 지정 동작 설치 관리자 또는 Installutil.exe(설치 관리자 도구)의 호출 여부를 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="runInstaller">어셈블리를 설치할 때 설치 관리자를 호출해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Default">
      <summary>기본 표시 유형인 <see cref="F:System.ComponentModel.RunInstallerAttribute.No" />를 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.Equals(System.Object)">
      <summary>지정된 <see cref="T:System.ComponentModel.RunInstallerAttribute" />의 값이 현재 <see cref="T:System.ComponentModel.RunInstallerAttribute" />와 같은지 여부를 확인합니다.</summary>
      <param name="obj">비교할 개체입니다.</param>
      <returns>지정된 <see langword="true" />가 현재<see cref="T:System.ComponentModel.RunInstallerAttribute" />와 같으면 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.GetHashCode">
      <summary>현재 <see cref="T:System.ComponentModel.RunInstallerAttribute" />의 해시 코드를 생성합니다.</summary>
      <returns>현재 <see cref="T:System.ComponentModel.RunInstallerAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.IsDefaultAttribute">
      <summary>이 특성이 기본값인지 여부를 확인합니다.</summary>
      <returns>이 특성이 특성 클래스의 기본값이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.No">
      <summary>어셈블리가 설치될 때 Visual Studio 사용자 지정 동작 설치 관리자 또는 Installutil.exe(설치 관리자 도구)의 호출 여부를 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="P:System.ComponentModel.RunInstallerAttribute.RunInstaller">
      <summary>어셈블리를 설치할 때 설치 관리자를 호출해야 할지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>어셈블리를 설치할 때 설치 관리자를 호출해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Yes">
      <summary>어셈블리가 설치될 때 Visual Studio 사용자 지정 동작 설치 관리자 또는 Installutil.exe(설치 관리자 도구)의 호출 여부를 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="T:System.ComponentModel.SByteConverter">
      <summary>8비트 부호 없는 정수 개체와 문자열 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.SByteConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.SByteConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.SettingsBindableAttribute">
      <summary>구성 요소 속성을 애플리케이션 설정에 바인딩할 수 있는 시기를 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.SettingsBindableAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="bindable">속성이 설정을 바인딩하는 대상으로 적합함을 지정하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.SettingsBindableAttribute.Bindable">
      <summary>속성이 설정을 바인딩하는 대상으로 적합한지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>속성이 설정을 바인딩하는 대상으로 적합하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.Equals(System.Object)">
      <summary>이 인스턴스가 지정한 개체와 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="obj">이 인스턴스와 비교할 <see cref="T:System.Object" />이거나 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</param>
      <returns>
        <see langword="true" />가 이 인스턴스의 형식 및 값과 같으면 <paramref name="obj" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.No">
      <summary>속성이 설정을 바인딩하는 대상으로 적합하지 않음을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.Yes">
      <summary>속성이 설정을 바인딩하는 대상으로 적합함을 지정합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.SingleConverter">
      <summary>단정밀도 부동 소수점 숫자 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.SingleConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.SingleConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.StringConverter">
      <summary>문자열 개체와 다른 표현을 상호 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.StringConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>이 변환기가 지정된 컨텍스트를 사용하여 지정된 소스 형식의 개체를 문자열로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 값 개체를 <see cref="T:System.String" /> 개체로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">사용할 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환을 수행할 수 없는 경우</exception>
    </member>
    <member name="T:System.ComponentModel.SyntaxCheck">
      <summary>컴퓨터 이름 및 경로가 특정 구문을 준수하는지 확인하는 메서드를 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)">
      <summary>컴퓨터 이름의 구문을 검토하여 컴퓨터 이름에 "\"가 포함되어 있지 않은지 확인합니다.</summary>
      <param name="value">확인할 컴퓨터 이름이 포함된 문자열입니다.</param>
      <returns>
        <paramref name="value" />가 적절한 컴퓨터 이름 형식과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckPath(System.String)">
      <summary>경로의 구문을 검토하여 "\\"로 시작되는지 확인합니다.</summary>
      <param name="value">확인할 경로가 포함된 문자열입니다.</param>
      <returns>
        <paramref name="value" />가 적절한 경로 형식과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)">
      <summary>경로의 구문을 검토하여 "\" 또는 드라이브 문자 "C:"로 시작되는지 확인합니다.</summary>
      <param name="value">확인할 경로가 포함된 문자열입니다.</param>
      <returns>
        <paramref name="value" />가 적절한 경로 형식과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.TimeSpanConverter">
      <summary>
        <see cref="T:System.TimeSpan" /> 개체와 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.TimeSpanConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>지정된 컨텍스트를 사용하여 이 변환기가 지정된 소스 형식의 개체를 <see cref="T:System.TimeSpan" />으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 대상 형식의 올바른 값이 아닌 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 개체를 <see cref="T:System.TimeSpan" />으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">선택적 <see cref="T:System.Globalization.CultureInfo" />입니다. 제공되지 않으면 현재 문화권으로 가정합니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" />가 대상 형식의 올바른 값이 아닌 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>지정된 개체를 다른 형식으로 변환합니다.</summary>
      <param name="context">포맷터 컨텍스트입니다.</param>
      <param name="culture">
        <paramref name="value" />가 변환될 문화권입니다.</param>
      <param name="value">변환할 개체입니다.</param>
      <param name="destinationType">개체를 변환할 대상 유형입니다.</param>
      <returns>변환된 개체입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemAttribute">
      <summary>도구 상자 항목의 특성을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 클래스의 새 인스턴스를 초기화하고 기본 초기화 값을 사용할지 여부를 지정합니다.</summary>
      <param name="defaultType">기본 형식의 도구 상자 항목 특성을 만들려면 <see langword="true" />이고, 이 특성에 대해 기본 도구 상자 항목 지원을 연결하지 않으려면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.String)">
      <summary>지정된 형식 이름을 사용하여 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="toolboxItemTypeName">도구 상자 항목의 형식 및 해당 형식이 들어 있는 어셈블리의 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Type)">
      <summary>지정된 도구 상자 항목 형식을 사용하여 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="toolboxItemType">해당 도구 상자 항목의 형식입니다.</param>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 클래스의 새 인스턴스를 초기화하고 해당 형식을 기본값인 <see cref="T:System.Drawing.Design.ToolboxItem" />으로 설정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.Equals(System.Object)">
      <summary>이 인스턴스가 지정한 개체와 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="obj">이 인스턴스와 비교할 <see cref="T:System.Object" />이거나 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</param>
      <returns>
        <see langword="true" />가 이 인스턴스의 형식 및 값과 같으면 <paramref name="obj" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute">
      <summary>현재 특성 값이 해당 특성의 기본값인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 특성 값이 기본값이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.None">
      <summary>
        <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 클래스의 새 인스턴스를 초기화하고 해당 형식을 <see langword="null" />로 설정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemType">
      <summary>해당 도구 상자 항목의 형식을 가져오거나 설정합니다.</summary>
      <returns>해당 도구 상자 항목의 형식입니다.</returns>
      <exception cref="T:System.ArgumentException">형식을 찾을 수 없는 경우</exception>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemTypeName">
      <summary>현재 <see cref="T:System.Drawing.Design.ToolboxItem" />의 형식 이름을 가져오거나 설정합니다.</summary>
      <returns>현재 도구 상자 항목의 정규화된 형식 이름입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterAttribute">
      <summary>도구 상자 항목에 사용할 필터 문자열과 필터 형식을 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String)">
      <summary>지정된 필터 문자열을 사용하여 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="filterString">도구 상자 항목에 대한 필터 문자열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String,System.ComponentModel.ToolboxItemFilterType)">
      <summary>지정된 필터 문자열과 형식을 사용하여 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="filterString">도구 상자 항목에 대한 필터 문자열입니다.</param>
      <param name="filterType">필터 형식을 나타내는 <see cref="T:System.ComponentModel.ToolboxItemFilterType" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Equals(System.Object)">
      <summary>이 인스턴스가 지정한 개체와 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="obj">이 인스턴스와 비교할 <see cref="T:System.Object" />이거나 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</param>
      <returns>
        <see langword="true" />가 이 인스턴스의 형식 및 값과 같으면 <paramref name="obj" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterString">
      <summary>도구 상자 항목에 대한 필터 문자열을 가져옵니다.</summary>
      <returns>도구 상자 항목에 대한 필터 문자열입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterType">
      <summary>필터 형식을 가져옵니다.</summary>
      <returns>필터 형식을 나타내는 <see cref="T:System.ComponentModel.ToolboxItemFilterType" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Match(System.Object)">
      <summary>지정된 개체에 일치하는 필터 문자열이 있는지 여부를 나타냅니다.</summary>
      <param name="obj">일치하는 필터 문자열을 테스트할 개체입니다.</param>
      <returns>지정된 개체에 일치하는 필터 문자열이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.ToString">
      <summary>현재 개체를 나타내는 문자열을 반환합니다.</summary>
      <returns>현재 개체를 나타내는 문자열입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.TypeId">
      <summary>해당 특성의 형식 ID를 가져옵니다.</summary>
      <returns>이 특성의 형식 ID입니다. 필터 문자열이 같은 모든 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 개체는 같은 형식 ID를 반환합니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterType">
      <summary>
        <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" />에서 사용된 필터 형식을 나타내는 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Allow">
      <summary>도구 상자 항목 필터 문자열을 사용할 수 있지만 반드시 필요하지는 않음을 나타냅니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Custom">
      <summary>도구 상자 항목 필터 문자열을 사용할지 여부를 결정하려면 사용자 지정 처리가 필요함을 나타냅니다. 디자이너가 도구 상자 항목을 수락 또는 거부하려 한다는 것을 코드로 나타내도록 일반적으로 루트 디자이너 클래스에 지정됩니다. 디자이너를 구현 해야 합니다 <see cref="M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)" /> 메서드는 <see cref="T:System.Drawing.Design.IToolboxUser" /> 인터페이스.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Prevent">
      <summary>도구 상자 항목 필터 문자열을 사용할 수 없음을 나타냅니다. 디자이너와 구성 요소 클래스 둘 모두에 필터 문자열이 있고 그 중 하나의 값이 <c>ToolboxItemFilterType.Prevent</c>이면 도구 상자 항목을 사용할 수 없습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Require">
      <summary>활성화할 도구 상자 항목에 대해 도구 상자 항목 필터 문자열이 있어야 함을 나타냅니다.  필터 형식이 <c>Require</c>인 도구 상자 항목을 사용하려면 디자이너와 구성 요소 클래스에 일치하는 필터 문자열이 있어야 합니다. 뿐만 아니라 도구 상자 항목을 사용하려면 디자이너와 구성 요소 클래스의 필터 형식이 <c>Prevent</c>이면 안 됩니다.</summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary>표준 값과 하위 속성에 액세스하기 위한 그리고 값의 형식을 다른 형식으로 변환하기 위한 통합된 방법을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.TypeConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>지정된 컨텍스트를 사용하여 이 변환기가 지정된 형식의 개체를 이 변환기의 형식으로 변환할 수 있는지 여부를 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary>이 변환기가 지정된 형식의 개체를 이 변환기의 형식으로 변환할 수 있는지 여부를 반환합니다.</summary>
      <param name="sourceType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>지정된 컨텍스트를 사용하여 이 변환기에서 개체를 지정된 형식으로 변환할 수 있는지 여부를 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary>이 변환기가 개체를 지정된 형식으로 변환할 수 있는지 여부를 반환합니다.</summary>
      <param name="destinationType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 컨텍스트 및 문화권 정보를 사용하여 지정된 개체를 이 변환기 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">현재 문화권으로 사용할 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary>지정된 값을 이 변환기의 형식으로 변환합니다.</summary>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>고정 문화권 및 지정된 컨텍스트를 사용하여 지정된 문자열을 이 변환기의 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="text">변환할 <see cref="T:System.String" />입니다.</param>
      <returns>변환된 텍스트를 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
      <summary>고정 문화권을 사용하여, 지정된 문자열을 이 변환기의 형식으로 변환합니다.</summary>
      <param name="text">변환할 <see cref="T:System.String" />입니다.</param>
      <returns>변환된 텍스트를 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary>지정된 컨텍스트 및 문화권 정보를 사용하여, 지정된 텍스트를 개체로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />
        <see langword="null" /> 이 전달되면 현재 문화권이 가정됩니다.</param>
      <param name="text">변환할 <see cref="T:System.String" />입니다.</param>
      <returns>변환된 텍스트를 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>지정된 컨텍스트를 사용하여, 지정된 텍스트를 개체로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="text">변환할 <see cref="T:System.String" />입니다.</param>
      <returns>변환된 텍스트를 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary>지정된 텍스트를 개체로 변환합니다.</summary>
      <param name="text">변환할 개체의 텍스트 표현입니다.</param>
      <returns>변환된 텍스트를 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">문자열을 적절한 개체로 변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>지정된 컨텍스트 및 문화권 정보를 사용하여 지정된 값 개체를 지정된 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />
        <see langword="null" /> 이 전달되면 현재 문화권이 가정됩니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType">
        <paramref name="value" /> 매개 변수를 변환할 <see cref="T:System.Type" />입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary>인수를 사용하여, 지정된 값 개체를 지정된 형식으로 변환합니다.</summary>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType">
        <paramref name="value" /> 매개 변수를 변환할 <see cref="T:System.Type" />입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>지정된 context를 사용하여, 지정된 값을 고정 문화권의 문자열 표현으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.String" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
      <summary>지정된 값을 고정 문화권의 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.String" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 컨텍스트 및 문화권 정보를 사용하여, 지정된 값을 문자열 표현으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />
        <see langword="null" /> 이 전달되면 현재 문화권이 가정됩니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>지정된 컨텍스트를 사용하여, 지정된 값을 문자열 표현으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary>지정된 값을 문자열 표현으로 변환합니다.</summary>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
      <summary>개체의 속성 값 집합이 지정된 <see cref="T:System.Object" />를 다시 만듭니다.</summary>
      <param name="propertyValues">새 속성 값의 사전을 나타내는 <see cref="T:System.Collections.IDictionary" />입니다.</param>
      <returns>지정된 <see cref="T:System.Collections.IDictionary" />를 나타내는 <see cref="T:System.Object" />이거나, 개체를 만들 수 없으면 <see langword="null" />입니다. 이 메서드는 항상 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>지정된 컨텍스트를 사용하여 이 <see cref="T:System.ComponentModel.TypeConverter" />가 연결된 형식의 인스턴스를 만들어 개체의 속성 값 집합을 제공합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="propertyValues">새 속성 값의 <see cref="T:System.Collections.IDictionary" />입니다.</param>
      <returns>지정된 <see cref="T:System.Collections.IDictionary" />를 나타내는 <see cref="T:System.Object" />이거나, 개체를 만들 수 없으면 <see langword="null" />입니다. 이 메서드는 항상 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
      <summary>변환을 수행할 수 없을 때 throw되는 예외를 반환합니다.</summary>
      <param name="value">변환할 <see cref="T:System.Object" />이거나, 개체를 사용할 수 없는 경우 <see langword="null" />입니다.</param>
      <returns>변환을 수행할 수 없을 때 throw되는 예외를 나타내는 <see cref="T:System.Exception" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드에서 자동으로 throw되는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
      <summary>변환을 수행할 수 없을 때 throw되는 예외를 반환합니다.</summary>
      <param name="value">변환할 <see cref="T:System.Object" />이거나, 개체를 사용할 수 없는 경우 <see langword="null" />입니다.</param>
      <param name="destinationType">변환할 대상 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>변환을 수행할 수 없을 때 throw되는 예외를 나타내는 <see cref="T:System.Exception" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">이 메서드에서 자동으로 throw되는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
      <summary>이 개체의 값을 변경할 때 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 메서드를 호출하여 새 값을 만들어야 하는지 여부를 반환합니다.</summary>
      <returns>이 개체의 속성을 변경할 때 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />를 호출하여 새 값을 만들어야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>이 개체의 값을 변경할 때 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />를 호출하여 지정된 컨텍스트로 새 값을 만들어야 하는지 여부를 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>이 개체의 속성을 변경할 때 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />를 호출하여 새 값을 만들어야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>지정된 컨텍스트를 사용하여, 값 매개 변수로 지정한 배열 형식에 대한 속성 컬렉션을 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value">속성을 가져올 배열 형식을 지정하는 <see cref="T:System.Object" />입니다.</param>
      <returns>이 데이터 형식에 대해 노출된 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />이거나, 속성이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>지정된 컨텍스트 및 특성을 사용하여 값 매개 변수로 지정된 배열 형식에 대한 속성 컬렉션을 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value">속성을 가져올 배열 형식을 지정하는 <see cref="T:System.Object" /> 입니다.</param>
      <param name="attributes">필터로 사용되는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns>이 데이터 형식에 대해 노출된 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />이거나, 속성이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
      <summary>값 매개 변수로 지정된 배열 형식에 대한 속성 컬렉션을 반환합니다.</summary>
      <param name="value">속성을 가져올 배열 형식을 지정하는 <see cref="T:System.Object" />입니다.</param>
      <returns>이 데이터 형식에 대해 노출된 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />이거나, 속성이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
      <summary>이 개체가 속성을 지원하는지 여부를 반환합니다.</summary>
      <returns>이 개체의 속성을 찾기 위해 <see langword="true" />를 호출하면 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>지정된 컨텍스트를 사용하여 이 개체가 속성을 지원하는지 여부를 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>이 개체의 속성을 찾기 위해 <see langword="true" />를 호출하면 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues">
      <summary>이 형식 변환기를 사용하도록 디자인된 데이터 형식의 기본 컨텍스트에서 표준 값 컬렉션을 반환합니다.</summary>
      <returns>유효한 표준 값 집합을 포함하는 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />이거나 데이터 형식이 표준 값 집합을 지원하지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>형식 컨텍스트가 제공될 때 이 형식 변환기를 사용하도록 디자인된 데이터 형식의 표준 값 컬렉션을 반환합니다.</summary>
      <param name="context">이 변환기가 호출되는 환경에 대한 추가 정보를 추출하는 데 사용할 수 있는 형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다. 이 매개 변수 또는 이 매개 변수의 속성은 <see langword="null" />일 수 있습니다.</param>
      <returns>유효한 표준 값 집합을 포함하는 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />이거나 데이터 형식이 표준 값 집합을 지원하지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
      <summary>
        <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />에서 반환된 표준 값 컬렉션이 단독 목록인지 여부를 반환합니다.</summary>
      <returns>
        <see langword="true" />에서 반환된 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />이 가능한 값에 대한 단독 목록이면 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />이고, 그 외에 다른 값을 사용할 수 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>지정된 컨텍스트를 사용하여, <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />에서 반환된 표준 값 컬렉션이 가능한 값에 대한 단독 목록인지 여부를 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>
        <see langword="true" />에서 반환된 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />이 가능한 값에 대한 단독 목록이면 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />이고, 그 외에 다른 값을 사용할 수 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
      <summary>이 개체가 목록에서 선택할 수 있는 표준 값 집합을 지원하는지 여부를 반환합니다.</summary>
      <returns>개체가 지원하는 일반 값 집합을 찾기 위해 <see langword="true" />를 호출해야 하는 경우 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>지정된 컨텍스트를 사용하여, 이 개체가 목록에서 선택할 수 있는 표준 값 집합을 지원하는지 여부를 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>개체가 지원하는 일반 값 집합을 찾기 위해 <see langword="true" />를 호출해야 하는 경우 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>지정된 값 개체를 이 형식 및 지정된 컨텍스트에 사용할 수 있는지 여부를 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value">유효성을 테스트할 <see cref="T:System.Object" />입니다.</param>
      <returns>지정된 값을 이 개체에 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
      <summary>지정된 값 개체를 이 형식에 사용할 수 있는지 여부를 반환합니다.</summary>
      <param name="value">유효성을 테스트할 개체입니다.</param>
      <returns>지정된 값을 이 개체에 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor">
      <summary>속성을 포함하지 않는 개체에 속성을 제공하는 <see langword="abstract" /> 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type)">
      <summary>
        <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="componentType">이 속성 설명자가 바인딩된 구성 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="name">속성의 이름입니다.</param>
      <param name="propertyType">이 속성의 데이터 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>
        <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="componentType">이 속성 설명자가 바인딩된 구성 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="name">속성의 이름입니다.</param>
      <param name="propertyType">이 속성의 데이터 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="attributes">속성과 연결할 특성이 들어 있는 <see cref="T:System.Attribute" /> 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.CanResetValue(System.Object)">
      <summary>구성 요소를 다시 설정하면 해당 구성 요소의 값이 변경되는지 여부를 반환합니다.</summary>
      <param name="component">다시 설정 기능을 테스트할 구성 요소입니다.</param>
      <returns>구성 요소를 다시 설정하면 해당 구성 요소의 값이 변경되는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ComponentType">
      <summary>이 속성 설명자가 바인딩된 구성 요소의 형식을 가져옵니다.</summary>
      <returns>이 속성이 바인딩된 구성 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.IsReadOnly">
      <summary>이 속성이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>해당 속성이 읽기 전용이면 <see langword="true" />이고, 읽기/쓰기이면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.PropertyType">
      <summary>속성의 형식을 가져옵니다.</summary>
      <returns>속성 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ResetValue(System.Object)">
      <summary>구성 요소의 이 속성 값을 다시 설정합니다.</summary>
      <param name="component">속성 값을 다시 설정할 구성 요소입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>이 속성 값이 지속될 수 있는지 여부를 반환합니다.</summary>
      <param name="component">지속성을 검사할 속성이 포함된 구성 요소입니다.</param>
      <returns>속성 값이 지속될 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
      <summary>속성 컬렉션을 정렬합니다.</summary>
      <param name="props">정렬할 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</param>
      <param name="names">컬렉션에 속성을 표시할 순서대로 나열된 이름 배열입니다.</param>
      <returns>정렬된 속성을 포함하는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.StandardValuesCollection">
      <summary>값 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.#ctor(System.Collections.ICollection)">
      <summary>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="values">컬렉션에 포함시킬 개체를 나타내는 <see cref="T:System.Collections.ICollection" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.CopyTo(System.Array,System.Int32)">
      <summary>이 컬렉션의 내용을 배열에 복사합니다.</summary>
      <param name="array">복사할 대상 배열을 나타내는 <see cref="T:System.Array" />입니다.</param>
      <param name="index">복사를 시작할 인덱스입니다.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Count">
      <summary>컬렉션에 있는 개체의 수를 가져옵니다.</summary>
      <returns>컬렉션의 개체 수입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.GetEnumerator">
      <summary>이 컬렉션에 대한 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 형식의 열거자입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Item(System.Int32)">
      <summary>지정된 인덱스 번호의 개체를 가져옵니다.</summary>
      <param name="index">컬렉션에서 가져올 <see cref="T:System.Object" />의 0부터 시작하는 인덱스입니다.</param>
      <returns>지정된 인덱스의 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#IsSynchronized">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.Collections.ICollection.IsSynchronized" />를 참조하세요.</summary>
      <returns>모든 경우에 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#SyncRoot">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.Collections.ICollection.SyncRoot" />를 참조하십시오.</summary>
      <returns>모든 경우에 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>이 특성이 바인딩되는 개체에 대한 변환기로 사용할 형식을 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>기본 형식 변환기를 사용하여 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 클래스의 새 인스턴스를 초기화합니다. 기본 형식 변환기는 빈 문자열("")입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>지정된 형식 이름을 이 특성이 바인딩되는 개체의 데이터 변환기로 사용하여 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeName">이 특성이 바인딩되는 개체의 데이터 변환에 사용할 클래스의 정규화된 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>지정된 형식을 이 특성이 바인딩되는 개체의 데이터 변환기로 사용하여 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">이 특성이 바인딩되는 개체의 데이터 변환에 사용할 변환기 클래스의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>이 특성이 바인딩되는 개체의 변환기로 사용할 <see cref="T:System.Type" />의 정규화된 형식 이름을 가져옵니다.</summary>
      <returns>이 특성이 바인딩되는 개체의 변환기로 사용할 <see cref="T:System.Type" />의 정규화된 형식 이름 또는 정규화된 이름이 없는 경우 빈 문자열("")입니다. 기본값은 빈 문자열("")입니다.</returns>
    </member>
    <member name="F:System.ComponentModel.TypeConverterAttribute.Default">
      <summary>이 특성이 바인딩되는 개체의 변환기로 사용할 형식을 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)">
      <summary>주어진 개체의 값이 현재 <see cref="T:System.ComponentModel.TypeConverterAttribute" />와 같은지 여부를 반환합니다.</summary>
      <param name="obj">값이 같은지 테스트할 개체입니다.</param>
      <returns>지정된 개체의 값이 현재 <see cref="T:System.ComponentModel.TypeConverterAttribute" />의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>현재 <see cref="T:System.ComponentModel.TypeConverterAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProvider">
      <summary>
        <see cref="T:System.ComponentModel.TypeDescriptor" />에 추가 메타데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
      <summary>부모 형식 설명 공급자를 사용하여 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="parent">부모 형식 설명 공급자입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary>다른 데이터 형식 대신 사용할 수 있는 개체를 만듭니다.</summary>
      <param name="provider">선택적인 서비스 공급자입니다.</param>
      <param name="objectType">만들 개체의 형식입니다. 이 매개 변수는 <see langword="null" />이 될 수 없습니다.</param>
      <param name="argTypes">개체의 생성자에 전달할 매개 변수 형식을 나타내는 형식의 선택적 배열입니다. 이 배열은 <see langword="null" />이거나 길이가 0일 수 있습니다.</param>
      <param name="args">개체의 생성자에 전달할 매개 변수 값의 선택적 배열입니다.</param>
      <returns>대체 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
      <summary>키/값 쌍의 <see cref="T:System.Collections.IDictionary" />로 액세스되는 개체별 캐시를 가져옵니다.</summary>
      <param name="instance">캐시를 가져올 개체입니다.</param>
      <returns>제공된 개체에서 캐싱을 지원하면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
      <summary>지정된 개체에 대한 확장 사용자 지정 형식 설명자를 가져옵니다.</summary>
      <param name="instance">확장 형식 설명자를 가져올 개체입니다.</param>
      <returns>개체에 대한 확장 메타데이터를 제공할 수 있는 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)">
      <summary>지정된 개체에 대한 Extender 공급자를 가져옵니다.</summary>
      <param name="instance">관련된 Extender 공급자를 가져올 개체입니다.</param>
      <returns>
        <paramref name="instance" />에 대한 Extender 공급자의 배열입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
      <summary>지정된 구성 요소의 이름을 가져옵니다. 구성 요소에 이름이 없으면 <see langword="null" />입니다.</summary>
      <param name="component">지정된 구성 요소입니다.</param>
      <returns>지정된 구성 요소의 이름입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
      <summary>지정된 개체에 대해 일반 리플렉션을 수행합니다.</summary>
      <param name="instance">형식의 인스턴스로, <see langword="null" />이 아니어야 합니다.</param>
      <returns>이 <paramref name="instance" />의 리플렉션 형식입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
      <summary>형식에 대해 일반 리플렉션을 수행합니다.</summary>
      <param name="objectType">
        <see cref="T:System.Reflection.IReflect" />를 검색할 개체의 형식입니다.</param>
      <returns>이 <paramref name="objectType" />의 리플렉션 형식입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectType" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
      <summary>주어진 형식의 지정된 개체에 대해 일반 리플렉션을 수행합니다.</summary>
      <param name="objectType">
        <see cref="T:System.Reflection.IReflect" />를 검색할 개체의 형식입니다.</param>
      <param name="instance">형식의 인스턴스입니다. <see langword="null" />일 수 있습니다.</param>
      <returns>이 <paramref name="objectType" />의 리플렉션 형식입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
      <summary>리플렉션 형식을 런타임 형식으로 변환합니다.</summary>
      <param name="reflectionType">해당되는 런타임 형식으로 변환할 형식입니다.</param>
      <returns>
        <paramref name="reflectionType" />의 런타임 형식을 나타내는 <see cref="T:System.Type" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reflectionType" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
      <summary>지정된 개체의 사용자 지정 형식 설명자를 가져옵니다.</summary>
      <param name="instance">형식의 인스턴스입니다. 인스턴스가 <see cref="T:System.ComponentModel.TypeDescriptor" />에 전달되지 않았으면 <see langword="null" />일 수 있습니다.</param>
      <returns>형식에 대한 메타데이터를 제공할 수 있는 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)">
      <summary>지정된 형식의 사용자 지정 형식 설명자를 가져옵니다.</summary>
      <param name="objectType">형식 설명자를 검색할 개체의 형식입니다.</param>
      <returns>형식에 대한 메타데이터를 제공할 수 있는 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary>지정된 형식과 개체의 사용자 지정 형식 설명자를 가져옵니다.</summary>
      <param name="objectType">형식 설명자를 검색할 개체의 형식입니다.</param>
      <param name="instance">형식의 인스턴스입니다. 인스턴스가 <see cref="T:System.ComponentModel.TypeDescriptor" />에 전달되지 않았으면 <see langword="null" />일 수 있습니다.</param>
      <returns>형식에 대한 메타데이터를 제공할 수 있는 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)">
      <summary>지정된 형식이 형식 설명 및 형식 설명 공급자의 체인과 호환되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="type">호환성을 테스트할 형식입니다.</param>
      <returns>
        <paramref name="type" />이 형식 설명 및 형식 설명 공급자의 체인과 호환되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProviderAttribute">
      <summary>클래스의 사용자 지정 형식 설명 공급자를 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.String)">
      <summary>지정된 형식 이름을 사용하여 <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeName">형식의 정규화된 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.Type)">
      <summary>지정한 형식을 사용하여 <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">특성에 저장할 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptionProviderAttribute.TypeName">
      <summary>형식 설명 공급자의 형식 이름을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />의 정규화된 형식 이름을 포함하는 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptor">
      <summary>구성 요소의 특성, 속성 및 이벤트와 같이, 구성 요소의 특성에 대한 정보를 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])">
      <summary>클래스 수준 특성을 대상 구성 요소 인스턴스에 추가합니다.</summary>
      <param name="instance">대상 구성 요소의 인스턴스입니다.</param>
      <param name="attributes">구성 요소의 클래스에 추가할 <see cref="T:System.Attribute" /> 개체의 배열입니다.</param>
      <returns>지정된 속성을 추가하는 데 사용된 새로 만든 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">매개 변수 중 하나 또는 둘 다 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])">
      <summary>클래스 수준 특성을 대상 구성 요소 형식에 추가합니다.</summary>
      <param name="type">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <param name="attributes">구성 요소의 클래스에 추가할 <see cref="T:System.Attribute" /> 개체의 배열입니다.</param>
      <returns>지정된 속성을 추가하는 데 사용된 새로 만든 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">매개 변수 중 하나 또는 둘 다 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)">
      <summary>지정된 편집기 기본 형식에 대한 편집기 테이블을 추가합니다.</summary>
      <param name="editorBaseType">편집기 테이블을 추가할 편집기 기본 형식입니다. 이 형식에 대한 테이블이 이미 있으면 이 메서드는 아무 작업도 수행하지 않습니다.</param>
      <param name="table">추가할 <see cref="T:System.Collections.Hashtable" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>단일 구성 요소 인스턴스에 대한 형식 설명 공급자를 추가합니다.</summary>
      <param name="provider">추가할 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</param>
      <param name="instance">대상 구성 요소의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>구성 요소 클래스에 대한 형식 설명 공급자를 추가합니다.</summary>
      <param name="provider">추가할 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</param>
      <param name="type">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>단일 구성 요소 인스턴스에 대한 형식 설명 공급자를 추가합니다.</summary>
      <param name="provider">추가할 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</param>
      <param name="instance">대상 구성 요소의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>구성 요소 클래스에 대한 형식 설명 공급자를 추가합니다.</summary>
      <param name="provider">추가할 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</param>
      <param name="type">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler">
      <summary>대상 구성 요소에 대한 COM(구성 요소 개체 모델) 형식 정보에 대한 공급자를 가져오거나 설정합니다.</summary>
      <returns>COM 형식 정보 공급자를 나타내는 <see cref="T:System.ComponentModel.IComNativeDescriptorHandler" /> 인스턴스입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComObjectType">
      <summary>대상 구성 요소에서 나타내는 COM(구성 요소 개체 모델) 개체의 형식을 가져옵니다.</summary>
      <returns>이 구성 요소가 나타내는 COM 개체의 <see cref="T:System.Type" />, 또는 비 COM 개체의 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)">
      <summary>두 개체 사이에 기본-보조 연결을 만듭니다.</summary>
      <param name="primary">기본 <see cref="T:System.Object" />입니다.</param>
      <param name="secondary">보조 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="primary" />가 <paramref name="secondary" />와 같은 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)">
      <summary>지정된 구성 요소와 연결된 디자이너의 인스턴스 및 지정된 형식의 디자이너의 인스턴스를 만듭니다.</summary>
      <param name="component">디자이너와 연결할 구성 요소를 지정하는 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
      <param name="designerBaseType">만들 디자이너의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>구성 요소에 대한 디자이너의 인스턴스인 <see cref="T:System.ComponentModel.Design.IDesigner" />이거나, 디자이너를 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])">
      <summary>기존 <see cref="T:System.ComponentModel.EventDescriptor" />를 전달할 때 기존 이벤트 설명자와 동일한 새 이벤트 설명자를 만듭니다.</summary>
      <param name="componentType">새 이벤트를 만들 구성 요소의 형식입니다.</param>
      <param name="oldEventDescriptor">기존 이벤트 정보입니다.</param>
      <param name="attributes">새 특성입니다.</param>
      <returns>지정된 메타데이터 특성과 기존 메타데이터 특성이 병합된 새 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>형식에 대해 지정된 이벤트에서 동적으로 설명자 정보를 생성하여 기존 이벤트 설명자와 동일한 새 이벤트 설명자를 만듭니다.</summary>
      <param name="componentType">해당 이벤트가 바인딩되는 구성 요소의 형식입니다.</param>
      <param name="name">이벤트의 이름입니다.</param>
      <param name="type">이벤트를 처리하는 대리자 형식입니다.</param>
      <param name="attributes">이 이벤트에 대한 특성입니다.</param>
      <returns>형식에 바인딩되는 <see cref="T:System.ComponentModel.EventDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary>다른 데이터 형식 대신 사용할 수 있는 개체를 만듭니다.</summary>
      <param name="provider">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 서비스를 제공하는 서비스 공급자입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
      <param name="objectType">만들 개체의 <see cref="T:System.Type" />입니다.</param>
      <param name="argTypes">개체의 생성자에 전달할 매개 변수 형식의 선택적 배열입니다. 이 매개 변수는 <see langword="null" /> 또는 0길이 배열일 수 있습니다.</param>
      <param name="args">개체의 생성자에 전달할 매개 변수 값의 선택적 배열입니다. <see langword="null" />이 아니면 요소 개수가 <paramref name="argTypes" />와 동일해야 합니다.</param>
      <returns>연결된 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />가 있으면 대체 데이터 형식의 인스턴스이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argTypes" />가 <see langword="null" />이 아닐 때 <paramref name="objectType" />이 <see langword="null" />이거나 <paramref name="args" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argTypes" /> 및 <paramref name="args" />의 요소 수가 다릅니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary>지정된 기존 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 및 특성 배열을 사용하여 기존 속성 설명자에서 새 속성 설명자를 만듭니다.</summary>
      <param name="componentType">속성이 멤버인 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <param name="oldPropertyDescriptor">기존 속성 설명자입니다.</param>
      <param name="attributes">이 속성의 새 특성입니다.</param>
      <returns>지정된 메타데이터 특성이 기존 메타데이터 특성과 병합된 새 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>지정된 속성 이름, 형식 및 특성 배열을 사용하여 속성 설명자를 만들고 형식에 동적으로 바인딩합니다.</summary>
      <param name="componentType">속성이 멤버인 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <param name="name">속성의 이름입니다.</param>
      <param name="type">속성의 <see cref="T:System.Type" />입니다.</param>
      <param name="attributes">이 속성의 새 특성입니다.</param>
      <returns>지정 형식에 바인딩되고 지정된 메타데이터 특성이 기존 메타데이터 특성과 병합된 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)">
      <summary>지정된 기본 개체와 연결된 형식의 인스턴스를 반환합니다.</summary>
      <param name="type">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <param name="primary">연결의 기본 개체입니다.</param>
      <returns>연결이 있으면 기본 개체와 연결된 보조 형식의 인스턴스이고, 지정된 연결이 없으면 <paramref name="primary" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)">
      <summary>지정된 구성 요소에 대한 특성 컬렉션을 반환합니다.</summary>
      <param name="component">특성을 가져올 구성 요소입니다.</param>
      <returns>구성 요소의 특성을 포함하는 <see cref="T:System.ComponentModel.AttributeCollection" />입니다. <paramref name="component" />가 <see langword="null" />이면 이 메서드는 빈 컬렉션을 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)">
      <summary>지정된 구성 요소에 대한 특성 컬렉션과 사용자 지정 형식 설명자가 만들어졌는지 여부를 나타내는 부울 값을 반환합니다.</summary>
      <param name="component">특성을 가져올 구성 요소입니다.</param>
      <param name="noCustomTypeDesc">
        <paramref name="component" />가 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 형식인 경우 사용자 지정 형식 설명자에서 기본 특성 집합을 사용하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>해당 구성 요소의 특성이 들어 있는 <see cref="T:System.ComponentModel.AttributeCollection" />입니다. 해당 구성 요소가 <see langword="null" />이면 이 메서드는 빈 컬렉션을 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)">
      <summary>지정된 구성 요소 형식에 대한 특성 컬렉션을 반환합니다.</summary>
      <param name="componentType">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <returns>해당 구성 요소 형식에 대한 특성이 들어 있는 <see cref="T:System.ComponentModel.AttributeCollection" />입니다. 해당 구성 요소가 <see langword="null" />이면 이 메서드는 빈 컬렉션을 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object)">
      <summary>기본 형식 설명자를 사용하여 지정된 구성 요소에 대한 클래스 이름을 반환합니다.</summary>
      <param name="component">클래스 이름을 가져올 <see cref="T:System.Object" />입니다.</param>
      <returns>지정된 구성 요소에 대한 클래스 이름을 포함하는 <see cref="T:System.String" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)">
      <summary>사용자 지정 형식 설명자를 사용하여 지정된 구성 요소에 대한 클래스 이름을 반환합니다.</summary>
      <param name="component">클래스 이름을 가져올 <see cref="T:System.Object" />입니다.</param>
      <param name="noCustomTypeDesc">사용자 지정 형식 설명 정보를 고려하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>지정된 구성 요소에 대한 클래스 이름을 포함하는 <see cref="T:System.String" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" />가 크로스 프로세스 원격 개체인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Type)">
      <summary>지정된 형식에 대한 클래스 이름을 반환합니다.</summary>
      <param name="componentType">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <returns>지정된 구성 요소 형식에 대한 클래스 이름을 포함하는 <see cref="T:System.String" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentType" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)">
      <summary>기본 형식 설명자를 사용하여 지정된 구성 요소의 이름을 반환합니다.</summary>
      <param name="component">클래스 이름을 가져올 <see cref="T:System.Object" />입니다.</param>
      <returns>지정된 구성 요소의 이름을 포함하는 <see cref="T:System.String" />이거나 구성 요소 이름이 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" />가 크로스 프로세스 원격 개체인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)">
      <summary>사용자 지정 형식 설명자를 사용하여 지정된 구성 요소의 이름을 반환합니다.</summary>
      <param name="component">클래스 이름을 가져올 <see cref="T:System.Object" />입니다.</param>
      <param name="noCustomTypeDesc">사용자 지정 형식 설명 정보를 고려하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>지정된 구성 요소에 대한 클래스 이름이거나, 구성 요소 이름이 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" />가 크로스 프로세스 원격 개체인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)">
      <summary>지정된 구성 요소의 형식에 대한 형식 변환기를 반환합니다.</summary>
      <param name="component">관련된 변환기를 가져올 구성 요소입니다.</param>
      <returns>지정된 구성 요소에 대한 <see cref="T:System.ComponentModel.TypeConverter" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" />가 크로스 프로세스 원격 개체인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)">
      <summary>사용자 지정 형식 설명자를 사용하여 지정된 구성 요소의 형식에 대한 형식 변환기를 반환합니다.</summary>
      <param name="component">관련된 변환기를 가져올 구성 요소입니다.</param>
      <param name="noCustomTypeDesc">사용자 지정 형식 설명 정보를 고려하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>지정된 구성 요소에 대한 <see cref="T:System.ComponentModel.TypeConverter" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" />가 크로스 프로세스 원격 개체인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)">
      <summary>지정된 형식에 대한 형식 변환기를 반환합니다.</summary>
      <param name="type">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <returns>지정된 형식에 대한 <see cref="T:System.ComponentModel.TypeConverter" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)">
      <summary>지정된 구성 요소에 대한 기본 이벤트를 반환합니다.</summary>
      <param name="component">관련된 이벤트를 가져올 구성 요소입니다.</param>
      <returns>기본 이벤트가 포함된 <see cref="T:System.ComponentModel.EventDescriptor" />이거나, 이벤트가 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" />가 크로스 프로세스 원격 개체인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)">
      <summary>사용자 지정 형식 설명자를 사용하여 구성 요소에 대한 기본 이벤트를 반환합니다.</summary>
      <param name="component">관련된 이벤트를 가져올 구성 요소입니다.</param>
      <param name="noCustomTypeDesc">사용자 지정 형식 설명 정보를 고려하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>기본 이벤트가 포함된 <see cref="T:System.ComponentModel.EventDescriptor" />이거나, 이벤트가 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" />가 크로스 프로세스 원격 개체인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)">
      <summary>지정된 구성 요소 형식에 대한 기본 이벤트를 반환합니다.</summary>
      <param name="componentType">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <returns>기본 이벤트가 포함된 <see cref="T:System.ComponentModel.EventDescriptor" />이거나, 이벤트가 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentType" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)">
      <summary>지정된 구성 요소에 대한 기본 속성을 반환합니다.</summary>
      <param name="component">관련된 기본 속성을 가져올 구성 요소입니다.</param>
      <returns>기본 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptor" />이거나, 속성이 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" />가 크로스 프로세스 원격 개체인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)">
      <summary>사용자 지정 형식 설명자를 사용하여 지정된 구성 요소에 대한 기본 속성을 반환합니다.</summary>
      <param name="component">관련된 기본 속성을 가져올 구성 요소입니다.</param>
      <param name="noCustomTypeDesc">사용자 지정 형식 설명 정보를 고려하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>기본 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptor" />이거나, 속성이 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" />가 크로스 프로세스 원격 개체인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)">
      <summary>지정된 구성 요소 형식에 대한 기본 속성을 반환합니다.</summary>
      <param name="componentType">관련된 속성을 가져올 클래스를 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>기본 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptor" />이거나, 속성이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)">
      <summary>지정된 구성 요소에 대해 지정된 기본 형식의 편집기를 가져옵니다.</summary>
      <param name="component">관련된 편집기를 가져올 구성 요소입니다.</param>
      <param name="editorBaseType">찾을 편집기의 기본 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>지정한 편집기 형식으로 캐스팅될 수 있는 편집기의 인스턴스이거나, 요청된 형식의 편집기가 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 또는 <paramref name="editorBaseType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" />가 크로스 프로세스 원격 개체인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)">
      <summary>지정된 구성 요소에 대해 사용자 지정 형식 설명자를 사용하여 지정된 기본 형식의 편집기를 반환합니다.</summary>
      <param name="component">관련된 편집기를 가져올 구성 요소입니다.</param>
      <param name="editorBaseType">찾을 편집기의 기본 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="noCustomTypeDesc">사용자 지정 형식 설명 정보가 고려되어야 하는지 여부를 나타내는 플래그입니다.</param>
      <returns>지정한 편집기 형식으로 캐스팅될 수 있는 편집기의 인스턴스이거나, 요청된 형식의 편집기가 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 또는 <paramref name="editorBaseType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" />가 크로스 프로세스 원격 개체인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)">
      <summary>지정된 형식에 대해 지정된 기본 형식의 편집기를 반환합니다.</summary>
      <param name="type">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <param name="editorBaseType">찾으려는 편집기의 기본 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>지정된 기본 형식으로 캐스팅될 수 있는 편집기 개체의 인스턴스이거나, 요청된 형식의 편집기가 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 또는 <paramref name="editorBaseType" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object)">
      <summary>지정된 구성 요소에 대한 이벤트 컬렉션을 반환합니다.</summary>
      <param name="component">관련된 이벤트를 가져올 구성 요소입니다.</param>
      <returns>이 구성 요소에 대한 이벤트가 들어 있는 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" />가 크로스 프로세스 원격 개체인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])">
      <summary>지정된 특성 배열을 필터로 사용하여 지정된 구성 요소에 대한 이벤트 컬렉션을 반환합니다.</summary>
      <param name="component">관련된 이벤트를 가져올 구성 요소입니다.</param>
      <param name="attributes">필터로 사용할 수 있는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns>이 구성 요소의 지정된 특성과 일치하는 이벤트가 들어 있는 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" />가 크로스 프로세스 원격 개체인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)">
      <summary>지정된 특성 배열을 필터로 사용하고 사용자 지정 형식 설명자를 사용하여 지정된 구성 요소에 대한 이벤트 컬렉션을 반환합니다.</summary>
      <param name="component">관련된 이벤트를 가져올 구성 요소입니다.</param>
      <param name="attributes">필터로 사용할 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <param name="noCustomTypeDesc">사용자 지정 형식 설명 정보를 고려하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>이 구성 요소의 지정된 특성과 일치하는 이벤트가 들어 있는 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" />가 크로스 프로세스 원격 개체인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)">
      <summary>사용자 지정 형식 설명자를 사용하여 지정된 구성 요소에 대한 이벤트 컬렉션을 반환합니다.</summary>
      <param name="component">관련된 이벤트를 가져올 구성 요소입니다.</param>
      <param name="noCustomTypeDesc">사용자 지정 형식 설명 정보를 고려하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>이 구성 요소에 대한 이벤트가 들어 있는 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" />가 크로스 프로세스 원격 개체인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type)">
      <summary>지정된 구성 요소 형식에 대한 이벤트 컬렉션을 반환합니다.</summary>
      <param name="componentType">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <returns>이 구성 요소에 대한 이벤트가 들어 있는 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])">
      <summary>지정된 특성 배열을 필터로 사용하여 지정된 구성 요소 형식에 대한 이벤트 컬렉션을 반환합니다.</summary>
      <param name="componentType">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <param name="attributes">필터로 사용할 수 있는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns>이 구성 요소의 지정된 특성과 일치하는 이벤트가 들어 있는 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)">
      <summary>구성 요소의 정규화된 이름을 반환합니다.</summary>
      <param name="component">이름을 찾을 <see cref="T:System.ComponentModel.Component" />입니다.</param>
      <returns>지정된 구성 요소의 정규화된 이름이거나, 구성 요소에 이름이 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)">
      <summary>지정된 구성 요소에 대한 속성 컬렉션을 반환합니다.</summary>
      <param name="component">속성을 가져올 구성 요소입니다.</param>
      <returns>지정된 구성 요소의 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" />가 크로스 프로세스 원격 개체인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])">
      <summary>지정된 특성 배열을 필터로 사용하여 지정된 구성 요소에 대한 속성 컬렉션을 반환합니다.</summary>
      <param name="component">속성을 가져올 구성 요소입니다.</param>
      <param name="attributes">필터로 사용할 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns>지정된 구성 요소의 지정된 특성과 일치하는 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" />가 크로스 프로세스 원격 개체인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)">
      <summary>지정된 특성 배열을 필터로 사용하고 사용자 지정 형식 설명자를 사용하여 지정된 구성 요소에 대한 속성 컬렉션을 반환합니다.</summary>
      <param name="component">속성을 가져올 구성 요소입니다.</param>
      <param name="attributes">필터로 사용할 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <param name="noCustomTypeDesc">사용자 지정 형식 설명 정보를 고려하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>지정된 구성 요소의 지정된 특성과 일치하는 이벤트가 포함된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" />가 크로스 프로세스 원격 개체인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)">
      <summary>기본 형식 설명자를 사용하여 지정된 구성 요소에 대한 속성 컬렉션을 반환합니다.</summary>
      <param name="component">속성을 가져올 구성 요소입니다.</param>
      <param name="noCustomTypeDesc">사용자 지정 형식 설명 정보를 고려하지 않으려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>지정된 구성 요소의 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" />가 크로스 프로세스 원격 개체인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type)">
      <summary>지정된 구성 요소 형식에 대한 속성 컬렉션을 반환합니다.</summary>
      <param name="componentType">관련된 속성을 가져올 구성 요소를 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>지정된 구성 요소 형식에 대한 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])">
      <summary>지정된 특성 배열을 필터로 사용하여 지정된 구성 요소 형식에 대한 속성 컬렉션을 반환합니다.</summary>
      <param name="componentType">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <param name="attributes">필터로 사용할 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns>이 구성 요소 형식에 대해 지정된 특성과 일치하는 속성이 포함된 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Object)">
      <summary>지정된 구성 요소에 대한 형식 설명 공급자를 반환합니다.</summary>
      <param name="instance">대상 구성 요소의 인스턴스입니다.</param>
      <returns>지정한 구성 요소와 연결된 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Type)">
      <summary>지정된 형식에 대한 형식 설명 공급자를 반환합니다.</summary>
      <param name="type">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <returns>지정한 형식과 연결된 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)">
      <summary>개체가 제공된 경우 리플렉션을 수행하는 데 사용할 수 있는 <see cref="T:System.Type" />을 반환합니다.</summary>
      <param name="instance">대상 구성 요소의 인스턴스입니다.</param>
      <returns>지정된 개체에 대한 <see cref="T:System.Type" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)">
      <summary>클래스 형식이 제공된 경우 리플렉션을 수행하는 데 사용할 수 있는 <see cref="T:System.Type" />을 반환합니다.</summary>
      <param name="type">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <returns>지정된 클래스의 <see cref="T:System.Type" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.InterfaceType">
      <summary>모든 인터페이스 형식에 대한 형식 설명 공급자를 나타내는 형식을 가져옵니다.</summary>
      <returns>모든 인터페이스 형식에 대한 사용자 지정 형식 설명 공급자를 나타내는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)">
      <summary>지정된 구성 요소에 대한 속성 및 이벤트를 캐시에서 지웁니다.</summary>
      <param name="component">속성 또는 이벤트가 변경된 구성 요소입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)">
      <summary>지정된 어셈블리에 대한 속성 및 이벤트를 캐시에서 지웁니다.</summary>
      <param name="assembly">새로 고칠 어셈블리를 나타내는 <see cref="T:System.Reflection.Assembly" />입니다. 이 어셈블리의 각 <see cref="T:System.Type" />이 새로 고쳐집니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)">
      <summary>지정된 모듈에 대한 속성 및 이벤트를 캐시에서 지웁니다.</summary>
      <param name="module">새로 고칠 모듈을 나타내는 <see cref="T:System.Reflection.Module" />입니다. 이 모듈의 각 <see cref="T:System.Type" />이 새로 고쳐집니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Type)">
      <summary>지정된 구성 요소 형식에 대한 속성 및 이벤트를 캐시에서 지웁니다.</summary>
      <param name="type">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="E:System.ComponentModel.TypeDescriptor.Refreshed">
      <summary>구성 요소의 캐시가 지워질 때 발생합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)">
      <summary>두 개체 간의 연결을 제거합니다.</summary>
      <param name="primary">기본 <see cref="T:System.Object" />입니다.</param>
      <param name="secondary">보조 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)">
      <summary>기본 개체의 모든 연결을 제거합니다.</summary>
      <param name="primary">연결의 기본 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="primary" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>지정된 개체와 연결된 이전에 추가한 형식 설명 공급자를 제거합니다.</summary>
      <param name="provider">제거할 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</param>
      <param name="instance">대상 구성 요소의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>지정된 형식과 연결된 이전에 추가한 형식 설명 공급자를 제거합니다.</summary>
      <param name="provider">제거할 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</param>
      <param name="type">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>지정된 개체와 연결된 이전에 추가한 형식 설명 공급자를 제거합니다.</summary>
      <param name="provider">제거할 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</param>
      <param name="instance">대상 구성 요소의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>지정된 형식과 연결된 이전에 추가한 형식 설명 공급자를 제거합니다.</summary>
      <param name="provider">제거할 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />입니다.</param>
      <param name="type">대상 구성 요소의 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수 중 하나 또는 둘 다가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)">
      <summary>설명자의 이름을 사용하여 설명자를 정렬합니다.</summary>
      <param name="infos">정렬할 설명자를 포함하는 <see cref="T:System.Collections.IList" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="infos" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.ComponentModel.TypeListConverter">
      <summary>사용 가능한 형식으로 목록 상자를 채우는 데 사용할 수 있는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.#ctor(System.Type[])">
      <summary>사용 가능한 형식의 형식 배열을 사용하여 <see cref="T:System.ComponentModel.TypeListConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="types">사용 가능한 형식으로 사용할 <see cref="T:System.Type" /> 형식의 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>지정된 컨텍스트를 사용하여 이 변환기가 소스 개체의 지정된 <see cref="T:System.Type" />을 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType">소스 개체의 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 개체를 변환기의 네이티브 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">글꼴을 나타내는 데 사용할 문화권을 지정하는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>주어진 값 개체를 지정한 대상 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">선택적 <see cref="T:System.Globalization.CultureInfo" />입니다. 제공되지 않으면 현재 문화권으로 가정합니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType">값을 변환할 대상 <see cref="T:System.Type" />입니다.</param>
      <returns>변환된 <paramref name="value" />를 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>이 유효성 검사기를 사용하도록 디자인된 데이터 형식의 표준 값 컬렉션을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>유효한 표준 값 집합을 포함하는 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />이거나 데이터 형식이 표준 값 집합을 지원하지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 메서드에서 반환된 표준 값 목록이 단독 목록인지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />에서 반환된 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />이 가능한 값을 포함하는 단독 목록이므로 <see langword="true" />입니다. 이 메서드는 <see langword="false" />를 반환하지 않습니다.</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>지정된 컨텍스트를 사용하여, 이 개체가 목록에서 선택할 수 있는 표준 값 집합을 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>개체가 지원하는 공통되는 값 집합을 찾기 위해 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />를 호출해야 하므로 <see langword="true" />입니다. 이 메서드는 <see langword="false" />를 반환하지 않습니다.</returns>
    </member>
    <member name="T:System.ComponentModel.UInt16Converter">
      <summary>16비트 부호 없는 정수 개체와 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt16Converter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.UInt16Converter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.UInt32Converter">
      <summary>32비트 부호 없는 정수 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt32Converter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.UInt32Converter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.UInt64Converter">
      <summary>64비트 부호 없는 정수 개체와 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.UInt64Converter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.UInt64Converter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.VersionConverter">
      <summary>
        <see cref="T:System.Version" /> 개체와 여러 가지 다른 표현 사이를 변환하는 형식 변환기를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.VersionConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>이 변환기가 지정된 소스 형식의 개체를 <see cref="T:System.Version" />으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">컨텍스트 정보를 제공하는 개체입니다.</param>
      <param name="sourceType">변환할 개체의 형식입니다.</param>
      <returns>이 변환기가 sourceType을 <see cref="T:System.Version" />으로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">컨텍스트 정보를 제공하는 개체입니다.</param>
      <param name="destinationType">변환을 위한 대상 형식입니다.</param>
      <returns>변환기가 개체를 지정된 대상 형식으로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정한 개체를 <see cref="T:System.Version" />으로 변환합니다.</summary>
      <param name="context">컨텍스트 정보를 제공하는 개체입니다.</param>
      <param name="culture">변환에 사용할 문화권입니다.</param>
      <param name="value">
        <see cref="T:System.Version" />로 변환할 값입니다.</param>
      <returns>
        <paramref name="value" />가 <see cref="T:System.Version" /> 값으로 변환되었습니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" />는 유효한 <see cref="T:System.Version" /> 문자열이 아닙니다.</exception>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>지정된 값 컨텍스트 및 인수를 사용하여 지정된 값을 지정된 대상 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">변환에 대한 서식 지정 정보를 제공하는 문화권입니다.</param>
      <param name="value">변환할 값입니다.</param>
      <param name="destinationType">value 매개 변수를 변환할 형식입니다.</param>
      <returns>변환된 값을 나타내는 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>지정된 값 개체를 이 형식 및 지정된 컨텍스트에 사용할 수 있는지를 나타내는 값을 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value">유효성을 테스트할 개체입니다.</param>
      <returns>지정된 값을 이 개체에 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.WarningException">
      <summary>오류가 아닌 경고로 처리할 예외를 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.WarningException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>지정된 serialization 데이터와 컨텍스트를 사용하여 <see cref="T:System.ComponentModel.WarningException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">deserialization에 사용할 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</param>
      <param name="context">deserialization에 사용할 대상입니다.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String)">
      <summary>도움말 파일 없이 지정된 메시지를 사용하여 <see cref="T:System.ComponentModel.WarningException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">최종 사용자에게 표시할 메시지입니다.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.Exception)">
      <summary>지정된 예외 및 자세한 설명을 사용하여 <see cref="T:System.ComponentModel.WarningException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류에 대한 자세한 설명입니다.</param>
      <param name="innerException">이 예외의 원인인 내부 예외에 대한 참조입니다.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String)">
      <summary>지정된 메시지를 사용하고 지정된 도움말 파일에 액세스하여 <see cref="T:System.ComponentModel.WarningException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">최종 사용자에게 표시할 메시지입니다.</param>
      <param name="helpUrl">사용자가 도움말을 요청하는 경우 표시할 도움말 파일입니다.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String,System.String)">
      <summary>지정된 메시지를 사용하고 지정된 도움말 파일 및 항목에 액세스하여 <see cref="T:System.ComponentModel.WarningException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">최종 사용자에게 표시할 메시지입니다.</param>
      <param name="helpUrl">사용자가 도움말을 요청하는 경우 표시할 도움말 파일입니다.</param>
      <param name="helpTopic">사용자가 도움말을 요청하는 경우 표시할 도움말 항목입니다.</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>매개 변수 이름과 추가 예외 정보를 사용하여 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 설정합니다.</summary>
      <param name="info">
        <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />가 serialize하거나 deserialize한 개체를 serialize하거나 deserialize하는 데 사용되는 데이터를 저장합니다.</param>
      <param name="context">예외를 생성한 스트림의 소스 및 대상을 설명하고, serialization이 해당 컨텍스트 및 호출자가 정의한 추가 컨텍스트를 보유하도록 하는 방법을 설명합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpTopic">
      <summary>경고와 관련된 도움말 항목을 가져옵니다.</summary>
      <returns>경고와 관련된 도움말 항목입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpUrl">
      <summary>경고와 관련된 도움말 파일을 가져옵니다.</summary>
      <returns>경고와 관련된 도움말 파일입니다.</returns>
    </member>
    <member name="T:System.Drawing.ColorConverter">
      <summary>한 데이터 형식에서 다른 데이터 형식으로 색상을 변환합니다. <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 이 클래스에 액세스합니다.</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.#ctor">
      <summary>
        <see cref="T:System.Drawing.ColorConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>이 변환기가 지정된 소스 형식의 개체를 변환기의 네이티브 형식으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다. 이 개체를 사용하여 이변환기가 호출될 환경에 대한 추가 정보를 가져올 수 있습니다.</param>
      <param name="sourceType">변환하려는 형식입니다.</param>
      <returns>이 개체가 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType">변환할 대상 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기가 작업을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 개체를 변환기의 네이티브 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.TypeDescriptor" />입니다. 이 개체를 사용하여 이변환기가 호출될 환경에 대한 추가 정보를 가져올 수 있습니다.</param>
      <param name="culture">색을 나타내는 culture를 지정하는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value">변환할 개체입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.ArgumentException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>지정된 개체를 다른 형식으로 변환합니다.</summary>
      <param name="context">포맷터 컨텍스트입니다. 이 개체를 사용하여 이 변환기가 호출될 환경에 대한 추가 정보를 추출할 수 있습니다. 이 값이 <see langword="null" />인지 여부를 항상 확인합니다. 또한 컨텍스트 개체의 속성에서 <see langword="null" />을 반환할 수도 있습니다.</param>
      <param name="culture">색을 나타내는 culture를 지정하는 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value">변환할 개체입니다.</param>
      <param name="destinationType">개체를 변환할 대상 유형입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationtype" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>이 유효성 검사기를 사용하도록 디자인된 데이터 형식의 표준 값이 포함된 컬렉션을 검색합니다. 데이터 형식이 표준 값 집합을 지원하지 않으면 <see langword="null" />이 반환됩니다.</summary>
      <param name="context">포맷터 컨텍스트입니다. 이 개체를 사용하여 이 변환기가 호출될 환경에 대한 추가 정보를 추출할 수 있습니다. 이 값이 <see langword="null" />인지 여부를 항상 확인합니다. 또한 컨텍스트 개체의 속성에서 <see langword="null" />을 반환할 수도 있습니다.</param>
      <returns>유효한 값의 표준 집합이나 <see langword="null" />을 포함하는 컬렉션입니다. 기본 구현에서는 항상 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>이 개체가 목록에서 선택할 수 있는 표준 값 집합을 지원하는지 여부를 확인합니다.</summary>
      <param name="context">추가 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.TypeDescriptor" />입니다.</param>
      <returns>
        <see cref="Overload:System.Drawing.ColorConverter.GetStandardValues" />를 호출하여 개체가 지원하는 일반 값 집합을 찾아야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Drawing.PointConverter">
      <summary>하나의 데이터 형식에서 다른 데이터 형식으로 <see cref="T:System.Drawing.Point" /> 개체를 변환합니다.</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.#ctor">
      <summary>
        <see cref="T:System.Drawing.PointConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>이 변환기가 지정된 소스 형식의 개체를 변환기의 네이티브 형식으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context">포맷터 컨텍스트입니다. 이 개체를 사용하여 이 변환기가 호출되는 환경에 대한 추가 정보를 가져올 수 있습니다. 이 매개 변수는 <see langword="null" />이 될 수 있으므로 항상 확인해야 합니다. 또한 컨텍스트 개체의 속성은 <see langword="null" />을 반환할 수도 있습니다.</param>
      <param name="sourceType">변환할 원본 형식입니다.</param>
      <returns>이 개체가 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 개체입니다.</param>
      <param name="destinationType">변환할 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</param>
      <returns>이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 개체를 <see cref="T:System.Drawing.Point" /> 개체로 변환합니다.</summary>
      <param name="context">포맷터 컨텍스트입니다. 이 개체를 사용하여 이 변환기가 호출되는 환경에 대한 추가 정보를 가져올 수 있습니다. 이 매개 변수는 <see langword="null" />이 될 수 있으므로 항상 확인해야 합니다. 또한 컨텍스트 개체의 속성은 <see langword="null" />을 반환할 수도 있습니다.</param>
      <param name="culture">특정 culture와 관련된 언어, 달력, culture 규칙 등의 culutre 관련 정보가 들어 있는 개체로, RFC 1766 표준을 따릅니다.</param>
      <param name="value">변환할 개체입니다.</param>
      <returns>변환된 개체입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환을 완료할 수 없습니다.</exception>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>지정된 개체를 지정된 형식으로 변환합니다.</summary>
      <param name="context">포맷터 컨텍스트입니다. 이 개체를 사용하여 이 변환기가 호출되는 환경에 대한 추가 정보를 가져올 수 있습니다. 이 매개 변수는 <see langword="null" />이 될 수 있으므로 항상 확인해야 합니다. 또한 컨텍스트 개체의 속성은 <see langword="null" />을 반환할 수도 있습니다.</param>
      <param name="culture">특정 culture와 관련된 언어, 달력, culture 규칙 등의 culutre 관련 정보가 들어 있는 개체로, RFC 1766 표준을 따릅니다.</param>
      <param name="value">변환할 개체입니다.</param>
      <param name="destinationType">개체를 변환할 대상 유형입니다.</param>
      <returns>변환된 개체입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환을 완료할 수 없습니다.</exception>
    </member>
    <member name="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>개체의 속성 값 집합이 주어진 경우 이러한 형식의 인스턴스를 만듭니다.</summary>
      <param name="context">추가 컨텍스트를 제공하는 형식 설명자입니다.</param>
      <param name="propertyValues">새 속성 값의 사전입니다. 이 사전은 <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />에서 반환된 각 속성에 대해 이름/값 쌍을 하나씩 포함하는 이름/값 쌍 집합을 포함합니다.</param>
      <returns>새로 만들어진 개체를 반환하거나, 개체를 만들 수 없는 경우 <see langword="null" />을 반환합니다. 기본 구현은 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>이 개체의 값을 변경할 때 <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />를 호출하여 새 값을 만들어야 할지 여부를 확인합니다.</summary>
      <param name="context">추가 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.TypeDescriptor" />입니다.</param>
      <returns>이 개체의 하나 이상의 속성이 변경될 때 <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 메서드가 호출되어야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>이 형식의 속성 집합을 검색합니다. 기본적으로 형식은 속성을 반환하지 않습니다.</summary>
      <param name="context">추가 컨텍스트를 제공하는 형식 설명자입니다.</param>
      <param name="value">속성을 가져올 개체의 값입니다.</param>
      <param name="attributes">속성을 설명하는 <see cref="T:System.Attribute" /> 개체의 배열입니다.</param>
      <returns>이 데이터 형식에 대해 노출된 속성의 집합입니다. 노출해야 할 속성이 없으면 이 메서드는<see langword="null" />을 반환할 수 있습니다. 기본 구현에서는 항상 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>이 개체가 속성을 지원하는지 여부를 확인합니다. 기본적으로 이 값은 <see langword="false" />입니다.</summary>
      <param name="context">추가 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.TypeDescriptor" />입니다.</param>
      <returns>이 개체의 속성을 찾기 위해 <see langword="true" />를 호출하면 <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Drawing.RectangleConverter">
      <summary>한 데이터 형식에서 다른 데이터 형식으로 사각형을 변환합니다. <see cref="T:System.ComponentModel.TypeDescriptor" />를 통해 이 클래스에 액세스합니다.</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.#ctor">
      <summary>
        <see cref="T:System.Drawing.RectangleConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>이 변환기가 지정된 소스 형식의 개체를 변환기의 네이티브 형식으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context">포맷터 컨텍스트입니다. 이 개체를 사용하여 이 변환기가 호출되는 환경에 대한 추가 정보를 가져올 수 있습니다. 이 매개 변수는 <see langword="null" />이 될 수 있으므로 항상 확인해야 합니다. 또한 컨텍스트 개체의 속성은 <see langword="null" />을 반환할 수도 있습니다.</param>
      <param name="sourceType">변환할 원본 형식입니다.</param>
      <returns>이 개체가 변환을 수행할 수 있으면 이 메서드는 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 개체입니다. 이 매개 변수는 <see langword="null" />이 될 수 있으므로 항상 확인해야 합니다. 또한 컨텍스트 개체의 속성은 <see langword="null" />을 반환할 수도 있습니다.</param>
      <param name="destinationType">변환할 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</param>
      <returns>이 변환기가 변환을 수행할 수 있으면 이 메서드는 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 개체를 <see cref="T:System.Drawing.Rectangle" /> 개체로 변환합니다.</summary>
      <param name="context">이 변환기가 호출될 환경에 대한 더 많은 정보를 추출하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다. 이 매개 변수는 <see langword="null" />이 될 수 있으므로 항상 확인해야 합니다. 또한 컨텍스트 개체의 속성은 <see langword="null" />을 반환할 수도 있습니다.</param>
      <param name="culture">특정 culture와 관련된 언어, 달력, culture 규칙 등의 culutre 관련 정보가 들어 있는 <see cref="T:System.Globalization.CultureInfo" />로, RFC 1766 표준을 따릅니다.</param>
      <param name="value">변환할 개체입니다.</param>
      <returns>변환된 개체입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환을 완료할 수 없습니다.</exception>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>지정된 개체를 지정된 형식으로 변환합니다.</summary>
      <param name="context">이 변환기가 호출될 환경에 대한 더 많은 정보를 추출하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다. 이 매개 변수는 <see langword="null" />이 될 수 있으므로 항상 확인해야 합니다. 또한 컨텍스트 개체의 속성은 <see langword="null" />을 반환할 수도 있습니다.</param>
      <param name="culture">특정 culture와 관련된 언어, 달력, culture 규칙 등의 culutre 관련 정보가 들어 있는 <see cref="T:System.Globalization.CultureInfo" />로, RFC 1766 표준을 따릅니다.</param>
      <param name="value">변환할 개체입니다.</param>
      <param name="destinationType">개체를 변환할 대상 유형입니다.</param>
      <returns>변환된 개체입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환을 완료할 수 없습니다.</exception>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>개체의 속성 값 집합이 주어진 경우 이러한 형식의 인스턴스를 만듭니다. 이 작업은 변경할 수 없으나 변경할 수 있는 속성을 계속 제공하려고 하는 개체에 유용합니다.</summary>
      <param name="context">추가 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="propertyValues">새 속성 값의 사전입니다. 이 사전은 <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 메서드 호출에서 반환된 각 속성에 대해 이름/값 쌍을 하나씩 포함하는 이름/값 쌍 집합을 포함합니다.</param>
      <returns>새로 만들어진 개체를 반환하거나, 개체를 만들 수 없는 경우 <see langword="null" />을 반환합니다. 기본 구현은 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>이 개체의 값을 변경할 때 <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />를 호출하여 새 값을 만들어야 할지 여부를 확인합니다.</summary>
      <param name="context">추가 컨텍스트를 제공하는 형식 설명자입니다.</param>
      <returns>이 개체의 속성을 하나 이상 변경할 때 <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />를 호출해야 하면 이 메서드는 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>이 형식의 속성 집합을 검색합니다. 기본적으로 형식은 속성을 반환하지 않습니다.</summary>
      <param name="context">추가 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value">속성을 가져올 개체의 값입니다.</param>
      <param name="attributes">속성을 설명하는 <see cref="T:System.Attribute" /> 개체의 배열입니다.</param>
      <returns>이 데이터 형식에 대해 노출되어야 하는 속성의 집합을 반환합니다. 노출해야 할 속성이 없으면 <see langword="null" />이 반환될 수 있습니다. 기본 구현에서는 항상 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>이 개체가 속성을 지원하는지 여부를 확인합니다. 기본적으로 이 값은 <see langword="false" />입니다.</summary>
      <param name="context">추가 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>이 개체의 속성을 찾기 위해 <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />를 호출해야 하면 이 메서드는 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="T:System.Drawing.SizeConverter">
      <summary>
        <see cref="T:System.Drawing.SizeConverter" /> 클래스는 하나의 데이터 형식에서 다른 데이터 형식으로 변환하는 데 사용합니다. <see cref="T:System.ComponentModel.TypeDescriptor" /> 개체를 통해 이 클래스에 액세스합니다.</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.#ctor">
      <summary>새 <see cref="T:System.Drawing.SizeConverter" /> 개체를 초기화합니다.</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>이 변환기가 지정된 소스 형식의 개체를 변환기의 네이티브 형식으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context">이 변환기가 호출될 환경에 대한 더 많은 정보를 추출하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다. 이 매개 변수는 <see langword="null" />이 될 수 있으므로 항상 확인해야 합니다. 또한 컨텍스트 개체의 속성은 <see langword="null" />을 반환할 수도 있습니다.</param>
      <param name="sourceType">변환할 원본 형식입니다.</param>
      <returns>이 개체가 변환을 수행할 수 있으면 이 메서드는 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>컨텍스트를 사용하여 이 변환기에서 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="context">이 변환기가 호출될 환경에 대한 더 많은 정보를 추출하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다. 이 매개 변수는 <see langword="null" />이 될 수 있으므로 항상 확인해야 합니다. 또한 컨텍스트 개체의 속성은 <see langword="null" />을 반환할 수도 있습니다.</param>
      <param name="destinationType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기가 변환을 수행할 수 있으면 이 메서드는 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 개체를 변환기의 네이티브 형식으로 변환합니다.</summary>
      <param name="context">이 변환기가 호출될 환경에 대한 더 많은 정보를 추출하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다. 이 매개 변수는 <see langword="null" />이 될 수 있으므로 항상 확인해야 합니다. 또한 컨텍스트 개체의 속성은 <see langword="null" />을 반환할 수도 있습니다.</param>
      <param name="culture">특정 culture와 관련된 언어, 달력 및 culture 규칙 등의 culutre 관련 정보가 들어 있는 <see cref="T:System.Globalization.CultureInfo" /> 개체로, RFC 1766 표준을 따릅니다.</param>
      <param name="value">변환할 개체입니다.</param>
      <returns>변환된 개체입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환을 완료할 수 없습니다.</exception>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>지정된 개체를 지정된 형식으로 변환합니다.</summary>
      <param name="context">이 변환기가 호출될 환경에 대한 더 많은 정보를 추출하는 데 사용할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다. 이 매개 변수는 <see langword="null" />이 될 수 있으므로 항상 확인해야 합니다. 또한 컨텍스트 개체의 속성은 <see langword="null" />을 반환할 수도 있습니다.</param>
      <param name="culture">특정 culture와 관련된 언어, 달력 및 culture 규칙 등의 culutre 관련 정보가 들어 있는 <see cref="T:System.Globalization.CultureInfo" /> 개체로, RFC 1766 표준을 따릅니다.</param>
      <param name="value">변환할 개체입니다.</param>
      <param name="destinationType">개체를 변환할 대상 유형입니다.</param>
      <returns>변환된 개체입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환을 완료할 수 없습니다.</exception>
    </member>
    <member name="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>지정된 개체의 속성 값 집합을 사용하여 이러한 형식의 개체를 만듭니다. 이는 변경할 수 있는 속성을 가진 변경할 수 없는 개체를 만드는 데 유용합니다.</summary>
      <param name="context">추가 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.TypeDescriptor" />입니다.</param>
      <param name="propertyValues">새 속성 값의 사전입니다. 이 사전은 <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 메서드에서 반환된 각 속성에 대해 이름/값 쌍을 하나씩 포함하는 이름/값 쌍 집합을 포함합니다.</param>
      <returns>새로 만들어진 개체를 반환하거나, 개체를 만들 수 없는 경우 <see langword="null" />을 반환합니다. 기본 구현은 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>이 개체의 값을 변경할 때 <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 메서드를 호출하여 새 값을 만들어야 할지 여부를 확인합니다.</summary>
      <param name="context">추가 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.TypeDescriptor" />입니다.</param>
      <returns>이 개체의 하나 이상의 속성이 변경될 때 <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 개체가 호출되어야 하면 <see langword="true" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>이 형식의 속성 집합을 검색합니다. 기본적으로 형식은 반환할 속성을 갖지 않습니다.</summary>
      <param name="context">추가 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.TypeDescriptor" />입니다.</param>
      <param name="value">속성을 가져올 개체의 값입니다.</param>
      <param name="attributes">속성을 설명하는 <see cref="T:System.Attribute" /> 개체의 배열입니다.</param>
      <returns>이 데이터 형식에 대해 노출되어야 하는 속성의 집합을 반환합니다. 노출해야 할 속성이 없으면 <see langword="null" />이 반환될 수 있습니다. 기본 구현에서는 항상 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>이 개체가 속성을 지원하는지 여부를 결정합니다. 기본적으로 이 값은 <see langword="false" />입니다.</summary>
      <param name="context">추가 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.TypeDescriptor" />입니다.</param>
      <returns>이 개체의 속성을 찾기 위해 <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 메서드를 호출해야 하면 <see langword="true" />입니다.</returns>
    </member>
    <member name="T:System.Drawing.SizeFConverter">
      <summary>한 형식에서 다른 형식으로 <see cref="T:System.Drawing.SizeF" /> 개체를 변환합니다.</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.#ctor">
      <summary>
        <see cref="T:System.Drawing.SizeFConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>변환기가 지정된 컨텍스트를 사용하여 지정된 형식을 <see cref="T:System.Drawing.SizeF" /> 형식으로 변환할 수 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="context">추가 컨텍스트를 제공할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>변환을 수행할 수 있음을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <see cref="T:System.Drawing.SizeFConverter" />가 <see cref="T:System.Drawing.SizeF" />를 지정된 형식으로 변환할 수 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="context">추가 컨텍스트를 제공할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기가 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 컨텍스트 및 문화권 정보를 사용하여 지정된 개체를 이 변환기 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">현재 문화권으로 사용할 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>지정된 컨텍스트 및 문화권 정보를 사용하여 지정된 값 개체를 지정된 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> null이 전달되면 현재 문화권이 가정됩니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType">값 매개 변수를 변환할 <see cref="T:System.Type" />입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>지정된 컨텍스트를 사용하여 지정된 속성 값으로 <see cref="T:System.Drawing.SizeF" />의 인스턴스를 만듭니다.</summary>
      <param name="context">추가 컨텍스트를 제공할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="propertyValues">속성 이름과 값을 포함하는 <see cref="T:System.Collections.IDictionary" />입니다.</param>
      <returns>새 <see cref="T:System.Object" />를 나타내는 <see cref="T:System.Drawing.SizeF" />이거나, 개체를 만들 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>이 개체의 값을 변경할 때 <see cref="Overload:System.Drawing.SizeFConverter.CreateInstance" /> 메서드를 호출하여 새 값을 만들어야 하는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다. 이 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>지정된 컨텍스트와 특성을 사용하여 <see cref="T:System.Drawing.SizeF" /> 형식의 속성 집합을 검색합니다.</summary>
      <param name="context">추가 컨텍스트를 제공할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value">속성을 반환할 <see cref="T:System.Object" />입니다.</param>
      <param name="attributes">속성을 설명하는 <see cref="T:System.Attribute" /> 개체의 배열입니다.</param>
      <returns>속성을 포함하는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
        <see cref="T:System.Drawing.SizeF" /> 형식이 속성을 지원하는지 여부를 반환합니다.</summary>
      <param name="context">추가 컨텍스트를 제공할 수 있는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <returns>항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter">
      <summary>
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> 클래스는 들어오는 클라이언트 연결의 유효성을 검사하기 위해 서버에서 사용할 확장 보호 정책의 형식 변환기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.#ctor">
      <summary>
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>이 변환기가 개체를 지정된 형식으로 변환할 수 있는지 여부를 반환합니다.</summary>
      <param name="context">변환할 개체입니다.</param>
      <param name="destinationType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기가 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>개체를 지정된 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 개체입니다. <see langword="null" />이 전달되면 현재 문화권이 가정됩니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다. 이는 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 개체여야 합니다.</param>
      <param name="destinationType">값 매개 변수를 변환할 <see cref="T:System.Type" />입니다.</param>
      <returns>변환된 <paramref name="value" /> 매개 변수를 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">변환을 수행할 수 없는 경우</exception>
    </member>
    <member name="T:System.Timers.ElapsedEventArgs">
      <summary>
        <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="P:System.Timers.ElapsedEventArgs.SignalTime">
      <summary>
        <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트가 발생한 날짜/시간을 가져옵니다.</summary>
      <returns>
        <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트가 발생한 시간입니다.</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventHandler">
      <summary>
        <see cref="E:System.Timers.Timer.Elapsed" />의 <see cref="T:System.Timers.Timer" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터가 포함된 <see cref="T:System.Timers.ElapsedEventArgs" /> 개체입니다.</param>
    </member>
    <member name="T:System.Timers.Timer">
      <summary>반복 이벤트를 생성하는 옵션으로 설정된 간격 후 이벤트를 생성합니다.</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor">
      <summary>
        <see cref="T:System.Timers.Timer" /> 클래스의 새 인스턴스를 초기화하고 모든 속성을 각각의 초기 값으로 설정합니다.</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor(System.Double)">
      <summary>
        <see cref="T:System.Timers.Timer" /> 클래스의 새 인스턴스를 초기화하고 <see cref="P:System.Timers.Timer.Interval" /> 속성을 지정된 시간(밀리초)으로 설정합니다.</summary>
      <param name="interval">이벤트 간의 시간(밀리초 단위)입니다. 값은 0보다 크고 <see cref="F:System.Int32.MaxValue" />보다 작거나 같아야 합니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="interval" /> 매개 변수 값이 0보다 작거나 같거나 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
    </member>
    <member name="P:System.Timers.Timer.AutoReset">
      <summary>
        <see cref="T:System.Timers.Timer" />에서 <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트를 한 번만(<see langword="false" />) 발생시켜야 하는지 반복해서(<see langword="true" />) 발생시켜야 하는지 나타내는 부울을 가져오거나 설정합니다.</summary>
      <returns>간격이 경과할 때마다 <see cref="T:System.Timers.Timer" />에서 <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트를 발생시켜야 하면 <see langword="true" />이고, 첫 번째 간격이 경과한 후 한 번만 <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트를 발생시켜야 하면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="M:System.Timers.Timer.BeginInit">
      <summary>폼에 사용되거나 다른 구성 요소에서 사용하는 <see cref="T:System.Timers.Timer" />의 런타임 초기화를 시작합니다.</summary>
    </member>
    <member name="M:System.Timers.Timer.Close">
      <summary>
        <see cref="T:System.Timers.Timer" />에서 사용하는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Timers.Timer.Dispose(System.Boolean)">
      <summary>현재 <see cref="T:System.Timers.Timer" />에서 사용하는 모든 리소스를 해제합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="E:System.Timers.Timer.Elapsed">
      <summary>간격이 경과하면 발생합니다.</summary>
    </member>
    <member name="P:System.Timers.Timer.Enabled">
      <summary>
        <see cref="T:System.Timers.Timer" />에서 <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트를 발생시켜야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Timers.Timer" />에서 <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트를 발생시켜야 하면 <see langword="true" />이고 그러지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ObjectDisposedException">타이머가 삭제되어 이 속성을 설정할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentException">타이머를 사용하기 전에 <see cref="P:System.Timers.Timer.Interval" /> 속성은 <see cref="F:System.Int32.MaxValue" /> 보다 큰 값으로 설정되었습니다.</exception>
    </member>
    <member name="M:System.Timers.Timer.EndInit">
      <summary>폼에 사용되거나 다른 구성 요소에서 사용하는 <see cref="T:System.Timers.Timer" />의 런타임 초기화를 마칩니다.</summary>
    </member>
    <member name="P:System.Timers.Timer.Interval">
      <summary>
        <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트를 발생시킬 간격(밀리초)을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트 간의 시간(밀리초)입니다. 값은 0보다 크고 <see cref="F:System.Int32.MaxValue" />보다 작거나 같아야 합니다. 기본값은 100밀리초입니다.</returns>
      <exception cref="T:System.ArgumentException">간격이 0 이하인 경우  
또는 
간격은 <see cref="F:System.Int32.MaxValue" /> 보다 크며, 타이머는 현재 사용 가능합니다. 타이머를 현재 사용할 수 없는 경우, 사용 가능하게 될 때까지 예외가 throw되지 않습니다.</exception>
    </member>
    <member name="P:System.Timers.Timer.Site">
      <summary>디자인 모드에서 <see cref="T:System.Timers.Timer" />를 컨테이너에 바인딩하는 사이트를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Timers.Timer" /> 개체를 컨테이너에 바인딩하는 사이트를 나타내는 <see cref="T:System.ComponentModel.ISite" /> 인터페이스입니다.</returns>
    </member>
    <member name="M:System.Timers.Timer.Start">
      <summary>
        <see cref="P:System.Timers.Timer.Enabled" />를 <see langword="true" />로 설정하여 <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트를 발생시킵니다.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="T:System.Timers.Timer" />는 <see cref="F:System.Int32.MaxValue" /> + 1보다 크거나 같은 간격으로 만들거나 0보다 작은 간격으로 설정합니다.</exception>
    </member>
    <member name="M:System.Timers.Timer.Stop">
      <summary>
        <see cref="P:System.Timers.Timer.Enabled" />를 <see langword="false" />로 설정하여 <see cref="E:System.Timers.Timer.Elapsed" /> 이벤트 발생을 중지합니다.</summary>
    </member>
    <member name="P:System.Timers.Timer.SynchronizingObject">
      <summary>시간 간격이 경과할 때 발행되는 이벤트 처리기 호출을 마샬링하는 데 사용되는 개체를 가져오거나 설정합니다.</summary>
      <returns>시간 간격이 경과할 때 발행되는 이벤트 처리기 호출을 마샬링하는 데 사용되는 개체를 나타내는 <see cref="T:System.ComponentModel.ISynchronizeInvoke" />입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.Timers.TimersDescriptionAttribute">
      <summary>이벤트, Extender 또는 속성을 참조할 때 비주얼 디자이너에서 표시할 수 있는 설명을 설정합니다.</summary>
    </member>
    <member name="M:System.Timers.TimersDescriptionAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Timers.TimersDescriptionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="description">사용할 설명입니다.</param>
    </member>
    <member name="P:System.Timers.TimersDescriptionAttribute.Description">
      <summary>이벤트, Extender 또는 속성을 참조할 때 비주얼 디자이너에서 표시할 수 있는 설명을 가져옵니다.</summary>
      <returns>이벤트, extender 또는 속성에 대한 설명입니다.</returns>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary>
        <see cref="T:System.String" /> 형식을 <see cref="T:System.Uri" /> 형식으로 변환하거나 그 반대로 변환합니다.</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary>
        <see cref="T:System.UriTypeConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>이 변환기가 지정된 형식의 개체를 이 변환기의 형식으로 변환할 수 있는지 여부를 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType">변환할 원본 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>
        <paramref name="sourceType" />이 <see cref="T:System.String" /> 형식이거나 <see cref="T:System.Uri" /> 형식을 <paramref name="sourceType" />에서 지정할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceType" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>지정된 컨텍스트를 사용하여 이 변환기에서 개체를 지정된 형식으로 변환할 수 있는지 여부를 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType">변환할 대상 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>
        <paramref name="destinationType" />이 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />, <see cref="T:System.String" /> 또는 <see cref="T:System.Uri" /> 형식이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 컨텍스트 및 문화권 정보를 사용하여 지정된 개체를 이 변환기 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">현재 문화권으로 사용할 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>지정된 컨텍스트 및 문화권 정보를 사용하여 지정된 값 개체를 지정된 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />
        <see langword="null" /> 이 전달되면 현재 문화권이 가정됩니다.</param>
      <param name="value">변환할 <see cref="T:System.Object" />입니다.</param>
      <param name="destinationType">
        <paramref name="value" /> 매개 변수를 변환할 <see cref="T:System.Type" />입니다.</param>
      <returns>변환된 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.UriTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>지정된 값 개체가 <see cref="T:System.Uri" />인지 아니면 지정된 값 개체에서 <see cref="T:System.Uri" />를 만들 수 있는지 여부를 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="value">유효성을 테스트할 <see cref="T:System.Object" />입니다.</param>
      <returns>
        <paramref name="value" />가 <see cref="T:System.Uri" />이거나 <see cref="T:System.String" />를 만들 수 있는 원본 <see cref="T:System.Uri" />이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
  </members>
</doc>
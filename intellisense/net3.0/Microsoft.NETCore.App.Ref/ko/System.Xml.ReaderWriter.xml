<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xml.ReaderWriter</name>
  </assembly>
  <members>
    <member name="T:System.Xml.ConformanceLevel">
      <summary>만들어진 <see cref="T:System.Xml.XmlReader" /> 및 <see cref="T:System.Xml.XmlWriter" /> 개체에서 수행할 입력 또는 출력 검사 수준을 지정합니다.</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Auto">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> 또는 <see cref="T:System.Xml.XmlWriter" /> 개체가 문서 또는 조각 검사의 수행 여부를 자동으로 확인하고 적합한 검사를 수행합니다. 다른 <see cref="T:System.Xml.XmlReader" /> 또는 <see cref="T:System.Xml.XmlWriter" /> 개체를 래핑하면 외부 개체는 추가 규칙 검사를 수행하지 않습니다. 내부 개체에서만 규칙 검사를 수행합니다.  
규격 수준을 결정하는 데 대한 자세한 내용은 <see cref="P:System.Xml.XmlReaderSettings.ConformanceLevel" /> 및 <see cref="P:System.Xml.XmlWriterSettings.ConformanceLevel" /> 속성을 참조하세요.</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Document">
      <summary>XML 데이터는 W3C가 정의한 대로 올바른 형식의 XML 1.0 문서에 대한 규칙을 준수합니다. 이 검사 수준은 프로세서에서 읽거나 쓰는 스트림을 XML 1.0 문서로 사용할 수 있도록 합니다.</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Fragment">
      <summary>W3C에서 정의한 대로 XML 데이터가 형식이 올바른 XML 조각입니다.  이 준수 수준은 루트 요소가 없는 XML 문서를 나타내지만 그러지 않은 경우에는 잘 구성됩니다(Well-Formed). 이 검사 수준은 프로세서에서 읽거나 쓰는 스트림을 XML 1.0 외부 구문 분석된 엔터티로 사용할 수 있도록 합니다.</summary>
    </member>
    <member name="T:System.Xml.DtdProcessing">
      <summary>DTD를 처리하기 위한 옵션을 지정합니다. <see cref="T:System.Xml.DtdProcessing" /> 열거형은 <see cref="T:System.Xml.XmlReaderSettings" /> 클래스에서 사용됩니다.</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Ignore">
      <summary>DOCTYPE 요소가 무시됩니다. DTD 처리가 수행되지 않고 DTD/DOCTYPE이 출력에서 손실됩니다.</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Parse">
      <summary>DTD 구문 분석에 사용됩니다.</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Prohibit">
      <summary>DTD가 발견되면 DTD가 금지되었다는 메시지와 함께 <see cref="T:System.Xml.XmlException" />이 throw되도록 지정합니다. 이것은 기본적인 동작입니다.</summary>
    </member>
    <member name="T:System.Xml.EntityHandling">
      <summary>
        <see cref="T:System.Xml.XmlTextReader" />나 <see cref="T:System.Xml.XmlValidatingReader" />에서 엔터티를 처리하는 방법을 지정합니다.</summary>
    </member>
    <member name="F:System.Xml.EntityHandling.ExpandCharEntities">
      <summary>문자 엔터티를 확장하고 <see cref="F:System.Xml.XmlNodeType.EntityReference" /> 노드로 일반 엔터티를 반환합니다. 
일반 엔터티가 무엇으로 확장되는지 확인하려면 <see cref="Overload:System.Xml.XmlReader.ResolveEntity" />를 호출해야 합니다. 이렇게 하면 처음 사용될 때 엔터티를 확장하는 것만으로 엔터티 처리를 최적화할 수 있습니다.  
<see langword="ExpandCharEntities" />로 설정되면 <see cref="Overload:System.Xml.XmlReader.GetAttribute" /> 메서드에 대한 reader 호출이 모든 엔터티(일반 및 문자 엔터티 모두)를 확장합니다.</summary>
    </member>
    <member name="F:System.Xml.EntityHandling.ExpandEntities">
      <summary>모든 엔터티를 확장하고 확장 노드를 반환합니다.
<see cref="F:System.Xml.XmlNodeType.EntityReference" /> 노드는 반환되지 않습니다. 엔터티 참조 대신에 엔터티 텍스트가 확장됩니다.</summary>
    </member>
    <member name="T:System.Xml.Formatting">
      <summary>
        <see cref="T:System.Xml.XmlTextWriter" />에 대해 형식 지정 옵션을 지정합니다.</summary>
    </member>
    <member name="F:System.Xml.Formatting.Indented">
      <summary>
        <see cref="P:System.Xml.XmlTextWriter.Indentation" /> 및 <see cref="P:System.Xml.XmlTextWriter.IndentChar" /> 설정에 따라 자식 요소가 들여쓰기됩니다.
이 옵션은 요소 콘텐츠만 들여쓰고, 혼합 콘텐츠는 영향을 받지 않습니다. 이 용어의 XML 1.0 정의는 W3C(World Wide Web 컨소시엄) 설명서 Element Content(요소 콘텐츠) 및 Mixed Content(혼합 콘텐츠)를 참조하세요.</summary>
    </member>
    <member name="F:System.Xml.Formatting.None">
      <summary>특별한 형식 지정은 적용되지 않습니다. 이 값이 기본값입니다.</summary>
    </member>
    <member name="T:System.Xml.IApplicationResourceStreamResolver">
      <summary>애플리케이션 리소스 스트림 확인자를 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.IApplicationResourceStreamResolver.GetApplicationResourceStream(System.Uri)">
      <summary>지정된 URI에서 애플리케이션 리소스 스트림을 반환합니다.</summary>
      <param name="relativeUri">상대 URI입니다.</param>
      <returns>애플리케이션 리소스 스트림입니다.</returns>
    </member>
    <member name="T:System.Xml.IHasXmlNode">
      <summary>클래스가 현재 컨텍스트나 위치에서 <see cref="T:System.Xml.XmlNode" />를 반환할 수 있습니다.</summary>
    </member>
    <member name="M:System.Xml.IHasXmlNode.GetNode">
      <summary>현재 위치에 대한 <see cref="T:System.Xml.XmlNode" />를 반환합니다.</summary>
      <returns>현재 위치에 대한 <see langword="XmlNode" />입니다.</returns>
    </member>
    <member name="T:System.Xml.IXmlLineInfo">
      <summary>클래스에서 줄과 위치 정보를 반환할 수 있는 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.Xml.IXmlLineInfo.HasLineInfo">
      <summary>클래스에서 줄 정보를 반환할 수 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="P:System.Xml.IXmlLineInfo.LineNumber" />, <see cref="P:System.Xml.IXmlLineInfo.LinePosition" />을 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LineNumber">
      <summary>현재 줄 번호를 가져옵니다.</summary>
      <returns>현재 줄 번호이거나, 예를 들어 <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" />에서 <see langword="false" />를 반환하는 경우와 같이 줄 정보가 없는 경우에는 0입니다.</returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LinePosition">
      <summary>현재 줄 위치를 가져옵니다.</summary>
      <returns>현재 줄 위치이거나, 예를 들어 <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" />에서 <see langword="false" />를 반환하는 경우와 같이 줄 정보가 없는 경우에는 0입니다.</returns>
    </member>
    <member name="T:System.Xml.IXmlNamespaceResolver">
      <summary>접두사 및 네임스페이스 매핑 집합에 읽기 전용으로 액세스하는 데 사용됩니다.</summary>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>현재 범위 내에 정의된 접두사-네임스페이스 매핑 컬렉션을 가져옵니다.</summary>
      <param name="scope">반환할 네임스페이스 노드의 형식을 지정하는 <see cref="T:System.Xml.XmlNamespaceScope" /> 값입니다.</param>
      <returns>현재 범위 내의 네임스페이스가 포함된 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)">
      <summary>지정된 접두사에 매핑된 네임스페이스 URI를 가져옵니다.</summary>
      <param name="prefix">찾을 네임스페이스 URI의 접두사입니다.</param>
      <returns>접두사에 매핑된 네임스페이스 URI이거나, 접두사가 네임스페이스 URI에 매핑되지 않은 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)">
      <summary>지정된 네임스페이스 URI에 매핑된 접두사를 가져옵니다.</summary>
      <param name="namespaceName">찾을 접두사의 네임스페이스 URI입니다.</param>
      <returns>네임스페이스 URI에 매핑된 접두사이거나, 네임스페이스 URI가 접두사에 매핑되지 않은 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.Xml.NamespaceHandling">
      <summary>
        <see cref="T:System.Xml.XmlWriter" />에서 중복된 네임스페이스 선언을 제거할지 여부를 지정합니다.</summary>
    </member>
    <member name="F:System.Xml.NamespaceHandling.Default">
      <summary>중복된 네임스페이스 선언을 제거하지 않도록 지정합니다.</summary>
    </member>
    <member name="F:System.Xml.NamespaceHandling.OmitDuplicates">
      <summary>중복된 네임스페이스 선언을 제거하도록 지정합니다. 중복된 네임스페이스를 제거하려면 접두사와 네임스페이스가 일치해야 합니다.</summary>
    </member>
    <member name="T:System.Xml.NameTable">
      <summary>단일 스레드 <see cref="T:System.Xml.XmlNameTable" />을 구현합니다.</summary>
    </member>
    <member name="M:System.Xml.NameTable.#ctor">
      <summary>
        <see langword="NameTable" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary>지정된 문자열을 원자화하여 이를 <see langword="NameTable" />에 추가합니다.</summary>
      <param name="key">추가할 문자열이 포함된 문자 배열입니다.</param>
      <param name="start">문자열의 첫 번째 문자를 지정하는 배열의 0부터 시작하는 인덱스입니다.</param>
      <param name="len">문자열에 있는 문자의 수입니다.</param>
      <returns>원자화된 문자열이거나 <see langword="NameTable" />에 이미 있을 경우 기존 문자열입니다. <paramref name="len" />가 0이면 String.Empty가 반환됩니다.</returns>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="start" />  
또는 
 <paramref name="start" /> &gt;= <paramref name="key" />.Length 
또는 
 <paramref name="len" /> &gt;= <paramref name="key" />.Length 
위의 경우 <paramref name="len" /> =0이면 예외가 throw되지 않습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="len" /> &lt; 0.</exception>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.String)">
      <summary>지정된 문자열을 원자화하여 이를 <see langword="NameTable" />에 추가합니다.</summary>
      <param name="key">추가할 문자열입니다.</param>
      <returns>원자화된 문자열이거나 <see langword="NameTable" />에 이미 있을 경우 기존 문자열입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary>주어진 배열의 지정된 문자 범위와 같은 문자가 포함된 원자화된 문자열을 가져옵니다.</summary>
      <param name="key">찾을 이름이 포함된 문자 배열입니다.</param>
      <param name="start">이름의 첫 번째 문자를 지정하는 배열의 0부터 시작하는 인덱스입니다.</param>
      <param name="len">이름에 있는 문자의 수입니다.</param>
      <returns>문자열이 이미 원자화되지 않은 경우 원자화된 문자열 또는 <see langword="null" />입니다. <paramref name="len" />가 0이면 String.Empty가 반환됩니다.</returns>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="start" />  
또는 
 <paramref name="start" /> &gt;= <paramref name="key" />.Length 
또는 
 <paramref name="len" /> &gt;= <paramref name="key" />.Length 
위의 경우 <paramref name="len" /> =0이면 예외가 throw되지 않습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="len" /> &lt; 0.</exception>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.String)">
      <summary>지정된 값을 가진 원자화된 문자열을 가져옵니다.</summary>
      <param name="value">찾을 이름입니다.</param>
      <returns>원자화된 문자열이거나 문자열이 이미 원자화되지 않은 경우에는 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="T:System.Xml.NewLineHandling">
      <summary>줄 바꿈을 처리하는 방법을 지정합니다.</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.Entitize">
      <summary>새 줄 문자를 엔터티화합니다. 이 설정을 사용하면 정규화 <see cref="T:System.Xml.XmlReader" />에서 출력을 읽을 경우 모든 문자가 유지됩니다.</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.None">
      <summary>새 줄 문자를 변경하지 않습니다. 이 경우에는 입력과 출력이 같습니다.</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.Replace">
      <summary>
        <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> 속성에 지정된 문자와 일치하도록 새 줄 문자를 바꿉니다.</summary>
    </member>
    <member name="T:System.Xml.ReadState">
      <summary>판독기의 상태를 지정합니다.</summary>
    </member>
    <member name="F:System.Xml.ReadState.Closed">
      <summary>
        <see cref="M:System.Xml.XmlReader.Close" /> 메서드가 호출되었습니다.</summary>
    </member>
    <member name="F:System.Xml.ReadState.EndOfFile">
      <summary>파일 끝에 성공적으로 도달했습니다.</summary>
    </member>
    <member name="F:System.Xml.ReadState.Error">
      <summary>읽기 작업을 계속할 수 없는 오류가 발생했습니다.</summary>
    </member>
    <member name="F:System.Xml.ReadState.Initial">
      <summary>
        <see langword="Read" /> 메서드가 호출되지 않았습니다.</summary>
    </member>
    <member name="F:System.Xml.ReadState.Interactive">
      <summary>
        <see langword="Read" /> 메서드가 호출되었습니다. 판독기에 메서드가 추가로 호출될 수 있습니다.</summary>
    </member>
    <member name="T:System.Xml.Resolvers.XmlKnownDtds">
      <summary>
        <see cref="T:System.Xml.Resolvers.XmlKnownDtds" /> 열거형은 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />에서 사용되며 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />에서 인식되는 잘 알려진 DTD를 정의합니다.</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.All">
      <summary>
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />가 현재 지원되는 모든 DTD를 인식하도록 지정합니다. 이것은 기본적인 동작입니다.</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.None">
      <summary>
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />가 미리 정의된 어떠한 DTD도 인식하지 않도록 지정합니다.</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.Rss091">
      <summary>
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />가 RSS 0.91에 정의된 엔터티와 DTD를 인식하도록 지정합니다.</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.Xhtml10">
      <summary>
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />가 XHTML 1.0에 정의된 엔터티와 DTD를 인식하도록 지정합니다.</summary>
    </member>
    <member name="T:System.Xml.Resolvers.XmlPreloadedResolver">
      <summary>DTD 또는 XML 스트림으로 캐시를 미리 채우는 데 사용되는 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor">
      <summary>
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.Resolvers.XmlKnownDtds)">
      <summary>지정되어 미리 로드된 잘 알려진 DTD를 사용하여 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="preloadedDtds">캐시에 미리 채워넣어야 하는 잘 알려진 DTD입니다.</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver)">
      <summary>지정된 대체(fallback) 해결 프로그램을 사용하여 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="fallbackResolver">
        <see langword="XmlResolver" />, <see langword="XmlXapResolver" /> 또는 자체 해결 프로그램입니다.</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver,System.Xml.Resolvers.XmlKnownDtds)">
      <summary>지정된 대체(fallback) 해결 프로그램과 미리 로드된 잘 알려진 DTD를 사용하여 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="fallbackResolver">
        <see langword="XmlResolver" />, <see langword="XmlXapResolver" /> 또는 자체 해결 프로그램입니다.</param>
      <param name="preloadedDtds">캐시에 미리 채워넣어야 하는 잘 알려진 DTD입니다.</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver,System.Xml.Resolvers.XmlKnownDtds,System.Collections.Generic.IEqualityComparer{System.Uri})">
      <summary>지정된 대체(fallback) 확인자, 미리 로드된 잘 알려진 DTD, URI 같음 비교자를 사용하여 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="fallbackResolver">
        <see langword="XmlResolver" />, <see langword="XmlXapResolver" /> 또는 자체 해결 프로그램입니다.</param>
      <param name="preloadedDtds">캐시에 미리 채워넣어야 하는 잘 알려진 DTD입니다.</param>
      <param name="uriComparer">URI를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 제네릭 인터페이스 구현입니다.</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.Byte[])">
      <summary>
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 저장소에 바이트 배열을 추가하고 이 배열을 URI에 매핑합니다. 저장소에 동일한 URI에 대한 매핑이 이미 있으면 기존 매핑이 재정의됩니다.</summary>
      <param name="uri">
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 저장소에 추가되는 데이터의 URI입니다.</param>
      <param name="value">제공된 URI에 해당하는 데이터가 있는 바이트 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.Byte[],System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 저장소에 바이트 배열을 추가하고 이 배열을 URI에 매핑합니다. 저장소에 동일한 URI에 대한 매핑이 이미 있으면 기존 매핑이 재정의됩니다.</summary>
      <param name="uri">
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 저장소에 추가되는 데이터의 URI입니다.</param>
      <param name="value">제공된 URI에 해당하는 데이터가 있는 바이트 배열입니다.</param>
      <param name="offset">제공된 바이트 배열에서 데이터가 시작되는 오프셋입니다.</param>
      <param name="count">제공된 오프셋부터 시작하여 바이트 배열에서 읽을 바이트 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 또는 <paramref name="count" />가 0 미만입니다.  
또는 
<paramref name="value" />에서 <paramref name="offset" />을 뺀 길이가 <paramref name="count." />보다 작은 경우</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.IO.Stream)">
      <summary>
        <see cref="T:System.IO.Stream" /> 저장소에 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />을 추가하고 이 스트림을 URI에 매핑합니다. 저장소에 동일한 URI에 대한 매핑이 이미 있으면 기존 매핑이 재정의됩니다.</summary>
      <param name="uri">
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 저장소에 추가되는 데이터의 URI입니다.</param>
      <param name="value">제공된 URI에 해당하는 데이터가 있는 <see cref="T:System.IO.Stream" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.String)">
      <summary>미리 로드된 데이터가 있는 문자열을 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 저장소에 추가하고 URI에 매핑합니다. 저장소에 동일한 URI에 대한 매핑이 이미 있으면 기존 매핑이 재정의됩니다.</summary>
      <param name="uri">
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 저장소에 추가되는 데이터의 URI입니다.</param>
      <param name="value">제공된 URI에 해당하는 데이터가 있는 <see langword="String" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xml.Resolvers.XmlPreloadedResolver.Credentials">
      <summary>기본 <see cref="T:System.Net.WebRequest" />를 인증하는 데 사용하는 자격 증명을 설정합니다.</summary>
      <returns>기본 웹 요청을 인증하는 데 사용하는 자격 증명입니다.</returns>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>실제 리소스가 포함된 개체로 URI를 매핑합니다.</summary>
      <param name="absoluteUri">
        <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />에서 반환된 URI입니다.</param>
      <param name="role">.NET Framework for Silverlight의 현재 버전에서는 URI를 확인할 때 이 매개 변수를 사용하지 않습니다. 이 매개 변수는 다음 버전의 확장을 위해 제공됩니다. 예를 들어, 이 매개 변수를 xlink:role에 매핑하여 다른 시나리오에서 구현 관련 인수로 사용할 수 있습니다.</param>
      <param name="ofObjectToReturn">반환할 개체의 형식입니다. <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />는 <see langword="String" />으로 추가된 URI에 대해 <see cref="T:System.IO.Stream" /> 개체와 <see cref="T:System.IO.TextReader" /> 개체를 지원합니다. 요청된 형식이 해결 프로그램에서 지원되지 않는 경우 예외가 throw됩니다. <see cref="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)" /> 메서드를 사용하여 이 확인자에서 특정 <see langword="Type" />이 지원되는지 여부를 확인합니다.</param>
      <returns>실제 소스에 해당하는 <see cref="T:System.IO.Stream" /> 또는 <see cref="T:System.IO.TextReader" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="absoluteUri" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="absoluteUri" />에 전달된 URI를 확인할 수 없는 경우  
또는 
 <paramref name="ofObjectToReturn" />이 지원되는 형식이 아닌 경우</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary>실제 리소스가 포함된 개체로 URI를 비동기적으로 매핑합니다.</summary>
      <param name="absoluteUri">
        <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />에서 반환된 URI입니다.</param>
      <param name="role">.NET Framework for Silverlight의 현재 버전에서는 URI를 확인할 때 이 매개 변수를 사용하지 않습니다. 이 매개 변수는 다음 버전의 확장을 위해 제공됩니다. 예를 들어, 이 매개 변수를 xlink:role에 매핑하여 다른 시나리오에서 구현 관련 인수로 사용할 수 있습니다.</param>
      <param name="ofObjectToReturn">반환할 개체의 형식입니다. <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />는 <see langword="String" />으로 추가된 URI에 대해 <see cref="T:System.IO.Stream" /> 개체와 <see cref="T:System.IO.TextReader" /> 개체를 지원합니다. 요청된 형식이 해결 프로그램에서 지원되지 않는 경우 예외가 throw됩니다. <see cref="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)" /> 메서드를 사용하여 이 확인자에서 특정 <see langword="Type" />이 지원되는지 여부를 확인합니다.</param>
      <returns>실제 소스에 해당하는 <see cref="T:System.IO.Stream" /> 또는 <see cref="T:System.IO.TextReader" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Xml.Resolvers.XmlPreloadedResolver.PreloadedUris">
      <summary>미리 로드된 URI의 컬렉션을 가져옵니다.</summary>
      <returns>미리 로드된 URI의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Remove(System.Uri)">
      <summary>
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />에서 URI에 해당하는 데이터를 제거합니다.</summary>
      <param name="uri">
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 저장소에서 제거되어야 하는 데이터의 URI입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.ResolveUri(System.Uri,System.String)">
      <summary>기본 및 상대 URI에서 절대 URI를 확인합니다.</summary>
      <param name="baseUri">상대 URI를 확인하는 데 사용된 기본 URI입니다.</param>
      <param name="relativeUri">확인할 URI입니다. 절대 URI나 상대 URI일 수 있습니다. 절대 URI인 경우 이 값은 <paramref name="baseUri" /> 값을 효율적으로 대체합니다. 상대 URI인 경우 <paramref name="baseUri" />와 결합하여 절대 URI를 만듭니다.</param>
      <returns>절대 URI를 나타내는 <see cref="T:System.Uri" />이거나, 상대 URI를 확인할 수 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)">
      <summary>확인자가 <see cref="T:System.Type" />뿐만 아니라 다른 <see cref="T:System.IO.Stream" />을 지원하는지 여부를 확인합니다.</summary>
      <param name="absoluteUri">확인할 절대 URI입니다.</param>
      <param name="type">반환할 <see cref="T:System.Type" />입니다.</param>
      <returns>
        <see cref="T:System.Type" />이 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Xml.Schema.IXmlSchemaInfo">
      <summary>유효성이 검사된 XML 노드의 스키마 유효성 검사 이후 정보 집합을 정의합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.IsDefault">
      <summary>유효성이 검사된 이 XML 노드가 XSD(XML 스키마 정의 언어) 스키마 유효성 검사를 수행하는 동안 기본값이 적용되는 결과로 설정되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>유효성이 검사된 이 XML 노드가 스키마 유효성 검사 동안 기본값 적용 결과로 설정되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.IsNil">
      <summary>유효성이 검사된 이 XML 노드의 값이 nil인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>유효성이 검사된 이 XML 노드의 값이 nil이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.MemberType">
      <summary>유효성이 검사된 이 XML 노드의 동적 스키마 형식을 가져옵니다.</summary>
      <returns>유효성이 검사된 이 XML 노드의 동적 스키마 형식을 나타내는 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute">
      <summary>유효성이 검사된 이 XML 노드에 해당하는 컴파일된 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />를 가져옵니다.</summary>
      <returns>유효성이 검사된 이 XML 노드에 해당하는 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaElement">
      <summary>유효성이 검사된 이 XML 노드에 해당하는 컴파일된 <see cref="T:System.Xml.Schema.XmlSchemaElement" />를 가져옵니다.</summary>
      <returns>유효성이 검사된 이 XML 노드에 해당하는 <see cref="T:System.Xml.Schema.XmlSchemaElement" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaType">
      <summary>유효성이 검사된 이 XML 노드의 정적 XSD(XML 스키마 정의 언어) 스키마 형식을 가져옵니다.</summary>
      <returns>유효성이 검사된 이 XML 노드의 <see cref="T:System.Xml.Schema.XmlSchemaType" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.Validity">
      <summary>유효성이 검사된 이 XML 노드의 <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 값을 가져옵니다.</summary>
      <returns>유효성이 검사된 이 XML 노드의 <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 값입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.ValidationEventArgs">
      <summary>
        <see langword="ValidationEventHandler" />와 관련된 자세한 정보를 반환합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Exception">
      <summary>유효성 검사 이벤트와 관련된 <see cref="T:System.Xml.Schema.XmlSchemaException" />을 가져옵니다.</summary>
      <returns>유효성 검사 이벤트와 관련된 <see langword="XmlSchemaException" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Message">
      <summary>유효성 검사 이벤트에 해당하는 텍스트 설명을 가져옵니다.</summary>
      <returns>텍스트 설명입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Severity">
      <summary>유효성 검사 이벤트의 심각도를 가져옵니다.</summary>
      <returns>유효성 검사 이벤트의 심각도를 나타내는 <see cref="T:System.Xml.Schema.XmlSeverityType" /> 값입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.ValidationEventHandler">
      <summary>XML 스키마 유효성 검사 이벤트와 <see cref="T:System.Xml.Schema.ValidationEventArgs" />를 처리할 콜백 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.  
 참고 코드에 사용하기 전에 전송자 형식을 확인합니다. 전송자를 특정 유형의 인스턴스로 가정할 수 없으며 전송자가 null이 아니라고 보장할 수도 없습니다. 항상 실패 처리 논리로 캐스트를 둘러싸야 합니다.</param>
      <param name="e">이벤트 데이터입니다.</param>
    </member>
    <member name="T:System.Xml.Schema.XmlAtomicValue">
      <summary>유효성이 검사된 XML 요소나 특성의 형식화된 값을 나타냅니다. <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.Clone">
      <summary>이 <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 개체의 복사본을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 개체의 <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 개체 복사본입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.IsNode">
      <summary>유효성이 검사된 XML 요소나 특성이 XPath 노드 또는 atomic 값인지를 나타내는 값을 가져옵니다.</summary>
      <returns>유효성이 검사된 XML 요소나 특성이 XPath 노드이면 <see langword="true" />이고, atomic 값이면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.System#ICloneable#Clone">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.Schema.XmlAtomicValue.Clone" />를 참조하십시오.</summary>
      <returns>이 <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 개체의 복사본입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.ToString">
      <summary>유효성이 검사된 XML 요소나 특성의 <see langword="string" /> 값을 가져옵니다.</summary>
      <returns>유효성이 검사된 XML 요소나 특성의 <see langword="string" /> 값입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.TypedValue">
      <summary>현재 유효성이 검사된 XML 요소나 특성을 해당 스키마 형식에 따라 가장 적합한 Microsoft .NET Framework 형식의 boxed 개체 형식으로 가져옵니다.</summary>
      <returns>현재 유효성이 검사된 XML 요소나 특성에 해당하는 가장 적합한 .NET Framework 형식의 boxed 개체입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.Value">
      <summary>유효성이 검사된 XML 요소나 특성의 <see langword="string" /> 값을 가져옵니다.</summary>
      <returns>유효성이 검사된 XML 요소나 특성의 <see langword="string" /> 값입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>네임스페이스 접두사 확인을 위해 지정된 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 개체를 사용하여, 유효성이 검사된 XML 요소나 특성의 값을 지정된 형식으로 반환합니다.</summary>
      <param name="type">유효성이 검사된 XML 요소나 특성의 값을 반환할 형식입니다.</param>
      <param name="nsResolver">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 개체는 네임스페이스 접두사를 확인하는 데 사용됩니다.</param>
      <returns>유효성이 검사된 XML 요소나 특성의 값을 요청된 형식으로 반환합니다.</returns>
      <exception cref="T:System.FormatException">유효성이 검사된 XML 요소나 특성의 값 형식이 대상 형식과 맞지 않는 경우</exception>
      <exception cref="T:System.InvalidCastException">시도된 캐스팅이 잘못된 경우</exception>
      <exception cref="T:System.OverflowException">시도된 캐스팅에서 오버플로가 발생했습니다.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsBoolean">
      <summary>유효성이 검사된 XML 요소나 특성의 값을 <see cref="T:System.Boolean" /> 형식으로 가져옵니다.</summary>
      <returns>유효성이 검사된 XML 요소나 특성의 값에 해당하는 <see cref="T:System.Boolean" /> 형식입니다.</returns>
      <exception cref="T:System.FormatException">특성 값의 유효성이 검사된 XML 요소 형식이 <see cref="T:System.Boolean" /> 형식과 맞지 않는 경우</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.Boolean" />에 대해 시도된 캐스팅이 잘못된 경우</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsDateTime">
      <summary>유효성이 검사된 XML 요소나 특성의 값을 <see cref="T:System.DateTime" /> 형식으로 가져옵니다.</summary>
      <returns>유효성이 검사된 XML 요소나 특성의 값에 해당하는 <see cref="T:System.DateTime" /> 형식입니다.</returns>
      <exception cref="T:System.FormatException">특성 값의 유효성이 검사된 XML 요소 형식이 <see cref="T:System.DateTime" /> 형식과 맞지 않는 경우</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DateTime" />에 대해 시도된 캐스팅이 잘못된 경우</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsDouble">
      <summary>유효성이 검사된 XML 요소나 특성의 값을 <see cref="T:System.Double" /> 형식으로 가져옵니다.</summary>
      <returns>유효성이 검사된 XML 요소나 특성의 값에 해당하는 <see cref="T:System.Double" /> 형식입니다.</returns>
      <exception cref="T:System.FormatException">특성 값의 유효성이 검사된 XML 요소 형식이 <see cref="T:System.Double" /> 형식과 맞지 않는 경우</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.Double" />에 대해 시도된 캐스팅이 잘못된 경우</exception>
      <exception cref="T:System.OverflowException">시도된 캐스팅에서 오버플로가 발생했습니다.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsInt">
      <summary>유효성이 검사된 XML 요소나 특성의 값을 <see cref="T:System.Int32" /> 형식으로 가져옵니다.</summary>
      <returns>유효성이 검사된 XML 요소나 특성의 값에 해당하는 <see cref="T:System.Int32" /> 형식입니다.</returns>
      <exception cref="T:System.FormatException">특성 값의 유효성이 검사된 XML 요소 형식이 <see cref="T:System.Int32" /> 형식과 맞지 않는 경우</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.Int32" />에 대해 시도된 캐스팅이 잘못된 경우</exception>
      <exception cref="T:System.OverflowException">시도된 캐스팅에서 오버플로가 발생했습니다.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsLong">
      <summary>유효성이 검사된 XML 요소나 특성의 값을 <see cref="T:System.Int64" /> 형식으로 가져옵니다.</summary>
      <returns>유효성이 검사된 XML 요소나 특성의 값에 해당하는 <see cref="T:System.Int64" /> 형식입니다.</returns>
      <exception cref="T:System.FormatException">특성 값의 유효성이 검사된 XML 요소 형식이 <see cref="T:System.Int64" /> 형식과 맞지 않는 경우</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.Int64" />에 대해 시도된 캐스팅이 잘못된 경우</exception>
      <exception cref="T:System.OverflowException">시도된 캐스팅에서 오버플로가 발생했습니다.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueType">
      <summary>유효성이 검사된 XML 요소나 특성의 Microsoft .NET Framework 형식을 가져옵니다.</summary>
      <returns>유효성이 검사된 XML 요소나 특성의 .NET Framework 형식입니다. 기본값은 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.XmlType">
      <summary>유효성이 검사된 XML 요소나 특성의 <see cref="T:System.Xml.Schema.XmlSchemaType" />을 가져옵니다.</summary>
      <returns>유효성이 검사된 XML 요소나 특성의 <see cref="T:System.Xml.Schema.XmlSchemaType" />입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchema">
      <summary>W3C(World Wide Web 컨소시엄) XML 스키마 파트 1: 구조 및 XML 스키마 파트 2: 데이터 형식]에서 지정한 XML 스키마의 메모리 내 표현입니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.AttributeFormDefault">
      <summary>스키마의 대상 네임스페이스에서 선언된 특성에 해당하는 폼을 가져오거나 설정합니다.</summary>
      <returns>대상 네임스페이스의 특성을 네임스페이스 접두사로 한정해야 하는지 여부를 나타내는 <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 값입니다. 기본값은 <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.AttributeGroups">
      <summary>스키마에 있는 모든 전역 특성 그룹의 스키마 컴파일 이후 값을 가져옵니다.</summary>
      <returns>스키마에 있는 모든 전역 특성 그룹의 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Attributes">
      <summary>스키마에 있는 모든 특성에 대한 스키마 컴파일 이후 값을 가져옵니다.</summary>
      <returns>스키마에 있는 모든 특성의 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.BlockDefault">
      <summary>스키마의 <see langword="blockDefault" />에 포함된 요소 및 복합 형식에 대한 <see langword="block" /> 특성의 기본값을 설정하는 <see langword="targetNamespace" /> 특성을 가져오거나 설정합니다.</summary>
      <returns>파생 방지를 위해 서로 다른 메서드를 나타내는 <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 값입니다. 기본값은 <see langword="XmlSchemaDerivationMethod.None" />입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler)">
      <summary>유효성 검사를 위해 XML SOM(스키마 개체 모델)을 스키마 정보로 컴파일합니다. 프로그래밍에 의해 생성된 SOM의 구문 및 의미론 구조를 검사하는 데 사용됩니다. 의미론 유효성 검사는 컴파일 과정에서 수행됩니다.</summary>
      <param name="validationEventHandler">XML 스키마 유효성 검사 오류에 대한 정보를 수신하는 유효성 검사 이벤트 처리기입니다.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlResolver)">
      <summary>유효성 검사를 위해 XML SOM(스키마 개체 모델)을 스키마 정보로 컴파일합니다. 프로그래밍에 의해 생성된 SOM의 구문 및 의미론 구조를 검사하는 데 사용됩니다. 의미론 유효성 검사는 컴파일 과정에서 수행됩니다.</summary>
      <param name="validationEventHandler">XML 스키마 유효성 검사 오류에 대한 정보를 수신하는 유효성 검사 이벤트 처리기입니다.</param>
      <param name="resolver">
        <see langword="include" /> 및 <see langword="import" /> 요소에서 참조된 모든 네임스페이스를 확인하는 데 사용할 <see langword="XmlResolver" />입니다.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.ElementFormDefault">
      <summary>스키마의 대상 네임스페이스에서 선언된 요소에 해당하는 폼을 가져오거나 설정합니다.</summary>
      <returns>대상 네임스페이스의 요소를 네임스페이스 접두사로 한정해야 하는지 여부를 나타내는 <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 값입니다. 기본값은 <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Elements">
      <summary>스키마에 있는 모든 요소에 대한 스키마 컴파일 이후 값을 가져옵니다.</summary>
      <returns>스키마에 있는 모든 요소의 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.FinalDefault">
      <summary>스키마의 대상 네임스페이스에 포함된 요소 및 복합 형식에 대한 <see langword="finalDefault" /> 특성의 기본값을 설정하는 <see langword="final" /> 특성을 가져오거나 설정합니다.</summary>
      <returns>파생 방지를 위해 서로 다른 메서드를 나타내는 <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 값입니다. 기본값은 <see langword="XmlSchemaDerivationMethod.None" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Groups">
      <summary>스키마에 있는 모든 그룹의 스키마 컴파일 이후 값을 가져옵니다.</summary>
      <returns>스키마에 있는 모든 그룹의 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Id">
      <summary>문자열 ID를 가져오거나 설정합니다.</summary>
      <returns>문자열 ID입니다. 기본값은 <see langword="String.Empty" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Includes">
      <summary>포함된 스키마와 가져온 스키마의 컬렉션을 가져옵니다.</summary>
      <returns>포함된 스키마와 가져온 스키마의 <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />입니다.</returns>
    </member>
    <member name="F:System.Xml.Schema.XmlSchema.InstanceNamespace">
      <summary>XML 스키마 인스턴스 네임스페이스입니다. 이 필드는 상수입니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.IsCompiled">
      <summary>스키마가 컴파일되었는지 여부를 나타냅니다.</summary>
      <returns>스키마가 컴파일되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Items">
      <summary>스키마에 있는 스키마 요소의 컬렉션을 가져오며 <see langword="schema" /> 요소 수준에서 새 요소 형식을 추가하는 데 사용됩니다.</summary>
      <returns>스키마에 있는 스키마 요소의 <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />입니다.</returns>
    </member>
    <member name="F:System.Xml.Schema.XmlSchema.Namespace">
      <summary>XML 스키마 네임스페이스입니다. 이 필드는 상수입니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Notations">
      <summary>스키마에 있는 모든 표기법에 대한 스키마 컴파일 이후 값을 가져옵니다.</summary>
      <returns>스키마에 있는 모든 표기법의 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.IO.Stream,System.Xml.Schema.ValidationEventHandler)">
      <summary>제공된 스트림에서 XML 스키마를 읽습니다.</summary>
      <param name="stream">제공된 데이터 스트림입니다.</param>
      <param name="validationEventHandler">XML 스키마 구문 오류에 대한 정보를 수신하는 유효성 검사 이벤트 처리기입니다.</param>
      <returns>XML 스키마를 나타내는 <see cref="T:System.Xml.Schema.XmlSchema" /> 개체입니다.</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
        <see cref="T:System.Xml.Schema.XmlSchemaException" />를 지정하지 않으면 <see cref="T:System.Xml.Schema.ValidationEventHandler" />이 발생합니다.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.IO.TextReader,System.Xml.Schema.ValidationEventHandler)">
      <summary>제공된 <see cref="T:System.IO.TextReader" />에서 XML 스키마를 읽습니다.</summary>
      <param name="reader">읽을 XML 스키마를 포함하는 <see langword="TextReader" />입니다.</param>
      <param name="validationEventHandler">XML 스키마 구문 오류에 대한 정보를 수신하는 유효성 검사 이벤트 처리기입니다.</param>
      <returns>XML 스키마를 나타내는 <see cref="T:System.Xml.Schema.XmlSchema" /> 개체입니다.</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
        <see cref="T:System.Xml.Schema.XmlSchemaException" />를 지정하지 않으면 <see cref="T:System.Xml.Schema.ValidationEventHandler" />이 발생합니다.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.Xml.XmlReader,System.Xml.Schema.ValidationEventHandler)">
      <summary>제공된 <see cref="T:System.Xml.XmlReader" />에서 XML 스키마를 읽습니다.</summary>
      <param name="reader">읽을 XML 스키마를 포함하는 <see langword="XmlReader" />입니다.</param>
      <param name="validationEventHandler">XML 스키마 구문 오류에 대한 정보를 수신하는 유효성 검사 이벤트 처리기입니다.</param>
      <returns>XML 스키마를 나타내는 <see cref="T:System.Xml.Schema.XmlSchema" /> 개체입니다.</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
        <see cref="T:System.Xml.Schema.XmlSchemaException" />를 지정하지 않으면 <see cref="T:System.Xml.Schema.ValidationEventHandler" />이 발생합니다.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.SchemaTypes">
      <summary>스키마에 있는 모든 스키마 형식의 스키마 컴파일 이후 값을 가져옵니다.</summary>
      <returns>스키마에 있는 모든 스키마 형식의 <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.TargetNamespace">
      <summary>스키마 대상 네임스페이스의 URI(Uniform Resource Identifier)를 가져오거나 설정합니다.</summary>
      <returns>스키마 대상 네임스페이스입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.UnhandledAttributes">
      <summary>스키마 대상 네임스페이스에 속하지 않는 정규화된 특성을 가져오거나 설정합니다.</summary>
      <returns>스키마 대상 네임스페이스에 속하지 않는 정규화된 <see cref="T:System.Xml.XmlAttribute" /> 개체의 배열입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Version">
      <summary>스키마의 버전을 가져오거나 설정합니다.</summary>
      <returns>스키마의 버전입니다. 기본값은 <see langword="String.Empty" />입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream)">
      <summary>제공된 데이터 스트림에 XML 스키마를 작성합니다.</summary>
      <param name="stream">제공된 데이터 스트림입니다.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream,System.Xml.XmlNamespaceManager)">
      <summary>지정된 <see cref="T:System.IO.Stream" />를 사용하여 제공된 <see cref="T:System.Xml.XmlNamespaceManager" />에 XML 스키마를 씁니다.</summary>
      <param name="stream">제공된 데이터 스트림입니다.</param>
      <param name="namespaceManager">
        <see cref="T:System.Xml.XmlNamespaceManager" />
      </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter)">
      <summary>제공된 <see cref="T:System.IO.TextWriter" />에 XML 스키마를 작성합니다.</summary>
      <param name="writer">쓸 <see cref="T:System.IO.TextWriter" />입니다.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter,System.Xml.XmlNamespaceManager)">
      <summary>제공된 <see cref="T:System.IO.TextWriter" />에 XML 스키마를 작성합니다.</summary>
      <param name="writer">쓸 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="namespaceManager">
        <see cref="T:System.Xml.XmlNamespaceManager" />
      </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter)">
      <summary>제공된 <see cref="T:System.Xml.XmlWriter" />에 XML 스키마를 작성합니다.</summary>
      <param name="writer">쓸 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 매개 변수가 null인 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter,System.Xml.XmlNamespaceManager)">
      <summary>제공된 <see cref="T:System.Xml.XmlWriter" />에 XML 스키마를 작성합니다.</summary>
      <param name="writer">쓸 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
      <param name="namespaceManager">
        <see cref="T:System.Xml.XmlNamespaceManager" />
      </param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAll">
      <summary>W3C(World Wide Web 컨소시엄) <see langword="all" /> 요소(compositor)를 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAll.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAll" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAll.Items">
      <summary>
        <see langword="XmlSchemaElement" /> compositor 내에 포함된 <see langword="all" /> 요소의 컬렉션을 가져옵니다.</summary>
      <returns>
        <see langword="XmlSchemaAll" /> 내에 포함된 요소의 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnnotated">
      <summary>주석 요소를 포함할 수 있는 요소의 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnnotated.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAnnotated" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.Annotation">
      <summary>
        <see langword="annotation" /> 속성을 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="annotation" /> 속성을 나타내는 <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.Id">
      <summary>문자열 ID를 가져오거나 설정합니다.</summary>
      <returns>문자열 id입니다. 기본값은 <see langword="String.Empty" />입니다. 선택 사항입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.UnhandledAttributes">
      <summary>현재 스키마의 대상 네임스페이스에 속하지 않는 정규화된 특성을 가져오거나 설정합니다.</summary>
      <returns>스키마의 대상 네임스페이스에 속하지 않는 정규화된 <see cref="T:System.Xml.XmlAttribute" /> 개체의 배열입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnnotation">
      <summary>W3C(World Wide Web 컨소시엄) <see langword="annotation" /> 요소를 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnnotation.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.Id">
      <summary>문자열 ID를 가져오거나 설정합니다.</summary>
      <returns>문자열 id입니다. 기본값은 <see langword="String.Empty" />입니다. 선택 사항입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.Items">
      <summary>
        <see langword="Items" />와 <see langword="appinfo" /> 자식 요소를 저장하는 데 사용되는 <see langword="documentation" /> 컬렉션을 가져옵니다.</summary>
      <returns>
        <see langword="appinfo" /> 및 <see langword="documentation" /> 자식 요소의 <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.UnhandledAttributes">
      <summary>스키마의 대상 네임스페이스에 속하지 않는 정규화된 특성을 가져오거나 설정합니다.</summary>
      <returns>스키마의 대상 네임스페이스에 속하지 않는 <see cref="T:System.Xml.XmlAttribute" /> 개체의 배열입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAny">
      <summary>W3C(World Wide Web 컨소시엄) <see langword="any" /> 요소를 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAny.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAny" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAny.Namespace">
      <summary>사용 가능한 요소를 포함하는 네임스페이스를 가져오거나 설정합니다.</summary>
      <returns>사용 가능한 요소를 위한 네임스페이스입니다. 기본값은 <see langword="##any" />입니다. 선택 사항입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAny.ProcessContents">
      <summary>애플리케이션 또는 XML 프로세서가 <see langword="any" /> 요소에 의해 지정된 요소에 대해 XML 문서의 유효성 검사를 처리하는 방법에 대한 정보를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaContentProcessing" /> 값 중 하나입니다. <see langword="processContents" /> 특성이 지정되지 않은 경우 기본값은 <see langword="Strict" />입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnyAttribute">
      <summary>W3C(World Wide Web 컨소시엄) <see langword="anyAttribute" /> 요소를 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnyAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnyAttribute.Namespace">
      <summary>사용 가능한 특성을 포함하는 네임스페이스를 가져오거나 설정합니다.</summary>
      <returns>사용 가능한 특성을 위한 네임스페이스입니다. 기본값은 <see langword="##any" />입니다. 선택 사항입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnyAttribute.ProcessContents">
      <summary>애플리케이션 또는 XML 프로세서가 <see langword="anyAttribute" /> 요소에 의해 지정된 특성에 대해 XML 문서의 유효성 검사를 처리하는 방법에 대한 정보를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaContentProcessing" /> 값 중 하나입니다. <see langword="processContents" /> 특성이 지정되지 않은 경우 기본값은 <see langword="Strict" />입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAppInfo">
      <summary>W3C(World Wide Web 컨소시엄) <see langword="appinfo" /> 요소를 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAppInfo.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAppInfo" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAppInfo.Markup">
      <summary>
        <see langword="appinfo" /> 자식 노드를 나타내는 <see cref="T:System.Xml.XmlNode" /> 개체의 배열을 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="appinfo" /> 자식 노드를 나타내는 <see cref="T:System.Xml.XmlNode" /> 개체의 배열입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAppInfo.Source">
      <summary>애플리케이션 정보 소스를 가져오거나 설정합니다.</summary>
      <returns>URI(Uniform Resource Identifier) 참조. 기본값은 <see langword="String.Empty" />입니다. 선택 사항입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttribute">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="attribute" /> 요소를 나타냅니다. 특성은 다른 문서 요소에 대한 추가 정보를 제공합니다. 특성 태그는 스키마에 대한 문서 요소의 태그 사이에 중첩됩니다. XML 문서에서는 특성이 요소의 여는 태그에 명명된 항목으로 표시됩니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.AttributeSchemaType">
      <summary>특성의 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 또는 <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType" />에 따라 특성의 형식을 나타내는 <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName" /> 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 개체</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.AttributeType">
      <summary>
        <see langword="AttributeType" /> 속성의 컴파일 이후 값을 보유하는 특성의 <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType" /> 또는 <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName" />을 기준으로 CLR(공용 런타임 라이브러리) 개체를 가져옵니다.</summary>
      <returns>
        <see langword="AttributeType" /> 속성의 컴파일 이후 값을 보유하는 CLR(공용 런타임 라이브러리) 개체입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.DefaultValue">
      <summary>특성의 기본값을 가져오거나 설정합니다.</summary>
      <returns>특성의 기본값입니다. 기본값은 null 참조입니다. 선택 사항입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.FixedValue">
      <summary>특성의 고정 값을 가져오거나 설정합니다.</summary>
      <returns>특성의 고정 값입니다. 기본값은 Null입니다. 선택 사항입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Form">
      <summary>특성의 폼을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 값 중 하나입니다. 기본값은 특성을 포함하는 스키마 요소의 <see cref="P:System.Xml.Schema.XmlSchema.AttributeFormDefault" /> 값입니다. 선택 사항입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Name">
      <summary>특성의 이름을 가져오거나 설정합니다.</summary>
      <returns>특성 이름입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.QualifiedName">
      <summary>특성에 대한 정규화된 이름을 가져옵니다.</summary>
      <returns>
        <see langword="QualifiedName" /> 속성의 컴파일 이후 값입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.RefName">
      <summary>이 스키마 또는 지정된 네임스페이스에 의해 표시되는 다른 스키마에서 선언된 특성의 이름을 가져오거나 설정합니다.</summary>
      <returns>선언된 특성의 이름입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType">
      <summary>특성 형식을 단순 형식으로 가져오거나 설정합니다.</summary>
      <returns>이 스키마에서 정의된 단순 형식입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName">
      <summary>이 스키마 또는 지정된 네임스페이스에 의해 표시된 다른 스키마에서 정의된 단순 형식의 이름을 가져오거나 설정합니다.</summary>
      <returns>단순 형식의 이름입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Use">
      <summary>특성이 사용되는 방법에 대한 정보를 가져오거나 설정합니다.</summary>
      <returns>None, Prohibited, Optional 또는 Required 중 하나의 값입니다. 기본값은 Optional입니다. 선택 사항입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttributeGroup">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="attributeGroup" /> 요소를 나타냅니다. AttributesGroups는 복합 형식 정의에 그룹으로 통합할 수 있도록 특성 선언 집합을 그룹화하는 메커니즘을 제공합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttributeGroup.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.AnyAttribute">
      <summary>특성 그룹의 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 구성 요소를 가져오거나 설정합니다.</summary>
      <returns>W3C(World Wide Web 컨소시엄) <see langword="anyAttribute" /> 요소입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.Attributes">
      <summary>특성 그룹에 대한 특성 컬렉션을 가져옵니다. <see langword="XmlSchemaAttribute" />와 <see langword="XmlSchemaAttributeGroupRef" /> 요소를 포함합니다.</summary>
      <returns>특성 그룹에 대한 특성 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.Name">
      <summary>특성 그룹의 이름을 가져오거나 설정합니다.</summary>
      <returns>특성 그룹의 이름입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.QualifiedName">
      <summary>특성 그룹의 정규화된 이름을 가져옵니다.</summary>
      <returns>특성 그룹의 정규화된 이름입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.RedefinedAttributeGroup">
      <summary>XML 스키마에서 다시 정의된 특성 그룹 속성을 가져옵니다.</summary>
      <returns>다시 정의된 특성 그룹 속성입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttributeGroupRef">
      <summary>W3C(World Wide Web 컨소시엄)에 지정된 XML 스키마의 <see langword="ref" /> 특성을 가진 <see langword="attributeGroup" /> 요소를 나타냅니다. AttributesGroupRef는 attributeGroup에 대한 참조이며 name 속성에는 참조되는 특성 그룹이 포함됩니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttributeGroupRef.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroupRef.RefName">
      <summary>참조된 <see langword="attributeGroup" /> 요소의 이름을 가져오거나 설정합니다.</summary>
      <returns>참조된 특성 그룹의 이름입니다. 값은 QName이어야 합니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaChoice">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="choice" /> 요소(작성자)를 나타냅니다. <see langword="choice" />는 해당 자식 중 하나만 인스턴스에 나타나도록 합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaChoice.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaChoice" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaChoice.Items">
      <summary>compositor(<see langword="choice" />)에 포함된 <see langword="XmlSchemaElement" />, <see langword="XmlSchemaGroupRef" />, <see langword="XmlSchemaChoice" />, <see langword="XmlSchemaSequence" /> 또는 <see langword="XmlSchemaAny" /> 등의 요소 컬렉션을 가져옵니다.</summary>
      <returns>
        <see langword="XmlSchemaChoice" />에 포함된 요소의 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCollection">
      <summary>XSD(XML 스키마 정의 언어)와 XDR(XML-Data Reduced) 스키마의 캐시를 포함합니다. <see cref="T:System.Xml.Schema.XmlSchemaCollection" /> 클래스는 사용되지 않습니다. 대신 <see cref="T:System.Xml.Schema.XmlSchemaSet" />를 사용하세요.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.#ctor">
      <summary>
        <see langword="XmlSchemaCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.#ctor(System.Xml.XmlNameTable)">
      <summary>지정된 <see langword="XmlSchemaCollection" />를 사용하여 <see cref="T:System.Xml.XmlNameTable" /> 클래스의 새 인스턴스를 초기화합니다. <see langword="XmlNameTable" />은 스키마를 로드할 때 사용합니다.</summary>
      <param name="nametable">사용할 <see langword="XmlNameTable" />입니다.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.String)">
      <summary>지정한 URL에 의해 경로가 지정된 스키마를 스키마 컬렉션에 추가합니다.</summary>
      <param name="ns">스키마에 연결된 네임스페이스 URI입니다. XML 스키마의 경우 일반적으로 <see langword="targetNamespace" />입니다.</param>
      <param name="uri">로드할 스키마를 지정하는 URL입니다.</param>
      <returns>스키마 컬렉션에 추가된 <see cref="T:System.Xml.Schema.XmlSchema" />입니다. 추가되는 스키마가 XDR 스키마이거나 스키마에 컴파일 오류가 있는 경우에는 <see langword="null" />입니다.</returns>
      <exception cref="T:System.Xml.XmlException">올바른 스키마가 아닌 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader)">
      <summary>
        <see cref="T:System.Xml.XmlReader" />에 포함된 스키마를 스키마 컬렉션에 추가합니다.</summary>
      <param name="ns">스키마에 연결된 네임스페이스 URI입니다. XML 스키마의 경우 일반적으로 <see langword="targetNamespace" />입니다.</param>
      <param name="reader">추가할 스키마를 포함하는 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <returns>스키마 컬렉션에 추가된 <see cref="T:System.Xml.Schema.XmlSchema" />입니다. 추가되는 스키마가 XDR 스키마이거나 스키마에 컴파일 오류가 있는 경우에는 <see langword="null" />입니다.</returns>
      <exception cref="T:System.Xml.XmlException">올바른 스키마가 아닌 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader,System.Xml.XmlResolver)">
      <summary>
        <see cref="T:System.Xml.XmlReader" />에 포함된 스키마를 스키마 컬렉션에 추가합니다. 지정된 <see cref="T:System.Xml.XmlResolver" />는 외부 리소스를 확인하는 데 사용됩니다.</summary>
      <param name="ns">스키마에 연결된 네임스페이스 URI입니다. XML 스키마의 경우 일반적으로 <see langword="targetNamespace" />입니다.</param>
      <param name="reader">추가할 스키마를 포함하는 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <param name="resolver">
        <see cref="T:System.Xml.XmlResolver" />는 <see langword="include" /> 및 <see langword="import" /> 요소 또는 <see langword="x-schema" /> 특성(XDR 스키마)에서 참조된 네임스페이스를 확인하는 데 사용됩니다. 이 해결 프로그램이 <see langword="null" />이면 외부 참조는 확인되지 않습니다.</param>
      <returns>스키마 컬렉션에 추가된 <see cref="T:System.Xml.Schema.XmlSchema" />입니다. 추가되는 스키마가 XDR 스키마이거나 스키마에 컴파일 오류가 있는 경우에는 <see langword="null" />입니다.</returns>
      <exception cref="T:System.Xml.XmlException">올바른 스키마가 아닌 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchema" />를 컬렉션에 추가합니다.</summary>
      <param name="schema">컬렉션에 추가할 <see langword="XmlSchema" />입니다.</param>
      <returns>
        <see langword="XmlSchema" /> 개체</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema,System.Xml.XmlResolver)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchema" />를 컬렉션에 추가합니다. 지정된 <see cref="T:System.Xml.XmlResolver" />는 외부 참조를 확인하는 데 사용됩니다.</summary>
      <param name="schema">컬렉션에 추가할 <see langword="XmlSchema" />입니다.</param>
      <param name="resolver">
        <see langword="include" /> 및 <see langword="import" /> 요소에서 참조된 모든 네임스페이스를 확인하는 데 사용할 <see cref="T:System.Xml.XmlResolver" />입니다. 이 해결 프로그램이 <see langword="null" />이면 외부 참조는 확인되지 않습니다.</param>
      <returns>스키마 컬렉션에 추가된 <see langword="XmlSchema" />입니다.</returns>
      <exception cref="T:System.Xml.XmlException">올바른 스키마가 아닌 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchemaCollection)">
      <summary>지정한 컬렉션에 정의된 네임스페이스(연결된 스키마 포함)를 모두 이 컬렉션에 추가합니다.</summary>
      <param name="schema">이 컬렉션에 추가할 <see langword="XmlSchemaCollection" />입니다.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Contains(System.String)">
      <summary>지정된 네임스페이스를 가진 스키마가 컬렉션에 있는지를 나타내는 값을 가져옵니다.</summary>
      <param name="ns">스키마에 연결된 네임스페이스 URI입니다. XML 스키마의 경우 일반적으로 대상 네임스페이스입니다.</param>
      <returns>지정된 네임스페이스가 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Contains(System.Xml.Schema.XmlSchema)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchema" />의 <see langword="targetNamespace" />가 컬렉션에 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="schema">
        <see langword="XmlSchema" /> 개체</param>
      <returns>동일한 <see langword="true" />를 가진 스키마가 컬렉션에 있으면 <see langword="targetNamespace" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary>지정된 인덱스에서 시작하여 지정된 배열에 이 컬렉션의 <see langword="XmlSchema" /> 개체를 모두 복사합니다.</summary>
      <param name="array">개체를 복사할 대상 배열입니다.</param>
      <param name="index">복사를 시작할 <paramref name="array" />의 인덱스입니다.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.Count">
      <summary>이 컬렉션에 정의된 네임스페이스의 수를 가져옵니다.</summary>
      <returns>이 컬렉션에 정의된 네임스페이스의 수입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.GetEnumerator">
      <summary>스키마 컬렉션에 대해 개별 스타일 반복을 지원합니다.</summary>
      <returns>현재 컬렉션에 포함된 모든 스키마에 대한 반복을 위한 열거자입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.Item(System.String)">
      <summary>지정한 네임스페이스 URI에 연결된 <see cref="T:System.Xml.Schema.XmlSchema" />를 가져옵니다.</summary>
      <param name="ns">반환할 스키마에 연결된 네임스페이스 URI입니다. 이것은 대개 스키마의 <see langword="targetNamespace" />가 됩니다.</param>
      <returns>네임스페이스 URI에 연결된 <see langword="XmlSchema" />입니다. 지정한 네임스페이스에 연결되어 있는 로드된 스키마가 없거나 네임스페이스가 XDR 스키마에 연결되어 있는 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.NameTable">
      <summary>새 스키마를 로드할 때 <see langword="XmlNameTable" />에서 사용하는 기본 <see langword="XmlSchemaCollection" />을 가져옵니다.</summary>
      <returns>
        <see langword="XmlNameTable" />입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)" />를 참조하세요.</summary>
      <param name="array">개체를 복사할 대상 배열입니다.</param>
      <param name="index">복사를 시작할 <paramref name="array" />의 인덱스입니다.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#Count">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.Xml.Schema.XmlSchemaCollection.Count" />를 참조하세요.</summary>
      <returns>컬렉션에 있는 항목의 수입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#IsSynchronized">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#IsSynchronized" />를 참조하세요.</summary>
      <returns>컬렉션이 동기화되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#SyncRoot">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#SyncRoot" />를 참조하세요.</summary>
      <returns>컬렉션에 대 한 액세스를 동기화 하는 데 사용할 수 있는 개체입니다.<see cref="P:System.Collections.ICollection.SyncRoot" /></returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.Schema.XmlSchemaCollection.GetEnumerator" />를 참조하십시오.</summary>
      <returns>컬렉션에 대한 <see cref="T:System.Collections.IEnumerator" />를 반환합니다.</returns>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaCollection.ValidationEventHandler">
      <summary>XDR 및 XML 스키마 유효성 검사 오류에 대한 정보를 받는 이벤트 처리기를 설정합니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCollectionEnumerator">
      <summary>컬렉션에서 단순하게 반복할 수 있도록 지원합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.Current">
      <summary>컬렉션의 현재 <see cref="T:System.Xml.Schema.XmlSchema" />를 가져옵니다.</summary>
      <returns>컬렉션의 현재 <see langword="XmlSchema" />입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.MoveNext">
      <summary>열거자를 컬렉션의 다음 스키마로 이동합니다.</summary>
      <returns>이동이 성공적으로 이루어진 경우 <see langword="true" />이고, 열거자가 컬렉션의 끝을 지난 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Current">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.Current" />를 참조하세요.</summary>
      <returns>현재 노드입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#MoveNext">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.MoveNext" />를 참조하세요.</summary>
      <returns>다음 노드입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Reset">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Reset" />를 참조하십시오.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCompilationSettings">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 클래스에 대한 스키마 컴파일 옵션을 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCompilationSettings.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />에서 UPA(Unique Particle Attribution) 위반을 검사해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />에서 UPA(Unique Particle Attribution) 위반을 검사해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContent">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="complexContent" /> 요소를 나타냅니다. 이 클래스는 복합 형식의 복합 콘텐츠 모델을 나타내며 혼합 콘텐츠나 요소만 있는 복합 형식에 대한 확장이나 제한을 포함합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContent.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaComplexContent" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContent.Content">
      <summary>콘텐츠를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaComplexContentRestriction" /> 또는 <see cref="T:System.Xml.Schema.XmlSchemaComplexContentExtension" /> 클래스 중 하나입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContent.IsMixed">
      <summary>형식이 혼합 콘텐츠 모델을 포함하는지 여부를 결정하는 정보를 가져오거나 설정합니다.</summary>
      <returns>이 속성이 <see langword="true" />이면 문자 데이터를 복합 형식(혼합 콘텐츠 모델)의 자식 요소들 사이에 표시할 수 있습니다. 기본값은 <see langword="false" />입니다. 선택적 요소.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContentExtension">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="extension" /> 요소를 나타냅니다. 이 클래스는 확장에 의해 파생된 복합 콘텐츠 모델을 포함하는 복합 형식용이며 특성 또는 요소를 추가하여 복합 형식을 확장합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContentExtension.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaComplexContentExtension" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.AnyAttribute">
      <summary>복합 콘텐츠 모델의 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 구성 요소를 가져오거나 설정합니다.</summary>
      <returns>복합 콘텐츠 모델의 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 구성 요소입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.Attributes">
      <summary>복합 내용에 대한 특성 컬렉션을 가져옵니다. <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />와 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 요소를 포함합니다.</summary>
      <returns>복합 내용에 대한 특성 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.BaseTypeName">
      <summary>확장에 의해 이 형식이 파생된 복합 형식의 이름을 가져오거나 설정합니다.</summary>
      <returns>확장에 의해 이 형식이 파생된 복합 형식의 이름입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.Particle">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" /> 또는 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 클래스 중 하나를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" /> 또는 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 클래스 중 하나입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContentRestriction">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="restriction" /> 요소를 나타냅니다. 이 클래스는 제한에 의해 파생된 복합 콘텐츠 모델을 포함하는 복합 형식용이며 복합 형식의 콘텐츠를 상속된 복합 형식의 하위 집합으로 제한합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContentRestriction.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaComplexContentRestriction" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.AnyAttribute">
      <summary>복합 콘텐츠 모델의 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 구성 요소를 가져오거나 설정합니다.</summary>
      <returns>복합 콘텐츠 모델의 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 구성 요소입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.Attributes">
      <summary>복합 형식에 대한 특성 컬렉션을 가져옵니다. <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />와 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 요소를 포함합니다.</summary>
      <returns>복합 형식에 대한 특성 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.BaseTypeName">
      <summary>제한에 의해 이 형식이 파생된 기본 복합 형식의 이름을 가져오거나 설정합니다.</summary>
      <returns>제한에 의해 이 형식이 파생된 기본 복합 형식의 이름입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.Particle">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" /> 또는 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 클래스 중 하나를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" /> 또는 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 클래스 중 하나입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexType">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="complexType" /> 요소를 나타냅니다. 이 클래스는 요소의 콘텐츠 및 특성 집합을 결정하는 복합 형식을 정의합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexType.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AnyAttribute">
      <summary>복합 형식의 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 구성 요소에 대한 값을 가져오거나 설정합니다.</summary>
      <returns>복합 형식의 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 구성 요소입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Attributes">
      <summary>복합 형식에 대한 특성 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />와 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 클래스를 포함합니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AttributeUses">
      <summary>이 복합 형식과 해당 기본 형식의 모든 컴파일된 특성의 컬렉션을 가져옵니다.</summary>
      <returns>이 복합 형식과 그 네이티브 형식의 모든 특성 컬렉션입니다. <see langword="AttributeUses" /> 속성의 컴파일 이후 값입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AttributeWildcard">
      <summary>이 복합 형식과 해당 기본 형식에 대한 <see langword="anyAttribute" />의 컴파일 이후 값을 가져옵니다.</summary>
      <returns>
        <see langword="anyAttribute" /> 요소의 컴파일 이후 값입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Block">
      <summary>
        <see langword="block" /> 특성을 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="block" /> 특성은 복합 형식을 지정된 파생 형식에서 사용하지 못하게 합니다. 기본값은 <see langword="XmlSchemaDerivationMethod.None" />입니다. 선택 사항입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.BlockResolved">
      <summary>형식이 스키마 유효성 검사 이후 정보 집합(infoset)에 컴파일된 후의 값을 가져옵니다. 이 값은 <see langword="xsi:type" />이 인스턴스 문서에서 사용되는 경우 형식이 적용되는 방법을 나타냅니다.</summary>
      <returns>스키마 유효성 검사 이후 정보 집합 값입니다. 기본값은 <see langword="BlockDefault" /> 요소의 <see langword="schema" /> 값입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentModel">
      <summary>이 복합 형식의 컴파일 이후 <see cref="T:System.Xml.Schema.XmlSchemaContentModel" />을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleContent" /> 또는 <see cref="T:System.Xml.Schema.XmlSchemaComplexContent" /> 클래스 중 하나인 콘텐츠 모델 형식입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentType">
      <summary>컴파일 이후 값을 보유하는 복합 형식의 콘텐츠 모델을 가져옵니다.</summary>
      <returns>복합 형식에 대한 콘텐츠 모델의 컴파일 이후 값입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentTypeParticle">
      <summary>
        <see cref="P:System.Xml.Schema.XmlSchemaComplexType.ContentType" /> 파티클의 컴파일 이후 값을 보유하는 파티클을 가져옵니다.</summary>
      <returns>콘텐츠 형식에 대한 파티클입니다. <see cref="P:System.Xml.Schema.XmlSchemaComplexType.ContentType" /> 파티클의 컴파일 이후 값입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.IsAbstract">
      <summary>
        <see langword="complexType" /> 요소를 인스턴스 문서에서 사용할 수 있는지 여부를 결정하는 정보를 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="true" />이면 요소는 이 <see langword="complexType" /> 요소를 직접 사용할 수 없고 이 <see langword="complexType" /> 요소에서 파생되는 복합 형식을 사용해야 합니다. 기본값은 <see langword="false" />입니다. 선택 사항입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.IsMixed">
      <summary>복합 형식이 혼합 콘텐츠 모델(콘텐츠 내의 태그)을 포함하는지 여부를 결정하는 정보를 가져오거나 설정합니다.</summary>
      <returns>문자 데이터를 이 복합 형식의 자식 요소들 사이에 표시할 수 있는 경우에는 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다. 선택 사항입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Particle">
      <summary>compositor 형식을 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" /> 또는 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 클래스 중 하나로 가져오거나 설정합니다.</summary>
      <returns>compositor 형식입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContent">
      <summary>스키마 내용에 대한 추상 클래스입니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaContent.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaContent" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentModel">
      <summary>형식의 자식 요소에 대한 순서 및 구조를 지정합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaContentModel.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaContentModel" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaContentModel.Content">
      <summary>형식의 내용을 가져오거나 설정합니다.</summary>
      <returns>형식의 내용을 제공합니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentProcessing">
      <summary>
        <see langword="any" /> 및 <see langword="anyAttribute" /> 요소의 대체에 대한 유효성 검사 모드 정보를 제공합니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Lax">
      <summary>연결된 스키마가 있으면 문서 항목의 유효성이 검사됩니다. 그렇지 않으면 오류가 throw되지 않습니다.
항목의 유효성이 검사되지 않은 경우 XML 프로세서는 <see cref="P:System.Xml.Schema.ValidationEventArgs.Severity" /> = <see langword="XmlSeverityType.Warning" />을 사용하여 유효성 검사 이벤트 처리기를 통해 클라이언트에 알리려고 합니다. 유효성 검사 이벤트 처리기가 설정되지 않은 경우에는 경고가 생성될 때 정보가 반환되지 않습니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.None">
      <summary>문서 항목의 유효성이 검사되지 않습니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Skip">
      <summary>문서 항목은 올바른 형식의 XML로 구성되어야 하며 스키마에 대해 유효성이 검사되지 않습니다.
XML 프로세서는 <see cref="P:System.Xml.Schema.ValidationEventArgs.Severity" /> = <see langword="XmlSeverityType.Warning" />을 사용하여 유효성 검사 이벤트 처리기를 통해 해당 항목에 대한 유효성 검사가 수행되지 않았음을 클라이언트에 알리려고 합니다. 유효성 검사 이벤트 처리기가 설정되지 않은 경우에는 경고가 생성될 때 정보가 반환되지 않습니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Strict">
      <summary>스키마 프로세서는 표시된 네임스페이스와 연결된 스키마를 찾아 문서 항목의 유효성을 검사해야 합니다.
프로세서가 스키마를 찾을 수 없거나 항목이 유효하지 않은 경우 XML 프로세서는 <see cref="P:System.Xml.Schema.ValidationEventArgs.Severity" /> = <see langword="XmlSeverityType.Warning" />을 사용하여 유효성 검사 이벤트 처리기를 통해 클라이언트에 알리려고 합니다. 유효성 검사 오류가 발생하고 유효성 검사 이벤트 처리기가 제공되지 않으면 예외가 throw됩니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentType">
      <summary>복합 형식의 콘텐츠 모델에 대한 열거형입니다. 이것은 스키마 유효성 검사 이후 정보 집합(infoset)의 내용을 나타냅니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.ElementOnly">
      <summary>요소 전용 콘텐츠입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.Empty">
      <summary>빈 콘텐츠입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.Mixed">
      <summary>혼합 내용입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.TextOnly">
      <summary>텍스트 전용 콘텐츠입니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDatatype">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 클래스는 XSD(XML 스키마 정의 언어) 형식을 CLR(공용 언어 런타임) 형식에 매핑하는 추상 클래스입니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ChangeType(System.Object,System.Type)">
      <summary>지정된 값을 지정된 CLR(공용 언어 런타임) 형식으로 변환합니다. 이 때 원래 값은 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />으로 표시되는 XML 스키마 형식에 대한 유효한 CLR 표현 형식 중 하나입니다.</summary>
      <param name="value">지정된 형식으로 변환할 입력 값입니다.</param>
      <param name="targetType">입력 값을 변환할 대상 형식입니다.</param>
      <returns>변환된 입력 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Object" /> 또는 <see cref="T:System.Type" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />이 나타내는 형식이 지정된 값 형식에서 지정된 대상 형식으로의 변환을 지원하지 않는 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ChangeType(System.Object,System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />이 xs:QName 형식 또는 여기에서 파생된 형식을 나타내는 경우, 지정된 값을 <see cref="T:System.Xml.IXmlNamespaceResolver" />를 사용하여 특정 CLR(공용 언어 런타임) 형식으로 변환합니다. 이 때 원래 값은 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />으로 표시되는 XML 스키마 형식에 대한 유효한 CLR 표현 형식 중 하나입니다.</summary>
      <param name="value">지정된 형식으로 변환할 입력 값입니다.</param>
      <param name="targetType">입력 값을 변환할 대상 형식입니다.</param>
      <param name="namespaceResolver">네임스페이스 접두사를 확인하는 데 사용되는 <see cref="T:System.Xml.IXmlNamespaceResolver" />입니다. 이 매개 변수는 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />이 xs:QName 형식 또는 이 형식에서 파생된 형식을 나타내는 경우에만 사용됩니다.</param>
      <returns>변환된 입력 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Object" /> 또는 <see cref="T:System.Type" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />이 나타내는 형식이 지정된 값 형식에서 지정된 대상 형식으로의 변환을 지원하지 않는 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)">
      <summary>
        <see cref="M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)" /> 메서드는 항상 <see langword="false" />를 반환합니다.</summary>
      <param name="datatype">
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />
      </param>
      <returns>항상 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ParseValue(System.String,System.Xml.XmlNameTable,System.Xml.IXmlNamespaceResolver)">
      <summary>파생 클래스에서 재정의된 경우 기본 제공되거나 사용자 정의된 단순 형식에 대해 지정한 <see langword="string" />의 유효성을 검사합니다.</summary>
      <param name="s">단순 형식에 대해 유효성을 검사할 <see langword="string" />입니다.</param>
      <param name="nameTable">이 <see cref="T:System.Xml.XmlNameTable" /> 개체가 xs:NCName 형식을 나타내는 경우  <see langword="string" />을 구문 분석하는 동안 원자화에 사용할 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />입니다.</param>
      <param name="nsmgr">이 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 개체가 xs:QName 형식을 나타내는 경우  <see langword="string" />을 구문 분석하는 동안 사용할 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 개체입니다.</param>
      <returns>
        <see cref="T:System.Object" /> 속성에서 반환하는 형식으로 안전하게 캐스팅할 수 있는 <see cref="P:System.Xml.Schema.XmlSchemaDatatype.ValueType" />입니다.</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">입력 값이 이 W3C XML 스키마 형식의 올바른 인스턴스가 아닌 경우</exception>
      <exception cref="T:System.ArgumentNullException">구문 분석할 값이 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.TokenizedType">
      <summary>파생 클래스에서 재정의된 경우 W3C(World Wide Web 컨소시엄) XML 1.0 사양에 지정된 대로 <see langword="string" />의 형식을 가져옵니다.</summary>
      <returns>
        <see langword="string" />에 대한 <see cref="T:System.Xml.XmlTokenizedType" /> 값입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.TypeCode">
      <summary>단순 형식에 대한 <see cref="T:System.Xml.Schema.XmlTypeCode" /> 값을 가져옵니다.</summary>
      <returns>단순 형식에 대한 <see cref="T:System.Xml.Schema.XmlTypeCode" /> 값입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.ValueType">
      <summary>파생 클래스에서 재정의된 경우 항목의 CLR(공용 언어 런타임) 형식을 가져옵니다.</summary>
      <returns>항목의 CLR(공용 언어 런타임) 형식입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.Variety">
      <summary>단순 형식에 대한 <see cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety" /> 값을 가져옵니다.</summary>
      <returns>단순 형식에 대한 <see cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety" /> 값입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDatatypeVariety">
      <summary>W3C XML 스키마 데이터 형식의 종류를 지정합니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.Atomic">
      <summary>W3C XML 스키마 atomic 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.List">
      <summary>W3C XML 스키마 list 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.Union">
      <summary>W3C XML 스키마 union 형식입니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDerivationMethod">
      <summary>파생 방지를 위해 서로 다른 메서드를 제공합니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.All">
      <summary>
        <see langword="#all" />. 모든 파생 메서드를 참조합니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Empty">
      <summary>기본 파생 메서드를 재정의하여 파생을 허용합니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Extension">
      <summary>
        <see langword="Extension" />에 의한 파생을 참조합니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.List">
      <summary>
        <see langword="List" />에 의한 파생을 참조합니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.None">
      <summary>기본 파생 메서드를 적용합니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Restriction">
      <summary>
        <see langword="Restriction" />에 의한 파생을 참조합니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Substitution">
      <summary>
        <see langword="Substitution" />에 의한 파생을 참조합니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Union">
      <summary>
        <see langword="Union" />에 의한 파생을 참조합니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDocumentation">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="documentation" /> 요소를 나타냅니다. 이 클래스는 <see langword="annotation" /> 내에서 사용자가 읽거나 사용할 정보를 지정합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDocumentation.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaDocumentation" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Language">
      <summary>
        <see langword="xml:lang" /> 특성을 가져오거나 설정합니다. 이 특성은 내용에 사용되는 언어 표시기의 역할을 합니다.</summary>
      <returns>
        <see langword="xml:lang" /> 특성입니다. 선택 사항입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Markup">
      <summary>설명서 자식 노드를 나타내는 <see langword="XmlNodes" />의 배열을 가져오거나 설정합니다.</summary>
      <returns>설명서 자식 노드를 나타내는 배열입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Source">
      <summary>정보의 URI(Uniform Resource Identifier) 소스를 가져오거나 설정합니다.</summary>
      <returns>URI 참조입니다. 기본값은 <see langword="String.Empty" />입니다. 선택 사항입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaElement">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="element" /> 요소를 나타냅니다. 이 클래스는 모든 파티클 형식의 기본 클래스이며 XML 문서에서 요소를 설명하는 데 사용됩니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaElement.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Block">
      <summary>
        <see langword="Block" /> 파생을 가져오거나 설정합니다.</summary>
      <returns>형식 파생을 차단하는 데 사용되는 특성입니다. 기본값은 <see langword="XmlSchemaDerivationMethod.None" />여야 합니다. 선택 사항입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.BlockResolved">
      <summary>
        <see langword="Block" /> 속성의 컴파일 이후 값을 가져옵니다.</summary>
      <returns>
        <see langword="Block" /> 속성의 컴파일 이후 값입니다. 기본값은 <see langword="BlockDefault" /> 요소의 <see langword="schema" /> 값입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Constraints">
      <summary>요소에 대한 제약 조건의 컬렉션을 가져옵니다.</summary>
      <returns>제약 조건 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.DefaultValue">
      <summary>요소의 내용이 단순 형식이거나 <see langword="textOnly" />인 경우 해당 요소의 기본값을 가져오거나 설정합니다.</summary>
      <returns>요소의 기본값입니다. 기본값은 null 참조입니다. 선택 사항입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.ElementSchemaType">
      <summary>요소의 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 또는 <see cref="P:System.Xml.Schema.XmlSchemaElement.SchemaType" /> 값에 따라 요소의 형식을 나타내는 <see cref="P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName" /> 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaType" /> 개체</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.ElementType">
      <summary>
        <see langword="ElementType" /> 속성의 컴파일 이후 값을 보유하는 요소의 <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 또는 <see cref="T:System.Xml.Schema.XmlSchemaElement" />에 기반하는 CLR(공용 언어 런타임) 개체를 가져옵니다.</summary>
      <returns>CLR(공용 언어 런타임) 개체입니다. <see langword="ElementType" /> 속성의 컴파일 이후 값입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Final">
      <summary>추가 파생이 허용되지 않음을 나타내는 <see langword="Final" /> 속성을 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="Final" /> 속성 기본값은 <see langword="XmlSchemaDerivationMethod.None" />입니다. 선택 사항입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.FinalResolved">
      <summary>
        <see langword="Final" /> 속성의 컴파일 이후 값을 가져옵니다.</summary>
      <returns>
        <see langword="Final" /> 속성의 컴파일 이후 값입니다. 기본값은 <see langword="FinalDefault" /> 요소의 <see langword="schema" /> 값입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.FixedValue">
      <summary>고정 값을 가져오거나 설정합니다.</summary>
      <returns>미리 결정되어 변경할 수 없는 고정 값입니다. 기본값은 null 참조입니다. 선택 사항입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Form">
      <summary>요소에 대한 폼을 가져오거나 설정합니다.</summary>
      <returns>요소에 대한 폼입니다. 기본값은 <see cref="P:System.Xml.Schema.XmlSchema.ElementFormDefault" /> 값입니다. 선택 사항입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.IsAbstract">
      <summary>요소를 인스턴스 문서에서 사용할 수 있는지 여부를 나타내는 정보를 가져오거나 설정합니다.</summary>
      <returns>이 값이 <see langword="true" />이면 인스턴스 문서에서 요소를 사용할 수 없습니다. 기본값은 <see langword="false" />입니다. 선택 사항입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.IsNillable">
      <summary>
        <see langword="xsi:nil" />을 인스턴스 데이터에서 사용할 수 있는지 여부를 나타내는 정보를 가져오거나 설정합니다. 명시적 nil 값을 요소에 할당할 수 있는지 여부를 나타냅니다.</summary>
      <returns>nillable이 <see langword="true" />이면 요소의 인스턴스에서 <see langword="nil" /> 특성을 <see langword="true" />로 설정할 수 있습니다. <see langword="nil" /> 특성은 인스턴스에 대한 XML 스키마 네임스페이스의 일부로 정의됩니다. 기본값은 <see langword="false" />입니다. 선택 사항입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Name">
      <summary>요소의 이름을 가져오거나 설정합니다.</summary>
      <returns>요소의 이름을 나타내며 기본값은 <see langword="String.Empty" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.QualifiedName">
      <summary>지정된 요소의 실제 정규화된 이름을 가져옵니다.</summary>
      <returns>요소의 정규화된 이름입니다. <see langword="QualifiedName" /> 속성의 컴파일 이후 값입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.RefName">
      <summary>이 스키마 또는 지정된 네임스페이스가 나타내는 다른 스키마에 선언된 요소의 참조 이름을 가져오거나 설정합니다.</summary>
      <returns>요소의 참조 이름입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SchemaType">
      <summary>요소의 형식을 가져오거나 설정합니다. 이 형식은 복합 형식이거나 단순 형식일 수 있습니다.</summary>
      <returns>요소의 형식입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName">
      <summary>이 스키마 또는 지정된 네임스페이스가 나타내는 다른 스키마에 정의된 기본 제공 데이터 형식의 이름을 가져오거나 설정합니다.</summary>
      <returns>기본 제공 데이터 형식의 이름입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SubstitutionGroup">
      <summary>이 요소로 대체할 요소의 이름을 가져오거나 설정합니다.</summary>
      <returns>이 요소로 대체할 요소의 정규화된 이름입니다. 선택 사항입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaEnumerationFacet">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="enumeration" /> 패싯을 나타냅니다. 이 클래스는 simpleType 요소에 대해 유효한 값 목록을 지정합니다. 선언은 <see langword="restriction" /> 선언 내에 포함됩니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaEnumerationFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaException">
      <summary>스키마 예외에 대한 자세한 정보를 반환합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>지정된 <see langword="XmlSchemaException" /> 및 <see langword="SerializationInfo" /> 정보를 사용하여 <see langword="StreamingContext" />의 모든 속성을 포함하는 새 <see langword="XmlSchemaException" /> 개체를 만듭니다.</summary>
      <param name="info">SerializationInfo.</param>
      <param name="context">StreamingContext.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String)">
      <summary>지정된 예외 메시지를 사용하여 <see cref="T:System.Xml.Schema.XmlSchemaException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류 조건에 대한 <see langword="string" /> 설명입니다.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String,System.Exception)">
      <summary>지정된 예외 메시지 및 예외를 발생시킨 원래 <see cref="T:System.Xml.Schema.XmlSchemaException" /> 개체를 사용하여 <see cref="T:System.Exception" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류 조건에 대한 <see langword="string" /> 설명입니다.</param>
      <param name="innerException">이 예외를 발생시킨 원래 T:System.Exception 개체입니다.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>지정된 예외 메시지, 예외를 발생시킨 원래 <see cref="T:System.Xml.Schema.XmlSchemaException" /> 개체, 줄 번호 및 XML의 줄 위치를 사용하여 <see cref="T:System.Exception" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류 조건에 대한 <see langword="string" /> 설명입니다.</param>
      <param name="innerException">이 예외를 발생시킨 원래 T:System.Exception 개체입니다.</param>
      <param name="lineNumber">이 예외를 발생시킨 XML의 줄 번호입니다.</param>
      <param name="linePosition">이 예외를 발생시킨 XML의 줄 위치입니다.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>모든 <see langword="XmlSchemaException" /> 속성을 지정한 <see langword="SerializationInfo" />의 <see langword="StreamingContext" /> 클래스로 스트리밍합니다.</summary>
      <param name="info">
        <see langword="SerializationInfo" />
      </param>
      <param name="context">
        <see langword="StreamingContext" /> 정보입니다.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.LineNumber">
      <summary>오류가 발생한 곳을 나타내는 줄 번호를 가져옵니다.</summary>
      <returns>오류가 발생한 곳을 나타내는 줄 번호입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.LinePosition">
      <summary>오류가 발생한 곳을 나타내는 줄 위치를 가져옵니다.</summary>
      <returns>오류가 발생한 곳을 나타내는 줄 위치입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.Message">
      <summary>이 예외의 오류 조건 설명을 가져옵니다.</summary>
      <returns>이 예외의 오류 조건 설명입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.SourceSchemaObject">
      <summary>
        <see langword="XmlSchemaObject" />을 생성하는 <see langword="XmlSchemaException" />입니다.</summary>
      <returns>올바른 개체 인스턴스는 XML SOM(스키마 개체 모델)의 구조적 유효성 검사 오류를 나타냅니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.SourceUri">
      <summary>예외를 발생시킨 스키마의 URI(Uniform Resource Identifier) 위치를 가져옵니다.</summary>
      <returns>예외를 발생시킨 스키마의 URI 위치입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaExternal">
      <summary>추상 클래스입니다. 포함된 스키마에 대한 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaExternal.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaExternal" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.Id">
      <summary>문자열 ID를 가져오거나 설정합니다.</summary>
      <returns>문자열 id입니다. 기본값은 <see langword="String.Empty" />입니다. 선택 사항입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.Schema">
      <summary>참조된 스키마에 대한 <see langword="XmlSchema" />를 가져오거나 설정합니다.</summary>
      <returns>참조된 스키마에 대한 <see langword="XmlSchema" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.SchemaLocation">
      <summary>스키마 프로세서에 스키마의 실제 위치를 알려 주는 스키마의 URI(Uniform Resource Identifier) 위치를 가져오거나 설정합니다.</summary>
      <returns>스키마의 URI 위치입니다. 가져온 스키마에 대해 선택적입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.UnhandledAttributes">
      <summary>스키마 대상 네임스페이스에 속하지 않는 정규화된 특성을 가져오거나 설정합니다.</summary>
      <returns>다른 대상 네임스페이스에 속한 정규화된 특성입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaFacet">
      <summary>단순 형식이 제한으로 파생되는 경우 사용되는 모든 패싯에 대한 추상 클래스입니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaFacet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaFacet.IsFixed">
      <summary>이 패싯이 고정되었음을 나타내는 정보를 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="true" />인 경우 값이 고정되고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다. 선택 사항입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaFacet.Value">
      <summary>패싯의 <see langword="value" /> 특성을 가져오거나 설정합니다.</summary>
      <returns>값 특성입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaForm">
      <summary>특성이나 요소를 네임스페이스 접두사로 한정해야 하는지 여부를 나타냅니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.None">
      <summary>스키마에 요소 및 특성 형식을 지정하지 않습니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Qualified">
      <summary>요소와 특성을 네임스페이스 접두사로 한정해야 합니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Unqualified">
      <summary>요소와 특성을 네임스페이스 접두사로 한정할 필요는 없습니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet">
      <summary>simpleType 요소의 소수 값에 입력할 수 있는 자릿수에 대한 제한을 지정합니다. fractionDigits 값은 양의 정수여야 합니다. W3C(World Wide Web 컨소시엄) <see langword="fractionDigits" /> 패싯을 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaFractionDigitsFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroup">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="group" /> 요소를 나타냅니다. 이 클래스는 복합 형식에서 참조되는 <see langword="schema" /> 수준으로 그룹을 정의하며 복합 형식 정의에 그룹으로 통합할 수 있도록 요소 선언 집합을 그룹화합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaGroup.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaGroup" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.Name">
      <summary>스키마 그룹의 이름을 가져오거나 설정합니다.</summary>
      <returns>스키마 그룹의 이름입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.Particle">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" /> 또는 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 클래스 중 하나를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" /> 또는 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 클래스 중 하나입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.QualifiedName">
      <summary>스키마 그룹의 정규화된 이름을 가져옵니다.</summary>
      <returns>스키마 그룹의 정규화된 이름을 나타내는 <see cref="T:System.Xml.XmlQualifiedName" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroupBase">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAll" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" /> 또는 <see cref="T:System.Xml.Schema.XmlSchemaSequence" />에 대한 추상 클래스입니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupBase.Items">
      <summary>이 컬렉션은 compositor에 새 요소를 추가하는 데 사용됩니다.</summary>
      <returns>
        <see langword="XmlSchemaObjectCollection" />입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroupRef">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="ref" /> 특성을 가진 <see langword="group" /> 요소를 나타냅니다. 이 클래스는 <see langword="group" /> 수준에서 정의된 <see langword="schema" />을 참조하는 복합 형식 내에서 사용됩니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaGroupRef.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupRef.Particle">
      <summary>
        <see langword="Particle" /> 속성의 컴파일 이후 값을 보유하는 <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" /> 또는 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 클래스 중 하나를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaAll" /> 또는 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 클래스의 속성 중 하나인 <see langword="Particle" /> 속성의 컴파일 이후 값입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupRef.RefName">
      <summary>이 스키마 또는 지정된 네임스페이스가 나타내는 다른 스키마에 지정된 그룹의 이름을 가져오거나 설정합니다.</summary>
      <returns>이 스키마에 정의된 그룹의 이름입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaIdentityConstraint">
      <summary>identity 제약 조건인 <see langword="key" />, <see langword="keyref" /> 및 <see langword="unique" /> 요소에 대한 클래스입니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaIdentityConstraint.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaIdentityConstraint" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Fields">
      <summary>XPath(XML Path Language) 식 선택기에 대한 자식으로 적용되는 필드의 컬렉션을 가져옵니다.</summary>
      <returns>필드의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Name">
      <summary>identity 제약 조건의 이름을 가져오거나 설정합니다.</summary>
      <returns>identity 제약 조건의 이름입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.QualifiedName">
      <summary>
        <see langword="QualifiedName" /> 속성의 컴파일 이후 값을 보유하는 identity 제약 조건의 정규화된 이름을 가져옵니다.</summary>
      <returns>
        <see langword="QualifiedName" /> 속성의 컴파일 이후 값입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Selector">
      <summary>XPath 식의 <see langword="selector" /> 요소를 가져오거나 설정합니다.</summary>
      <returns>XPath 식의 <see langword="selector" /> 요소입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaImport">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="import" /> 요소를 나타냅니다. 이 클래스는 다른 스키마에서 스키마 구성 요소를 가져오는 데 사용됩니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaImport.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaImport" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaImport.Annotation">
      <summary>
        <see langword="annotation" /> 속성을 가져오거나 설정합니다.</summary>
      <returns>주석입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaImport.Namespace">
      <summary>URI(Uniform Resource Identifier) 참조로 가져온 스키마에 대한 대상 네임스페이스를 가져오거나 설정합니다.</summary>
      <returns>URI 참조로 가져온 스키마에 대한 대상 네임스페이스입니다. 선택 사항입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInclude">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="include" /> 요소를 나타냅니다. 이 클래스를 사용하여 외부 스키마의 선언과 정의를 포함할 수 있습니다. 그러면 포함하는 스키마에서 포함된 선언과 정의를 처리할 수 있습니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInclude.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaInclude" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInclude.Annotation">
      <summary>
        <see langword="annotation" /> 속성을 가져오거나 설정합니다.</summary>
      <returns>주석입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInference">
      <summary>XML 문서에서 XSD(XML 스키마 정의 언어) 스키마를 유추합니다. <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInference.InferenceOption">
      <summary>XML 문서 내의 요소와 특성에 대해 <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 클래스에서 유추하는 발생 및 형식 정보에 영향을 줍니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed">
      <summary>특정 요소나 특성에 대해 덜 제한적인 스키마 선언을 유추하도록 지정합니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted">
      <summary>특정 요소나 특성에 대해 더 제한적인 스키마 선언을 유추하도록 지정합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader)">
      <summary>지정된 <see cref="T:System.Xml.XmlReader" /> 개체에 포함된 XML 문서에서 XSD(XML 스키마 정의 언어) 스키마를 유추합니다.</summary>
      <param name="instanceDocument">스키마를 유추할 XML 문서가 포함된 <see cref="T:System.Xml.XmlReader" /> 개체입니다.</param>
      <returns>유추된 스키마가 포함된 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체입니다.</returns>
      <exception cref="T:System.Xml.XmlException">XML 문서가 제대로 구성되지 않은 경우</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaInferenceException">
        <see cref="T:System.Xml.XmlReader" /> 개체가 루트 노드 또는 요소에 없는 경우. 스키마를 유추하는 동안 오류가 발생합니다.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader,System.Xml.Schema.XmlSchemaSet)">
      <summary>지정된 <see cref="T:System.Xml.XmlReader" /> 개체에 포함된 XML 문서에서 XSD(XML 스키마 정의 언어) 스키마를 유추한 후 이 스키마를 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체에서 대상 네임스페이스가 같은 기존 스키마를 사용하여 구체화합니다.</summary>
      <param name="instanceDocument">스키마를 유추할 XML 문서가 포함된 <see cref="T:System.Xml.XmlReader" /> 개체입니다.</param>
      <param name="schemas">유추된 스키마를 구체화하는 데 사용할 기존 스키마가 포함된 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체입니다.</param>
      <returns>유추된 스키마가 포함된 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체입니다.</returns>
      <exception cref="T:System.Xml.XmlException">XML 문서가 제대로 구성되지 않은 경우</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaInferenceException">
        <see cref="T:System.Xml.XmlReader" /> 개체가 루트 노드 또는 요소에 없는 경우. 스키마를 유추하는 동안 오류가 발생합니다.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInference.Occurrence">
      <summary>XML 문서에서 유추되는 스키마 발생 선언에 영향을 주는 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 개체</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInference.TypeInference">
      <summary>XML 문서에서 유추되는 형식에 영향을 주는 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInferenceException">
      <summary>XML 문서에서 스키마를 유추하는 동안 <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 클래스에서 발생한 오류에 대한 정보를 반환합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />의 모든 속성을 포함하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 및 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 개체를 지정하여 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 개체입니다.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류에 대한 설명입니다.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지 및 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />을 발생시킨 원래 <see cref="T:System.Exception" />을 사용하여 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류에 대한 설명입니다.</param>
      <param name="innerException">
        <see cref="T:System.Exception" />을 발생시킨 원래 예외가 포함된 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 개체입니다.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>지정된 오류 메시지, <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />을 발생시킨 원래 <see cref="T:System.Exception" /> 및 XML 문서 내에서 오류가 발생한 줄의 번호와 위치를 사용하여 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류에 대한 설명입니다.</param>
      <param name="innerException">
        <see cref="T:System.Exception" />을 발생시킨 원래 예외가 포함된 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 개체입니다.</param>
      <param name="lineNumber">
        <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />을 발생시킨 XML 문서 내의 줄 번호입니다.</param>
      <param name="linePosition">
        <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />을 발생시킨 XML 문서 내의 줄 위치입니다.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 개체의 모든 속성을 지정된 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체의 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 개체에 스트리밍합니다.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 개체입니다.</param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInfo">
      <summary>유효성이 검사된 XML 노드의 스키마 유효성 검사 이후 정보 집합을 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInfo.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.ContentType">
      <summary>유효성이 검사된 이 XML 노드의 콘텐츠 형식에 해당하는 <see cref="T:System.Xml.Schema.XmlSchemaContentType" /> 개체를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaContentType" /> 개체</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.IsDefault">
      <summary>유효성이 검사된 이 XML 노드가 XSD(XML 스키마 정의 언어) 스키마 유효성 검사를 수행하는 동안 기본값이 적용되는 결과로 설정되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="bool" /> 값입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.IsNil">
      <summary>유효성이 검사된 이 XML 노드의 값이 nil인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="bool" /> 값입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.MemberType">
      <summary>유효성이 검사된 이 XML 노드의 동적 스키마 형식을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute">
      <summary>유효성이 검사된 이 XML 노드에 해당하는 컴파일된 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 개체를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 개체</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaElement">
      <summary>유효성이 검사된 이 XML 노드에 해당하는 컴파일된 <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 개체를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 개체</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaType">
      <summary>유효성이 검사된 이 XML 노드의 정적 XSD(XML 스키마 정의 언어) 스키마 형식을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaType" /> 개체</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.Validity">
      <summary>유효성이 검사된 이 XML 노드의 <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 값입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaKey">
      <summary>이 클래스는 W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="key" /> 요소를 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaKey.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaKey" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaKeyref">
      <summary>이 클래스는 W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="keyref" /> 요소를 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaKeyref.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaKeyref" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaKeyref.Refer">
      <summary>이 제약 조건이 다른 단순 형식이나 복합 형식에서 참조하는 키의 이름을 가져오거나 설정합니다.</summary>
      <returns>이 제약 조건이 참조하는 키의 QName입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaLengthFacet">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="length" /> 패싯을 나타냅니다. 이 클래스를 사용하여 데이터 형식에 <see langword="simpleType" /> 요소의 길이에 대한 제한을 지정할 수 있습니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaLengthFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="maxExclusive" /> 요소를 나타냅니다. 이 클래스를 사용하여 <see langword="simpleType" /> 요소의 최대값에 대한 제한을 지정할 수 있습니다. 요소 값은 <see langword="maxExclusive" /> 요소의 값보다 작아야 합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxExclusiveFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="maxInclusive" /> 요소를 나타냅니다. 이 클래스를 사용하여 <see langword="simpleType" /> 요소의 최대값에 대한 제한을 지정할 수 있습니다. 요소 값은 <see langword="maxInclusive" /> 요소 값보다 작거나 같아야 합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxInclusiveFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxLengthFacet">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="maxLength" /> 요소를 나타냅니다. 이 클래스를 사용하여 <see langword="simpleType" /> 요소의 최대 데이터 값 길이에 대한 제한을 지정할 수 있습니다. 길이는 <see langword="maxLength" /> 요소 값보다 작아야 합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxLengthFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="minExclusive" /> 요소를 나타냅니다. 이 클래스를 사용하여 <see langword="simpleType" /> 요소의 최소값에 대한 제한을 지정할 수 있습니다. 요소 값은 <see langword="minExclusive" /> 요소의 값보다 커야 합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinExclusiveFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="minInclusive" /> 요소를 나타냅니다. 이 클래스를 사용하여 simpleType 요소의 최소값에 대한 제한을 지정할 수 있습니다. 요소 값은 <see langword="minInclusive" /> 요소 값보다 크거나 같아야 합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinInclusiveFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinLengthFacet">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="minLength" /> 요소를 나타냅니다. 이 클래스를 사용하여 <see langword="simpleType" /> 요소의 최소 데이터 값 길이에 대한 제한을 지정할 수 있습니다. 길이는 <see langword="minLength" /> 요소 값보다 커야 합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinLengthFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaNotation">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="notation" /> 요소를 나타냅니다. XML 스키마 <see langword="notation" /> 선언은 <see langword="XML 1.0 NOTATION" /> 선언을 재구성한 것입니다. 주석의 목적은 XML 문서 내의 XML이 아닌 데이터의 서식을 설명하는 것입니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaNotation.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaNotation" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.Name">
      <summary>주석의 이름을 가져오거나 설정합니다.</summary>
      <returns>주석의 이름입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.Public">
      <summary>
        <see langword="public" /> 식별자를 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="public" /> 식별자입니다. 값은 올바른 URI(Uniform Resource Identifier)이어야 합니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.System">
      <summary>
        <see langword="system" /> 식별자를 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="system" /> 식별자입니다. 값은 올바른 URI이어야 합니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaNumericFacet">
      <summary>
        <see langword="numeric" /> 패싯을 정의하는 추상 클래스입니다. 이 클래스는 <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />과 같은 숫자 패싯 클래스의 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaNumericFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaNumericFacet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObject">
      <summary>XML 스키마 개체 모델 계층 구조의 루트 클래스를 나타내며 <see cref="T:System.Xml.Schema.XmlSchema" /> 클래스와 같은 클래스의 기본 클래스 역할을 합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObject.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.LineNumber">
      <summary>
        <see langword="schema" /> 요소가 참조하는 파일에서 줄 번호를 가져오거나 설정합니다.</summary>
      <returns>줄 번호입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.LinePosition">
      <summary>
        <see langword="schema" /> 요소가 참조하는 파일에서 줄 위치를 가져오거나 설정합니다.</summary>
      <returns>줄 위치입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.Namespaces">
      <summary>이 스키마 개체에 사용할 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />를 가져오거나 설정합니다.</summary>
      <returns>해당 스키마 개체의 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 속성입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.Parent">
      <summary>이 <see cref="T:System.Xml.Schema.XmlSchemaObject" />의 부모를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />의 부모 <see cref="T:System.Xml.Schema.XmlSchemaObject" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.SourceUri">
      <summary>스키마를 로드한 파일의 소스 위치를 가져오거나 설정합니다.</summary>
      <returns>파일의 소스 위치(URI)입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectCollection">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />의 컬렉션입니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor">
      <summary>
        <see langword="XmlSchemaObjectCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor(System.Xml.Schema.XmlSchemaObject)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />를 사용하는 <see langword="XmlSchemaObjectCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="parent">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />
      </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Add(System.Xml.Schema.XmlSchemaObject)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />에 <see langword="XmlSchemaObjectCollection" />을 추가합니다.</summary>
      <param name="item">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />
      </param>
      <returns>항목이 추가된 인덱스입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="index" />가 <see langword="Count" />보다 큰 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 매개 변수는 <see cref="T:System.Xml.Schema.XmlSchemaExternal" /> 형식 또는 파생된 <see cref="T:System.Xml.Schema.XmlSchemaImport" />, <see cref="T:System.Xml.Schema.XmlSchemaInclude" /> 및 <see cref="T:System.Xml.Schema.XmlSchemaRedefine" /> 형식이 아닙니다.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Contains(System.Xml.Schema.XmlSchemaObject)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaObject" />가 <see langword="XmlSchemaObjectCollection" />에 있는지 여부를 나타냅니다.</summary>
      <param name="item">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />
      </param>
      <returns>지정된 정규화 이름이 컬렉션에 있으면 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다. null이 제공되면 null 이름을 갖는 정규화된 이름이 없기 때문에 <see langword="false" />가 반환됩니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.CopyTo(System.Xml.Schema.XmlSchemaObject[],System.Int32)">
      <summary>지정된 인덱스에서 시작하여, 지정된 배열에 컬렉션의 <see cref="T:System.Xml.Schema.XmlSchemaObject" />를 모두 복사합니다.</summary>
      <param name="array">
        <see langword="XmlSchemaObjectCollection" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">복사를 시작할 배열의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이 null 참조(Visual Basic의 경우 <see langword="Nothing" />)인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />는 다차원 배열입니다.  
또는 
 <paramref name="index" />가 <paramref name="array" />의 길이보다 크거나 같은 경우  
또는 
소스 <see cref="T:System.Xml.Schema.XmlSchemaObject" />의 요소 수가 인덱스에서 대상 배열 끝까지의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.InvalidCastException">소스 <see cref="T:System.Xml.Schema.XmlSchemaObject" />의 형식을 대상 배열의 형식으로 자동 캐스팅할 수 없는 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.GetEnumerator">
      <summary>
        <see langword="XmlSchemaObjects" />에 포함된 <see langword="XmlSchemaObjectCollection" />에서 반복 실행할 열거형을 반환합니다.</summary>
      <returns>반복기는 <see cref="T:System.Xml.Schema.XmlSchemaObjectEnumerator" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.IndexOf(System.Xml.Schema.XmlSchemaObject)">
      <summary>지정한 <see cref="T:System.Xml.Schema.XmlSchemaObject" />에 해당하는 컬렉션 인덱스를 가져옵니다.</summary>
      <param name="item">인덱스가 반환되도록 하려는 <see cref="T:System.Xml.Schema.XmlSchemaObject" />입니다.</param>
      <returns>지정한 <see cref="T:System.Xml.Schema.XmlSchemaObject" />에 해당하는 인덱스입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Insert(System.Int32,System.Xml.Schema.XmlSchemaObject)">
      <summary>
        <see langword="XmlSchemaObjectCollection" />에 <see cref="T:System.Xml.Schema.XmlSchemaObject" />를 삽입합니다.</summary>
      <param name="index">0부터 시작하는 인덱스이며 항목을 삽입해야 합니다.</param>
      <param name="item">삽입할 <see cref="T:System.Xml.Schema.XmlSchemaObject" />입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우  
또는 
 <paramref name="index" />가 <see langword="Count" />보다 큰 경우</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectCollection.Item(System.Int32)">
      <summary>지정된 인덱스의 <see cref="T:System.Xml.Schema.XmlSchemaObject" />를 가져옵니다.</summary>
      <param name="index">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />의 인덱스입니다.</param>
      <returns>지정된 인덱스의 <see cref="T:System.Xml.Schema.XmlSchemaObject" />입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnClear">
      <summary>
        <see langword="OnClear" />는 표준 <see langword="Clear" /> 동작보다 먼저 호출됩니다. 자세한 내용은 <see cref="T:System.Collections.CollectionBase" />에 대한 OnClear 메서드를 참조하십시오.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnInsert(System.Int32,System.Object)">
      <summary>
        <see langword="OnInsert" />는 표준 <see langword="Insert" /> 동작보다 먼저 호출됩니다. 자세한 내용은 <see langword="OnInsert" /> 메서드 <see cref="T:System.Collections.CollectionBase" />를 참조하십시오.</summary>
      <param name="index">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />의 인덱스입니다.</param>
      <param name="item">항목입니다.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnRemove(System.Int32,System.Object)">
      <summary>
        <see langword="OnRemove" />는 표준 <see langword="Remove" /> 동작보다 먼저 호출됩니다. 자세한 내용은 <see cref="T:System.Collections.CollectionBase" />에 대한 <see langword="OnRemove" /> 메서드를 참조하십시오.</summary>
      <param name="index">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />의 인덱스입니다.</param>
      <param name="item">항목입니다.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>
        <see langword="OnSet" />는 표준 <see langword="Set" /> 동작보다 먼저 호출됩니다. 자세한 내용은 <see cref="T:System.Collections.CollectionBase" />에 대한 OnSet 메서드를 참조하십시오.</summary>
      <param name="index">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />의 인덱스입니다.</param>
      <param name="oldValue">이전 값입니다.</param>
      <param name="newValue">새 값입니다.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Remove(System.Xml.Schema.XmlSchemaObject)">
      <summary>
        <see langword="XmlSchemaObjectCollection" />에서 <see cref="T:System.Xml.Schema.XmlSchemaObject" />를 제거합니다.</summary>
      <param name="item">제거할 <see cref="T:System.Xml.Schema.XmlSchemaObject" />입니다.</param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectEnumerator">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />에 대한 열거자를 나타냅니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectEnumerator.Current">
      <summary>컬렉션의 현재 <see cref="T:System.Xml.Schema.XmlSchemaObject" />를 가져옵니다.</summary>
      <returns>현재 <see cref="T:System.Xml.Schema.XmlSchemaObject" />입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.MoveNext">
      <summary>컬렉션의 다음 항목으로 이동합니다.</summary>
      <returns>컬렉션의 끝에서는 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset">
      <summary>열거자를 컬렉션의 시작으로 다시 설정합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.Xml.Schema.XmlSchemaObjectEnumerator.Current" />를 참조하십시오.</summary>
      <returns>현재 <see cref="T:System.Xml.Schema.XmlSchemaObject" />입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#MoveNext">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.Schema.XmlSchemaObjectEnumerator.MoveNext" />를 참조하십시오.</summary>
      <returns>다음 <see cref="T:System.Xml.Schema.XmlSchemaObject" />입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#Reset">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset" />를 참조하십시오.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectTable">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 클래스에 포함된 Attributes, AttributeGroups, Elements 등의 요소에 대한 컬렉션을 제공합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectTable.Contains(System.Xml.XmlQualifiedName)">
      <summary>지정된 정규화된 이름이 컬렉션에 있는지 여부를 확인합니다.</summary>
      <param name="name">
        <see cref="T:System.Xml.XmlQualifiedName" />
      </param>
      <returns>지정된 정규화된 이름이 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Count">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />에 들어 있는 항목 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />에 들어 있는 항목 수입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectTable.GetEnumerator">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />를 통해 반복할 수 있는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" />을 반복할 수 있는 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Item(System.Xml.XmlQualifiedName)">
      <summary>정규화된 이름으로 지정된 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />의 요소를 반환합니다.</summary>
      <param name="name">반환할 요소의 <see cref="T:System.Xml.XmlQualifiedName" />입니다.</param>
      <returns>정규화된 이름으로 지정된 <see cref="T:System.Xml.Schema.XmlSchemaObject" />에 있는 요소의 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Names">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />에 있는 모든 명명된 요소의 컬렉션을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />에 있는 모든 명명된 요소의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Values">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />에 있는 모든 요소에 대한 모든 값의 컬렉션을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />에 있는 모든 요소에 대한 모든 값의 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaParticle">
      <summary>해당 추상 클래스는 모든 파티클 형식의 기본 클래스입니다(예: <see cref="T:System.Xml.Schema.XmlSchemaAny" />).</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaParticle.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaParticle" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MaxOccurs">
      <summary>파티클이 발생할 수 있는 최대 횟수를 가져오거나 설정합니다.</summary>
      <returns>파티클이 발생할 수 있는 최대 횟수입니다. 기본값은 1입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MaxOccursString">
      <summary>숫자를 문자열 값으로 가져오거나 설정합니다. 파티클이 발생할 수 있는 최대 횟수입니다.</summary>
      <returns>문자열 값인 숫자입니다. <see langword="String.Empty" />는 <see langword="MaxOccurs" />가 기본값과 같음을 나타냅니다. 기본값은 null 참조입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MinOccurs">
      <summary>파티클이 발생할 수 있는 최소 횟수를 가져오거나 설정합니다.</summary>
      <returns>파티클이 발생할 수 있는 최소 횟수입니다. 기본값은 1입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MinOccursString">
      <summary>숫자를 문자열 값으로 가져오거나 설정합니다. 파티클이 발생할 수 있는 최소 횟수입니다.</summary>
      <returns>문자열 값인 숫자입니다. <see langword="String.Empty" />는 <see langword="MinOccurs" />가 기본값과 같음을 나타냅니다. 기본값은 null 참조입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaPatternFacet">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="pattern" /> 요소를 나타냅니다. 이 클래스를 사용하여 <see langword="simpleType" /> 요소에 입력한 값에 대한 제한을 지정할 수 있습니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaPatternFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaRedefine">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="redefine" /> 요소를 나타냅니다. 이 클래스를 사용하여 현재 스키마에서 단순 형식, 복합 형식, 그룹 및 외부 스키마 파일의 특성 그룹을 재정의할 수 있습니다. 스키마 요소에 대한 버전 관리를 제공하는 데도 이 클래스를 사용할 수 있습니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaRedefine.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaRedefine" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.AttributeGroups">
      <summary>스키마에 있는 모든 특성에 대해 <see langword="AttributeGroups" /> 속성의 컴파일 이후 값을 포함하는 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />을 가져옵니다.</summary>
      <returns>스키마에 있는 모든 특성에 대한 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />입니다. <see langword="AttributeGroups" /> 속성의 컴파일 이후 값입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.Groups">
      <summary>스키마에 있는 모든 그룹에 대해 <see langword="Groups" /> 속성의 컴파일 이후 값을 보유하는 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />을 가져옵니다.</summary>
      <returns>스키마에 있는 모든 그룹에 대한 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />입니다. <see langword="Groups" /> 속성의 컴파일 이후 값입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.Items">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />, <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" />, <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />, <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 및 <see cref="T:System.Xml.Schema.XmlSchemaGroup" /> 클래스의 컬렉션을 가져옵니다.</summary>
      <returns>재정의 요소 내에 포함된 요소입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.SchemaTypes">
      <summary>스키마에 있는 모든 단순 형식과 복합 형식에 대해 <see langword="SchemaTypes" /> 속성의 컴파일 이후 값을 보유하는 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />을 가져옵니다.</summary>
      <returns>스키마에 있는 모든 스키마 형식에 대한 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />입니다. <see langword="SchemaTypes" /> 속성의 컴파일 이후 값입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSequence">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="sequence" /> 요소(작성자)를 나타냅니다. <see langword="sequence" />에서는 포함하는 요소 내에 지정된 시퀀스로 그룹의 요소가 나타나야 합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSequence.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSequence.Items">
      <summary>compositor 내에 포함된 요소입니다. <see cref="T:System.Xml.Schema.XmlSchemaElement" />, <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />, <see cref="T:System.Xml.Schema.XmlSchemaChoice" />, <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 또는 <see cref="T:System.Xml.Schema.XmlSchemaAny" />의 컬렉션입니다.</summary>
      <returns>compositor 내에 포함된 요소입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSet">
      <summary>XSD(XML 스키마 정의 언어) 스키마의 캐시를 포함합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />를 사용하여 <see cref="T:System.Xml.XmlNameTable" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="nameTable">사용할 <see cref="T:System.Xml.XmlNameTable" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수로 전달된 <see cref="T:System.Xml.XmlNameTable" /> 개체가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)">
      <summary>지정된 URL에 있는 XSD(XML 스키마 정의 언어) 스키마를 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 추가합니다.</summary>
      <param name="targetNamespace">스키마 <paramref name="targetNamespace" /> 속성이거나, 스키마에 지정된 <paramref name="targetNamespace" />를 사용하면 <see langword="null" />입니다.</param>
      <param name="schemaUri">로드할 스키마를 지정하는 URL입니다.</param>
      <returns>스키마가 유효한 경우에는 <see cref="T:System.Xml.Schema.XmlSchema" /> 입니다. 스키마가 유효하지 않고 <see cref="T:System.Xml.Schema.ValidationEventHandler" />가 지정된 경우에는 <see langword="null" />이 반환되고 적절한 유효성 검사 이벤트가 발생합니다. 그렇지 않으면 <see cref="T:System.Xml.Schema.XmlSchemaException" />이 throw됩니다.</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">스키마가 유효하지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">매개 변수로 전달된 URL이 <see langword="null" />이거나 <see cref="F:System.String.Empty" />인 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)">
      <summary>
        <see cref="T:System.Xml.XmlReader" />에 포함된 XSD(XML 스키마 정의 언어) 스키마를 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 추가합니다.</summary>
      <param name="targetNamespace">스키마 <paramref name="targetNamespace" /> 속성이거나, 스키마에 지정된 <paramref name="targetNamespace" />를 사용하면 <see langword="null" />입니다.</param>
      <param name="schemaDocument">
        <see cref="T:System.Xml.XmlReader" /> 개체</param>
      <returns>스키마가 유효한 경우에는 <see cref="T:System.Xml.Schema.XmlSchema" /> 입니다. 스키마가 유효하지 않고 <see cref="T:System.Xml.Schema.ValidationEventHandler" />가 지정된 경우에는 <see langword="null" />이 반환되고 적절한 유효성 검사 이벤트가 발생합니다. 그렇지 않으면 <see cref="T:System.Xml.Schema.XmlSchemaException" />이 throw됩니다.</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">스키마가 유효하지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">매개 변수로 전달된 <see cref="T:System.Xml.XmlReader" /> 개체가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchema" />를 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 추가합니다.</summary>
      <param name="schema">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 추가할 <see cref="T:System.Xml.Schema.XmlSchema" /> 개체입니다.</param>
      <returns>스키마가 유효한 경우에는 <see cref="T:System.Xml.Schema.XmlSchema" /> 입니다. 스키마가 유효하지 않고 <see cref="T:System.Xml.Schema.ValidationEventHandler" />가 지정된 경우에는 <see langword="null" />이 반환되고 적절한 유효성 검사 이벤트가 발생합니다. 그렇지 않으면 <see cref="T:System.Xml.Schema.XmlSchemaException" />이 throw됩니다.</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">스키마가 유효하지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">매개 변수로 전달된 <see cref="T:System.Xml.Schema.XmlSchema" /> 개체가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 모든 XSD(XML 스키마 정의 언어) 스키마를 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 추가합니다.</summary>
      <param name="schemas">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 스키마가 유효하지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">매개 변수로 전달된 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.CompilationSettings">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" />의 <see cref="T:System.Xml.Schema.XmlSchemaSet" />를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" />에 대한 <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다. 기본값은 <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 속성이 <see langword="true" />로 설정된 <see cref="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Compile">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 추가된 XSD(XML 스키마 정의 언어) 스키마를 하나의 논리 스키마로 컴파일합니다.</summary>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 스키마에 대해 유효성을 검사하고 컴파일하는 동안 오류가 발생한 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)">
      <summary>지정된 대상 네임스페이스 URI가 있는 XSD(XML 스키마 정의 언어) 스키마가 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 있는지 여부를 나타냅니다.</summary>
      <param name="targetNamespace">스키마 <paramref name="targetNamespace" /> 속성입니다.</param>
      <returns>지정된 대상 네임스페이스 URI가 있는 스키마가 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)">
      <summary>지정된 XSD(XML 스키마 정의 언어) <see cref="T:System.Xml.Schema.XmlSchema" /> 개체가 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 있는지 여부를 나타냅니다.</summary>
      <param name="schema">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 개체</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 개체가 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">매개 변수로 전달된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary>지정된 인덱스부터 시작하여 <see cref="T:System.Xml.Schema.XmlSchema" />의 모든 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체를 지정된 배열에 복사합니다.</summary>
      <param name="schemas">개체를 복사할 대상 배열입니다.</param>
      <param name="index">복사를 시작할 배열 내의 인덱스입니다.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.Count">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 논리 XSD(XML 스키마 정의 언어) 스키마의 개수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 논리 스키마의 개수입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 모든 XSD(XML 스키마 정의 언어) 스키마에 있는 전역 특성을 모두 가져옵니다.</summary>
      <returns>전역 특성의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalElements">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 모든 XSD(XML 스키마 정의 언어) 스키마에 있는 전역 요소를 모두 가져옵니다.</summary>
      <returns>전역 요소의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 모든 XSD(XML 스키마 정의 언어) 스키마에 있는 전역 단순 및 복합 형식을 모두 가져옵니다.</summary>
      <returns>전역 단순 및 복합 형식의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.IsCompiled">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 XSD(XML 스키마 정의 언어) 스키마가 컴파일되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />에서 스키마를 마지막으로 추가하거나 제거한 후 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 스키마가 컴파일되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.NameTable">
      <summary>새 XSD(XML 스키마 정의 언어) 스키마를 로드할 때 <see cref="T:System.Xml.XmlNameTable" />에서 사용하는 기본 <see cref="T:System.Xml.Schema.XmlSchemaSet" />을 가져옵니다.</summary>
      <returns>원자화된 문자열 개체의 테이블입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)">
      <summary>지정된 XSD(XML 스키마 정의 언어) 스키마를 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에서 제거합니다.</summary>
      <param name="schema">
        <see cref="T:System.Xml.Schema.XmlSchema" />에서 제거할 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체입니다.</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" />에서 제거된 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체이거나, 해당 스키마가 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 없는 경우 <see langword="null" />입니다.</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">올바른 스키마가 아닌 경우</exception>
      <exception cref="T:System.ArgumentNullException">매개 변수로 전달된 <see cref="T:System.Xml.Schema.XmlSchema" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)">
      <summary>지정된 XSD(XML 스키마 정의 언어) 스키마와 해당 스키마에 가져온 모든 스키마를 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에서 제거합니다.</summary>
      <param name="schemaToRemove">
        <see cref="T:System.Xml.Schema.XmlSchema" />에서 제거할 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체입니다.</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 개체와 해당 개체에 가져온 모든 항목이 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">매개 변수로 전달된 <see cref="T:System.Xml.Schema.XmlSchema" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 이미 있는 XSD(XML 스키마 정의 언어) 스키마를 다시 처리합니다.</summary>
      <param name="schema">다시 처리할 스키마입니다.</param>
      <returns>스키마가 유효한 경우에는 <see cref="T:System.Xml.Schema.XmlSchema" /> 입니다. 스키마가 유효하지 않고 <see cref="T:System.Xml.Schema.ValidationEventHandler" />가 지정된 경우에는 <see langword="null" />이 반환되고 적절한 유효성 검사 이벤트가 발생합니다. 그렇지 않으면 <see cref="T:System.Xml.Schema.XmlSchemaException" />이 throw됩니다.</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">스키마가 유효하지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">매개 변수로 전달된 <see cref="T:System.Xml.Schema.XmlSchema" /> 개체가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">매개 변수로 전달된 <see cref="T:System.Xml.Schema.XmlSchema" /> 개체가 <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 아직 없는 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Schemas">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 모든 XSD(XML 스키마 정의 언어) 스키마의 컬렉션을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 추가된 모든 스키마를 포함하는 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체입니다. <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 추가된 스키마가 없으면 빈 <see cref="T:System.Collections.ICollection" /> 개체가 반환됩니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Schemas(System.String)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />에서 지정된 네임스페이스에 속하는 모든 XSD(XML 스키마 정의 언어) 스키마의 컬렉션을 반환합니다.</summary>
      <param name="targetNamespace">스키마 <paramref name="targetNamespace" /> 속성입니다.</param>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 추가되고 지정된 네임스페이스에 속하는 모든 스키마가 포함된 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체를 반환합니다. <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 추가된 스키마가 없으면 빈 <see cref="T:System.Collections.ICollection" /> 개체가 반환됩니다.</returns>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler">
      <summary>XSD(XML 스키마 정의 언어) 스키마 유효성 검사 오류에 대한 정보를 받을 이벤트 처리기를 지정합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.XmlResolver">
      <summary>스키마의 include 및 import 요소에서 참조하는 네임스페이스 또는 위치를 확인하는 데 사용되는 <see cref="T:System.Xml.XmlResolver" />를 설정합니다.</summary>
      <returns>스키마의 include 및 import 요소에서 참조하는 네임스페이스 또는 위치를 확인하는 데 사용되는 <see cref="T:System.Xml.XmlResolver" />입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContent">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="simpleContent" /> 요소를 나타냅니다. 이 클래스는 단순 콘텐츠 모델의 단순 및 복합 형식용입니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContent.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleContent" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContent.Content">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction" /> 또는 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentExtension" /> 중 하나를 가져옵니다.</summary>
      <returns>
        <see langword="XmlSchemaSimpleContentRestriction" /> 또는 <see langword="XmlSchemaSimpleContentExtension" /> 클래스에 포함된 콘텐츠입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContentExtension">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 단순 내용에 대한 <see langword="extension" /> 요소를 나타냅니다. 이 클래스를 사용하여 확장으로 단순 형식을 파생시킬 수 있습니다. 이러한 파생은 특성을 추가하여 요소의 단순 형식 내용을 확장하는 데 사용됩니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContentExtension.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentExtension" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.AnyAttribute">
      <summary>특성 값에 대해 사용할 <see langword="XmlSchemaAnyAttribute" />를 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="XmlSchemaAnyAttribute" /> 선택 사항입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.Attributes">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 및 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" />의 컬렉션을 가져옵니다.</summary>
      <returns>
        <see langword="simpleType" /> 요소에 대한 특성의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.BaseTypeName">
      <summary>기본 제공 테이터 형식 또는 이 형식이 확장되는 단순 형식의 이름을 가져오거나 설정합니다.</summary>
      <returns>기본 형식 이름입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 단순 내용에 대한 <see langword="restriction" /> 요소를 나타냅니다. 이 클래스를 사용하여 제한으로 단순 형식을 파생시킬 수 있습니다. 이러한 파생을 통해 요소에 대한 값 범위를 상속된 단순 형식에 지정한 값의 하위 집합으로 제한할 수 있습니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContentRestriction.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.AnyAttribute">
      <summary>특성 값에 대해 사용할 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" />를 가져오거나 설정합니다.</summary>
      <returns>특성 값에 대한 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" />입니다. 선택 사항입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.Attributes">
      <summary>단순 형식에 대한 특성의 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 및 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" />컬렉션을 가져옵니다.</summary>
      <returns>단순 형식에 대한 특성의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.BaseType">
      <summary>단순 형식 기준 값을 가져오거나 설정합니다.</summary>
      <returns>단순 형식 기준 값입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.BaseTypeName">
      <summary>기본 제공 테이터 형식 또는 이 형식이 파생되는 단순 형식의 이름을 가져오거나 설정합니다.</summary>
      <returns>기본 형식의 이름입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.Facets">
      <summary>XML 스키마 패싯을 가져오거나 설정합니다.</summary>
      <returns>다음 패싯 클래스 중 하나입니다. 
 <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" />.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleType">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 단순 내용에 대한 <see langword="simpleType" /> 요소를 나타냅니다. 이 클래스는 단순 형식을 정의합니다. 단순 형식은 내용에 텍스트만 있는 요소 또는 특성의 값에 대한 정보와 제약 조건을 지정할 수 있습니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleType.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleType.Content">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion" />, <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeList" /> 또는 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction" /> 중 하나를 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="XmlSchemaSimpleTypeUnion" />, <see langword="XmlSchemaSimpleTypeList" /> 또는 <see langword="XmlSchemaSimpleTypeRestriction" /> 중 하나입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeContent">
      <summary>단순 형식 내용 클래스에 대한 추상 클래스입니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeContent.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeContent" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeList">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="list" /> 요소를 나타냅니다. 이 클래스를 사용하여 <see langword="simpleType" /> 요소를 지정된 데이터 형식의 값 목록으로 정의할 수 있습니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeList.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeList" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.BaseItemType">
      <summary>단순 형식의 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 및 <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType" /> 값에 따라 <see langword="simpleType" /> 요소의 형식을 나타내는 <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName" />을 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="simpleType" /> 요소의 형식을 나타내는 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType">
      <summary>기준 값에 의해 지정된 형식에서 파생되는 <see langword="simpleType" /> 요소를 가져오거나 설정합니다.</summary>
      <returns>단순 형식 요소에 대한 항목 형식입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName">
      <summary>이 스키마 또는 지정된 네임스페이스가 나타내는 다른 스키마에 정의된 기본 제공 데이터 형식 또는 <see langword="simpleType" /> 요소의 이름을 가져오거나 설정합니다.</summary>
      <returns>단순 형식 목록의 형식 이름입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 단순 형식에 대한 <see langword="restriction" /> 요소를 나타냅니다. 이 클래스를 사용하여 <see langword="simpleType" /> 요소를 제한할 수 있습니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.BaseType">
      <summary>네이티브 형식에 대한 정보를 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="simpleType" /> 요소에 대한 네이티브 형식입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.BaseTypeName">
      <summary>정규화된 기본 형식의 이름을 가져오거나 설정합니다.</summary>
      <returns>단순 형식 제한 기본 형식의 정규화된 이름입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.Facets">
      <summary>XML 스키마 패싯을 가져오거나 설정합니다.</summary>
      <returns>다음 패싯 클래스 중 하나입니다. 
 <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" />.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 단순 형식에 대한 <see langword="union" /> 요소를 나타냅니다. <see langword="union" /> 데이터 형식을 사용하여 <see langword="simpleType" />의 내용을 지정할 수 있습니다. <see langword="simpleType" /> 요소의 값은 공용 구조체에 지정된 다른 데이터 형식의 집합 중 하나여야 합니다. 공용 구조체 형식은 항상 파생 형식이며 다른 데이터 형식을 두 개 이상 구성해야 합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeUnion.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseMemberTypes">
      <summary>단순 형식의 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 및 <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes" /> 값에 따라 <see langword="simpleType" /> 요소의 형식을 나타내는 <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypes" /> 개체의 배열을 가져옵니다.</summary>
      <returns>
        <see langword="simpleType" /> 요소의 형식을 나타내는 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 개체의 배열입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes">
      <summary>기본 형식의 컬렉션을 가져옵니다.</summary>
      <returns>단순 형식 기준 값의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypes">
      <summary>이 스키마 또는 지정된 네임스페이스가 나타내는 다른 스키마에 정의된 기본 제공 데이터 형식 또는 <see langword="simpleType" /> 요소의 한정된 멤버 이름의 배열을 가져오거나 설정합니다.</summary>
      <returns>기본 제공 데이터 형식 또는 단순 형식의 멤버 목록으로 구성된 배열입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="totalDigits" /> 패싯을 나타냅니다. 이 클래스를 사용하여 <see langword="simpleType" /> 요소의 값으로 입력할 수 있는 자릿수에 대한 제한을 지정할 수 있습니다. <see langword="totalDigits" /> 값은 양의 정수여야 합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaTotalDigitsFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaType">
      <summary>모든 단순 형식 및 복합 형식에 대한 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.BaseSchemaType">
      <summary>컴파일 이후 개체 형식 또는 기본 제공 XSD(XML 스키마 정의 언어) 데이터 형식, simpleType 요소 또는 complexType 요소를 가져옵니다. 이 속성은 스키마 컴파일 이후 정보 집합 속성입니다.</summary>
      <returns>기본 제공 XSD 데이터 형식, simpleType 요소 또는 complexType 요소입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType">
      <summary>이 스키마 형식의 기본 형식에 대한 컴파일 이후 값을 가져옵니다.</summary>
      <returns>이 스키마 형식의 기본 형식을 나타내는 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Datatype">
      <summary>복합 형식의 데이터 형식에 대한 컴파일 이후 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 스키마 컴파일 이후 값입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.DerivedBy">
      <summary>이 요소가 해당 기본 형식에서 파생된 방법에 대한 컴파일 이후 정보를 가져옵니다.</summary>
      <returns>유효한 <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Final">
      <summary>추가 파생이 허용되는지 여부를 나타내는 형식 파생의 최종 특성을 가져오거나 설정합니다.</summary>
      <returns>유효한 <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Xml.Schema.XmlSchemaDerivationMethod.None" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.FinalResolved">
      <summary>
        <see cref="P:System.Xml.Schema.XmlSchemaType.Final" /> 속성의 컴파일 이후 값을 가져옵니다.</summary>
      <returns>
        <see cref="P:System.Xml.Schema.XmlSchemaType.Final" /> 속성의 컴파일 이후 값입니다. 기본값은 <see langword="finalDefault" /> 요소의 <see langword="schema" /> 특성 값입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.Schema.XmlTypeCode)">
      <summary>지정된 복합 형식의 기본 제공 복합 형식을 나타내는 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />을 반환합니다.</summary>
      <param name="typeCode">복합 형식을 나타내는 <see cref="T:System.Xml.Schema.XmlTypeCode" /> 값 중 하나입니다.</param>
      <returns>기본 제공 복합 형식을 나타내는 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.XmlQualifiedName)">
      <summary>정규화된 이름으로 지정된 복합 형식의 기본 제공 복합 형식을 나타내는 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />을 반환합니다.</summary>
      <param name="qualifiedName">복합 형식의 <see cref="T:System.Xml.XmlQualifiedName" />입니다.</param>
      <returns>기본 제공 복합 형식을 나타내는 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlQualifiedName" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.Schema.XmlTypeCode)">
      <summary>지정된 단순 형식의 기본 제공 단순 형식을 나타내는 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />을 반환합니다.</summary>
      <param name="typeCode">단순 형식을 나타내는 <see cref="T:System.Xml.Schema.XmlTypeCode" /> 값 중 하나입니다.</param>
      <returns>기본 제공 단순 형식을 나타내는 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.XmlQualifiedName)">
      <summary>정규화된 이름으로 지정된 단순 형식의 기본 제공 단순 형식을 나타내는 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />을 반환합니다.</summary>
      <param name="qualifiedName">단순 형식의 <see cref="T:System.Xml.XmlQualifiedName" />입니다.</param>
      <returns>기본 제공 단순 형식을 나타내는 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlQualifiedName" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.IsDerivedFrom(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaDerivationMethod)">
      <summary>파생된 스키마 형식이 기본 스키마 형식에서 파생되는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="derivedType">테스트할 파생된 <see cref="T:System.Xml.Schema.XmlSchemaType" />입니다.</param>
      <param name="baseType">파생된 <see cref="T:System.Xml.Schema.XmlSchemaType" />을 테스트하는 기준으로 사용할 기본 <see cref="T:System.Xml.Schema.XmlSchemaType" />입니다.</param>
      <param name="except">테스트에서 제외할 형식 파생 메서드를 나타내는 <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 값 중 하나입니다.</param>
      <returns>파생 형식이 기본 형식에서 파생되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.IsMixed">
      <summary>이 형식에 혼합 콘텐츠 모델을 사용하는지 여부를 나타내는 값을 가져오거나 설정합니다. 이 속성은 복합 형식에만 유효합니다.</summary>
      <returns>형식에 혼합 콘텐츠 모델을 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Name">
      <summary>형식의 이름을 가져오거나 설정합니다.</summary>
      <returns>형식의 이름입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.QualifiedName">
      <summary>이 형식의 <see langword="Name" /> 특성으로부터 만들어진 형식에 대한 정규화된 이름을 가져옵니다. 이 속성은 스키마 컴파일 이후 속성입니다.</summary>
      <returns>이 형식의 <see langword="Name" /> 특성으로부터 만든 형식에 대한 <see cref="T:System.Xml.XmlQualifiedName" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.TypeCode">
      <summary>형식의 <see cref="T:System.Xml.Schema.XmlTypeCode" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlTypeCode" /> 값 중 하나입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaUnique">
      <summary>W3C(World Wide Web 컨소시엄)에서 지정한 대로 XML 스키마의 <see langword="unique" /> 요소를 나타냅니다. 이 클래스를 사용하여 요소 집합 간의 고유 제약 조건을 식별할 수 있습니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaUnique.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaUnique" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaUse">
      <summary>특성이 사용되는 방법에 대한 표시기입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.None">
      <summary>특성을 사용하도록 지정하지 않았습니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Optional">
      <summary>특성은 선택 사항입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Prohibited">
      <summary>특성을 사용할 수 없습니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Required">
      <summary>특성은 한 번만 사용해야 합니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidationException">
      <summary>유효성을 검사할 XML 문서에서 XSD(XML 스키마 정의 언어) 스키마 유효성 검사 오류 및 경고가 발생할 경우 throw되는 예외를 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 및 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체를 사용하여 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 개체입니다.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String)">
      <summary>지정된 예외 메시지를 사용하여 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류 조건에 대한 <see langword="string" /> 설명입니다.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String,System.Exception)">
      <summary>지정된 예외 메시지 및 예외를 발생시킨 원래 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 개체를 사용하여 <see cref="T:System.Exception" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류 조건에 대한 <see langword="string" /> 설명입니다.</param>
      <param name="innerException">이 예외를 발생시킨 원래 <see cref="T:System.Exception" /> 개체입니다.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>지정된 예외 메시지, 예외를 발생시킨 원래 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 개체, 줄 번호 및 XML의 줄 위치를 사용하여 <see cref="T:System.Exception" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류 조건에 대한 <see langword="string" /> 설명입니다.</param>
      <param name="innerException">이 예외를 발생시킨 원래 <see cref="T:System.Exception" /> 개체입니다.</param>
      <param name="lineNumber">이 예외를 발생시킨 XML의 줄 번호입니다.</param>
      <param name="linePosition">이 예외를 발생시킨 XML의 줄 위치입니다.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 및 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 정보를 사용하여 <see cref="T:System.Runtime.Serialization.StreamingContext" />의 모든 속성을 포함하는 새 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 개체를 만듭니다.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />
      </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />
      </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.SetSourceObject(System.Object)">
      <summary>오류를 발생시키는 XML 노드를 설정합니다.</summary>
      <param name="sourceObject">소스 개체입니다.</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidationException.SourceObject">
      <summary>이 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" />을 발생시킨 XML 노드를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" />을 발생시킨 XML 노드입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidationFlags">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 및 <see cref="T:System.Xml.XmlReader" /> 클래스에서 사용하는 스키마 유효성 검사 옵션을 지정합니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes">
      <summary>스키마에 정의되지 않은 xml:* 특성도 허용합니다. 해당 데이터 형식을 기반으로 이러한 특성의 유효성이 검사됩니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.None">
      <summary>Identity 제약 조건, 인라인 스키마 및 스키마 위치 힌트를 처리하지 않고 스키마 유효성 검사 경고를 보고하지 않습니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints">
      <summary>유효성 검사 중 발생한 프로세스 ID 제약 조건(<c>xs:ID</c>, <c>xs:IDREF</c>, <c>xs:key</c>, <c>xs:keyref</c>, <c>xs:unique</c>)입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema">
      <summary>유효성 검사를 수행하는 동안 발견되는 인라인 스키마를 처리합니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation">
      <summary>유효성 검사 중 발생한 프로세스 스키마 위치 힌트(<c>xsi:schemaLocation</c>, <c>xsi:noNamespaceSchemaLocation</c>)입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings">
      <summary>유효성 검사를 수행하는 동안 발생하는 스키마 유효성 검사 경고를 보고합니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidator">
      <summary>XSD(XML 스키마 정의 언어) 스키마 유효성 검사 엔진을 나타냅니다. <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="nameTable">원자화된 문자열 형식의 요소 및 특성 이름이 포함된 <see cref="T:System.Xml.XmlNameTable" /> 개체입니다.</param>
      <param name="schemas">유효성 검사에 사용할 XSD(XML 스키마 정의 언어) 스키마가 포함된 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체입니다.</param>
      <param name="namespaceResolver">유효성을 검사하는 동안 발견된 네임스페이스를 확인하는 데 사용하는 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 개체입니다.</param>
      <param name="validationFlags">스키마 유효성 검사 옵션을 지정하는 <see cref="T:System.Xml.Schema.XmlSchemaValidationFlags" /> 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">지정된 매개 변수 중 하나 이상이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 매개 변수에 포함된 스키마를 컴파일하는 동안 오류가 발생한 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)">
      <summary>유효성 검사에 사용되는 스키마 집합에 XSD(XML 스키마 정의 언어) 스키마를 추가합니다.</summary>
      <param name="schema">유효성 검사에 사용되는 스키마 집합에 추가할 <see cref="T:System.Xml.Schema.XmlSchema" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">지정된 <see cref="T:System.Xml.Schema.XmlSchema" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 매개 변수의 대상 네임스페이스가 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 개체에서 이미 발견한 요소 또는 특성의 대상 네임스페이스와 일치하는 경우</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 매개 변수가 잘못된 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.EndValidation">
      <summary>유효성 검사를 끝내고 전체 XML 문서에서 identity 제약 조건을 확인합니다.</summary>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">XML 문서에 identity 제약 조건 오류가 있는 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes">
      <summary>현재 요소 컨텍스트에 나타날 수 있는 특성을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 개체의 배열이거나, 나타날 수 있는 특성이 없는 경우 빈 배열입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles">
      <summary>현재 요소 컨텍스트에 나타날 수 있는 파티클을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaParticle" /> 개체의 배열이거나, 나타날 수 있는 파티클이 없는 경우 빈 배열입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)">
      <summary>기본 특성에 대한 identity 제약 조건의 유효성을 검사하고, 요소 컨텍스트에서 <see cref="T:System.Collections.ArrayList" /> 메서드를 사용하여 아직 유효성이 검사되지 않고 기본값을 사용하는 모든 특성에 대해 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 개체로 지정된 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />를 채웁니다.</summary>
      <param name="defaultAttributes">요소 컨텍스트에서 유효성 검사를 수행하는 동안 발견되지 않은 특성에 대해 <see cref="T:System.Collections.ArrayList" /> 개체로 채울 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />입니다.</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.Initialize">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 개체의 상태를 초기화합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> 개체를 만든 직후 또는 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />을 호출한 후가 아닌 시점에 <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> 메서드를 호출한 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />를 사용하여 부분 유효성 검사를 위해 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 개체의 상태를 초기화합니다.</summary>
      <param name="partialValidationType">부분 유효성 검사를 위해 <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 개체의 유효성 검사 컨텍스트를 초기화하는 데 사용할 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />, <see cref="T:System.Xml.Schema.XmlSchemaType" /> 또는 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> 개체를 만든 직후 또는 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />을 호출한 후가 아닌 시점에 <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> 메서드를 호출한 경우</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 매개 변수가 <see cref="T:System.Xml.Schema.XmlSchemaElement" />, <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 또는 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 개체가 아닌 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 매개 변수는 <see langword="null" />일 수 없습니다.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider">
      <summary>유효성을 검사할 XML 노드의 줄 번호 정보를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.IXmlLineInfo" /> 개체</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)">
      <summary>현재 요소 내용의 유효성 검사를 생략하고 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 개체를 준비하여 부모 요소의 컨텍스트에서 내용의 유효성을 검사합니다.</summary>
      <param name="schemaInfo">현재 요소 콘텐츠를 성공적으로 건너뛴 경우 속성이 설정되는 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 개체입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> 메서드가 올바른 시퀀스로 호출되지 않은 경우. 예를 들어, <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />를 호출한 후 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />를 호출한 경우가 여기에 해당합니다.</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.SourceUri">
      <summary>유효성을 검사할 XML 노드의 소스 URI를 가져오거나 설정합니다.</summary>
      <returns>유효성을 검사할 XML 노드의 소스 URI를 나타내는 <see cref="T:System.Uri" /> 개체입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
      <summary>현재 요소 컨텍스트에서 특성의 이름, 네임스페이스 URI 및 값에 대해 유효성을 검사합니다.</summary>
      <param name="localName">유효성을 검사할 특성의 로컬 이름입니다.</param>
      <param name="namespaceUri">유효성을 검사할 특성의 네임스페이스 URI입니다.</param>
      <param name="attributeValue">유효성을 검사할 특성의 값입니다.</param>
      <param name="schemaInfo">특성의 유효성이 성공적으로 검사될 경우 속성이 설정되는 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 개체입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
      <returns>유효성이 검사된 특성의 값입니다.</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">특성이 현재 요소 컨텍스트에서 유효하지 않은 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 메서드가 올바른 시퀀스로 호출되지 않은 경우. 예를 들어, <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />를 호출한 후 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />를 호출한 경우가 여기에 해당합니다.</exception>
      <exception cref="T:System.ArgumentNullException">지정된 매개 변수 중 하나 이상이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
      <summary>현재 요소 컨텍스트에서 특성의 이름, 네임스페이스 URI 및 값에 대해 유효성을 검사합니다.</summary>
      <param name="localName">유효성을 검사할 특성의 로컬 이름입니다.</param>
      <param name="namespaceUri">유효성을 검사할 특성의 네임스페이스 URI입니다.</param>
      <param name="attributeValue">특성 값을 특성의 XSD(XML 스키마 정의 언어) 형식과 호환되는 CLR(공용 언어 런타임) 형식으로 전달하는 데 사용되는 <see cref="T:System.Xml.Schema.XmlValueGetter" /><see langword="delegate" />입니다.</param>
      <param name="schemaInfo">특성의 유효성이 성공적으로 검사될 경우 속성이 설정되는 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 개체입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
      <returns>유효성이 검사된 특성의 값입니다.</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">특성이 현재 요소 컨텍스트에서 유효하지 않은 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 메서드가 올바른 시퀀스로 호출되지 않은 경우. 예를 들어, <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />를 호출한 후 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />를 호출한 경우가 여기에 해당합니다.</exception>
      <exception cref="T:System.ArgumentNullException">지정된 매개 변수 중 하나 이상이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
      <summary>현재 컨텍스트에서 요소의 유효성을 검사합니다.</summary>
      <param name="localName">유효성을 검사할 요소의 로컬 이름입니다.</param>
      <param name="namespaceUri">유효성을 검사할 요소의 네임스페이스 URI입니다.</param>
      <param name="schemaInfo">요소 이름의 유효성이 성공적으로 검사될 경우 속성이 설정되는 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 개체입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">요소 이름이 현재 컨텍스트에서 유효하지 않은 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> 메서드가 올바른 시퀀스로 호출되지 않은 경우. 예를 들어, <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" />를 호출한 후 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 메서드를 호출하는 경우가 여기에 해당합니다.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
      <summary>지정된 <c>xsi:Type</c>, <c>xsi:Nil</c>, <c>xsi:SchemaLocation</c> 및 <c>xsi:NoNamespaceSchemaLocation</c> 특성 값으로 현재 컨텍스트에서 요소의 유효성을 검사합니다.</summary>
      <param name="localName">유효성을 검사할 요소의 로컬 이름입니다.</param>
      <param name="namespaceUri">유효성을 검사할 요소의 네임스페이스 URI입니다.</param>
      <param name="schemaInfo">요소 이름의 유효성이 성공적으로 검사될 경우 속성이 설정되는 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 개체입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
      <param name="xsiType">요소의 <c>xsi:Type</c> 특성 값입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
      <param name="xsiNil">요소의 <c>xsi:Nil</c> 특성 값입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
      <param name="xsiSchemaLocation">요소의 <c>xsi:SchemaLocation</c> 특성 값입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
      <param name="xsiNoNamespaceSchemaLocation">요소의 <c>xsi:NoNamespaceSchemaLocation</c> 특성 값입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">요소 이름이 현재 컨텍스트에서 유효하지 않은 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> 메서드가 올바른 시퀀스로 호출되지 않은 경우. 예를 들어, <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" />를 호출한 후 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 메서드를 호출하는 경우가 여기에 해당합니다.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)">
      <summary>단순 콘텐츠를 포함하는 요소에 대해 해당 데이터 형식을 기준으로 요소의 텍스트 콘텐츠가 유효한지 확인하고 복합 콘텐츠를 포함하는 요소에 대해 현재 요소의 콘텐츠가 완전한지 확인합니다.</summary>
      <param name="schemaInfo">요소의 유효성이 성공적으로 검사될 경우 속성이 설정되는 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 개체입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
      <returns>요소에 단순 콘텐츠가 있는 경우 요소의 구문 분석되고 형식화된 텍스트 값입니다.</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">요소의 콘텐츠가 유효하지 않은 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> 메서드가 올바른 시퀀스로 호출되지 않은 경우. 예를 들어, <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" />를 호출한 후 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> 메서드를 호출하는 경우가 여기에 해당합니다.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
      <summary>지정된 요소의 데이터 형식을 기준으로 해당 요소의 텍스트 콘텐츠가 유효한지 확인합니다.</summary>
      <param name="schemaInfo">요소의 텍스트 콘텐츠에 대한 유효성이 성공적으로 검사될 경우 속성이 설정되는 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 개체입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
      <param name="typedValue">요소의 형식화된 텍스트 콘텐츠입니다.</param>
      <returns>요소의 구문 분석되고 형식화된 단순 콘텐츠입니다.</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">요소의 텍스트 콘텐츠가 유효하지 않은 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> 메서드의 호출 순서가 잘못되거나(예: <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" />를 호출한 후 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />를 호출한 경우), <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 메서드를 이전에 호출했거나, 요소에 복합 콘텐츠가 있는 경우</exception>
      <exception cref="T:System.ArgumentNullException">형식화된 텍스트 콘텐츠 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
      <summary>요소 컨텍스트에 필수 특성이 모두 있는지 확인하고 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 개체를 준비하여 요소의 자식 내용의 유효성을 검사합니다.</summary>
      <param name="schemaInfo">요소 컨텍스트의 필수 특성이 모두 있는지를 화인하는 유효성 검사가 성공할 경우 속성이 설정되는 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 개체입니다. 이 매개 변수는 <see langword="null" />일 수 있습니다.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">현재 요소 컨텍스트의 필수 특성 중 하나 이상이 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> 메서드가 올바른 시퀀스로 호출되지 않은 경우. 예를 들어, <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />를 호출한 후 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />를 호출한 경우가 여기에 해당합니다.</exception>
      <exception cref="T:System.ArgumentNullException">지정된 매개 변수 중 하나 이상이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)">
      <summary>지정된 텍스트 <see langword="string" />을 현재 요소 컨텍스트에서 사용할 수 있는지 확인하고, 현재 요소에 단순 콘텐츠가 있는 경우 유효성 검사를 위해 텍스트를 누적시킵니다.</summary>
      <param name="elementValue">현재 요소 컨텍스트에서 유효성을 검사할 텍스트 <see langword="string" />입니다.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">지정된 텍스트 <see langword="string" />을 현재 요소 컨텍스트에서 사용할 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 메서드가 올바른 시퀀스로 호출되지 않은 경우. 예를 들어, <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" />를 호출한 후 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 메서드를 호출하는 경우가 여기에 해당합니다.</exception>
      <exception cref="T:System.ArgumentNullException">텍스트 <see langword="string" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlValueGetter" /> 개체에서 반환된 텍스트를 현재 요소 컨텍스트에서 사용할 수 있는지 확인하고, 현재 요소에 단순 콘텐츠가 있는 경우 유효성 검사를 위해 텍스트를 누적시킵니다.</summary>
      <param name="elementValue">텍스트 값을 특성의 XSD(XML 스키마 정의 언어) 형식과 호환되는 CLR(공용 언어 런타임) 형식으로 전달하는 데 사용되는 <see cref="T:System.Xml.Schema.XmlValueGetter" /><see langword="delegate" />입니다.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">지정된 텍스트 <see langword="string" />을 현재 요소 컨텍스트에서 사용할 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 메서드가 올바른 시퀀스로 호출되지 않은 경우. 예를 들어, <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" />를 호출한 후 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 메서드를 호출하는 경우가 여기에 해당합니다.</exception>
      <exception cref="T:System.ArgumentNullException">텍스트 <see langword="string" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.String)">
      <summary>지정된 <see langword="string" />에 있는 공백을 현재 요소 컨텍스트에서 사용할 수 있는지 확인하고, 현재 요소에 단순 콘텐츠가 있는 경우 유효성 검사를 위해 공백을 누적시킵니다.</summary>
      <param name="elementValue">현재 요소 컨텍스트에서 유효성을 검사할 공백 <see langword="string" />입니다.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">현재 요소 컨텍스트에서 공백을 사용할 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> 메서드가 올바른 시퀀스로 호출되지 않은 경우. 예를 들어, <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" />를 호출한 후 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 메서드를 호출하는 경우가 여기에 해당합니다.</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.Xml.Schema.XmlValueGetter)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlValueGetter" /> 개체에서 반환된 공백을 현재 요소 컨텍스트에서 사용할 수 있는지 확인하고, 현재 요소에 단순 콘텐츠가 있는 경우 유효성 검사를 위해 공백을 누적시킵니다.</summary>
      <param name="elementValue">공백 값을 특성의 XSD(XML 스키마 정의 언어) 형식과 호환되는 CLR(공용 언어 런타임) 형식으로 전달하는 데 사용되는 <see cref="T:System.Xml.Schema.XmlValueGetter" /><see langword="delegate" />입니다.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">현재 요소 컨텍스트에서 공백을 사용할 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> 메서드가 올바른 시퀀스로 호출되지 않은 경우. 예를 들어, <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" />를 호출한 후 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 메서드를 호출하는 경우가 여기에 해당합니다.</exception>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler">
      <summary>스키마 유효성을 검사하는 동안 발생하는 스키마 유효성 검사 경고 및 오류를 받을 <see cref="T:System.Xml.Schema.ValidationEventHandler" />입니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.ValidationEventSender">
      <summary>유효성 검사 이벤트의 sender 개체로 보낼 개체를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Object" />입니다. 기본값은 이 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.XmlResolver">
      <summary>
        <c>xs:import</c> 및 <c>xs:include</c> 요소뿐만 아니라 <c>xsi:schemaLocation</c> 및 <c>xsi:noNamespaceSchemaLocation</c> 특성을 확인하는 데 사용되는 <see cref="T:System.Xml.XmlResolver" /> 개체를 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.XmlResolver" /> 개체입니다. 기본값은 <see cref="T:System.Xml.XmlUrlResolver" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidity">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 클래스를 사용하여 유효성이 검사된 XML 항목의 유효성을 나타냅니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.Invalid">
      <summary>XML 항목이 유효하지 않습니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.NotKnown">
      <summary>XML 항목의 유효성을 알 수 없습니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.Valid">
      <summary>XML 항목이 유효합니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet">
      <summary>W3C(World Wide Web 컨소시엄) <see langword="whiteSpace" /> 패싯을 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaWhiteSpaceFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaXPath">
      <summary>W3C(World Wide Web 컨소시엄) <see langword="selector" /> 요소를 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaXPath.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaXPath" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaXPath.XPath">
      <summary>XPath 식의 특성을 가져오거나 설정합니다.</summary>
      <returns>XPath 식에 대한 문자열 특성 값입니다.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSeverityType">
      <summary>유효성 검사 이벤트의 심각도를 나타냅니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Error">
      <summary>인스턴스 문서의 유효성을 검사할 때 발생한 유효성 검사 오류를 나타냅니다. 이 멤버는 DTD(문서 형식 정의) 및 XSD(XML 스키마 정의 언어) 스키마에 적용됩니다. W3C(World Wide Web 컨소시엄) 유효성 검사 제약 조건은 오류로 간주됩니다. 유효성 검사 이벤트 처리기를 만들지 않은 경우 오류는 예외를 throw합니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Warning">
      <summary>오류가 아닌 유효성 검사 이벤트가 발생했음을 나타냅니다. 일반적으로 경고는 DTD가 없거나, 특정 요소나 특성의 유효성을 검사하는 데 사용할 XML 스키마가 없는 경우에 발생합니다. 오류와 달리 경고는 유효성 검사 이벤트 처리기가 없어도 예외를 throw하지 않습니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlTypeCode">
      <summary>W3C XSD(XML 스키마 정의 언어) 스키마 형식을 나타냅니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.AnyAtomicType">
      <summary>공용 구조체의 atomic 값입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.AnyUri">
      <summary>W3C XML 스키마 <see langword="xs:anyURI" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Attribute">
      <summary>이 값은 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Base64Binary">
      <summary>W3C XML 스키마 <see langword="xs:base64Binary" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Boolean">
      <summary>W3C XML 스키마 <see langword="xs:boolean" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Byte">
      <summary>W3C XML 스키마 <see langword="xs:byte" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Comment">
      <summary>이 값은 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Date">
      <summary>W3C XML 스키마 <see langword="xs:date" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.DateTime">
      <summary>W3C XML 스키마 <see langword="xs:dateTime" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.DayTimeDuration">
      <summary>이 값은 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Decimal">
      <summary>W3C XML 스키마 <see langword="xs:decimal" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Document">
      <summary>이 값은 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Double">
      <summary>W3C XML 스키마 <see langword="xs:double" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Duration">
      <summary>W3C XML 스키마 <see langword="xs:Duration" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Element">
      <summary>이 값은 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Entity">
      <summary>W3C XML 스키마 <see langword="xs:ENTITY" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Float">
      <summary>W3C XML 스키마 <see langword="xs:float" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GDay">
      <summary>W3C XML 스키마 <see langword="xs:gDay" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GMonth">
      <summary>W3C XML 스키마 <see langword="xs:gMonth" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GMonthDay">
      <summary>W3C XML 스키마 <see langword="xs:gMonthDay" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GYear">
      <summary>W3C XML 스키마 <see langword="xs:gYear" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GYearMonth">
      <summary>W3C XML 스키마 <see langword="xs:gYearMonth" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.HexBinary">
      <summary>W3C XML 스키마 <see langword="xs:hexBinary" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Id">
      <summary>W3C XML 스키마 <see langword="xs:ID" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Idref">
      <summary>W3C XML 스키마 <see langword="xs:IDREF" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Int">
      <summary>W3C XML 스키마 <see langword="xs:int" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Integer">
      <summary>W3C XML 스키마 <see langword="xs:integer" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Item">
      <summary>노드나 atomic 값 등의 항목입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Language">
      <summary>W3C XML 스키마 <see langword="xs:language" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Long">
      <summary>W3C XML 스키마 <see langword="xs:long" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Name">
      <summary>W3C XML 스키마 <see langword="xs:Name" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Namespace">
      <summary>이 값은 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NCName">
      <summary>W3C XML 스키마 <see langword="xs:NCName" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NegativeInteger">
      <summary>W3C XML 스키마 <see langword="xs:negativeInteger" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NmToken">
      <summary>W3C XML 스키마 <see langword="xs:NMTOKEN" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Node">
      <summary>이 값은 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.None">
      <summary>형식 정보가 없습니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NonNegativeInteger">
      <summary>W3C XML 스키마 <see langword="xs:nonNegativeInteger" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NonPositiveInteger">
      <summary>W3C XML 스키마 <see langword="xs:nonPositiveInteger" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NormalizedString">
      <summary>W3C XML 스키마 <see langword="xs:normalizedString" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Notation">
      <summary>W3C XML 스키마 <see langword="xs:NOTATION" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.PositiveInteger">
      <summary>W3C XML 스키마 <see langword="xs:positiveInteger" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.ProcessingInstruction">
      <summary>이 값은 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.QName">
      <summary>W3C XML 스키마 <see langword="xs:QName" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Short">
      <summary>W3C XML 스키마 <see langword="xs:short" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.String">
      <summary>W3C XML 스키마 <see langword="xs:string" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Text">
      <summary>이 값은 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Time">
      <summary>W3C XML 스키마 <see langword="xs:time" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Token">
      <summary>W3C XML 스키마 <see langword="xs:token" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedByte">
      <summary>W3C XML 스키마 <see langword="xs:unsignedByte" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedInt">
      <summary>W3C XML 스키마 <see langword="xs:unsignedInt" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedLong">
      <summary>W3C XML 스키마 <see langword="xs:unsignedLong" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedShort">
      <summary>W3C XML 스키마 <see langword="xs:unsignedShort" /> 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UntypedAtomic">
      <summary>형식화되지 않은 atomic 값입니다.</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.YearMonthDuration">
      <summary>이 값은 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlValueGetter">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 클래스에서 특성, 텍스트 및 공백 값을 해당 특성, 텍스트 또는 공백의 XSD(XML 스키마 정의 언어) 형식과 호환되는 CLR(공용 언어 런타임) 형식으로 전달하는 데 사용하는 <see langword="delegate" />입니다.</summary>
      <returns>특성, 텍스트 또는 공백 값을 포함하는 개체입니다. 개체는 특성, 텍스트 또는 공백 값의 XSD 형식에 해당하는 CLR 형식입니다.</returns>
    </member>
    <member name="T:System.Xml.Serialization.IXmlSerializable">
      <summary>XML serialization 및 deserialization을 위한 사용자 지정 서식을 제공합니다.</summary>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
      <summary>이 메서드는 예약되어 있으므로 사용해서는 안 됩니다. <see langword="IXmlSerializable" /> 인터페이스를 구현할 때 이 메서드에서 <see langword="null" />(Visual Basic에서는 <see langword="Nothing" />)을 반환해야 하지만 사용자 지정 스키마를 지정해야 하는 경우에는 <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" />를 클래스에 적용합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 메서드에 의해 생성되고 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 메서드가 사용하는 개체의 XML 표현을 설명하는 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />입니다.</returns>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
      <summary>개체의 XML 표현에서 개체를 생성합니다.</summary>
      <param name="reader">개체가 deserialize되는 <see cref="T:System.Xml.XmlReader" /> 스트림입니다.</param>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
      <summary>개체를 XML 표현으로 변환합니다.</summary>
      <param name="writer">개체가 serialize되는 <see cref="T:System.Xml.XmlWriter" /> 스트림입니다.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyAttributeAttribute">
      <summary>멤버(<see cref="T:System.Xml.XmlAttribute" /> 개체의 배열을 반환하는 필드)가 XML 특성을 포함할 수 있도록 지정합니다.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyAttributeAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" /> 클래스의 새 인스턴스를 만듭니다.</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyElementAttribute">
      <summary>멤버(<see cref="T:System.Xml.XmlElement" /> 또는 <see cref="T:System.Xml.XmlNode" /> 개체의 배열을 반환하는 필드)가 serialize 또는 deserialize되고 있는 개체에 해당 멤버가 없는 XML 요소를 나타내는 개체를 포함하도록 지정합니다.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 클래스의 새 인스턴스를 초기화하며 XML 문서에 생성된 XML 요소의 이름을 지정합니다.</summary>
      <param name="name">
        <see cref="T:System.Xml.Serialization.XmlSerializer" />가 생성하는 XML 요소의 이름입니다.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 클래스의 새 인스턴스를 초기화하며 XML 문서와 이 문서의 XML 네임스페이스에 생성된 XML 요소의 이름을 지정합니다.</summary>
      <param name="name">
        <see cref="T:System.Xml.Serialization.XmlSerializer" />가 생성하는 XML 요소의 이름입니다.</param>
      <param name="ns">XML 요소의 XML 네임스페이스입니다.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Name">
      <summary>XML 요소 이름을 가져오거나 설정합니다.</summary>
      <returns>XML 요소의 이름입니다.</returns>
      <exception cref="T:System.InvalidOperationException">배열 멤버의 요소 이름이 <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> 속성으로 지정한 요소 이름과 일치하지 않는 경우</exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace">
      <summary>XML 문서에 생성된 XML 네임스페이스를 가져오거나 설정합니다.</summary>
      <returns>XML 네임스페이스입니다.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Order">
      <summary>요소가 serialize 또는 deserialize되는 명시적 순서를 가져오거나 설정합니다.</summary>
      <returns>코드가 생성되는 순서입니다.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeAttribute">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" />가 해당 클래스 멤버를 XML 특성으로 serialize하도록 지정합니다.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> 클래스의 새 인스턴스를 초기화하고 생성된 XML 특성의 이름을 지정합니다.</summary>
      <param name="attributeName">
        <see cref="T:System.Xml.Serialization.XmlSerializer" />가 생성하는 XML 특성의 이름입니다.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String,System.Type)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="attributeName">생성되는 XML 특성의 이름입니다.</param>
      <param name="type">특성을 저장하는 데 사용되는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">특성을 저장하는 데 사용되는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.AttributeName">
      <summary>XML 특성의 이름을 가져오거나 설정합니다.</summary>
      <returns>XML 특성의 이름입니다. 기본값은 멤버 이름입니다.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.DataType">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" />에 의해 생성된 XML 특성의 XSD 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns>XSD (XML 스키마 문서) 데이터 형식입니다.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Form">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" />를 통해 생성된 XML 특성의 이름이 정규화된 이름인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 값 중 하나입니다. 기본값은 <see langword="XmlForm.None" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Namespace">
      <summary>XML 특성의 XML 네임스페이스를 가져오거나 설정합니다.</summary>
      <returns>XML 특성의 XML 네임스페이스입니다.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Type">
      <summary>XML 특성의 복합 형식을 가져오거나 설정합니다.</summary>
      <returns>XML 특성의 형식입니다.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementAttribute">
      <summary>공용 필드 또는 속성을 포함하는 개체를 <see cref="T:System.Xml.Serialization.XmlSerializer" />가 serialize하거나 deserialize할 때 해당 필드나 속성이 XML 요소를 나타냄을 의미합니다.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 클래스의 새 인스턴스를 초기화하고 XML 요소의 이름을 지정합니다.</summary>
      <param name="elementName">serialize된 멤버의 XML 요소 이름입니다.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String,System.Type)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlElementAttribute" />의 새 인스턴스를 초기화하고 XML 요소의 이름을 지정하며 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />가 적용되는 멤버의 파생 형식도 지정합니다. 이 멤버 형식은 <see cref="T:System.Xml.Serialization.XmlSerializer" />가 이를 포함하는 개체를 serialize할 때 사용됩니다.</summary>
      <param name="elementName">serialize된 멤버의 XML 요소 이름입니다.</param>
      <param name="type">멤버의 형식에서 파생된 개체의 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 클래스의 새 인스턴스를 초기화하고 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />가 적용되는 멤버에 대한 형식을 지정합니다. 이 형식은 <see cref="T:System.Xml.Serialization.XmlSerializer" />가 이를 포함하는 개체를 serialize하거나 deserialize할 때 사용됩니다.</summary>
      <param name="type">멤버의 형식에서 파생된 개체의 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.DataType">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" />에 의해 생성된 XML 요소의 XSD(XML 스키마 정의) 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns>XML 스키마 데이터 형식입니다.</returns>
      <exception cref="T:System.Exception">지정한 XML 스키마 데이터 형식을 .NET 데이터 형식에 매핑할 수 없는 경우</exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.ElementName">
      <summary>생성된 XML 요소의 이름을 가져오거나 설정합니다.</summary>
      <returns>생성된 XML 요소의 이름입니다. 기본값은 멤버 식별자입니다.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Form">
      <summary>요소가 한정되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.IsNullable">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" />가 <see langword="null" />로 설정된 멤버를 <see langword="xsi:nil" /> 특성이 <see langword="true" />로 설정된 빈 태그로 serialize해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlSerializer" />가 <see langword="true" /> 특성을 생성하면 <see langword="xsi:nil" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Namespace">
      <summary>클래스가 serialize될 때 결과로 만들어지는 XML 요소에 할당된 네임스페이스를 가져오거나 설정합니다.</summary>
      <returns>XML 요소의 네임스페이스입니다.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Order">
      <summary>요소가 serialize 또는 deserialize되는 명시적 순서를 가져오거나 설정합니다.</summary>
      <returns>코드가 생성되는 순서입니다.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Type">
      <summary>XML 요소를 나타내는 데 사용되는 개체 형식을 가져오거나 설정합니다.</summary>
      <returns>멤버의 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlEnumAttribute">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" />가 열거형 멤버를 serialize하는 방식을 제어합니다.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> 클래스의 새 인스턴스를 초기화하고 <see cref="T:System.Xml.Serialization.XmlSerializer" />가 열거형을 serialize하거나 deserialize할 때 생성하거나 인식하는 XML 값을 지정합니다.</summary>
      <param name="name">열거형 멤버의 재정의 이름입니다.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlEnumAttribute.Name">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" />가 열거형을 serialize할 때 XML 문서 인스턴스에서 생성된 값 또는 열거형 멤버를 deserialize할 때 인식된 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlSerializer" />가 열거형을 serialize할 때 XML 문서 인스턴스에서 생성된 값, 또는 열거형 멤버를 deserialize할 때 인식된 값입니다.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlIgnoreAttribute">
      <summary>
        <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" />의 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 메서드를 호출하여 공용 필드 또는 공용 읽기/쓰기 속성 값을 serialize하지 않도록 합니다.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlIgnoreAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlIgnoreAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute">
      <summary>대상 속성, 매개 변수, 반환 값 또는 클래스 멤버가 XML 문서 내에서 사용되는 네임스페이스와 연관된 접두사를 포함하도록 지정합니다.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlRootAttribute">
      <summary>특성 대상의 XML serialization을 XML 루트 요소로 제어합니다.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> 클래스의 새 인스턴스를 초기화하고 XML 루트 요소의 이름을 지정합니다.</summary>
      <param name="elementName">XML 루트 요소의 이름입니다.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.DataType">
      <summary>XML 루트 요소의 XSD 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns>XSD (XML 스키마 문서) 데이터 형식입니다.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.ElementName">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 클래스의 <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> 및 <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" /> 메서드에 의해 각각 생성되고 인식되는 XML 요소의 이름을 가져오거나 설정합니다.</summary>
      <returns>XML 문서 인스턴스에서 생성되고 인식되는 XML 루트 요소의 이름입니다. 기본값은 serialize된 클래스의 이름입니다.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.IsNullable">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" />가 <see langword="null" />로 설정된 멤버를 <see langword="xsi:nil" />로 설정된 <see langword="true" /> 특성으로 serialize해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlSerializer" />가 <see langword="true" /> 특성을 생성하면 <see langword="xsi:nil" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.Namespace">
      <summary>XML 루트 요소의 네임스페이스를 가져오거나 설정합니다.</summary>
      <returns>XML 요소의 네임스페이스입니다.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSchemaProviderAttribute">
      <summary>형식에 적용되는 경우 XML 스키마를 반환하는 형식의 정적 메서드 이름과 형식의 serialization을 제어하는 <see cref="T:System.Xml.XmlQualifiedName" />(익명 형식의 경우 <see cref="T:System.Xml.Schema.XmlSchemaType" />)을 저장합니다.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaProviderAttribute.#ctor(System.String)">
      <summary>형식의 XML 스키마를 제공하는 정적 메서드 이름을 가져와서 <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="methodName">구현되어야 하는 정적 메서드의 이름입니다.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.IsAny">
      <summary>대상 클래스가 와일드카드이거나 클래스의 스키마에 <see langword="xs:any" /> 요소만 포함되어 있는지 여부를 확인하는 값을 가져오거나 설정합니다.</summary>
      <returns>클래스가 와일드카드이거나 스키마에 <see langword="true" /> 요소만 있으면 <see langword="xs:any" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.MethodName">
      <summary>형식의 XML 스키마를 제공하는 정적 메서드의 이름과 해당 XML 스키마 데이터 형식의 이름을 가져옵니다.</summary>
      <returns>XML 스키마를 반환하기 위해 XML 인프라에서 호출하는 메서드의 이름입니다.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerNamespaces">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" />가 XML 문서 인스턴스에서 정규화된 이름을 생성하는 데 사용하는 XML 네임스페이스 및 접두사를 포함합니다.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>접두사와 네임스페이스 쌍의 컬렉션을 포함하는 <see langword="XmlSerializerNamespaces" />의 지정된 인스턴스를 사용하여 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="namespaces">네임스페이스와 접두사 쌍을 포함하는 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />의 인스턴스입니다.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.XmlQualifiedName[])">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="namespaces">
        <see cref="T:System.Xml.XmlQualifiedName" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.Add(System.String,System.String)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 개체에 접두사와 네임스페이스 쌍을 추가합니다.</summary>
      <param name="prefix">XML 네임스페이스와 관련된 접두사입니다.</param>
      <param name="ns">XML 네임스페이스입니다.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerNamespaces.Count">
      <summary>컬렉션에 있는 접두사와 네임스페이스 쌍의 개수를 가져옵니다.</summary>
      <returns>컬렉션에 있는 접두사와 네임스페이스 쌍의 개수입니다.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.ToArray">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 개체에 있는 접두사와 네임스페이스 쌍으로 이루어진 배열을 가져옵니다.</summary>
      <returns>XML 문서에서 정규화된 이름으로 사용되는 <see cref="T:System.Xml.XmlQualifiedName" /> 개체로 이루어진 배열입니다.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlTextAttribute">
      <summary>멤버가 포함된 클래스가 serialize되거나 deserialize될 때 멤버를 XML 텍스트로 처리하도록 <see cref="T:System.Xml.Serialization.XmlSerializer" />에 지정합니다.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">serialize할 개체의 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.DataType">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" />에 의해 생성된 텍스트의 XSD(XML 스키마 정의) 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns>XSD (XML 스키마) 데이터 형식입니다.</returns>
      <exception cref="T:System.Exception">지정한 XML 스키마 데이터 형식을 .NET 데이터 형식에 매핑할 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">지정한 XML 스키마 데이터 형식은 속성에 맞지 않으므로 멤버 형식으로 변환할 수 없는 경우</exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.Type">
      <summary>멤버의 형식을 가져오거나 설정합니다.</summary>
      <returns>멤버의 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="T:System.Xml.ValidationType">
      <summary>실행할 유효성 검사의 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Xml.ValidationType.Auto">
      <summary>DTD나 스키마 정보가 있는지를 확인합니다. 
.NET Framework 2.0부터 이 필드는 더 이상 사용되지 않습니다. 사용되지 않는 <see cref="T:System.Xml.XmlValidatingReader" /> 클래스에만 적용됩니다.</summary>
    </member>
    <member name="F:System.Xml.ValidationType.DTD">
      <summary>DTD에 따라 유효성을 검사합니다.</summary>
    </member>
    <member name="F:System.Xml.ValidationType.None">
      <summary>유효성 검사가 수행되지 않고 유효성 검사 오류가 throw되지 않습니다. 이 설정은 XML 1.0 규격 유효성 비확인 파서를 만듭니다.
<see cref="M:System.Xml.XmlReader.ResolveEntity" /> 보고서 기본 특성을 호출하고 일반 엔터티를 확인합니다. DOCTYPE은 유효성 검사 목적으로 사용되지 않습니다.</summary>
    </member>
    <member name="F:System.Xml.ValidationType.Schema">
      <summary>인라인 XML 스키마를 포함하여 XSD(XML 스키마 정의 언어)에 따라 유효성을 검사합니다. XSD 스키마는 <see langword="schemaLocation" /> 특성이나 제공된 <see langword="Schemas" /> 속성을 사용하여 네임스페이스 URI와 연결됩니다.</summary>
    </member>
    <member name="F:System.Xml.ValidationType.XDR">
      <summary>인라인 XDR 스키마를 포함하여 XDR(XML-Data Reduced) 스키마에 따라 유효성을 검사합니다. XDR 스키마는 <see langword="x-schema" /> 네임스페이스 접두사나 <see cref="P:System.Xml.XmlValidatingReader.Schemas" /> 속성을 사용하여 인식됩니다.
.NET Framework 2.0부터 이 필드는 더 이상 사용되지 않습니다. 사용되지 않는 <see cref="T:System.Xml.XmlValidatingReader" /> 클래스에만 적용됩니다.</summary>
    </member>
    <member name="T:System.Xml.WhitespaceHandling">
      <summary>공백을 처리하는 방법을 지정합니다.</summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.All">
      <summary>
        <see langword="Whitespace" /> 및 <see langword="SignificantWhitespace" /> 노드를 반환합니다. 이 값이 기본값입니다.</summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.None">
      <summary>
        <see langword="Whitespace" /> 및 <see langword="SignificantWhitespace" /> 노드를 반환하지 않습니다.</summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.Significant">
      <summary>
        <see langword="SignificantWhitespace" /> 노드만을 반환합니다.</summary>
    </member>
    <member name="T:System.Xml.WriteState">
      <summary>
        <see cref="T:System.Xml.XmlWriter" />의 상태를 지정합니다.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Attribute">
      <summary>특성 값을 쓰고 있음을 나타냅니다.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Closed">
      <summary>
        <see cref="M:System.Xml.XmlWriter.Close" /> 메서드가 이미 호출되었음을 나타냅니다.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Content">
      <summary>요소 내용을 쓰고 있음을 나타냅니다.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Element">
      <summary>요소 시작 태그를 쓰고 있음을 나타냅니다.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Error">
      <summary>예외가 throw되어 <see cref="T:System.Xml.XmlWriter" />가 잘못된 상태에 있습니다. <see cref="M:System.Xml.XmlWriter.Close" /> 메서드를 호출하여 <see cref="T:System.Xml.XmlWriter" />를 <see cref="F:System.Xml.WriteState.Closed" /> 상태로 설정할 수 있습니다. 이외의 경우 <see cref="T:System.Xml.XmlWriter" /> 메서드를 호출하면 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
이 필드는 .NET Framework 2.0에서 추가되었습니다.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Prolog">
      <summary>프롤로그를 쓰고 있음을 나타냅니다.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Start">
      <summary>Write 메서드가 아직 호출되지 않았음을 나타냅니다.</summary>
    </member>
    <member name="T:System.Xml.XmlAttribute">
      <summary>특성을 나타냅니다. 특성에 대해 유효한 값과 기본값은 DTD(문서 형식 정의) 또는 스키마에 정의됩니다.</summary>
    </member>
    <member name="M:System.Xml.XmlAttribute.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="prefix">네임스페이스 접두사입니다.</param>
      <param name="localName">특성의 로컬 이름입니다.</param>
      <param name="namespaceURI">네임스페이스 URI(Uniform Resource Identifier)입니다.</param>
      <param name="doc">부모 XML 문서입니다.</param>
    </member>
    <member name="M:System.Xml.XmlAttribute.AppendChild(System.Xml.XmlNode)">
      <summary>지정된 노드를 이 노드의 자식 노드 목록 끝에 추가합니다.</summary>
      <param name="newChild">추가할 <see cref="T:System.Xml.XmlNode" />입니다.</param>
      <returns>추가된 <see cref="T:System.Xml.XmlNode" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 노드가 <paramref name="newChild" /> 노드 형식의 자식 노드를 허용하지 않는 형식을 가지는 경우  
<paramref name="newChild" />가 이 노드의 상위 노드일 경우</exception>
      <exception cref="T:System.ArgumentException">이 노드를 만든 문서가 아닌 다른 문서에서 <paramref name="newChild" />를 만든 경우  
이 노드가 읽기 전용인 경우</exception>
    </member>
    <member name="P:System.Xml.XmlAttribute.BaseURI">
      <summary>노드의 기본 URI(Uniform Resource Identifier)를 가져옵니다.</summary>
      <returns>노드가 로드된 위치이거나 노드에 기본 URI가 없으면 String.Empty입니다. Attribute 노드의 기본 URI는 해당 노드의 소유자 요소의 기본 URI와 같습니다. Attribute 노드에 소유자 요소가 없으면, <see langword="BaseURI" />가 String.Empty를 반환합니다.</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.CloneNode(System.Boolean)">
      <summary>이 노드의 복제본을 만듭니다.</summary>
      <param name="deep">지정된 노드 아래의 하위 트리를 재귀적으로 복제하려면 <see langword="true" />이고, 노드 자체만 복제하려면 <see langword="false" />입니다.</param>
      <returns>복제 노드입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.InnerText">
      <summary>노드와 모든 자식의 연결된 값을 설정합니다.</summary>
      <returns>노드와 모든 자식의 연결된 값입니다. Attribute 노드의 경우, 이 속성의 기능은 <see cref="P:System.Xml.XmlAttribute.Value" /> 속성의 기능과 같습니다.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.InnerXml">
      <summary>특성 값을 설정합니다.</summary>
      <returns>특성 값입니다.</returns>
      <exception cref="T:System.Xml.XmlException">이 속성을 설정할 때 지정된 XML이 올바른 형식이 아닙니다.</exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>지정된 노드를 지정된 참조 노드 바로 다음에 삽입합니다.</summary>
      <param name="newChild">삽입할 <see cref="T:System.Xml.XmlNode" />입니다.</param>
      <param name="refChild">참조 노드인 <see cref="T:System.Xml.XmlNode" />입니다. <paramref name="newChild" />는 <paramref name="refChild" /> 다음에 있습니다.</param>
      <returns>삽입된 <see cref="T:System.Xml.XmlNode" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 노드가 <paramref name="newChild" /> 노드 형식의 자식 노드를 허용하지 않는 형식을 가지는 경우  
<paramref name="newChild" />가 이 노드의 상위 노드일 경우</exception>
      <exception cref="T:System.ArgumentException">이 노드를 만든 문서가 아닌 다른 문서에서 <paramref name="newChild" />를 만든 경우  
<paramref name="refChild" />가 이 노드의 자식이 아닌 경우  
이 노드가 읽기 전용인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>지정된 노드를 지정된 참조 노드 바로 앞에 삽입합니다.</summary>
      <param name="newChild">삽입할 <see cref="T:System.Xml.XmlNode" />입니다.</param>
      <param name="refChild">참조 노드인 <see cref="T:System.Xml.XmlNode" />입니다. 이 노드 앞에 <paramref name="newChild" />가 있습니다.</param>
      <returns>삽입된 <see cref="T:System.Xml.XmlNode" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">현재 노드가 <paramref name="newChild" /> 노드 형식의 자식 노드를 허용하지 않는 형식인 경우  
<paramref name="newChild" />가 이 노드의 상위 노드일 경우</exception>
      <exception cref="T:System.ArgumentException">이 노드를 만든 문서가 아닌 다른 문서에서 <paramref name="newChild" />를 만든 경우  
<paramref name="refChild" />가 이 노드의 자식이 아닌 경우  
이 노드가 읽기 전용인 경우</exception>
    </member>
    <member name="P:System.Xml.XmlAttribute.LocalName">
      <summary>노드의 로컬 이름을 가져옵니다.</summary>
      <returns>접두사가 제거된 Attribute 노드의 이름입니다. 다음 예에서 &lt;bk:genre 책 = 'novel'&gt;의 <see langword="LocalName" /> 특성은 <see langword="genre" />합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Name">
      <summary>노드의 정규화된 이름을 가져옵니다.</summary>
      <returns>Attribute 노드의 정규화된 이름입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.NamespaceURI">
      <summary>이 노드의 네임스페이스 URI를 가져옵니다.</summary>
      <returns>이 노드의 네임스페이스 URI입니다. 해당 특성에 네임스페이스가 명시적으로 부여되지 않으면, 이 속성은 String.Empty를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.NodeType">
      <summary>현재 노드의 형식을 가져옵니다.</summary>
      <returns>
        <see langword="XmlAttribute" /> 노드의 노드 형식은 XmlNodeType.Attribute입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.OwnerDocument">
      <summary>이 노드가 속한 <see cref="T:System.Xml.XmlDocument" />를 가져옵니다.</summary>
      <returns>이 노드가 속하는 XML 문서입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.OwnerElement">
      <summary>특성이 속한 <see cref="T:System.Xml.XmlElement" />를 가져옵니다.</summary>
      <returns>해당 특성이 속한 <see langword="XmlElement" />이거나, 이 특성이 <see langword="null" />의 일부가 아닌 경우 <see langword="XmlElement" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.ParentNode">
      <summary>이 노드의 부모 노드를 가져옵니다. <see langword="XmlAttribute" /> 노드의 경우, 이 속성은 항상 <see langword="null" />을 반환합니다.</summary>
      <returns>
        <see langword="XmlAttribute" /> 노드의 경우, 이 속성은 항상 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Prefix">
      <summary>이 노드의 네임스페이스 접두사를 가져오거나 설정합니다.</summary>
      <returns>이 노드의 네임스페이스 접두사입니다. 접두사가 없으면, 이 속성은 String.Empty를 반환합니다.</returns>
      <exception cref="T:System.ArgumentException">이 노드가 읽기 전용인 경우</exception>
      <exception cref="T:System.Xml.XmlException">지정된 접두사에 잘못된 문자가 포함된 경우  
지정된 접두사의 형식이 잘못된 경우  
이 노드의 namespaceURI가 <see langword="null" />인 경우  
지정된 접두사가 “xml”이고 이 노드의 namespaceURI가 “http://www.w3.org/XML/1998/namespace”와 다른 경우  
이 노드가 특성이고, 지정된 접두사가 “xmlns”이며, 이 노드의 namespaceURI가 “http://www.w3.org/2000/xmlns/”와 다른 경우  
이 노드가 특성이고 이 노드의 qualifiedName이 "xmlns" [Namespaces]인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.PrependChild(System.Xml.XmlNode)">
      <summary>지정된 노드를 이 노드의 자식 노드 목록 앞에 추가합니다.</summary>
      <param name="newChild">추가할 <see cref="T:System.Xml.XmlNode" />입니다. <see cref="T:System.Xml.XmlDocumentFragment" />일 경우 문서 단편의 전체 내용이 이 노드의 자식 목록으로 이동합니다.</param>
      <returns>추가된 <see cref="T:System.Xml.XmlNode" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 노드가 <paramref name="newChild" /> 노드 형식의 자식 노드를 허용하지 않는 형식을 가지는 경우  
<paramref name="newChild" />가 이 노드의 상위 노드일 경우</exception>
      <exception cref="T:System.ArgumentException">이 노드를 만든 문서가 아닌 다른 문서에서 <paramref name="newChild" />를 만든 경우  
이 노드가 읽기 전용인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.RemoveChild(System.Xml.XmlNode)">
      <summary>지정된 자식 노드를 제거합니다.</summary>
      <param name="oldChild">제거할 <see cref="T:System.Xml.XmlNode" />입니다.</param>
      <returns>제거된 <see cref="T:System.Xml.XmlNode" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldChild" />가 이 노드의 자식이 아닌 경우 이 노드가 읽기 전용인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>지정된 자식 노드를 지정된 새 자식 노드로 바꿉니다.</summary>
      <param name="newChild">새 자식 <see cref="T:System.Xml.XmlNode" />입니다.</param>
      <param name="oldChild">바꿀 <see cref="T:System.Xml.XmlNode" />입니다.</param>
      <returns>바꾼 <see cref="T:System.Xml.XmlNode" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 노드가 <paramref name="newChild" /> 노드 형식의 자식 노드를 허용하지 않는 형식을 가지는 경우  
<paramref name="newChild" />가 이 노드의 상위 노드일 경우</exception>
      <exception cref="T:System.ArgumentException">이 노드를 만든 문서가 아닌 다른 문서에서 <paramref name="newChild" />를 만든 경우  
이 노드가 읽기 전용인 경우  
<paramref name="oldChild" />가 이 노드의 자식이 아닌 경우</exception>
    </member>
    <member name="P:System.Xml.XmlAttribute.SchemaInfo">
      <summary>스키마 유효성 검사의 결과로 이 노드에 할당된 스키마 유효성 검사 이후 정보 집합을 가져옵니다.</summary>
      <returns>이 노드의 스키마 유효성 검사 이후 정보 집합이 포함된 <see cref="T:System.Xml.Schema.IXmlSchemaInfo" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Specified">
      <summary>특성 값이 명시적으로 설정되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>원본 인스턴스 문서에서 이 특성에 값이 명시적으로 부여되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see langword="false" /> 값은 해당 특성 값을 DTD에서 가져왔음을 나타냅니다.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Value">
      <summary>노드의 값을 가져오거나 설정합니다.</summary>
      <returns>노드의 <see cref="P:System.Xml.XmlNode.NodeType" />에 따라 반환되는 값이 달라집니다. <see langword="XmlAttribute" /> 노드의 경우, 이 속성은 특성 값입니다.</returns>
      <exception cref="T:System.ArgumentException">노드가 읽기 전용인데 set 작업이 호출된 경우</exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.WriteContentTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드의 모든 자식을 저장합니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="M:System.Xml.XmlAttribute.WriteTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드를 저장합니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="T:System.Xml.XmlAttributeCollection">
      <summary>이름이나 인덱스로 액세스할 수 있는 특성의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Append(System.Xml.XmlAttribute)">
      <summary>지정된 특성을 컬렉션의 마지막 노드로 삽입합니다.</summary>
      <param name="node">삽입할 특성입니다.</param>
      <returns>컬렉션에 추가할 <see langword="XmlAttribute" />입니다.</returns>
      <exception cref="T:System.ArgumentException">이 컬렉션을 만든 문서와 다른 문서에서 <paramref name="node" />를 만든 경우</exception>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)">
      <summary>모든 <see cref="T:System.Xml.XmlAttribute" /> 개체를 이 컬렉션에서 지정된 배열로 복사합니다.</summary>
      <param name="array">이 컬렉션에서 복사된 개체의 대상인 배열입니다.</param>
      <param name="index">복사를 시작할 배열의 인덱스입니다.</param>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.InsertAfter(System.Xml.XmlAttribute,System.Xml.XmlAttribute)">
      <summary>지정된 특성을 지정된 참조 특성 바로 뒤에 삽입합니다.</summary>
      <param name="newNode">삽입할 특성입니다.</param>
      <param name="refNode">참조 특성입니다. <paramref name="newNode" />는 <paramref name="refNode" /> 뒤에 삽입됩니다.</param>
      <returns>컬렉션에 삽입할 <see langword="XmlAttribute" />입니다.</returns>
      <exception cref="T:System.ArgumentException">이 컬렉션을 만든 문서와 다른 문서에서 <paramref name="newNode" />를 만든 경우 또는 <paramref name="refNode" />가 이 컬렉션의 멤버가 아닌 경우</exception>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.InsertBefore(System.Xml.XmlAttribute,System.Xml.XmlAttribute)">
      <summary>지정된 특성을 지정된 참조 특성 바로 앞에 삽입합니다.</summary>
      <param name="newNode">삽입할 특성입니다.</param>
      <param name="refNode">참조 특성입니다. <paramref name="newNode" />는 <paramref name="refNode" /> 앞에 삽입됩니다.</param>
      <returns>컬렉션에 삽입할 <see langword="XmlAttribute" />입니다.</returns>
      <exception cref="T:System.ArgumentException">이 컬렉션을 만든 문서와 다른 문서에서 <paramref name="newNode" />를 만든 경우 또는 <paramref name="refNode" />가 이 컬렉션의 멤버가 아닌 경우</exception>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.Int32)">
      <summary>지정된 인덱스가 있는 특성을 가져옵니다.</summary>
      <param name="i">특성의 인덱스입니다.</param>
      <returns>지정 된 인덱스에 있는 특성입니다.</returns>
      <exception cref="T:System.IndexOutOfRangeException">전달된 인덱스가 범위를 벗어납니다.</exception>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.String)">
      <summary>지정된 이름이 있는 특성을 가져옵니다.</summary>
      <param name="name">특성의 정규화된 이름입니다.</param>
      <returns>지정 된 이름을 가진 특성입니다. 특성이 없는 경우 이 속성은 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.String,System.String)">
      <summary>지정된 로컬 이름이나 네임스페이스 URI(Uniform Resource Identifier)가 있는 특성을 가져옵니다.</summary>
      <param name="localName">특성의 로컬 이름입니다.</param>
      <param name="namespaceURI">특성의 네임스페이스 URI입니다.</param>
      <returns>지정 된 로컬 이름과 네임 스페이스 URI를 사용 하는 특성입니다. 특성이 없는 경우 이 속성은 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Prepend(System.Xml.XmlAttribute)">
      <summary>지정된 특성을 컬렉션의 첫 노드로 삽입합니다.</summary>
      <param name="node">삽입할 특성입니다.</param>
      <returns>컬렉션에 추가된 <see langword="XmlAttribute" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Remove(System.Xml.XmlAttribute)">
      <summary>컬렉션에서 지정된 특성을 제거합니다.</summary>
      <param name="node">제거할 특성입니다.</param>
      <returns>제거된 노드이거나 컬렉션에 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.RemoveAll">
      <summary>컬렉션에서 모든 특성을 제거합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.RemoveAt(System.Int32)">
      <summary>컬렉션에서 지정된 인덱스에 해당하는 특성을 제거합니다.</summary>
      <param name="i">제거할 노드의 인덱스입니다. 첫 번째 노드에 인덱스 0이 있습니다.</param>
      <returns>지정된 인덱스에 특성이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.SetNamedItem(System.Xml.XmlNode)">
      <summary>해당 <see cref="T:System.Xml.XmlNode" /> 속성을 사용하여 <see cref="P:System.Xml.XmlNode.Name" />를 추가합니다.</summary>
      <param name="node">이 컬렉션에 저장할 Attribute 노드입니다. 노드 이름을 사용하여 나중에 노드에 액세스할 수 있습니다. 컬렉션에 해당 이름의 노드가 이미 있으면 새 노드로 바뀌고, 그렇지 않으면 노드가 컬렉션 끝에 추가됩니다.</param>
      <returns>
        <paramref name="node" />가 기존 노드를 같은 이름으로 바꾸면 이전 노드가 반환되고, 그렇지 않으면 추가된 노드가 반환됩니다.</returns>
      <exception cref="T:System.ArgumentException">이 컬렉션을 만든 문서와 다른 <see cref="T:System.Xml.XmlDocument" />에서 <paramref name="node" />를 만든 경우  
이 <see langword="XmlAttributeCollection" />이 읽기 전용인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" />가 이미 다른 <see cref="T:System.Xml.XmlAttribute" /> 개체의 특성인 <see cref="T:System.Xml.XmlElement" />인 경우. 다른 요소에서 특성을 다시 사용하려면 다시 사용할 <see langword="XmlAttribute" /> 개체를 복제해야 합니다.</exception>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)" />를 참조하십시오.</summary>
      <param name="array">이 컬렉션에서 복사된 개체의 대상인 배열입니다.</param>
      <param name="index">복사를 시작할 배열의 인덱스입니다.</param>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#Count">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#Count" />를 참조하세요.</summary>
      <returns>특성의 수를 포함 하는입니다.<see langword="int" /></returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#IsSynchronized" />를 참조하십시오.</summary>
      <returns>
        <see langword="true" />컬렉션이 동기화 되 면입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#SyncRoot" />를 참조하십시오.</summary>
      <returns>
        <see cref="T:System.Object" /> 컬렉션의 루트인입니다.</returns>
    </member>
    <member name="T:System.Xml.XmlCDataSection">
      <summary>CDATA 섹션을 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.XmlCDataSection.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlCDataSection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="data">문자 데이터가 포함된 <see cref="T:System.String" />입니다.</param>
      <param name="doc">
        <see cref="T:System.Xml.XmlDocument" /> 개체</param>
    </member>
    <member name="M:System.Xml.XmlCDataSection.CloneNode(System.Boolean)">
      <summary>이 노드의 복제본을 만듭니다.</summary>
      <param name="deep">지정된 노드 아래의 하위 트리를 재귀적으로 복제하려면 <see langword="true" />이고, 노드 자체만 복제하려면 <see langword="false" />입니다. CDATA 노드에는 자식이 없으므로 복제된 노드는 매개 변수 설정에 상관 없이 항상 데이터 내용을 포함하게 됩니다.</param>
      <returns>복제된 노드입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.LocalName">
      <summary>노드의 로컬 이름을 가져옵니다.</summary>
      <returns>CDATA 노드의 경우 로컬 이름은 <see langword="#cdata-section" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.Name">
      <summary>노드의 정규화된 이름을 가져옵니다.</summary>
      <returns>CDATA 노드의 경우 이 이름은 <see langword="#cdata-section" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.NodeType">
      <summary>현재 노드의 형식을 가져옵니다.</summary>
      <returns>노드 형식입니다. CDATA 노드의 경우 이 값은 XmlNodeType.CDATA입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.ParentNode">
      <summary>부모를 가질 수 있는 노드의 경우 이 노드의 부모를 가져옵니다.</summary>
      <returns>현재 노드의 부모인 <see langword="XmlNode" />입니다. 노드를 만들고 트리에 추가하지 않은 경우나 트리에서 노드를 제거한 경우 부모는 <see langword="null" />입니다. 다른 모든 노드의 경우에는 노드의 <see cref="P:System.Xml.XmlNode.NodeType" />에 따라 반환되는 값이 달라집니다. 다음 표에서는 <see langword="ParentNode" /> 속성에 대해 가능한 반환 값을 설명합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.PreviousText">
      <summary>이 노드 바로 앞에 있는 텍스트 노드를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.XmlNode" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xml.XmlCDataSection.WriteContentTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드의 자식을 저장합니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="M:System.Xml.XmlCDataSection.WriteTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드를 저장합니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="T:System.Xml.XmlCharacterData">
      <summary>일부 클래스에서 사용하는 텍스트 조작 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlCharacterData.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlCharacterData" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="data">문서에 추가할 문자 데이터가 포함된 문자열입니다.</param>
      <param name="doc">문자 데이터를 포함하기 위한 <see cref="T:System.Xml.XmlDocument" />입니다.</param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.AppendData(System.String)">
      <summary>지정한 문자열을 노드의 문자 데이터 끝에 추가합니다.</summary>
      <param name="strData">기존 문자열에 삽입할 문자열입니다.</param>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Data">
      <summary>노드의 데이터가 포함됩니다.</summary>
      <returns>노드의 데이터입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlCharacterData.DeleteData(System.Int32,System.Int32)">
      <summary>노드에서 문자 범위를 제거합니다.</summary>
      <param name="offset">삭제를 시작할 문자열 내의 위치입니다.</param>
      <param name="count">삭제할 문자의 수입니다.</param>
    </member>
    <member name="P:System.Xml.XmlCharacterData.InnerText">
      <summary>노드의 연결된 값과 모든 자식 노드를 가져오거나 설정합니다.</summary>
      <returns>노드의 연결된 값과 모든 자식 노드입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlCharacterData.InsertData(System.Int32,System.String)">
      <summary>지정된 문자 오프셋에 지정된 문자열을 삽입합니다.</summary>
      <param name="offset">제공된 문자열 데이터를 삽입할 문자열 내의 위치입니다.</param>
      <param name="strData">기존 문자열에 삽입할 문자열 데이터입니다.</param>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Length">
      <summary>데이터의 길이(문자 수)를 가져옵니다.</summary>
      <returns>
        <see cref="P:System.Xml.XmlCharacterData.Data" /> 속성의 문자열 길이(문자 수)입니다. 이 길이는 0일 수 있습니다. 즉, CharacterData 노드가 비어 있을 수 있습니다.</returns>
    </member>
    <member name="M:System.Xml.XmlCharacterData.ReplaceData(System.Int32,System.Int32,System.String)">
      <summary>지정된 오프셋에서 시작하여 지정된 수의 문자를 지정된 문자열로 교체합니다.</summary>
      <param name="offset">교체를 시작할 문자열 내의 위치입니다.</param>
      <param name="count">교체할 문자 수입니다.</param>
      <param name="strData">기존 문자열 데이터를 대체하는 새 데이터입니다.</param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.Substring(System.Int32,System.Int32)">
      <summary>지정된 범위에서 전체 문자열의 부분 문자열을 검색합니다.</summary>
      <param name="offset">검색을 시작할 문자열 내의 위치입니다. 오프셋이 0이면 시작 위치가 데이터의 시작 부분임을 나타냅니다.</param>
      <param name="count">검색할 문자 수입니다.</param>
      <returns>지정된 범위에 해당하는 부분 문자열입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Value">
      <summary>노드의 값을 가져오거나 설정합니다.</summary>
      <returns>노드의 값입니다.</returns>
      <exception cref="T:System.ArgumentException">노드가 읽기 전용인 경우</exception>
    </member>
    <member name="T:System.Xml.XmlComment">
      <summary>XML 주석의 내용을 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.XmlComment.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlComment" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="comment">주석 요소의 콘텐츠입니다.</param>
      <param name="doc">부모 XML 문서입니다.</param>
    </member>
    <member name="M:System.Xml.XmlComment.CloneNode(System.Boolean)">
      <summary>이 노드의 복제본을 만듭니다.</summary>
      <param name="deep">지정된 노드 아래의 하위 트리를 재귀적으로 복제하려면 <see langword="true" />이고, 노드 자체만 복제하려면 <see langword="false" />입니다. Comment 노드에는 자식이 없으므로 복제된 노드는 매개 변수 설정에 상관 없이 항상 텍스트 내용을 포함합니다.</param>
      <returns>복제된 노드입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlComment.LocalName">
      <summary>노드의 로컬 이름을 가져옵니다.</summary>
      <returns>Comment 노드의 경우 이 값은 <see langword="#comment" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlComment.Name">
      <summary>노드의 정규화된 이름을 가져옵니다.</summary>
      <returns>Comment 노드의 경우 이 값은 <see langword="#comment" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlComment.NodeType">
      <summary>현재 노드의 형식을 가져옵니다.</summary>
      <returns>Comment 노드의 경우 이 값은 XmlNodeType.Comment입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlComment.WriteContentTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드의 모든 자식을 저장합니다. Comment 노드에 자식이 없으므로 이 메서드는 아무런 영향을 주지 않습니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="M:System.Xml.XmlComment.WriteTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드를 저장합니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="T:System.Xml.XmlConvert">
      <summary>XML 이름을 인코딩 및 디코딩하고 공용 언어 런타임 형식과 XSD(XML 스키마 정의) 언어 형식 사이의 변환 메서드를 제공합니다. 데이터 형식을 변환할 때 반환되는 값은 로캘과 무관합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlConvert.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlConvert" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlConvert.DecodeName(System.String)">
      <summary>이름을 디코딩합니다. 이 메서드는 <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" /> 메서드와 <see cref="M:System.Xml.XmlConvert.EncodeLocalName(System.String)" /> 메서드와 반대로 수행합니다.</summary>
      <param name="name">변환될 이름입니다.</param>
      <returns>디코딩한 이름입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeLocalName(System.String)">
      <summary>이름을 올바른 XML 로컬 이름으로 변환합니다.</summary>
      <param name="name">인코딩할 이름입니다.</param>
      <returns>인코딩된 이름입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeName(System.String)">
      <summary>이름을 올바른 XML 이름으로 변환합니다.</summary>
      <param name="name">변환할 이름입니다.</param>
      <returns>잘못된 문자가 이스케이프 문자열로 바뀐 이름입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeNmToken(System.String)">
      <summary>XML 사양에 따라 올바른 이름인지 확인합니다.</summary>
      <param name="name">인코딩할 이름입니다.</param>
      <returns>인코딩된 이름입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsNCNameChar(System.Char)">
      <summary>전달된 문자가 콜론이 아닌 올바른 문자 형식인지 확인합니다.</summary>
      <param name="ch">콜론이 아닌 문자로 확인할 문자입니다.</param>
      <returns>문자가 콜론이 아닌 올바른 문자 형식이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsPublicIdChar(System.Char)">
      <summary>인수에 있는 문자가 올바른 공용 ID 문자이면 전달된 문자 인스턴스를 반환하고, 그렇지 않으면 <see langword="null" />을 반환합니다.</summary>
      <param name="ch">유효성을 검사할 <see cref="T:System.Char" /> 개체입니다.</param>
      <returns>문자가 올바른 공용 id 문자이면 전달된 문자이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsStartNCNameChar(System.Char)">
      <summary>전달된 문자가 올바른 시작 이름 문자 형식인지 확인합니다.</summary>
      <param name="ch">유효성을 확인할 문자입니다.</param>
      <returns>전달된 문자가 올바른 시작 이름 문자 형식이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsWhitespaceChar(System.Char)">
      <summary>전달된 문자가 올바른 XML 공백 문자인지 확인합니다.</summary>
      <param name="ch">유효성을 확인할 문자입니다.</param>
      <returns>전달된 문자가 올바른 XML 공백 문자이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsXmlChar(System.Char)">
      <summary>전달된 문자가 올바른 XML 문자인지 확인합니다.</summary>
      <param name="ch">유효성을 확인할 문자입니다.</param>
      <returns>전달된 문자가 올바른 XML 문자이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsXmlSurrogatePair(System.Char,System.Char)">
      <summary>전달된 서로게이트 문자 쌍이 올바른 XML 문자인지 확인합니다.</summary>
      <param name="lowChar">유효성을 검사할 서로게이트 문자입니다.</param>
      <param name="highChar">유효성을 검사할 서로게이트 문자입니다.</param>
      <returns>전달된 서로게이트 문자 쌍이 올바른 XML 문자이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToBoolean(System.String)">
      <summary>
        <see cref="T:System.String" />을 해당하는 <see cref="T:System.Boolean" /> 값으로 변환합니다.</summary>
      <param name="s">변환할 문자열입니다.</param>
      <returns>
        <see langword="Boolean" /> 값, 즉 <see langword="true" /> 또는 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />가 <see langword="Boolean" /> 값을 나타내지 않는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToByte(System.String)">
      <summary>
        <see cref="T:System.String" />을 해당하는 <see cref="T:System.Byte" /> 값으로 변환합니다.</summary>
      <param name="s">변환할 문자열입니다.</param>
      <returns>문자열에 해당하는 <see langword="Byte" /> 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />가 올바른 형식이 아닙니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" />는 <see cref="F:System.Byte.MinValue" />보다 작거나 <see cref="F:System.Byte.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToChar(System.String)">
      <summary>
        <see cref="T:System.String" />을 해당하는 <see cref="T:System.Char" /> 값으로 변환합니다.</summary>
      <param name="s">변환할 단일 문자가 포함된 문자열입니다.</param>
      <returns>단일 문자를 나타내는 <see langword="Char" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 매개 변수의 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 매개 변수에 문자가 두 개 이상 포함된 경우</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String)">
      <summary>
        <see cref="T:System.String" />을 해당하는 <see cref="T:System.DateTime" /> 값으로 변환합니다.</summary>
      <param name="s">변환할 문자열입니다.</param>
      <returns>문자열에 해당하는 <see langword="DateTime" /> 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />가 빈 문자열이거나 형식이 잘못된 경우</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String)">
      <summary>
        <see cref="T:System.String" />을 해당하는 <see cref="T:System.DateTime" /> 값으로 변환합니다.</summary>
      <param name="s">변환할 문자열입니다.</param>
      <param name="format">변환된 <see langword="DateTime" />에 적용할 형식 구조입니다. 올바른 형식에는 "yyyy-MM-ddTHH:mm:sszzzzzz" 및 그 하위 집합이 포함됩니다. 문자열은 이 형식에 대해 유효성을 확인합니다.</param>
      <returns>문자열에 해당하는 <see langword="DateTime" /> 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 또는 <paramref name="format" />이 String.Empty인 경우 
또는 
 <paramref name="s" />에 <paramref name="format" />과 일치하는 날짜와 시간이 포함되지 않는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String[])">
      <summary>
        <see cref="T:System.String" />을 해당하는 <see cref="T:System.DateTime" /> 값으로 변환합니다.</summary>
      <param name="s">변환할 문자열입니다.</param>
      <param name="formats">변환된 <see langword="DateTime" />에 적용할 형식 구조가 포함된 배열입니다. 올바른 형식에는 "yyyy-MM-ddTHH:mm:sszzzzzz" 및 그 하위 집합이 포함됩니다.</param>
      <returns>문자열에 해당하는 <see langword="DateTime" /> 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 또는 <paramref name="formats" />의 요소가 String.Empty인 경우 
또는 
 <paramref name="s" />에 <paramref name="formats" />의 요소에 해당하는 날짜와 시간이 포함되지 않은 경우</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.Xml.XmlDateTimeSerializationMode)">
      <summary>지정된 <see cref="T:System.String" />를 사용하여 <see cref="T:System.DateTime" />을 <see cref="T:System.Xml.XmlDateTimeSerializationMode" />으로 변환합니다.</summary>
      <param name="s">변환할 <see cref="T:System.String" /> 값입니다.</param>
      <param name="dateTimeOption">UTC(Coordinated Universal Time) 날짜를 현지 시간으로 변환할지 아니면 UTC로 유지할지 지정하는 열거형 값 중 하나입니다.</param>
      <returns>
        <see cref="T:System.DateTime" />에 해당하는 <see cref="T:System.String" /> 값입니다.</returns>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateTimeOption" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />가 빈 문자열이거나 형식이 잘못된 경우</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String)">
      <summary>제공된 <see cref="T:System.String" />을 해당 <see cref="T:System.DateTimeOffset" />으로 변환합니다.</summary>
      <param name="s">변환할 문자열입니다.  
 참고 이 문자열은 W3C 권장 사항 중 XML dateTime 형식에 대한 부분을 준수해야 합니다. 자세한 내용은 XML 스키마 사양의 dateTime 섹션을 참조하세요.</param>
      <returns>제공된 문자열에 해당하는 <see cref="T:System.DateTimeOffset" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">이 메서드에 전달된 인수가 허용되는 값 범위를 벗어나는 경우. 허용되는 값에 대한 자세한 내용은 <see cref="T:System.DateTimeOffset" />을 참조하십시오.</exception>
      <exception cref="T:System.FormatException">이 메서드에 전달된 인수가 W3C 권장 사항 중 XML dateTime 형식에 대한 부분을 준수하지 않는 경우. 자세한 내용은 XML 스키마 사양의 dateTime 섹션을 참조하세요.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String)">
      <summary>제공된 <see cref="T:System.String" />을 해당 <see cref="T:System.DateTimeOffset" />으로 변환합니다.</summary>
      <param name="s">변환할 문자열입니다.</param>
      <param name="format">
        <paramref name="s" />를 변환할 형식입니다. 형식 매개 변수는 W3C 권장 사항 중 XML dateTime 형식에 대한 부분이 될 수 있습니다. (자세한 내용은 XML 스키마 사양의 dateTime 섹션을 참조하세요.) 이 형식을 사용하여 문자열 <paramref name="s" />의 유효성을 검사합니다.</param>
      <returns>제공된 문자열에 해당하는 <see cref="T:System.DateTimeOffset" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 또는 <paramref name="format" />이 빈 문자열이거나 지정된 형식이 아닌 경우</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String[])">
      <summary>제공된 <see cref="T:System.String" />을 해당 <see cref="T:System.DateTimeOffset" />으로 변환합니다.</summary>
      <param name="s">변환할 문자열입니다.</param>
      <param name="formats">
        <paramref name="s" />를 변환할 수 있는 형식의 배열입니다. <paramref name="formats" />의 각 형식은 W3C 권장 사항 중 XML dateTime 형식에 대한 부분이 될 수 있습니다. (자세한 내용은 XML 스키마 사양의 dateTime 섹션을 참조하세요.) 이러한 형식 중 하나를 사용하여 문자열 <paramref name="s" />의 유효성을 검사합니다.</param>
      <returns>제공된 문자열에 해당하는 <see cref="T:System.DateTimeOffset" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDecimal(System.String)">
      <summary>
        <see cref="T:System.String" />을 해당하는 <see cref="T:System.Decimal" /> 값으로 변환합니다.</summary>
      <param name="s">변환할 문자열입니다.</param>
      <returns>문자열에 해당하는 <see langword="Decimal" /> 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />가 올바른 형식이 아닙니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" />는 <see cref="F:System.Decimal.MinValue" />보다 작거나 <see cref="F:System.Decimal.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDouble(System.String)">
      <summary>
        <see cref="T:System.String" />을 해당하는 <see cref="T:System.Double" /> 값으로 변환합니다.</summary>
      <param name="s">변환할 문자열입니다.</param>
      <returns>문자열에 해당하는 <see langword="Double" /> 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />가 올바른 형식이 아닙니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" />는 <see cref="F:System.Double.MinValue" />보다 작거나 <see cref="F:System.Double.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToGuid(System.String)">
      <summary>
        <see cref="T:System.String" />을 해당하는 <see cref="T:System.Guid" /> 값으로 변환합니다.</summary>
      <param name="s">변환할 문자열입니다.</param>
      <returns>문자열에 해당하는 <see langword="Guid" /> 값입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt16(System.String)">
      <summary>
        <see cref="T:System.String" />을 해당하는 <see cref="T:System.Int16" /> 값으로 변환합니다.</summary>
      <param name="s">변환할 문자열입니다.</param>
      <returns>문자열에 해당하는 <see langword="Int16" /> 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />가 올바른 형식이 아닙니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" />는 <see cref="F:System.Int16.MinValue" />보다 작거나 <see cref="F:System.Int16.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt32(System.String)">
      <summary>
        <see cref="T:System.String" />을 해당하는 <see cref="T:System.Int32" /> 값으로 변환합니다.</summary>
      <param name="s">변환할 문자열입니다.</param>
      <returns>문자열에 해당하는 <see langword="Int32" /> 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />가 올바른 형식이 아닙니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" />는 <see cref="F:System.Int32.MinValue" />보다 작거나 <see cref="F:System.Int32.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt64(System.String)">
      <summary>
        <see cref="T:System.String" />을 해당하는 <see cref="T:System.Int64" /> 값으로 변환합니다.</summary>
      <param name="s">변환할 문자열입니다.</param>
      <returns>문자열에 해당하는 <see langword="Int64" /> 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />가 올바른 형식이 아닙니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" />는 <see cref="F:System.Int64.MinValue" />보다 작거나 <see cref="F:System.Int64.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSByte(System.String)">
      <summary>
        <see cref="T:System.String" />을 해당하는 <see cref="T:System.SByte" /> 값으로 변환합니다.</summary>
      <param name="s">변환할 문자열입니다.</param>
      <returns>문자열에 해당하는 <see langword="SByte" /> 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />가 올바른 형식이 아닙니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" />는 <see cref="F:System.SByte.MinValue" />보다 작거나 <see cref="F:System.SByte.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSingle(System.String)">
      <summary>
        <see cref="T:System.String" />을 해당하는 <see cref="T:System.Single" /> 값으로 변환합니다.</summary>
      <param name="s">변환할 문자열입니다.</param>
      <returns>문자열에 해당하는 <see langword="Single" /> 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />가 올바른 형식이 아닙니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" />는 <see cref="F:System.Single.MinValue" />보다 작거나 <see cref="F:System.Single.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Boolean)">
      <summary>
        <see cref="T:System.Boolean" />을 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">변환할 값입니다.</param>
      <returns>
        <see langword="Boolean" />에 대한 문자열 표현, 즉 "true" 또는 "false"입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Byte)">
      <summary>
        <see cref="T:System.Byte" />을 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">변환할 값입니다.</param>
      <returns>
        <see langword="Byte" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Char)">
      <summary>
        <see cref="T:System.Char" />을 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">변환할 값입니다.</param>
      <returns>
        <see langword="Char" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime)">
      <summary>
        <see cref="T:System.DateTime" />을 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">변환할 값입니다.</param>
      <returns>형식이 yyyy-MM-ddTHH:mm:ss(여기서 'T'는 상수 리터럴)인 <see langword="DateTime" />에 대한 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.String)">
      <summary>
        <see cref="T:System.DateTime" />을 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">변환할 값입니다.</param>
      <param name="format">변환된 문자열을 표시하는 방법을 정의하는 형식 구조입니다. 올바른 형식에는 "yyyy-MM-ddTHH:mm:sszzzzzz" 및 그 하위 집합이 포함됩니다.</param>
      <returns>지정된 형식의 <see langword="DateTime" />에 대한 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.Xml.XmlDateTimeSerializationMode)">
      <summary>지정된 <see cref="T:System.DateTime" />를 사용하여 <see cref="T:System.String" />을 <see cref="T:System.Xml.XmlDateTimeSerializationMode" />으로 변환합니다.</summary>
      <param name="value">변환할 <see cref="T:System.DateTime" /> 값입니다.</param>
      <param name="dateTimeOption">
        <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> 값 처리 방법을 지정하는 <see cref="T:System.DateTime" /> 값 중 하나입니다.</param>
      <returns>
        <see cref="T:System.String" />에 해당하는 <see cref="T:System.DateTime" /> 값입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTimeOption" /> 값이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 또는 <paramref name="dateTimeOption" /> 값이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTimeOffset)">
      <summary>제공된 <see cref="T:System.DateTimeOffset" />을 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">변환될 <see cref="T:System.DateTimeOffset" />입니다.</param>
      <returns>제공된 <see cref="T:System.String" />의 <see cref="T:System.DateTimeOffset" /> 표현입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTimeOffset,System.String)">
      <summary>제공된 <see cref="T:System.DateTimeOffset" />을 지정된 형식의 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">변환될 <see cref="T:System.DateTimeOffset" />입니다.</param>
      <param name="format">
        <paramref name="s" />를 변환할 대상 형식입니다. 형식 매개 변수는 W3C 권장 사항 중 XML dateTime 형식에 대한 부분이 될 수 있습니다. (자세한 내용은 XML 스키마 사양의 dateTime 섹션을 참조하세요.)</param>
      <returns>제공된 <see cref="T:System.String" />을 지정된 형식으로 나타낸 <see cref="T:System.DateTimeOffset" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" />을 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">변환할 값입니다.</param>
      <returns>
        <see langword="Decimal" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Double)">
      <summary>
        <see cref="T:System.Double" />을 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">변환할 값입니다.</param>
      <returns>
        <see langword="Double" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Guid)">
      <summary>
        <see cref="T:System.Guid" />을 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">변환할 값입니다.</param>
      <returns>
        <see langword="Guid" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int16)">
      <summary>
        <see cref="T:System.Int16" />을 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">변환할 값입니다.</param>
      <returns>
        <see langword="Int16" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int32)">
      <summary>
        <see cref="T:System.Int32" />을 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">변환할 값입니다.</param>
      <returns>
        <see langword="Int32" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int64)">
      <summary>
        <see cref="T:System.Int64" />을 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">변환할 값입니다.</param>
      <returns>
        <see langword="Int64" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.SByte)">
      <summary>
        <see cref="T:System.SByte" />을 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">변환할 값입니다.</param>
      <returns>
        <see langword="SByte" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Single)">
      <summary>
        <see cref="T:System.Single" />을 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">변환할 값입니다.</param>
      <returns>
        <see langword="Single" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.TimeSpan)">
      <summary>
        <see cref="T:System.TimeSpan" />을 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">변환할 값입니다.</param>
      <returns>
        <see langword="TimeSpan" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt16)">
      <summary>
        <see cref="T:System.UInt16" />을 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">변환할 값입니다.</param>
      <returns>
        <see langword="UInt16" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt32)">
      <summary>
        <see cref="T:System.UInt32" />을 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">변환할 값입니다.</param>
      <returns>
        <see langword="UInt32" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt64)">
      <summary>
        <see cref="T:System.UInt64" />을 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">변환할 값입니다.</param>
      <returns>
        <see langword="UInt64" />의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToTimeSpan(System.String)">
      <summary>
        <see cref="T:System.String" />을 해당하는 <see cref="T:System.TimeSpan" /> 값으로 변환합니다.</summary>
      <param name="s">변환할 문자열입니다. 형식 문자열은 W3C XML Schema Part 2를 준수해야 합니다. 기간에 대한 Datatypes 권장 사항을 참조하세요.</param>
      <returns>문자열에 해당하는 <see langword="TimeSpan" /> 값입니다.</returns>
      <exception cref="T:System.FormatException">
        <paramref name="s" />가 <see langword="TimeSpan" /> 값을 나타내는 올바른 형식이 아닌 경우</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt16(System.String)">
      <summary>
        <see cref="T:System.String" />을 해당하는 <see cref="T:System.UInt16" /> 값으로 변환합니다.</summary>
      <param name="s">변환할 문자열입니다.</param>
      <returns>문자열에 해당하는 <see langword="UInt16" /> 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />가 올바른 형식이 아닙니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" />는 <see cref="F:System.UInt16.MinValue" />보다 작거나 <see cref="F:System.UInt16.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt32(System.String)">
      <summary>
        <see cref="T:System.String" />을 해당하는 <see cref="T:System.UInt32" /> 값으로 변환합니다.</summary>
      <param name="s">변환할 문자열입니다.</param>
      <returns>문자열에 해당하는 <see langword="UInt32" /> 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />가 올바른 형식이 아닙니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" />는 <see cref="F:System.UInt32.MinValue" />보다 작거나 <see cref="F:System.UInt32.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt64(System.String)">
      <summary>
        <see cref="T:System.String" />을 해당하는 <see cref="T:System.UInt64" /> 값으로 변환합니다.</summary>
      <param name="s">변환할 문자열입니다.</param>
      <returns>문자열에 해당하는 <see langword="UInt64" /> 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />가 올바른 형식이 아닙니다.</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" />는 <see cref="F:System.UInt64.MinValue" />보다 작거나 <see cref="F:System.UInt64.MaxValue" />보다 큰 숫자를 나타냅니다.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyName(System.String)">
      <summary>해당 이름이 W3C Extended Markup Language 권장 사항에 따라 올바른 이름인지 확인합니다.</summary>
      <param name="name">유효성을 확인할 이름입니다.</param>
      <returns>이름입니다. 단, 이름이 올바른 XML 이름인 경우에 한합니다.</returns>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" />이 올바른 XML 이름이 아닌 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />이 <see langword="null" /> 또는 String.Empty인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNCName(System.String)">
      <summary>이름이 W3C Extended Markup Language 권장 사항에 따라 올바른 <see langword="NCName" />인지 확인합니다. <see langword="NCName" />은 콜론이 포함될 수 없는 이름입니다.</summary>
      <param name="name">유효성을 확인할 이름입니다.</param>
      <returns>이름입니다. 단, 이름이 올바른 NCName인 경우에 한합니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />이 <see langword="null" /> 또는 <c>String.Empty</c>입니다.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" />을를은 유효한 콜론 없는 이름이 아닙니다.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNMTOKEN(System.String)">
      <summary>W3C XML Schema Part2를 기준으로 문자열이 올바른 NMTOKEN인지 확인합니다. Datatypes 권장 사항</summary>
      <param name="name">확인할 문자열입니다.</param>
      <returns>이름 토큰입니다. 단, 문자열이 올바른 NMTOKEN인 경우에 한합니다.</returns>
      <exception cref="T:System.Xml.XmlException">문자열이 올바른 이름 토큰이 아닌 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyPublicId(System.String)">
      <summary>문자열 인수에 있는 모든 문자가 올바른 공용 ID 문자이면 전달된 문자열 인스턴스를 반환합니다.</summary>
      <param name="publicId">유효성을 검사할 ID가 포함된 <see cref="T:System.String" />입니다.</param>
      <returns>인수에 있는 모든 문자가 올바른 공용 ID 문자이면 전달된 문자열입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyTOKEN(System.String)">
      <summary>W3C XML Schema Part2를 기준으로 문자열이 올바른 토큰인지 확인합니다. Datatypes 권장 사항을 참조하세요.</summary>
      <param name="token">확인할 문자열 값입니다.</param>
      <returns>토큰입니다. 단, 문자열이 올바른 토큰인 경우에 한합니다.</returns>
      <exception cref="T:System.Xml.XmlException">문자열 값이 올바른 토큰이 아닌 경우</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyWhitespace(System.String)">
      <summary>문자열 인수에 있는 모든 문자가 올바른 공백 문자이면 전달된 문자열 인스턴스를 반환합니다.</summary>
      <param name="content">확인할 <see cref="T:System.String" />입니다.</param>
      <returns>문자열 인수에 있는 모든 문자가 올바른 공백 문자이면 전달된 문자열 인스턴스이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyXmlChars(System.String)">
      <summary>문자열 인수의 모든 문자와 서로게이트 쌍 문자가 올바른 XML 문자인 경우 전달된 문자열을 반환하고 그렇지 않으면 첫 번째 잘못된 문자에 대한 정보로 <see langword="XmlException" />을 throw합니다.</summary>
      <param name="content">확인할 문자가 포함된 <see cref="T:System.String" />입니다.</param>
      <returns>문자열 인수의 모든 문자와 서로게이트 쌍 문자가 올바른 XML 문자인 경우 전달된 문자열이고, 그렇지 않으면 첫 번째 잘못된 문자에 대한 정보로 <see langword="XmlException" />을 throw합니다.</returns>
    </member>
    <member name="T:System.Xml.XmlDateTimeSerializationMode">
      <summary>문자열과 <see cref="T:System.DateTime" /> 사이에 변환할 때 시간 값을 처리하는 방법을 지정합니다.</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Local">
      <summary>현지 시간으로 처리합니다. <see cref="T:System.DateTime" /> 개체가 UTC(Coordinated Universal Time)를 나타내면 값을 현지 시간으로 변환합니다.</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.RoundtripKind">
      <summary>변환할 때 표준 시간대 정보를 유지합니다.</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Unspecified">
      <summary>
        <see cref="T:System.DateTime" />을 문자열로 변환하는 경우 값을 현지 시간으로 처리합니다. 문자열이 <see cref="T:System.DateTime" />으로 변환되는 경우 표준 시간대가 지정되면 현지 시간으로 변환합니다.</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Utc">
      <summary>UTC로 처리합니다. <see cref="T:System.DateTime" /> 개체가 현지 시간을 나타내면 값을 UTC로 변환합니다.</summary>
    </member>
    <member name="T:System.Xml.XmlDeclaration">
      <summary>XML 선언 노드 &lt;?xml version='1.0'...?&gt;를 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.XmlDeclaration.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlDeclaration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="version">XML 버전입니다. <see cref="P:System.Xml.XmlDeclaration.Version" /> 속성을 참조하십시오.</param>
      <param name="encoding">인코딩 체계입니다. <see cref="P:System.Xml.XmlDeclaration.Encoding" /> 속성을 참조하십시오.</param>
      <param name="standalone">XML 문서가 외부 DTD에 따라 달라지는지 여부를 나타냅니다. <see cref="P:System.Xml.XmlDeclaration.Standalone" /> 속성을 참조하십시오.</param>
      <param name="doc">부모 XML 문서입니다.</param>
    </member>
    <member name="M:System.Xml.XmlDeclaration.CloneNode(System.Boolean)">
      <summary>이 노드의 복제본을 만듭니다.</summary>
      <param name="deep">지정된 노드 아래의 하위 트리를 재귀적으로 복제하려면 <see langword="true" />이고, 노드 자체만 복제하려면 <see langword="false" />입니다. <see langword="XmlDeclaration" /> 노드에는 자식이 없으므로 복제된 노드는 매개 변수 설정에 상관 없이 항상 데이터 값을 포함합니다.</param>
      <returns>복제된 노드입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Encoding">
      <summary>XML 문서의 인코딩 수준을 가져오거나 설정합니다.</summary>
      <returns>올바른 문자 인코딩 이름입니다. 다음은 가장 일반적으로 지원되는 XML 문자 인코딩 이름입니다.  
  범주  

  인코딩 이름  

  유니코드(Unicode)  

  UTF-8, UTF-16  

  ISO 10646  

  ISO-10646-UCS-2, ISO-10646-UCS-4  

  ISO 8859  

  ISO-8859-n(여기서 "n"은 1에서 9 사이의 숫자임)  

  JIS X-0208-1997  

  ISO-2022-JP, Shift_JIS, EUC-JP  

   

 이 값은 선택 사항입니다. 값이 설정되지 않으면 이 속성은 String.Empty를 반환합니다.  
인코딩 속성이 포함되지 않으면 문서를 쓰거나 저장할 때 UTF-8 인코딩을 가정합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.InnerText">
      <summary>
        <see langword="XmlDeclaration" />의 연결된 값을 가져오거나 설정합니다.</summary>
      <returns>연결된 된 값을 <see langword="XmlDeclaration" /> (사이의 모든 것 이므로 <c>&lt;? xml</c> 및 <c>?&gt;</c>).</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.LocalName">
      <summary>노드의 로컬 이름을 가져옵니다.</summary>
      <returns>
        <see langword="XmlDeclaration" /> 노드의 경우 이 이름은 <see langword="xml" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Name">
      <summary>노드의 정규화된 이름을 가져옵니다.</summary>
      <returns>
        <see langword="XmlDeclaration" /> 노드의 경우 이 이름은 <see langword="xml" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.NodeType">
      <summary>현재 노드의 형식을 가져옵니다.</summary>
      <returns>
        <see langword="XmlDeclaration" /> 노드의 경우 이 값은 XmlNodeType.XmlDeclaration입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Standalone">
      <summary>독립형 특성의 값을 가져오거나 설정합니다.</summary>
      <returns>유효한 값은 XML 문서에서 필요로 하는 모든 엔터티 선언이 문서 내에 포함되는 경우에는 <see langword="yes" />이고, 외부 DTD(문서 형식 정의)를 필요로 하는 경우에는 <see langword="no" />입니다. XML 선언에 독립형 특성이 없으면 이 속성은 String.Empty를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Value">
      <summary>
        <see langword="XmlDeclaration" />의 값을 가져오거나 설정합니다.</summary>
      <returns>콘텐츠를 <see langword="XmlDeclaration" /> (사이의 모든 것 이므로 <c>&lt;? xml</c> 및 <c>?&gt;</c>).</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Version">
      <summary>XML 버전의 문서를 가져옵니다.</summary>
      <returns>값은 항상 <see langword="1.0" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDeclaration.WriteContentTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드의 자식을 저장합니다. <see langword="XmlDeclaration" /> 노드에 자식이 없으므로 이 메서드는 아무런 영향을 주지 않습니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="M:System.Xml.XmlDeclaration.WriteTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드를 저장합니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="T:System.Xml.XmlDocument">
      <summary>XML 문서를 나타냅니다. 이 클래스를 사용하여 문서에서 XML 로드, 유효성 검사, 편집, 추가 및 위치 지정을 수행할 수 있습니다.</summary>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlDocument" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)">
      <summary>지정된 <see langword="XmlDocument" />를 사용하여 <see cref="T:System.Xml.XmlImplementation" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="imp">사용할 <see langword="XmlImplementation" />입니다.</param>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)">
      <summary>지정된 <see langword="XmlDocument" />를 사용하여 <see cref="T:System.Xml.XmlNameTable" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="nt">사용할 <see langword="XmlNameTable" />입니다.</param>
    </member>
    <member name="P:System.Xml.XmlDocument.BaseURI">
      <summary>현재 노드의 기본 URI를 가져옵니다.</summary>
      <returns>노드를 로드한 위치입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CloneNode(System.Boolean)">
      <summary>이 노드의 복제본을 만듭니다.</summary>
      <param name="deep">지정된 노드 아래의 하위 트리를 재귀적으로 복제하려면 <see langword="true" />이고, 노드 자체만 복제하려면 <see langword="false" />입니다.</param>
      <returns>복제된 <see langword="XmlDocument" /> 노드입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String)">
      <summary>지정된 <see cref="P:System.Xml.XmlDocument.Name" />을 가진 <see cref="T:System.Xml.XmlAttribute" />를 만듭니다.</summary>
      <param name="name">특성의 정규화된 이름입니다. 이름에 콜론이 포함되어 있는 경우, <see cref="P:System.Xml.XmlNode.Prefix" /> 속성은 첫 번째 콜론 앞의 이름 부분을 반영하고 <see cref="P:System.Xml.XmlDocument.LocalName" /> 속성은 첫 번째 콜론 뒤의 이름 부분을 반영합니다. 접두사가 xmlns같은 인식된 기본 제공되는 접두사가 아닌 경우 <see cref="P:System.Xml.XmlNode.NamespaceURI" />는 비어 있습니다. 이 경우 <see langword="NamespaceURI" />에 <c></c>의 값이 있습니다.</param>
      <returns>새 <see langword="XmlAttribute" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String)">
      <summary>지정된 정규화된 이름과 <see cref="P:System.Xml.XmlNode.NamespaceURI" />가 있는 <see cref="T:System.Xml.XmlAttribute" />를 만듭니다.</summary>
      <param name="qualifiedName">특성의 정규화된 이름입니다. 이름에 콜론이 포함되어 있는 경우, <see cref="P:System.Xml.XmlNode.Prefix" /> 속성은 콜론 앞의 이름 부분을 반영하고 <see cref="P:System.Xml.XmlDocument.LocalName" /> 속성은 콜론 뒤의 이름 부분을 반영합니다.</param>
      <param name="namespaceURI">특성의 네임스페이스 URI입니다. 정규화된 이름에 xmlns 접두사가 포함된 경우 이 매개 변수는 <c></c>이어야 합니다.</param>
      <returns>새 <see langword="XmlAttribute" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)">
      <summary>지정된 <see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.LocalName" /> 및 <see cref="P:System.Xml.XmlNode.NamespaceURI" />가 있는 <see cref="T:System.Xml.XmlAttribute" />를 만듭니다.</summary>
      <param name="prefix">특성의 접두사입니다. String.Empty와 <see langword="null" />은 같습니다.</param>
      <param name="localName">특성의 로컬 이름입니다.</param>
      <param name="namespaceURI">특성의 네임스페이스 URI입니다. String.Empty와 <see langword="null" />은 같습니다. <paramref name="prefix" />가 xmlns일 경우 이 매개 변수는 <c></c>이어야 합니다. 그렇지 않으면 예외가 throw됩니다.</param>
      <returns>새 <see langword="XmlAttribute" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateCDataSection(System.String)">
      <summary>지정된 데이터가 포함된 <see cref="T:System.Xml.XmlCDataSection" />를 만듭니다.</summary>
      <param name="data">새 <see langword="XmlCDataSection" />의 콘텐츠입니다.</param>
      <returns>새 <see langword="XmlCDataSection" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateComment(System.String)">
      <summary>지정된 데이터가 포함된 <see cref="T:System.Xml.XmlComment" />를 만듭니다.</summary>
      <param name="data">새 <see langword="XmlComment" />의 콘텐츠입니다.</param>
      <returns>새 <see langword="XmlComment" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)">
      <summary>지정된 접두사, 로컬 이름 및 네임스페이스 URI가 있는 기본 특성을 만듭니다.</summary>
      <param name="prefix">특성의 접두사입니다.</param>
      <param name="localName">특성의 로컬 이름입니다.</param>
      <param name="namespaceURI">특성의 네임스페이스 URI입니다.</param>
      <returns>새 <see cref="T:System.Xml.XmlAttribute" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDocumentFragment">
      <summary>
        <see cref="T:System.Xml.XmlDocumentFragment" />를 만듭니다.</summary>
      <returns>새 <see langword="XmlDocumentFragment" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)">
      <summary>새 <see cref="T:System.Xml.XmlDocumentType" /> 개체를 반환합니다.</summary>
      <param name="name">문서 형식의 이름입니다.</param>
      <param name="publicId">문서 형식의 공용 식별자이거나 <see langword="null" />입니다. 공용 URI 또는 외부 DTD 하위 집합의 위치를 나타내는 시스템 식별자를 지정할 수 있습니다.</param>
      <param name="systemId">문서 형식의 시스템 식별자이거나 <see langword="null" />입니다. 외부 DTD 하위 집합의 파일 위치를 지정하는 URL입니다.</param>
      <param name="internalSubset">문서 형식의 DTD 내부 하위 집합이거나 <see langword="null" />입니다.</param>
      <returns>새 <see langword="XmlDocumentType" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String)">
      <summary>지정된 이름을 가진 요소를 만듭니다.</summary>
      <param name="name">요소의 정규화된 이름입니다. 이름에 콜론이 포함되어 있는 경우 <see cref="P:System.Xml.XmlNode.Prefix" /> 속성은 콜론 앞의 이름 부분을 반영하고 <see cref="P:System.Xml.XmlDocument.LocalName" /> 속성은 콜론 뒤의 이름 부분을 반영합니다. 정규화된 이름에는 'xmlns'라는 접두사가 포함될 수 없습니다.</param>
      <returns>새 <see langword="XmlElement" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String,System.String)">
      <summary>정규화된 이름과 <see cref="P:System.Xml.XmlNode.NamespaceURI" />를 가진 <see cref="T:System.Xml.XmlElement" />를 만듭니다.</summary>
      <param name="qualifiedName">요소의 정규화된 이름입니다. 이름에 콜론이 포함되어 있는 경우, <see cref="P:System.Xml.XmlNode.Prefix" /> 속성은 콜론 앞의 이름 부분을 반영하고 <see cref="P:System.Xml.XmlDocument.LocalName" /> 속성은 콜론 뒤의 이름 부분을 반영합니다. 정규화된 이름에는 'xmlns'라는 접두사가 포함될 수 없습니다.</param>
      <param name="namespaceURI">요소의 네임스페이스 URI입니다.</param>
      <returns>새 <see langword="XmlElement" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)">
      <summary>지정된 <see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.LocalName" /> 및 <see cref="P:System.Xml.XmlNode.NamespaceURI" />가 있는 요소를 만듭니다.</summary>
      <param name="prefix">새 요소의 접두사입니다. String.Empty와 <see langword="null" /> 은 같습니다.</param>
      <param name="localName">새 요소의 로컬 이름입니다.</param>
      <param name="namespaceURI">새 요소의 네임스페이스 URI입니다. String.Empty와 <see langword="null" />은 같습니다.</param>
      <returns>새 <see cref="T:System.Xml.XmlElement" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateEntityReference(System.String)">
      <summary>지정된 이름을 가진 <see cref="T:System.Xml.XmlEntityReference" />를 만듭니다.</summary>
      <param name="name">엔터티 참조의 이름입니다.</param>
      <returns>새 <see langword="XmlEntityReference" />입니다.</returns>
      <exception cref="T:System.ArgumentException">이름이 잘못되었습니다(예: '#'으로 시작하는 이름은 올바르지 않음).</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNavigator">
      <summary>이 문서를 탐색하기 위한 새로운 <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체를 만듭니다.</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)">
      <summary>지정된 <see cref="T:System.Xml.XmlNode" />에 있는 이 문서를 탐색하기 위한 <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체를 만듭니다.</summary>
      <param name="node">검색기를 맨 처음 배치할 <see cref="T:System.Xml.XmlNode" />입니다.</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)">
      <summary>지정된 노드 형식, <see cref="P:System.Xml.XmlDocument.Name" /> 및 <see cref="P:System.Xml.XmlNode.NamespaceURI" />가 있는 <see cref="T:System.Xml.XmlNode" />를 만듭니다.</summary>
      <param name="nodeTypeString">새 노드의 <see cref="T:System.Xml.XmlNodeType" /> 문자열 버전입니다. 이 매개 변수는 아래 테이블에 나열된 값 중 하나여야 합니다.</param>
      <param name="name">새 노드의 정규화된 이름입니다. 이름에 콜론이 포함된 경우에는 <see cref="P:System.Xml.XmlNode.Prefix" /> 및 <see cref="P:System.Xml.XmlDocument.LocalName" /> 구성 요소로 구문 분석됩니다.</param>
      <param name="namespaceURI">새 노드의 네임스페이스 URI입니다.</param>
      <returns>새 <see langword="XmlNode" />입니다.</returns>
      <exception cref="T:System.ArgumentException">이름이 제공되지 않았으며 <see langword="XmlNodeType" />에 이름이 필요합니다. 또는 <paramref name="nodeTypeString" />이(가) 아래 나열된 문자열 중 하나가 아닙니다.</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)">
      <summary>지정된 <see cref="T:System.Xml.XmlNodeType" />, <see cref="P:System.Xml.XmlDocument.Name" /> 및 <see cref="P:System.Xml.XmlNode.NamespaceURI" />가 있는 <see cref="T:System.Xml.XmlNode" />를 만듭니다.</summary>
      <param name="type">새 노드의 <see langword="XmlNodeType" />입니다.</param>
      <param name="name">새 노드의 정규화된 이름입니다. 이름에 콜론이 포함되어 있으면 <see cref="P:System.Xml.XmlNode.Prefix" /> 및 <see cref="P:System.Xml.XmlDocument.LocalName" /> 구성 요소로 구문 분석됩니다.</param>
      <param name="namespaceURI">새 노드의 네임스페이스 URI입니다.</param>
      <returns>새 <see langword="XmlNode" />입니다.</returns>
      <exception cref="T:System.ArgumentException">이름이 제공되지 않았으며 <see langword="XmlNodeType" />에 이름이 필요합니다.</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)">
      <summary>지정된 <see cref="T:System.Xml.XmlNodeType" />, <see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.Name" /> 및 <see cref="P:System.Xml.XmlNode.NamespaceURI" />가 있는 <see cref="T:System.Xml.XmlNode" />를 만듭니다.</summary>
      <param name="type">새 노드의 <see langword="XmlNodeType" />입니다.</param>
      <param name="prefix">새 노드의 접두사입니다.</param>
      <param name="name">새 노드의 지역 이름입니다.</param>
      <param name="namespaceURI">새 노드의 네임스페이스 URI입니다.</param>
      <returns>새 <see langword="XmlNode" />입니다.</returns>
      <exception cref="T:System.ArgumentException">이름이 제공되지 않았으며 <see langword="XmlNodeType" />에 이름이 필요합니다.</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)">
      <summary>지정된 이름과 데이터가 있는 <see cref="T:System.Xml.XmlProcessingInstruction" />을 만듭니다.</summary>
      <param name="target">처리 명령의 이름입니다.</param>
      <param name="data">처리 명령의 데이터입니다.</param>
      <returns>새 <see langword="XmlProcessingInstruction" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)">
      <summary>
        <see cref="T:System.Xml.XmlSignificantWhitespace" /> 노드를 만듭니다.</summary>
      <param name="text">문자열에는 &amp;#20; &amp;#10; &amp;#13; 및 &amp;#9; 문자만 포함되어야 합니다.</param>
      <returns>새 <see langword="XmlSignificantWhitespace" /> 노드입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateTextNode(System.String)">
      <summary>지정된 텍스트가 있는 <see cref="T:System.Xml.XmlText" />를 만듭니다.</summary>
      <param name="text">Text 노드의 텍스트입니다.</param>
      <returns>새 <see langword="XmlText" /> 노드입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateWhitespace(System.String)">
      <summary>
        <see cref="T:System.Xml.XmlWhitespace" /> 노드를 만듭니다.</summary>
      <param name="text">문자열에는 &amp;#20; &amp;#10; &amp;#13; 및 &amp;#9; 문자만 포함되어야 합니다.</param>
      <returns>새 <see langword="XmlWhitespace" /> 노드입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)">
      <summary>지정된 값이 있는 <see cref="T:System.Xml.XmlDeclaration" /> 노드를 만듭니다.</summary>
      <param name="version">버전은 "1.0"이어야 합니다.</param>
      <param name="encoding">인코딩 특성 값입니다. <see cref="T:System.Xml.XmlDocument" />를 파일이나 스트림으로 저장할 경우 사용하는 인코딩입니다. 그러므로 <see cref="T:System.Text.Encoding" /> 클래스에서 지원하는 문자열로 설정되어야 합니다. 그렇지 않으면 <see cref="M:System.Xml.XmlDocument.Save(System.String)" />이 실패합니다. <see langword="null" /> 또는 String.Empty일 경우 <see langword="Save" /> 메서드에서 인코딩 특성을 XML 선언에 기록하지 않으므로 기본 인코딩인 UTF-8을 사용하게 됩니다.  
참고: <see langword="XmlDocument" />를 <see cref="T:System.IO.TextWriter" />나 <see cref="T:System.Xml.XmlTextWriter" />로 저장하면 이 인코딩 값이 삭제됩니다. 대신 <see langword="TextWriter" /> 또는 <see langword="XmlTextWriter" />의 인코딩을 사용합니다. 그러면 기록된 XML을 올바른 인코딩을 사용하여 다시 읽을 수 있습니다.</param>
      <param name="standalone">값은 "Yes" 또는 "No"여야 합니다. 값이 <see langword="null" />이나 String.Empty일 경우에는 <see langword="Save" /> 메서드에서 독립형 특성을 XML 선언에 기록하지 않습니다.</param>
      <returns>새 <see langword="XmlDeclaration" /> 노드입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> 또는 <paramref name="standalone" />의 값이 위에서 지정한 값 이외의 값입니다.</exception>
    </member>
    <member name="P:System.Xml.XmlDocument.DocumentElement">
      <summary>문서의 루트 <see cref="T:System.Xml.XmlElement" />를 가져옵니다.</summary>
      <returns>XML 문서 트리의 루트를 나타내는 <see langword="XmlElement" />입니다. 루트가 없으면 <see langword="null" />이 반환됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.DocumentType">
      <summary>DOCTYPE 선언이 포함된 노드를 가져옵니다.</summary>
      <returns>DocumentType(DOCTYPE 선언)이 포함된 <see cref="T:System.Xml.XmlNode" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementById(System.String)">
      <summary>지정된 ID의 <see cref="T:System.Xml.XmlElement" />를 가져옵니다.</summary>
      <param name="elementId">일치시킬 특성 ID입니다.</param>
      <returns>일치하는 ID가 있으면 <see langword="XmlElement" />, 일치하는 요소가 없을 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementsByTagName(System.String)">
      <summary>지정된 <see cref="P:System.Xml.XmlDocument.Name" />과 일치하는 모든 하위 요소의 목록이 포함된 <see cref="T:System.Xml.XmlNodeList" />를 반환합니다.</summary>
      <param name="name">일치시킬 정규화된 이름입니다. 일치하는 노드의 <see langword="Name" /> 속성과 일치합니다. 특수 값 "*"은 모든 태그와 일치합니다.</param>
      <returns>일치하는 모든 노드 목록이 포함된 <see cref="T:System.Xml.XmlNodeList" />입니다. <paramref name="name" />과 일치하는 노드가 없으면 빈 컬렉션이 반환됩니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)">
      <summary>지정된 <see cref="P:System.Xml.XmlDocument.LocalName" /> 및 <see cref="P:System.Xml.XmlNode.NamespaceURI" />와 일치하는 모든 하위 요소의 목록이 포함된 <see cref="T:System.Xml.XmlNodeList" />를 반환합니다.</summary>
      <param name="localName">일치시킬 LocalName입니다. 특수 값 "*"은 모든 태그와 일치합니다.</param>
      <param name="namespaceURI">일치시킬 NamespaceURI입니다.</param>
      <returns>일치하는 모든 노드 목록이 포함된 <see cref="T:System.Xml.XmlNodeList" />입니다. 지정된 <paramref name="localName" /> 및 <paramref name="namespaceURI" />와 일치하는 노드가 없으면 빈 컬렉션이 반환됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Implementation">
      <summary>현재 문서에 대한 <see cref="T:System.Xml.XmlImplementation" /> 개체를 가져옵니다.</summary>
      <returns>현재 문서에 대한 <see langword="XmlImplementation" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)">
      <summary>다른 문서에서 현재 문서로 노드를 가져옵니다.</summary>
      <param name="node">가져올 노드입니다.</param>
      <param name="deep">전체 복제를 수행하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>가져온 <see cref="T:System.Xml.XmlNode" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">가져올 수 없는 노드 형식에 대해 이 메서드 호출</exception>
    </member>
    <member name="P:System.Xml.XmlDocument.InnerText">
      <summary>모든 경우에 <see cref="T:System.InvalidOperationException" />을 throw합니다.</summary>
      <returns>노드와 모든 자식 노드의 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">모든 경우</exception>
    </member>
    <member name="P:System.Xml.XmlDocument.InnerXml">
      <summary>현재 노드의 자식을 나타내는 태그를 가져오거나 설정합니다.</summary>
      <returns>현재 노드의 자식을 나타내는 태그입니다.</returns>
      <exception cref="T:System.Xml.XmlException">이 속성을 설정할 때 지정된 XML이 올바른 형식이 아닙니다.</exception>
    </member>
    <member name="P:System.Xml.XmlDocument.IsReadOnly">
      <summary>현재 노드가 읽기 전용인지를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 노드가 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see langword="XmlDocument" /> 노드에서는 항상 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.IO.Stream)">
      <summary>지정된 스트림에서 XML 문서를 로드합니다.</summary>
      <param name="inStream">로드할 XML 문서가 포함된 스트림입니다.</param>
      <exception cref="T:System.Xml.XmlException">XML에 로드 또는 구문 분석 오류가 있습니다. 이 경우 <see cref="T:System.IO.FileNotFoundException" />이 발생합니다.</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.IO.TextReader)">
      <summary>지정된 <see cref="T:System.IO.TextReader" />에서 XML 문서를 로드합니다.</summary>
      <param name="txtReader">XML 데이터를 문서에 제공하기 위해 사용하는 <see langword="TextReader" />입니다.</param>
      <exception cref="T:System.Xml.XmlException">XML에 로드 또는 구문 분석 오류가 있습니다. 이 경우 문서는 빈 상태로 유지됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.String)">
      <summary>지정된 URL에서 XML 문서를 로드합니다.</summary>
      <param name="filename">로드할 XML 문서가 포함된 파일의 URL입니다. URL은 로컬 파일 또는 HTTP URL(웹 주소)일 수 있습니다.</param>
      <exception cref="T:System.Xml.XmlException">XML에 로드 또는 구문 분석 오류가 있습니다. 이 경우 <see cref="T:System.IO.FileNotFoundException" />이 발생합니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="filename" />가 빈 문자열이거나 공백만 포함하거나 <see cref="F:System.IO.Path.InvalidPathChars" />로 정의된 하나 이상의 잘못된 문자를 포함합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filename" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.IO.PathTooLongException">지정된 경로, 파일 이름 또는 둘 다가 시스템에서 정의한 최대 길이를 초과합니다.</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">지정된 경로가 잘못되었습니다(예: 매핑되지 않은 드라이브에 있음).</exception>
      <exception cref="T:System.IO.IOException">파일을 여는 동안 I/O 오류가 발생했습니다.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="filename" />에 읽기 전용인 파일이 지정되었습니다.  
또는 
현재 플랫폼이 해당 작업을 지원하지 않는 경우  
또는 
 <paramref name="filename" />에 디렉터리가 지정되었습니다.  
또는 
호출자에게 필요한 권한이 없는 경우</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="filename" />에 지정된 파일을 찾을 수 없습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="filename" />의 형식이 잘못되었습니다.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.Xml.XmlReader)">
      <summary>지정된 <see cref="T:System.Xml.XmlReader" />에서 XML 문서를 로드합니다.</summary>
      <param name="reader">XML 데이터를 문서에 제공하기 위해 사용하는 <see langword="XmlReader" />입니다.</param>
      <exception cref="T:System.Xml.XmlException">XML에 로드 또는 구문 분석 오류가 있습니다. 이 경우 문서는 빈 상태로 유지됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.LoadXml(System.String)">
      <summary>지정된 문자열에서 XML 문서를 로드합니다.</summary>
      <param name="xml">로드할 XML 문서가 포함된 문자열입니다.</param>
      <exception cref="T:System.Xml.XmlException">XML에 로드 또는 구문 분석 오류가 있습니다. 이 경우 문서는 빈 상태로 유지됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlDocument.LocalName">
      <summary>노드의 로컬 이름을 가져옵니다.</summary>
      <returns>
        <see langword="XmlDocument" /> 노드의 경우 로컬 이름이 #document가 됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Name">
      <summary>노드의 정규화된 이름을 가져옵니다.</summary>
      <returns>
        <see langword="XmlDocument" /> 노드의 경우 이름이 #document가 됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.NameTable">
      <summary>이 구현과 관련된 <see cref="T:System.Xml.XmlNameTable" />을 가져옵니다.</summary>
      <returns>문서 내에서 원자화된 버전의 문자열을 가져올 수 있게 해주는 <see langword="XmlNameTable" />입니다.</returns>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeChanged">
      <summary>이 문서에 속하는 노드의 <see cref="P:System.Xml.XmlNode.Value" />가 변경된 경우에 발생합니다.</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeChanging">
      <summary>이 문서에 속하는 노드의 <see cref="P:System.Xml.XmlNode.Value" />를 변경할 경우에 발생합니다.</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeInserted">
      <summary>이 문서에 속하는 노드를 다른 노드에 삽입한 경우에 발생합니다.</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeInserting">
      <summary>이 문서에 속하는 노드를 다른 노드에 삽입할 경우에 발생합니다.</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeRemoved">
      <summary>이 문서에 속하는 노드를 부모에서 제거한 경우에 발생합니다.</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeRemoving">
      <summary>이 문서에 속하는 노드를 문서에서 제거할 경우에 발생합니다.</summary>
    </member>
    <member name="P:System.Xml.XmlDocument.NodeType">
      <summary>현재 노드의 형식을 가져옵니다.</summary>
      <returns>노드 형식입니다. <see langword="XmlDocument" /> 노드의 경우 이 값은 XmlNodeType.Document가 됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.OwnerDocument">
      <summary>현재 노드가 속하는 <see cref="T:System.Xml.XmlDocument" />를 가져옵니다.</summary>
      <returns>
        <see langword="XmlDocument" /> 노드(<see cref="P:System.Xml.XmlDocument.NodeType" />이 XmlNodeType.Document)의 경우 이 속성에서는 항상 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.ParentNode">
      <summary>부모가 있을 수 있는 노드의 경우 이 노드의 부모 노드를 가져옵니다.</summary>
      <returns>항상 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.PreserveWhitespace">
      <summary>요소 콘텐츠에서 공백을 유지할지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>공백을 유지하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)">
      <summary>
        <see cref="T:System.Xml.XmlNode" />의 내용을 기준으로 <see cref="T:System.Xml.XmlReader" /> 개체를 만듭니다. 판독기는 노드나 특성에 위치해야 합니다.</summary>
      <param name="reader">XML 소스입니다.</param>
      <returns>새 <see langword="XmlNode" />이거나 더 이상 노드가 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.NullReferenceException">판독기가 유효한 DOM 노드(예: EndElement 또는 EndEntity)로 변환되지 않는 노드 형식 위치에 있습니다.</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.IO.Stream)">
      <summary>XML 문서를 지정된 스트림에 저장합니다.</summary>
      <param name="outStream">저장할 스트림입니다.</param>
      <exception cref="T:System.Xml.XmlException">이 작업을 수행하면 올바른 형식의 XML 문서가 생성되지 않습니다(예: 문서 요소 또는 중복 XML 선언 없음).</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.IO.TextWriter)">
      <summary>XML 문서를 지정된 <see cref="T:System.IO.TextWriter" />에 저장합니다.</summary>
      <param name="writer">저장할 대상 <see langword="TextWriter" />입니다.</param>
      <exception cref="T:System.Xml.XmlException">이 작업을 수행하면 올바른 형식의 XML 문서가 생성되지 않습니다(예: 문서 요소 또는 중복 XML 선언 없음).</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.String)">
      <summary>XML 문서를 지정된 파일에 저장합니다. 지정한 파일이 존재하면 이 메서드를 덮어씁니다.</summary>
      <param name="filename">문서를 저장할 파일의 위치입니다.</param>
      <exception cref="T:System.Xml.XmlException">이 작업을 수행하면 올바른 형식의 XML 문서가 생성되지 않습니다(예: 문서 요소 또는 중복 XML 선언 없음).</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.Xml.XmlWriter)">
      <summary>XML 문서를 지정된 <see cref="T:System.Xml.XmlWriter" />에 저장합니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
      <exception cref="T:System.Xml.XmlException">이 작업을 수행하면 올바른 형식의 XML 문서가 생성되지 않습니다(예: 문서 요소 또는 중복 XML 선언 없음).</exception>
    </member>
    <member name="P:System.Xml.XmlDocument.SchemaInfo">
      <summary>노드의 PSVI(스키마 유효성 검사 이후 정보 집합)를 반환합니다.</summary>
      <returns>노드의 PSVI를 나타내는 <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Schemas">
      <summary>이 <see cref="T:System.Xml.XmlDocument" />에 연결된 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체를 가져오거나 설정합니다.</summary>
      <returns>이 <see cref="T:System.Xml.XmlDocument" />에 연결된 XSD(XML 스키마 정의) 언어를 포함하는 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체이거나, 빈 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)">
      <summary>
        <see cref="P:System.Xml.XmlDocument.Schemas" /> 속성에 포함된 XSD(XML 스키마 정의) 언어 스키마를 기준으로 <see cref="T:System.Xml.XmlDocument" />의 유효성을 검사합니다.</summary>
      <param name="validationEventHandler">스키마 유효성 검사 경고 및 오류에 대한 정보를 받는 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 개체입니다.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">스키마 유효성 검사 이벤트가 발생했으며 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 개체가 지정되지 않았습니다.</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)">
      <summary>
        <see cref="P:System.Xml.XmlDocument.Schemas" /> 속성에 포함된 XSD(XML 스키마 정의) 언어 스키마를 기준으로, 지정된 <see cref="T:System.Xml.XmlNode" /> 개체의 유효성을 검사합니다.</summary>
      <param name="validationEventHandler">스키마 유효성 검사 경고 및 오류에 대한 정보를 받는 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 개체입니다.</param>
      <param name="nodeToValidate">
        <see cref="T:System.Xml.XmlDocument" />에서 만든 <see cref="T:System.Xml.XmlNode" /> 개체이며 유효성을 검사할 대상입니다.</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlNode" /> 개체 매개 변수는 <see cref="T:System.Xml.XmlDocument" />에서 만들어지지 않았습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlNode" /> 개체 매개 변수는 요소, 특성, 문서 조각 또는 루트 노드가 아닙니다.</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">스키마 유효성 검사 이벤트가 발생했으며 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 개체가 지정되지 않았습니다.</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)">
      <summary>
        <see langword="XmlDocument" /> 노드의 모든 자식을 지정된 <see cref="T:System.Xml.XmlWriter" />에 저장합니다.</summary>
      <param name="xw">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="M:System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)">
      <summary>
        <see langword="XmlDocument" /> 노드를 지정된 <see cref="T:System.Xml.XmlWriter" />에 저장합니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="P:System.Xml.XmlDocument.XmlResolver">
      <summary>외부 리소스 확인을 위해 사용할 <see cref="T:System.Xml.XmlResolver" />를 설정합니다.</summary>
      <returns>사용할 <see langword="XmlResolver" />입니다.  
.NET Framework 버전 1.1에서는 완전히 신뢰할 수 있는 호출자만 <see langword="XmlResolver" />를 지정할 수 있습니다.</returns>
      <exception cref="T:System.Xml.XmlException">이 속성이 <see langword="null" />로 설정되어 있고 외부 DTD 또는 엔터티가 발생했습니다.</exception>
    </member>
    <member name="T:System.Xml.XmlDocumentFragment">
      <summary>트리 삽입 작업에 유용한 경량의 개체를 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.#ctor(System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlDocumentFragment" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="ownerDocument">조각의 소스인 XML 문서입니다.</param>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.CloneNode(System.Boolean)">
      <summary>이 노드의 복제본을 만듭니다.</summary>
      <param name="deep">지정된 노드 아래의 하위 트리를 재귀적으로 복제하려면 <see langword="true" />이고, 노드 자체만 복제하려면 <see langword="false" />입니다.</param>
      <returns>복제된 노드입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.InnerXml">
      <summary>이 노드의 자식을 나타내는 태그를 가져오거나 설정합니다.</summary>
      <returns>이 노드의 자식 태그입니다.</returns>
      <exception cref="T:System.Xml.XmlException">이 속성을 설정할 때 지정된 XML이 올바른 형식이 아닙니다.</exception>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.LocalName">
      <summary>노드의 로컬 이름을 가져옵니다.</summary>
      <returns>
        <see langword="XmlDocumentFragment" /> 노드의 경우 이 이름은 <see langword="#document-fragment" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.Name">
      <summary>노드의 정규화된 이름을 가져옵니다.</summary>
      <returns>
        <see langword="XmlDocumentFragment" />의 경우 이 이름은 <see langword="#document-fragment" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.NodeType">
      <summary>현재 노드의 형식을 가져옵니다.</summary>
      <returns>
        <see langword="XmlDocumentFragment" /> 노드의 경우 이 값은 XmlNodeType.DocumentFragment입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.OwnerDocument">
      <summary>이 노드가 속한 <see cref="T:System.Xml.XmlDocument" />를 가져옵니다.</summary>
      <returns>이 노드가 속한 <see langword="XmlDocument" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.ParentNode">
      <summary>부모를 가질 수 있는 노드의 경우 이 노드의 부모를 가져옵니다.</summary>
      <returns>이 노드의 부모입니다.  
<see langword="XmlDocumentFragment" /> 노드의 경우 이 속성은 항상 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.WriteContentTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드의 모든 자식을 저장합니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.WriteTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드를 저장합니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="T:System.Xml.XmlDocumentType">
      <summary>문서 형식 선언을 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.XmlDocumentType.#ctor(System.String,System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlDocumentType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">정규화된 이름입니다. <see cref="P:System.Xml.XmlDocumentType.Name" /> 속성을 참조하십시오.</param>
      <param name="publicId">공용 식별자입니다. <see cref="P:System.Xml.XmlDocumentType.PublicId" /> 속성을 참조하십시오.</param>
      <param name="systemId">시스템 식별자입니다. <see cref="P:System.Xml.XmlDocumentType.SystemId" /> 속성을 참조하십시오.</param>
      <param name="internalSubset">DTD 내부 하위 집합입니다. <see cref="P:System.Xml.XmlDocumentType.InternalSubset" /> 속성을 참조하십시오.</param>
      <param name="doc">부모 문서입니다.</param>
    </member>
    <member name="M:System.Xml.XmlDocumentType.CloneNode(System.Boolean)">
      <summary>이 노드의 복제본을 만듭니다.</summary>
      <param name="deep">지정된 노드 아래의 하위 트리를 재귀적으로 복제하려면 <see langword="true" />이고, 노드 자체만 복제하려면 <see langword="false" />입니다. DocumentType 노드의 경우 복제된 노드에는 항상 매개 변수 설정과 상관없이 하위 트리가 포함됩니다.</param>
      <returns>복제된 노드입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Entities">
      <summary>문서 형식 선언에서 선언한 <see cref="T:System.Xml.XmlEntity" /> 노드의 컬렉션을 가져옵니다.</summary>
      <returns>
        <see langword="XmlEntity" /> 노드가 포함된 <see cref="T:System.Xml.XmlNamedNodeMap" />입니다. 반환된 <see langword="XmlNamedNodeMap" />은 읽기 전용입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.InternalSubset">
      <summary>DOCTYPE 선언의 DTD(문서 형식 정의) 내부 하위 집합 값을 가져옵니다.</summary>
      <returns>DOCTYPE의 DTD 내부 하위 집합입니다. DTD 내부 하위 집합이 없으면 String.Empty가 반환됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.IsReadOnly">
      <summary>노드가 읽기 전용인지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />노드가 읽기 전용 이면이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" />입니다.  
DocumentType 노드가 읽기 전용이기 때문에 이 속성은 항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.LocalName">
      <summary>노드의 로컬 이름을 가져옵니다.</summary>
      <returns>DocumentType 노드의 경우, 이 속성은 문서 형식의 이름을 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Name">
      <summary>노드의 정규화된 이름을 가져옵니다.</summary>
      <returns>DocumentType 노드의 경우, 이 속성은 문서 형식의 이름을 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.NodeType">
      <summary>현재 노드의 형식을 가져옵니다.</summary>
      <returns>DocumentType 노드의 경우 이 값은 XmlNodeType.DocumentType입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Notations">
      <summary>문서 형식 선언에 있는 <see cref="T:System.Xml.XmlNotation" /> 노드의 컬렉션을 가져옵니다.</summary>
      <returns>
        <see langword="XmlNotation" /> 노드가 포함된 <see cref="T:System.Xml.XmlNamedNodeMap" />입니다. 반환된 <see langword="XmlNamedNodeMap" />은 읽기 전용입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.PublicId">
      <summary>DOCTYPE 선언의 공용 식별자 값을 가져옵니다.</summary>
      <returns>DOCTYPE의 공용 식별자입니다. 공용 식별자가 없으면 <see langword="null" />이 반환됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.SystemId">
      <summary>DOCTYPE 선언의 시스템 식별자 값을 가져옵니다.</summary>
      <returns>DOCTYPE의 시스템 식별자입니다. 시스템 식별자가 없으면 <see langword="null" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDocumentType.WriteContentTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드의 모든 자식을 저장합니다. <see langword="XmlDocumentType" /> 노드의 경우, 이 메서드는 의미 없는 메서드입니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="M:System.Xml.XmlDocumentType.WriteTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드를 저장합니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="T:System.Xml.XmlElement">
      <summary>요소를 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.XmlElement.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlElement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="prefix">네임스페이스 접두사입니다. <see cref="P:System.Xml.XmlElement.Prefix" /> 속성을 참조하십시오.</param>
      <param name="localName">로컬 이름입니다. <see cref="P:System.Xml.XmlElement.LocalName" /> 속성을 참조하십시오.</param>
      <param name="namespaceURI">네임스페이스 URI입니다. <see cref="P:System.Xml.XmlElement.NamespaceURI" /> 속성을 참조하십시오.</param>
      <param name="doc">부모 XML 문서입니다.</param>
    </member>
    <member name="P:System.Xml.XmlElement.Attributes">
      <summary>이 노드에 대한 특성 목록을 포함하는 <see cref="T:System.Xml.XmlAttributeCollection" />을 가져옵니다.</summary>
      <returns>이 노드에 대한 특성 목록을 포함하는 <see cref="T:System.Xml.XmlAttributeCollection" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlElement.CloneNode(System.Boolean)">
      <summary>이 노드의 복제본을 만듭니다.</summary>
      <param name="deep">지정된 노드 아래의 하위 트리를 재귀적으로 복제하려면 <see langword="true" />이고, 노드 자체(노드가 <see langword="XmlElement" />인 경우 해당 특성)만 복제하려면 <see langword="false" />입니다.</param>
      <returns>복제된 노드입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttribute(System.String)">
      <summary>지정된 이름을 가진 특성의 값을 반환합니다.</summary>
      <param name="name">검색할 특성의 이름입니다. 정규화된 이름입니다. 일치하는 노드의 <see langword="Name" /> 속성과 일치합니다.</param>
      <returns>지정된 특성의 값을 반환합니다. 일치 하는 특성이 없거나 특성에 지정된 값 또는 기본값이 없으면 빈 문자열이 반환됩니다.</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttribute(System.String,System.String)">
      <summary>지정된 로컬 이름과 네임스페이스 URI를 갖고 있는 특성의 값을 반환합니다.</summary>
      <param name="localName">검색할 특성의 로컬 이름입니다.</param>
      <param name="namespaceURI">검색할 특성의 네임스페이스 URI입니다.</param>
      <returns>지정된 특성의 값을 반환합니다. 일치 하는 특성이 없거나 특성에 지정된 값 또는 기본값이 없으면 빈 문자열이 반환됩니다.</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttributeNode(System.String)">
      <summary>지정된 이름의 <see langword="XmlAttribute" />를 반환합니다.</summary>
      <param name="name">검색할 특성의 이름입니다. 정규화된 이름입니다. 일치하는 노드의 <see langword="Name" /> 속성과 일치합니다.</param>
      <returns>지정된 <see langword="XmlAttribute" />이거나 일치하는 특성이 없는 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttributeNode(System.String,System.String)">
      <summary>지정된 로컬 이름과 네임스페이스 URI를 갖고 있는 <see cref="T:System.Xml.XmlAttribute" />를 반환합니다.</summary>
      <param name="localName">특성의 로컬 이름입니다.</param>
      <param name="namespaceURI">특성의 네임스페이스 URI입니다.</param>
      <returns>지정된 <see langword="XmlAttribute" />이거나 일치하는 특성이 없는 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetElementsByTagName(System.String)">
      <summary>지정된 <see cref="P:System.Xml.XmlElement.Name" />과 일치하는 모든 하위 요소의 목록이 포함된 <see cref="T:System.Xml.XmlNodeList" />를 반환합니다.</summary>
      <param name="name">일치시킬 이름 태그입니다. 정규화된 이름입니다. 일치하는 노드의 <see langword="Name" /> 속성과 일치합니다. 별표(*)는 모든 태그와 일치하는 특수 값입니다.</param>
      <returns>일치하는 모든 노드 목록이 포함된 <see cref="T:System.Xml.XmlNodeList" />입니다. 일치하는 노드가 없으면 목록이 비어 있습니다.</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)">
      <summary>지정된 <see cref="P:System.Xml.XmlElement.LocalName" /> 및 <see cref="P:System.Xml.XmlElement.NamespaceURI" />와 일치하는 모든 하위 요소의 목록이 포함된 <see cref="T:System.Xml.XmlNodeList" />를 반환합니다.</summary>
      <param name="localName">일치시킬 로컬 이름입니다. 별표(*)는 모든 태그와 일치하는 특수 값입니다.</param>
      <param name="namespaceURI">일치시킬 네임스페이스 URI입니다.</param>
      <returns>일치하는 모든 노드 목록이 포함된 <see cref="T:System.Xml.XmlNodeList" />입니다. 일치하는 노드가 없으면 목록이 비어 있습니다.</returns>
    </member>
    <member name="M:System.Xml.XmlElement.HasAttribute(System.String)">
      <summary>현재 노드에 지정된 이름의 특성이 있는지 여부를 확인합니다.</summary>
      <param name="name">찾을 특성의 이름입니다. 정규화된 이름입니다. 일치하는 노드의 <see langword="Name" /> 속성과 일치합니다.</param>
      <returns>현재 노드에 지정된 특성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlElement.HasAttribute(System.String,System.String)">
      <summary>현재 노드에 지정된 로컬 이름과 네임스페이스 URI를 갖고 있는 특성이 있는지 확인합니다.</summary>
      <param name="localName">찾을 특성의 로컬 이름입니다.</param>
      <param name="namespaceURI">찾을 특성의 네임스페이스 URI입니다.</param>
      <returns>현재 노드에 지정된 특성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.HasAttributes">
      <summary>현재 노드에 특성이 있는지를 나타내는 <see langword="boolean" /> 값을 얻습니다.</summary>
      <returns>현재 노드에 특성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.InnerText">
      <summary>노드와 모든 자식의 연결된 값을 가져오거나 설정합니다.</summary>
      <returns>노드와 모든 자식의 연결된 값입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.InnerXml">
      <summary>이 노드의 자식을 나타내는 태그를 가져오거나 설정합니다.</summary>
      <returns>이 노드의 자식 태그입니다.</returns>
      <exception cref="T:System.Xml.XmlException">이 속성을 설정할 때 지정된 XML이 올바른 형식이 아닙니다.</exception>
    </member>
    <member name="P:System.Xml.XmlElement.IsEmpty">
      <summary>요소의 태그 서식을 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="true" />요소가 짧은 태그 형식 "&lt;item/&gt;"으로 serialize 되 면이 고, 그렇지 않으면입니다. <see langword="false" /> "item&lt;/item&gt;"의 긴 형식입니다.&gt;&lt;  
이 속성을 설정할 때 <see langword="true" />로 설정하면 요소의 자식이 제거되고 요소는 짧은 태그 형식으로 serialize됩니다. <see langword="false" />로 설정하면 요소에 내용이 있는지 여부와 상관없이 속성 값이 변경되고, 요소가 비었으면 긴 형식으로 serialize됩니다.  
이 속성은 DOM(문서 개체 모델)에 대한 Microsoft 확장입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.LocalName">
      <summary>현재 노드의 로컬 이름을 가져옵니다.</summary>
      <returns>접두사를 제거한 현재 노드의 이름입니다. 예를 들어 <see langword="LocalName" /> 은 요소 book &lt;예&gt;합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.Name">
      <summary>노드의 정규화된 이름을 가져옵니다.</summary>
      <returns>노드의 정규화된 이름입니다. <see langword="XmlElement" /> 노드의 경우에는 요소의 태그 이름입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.NamespaceURI">
      <summary>이 노드의 네임스페이스 URI를 가져옵니다.</summary>
      <returns>이 노드의 네임스페이스 URI입니다. 네임스페이스 URI가 없으면, 이 속성은 String.Empty를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.NextSibling">
      <summary>이 요소 바로 다음에 오는 <see cref="T:System.Xml.XmlNode" />를 가져옵니다.</summary>
      <returns>이 요소 바로 다음에 오는 <see langword="XmlNode" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.NodeType">
      <summary>현재 노드의 형식을 가져옵니다.</summary>
      <returns>노드 형식입니다. <see langword="XmlElement" /> 노드의 경우 이 값은 XmlNodeType.Element입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.OwnerDocument">
      <summary>이 노드가 속한 <see cref="T:System.Xml.XmlDocument" />를 가져옵니다.</summary>
      <returns>이 요소가 속한 <see langword="XmlDocument" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.ParentNode">
      <summary>부모를 가질 수 있는 노드의 경우 이 노드의 부모를 가져옵니다.</summary>
      <returns>현재 노드의 부모인 <see langword="XmlNode" />입니다. 노드를 만들고 트리에 추가하지 않은 경우나 트리에서 노드를 제거한 경우 부모는 <see langword="null" />입니다. 다른 모든 노드의 경우에는 노드의 <see cref="P:System.Xml.XmlNode.NodeType" />에 따라 반환되는 값이 달라집니다. 다음 표에서는 <see langword="ParentNode" /> 속성에 대해 가능한 반환 값을 설명합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.Prefix">
      <summary>이 노드의 네임스페이스 접두사를 가져오거나 설정합니다.</summary>
      <returns>이 노드의 네임스페이스 접두사입니다. 접두사가 없으면, 이 속성은 String.Empty를 반환합니다.</returns>
      <exception cref="T:System.ArgumentException">이 노드가 읽기 전용인 경우</exception>
      <exception cref="T:System.Xml.XmlException">지정된 접두사에 잘못된 문자가 포함된 경우  
지정된 접두사의 형식이 잘못된 경우  
이 노드의 namespaceURI가 <see langword="null" />인 경우  
지정된 접두사가 “xml”이고 이 노드의 namespaceURI가 “http://www.w3.org/XML/1998/namespace”와 다른 경우</exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAll">
      <summary>지정된 특성 및 현재 노드의 자식을 모두 제거합니다. 기본 특성은 제거되지 않습니다.</summary>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAllAttributes">
      <summary>요소에서 지정된 모든 특성을 제거합니다. 기본 특성은 제거되지 않습니다.</summary>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttribute(System.String)">
      <summary>이름을 사용하여 특성을 제거합니다.</summary>
      <param name="name">제거할 특성의 이름입니다. 정규화된 이름입니다. 일치하는 노드의 <see langword="Name" /> 속성과 일치합니다.</param>
      <exception cref="T:System.ArgumentException">노드는 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttribute(System.String,System.String)">
      <summary>지정된 로컬 이름과 네임스페이스 URI를 갖고 있는 특성을 제거합니다. 제거한 특성에 기본값이 있는 경우 즉시 바뀝니다.</summary>
      <param name="localName">제거할 특성의 로컬 이름입니다.</param>
      <param name="namespaceURI">제거할 특성의 네임스페이스 URI입니다.</param>
      <exception cref="T:System.ArgumentException">노드는 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeAt(System.Int32)">
      <summary>요소에서 지정된 인덱스의 특성 노드를 제거합니다. 제거한 특성에 기본값이 있는 경우 즉시 바뀝니다.</summary>
      <param name="i">제거할 노드의 인덱스입니다. 첫 번째 노드에 인덱스 0이 있습니다.</param>
      <returns>제거한 Attribute 노드이거나, 지정한 인덱스에 노드가 없는 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)">
      <summary>로컬 이름과 네임스페이스 URI로 지정한 <see cref="T:System.Xml.XmlAttribute" />를 제거합니다. 제거한 특성에 기본값이 있는 경우 즉시 바뀝니다.</summary>
      <param name="localName">특성의 로컬 이름입니다.</param>
      <param name="namespaceURI">특성의 네임스페이스 URI입니다.</param>
      <returns>제거한 <see langword="XmlAttribute" />이거나 <see langword="null" />에 일치하는 Attribute 노드가 없으면 <see langword="XmlElement" />입니다.</returns>
      <exception cref="T:System.ArgumentException">이 노드가 읽기 전용인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)">
      <summary>지정된 <see cref="T:System.Xml.XmlAttribute" />을 제거합니다.</summary>
      <param name="oldAttr">제거할 <see langword="XmlAttribute" /> 노드입니다. 제거한 특성에 기본값이 있으면 바로 대체됩니다.</param>
      <returns>제거한 <see langword="XmlAttribute" />이거나, <paramref name="oldAttr" />이 <see langword="null" />의 Attribute 노드가 아닐 경우에는 <see langword="XmlElement" />입니다.</returns>
      <exception cref="T:System.ArgumentException">이 노드가 읽기 전용인 경우</exception>
    </member>
    <member name="P:System.Xml.XmlElement.SchemaInfo">
      <summary>스키마 유효성 검사의 결과로 이 노드에 할당된 스키마 유효성 검사 이후 정보 집합을 가져옵니다.</summary>
      <returns>이 노드의 스키마 유효성 검사 이후 정보 집합이 포함된 <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttribute(System.String,System.String)">
      <summary>지정된 이름을 가진 특성의 값을 설정합니다.</summary>
      <param name="name">만들거나 변경할 특성의 이름입니다. 정규화된 이름입니다. 이름에 콜론이 포함되어 있으면 접두사와 로컬 이름 구성 요소로 구문 분석됩니다.</param>
      <param name="value">특성에 설정할 값입니다.</param>
      <exception cref="T:System.Xml.XmlException">지정된 이름에 잘못된 문자가 있는 경우</exception>
      <exception cref="T:System.ArgumentException">노드는 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)">
      <summary>지정된 로컬 이름과 네임스페이스 URI를 갖고 있는 특성의 값을 설정합니다.</summary>
      <param name="localName">특성의 로컬 이름입니다.</param>
      <param name="namespaceURI">특성의 네임스페이스 URI입니다.</param>
      <param name="value">특성에 설정할 값입니다.</param>
      <returns>특성 값입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttributeNode(System.String,System.String)">
      <summary>지정된 <see cref="T:System.Xml.XmlAttribute" />를 추가합니다.</summary>
      <param name="localName">특성의 로컬 이름입니다.</param>
      <param name="namespaceURI">특성의 네임스페이스 URI입니다.</param>
      <returns>추가할 <see langword="XmlAttribute" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)">
      <summary>지정된 <see cref="T:System.Xml.XmlAttribute" />를 추가합니다.</summary>
      <param name="newAttr">이 요소의 특성 컬렉션에 추가할 <see langword="XmlAttribute" /> 노드입니다.</param>
      <returns>특성이 같은 이름을 가진 기존 특성을 대체할 경우 이전 <see langword="XmlAttribute" />가 반환됩니다. 그렇지 않으면 <see langword="null" />이 반환됩니다.</returns>
      <exception cref="T:System.ArgumentException">이 노드를 만든 문서가 아닌 다른 문서에서 <paramref name="newAttr" />를 만든 경우 이 노드가 읽기 전용인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="newAttr" />가 이미 다른 <see langword="XmlElement" /> 개체의 특성인 경우. 다른 <see langword="XmlAttribute" /> 개체에서 다시 사용하려면 명시적으로 <see langword="XmlElement" /> 노드를 복제해야 합니다.</exception>
    </member>
    <member name="M:System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드의 모든 자식을 저장합니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="M:System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)">
      <summary>현재 노드를 지정된 <see cref="T:System.Xml.XmlWriter" />에 저장합니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="T:System.Xml.XmlEntity">
      <summary>&lt;!ENTITY... &gt;와 같은 엔터티 선언을 나타냅니다.</summary>
    </member>
    <member name="P:System.Xml.XmlEntity.BaseURI">
      <summary>현재 노드의 기본 URI(Uniform Resource Identifier)를 가져옵니다.</summary>
      <returns>노드를 로드한 위치입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlEntity.CloneNode(System.Boolean)">
      <summary>이 노드의 복제본을 만듭니다. entity 노드는 복제할 수 없습니다. <see cref="T:System.Xml.XmlEntity" /> 개체에서 이 메서드를 호출하면 예외가 throw됩니다.</summary>
      <param name="deep">지정된 노드 아래의 하위 트리를 재귀적으로 복제하려면 <see langword="true" />이고, 노드 자체만 복제하려면 <see langword="false" />입니다.</param>
      <returns>메서드를 호출한 <see cref="T:System.Xml.XmlNode" />의 복사본입니다.</returns>
      <exception cref="T:System.InvalidOperationException">entity 노드는 복제할 수 없습니다. <see cref="T:System.Xml.XmlEntity" /> 개체에서 이 메서드를 호출하면 예외가 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlEntity.InnerText">
      <summary>entity 노드와 모든 자식의 연결된 값을 가져옵니다.</summary>
      <returns>노드와 모든 자식의 연결된 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">속성을 설정하려고 시도한 경우</exception>
    </member>
    <member name="P:System.Xml.XmlEntity.InnerXml">
      <summary>이 노드의 자식을 나타내는 태그를 가져옵니다.</summary>
      <returns>
        <see langword="XmlEntity" /> 노드의 경우 String.Empty가 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">속성을 설정하려고 시도한 경우</exception>
    </member>
    <member name="P:System.Xml.XmlEntity.IsReadOnly">
      <summary>노드가 읽기 전용인지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />노드가 읽기 전용 이면이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" />입니다.  
<see langword="XmlEntity" /> 노드가 읽기 전용이므로 이 속성은 항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.LocalName">
      <summary>네임스페이스 접두사가 없는 노드의 이름을 가져옵니다.</summary>
      <returns>
        <see langword="XmlEntity" /> 노드의 경우, 이 속성은 엔터티 이름을 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.Name">
      <summary>노드의 이름을 가져옵니다.</summary>
      <returns>엔터티의 이름입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.NodeType">
      <summary>노드의 형식을 가져옵니다.</summary>
      <returns>노드 형식입니다. <see langword="XmlEntity" /> 노드의 경우, 값은 XmlNodeType.Entity입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.NotationName">
      <summary>엔터티 선언에서 선택적인 NDATA 특성의 이름을 가져옵니다.</summary>
      <returns>NDATA 특성의 이름입니다. NDATA가 없으면, <see langword="null" />이 반환됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.OuterXml">
      <summary>이 노드와 이 노드의 모든 자식을 나타내는 태그를 가져옵니다.</summary>
      <returns>
        <see langword="XmlEntity" /> 노드의 경우 String.Empty가 반환됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.PublicId">
      <summary>엔터티 선언의 공용 식별자 값을 가져옵니다.</summary>
      <returns>엔터티의 공용 식별자입니다. 공용 식별자가 없으면 <see langword="null" />이 반환됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.SystemId">
      <summary>엔터티 선언의 시스템 식별자 값을 가져옵니다.</summary>
      <returns>엔터티의 시스템 식별자입니다. 시스템 식별자가 없으면 <see langword="null" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Xml.XmlEntity.WriteContentTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드의 모든 자식을 저장합니다. <see langword="XmlEntity" /> 노드의 경우, 이 메서드는 의미 없는 메서드입니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="M:System.Xml.XmlEntity.WriteTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드를 저장합니다. <see langword="XmlEntity" /> 노드의 경우, 이 메서드는 의미 없는 메서드입니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="T:System.Xml.XmlEntityReference">
      <summary>entityreference 노드를 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.XmlEntityReference.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlEntityReference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">엔터티 참조의 이름입니다. <see cref="P:System.Xml.XmlEntityReference.Name" /> 속성을 참조하십시오.</param>
      <param name="doc">부모 XML 문서입니다.</param>
    </member>
    <member name="P:System.Xml.XmlEntityReference.BaseURI">
      <summary>현재 노드의 기본 URI(Uniform Resource Identifier)를 가져옵니다.</summary>
      <returns>노드를 로드한 위치입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlEntityReference.CloneNode(System.Boolean)">
      <summary>이 노드의 복제본을 만듭니다.</summary>
      <param name="deep">지정된 노드 아래의 하위 트리를 재귀적으로 복제하려면 <see langword="true" />이고, 노드 자체만 복제하려면 <see langword="false" />입니다. <see langword="XmlEntityReference" /> 노드의 경우, 이 메서드는 항상 자식이 없는 entityreference 노드를 반환합니다. 노드를 부모에 삽입할 경우 대체 텍스트가 설정됩니다.</param>
      <returns>복제된 노드입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.IsReadOnly">
      <summary>노드가 읽기 전용인지를 나타내는 값을 가져옵니다.</summary>
      <returns>노드가 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  
<see langword="XmlEntityReference" /> 노드가 읽기 전용이므로 이 속성은 항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.LocalName">
      <summary>노드의 로컬 이름을 가져옵니다.</summary>
      <returns>
        <see langword="XmlEntityReference" /> 노드의 경우, 이 속성은 참조하는 엔터티의 이름을 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.Name">
      <summary>노드의 이름을 가져옵니다.</summary>
      <returns>참조된 엔터티의 이름입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.NodeType">
      <summary>노드의 형식을 가져옵니다.</summary>
      <returns>노드 형식입니다. <see langword="XmlEntityReference" /> 노드의 경우, 값은 XmlNodeType.EntityReference입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.Value">
      <summary>노드의 값을 가져오거나 설정합니다.</summary>
      <returns>노드의 값입니다. <see langword="XmlEntityReference" /> 노드의 경우 이 속성은 <see langword="null" />를 반환합니다.</returns>
      <exception cref="T:System.ArgumentException">노드가 읽기 전용인 경우</exception>
      <exception cref="T:System.InvalidOperationException">속성을 설정하는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlEntityReference.WriteContentTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드의 모든 자식을 저장합니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="M:System.Xml.XmlEntityReference.WriteTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드를 저장합니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="T:System.Xml.XmlException">
      <summary>마지막 예외에 대한 자세한 정보를 반환합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor">
      <summary>
        <see langword="XmlException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 및 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 개체의 정보를 사용하여 <see langword="XmlException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">
        <see langword="SerializationInfo" />의 모든 속성이 포함된 <see langword="XmlException" /> 개체입니다.</param>
      <param name="context">컨텍스트 정보가 포함된 <see langword="StreamingContext" /> 개체입니다.</param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see langword="XmlException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류 설명입니다.</param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception)">
      <summary>
        <see langword="XmlException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류 조건에 대한 설명입니다.</param>
      <param name="innerException">
        <see cref="T:System.Exception" />을 throw한 <see langword="XmlException" />입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>지정된 메시지, 내부 예외, 줄 번호 및 줄 위치를 갖는 <see langword="XmlException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류 설명입니다.</param>
      <param name="innerException">현재 예외의 원인인 예외입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
      <param name="lineNumber">오류가 발생한 곳을 나타내는 줄 번호입니다.</param>
      <param name="linePosition">오류가 발생한 곳을 나타내는 줄 위치입니다.</param>
    </member>
    <member name="M:System.Xml.XmlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>모든 <see langword="XmlException" /> 속성을 지정한 <see cref="T:System.Runtime.Serialization.SerializationInfo" />의 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 클래스로 스트리밍합니다.</summary>
      <param name="info">
        <see langword="SerializationInfo" /> 개체</param>
      <param name="context">
        <see langword="StreamingContext" /> 개체</param>
    </member>
    <member name="P:System.Xml.XmlException.LineNumber">
      <summary>오류가 발생한 곳을 나타내는 줄 번호를 가져옵니다.</summary>
      <returns>오류가 발생한 곳을 나타내는 줄 번호입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlException.LinePosition">
      <summary>오류가 발생한 곳을 나타내는 줄 위치를 가져옵니다.</summary>
      <returns>오류가 발생한 곳을 나타내는 줄 위치입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlException.Message">
      <summary>현재 예외를 설명하는 메시지를 가져옵니다.</summary>
      <returns>예외에 대한 이유를 설명하는 오류 메시지입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlException.SourceUri">
      <summary>XML 파일의 위치를 가져옵니다.</summary>
      <returns>XML 데이터의 소스 URI입니다. 소스 URI가 없으면 이 속성은 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Xml.XmlImplementation">
      <summary>
        <see cref="T:System.Xml.XmlDocument" /> 개체 집합에 대한 컨텍스트를 정의합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlImplementation.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlImplementation" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlImplementation.#ctor(System.Xml.XmlNameTable)">
      <summary>지정된 <see cref="T:System.Xml.XmlImplementation" />을 사용하여 <see cref="T:System.Xml.XmlNameTable" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="nt">
        <see cref="T:System.Xml.XmlNameTable" /> 개체입니다.</param>
    </member>
    <member name="M:System.Xml.XmlImplementation.CreateDocument">
      <summary>새 <see cref="T:System.Xml.XmlDocument" />를 만듭니다.</summary>
      <returns>새로운 <see langword="XmlDocument" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlImplementation.HasFeature(System.String,System.String)">
      <summary>DOM(문서 개체 모델)을 구현할 때 특정 기능을 구현하는지 여부를 테스트합니다.</summary>
      <param name="strFeature">테스트할 기능의 패키지 이름입니다. 대/소문자를 구분하지 않습니다.</param>
      <param name="strVersion">이것은 테스트할 패키지 이름의 버전 번호입니다. 버전이 지정되지 않은 경우(<see langword="null" />) 아무 기능 버전이나 지원하도록 하면 메서드가 <see langword="true" />를 반환합니다.</param>
      <returns>지정된 버전에 기능이 구현되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  
다음 표에서는 <see langword="HasFeature" />가 <see langword="true" />를 반환하도록 하는 조합을 보여 줍니다.  
  strFeature 
  strVersion 
  XML 
  1.0 
  XML 
  2.0</returns>
    </member>
    <member name="T:System.Xml.XmlLinkedNode">
      <summary>이 노드 바로 앞이나 뒤에 있는 노드를 가져옵니다.</summary>
    </member>
    <member name="P:System.Xml.XmlLinkedNode.NextSibling">
      <summary>이 노드 바로 다음에 오는 노드를 가져옵니다.</summary>
      <returns>이 노드 바로 뒤에 있는 <see cref="T:System.Xml.XmlNode" />이거나, 노드가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlLinkedNode.PreviousSibling">
      <summary>이 노드 바로 앞에 있는 노드를 가져옵니다.</summary>
      <returns>앞에 있는 <see cref="T:System.Xml.XmlNode" />이거나, 노드가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.Xml.XmlNamedNodeMap">
      <summary>이름이나 인덱스로 액세스할 수 있는 노드의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="P:System.Xml.XmlNamedNodeMap.Count">
      <summary>
        <see langword="XmlNamedNodeMap" />의 노드 수를 가져옵니다.</summary>
      <returns>노드 수입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetEnumerator">
      <summary>
        <see langword="XmlNamedNodeMap" />의 노드 컬렉션에 대한 "foreach" 스타일 반복 지원을 제공합니다.</summary>
      <returns>열거자 개체입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)">
      <summary>이름으로 지정된 <see cref="T:System.Xml.XmlNode" />를 검색합니다.</summary>
      <param name="name">검색할 노드의 정규화된 이름입니다. 일치하는 노드의 <see cref="P:System.Xml.XmlNode.Name" /> 속성과 일치합니다.</param>
      <returns>지정된 이름을 가진 <see langword="XmlNode" />이거나, 일치하는 노드가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String,System.String)">
      <summary>일치하는 <see cref="P:System.Xml.XmlNode.LocalName" /> 및 <see cref="P:System.Xml.XmlNode.NamespaceURI" />를 갖고 있는 노드를 검색합니다.</summary>
      <param name="localName">검색할 노드의 로컬 이름입니다.</param>
      <param name="namespaceURI">검색할 노드의 네임스페이스 URI(Uniform Resource Identifier)입니다.</param>
      <returns>일치하는 로컬 이름과 네임스페이스 URI를 갖고 있는 <see cref="T:System.Xml.XmlNode" />이거나, 일치하는 노드가 없는 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.Item(System.Int32)">
      <summary>
        <see langword="XmlNamedNodeMap" />의 지정된 인덱스에서 노드를 검색합니다.</summary>
      <param name="index">
        <see langword="XmlNamedNodeMap" />에서 검색할 노드의 인덱스 위치입니다. 인덱스는 0부터 시작하므로 첫 번째 노드의 인덱스는 0이고 마지막 노드의 인덱스는 <see cref="P:System.Xml.XmlNamedNodeMap.Count" />-1입니다.</param>
      <returns>지정된 인덱스의 <see cref="T:System.Xml.XmlNode" />입니다. <paramref name="index" />가 0보다 작거나 <see cref="P:System.Xml.XmlNamedNodeMap.Count" /> 속성보다 크거나 같을 경우에는 <see langword="null" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String)">
      <summary>
        <see langword="XmlNamedNodeMap" />에서 노드를 제거합니다.</summary>
      <param name="name">제거할 노드의 정규화된 이름입니다. 일치하는 노드의 <see cref="P:System.Xml.XmlNode.Name" /> 속성과 이름을 일치시킵니다.</param>
      <returns>이 <see langword="XmlNode" />에서 제거한 <see langword="XmlNamedNodeMap" />이거나, 일치하는 노드가 없는 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String,System.String)">
      <summary>일치하는 <see cref="P:System.Xml.XmlNode.LocalName" /> 및 <see cref="P:System.Xml.XmlNode.NamespaceURI" />를 갖고 있는 노드를 제거합니다.</summary>
      <param name="localName">제거할 노드의 로컬 이름입니다.</param>
      <param name="namespaceURI">제거할 노드의 네임스페이스 URI입니다.</param>
      <returns>제거한 <see cref="T:System.Xml.XmlNode" />이거나, 일치하는 노드가 없는 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.SetNamedItem(System.Xml.XmlNode)">
      <summary>해당하는 <see cref="T:System.Xml.XmlNode" /> 속성을 사용하여 <see cref="P:System.Xml.XmlNode.Name" />를 추가합니다.</summary>
      <param name="node">
        <see langword="XmlNode" />에 저장할 <see langword="XmlNamedNodeMap" />입니다. 해당하는 이름의 노드가 이미 맵에 있을 경우에는 새 노드로 대체됩니다.</param>
      <returns>
        <paramref name="node" />에서 같은 이름을 가진 기존 노드를 대체할 경우 이전 노드가 반환되고, 그렇지 않으면 <see langword="null" />이 반환됩니다.</returns>
      <exception cref="T:System.ArgumentException">
        <see langword="XmlNamedNodeMap" />을 만든 문서가 아니라 다른 <see cref="T:System.Xml.XmlDocument" />에서 <paramref name="node" />를 만들었거나 <see langword="XmlNamedNodeMap" />이 읽기 전용인 경우</exception>
    </member>
    <member name="T:System.Xml.XmlNamespaceManager">
      <summary>컬렉션에 대한 네임스페이스를 확인, 추가 및 제거하고 이 네임스페이스에 대한 범위 관리를 제공합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)">
      <summary>지정된 <see cref="T:System.Xml.XmlNamespaceManager" />를 사용하여 <see cref="T:System.Xml.XmlNameTable" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="nameTable">사용할 <see cref="T:System.Xml.XmlNameTable" />입니다.</param>
      <exception cref="T:System.NullReferenceException">생성자에게 <see langword="null" />가 전달되는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)">
      <summary>지정된 네임스페이스를 컬렉션에 추가합니다.</summary>
      <param name="prefix">추가할 네임스페이스와 관련된 접두사입니다. 기본 네임스페이스를 추가하려면 String.Empty를 사용합니다.  
 참고 XPath(XML Path Language) 식에서 네임스페이스를 확인하는 데 <see cref="T:System.Xml.XmlNamespaceManager" />를 사용할 경우에는 접두사를 지정해야 합니다. XPath 식에 접두사가 없으면 네임스페이스 URI(Uniform Resource Identifier)를 빈 네임스페이스로 간주합니다. XPath 식 및 <see cref="T:System.Xml.XmlNamespaceManager" />에 대한 자세한 내용은 <see cref="M:System.Xml.XmlNode.SelectNodes(System.String)" /> 및 <see cref="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)" /> 메서드를 참조하십시오.</param>
      <param name="uri">추가할 네임스페이스입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="prefix" />의 값이 "xml" 또는 "xmlns"인 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> 또는 <paramref name="uri" />의 값이 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.DefaultNamespace">
      <summary>기본 네임스페이스의 네임스페이스 URI를 가져옵니다.</summary>
      <returns>기본 네임 스페이스에 대 한 네임 스페이스 URI 이거나, 기본 네임 스페이스가 없을 경우 빈 문자열입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetEnumerator">
      <summary>
        <see cref="T:System.Xml.XmlNamespaceManager" />에서 네임스페이스를 반복하는 데 사용할 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />가 저장하는 접두사가 포함된 <see cref="T:System.Xml.XmlNamespaceManager" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>현재 범위 내에 있는 네임스페이스를 열거하는 데 사용할 수 있는 접두사가 붙은 네임스페이스 이름 컬렉션을 가져옵니다.</summary>
      <param name="scope">반환할 네임스페이스 노드의 형식을 지정하는 열거형 값입니다.</param>
      <returns>현재 범위 내에 있는 네임스페이스 및 접두사 쌍 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.HasNamespace(System.String)">
      <summary>제공한 접두사에 현재 푸시된 범위에 정의한 네임스페이스가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="prefix">찾으려는 네임스페이스의 접두사입니다.</param>
      <returns>정의된 네임스페이스가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)">
      <summary>지정된 접두사의 네임스페이스 URI를 가져옵니다.</summary>
      <param name="prefix">확인할 네임스페이스 URI의 접두사입니다. 기본 네임스페이스와 일치시키려면 String.Empty를 전달합니다.</param>
      <returns>
        <paramref name="prefix" />의 네임스페이스 URI이거나, 매핑된 네임스페이스가 없을 경우에는 <see langword="null" />입니다. 반환되는 문자열은 원자화됩니다.  
원자화된 문자열에 대한 자세한 내용은 <see cref="T:System.Xml.XmlNameTable" /> 클래스를 참조하십시오.</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupPrefix(System.String)">
      <summary>지정된 네임스페이스 URI에 대해 선언한 접두사를 찾습니다.</summary>
      <param name="uri">접두사에 대해 확인할 네임스페이스입니다.</param>
      <returns>일치하는 접두사입니다. 매핑된 접두사가 없으면 메서드에서 String.Empty를 반환합니다. null 값이 제공되면 <see langword="null" />이 반환됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.NameTable">
      <summary>이 개체와 관련된 <see cref="T:System.Xml.XmlNameTable" />을 가져옵니다.</summary>
      <returns>이 개체에서 사용한 <see cref="T:System.Xml.XmlNameTable" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PopScope">
      <summary>스택에서 네임스페이스 범위를 팝합니다.</summary>
      <returns>스택에 네임스페이스 범위가 남아 있으면 <see langword="true" />이고, 팝할 네임스페이스가 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PushScope">
      <summary>스택에 네임스페이스 범위를 푸시합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)">
      <summary>지정된 접두사의 지정된 네임스페이스를 제거합니다.</summary>
      <param name="prefix">네임스페이스의 접두사입니다.</param>
      <param name="uri">지정된 접두사의 제거할 네임스페이스입니다. 네임스페이스는 현재 네임스페이스 범위에서 제거됩니다. 현재 범위를 벗어난 네임스페이스는 무시됩니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> 또는 <paramref name="uri" />의 값이 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Xml.XmlNamespaceScope">
      <summary>네임스페이스 범위를 정의합니다.</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.All">
      <summary>현재 노드의 범위에서 정의된 모든 네임스페이스입니다. 여기에는 항상 암시적으로 선언되는 xmlns:xml 네임스페이스가 포함됩니다. 반환되는 네임스페이스의 순서는 정의되지 않습니다.</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.ExcludeXml">
      <summary>항상 암시적으로 선언되는 xmlns:xml 네임스페이스를 제외하고 현재 노드의 범위에서 정의된 모든 네임스페이스입니다. 반환되는 네임스페이스의 순서는 정의되지 않습니다.</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.Local">
      <summary>현재 노드에서 로컬로 정의된 모든 네임스페이스입니다.</summary>
    </member>
    <member name="T:System.Xml.XmlNameTable">
      <summary>원자화된 문자열 개체의 테이블입니다.</summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlNameTable" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary>파생 클래스에서 재정의할 경우 지정한 문자열을 원자화하여 이를 <see langword="XmlNameTable" />에 추가합니다.</summary>
      <param name="array">추가할 이름이 포함된 문자 배열입니다.</param>
      <param name="offset">이름의 첫 번째 문자를 지정하는 인덱스이며 배열에서 0부터 시작합니다.</param>
      <param name="length">이름에 있는 문자의 수입니다.</param>
      <returns>원자화된 새 문자열이거나 이미 문자열이 존재하는 경우 기존 문자열입니다. 길이가 0이면 String.Empty가 반환됩니다.</returns>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="offset" />  
또는 
 <paramref name="offset" /> &gt;= <paramref name="array" />.Length 
또는 
 <paramref name="length" /> &gt; <paramref name="array" />.Length 
위의 경우 <paramref name="length" /> =0이면 예외가 throw되지 않습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> &lt; 0.</exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.String)">
      <summary>파생 클래스에서 재정의할 경우 지정한 문자열을 원자화하여 이를 <see langword="XmlNameTable" />에 추가합니다.</summary>
      <param name="array">추가할 이름입니다.</param>
      <returns>원자화된 새 문자열이거나 이미 문자열이 존재하는 경우 기존 문자열입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary>파생 클래스에서 재정의할 경우 지정된 배열에 있는 지정된 범위의 문자와 같은 문자를 포함하는 원자화된 문자열을 가져옵니다.</summary>
      <param name="array">검색할 이름이 포함된 문자 배열입니다.</param>
      <param name="offset">이름의 첫 번째 문자를 지정하는 배열의 0부터 시작하는 인덱스입니다.</param>
      <param name="length">이름에 있는 문자의 수입니다.</param>
      <returns>문자열이 이미 원자화되지 않은 경우 원자화된 문자열 또는 <see langword="null" />입니다. <paramref name="length" />가 0이면 String.Empty가 반환됩니다.</returns>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="offset" />  
또는 
 <paramref name="offset" /> &gt;= <paramref name="array" />.Length 
또는 
 <paramref name="length" /> &gt; <paramref name="array" />.Length 
위의 경우 <paramref name="length" /> =0이면 예외가 throw되지 않습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> &lt; 0.</exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.String)">
      <summary>파생 클래스에서 재정의할 경우 지정된 문자열과 같은 값을 포함하는 원자화된 문자열을 가져옵니다.</summary>
      <param name="array">검색할 이름입니다.</param>
      <returns>문자열이 이미 원자화되지 않은 경우 원자화된 문자열 또는 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Xml.XmlNode">
      <summary>XML 문서의 단일 노드를 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)">
      <summary>지정된 노드를 이 노드의 자식 노드 목록 끝에 추가합니다.</summary>
      <param name="newChild">추가할 노드입니다. 지정된 위치로 이동하는, 추가할 노드의 모든 콘텐츠입니다.</param>
      <returns>추가한 노드입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 노드가 <paramref name="newChild" /> 노드 형식의 자식 노드를 허용하지 않는 형식을 가지는 경우  
<paramref name="newChild" />가 이 노드의 상위 노드일 경우</exception>
      <exception cref="T:System.ArgumentException">이 노드를 만든 문서가 아닌 다른 문서에서 <paramref name="newChild" />를 만든 경우  
이 노드가 읽기 전용인 경우</exception>
    </member>
    <member name="P:System.Xml.XmlNode.Attributes">
      <summary>이 노드의 특성이 포함된 <see cref="T:System.Xml.XmlAttributeCollection" />을 가져옵니다.</summary>
      <returns>노드의 특성을 포함하는 <see langword="XmlAttributeCollection" />입니다.  
노드가 XmlNodeType.Element 형식일 경우 노드의 특성이 반환됩니다. 그렇지 않은 경우 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.BaseURI">
      <summary>현재 노드의 기본 URI를 가져옵니다.</summary>
      <returns>노드가 로드된 위치이거나 노드에 기본 URI가 없으면 String.Empty입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.ChildNodes">
      <summary>노드의 모든 자식을 가져옵니다.</summary>
      <returns>노드의 모든 자식을 포함하는 개체입니다.  
자식 노드가 없으면 이 속성은 빈 <see cref="T:System.Xml.XmlNodeList" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNode.Clone">
      <summary>이 노드의 복제본을 만듭니다.</summary>
      <returns>복제된 노드입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNode.CloneNode(System.Boolean)">
      <summary>파생 클래스에서 재정의한 경우 노드를 복제합니다.</summary>
      <param name="deep">지정된 노드 아래의 하위 트리를 재귀적으로 복제하려면 <see langword="true" />이고, 노드 자체만 복제하려면 <see langword="false" />입니다.</param>
      <returns>복제된 노드입니다.</returns>
      <exception cref="T:System.InvalidOperationException">복제할 수 없는 노드 형식에 이 메서드를 호출하는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlNode.CreateNavigator">
      <summary>이 개체를 탐색하기 위해 <see cref="T:System.Xml.XPath.XPathNavigator" />를 만듭니다.</summary>
      <returns>노드를 탐색 하는 데 사용되는 <see langword="XPathNavigator" /> 개체입니다. <see langword="XPathNavigator" />는 메서드를 호출한 노드에 위치하며 문서의 루트에는 위치하지 않습니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.FirstChild">
      <summary>노드의 첫 번째 자식을 가져옵니다.</summary>
      <returns>노드의 첫 번째 자식입니다. 이러한 노드가 없으면, <see langword="null" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetEnumerator">
      <summary>현재 노드에서 자식 노드를 반복하는 열거자를 가져옵니다.</summary>
      <returns>현재 노드에서 하위 노드를 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)">
      <summary>현재 노드의 범위에 있는 지정된 접두사에 대해 가장 가까운 xmlns 선언을 조회하여 선언의 네임스페이스 URI를 반환합니다.</summary>
      <param name="prefix">찾으려는 네임스페이스 URI가 있는 접두사입니다.</param>
      <returns>지정된 접두사의 네임스페이스 URI입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetPrefixOfNamespace(System.String)">
      <summary>현재 노드의 범위에 있는 지정된 네임스페이스 URI에 대해 가장 가까운 xmlns 선언을 조회하여 해당 선언에 정의된 접두사를 반환합니다.</summary>
      <param name="namespaceURI">찾으려는 접두사를 가진 네임스페이스 URI입니다.</param>
      <returns>지정된 네임스페이스 URI의 접두사입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.HasChildNodes">
      <summary>이 노드에 자식 노드가 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 노드에 자식 노드가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.InnerText">
      <summary>노드와 모든 자식 노드의 연결된 값을 가져오거나 설정합니다.</summary>
      <returns>노드와 모든 자식 노드의 연결된 값입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.InnerXml">
      <summary>이 노드의 자식 노드를 나타내는 태그를 가져오거나 설정합니다.</summary>
      <returns>이 노드의 자식 노드를 나타내는 태그입니다.  
 <see langword="InnerXml" />은 기본 특성을 반환하지 않습니다.</returns>
      <exception cref="T:System.InvalidOperationException">자식 노드를 가질 수 없는 노드에 대해 이 속성을 설정하는 경우</exception>
      <exception cref="T:System.Xml.XmlException">이 속성을 설정할 때 지정된 XML이 올바른 형식이 아닙니다.</exception>
    </member>
    <member name="M:System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>지정된 노드를 지정된 참조 노드 바로 다음에 삽입합니다.</summary>
      <param name="newChild">삽입할 노드입니다.</param>
      <param name="refChild">참조 노드입니다. <paramref name="newChild" />는 <paramref name="refChild" /> 뒤에 삽입됩니다.</param>
      <returns>삽입할 노드입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 노드가 <paramref name="newChild" /> 노드 형식의 자식 노드를 허용하지 않는 형식을 가지는 경우  
<paramref name="newChild" />가 이 노드의 상위 노드일 경우</exception>
      <exception cref="T:System.ArgumentException">이 노드를 만든 문서가 아닌 다른 문서에서 <paramref name="newChild" />를 만든 경우  
<paramref name="refChild" />가 이 노드의 자식이 아닌 경우  
이 노드가 읽기 전용인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>지정된 노드를 지정된 참조 노드 바로 앞에 삽입합니다.</summary>
      <param name="newChild">삽입할 노드입니다.</param>
      <param name="refChild">참조 노드입니다. <paramref name="newChild" />는 이 노드 앞에 삽입됩니다.</param>
      <returns>삽입할 노드입니다.</returns>
      <exception cref="T:System.InvalidOperationException">현재 노드가 <paramref name="newChild" /> 노드 형식의 자식 노드를 허용하지 않는 형식인 경우  
<paramref name="newChild" />가 이 노드의 상위 노드일 경우</exception>
      <exception cref="T:System.ArgumentException">이 노드를 만든 문서가 아닌 다른 문서에서 <paramref name="newChild" />를 만든 경우  
<paramref name="refChild" />가 이 노드의 자식이 아닌 경우  
이 노드가 읽기 전용인 경우</exception>
    </member>
    <member name="P:System.Xml.XmlNode.IsReadOnly">
      <summary>노드가 읽기 전용인지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />노드가 읽기 전용 이면이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Item(System.String)">
      <summary>지정된 <see cref="P:System.Xml.XmlNode.Name" />을 가진 첫 번째 자식 요소를 가져옵니다.</summary>
      <param name="name">검색할 요소의 정규화된 이름입니다.</param>
      <returns>지정된 이름과 일치하는 첫 번째 <see cref="T:System.Xml.XmlElement" />입니다. 일치되는 항목이 없으면 null 참조(Visual Basic의 경우 <see langword="Nothing" />)를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Item(System.String,System.String)">
      <summary>지정된 <see cref="P:System.Xml.XmlNode.LocalName" />과 <see cref="P:System.Xml.XmlNode.NamespaceURI" />를 갖고 있는 첫 번째 자식 요소를 가져옵니다.</summary>
      <param name="localname">요소의 로컬 이름입니다.</param>
      <param name="ns">요소의 네임스페이스 URI입니다.</param>
      <returns>일치하는 <paramref name="localname" />과 <paramref name="ns" />를 갖고 있는 첫 번째 <see cref="T:System.Xml.XmlElement" />입니다. . 일치되는 항목이 없으면 null 참조(Visual Basic의 경우 <see langword="Nothing" />)를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.LastChild">
      <summary>노드의 마지막 자식을 가져옵니다.</summary>
      <returns>노드의 마지막 자식입니다. 이러한 노드가 없으면, <see langword="null" />이 반환됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.LocalName">
      <summary>파생 클래스에서 재정의되면 노드의 로컬 이름을 가져옵니다.</summary>
      <returns>접두사를 제거한 노드의 이름입니다. 예를 들어 <see langword="LocalName" /> 은 요소 book &lt;예&gt;합니다.  
반환되는 이름은 다음과 같이 노드의 <see cref="P:System.Xml.XmlNode.NodeType" />에 따라 달라집니다. 
  형식 
  name 
  특성 
  특성의 로컬 이름입니다.  
  CDATA 
  #cdata-section 
  주석 
  #comment 
  문서 
  #document 
  DocumentFragment 
  #document-fragment 
  DocumentType 
  문서 형식 이름입니다.  
  요소 
  요소의 로컬 이름입니다.  
  엔터티 
  엔터티의 이름입니다.  
  EntityReference 
  참조된 엔터티의 이름입니다.  
  Notation 
  표기법 이름입니다.  
  ProcessingInstruction 
  처리 명령의 대상입니다.  
  텍스트 
  #text 
  Whitespace 
  #whitespace 
  SignificantWhitespace 
  #significant-whitespace 
  XmlDeclaration 
  #xml-declaration</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Name">
      <summary>파생 클래스에서 재정의되면 노드의 정규화된 이름을 가져옵니다.</summary>
      <returns>노드의 정규화된 이름입니다. 반환되는 이름은 다음과 같이 노드의 <see cref="P:System.Xml.XmlNode.NodeType" />에 따라 달라집니다. 
  형식 
  name 
  특성 
  특성의 정규화된 이름입니다.  
  CDATA 
  #cdata-section 
  주석 
  #comment 
  문서 
  #document 
  DocumentFragment 
  #document-fragment 
  DocumentType 
  문서 형식 이름입니다.  
  요소 
  요소의 정규화된 이름입니다.  
  엔터티 
  엔터티의 이름입니다.  
  EntityReference 
  참조된 엔터티의 이름입니다.  
  Notation 
  표기법 이름입니다.  
  ProcessingInstruction 
  처리 명령의 대상입니다.  
  텍스트 
  #text 
  Whitespace 
  #whitespace 
  SignificantWhitespace 
  #significant-whitespace 
  XmlDeclaration 
  #xml-declaration</returns>
    </member>
    <member name="P:System.Xml.XmlNode.NamespaceURI">
      <summary>이 노드의 네임스페이스 URI를 가져옵니다.</summary>
      <returns>이 노드의 네임스페이스 URI입니다. 네임스페이스 URI가 없으면, 이 속성은 String.Empty를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.NextSibling">
      <summary>이 노드 바로 다음에 오는 노드를 가져옵니다.</summary>
      <returns>다음 <see langword="XmlNode" />입니다. 다음 노드가 없으면 <see langword="null" />이 반환됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.NodeType">
      <summary>파생 클래스에서 재정의되면 현재 노드의 형식을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.XmlNodeType" /> 값 중 하나입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNode.Normalize">
      <summary>이 XmlNode 아래 전체 수준의 하위 트리에 있는 모든 XmlText 노드를 태그(즉, 태그, 주석, 처리 명령, CDATA 섹션 및 엔터티 참조)만이 XmlText 노드를 구분하는, 인접한 XmlText 노드가 없는 "정상적인" 폼에 넣습니다.</summary>
    </member>
    <member name="P:System.Xml.XmlNode.OuterXml">
      <summary>이 노드와 모든 자식 노드를 포함하는 태그를 가져옵니다.</summary>
      <returns>이 노드와 모든 자식 노드를 포함하는 태그입니다.  
 <see langword="OuterXml" />은 기본 특성을 반환하지 않습니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.OwnerDocument">
      <summary>이 노드가 속한 <see cref="T:System.Xml.XmlDocument" />를 가져옵니다.</summary>
      <returns>이 노드가 속한 <see cref="T:System.Xml.XmlDocument" />입니다.  
노드가 <see cref="T:System.Xml.XmlDocument" />(NodeType이 XmlNodeType.Document와 같음)일 경우 이 속성에서는 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.ParentNode">
      <summary>부모를 가질 수 있는 노드의 경우 이 노드의 부모를 가져옵니다.</summary>
      <returns>현재 노드의 부모인 <see langword="XmlNode" />입니다. 노드를 만들고 트리에 추가하지 않은 경우나 트리에서 노드를 제거한 경우 부모는 <see langword="null" />입니다. 다른 모든 노드의 경우에는 노드의 <see cref="P:System.Xml.XmlNode.NodeType" />에 따라 반환되는 값이 달라집니다. 다음 표에서는 <see langword="ParentNode" /> 속성에 대해 가능한 반환 값을 설명합니다.  
  노드 형식 
  ParentNode의 값을 반환합니다. 
  Attribute, Document, DocumentFragment, Entity, Notation 
  <see langword="null" />을 반환합니다. 이 노드에는 부모가 없습니다.  

  CDATA 
  CDATA 섹션이 포함된 요소나 엔터티 참조를 반환합니다.  

  주석 
  주석이 포함된 요소, 엔터티 참조, 문서 형식 또는 문서를 반환합니다.  

  DocumentType 
  Document 노드를 반환합니다.  

  요소 
  요소의 부모 노드를 반환합니다. 요소가 트리의 Root 노드일 경우 부모는 Document 노드입니다.  

  EntityReference 
  엔터티 참조가 포함된 요소, 특성 또는 엔터티 참조를 반환합니다.  

  ProcessingInstruction 
  처리 명령이 포함된 문서, 요소, 문서 형식 또는 엔터티 참조를 반환합니다.  

  텍스트 
  Text 노드가 포함된 부모 요소, 특성 또는 엔터티 참조를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Prefix">
      <summary>이 노드의 네임스페이스 접두사를 가져오거나 설정합니다.</summary>
      <returns>이 노드의 네임스페이스 접두사입니다. 예를 들어 <see langword="Prefix" /> 요소에는 bk &lt;예&gt;합니다. 접두사가 없으면, 이 속성은 String.Empty를 반환합니다.</returns>
      <exception cref="T:System.ArgumentException">이 노드가 읽기 전용인 경우</exception>
      <exception cref="T:System.Xml.XmlException">지정된 접두사에 잘못된 문자가 포함된 경우  
 지정된 접두사의 형식이 잘못된 경우  
 지정된 접두사가 “xml”이고 이 노드의 namespaceURI가 “http://www.w3.org/XML/1998/namespace”와 다른 경우  
 이 노드가 특성이고, 지정된 접두사가 “xmlns”이며, 이 노드의 namespaceURI가 “http://www.w3.org/2000/xmlns/”와 다른 경우  
 이 노드가 특성이고 이 노드의 qualifiedName이 "xmlns"인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)">
      <summary>지정된 노드를 이 노드의 자식 노드 목록 앞에 추가합니다.</summary>
      <param name="newChild">추가할 노드입니다. 지정된 위치로 이동하는, 추가할 노드의 모든 콘텐츠입니다.</param>
      <returns>추가한 노드입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 노드가 <paramref name="newChild" /> 노드 형식의 자식 노드를 허용하지 않는 형식을 가지는 경우  
<paramref name="newChild" />가 이 노드의 상위 노드일 경우</exception>
      <exception cref="T:System.ArgumentException">이 노드를 만든 문서가 아닌 다른 문서에서 <paramref name="newChild" />를 만든 경우  
이 노드가 읽기 전용인 경우</exception>
    </member>
    <member name="P:System.Xml.XmlNode.PreviousSibling">
      <summary>이 노드 바로 앞에 있는 노드를 가져옵니다.</summary>
      <returns>앞에 있는 <see langword="XmlNode" />입니다. 앞에 노드가 없으면 <see langword="null" />이 반환됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.PreviousText">
      <summary>이 노드 바로 앞에 있는 텍스트 노드를 가져옵니다.</summary>
      <returns>Returns <see cref="T:System.Xml.XmlNode" />를 반환하는 경우</returns>
    </member>
    <member name="M:System.Xml.XmlNode.RemoveAll">
      <summary>현재 노드의 모든 자식 노드 및/또는 특성을 제거합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)">
      <summary>지정된 자식 노드를 제거합니다.</summary>
      <param name="oldChild">제거할 노드입니다.</param>
      <returns>제거한 노드입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldChild" />가 이 노드의 자식이 아닌 경우 이 노드가 읽기 전용인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>
        <paramref name="oldChild" /> 자식 노드를 <paramref name="newChild" /> 노드로 대체합니다.</summary>
      <param name="newChild">자식 목록에 삽입할 새 노드입니다.</param>
      <param name="oldChild">목록에서 대체할 노드입니다.</param>
      <returns>대체한 노드입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 노드가 <paramref name="newChild" /> 노드 형식의 자식 노드를 허용하지 않는 형식을 가지는 경우  
<paramref name="newChild" />가 이 노드의 상위 노드일 경우</exception>
      <exception cref="T:System.ArgumentException">이 노드를 만든 문서가 아닌 다른 문서에서 <paramref name="newChild" />를 만든 경우  
이 노드가 읽기 전용인 경우  
<paramref name="oldChild" />가 이 노드의 자식이 아닌 경우</exception>
    </member>
    <member name="P:System.Xml.XmlNode.SchemaInfo">
      <summary>스키마 유효성 검사의 결과로 이 노드에 할당된 스키마 유효성 검사 이후 정보 집합을 가져옵니다.</summary>
      <returns>이 노드의 스키마 유효성 검사 이후 정보 집합이 포함된 <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNode.SelectNodes(System.String)">
      <summary>XPath 식과 일치하는 노드의 목록을 선택합니다.</summary>
      <param name="xpath">XPath 식입니다.</param>
      <returns>Xpath 쿼리와 일치하는 노드의 컬렉션이 포함된 <see cref="T:System.Xml.XmlNodeList" />입니다.</returns>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 식에 접두사가 포함되어 있는 경우 XPath 예제를 참조하세요.</exception>
    </member>
    <member name="M:System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)">
      <summary>XPath 식과 일치하는 노드의 목록을 선택합니다. XPath 식에 있는 접두사는 제공된 <see cref="T:System.Xml.XmlNamespaceManager" />를 사용해 확인합니다.</summary>
      <param name="xpath">XPath 식입니다. XPath 예제를 참조하세요.</param>
      <param name="nsmgr">XPath 식의 접두사에 대한 네임스페이스를 확인하기 위해 사용할 <see cref="T:System.Xml.XmlNamespaceManager" />입니다.</param>
      <returns>Xpath 쿼리와 일치하는 노드의 컬렉션이 포함된 <see cref="T:System.Xml.XmlNodeList" />입니다.</returns>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 식에 <see langword="XmlNamespaceManager" />에서 정의되지 않은 접두사가 포함되어 있는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlNode.SelectSingleNode(System.String)">
      <summary>XPath 식과 일치하는 첫 번째 <see langword="XmlNode" />를 선택해야 합니다.</summary>
      <param name="xpath">XPath 식입니다. XPath 예제를 참조하세요.</param>
      <returns>XPath 쿼리와 일치하는 첫 번째 <see langword="XmlNode" />이거나, 일치하는 노드가 없는 경우에는 <see langword="null" />입니다.</returns>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 식에 접두사가 포함되어 있는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)">
      <summary>XPath 식과 일치하는 첫 번째 <see langword="XmlNode" />를 선택해야 합니다. XPath 식에 있는 접두사는 제공된 <see cref="T:System.Xml.XmlNamespaceManager" />를 사용해 확인합니다.</summary>
      <param name="xpath">XPath 식입니다. XPath 예제를 참조하세요.</param>
      <param name="nsmgr">XPath 식의 접두사에 대한 네임스페이스를 확인하기 위해 사용할 <see cref="T:System.Xml.XmlNamespaceManager" />입니다.</param>
      <returns>XPath 쿼리와 일치하는 첫 번째 <see langword="XmlNode" />이거나, 일치하는 노드가 없는 경우에는 <see langword="null" />입니다.</returns>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 식에 <see langword="XmlNamespaceManager" />에서 정의되지 않은 접두사가 포함되어 있는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlNode.Supports(System.String,System.String)">
      <summary>DOM 구현에서 특정 기능을 구현하는지 테스트합니다.</summary>
      <param name="feature">테스트할 기능의 패키지 이름입니다. 대/소문자를 구분하지 않습니다.</param>
      <param name="version">테스트할 패키지 이름의 버전 번호입니다. 버전을 지정하지 않을 경우(null), 모든 버전의 기능을 지원하면 메서드에서 true를 반환합니다.</param>
      <returns>지정된 버전에 기능이 구현되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 다음 표에서는 <see langword="true" />를 반환하는 조합을 설명합니다.  
  기능 
  버전 
  XML 
  1.0 
  XML 
  2.0</returns>
    </member>
    <member name="M:System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.XmlNode.GetEnumerator" />를 참조하세요.</summary>
      <returns>컬렉션에 대한 열거자입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNode.System#ICloneable#Clone">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.XmlNode.Clone" />를 참조하세요.</summary>
      <returns>메서드를 호출한 노드의 복사본입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Value">
      <summary>노드의 값을 가져오거나 설정합니다.</summary>
      <returns>노드의 <see cref="P:System.Xml.XmlNode.NodeType" />에 따라 반환되는 값이 달라집니다. 
  형식 
  값 
  특성 
  특성 값  
  CDATASection 
  CDATA 섹션의 콘텐츠입니다.  
  주석 
  주석의 내용입니다.  
  문서 
 <see langword="null" />.  
  DocumentFragment 
 <see langword="null" />.  
  DocumentType 
 <see langword="null" />.  
  요소 
 <see langword="null" />. <see cref="P:System.Xml.XmlElement.InnerText" /> 또는 <see cref="P:System.Xml.XmlElement.InnerXml" /> 속성을 사용하여 Element 노드의 값에 액세스할 수 있습니다.  
  엔터티 
 <see langword="null" />.  
  EntityReference 
 <see langword="null" />.  
  Notation 
 <see langword="null" />.  
  ProcessingInstruction 
  대상을 제외한 전체 콘텐츠입니다.  
  텍스트 
  텍스트 노드의 내용입니다.  
  SignificantWhitespace 
  공백 문자입니다. 공백은 하나 이상의 스페이스 문자, 캐리지 리턴, 줄 바꿈 또는 탭 등으로 구성될 수 있습니다.  
  Whitespace 
  공백 문자입니다. 공백은 하나 이상의 스페이스 문자, 캐리지 리턴, 줄 바꿈 또는 탭 등으로 구성될 수 있습니다.  
  XmlDeclaration 
  선언의 콘텐츠 (사이의 모든 것 이므로 &lt;? xml 및?&gt;).</returns>
      <exception cref="T:System.ArgumentException">읽기 전용인 노드의 값을 설정하는 경우</exception>
      <exception cref="T:System.InvalidOperationException">값이 없어야 하는 노드의 값을 설정하는 경우(예: Element 노드)</exception>
    </member>
    <member name="M:System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)">
      <summary>파생 클래스에서 재정의된 경우 노드의 모든 자식 노드를 지정된 <see cref="T:System.Xml.XmlWriter" />에 저장합니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="M:System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)">
      <summary>파생 클래스에서 재정의된 경우 현재 노드를 지정된 <see cref="T:System.Xml.XmlWriter" />에 저장합니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="T:System.Xml.XmlNodeChangedAction">
      <summary>노드 변경 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Change">
      <summary>노드 값이 변경됩니다.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Insert">
      <summary>노드가 트리에 삽입됩니다.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Remove">
      <summary>노드가 트리에서 제거됩니다.</summary>
    </member>
    <member name="T:System.Xml.XmlNodeChangedEventArgs">
      <summary>
        <see cref="E:System.Xml.XmlDocument.NodeChanged" /> , <see cref="E:System.Xml.XmlDocument.NodeChanging" /> , <see cref="E:System.Xml.XmlDocument.NodeInserted" /> , <see cref="E:System.Xml.XmlDocument.NodeInserting" /> , <see cref="E:System.Xml.XmlDocument.NodeRemoved" /> 및 <see cref="E:System.Xml.XmlDocument.NodeRemoving" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlNodeChangedEventArgs.#ctor(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String,System.Xml.XmlNodeChangedAction)">
      <summary>
        <see cref="T:System.Xml.XmlNodeChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="node">이벤트를 생성한 <see cref="T:System.Xml.XmlNode" />입니다.</param>
      <param name="oldParent">이벤트를 생성한 <see cref="T:System.Xml.XmlNode" />의 이전 부모 <see cref="T:System.Xml.XmlNode" />입니다.</param>
      <param name="newParent">이벤트를 생성한 <see cref="T:System.Xml.XmlNode" />의 새 부모 <see cref="T:System.Xml.XmlNode" />입니다.</param>
      <param name="oldValue">이벤트를 생성한 <see cref="T:System.Xml.XmlNode" />의 이전 값입니다.</param>
      <param name="newValue">이벤트를 생성한 <see cref="T:System.Xml.XmlNode" />의 새 값입니다.</param>
      <param name="action">
        <see cref="T:System.Xml.XmlNodeChangedAction" />
      </param>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.Action">
      <summary>발생할 노드 변경 이벤트 형식을 나타내는 값을 가져옵니다.</summary>
      <returns>노드 변경 이벤트를 설명 하는 열거형 값 중 하나입니다. 이벤트가 발생한 시점(전후) 사이에 <see langword="Action" /> 값이 달라지지 않습니다. 별도의 이벤트 처리기를 만들어 두 인스턴스를 모두 처리할 수 있습니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.NewParent">
      <summary>작업을 완료한 후 <see cref="P:System.Xml.XmlNode.ParentNode" />의 값을 가져옵니다.</summary>
      <returns>작업을 완료한 후 <see langword="ParentNode" />의 값입니다. 노드를 제거할 경우 이 속성에서 <see langword="null" />을 반환합니다.  
   
 Attribute 노드의 경우, 이 속성은 <see cref="P:System.Xml.XmlAttribute.OwnerElement" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.NewValue">
      <summary>노드의 새 값을 가져옵니다.</summary>
      <returns>노드의 새 값 노드가 특성이나 텍스트 노드가 아니거나, 노드가 제거되고 있는 경우에 이 속성은 <see langword="null" />을 반환합니다.  
<see cref="E:System.Xml.XmlDocument.NodeChanging" /> 이벤트에서 호출되었을 경우, 변경이 성공적이면 <see langword="NewValue" />가 노드 값을 반환합니다. <see cref="E:System.Xml.XmlDocument.NodeChanged" /> 이벤트에서 호출되었을 경우에는 <see langword="NewValue" />가 노드의 현재 값을 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.Node">
      <summary>추가, 제거 또는 변경할 <see cref="T:System.Xml.XmlNode" />를 가져옵니다.</summary>
      <returns>추가, 제거 또는 변경할 <see langword="XmlNode" />입니다. 이 속성에서는 <see langword="null" />을 반환하지 않습니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.OldParent">
      <summary>작업을 시작하기 전에 <see cref="P:System.Xml.XmlNode.ParentNode" />의 값을 가져옵니다.</summary>
      <returns>작업을 시작하기 전 <see langword="ParentNode" />의 값입니다. 노드에 부모가 없으면 이 속성은 <see langword="null" />을 반환합니다.  
   
 Attribute 노드의 경우, 이 속성은 <see cref="P:System.Xml.XmlAttribute.OwnerElement" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.OldValue">
      <summary>노드의 원래 값을 가져옵니다.</summary>
      <returns>노드의 원래 값입니다. 노드가 특성이나 텍스트 노드가 아니거나, 노드가 삽입되고 있는 경우에 이 속성은 <see langword="null" />을 반환합니다.  
<see cref="E:System.Xml.XmlDocument.NodeChanging" /> 이벤트에서 호출되었을 경우, 변경이 성공적이면 <see langword="OldValue" />가 교체될 노드의 현재 값을 반환합니다. <see cref="E:System.Xml.XmlDocument.NodeChanged" /> 이벤트에서 호출되었을 경우에는 <see langword="OldValue" />가 변경 전 노드 값을 반환합니다.</returns>
    </member>
    <member name="T:System.Xml.XmlNodeChangedEventHandler">
      <summary>
        <see cref="E:System.Xml.XmlDocument.NodeChanged" /> , <see cref="E:System.Xml.XmlDocument.NodeChanging" /> , <see cref="E:System.Xml.XmlDocument.NodeInserted" /> , <see cref="E:System.Xml.XmlDocument.NodeInserting" /> , <see cref="E:System.Xml.XmlDocument.NodeRemoved" /> 및 <see cref="E:System.Xml.XmlDocument.NodeRemoving" /> 이벤트를 처리하는 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터가 포함된 <see cref="T:System.Xml.XmlNodeChangedEventArgs" />입니다.</param>
    </member>
    <member name="T:System.Xml.XmlNodeList">
      <summary>노드의 정렬된 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.XmlNodeList.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlNodeList" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.XmlNodeList.Count">
      <summary>
        <see langword="XmlNodeList" />의 노드 수를 가져옵니다.</summary>
      <returns>
        <see langword="XmlNodeList" />의 노드 수입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeList.GetEnumerator">
      <summary>노드의 컬렉션을 반복하는 열거자를 가져옵니다.</summary>
      <returns>노드의 컬렉션 전체에서 반복하는 데 사용되는 열거자입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeList.Item(System.Int32)">
      <summary>특정 인덱스에서 노드를 검색합니다.</summary>
      <param name="index">노드 목록에 대한 0부터 시작하는 인덱스입니다.</param>
      <returns>컬렉션에서 지정된 인덱스의 <see cref="T:System.Xml.XmlNode" />입니다. <paramref name="index" />가 목록의 노드 수보다 크거나 같은 경우 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeList.ItemOf(System.Int32)">
      <summary>특정 인덱스에서 노드를 가져옵니다.</summary>
      <param name="i">노드 목록에 대한 0부터 시작하는 인덱스입니다.</param>
      <returns>컬렉션에서 지정된 인덱스의 <see cref="T:System.Xml.XmlNode" />입니다. 인덱스가 목록의 노드 수보다 크거나 같은 경우 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeList.PrivateDisposeNodeList">
      <summary>노드 목록에서 개인적으로 리소스를 삭제합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlNodeList.System#IDisposable#Dispose">
      <summary>
        <see cref="T:System.Xml.XmlNodeList" /> 클래스에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="T:System.Xml.XmlNodeOrder">
      <summary>두 번째 노드와 비교하여 노드의 문서 순서를 설명합니다.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.After">
      <summary>이 검색기의 현재 노드는 제공된 검색기의 현재 노드 다음에 있습니다.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Before">
      <summary>이 검색기의 현재 노드는 제공된 검색기의 현재 노드 전에 있습니다.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Same">
      <summary>두 검색기가 같은 노드에 있습니다.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Unknown">
      <summary>다른 노드에 상대적인 문서 순서로 노드 위치를 확인할 수 없습니다. 두 노드가 서로 다른 트리에 상주할 경우에 이런 일이 발생할 수 있습니다.</summary>
    </member>
    <member name="T:System.Xml.XmlNodeReader">
      <summary>
        <see cref="T:System.Xml.XmlNode" />의 XML 데이터에 대한 빠르고 캐시되지 않은 전방 액세스만 제공하는 판독기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.#ctor(System.Xml.XmlNode)">
      <summary>지정된 <see cref="T:System.Xml.XmlNode" />를 사용하여 <see langword="XmlNodeReader" /> 클래스의 인스턴스를 만듭니다.</summary>
      <param name="node">읽으려는 <see langword="XmlNode" />입니다.</param>
    </member>
    <member name="P:System.Xml.XmlNodeReader.AttributeCount">
      <summary>현재 노드의 특성 수를 가져옵니다.</summary>
      <returns>현재 노드에 포함된 특성의 수입니다. 이 수에는 기본 특성이 포함됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.BaseURI">
      <summary>현재 노드의 기본 URI를 가져옵니다.</summary>
      <returns>현재 노드의 기본 URI입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.CanReadBinaryContent">
      <summary>
        <see cref="T:System.Xml.XmlNodeReader" />가 이진 콘텐츠 읽기 메서드를 구현하는지를 나타내는 값을 가져옵니다.</summary>
      <returns>이진 콘텐츠 읽기 메서드를 구현하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see cref="T:System.Xml.XmlNodeReader" /> 클래스는 항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.CanResolveEntity">
      <summary>이 판독기가 엔터티를 구문 분석하고 확인할 수 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>판독기가 엔터티를 구문 분석하고 확인할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see langword="XmlNodeReader" />는 항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Close">
      <summary>
        <see cref="P:System.Xml.XmlNodeReader.ReadState" />를 <see langword="Closed" />로 변경합니다.</summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Depth">
      <summary>XML 문서에서 현재 노드의 수준을 가져옵니다.</summary>
      <returns>XML 문서의 현재 노드 수준입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.EOF">
      <summary>판독기가 스트림의 맨 끝에 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>판독기가 스트림의 맨 끝에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.Int32)">
      <summary>지정된 인덱스가 있는 특성의 값을 가져옵니다.</summary>
      <param name="attributeIndex">특성의 인덱스입니다. 인덱스는 0부터 시작합니다. 첫 번째 특성의 인덱스는 0입니다.</param>
      <returns>지정된 특성의 값을 반환합니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 매개 변수가 0보다 작거나 <see cref="P:System.Xml.XmlNodeReader.AttributeCount" />보다 크거나 같은 경우</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.String)">
      <summary>지정된 이름이 있는 특성의 값을 가져옵니다.</summary>
      <param name="name">특성의 정규화된 이름입니다.</param>
      <returns>지정된 특성의 값을 반환합니다. 특성이 없으면 <see langword="null" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.String,System.String)">
      <summary>지정된 로컬 이름과 네임스페이스 URI가 있는 특성의 값을 가져옵니다.</summary>
      <param name="name">특성의 로컬 이름입니다.</param>
      <param name="namespaceURI">특성의 네임스페이스 URI입니다.</param>
      <returns>지정된 특성의 값을 반환합니다. 특성이 없으면 <see langword="null" />이 반환됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.HasAttributes">
      <summary>현재 노드에 특성이 있는지를 나타내는 값을 얻습니다.</summary>
      <returns>현재 노드에 특성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.HasValue">
      <summary>현재 노드에 <see cref="P:System.Xml.XmlNodeReader.Value" />가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 판독기가 위치한 노드에 <see langword="Value" />가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.IsDefault">
      <summary>현재 노드가 DTD(문서 종류 정의) 또는 스키마에서 정의한 기본값에서 생성된 특성인지를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 노드가 DTD나 스키마에서 정의한 기본값에서 생성된 값을 가진 특성이면 <see langword="true" />이고, 특성 값이 명시적으로 설정되었으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.IsEmptyElement">
      <summary>현재 노드가 빈 요소(예: <c>&lt;MyElement/&gt;</c>)인지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" /> 현재 노드가 요소 이면 (<see cref="P:System.Xml.XmlNodeReader.NodeType" /> equals <see langword="XmlNodeType.Element" />) 및 끝나는 <c>/ &gt;</c>고, 그렇지 않으면 <see langword="false" />합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.LocalName">
      <summary>현재 노드의 로컬 이름을 가져옵니다.</summary>
      <returns>접두사를 제거한 현재 노드의 이름입니다. 예를 들어 <see langword="LocalName" /> 됩니다 <see langword="book" /> 요소에 대 한 <c>&lt;예&gt;</c>합니다.  
이름이 없는 노드 형식(예: <see langword="Text" />, <see langword="Comment" /> 등)의 경우, 이 속성은 String.Empty를 반환합니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.LookupNamespace(System.String)">
      <summary>현재 요소의 범위에서 네임스페이스 접두사를 확인합니다.</summary>
      <param name="prefix">확인할 네임스페이스 URI의 접두사입니다. 기본 네임스페이스와 일치시키려면 빈 문자열을 전달합니다. 이 문자열은 원자화할 필요가 없습니다.</param>
      <returns>접두사가 매핑되는 네임스페이스 URI이거나 일치하는 접두사가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.Int32)">
      <summary>지정된 인덱스가 있는 특성으로 이동합니다.</summary>
      <param name="attributeIndex">특성의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 매개 변수가 0보다 작거나 <see cref="P:System.Xml.XmlReader.AttributeCount" />보다 크거나 같은 경우</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.String)">
      <summary>지정된 이름이 있는 특성으로 이동합니다.</summary>
      <param name="name">특성의 정규화된 이름입니다.</param>
      <returns>특성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see langword="false" />이면, 판독기의 위치는 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.String,System.String)">
      <summary>지정된 로컬 이름과 네임스페이스 URI가 있는 특성으로 이동합니다.</summary>
      <param name="name">특성의 로컬 이름입니다.</param>
      <param name="namespaceURI">특성의 네임스페이스 URI입니다.</param>
      <returns>특성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see langword="false" />이면, 판독기의 위치는 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToElement">
      <summary>현재 특성 노드가 포함된 요소로 이동합니다.</summary>
      <returns>판독기가 특성에 있으면(특성이 있는 요소로 판독기가 이동하면) <see langword="true" />이고, 판독기가 특성에 없으면(판독기의 위치가 바뀌지 않으면) <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToFirstAttribute">
      <summary>첫 번째 특성으로 이동합니다.</summary>
      <returns>특성이 있으면(판독기가 첫 번째 특성으로 이동하면) <see langword="true" />이고, 그렇지 않으면(판독기의 위치가 바뀌지 않으면) <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToNextAttribute">
      <summary>다음 특성으로 이동합니다.</summary>
      <returns>다음 특성이 있으면 <see langword="true" />이고, 더 이상 특성이 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Name">
      <summary>현재 노드의 정규화된 이름을 가져옵니다.</summary>
      <returns>현재 노드의 정규화된 이름입니다. 예를 들어 <see langword="Name" /> 됩니다 <see langword="bk:book" /> 요소에 대 한 <c>&lt;예&gt;</c>합니다.  
반환되는 이름은 다음과 같이 노드의 <see cref="P:System.Xml.XmlNodeReader.NodeType" />에 따라 달라집니다. 다음 노드 형식은 나열된 값을 반환합니다. 기타 모든 노드 형식은 빈 문자열을 반환합니다.  
  노드 형식 
  name 
 <see langword="Attribute" /> 특성 이름입니다.  

 <see langword="DocumentType" /> 문서 형식 이름입니다.  

 <see langword="Element" /> 태그 이름입니다.  

 <see langword="EntityReference" /> 참조된 엔터티의 이름입니다.  

 <see langword="ProcessingInstruction" /> 처리 명령의 대상입니다.  

 <see langword="XmlDeclaration" /> 리터럴 문자열 <see langword="xml" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NamespaceURI">
      <summary>W3C 네임스페이스 사양에서 정의된 것처럼 판독기가 있는 노드의 네임스페이스 URI를 가져옵니다.</summary>
      <returns>현재 노드의 네임스페이스 URI이거나 빈 문자열입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NameTable">
      <summary>이 구현과 관련된 <see cref="T:System.Xml.XmlNameTable" />을 가져옵니다.</summary>
      <returns>노드 내에 있는 문자열의 원자화된 버전을 가져올 수 있도록 하는 <see langword="XmlNameTable" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NodeType">
      <summary>현재 노드의 형식을 가져옵니다.</summary>
      <returns>현재 노드의 형식을 나타내는 <see cref="T:System.Xml.XmlNodeType" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Prefix">
      <summary>현재 노드와 관련된 네임스페이스 접두사를 가져옵니다.</summary>
      <returns>현재 노드와 관련된 네임스페이스 접두사입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Read">
      <summary>스트림에서 다음 노드를 읽습니다.</summary>
      <returns>다음 노드를 읽었으면 <see langword="true" />이고, 더 이상 읽을 노드가 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadAttributeValue">
      <summary>특성 값을 하나 이상의 <see langword="Text" />, <see langword="EntityReference" /> 또는 <see langword="EndEntity" /> 노드로 구문 분석합니다.</summary>
      <returns>반환할 노드가 있는 경우 <see langword="true" />입니다.  
 처음 호출할 때 판독기가 특성 노드에 있거나 모든 특성 값을 읽은 경우 <see langword="false" />입니다.  
<c>misc=""</c>와 같은 빈 특성은 <see langword="true" />를 반환하며 이것은 단일 노드가 String.Empty의 값을 갖는 것을 의미합니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>콘텐츠를 읽고 Base64 디코딩된 이진 바이트를 반환합니다.</summary>
      <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
      <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
      <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
      <returns>버퍼에 쓴 바이트 수입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlNodeReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />가 현재 노드에서 지원되지 않습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>내용을 읽고 BinHex 디코딩된 이진 바이트를 반환합니다.</summary>
      <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
      <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
      <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
      <returns>버퍼에 쓴 바이트 수입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlNodeReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />가 현재 노드에서 지원되지 않습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>요소를 읽고 Base64 콘텐츠를 디코딩합니다.</summary>
      <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
      <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
      <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
      <returns>버퍼에 쓴 바이트 수입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">현재 노드가 요소 노드가 아닌 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</exception>
      <exception cref="T:System.Xml.XmlException">요소가 혼합된 내용을 포함합니다.</exception>
      <exception cref="T:System.FormatException">요소를 요청한 형식으로 변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>요소를 읽고 BinHex 콘텐츠를 디코딩합니다.</summary>
      <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
      <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
      <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
      <returns>버퍼에 쓴 바이트 수입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">현재 노드가 요소 노드가 아닌 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</exception>
      <exception cref="T:System.Xml.XmlException">요소가 혼합된 내용을 포함합니다.</exception>
      <exception cref="T:System.FormatException">요소를 요청한 형식으로 변환할 수 없는 경우</exception>
    </member>
    <member name="P:System.Xml.XmlNodeReader.ReadState">
      <summary>판독기의 상태를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.ReadState" /> 값 중 하나입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadString">
      <summary>요소 또는 텍스트 노드의 내용을 문자열로 읽습니다.</summary>
      <returns>element나 text와 유사한 노드(CDATA, Text 노드 등)의 내용입니다. 판독기가 요소 또는 텍스트 노드 이외의 위치에 있거나 현재 컨텍스트에 반환할 텍스트 콘텐츠가 없는 경우 이것은 빈 문자열입니다.  
 <see langword="Note:" /> 텍스트 노드는 요소 또는 특성 텍스트 노드입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ResolveEntity">
      <summary>
        <see langword="EntityReference" /> 노드에 대해 엔터티 참조를 확인합니다.</summary>
      <exception cref="T:System.InvalidOperationException">판독기가 <see langword="EntityReference" /> 노드에 배치되지 않은 경우</exception>
    </member>
    <member name="P:System.Xml.XmlNodeReader.SchemaInfo">
      <summary>현재 노드에 할당된 스키마 정보를 가져옵니다.</summary>
      <returns>현재 노드에 대한 스키마 정보를 포함하는 <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Skip">
      <summary>현재 노드의 자식을 건너뜁니다.</summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />를 참조하세요.</summary>
      <param name="scope">
        <see cref="T:System.Xml.XmlNamespaceScope" /> 개체</param>
      <returns>범위에 있는 네임스페이스가 포함된 <see cref="T:System.Collections.IDictionary" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />를 참조하세요.</summary>
      <param name="prefix">네임스페이스 접두사가 포함된 <see cref="T:System.String" />입니다.</param>
      <returns>네임스페이스 이름이 포함된 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />를 참조하세요.</summary>
      <param name="namespaceName">네임스페이스를 식별하는 <see cref="T:System.String" />개체입니다.</param>
      <returns>네임스페이스 접두사가 포함된 <see cref="T:System.String" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Value">
      <summary>현재 노드의 텍스트 값을 가져옵니다.</summary>
      <returns>노드의 <see cref="P:System.Xml.XmlNodeReader.NodeType" />에 따라 반환되는 값이 달라집니다. 다음 표에서는 반환할 값이 있는 노드 형식을 보여 줍니다. 다른 모든 노드 형식은 String.Empty를 반환합니다.  
  노드 형식 
  값 
 <see langword="Attribute" /> 특성 값  

 <see langword="CDATA" /> CDATA 섹션 내용입니다.  

 <see langword="Comment" /> 주석의 내용입니다.  

 <see langword="DocumentType" /> 내부 하위 집합입니다.  

 <see langword="ProcessingInstruction" /> 대상을 제외한 전체 내용입니다.  

 <see langword="SignificantWhitespace" /> 혼합된 콘텐츠 모델의 태그 간 공백입니다.  

 <see langword="Text" /> 텍스트 노드의 내용입니다.  

 <see langword="Whitespace" /> 태그 사이의 공백입니다.  

 <see langword="XmlDeclaration" /> 선언 내용입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.XmlLang">
      <summary>현재 <see langword="xml:lang" /> 범위를 가져옵니다.</summary>
      <returns>현재 <see langword="xml:lang" /> 범위입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.XmlSpace">
      <summary>현재 <see langword="xml:space" /> 범위를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.XmlSpace" /> 값 중 하나입니다. <see langword="xml:space" /> 범위가 존재하지 않으면 이 속성은 기본적으로 <see langword="XmlSpace.None" />으로 설정됩니다.</returns>
    </member>
    <member name="T:System.Xml.XmlNodeType">
      <summary>노드 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Attribute">
      <summary>특성입니다(예를 들어, <c>id='123'</c>).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.CDATA">
      <summary>CDATA 섹션입니다(예를 들어, <c>&lt;![CDATA[my escaped text]]&gt;</c>).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Comment">
      <summary>주석입니다(예를 들어, <c>&lt;!-- my comment --&gt;</c>).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Document">
      <summary>문서 트리의 루트인 문서 개체를 사용하여 전체 XML 문서에 액세스할 수 있습니다.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentFragment">
      <summary>문서 단편입니다.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentType">
      <summary>다음 태그를 사용한 문서 형식 선언입니다(예를 들어, <c>&lt;!DOCTYPE...&gt;</c>).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Element">
      <summary>요소입니다(예를 들어, <c>&lt;item&gt;</c>).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndElement">
      <summary>끝 요소 태그입니다(예를 들어, <c>&lt;/item&gt;</c>).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndEntity">
      <summary>
        <see cref="M:System.Xml.XmlReader.ResolveEntity" />의 호출 결과 <see langword="XmlReader" />가 대체 엔터티 끝에 도달했을 때 반환됩니다.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Entity">
      <summary>엔터티 선업입니다(예를 들어, <c>&lt;!ENTITY...&gt;</c>).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EntityReference">
      <summary>엔터티 참조입니다(예를 들어, <c>&amp;num;</c>).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.None">
      <summary>
        <see langword="Read" /> 메서드가 호출되지 않은 경우 <see cref="T:System.Xml.XmlReader" />에 의해 반환됩니다.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Notation">
      <summary>문서 형식 선언 표기법입니다(예를 들어, <c>&lt;!NOTATION...&gt;</c>).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.ProcessingInstruction">
      <summary>처리 명령입니다(예를 들어, <c>&lt;?pi test?&gt;</c>).</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.SignificantWhitespace">
      <summary>복합 콘텐츠 모델에서 태그들 사이의 공백 또는 <c>xml:space="preserve"</c> 범위 내의 공백입니다.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Text">
      <summary>노드의 텍스트 내용입니다.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Whitespace">
      <summary>태그들 사이의 공백입니다.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.XmlDeclaration">
      <summary>XML 선언입니다(예를 들어, <c>&lt;?xml version='1.0'?&gt;</c>).</summary>
    </member>
    <member name="T:System.Xml.XmlNotation">
      <summary>표기법 선언을 나타냅니다(예를 들어, &lt;!NOTATION... &gt;).</summary>
    </member>
    <member name="M:System.Xml.XmlNotation.CloneNode(System.Boolean)">
      <summary>이 노드의 복제본을 만듭니다. notation 노드는 복제할 수 없습니다. <see cref="T:System.Xml.XmlNotation" /> 개체에서 이 메서드를 호출하면 예외가 throw됩니다.</summary>
      <param name="deep">지정된 노드 아래의 하위 트리를 재귀적으로 복제하려면 <see langword="true" />이고, 노드 자체만 복제하려면 <see langword="false" />입니다.</param>
      <returns>메서드를 호출한 노드의 <see cref="T:System.Xml.XmlNode" /> 복사본입니다.</returns>
      <exception cref="T:System.InvalidOperationException">notation 노드는 복제할 수 없습니다. <see cref="T:System.Xml.XmlNotation" /> 개체에서 이 메서드를 호출하면 예외가 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlNotation.InnerXml">
      <summary>이 노드의 자식을 나타내는 태그를 가져옵니다.</summary>
      <returns>
        <see langword="XmlNotation" /> 노드의 경우 String.Empty가 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">속성을 설정하려고 시도한 경우</exception>
    </member>
    <member name="P:System.Xml.XmlNotation.IsReadOnly">
      <summary>노드가 읽기 전용인지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />노드가 읽기 전용 이면이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" />입니다.  
<see langword="XmlNotation" /> 노드가 읽기 전용이므로 이 속성은 항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.LocalName">
      <summary>네임스페이스 접두사 없이 현재 노드의 이름을 가져옵니다.</summary>
      <returns>
        <see langword="XmlNotation" /> 노드의 경우 이 속성이 주석의 이름을 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.Name">
      <summary>현재 노드의 이름을 가져옵니다.</summary>
      <returns>주석의 이름입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.NodeType">
      <summary>현재 노드의 형식을 가져옵니다.</summary>
      <returns>노드 형식입니다. <see langword="XmlNotation" /> 노드의 경우 이 값은 XmlNodeType.Notation입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.OuterXml">
      <summary>이 노드와 이 노드의 모든 자식을 나타내는 태그를 가져옵니다.</summary>
      <returns>
        <see langword="XmlNotation" /> 노드의 경우 String.Empty가 반환됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.PublicId">
      <summary>주석 선언에 대한 공용 식별자의 값을 가져옵니다.</summary>
      <returns>주석에 대한 공용 식별자입니다. 공용 식별자가 없으면 <see langword="null" />이 반환됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.SystemId">
      <summary>주석 선언에 대한 시스템 식별자의 값을 가져옵니다.</summary>
      <returns>주석에 대한 시스템 식별자입니다. 시스템 식별자가 없으면 <see langword="null" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Xml.XmlNotation.WriteContentTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드의 자식을 저장합니다. 이 메서드는 <see langword="XmlNotation" /> 노드에 영향을 주지 않습니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="M:System.Xml.XmlNotation.WriteTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드를 저장합니다. 이 메서드는 <see langword="XmlNotation" /> 노드에 영향을 주지 않습니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="T:System.Xml.XmlOutputMethod">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> 출력을 serialize하는 데 사용되는 메서드를 지정합니다.</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.AutoDetect">
      <summary>XSLT 규칙을 사용하여 런타임에 <see cref="F:System.Xml.XmlOutputMethod.Xml" /> 및 <see cref="F:System.Xml.XmlOutputMethod.Html" /> 출력 메서드 중에서 선택합니다.</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Html">
      <summary>XSLT에 지정된 HTML 규칙에 따라 serialize합니다.</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Text">
      <summary>텍스트 블록만 serialize합니다.</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Xml">
      <summary>XML 1.0 규칙에 따라 serialize합니다.</summary>
    </member>
    <member name="T:System.Xml.XmlParserContext">
      <summary>
        <see cref="T:System.Xml.XmlReader" />에서 XML 조각을 구문 분석할 때 필요한 모든 컨텍스트 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace)">
      <summary>지정된 <see cref="T:System.Xml.XmlNameTable" />, <see cref="T:System.Xml.XmlNamespaceManager" />, 기본 URI, <see langword="XmlParserContext" />, <see langword="xml:lang" /> 및 문서 형식 값을 사용하여 <see langword="xml:space" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="nt">문자열을 원자화하는 데 사용할 <see cref="T:System.Xml.XmlNameTable" />입니다. <see langword="null" />인 경우 <paramref name="nsMgr" />을 생성할 때 사용한 이름 테이블이 대신 사용됩니다. 원자화된 문자열에 대한 자세한 내용은 <see cref="T:System.Xml.XmlNameTable" />을 참조하십시오.</param>
      <param name="nsMgr">네임스페이스 정보를 찾는 데 사용할 <see cref="T:System.Xml.XmlNamespaceManager" /> 또는 <see langword="null" />입니다.</param>
      <param name="docTypeName">문서 형식 선언의 이름입니다.</param>
      <param name="pubId">public 식별자입니다.</param>
      <param name="sysId">시스템 식별자입니다.</param>
      <param name="internalSubset">내부 DTD 하위집합입니다. DTD 하위 집합은 개체 확인에 사용되며 문서 유효성 검사에는 사용되지 않습니다.</param>
      <param name="baseURI">XML 조각의 기본 URI(로드된 조각이 저장된 위치)입니다.</param>
      <param name="xmlLang">
        <see langword="xml:lang" /> 범위입니다.</param>
      <param name="xmlSpace">
        <see langword="xml:space" /> 범위를 나타내는 <see cref="T:System.Xml.XmlSpace" /> 값입니다.</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" />가 <paramref name="nsMgr" />을 만드는 데 사용한 <see langword="XmlNameTable" />과 다른 경우</exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary>지정된 <see cref="T:System.Xml.XmlNameTable" />, <see cref="T:System.Xml.XmlNamespaceManager" />, 기본 URI, <see langword="XmlParserContext" />, <see langword="xml:lang" />, 인코딩 및 문서 형식 값을 사용하여 <see langword="xml:space" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="nt">문자열을 원자화하는 데 사용할 <see cref="T:System.Xml.XmlNameTable" />입니다. <see langword="null" />인 경우 <paramref name="nsMgr" />을 생성할 때 사용한 이름 테이블이 대신 사용됩니다. 원자화된 문자열에 대한 자세한 내용은 <see cref="T:System.Xml.XmlNameTable" />을 참조하십시오.</param>
      <param name="nsMgr">네임스페이스 정보를 찾는 데 사용할 <see cref="T:System.Xml.XmlNamespaceManager" /> 또는 <see langword="null" />입니다.</param>
      <param name="docTypeName">문서 형식 선언의 이름입니다.</param>
      <param name="pubId">public 식별자입니다.</param>
      <param name="sysId">시스템 식별자입니다.</param>
      <param name="internalSubset">내부 DTD 하위집합입니다. DTD는 개체 확인에 사용되며 문서 유효성 검사에는 사용되지 않습니다.</param>
      <param name="baseURI">XML 조각의 기본 URI(로드된 조각이 저장된 위치)입니다.</param>
      <param name="xmlLang">
        <see langword="xml:lang" /> 범위입니다.</param>
      <param name="xmlSpace">
        <see langword="xml:space" /> 범위를 나타내는 <see cref="T:System.Xml.XmlSpace" /> 값입니다.</param>
      <param name="enc">인코딩 설정을 표시하는 <see cref="T:System.Text.Encoding" /> 개체입니다.</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" />가 <paramref name="nsMgr" />을 만드는 데 사용한 <see langword="XmlNameTable" />과 다른 경우</exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace)">
      <summary>지정된 <see langword="XmlParserContext" />, <see cref="T:System.Xml.XmlNameTable" />, <see cref="T:System.Xml.XmlNamespaceManager" /> 및 <see langword="xml:lang" /> 값을 사용하여 <see langword="xml:space" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="nt">문자열을 원자화하는 데 사용할 <see cref="T:System.Xml.XmlNameTable" />입니다. <see langword="null" />인 경우 <paramref name="nsMgr" />을 생성할 때 사용한 이름 테이블이 대신 사용됩니다. 원자화된 문자열에 대한 자세한 내용은 <see cref="T:System.Xml.XmlNameTable" />을 참조하십시오.</param>
      <param name="nsMgr">네임스페이스 정보를 찾는 데 사용할 <see cref="T:System.Xml.XmlNamespaceManager" /> 또는 <see langword="null" />입니다.</param>
      <param name="xmlLang">
        <see langword="xml:lang" /> 범위입니다.</param>
      <param name="xmlSpace">
        <see langword="xml:space" /> 범위를 나타내는 <see cref="T:System.Xml.XmlSpace" /> 값입니다.</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" />가 <paramref name="nsMgr" />을 만드는 데 사용한 <see langword="XmlNameTable" />과 다른 경우</exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary>지정된 <see cref="T:System.Xml.XmlNameTable" />, <see cref="T:System.Xml.XmlNamespaceManager" />, <see langword="XmlParserContext" />, <see langword="xml:lang" /> 및 인코딩을 사용하여 <see langword="xml:space" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="nt">문자열을 원자화하는 데 사용할 <see cref="T:System.Xml.XmlNameTable" />입니다. <see langword="null" />인 경우 <paramref name="nsMgr" />을 생성할 때 사용한 이름 테이블이 대신 사용됩니다. 원자화된 문자열에 대한 자세한 내용은 <see cref="T:System.Xml.XmlNameTable" />을 참조하십시오.</param>
      <param name="nsMgr">네임스페이스 정보를 찾는 데 사용할 <see cref="T:System.Xml.XmlNamespaceManager" /> 또는 <see langword="null" />입니다.</param>
      <param name="xmlLang">
        <see langword="xml:lang" /> 범위입니다.</param>
      <param name="xmlSpace">
        <see langword="xml:space" /> 범위를 나타내는 <see cref="T:System.Xml.XmlSpace" /> 값입니다.</param>
      <param name="enc">인코딩 설정을 표시하는 <see cref="T:System.Text.Encoding" /> 개체입니다.</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" />가 <paramref name="nsMgr" />을 만드는 데 사용한 <see langword="XmlNameTable" />과 다른 경우</exception>
    </member>
    <member name="P:System.Xml.XmlParserContext.BaseURI">
      <summary>기본URI를 가져오거나 설정합니다.</summary>
      <returns>DTD 파일 확인에 사용할 기본 URI입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.DocTypeName">
      <summary>문서 형식 선언의 이름을 가져오거나 설정합니다.</summary>
      <returns>문서 형식 선언의 이름입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.Encoding">
      <summary>인코딩 형식을 가져오거나 설정합니다.</summary>
      <returns>인코딩 형식을 나타내는 <see cref="T:System.Text.Encoding" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.InternalSubset">
      <summary>내부 DTD 하위 집합을 가져오거나 설정합니다.</summary>
      <returns>내부 DTD 하위집합입니다. 예를 들어이 속성은 대괄호 사이 <c>&lt;! DOCTYPE doc [...] &gt;</c>.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.NamespaceManager">
      <summary>
        <see cref="T:System.Xml.XmlNamespaceManager" />를 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="XmlNamespaceManager" />
      </returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.NameTable">
      <summary>문자열을 원자화할 때 사용하는 <see cref="T:System.Xml.XmlNameTable" />을 가져옵니다. 원자화된 문자열에 대한 자세한 내용은 <see cref="T:System.Xml.XmlNameTable" />을 참조하십시오.</summary>
      <returns>
        <see langword="XmlNameTable" />
      </returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.PublicId">
      <summary>public 식별자를 가져오거나 설정합니다.</summary>
      <returns>public 식별자입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.SystemId">
      <summary>시스템 식별자를 가져오거나 설정합니다.</summary>
      <returns>시스템 식별자입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlLang">
      <summary>현재 <see langword="xml:lang" /> 범위를 가져오거나 설정합니다.</summary>
      <returns>현재 <see langword="xml:lang" /> 범위입니다. 범위에 <see langword="xml:lang" />이 없으면 <see langword="String.Empty" />가 반환됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlSpace">
      <summary>현재 <see langword="xml:space" /> 범위를 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="xml:space" /> 범위를 나타내는 <see cref="T:System.Xml.XmlSpace" /> 값입니다.</returns>
    </member>
    <member name="T:System.Xml.XmlProcessingInstruction">
      <summary>문서의 텍스트에 있는 프로세스 관련 정보를 유지하기 위해 정의된 XML 처리 명령을 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.#ctor(System.String,System.String,System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlProcessingInstruction" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="target">처리 명령의 대상입니다. <see cref="P:System.Xml.XmlProcessingInstruction.Target" /> 속성을 참조하십시오.</param>
      <param name="data">처리 명령의 내용입니다. <see cref="P:System.Xml.XmlProcessingInstruction.Data" /> 속성을 참조하십시오.</param>
      <param name="doc">부모 XML 문서입니다.</param>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.CloneNode(System.Boolean)">
      <summary>이 노드의 복제본을 만듭니다.</summary>
      <param name="deep">지정된 노드 아래의 하위 트리를 재귀적으로 복제하려면 <see langword="true" />이고, 노드 자체만 복제하려면 <see langword="false" />입니다.</param>
      <returns>복제 노드입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Data">
      <summary>처리 명령의 내용을 가져오거나 설정합니다. 처리 명령의 대상은 제외됩니다.</summary>
      <returns>처리 명령의 대상을 제외한 처리 명령의 내용입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.InnerText">
      <summary>노드와 모든 자식의 연결된 값을 가져오거나 설정합니다.</summary>
      <returns>노드와 모든 자식의 연결된 값입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.LocalName">
      <summary>노드의 로컬 이름을 가져옵니다.</summary>
      <returns>processinginstruction 노드의 경우, 이 속성은 처리 명령의 대상을 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Name">
      <summary>노드의 정규화된 이름을 가져옵니다.</summary>
      <returns>processinginstruction 노드의 경우, 이 속성은 처리 명령의 대상을 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.NodeType">
      <summary>현재 노드의 형식을 가져옵니다.</summary>
      <returns>
        <see langword="XmlProcessingInstruction" /> 노드인 경우 이 값은  XmlNodeType.ProcessingInstruction입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Target">
      <summary>처리 명령의 대상을 가져옵니다.</summary>
      <returns>처리 명령의 대상입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Value">
      <summary>노드의 값을 가져오거나 설정합니다.</summary>
      <returns>처리 명령의 대상을 제외한 처리 명령의 전체 내용입니다.</returns>
      <exception cref="T:System.ArgumentException">노드가 읽기 전용인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.WriteContentTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드의 모든 자식을 저장합니다. ProcessingInstruction 노드는 자식을 가지지 않습니다. 따라서 이 메서드에서는 아무 작업도 수행되지 않습니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.WriteTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드를 저장합니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="T:System.Xml.XmlQualifiedName">
      <summary>정규화된 XML 이름을 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlQualifiedName" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String)">
      <summary>지정된 이름을 사용하여 <see cref="T:System.Xml.XmlQualifiedName" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">
        <see cref="T:System.Xml.XmlQualifiedName" /> 개체의 이름으로 사용할 로컬 이름입니다.</param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String,System.String)">
      <summary>지정된 이름과 네임스페이스를 사용하여 <see cref="T:System.Xml.XmlQualifiedName" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">
        <see cref="T:System.Xml.XmlQualifiedName" /> 개체의 이름으로 사용할 로컬 이름입니다.</param>
      <param name="ns">
        <see cref="T:System.Xml.XmlQualifiedName" /> 개체의 네임스페이스입니다.</param>
    </member>
    <member name="F:System.Xml.XmlQualifiedName.Empty">
      <summary>빈 <see cref="T:System.Xml.XmlQualifiedName" />을 제공합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.Equals(System.Object)">
      <summary>지정된 <see cref="T:System.Xml.XmlQualifiedName" /> 개체가 현재 <see cref="T:System.Xml.XmlQualifiedName" /> 개체와 같은지 여부를 확인합니다.</summary>
      <param name="other">비교할 <see cref="T:System.Xml.XmlQualifiedName" />입니다.</param>
      <returns>두 개체가 같은 인스턴스 개체이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.GetHashCode">
      <summary>
        <see cref="T:System.Xml.XmlQualifiedName" />에 대한 해시 코드를 반환합니다.</summary>
      <returns>이 개체에 대한 해시 코드입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.IsEmpty">
      <summary>
        <see cref="T:System.Xml.XmlQualifiedName" />가 비어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이름과 네임스페이스가 빈 문자열이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Name">
      <summary>
        <see cref="T:System.Xml.XmlQualifiedName" />의 정규화된 이름에 대한 문자열 표현을 가져옵니다.</summary>
      <returns>정규화된 이름의 문자열 표현이거나, 개체에 정의된 이름이 없는 경우 String.Empty입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Namespace">
      <summary>
        <see cref="T:System.Xml.XmlQualifiedName" />의 네임스페이스에 대한 문자열 표현을 가져옵니다.</summary>
      <returns>네임스페이스의 문자열 표현이거나, 개체에 정의된 네임스페이스가 없는 경우 String.Empty입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>두 <see cref="T:System.Xml.XmlQualifiedName" /> 개체를 비교합니다.</summary>
      <param name="a">비교할 <see cref="T:System.Xml.XmlQualifiedName" />입니다.</param>
      <param name="b">비교할 <see cref="T:System.Xml.XmlQualifiedName" />입니다.</param>
      <returns>두 개체의 이름과 네임스페이스 값이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>두 <see cref="T:System.Xml.XmlQualifiedName" /> 개체를 비교합니다.</summary>
      <param name="a">비교할 <see cref="T:System.Xml.XmlQualifiedName" />입니다.</param>
      <param name="b">비교할 <see cref="T:System.Xml.XmlQualifiedName" />입니다.</param>
      <returns>두 개체의 이름과 네임스페이스 값이 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString">
      <summary>
        <see cref="T:System.Xml.XmlQualifiedName" />의 문자열 값을 반환합니다.</summary>
      <returns>
        <see langword="namespace:localname" /> 형식의 <see cref="T:System.Xml.XmlQualifiedName" /> 문자열 값입니다. 개체에 정의된 네임스페이스가 없으면 이 메서드는 로컬 이름만 반환합니다.</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString(System.String,System.String)">
      <summary>
        <see cref="T:System.Xml.XmlQualifiedName" />의 문자열 값을 반환합니다.</summary>
      <param name="name">개체의 이름입니다.</param>
      <param name="ns">개체의 네임스페이스입니다.</param>
      <returns>
        <see langword="namespace:localname" /> 형식의 <see cref="T:System.Xml.XmlQualifiedName" /> 문자열 값입니다. 개체에 정의된 네임스페이스가 없으면 이 메서드는 로컬 이름만 반환합니다.</returns>
    </member>
    <member name="T:System.Xml.XmlReader">
      <summary>빠르고, 캐시되지 않으며 앞으로만 이동 가능한 XML 데이터 액세스를 제공하는 판독기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.XmlReader.#ctor">
      <summary>
        <see langword="XmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.XmlReader.AttributeCount">
      <summary>파생 클래스에서 재정의되면 현재 노드에 포함된 특성 수를 가져옵니다.</summary>
      <returns>현재 노드에 포함된 특성의 수입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.BaseURI">
      <summary>파생 클래스에서 재정의되면 현재 노드의 기본 URI를 가져옵니다.</summary>
      <returns>현재 노드의 기본 URI입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.CanReadBinaryContent">
      <summary>
        <see cref="T:System.Xml.XmlReader" />가 이진 콘텐츠 읽기 메서드를 구현하는지를 나타내는 값을 가져옵니다.</summary>
      <returns>이진 콘텐츠 읽기 메서드를 구현하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.CanReadValueChunk">
      <summary>
        <see cref="T:System.Xml.XmlReader" />가 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 메서드를 구현하는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.XmlReader" />가 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 메서드를 구현하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.CanResolveEntity">
      <summary>이 판독기가 엔터티를 구문 분석하고 확인할 수 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>판독기가 엔터티를 구문 분석하고 확인할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Close">
      <summary>파생 클래스에서 재정의되면 <see cref="P:System.Xml.XmlReader.ReadState" />를 <see cref="F:System.Xml.ReadState.Closed" />로 변경합니다.</summary>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream)">
      <summary>기본 설정의 지정된 스트림을 사용하여 새 <see cref="T:System.Xml.XmlReader" /> 인스턴스를 만듭니다.</summary>
      <param name="input">XML 데이터가 포함된 스트림입니다.  
<see cref="T:System.Xml.XmlReader" />는 스트림의 첫 번째 바이트를 검색하여 바이트 순서 표시나 다른 인코딩 기호를 찾습니다. 인코딩이 확인되면 이 인코딩을 사용하여 스트림을 읽고, 입력을 문자 스트림(유니코드)으로 구문 분석하는 작업이 수행됩니다.</param>
      <returns>스트림의 XML 데이터를 읽는 데 사용되는 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Xml.XmlReader" />에는 XML 데이터 위치에 액세스할 수 있는 충분한 권한이 없습니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)">
      <summary>지정된 스트림 및 설정을 사용하여 새 <see cref="T:System.Xml.XmlReader" /> 인스턴스를 만듭니다.</summary>
      <param name="input">XML 데이터가 포함된 스트림입니다.  
<see cref="T:System.Xml.XmlReader" />는 스트림의 첫 번째 바이트를 검색하여 바이트 순서 표시나 다른 인코딩 기호를 찾습니다. 인코딩이 확인되면 이 인코딩을 사용하여 스트림을 읽고, 입력을 문자 스트림(유니코드)으로 구문 분석하는 작업이 수행됩니다.</param>
      <param name="settings">새 <see cref="T:System.Xml.XmlReader" /> 인스턴스의 설정입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
      <returns>스트림의 XML 데이터를 읽는 데 사용되는 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 값이 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.String)">
      <summary>지정된 스트림, 기본 URI 및 설정을 사용하여 새 <see cref="T:System.Xml.XmlReader" /> 인스턴스를 만듭니다.</summary>
      <param name="input">XML 데이터가 포함된 스트림입니다.  
<see cref="T:System.Xml.XmlReader" />는 스트림의 첫 번째 바이트를 검색하여 바이트 순서 표시나 다른 인코딩 기호를 찾습니다. 인코딩이 확인되면 이 인코딩을 사용하여 스트림을 읽고, 입력을 문자 스트림(유니코드)으로 구문 분석하는 작업이 수행됩니다.</param>
      <param name="settings">새 <see cref="T:System.Xml.XmlReader" /> 인스턴스의 설정입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
      <param name="baseUri">읽을 엔터티 또는 문서의 기본 URI입니다. 이 값은 <see langword="null" />일 수 있습니다.  
 보안 정보 기본 URI는 XML 문서의 상대 URI를 확인하는 데 사용됩니다. 신뢰할 수 없는 소스의 기본 URI는 사용하지 않는 것이 좋습니다.</param>
      <returns>스트림의 XML 데이터를 읽는 데 사용되는 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 값이 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>구문 분석을 위해 지정한 스트림, 설정 및 컨텍스트 정보를 사용하여 새 <see cref="T:System.Xml.XmlReader" /> 인스턴스를 만듭니다.</summary>
      <param name="input">XML 데이터가 포함된 스트림입니다.  
<see cref="T:System.Xml.XmlReader" />는 스트림의 첫 번째 바이트를 검색하여 바이트 순서 표시나 다른 인코딩 기호를 찾습니다. 인코딩이 확인되면 이 인코딩을 사용하여 스트림을 읽고, 입력을 문자 스트림(유니코드)으로 구문 분석하는 작업이 수행됩니다.</param>
      <param name="settings">새 <see cref="T:System.Xml.XmlReader" /> 인스턴스의 설정입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
      <param name="inputContext">XML 조각을 구문 분석하는 데 필요한 컨텍스트 정보입니다. 컨텍스트 정보에는 사용할 <see cref="T:System.Xml.XmlNameTable" />, 인코딩, 네임스페이스 범위, 현재 <c>xml:lang</c>과 <c>xml:space</c> 범위, 기본 URI 및 문서 종류 정의가 포함될 수 있습니다.  
이 값은 <see langword="null" />일 수 있습니다.</param>
      <returns>스트림의 XML 데이터를 읽는 데 사용되는 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 값이 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader)">
      <summary>지정된 텍스트 판독기를 사용하여 새 <see cref="T:System.Xml.XmlReader" /> 인스턴스를 만듭니다.</summary>
      <param name="input">XML 데이터를 읽어올 텍스트 판독기입니다. 텍스트 판독기는 유니코드 문자 스트림을 반환하므로 XML 선언에 지정된 인코딩은 XML 판독기가 데이터 스트림을 디코딩하는 데 사용되지 않습니다.</param>
      <returns>스트림의 XML 데이터를 읽는 데 사용되는 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 값이 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings)">
      <summary>지정된 텍스트 판독기 및 설정을 사용하여 새 <see cref="T:System.Xml.XmlReader" /> 인스턴스를 만듭니다.</summary>
      <param name="input">XML 데이터를 읽어올 텍스트 판독기입니다. 텍스트 판독기는 유니코드 문자 스트림을 반환하므로 XML 선언에 지정된 인코딩은 XML 판독기가 데이터 스트림을 디코딩하는 데 사용되지 않습니다.</param>
      <param name="settings">새 <see cref="T:System.Xml.XmlReader" />의 설정입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
      <returns>스트림의 XML 데이터를 읽는 데 사용되는 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 값이 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.String)">
      <summary>지정된 텍스트 판독기, 설정 및 기본 URI를 사용하여 새 <see cref="T:System.Xml.XmlReader" /> 인스턴스를 만듭니다.</summary>
      <param name="input">XML 데이터를 읽어올 텍스트 판독기입니다. 텍스트 판독기는 유니코드 문자 스트림을 반환하므로 XML 선언에 지정된 인코딩은 <see cref="T:System.Xml.XmlReader" />가 데이터 스트림을 디코딩하는 데 사용되지 않습니다.</param>
      <param name="settings">새 <see cref="T:System.Xml.XmlReader" /> 인스턴스의 설정입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
      <param name="baseUri">읽을 엔터티 또는 문서의 기본 URI입니다. 이 값은 <see langword="null" />일 수 있습니다.  
 보안 정보 기본 URI는 XML 문서의 상대 URI를 확인하는 데 사용됩니다. 신뢰할 수 없는 소스의 기본 URI는 사용하지 않는 것이 좋습니다.</param>
      <returns>스트림의 XML 데이터를 읽는 데 사용되는 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 값이 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>지정된 텍스트 판독기, 설정 및 컨텍스트 정보를 구문 분석에 사용하여 새 <see cref="T:System.Xml.XmlReader" /> 인스턴스를 만듭니다.</summary>
      <param name="input">XML 데이터를 읽어올 텍스트 판독기입니다. 텍스트 판독기는 유니코드 문자 스트림을 반환하므로 XML 선언에 지정된 인코딩은 XML 판독기가 데이터 스트림을 디코딩하는 데 사용되지 않습니다.</param>
      <param name="settings">새 <see cref="T:System.Xml.XmlReader" /> 인스턴스의 설정입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
      <param name="inputContext">XML 조각을 구문 분석하는 데 필요한 컨텍스트 정보입니다. 컨텍스트 정보에는 사용할 <see cref="T:System.Xml.XmlNameTable" />, 인코딩, 네임스페이스 범위, 현재 <c>xml:lang</c>과 <c>xml:space</c> 범위, 기본 URI 및 문서 종류 정의가 포함될 수 있습니다.  
이 값은 <see langword="null" />일 수 있습니다.</param>
      <returns>스트림의 XML 데이터를 읽는 데 사용되는 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Xml.XmlReaderSettings.NameTable" /> 및 <see cref="P:System.Xml.XmlParserContext.NameTable" /> 속성 둘 다에 값이 포함되어 있습니다. <see langword="NameTable" /> 속성 중 하나만 설정 및 사용할 수 있습니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String)">
      <summary>지정된 URI를 사용하여 새 <see cref="T:System.Xml.XmlReader" /> 인스턴스를 만듭니다.</summary>
      <param name="inputUri">XML 데이터를 포함하는 파일의 URI입니다. <see cref="T:System.Xml.XmlUrlResolver" /> 클래스는 경로를 정규 데이터 표현으로 변환하는 데 사용됩니다.</param>
      <returns>스트림의 XML 데이터를 읽는 데 사용되는 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Xml.XmlReader" />에는 XML 데이터 위치에 액세스할 수 있는 충분한 권한이 없습니다.</exception>
      <exception cref="T:System.IO.FileNotFoundException">URI로 식별된 파일이 없는 경우</exception>
      <exception cref="T:System.UriFormatException">Windows 스토어 앱용 .NET 또는 이식 가능한 클래스 라이브러리에서 대신 기본 클래스 예외 <see cref="T:System.FormatException" />을 catch합니다.  


            

 URI 형식이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings)">
      <summary>지정된 URI 및 설정을 사용하여 새 <see cref="T:System.Xml.XmlReader" /> 인스턴스를 만듭니다.</summary>
      <param name="inputUri">XML 데이터를 포함하는 파일의 URI입니다. <see cref="T:System.Xml.XmlReaderSettings" /> 개체의 <see cref="T:System.Xml.XmlResolver" /> 개체는 경로를 정규 데이터 표현으로 변환하는 데 사용됩니다. <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" />가 <see langword="null" />이면 새 <see cref="T:System.Xml.XmlUrlResolver" /> 개체가 사용됩니다.</param>
      <param name="settings">새 <see cref="T:System.Xml.XmlReader" /> 인스턴스의 설정입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
      <returns>스트림의 XML 데이터를 읽는 데 사용되는 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.IO.FileNotFoundException">URI로 지정된 파일을 찾을 수 없습니다.</exception>
      <exception cref="T:System.UriFormatException">Windows 스토어 앱용 .NET 또는 이식 가능한 클래스 라이브러리에서 대신 기본 클래스 예외 <see cref="T:System.FormatException" />을 catch합니다.  


            

 URI 형식이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>지정된 URI, 설정 및 컨텍스트 정보를 구문 분석에 사용하여 새 <see cref="T:System.Xml.XmlReader" /> 인스턴스를 만듭니다.</summary>
      <param name="inputUri">XML 데이터를 포함하는 파일의 URI입니다. <see cref="T:System.Xml.XmlReaderSettings" /> 개체의 <see cref="T:System.Xml.XmlResolver" /> 개체는 경로를 정규 데이터 표현으로 변환하는 데 사용됩니다. <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" />가 <see langword="null" />이면 새 <see cref="T:System.Xml.XmlUrlResolver" /> 개체가 사용됩니다.</param>
      <param name="settings">새 <see cref="T:System.Xml.XmlReader" /> 인스턴스의 설정입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
      <param name="inputContext">XML 조각을 구문 분석하는 데 필요한 컨텍스트 정보입니다. 컨텍스트 정보에는 사용할 <see cref="T:System.Xml.XmlNameTable" />, 인코딩, 네임스페이스 범위, 현재 <c>xml:lang</c>과 <c>xml:space</c> 범위, 기본 URI 및 문서 종류 정의가 포함될 수 있습니다.  
이 값은 <see langword="null" />일 수 있습니다.</param>
      <returns>스트림의 XML 데이터를 읽는 데 사용되는 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <see langword="inputUri" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Xml.XmlReader" />에는 XML 데이터 위치에 액세스할 수 있는 충분한 권한이 없습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Xml.XmlReaderSettings.NameTable" /> 및 <see cref="P:System.Xml.XmlParserContext.NameTable" /> 속성 둘 다에 값이 포함되어 있습니다. <see langword="NameTable" /> 속성 중 하나만 설정 및 사용할 수 있습니다.</exception>
      <exception cref="T:System.IO.FileNotFoundException">URI로 지정된 파일을 찾을 수 없습니다.</exception>
      <exception cref="T:System.UriFormatException">URI 형식이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)">
      <summary>지정된 XML 판독기 및 설정을 사용하여 새 <see cref="T:System.Xml.XmlReader" /> 인스턴스를 만듭니다.</summary>
      <param name="reader">내부 XML 판독기로 사용할 개체입니다.</param>
      <param name="settings">새 <see cref="T:System.Xml.XmlReader" /> 인스턴스의 설정입니다.  
<see cref="T:System.Xml.XmlReaderSettings" /> 개체의 규칙 수준은 기본 판독기의 규칙 수준과 일치하거나 <see cref="F:System.Xml.ConformanceLevel.Auto" />로 설정되어야 합니다.</param>
      <returns>지정된 <see cref="T:System.Xml.XmlReader" /> 개체를 래핑하는 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReaderSettings" /> 개체가 기본 판독기의 규칙 수준과 일치하지 않는 규칙 수준을 지정하는 경우  
또는 
기본 <see cref="T:System.Xml.XmlReader" />가 <see cref="F:System.Xml.ReadState.Error" /> 또는 <see cref="F:System.Xml.ReadState.Closed" /> 상태에 있는 경우</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Depth">
      <summary>파생 클래스에서 재정의되면 XML 문서에서 현재 노드의 수준을 가져옵니다.</summary>
      <returns>XML 문서의 현재 노드 수준입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Dispose">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Xml.XmlReader" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.EOF">
      <summary>파생 클래스에서 재정의되면 판독기가 스트림의 끝에 배치되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>판독기가 스트림의 맨 끝에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.Int32)">
      <summary>파생 클래스에서 재정의되면 지정된 인덱스가 있는 특성의 값을 가져옵니다.</summary>
      <param name="i">특성의 인덱스입니다. 인덱스는 0부터 시작합니다. 첫 번째 특성의 인덱스는 0입니다.</param>
      <returns>지정된 특성의 값을 반환합니다. 이 메서드는 판독기를 이동하지 않습니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" />이 범위에서 벗어난 경우. 음수가 아니어야 하며 특성 컬렉션의 크기보다 작아야합니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String)">
      <summary>파생 클래스에서 재정의되면 지정된 <see cref="P:System.Xml.XmlReader.Name" />이 있는 특성의 값을 가져옵니다.</summary>
      <param name="name">특성의 정규화된 이름입니다.</param>
      <returns>지정된 특성의 값을 반환합니다. 지정된 특성이 없거나 값이 <see langword="String.Empty" />이면 <see langword="null" />이 반환됩니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)">
      <summary>파생 클래스에서 재정의되면 지정된 <see cref="P:System.Xml.XmlReader.LocalName" /> 및 <see cref="P:System.Xml.XmlReader.NamespaceURI" />가 있는 특성의 값을 가져옵니다.</summary>
      <param name="name">특성의 로컬 이름입니다.</param>
      <param name="namespaceURI">특성의 네임스페이스 URI입니다.</param>
      <returns>지정된 특성의 값을 반환합니다. 지정된 특성이 없거나 값이 <see langword="String.Empty" />이면 <see langword="null" />이 반환됩니다. 이 메서드는 판독기를 이동하지 않습니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetValueAsync">
      <summary>현재 노드의 값을 비동기적으로 가져옵니다.</summary>
      <returns>현재 노드의 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우에 "비동기 작업이 이미 진행 중입니다." 메시지를 표시하며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlReaderSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlReader" /> 비동기 메서드가 호출되었습니다. 이 경우 “비동기 메서드를 사용하려면 XmlReaderSettings.Async를 true로 설정하세요.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.HasAttributes">
      <summary>현재 노드에 특성이 있는지를 나타내는 값을 얻습니다.</summary>
      <returns>현재 노드에 특성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.HasValue">
      <summary>파생 클래스에서 재정의되면 현재 노드에 <see cref="P:System.Xml.XmlReader.Value" />가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 판독기가 위치한 노드에 <see langword="Value" />가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see langword="false" />인 경우 노드의 값은 <see langword="String.Empty" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.IsDefault">
      <summary>파생 클래스에서 재정의되면 현재 노드가 DTD나 스키마에서 정의한 기본값에서 생성된 값을 가진 특성인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 노드가 DTD나 스키마에서 정의한 기본값에서 생성된 값을 가진 특성이면 <see langword="true" />이고, 특성 값이 명시적으로 설정되었으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.IsEmptyElement">
      <summary>파생 클래스에서 재정의되면 현재 노드가 <c>&lt;MyElement/&gt;</c>와 같은 빈 요소인지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" /> 현재 노드가 요소 이면 (<see cref="P:System.Xml.XmlReader.NodeType" /> equals <see langword="XmlNodeType.Element" />)로 끝나는 <c>/ &gt;</c>고, 그렇지 않으면 <see langword="false" />합니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsName(System.String)">
      <summary>문자열 인수가 유효한 XML 이름인지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="str">유효성을 확인할 이름입니다.</param>
      <returns>유효한 이름이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 값이 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsNameToken(System.String)">
      <summary>문자열 인수가 유효한 XML 이름 토큰인지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="str">유효성을 검사할 이름 토큰입니다.</param>
      <returns>유효한 이름 토큰이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 값이 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement">
      <summary>
        <see cref="M:System.Xml.XmlReader.MoveToContent" />를 호출하고 현재 콘텐츠 노드가 시작 태그 또는 빈 요소 태그인지 테스트합니다.</summary>
      <returns>
        <see cref="M:System.Xml.XmlReader.MoveToContent" />가 시작 태그나 빈 요소 태그를 찾으면 <see langword="true" />이고, <see langword="false" /> 이외의 노드 형식을 찾으면 <see langword="XmlNodeType.Element" />입니다.</returns>
      <exception cref="T:System.Xml.XmlException">입력 스트림에 잘못된 XML이 있는 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String)">
      <summary>
        <see cref="M:System.Xml.XmlReader.MoveToContent" />를 호출하고 현재 콘텐츠 노드가 시작 태그 또는 빈 요소 태그인지 여부와 찾은 요소의 <see cref="P:System.Xml.XmlReader.Name" /> 속성이 지정된 인수와 일치하는지 여부를 테스트합니다.</summary>
      <param name="name">찾은 요소의 <see langword="Name" /> 속성과 일치하는 문자열입니다.</param>
      <returns>테스트한 결과 현재 노드가 요소이고 <see langword="true" /> 속성이 지정된 문자열과 일치하면 <see langword="Name" />이고, <see langword="false" /> 이외의 노드 형식을 찾거나 요소 <see langword="XmlNodeType.Element" /> 속성이 지정된 문자열과 일치하지 않으면 <see langword="Name" />입니다.</returns>
      <exception cref="T:System.Xml.XmlException">입력 스트림에 잘못된 XML이 있는 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String,System.String)">
      <summary>
        <see cref="M:System.Xml.XmlReader.MoveToContent" />를 호출하고 현재 콘텐츠 노드가 시작 태그 또는 빈 요소 태그인지 여부와 찾은 요소의 <see cref="P:System.Xml.XmlReader.LocalName" /> 및 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 속성이 지정된 인수와 일치하는지 여부를 테스트합니다.</summary>
      <param name="localname">찾은 요소의 <see langword="LocalName" /> 속성과 일치하는 문자열입니다.</param>
      <param name="ns">찾은 요소의 <see langword="NamespaceURI" /> 속성과 일치하는 문자열입니다.</param>
      <returns>테스트한 결과 현재 노드가 요소이면 <see langword="true" />이고, <see langword="false" /> 이외의 노드 형식을 찾거나 요소의 <see langword="XmlNodeType.Element" /> 및 <see langword="LocalName" /> 속성이 지정된 문자열과 일치하지 않으면 <see langword="NamespaceURI" />입니다.</returns>
      <exception cref="T:System.Xml.XmlException">입력 스트림에 잘못된 XML이 있는 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.Int32)">
      <summary>파생 클래스에서 재정의되면 지정된 인덱스가 있는 특성의 값을 가져옵니다.</summary>
      <param name="i">특성의 인덱스입니다.</param>
      <returns>지정된 특성의 값을 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String)">
      <summary>파생 클래스에서 재정의되면 지정된 <see cref="P:System.Xml.XmlReader.Name" />이 있는 특성의 값을 가져옵니다.</summary>
      <param name="name">특성의 정규화된 이름입니다.</param>
      <returns>지정된 특성의 값을 반환합니다. 특성이 없으면 <see langword="null" />이 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String,System.String)">
      <summary>파생 클래스에서 재정의되면 지정된 <see cref="P:System.Xml.XmlReader.LocalName" /> 및 <see cref="P:System.Xml.XmlReader.NamespaceURI" />가 있는 특성의 값을 가져옵니다.</summary>
      <param name="name">특성의 로컬 이름입니다.</param>
      <param name="namespaceURI">특성의 네임스페이스 URI입니다.</param>
      <returns>지정된 특성의 값을 반환합니다. 특성이 없으면 <see langword="null" />이 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.LocalName">
      <summary>파생 클래스에서 재정의되면 현재 노드의 로컬 이름을 가져옵니다.</summary>
      <returns>접두사를 제거한 현재 노드의 이름입니다. 예를 들어 <see langword="LocalName" /> 됩니다 <see langword="book" /> 요소에 대 한 <c>&lt;예&gt;</c>합니다.  
이름이 없는 노드 형식(예: <see langword="Text" />, <see langword="Comment" /> 등)의 경우 이 속성은 <see langword="String.Empty" />를 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.LookupNamespace(System.String)">
      <summary>파생 클래스에서 재정의되면 현재 요소의 범위에서 네임스페이스 접두사를 확인합니다.</summary>
      <param name="prefix">확인할 네임스페이스 URI의 접두사입니다. 기본 네임스페이스와 일치시키려면 빈 문자열을 전달합니다.</param>
      <returns>접두사가 매핑되는 네임스페이스 URI이거나 일치하는 접두사가 없는 경우 <see langword="null" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.Int32)">
      <summary>파생 클래스에서 재정의되면 지정된 인덱스가 있는 특성으로 이동합니다.</summary>
      <param name="i">특성의 인덱스입니다.</param>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">매개 변수에 음수 값이 있습니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String)">
      <summary>파생 클래스에서 재정의되면 지정된 <see cref="P:System.Xml.XmlReader.Name" />이 있는 특성으로 이동합니다.</summary>
      <param name="name">특성의 정규화된 이름입니다.</param>
      <returns>특성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see langword="false" />이면, 판독기의 위치는 변경되지 않습니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.ArgumentException">매개 변수가 빈 문자열인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)">
      <summary>파생 클래스에서 재정의되면 지정된 <see cref="P:System.Xml.XmlReader.LocalName" /> 및 <see cref="P:System.Xml.XmlReader.NamespaceURI" />가 있는 특성으로 이동합니다.</summary>
      <param name="name">특성의 로컬 이름입니다.</param>
      <param name="ns">특성의 네임스페이스 URI입니다.</param>
      <returns>특성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see langword="false" />이면, 판독기의 위치는 변경되지 않습니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.ArgumentNullException">두 매개 변수 값이 모두 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToContent">
      <summary>현재 노드가 콘텐츠 노드(공백 없는 텍스트, <see langword="CDATA" />, <see langword="Element" />, <see langword="EndElement" />, <see langword="EntityReference" /> 또는 <see langword="EndEntity" />)인지 여부를 확인합니다. 해당 노드가 콘텐츠 노드가 아니면 판독기는 다음 콘텐츠 노드나 파일의 끝으로 건너뜁니다. 판독기는 <see langword="ProcessingInstruction" />, <see langword="DocumentType" />, <see langword="Comment" />, <see langword="Whitespace" /> 또는 <see langword="SignificantWhitespace" /> 같은 형식의 노드를 건너뜁니다.</summary>
      <returns>메서드를 사용하여 찾은 현재 노드의 <see cref="P:System.Xml.XmlReader.NodeType" />이거나 판독기가 입력 스트림의 끝에 도달한 경우에는 <see langword="XmlNodeType.None" />입니다.</returns>
      <exception cref="T:System.Xml.XmlException">입력 스트림에 잘못된 XML이 있는 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToContentAsync">
      <summary>현재 노드가 콘텐츠 노드인지를 비동기적으로 확인합니다. 해당 노드가 콘텐츠 노드가 아니면 판독기는 다음 콘텐츠 노드나 파일의 끝으로 건너뜁니다.</summary>
      <returns>메서드를 사용하여 찾은 현재 노드의 <see cref="P:System.Xml.XmlReader.NodeType" />이거나 판독기가 입력 스트림의 끝에 도달한 경우에는 <see langword="XmlNodeType.None" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlReaderSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlReader" /> 비동기 메서드가 호출되었습니다. 이 경우 “비동기 메서드를 사용하려면 XmlReaderSettings.Async를 true로 설정하세요.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToElement">
      <summary>파생 클래스에서 재정의되면 현재 Attribute 노드를 포함하는 요소로 이동합니다.</summary>
      <returns>판독기가 특성에 있으면(특성이 있는 요소로 판독기가 이동하면) <see langword="true" />이고, 판독기가 특성에 없으면(판독기의 위치가 바뀌지 않으면) <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToFirstAttribute">
      <summary>파생 클래스에서 재정의되면 첫 번째 특성으로 이동합니다.</summary>
      <returns>특성이 있으면(판독기가 첫 번째 특성으로 이동하면) <see langword="true" />이고, 그렇지 않으면(판독기의 위치가 바뀌지 않으면) <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToNextAttribute">
      <summary>파생 클래스에서 재정의되면 다음 특성으로 이동합니다.</summary>
      <returns>다음 특성이 있으면 <see langword="true" />이고, 더 이상 특성이 없으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Name">
      <summary>파생 클래스에서 재정의되면 현재 노드의 정규화된 이름을 가져옵니다.</summary>
      <returns>현재 노드의 정규화된 이름입니다. 예를 들어 <see langword="Name" /> 됩니다 <see langword="bk:book" /> 요소에 대 한 <c>&lt;예&gt;</c>합니다.  
반환되는 이름은 다음과 같이 노드의 <see cref="P:System.Xml.XmlReader.NodeType" />에 따라 달라집니다. 다음 노드 형식은 나열된 값을 반환합니다. 기타 모든 노드 형식은 빈 문자열을 반환합니다.  
  노드 형식 
  name 
 <see langword="Attribute" /> 특성 이름입니다.  

 <see langword="DocumentType" /> 문서 형식 이름입니다.  

 <see langword="Element" /> 태그 이름입니다.  

 <see langword="EntityReference" /> 참조된 엔터티의 이름입니다.  

 <see langword="ProcessingInstruction" /> 처리 명령의 대상입니다.  

 <see langword="XmlDeclaration" /> 리터럴 문자열 <see langword="xml" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.NamespaceURI">
      <summary>파생 클래스에서 재정의되면 판독기가 배치된 노드의 네임스페이스 URI를 W3C Namespace 사양에 정의된 대로 가져옵니다.</summary>
      <returns>현재 노드의 네임스페이스 URI이거나 빈 문자열입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.NameTable">
      <summary>파생 클래스에서 재정의되면 이 구현과 관련된 <see cref="T:System.Xml.XmlNameTable" />을 가져옵니다.</summary>
      <returns>노드 내에 있는 문자열의 원자화된 버전을 가져올 수 있도록 하는 <see langword="XmlNameTable" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.NodeType">
      <summary>파생 클래스에서 재정의되면 현재 노드의 형식을 가져옵니다.</summary>
      <returns>현재 노드의 형식을 지정하는 열거형 값 중 하나입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Prefix">
      <summary>파생 클래스에서 재정의되면 현재 노드와 관련된 네임스페이스 접두사를 가져옵니다.</summary>
      <returns>현재 노드와 관련된 네임스페이스 접두사입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.QuoteChar">
      <summary>파생 클래스에서 재정의되면 Attribute 노드의 값을 묶는 데 사용되는 따옴표 문자를 가져옵니다.</summary>
      <returns>특성 노드의 값을 묶을 때 사용하는 인용 부호 문자입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Read">
      <summary>파생 클래스에서 재정의되면 스트림에서 다음 노드를 읽습니다.</summary>
      <returns>서명을 읽었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Xml.XmlException">XML을 구문 분석하는 동안 오류가 발생했습니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadAsync">
      <summary>스트림에서 다음 노드를 비동기적으로 읽습니다.</summary>
      <returns>다음 노드를 읽었으면 <see langword="true" />이고, 더 이상 읽을 노드가 없으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlReaderSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlReader" /> 비동기 메서드가 호출되었습니다. 이 경우 “비동기 메서드를 사용하려면 XmlReaderSettings.Async를 true로 설정하세요.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadAttributeValue">
      <summary>파생 클래스에서 재정의되면 하나 이상의 <see langword="Text" />, <see langword="EntityReference" /> 또는 <see langword="EndEntity" /> 노드로 특성 값을 구문 분석합니다.</summary>
      <returns>반환할 노드가 있는 경우 <see langword="true" />입니다.  
 처음 호출할 때 판독기가 특성 노드에 있거나 모든 특성 값을 읽은 경우 <see langword="false" />입니다.  
<c>misc=""</c>와 같은 빈 특성은 <see langword="true" />를 반환하며 이것은 단일 노드가 <see langword="String.Empty" />의 값을 갖는 것을 의미합니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>지정한 형식의 개체로 콘텐츠를 읽습니다.</summary>
      <param name="returnType">반환될 값의 형식입니다.  
 참고 .NET Framework 3.5 릴리스에서는 <paramref name="returnType" /> 매개 변수 값이 <see cref="T:System.DateTimeOffset" /> 형식이 될 수 있습니다.</param>
      <param name="namespaceResolver">형식 변환과 관련된 모든 네임스페이스 접두사를 확인하는 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 개체입니다. 예를 들어, <see cref="T:System.Xml.XmlQualifiedName" /> 개체를 <c>xs:string</c>으로 변환할 때 이 개체를 사용할 수 있습니다.  
이 값은 <see langword="null" />일 수 있습니다.</param>
      <returns>요청된 형식으로 변환된 특성 값 또는 연결된 텍스트 콘텐츠입니다.</returns>
      <exception cref="T:System.FormatException">콘텐츠가 대상 형식에 맞지 않는 형식인 경우</exception>
      <exception cref="T:System.InvalidCastException">시도된 캐스팅이 잘못된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="returnType" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">현재 노드가 지원되는 노드 형식이 아닌 경우. 자세한 내용은 아래 표를 참조하십시오.
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.OverflowException">
        <see langword="Decimal.MaxValue" />를 읽는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>지정한 형식의 개체로 콘텐츠를 비동기적으로 읽습니다.</summary>
      <param name="returnType">반환될 값의 형식입니다.</param>
      <param name="namespaceResolver">형식 변환과 관련된 모든 네임스페이스 접두사를 확인하는 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 개체입니다.</param>
      <returns>요청된 형식으로 변환된 특성 값 또는 연결된 텍스트 콘텐츠입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlReaderSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlReader" /> 비동기 메서드가 호출되었습니다. 이 경우 “비동기 메서드를 사용하려면 XmlReaderSettings.Async를 true로 설정하세요.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>콘텐츠를 읽고 Base64 디코딩된 이진 바이트를 반환합니다.</summary>
      <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
      <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
      <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
      <returns>버퍼에 쓴 바이트 수입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />가 현재 노드에서 지원되지 않습니다.
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">구현된 <see cref="T:System.Xml.XmlReader" />에서 이 메서드를 지원하지 않는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary>콘텐츠를 비동기적으로 읽고 Base64 디코딩된 이진 바이트를 반환합니다.</summary>
      <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
      <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
      <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
      <returns>버퍼에 쓴 바이트 수입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlReaderSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlReader" /> 비동기 메서드가 호출되었습니다. 이 경우 “비동기 메서드를 사용하려면 XmlReaderSettings.Async를 true로 설정하세요.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>콘텐츠를 읽고 <see langword="BinHex" /> 디코딩된 이진 바이트를 반환합니다.</summary>
      <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
      <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
      <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
      <returns>버퍼에 쓴 바이트 수입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />가 현재 노드에서 지원되지 않습니다.
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">구현된 <see cref="T:System.Xml.XmlReader" />에서 이 메서드를 지원하지 않는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>콘텐츠를 비동기적으로 읽고 <see langword="BinHex" /> 디코딩된 이진 바이트를 반환합니다.</summary>
      <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
      <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
      <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
      <returns>버퍼에 쓴 바이트 수입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlReaderSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlReader" /> 비동기 메서드가 호출되었습니다. 이 경우 “비동기 메서드를 사용하려면 XmlReaderSettings.Async를 true로 설정하세요.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBoolean">
      <summary>현재 위치의 텍스트 콘텐츠를 <see langword="Boolean" />으로 읽습니다.</summary>
      <returns>텍스트 콘텐츠에 해당하는 <see cref="T:System.Boolean" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidCastException">시도된 캐스팅이 잘못된 경우</exception>
      <exception cref="T:System.FormatException">문자열 형식이 올바르지 않은 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDateTime">
      <summary>현재 위치의 텍스트 콘텐츠를 <see cref="T:System.DateTime" /> 개체로 읽습니다.</summary>
      <returns>텍스트 콘텐츠에 해당하는 <see cref="T:System.DateTime" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidCastException">시도된 캐스팅이 잘못된 경우</exception>
      <exception cref="T:System.FormatException">문자열 형식이 올바르지 않은 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDateTimeOffset">
      <summary>현재 위치의 텍스트 콘텐츠를 <see cref="T:System.DateTimeOffset" /> 개체로 읽습니다.</summary>
      <returns>텍스트 콘텐츠에 해당하는 <see cref="T:System.DateTimeOffset" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDecimal">
      <summary>현재 위치의 텍스트 콘텐츠를 <see cref="T:System.Decimal" /> 개체로 읽습니다.</summary>
      <returns>현재 위치의 텍스트 콘텐츠에 해당하는 <see cref="T:System.Decimal" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidCastException">시도된 캐스팅이 잘못된 경우</exception>
      <exception cref="T:System.FormatException">문자열 형식이 올바르지 않은 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDouble">
      <summary>현재 위치의 텍스트 콘텐츠를 배정밀도 부동 소수점 숫자로 읽습니다.</summary>
      <returns>텍스트 콘텐츠에 해당하는 배정밀도 부동 소수점 숫자입니다.</returns>
      <exception cref="T:System.InvalidCastException">시도된 캐스팅이 잘못된 경우</exception>
      <exception cref="T:System.FormatException">문자열 형식이 올바르지 않은 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsFloat">
      <summary>현재 위치의 텍스트 콘텐츠를 단정밀도 부동 소수점 숫자로 읽습니다.</summary>
      <returns>현재 위치의 텍스트 콘텐츠에 해당하는 단정밀도 부동 소수점 숫자입니다.</returns>
      <exception cref="T:System.InvalidCastException">시도된 캐스팅이 잘못된 경우</exception>
      <exception cref="T:System.FormatException">문자열 형식이 올바르지 않은 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsInt">
      <summary>현재 위치의 텍스트 콘텐츠를 부호 있는 32비트 정수로 읽습니다.</summary>
      <returns>텍스트 콘텐츠에 해당하는 부호 있는 32비트 정수입니다.</returns>
      <exception cref="T:System.InvalidCastException">시도된 캐스팅이 잘못된 경우</exception>
      <exception cref="T:System.FormatException">문자열 형식이 올바르지 않은 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsLong">
      <summary>현재 위치의 텍스트 콘텐츠를 부호 있는 64비트 정수로 읽습니다.</summary>
      <returns>텍스트 콘텐츠에 해당하는 부호 있는 64비트 정수입니다.</returns>
      <exception cref="T:System.InvalidCastException">시도된 캐스팅이 잘못된 경우</exception>
      <exception cref="T:System.FormatException">문자열 형식이 올바르지 않은 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsObject">
      <summary>현재 위치의 텍스트 콘텐츠를 <see cref="T:System.Object" />로 읽습니다.</summary>
      <returns>텍스트 콘텐츠에 해당하는 가장 적절한 CLR(공용 언어 런타임) 개체입니다.</returns>
      <exception cref="T:System.InvalidCastException">시도된 캐스팅이 잘못된 경우</exception>
      <exception cref="T:System.FormatException">문자열 형식이 올바르지 않은 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsObjectAsync">
      <summary>현재 위치의 텍스트 콘텐츠를 <see cref="T:System.Object" />로 비동기적으로 읽습니다.</summary>
      <returns>텍스트 콘텐츠에 해당하는 가장 적절한 CLR(공용 언어 런타임) 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlReaderSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlReader" /> 비동기 메서드가 호출되었습니다. 이 경우 “비동기 메서드를 사용하려면 XmlReaderSettings.Async를 true로 설정하세요.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsString">
      <summary>현재 위치의 텍스트 콘텐츠를 <see cref="T:System.String" /> 개체로 읽습니다.</summary>
      <returns>텍스트 콘텐츠에 해당하는 <see cref="T:System.String" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidCastException">시도된 캐스팅이 잘못된 경우</exception>
      <exception cref="T:System.FormatException">문자열 형식이 올바르지 않은 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsStringAsync">
      <summary>현재 위치의 텍스트 콘텐츠를 <see cref="T:System.String" /> 개체로 읽습니다.</summary>
      <returns>텍스트 콘텐츠에 해당하는 <see cref="T:System.String" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlReaderSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlReader" /> 비동기 메서드가 호출되었습니다. 이 경우 “비동기 메서드를 사용하려면 XmlReaderSettings.Async를 true로 설정하세요.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>요소 콘텐츠를 요청된 형식으로 읽습니다.</summary>
      <param name="returnType">반환될 값의 형식입니다.  
 참고 .NET Framework 3.5 릴리스에서는 <paramref name="returnType" /> 매개 변수 값이 <see cref="T:System.DateTimeOffset" /> 형식이 될 수 있습니다.</param>
      <param name="namespaceResolver">형식 변환과 관련된 모든 네임스페이스 접두사를 확인하는 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 개체입니다.</param>
      <returns>요청된 형식의 개체로 변환된 요소 콘텐츠입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" />가 요소에 배치되지 않은 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.Xml.XmlException">현재 요소에 자식 요소가 포함된 경우  
 또는  
 요소 콘텐츠를 요청한 형식으로 변환할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">메서드가 <see langword="null" /> 인수를 사용하여 호출된 경우</exception>
      <exception cref="T:System.OverflowException">
        <see langword="Decimal.MaxValue" />를 읽는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)">
      <summary>지정된 로컬 이름과 네임스페이스 URI가 현재 요소의 로컬 이름 및 네임스페이스 URI와 일치하는지 확인한 다음 요소 콘텐츠를 요청된 형식으로 읽습니다.</summary>
      <param name="returnType">반환될 값의 형식입니다.  
 참고 .NET Framework 3.5 릴리스에서는 <paramref name="returnType" /> 매개 변수 값이 <see cref="T:System.DateTimeOffset" /> 형식이 될 수 있습니다.</param>
      <param name="namespaceResolver">형식 변환과 관련된 모든 네임스페이스 접두사를 확인하는 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 개체입니다.</param>
      <param name="localName">요소의 로컬 이름입니다.</param>
      <param name="namespaceURI">요소의 네임스페이스 URI입니다.</param>
      <returns>요청된 형식의 개체로 변환된 요소 콘텐츠입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" />가 요소에 배치되지 않은 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.Xml.XmlException">현재 요소에 자식 요소가 포함된 경우  
 또는  
 요소 콘텐츠를 요청한 형식으로 변환할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">메서드가 <see langword="null" /> 인수를 사용하여 호출된 경우</exception>
      <exception cref="T:System.ArgumentException">지정한 로컬 이름과 네임스페이스 URI가 읽고 있는 현재 요소의 로컬 이름 및 네임스페이스 URI와 일치하지 않는 경우</exception>
      <exception cref="T:System.OverflowException">
        <see langword="Decimal.MaxValue" />를 읽는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>요소 콘텐츠를 요청된 형식으로 비동기적으로 읽습니다.</summary>
      <param name="returnType">반환될 값의 형식입니다.</param>
      <param name="namespaceResolver">형식 변환과 관련된 모든 네임스페이스 접두사를 확인하는 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 개체입니다.</param>
      <returns>요청된 형식의 개체로 변환된 요소 콘텐츠입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlReaderSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlReader" /> 비동기 메서드가 호출되었습니다. 이 경우 “비동기 메서드를 사용하려면 XmlReaderSettings.Async를 true로 설정하세요.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>요소를 읽고 <see langword="Base64" /> 콘텐츠를 디코딩합니다.</summary>
      <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
      <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
      <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
      <returns>버퍼에 쓴 바이트 수입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">현재 노드가 요소 노드가 아닌 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">구현된 <see cref="T:System.Xml.XmlReader" />에서 이 메서드를 지원하지 않는 경우</exception>
      <exception cref="T:System.Xml.XmlException">요소가 혼합 콘텐츠를 포함하는 경우</exception>
      <exception cref="T:System.FormatException">요소를 요청한 형식으로 변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary>요소를 비동기적으로 읽고 <see langword="Base64" /> 콘텐츠를 디코딩합니다.</summary>
      <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
      <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
      <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
      <returns>버퍼에 쓴 바이트 수입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlReaderSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlReader" /> 비동기 메서드가 호출되었습니다. 이 경우 “비동기 메서드를 사용하려면 XmlReaderSettings.Async를 true로 설정하세요.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>요소를 읽고 <see langword="BinHex" /> 콘텐츠를 디코딩합니다.</summary>
      <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
      <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
      <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
      <returns>버퍼에 쓴 바이트 수입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">현재 노드가 요소 노드가 아닌 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">구현된 <see cref="T:System.Xml.XmlReader" />에서 이 메서드를 지원하지 않는 경우</exception>
      <exception cref="T:System.Xml.XmlException">요소가 혼합 콘텐츠를 포함하는 경우</exception>
      <exception cref="T:System.FormatException">요소를 요청한 형식으로 변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>요소를 비동기적으로 읽고 <see langword="BinHex" /> 콘텐츠를 디코딩합니다.</summary>
      <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
      <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
      <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
      <returns>버퍼에 쓴 바이트 수입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlReaderSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlReader" /> 비동기 메서드가 호출되었습니다. 이 경우 “비동기 메서드를 사용하려면 XmlReaderSettings.Async를 true로 설정하세요.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean">
      <summary>현재 요소를 읽고 콘텐츠를 <see cref="T:System.Boolean" /> 개체로 반환합니다.</summary>
      <returns>요소 콘텐츠에 해당하는 <see cref="T:System.Boolean" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" />가 요소에 배치되지 않은 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.Xml.XmlException">현재 요소에 자식 요소가 포함된 경우  
또는 
요소 콘텐츠를 <see cref="T:System.Boolean" /> 개체로 변환할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">메서드가 <see langword="null" /> 인수를 사용하여 호출된 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean(System.String,System.String)">
      <summary>지정된 로컬 이름과 네임스페이스 URI가 현재 요소의 로컬 이름 및 네임스페이스 URI와 일치하는지 확인한 다음 현재 요소를 읽고 콘텐츠를 <see cref="T:System.Boolean" /> 개체로 반환합니다.</summary>
      <param name="localName">요소의 로컬 이름입니다.</param>
      <param name="namespaceURI">요소의 네임스페이스 URI입니다.</param>
      <returns>요소 콘텐츠에 해당하는 <see cref="T:System.Boolean" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" />가 요소에 배치되지 않은 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.Xml.XmlException">현재 요소에 자식 요소가 포함된 경우  
 또는  
 요소 콘텐츠를 요청한 형식으로 변환할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">메서드가 <see langword="null" /> 인수를 사용하여 호출된 경우</exception>
      <exception cref="T:System.ArgumentException">지정한 로컬 이름과 네임스페이스 URI가 읽고 있는 현재 요소의 로컬 이름 및 네임스페이스 URI와 일치하지 않는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime">
      <summary>현재 요소를 읽고 콘텐츠를 <see cref="T:System.DateTime" /> 개체로 반환합니다.</summary>
      <returns>요소 콘텐츠에 해당하는 <see cref="T:System.DateTime" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" />가 요소에 배치되지 않은 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.Xml.XmlException">현재 요소에 자식 요소가 포함된 경우  
또는 
요소 콘텐츠를 <see cref="T:System.DateTime" /> 개체로 변환할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">메서드가 <see langword="null" /> 인수를 사용하여 호출된 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime(System.String,System.String)">
      <summary>지정된 로컬 이름과 네임스페이스 URI가 현재 요소의 로컬 이름 및 네임스페이스 URI와 일치하는지 확인한 다음 현재 요소를 읽고 콘텐츠를 <see cref="T:System.DateTime" /> 개체로 반환합니다.</summary>
      <param name="localName">요소의 로컬 이름입니다.</param>
      <param name="namespaceURI">요소의 네임스페이스 URI입니다.</param>
      <returns>요소 콘텐츠에 해당하는 <see cref="T:System.DateTime" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" />가 요소에 배치되지 않은 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.Xml.XmlException">현재 요소에 자식 요소가 포함된 경우  
 또는  
 요소 콘텐츠를 요청한 형식으로 변환할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">메서드가 <see langword="null" /> 인수를 사용하여 호출된 경우</exception>
      <exception cref="T:System.ArgumentException">지정한 로컬 이름과 네임스페이스 URI가 읽고 있는 현재 요소의 로컬 이름 및 네임스페이스 URI와 일치하지 않는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal">
      <summary>현재 요소를 읽고 콘텐츠를 <see cref="T:System.Decimal" /> 개체로 반환합니다.</summary>
      <returns>요소 콘텐츠에 해당하는 <see cref="T:System.Decimal" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" />가 요소에 배치되지 않은 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.Xml.XmlException">현재 요소에 자식 요소가 포함된 경우  
또는 
요소 콘텐츠를 <see cref="T:System.Decimal" />로 변환할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">메서드가 <see langword="null" /> 인수를 사용하여 호출된 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal(System.String,System.String)">
      <summary>지정된 로컬 이름과 네임스페이스 URI가 현재 요소의 로컬 이름 및 네임스페이스 URI와 일치하는지 확인한 다음 현재 요소를 읽고 콘텐츠를 <see cref="T:System.Decimal" /> 개체로 반환합니다.</summary>
      <param name="localName">요소의 로컬 이름입니다.</param>
      <param name="namespaceURI">요소의 네임스페이스 URI입니다.</param>
      <returns>요소 콘텐츠에 해당하는 <see cref="T:System.Decimal" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" />가 요소에 배치되지 않은 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.Xml.XmlException">현재 요소에 자식 요소가 포함된 경우  
또는 
요소 콘텐츠를 <see cref="T:System.Decimal" />로 변환할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">메서드가 <see langword="null" /> 인수를 사용하여 호출된 경우</exception>
      <exception cref="T:System.ArgumentException">지정한 로컬 이름과 네임스페이스 URI가 읽고 있는 현재 요소의 로컬 이름 및 네임스페이스 URI와 일치하지 않는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDouble">
      <summary>현재 요소를 읽고 콘텐츠를 배정밀도 부동 소수점 숫자로 반환합니다.</summary>
      <returns>요소 콘텐츠에 해당하는 배정밀도 부동 소수점 숫자입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" />가 요소에 배치되지 않은 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.Xml.XmlException">현재 요소에 자식 요소가 포함된 경우  
 또는  
 요소 콘텐츠를 배정밀도 부동 소수점 숫자로 변환할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">메서드가 <see langword="null" /> 인수를 사용하여 호출된 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDouble(System.String,System.String)">
      <summary>지정된 로컬 이름과 네임스페이스 URI가 현재 요소의 로컬 이름 및 네임스페이스 URI와 일치하는지 확인한 다음 현재 요소를 읽고 콘텐츠를 배정밀도 부동 소수점 숫자로 반환합니다.</summary>
      <param name="localName">요소의 로컬 이름입니다.</param>
      <param name="namespaceURI">요소의 네임스페이스 URI입니다.</param>
      <returns>요소 콘텐츠에 해당하는 배정밀도 부동 소수점 숫자입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" />가 요소에 배치되지 않은 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.Xml.XmlException">현재 요소에 자식 요소가 포함된 경우  
 또는  
 요소 콘텐츠를 요청한 형식으로 변환할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">메서드가 <see langword="null" /> 인수를 사용하여 호출된 경우</exception>
      <exception cref="T:System.ArgumentException">지정한 로컬 이름과 네임스페이스 URI가 읽고 있는 현재 요소의 로컬 이름 및 네임스페이스 URI와 일치하지 않는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsFloat">
      <summary>현재 요소를 읽고 콘텐츠를 단정밀도 부동 소수점 숫자로 반환합니다.</summary>
      <returns>요소 콘텐츠에 해당하는 단정밀도 부동 소수점 숫자입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" />가 요소에 배치되지 않은 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.Xml.XmlException">현재 요소에 자식 요소가 포함된 경우  
 또는  
 요소 콘텐츠를 단정밀도 부동 소수점 숫자로 변환할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">메서드가 <see langword="null" /> 인수를 사용하여 호출된 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsFloat(System.String,System.String)">
      <summary>지정된 로컬 이름과 네임스페이스 URI가 현재 요소의 로컬 이름 및 네임스페이스 URI와 일치하는지 확인한 다음 현재 요소를 읽고 콘텐츠를 단정밀도 부동 소수점 숫자로 반환합니다.</summary>
      <param name="localName">요소의 로컬 이름입니다.</param>
      <param name="namespaceURI">요소의 네임스페이스 URI입니다.</param>
      <returns>요소 콘텐츠에 해당하는 단정밀도 부동 소수점 숫자입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" />가 요소에 배치되지 않은 경우
또는 
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.Xml.XmlException">현재 요소에 자식 요소가 포함된 경우  
 또는  
 요소 콘텐츠를 단정밀도 부동 소수점 숫자로 변환할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">메서드가 <see langword="null" /> 인수를 사용하여 호출된 경우</exception>
      <exception cref="T:System.ArgumentException">지정한 로컬 이름과 네임스페이스 URI가 읽고 있는 현재 요소의 로컬 이름 및 네임스페이스 URI와 일치하지 않는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsInt">
      <summary>현재 요소를 읽고 부호 있는 32비트 정수로 콘텐츠를 반환합니다.</summary>
      <returns>요소 콘텐츠에 해당하는 부호 있는 32비트 정수입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" />가 요소에 배치되지 않은 경우
또는 
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.Xml.XmlException">현재 요소에 자식 요소가 포함된 경우  
 또는  
 요소 콘텐츠를 부호 있는 32비트 정수로 변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsInt(System.String,System.String)">
      <summary>지정된 로컬 이름과 네임스페이스 URI가 현재 요소의 로컬 이름 및 네임스페이스 URI와 일치하는지 확인한 다음 현재 요소를 읽고 콘텐츠를 부호 있는 32비트 정수로 반환합니다.</summary>
      <param name="localName">요소의 로컬 이름입니다.</param>
      <param name="namespaceURI">요소의 네임스페이스 URI입니다.</param>
      <returns>요소 콘텐츠에 해당하는 부호 있는 32비트 정수입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" />가 요소에 배치되지 않은 경우
또는 
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.Xml.XmlException">현재 요소에 자식 요소가 포함된 경우  
 또는  
 요소 콘텐츠를 부호 있는 32비트 정수로 변환할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">메서드가 <see langword="null" /> 인수를 사용하여 호출된 경우</exception>
      <exception cref="T:System.ArgumentException">지정한 로컬 이름과 네임스페이스 URI가 읽고 있는 현재 요소의 로컬 이름 및 네임스페이스 URI와 일치하지 않는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsLong">
      <summary>현재 요소를 읽고 부호 있는 64비트 정수로 콘텐츠를 반환합니다.</summary>
      <returns>요소 콘텐츠에 해당하는 부호 있는 64비트 정수입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" />가 요소에 배치되지 않은 경우
또는 
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.Xml.XmlException">현재 요소에 자식 요소가 포함된 경우  
 또는  
 요소 콘텐츠를 부호 있는 64비트 정수로 변환할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">메서드가 <see langword="null" /> 인수를 사용하여 호출된 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsLong(System.String,System.String)">
      <summary>지정된 로컬 이름 및 네임스페이스 URI가 현재 요소의 로컬 이름 및 네임스페이스 URI와 일치하는지 확인한 다음, 현재 요소를 읽고 콘텐츠를 부호 있는 64비트 정수로 반환합니다.</summary>
      <param name="localName">요소의 로컬 이름입니다.</param>
      <param name="namespaceURI">요소의 네임스페이스 URI입니다.</param>
      <returns>요소 콘텐츠에 해당하는 부호 있는 64비트 정수입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" />가 요소에 배치되지 않은 경우
또는 
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.Xml.XmlException">현재 요소에 자식 요소가 포함된 경우  
 또는  
 요소 콘텐츠를 부호 있는 64비트 정수로 변환할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">메서드가 <see langword="null" /> 인수를 사용하여 호출된 경우</exception>
      <exception cref="T:System.ArgumentException">지정한 로컬 이름과 네임스페이스 URI가 읽고 있는 현재 요소의 로컬 이름 및 네임스페이스 URI와 일치하지 않는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObject">
      <summary>현재 요소를 읽고 콘텐츠를 <see cref="T:System.Object" />로 반환합니다.</summary>
      <returns>가장 적합한 형식의 boxed CLR(공용 언어 런타임) 개체입니다. 적합한 CLR 형식은 <see cref="P:System.Xml.XmlReader.ValueType" /> 속성에 따라 결정됩니다. 콘텐츠가 목록 형식이면 이 메서드는 적합한 형식의 boxed 개체 배열을 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" />가 요소에 배치되지 않은 경우
또는 
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.Xml.XmlException">현재 요소에 자식 요소가 포함된 경우  
 또는  
 요소 콘텐츠를 요청한 형식으로 변환할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">메서드가 <see langword="null" /> 인수를 사용하여 호출된 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObject(System.String,System.String)">
      <summary>지정된 로컬 이름과 네임스페이스 URI가 현재 요소의 로컬 이름 및 네임스페이스 URI와 일치하는지 확인한 다음 현재 요소를 읽고 콘텐츠를 <see cref="T:System.Object" />로 반환합니다.</summary>
      <param name="localName">요소의 로컬 이름입니다.</param>
      <param name="namespaceURI">요소의 네임스페이스 URI입니다.</param>
      <returns>가장 적합한 형식의 boxed CLR(공용 언어 런타임) 개체입니다. 적합한 CLR 형식은 <see cref="P:System.Xml.XmlReader.ValueType" /> 속성에 따라 결정됩니다. 콘텐츠가 목록 형식이면 이 메서드는 적합한 형식의 boxed 개체 배열을 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" />가 요소에 배치되지 않은 경우
또는 
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.Xml.XmlException">현재 요소에 자식 요소가 포함된 경우  
 또는  
 요소 콘텐츠를 요청한 형식으로 변환할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">메서드가 <see langword="null" /> 인수를 사용하여 호출된 경우</exception>
      <exception cref="T:System.ArgumentException">지정한 로컬 이름과 네임스페이스 URI가 읽고 있는 현재 요소의 로컬 이름 및 네임스페이스 URI와 일치하지 않는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObjectAsync">
      <summary>현재 요소를 비동기적으로 읽고 콘텐츠를 <see cref="T:System.Object" />로 반환합니다.</summary>
      <returns>가장 적합한 형식의 boxed CLR(공용 언어 런타임) 개체입니다. 적합한 CLR 형식은 <see cref="P:System.Xml.XmlReader.ValueType" /> 속성에 따라 결정됩니다. 콘텐츠가 목록 형식이면 이 메서드는 적합한 형식의 boxed 개체 배열을 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlReaderSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlReader" /> 비동기 메서드가 호출되었습니다. 이 경우 “비동기 메서드를 사용하려면 XmlReaderSettings.Async를 true로 설정하세요.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsString">
      <summary>현재 요소를 읽고 콘텐츠를 <see cref="T:System.String" /> 개체로 반환합니다.</summary>
      <returns>요소 콘텐츠에 해당하는 <see cref="T:System.String" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" />가 요소에 배치되지 않은 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.Xml.XmlException">현재 요소에 자식 요소가 포함된 경우  
또는 
요소 콘텐츠를 <see cref="T:System.String" /> 개체로 변환할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">메서드가 <see langword="null" /> 인수를 사용하여 호출된 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)">
      <summary>지정된 로컬 이름과 네임스페이스 URI가 현재 요소의 로컬 이름 및 네임스페이스 URI와 일치하는지 확인한 다음 현재 요소를 읽고 콘텐츠를 <see cref="T:System.String" /> 개체로 반환합니다.</summary>
      <param name="localName">요소의 로컬 이름입니다.</param>
      <param name="namespaceURI">요소의 네임스페이스 URI입니다.</param>
      <returns>요소 콘텐츠에 해당하는 <see cref="T:System.String" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" />가 요소에 배치되지 않은 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.Xml.XmlException">현재 요소에 자식 요소가 포함된 경우  
또는 
요소 콘텐츠를 <see cref="T:System.String" /> 개체로 변환할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">메서드가 <see langword="null" /> 인수를 사용하여 호출된 경우</exception>
      <exception cref="T:System.ArgumentException">지정한 로컬 이름과 네임스페이스 URI가 읽고 있는 현재 요소의 로컬 이름 및 네임스페이스 URI와 일치하지 않는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsStringAsync">
      <summary>현재 요소를 비동기적으로 읽고 콘텐츠를 <see cref="T:System.String" /> 개체로 반환합니다.</summary>
      <returns>요소 콘텐츠에 해당하는 <see cref="T:System.String" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlReaderSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlReader" /> 비동기 메서드가 호출되었습니다. 이 경우 “비동기 메서드를 사용하려면 XmlReaderSettings.Async를 true로 설정하세요.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString">
      <summary>텍스트 전용 요소를 읽습니다. 그러나 이 연산을 더 간단하게 처리하는 방법을 제공하는 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString" /> 메서드를 대신 사용하는 것이 좋습니다.</summary>
      <returns>읽은 요소에 들어 있는 텍스트입니다. 요소가 비어 있으면 빈 문자열입니다.</returns>
      <exception cref="T:System.Xml.XmlException">다음 콘텐츠 노드가 시작 태그가 아니거나 찾은 요소에 간단한 텍스트 값이 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString(System.String)">
      <summary>텍스트 전용 요소를 읽기 전에 찾은 요소의 <see cref="P:System.Xml.XmlReader.Name" /> 속성이 지정된 문자열과 일치하는지 확인합니다. 그러나 이 연산을 더 간단하게 처리하는 방법을 제공하는 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString" /> 메서드를 대신 사용하는 것이 좋습니다.</summary>
      <param name="name">확인할 이름입니다.</param>
      <returns>읽은 요소에 들어 있는 텍스트입니다. 요소가 비어 있으면 빈 문자열입니다.</returns>
      <exception cref="T:System.Xml.XmlException">다음 콘텐츠 노드가 시작 태그가 아닌 경우, <see langword="Name" /> 요소가 지정된 인수와 일치하지 않는 경우 또는 찾은 요소에 간단한 텍스트 값이 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString(System.String,System.String)">
      <summary>텍스트 전용 요소를 읽기 전에 찾은 요소의 <see cref="P:System.Xml.XmlReader.LocalName" /> 및 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 속성이 지정된 문자열과 일치하는지 확인합니다. 그러나 이 연산을 더 간단하게 처리하는 방법을 제공하는 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)" /> 메서드를 대신 사용하는 것이 좋습니다.</summary>
      <param name="localname">확인할 로컬 이름입니다.</param>
      <param name="ns">확인할 네임스페이스 URI입니다.</param>
      <returns>읽은 요소에 들어 있는 텍스트입니다. 요소가 비어 있으면 빈 문자열입니다.</returns>
      <exception cref="T:System.Xml.XmlException">다음 콘텐츠 노드가 시작 태그가 아닌 경우, <see langword="LocalName" /> 또는 <see langword="NamespaceURI" /> 요소가 지정된 인수와 일치하지 않는 경우 또는 찾은 요소에 간단한 텍스트 값이 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadEndElement">
      <summary>현재 콘텐츠 노드가 끝 태그인지 확인하고 판독기를 다음 노드로 이동합니다.</summary>
      <exception cref="T:System.Xml.XmlException">현재 노드가 끝 태그가 아니거나 입력 스트림에 잘못된 XML이 있는 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadInnerXml">
      <summary>파생 클래스에서 재정의되면 태그를 포함한 모든 콘텐츠를 문자열로 읽습니다.</summary>
      <returns>태그를 포함한 모든 현재 노드의 XML 콘텐츠입니다. 현재 노드에 자식이 없으면 빈 문자열이 반환됩니다.  
 현재 노드가 요소나 특성이 아니면 빈 문자열이 반환됩니다.</returns>
      <exception cref="T:System.Xml.XmlException">XML의 형식이 잘못되었거나 XML을 구문 분석하는 동안 오류가 발생한 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadInnerXmlAsync">
      <summary>태그를 포함한 모든 콘텐츠를 문자열로 비동기적으로 읽습니다.</summary>
      <returns>태그를 포함한 모든 현재 노드의 XML 콘텐츠입니다. 현재 노드에 자식이 없으면 빈 문자열이 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlReaderSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlReader" /> 비동기 메서드가 호출되었습니다. 이 경우 “비동기 메서드를 사용하려면 XmlReaderSettings.Async를 true로 설정하세요.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadOuterXml">
      <summary>파생 클래스에서 재정의되면 태그를 포함하여 이 노드 및 모든 자식 노드를 나타내는 콘텐츠를 읽습니다.</summary>
      <returns>판독기가 Element 또는 Attribute 노드에 배치되면 이 메서드는 태그를 포함해 현재 노드와 모든 자식 노드의 xml 콘텐츠를 모두 반환하고, 그렇지 않으면 빈 문자열을 반환합니다.</returns>
      <exception cref="T:System.Xml.XmlException">XML의 형식이 잘못되었거나 XML을 구문 분석하는 동안 오류가 발생한 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadOuterXmlAsync">
      <summary>이 노드 및 이 노드의 모든 자식을 나타내는 태그를 포함한 콘텐츠를 비동기적으로 읽습니다.</summary>
      <returns>판독기가 Element 또는 Attribute 노드에 배치되면 이 메서드는 태그를 포함해 현재 노드와 모든 자식 노드의 xml 콘텐츠를 모두 반환하고, 그렇지 않으면 빈 문자열을 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlReaderSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlReader" /> 비동기 메서드가 호출되었습니다. 이 경우 “비동기 메서드를 사용하려면 XmlReaderSettings.Async를 true로 설정하세요.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement">
      <summary>현재 노드가 요소인지 확인하고 판독기를 다음 노드로 이동합니다.</summary>
      <exception cref="T:System.Xml.XmlException">입력 스트림에 잘못된 XML이 있는 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String)">
      <summary>현재 콘텐츠 노드가 지정된 <see cref="P:System.Xml.XmlReader.Name" />을 가진 요소인지 확인하고 판독기를 다음 노드로 이동합니다.</summary>
      <param name="name">요소의 정규화된 이름입니다.</param>
      <exception cref="T:System.Xml.XmlException">입력 스트림에 잘못된 XML이 있는 경우  
또는 
이 요소의 <see cref="P:System.Xml.XmlReader.Name" />는 주어진 <paramref name="name" />에 매치되지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)">
      <summary>현재 콘텐츠 노드가 지정된 <see cref="P:System.Xml.XmlReader.LocalName" /> 및 <see cref="P:System.Xml.XmlReader.NamespaceURI" />가 있는 요소인지 확인하고 판독기를 다음 노드로 이동합니다.</summary>
      <param name="localname">요소의 로컬 이름입니다.</param>
      <param name="ns">요소의 네임스페이스 URI입니다.</param>
      <exception cref="T:System.Xml.XmlException">입력 스트림에 잘못된 XML이 있는 경우  
또는 
검색된 요소의 <see cref="P:System.Xml.XmlReader.LocalName" /> 및 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 속성은 주어진 인수와 일치하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.ReadState">
      <summary>파생 클래스에서 재정의되면 판독기의 상태를 가져옵니다.</summary>
      <returns>판독기 상태를 지정하는 열거형 값 중 하나입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadString">
      <summary>파생 클래스에서 재정의되면 요소 또는 text 노드의 내용을 문자열로 읽습니다. 그러나 이 연산을 더 간단하게 처리하는 방법을 제공하는 <see cref="Overload:System.Xml.XmlReader.ReadElementContentAsString" /> 메서드를 대신 사용하는 것이 좋습니다.</summary>
      <returns>요소의 내용이나 빈 문자열입니다.</returns>
      <exception cref="T:System.Xml.XmlException">XML을 구문 분석하는 동안 오류가 발생했습니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadSubtree">
      <summary>현재 노드와 해당 하위 노드 전체를 읽는 데 사용되는 새 <see langword="XmlReader" /> 인스턴스를 반환합니다.</summary>
      <returns>
        <see cref="F:System.Xml.ReadState.Initial" />로 설정된 새로운 XML 판독기 인스턴스입니다. <see cref="M:System.Xml.XmlReader.Read" /> 메서드를 호출하면 <see cref="M:System.Xml.XmlReader.ReadSubtree" /> 메서드를 호출하기 전에 현재 노드에 새 판독기가 배치됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">XML reader가 요소에 배치되지 않은 상태에서 이 메서드를 호출한 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToDescendant(System.String)">
      <summary>지정된 정규화 이름을 사용하는 다음 하위 요소로 <see cref="T:System.Xml.XmlReader" />를 이동합니다.</summary>
      <param name="name">판독기를 이동할 요소의 정규화된 이름입니다.</param>
      <returns>일치하는 하위 요소가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 일치하는 하위 요소가 없으면 요소의 끝 태그, 즉 <see cref="T:System.Xml.XmlReader" />이 <see langword="XmlNodeType.EndElement" />인 태그에 <see cref="P:System.Xml.XmlReader.NodeType" />가 배치됩니다.  
<see cref="T:System.Xml.XmlReader" />를 호출했을 때 <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String)" />가 요소에 배치되어 있지 않으면 이 메서드가 <see langword="false" />를 반환하고 <see cref="T:System.Xml.XmlReader" />의 위치는 변경되지 않습니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.ArgumentException">매개 변수가 빈 문자열인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)">
      <summary>지정된 로컬 이름과 네임스페이스 URI를 사용하는 다음 하위 요소로 <see cref="T:System.Xml.XmlReader" />를 이동합니다.</summary>
      <param name="localName">판독기를 이동할 요소의 로컬 이름입니다.</param>
      <param name="namespaceURI">판독기를 이동할 하위 요소의 네임스페이스 URI입니다.</param>
      <returns>일치하는 하위 요소가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 일치하는 하위 요소가 없으면 요소의 끝 태그, 즉 <see cref="T:System.Xml.XmlReader" />이 <see langword="XmlNodeType.EndElement" />인 태그에 <see cref="P:System.Xml.XmlReader.NodeType" />가 배치됩니다.  
<see cref="T:System.Xml.XmlReader" />를 호출했을 때 <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)" />가 요소에 배치되어 있지 않으면 이 메서드가 <see langword="false" />를 반환하고 <see cref="T:System.Xml.XmlReader" />의 위치는 변경되지 않습니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.ArgumentNullException">두 매개 변수 값이 모두 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToFollowing(System.String)">
      <summary>지정된 정규화된 이름의 요소를 찾을 때까지 읽습니다.</summary>
      <param name="name">요소의 정규화된 이름입니다.</param>
      <returns>일치하는 요소가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />이고 <see cref="T:System.Xml.XmlReader" />가 파일 끝에 도달합니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.ArgumentException">매개 변수가 빈 문자열인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToFollowing(System.String,System.String)">
      <summary>지정된 로컬 이름 및 네임스페이스 URI를 사용하는 요소를 찾을 때까지 읽습니다.</summary>
      <param name="localName">요소의 로컬 이름입니다.</param>
      <param name="namespaceURI">요소의 네임스페이스 URI입니다.</param>
      <returns>일치하는 요소가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />이고 <see cref="T:System.Xml.XmlReader" />가 파일 끝에 도달합니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.ArgumentNullException">두 매개 변수 값이 모두 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String)">
      <summary>지정된 정규화 이름을 사용하는 다음 형제 요소로 <see langword="XmlReader" />를 이동합니다.</summary>
      <param name="name">판독기를 이동할 형제 요소의 정규화된 이름입니다.</param>
      <returns>일치하는 형제 요소가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 일치하는 형제 요소가 없으면 부모 요소의 끝 태그, 즉 <see cref="P:System.Xml.XmlReader.NodeType" />이 <see langword="XmlNodeType.EndElement" />인 태그에 <see langword="XmlReader" />가 배치됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.ArgumentException">매개 변수가 빈 문자열인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)">
      <summary>지정된 로컬 이름과 네임스페이스 URI를 사용하는 다음 형제 요소로 <see langword="XmlReader" />를 이동합니다.</summary>
      <param name="localName">판독기를 이동할 형제 요소의 로컬 이름입니다.</param>
      <param name="namespaceURI">판독기를 이동할 형제 요소의 네임스페이스 URI입니다.</param>
      <returns>일치하는 형제 요소가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 일치하는 형제 요소가 없으면 부모 요소의 끝 태그, 즉 <see cref="P:System.Xml.XmlReader.NodeType" />이 <see langword="XmlNodeType.EndElement" />인 태그에 <see langword="XmlReader" />가 배치됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.ArgumentNullException">두 매개 변수 값이 모두 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)">
      <summary>XML 문서에 포함된 큰 텍스트 스트림을 읽습니다.</summary>
      <param name="buffer">텍스트 콘텐츠를 쓸 버퍼 역할을 하는 문자 배열입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
      <param name="index">
        <see cref="T:System.Xml.XmlReader" />가 버퍼 내에서 결과 복사를 시작할 수 있는 오프셋입니다.</param>
      <param name="count">버퍼에 복사할 최대 문자 수입니다. 이 메서드는 복사된 실제 문자 수를 반환합니다.</param>
      <returns>버퍼로 읽어온 문자 수입니다. 텍스트 콘텐츠가 더 이상 없으면 0이 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">현재 노드에 값이 없는 경우, 즉 <see cref="P:System.Xml.XmlReader.HasValue" />가 <see langword="false" />인 경우
또는 
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">구현된 <see cref="T:System.Xml.XmlReader" />에서 이 메서드를 지원하지 않는 경우</exception>
      <exception cref="T:System.Xml.XmlException">XML 데이터가 올바른 형식이 아닌 경우</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadValueChunkAsync(System.Char[],System.Int32,System.Int32)">
      <summary>XML 문서에 포함된 큰 텍스트 스트림을 비동기적으로 읽습니다.</summary>
      <param name="buffer">텍스트 콘텐츠를 쓸 버퍼 역할을 하는 문자 배열입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
      <param name="index">
        <see cref="T:System.Xml.XmlReader" />가 버퍼 내에서 결과 복사를 시작할 수 있는 오프셋입니다.</param>
      <param name="count">버퍼에 복사할 최대 문자 수입니다. 이 메서드는 복사된 실제 문자 수를 반환합니다.</param>
      <returns>버퍼로 읽어온 문자 수입니다. 텍스트 콘텐츠가 더 이상 없으면 0이 반환됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlReaderSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlReader" /> 비동기 메서드가 호출되었습니다. 이 경우 “비동기 메서드를 사용하려면 XmlReaderSettings.Async를 true로 설정하세요.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ResolveEntity">
      <summary>파생 클래스에서 재정의되면 <see langword="EntityReference" /> 노드에 대한 엔터티 참조를 확인합니다.</summary>
      <exception cref="T:System.InvalidOperationException">판독기가 <see langword="EntityReference" /> 노드에 배치되지 않고 판독기의 이 구현에서 엔터티를 확인할 수 없는 경우(<see cref="P:System.Xml.XmlReader.CanResolveEntity" />가 <see langword="false" />를 반환하는 경우)
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.SchemaInfo">
      <summary>스키마 유효성 검사의 결과로 현재 노드에 할당된 스키마 정보를 가져옵니다.</summary>
      <returns>현재 노드에 대한 스키마 정보를 포함하는 <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 개체입니다. 스키마 정보는 <see cref="P:System.Xml.XmlReader.ValueType" />(형식화된 값)이 null이 아닌 Element, Attribute 또는 Text 노드에 설정될 수 있습니다.  
현재 노드가 이러한 노드 형식 중 하나가 아니거나, <see langword="XmlReader" /> 인스턴스에서 스키마 정보를 보고하지 않는 경우에는 이 속성이 <see langword="null" />을 반환합니다.  
<see cref="T:System.Xml.XmlTextReader" /> 또는 <see cref="T:System.Xml.XmlValidatingReader" /> 개체에서 이 속성을 호출하면 항상 <see langword="null" />이 반환됩니다. 이러한 <see langword="XmlReader" /> 구현에서는 <see langword="SchemaInfo" /> 속성을 통해 스키마 정보를 노출하지 않습니다.  
   
 요소에 대한 PSVI(스키마 유효성 검사 이후 정보 집합)을 가져와야 하는 경우 시작 태그 대신에 요소의 종료 태그에 판독기를 배치합니다. 판독기의 <see langword="SchemaInfo" /> 속성을 통해 PSVI를 가져옵니다. <see cref="Overload:System.Xml.XmlReader.Create" /> 속성을 <see cref="P:System.Xml.XmlReaderSettings.ValidationType" />로 설정하고 <see cref="F:System.Xml.ValidationType.Schema" />를 통해 만든 유효성 검사 판독기는 요소의 종료 태그에 판독기가 배치된 경우에만 요소에 대한 완전한 PSVI가 있습니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Settings">
      <summary>이 <see cref="T:System.Xml.XmlReader" /> 인스턴스를 만드는 데 사용되는 <see cref="T:System.Xml.XmlReaderSettings" /> 개체를 가져옵니다.</summary>
      <returns>이 판독기 인스턴스를 만드는 데 사용되는 <see cref="T:System.Xml.XmlReaderSettings" />입니다. <see cref="Overload:System.Xml.XmlReader.Create" /> 메서드를 사용하여 판독기를 만들지 않은 경우 이 속성은 <see langword="null" />을 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Skip">
      <summary>현재 노드의 자식을 건너뜁니다.</summary>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlReader.SkipAsync">
      <summary>현재 노드의 자식을 비동기적으로 건너뜁니다.</summary>
      <returns>현재 노드입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlReaderSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlReader" /> 비동기 메서드가 호출되었습니다. 이 경우 “비동기 메서드를 사용하려면 XmlReaderSettings.Async를 true로 설정하세요.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.Value">
      <summary>파생 클래스에서 재정의되면 현재 노드의 텍스트 값을 가져옵니다.</summary>
      <returns>노드의 <see cref="P:System.Xml.XmlReader.NodeType" />에 따라 반환되는 값이 달라집니다. 다음 표에서는 반환할 값이 있는 노드 형식을 보여 줍니다. 다른 모든 노드 형식은 <see langword="String.Empty" />를 반환합니다.  
  노드 형식 
  값 
 <see langword="Attribute" /> 특성 값  

 <see langword="CDATA" /> CDATA 섹션 내용입니다.  

 <see langword="Comment" /> 주석의 내용입니다.  

 <see langword="DocumentType" /> 내부 하위 집합입니다.  

 <see langword="ProcessingInstruction" /> 대상을 제외한 전체 내용입니다.  

 <see langword="SignificantWhitespace" /> 혼합된 콘텐츠 모델의 태그 간 공백입니다.  

 <see langword="Text" /> 텍스트 노드의 내용입니다.  

 <see langword="Whitespace" /> 태그 사이의 공백입니다.  

 <see langword="XmlDeclaration" /> 선언 내용입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.ValueType">
      <summary>현재 노드의 CLR(공용 언어 런타임) 형식을 가져옵니다.</summary>
      <returns>노드의 형식화된 값에 해당하는 CLR 형식입니다. 기본값은 <see langword="System.String" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.XmlLang">
      <summary>파생 클래스에서 재정의되면 현재 <see langword="xml:lang" /> 범위를 가져옵니다.</summary>
      <returns>현재 <see langword="xml:lang" /> 범위입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlReader.XmlSpace">
      <summary>파생 클래스에서 재정의되면 현재 <see langword="xml:space" /> 범위를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.XmlSpace" /> 값 중 하나입니다. <see langword="xml:space" /> 범위가 존재하지 않으면 이 속성은 기본적으로 <see langword="XmlSpace.None" />으로 설정됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlReader" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="T:System.Xml.XmlReaderSettings">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> 메서드를 사용하여 만든 <see cref="Overload:System.Xml.XmlReader.Create" /> 개체에서 지원할 기능 집합을 지정합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlReaderSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.Async">
      <summary>비동기 <see cref="T:System.Xml.XmlReader" /> 메서드를 특정 <see cref="T:System.Xml.XmlReader" /> 인스턴스에서 사용할 수 있는지 여부를 가져오거나 설정합니다.</summary>
      <returns>비동기 메서드를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CheckCharacters">
      <summary>문자 검사를 수행할지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>문자 검사를 하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.  
   
 텍스트 데이터를 처리할 경우 <see cref="T:System.Xml.XmlReader" />는 이 속성의 설정에 상관없이 XML 이름 및 텍스트 콘텐츠의 유효성을 항상 검사합니다. <see cref="P:System.Xml.XmlReaderSettings.CheckCharacters" />를 <see langword="false" />로 설정하면 문자 엔터티 참조에 대해 문자 검사가 수행되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.Clone">
      <summary>
        <see cref="T:System.Xml.XmlReaderSettings" /> 인스턴스의 복사본을 만듭니다.</summary>
      <returns>복제된 <see cref="T:System.Xml.XmlReaderSettings" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CloseInput">
      <summary>판독기를 닫을 때 내부 스트림 또는 <see cref="T:System.IO.TextReader" />를 함께 닫을지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>판독기를 닫을 때 내부 스트림 또는 <see cref="T:System.IO.TextReader" />를 함께 닫으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ConformanceLevel">
      <summary>
        <see cref="T:System.Xml.XmlReader" />에 적용할 규칙 수준을 가져오거나 설정합니다.</summary>
      <returns>XML 판독기를 적용할 규칙 수준을 지정하는 열거형 값 중 하나입니다. 기본값은 <see cref="F:System.Xml.ConformanceLevel.Document" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.DtdProcessing">
      <summary>DTD 처리를 결정하는 값을 가져오거나 설정합니다.</summary>
      <returns>DTD 처리를 결정하는 열거형 값 중 하나입니다. 기본값은 <see cref="F:System.Xml.DtdProcessing.Prohibit" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreComments">
      <summary>주석을 무시할지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>주석을 무시하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions">
      <summary>처리 명령을 무시할지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>처리 명령을 무시하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreWhitespace">
      <summary>유효하지 않은 공백을 무시할지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>공백을 무시하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LineNumberOffset">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> 개체의 줄 번호 오프셋을 가져오거나 설정합니다.</summary>
      <returns>줄 번호 오프셋입니다. 기본값은 0입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LinePositionOffset">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> 개체의 줄 위치 오프셋을 가져오거나 설정합니다.</summary>
      <returns>선 위치 오프셋입니다. 기본값은 0입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.MaxCharactersFromEntities">
      <summary>문서에서 엔터티 확장명 후의 최대 허용 문자 수를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>확장된 엔터티의 최대 허용 문자 수입니다. 기본값은 0입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.MaxCharactersInDocument">
      <summary>XML 문서의 최대 허용 문자 수를 나타내는 값을 가져오거나 설정합니다. 값 0은 XML 문서 크기에 제한이 없음을 의미합니다. 0이 아닌 값은 최대 크기(문자 수)를 지정합니다.</summary>
      <returns>XML 문서의 최대 허용 문자 수입니다. 기본값은 0입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.NameTable">
      <summary>원자화된 문자열을 비교하는 데 사용할 <see cref="T:System.Xml.XmlNameTable" />을 가져오거나 설정합니다.</summary>
      <returns>이 <see cref="T:System.Xml.XmlNameTable" /> 개체를 사용하여 만든 모든 <see cref="T:System.Xml.XmlReader" /> 인스턴스에서 사용하는 원자화된 문자열 전체가 저장되는 <see cref="T:System.Xml.XmlReaderSettings" />입니다.  
기본값은 <see langword="null" />입니다. 이 값이 <see langword="null" />이면 <see cref="T:System.Xml.XmlReader" /> 인스턴스는 비어 있는 새 <see cref="T:System.Xml.NameTable" />을 사용합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ProhibitDtd">
      <summary>DTD(문서 형식 정의) 프로세스를 금지할지를 나타내는 값을 가져오거나 설정합니다. 이 속성은 사용되지 않습니다. 대신 <see cref="P:System.Xml.XmlTextReader.DtdProcessing" />를 사용하세요.</summary>
      <returns>DTD 프로세스를 금지하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.Reset">
      <summary>설정 클래스의 멤버를 해당 기본값으로 다시 설정합니다.</summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.Schemas">
      <summary>스키마 유효성 검사를 수행할 때 사용할 <see cref="T:System.Xml.Schema.XmlSchemaSet" />을 가져오거나 설정합니다.</summary>
      <returns>스키마 유효성 검사를 수행할 때 사용할 <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다. 기본값은 빈 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 개체입니다.</returns>
    </member>
    <member name="E:System.Xml.XmlReaderSettings.ValidationEventHandler">
      <summary>판독기에서 유효성 검사 오류가 발견되면 발생합니다.</summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ValidationFlags">
      <summary>스키마 유효성 검사 설정을 나타내는 값을 가져오거나 설정합니다. 이 설정은 스키마(<see langword="ValidationType.Schema" />로 설정된 <see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> 속성) 유효성 검사를 하는 <see cref="T:System.Xml.XmlReader" /> 개체에 적용됩니다.</summary>
      <returns>유효성 검사 옵션을 지정 하는 열거형 값의 비트 조합입니다. <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints" /> 및 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes" />는 기본적으로 사용되고 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema" />, <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation" /> 및 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings" />는 기본적으로 사용되지 않습니다.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ValidationType">
      <summary>
        <see cref="T:System.Xml.XmlReader" />가 읽는 동안 유효성 검사 또는 형식 할당을 수행할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>XmlReader가 판독 시 유효성 검사나 형식 할당을 수행하는지 여부를 나타내는 <see cref="T:System.Xml.ValidationType" /> 값 중 하나입니다. 기본값은 <see langword="ValidationType.None" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.XmlResolver">
      <summary>외부 문서에 액세스하는 데 사용할 <see cref="T:System.Xml.XmlResolver" />를 설정합니다.</summary>
      <returns>외부 문서에 액세스하는 데 사용할 <see cref="T:System.Xml.XmlResolver" />입니다. 값을 <see langword="null" />로 설정하면 <see cref="T:System.Xml.XmlException" />가 외부 리소스에 액세스하려고 할 때 <see cref="T:System.Xml.XmlReader" />이 throw됩니다. 기본값은 자격 증명이 없는 새 <see cref="T:System.Xml.XmlUrlResolver" />입니다.  .NET Framework 4.5.2부터이 설정에 기본값은 <see langword="null" />합니다.</returns>
    </member>
    <member name="T:System.Xml.XmlResolver">
      <summary>URI(Uniform Resource Identifier)로 명명된 외부 XML 리소스를 확인합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlResolver.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlResolver" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.XmlResolver.Credentials">
      <summary>파생 클래스에서 재정의되면 웹 요청을 인증하는 데 사용된 자격 증명을 설정합니다.</summary>
      <returns>웹 요청을 인증하는 데 사용하는 자격 증명입니다. 이 속성이 설정되지 않으면 기본적으로 값은 <see langword="null" />로 설정됩니다. 즉, <see langword="XmlResolver" />에 사용자 자격 증명이 없습니다.</returns>
    </member>
    <member name="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>파생 클래스에서 재정의되면 실제 리소스를 포함하는 개체로 URI를 매핑합니다.</summary>
      <param name="absoluteUri">
        <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />에서 반환된 URI입니다.</param>
      <param name="role">현재 사용되지 않습니다.</param>
      <param name="ofObjectToReturn">반환할 개체의 형식입니다. 현재 버전만 System.IO.Stream 개체를 반환합니다.</param>
      <returns>스트림 개체이거나, 스트림 외의 다른 형식이 지정된 경우 <see langword="null" />입니다.</returns>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" />이 <see langword="Stream" /> 형식이 아닌 경우</exception>
      <exception cref="T:System.UriFormatException">지정된 URI가 절대 URI가 아닌 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="absoluteUri" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Exception">런타임 오류(예: 중단된 서버 연결)가 발생한 경우</exception>
    </member>
    <member name="M:System.Xml.XmlResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary>실제 리소스가 포함된 개체로 URI를 비동기적으로 매핑합니다.</summary>
      <param name="absoluteUri">
        <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />에서 반환된 URI입니다.</param>
      <param name="role">현재 사용되지 않습니다.</param>
      <param name="ofObjectToReturn">반환할 개체의 형식입니다. 현재 버전에서는 <see cref="T:System.IO.Stream" /> 개체만 반환합니다.</param>
      <returns>스트림 개체이거나, 스트림 외의 다른 형식이 지정된 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)">
      <summary>파생 클래스에서 재정의되면 기본 URI 및 상대 URI에서 절대 URI를 확인합니다.</summary>
      <param name="baseUri">상대 URI를 확인하는 데 사용된 기본 URI입니다.</param>
      <param name="relativeUri">확인할 URI입니다. 절대 URI나 상대 URI일 수 있습니다. 절대 URI인 경우 이 값은 <paramref name="baseUri" /> 값을 효율적으로 대체합니다. 상대 URI인 경우 <paramref name="baseUri" />와 결합하여 절대 URI를 만듭니다.</param>
      <returns>절대 URI이거나, 상대 URI를 확인할 수 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="relativeUri" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)">
      <summary>
        <see cref="T:System.IO.Stream" />이 아닌 유형을 반환하기 위해 확인자를 사용합니다.</summary>
      <param name="absoluteUri">URI입니다.</param>
      <param name="type">반환할 형식입니다.</param>
      <returns>
        <paramref name="type" />이 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Xml.XmlSecureResolver">
      <summary>
        <see cref="T:System.Xml.XmlResolver" /> 개체를 래핑하고 내부 <see cref="T:System.Xml.XmlResolver" />에서 액세스 가능한 리소스를 제한하여 <see cref="T:System.Xml.XmlResolver" />의 다른 구현을 보호해 줍니다.</summary>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.String)">
      <summary>
        <see cref="T:System.Xml.XmlSecureResolver" /> 및 제공된 URL을 사용하여 <see cref="T:System.Xml.XmlResolver" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="resolver">
        <see cref="T:System.Xml.XmlSecureResolver" />에서 래핑된 XML 확인자입니다.</param>
      <param name="securityUrl">기본 <see cref="T:System.Security.PermissionSet" />에 적용될 <see cref="T:System.Xml.XmlResolver" />를 만드는 데 사용하는 URL입니다. <see cref="T:System.Xml.XmlSecureResolver" />는 내부 <see cref="M:System.Security.PermissionSet.PermitOnly" />에 대해 <see cref="T:System.Security.PermissionSet" />를 호출하기 전에 생성된 <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" />에 대해 <see cref="T:System.Xml.XmlResolver" />를 호출합니다.</param>
    </member>
    <member name="P:System.Xml.XmlSecureResolver.Credentials">
      <summary>웹 요청을 인증하는 데 사용된 자격 증명을 설정합니다.</summary>
      <returns>웹 요청을 인증하는 데 사용하는 자격 증명입니다. <see cref="T:System.Xml.XmlSecureResolver" />는 내부 <see cref="T:System.Xml.XmlResolver" />에 대해 지정된 자격 증명을 설정합니다. 이 속성이 설정되지 않으면 기본적으로 값은 <see langword="null" />로 설정됩니다. 즉, <see cref="T:System.Xml.XmlSecureResolver" />에 사용자 자격 증명이 없습니다.</returns>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>실제 리소스가 포함된 개체로 URI를 매핑합니다. 이 메서드는 내부 <see cref="T:System.Security.PermissionSet" />에 대해 <see langword="GetEntity" />를 호출하여 리소스를 열기 전에 <see cref="M:System.Security.PermissionSet.PermitOnly" />를 호출하여 해당 생성자에서 만들어진 <see cref="T:System.Xml.XmlResolver" />을 일시적으로 설정합니다.</summary>
      <param name="absoluteUri">
        <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" />에서 반환된 URI입니다.</param>
      <param name="role">현재 사용되지 않습니다.</param>
      <param name="ofObjectToReturn">반환할 개체의 형식입니다. 현재 버전에서는 <see cref="T:System.IO.Stream" /> 개체만 반환합니다.</param>
      <returns>기본 <see cref="T:System.Xml.XmlResolver" />에 대해 <see langword="GetEntity" />를 호출하여 반환된 스트림입니다. <see cref="T:System.IO.Stream" /> 이외의 형식을 지정하면 메서드가 <see langword="null" />을 반환합니다.</returns>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" />이 <see langword="null" /> 또는 <see cref="T:System.IO.Stream" /> 형식이 아닌 경우</exception>
      <exception cref="T:System.UriFormatException">지정된 URI가 절대 URI가 아닌 경우</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="absoluteUri" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Exception">런타임 오류(예: 중단된 서버 연결)가 발생한 경우</exception>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary>실제 리소스가 포함된 개체로 URI를 비동기적으로 매핑합니다.</summary>
      <param name="absoluteUri">
        <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" />에서 반환된 URI입니다.</param>
      <param name="role">현재 사용되지 않습니다.</param>
      <param name="ofObjectToReturn">반환할 개체의 형식입니다. 현재 버전에서는 <see cref="T:System.IO.Stream" /> 개체만 반환합니다.</param>
      <returns>기본 <see cref="T:System.Xml.XmlResolver" />에 대해 <see langword="GetEntity" />를 호출하여 반환된 스트림입니다. <see cref="T:System.IO.Stream" /> 이외의 형식을 지정하면 메서드가 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)">
      <summary>내부 <see cref="T:System.Xml.XmlResolver" />에 대해 <see langword="ResolveUri" />를 호출하여 기본 및 상대 URI에서 절대 URI를 확인합니다.</summary>
      <param name="baseUri">상대 URI를 확인하는 데 사용된 기본 URI입니다.</param>
      <param name="relativeUri">확인할 URI입니다. 절대 URI나 상대 URI일 수 있습니다. 절대 URI인 경우 이 값은 <paramref name="baseUri" /> 값을 효율적으로 대체합니다. 상대 URI인 경우 <paramref name="baseUri" />와 결합하여 절대 URI를 만듭니다.</param>
      <returns>절대 URI이거나, 기본 <see cref="T:System.Xml.XmlResolver" />에 대해 <see langword="ResolveUri" />를 호출하여 반환된 상대 URI를 확인할 수 없는 경우 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="relativeUri" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Xml.XmlSignificantWhitespace">
      <summary>혼합된 내용 노드의 태그 사이에 있는 공백이나 xml:space= 'preserve' 범위 내에 있는 공백을 나타냅니다. 이러한 공백을 유효 공백이라고도 합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlSignificantWhitespace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="strData">노드의 공백 문자입니다.</param>
      <param name="doc">
        <see cref="T:System.Xml.XmlDocument" /> 개체</param>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.CloneNode(System.Boolean)">
      <summary>이 노드의 복제본을 만듭니다.</summary>
      <param name="deep">지정된 노드 아래의 하위 트리를 재귀적으로 복제하려면 <see langword="true" />이고, 노드 자체만 복제하려면 <see langword="false" />입니다. 유효 공백 노드의 경우 복제된 노드에는 항상 매개 변수 설정과 상관 없이 데이터 값이 포함됩니다.</param>
      <returns>복제된 노드입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.LocalName">
      <summary>노드의 로컬 이름을 가져옵니다.</summary>
      <returns>
        <see langword="XmlSignificantWhitespace" /> 노드의 경우 이 속성은 <see langword="#significant-whitespace" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.Name">
      <summary>노드의 정규화된 이름을 가져옵니다.</summary>
      <returns>
        <see langword="XmlSignificantWhitespace" /> 노드의 경우 이 속성은 <see langword="#significant-whitespace" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.NodeType">
      <summary>현재 노드의 형식을 가져옵니다.</summary>
      <returns>
        <see langword="XmlSignificantWhitespace" /> 노드의 경우 이 값은 XmlNodeType.SignificantWhitespace입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.ParentNode">
      <summary>현재 노드의 부모를 가져옵니다.</summary>
      <returns>현재 노드의 <see cref="T:System.Xml.XmlNode" /> 부모 노드입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.PreviousText">
      <summary>이 노드 바로 앞에 있는 텍스트 노드를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.XmlNode" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.Value">
      <summary>노드의 값을 가져오거나 설정합니다.</summary>
      <returns>노드에 있는 공백 문자입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <see langword="Value" />를 잘못된 공백 문자로 설정하는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.WriteContentTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드의 모든 자식을 저장합니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.WriteTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드를 저장합니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="T:System.Xml.XmlSpace">
      <summary>현재 <see langword="xml:space" /> 범위를 지정합니다.</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Default">
      <summary>
        <see langword="xml:space" /> 범위가 <see langword="default" />입니다.</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.None">
      <summary>
        <see langword="xml:space" /> 범위가 없습니다.</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Preserve">
      <summary>
        <see langword="xml:space" /> 범위가 <see langword="preserve" />입니다.</summary>
    </member>
    <member name="T:System.Xml.XmlText">
      <summary>요소나 특성의 텍스트 내용을 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.XmlText.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlText" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="strData">노드의 내용입니다. <see cref="P:System.Xml.XmlText.Value" /> 속성을 참조하십시오.</param>
      <param name="doc">부모 XML 문서입니다.</param>
    </member>
    <member name="M:System.Xml.XmlText.CloneNode(System.Boolean)">
      <summary>이 노드의 복제본을 만듭니다.</summary>
      <param name="deep">지정된 노드 아래의 하위 트리를 재귀적으로 복제하려면 <see langword="true" />이고, 노드 자체만 복제하려면 <see langword="false" />입니다.</param>
      <returns>복제된 노드입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlText.LocalName">
      <summary>노드의 로컬 이름을 가져옵니다.</summary>
      <returns>text 노드의 경우 이 속성은 <see langword="#text" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlText.Name">
      <summary>노드의 정규화된 이름을 가져옵니다.</summary>
      <returns>text 노드의 경우 이 속성은 <see langword="#text" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlText.NodeType">
      <summary>현재 노드의 형식을 가져옵니다.</summary>
      <returns>text 노드의 경우 이 값은 XmlNodeType.Text입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlText.ParentNode">
      <summary>부모를 가질 수 있는 노드의 경우 이 노드의 부모를 가져옵니다.</summary>
      <returns>현재 노드의 부모인 <see langword="XmlNode" />입니다. 노드를 만들고 트리에 추가하지 않은 경우나 트리에서 노드를 제거한 경우 부모는 <see langword="null" />입니다. 다른 모든 노드의 경우에는 노드의 <see cref="P:System.Xml.XmlNode.NodeType" />에 따라 반환되는 값이 달라집니다. 다음 표에서는 <see langword="ParentNode" /> 속성에 대해 가능한 반환 값을 설명합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlText.PreviousText">
      <summary>이 노드 바로 앞에 있는 텍스트 노드를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.XmlNode" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xml.XmlText.SplitText(System.Int32)">
      <summary>지정된 오프셋으로 하나의 노드를 두 개의 노드로 분할합니다. 트리에 있는 이 두 노드는 형제 노드로 유지됩니다.</summary>
      <param name="offset">노드를 분할하는 오프셋입니다.</param>
      <returns>새 노드입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlText.Value">
      <summary>노드의 값을 가져오거나 설정합니다.</summary>
      <returns>텍스트 노드의 내용입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlText.WriteContentTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드의 모든 자식을 저장합니다. <see langword="XmlText" /> 노드는 자식이 없으므로 이 메서드는 어떠한 영향도 끼치지 않습니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="M:System.Xml.XmlText.WriteTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드를 저장합니다.</summary>
      <param name="w">저장할 대상 <see langword="XmlWriter" />입니다.</param>
    </member>
    <member name="T:System.Xml.XmlTextReader">
      <summary>빠르고, 캐시되지 않으며 앞으로만 이동 가능한 XML 데이터 액세스를 제공하는 판독기를 나타냅니다.  
.NET Framework 2.0부터 <see cref="T:System.Xml.XmlReader" /> 클래스를 대신 사용하는 것이 좋습니다.</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor">
      <summary>
        <see langword="XmlTextReader" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream)">
      <summary>지정된 스트림을 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="input">읽을 XML 데이터를 포함하고 있는 스트림입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)">
      <summary>지정된 스트림, <see cref="T:System.Xml.XmlNameTable" />를 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="input">읽을 XML 데이터를 포함하고 있는 스트림입니다.</param>
      <param name="nt">사용할 <see langword="XmlNameTable" />입니다.</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="input" /> 또는 <paramref name="nt" /> 값이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>지정된 스트림, <see cref="T:System.Xml.XmlNodeType" />, <see cref="T:System.Xml.XmlParserContext" />를 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xmlFragment">구문 분석할 XML 조각을 포함하는 스트림입니다.</param>
      <param name="fragType">XML 조각의 <see cref="T:System.Xml.XmlNodeType" />입니다. 또한 조각에 포함되는 사항을 결정합니다. 아래 표를 참조하세요.</param>
      <param name="context">
        <paramref name="xmlFragment" />가 구문 분석될 <see cref="T:System.Xml.XmlParserContext" />입니다. 사용할 <see cref="T:System.Xml.XmlNameTable" />, 인코딩, 네임스페이스 범위, 현재 <c>xml:lang</c> 및 <c>xml:space</c> 범위가 포함됩니다.</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" />이 Element, Attribute 또는 Document <see langword="XmlNodeType" />이 아닌 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlFragment" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)">
      <summary>지정된 <see cref="T:System.Xml.XmlTextReader" />를 사용하여 <see cref="T:System.IO.TextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="input">읽을 XML 데이터를 포함하는 <see langword="TextReader" />입니다.</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)">
      <summary>지정된 <see cref="T:System.Xml.XmlTextReader" /> 및 <see cref="T:System.IO.TextReader" />를 사용하여 <see cref="T:System.Xml.XmlNameTable" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="input">읽을 XML 데이터를 포함하는 <see langword="TextReader" />입니다.</param>
      <param name="nt">사용할 <see langword="XmlNameTable" />입니다.</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="nt" /> 값이 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String)">
      <summary>지정된 파일을 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="url">XML 데이터를 포함하는 파일의 URL입니다. <see cref="P:System.Xml.XmlTextReader.BaseURI" />는 이 값으로 설정됩니다.</param>
      <exception cref="T:System.IO.FileNotFoundException">지정된 파일을 찾을 수 없는 경우</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">파일 이름 또는 디렉터리 부분을 찾을 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="url" />이 빈 문자열인 경우</exception>
      <exception cref="T:System.Net.WebException">원격 파일 이름을 확인할 수 없는 경우  
 또는  
 이 요청을 처리하는 동안 오류가 발생했습니다.</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="url" /> 경로는 유효한 URI가 아닙니다.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)">
      <summary>지정된 URL과 스트림을 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="url">외부 리소스를 확인하는 데 사용할 URL입니다. <see cref="P:System.Xml.XmlTextReader.BaseURI" />는 이 값으로 설정됩니다.</param>
      <param name="input">읽을 XML 데이터를 포함하고 있는 스트림입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)">
      <summary>지정된 URL, 스트림 및 <see cref="T:System.Xml.XmlNameTable" />을 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="url">외부 리소스를 확인하는 데 사용할 URL입니다. <see cref="P:System.Xml.XmlTextReader.BaseURI" />는 이 값으로 설정됩니다. <paramref name="url" />이<see langword="null" />이면 <see langword="BaseURI" />가 <see langword="String.Empty" />로 설정됩니다.</param>
      <param name="input">읽을 XML 데이터를 포함하고 있는 스트림입니다.</param>
      <param name="nt">사용할 <see langword="XmlNameTable" />입니다.</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="input" /> 또는 <paramref name="nt" /> 값이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)">
      <summary>지정된 URL과 <see cref="T:System.IO.TextReader" />를 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="url">외부 리소스를 확인하는 데 사용할 URL입니다. <see cref="P:System.Xml.XmlTextReader.BaseURI" />는 이 값으로 설정됩니다.</param>
      <param name="input">읽을 XML 데이터를 포함하는 <see langword="TextReader" />입니다.</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
      <summary>지정된 URL과 <see cref="T:System.IO.TextReader" /><see cref="T:System.Xml.XmlNameTable" />를 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="url">외부 리소스를 확인하는 데 사용할 URL입니다. <see cref="P:System.Xml.XmlTextReader.BaseURI" />는 이 값으로 설정됩니다. <paramref name="url" />이<see langword="null" />이면 <see langword="BaseURI" />가 <see langword="String.Empty" />로 설정됩니다.</param>
      <param name="input">읽을 XML 데이터를 포함하는 <see langword="TextReader" />입니다.</param>
      <param name="nt">사용할 <see langword="XmlNameTable" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nt" /> 값이 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
      <summary>지정된 파일과 <see cref="T:System.Xml.XmlNameTable" />을 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="url">읽을 XML 데이터를 포함하는 파일의 URL입니다.</param>
      <param name="nt">사용할 <see langword="XmlNameTable" />입니다.</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="nt" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.IO.FileNotFoundException">지정된 파일을 찾을 수 없는 경우</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">파일 이름 또는 디렉터리 부분을 찾을 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="url" />이 빈 문자열인 경우</exception>
      <exception cref="T:System.Net.WebException">원격 파일 이름을 확인할 수 없는 경우  
 또는  
 이 요청을 처리하는 동안 오류가 발생했습니다.</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="url" /> 경로는 유효한 URI가 아닙니다.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>지정된 문자열, <see cref="T:System.Xml.XmlNodeType" />, <see cref="T:System.Xml.XmlParserContext" />를 사용하여 <see cref="T:System.Xml.XmlTextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xmlFragment">구문 분석할 XML 조각을 포함하는 문자열입니다.</param>
      <param name="fragType">XML 조각의 <see cref="T:System.Xml.XmlNodeType" />입니다. 또한 조각 문자열에 포함되는 사항을 결정합니다. 아래 표를 참조하세요.</param>
      <param name="context">
        <paramref name="xmlFragment" />가 구문 분석될 <see cref="T:System.Xml.XmlParserContext" />입니다. 사용할 <see cref="T:System.Xml.XmlNameTable" />, 인코딩, 네임스페이스 범위, 현재 <c>xml:lang</c> 및 <c>xml:space</c> 범위가 포함됩니다.</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" />은 <see langword="Element" />, <see langword="Attribute" /> 또는 <see langword="Document" /><see langword="XmlNodeType" />이 아닙니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlFragment" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.Xml.XmlNameTable)">
      <summary>지정된 <see cref="T:System.Xml.XmlTextReader" />를 사용하여 <see cref="T:System.Xml.XmlNameTable" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="nt">사용할 <see langword="XmlNameTable" />입니다.</param>
    </member>
    <member name="P:System.Xml.XmlTextReader.AttributeCount">
      <summary>현재 노드의 특성 수를 가져옵니다.</summary>
      <returns>현재 노드에 포함된 특성의 수입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.BaseURI">
      <summary>현재 노드의 기본 URI를 가져옵니다.</summary>
      <returns>현재 노드의 기본 URI입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanReadBinaryContent">
      <summary>
        <see cref="T:System.Xml.XmlTextReader" />가 이진 콘텐츠 읽기 메서드를 구현하는지를 나타내는 값을 가져옵니다.</summary>
      <returns>이진 콘텐츠 읽기 메서드를 구현하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see cref="T:System.Xml.XmlTextReader" /> 클래스는 항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanReadValueChunk">
      <summary>
        <see cref="T:System.Xml.XmlTextReader" />가 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 메서드를 구현하는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.XmlTextReader" />가 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 메서드를 구현하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see cref="T:System.Xml.XmlTextReader" /> 클래스는 항상 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanResolveEntity">
      <summary>이 판독기가 엔터티를 구문 분석하고 확인할 수 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>판독기가 엔터티를 구문 분석하고 확인할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see langword="XmlTextReader" /> 클래스는 항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.Close">
      <summary>
        <see cref="P:System.Xml.XmlReader.ReadState" />를 <see langword="Closed" />로 변경합니다.</summary>
    </member>
    <member name="P:System.Xml.XmlTextReader.Depth">
      <summary>XML 문서에서 현재 노드의 수준을 가져옵니다.</summary>
      <returns>XML 문서의 현재 노드 수준입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.DtdProcessing">
      <summary>
        <see cref="T:System.Xml.DtdProcessing" /> 열거형을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.DtdProcessing" /> 열거형입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Encoding">
      <summary>문서의 인코딩을 가져옵니다.</summary>
      <returns>인코딩 값입니다. 인코딩 특성이 없는 경우 바이트 순서 표시가 없으면 기본값은 UTF-8로 설정됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.EntityHandling">
      <summary>판독기가 엔터티를 처리하는 방법을 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.EntityHandling" /> 값 중 하나입니다. <see langword="EntityHandling" />을 지정하지 않으면 기본값이 <see langword="EntityHandling.ExpandCharEntities" />로 설정됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.EOF">
      <summary>판독기가 스트림의 맨 끝에 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>판독기가 스트림의 맨 끝에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)">
      <summary>지정된 인덱스가 있는 특성의 값을 가져옵니다.</summary>
      <param name="i">특성의 인덱스입니다. 인덱스는 0부터 시작합니다. 첫 번째 특성의 인덱스는 0입니다.</param>
      <returns>지정된 특성의 값을 반환합니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 매개 변수가 0보다 작거나 <see cref="P:System.Xml.XmlTextReader.AttributeCount" />보다 크거나 같은 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.String)">
      <summary>지정된 이름이 있는 특성의 값을 가져옵니다.</summary>
      <param name="name">특성의 정규화된 이름입니다.</param>
      <returns>지정된 특성의 값을 반환합니다. 특성이 없으면 <see langword="null" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)">
      <summary>지정된 로컬 이름과 네임스페이스 URI가 있는 특성의 값을 가져옵니다.</summary>
      <param name="localName">특성의 로컬 이름입니다.</param>
      <param name="namespaceURI">특성의 네임스페이스 URI입니다.</param>
      <returns>지정된 특성의 값을 반환합니다. 특성이 없으면 <see langword="null" />이 반환됩니다. 이 메서드는 판독기를 이동하지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>현재 범위 내에 있는 모든 네임스페이스가 포함된 컬렉션을 가져옵니다.</summary>
      <param name="scope">반환할 네임스페이스 노드의 형식을 지정하는 <see cref="T:System.Xml.XmlNamespaceScope" /> 값입니다.</param>
      <returns>현재 범위 내에 있는 모든 네임스페이스가 포함된 <see cref="T:System.Collections.IDictionary" /> 개체입니다. 판독기가 요소에 배치되지 않은 경우에는 네임스페이스가 없는 빈 사전이 반환됩니다.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetRemainder">
      <summary>버퍼링된 XML의 나머지 부분을 가져옵니다.</summary>
      <returns>버퍼링된 XML 의 나머지 부분을 포함하는 <see cref="T:System.IO.TextReader" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.HasLineInfo">
      <summary>클래스에서 줄 정보를 반환할 수 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>클래스에서 줄 정보를 반환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.HasValue">
      <summary>현재 노드에 <see langword="String.Empty" /> 이외의 <see cref="P:System.Xml.XmlTextReader.Value" />를 사용할 수 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 판독기가 위치한 노드에 <see langword="Value" />가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.IsDefault">
      <summary>현재 노드가 DTD 또는 스키마에 정의된 기본값에서 생성된 특성인지를 나타내는 값을 얻습니다.</summary>
      <returns>이 속성은 항상 <see langword="false" />를 반환합니다. <see cref="T:System.Xml.XmlTextReader" />는 기본 특성을 확장하지 않습니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.IsEmptyElement">
      <summary>현재 노드가 빈 요소(예: <c>&lt;MyElement/&gt;</c>)인지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" /> 현재 노드가 요소 이면 (<see cref="P:System.Xml.XmlTextReader.NodeType" /> equals <see langword="XmlNodeType.Element" />)로 끝나는 <c>/ &gt;</c>고, 그렇지 않으면 <see langword="false" />합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LineNumber">
      <summary>현재 줄 번호를 가져옵니다.</summary>
      <returns>현재 줄 번호입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LinePosition">
      <summary>현재 줄 위치를 가져옵니다.</summary>
      <returns>현재 줄 위치입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LocalName">
      <summary>현재 노드의 로컬 이름을 가져옵니다.</summary>
      <returns>접두사를 제거한 현재 노드의 이름입니다. 예를 들어 <see langword="LocalName" /> 됩니다 <see langword="book" /> 요소에 대 한 <c>&lt;예&gt;</c>합니다.  
이름이 없는 노드 형식(예: <see langword="Text" />, <see langword="Comment" /> 등)의 경우 이 속성은 <see langword="String.Empty" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.LookupNamespace(System.String)">
      <summary>현재 요소의 범위에서 네임스페이스 접두사를 확인합니다.</summary>
      <param name="prefix">확인할 네임스페이스 URI의 접두사입니다. 기본 네임스페이스와 일치시키려면 빈 문자열을 전달합니다. 이 문자열은 원자화할 필요가 없습니다.</param>
      <returns>접두사가 매핑되는 네임스페이스 URI이거나 일치하는 접두사가 없는 경우 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Xml.XmlTextReader.Namespaces" /> 속성이 <see langword="true" />로 설정되어 있고 <paramref name="prefix" /> 값이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.Int32)">
      <summary>지정된 인덱스가 있는 특성으로 이동합니다.</summary>
      <param name="i">특성의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 매개 변수가 0보다 작거나 <see cref="P:System.Xml.XmlReader.AttributeCount" />보다 크거나 같은 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.String)">
      <summary>지정된 이름이 있는 특성으로 이동합니다.</summary>
      <param name="name">특성의 정규화된 이름입니다.</param>
      <returns>특성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see langword="false" />이면, 판독기의 위치는 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)">
      <summary>지정된 로컬 이름과 네임스페이스 URI가 있는 특성으로 이동합니다.</summary>
      <param name="localName">특성의 로컬 이름입니다.</param>
      <param name="namespaceURI">특성의 네임스페이스 URI입니다.</param>
      <returns>특성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see langword="false" />이면, 판독기의 위치는 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToElement">
      <summary>현재 특성 노드가 포함된 요소로 이동합니다.</summary>
      <returns>판독기가 특성에 있으면(특성이 있는 요소로 판독기가 이동하면) <see langword="true" />이고, 판독기가 특성에 없으면(판독기의 위치가 바뀌지 않으면) <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToFirstAttribute">
      <summary>첫 번째 특성으로 이동합니다.</summary>
      <returns>특성이 있으면(판독기가 첫 번째 특성으로 이동하면) <see langword="true" />이고, 그렇지 않으면(판독기의 위치가 바뀌지 않으면) <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToNextAttribute">
      <summary>다음 특성으로 이동합니다.</summary>
      <returns>다음 특성이 있으면 <see langword="true" />이고, 더 이상 특성이 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Name">
      <summary>현재 노드의 정규화된 이름을 가져옵니다.</summary>
      <returns>현재 노드의 정규화된 이름입니다. 예를 들어 <see langword="Name" /> 됩니다 <see langword="bk:book" /> 요소에 대 한 <c>&lt;예&gt;</c>합니다.  
반환되는 이름은 다음과 같이 노드의 <see cref="P:System.Xml.XmlTextReader.NodeType" />에 따라 달라집니다. 다음 노드 형식은 나열된 값을 반환합니다. 기타 모든 노드 형식은 빈 문자열을 반환합니다.  
  노드 형식 
  name 
 <see langword="Attribute" /> 특성 이름입니다.  

 <see langword="DocumentType" /> 문서 형식 이름입니다.  

 <see langword="Element" /> 태그 이름입니다.  

 <see langword="EntityReference" /> 참조된 엔터티의 이름입니다.  

 <see langword="ProcessingInstruction" /> 처리 명령의 대상입니다.  

 <see langword="XmlDeclaration" /> 리터럴 문자열 <see langword="xml" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Namespaces">
      <summary>네임스페이스 지원 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>네임스페이스를 지원하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">읽기 작업이 발생한 후 이 속성을 설정하는 경우(<see cref="P:System.Xml.XmlTextReader.ReadState" />가 <see langword="ReadState.Initial" />이 아닌 경우)</exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.NamespaceURI">
      <summary>W3C 네임스페이스 사양에서 정의된 것처럼 판독기가 있는 노드의 네임스페이스 URI를 가져옵니다.</summary>
      <returns>현재 노드의 네임스페이스 URI이거나 빈 문자열입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.NameTable">
      <summary>이 구현과 관련된 <see cref="T:System.Xml.XmlNameTable" />을 가져옵니다.</summary>
      <returns>노드 내에 있는 문자열의 원자화된 버전을 가져올 수 있도록 하는 <see langword="XmlNameTable" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.NodeType">
      <summary>현재 노드의 형식을 가져옵니다.</summary>
      <returns>현재 노드의 형식을 나타내는 <see cref="T:System.Xml.XmlNodeType" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Normalization">
      <summary>공백과 특성 값을 정규화할지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>정규화하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">판독기를 닫은 상태에서 이 속성을 설정하는 경우(<see cref="P:System.Xml.XmlTextReader.ReadState" />가 <see langword="ReadState.Closed" />인 경우)</exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.Prefix">
      <summary>현재 노드와 관련된 네임스페이스 접두사를 가져옵니다.</summary>
      <returns>현재 노드와 관련된 네임스페이스 접두사입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.ProhibitDtd">
      <summary>DTD 처리를 허용할지를 나타내는 값을 가져오거나 설정합니다. 이 속성은 사용되지 않습니다. 대신 <see cref="P:System.Xml.XmlTextReader.DtdProcessing" />를 사용하세요.</summary>
      <returns>DTD 처리를 허용하지 않으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.QuoteChar">
      <summary>특성 노드의 값을 묶을 때 사용하는 인용 부호 문자를 가져옵니다.</summary>
      <returns>특성 노드의 값을 묶을 때 사용하는 인용 부호 문자입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.Read">
      <summary>스트림에서 다음 노드를 읽습니다.</summary>
      <returns>다음 노드를 읽었으면 <see langword="true" />이고, 더 이상 읽을 노드가 없으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Xml.XmlException">XML을 구문 분석하는 동안 오류가 발생했습니다.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadAttributeValue">
      <summary>특성 값을 하나 이상의 <see langword="Text" />, <see langword="EntityReference" /> 또는 <see langword="EndEntity" /> 노드로 구문 분석합니다.</summary>
      <returns>반환할 노드가 있는 경우 <see langword="true" />입니다.  
 처음 호출할 때 판독기가 특성 노드에 있거나 모든 특성 값을 읽은 경우 <see langword="false" />입니다.  
<c>misc=""</c>와 같은 빈 특성은 <see langword="true" />를 반환하며 이것은 단일 노드가 <see langword="String.Empty" />의 값을 갖는 것을 의미합니다.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Base64를 디코딩하고 디코딩된 이진 바이트를 반환합니다.</summary>
      <param name="array">텍스트 콘텐츠를 쓸 버퍼 역할을 하는 문자 배열입니다.</param>
      <param name="offset">메서드가 버퍼에 쓰기를 시작할 수 있는 위치를 지정하는 배열의 0부터 시작하는 인덱스입니다.</param>
      <param name="len">버퍼에 쓸 바이트 수입니다.</param>
      <returns>버퍼에 쓴 바이트 수입니다.</returns>
      <exception cref="T:System.Xml.XmlException">Base64 시퀀스가 잘못된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 값이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> &lt; 0, <paramref name="len" /> &lt; 0, <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />인 경우.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <see langword="BinHex" />를 디코딩하고 디코딩된 이진 바이트를 반환합니다.</summary>
      <param name="array">디코딩된 이진 바이트를 쓸 버퍼 역할을 하는 바이트 배열입니다.</param>
      <param name="offset">메서드가 버퍼에 쓰기를 시작할 수 있는 위치를 지정하는 배열의 0부터 시작하는 인덱스입니다.</param>
      <param name="len">버퍼에 쓸 바이트 수입니다.</param>
      <returns>버퍼에 쓴 바이트 수입니다.</returns>
      <exception cref="T:System.Xml.XmlException">
        <see langword="BinHex" /> 시퀀스가 잘못된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 값이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> &lt; 0, <paramref name="len" /> &lt; 0, <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />인 경우.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
      <summary>요소의 텍스트 콘텐츠를 문자 버퍼로 읽습니다. 이 메서드는 뒤이어 호출하면 포함된 텍스트의 큰 스트림을 읽도록 디자인되었습니다.</summary>
      <param name="buffer">텍스트 콘텐츠를 쓸 버퍼 역할을 하는 문자 배열입니다.</param>
      <param name="index">메서드가 텍스트 콘텐츠 쓰기를 시작할 수 있는 <paramref name="buffer" /> 내 위치입니다.</param>
      <param name="count">
        <paramref name="buffer" />로 쓸 문자 수입니다.</param>
      <returns>읽을 문자 수입니다. 판독기가 요소에 배치되지 않았거나 현재 컨텍스트에 반환할 텍스트 콘텐츠가 없는 경우 반환 값은 <see langword="0" />이 될 수 있습니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" />가 <paramref name="buffer" />에 지정된 공간(버퍼 크기 - <paramref name="index" />)보다 큽니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />
        <see langword="&lt; 0" /> 또는 <paramref name="count" /><see langword="&lt; 0" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>콘텐츠를 읽고 <see langword="Base64" /> 디코딩된 이진 바이트를 반환합니다.</summary>
      <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
      <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
      <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
      <returns>버퍼에 쓴 바이트 수입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">현재 노드에서 <see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />를 지원하지 않는 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>콘텐츠를 읽고 <see langword="BinHex" /> 디코딩된 이진 바이트를 반환합니다.</summary>
      <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
      <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
      <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
      <returns>버퍼에 쓴 바이트 수입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />가 현재 노드에서 지원되지 않습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">구현된 <see cref="T:System.Xml.XmlTextReader" />에서 이 메서드를 지원하지 않는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>요소를 읽고 Base64 콘텐츠를 디코딩합니다.</summary>
      <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
      <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
      <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
      <returns>버퍼에 쓴 바이트 수입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">현재 노드가 요소 노드가 아닌 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">구현된 <see cref="T:System.Xml.XmlTextReader" />에서 이 메서드를 지원하지 않는 경우</exception>
      <exception cref="T:System.Xml.XmlException">요소가 혼합 콘텐츠를 포함하는 경우</exception>
      <exception cref="T:System.FormatException">요소를 요청한 형식으로 변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>요소를 읽고 <see langword="BinHex" /> 콘텐츠를 디코딩합니다.</summary>
      <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
      <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
      <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
      <returns>버퍼에 쓴 바이트 수입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">현재 노드가 요소 노드가 아닌 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">구현된 <see cref="T:System.Xml.XmlReader" />에서 이 메서드를 지원하지 않는 경우</exception>
      <exception cref="T:System.Xml.XmlException">요소가 혼합 콘텐츠를 포함하는 경우</exception>
      <exception cref="T:System.FormatException">요소를 요청한 형식으로 변환할 수 없는 경우</exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.ReadState">
      <summary>판독기의 상태를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.ReadState" /> 값 중 하나입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadString">
      <summary>요소 또는 텍스트 노드의 내용을 문자열로 읽습니다.</summary>
      <returns>요소 또는 텍스트 노드의 내용입니다. 판독기가 요소 또는 텍스트 노드 이외의 위치에 있거나 현재 컨텍스트에 반환할 텍스트 콘텐츠가 없는 경우 이것은 빈 문자열입니다.  
 <see langword="Note:" /> 텍스트 노드는 요소 또는 특성 텍스트 노드입니다.</returns>
      <exception cref="T:System.Xml.XmlException">XML을 구문 분석하는 동안 오류가 발생했습니다.</exception>
      <exception cref="T:System.InvalidOperationException">잘못된 작업을 시도한 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ResetState">
      <summary>판독기의 상태를 ReadState.Initial로 다시 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlParserContext" />를 사용하여 판독기를 생성한 상태에서 <see langword="ResetState" />를 호출하는 경우</exception>
      <exception cref="T:System.Xml.XmlException">단일 스트림의 여러 문서가 동일한 인코딩을 사용하지 않는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ResolveEntity">
      <summary>
        <see langword="EntityReference" /> 노드에 대해 엔터티 참조를 확인합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.Skip">
      <summary>현재 노드의 자식을 건너뜁니다.</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />를 참조하세요.</summary>
      <param name="scope">반환할 네임스페이스 노드의 형식을 지정하는 <see cref="T:System.Xml.XmlNamespaceScope" /> 값입니다.</param>
      <returns>현재 범위 내의 네임스페이스가 포함된 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />를 참조하십시오.</summary>
      <param name="prefix">찾을 네임스페이스 URI의 접두사입니다.</param>
      <returns>접두사에 매핑된 네임스페이스 URI이거나, 접두사가 네임스페이스 URI에 매핑되지 않은 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />를 참조하십시오.</summary>
      <param name="namespaceName">찾을 접두사의 네임스페이스 URI입니다.</param>
      <returns>네임스페이스 URI에 매핑된 접두사이거나, 네임스페이스 URI가 접두사에 매핑되지 않은 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Value">
      <summary>현재 노드의 텍스트 값을 가져옵니다.</summary>
      <returns>노드의 <see cref="P:System.Xml.XmlTextReader.NodeType" />에 따라 반환되는 값이 달라집니다. 다음 표에서는 반환할 값이 있는 노드 형식을 보여 줍니다. 다른 모든 노드 형식은 <see langword="String.Empty" />를 반환합니다.  
  노드 형식 
  값 
 <see langword="Attribute" /> 특성 값  

 <see langword="CDATA" /> CDATA 섹션 내용입니다.  

 <see langword="Comment" /> 주석의 내용입니다.  

 <see langword="DocumentType" /> 내부 하위 집합입니다.  

 <see langword="ProcessingInstruction" /> 대상을 제외한 전체 내용입니다.  

 <see langword="SignificantWhitespace" /><see langword="xml:space" />= 'preserve' 범위 내의 공백입니다.  

 <see langword="Text" /> 텍스트 노드의 내용입니다.  

 <see langword="Whitespace" /> 태그 사이의 공백입니다.  

 <see langword="XmlDeclaration" /> 선언 내용입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.WhitespaceHandling">
      <summary>공백이 처리되는 방법을 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.WhitespaceHandling" /> 값 중 하나입니다. 기본값은 <see langword="WhitespaceHandling.All" />이고 <see langword="Whitespace" /><see langword="SignificantWhitespace" /> 노드를 반환합니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">잘못된 값이 지정된 경우</exception>
      <exception cref="T:System.InvalidOperationException">판독기를 닫은 상태에서 이 속성을 설정하는 경우(<see cref="P:System.Xml.XmlTextReader.ReadState" />가 <see langword="ReadState.Closed" />인 경우)</exception>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlLang">
      <summary>현재 <see langword="xml:lang" /> 범위를 가져옵니다.</summary>
      <returns>현재 <see langword="xml:lang" /> 범위입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlResolver">
      <summary>DTD 참조를 확인하는 데 사용된 <see cref="T:System.Xml.XmlResolver" />를 설정합니다.</summary>
      <returns>사용할 <see langword="XmlResolver" />입니다. <see langword="null" />로 설정되면 외부 리소스는 확인되지 않습니다.  
.NET Framework 버전 1.1에서는 완전히 신뢰할 수 있는 호출자만 <see langword="XmlResolver" />를 지정할 수 있습니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlSpace">
      <summary>현재 <see langword="xml:space" /> 범위를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.XmlSpace" /> 값 중 하나입니다. <see langword="xml:space" /> 범위가 존재하지 않으면 이 속성은 기본적으로 <see langword="XmlSpace.None" />으로 설정됩니다.</returns>
    </member>
    <member name="T:System.Xml.XmlTextWriter">
      <summary>W3C XML(Extensible Markup Language) 1.0 및 Namespaces in XML 권장 사항을 따르는 XML 데이터를 포함하는 스트림이나 파일을 생성하는 빠르고, 캐시되지 않으며, 앞으로만 이동 가능한 방법을 제공하는 작성기를 나타냅니다.  
.NET Framework 2.0부터 <see cref="T:System.Xml.XmlWriter" /> 클래스를 대신 사용하는 것이 좋습니다.</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>지정된 스트림 및 인코딩을 사용하여 <see langword="XmlTextWriter" /> 클래스의 인스턴스를 만듭니다.</summary>
      <param name="w">작성하려는 스트림입니다.</param>
      <param name="encoding">생성할 인코딩입니다. 인코딩이 <see langword="null" />이면 스트림이 UTF-8로 작성되고 <see langword="ProcessingInstruction" />의 인코딩 특성이 생략됩니다.</param>
      <exception cref="T:System.ArgumentException">인코딩이 지원되지 않거나 스트림을 작성할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="w" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
      <summary>지정된 <see cref="T:System.IO.TextWriter" />를 사용하여 <see langword="XmlTextWriter" /> 클래스의 인스턴스를 만듭니다.</summary>
      <param name="w">쓸 <see langword="TextWriter" />입니다. <see langword="TextWriter" />가 이미 올바른 인코딩으로 설정된 것으로 가정합니다.</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
      <summary>지정된 파일을 사용하여 <see cref="T:System.Xml.XmlTextWriter" /> 클래스의 인스턴스를 만듭니다.</summary>
      <param name="filename">작성할 파일 이름입니다. 파일이 있으면 해당 파일이 잘리고 새 콘텐츠로 덮어써집니다.</param>
      <param name="encoding">생성할 인코딩입니다. 인코딩이 <see langword="null" />이면 파일이 UTF-8로 작성되고 <see langword="ProcessingInstruction" />의 인코딩 특성이 생략됩니다.</param>
      <exception cref="T:System.ArgumentException">인코딩이 지원되지 않는 경우 또는 파일 이름이 비어 있거나 공백 또는 잘못된 문자가 포함되어 있는 경우</exception>
      <exception cref="T:System.UnauthorizedAccessException">액세스가 거부되었습니다.</exception>
      <exception cref="T:System.ArgumentNullException">파일 이름이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">쓸 디렉터리가 없는 경우</exception>
      <exception cref="T:System.IO.IOException">파일 이름에 정확하지 않거나 올바르지 않은 파일 이름, 디렉터리 이름 또는 볼륨 레이블 구문이 있는 경우</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.BaseStream">
      <summary>내부 스트림 개체를 가져옵니다.</summary>
      <returns>
        <see langword="XmlTextWriter" />가 작성 중인 스트림이거나, <see cref="T:System.IO.TextWriter" /> 클래스에서 상속되지 않은 <see cref="T:System.IO.StreamWriter" />를 사용하여 <see langword="null" />가 생성된 경우에는 <see langword="XmlTextWriter" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlTextWriter.Close">
      <summary>이 스트림과 내부 스트림을 닫습니다.</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.Flush">
      <summary>버퍼에 있는 모든 내용을 내부 스트림으로 플러시하고 내부 스트림도 플러시합니다.</summary>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Formatting">
      <summary>출력의 형식이 지정되는 방법을 나타냅니다.</summary>
      <returns>
        <see cref="T:System.Xml.Formatting" /> 값 중 하나입니다. 기본값은 <see langword="Formatting.None" />(특별한 형식 지정 없음)입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Indentation">
      <summary>
        <see cref="P:System.Xml.XmlTextWriter.Formatting" />이 <see langword="Formatting.Indented" />로 설정될 때 계층구조의 각 수준에 작성할 IndentChars 수를 가져오거나 설정합니다.</summary>
      <returns>각 수준의 <see langword="IndentChars" /> 수입니다. 기본값은 2입니다.</returns>
      <exception cref="T:System.ArgumentException">이 속성을 음의 값으로 설정하는 경우</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.IndentChar">
      <summary>
        <see cref="P:System.Xml.XmlTextWriter.Formatting" />이 <see langword="Formatting.Indented" />로 설정된 경우 들여쓰기에 사용할 문자를 가져오거나 설정합니다.</summary>
      <returns>들여쓰기에 사용할 문자입니다. 기본값은 공백입니다.  
   
 <see langword="XmlTextWriter" />를 사용하면 이 속성을 모든 문자로 설정할 수 있습니다. 유효한 XML을 확인하려면 유효한 공백 문자 0x9, 0x10, 0x13 또는 0x20을 지정해야 합니다.</returns>
    </member>
    <member name="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
      <summary>네임스페이스 URI의 현재 네임스페이스 범위에 정의된 가장 비슷한 접두사를 반환합니다.</summary>
      <param name="ns">찾으려는 접두사를 가진 네임스페이스 URI입니다.</param>
      <returns>일치하는 접두사입니다. 또는 현재 범위에 일치하는 네임스페이스 URI가 없는 경우에는 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="ns" />가 <see langword="null" /> 또는 <see langword="String.Empty" />입니다.</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Namespaces">
      <summary>네임스페이스 지원 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>네임스페이스를 지원하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  
기본값은 <see langword="true" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see langword="WriteState.Start" /> 상태일 때만 이 속성을 변경할 수 있는 경우</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.QuoteChar">
      <summary>특성 값을 인용하는 데 사용할 문자를 가져오거나 설정합니다.</summary>
      <returns>특성 값을 인용하는 데 사용할 문자입니다. 작은따옴표를 이어야 합니다 (&amp;#39;) 또는 큰따옴표 (&amp;#34;) (&amp;#34;). 기본값은 큰따옴표입니다.</returns>
      <exception cref="T:System.ArgumentException">이 속성을 작은따옴표 또는 큰따옴표 이외의 값으로 설정하는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>지정된 바이너리 바이트를 base64로 인코딩하고 결과 텍스트를 작성합니다.</summary>
      <param name="buffer">인코딩할 바이트 배열입니다.</param>
      <param name="index">쓸 바이트의 시작을 나타내는 버퍼 내의 위치입니다.</param>
      <param name="count">쓸 바이트 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">버퍼 길이에서 <paramref name="index" />를 빼면 <paramref name="count" />보다 작습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" />이 <see langword="Closed" />인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>지정된 바이너리 바이트를 Binhex로 인코딩하고 결과 텍스트를 작성합니다.</summary>
      <param name="buffer">인코딩할 바이트 배열입니다.</param>
      <param name="index">쓸 바이트의 시작을 나타내는 버퍼 내의 위치입니다.</param>
      <param name="count">쓸 바이트 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">버퍼 길이에서 <paramref name="index" />를 빼면 <paramref name="count" />보다 작습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" />가 Closed인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
      <summary>지정된 텍스트를 포함하는 &lt;![CDATA[...]]&gt; 블록을 작성합니다.</summary>
      <param name="text">CDATA 블록 내에 배치할 텍스트입니다.</param>
      <exception cref="T:System.ArgumentException">텍스트로 인해 XML 문서가 제대로 구성되지 않은 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" />이 <see langword="Closed" />인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
      <summary>지정된 유니코드 문자 값에 대한 문자 엔터티가 생성되도록 합니다.</summary>
      <param name="ch">문자 엔터티를 생성할 유니코드 문자입니다.</param>
      <exception cref="T:System.ArgumentException">문자가 서로게이트 쌍 문자 범위 <see langword="0xd800" /> - <see langword="0xdfff" />에 있거나 텍스트로 인해 XML 문서가 제대로 구성되지 않은 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" />이 <see langword="Closed" />인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>한 번에 한 버퍼씩 텍스트를 씁니다.</summary>
      <param name="buffer">쓸 텍스트가 포함된 문자 배열입니다.</param>
      <param name="index">쓸 텍스트의 시작을 나타내는 버퍼 내의 위치입니다.</param>
      <param name="count">쓸 문자 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.  
또는 
버퍼 길이에서 <paramref name="index" />를 뺀 값이 <paramref name="count" />보다 작고, 호출한 결과 서로게이트 쌍 문자가 분할되거나 잘못된 서로게이트 쌍이 작성되는 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" />가 Closed인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
      <summary>지정된 텍스트를 포함하는 주석 &lt;!--...--&gt;을 작성합니다.</summary>
      <param name="text">주석 내에 배치할 텍스트입니다.</param>
      <exception cref="T:System.ArgumentException">텍스트로 인해 XML 문서가 제대로 구성되지 않은 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" />이 <see langword="Closed" />인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>지정된 이름과 선택적 특성을 사용하여 DOCTYPE 선언을 작성합니다.</summary>
      <param name="name">DOCTYPE의 이름입니다. 이 이름은 비어 있지 않아야 합니다.</param>
      <param name="pubid">null이 아닌 경우 PUBLIC "pubid" "sysid"도 씁니다. 여기서 <paramref name="pubid" />와 <paramref name="sysid" />는 지정된 인수 값으로 바뀝니다.</param>
      <param name="sysid">
        <paramref name="pubid" />가 null이고 <paramref name="sysid" />가 null이 아닌 경우 SYSTEM "sysid"를 씁니다. 여기서 <paramref name="sysid" />는 이 인수 값으로 바뀝니다.</param>
      <param name="subset">null이 아닌 경우 하위 집합이 이 인수 값으로 대체되는 [subset]을 작성합니다.</param>
      <exception cref="T:System.InvalidOperationException">이 메서드가 루트 요소 다음의 프롤로그 외부에서 호출된 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />이 <see langword="null" /> 또는 <see langword="String.Empty" />인 경우  
또는 
<paramref name="name" />의 값이 잘못된 XML이 되는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndAttribute">
      <summary>이전 <see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" /> 호출을 닫습니다.</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndDocument">
      <summary>열려 있는 모든 요소나 특성을 닫고 작성기를 시작 상태로 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">XML 문서가 잘못된 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndElement">
      <summary>한 요소를 닫고 해당 네임스페이스 범위를 팝합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
      <summary>엔터티 참조를 <see langword="&amp;name;" />처럼 작성합니다.</summary>
      <param name="name">엔터티 참조의 이름입니다.</param>
      <exception cref="T:System.ArgumentException">텍스트로 인해 XML 문서가 제대로 구성되지 않거나 <paramref name="name" />이 <see langword="null" /> 또는 <see langword="String.Empty" />인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteFullEndElement">
      <summary>한 요소를 닫고 해당 네임스페이스 범위를 팝합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteName(System.String)">
      <summary>W3C XML 1.0 권장 사항에 따라 유효한 이름이 되도록 지정된 이름을 작성합니다.</summary>
      <param name="name">작성할 이름입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />이 올바른 XML 이름이 아니거나 <paramref name="name" />이 <see langword="null" /> 또는 <see langword="String.Empty" />인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
      <summary>W3C XML 1.0 권장 사항에 따라 유효한 <see langword="NmToken" />이 되도록 지정된 이름을 작성합니다.</summary>
      <param name="name">작성할 이름입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />이 올바른 <see langword="NmToken" />이 아니거나 <paramref name="name" />이 <see langword="null" /> 또는 <see langword="String.Empty" />인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>이름과 텍스트 사이의 공백을 사용하여 처리 명령을 작성합니다(예: &lt;?name text?&gt;).</summary>
      <param name="name">처리 명령의 이름입니다.</param>
      <param name="text">처리 명령에 포함할 텍스트입니다.</param>
      <exception cref="T:System.ArgumentException">텍스트로 인해 XML 문서가 제대로 구성되지 않은 경우  
 <paramref name="name" />가 <see langword="null" /> 또는 <see langword="String.Empty" />입니다.  
<see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" />가 이미 호출된 후 이 메서드를 사용하여 XML 선언을 만드는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
      <summary>네임스페이스로 한정된 이름을 작성합니다. 이 메서드는 지정된 네임스페이스의 범위에 속하는 접두사를 찾습니다.</summary>
      <param name="localName">작성할 로컬 이름입니다.</param>
      <param name="ns">이름과 연결할 네임스페이스 URI 입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" />가 <see langword="null" /> 또는 <see langword="String.Empty" />입니다.  
 <paramref name="localName" />이 W3C Namespaces 사양에 따르는 유효한 이름이 아닌 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>문자 버퍼에서 직접 원시 태그를 작성합니다.</summary>
      <param name="buffer">쓸 텍스트가 포함된 문자 배열입니다.</param>
      <param name="index">쓸 텍스트의 시작을 나타내는 버퍼 내의 위치입니다.</param>
      <param name="count">쓸 문자 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.  
또는 
버퍼 길이에서 <paramref name="index" />를 빼면 <paramref name="count" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
      <summary>문자열에서 직접 원시 태그를 작성합니다.</summary>
      <param name="data">작성할 텍스트를 포함하는 문자열입니다.</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>특성의 시작을 작성합니다.</summary>
      <param name="prefix">특성의 <see langword="Namespace" /> 접두사입니다.</param>
      <param name="localName">특성의 <see langword="LocalName" />입니다.</param>
      <param name="ns">특성의 <see langword="NamespaceURI" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" />가 <see langword="null" /> 또는 <see langword="String.Empty" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartDocument">
      <summary>버전 "1.0"을 사용하여 XML 선언을 작성합니다.</summary>
      <exception cref="T:System.InvalidOperationException">생성자 다음에 호출된 첫 번째 쓰기 메서드가 아닌 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
      <summary>버전 "1.0"과 독립형 특성을 사용하여 XML 선언을 작성합니다.</summary>
      <param name="standalone">
        <see langword="true" />이면 "standalone=yes"로 작성하고, <see langword="false" />이면 "standalone=no"로 작성합니다.</param>
      <exception cref="T:System.InvalidOperationException">생성자 다음에 호출된 첫 번째 쓰기 메서드가 아닌 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>지정된 시작 태그를 작성하고 주어진 네임스페이스 및 접두사와 연결합니다.</summary>
      <param name="prefix">요소의 네임스페이스 접두사입니다.</param>
      <param name="localName">요소의 로컬 이름입니다.</param>
      <param name="ns">요소와 연결할 네임스페이스 URI입니다. 이 네임스페이스가 이미 범위에 있고 관련된 접두사가 있는 경우 작성기는 해당 접두사도 자동으로 작성합니다.</param>
      <exception cref="T:System.InvalidOperationException">작성기가 닫힌 경우</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.WriteState">
      <summary>작성기의 상태를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.WriteState" /> 값 중 하나입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteString(System.String)">
      <summary>주어진 텍스트 콘텐츠를 작성합니다.</summary>
      <param name="text">작성할 텍스트입니다.</param>
      <exception cref="T:System.ArgumentException">텍스트 문자열에 잘못된 서로게이트 쌍이 포함된 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>서로게이트 문자 쌍에 대한 서로게이트 문자 엔터티를 생성하고 작성합니다.</summary>
      <param name="lowChar">하위 서로게이트입니다. 이 값은 <see langword="0xDC00" />에서 <see langword="0xDFFF" /> 사이에 있어야 합니다.</param>
      <param name="highChar">상위 서로게이트입니다. 이 값은 <see langword="0xD800" />에서 <see langword="0xDBFF" /> 사이에 있어야 합니다.</param>
      <exception cref="T:System.Exception">잘못된 서로게이트 문자 쌍이 전달된 경우</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
      <summary>주어진 공백을 작성합니다.</summary>
      <param name="ws">공백 문자의 문자열입니다.</param>
      <exception cref="T:System.ArgumentException">문자열에 공백이 아닌 문자가 포함된 경우</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.XmlLang">
      <summary>현재 <see langword="xml:lang" /> 범위를 가져옵니다.</summary>
      <returns>현재 <see langword="xml:lang" />이거나, 현재 범위에 <see langword="null" />이 없으면 <see langword="xml:lang" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.XmlSpace">
      <summary>현재 <see langword="xml:space" /> 범위를 나타내는 <see cref="T:System.Xml.XmlSpace" />를 가져옵니다.</summary>
      <returns>현재 <see langword="XmlSpace" /> 범위를 나타내는 <see langword="xml:space" />입니다.  
  값 
  의미 
  없음 
  <see langword="xml:space" /> 범위가 없는 경우 기본값입니다.  

  기본값 
  현재 범위가 <see langword="xml:space" />="default"입니다.  

  Preserve 
  현재 범위가 <see langword="xml:space" />="preserve"입니다.</returns>
    </member>
    <member name="T:System.Xml.XmlTokenizedType">
      <summary>문자열의 XML 형식을 나타냅니다. 이 클래스를 사용하면 CDATA 섹션 형식과 같은 특정 XML 형식으로 문자열을 읽을 수 있습니다.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.CDATA">
      <summary>CDATA 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITIES">
      <summary>ENTITIES 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITY">
      <summary>ENTITY 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENUMERATION">
      <summary>ENUMERATION 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ID">
      <summary>ID 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREF">
      <summary>IDREF 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREFS">
      <summary>IDREFS 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NCName">
      <summary>NCName 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKEN">
      <summary>NMTOKEN 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKENS">
      <summary>NMTOKENS 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.None">
      <summary>형식이 없습니다.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NOTATION">
      <summary>NOTATION 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.QName">
      <summary>QName 형식입니다.</summary>
    </member>
    <member name="T:System.Xml.XmlUrlResolver">
      <summary>URI(Uniform Resource Identifier)로 명명된 외부 XML 리소스를 확인합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlUrlResolver" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.CachePolicy">
      <summary>내부 <see cref="T:System.Net.WebRequest" /> 개체에 대한 캐시 정책을 가져오거나 설정합니다.</summary>
      <returns>내부 웹 요청에 대한 캐시 정책입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.Credentials">
      <summary>웹 요청을 인증하는 데 사용된 자격 증명을 설정합니다.</summary>
      <returns>웹 요청을 인증하는 데 사용하는 자격 증명입니다. 이 속성이 설정되지 않으면 기본적으로 값은 <see langword="null" />로 설정됩니다. 즉, <see langword="XmlUrlResolver" />에 사용자 자격 증명이 없습니다.</returns>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>실제 리소스가 포함된 개체로 URI를 매핑합니다.</summary>
      <param name="absoluteUri">
        <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />에서 반환된 URI입니다.</param>
      <param name="role">현재 사용되지 않습니다.</param>
      <param name="ofObjectToReturn">반환할 개체의 형식입니다. 현재 구현에서는 <see cref="T:System.IO.Stream" /> 개체만 반환합니다.</param>
      <returns>스트림 개체이거나, 스트림 외의 다른 형식이 지정된 경우 <see langword="null" />입니다.</returns>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" />이 <see langword="null" /> 또는 <see langword="Stream" /> 형식이 아닌 경우</exception>
      <exception cref="T:System.UriFormatException">지정된 URI가 절대 URI가 아닌 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="absoluteUri" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Exception">런타임 오류(예: 중단된 서버 연결)가 발생한 경우</exception>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary>실제 리소스가 포함된 개체로 URI를 비동기적으로 매핑합니다.</summary>
      <param name="absoluteUri">
        <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />에서 반환된 URI입니다.</param>
      <param name="role">현재 사용되지 않습니다.</param>
      <param name="ofObjectToReturn">반환할 개체의 형식입니다. 현재 구현에서는 <see cref="T:System.IO.Stream" /> 개체만 반환합니다.</param>
      <returns>스트림 개체이거나, 스트림 외의 다른 형식이 지정된 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.Proxy">
      <summary>기본 <see cref="T:System.Net.WebRequest" /> 개체에 대한 캐시 정책을 가져오거나 설정합니다.</summary>
      <returns>인터넷 리소스에 액세스하기 위해 사용할 <see cref="T:System.Net.IWebProxy" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)">
      <summary>기본 및 상대 URI에서 절대 URI를 확인합니다.</summary>
      <param name="baseUri">상대 URI를 확인하는 데 사용된 기본 URI입니다.</param>
      <param name="relativeUri">확인할 URI입니다. 절대 URI나 상대 URI일 수 있습니다. 절대 URI인 경우 이 값은 <paramref name="baseUri" /> 값을 효율적으로 대체합니다. 상대 URI인 경우 <paramref name="baseUri" />와 결합하여 절대 URI를 만듭니다.</param>
      <returns>절대 URI이거나, 상대 URI를 확인할 수 없는 경우 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" />가 <see langword="null" />이거나 <paramref name="relativeUri" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Xml.XmlValidatingReader">
      <summary>DTD(문서 종류 정의), XDR(XML-Data Reduced) 스키마 및 XSD(XML 스키마 정의 언어)의 유효성 검사를 제공하는 판독기를 나타냅니다.  
이 클래스는 사용되지 않습니다. .NET Framework 2.0으로 시작하여 유효성 검사 XML 판독기를 만들려면 <see cref="T:System.Xml.XmlReaderSettings" /> 클래스 및 <see cref="Overload:System.Xml.XmlReader.Create" /> 메서드를 사용하는 것이 좋습니다.</summary>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>지정된 값을 사용하여 <see langword="XmlValidatingReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xmlFragment">구문 분석할 XML 조각을 포함하는 스트림입니다.</param>
      <param name="fragType">XML 조각의 <see cref="T:System.Xml.XmlNodeType" />입니다. 이 매개 변수는 조각에 포함되는 내용을 결정합니다(아래 표 참조).</param>
      <param name="context">XML 조각을 구문 분석할 <see cref="T:System.Xml.XmlParserContext" />입니다. 사용할 <see cref="T:System.Xml.XmlNameTable" />, 인코딩, 네임스페이스 범위, 현재 <see langword="xml:lang" /> 및 <see langword="xml:space" /> 범위가 포함됩니다.</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" />가 아래 표에 나열된 노드 형식 중 하나가 아닌 경우</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>지정된 값을 사용하여 <see langword="XmlValidatingReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xmlFragment">구문 분석할 XML 조각을 포함하는 문자열입니다.</param>
      <param name="fragType">XML 조각의 <see cref="T:System.Xml.XmlNodeType" />입니다. 이 매개 변수는 조각에 포함되는 내용도 결정합니다(아래 표 참조).</param>
      <param name="context">XML 조각을 구문 분석할 <see cref="T:System.Xml.XmlParserContext" />입니다. 사용할 <see cref="T:System.Xml.NameTable" />, 인코딩, 네임스페이스 범위, 현재 xml:lang 및 xml:space 범위가 포함됩니다.</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" />가 아래 표에 나열된 노드 형식 중 하나가 아닌 경우</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.Xml.XmlReader)">
      <summary>주어진 <see cref="T:System.Xml.XmlReader" />에서 반환된 콘텐츠의 유효성을 검사하는 <see langword="XmlValidatingReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="reader">유효성을 검사하는 동안 읽을 <see langword="XmlReader" />입니다. 현재 구현은 <see cref="T:System.Xml.XmlTextReader" />만 지원합니다.</param>
      <exception cref="T:System.ArgumentException">지정된 판독기가 <see langword="XmlTextReader" />가 아닌 경우</exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.AttributeCount">
      <summary>현재 노드의 특성 수를 가져옵니다.</summary>
      <returns>현재 노드에 포함된 특성의 수입니다. 이 수에는 기본 특성이 포함됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.BaseURI">
      <summary>현재 노드의 기본 URI를 가져옵니다.</summary>
      <returns>현재 노드의 기본 URI입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.CanReadBinaryContent">
      <summary>
        <see cref="T:System.Xml.XmlValidatingReader" />가 이진 콘텐츠 읽기 메서드를 구현하는지를 나타내는 값을 가져옵니다.</summary>
      <returns>이진 콘텐츠 읽기 메서드를 구현하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see cref="T:System.Xml.XmlValidatingReader" /> 클래스는 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.CanResolveEntity">
      <summary>이 판독기가 엔터티를 구문 분석하고 확인할 수 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>판독기가 엔터티를 구문 분석하고 확인할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see langword="XmlValidatingReader" />는 항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.Close">
      <summary>
        <see cref="P:System.Xml.XmlReader.ReadState" />를 Closed로 변경합니다.</summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Depth">
      <summary>XML 문서에서 현재 노드의 수준을 가져옵니다.</summary>
      <returns>XML 문서의 현재 노드 수준입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Encoding">
      <summary>문서의 인코딩 특성을 가져옵니다.</summary>
      <returns>인코딩 값입니다. 인코딩 특성이 없는 경우 바이트 순서 표시가 없으면 기본값은 UTF-8로 설정됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.EntityHandling">
      <summary>판독기가 엔터티를 처리하는 방법을 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.EntityHandling" /> 값 중 하나입니다. <see langword="EntityHandling" />이 지정되지 않으면 기본값은 EntityHandling.ExpandEntities로 지정됩니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">잘못된 값이 지정된 경우</exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.EOF">
      <summary>판독기가 스트림의 맨 끝에 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>판독기가 스트림의 맨 끝에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.Int32)">
      <summary>지정된 인덱스가 있는 특성의 값을 가져옵니다.</summary>
      <param name="i">특성의 인덱스입니다. 인덱스는 0부터 시작합니다. 첫 번째 특성의 인덱스는 0입니다.</param>
      <returns>지정된 특성의 값을 반환합니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 매개 변수가 0보다 작거나 <see cref="P:System.Xml.XmlValidatingReader.AttributeCount" />보다 크거나 같은 경우</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.String)">
      <summary>지정된 이름이 있는 특성의 값을 가져옵니다.</summary>
      <param name="name">특성의 정규화된 이름입니다.</param>
      <returns>지정된 특성의 값을 반환합니다. 특성이 없으면 <see langword="null" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.String,System.String)">
      <summary>지정된 로컬 이름이나 네임스페이스 URI(Uniform Resource Identifier)가 있는 특성의 이름을 가져옵니다.</summary>
      <param name="localName">특성의 로컬 이름입니다.</param>
      <param name="namespaceURI">특성의 네임스페이스 URI입니다.</param>
      <returns>지정된 특성의 값을 반환합니다. 특성이 없으면 <see langword="null" />이 반환됩니다. 이 메서드는 판독기를 이동하지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.HasLineInfo">
      <summary>클래스에서 줄 정보를 반환할 수 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>클래스에서 줄 정보를 반환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.HasValue">
      <summary>현재 노드에 String.Empty 이외의 <see cref="P:System.Xml.XmlValidatingReader.Value" />가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 판독기가 위치한 노드에 <see langword="Value" />가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.IsDefault">
      <summary>현재 노드가 DTD(문서 종류 정의) 또는 스키마에서 정의한 기본값에서 생성된 특성인지를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 노드가 DTD나 스키마에서 정의한 기본값에서 생성된 값을 가진 특성이면 <see langword="true" />이고, 특성 값이 명시적으로 설정되었으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.IsEmptyElement">
      <summary>현재 노드가 빈 요소(예: <c>&lt;MyElement/&gt;</c>)인지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" /> 현재 노드가 요소 이면 (<see cref="P:System.Xml.XmlValidatingReader.NodeType" /> equals <see langword="XmlNodeType.Element" />)로 끝나는 <c>/ &gt;</c>고, 그렇지 않으면 <see langword="false" />합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LineNumber">
      <summary>현재 줄 번호를 가져옵니다.</summary>
      <returns>현재 줄 번호입니다. 이 속성의 시작 값은 1입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LinePosition">
      <summary>현재 줄 위치를 가져옵니다.</summary>
      <returns>현재 줄 위치입니다. 이 속성의 시작 값은 1입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LocalName">
      <summary>현재 노드의 로컬 이름을 가져옵니다.</summary>
      <returns>접두사를 제거한 현재 노드의 이름입니다. 예를 들어 <see langword="LocalName" /> 됩니다 <see langword="book" /> 요소에 대 한 <c>&lt;예&gt;</c>합니다.  
이름이 없는 노드 형식(예: <see langword="Text" />, <see langword="Comment" /> 등)의 경우, 이 속성은 String.Empty를 반환합니다.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.LookupNamespace(System.String)">
      <summary>현재 요소의 범위에서 네임스페이스 접두사를 확인합니다.</summary>
      <param name="prefix">확인하려는 네임스페이스 URI(Uniform Resource Identifier)의 접두사입니다. 기본 네임스페이스와 일치시키려면 빈 문자열을 전달합니다.</param>
      <returns>접두사가 매핑되는 네임스페이스 URI이거나 일치하는 접두사가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.Int32)">
      <summary>지정된 인덱스가 있는 특성으로 이동합니다.</summary>
      <param name="i">특성의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 매개 변수가 0보다 작거나 <see cref="P:System.Xml.XmlReader.AttributeCount" />보다 크거나 같은 경우</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String)">
      <summary>지정된 이름이 있는 특성으로 이동합니다.</summary>
      <param name="name">특성의 정규화된 이름입니다.</param>
      <returns>특성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see langword="false" />이면 판독기 위치가 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String,System.String)">
      <summary>지정된 로컬 이름이나 네임스페이스 URI(Uniform Resource Identifier)가 있는 특성으로 이동합니다.</summary>
      <param name="localName">특성의 로컬 이름입니다.</param>
      <param name="namespaceURI">특성의 네임스페이스 URI입니다.</param>
      <returns>특성이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see langword="false" />이면 판독기 위치가 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToElement">
      <summary>현재 특성 노드가 포함된 요소로 이동합니다.</summary>
      <returns>판독기가 특성에 있으면(특성이 있는 요소로 판독기가 이동하면) <see langword="true" />이고, 판독기가 특성에 없으면(판독기의 위치가 바뀌지 않으면) <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToFirstAttribute">
      <summary>첫 번째 특성으로 이동합니다.</summary>
      <returns>특성이 있으면(판독기가 첫 번째 특성으로 이동하면) <see langword="true" />이고, 그렇지 않으면(판독기의 위치가 바뀌지 않으면) <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToNextAttribute">
      <summary>다음 특성으로 이동합니다.</summary>
      <returns>다음 특성이 있으면 <see langword="true" />이고, 더 이상 특성이 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Name">
      <summary>현재 노드의 정규화된 이름을 가져옵니다.</summary>
      <returns>현재 노드의 정규화된 이름입니다. 예를 들어 <see langword="Name" /> 됩니다 <see langword="bk:book" /> 요소에 대 한 <c>&lt;예&gt;</c>합니다.  
반환되는 이름은 다음과 같이 노드의 <see cref="P:System.Xml.XmlValidatingReader.NodeType" />에 따라 달라집니다. 다음 노드 형식은 나열된 값을 반환합니다. 기타 모든 노드 형식은 빈 문자열을 반환합니다.  
  노드 형식 
  name 
 <see langword="Attribute" /> 특성 이름입니다.  

 <see langword="DocumentType" /> 문서 형식 이름입니다.  

 <see langword="Element" /> 태그 이름입니다.  

 <see langword="EntityReference" /> 참조된 엔터티의 이름입니다.  

 <see langword="ProcessingInstruction" /> 처리 명령의 대상입니다.  

 <see langword="XmlDeclaration" /> 리터럴 문자열 <see langword="xml" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Namespaces">
      <summary>네임스페이스 지원 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>네임스페이스를 지원하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NamespaceURI">
      <summary>W3C(World Wide Web 컨소시엄) 네임스페이스 사양에서 정의된 것처럼 판독기가 있는 노드의 네임스페이스 URI(Uniform Resource Identifier)를 가져옵니다.</summary>
      <returns>현재 노드의 네임스페이스 URI이거나 빈 문자열입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NameTable">
      <summary>이 구현과 관련된 <see cref="T:System.Xml.XmlNameTable" />을 가져옵니다.</summary>
      <returns>노드 내에 있는 문자열의 원자화된 버전을 가져올 수 있도록 하는 <see langword="XmlNameTable" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NodeType">
      <summary>현재 노드의 형식을 가져옵니다.</summary>
      <returns>현재 노드의 형식을 나타내는 <see cref="T:System.Xml.XmlNodeType" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Prefix">
      <summary>현재 노드와 관련된 네임스페이스 접두사를 가져옵니다.</summary>
      <returns>현재 노드와 관련된 네임스페이스 접두사입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.QuoteChar">
      <summary>특성 노드의 값을 묶을 때 사용하는 인용 부호 문자를 가져옵니다.</summary>
      <returns>특성 노드의 값을 묶을 때 사용하는 인용 부호 문자입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.Read">
      <summary>스트림에서 다음 노드를 읽습니다.</summary>
      <returns>다음 노드를 읽었으면 <see langword="true" />이고, 더 이상 읽을 노드가 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadAttributeValue">
      <summary>특성 값을 하나 이상의 <see langword="Text" />, <see langword="EntityReference" /> 또는 <see langword="EndEntity" /> 노드로 구문 분석합니다.</summary>
      <returns>반환할 노드가 있는 경우 <see langword="true" />입니다.  
 처음 호출할 때 판독기가 특성 노드에 있거나 모든 특성 값을 읽은 경우 <see langword="false" />입니다.  
<c>misc=""</c>와 같은 빈 특성은 <see langword="true" />를 반환하며 이것은 단일 노드가 String.Empty의 값을 갖는 것을 의미합니다.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>콘텐츠를 읽고 Base64 디코딩된 이진 바이트를 반환합니다.</summary>
      <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
      <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
      <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
      <returns>버퍼에 쓴 바이트 수입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />가 현재 노드에서 지원되지 않습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>내용을 읽고 BinHex 디코딩된 이진 바이트를 반환합니다.</summary>
      <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
      <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
      <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
      <returns>버퍼에 쓴 바이트 수입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />가 현재 노드에서 지원되지 않습니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">구현된 <see cref="T:System.Xml.XmlValidatingReader" />에서 이 메서드를 지원하지 않는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>요소를 읽고 Base64 콘텐츠를 디코딩합니다.</summary>
      <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
      <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
      <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
      <returns>버퍼에 쓴 바이트 수입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">현재 노드가 요소 노드가 아닌 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">구현된 <see cref="T:System.Xml.XmlValidatingReader" />에서 이 메서드를 지원하지 않는 경우</exception>
      <exception cref="T:System.Xml.XmlException">요소가 혼합 콘텐츠를 포함하는 경우</exception>
      <exception cref="T:System.FormatException">요소를 요청한 형식으로 변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>요소를 읽고 BinHex 콘텐츠를 디코딩합니다.</summary>
      <param name="buffer">결과 텍스트를 복사해 넣을 버퍼입니다. 이 값은 <see langword="null" />일 수 없습니다.</param>
      <param name="index">버퍼에 넣을 결과 복사가 시작되는 오프셋입니다.</param>
      <param name="count">버퍼에 복사할 최대 바이트 수입니다. 복사된 실제 바이트 수가 이 메서드에서 반환됩니다.</param>
      <returns>버퍼에 쓴 바이트 수입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">현재 노드가 요소 노드가 아닌 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">버퍼 내의 인덱스 또는 인덱스와 개수를 합한 값이 할당된 버퍼 크기보다 큰 경우</exception>
      <exception cref="T:System.NotSupportedException">구현된 <see cref="T:System.Xml.XmlValidatingReader" />에서 이 메서드를 지원하지 않는 경우</exception>
      <exception cref="T:System.Xml.XmlException">요소가 혼합 콘텐츠를 포함하는 경우</exception>
      <exception cref="T:System.FormatException">요소를 요청한 형식으로 변환할 수 없는 경우</exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Reader">
      <summary>이 <see langword="XmlValidatingReader" />를 생성하는 데 사용된 <see cref="T:System.Xml.XmlReader" />를 가져옵니다.</summary>
      <returns>생성자에 지정된 <see langword="XmlReader" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.ReadState">
      <summary>판독기의 상태를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.ReadState" /> 값 중 하나입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadString">
      <summary>요소 또는 텍스트 노드의 내용을 문자열로 읽습니다.</summary>
      <returns>요소 또는 텍스트 노드의 내용입니다. 판독기가 요소 또는 텍스트 노드 이외의 위치에 있거나 현재 컨텍스트에 반환할 텍스트 콘텐츠가 없는 경우 이것은 빈 문자열입니다.  
   
 텍스트 노드는 요소 또는 특성 텍스트 노드입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadTypedValue">
      <summary>지정된 XSD(XML 스키마 정의 언어) 형식의 공용 언어 런타임 형식을 가져옵니다.</summary>
      <returns>지정된 XML 스키마 형식의 공용 언어 런타임 형식입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ResolveEntity">
      <summary>
        <see langword="EntityReference" /> 노드에 대해 엔터티 참조를 확인합니다.</summary>
      <exception cref="T:System.InvalidOperationException">판독기가 <see langword="EntityReference" /> 노드에 배치되지 않은 경우</exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Schemas">
      <summary>유효성 검사에 사용할 <see cref="T:System.Xml.Schema.XmlSchemaCollection" />을 가져옵니다.</summary>
      <returns>유효성 검사에 사용할 <see langword="XmlSchemaCollection" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.SchemaType">
      <summary>스키마 형식 개체를 가져옵니다.</summary>
      <returns>노드 값이 내장 XSD(XML스키마 정의 언어) 형식인지 사용자 정의 simpleType 또는 complexType인지 여부에 따라 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />, <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 또는 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />입니다. 현재 노드에 스키마 형식이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />를 참조하세요.</summary>
      <param name="scope">판독기의 범위를 식별하는 <see cref="T:System.Xml.XmlNamespaceScope" /> 개체입니다.</param>
      <returns>범위에서 네임스페이스를 식별하는 T:System.Collections.IDictionary 개체입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />를 참조하십시오.</summary>
      <param name="prefix">네임스페이스 접두사입니다.</param>
      <returns>접두사와 관련된 네임스페이스 URI가 포함된 문자열 값입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />를 참조하십시오.</summary>
      <param name="namespaceName">접두사와 관련된 네임스페이스입니다.</param>
      <returns>
        <paramref name="namespaceName" />과 관련된 네임스페이스 접두사가 포함된 문자열 값입니다.</returns>
    </member>
    <member name="E:System.Xml.XmlValidatingReader.ValidationEventHandler">
      <summary>DTD(언어 종류 정의), XDR(XML-Data Reduced) 스키마 및 XSD(XML 스키마 정의 언어) 스키마 유효성 검사 오류에 대한 정보를 받는 이벤트 처리기를 설정합니다.</summary>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.ValidationType">
      <summary>수행할 유효성 검사의 형식을 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.ValidationType" /> 값 중 하나입니다. 이 속성이 설정되지 않으면 기본값은 ValidationType.Auto로 설정됩니다.</returns>
      <exception cref="T:System.InvalidOperationException">Read를 호출한 후 속성을 설정하는 경우</exception>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Value">
      <summary>현재 노드의 텍스트 값을 가져옵니다.</summary>
      <returns>노드의 <see cref="P:System.Xml.XmlValidatingReader.NodeType" />에 따라 반환되는 값이 달라집니다. 다음 표에서는 반환할 값이 있는 노드 형식을 보여 줍니다. 다른 모든 노드 형식은 String.Empty를 반환합니다.  
  노드 형식 
  값 
 <see langword="Attribute" /> 특성 값  

 <see langword="CDATA" /> CDATA 섹션 내용입니다.  

 <see langword="Comment" /> 주석의 내용입니다.  

 <see langword="DocumentType" /> 내부 하위 집합입니다.  

 <see langword="ProcessingInstruction" /> 대상을 제외한 전체 내용입니다.  

 <see langword="SignificantWhitespace" /> 혼합된 콘텐츠 모델의 태그 간 공백입니다.  

 <see langword="Text" /> 텍스트 노드의 내용입니다.  

 <see langword="Whitespace" /> 태그 사이의 공백입니다.  

 <see langword="XmlDeclaration" /> 선언 내용입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlLang">
      <summary>현재 <see langword="xml:lang" /> 범위를 가져옵니다.</summary>
      <returns>현재 <see langword="xml:lang" /> 범위입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlResolver">
      <summary>외부 DTD(Document Type Definition) 및 스키마 위치 참조를 확인하는 데 사용되는 <see cref="T:System.Xml.XmlResolver" />를 설정합니다. 또한 <see langword="XmlResolver" />는 XSD(XML 스키마 정의 언어) 스키마에 있는 포함 요소 또는 가져오기 요소를 처리하는 데도 사용됩니다.</summary>
      <returns>사용할 <see langword="XmlResolver" />입니다. <see langword="null" />로 설정되면 외부 리소스는 확인되지 않습니다.  
.NET Framework 버전 1.1에서는 완전히 신뢰할 수 있는 호출자만 <see langword="XmlResolver" />를 지정할 수 있습니다.</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlSpace">
      <summary>현재 <see langword="xml:space" /> 범위를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.XmlSpace" /> 값 중 하나입니다. <see langword="xml:space" /> 범위가 존재하지 않으면 이 속성은 기본적으로 <see langword="XmlSpace.None" />으로 설정됩니다.</returns>
    </member>
    <member name="T:System.Xml.XmlWhitespace">
      <summary>요소 내용에 있는 공백을 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.XmlWhitespace.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlWhitespace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="strData">노드의 공백 문자입니다.</param>
      <param name="doc">
        <see cref="T:System.Xml.XmlDocument" /> 개체</param>
    </member>
    <member name="M:System.Xml.XmlWhitespace.CloneNode(System.Boolean)">
      <summary>이 노드의 복제본을 만듭니다.</summary>
      <param name="deep">지정된 노드 아래의 하위 트리를 재귀적으로 복제하려면 <see langword="true" />이고, 노드 자체만 복제하려면 <see langword="false" />입니다. 문서 형식 노드의 경우 복제된 노드에는 항상 매개 변수 설정과 상관없이 하위 트리가 포함됩니다.</param>
      <returns>복제된 노드입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.LocalName">
      <summary>노드의 로컬 이름을 가져옵니다.</summary>
      <returns>
        <see langword="XmlWhitespace" /> 노드의 경우 이 속성은 <see langword="#whitespace" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.Name">
      <summary>노드의 정규화된 이름을 가져옵니다.</summary>
      <returns>
        <see langword="XmlWhitespace" /> 노드의 경우 이 속성은 <see langword="#whitespace" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.NodeType">
      <summary>노드의 형식을 가져옵니다.</summary>
      <returns>
        <see langword="XmlWhitespace" /> 노드의 경우 이 값은 <see cref="F:System.Xml.XmlNodeType.Whitespace" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.ParentNode">
      <summary>현재 노드의 부모를 가져옵니다.</summary>
      <returns>현재 노드의 <see cref="T:System.Xml.XmlNode" /> 부모 노드입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.PreviousText">
      <summary>이 노드 바로 앞에 있는 텍스트 노드를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.XmlNode" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.Value">
      <summary>노드의 값을 가져오거나 설정합니다.</summary>
      <returns>노드에 있는 공백 문자입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Xml.XmlWhitespace.Value" />를 잘못된 공백 문자로 설정하는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlWhitespace.WriteContentTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드의 모든 자식을 저장합니다.</summary>
      <param name="w">저장할 대상 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
    </member>
    <member name="M:System.Xml.XmlWhitespace.WriteTo(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />에 노드를 저장합니다.</summary>
      <param name="w">저장할 대상 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
    </member>
    <member name="T:System.Xml.XmlWriter">
      <summary>XML 데이터가 포함된 스트림 또는 파일을 생성할 수 있도록 빠르고, 앞으로만 이동 가능하고, 캐시되지 않은 방법을 제공하는 작성기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.Close">
      <summary>파생 클래스에서 재정의되면 이 스트림 및 내부 스트림을 닫습니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see langword="Close" />가 호출된 후 호출하여 더 많은 출력을 작성하거나 이 호출 결과가 잘못된 XML 문서인 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.Stream)">
      <summary>지정된 스트림을 사용하여 새 <see cref="T:System.Xml.XmlWriter" /> 인스턴스를 만듭니다.</summary>
      <param name="output">작성하려는 스트림입니다. <see cref="T:System.Xml.XmlWriter" />는 XML 1.0 텍스트 구문을 작성한 후 지정된 스트림에 추가합니다.</param>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 개체</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 값이 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)">
      <summary>스트림과 <see cref="T:System.Xml.XmlWriter" /> 개체를 사용하여 새 <see cref="T:System.Xml.XmlWriterSettings" /> 인스턴스를 만듭니다.</summary>
      <param name="output">작성하려는 스트림입니다. <see cref="T:System.Xml.XmlWriter" />는 XML 1.0 텍스트 구문을 작성한 후 지정된 스트림에 추가합니다.</param>
      <param name="settings">새 <see cref="T:System.Xml.XmlWriterSettings" /> 인스턴스를 구성하는 데 사용되는 <see cref="T:System.Xml.XmlWriter" /> 개체입니다. 값이 <see langword="null" />이면 기본 설정이 지정된 <see cref="T:System.Xml.XmlWriterSettings" />이 사용됩니다.  
<see cref="T:System.Xml.XmlWriter" />가 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 메서드와 함께 사용되는 경우 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 속성을 사용하여 올바른 설정을 포함하는 <see cref="T:System.Xml.XmlWriterSettings" /> 개체를 가져와야 합니다. 이에 따라 만들어진 <see cref="T:System.Xml.XmlWriter" /> 개체가 올바른 출력 설정을 갖게 됩니다.</param>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 값이 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />를 사용하여 새 <see cref="T:System.IO.TextWriter" /> 인스턴스를 만듭니다.</summary>
      <param name="output">쓰기에 사용할 <see cref="T:System.IO.TextWriter" />입니다. <see cref="T:System.Xml.XmlWriter" />는 XML 1.0 텍스트 구문을 작성한 후 지정된 <see cref="T:System.IO.TextWriter" />에 추가합니다.</param>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 개체</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> 값이 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> 및 <see cref="T:System.IO.TextWriter" /> 개체를 사용하여 새 <see cref="T:System.Xml.XmlWriterSettings" /> 인스턴스를 만듭니다.</summary>
      <param name="output">쓰기에 사용할 <see cref="T:System.IO.TextWriter" />입니다. <see cref="T:System.Xml.XmlWriter" />는 XML 1.0 텍스트 구문을 작성한 후 지정된 <see cref="T:System.IO.TextWriter" />에 추가합니다.</param>
      <param name="settings">새 <see cref="T:System.Xml.XmlWriterSettings" /> 인스턴스를 구성하는 데 사용되는 <see cref="T:System.Xml.XmlWriter" /> 개체입니다. 값이 <see langword="null" />이면 기본 설정이 지정된 <see cref="T:System.Xml.XmlWriterSettings" />이 사용됩니다.  
<see cref="T:System.Xml.XmlWriter" />가 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 메서드와 함께 사용되는 경우 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 속성을 사용하여 올바른 설정을 포함하는 <see cref="T:System.Xml.XmlWriterSettings" /> 개체를 가져와야 합니다. 이에 따라 만들어진 <see cref="T:System.Xml.XmlWriter" /> 개체가 올바른 출력 설정을 갖게 됩니다.</param>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> 값이 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.String)">
      <summary>지정된 파일 이름을 사용하여 새 <see cref="T:System.Xml.XmlWriter" /> 인스턴스를 만듭니다.</summary>
      <param name="outputFileName">쓰기에 사용할 파일입니다. <see cref="T:System.Xml.XmlWriter" />는 지정된 경로에 파일을 만들어 XML 1.0 텍스트 구문으로 해당 파일에 씁니다. <paramref name="outputFileName" />은 파일 시스템 경로여야 합니다.</param>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> 값이 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.String,System.Xml.XmlWriterSettings)">
      <summary>파일 이름과 <see cref="T:System.Xml.XmlWriter" /> 개체를 사용하여 새 <see cref="T:System.Xml.XmlWriterSettings" /> 인스턴스를 만듭니다.</summary>
      <param name="outputFileName">쓰기에 사용할 파일입니다. <see cref="T:System.Xml.XmlWriter" />는 지정된 경로에 파일을 만들어 XML 1.0 텍스트 구문으로 해당 파일에 씁니다. <paramref name="outputFileName" />은 파일 시스템 경로여야 합니다.</param>
      <param name="settings">새 <see cref="T:System.Xml.XmlWriterSettings" /> 인스턴스를 구성하는 데 사용되는 <see cref="T:System.Xml.XmlWriter" /> 개체입니다. 값이 <see langword="null" />이면 기본 설정이 지정된 <see cref="T:System.Xml.XmlWriterSettings" />이 사용됩니다.  
<see cref="T:System.Xml.XmlWriter" />가 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 메서드와 함께 사용되는 경우 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 속성을 사용하여 올바른 설정을 포함하는 <see cref="T:System.Xml.XmlWriterSettings" /> 개체를 가져와야 합니다. 이에 따라 만들어진 <see cref="T:System.Xml.XmlWriter" /> 개체가 올바른 출력 설정을 갖게 됩니다.</param>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 개체</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> 값이 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />를 사용하여 새 <see cref="T:System.Text.StringBuilder" /> 인스턴스를 만듭니다.</summary>
      <param name="output">쓰기에 사용할 <see cref="T:System.Text.StringBuilder" />입니다. <see cref="T:System.Xml.XmlWriter" />가 쓰는 콘텐츠는 <see cref="T:System.Text.StringBuilder" />에 추가됩니다.</param>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 개체</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> 값이 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> 및 <see cref="T:System.Text.StringBuilder" /> 개체를 사용하여 새 <see cref="T:System.Xml.XmlWriterSettings" /> 인스턴스를 만듭니다.</summary>
      <param name="output">쓰기에 사용할 <see cref="T:System.Text.StringBuilder" />입니다. <see cref="T:System.Xml.XmlWriter" />가 쓰는 콘텐츠는 <see cref="T:System.Text.StringBuilder" />에 추가됩니다.</param>
      <param name="settings">새 <see cref="T:System.Xml.XmlWriterSettings" /> 인스턴스를 구성하는 데 사용되는 <see cref="T:System.Xml.XmlWriter" /> 개체입니다. 값이 <see langword="null" />이면 기본 설정이 지정된 <see cref="T:System.Xml.XmlWriterSettings" />이 사용됩니다.  
<see cref="T:System.Xml.XmlWriter" />가 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 메서드와 함께 사용되는 경우 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 속성을 사용하여 올바른 설정을 포함하는 <see cref="T:System.Xml.XmlWriterSettings" /> 개체를 가져와야 합니다. 이에 따라 만들어진 <see cref="T:System.Xml.XmlWriter" /> 개체가 올바른 출력 설정을 갖게 됩니다.</param>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> 개체</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> 값이 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" /> 개체를 사용하여 새 <see cref="T:System.Xml.XmlWriter" /> 인스턴스를 만듭니다.</summary>
      <param name="output">내부 작성기로 사용할 <see cref="T:System.Xml.XmlWriter" /> 개체입니다.</param>
      <returns>지정된 <see cref="T:System.Xml.XmlWriter" /> 개체를 래핑하는 <see cref="T:System.Xml.XmlWriter" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 값이 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" /> 및 <see cref="T:System.Xml.XmlWriter" /> 개체를 사용하여 새 <see cref="T:System.Xml.XmlWriterSettings" /> 인스턴스를 만듭니다.</summary>
      <param name="output">내부 작성기로 사용할 <see cref="T:System.Xml.XmlWriter" /> 개체입니다.</param>
      <param name="settings">새 <see cref="T:System.Xml.XmlWriterSettings" /> 인스턴스를 구성하는 데 사용되는 <see cref="T:System.Xml.XmlWriter" /> 개체입니다. 값이 <see langword="null" />이면 기본 설정이 지정된 <see cref="T:System.Xml.XmlWriterSettings" />이 사용됩니다.  
<see cref="T:System.Xml.XmlWriter" />가 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 메서드와 함께 사용되는 경우 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 속성을 사용하여 올바른 설정을 포함하는 <see cref="T:System.Xml.XmlWriterSettings" /> 개체를 가져와야 합니다. 이에 따라 만들어진 <see cref="T:System.Xml.XmlWriter" /> 개체가 올바른 출력 설정을 갖게 됩니다.</param>
      <returns>지정된 <see cref="T:System.Xml.XmlWriter" /> 개체를 래핑하는 <see cref="T:System.Xml.XmlWriter" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 값이 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Dispose">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Xml.XmlWriter" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Flush">
      <summary>파생 클래스에서 재정의되면 버퍼에 있는 항목을 내부 스트림으로 플러시하고 내부 스트림도 플러시합니다.</summary>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.FlushAsync">
      <summary>버퍼에 있는 모든 내용을 내부 스트림으로 비동기적으로 플러시하고 내부 스트림도 플러시합니다.</summary>
      <returns>비동기 <see langword="Flush" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.LookupPrefix(System.String)">
      <summary>파생 클래스에서 재정의되면 네임스페이스 URI의 현재 네임스페이스 범위에 정의된 가장 비슷한 접두사를 반환합니다.</summary>
      <param name="ns">찾으려는 접두사를 가진 네임스페이스 URI입니다.</param>
      <returns>일치하는 접두사이거나 현재 범위에 일치하는 네임스페이스 URI가 없는 경우 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="ns" />가 <see langword="null" /> 또는 <see langword="String.Empty" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlWriter.Settings">
      <summary>이 <see cref="T:System.Xml.XmlWriter" /> 인스턴스를 만드는 데 사용되는 <see cref="T:System.Xml.XmlWriterSettings" /> 개체를 가져옵니다.</summary>
      <returns>이 작성기 인스턴스를 만드는 데 사용되는 <see cref="T:System.Xml.XmlWriterSettings" />입니다. <see cref="Overload:System.Xml.XmlWriter.Create" /> 메서드를 사용하여 작성기를 만들지 않은 경우 이 속성은 <see langword="null" />을 반환합니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)">
      <summary>파생 클래스에서 재정의되면 <see cref="T:System.Xml.XmlReader" />의 현재 위치에 있는 모든 특성을 작성합니다.</summary>
      <param name="reader">특성을 복사할 원본 <see langword="XmlReader" />입니다.</param>
      <param name="defattr">
        <see langword="true" />에서 기본 특성을 복사하려면 <see langword="XmlReader" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Xml.XmlException">판독기가 <see langword="element" />, <see langword="attribute" /> 또는 <see langword="XmlDeclaration" /> 노드에 배치되지 않은 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)">
      <summary>
        <see cref="T:System.Xml.XmlReader" />의 현재 위치에서 찾은 모든 특성을 비동기적으로 작성합니다.</summary>
      <param name="reader">특성을 복사할 원본 <see langword="XmlReader" />입니다.</param>
      <param name="defattr">
        <see langword="true" />에서 기본 특성을 복사하려면 <see langword="XmlReader" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>비동기 <see langword="WriteAttributes" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)">
      <summary>파생 클래스에서 재정의되면 지정된 로컬 이름 및 값이 있는 특성을 작성합니다.</summary>
      <param name="localName">특성의 로컬 이름입니다.</param>
      <param name="value">특성 값</param>
      <exception cref="T:System.InvalidOperationException">판독기 상태가 <see langword="WriteState.Element" />가 아니거나 판독기가 닫힌 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.ArgumentException">
        <see langword="xml:space" /> 또는 <see langword="xml:lang" /> 특성 값이 잘못된 경우</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)">
      <summary>파생 클래스에서 재정의되면 지정된 로컬 이름, 네임스페이스 URI 및 값을 갖는 특성을 작성합니다.</summary>
      <param name="localName">특성의 로컬 이름입니다.</param>
      <param name="ns">특성에 연결할 네임스페이스 URI입니다.</param>
      <param name="value">특성 값</param>
      <exception cref="T:System.InvalidOperationException">판독기 상태가 <see langword="WriteState.Element" />가 아니거나 판독기가 닫힌 경우
또는 
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.ArgumentException">
        <see langword="xml:space" /> 또는 <see langword="xml:lang" /> 특성 값이 잘못된 경우</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)">
      <summary>파생 클래스에서 재정의되면 지정된 접두사, 로컬 이름, 네임스페이스 URI 및 값을 갖는 특성을 작성합니다.</summary>
      <param name="prefix">특성의 네임스페이스 접두사입니다.</param>
      <param name="localName">특성의 로컬 이름입니다.</param>
      <param name="ns">특성의 네임스페이스 URI입니다.</param>
      <param name="value">특성 값</param>
      <exception cref="T:System.InvalidOperationException">판독기 상태가 <see langword="WriteState.Element" />가 아니거나 판독기가 닫힌 경우
또는 
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.ArgumentException">
        <see langword="xml:space" /> 또는 <see langword="xml:lang" /> 특성 값이 잘못된 경우</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="localName" /> 또는 <paramref name="ns" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)">
      <summary>지정된 접두사, 로컬 이름, 네임스페이스 URI 및 값을 사용하여 특성을 비동기적으로 작성합니다.</summary>
      <param name="prefix">특성의 네임스페이스 접두사입니다.</param>
      <param name="localName">특성의 로컬 이름입니다.</param>
      <param name="ns">특성의 네임스페이스 URI입니다.</param>
      <param name="value">특성 값</param>
      <returns>비동기 <see langword="WriteAttributeString" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는 
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>파생 클래스에서 재정의되면 지정된 이진 바이트를 Base64로 인코딩하고 결과 텍스트를 작성합니다.</summary>
      <param name="buffer">인코딩할 바이트 배열입니다.</param>
      <param name="index">쓸 바이트의 시작을 나타내는 버퍼 내의 위치입니다.</param>
      <param name="count">쓸 바이트 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.  
또는 
버퍼 길이에서 <paramref name="index" />를 빼면 <paramref name="count" />보다 작습니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary>지정된 바이너리 바이트를 Base64로 비동기적으로 인코딩하고 결과 텍스트를 작성합니다.</summary>
      <param name="buffer">인코딩할 바이트 배열입니다.</param>
      <param name="index">쓸 바이트의 시작을 나타내는 버퍼 내의 위치입니다.</param>
      <param name="count">쓸 바이트 수입니다.</param>
      <returns>비동기 <see langword="WriteBase64" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>파생 클래스에서 재정의되면 지정된 이진 바이트를 <see langword="BinHex" />로 인코딩하고 결과 텍스트를 작성합니다.</summary>
      <param name="buffer">인코딩할 바이트 배열입니다.</param>
      <param name="index">쓸 바이트의 시작을 나타내는 버퍼 내의 위치입니다.</param>
      <param name="count">쓸 바이트 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">작성기가 닫혀 있거나 오류가 발생한 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.  
또는 
버퍼 길이에서 <paramref name="index" />를 빼면 <paramref name="count" />보다 작습니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>지정된 바이너리 바이트를 <see langword="BinHex" />로 비동기적으로 인코딩하고 결과 텍스트를 작성합니다.</summary>
      <param name="buffer">인코딩할 바이트 배열입니다.</param>
      <param name="index">쓸 바이트의 시작을 나타내는 버퍼 내의 위치입니다.</param>
      <param name="count">쓸 바이트 수입니다.</param>
      <returns>비동기 <see langword="WriteBinHex" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCData(System.String)">
      <summary>파생 클래스에서 재정의되면 지정된 텍스트가 포함된 &lt;![CDATA[...]]&gt; 블록을 작성합니다.</summary>
      <param name="text">CDATA 블록 내부에 배치할 텍스트입니다.</param>
      <exception cref="T:System.ArgumentException">텍스트로 인해 XML 문서가 제대로 구성되지 않은 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCDataAsync(System.String)">
      <summary>지정된 텍스트를 포함하는 &lt;![CDATA[...]]&gt; 블록을 비동기적으로 작성합니다.</summary>
      <param name="text">CDATA 블록 내부에 배치할 텍스트입니다.</param>
      <returns>비동기 <see langword="WriteCData" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)">
      <summary>파생 클래스에서 재정의되면 지정된 유니코드 문자 값의 문자 엔터티를 생성하게 합니다.</summary>
      <param name="ch">문자 엔터티를 생성할 유니코드 문자입니다.</param>
      <exception cref="T:System.ArgumentException">문자가 서로게이트 쌍 문자 범위 <see langword="0xd800" /> - <see langword="0xdfff" />에 있습니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)">
      <summary>지정된 유니코드 문자 값에 대한 문자 엔터티가 비동기적으로 생성되도록 합니다.</summary>
      <param name="ch">문자 엔터티를 생성할 유니코드 문자입니다.</param>
      <returns>비동기 <see langword="WriteCharEntity" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>파생 클래스에서 재정의되면 한 번에 한 버퍼씩 텍스트를 작성합니다.</summary>
      <param name="buffer">쓸 텍스트가 포함된 문자 배열입니다.</param>
      <param name="index">쓸 텍스트의 시작을 나타내는 버퍼 내의 위치입니다.</param>
      <param name="count">쓸 문자 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.  
또는 
버퍼 길이에서 <paramref name="index" />를 뺀 값이 <paramref name="count" />보다 작고, 호출한 결과 서로게이트 쌍 문자가 분할되거나 잘못된 서로게이트 쌍이 작성되는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> 매개 변수 값이 잘못된 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharsAsync(System.Char[],System.Int32,System.Int32)">
      <summary>한 번에 한 버퍼씩 텍스트를 비동기적으로 씁니다.</summary>
      <param name="buffer">쓸 텍스트가 포함된 문자 배열입니다.</param>
      <param name="index">쓸 텍스트의 시작을 나타내는 버퍼 내의 위치입니다.</param>
      <param name="count">쓸 문자 수입니다.</param>
      <returns>비동기 <see langword="WriteChars" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteComment(System.String)">
      <summary>파생 클래스에서 재정의되면 지정된 텍스트가 포함된 주석 &lt;!--...--&gt;을 작성합니다.</summary>
      <param name="text">주석 내에 배치할 텍스트입니다.</param>
      <exception cref="T:System.ArgumentException">텍스트로 인해 XML 문서가 제대로 구성되지 않은 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCommentAsync(System.String)">
      <summary>지정된 텍스트를 포함하는 주석 &lt;!--...--&gt;을 비동기적으로 작성합니다.</summary>
      <param name="text">주석 내에 배치할 텍스트입니다.</param>
      <returns>비동기 <see langword="WriteComment" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>파생 클래스에서 재정의되면 지정된 이름 및 선택적 특성이 있는 DOCTYPE 선언을 작성합니다.</summary>
      <param name="name">DOCTYPE의 이름입니다. 이 이름은 비어 있지 않아야 합니다.</param>
      <param name="pubid">null이 아닌 경우 PUBLIC "pubid" "sysid"도 씁니다. 여기서 <paramref name="pubid" />와 <paramref name="sysid" />는 지정된 인수 값으로 바뀝니다.</param>
      <param name="sysid">
        <paramref name="pubid" />가 <see langword="null" />이고 <paramref name="sysid" />가 null이 아닌 경우 SYSTEM "sysid"를 씁니다. 여기서 <paramref name="sysid" />는 이 인수 값으로 바뀝니다.</param>
      <param name="subset">null이 아닌 경우 하위 집합이 이 인수 값으로 대체되는 [subset]을 작성합니다.</param>
      <exception cref="T:System.InvalidOperationException">이 메서드가 루트 요소 다음의 프롤로그 외부에서 호출된 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />의 값이 잘못된 XML이 되는 경우</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteDocTypeAsync(System.String,System.String,System.String,System.String)">
      <summary>지정된 이름과 선택적 특성을 사용하여 DOCTYPE 선언을 비동기적으로 작성합니다.</summary>
      <param name="name">DOCTYPE의 이름입니다. 이 이름은 비어 있지 않아야 합니다.</param>
      <param name="pubid">null이 아닌 경우 PUBLIC "pubid" "sysid"도 씁니다. 여기서 <paramref name="pubid" />와 <paramref name="sysid" />는 지정된 인수 값으로 바뀝니다.</param>
      <param name="sysid">
        <paramref name="pubid" />가 <see langword="null" />이고 <paramref name="sysid" />가 null이 아닌 경우 SYSTEM "sysid"를 씁니다. 여기서 <paramref name="sysid" />는 이 인수 값으로 바뀝니다.</param>
      <param name="subset">null이 아닌 경우 하위 집합이 이 인수 값으로 대체되는 [subset]을 작성합니다.</param>
      <returns>비동기 <see langword="WriteDocType" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)">
      <summary>지정된 로컬 이름 및 값을 사용하여 요소를 작성합니다.</summary>
      <param name="localName">요소의 로컬 이름입니다.</param>
      <param name="value">요소의 값입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 값이 <see langword="null" /> 또는 빈 문자열인 경우  
또는 
매개 변수 값이 잘못된 경우</exception>
      <exception cref="T:System.Text.EncoderFallbackException">유효한 XML 문자이나 출력 인코딩에는 유효하지 않은 버퍼에 문자가 있습니다. 예를 들어, 출력 인코딩이 ASCII인 경우, 요소 및 특성 이름에 대해서는 0부터 127까지 범주의 문자만 사용해야 합니다. 유효하지 않은 문자가 이 메서드의 인수 안이나 버퍼에 쓰고 있었던 이전 메서드의 인수 안에 있을지도 모릅니다. 이러한 문자는 가능한 경우 (예를 들어, 텍스트 노드 또는 특성 값에서) 문자 엔터티 참조에 의해 이스케이프됩니다. 그러나, 문자 엔터티 참조가 요소 및 특성 이름, 주석, 처리 명령, 또는 CDATA 섹션에서는 허용되지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)">
      <summary>지정된 로컬 이름, 네임스페이스 URI 및 값을 사용하여 요소를 작성합니다.</summary>
      <param name="localName">요소의 로컬 이름입니다.</param>
      <param name="ns">요소와 연결할 네임스페이스 URI입니다.</param>
      <param name="value">요소의 값입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 값이 <see langword="null" /> 또는 빈 문자열인 경우  
또는 
매개 변수 값이 잘못된 경우</exception>
      <exception cref="T:System.Text.EncoderFallbackException">유효한 XML 문자이나 출력 인코딩에는 유효하지 않은 버퍼에 문자가 있습니다. 예를 들어, 출력 인코딩이 ASCII인 경우, 요소 및 특성 이름에 대해서는 0부터 127까지 범주의 문자만 사용해야 합니다. 유효하지 않은 문자가 이 메서드의 인수 안이나 버퍼에 쓰고 있었던 이전 메서드의 인수 안에 있을지도 모릅니다. 이러한 문자는 가능한 경우 (예를 들어, 텍스트 노드 또는 특성 값에서) 문자 엔터티 참조에 의해 이스케이프됩니다. 그러나, 문자 엔터티 참조가 요소 및 특성 이름, 주석, 처리 명령, 또는 CDATA 섹션에서는 허용되지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)">
      <summary>지정된 접두사, 로컬 이름, 네임스페이스 URI 및 값을 사용하여 요소를 씁니다.</summary>
      <param name="prefix">요소의 접두사입니다.</param>
      <param name="localName">요소의 로컬 이름입니다.</param>
      <param name="ns">요소의 네임스페이스 URI입니다.</param>
      <param name="value">요소의 값입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 값이 <see langword="null" /> 또는 빈 문자열인 경우  
또는 
매개 변수 값이 잘못된 경우</exception>
      <exception cref="T:System.Text.EncoderFallbackException">유효한 XML 문자이나 출력 인코딩에는 유효하지 않은 버퍼에 문자가 있습니다. 예를 들어, 출력 인코딩이 ASCII인 경우, 요소 및 특성 이름에 대해서는 0부터 127까지 범주의 문자만 사용해야 합니다. 유효하지 않은 문자가 이 메서드의 인수 안이나 버퍼에 쓰고 있었던 이전 메서드의 인수 안에 있을지도 모릅니다. 이러한 문자는 가능한 경우 (예를 들어, 텍스트 노드 또는 특성 값에서) 문자 엔터티 참조에 의해 이스케이프됩니다. 그러나, 문자 엔터티 참조가 요소 및 특성 이름, 주석, 처리 명령, 또는 CDATA 섹션에서는 허용되지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)">
      <summary>지정된 접두사, 로컬 이름, 네임스페이스 URI 및 값을 사용하여 요소를 비동기적으로 작성합니다.</summary>
      <param name="prefix">요소의 접두사입니다.</param>
      <param name="localName">요소의 로컬 이름입니다.</param>
      <param name="ns">요소의 네임스페이스 URI입니다.</param>
      <param name="value">요소의 값입니다.</param>
      <returns>비동기 <see langword="WriteElementString" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndAttribute">
      <summary>파생 클래스에서 재정의되면 이전 <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> 호출을 닫습니다.</summary>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndAttributeAsync">
      <summary>이전 <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> 호출을 비동기적으로 닫습니다.</summary>
      <returns>비동기 <see langword="WriteEndAttribute" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndDocument">
      <summary>파생 클래스에서 재정의되면 열려 있는 모든 요소나 특성을 닫고 작성기를 다시 시작 상태로 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">XML 문서가 잘못된 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndDocumentAsync">
      <summary>열려 있는 모든 요소나 특성을 비동기적으로 닫고 작성기를 시작 상태로 설정합니다.</summary>
      <returns>비동기 <see langword="WriteEndDocument" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndElement">
      <summary>파생 클래스에서 재정의되면 한 요소를 닫고 해당 네임스페이스 범위를 팝합니다.</summary>
      <exception cref="T:System.InvalidOperationException">이로 인해 XML 문서가 잘못되는 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndElementAsync">
      <summary>한 요소를 비동기적으로 닫고 해당 네임스페이스 범위를 팝합니다.</summary>
      <returns>비동기 <see langword="WriteEndElement" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEntityRef(System.String)">
      <summary>파생 클래스에서 재정의되면 <see langword="&amp;name;" /> 같이 엔터티 참조를 작성합니다.</summary>
      <param name="name">엔터티 참조의 이름입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />가 <see langword="null" /> 또는 <see langword="String.Empty" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEntityRefAsync(System.String)">
      <summary>엔터티 참조를 <see langword="&amp;name;" />으로 비동기적으로 작성합니다.</summary>
      <param name="name">엔터티 참조의 이름입니다.</param>
      <returns>비동기 <see langword="WriteEntityRef" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteFullEndElement">
      <summary>파생 클래스에서 재정의되면 한 요소를 닫고 해당 네임스페이스 범위를 팝합니다.</summary>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteFullEndElementAsync">
      <summary>한 요소를 비동기적으로 닫고 해당 네임스페이스 범위를 팝합니다.</summary>
      <returns>비동기 <see langword="WriteFullEndElement" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteName(System.String)">
      <summary>파생 클래스에서 재정의되면 W3C XML 1.0 권장 사항(https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name))에 따라 유효한 이름이 되도록 지정된 이름을 작성합니다.</summary>
      <param name="name">작성할 이름입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />이 올바른 XML 이름이 아니거나 <paramref name="name" />이 <see langword="null" /> 또는 <see langword="String.Empty" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNameAsync(System.String)">
      <summary>W3C XML 1.0 권장 사항(https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name))에 따라 유효한 이름이 되도록 지정된 이름을 비동기적으로 작성합니다.</summary>
      <param name="name">작성할 이름입니다.</param>
      <returns>비동기 <see langword="WriteName" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNmToken(System.String)">
      <summary>파생 클래스에서 재정의되면 W3C XML 1.0 권장 사항(https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name))에 따라 유효한 NmToken이 되도록 지정된 이름을 작성합니다.</summary>
      <param name="name">작성할 이름입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" />이 올바른 NmToken이 아니거나 <paramref name="name" />이 <see langword="null" /> 또는 <see langword="String.Empty" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNmTokenAsync(System.String)">
      <summary>W3C XML 1.0 권장 사항(https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name))에 따라 유효한 NmToken이 되도록 지정된 이름을 비동기적으로 작성합니다.</summary>
      <param name="name">작성할 이름입니다.</param>
      <returns>비동기 <see langword="WriteNmToken" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
      <summary>파생 클래스에서 재정의되면 판독기에서 작성기로 모든 항목을 복사하고 판독기를 다음 형제 노드의 시작 부분으로 이동합니다.</summary>
      <param name="reader">읽을 소스 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <param name="defattr">
        <see langword="true" />에서 기본 특성을 복사하려면 <see langword="XmlReader" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" />에 잘못된 문자가 들어 있는 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XPath.XPathNavigator,System.Boolean)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체 전체를 작성기에 복사합니다. <see cref="T:System.Xml.XPath.XPathNavigator" /> 위치는 변경되지 않습니다.</summary>
      <param name="navigator">복사할 원본 <see cref="T:System.Xml.XPath.XPathNavigator" />입니다.</param>
      <param name="defattr">기본 특성을 복사하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader,System.Boolean)">
      <summary>파생 클래스에서 재정의되면 판독기에서 작성기로 모든 항목을 비동기적으로 복사하고 판독기를 다음 형제 노드의 시작 부분으로 이동합니다.</summary>
      <param name="reader">읽을 소스 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <param name="defattr">
        <see langword="true" />에서 기본 특성을 복사하려면 <see langword="XmlReader" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>비동기 <see langword="WriteNode" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XPath.XPathNavigator,System.Boolean)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체의 모든 항목을 작성기에 비동기적으로 복사합니다. <see cref="T:System.Xml.XPath.XPathNavigator" /> 위치는 변경되지 않습니다.</summary>
      <param name="navigator">복사할 원본 <see cref="T:System.Xml.XPath.XPathNavigator" />입니다.</param>
      <param name="defattr">기본 특성을 복사하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>비동기 <see langword="WriteNode" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>파생 클래스에서 재정의되면 &lt;?name text?&gt; 같이 이름과 텍스트 사이에 공백이 있는 처리 명령을 작성합니다.</summary>
      <param name="name">처리 명령의 이름입니다.</param>
      <param name="text">처리 명령에 포함할 텍스트입니다.</param>
      <exception cref="T:System.ArgumentException">텍스트로 인해 XML 문서가 제대로 구성되지 않은 경우  
 <paramref name="name" />가 <see langword="null" /> 또는 <see langword="String.Empty" />입니다.  
<see cref="M:System.Xml.XmlWriter.WriteStartDocument" />가 이미 호출된 후 이 메서드를 사용하여 XML 선언을 만드는 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String,System.String)">
      <summary>이름과 텍스트 사이의 공백을 사용하여 처리 명령을 비동기적으로 씁니다(예: &lt;?name text?&gt;).</summary>
      <param name="name">처리 명령의 이름입니다.</param>
      <param name="text">처리 명령에 포함할 텍스트입니다.</param>
      <returns>비동기 <see langword="WriteProcessingInstruction" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)">
      <summary>파생 클래스에서 재정의되면 네임스페이스로 한정된 이름을 작성합니다. 이 메서드는 지정된 네임스페이스의 범위에 속하는 접두사를 찾습니다.</summary>
      <param name="localName">작성할 로컬 이름입니다.</param>
      <param name="ns">이름의 네임스페이스 URI입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" />가 <see langword="null" /> 또는 <see langword="String.Empty" />입니다.  
 <paramref name="localName" />이 올바른 이름이 아닌 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String,System.String)">
      <summary>네임스페이스로 한정된 이름을 비동기적으로 작성합니다. 이 메서드는 지정된 네임스페이스의 범위에 속하는 접두사를 찾습니다.</summary>
      <param name="localName">작성할 로컬 이름입니다.</param>
      <param name="ns">이름의 네임스페이스 URI입니다.</param>
      <returns>비동기 <see langword="WriteQualifiedName" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>파생 클래스에서 재정의되면 문자 버퍼에서 원시 태그를 직접 작성합니다.</summary>
      <param name="buffer">쓸 텍스트가 포함된 문자 배열입니다.</param>
      <param name="index">쓸 텍스트의 시작을 나타내는 버퍼 내의 위치입니다.</param>
      <param name="count">쓸 문자 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 또는 <paramref name="count" />가 0보다 작습니다.  
또는 
버퍼 길이에서 <paramref name="index" />를 빼면 <paramref name="count" />보다 작습니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.String)">
      <summary>파생 클래스에서 재정의되면 문자열에서 원시 태그를 직접 작성합니다.</summary>
      <param name="data">작성할 텍스트를 포함하는 문자열입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="data" />가 <see langword="null" /> 또는 <see langword="String.Empty" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRawAsync(System.Char[],System.Int32,System.Int32)">
      <summary>문자 버퍼에서 직접 원시 태그를 비동기적으로 작성합니다.</summary>
      <param name="buffer">쓸 텍스트가 포함된 문자 배열입니다.</param>
      <param name="index">쓸 텍스트의 시작을 나타내는 버퍼 내의 위치입니다.</param>
      <param name="count">쓸 문자 수입니다.</param>
      <returns>비동기 <see langword="WriteRaw" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRawAsync(System.String)">
      <summary>문자열에서 직접 원시 태그를 비동기적으로 작성합니다.</summary>
      <param name="data">작성할 텍스트를 포함하는 문자열입니다.</param>
      <returns>비동기 <see langword="WriteRaw" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String)">
      <summary>지정된 로컬 이름을 사용하여 특성의 시작 부분을 작성합니다.</summary>
      <param name="localName">특성의 로컬 이름입니다.</param>
      <exception cref="T:System.InvalidOperationException">작성기가 닫힌 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">유효한 XML 문자이나 출력 인코딩에는 유효하지 않은 버퍼에 문자가 있습니다. 예를 들어, 출력 인코딩이 ASCII인 경우, 요소 및 특성 이름에 대해서는 0부터 127까지 범주의 문자만 사용해야 합니다. 유효하지 않은 문자가 이 메서드의 인수 안이나 버퍼에 쓰고 있었던 이전 메서드의 인수 안에 있을지도 모릅니다. 이러한 문자는 가능한 경우 (예를 들어, 텍스트 노드 또는 특성 값에서) 문자 엔터티 참조에 의해 이스케이프됩니다. 그러나, 문자 엔터티 참조가 요소 및 특성 이름, 주석, 처리 명령, 또는 CDATA 섹션에서는 허용되지 않습니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)">
      <summary>지정된 로컬 이름과 네임스페이스 URI를 사용하여 특성의 시작 부분을 작성합니다.</summary>
      <param name="localName">특성의 로컬 이름입니다.</param>
      <param name="ns">특성의 네임스페이스 URI입니다.</param>
      <exception cref="T:System.Text.EncoderFallbackException">유효한 XML 문자이나 출력 인코딩에는 유효하지 않은 버퍼에 문자가 있습니다. 예를 들어, 출력 인코딩이 ASCII인 경우, 요소 및 특성 이름에 대해서는 0부터 127까지 범주의 문자만 사용해야 합니다. 유효하지 않은 문자가 이 메서드의 인수 안이나 버퍼에 쓰고 있었던 이전 메서드의 인수 안에 있을지도 모릅니다. 이러한 문자는 가능한 경우 (예를 들어, 텍스트 노드 또는 특성 값에서) 문자 엔터티 참조에 의해 이스케이프됩니다. 그러나, 문자 엔터티 참조가 요소 및 특성 이름, 주석, 처리 명령, 또는 CDATA 섹션에서는 허용되지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>파생 클래스에서 재정의되면 지정된 접두사, 로컬 이름 및 네임스페이스 URI를 사용하여 특성의 시작 부분을 작성합니다.</summary>
      <param name="prefix">특성의 네임스페이스 접두사입니다.</param>
      <param name="localName">특성의 로컬 이름입니다.</param>
      <param name="ns">특성의 네임스페이스 URI입니다.</param>
      <exception cref="T:System.Text.EncoderFallbackException">유효한 XML 문자이나 출력 인코딩에는 유효하지 않은 버퍼에 문자가 있습니다. 예를 들어, 출력 인코딩이 ASCII인 경우, 요소 및 특성 이름에 대해서는 0부터 127까지 범주의 문자만 사용해야 합니다. 유효하지 않은 문자가 이 메서드의 인수 안이나 버퍼에 쓰고 있었던 이전 메서드의 인수 안에 있을지도 모릅니다. 이러한 문자는 가능한 경우 (예를 들어, 텍스트 노드 또는 특성 값에서) 문자 엔터티 참조에 의해 이스케이프됩니다. 그러나, 문자 엔터티 참조가 요소 및 특성 이름, 주석, 처리 명령, 또는 CDATA 섹션에서는 허용되지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String,System.String)">
      <summary>지정된 접두사, 로컬 이름 및 네임스페이스 URI를 사용하여 특성의 시작 부분을 비동기적으로 작성합니다.</summary>
      <param name="prefix">특성의 네임스페이스 접두사입니다.</param>
      <param name="localName">특성의 로컬 이름입니다.</param>
      <param name="ns">특성의 네임스페이스 URI입니다.</param>
      <returns>비동기 <see langword="WriteStartAttribute" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument">
      <summary>파생 클래스에서 재정의되면 버전이 "1.0"인 XML 선언을 작성합니다.</summary>
      <exception cref="T:System.InvalidOperationException">생성자 다음에 호출된 첫 번째 쓰기 메서드가 아닌 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)">
      <summary>파생 클래스에서 재정의되면 버전이 "1.0"이고 독립형 특성이 포함된 XML 선언을 작성합니다.</summary>
      <param name="standalone">
        <see langword="true" />이면 "standalone=yes"로 작성하고, <see langword="false" />이면 "standalone=no"로 작성합니다.</param>
      <exception cref="T:System.InvalidOperationException">생성자 다음에 호출된 첫 번째 쓰기 메서드가 아닌 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocumentAsync">
      <summary>버전 "1.0"을 사용하여 XML 선언을 비동기적으로 작성합니다.</summary>
      <returns>비동기 <see langword="WriteStartDocument" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)">
      <summary>버전 "1.0"과 독립형 특성을 사용하여 XML 선언을 비동기적으로 작성합니다.</summary>
      <param name="standalone">
        <see langword="true" />이면 "standalone=yes"로 작성하고, <see langword="false" />이면 "standalone=no"로 작성합니다.</param>
      <returns>비동기 <see langword="WriteStartDocument" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String)">
      <summary>파생 클래스에서 재정의되면 지정된 로컬 이름을 사용하여 시작 태그를 작성합니다.</summary>
      <param name="localName">요소의 로컬 이름입니다.</param>
      <exception cref="T:System.InvalidOperationException">작성기가 닫힌 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">유효한 XML 문자이나 출력 인코딩에는 유효하지 않은 버퍼에 문자가 있습니다. 예를 들어, 출력 인코딩이 ASCII인 경우, 요소 및 특성 이름에 대해서는 0부터 127까지 범주의 문자만 사용해야 합니다. 유효하지 않은 문자가 이 메서드의 인수 안이나 버퍼에 쓰고 있었던 이전 메서드의 인수 안에 있을지도 모릅니다. 이러한 문자는 가능한 경우 (예를 들어, 텍스트 노드 또는 특성 값에서) 문자 엔터티 참조에 의해 이스케이프됩니다. 그러나, 문자 엔터티 참조가 요소 및 특성 이름, 주석, 처리 명령, 또는 CDATA 섹션에서는 허용되지 않습니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String)">
      <summary>파생된 클래스에서 재정의되면 지정된 시작 태그를 작성하고 지정된 네임스페이스에 연결합니다.</summary>
      <param name="localName">요소의 로컬 이름입니다.</param>
      <param name="ns">요소와 연결할 네임스페이스 URI입니다. 이 네임스페이스가 이미 범위에 있고 관련된 접두사가 있는 경우 작성기는 해당 접두사도 자동으로 작성합니다.</param>
      <exception cref="T:System.InvalidOperationException">작성기가 닫힌 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">유효한 XML 문자이나 출력 인코딩에는 유효하지 않은 버퍼에 문자가 있습니다. 예를 들어, 출력 인코딩이 ASCII인 경우, 요소 및 특성 이름에 대해서는 0부터 127까지 범주의 문자만 사용해야 합니다. 유효하지 않은 문자가 이 메서드의 인수 안이나 버퍼에 쓰고 있었던 이전 메서드의 인수 안에 있을지도 모릅니다. 이러한 문자는 가능한 경우 (예를 들어, 텍스트 노드 또는 특성 값에서) 문자 엔터티 참조에 의해 이스케이프됩니다. 그러나, 문자 엔터티 참조가 요소 및 특성 이름, 주석, 처리 명령, 또는 CDATA 섹션에서는 허용되지 않습니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>파생 클래스에서 재정의되면 지정된 시작 태그를 작성하고 지정된 네임스페이스 및 접두사에 연결합니다.</summary>
      <param name="prefix">요소의 네임스페이스 접두사입니다.</param>
      <param name="localName">요소의 로컬 이름입니다.</param>
      <param name="ns">요소와 연결할 네임스페이스 URI입니다.</param>
      <exception cref="T:System.InvalidOperationException">작성기가 닫힌 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">유효한 XML 문자이나 출력 인코딩에는 유효하지 않은 버퍼에 문자가 있습니다. 예를 들어, 출력 인코딩이 ASCII인 경우, 요소 및 특성 이름에 대해서는 0부터 127까지 범주의 문자만 사용해야 합니다. 유효하지 않은 문자가 이 메서드의 인수 안이나 버퍼에 쓰고 있었던 이전 메서드의 인수 안에 있을지도 모릅니다. 이러한 문자는 가능한 경우 (예를 들어, 텍스트 노드 또는 특성 값에서) 문자 엔터티 참조에 의해 이스케이프됩니다. 그러나, 문자 엔터티 참조가 요소 및 특성 이름, 주석, 처리 명령, 또는 CDATA 섹션에서는 허용되지 않습니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)">
      <summary>지정된 시작 태그를 비동기적으로 작성하고 주어진 네임스페이스 및 접두사와 연결합니다.</summary>
      <param name="prefix">요소의 네임스페이스 접두사입니다.</param>
      <param name="localName">요소의 로컬 이름입니다.</param>
      <param name="ns">요소와 연결할 네임스페이스 URI입니다.</param>
      <returns>비동기 <see langword="WriteStartElement" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlWriter.WriteState">
      <summary>파생 클래스에서 재정의되면 작성기의 상태를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.WriteState" /> 값 중 하나입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteString(System.String)">
      <summary>파생 클래스에서 재정의되면 지정된 텍스트 콘텐츠를 작성합니다.</summary>
      <param name="text">쓸 텍스트입니다.</param>
      <exception cref="T:System.ArgumentException">텍스트 문자열에 잘못된 서로게이트 쌍이 포함된 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStringAsync(System.String)">
      <summary>주어진 텍스트 콘텐츠를 비동기적으로 작성합니다.</summary>
      <param name="text">쓸 텍스트입니다.</param>
      <returns>비동기 <see langword="WriteString" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>파생 클래스에서 재정의되면 서로게이트 문자 쌍에 대한 서로게이트 문자 엔터티를 생성하고 작성합니다.</summary>
      <param name="lowChar">하위 서로게이트입니다. 이 값은 0xDC00에서 0xDFFF 사이에 있어야 합니다.</param>
      <param name="highChar">상위 서로게이트입니다. 이 값은 0xD800에서 0xDBFF 사이에 있어야 합니다.</param>
      <exception cref="T:System.ArgumentException">잘못된 서로게이트 문자 쌍이 전달된 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char,System.Char)">
      <summary>서로게이트 문자 쌍에 대한 서로게이트 문자 엔터티를 비동기적으로 생성하고 작성합니다.</summary>
      <param name="lowChar">하위 서로게이트입니다. 이 값은 0xDC00에서 0xDFFF 사이에 있어야 합니다.</param>
      <param name="highChar">상위 서로게이트입니다. 이 값은 0xD800에서 0xDBFF 사이에 있어야 합니다.</param>
      <returns>비동기 <see langword="WriteSurrogateCharEntity" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Boolean)">
      <summary>
        <see cref="T:System.Boolean" /> 값을 작성합니다.</summary>
      <param name="value">쓸 <see cref="T:System.Boolean" /> 값입니다.</param>
      <exception cref="T:System.ArgumentException">잘못된 값이 지정된 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.DateTime)">
      <summary>
        <see cref="T:System.DateTime" /> 값을 작성합니다.</summary>
      <param name="value">쓸 <see cref="T:System.DateTime" /> 값입니다.</param>
      <exception cref="T:System.ArgumentException">잘못된 값이 지정된 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.DateTimeOffset)">
      <summary>
        <see cref="T:System.DateTimeOffset" /> 값을 작성합니다.</summary>
      <param name="value">쓸 <see cref="T:System.DateTimeOffset" /> 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" /> 값을 작성합니다.</summary>
      <param name="value">쓸 <see cref="T:System.Decimal" /> 값입니다.</param>
      <exception cref="T:System.ArgumentException">잘못된 값이 지정된 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Double)">
      <summary>
        <see cref="T:System.Double" /> 값을 작성합니다.</summary>
      <param name="value">쓸 <see cref="T:System.Double" /> 값입니다.</param>
      <exception cref="T:System.ArgumentException">잘못된 값이 지정된 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Int32)">
      <summary>
        <see cref="T:System.Int32" /> 값을 작성합니다.</summary>
      <param name="value">쓸 <see cref="T:System.Int32" /> 값입니다.</param>
      <exception cref="T:System.ArgumentException">잘못된 값이 지정된 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Int64)">
      <summary>
        <see cref="T:System.Int64" /> 값을 작성합니다.</summary>
      <param name="value">쓸 <see cref="T:System.Int64" /> 값입니다.</param>
      <exception cref="T:System.ArgumentException">잘못된 값이 지정된 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Object)">
      <summary>개체 값을 씁니다.</summary>
      <param name="value">쓸 개체 값입니다.  
 참고 .NET Framework 3.5 릴리스에서 이 메서드는 <see cref="T:System.DateTimeOffset" />을 매개 변수로 받습니다.</param>
      <exception cref="T:System.ArgumentException">잘못된 값이 지정된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">작성기가 닫혀 있거나 오류가 발생한 경우
또는
이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Single)">
      <summary>단정밀도 부동 소수점 숫자를 씁니다.</summary>
      <param name="value">쓸 단정밀도 부동 소수점 숫자입니다.</param>
      <exception cref="T:System.ArgumentException">잘못된 값이 지정된 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.String)">
      <summary>
        <see cref="T:System.String" /> 값을 작성합니다.</summary>
      <param name="value">쓸 <see cref="T:System.String" /> 값입니다.</param>
      <exception cref="T:System.ArgumentException">잘못된 값이 지정된 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteWhitespace(System.String)">
      <summary>파생 클래스에서 재정의되면 지정된 공백을 작성합니다.</summary>
      <param name="ws">공백 문자의 문자열입니다.</param>
      <exception cref="T:System.ArgumentException">문자열에 공백이 아닌 문자가 포함된 경우</exception>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)">
      <summary>주어진 공백을 비동기적으로 작성합니다.</summary>
      <param name="ws">공백 문자의 문자열입니다.</param>
      <returns>비동기 <see langword="WriteWhitespace" /> 작업(operation)을 나타내는 작업(task)입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.
또는
<see cref="P:System.Xml.XmlWriterSettings.Async" /> 플래그를 <see langword="true" />로 설정하지 않고 <see cref="T:System.Xml.XmlWriter" /> 비동기 메서드가 호출되었습니다. 이 경우 <see cref="T:System.InvalidOperationException" />은 “비동기 메서드를 사용하려면 XmlWriterSettings.Async를 true로 설정하십시오.”라는 메시지와 함께 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlLang">
      <summary>파생 클래스에서 재정의되면 현재 <see langword="xml:lang" /> 범위를 가져옵니다.</summary>
      <returns>현재 <see langword="xml:lang" /> 범위입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlSpace">
      <summary>파생 클래스에서 재정의되면 현재 <see langword="xml:space" /> 범위를 나타내는 <see cref="T:System.Xml.XmlSpace" />를 가져옵니다.</summary>
      <returns>현재 <see langword="XmlSpace" /> 범위를 나타내는 <see langword="xml:space" />입니다.  
  값 
  의미 
 <see langword="None" /><see langword="xml:space" /> 범위가 없는 경우 기본값입니다.  

 <see langword="Default" /> 현재 범위가 <see langword="xml:space" />="default"입니다.  

 <see langword="Preserve" /> 현재 범위가 <see langword="xml:space" />="preserve"입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이전 비동기 작업이 완료되기 전에 <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출되었습니다. 이 경우 “비동기 작업이 이미 진행 중입니다.” 메시지를 나타내며 <see cref="T:System.InvalidOperationException" />이 throw됩니다.</exception>
    </member>
    <member name="T:System.Xml.XmlWriterSettings">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> 메서드를 사용하여 만든 <see cref="Overload:System.Xml.XmlWriter.Create" /> 개체에서 지원할 기능 집합을 지정합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlWriterSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Async">
      <summary>비동기 <see cref="T:System.Xml.XmlWriter" /> 메서드를 특정 <see cref="T:System.Xml.XmlWriter" /> 인스턴스에서 사용할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>비동기 메서드를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CheckCharacters">
      <summary>XML 작성기가 문서의 모든 문자가 W3C XML 1.0 권장 사항의 "2.2 문자" 섹션을 따르는지 확인해야 하는지 표시하는 값을 가져오거나 설정합니다.</summary>
      <returns>문자를 검사하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Clone">
      <summary>
        <see cref="T:System.Xml.XmlWriterSettings" /> 인스턴스의 복사본을 만듭니다.</summary>
      <returns>복제된 <see cref="T:System.Xml.XmlWriterSettings" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CloseOutput">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> 메서드를 호출한 경우 <see cref="T:System.IO.TextWriter" />가 내부 스트림 또는 <see cref="M:System.Xml.XmlWriter.Close" />도 함께 닫을지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>내부 스트림 또는 <see cref="T:System.IO.TextWriter" />를 함께 닫으려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.ConformanceLevel">
      <summary>XML 작성기가 XML 출력을 확인하는 규칙 수준을 가져오거나 설정합니다.</summary>
      <returns>규칙 수준(문서, 조각 또는 자동 검색)을 지정하는 열거형 값 중 하나입니다. 기본값은 <see cref="F:System.Xml.ConformanceLevel.Document" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes">
      <summary>
        <see cref="T:System.Xml.XmlWriter" />에서 URI 특성을 이스케이프하는 않는지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="true" /> 경우는 <see cref="T:System.Xml.XmlWriter" /> URI 특성을 이스케이프 하지 않으면이 고, 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Encoding">
      <summary>사용할 텍스트 인코딩의 형식을 가져오거나 설정합니다.</summary>
      <returns>사용할 텍스트 인코딩입니다. 기본값은 <see langword="Encoding.UTF8" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Indent">
      <summary>요소의 들여쓰기 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>새 줄에 개별 요소를 들여 쓰면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.IndentChars">
      <summary>들여쓰기에 사용할 문자열을 가져오거나 설정합니다. 이 설정은 <see cref="P:System.Xml.XmlWriterSettings.Indent" /> 속성이 <see langword="true" />로 설정된 경우에 사용됩니다.</summary>
      <returns>들여쓰기에 사용할 문자열입니다. 이 속성에 설정할 수 있는 문자열 값에는 제한이 없습니다. 그러나 XML을 올바르게 유지하려면 공백 문자, 탭, 캐리지 리턴 또는 줄 바꿈 같은 유효한 공백 문자만 지정해야 합니다. 기본값은 공백 두 개입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Xml.XmlWriterSettings.IndentChars" />에 할당된 값이 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NamespaceHandling">
      <summary>XML 콘텐츠를 쓸 때 <see cref="T:System.Xml.XmlWriter" />에서 중복된 네임스페이스 선언을 제거할지 여부를 표시하는 값을 가져오거나 설정합니다. 기본 동작은 작성기에서 작성기의 네임스페이스 확인자에 있는 모든 네임스페이스 선언을 출력하는 것입니다.</summary>
      <returns>
        <see cref="T:System.Xml.NamespaceHandling" />에서 중복된 네임스페이스 선언을 제거할지 여부를 지정하는 데 사용되는 <see cref="T:System.Xml.XmlWriter" /> 열거형입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineChars">
      <summary>줄 바꿈에 사용할 문자열을 가져오거나 설정합니다.</summary>
      <returns>줄 바꿈에 사용할 문자열입니다. 이 속성에 설정할 수 있는 문자열 값에는 제한이 없습니다. 그러나 XML을 올바르게 유지하려면 공백 문자, 탭, 캐리지 리턴 또는 줄 바꿈 같은 유효한 공백 문자만 지정해야 합니다. 기본값은 <c>\r\n</c> (캐리지 리턴, 줄 바꿈).</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" />에 할당된 값이 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineHandling">
      <summary>줄 바꿈을 출력에 정규화할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xml.NewLineHandling" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Xml.NewLineHandling.Replace" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineOnAttributes">
      <summary>특성을 새 줄에 쓸지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>특성을 개별 줄에 쓰려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.  
   
 <see cref="P:System.Xml.XmlWriterSettings.Indent" /> 속성 값이 <see langword="false" />인 경우에는 이 설정을 적용해도 효과가 없습니다.  

  

 <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" />를 <see langword="true" />로 설정하면 각 특성 앞에 줄 바꿈과 한 수준 들여쓰기가 추가됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration">
      <summary>XML 선언을 생략할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>XML 선언을 생략하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />로, XML 선언이 작성됩니다.</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.OutputMethod">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> 출력을 serialize하는 데 사용되는 메서드를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.XmlOutputMethod" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Xml.XmlOutputMethod.Xml" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Reset">
      <summary>설정 클래스의 멤버를 해당 기본값으로 다시 설정합니다.</summary>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> 메서드가 호출될 때 <see cref="M:System.Xml.XmlWriter.Close" />가 닫히지 않은 모든 요소 태그에 닫는 태그를 추가할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>닫히지 않은 모든 요소 태그가 닫히면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="T:System.Xml.XPath.IXPathNavigable">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 클래스에 대한 접근자를 제공합니다.</summary>
    </member>
    <member name="M:System.Xml.XPath.IXPathNavigable.CreateNavigator">
      <summary>새 <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체</returns>
    </member>
    <member name="T:System.Xml.XPath.XmlCaseOrder">
      <summary>대문자와 소문자에 대한 정렬 순서를 지정합니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.LowerFirst">
      <summary>소문자가 대문자보다 앞에 정렬됩니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.None">
      <summary>대/소문자를 무시합니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.UpperFirst">
      <summary>대문자가 소문자보다 앞에 정렬됩니다.</summary>
    </member>
    <member name="T:System.Xml.XPath.XmlDataType">
      <summary>정렬 순서를 결정하는 데 사용되는 데이터 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlDataType.Number">
      <summary>값은 숫자 순으로 정렬됩니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlDataType.Text">
      <summary>값은 알파벳 순으로 정렬됩니다.</summary>
    </member>
    <member name="T:System.Xml.XPath.XmlSortOrder">
      <summary>정렬 순서를 지정합니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlSortOrder.Ascending">
      <summary>노드가 오름차순으로 정렬됩니다. 예를 들어, 숫자 1, 2, 3, 4를 오름차순으로 정렬하면 1, 2, 3, 4가 됩니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlSortOrder.Descending">
      <summary>노드가 내림차순으로 정렬됩니다. 예를 들어, 숫자 1, 2, 3, 4를 내림차순으로 정렬하면 4, 3, 2, 1이 됩니다.</summary>
    </member>
    <member name="T:System.Xml.XPath.XPathExpression">
      <summary>컴파일된 XPath 식을 나타내는 형식화된 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Collections.IComparer)">
      <summary>파생 클래스에서 재정의된 경우 XPath 식에서 선택한 노드를 지정된 <see cref="T:System.Collections.IComparer" /> 개체에 따라 정렬합니다.</summary>
      <param name="expr">정렬 키를 나타내는 개체입니다. 이 개체는 노드의 <see langword="string" /> 값 또는 컴파일된 XPath 식을 가진 <see cref="T:System.Xml.XPath.XPathExpression" /> 개체가 될 수 있습니다.</param>
      <param name="comparer">두 개체가 서로 같은지 비교하는 데 사용할 특정 데이터 형식 비교를 제공하는 <see cref="T:System.Collections.IComparer" /> 개체입니다.</param>
      <exception cref="T:System.Xml.XPath.XPathException">
        <see cref="T:System.Xml.XPath.XPathExpression" /> 또는 정렬 키가 접두사를 포함한 상황에서 <see cref="T:System.Xml.XmlNamespaceManager" />가 제공되지 않았거나 제공된 <see cref="T:System.Xml.XmlNamespaceManager" />에서 접두사를 찾을 수 없습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType)">
      <summary>파생 클래스에서 재정의된 경우 XPath 식에서 선택한 노드를 전달된 매개 변수에 따라 정렬합니다.</summary>
      <param name="expr">정렬 키를 나타내는 개체입니다. 이 개체는 노드의 <see langword="string" /> 값 또는 컴파일된 XPath 식을 가진 <see cref="T:System.Xml.XPath.XPathExpression" /> 개체가 될 수 있습니다.</param>
      <param name="order">정렬 순서를 나타내는 <see cref="T:System.Xml.XPath.XmlSortOrder" /> 값입니다.</param>
      <param name="caseOrder">대/소문자 정렬 방법을 나타내는 <see cref="T:System.Xml.XPath.XmlCaseOrder" /> 값입니다.</param>
      <param name="lang">비교에 사용되는 언어입니다. 언어 형식(미국 영어의 경우 “us-en”)에 대한 <see cref="T:System.Globalization.CultureInfo" /> 메서드에 전달할 수 있는 <see cref="Overload:System.String.Compare" /> 클래스를 사용합니다. 빈 문자열을 지정하면 시스템 환경을 사용하여 <see cref="T:System.Globalization.CultureInfo" />를 결정합니다.</param>
      <param name="dataType">데이터 형식에 대한 정렬 순서를 나타내는 <see cref="T:System.Xml.XPath.XmlDataType" /> 값입니다.</param>
      <exception cref="T:System.Xml.XPath.XPathException">
        <see cref="T:System.Xml.XPath.XPathExpression" /> 또는 정렬 키가 접두사를 포함한 상황에서 <see cref="T:System.Xml.XmlNamespaceManager" />가 제공되지 않았거나 제공된 <see cref="T:System.Xml.XmlNamespaceManager" />에서 접두사를 찾을 수 없습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Clone">
      <summary>파생 클래스에서 재정의된 경우 이 <see cref="T:System.Xml.XPath.XPathExpression" />의 복제를 반환합니다.</summary>
      <returns>새 <see cref="T:System.Xml.XPath.XPathExpression" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Compile(System.String)">
      <summary>지정된 XPath 식을 컴파일하고 XPath 식을 나타내는 <see cref="T:System.Xml.XPath.XPathExpression" /> 개체를 반환합니다.</summary>
      <param name="xpath">XPath 식입니다.</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathExpression" /> 개체</returns>
      <exception cref="T:System.ArgumentException">XPath 식 매개 변수가 올바른 XPath 식이 아닙니다.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 식이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Compile(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>네임스페이스 확인을 위해 지정된 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 개체를 사용하여 XPath 식을 컴파일하고 XPath 식을 나타내는 <see cref="T:System.Xml.XPath.XPathExpression" /> 개체를 반환합니다.</summary>
      <param name="xpath">XPath 식입니다.</param>
      <param name="nsResolver">네임스페이스 확인을 위한 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 인터페이스를 구현하는 개체입니다.</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathExpression" /> 개체</returns>
      <exception cref="T:System.ArgumentException">XPath 식 매개 변수가 올바른 XPath 식이 아닙니다.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 식이 잘못되었습니다.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathExpression.Expression">
      <summary>파생 클래스에서 재정의된 경우 <see cref="T:System.Xml.XPath.XPathExpression" />의 <see langword="string" /> 표현을 가져옵니다.</summary>
      <returns>
        <see langword="string" />의 <see cref="T:System.Xml.XPath.XPathExpression" /> 표현입니다.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathExpression.ReturnType">
      <summary>파생 클래스에서 재정의된 경우 XPath 식의 결과 형식을 가져옵니다.</summary>
      <returns>XPath 식의 결과 형식을 나타내는 <see cref="T:System.Xml.XPath.XPathResultType" /> 값입니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.IXmlNamespaceResolver)">
      <summary>파생 클래스에서 재정의된 경우 네임스페이스 확인에 사용할 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 개체를 지정합니다.</summary>
      <param name="nsResolver">네임스페이스 확인에 사용할 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 인터페이스를 구현하는 개체입니다.</param>
      <exception cref="T:System.Xml.XPath.XPathException">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 개체 매개 변수가 <see cref="T:System.Xml.IXmlNamespaceResolver" />에서 파생되지 않았습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)">
      <summary>파생 클래스에서 재정의된 경우 네임스페이스 확인에 사용할 <see cref="T:System.Xml.XmlNamespaceManager" /> 개체를 지정합니다.</summary>
      <param name="nsManager">네임스페이스 확인에 사용할 <see cref="T:System.Xml.XmlNamespaceManager" /> 개체입니다.</param>
      <exception cref="T:System.Xml.XPath.XPathException">
        <see cref="T:System.Xml.XmlNamespaceManager" /> 개체 매개 변수가 <see cref="T:System.Xml.XmlNamespaceManager" />에서 파생되지 않았습니다.</exception>
    </member>
    <member name="T:System.Xml.XPath.XPathItem">
      <summary>XQuery 1.0 및 XPath 2.0 Data Model의 항목을 나타냅니다.</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.#ctor">
      <summary>
        <see cref="T:System.Xml.XPath.XPathItem" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.IsNode">
      <summary>파생 클래스에서 재정의된 경우 항목이 XPath 노드를 나타내는지 또는 atomic 값을 나타내는지를 가리키는 값을 가져옵니다.</summary>
      <returns>항목이 XPath 노드를 나타내면 <see langword="true" />이고 atomic 값을 나타내면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.TypedValue">
      <summary>파생 클래스에서 재정의된 경우 현재 항목을 스키마 형식에 따라 가장 적합한 .NET Framework 2.0 형식의 boxed 개체로 가져옵니다.</summary>
      <returns>가장 적합한 .NET Framework 형식의 boxed 개체로서의 현재 항목입니다.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.Value">
      <summary>파생 클래스에서 재정의된 경우 항목의 <see langword="string" /> 값을 가져옵니다.</summary>
      <returns>항목의 <see langword="string" /> 값입니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.ValueAs(System.Type)">
      <summary>항목의 값을 지정된 형식으로 반환합니다.</summary>
      <param name="returnType">항목 값을 반환할 때 적용되는 형식입니다.</param>
      <returns>요청한 형식으로 나타낸 항목의 값입니다.</returns>
      <exception cref="T:System.FormatException">항목의 값 형식이 대상 형식에 맞지 않습니다.</exception>
      <exception cref="T:System.InvalidCastException">시도된 캐스팅이 잘못된 경우</exception>
      <exception cref="T:System.OverflowException">시도된 캐스팅에서 오버플로가 발생했습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>파생 클래스에서 재정의된 경우 네임스페이스 접두사 확인을 위해 지정된 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 개체를 사용하여 항목의 값을 지정된 형식으로 반환합니다.</summary>
      <param name="returnType">항목 값을 반환하는 데 사용할 형식입니다.</param>
      <param name="nsResolver">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 개체는 네임스페이스 접두사를 확인하는 데 사용됩니다.</param>
      <returns>요청한 형식으로 나타낸 항목의 값입니다.</returns>
      <exception cref="T:System.FormatException">항목의 값 형식이 대상 형식에 맞지 않습니다.</exception>
      <exception cref="T:System.InvalidCastException">시도된 캐스팅이 잘못된 경우</exception>
      <exception cref="T:System.OverflowException">시도된 캐스팅에서 오버플로가 발생했습니다.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsBoolean">
      <summary>파생 클래스에서 재정의된 경우 항목의 값을 <see cref="T:System.Boolean" /> 형식으로 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Boolean" /> 형식의 항목 값입니다.</returns>
      <exception cref="T:System.FormatException">항목의 값 형식이 <see cref="T:System.Boolean" /> 형식과 맞지 않습니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.Boolean" />에 대해 시도된 캐스팅이 잘못된 경우</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsDateTime">
      <summary>파생 클래스에서 재정의된 경우 항목의 값을 <see cref="T:System.DateTime" /> 형식으로 가져옵니다.</summary>
      <returns>
        <see cref="T:System.DateTime" /> 형식의 항목 값입니다.</returns>
      <exception cref="T:System.FormatException">항목의 값 형식이 <see cref="T:System.DateTime" /> 형식과 맞지 않습니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DateTime" />에 대해 시도된 캐스팅이 잘못된 경우</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsDouble">
      <summary>파생 클래스에서 재정의된 경우 항목의 값을 <see cref="T:System.Double" /> 형식으로 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Double" /> 형식의 항목 값입니다.</returns>
      <exception cref="T:System.FormatException">항목의 값 형식이 <see cref="T:System.Double" /> 형식과 맞지 않습니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.Double" />에 대해 시도된 캐스팅이 잘못된 경우</exception>
      <exception cref="T:System.OverflowException">시도된 캐스팅에서 오버플로가 발생했습니다.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsInt">
      <summary>파생 클래스에서 재정의된 경우 항목의 값을 <see cref="T:System.Int32" /> 형식으로 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Int32" /> 형식의 항목 값입니다.</returns>
      <exception cref="T:System.FormatException">항목의 값 형식이 <see cref="T:System.Int32" /> 형식과 맞지 않습니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.Int32" />에 대해 시도된 캐스팅이 잘못된 경우</exception>
      <exception cref="T:System.OverflowException">시도된 캐스팅에서 오버플로가 발생했습니다.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsLong">
      <summary>파생 클래스에서 재정의된 경우 항목의 값을 <see cref="T:System.Int64" /> 형식으로 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Int64" /> 형식의 항목 값입니다.</returns>
      <exception cref="T:System.FormatException">항목의 값 형식이 <see cref="T:System.Int64" /> 형식과 맞지 않습니다.</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.Int64" />에 대해 시도된 캐스팅이 잘못된 경우</exception>
      <exception cref="T:System.OverflowException">시도된 캐스팅에서 오버플로가 발생했습니다.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueType">
      <summary>파생된 클래스에서 재정의되는 경우 항목의 .NET Framework 2.0 형식을 가져옵니다.</summary>
      <returns>항목의 .NET Framework형식입니다. 기본값은 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.XmlType">
      <summary>파생 클래스에서 재정의된 경우 항목의 <see cref="T:System.Xml.Schema.XmlSchemaType" />을 가져옵니다.</summary>
      <returns>항목의 <see cref="T:System.Xml.Schema.XmlSchemaType" />입니다.</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNamespaceScope">
      <summary>네임스페이스 범위를 정의합니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.All">
      <summary>현재 노드의 범위에서 정의된 모든 네임스페이스를 반환합니다. 여기에는 항상 암시적으로 선언되는 <c>xmlns:xml</c> 네임스페이스가 포함됩니다. 반환되는 네임스페이스의 순서는 정의되지 않습니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.ExcludeXml">
      <summary>
        <c>xmlns:xml</c> 네임스페이스를 제외하고 현재 노드의 범위에 정의된 모든 네임스페이스를 반환합니다. <c>xmlns:xml</c> 네임스페이스는 항상 암시적으로 선언됩니다. 반환되는 네임스페이스의 순서는 정의되지 않습니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.Local">
      <summary>현재 노드에서 로컬로 정의된 네임스페이스를 모두 반환합니다.</summary>
    </member>
    <member name="T:System.Xml.XPath.XPathNavigator">
      <summary>XML 데이터를 탐색하고 편집하기 위한 커서 모델을 제공합니다.</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.#ctor">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild">
      <summary>현재 노드의 자식 노드 목록 끝에 새 자식 노드를 하나 이상 만드는 데 사용되는 <see cref="T:System.Xml.XmlWriter" /> 개체를 반환합니다.</summary>
      <returns>현재 노드의 자식 노드 목록 끝에 새 자식 노드를 만드는 데 사용되는 <see cref="T:System.Xml.XmlWriter" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 있는 현재 노드가 요소 노드 또는 루트 노드가 아닙니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.String)">
      <summary>지정된 XML 데이터 문자열을 사용하여 현재 노드의 자식 노드 목록 끝에 새 자식 노드를 만듭니다.</summary>
      <param name="newChild">새 자식 노드에 대한 XML 데이터 문자열입니다.</param>
      <exception cref="T:System.ArgumentNullException">XML 데이터 문자열 매개 변수가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 있는 현재 노드가 요소 노드 또는 루트 노드가 아닙니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
      <exception cref="T:System.Xml.XmlException">XML 데이터 문자열 매개 변수의 형식이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XmlReader)">
      <summary>지정된 <see cref="T:System.Xml.XmlReader" /> 개체의 XML 콘텐츠를 사용하여 현재 노드의 자식 노드 목록 끝에 새 자식 노드를 만듭니다.</summary>
      <param name="newChild">새 자식 노드에 대한 XML 데이터에 있는 <see cref="T:System.Xml.XmlReader" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> 개체가 오류 상태이거나 닫혀 있습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> 개체 매개 변수가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 있는 현재 노드가 요소 노드 또는 루트 노드가 아닙니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> 개체 매개 변수의 XML 콘텐츠 형식이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XPath.XPathNavigator)">
      <summary>지정된 <see cref="T:System.Xml.XPath.XPathNavigator" />에 있는 노드를 사용하여 현재 노드의 자식 노드 목록 끝에 새 자식 노드를 만듭니다.</summary>
      <param name="newChild">새 자식 노드로 추가할 노드에 있는 <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체 매개 변수가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 있는 현재 노드가 요소 노드 또는 루트 노드가 아닙니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChildElement(System.String,System.String,System.String,System.String)">
      <summary>지정된 값과 함께 지정된 네임스페이스 접두사, 로컬 이름 및 네임스페이스 URI를 사용하여 현재 노드의 자식 노드 목록 끝에 새 자식 요소 노드를 만듭니다.</summary>
      <param name="prefix">새 자식 요소 노드의 네임스페이스 접두사입니다(있는 경우).</param>
      <param name="localName">새 자식 요소 노드의 로컬 이름입니다(있는 경우).</param>
      <param name="namespaceURI">새 자식 요소 노드의 네임스페이스 URI입니다(있는 경우). <see cref="F:System.String.Empty" /> 및 <see langword="null" />는 동일합니다.</param>
      <param name="value">새 자식 요소 노드의 값입니다. <see cref="F:System.String.Empty" /> 또는 <see langword="null" />을 전달하면 빈 요소가 생성됩니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 있는 현재 노드가 요소 노드 또는 루트 노드가 아닙니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.BaseURI">
      <summary>파생 클래스에서 재정의되면 현재 노드에 대한 기본 URI를 가져옵니다.</summary>
      <returns>노드가 로드된 위치이거나, 값이 없으면 <see cref="F:System.String.Empty" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.CanEdit">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서 기본 XML 데이터를 편집할 수 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />에서 <see cref="T:System.Xml.XPath.XPathNavigator" /> 기본 XML 데이터를 편집할 수 있으면이 고, <see langword="false" />그렇지 않으면입니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" />에 있는 XML 데이터가 제공된 XSD(XML 스키마 정의 언어) 스키마를 준수하는지 확인합니다.</summary>
      <param name="schemas">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />에 포함된 XML 데이터의 유효성을 검사하는 데 사용할 스키마를 포함하는 <see cref="T:System.Xml.XPath.XPathNavigator" />입니다.</param>
      <param name="validationEventHandler">스키마 유효성 검사 경고 및 오류에 대한 정보를 받는 <see cref="T:System.Xml.Schema.ValidationEventHandler" />입니다.</param>
      <returns>스키마 유효성 검사 오류가 발생하지 않으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">스키마 유효성 검사 오류가 발생했지만 유효성 검사 오류를 처리할 <see cref="T:System.Xml.Schema.ValidationEventHandler" />가 지정되지 않은 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 요소, 특성 또는 루트 이외의 노드에 있거나, 유효성 검사를 수행할 형식 정보가 없는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" />가 XML 데이터의 루트 노드에 없는 상태에서 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 매개 변수를 사용하여 <see cref="T:System.Xml.XPath.XPathNavigator" /> 메서드를 호출한 경우</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Clone">
      <summary>파생 클래스에서 재정의할 때 이 <see cref="T:System.Xml.XPath.XPathNavigator" />와 같은 노드에 새 <see cref="T:System.Xml.XPath.XPathNavigator" />를 만듭니다.</summary>
      <returns>이 <see cref="T:System.Xml.XPath.XPathNavigator" />와 같은 노드에 있는 새 <see cref="T:System.Xml.XPath.XPathNavigator" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ComparePosition(System.Xml.XPath.XPathNavigator)">
      <summary>현재 <see cref="T:System.Xml.XPath.XPathNavigator" />의 위치를 지정된 <see cref="T:System.Xml.XPath.XPathNavigator" />의 위치와 비교합니다.</summary>
      <param name="nav">비교할 대상인 <see cref="T:System.Xml.XPath.XPathNavigator" />입니다.</param>
      <returns>두 <see cref="T:System.Xml.XmlNodeOrder" /> 개체의 비교 위치를 나타내는 <see cref="T:System.Xml.XPath.XPathNavigator" /> 값입니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Compile(System.String)">
      <summary>XPath 식을 나타내는 문자열을 컴파일하고 <see cref="T:System.Xml.XPath.XPathExpression" /> 개체를 반환합니다.</summary>
      <param name="xpath">XPath 식을 나타내는 문자열입니다.</param>
      <returns>XPath 식을 나타내는 <see cref="T:System.Xml.XPath.XPathExpression" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="xpath" /> 매개 변수에 유효하지 않은 XPath 식이 포함된 경우</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 식이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateAttribute(System.String,System.String,System.String,System.String)">
      <summary>지정된 값과 함께 지정된 네임스페이스 접두사, 로컬 이름 및 네임스페이스 URI를 사용하여 현재 요소 노드에 특성 노드를 만듭니다.</summary>
      <param name="prefix">새 특성 노드의 네임스페이스 접두사입니다(있는 경우).</param>
      <param name="localName">새 특성 노드의 로컬 이름으로, <see cref="F:System.String.Empty" /> 또는 <see langword="null" />일 수 없습니다.</param>
      <param name="namespaceURI">새 특성 노드의 네임스페이스 URI입니다(있는 경우).</param>
      <param name="value">새 특성 노드의 값입니다. <see cref="F:System.String.Empty" /> 또는 <see langword="null" />을 전달하면 빈 특성 노드가 만들어집니다.</param>
      <exception cref="T:System.InvalidOperationException">요소 노드에 <see cref="T:System.Xml.XPath.XPathNavigator" />의 위치가 지정되지 않습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateAttributes">
      <summary>현재 요소에 새 특성을 만드는 데 사용된 <see cref="T:System.Xml.XmlWriter" /> 개체를 반환합니다.</summary>
      <returns>현재 요소에 새 특성을 만드는 데 사용된 <see cref="T:System.Xml.XmlWriter" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">요소 노드에 <see cref="T:System.Xml.XPath.XPathNavigator" />의 위치가 지정되지 않습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateNavigator">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" />의 복사본을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xml.XPath.XPathNavigator" />의 <see cref="T:System.Xml.XPath.XPathNavigator" /> 복사본입니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.DeleteRange(System.Xml.XPath.XPathNavigator)">
      <summary>현재 노드부터 지정된 노드까지의 형제 노드 범위를 삭제합니다.</summary>
      <param name="lastSiblingToDelete">삭제할 범위의 마지막 형제 노드에 있는 <see cref="T:System.Xml.XPath.XPathNavigator" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">지정된 <see cref="T:System.Xml.XPath.XPathNavigator" />는 <see langword="null" />입니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">지정된 삭제할 마지막 노드는 현재 노드의 유효한 형제 노드가 아닙니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.DeleteSelf">
      <summary>현재 노드와 해당 자식 노드를 삭제합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 삭제할 수 없는 노드(예: 루트 노드 또는 네임스페이스 노드)에 있습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.String)">
      <summary>지정된 XPath 식을 계산하고 형식화된 결과를 반환합니다.</summary>
      <param name="xpath">계산할 수 있는 XPath 식을 나타내는 문자열입니다.</param>
      <returns>식의 결과(부울, 숫자, 문자열 또는 노드 집합)입니다. 각각 <see cref="T:System.Boolean" />, <see cref="T:System.Double" />, <see cref="T:System.String" /> 또는 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 개체에 매핑됩니다.</returns>
      <exception cref="T:System.ArgumentException">XPath 식의 반환 형식은 노드 집합입니다.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 식이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>XPath 식에 있는 네임스페이스 접두사를 확인하기 위해 지정된 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 개체를 사용하여 XPath 식을 계산한 후 형식화된 결과를 반환합니다.</summary>
      <param name="xpath">계산할 수 있는 XPath 식을 나타내는 문자열입니다.</param>
      <param name="resolver">XPath 식에 있는 네임스페이스 접두사를 확인하는 데 사용되는 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 개체입니다.</param>
      <returns>식의 결과(부울, 숫자, 문자열 또는 노드 집합)입니다. 각각 <see cref="T:System.Boolean" />, <see cref="T:System.Double" />, <see cref="T:System.String" /> 또는 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 개체에 매핑됩니다.</returns>
      <exception cref="T:System.ArgumentException">XPath 식의 반환 형식은 노드 집합입니다.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 식이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathExpression" />을 계산하고 형식화된 결과를 반환합니다.</summary>
      <param name="expr">계산할 수 있는 <see cref="T:System.Xml.XPath.XPathExpression" />입니다.</param>
      <returns>식의 결과(부울, 숫자, 문자열 또는 노드 집합)입니다. 각각 <see cref="T:System.Boolean" />, <see cref="T:System.Double" />, <see cref="T:System.String" /> 또는 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 개체에 매핑됩니다.</returns>
      <exception cref="T:System.ArgumentException">XPath 식의 반환 형식은 노드 집합입니다.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 식이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression,System.Xml.XPath.XPathNodeIterator)">
      <summary>제공된 컨텍스트를 사용하여 <see cref="T:System.Xml.XPath.XPathExpression" />을 계산한 후 형식화된 결과를 반환합니다.</summary>
      <param name="expr">계산할 수 있는 <see cref="T:System.Xml.XPath.XPathExpression" />입니다.</param>
      <param name="context">계산이 수행될 선택된 노드 집합을 가리키는 <see cref="T:System.Xml.XPath.XPathNodeIterator" />입니다.</param>
      <returns>식의 결과(부울, 숫자, 문자열 또는 노드 집합)입니다. 각각 <see cref="T:System.Boolean" />, <see cref="T:System.Double" />, <see cref="T:System.String" /> 또는 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 개체에 매핑됩니다.</returns>
      <exception cref="T:System.ArgumentException">XPath 식의 반환 형식은 노드 집합입니다.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 식이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetAttribute(System.String,System.String)">
      <summary>지정된 로컬 이름과 네임스페이스 URI가 있는 특성의 값을 가져옵니다.</summary>
      <param name="localName">특성의 로컬 이름입니다. <paramref name="localName" />은 대/소문자를 구분합니다.</param>
      <param name="namespaceURI">특성의 네임스페이스 URI입니다.</param>
      <returns>지정된 특성의 값을 포함하는 <see cref="T:System.String" />입니다. 일치하는 특성이 없거나 <see cref="F:System.String.Empty" />가 요소 노드에 없으면 <see cref="T:System.Xml.XPath.XPathNavigator" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetNamespace(System.String)">
      <summary>지정된 로컬 이름에 해당하는 네임스페이스 노드의 값을 반환합니다.</summary>
      <param name="name">네임스페이스 노드의 로컬 이름입니다.</param>
      <returns>네임스페이스 노드의 값을 포함하는 <see cref="T:System.String" />입니다. 일치하는 네임스페이스 노드가 없거나 <see cref="F:System.String.Empty" />가 요소 노드에 없으면 <see cref="T:System.Xml.XPath.XPathNavigator" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>현재 노드의 범위 내 네임스페이스를 반환합니다.</summary>
      <param name="scope">반환할 네임스페이스를 지정하는 <see cref="T:System.Xml.XmlNamespaceScope" /> 값입니다.</param>
      <returns>접두사를 키로 사용하는 네임스페이스 이름의 <see cref="T:System.Collections.Generic.IDictionary`2" /> 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.HasAttributes">
      <summary>현재 노드에 특성이 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />현재 노드에 특성이 있으면이 고, 그렇지 않으면입니다. 현재 <see langword="false" /> 노드에 특성이 <see cref="T:System.Xml.XPath.XPathNavigator" /> 없거나가 요소 노드에 없으면를 반환 합니다.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.HasChildren">
      <summary>현재 노드에 자식 노드가 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 노드에 자식 노드가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.InnerXml">
      <summary>현재 노드의 자식 노드를 나타내는 태그를 가져오거나 설정합니다.</summary>
      <returns>현재 노드에 있는 하위 노드의 태그를 포함하는 <see cref="T:System.String" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XPath.XPathNavigator.InnerXml" /> 속성을 설정할 수 없습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter">
      <summary>현재 선택된 노드 뒤에 새 형제 노드를 만드는 데 사용되는 <see cref="T:System.Xml.XmlWriter" /> 개체를 반환합니다.</summary>
      <returns>현재 선택된 노드 뒤에 새 형제 노드를 만드는 데 사용되는 <see cref="T:System.Xml.XmlWriter" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 위치에서는 현재 노드 뒤에 새로운 형제 노드를 삽입할 수 없습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.String)">
      <summary>지정된 XML 문자열을 사용하여 현재 선택된 노드 뒤에 새 형제 노드를 만듭니다.</summary>
      <param name="newSibling">새 형제 노드에 대한 XML 데이터 문자열입니다.</param>
      <exception cref="T:System.ArgumentNullException">XML 문자열 매개 변수는 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 위치에서는 현재 노드 뒤에 새로운 형제 노드를 삽입할 수 없습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
      <exception cref="T:System.Xml.XmlException">XML 문자열 매개 변수의 형식이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XmlReader)">
      <summary>지정된 <see cref="T:System.Xml.XmlReader" /> 개체의 XML 콘텐츠를 사용하여 현재 선택된 노드 뒤에 새 형제 노드를 만듭니다.</summary>
      <param name="newSibling">새 형제 노드에 대한 XML 데이터에 있는 <see cref="T:System.Xml.XmlReader" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> 개체가 오류 상태이거나 닫혀 있습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> 개체 매개 변수가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 위치에서는 현재 노드 뒤에 새로운 형제 노드를 삽입할 수 없습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> 개체 매개 변수의 XML 콘텐츠 형식이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XPath.XPathNavigator)">
      <summary>지정된 <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체의 노드를 사용하여 현재 선택된 노드 뒤에 새 형제 노드를 만듭니다.</summary>
      <param name="newSibling">새 형제 노드로 추가할 노드에 있는 <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체 매개 변수가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 위치에서는 현재 노드 뒤에 새로운 형제 노드를 삽입할 수 없습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore">
      <summary>현재 선택된 노드 앞에 새 형제 노드를 만드는 데 사용되는 <see cref="T:System.Xml.XmlWriter" /> 개체를 반환합니다.</summary>
      <returns>현재 선택된 노드 앞에 새 형제 노드를 만드는 데 사용되는 <see cref="T:System.Xml.XmlWriter" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 위치에서는 현재 노드 앞에 새로운 형제 노드를 삽입할 수 없습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.String)">
      <summary>지정된 XML 문자열을 사용하여 현재 선택된 노드 앞에 새 형제 노드를 만듭니다.</summary>
      <param name="newSibling">새 형제 노드에 대한 XML 데이터 문자열입니다.</param>
      <exception cref="T:System.ArgumentNullException">XML 문자열 매개 변수는 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 위치에서는 현재 노드 앞에 새로운 형제 노드를 삽입할 수 없습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
      <exception cref="T:System.Xml.XmlException">XML 문자열 매개 변수의 형식이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XmlReader)">
      <summary>지정된 <see cref="T:System.Xml.XmlReader" /> 개체의 XML 콘텐츠를 사용하여 현재 선택된 노드 앞에 새 형제 노드를 만듭니다.</summary>
      <param name="newSibling">새 형제 노드에 대한 XML 데이터에 있는 <see cref="T:System.Xml.XmlReader" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> 개체가 오류 상태이거나 닫혀 있습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> 개체 매개 변수가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 위치에서는 현재 노드 앞에 새로운 형제 노드를 삽입할 수 없습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> 개체 매개 변수의 XML 콘텐츠 형식이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XPath.XPathNavigator)">
      <summary>지정된 <see cref="T:System.Xml.XPath.XPathNavigator" />의 노드를 사용하여 현재 선택된 노드 앞에 새 형제 노드를 만듭니다.</summary>
      <param name="newSibling">새 형제 노드로 추가할 노드에 있는 <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체 매개 변수가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 위치에서는 현재 노드 앞에 새로운 형제 노드를 삽입할 수 없습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertElementAfter(System.String,System.String,System.String,System.String)">
      <summary>지정된 값과 함께 네임스페이스 접두사, 로컬 이름 및 네임스페이스 URI를 사용하여 현재 노드 뒤에 새 형제 요소를 만듭니다.</summary>
      <param name="prefix">새 자식 요소의 네임스페이스 접두사입니다(있는 경우).</param>
      <param name="localName">새 자식 요소의 로컬 이름입니다(있는 경우).</param>
      <param name="namespaceURI">새 자식 요소의 네임스페이스 URI입니다(있는 경우). <see cref="F:System.String.Empty" /> 및 <see langword="null" />는 동일합니다.</param>
      <param name="value">새 자식 요소의 값입니다. <see cref="F:System.String.Empty" /> 또는 <see langword="null" />을 전달하면 빈 요소가 생성됩니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 위치에서는 현재 노드 뒤에 새로운 형제 노드를 삽입할 수 없습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertElementBefore(System.String,System.String,System.String,System.String)">
      <summary>지정된 값과 함께 네임스페이스 접두사, 로컬 이름 및 네임스페이스 URI를 사용하여 현재 노드 앞에 새 형제 요소를 만듭니다.</summary>
      <param name="prefix">새 자식 요소의 네임스페이스 접두사입니다(있는 경우).</param>
      <param name="localName">새 자식 요소의 로컬 이름입니다(있는 경우).</param>
      <param name="namespaceURI">새 자식 요소의 네임스페이스 URI입니다(있는 경우). <see cref="F:System.String.Empty" /> 및 <see langword="null" />는 동일합니다.</param>
      <param name="value">새 자식 요소의 값입니다. <see cref="F:System.String.Empty" /> 또는 <see langword="null" />을 전달하면 빈 요소가 생성됩니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 위치에서는 현재 노드 앞에 새로운 형제 노드를 삽입할 수 없습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.IsDescendant(System.Xml.XPath.XPathNavigator)">
      <summary>지정된 <see cref="T:System.Xml.XPath.XPathNavigator" />가 현재 <see cref="T:System.Xml.XPath.XPathNavigator" />의 하위 항목인지 여부를 확인합니다.</summary>
      <param name="nav">이 <see cref="T:System.Xml.XPath.XPathNavigator" />와 비교할 <see cref="T:System.Xml.XPath.XPathNavigator" />입니다.</param>
      <returns>지정된 <see cref="T:System.Xml.XPath.XPathNavigator" />가 현재 <see cref="T:System.Xml.XPath.XPathNavigator" />의 하위 항목이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.IsEmptyElement">
      <summary>파생 클래스에서 재정의되면 현재 노드가 끝 요소 태그가 없는 빈 요소인지를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 노드가 빈 요소이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.IsNode">
      <summary>현재 노드가 XPath 노드를 나타내는지를 표시하는 값을 가져옵니다.</summary>
      <returns>항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
      <summary>파생 클래스에서 재정의되면 현재 <see cref="T:System.Xml.XPath.XPathNavigator" />가 지정된 <see cref="T:System.Xml.XPath.XPathNavigator" />와 같은 위치에 있는지 확인합니다.</summary>
      <param name="other">이 <see cref="T:System.Xml.XPath.XPathNavigator" />와 비교할 <see cref="T:System.Xml.XPath.XPathNavigator" />입니다.</param>
      <returns>두 <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체의 위치가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.LocalName">
      <summary>파생 클래스에서 재정의되면 현재 노드의<see cref="P:System.Xml.XPath.XPathNavigator.Name" />을 네임스페이스 접두사 없이 가져옵니다.</summary>
      <returns>현재 노드의 로컬 이름을 포함하는 <see cref="T:System.String" />이거나 현재 노드에 이름이 없으면(예: 텍스트 또는 주석 노드) <see cref="F:System.String.Empty" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.LookupNamespace(System.String)">
      <summary>지정된 접두사의 네임스페이스 URI를 가져옵니다.</summary>
      <param name="prefix">확인할 네임스페이스 URI의 접두사입니다. <see cref="F:System.String.Empty" />를 전달하면 기본 네임스페이스가 사용됩니다.</param>
      <returns>지정된 네임스페이스 접두사에 할당된 네임스페이스 URI를 포함하는 <see cref="T:System.String" />이거나, 지정된 접두사에 할당된 네임스페이스 URI가 없으면 <see langword="null" />입니다. <see cref="T:System.String" />은 원자화됩니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.LookupPrefix(System.String)">
      <summary>지정된 네임스페이스 URI에 대해 선언된 접두사를 가져옵니다.</summary>
      <param name="namespaceURI">접두사를 확인할 네임스페이스 URI입니다.</param>
      <returns>지정된 네임스페이스 URI에 할당된 네임스페이스 접두사를 포함하는 <see cref="T:System.String" />이거나, 지정된 네임스페이스 URI에 할당된 접두사가 없으면 <see cref="F:System.String.Empty" />입니다. <see cref="T:System.String" />은 원자화됩니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Matches(System.String)">
      <summary>현재 노드가 지정된 XPath 식과 일치하는지를 확인합니다.</summary>
      <param name="xpath">XPath 식입니다.</param>
      <returns>현재 노드가 지정된 XPath 식과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentException">XPath 식은 평가할 수 없습니다.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 식이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Matches(System.Xml.XPath.XPathExpression)">
      <summary>현재 노드가 지정된 <see cref="T:System.Xml.XPath.XPathExpression" />과 일치하는지 확인합니다.</summary>
      <param name="expr">컴파일된 XPath 식을 포함하는 <see cref="T:System.Xml.XPath.XPathExpression" /> 개체입니다.</param>
      <returns>현재 노드가 <see cref="T:System.Xml.XPath.XPathExpression" />과 일치하면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentException">XPath 식은 평가할 수 없습니다.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 식이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
      <summary>파생 클래스에서 재정의되면 <see cref="T:System.Xml.XPath.XPathNavigator" />를 지정된 <see cref="T:System.Xml.XPath.XPathNavigator" />와 같은 위치로 이동합니다.</summary>
      <param name="other">이동하려는 노드에 있는 <see cref="T:System.Xml.XPath.XPathNavigator" />입니다.</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 지정된 <see cref="T:System.Xml.XPath.XPathNavigator" />와 같은 위치로 성공적으로 이동하면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다. <see langword="false" />이면 <see cref="T:System.Xml.XPath.XPathNavigator" />의 위치가 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToAttribute(System.String,System.String)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" />를 로컬 이름 및 네임스페이스 URI가 일치하는 특성으로 이동합니다.</summary>
      <param name="localName">특성의 로컬 이름입니다.</param>
      <param name="namespaceURI">특성의 네임스페이스 URI입니다. 빈 네임스페이스인 경우에는 <see langword="null" />입니다.</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 특성으로 성공적으로 이동하면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다. <see langword="false" />이면 <see cref="T:System.Xml.XPath.XPathNavigator" />의 위치가 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToChild(System.String,System.String)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" />를 지정된 로컬 이름 및 네임스페이스 URI를 사용하는 자식 노드로 이동합니다.</summary>
      <param name="localName">이동하려는 대상 자식 노드의 로컬 이름입니다.</param>
      <param name="namespaceURI">이동하려는 대상 자식 노드의 네임스페이스 URI입니다.</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 자식 노드로 성공적으로 이동하면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다. <see langword="false" />이면 <see cref="T:System.Xml.XPath.XPathNavigator" />의 위치가 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToChild(System.Xml.XPath.XPathNodeType)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" />를 지정된 <see cref="T:System.Xml.XPath.XPathNodeType" />의 자식 노드로 이동합니다.</summary>
      <param name="type">이동하려는 대상 자식 노드의 <see cref="T:System.Xml.XPath.XPathNodeType" />입니다.</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 자식 노드로 성공적으로 이동하면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다. <see langword="false" />이면 <see cref="T:System.Xml.XPath.XPathNavigator" />의 위치가 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirst">
      <summary>현재 노드의 첫 번째 형제 노드로 <see cref="T:System.Xml.XPath.XPathNavigator" />를 이동합니다.</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 현재 노드의 첫 번째 형제 노드로 성공적으로 이동하면 <see langword="true" />이고, 첫 번째 형제 노드가 없거나 <see cref="T:System.Xml.XPath.XPathNavigator" />가 현재 특성 노드에 있으면 <see langword="false" />입니다. <see cref="T:System.Xml.XPath.XPathNavigator" />가 이미 첫 번째 형제에 배치되어 있으면, <see cref="T:System.Xml.XPath.XPathNavigator" />는 <see langword="true" />를 반환하며 해당 위치를 이동하지 않습니다.  
첫 번째 형제가 없어 <see cref="M:System.Xml.XPath.XPathNavigator.MoveToFirst" />가 <see langword="false" />를 반환하거나 <see cref="T:System.Xml.XPath.XPathNavigator" />가 현재 특성에 배치되어 있는 경우 <see cref="T:System.Xml.XPath.XPathNavigator" />의 위치는 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstAttribute">
      <summary>파생 클래스에서 재정의되면 <see cref="T:System.Xml.XPath.XPathNavigator" />를 현재 노드의 첫 번째 특성으로 이동합니다.</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 현재 노드의 첫 번째 특성으로 이동하면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다. <see langword="false" />이면 <see cref="T:System.Xml.XPath.XPathNavigator" />의 위치가 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstChild">
      <summary>파생 클래스에서 재정의되면 <see cref="T:System.Xml.XPath.XPathNavigator" />를 현재 노드의 첫 번째 자식 노드로 이동합니다.</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 현재 노드의 첫 번째 자식 노드로 성공적으로 이동하면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다. <see langword="false" />이면 <see cref="T:System.Xml.XPath.XPathNavigator" />의 위치가 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" />를 현재 노드의 첫 번째 네임스페이스 노드로 이동합니다.</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 첫 번째 네임스페이스 노드로 성공적으로 이동하면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다. <see langword="false" />이면 <see cref="T:System.Xml.XPath.XPathNavigator" />의 위치가 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
      <summary>파생 클래스에서 재정의되면 <see cref="T:System.Xml.XPath.XPathNavigator" />를 지정된 <see cref="T:System.Xml.XPath.XPathNamespaceScope" />와 일치하는 첫 번째 네임스페이스 노드로 이동합니다.</summary>
      <param name="namespaceScope">네임스페이스 범위를 설명하는 <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> 값입니다.</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 첫 번째 네임스페이스 노드로 성공적으로 이동하면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다. <see langword="false" />이면 <see cref="T:System.Xml.XPath.XPathNavigator" />의 위치가 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String)">
      <summary>문서 순서에 따라 <see cref="T:System.Xml.XPath.XPathNavigator" />를 지정된 로컬 이름 및 네임스페이스 URI를 사용하는 요소로 이동합니다.</summary>
      <param name="localName">요소의 로컬 이름입니다.</param>
      <param name="namespaceURI">요소의 네임스페이스 URI입니다.</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 성공적으로 이동하면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String,System.Xml.XPath.XPathNavigator)">
      <summary>지정된 경계 내에서 문서 순서에 따라 <see cref="T:System.Xml.XPath.XPathNavigator" />를 지정된 로컬 이름 및 네임스페이스 URI를 사용하는 요소로 이동합니다.</summary>
      <param name="localName">요소의 로컬 이름입니다.</param>
      <param name="namespaceURI">요소의 네임스페이스 URI입니다.</param>
      <param name="end">다음 요소를 검색하는 동안 현재 <see cref="T:System.Xml.XPath.XPathNavigator" />가 벗어나지 않을 요소 경계에 있는 <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체입니다.</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 성공적으로 이동하면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType)">
      <summary>문서 순서에 따라 지정된 <see cref="T:System.Xml.XPath.XPathNodeType" />의 다음 요소로 <see cref="T:System.Xml.XPath.XPathNavigator" />를 이동합니다.</summary>
      <param name="type">요소의 <see cref="T:System.Xml.XPath.XPathNodeType" />입니다. <see cref="T:System.Xml.XPath.XPathNodeType" />은 <see cref="F:System.Xml.XPath.XPathNodeType.Attribute" /> 또는 <see cref="F:System.Xml.XPath.XPathNodeType.Namespace" />일 수 없습니다.</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 성공적으로 이동하면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType,System.Xml.XPath.XPathNavigator)">
      <summary>지정된 경계 내에서 문서 순서에 따라 <see cref="T:System.Xml.XPath.XPathNavigator" />를 지정된 <see cref="T:System.Xml.XPath.XPathNodeType" />의 다음 요소로 이동합니다.</summary>
      <param name="type">요소의 <see cref="T:System.Xml.XPath.XPathNodeType" />입니다. <see cref="T:System.Xml.XPath.XPathNodeType" />은 <see cref="F:System.Xml.XPath.XPathNodeType.Attribute" /> 또는 <see cref="F:System.Xml.XPath.XPathNodeType.Namespace" />일 수 없습니다.</param>
      <param name="end">다음 요소를 검색하는 동안 현재 <see cref="T:System.Xml.XPath.XPathNavigator" />가 벗어나지 않을 요소 경계에 있는 <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체입니다.</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 성공적으로 이동하면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToId(System.String)">
      <summary>파생 클래스에서 재정의되면 지정된 <see cref="T:System.String" />과 <c>ID</c> 형식의 값이 일치하는 특성을 포함하는 노드로 이동합니다.</summary>
      <param name="id">이동하려는 대상 노드의 <c>ID</c> 값을 나타내는 <see cref="T:System.String" />입니다.</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 성공적으로 이동하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <see langword="false" />이면 탐색기의 위치는 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNamespace(System.String)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" />를 지정된 네임스페이스 접두사를 사용하는 네임스페이스 노드로 이동합니다.</summary>
      <param name="name">네임스페이스 노드의 네임스페이스 접두사입니다.</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 지정된 네임스페이스로 성공적으로 이동하면 <see langword="true" />이고, 일치하는 네임스페이스 노드가 없거나 <see cref="T:System.Xml.XPath.XPathNavigator" />가 요소 노드에 없으면 <see langword="false" />입니다. <see langword="false" />이면 <see cref="T:System.Xml.XPath.XPathNavigator" />의 위치가 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext">
      <summary>파생 클래스에서 재정의되면 <see cref="T:System.Xml.XPath.XPathNavigator" />를 현재 노드의 다음 형제 노드로 이동합니다.</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 다음 형제 노드로 성공적으로 이동하면 <see langword="true" />이고 더 이상 현재 노드가 없거나 <see cref="T:System.Xml.XPath.XPathNavigator" />가 현재 특성 노드에 있으면 <see langword="false" />입니다. <see langword="false" />이면 <see cref="T:System.Xml.XPath.XPathNavigator" />의 위치가 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext(System.String,System.String)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" />를 지정된 로컬 이름 및 네임스페이스 URI를 사용하는 다음 형제 노드로 이동합니다.</summary>
      <param name="localName">이동하려는 다음 형제 노드의 로컬 이름입니다.</param>
      <param name="namespaceURI">이동하려는 다음 형제 노드의 네임스페이스 URI입니다.</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 다음 형제 노드로 성공적으로 이동하면 <see langword="true" />이고, 더 이상 형제 노드가 없거나 현재 <see cref="T:System.Xml.XPath.XPathNavigator" />가 특성 노드에 있으면 <see langword="false" />입니다. <see langword="false" />이면 <see cref="T:System.Xml.XPath.XPathNavigator" />의 위치가 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext(System.Xml.XPath.XPathNodeType)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" />를 현재 노드에서 지정된 <see cref="T:System.Xml.XPath.XPathNodeType" />과 일치하는 다음 형제 노드로 이동합니다.</summary>
      <param name="type">이동하려는 대상 형제 노드의 <see cref="T:System.Xml.XPath.XPathNodeType" />입니다.</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 다음 형제 노드로 성공적으로 이동하면 <see langword="true" />이고 더 이상 현재 노드가 없거나 <see cref="T:System.Xml.XPath.XPathNavigator" />가 현재 특성 노드에 있으면 <see langword="false" />입니다. <see langword="false" />이면 <see cref="T:System.Xml.XPath.XPathNavigator" />의 위치가 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextAttribute">
      <summary>파생 클래스에서 재정의되면 <see cref="T:System.Xml.XPath.XPathNavigator" />를 다음 특성으로 이동합니다.</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 다음 특성으로 이동하면 <see langword="true" />이고, 더 이상 특성이 없으면 <see langword="false" />입니다. <see langword="false" />이면 <see cref="T:System.Xml.XPath.XPathNavigator" />의 위치가 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" />를 다음 네임스페이스 노드로 이동합니다.</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 다음 네임스페이스 노드로 성공적으로 이동하면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다. <see langword="false" />이면 <see cref="T:System.Xml.XPath.XPathNavigator" />의 위치가 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
      <summary>파생 클래스에서 재정의되면 <see cref="T:System.Xml.XPath.XPathNavigator" />를 지정된 <see cref="T:System.Xml.XPath.XPathNamespaceScope" />와 일치하는 다음 네임스페이스 노드로 이동합니다.</summary>
      <param name="namespaceScope">네임스페이스 범위를 설명하는 <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> 값입니다.</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 다음 네임스페이스 노드로 성공적으로 이동하면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다. <see langword="false" />이면 <see cref="T:System.Xml.XPath.XPathNavigator" />의 위치가 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToParent">
      <summary>파생 클래스에서 재정의되면 <see cref="T:System.Xml.XPath.XPathNavigator" />를 현재 노드의 부모 노드로 이동합니다.</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 현재 노드의 부모 노드로 성공적으로 이동하면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다. <see langword="false" />이면 <see cref="T:System.Xml.XPath.XPathNavigator" />의 위치가 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToPrevious">
      <summary>파생 클래스에서 재정의되면 <see cref="T:System.Xml.XPath.XPathNavigator" />를 현재 노드의 이전 형제 노드로 이동합니다.</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 이전 형제 노드로 성공적으로 이동하면 <see langword="true" />이고, 이전 형제 노드가 없거나 현재 <see cref="T:System.Xml.XPath.XPathNavigator" />가 특성 노드에 있으면 <see langword="false" />입니다. <see langword="false" />이면 <see cref="T:System.Xml.XPath.XPathNavigator" />의 위치가 변경되지 않습니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToRoot">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" />를 현재 노드가 속해 있는 루트 노드로 이동합니다.</summary>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.Name">
      <summary>파생 클래스에서 재정의되면 현재 노드의 정규화된 이름을 가져옵니다.</summary>
      <returns>현재 노드의 정규화된 <see cref="P:System.Xml.XPath.XPathNavigator.Name" />를 포함하는 <see cref="T:System.String" />이거나, 현재 노드에 이름이 없으면(예: 텍스트 또는 주석 노드) <see cref="F:System.String.Empty" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NamespaceURI">
      <summary>파생 클래스에서 재정의되면 현재 노드의 네임스페이스 URI를 가져옵니다.</summary>
      <returns>현재 노드의 네임스페이스 URI를 포함하는 <see cref="T:System.String" /> 이거나, 현재 노드에 네임스페이스 URI가 없으면 <see cref="F:System.String.Empty" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NameTable">
      <summary>파생 클래스에서 재정의되면 <see cref="T:System.Xml.XmlNameTable" />의 <see cref="T:System.Xml.XPath.XPathNavigator" />을 가져옵니다.</summary>
      <returns>XML 문서 내에서 원자화된 버전의 <see cref="T:System.Xml.XmlNameTable" />을 가져올 수 있게 해주는 <see cref="T:System.String" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NavigatorComparer">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체의 같음 비교에 사용되는 <see cref="T:System.Collections.IEqualityComparer" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체의 같음 비교에 사용되는 <see cref="T:System.Collections.IEqualityComparer" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NodeType">
      <summary>파생 클래스에서 재정의할 때 현재 노드의 <see cref="T:System.Xml.XPath.XPathNodeType" />을 가져옵니다.</summary>
      <returns>현재 노드를 나타내는 <see cref="T:System.Xml.XPath.XPathNodeType" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.OuterXml">
      <summary>현재 노드와 해당 자식 노드의 여는 태그 및 닫는 태그를 나타내는 태그를 가져오거나 설정합니다.</summary>
      <returns>현재 노드와 해당 자식 노드의 여는 태그 및 닫는 태그를 나타내는 태그가 포함된 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.Prefix">
      <summary>파생 클래스에서 재정의되면 현재 노드와 관련된 네임스페이스 접두사를 가져옵니다.</summary>
      <returns>현재 노드에 연결된 네임스페이스 접두사를 포함하는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild">
      <summary>현재 노드의 자식 노드 목록 맨 앞에 새 자식 노드를 만드는 데 사용되는 <see cref="T:System.Xml.XmlWriter" /> 개체를 반환합니다.</summary>
      <returns>현재 노드의 자식 노드 목록 맨 앞에 새 자식 노드를 만드는 데 사용되는 <see cref="T:System.Xml.XmlWriter" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 있는 현재 노드 앞에 새 자식 노드를 추가할 수 없습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.String)">
      <summary>지정된 XML 문자열을 사용하여 현재 노드의 자식 노드 목록 맨 앞에 새 자식 노드를 만듭니다.</summary>
      <param name="newChild">새 자식 노드에 대한 XML 데이터 문자열입니다.</param>
      <exception cref="T:System.ArgumentNullException">XML 문자열 매개 변수는 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 있는 현재 노드 앞에 새 자식 노드를 추가할 수 없습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
      <exception cref="T:System.Xml.XmlException">XML 문자열 매개 변수의 형식이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XmlReader)">
      <summary>지정된 <see cref="T:System.Xml.XmlReader" /> 개체의 XML 콘텐츠를 사용하여 현재 노드의 자식 노드 목록 맨 앞에 새 자식 노드를 만듭니다.</summary>
      <param name="newChild">새 자식 노드에 대한 XML 데이터에 있는 <see cref="T:System.Xml.XmlReader" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> 개체가 오류 상태이거나 닫혀 있습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> 개체 매개 변수가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 있는 현재 노드 앞에 새 자식 노드를 추가할 수 없습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> 개체 매개 변수의 XML 콘텐츠 형식이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XPath.XPathNavigator)">
      <summary>지정된 <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체에 있는 노드를 사용하여 현재 노드의 자식 노드 목록 맨 앞에 새 자식 노드를 만듭니다.</summary>
      <param name="newChild">새 자식 노드로 추가할 노드에 있는 <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체 매개 변수가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 있는 현재 노드 앞에 새 자식 노드를 추가할 수 없습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChildElement(System.String,System.String,System.String,System.String)">
      <summary>지정된 값과 함께 네임스페이스 접두사, 로컬 이름 및 네임스페이스 URI를 사용하여 현재 노드의 자식 노드 목록 맨 앞에 새 자식 요소 노드를 만듭니다.</summary>
      <param name="prefix">새 자식 요소의 네임스페이스 접두사입니다(있는 경우).</param>
      <param name="localName">새 자식 요소의 로컬 이름입니다(있는 경우).</param>
      <param name="namespaceURI">새 자식 요소의 네임스페이스 URI입니다(있는 경우). <see cref="F:System.String.Empty" /> 및 <see langword="null" />는 동일합니다.</param>
      <param name="value">새 자식 요소의 값입니다. <see cref="F:System.String.Empty" /> 또는 <see langword="null" />을 전달하면 빈 요소가 생성됩니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 있는 현재 노드 앞에 새 자식 노드를 추가할 수 없습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReadSubtree">
      <summary>현재 노드와 해당 자식 노드를 포함하는 <see cref="T:System.Xml.XmlReader" /> 개체를 반환합니다.</summary>
      <returns>현재 노드와 해당 자식 노드를 포함하는 <see cref="T:System.Xml.XmlReader" /> 개체입니다.</returns>
      <exception cref="T:System.InvalidOperationException">요소 노드나 루트 노드에 <see cref="T:System.Xml.XPath.XPathNavigator" />의 위치가 지정되지 않았습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceRange(System.Xml.XPath.XPathNavigator)">
      <summary>현재 노드부터 지정된 노드까지의 형제 노드 범위를 바꿉니다.</summary>
      <param name="lastSiblingToReplace">바꿀 범위의 마지막 형제 노드에 있는 <see cref="T:System.Xml.XPath.XPathNavigator" />입니다.</param>
      <returns>바꾸기 범위를 지정하는 데 사용되는 <see cref="T:System.Xml.XmlWriter" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">지정된 <see cref="T:System.Xml.XPath.XPathNavigator" />는 <see langword="null" />입니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">지정된 바꿀 마지막 노드는 현재 노드의 유효한 형제 노드가 아닙니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.String)">
      <summary>현재 노드를 지정된 문자열의 콘텐츠로 바꿉니다.</summary>
      <param name="newNode">새 노드에 대한 XML 데이터 문자열입니다.</param>
      <exception cref="T:System.ArgumentNullException">XML 문자열 매개 변수는 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 요소, 텍스트, 처리 명령 또는 주석 노드에 배치되지 않았습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
      <exception cref="T:System.Xml.XmlException">XML 문자열 매개 변수의 형식이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XmlReader)">
      <summary>현재 노드를 지정된 <see cref="T:System.Xml.XmlReader" /> 개체의 콘텐츠로 바꿉니다.</summary>
      <param name="newNode">새 노드에 대한 XML 데이터에 있는 <see cref="T:System.Xml.XmlReader" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> 개체가 오류 상태이거나 닫혀 있습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> 개체 매개 변수가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 요소, 텍스트, 처리 명령 또는 주석 노드에 배치되지 않았습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> 개체 매개 변수의 XML 콘텐츠 형식이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XPath.XPathNavigator)">
      <summary>현재 노드를 지정된 <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체의 콘텐츠로 바꿉니다.</summary>
      <param name="newNode">새 노드에 있는 <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체 매개 변수가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 요소, 텍스트, 처리 명령 또는 주석 노드에 배치되지 않았습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체 매개 변수의 XML 콘텐츠 형식이 잘못되었습니다.</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.SchemaInfo">
      <summary>스키마 유효성 검사의 결과로 현재 노드에 할당된 스키마 정보를 가져옵니다.</summary>
      <returns>현재 노드에 대한 스키마 정보를 포함하는 <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.String)">
      <summary>지정된 XPath 식을 사용하여 노드 집합을 선택합니다.</summary>
      <param name="xpath">XPath 식을 나타내는 <see cref="T:System.String" />입니다.</param>
      <returns>선택한 노드 집합을 가리키는 <see cref="T:System.Xml.XPath.XPathNodeIterator" />입니다.</returns>
      <exception cref="T:System.ArgumentException">XPath 식에 오류가 포함되어 있거나 해당 반환 형식이 노드 집합이 아닙니다.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 식이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>네임스페이스 접두사를 확인하기 위해 지정된 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 개체와 함께 XPath 식을 사용하여 노드 집합을 선택합니다.</summary>
      <param name="xpath">XPath 식을 나타내는 <see cref="T:System.String" />입니다.</param>
      <param name="resolver">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 개체는 네임스페이스 접두사를 확인하는 데 사용됩니다.</param>
      <returns>선택된 노드 집합을 가리키는 <see cref="T:System.Xml.XPath.XPathNodeIterator" />입니다.</returns>
      <exception cref="T:System.ArgumentException">XPath 식에 오류가 포함되어 있거나 해당 반환 형식이 노드 집합이 아닙니다.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 식이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.Xml.XPath.XPathExpression)">
      <summary>지정된 <see cref="T:System.Xml.XPath.XPathExpression" />을 사용하여 노드 집합을 선택합니다.</summary>
      <param name="expr">컴파일된 XPath 쿼리를 포함하는 <see cref="T:System.Xml.XPath.XPathExpression" /> 개체입니다.</param>
      <returns>선택된 노드 집합을 가리키는 <see cref="T:System.Xml.XPath.XPathNodeIterator" />입니다.</returns>
      <exception cref="T:System.ArgumentException">XPath 식에 오류가 포함되어 있거나 해당 반환 형식이 노드 집합이 아닙니다.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 식이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.String,System.String,System.Boolean)">
      <summary>지정된 로컬 이름과 네임스페이스 URI를 사용하는 현재 노드의 상위 노드를 모두 선택합니다.</summary>
      <param name="name">상위 노드의 로컬 이름입니다.</param>
      <param name="namespaceURI">상위 노드의 네임스페이스 URI입니다.</param>
      <param name="matchSelf">선택할 때 컨텍스트 노드를 포함하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</param>
      <returns>선택된 노드가 포함된 <see cref="T:System.Xml.XPath.XPathNodeIterator" />입니다. 반환되는 노드는 문서 순서와 반대로 배치됩니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <see langword="null" />을 매개 변수로 전달할 수 없습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.Xml.XPath.XPathNodeType,System.Boolean)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNodeType" />이 일치하는 현재 노드의 상위 노드를 모두 선택합니다.</summary>
      <param name="type">상위 노드의 <see cref="T:System.Xml.XPath.XPathNodeType" />입니다.</param>
      <param name="matchSelf">선택할 때 컨텍스트 노드를 포함하려면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</param>
      <returns>선택된 노드가 포함된 <see cref="T:System.Xml.XPath.XPathNodeIterator" />입니다. 반환되는 노드는 문서 순서와 반대로 배치됩니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectChildren(System.String,System.String)">
      <summary>지정된 로컬 이름과 네임스페이스 URI를 사용하는 현재 노드의 자식 노드를 모두 선택합니다.</summary>
      <param name="name">자식 노드의 로컬 이름입니다.</param>
      <param name="namespaceURI">자식 노드의 네임스페이스 URI입니다.</param>
      <returns>선택된 노드가 포함된 <see cref="T:System.Xml.XPath.XPathNodeIterator" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <see langword="null" />을 매개 변수로 전달할 수 없습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectChildren(System.Xml.XPath.XPathNodeType)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNodeType" />이 일치하는 현재 노드의 자식 노드를 모두 선택합니다.</summary>
      <param name="type">자식 노드의 <see cref="T:System.Xml.XPath.XPathNodeType" />입니다.</param>
      <returns>선택된 노드가 포함된 <see cref="T:System.Xml.XPath.XPathNodeIterator" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.String,System.String,System.Boolean)">
      <summary>지정된 로컬 이름과 네임스페이스 URI를 사용하는 현재 노드의 하위 노드를 모두 선택합니다.</summary>
      <param name="name">하위 노드의 로컬 이름입니다.</param>
      <param name="namespaceURI">하위 노드의 네임스페이스 URI입니다.</param>
      <param name="matchSelf">선택할 때 컨텍스트 노드를 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>선택된 노드가 포함된 <see cref="T:System.Xml.XPath.XPathNodeIterator" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <see langword="null" />을 매개 변수로 전달할 수 없습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.Xml.XPath.XPathNodeType,System.Boolean)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNodeType" />이 일치하는 현재 노드의 하위 노드를 모두 선택합니다.</summary>
      <param name="type">하위 노드의 <see cref="T:System.Xml.XPath.XPathNodeType" />입니다.</param>
      <param name="matchSelf">선택할 때 컨텍스트 노드를 포함하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>선택된 노드가 포함된 <see cref="T:System.Xml.XPath.XPathNodeIterator" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String)">
      <summary>지정된 XPath 쿼리를 사용하여 <see cref="T:System.Xml.XPath.XPathNavigator" />에서 단일 노드를 선택합니다.</summary>
      <param name="xpath">XPath 식을 나타내는 <see cref="T:System.String" />입니다.</param>
      <returns>지정된 XPath 쿼리와 일치하는 첫 번째 노드를 포함하는 <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체이거나, 쿼리 결과가 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentException">XPath 쿼리에서 오류가 발생했거나 XPath 식의 반환 형식이 노드가 아닙니다.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 쿼리가 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>네임스페이스 접두사를 확인하기 위해 지정된 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 개체와 함께 지정된 XPath 쿼리를 사용하여 <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체에서 단일 노드를 선택합니다.</summary>
      <param name="xpath">XPath 식을 나타내는 <see cref="T:System.String" />입니다.</param>
      <param name="resolver">XPath 쿼리에 있는 네임스페이스 접두사를 확인하는 데 사용되는 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 개체입니다.</param>
      <returns>지정된 XPath 쿼리와 일치하는 첫 번째 노드를 포함하는 <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체이거나, 쿼리 결과가 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentException">XPath 쿼리에서 오류가 발생했거나 XPath 식의 반환 형식이 노드가 아닙니다.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 쿼리가 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.Xml.XPath.XPathExpression)">
      <summary>지정된 <see cref="T:System.Xml.XPath.XPathExpression" /> 개체를 사용하여 <see cref="T:System.Xml.XPath.XPathNavigator" />에서 단일 노드를 선택합니다.</summary>
      <param name="expression">컴파일된 XPath 쿼리를 포함하는 <see cref="T:System.Xml.XPath.XPathExpression" /> 개체입니다.</param>
      <returns>지정된 XPath 쿼리와 일치하는 첫 번째 노드를 포함하는 <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체이거나, 쿼리 결과가 없으면 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentException">XPath 쿼리에서 오류가 발생했거나 XPath 식의 반환 형식이 노드가 아닙니다.</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 쿼리가 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SetTypedValue(System.Object)">
      <summary>현재 노드의 형식화된 값을 설정합니다.</summary>
      <param name="typedValue">노드의 형식화된 새 값입니다.</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서 지정된 개체의 형식을 지원하지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException">지정된 값은 <see langword="null" />이 아니어야 합니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />의 위치가 요소 또는 특성 노드에 지정되지 않았습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SetValue(System.String)">
      <summary>현재 노드의 값을 설정합니다.</summary>
      <param name="value">노드의 새 값</param>
      <exception cref="T:System.ArgumentNullException">value 매개 변수가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />가 루트 노드 또는 네임스페이스 노드에 있거나 지정된 값이 잘못되었습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" />에서는 편집을 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.System#ICloneable#Clone">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체의 새 복사본을 만듭니다.</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체의 새 복사본입니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ToString">
      <summary>현재 노드의 텍스트 값을 가져옵니다.</summary>
      <returns>현재 노드의 텍스트 값을 포함하는 <see langword="string" />입니다.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.TypedValue">
      <summary>가장 적합한 .NET Framework 형식 중 현재 노드에 해당하는 boxed 개체를 가져옵니다.</summary>
      <returns>가장 적합한 .NET Framework 형식 중 현재 노드에 해당하는 boxed 개체입니다.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.UnderlyingObject">
      <summary>내부 개체에 액세스할 수 있도록 저장소에 대한 "가상" XML 뷰를 제공하기 위해 구현된 <see cref="T:System.Xml.XPath.XPathNavigator" />에 사용됩니다.</summary>
      <returns>기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>네임스페이스 접두사를 확인하기 위해 지정된 <see cref="T:System.Type" /> 개체를 사용하여 현재 노드의 값을 지정된 <see cref="T:System.Xml.IXmlNamespaceResolver" />으로 가져옵니다.</summary>
      <param name="returnType">현재 노드의 값을 반환할 <see cref="T:System.Type" />입니다.</param>
      <param name="nsResolver">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 개체는 네임스페이스 접두사를 확인하는 데 사용됩니다.</param>
      <returns>현재 노드의 값에 해당하는 요청된 <see cref="T:System.Type" />입니다.</returns>
      <exception cref="T:System.FormatException">현재 노드의 값 형식이 대상 형식에 맞지 않는 경우</exception>
      <exception cref="T:System.InvalidCastException">시도된 캐스팅이 잘못된 경우</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsBoolean">
      <summary>현재 노드의 값을 <see cref="T:System.Boolean" />으로 가져옵니다.</summary>
      <returns>현재 노드의 값에 해당하는 <see cref="T:System.Boolean" /> 값입니다.</returns>
      <exception cref="T:System.FormatException">현재 노드의 문자열 값을 <see cref="T:System.Boolean" />으로 변환할 수 없는 경우</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.Boolean" />에 대해 시도된 캐스팅이 잘못된 경우</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsDateTime">
      <summary>현재 노드의 값을 <see cref="T:System.DateTime" />으로 가져옵니다.</summary>
      <returns>현재 노드의 값에 해당하는 <see cref="T:System.DateTime" /> 값입니다.</returns>
      <exception cref="T:System.FormatException">현재 노드의 문자열 값을 <see cref="T:System.DateTime" />으로 변환할 수 없는 경우</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DateTime" />에 대해 시도된 캐스팅이 잘못된 경우</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsDouble">
      <summary>현재 노드의 값을 <see cref="T:System.Double" />으로 가져옵니다.</summary>
      <returns>현재 노드의 값에 해당하는 <see cref="T:System.Double" /> 값입니다.</returns>
      <exception cref="T:System.FormatException">현재 노드의 문자열 값을 <see cref="T:System.Double" />으로 변환할 수 없는 경우</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.Double" />에 대해 시도된 캐스팅이 잘못된 경우</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsInt">
      <summary>현재 노드의 값을 <see cref="T:System.Int32" />로 가져옵니다.</summary>
      <returns>현재 노드의 값에 해당하는 <see cref="T:System.Int32" /> 값입니다.</returns>
      <exception cref="T:System.FormatException">현재 노드의 문자열 값을 <see cref="T:System.Int32" />으로 변환할 수 없는 경우</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.Int32" />에 대해 시도된 캐스팅이 잘못된 경우</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsLong">
      <summary>현재 노드의 값을 <see cref="T:System.Int64" />로 가져옵니다.</summary>
      <returns>현재 노드의 값에 해당하는 <see cref="T:System.Int64" /> 값입니다.</returns>
      <exception cref="T:System.FormatException">현재 노드의 문자열 값을 <see cref="T:System.Int64" />으로 변환할 수 없는 경우</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.Int64" />에 대해 시도된 캐스팅이 잘못된 경우</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueType">
      <summary>현재 노드의 .NET Framework <see cref="T:System.Type" />를 가져옵니다.</summary>
      <returns>현재 노드의 .NET Framework <see cref="T:System.Type" />입니다. 기본값은 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.WriteSubtree(System.Xml.XmlWriter)">
      <summary>현재 노드와 해당 자식 노드를 지정된 <see cref="T:System.Xml.XmlWriter" /> 개체로 스트리밍합니다.</summary>
      <param name="writer">스트리밍할 대상 <see cref="T:System.Xml.XmlWriter" /> 개체입니다.</param>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.XmlLang">
      <summary>현재 노드에 대한 <c>xml:lang</c> 범위를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" /> 의 값을 포함 하는 <c>xml: lang</c> 범위 또는 <see cref="F:System.String.Empty" /> 가 없으면 현재 노드가 <c>xml: lang</c> 반환할 값의 범위.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.XmlType">
      <summary>현재 노드에 대한 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 정보를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaType" /> 개체입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNodeIterator">
      <summary>선택된 노드 집합에 대한 반복기를 제공합니다.</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.#ctor">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.Clone">
      <summary>파생 클래스에서 재정의된 경우 이 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 개체의 복제를 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 개체의 새로운 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 개체 복제입니다.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.Count">
      <summary>선택된 노드 집합에 포함된 마지막 노드의 인덱스를 가져옵니다.</summary>
      <returns>선택된 노드 집합에 포함된 마지막 노드의 인덱스이며, 선택된 노드가 없는 경우에는 0입니다.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.Current">
      <summary>파생 클래스에서 재정의된 경우 현재 컨텍스트 노드에 위치한 이 <see cref="T:System.Xml.XPath.XPathNavigator" />에 대한 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 개체를 가져옵니다.</summary>
      <returns>노드 집합을 선택한 컨텍스트 노드로 위치가 지정된 <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체입니다. <see cref="M:System.Xml.XPath.XPathNodeIterator.MoveNext" /> 메서드를 호출하여 <see cref="T:System.Xml.XPath.XPathNodeIterator" />를 선택된 집합의 첫 번째 노드로 이동해야 합니다.</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.CurrentPosition">
      <summary>파생 클래스에서 재정의할 때 선택된 노드 집합에서 현재 위치의 인덱스를 가져옵니다.</summary>
      <returns>현재 위치의 인덱스입니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.GetEnumerator">
      <summary>선택된 노드 집합을 반복하는 <see cref="T:System.Collections.IEnumerator" /> 개체를 반환합니다.</summary>
      <returns>선택된 노드 집합을 반복하는 <see cref="T:System.Collections.IEnumerator" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.MoveNext">
      <summary>파생 클래스에서 재정의하는 경우 <see cref="T:System.Xml.XPath.XPathNavigator" /> 속성에서 반환된 <see cref="P:System.Xml.XPath.XPathNodeIterator.Current" /> 개체를 선택된 노드 집합의 다음 노드로 이동합니다.</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체가 다음 노드로 이동되었으면 <see langword="true" />이고 선택된 노드가 더 이상 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.System#ICloneable#Clone">
      <summary>현재 인스턴스의 복사본인 새 개체를 만듭니다.</summary>
      <returns>이 인스턴스의 복사본인 새 개체입니다.</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNodeType">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 클래스에서 반환할 수 있는 XPath 노드 형식을 정의합니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.All">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNodeType" /> 노드 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Attribute">
      <summary>
        <c>id='123'</c>과 같은 특성입니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Comment">
      <summary>
        <c>&lt;!-- my comment --&gt;</c>와 같은 주석입니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Element">
      <summary>
        <c>&lt;element&gt;</c>와 같은 요소입니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Namespace">
      <summary>
        <c>xmlns="namespace"</c>와 같은 네임스페이스입니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.ProcessingInstruction">
      <summary>
        <c>&lt;?pi test?&gt;</c>와 같은 처리 명령입니다. <see cref="T:System.Xml.XPath.XPathNavigator" /> 클래스에게 보이지 않는 XML 선언은 여기에 포함되지 않습니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Root">
      <summary>XML 문서 또는 노드 트리의 루트 노드입니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.SignificantWhitespace">
      <summary>공백 문자를 포함하며 <c>xml:space</c>가 <c>preserve</c>로 설정된 노드입니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Text">
      <summary>노드의 텍스트 내용입니다. DOM(문서 개체 모델) Text 및 CDATA 노드 형식에 해당합니다. 문자가 하나 이상 있어야 합니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Whitespace">
      <summary>공백 문자만 포함하고 중요 공백은 포함하지 않는 노드입니다. 공백 문자는 <c>#x20</c>, <c>#x9</c>, <c>#xD</c> 또는 <c>#xA</c>입니다.</summary>
    </member>
    <member name="T:System.Xml.XPath.XPathResultType">
      <summary>XPath 식의 반환 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Any">
      <summary>XPath 노드 형식입니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Boolean">
      <summary>
        <see cref="T:System.Boolean" />
        <see langword="true" /> 또는 <see langword="false" /> 값입니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Error">
      <summary>식이 올바른 XPath 형식으로 계산되지 않습니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Navigator">
      <summary>트리 단편입니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.NodeSet">
      <summary>노드 컬렉션입니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Number">
      <summary>숫자 값입니다.</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.String">
      <summary>
        <see cref="T:System.String" /> 값입니다.</summary>
    </member>
    <member name="T:System.Xml.Xsl.IXsltContextFunction">
      <summary>런타임에 실행하는 동안 XSLT(Extensible Stylesheet Language for Transformations) 스타일시트에 정의된 함수에 대한 인터페이스를 제공합니다.</summary>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.ArgTypes">
      <summary>함수의 인수 목록에 대한 제공된 XPath(XML Path Language) 형식을 가져옵니다. 이 정보를 사용하면 오버로드 함수를 구별할 수 있도록 하는 함수의 서명을 검색할 수 있습니다.</summary>
      <returns>함수의 인수 목록에 대한 형식을 나타내는 <see cref="T:System.Xml.XPath.XPathResultType" />의 배열입니다.</returns>
    </member>
    <member name="M:System.Xml.Xsl.IXsltContextFunction.Invoke(System.Xml.Xsl.XsltContext,System.Object[],System.Xml.XPath.XPathNavigator)">
      <summary>지정된 컨텍스트에서 지정된 인수가 있는 함수를 호출할 수 있는 메서드를 제공합니다.</summary>
      <param name="xsltContext">함수 호출에 대한 XSLT 컨텍스트입니다.</param>
      <param name="args">함수 호출의 인수로, 각 인수는 배열에 있는 요소입니다.</param>
      <param name="docContext">함수 호출에 대한 컨텍스트 노드입니다.</param>
      <returns>함수의 반환 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.Maxargs">
      <summary>함수의 최대 인수 수를 가져옵니다. 이 정보를 사용하면 오버로드된 함수를 구별할 수 있습니다.</summary>
      <returns>함수의 최대 인수 수입니다.</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.Minargs">
      <summary>함수의 최소 인수 수를 가져옵니다. 이 정보를 사용하면 오버로드된 함수를 구별할 수 있습니다.</summary>
      <returns>함수의 최소 인수 수입니다.</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.ReturnType">
      <summary>함수에서 반환한 XPath 형식을 나타내는 <see cref="T:System.Xml.XPath.XPathResultType" />을 가져옵니다.</summary>
      <returns>함수에서 반환한 XPath 형식을 나타내는 <see cref="T:System.Xml.XPath.XPathResultType" />입니다.</returns>
    </member>
    <member name="T:System.Xml.Xsl.IXsltContextVariable">
      <summary>런타임에 실행하는 동안 스타일시트에 정의된 변수에 대한 인터페이스를 제공합니다.</summary>
    </member>
    <member name="M:System.Xml.Xsl.IXsltContextVariable.Evaluate(System.Xml.Xsl.XsltContext)">
      <summary>런타임에 변수를 계산한 다음 이 변수 값을 나타내는 개체를 반환합니다.</summary>
      <param name="xsltContext">변수의 실행 컨텍스트를 나타내는 <see cref="T:System.Xml.Xsl.XsltContext" />입니다.</param>
      <returns>변수 값을 나타내는 <see cref="T:System.Object" />입니다. 가능한 반환 형식에는 숫자, 문자열, 부울, 문서 단편 또는 노드 집합이 있습니다.</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.IsLocal">
      <summary>변수가 지역 변수인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>변수가 현재 컨텍스트의 지역 변수이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.IsParam">
      <summary>변수가 XSLT(Extensible Stylesheet Language Transformation) 매개 변수인지 여부를 나타내는 값을 가져옵니다. 이 값은 스타일시트 또는 템플릿에 대한 매개 변수일 수 있습니다.</summary>
      <returns>변수가 XSLT 매개 변수이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.VariableType">
      <summary>변수의 XPath(XML Path Language) 형식을 나타내는 <see cref="T:System.Xml.XPath.XPathResultType" />을 가져옵니다.</summary>
      <returns>변수의 XPath 형식을 나타내는 <see cref="T:System.Xml.XPath.XPathResultType" />입니다.</returns>
    </member>
    <member name="T:System.Xml.Xsl.XslCompiledTransform">
      <summary>XSLT 스타일시트를 사용하여 XML 데이터를 변환합니다.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.#ctor">
      <summary>
        <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)">
      <summary>지정된 디버그 설정을 사용하여 <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="enableDebug">디버그 정보를 생성하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 값을 <see langword="true" />로 설정하면 Microsoft Visual Studio Debugger를 사용하여 스타일시트를 디버깅할 수 있습니다.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])">
      <summary>
        <see langword="XSLTC.exe" /> 유틸리티를 사용하여 컴파일된 스타일시트에서 메서드를 로드합니다.</summary>
      <param name="executeMethod">컴파일러에서 생성된 컴파일된 스타일시트의 <c>execute</c> 메서드를 나타내는 <see cref="T:System.Reflection.MethodInfo" /> 개체입니다.</param>
      <param name="queryData">
        <see cref="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" /> 메서드에서 생성된 컴파일된 스타일시트의 <c>staticData</c> 필드에 있는 serialize된 데이터 구조의 바이트 배열입니다.</param>
      <param name="earlyBoundTypes">컴파일러에서 생성된 컴파일된 스타일시트의 <c>ebTypes</c> 필드에 저장된 형식의 배열입니다.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String)">
      <summary>지정된 URI에 있는 스타일시트를 로드하고 컴파일합니다.</summary>
      <param name="stylesheetUri">스타일시트의 URI입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheetUri" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">스타일시트에 오류가 있는 경우</exception>
      <exception cref="T:System.IO.FileNotFoundException">스타일시트를 찾을 수 없는 경우</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="stylesheetUri" /> 값에 찾을 수 없는 디렉터리나 파일 이름이 포함된 경우</exception>
      <exception cref="T:System.Net.WebException">
        <paramref name="stylesheetUri" /> 값을 확인할 수 없는 경우  
또는 
이 요청을 처리하는 동안 오류가 발생했습니다.</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="stylesheetUri" /> 경로는 유효한 URI가 아닙니다.</exception>
      <exception cref="T:System.Xml.XmlException">스타일시트를 로드하는 동안 구문 분석 오류가 발생한 경우</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary>URI로 지정된 XSLT 스타일시트를 로드하고 컴파일합니다. <see cref="T:System.Xml.XmlResolver" />는 XSLT <c>import</c> 또는 <c>include</c> 요소를 모두 확인하고 XSLT 설정은 스타일시트에 대한 사용 권한을 결정합니다.</summary>
      <param name="stylesheetUri">스타일시트의 URI입니다.</param>
      <param name="settings">스타일시트에 적용할 <see cref="T:System.Xml.Xsl.XsltSettings" />입니다. 이 값이 <see langword="null" />이면 <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 설정이 적용됩니다.</param>
      <param name="stylesheetResolver">스타일시트 URI 및 XSLT <c>import</c> 및 <c>include</c> 요소에서 참조하는 모든 스타일시트를 확인하는 데 사용되는 <see cref="T:System.Xml.XmlResolver" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheetUri" /> 또는 <paramref name="stylesheetResolver" /> 값이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">스타일시트에 오류가 있는 경우</exception>
      <exception cref="T:System.IO.FileNotFoundException">스타일시트를 찾을 수 없는 경우</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="stylesheetUri" /> 값에 찾을 수 없는 디렉터리나 파일 이름이 포함된 경우</exception>
      <exception cref="T:System.Net.WebException">
        <paramref name="stylesheetUri" /> 값을 확인할 수 없는 경우  
또는 
이 요청을 처리하는 동안 오류가 발생했습니다.</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="stylesheetUri" /> 경로는 유효한 URI가 아닙니다.</exception>
      <exception cref="T:System.Xml.XmlException">스타일시트를 로드하는 동안 구문 분석 오류가 발생한 경우</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Type)">
      <summary>XSLT Compiler (xsltc.exe)를 사용하여 만든 컴파일된 스타일시트를 로드합니다.</summary>
      <param name="compiledStylesheet">컴파일된 스타일시트가 들어 있는 클래스의 이름입니다.  
 일반적으로 스타일시트 이름입니다. 이름이 지정되지 않은 경우 xsltc.exe 도구는 클래스 및 어셈블리 이름으로 스타일시트 이름을 사용합니다.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)">
      <summary>
        <see cref="T:System.Xml.XmlReader" />에 포함된 스타일시트를 컴파일합니다.</summary>
      <param name="stylesheet">스타일시트가 포함된 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheet" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">스타일시트에 오류가 있는 경우</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary>
        <see cref="T:System.Xml.XmlReader" />에 포함된 XSLT 스타일시트를 컴파일합니다. <see cref="T:System.Xml.XmlResolver" />는 XSLT <c>import</c> 또는 <c>include</c> 요소를 모두 확인하고 XSLT 설정은 스타일시트에 대한 사용 권한을 결정합니다.</summary>
      <param name="stylesheet">스타일시트가 포함된 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <param name="settings">스타일시트에 적용할 <see cref="T:System.Xml.Xsl.XsltSettings" />입니다. 이 값이 <see langword="null" />이면 <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 설정이 적용됩니다.</param>
      <param name="stylesheetResolver">XSLT <c>import</c> 및 <c>include</c> 요소에서 참조하는 모든 스타일시트를 확인하는 데 사용되는 <see cref="T:System.Xml.XmlResolver" />입니다. 이 값이 <see langword="null" />이면 외부 리소스가 확인되지 않습니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheet" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">스타일시트에 오류가 있는 경우</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)">
      <summary>
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 개체에 포함된 스타일시트를 컴파일합니다.</summary>
      <param name="stylesheet">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 인터페이스를 구현하는 개체입니다. Microsoft .NET Framework에서 이 개체는 스타일시트를 포함하는 <see cref="T:System.Xml.XmlNode" /> 또는 <see cref="T:System.Xml.XmlDocument" />(대개 <see cref="T:System.Xml.XPath.XPathDocument" />)일 수 있습니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheet" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">스타일시트에 오류가 있는 경우</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary>
        <see cref="T:System.Xml.XPath.IXPathNavigable" />에 포함된 XSLT 스타일시트를 컴파일합니다. <see cref="T:System.Xml.XmlResolver" />는 XSLT <c>import</c> 또는 <c>include</c> 요소를 모두 확인하고 XSLT 설정은 스타일시트에 대한 사용 권한을 결정합니다.</summary>
      <param name="stylesheet">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 인터페이스를 구현하는 개체입니다. Microsoft .NET Framework에서 이 개체는 스타일시트를 포함하는 <see cref="T:System.Xml.XmlNode" /> 또는 <see cref="T:System.Xml.XmlDocument" />(대개 <see cref="T:System.Xml.XPath.XPathDocument" />)일 수 있습니다.</param>
      <param name="settings">스타일시트에 적용할 <see cref="T:System.Xml.Xsl.XsltSettings" />입니다. 이 값이 <see langword="null" />이면 <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 설정이 적용됩니다.</param>
      <param name="stylesheetResolver">XSLT <c>import</c> 및 <c>include</c> 요소에서 참조하는 모든 스타일시트를 확인하는 데 사용되는 <see cref="T:System.Xml.XmlResolver" />입니다. 이 값이 <see langword="null" />이면 외부 리소스가 확인되지 않습니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheet" /> 값이 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">스타일시트에 오류가 있는 경우</exception>
    </member>
    <member name="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings">
      <summary>스타일시트의 <c>xsl:output</c> 요소에서 파생된 출력 정보를 포함하는 <see cref="T:System.Xml.XmlWriterSettings" /> 개체를 가져옵니다.</summary>
      <returns>읽기 전용 <see cref="T:System.Xml.XmlWriterSettings" /> 에서 파생 된 출력 정보를 포함 하는 개체를 <c>xsl: output</c> 스타일 시트의 요소입니다. 이 값은 <see langword="null" />일 수 있습니다.</returns>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)">
      <summary>URI로 지정된 입력 문서를 사용하여 변환을 실행하고 파일로 결과를 출력합니다.</summary>
      <param name="inputUri">입력 문서의 URI입니다.</param>
      <param name="resultsFile">출력 파일의 URI입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 또는 <paramref name="resultsFile" /> 값이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
      <exception cref="T:System.IO.FileNotFoundException">입력 문서를 찾을 수 없는 경우</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="inputUri" /> 또는 <paramref name="resultsFile" /> 값에 찾을 수 없는 디렉터리나 파일 이름이 포함된 경우</exception>
      <exception cref="T:System.Net.WebException">
        <paramref name="inputUri" /> 또는 <paramref name="resultsFile" /> 값을 확인할 수 없는 경우  
또는 
요청을 처리하는 동안 오류가 발생한 경우</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> 또는 <paramref name="resultsFile" />이 올바른 URI가 아닌 경우</exception>
      <exception cref="T:System.Xml.XmlException">입력 문서를 로드하는 동안 구문 분석 오류가 발생한 경우</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)">
      <summary>URI로 지정된 입력 문서를 사용하여 변환을 실행하고 <see cref="T:System.Xml.XmlWriter" />에 결과를 출력합니다.</summary>
      <param name="inputUri">입력 문서의 URI입니다.</param>
      <param name="results">출력을 제공할 대상 <see cref="T:System.Xml.XmlWriter" />입니다.  
스타일시트에 <c>xsl:output</c> 요소가 포함된 경우 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 속성에서 반환된 <see cref="T:System.Xml.XmlWriterSettings" /> 개체를 사용하여 <see cref="T:System.Xml.XmlWriter" />를 만들어야 합니다. 이렇게 해야 <see cref="T:System.Xml.XmlWriter" />의 출력 설정이 올바르게 설정됩니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="inputUri" /> 값에 찾을 수 없는 디렉터리나 파일 이름이 포함된 경우</exception>
      <exception cref="T:System.Net.WebException">
        <paramref name="inputUri" /> 값을 확인할 수 없는 경우  
또는 
이 요청을 처리하는 동안 오류가 발생했습니다.</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> 경로는 유효한 URI가 아닙니다.</exception>
      <exception cref="T:System.Xml.XmlException">입력 문서를 로드하는 동안 구문 분석 오류가 발생한 경우</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>URI로 지정된 입력 문서를 사용하여 변환을 실행하고 스트림에 결과를 출력합니다. <see cref="T:System.Xml.Xsl.XsltArgumentList" />는 추가 런타임 인수를 제공합니다.</summary>
      <param name="inputUri">입력 문서의 URI입니다.</param>
      <param name="arguments">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
      <param name="results">출력할 대상 스트림입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="inputUri" /> 값에 찾을 수 없는 디렉터리나 파일 이름이 포함된 경우</exception>
      <exception cref="T:System.Net.WebException">
        <paramref name="inputUri" /> 값을 확인할 수 없는 경우  
또는 
요청을 처리하는 동안 오류가 발생한 경우</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> 경로는 유효한 URI가 아닙니다.</exception>
      <exception cref="T:System.Xml.XmlException">입력 문서를 로드하는 동안 구문 분석 오류가 발생한 경우</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>URI로 지정된 입력 문서를 사용하여 변환을 실행하고 <see cref="T:System.IO.TextWriter" />에 결과를 출력합니다.</summary>
      <param name="inputUri">입력 문서의 URI입니다.</param>
      <param name="arguments">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
      <param name="results">출력을 제공할 대상 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="inputUri" /> 값에 찾을 수 없는 디렉터리나 파일 이름이 포함된 경우</exception>
      <exception cref="T:System.Net.WebException">
        <paramref name="inputUri" /> 값을 확인할 수 없는 경우  
또는 
요청을 처리하는 동안 오류가 발생한 경우</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> 경로는 유효한 URI가 아닙니다.</exception>
      <exception cref="T:System.Xml.XmlException">입력 문서를 로드하는 동안 구문 분석 오류가 발생한 경우</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>URI로 지정된 입력 문서를 사용하여 변환을 실행하고 <see cref="T:System.Xml.XmlWriter" />에 결과를 출력합니다. <see cref="T:System.Xml.Xsl.XsltArgumentList" />는 추가 런타임 인수를 제공합니다.</summary>
      <param name="inputUri">입력 문서의 URI입니다.</param>
      <param name="arguments">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
      <param name="results">출력을 제공할 대상 <see cref="T:System.Xml.XmlWriter" />입니다.  
스타일시트에 <c>xsl:output</c> 요소가 포함된 경우 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 속성에서 반환된 <see cref="T:System.Xml.XmlWriterSettings" /> 개체를 사용하여 <see cref="T:System.Xml.XmlWriter" />를 만들어야 합니다. 이렇게 해야 <see cref="T:System.Xml.XmlWriter" />의 출력 설정이 올바르게 설정됩니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="inputtUri" /> 값에 찾을 수 없는 디렉터리나 파일 이름이 포함된 경우</exception>
      <exception cref="T:System.Net.WebException">
        <paramref name="inputUri" /> 값을 확인할 수 없는 경우  
또는 
이 요청을 처리하는 동안 오류가 발생했습니다.</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> 경로는 유효한 URI가 아닙니다.</exception>
      <exception cref="T:System.Xml.XmlException">입력 문서를 로드하는 동안 구문 분석 오류가 발생한 경우</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> 개체에 지정된 입력 문서를 사용하여 변환을 실행하고 <see cref="T:System.Xml.XmlWriter" />에 결과를 출력합니다.</summary>
      <param name="input">입력 문서가 포함된 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <param name="results">출력을 제공할 대상 <see cref="T:System.Xml.XmlWriter" />입니다.  
스타일시트에 <c>xsl:output</c> 요소가 포함된 경우 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 속성에서 반환된 <see cref="T:System.Xml.XmlWriterSettings" /> 개체를 사용하여 <see cref="T:System.Xml.XmlWriter" />를 만들어야 합니다. 이렇게 해야 <see cref="T:System.Xml.XmlWriter" />의 출력 설정이 올바르게 설정됩니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> 개체에 지정된 입력 문서를 사용하여 변환을 실행하고 스트림에 결과를 출력합니다. <see cref="T:System.Xml.Xsl.XsltArgumentList" />는 추가 런타임 인수를 제공합니다.</summary>
      <param name="input">입력 문서가 포함된 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <param name="arguments">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
      <param name="results">출력할 대상 스트림입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> 개체에 지정된 입력 문서를 사용하여 변환을 실행하고 <see cref="T:System.IO.TextWriter" />에 결과를 출력합니다. <see cref="T:System.Xml.Xsl.XsltArgumentList" />는 추가 런타임 인수를 제공합니다.</summary>
      <param name="input">입력 문서가 포함된 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <param name="arguments">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
      <param name="results">출력을 제공할 대상 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> 개체에 지정된 입력 문서를 사용하여 변환을 실행하고 <see cref="T:System.Xml.XmlWriter" />에 결과를 출력합니다. <see cref="T:System.Xml.Xsl.XsltArgumentList" />는 추가 런타임 인수를 제공합니다.</summary>
      <param name="input">입력 문서가 포함된 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <param name="arguments">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
      <param name="results">출력을 제공할 대상 <see cref="T:System.Xml.XmlWriter" />입니다.  
스타일시트에 <c>xsl:output</c> 요소가 포함된 경우 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 속성에서 반환된 <see cref="T:System.Xml.XmlWriterSettings" /> 개체를 사용하여 <see cref="T:System.Xml.XmlWriter" />를 만들어야 합니다. 이렇게 해야 <see cref="T:System.Xml.XmlWriter" />의 출력 설정이 올바르게 설정됩니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> 개체에 지정된 입력 문서를 사용하여 변환을 실행하고 <see cref="T:System.Xml.XmlWriter" />에 결과를 출력합니다. <see cref="T:System.Xml.Xsl.XsltArgumentList" />는 추가 런타임 인수를 제공하고 XmlResolver는 XSLT <c>document()</c> 함수를 확인합니다.</summary>
      <param name="input">입력 문서가 포함된 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <param name="arguments">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
      <param name="results">출력을 제공할 대상 <see cref="T:System.Xml.XmlWriter" />입니다.  
스타일시트에 <c>xsl:output</c> 요소가 포함된 경우 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 속성에서 반환된 <see cref="T:System.Xml.XmlWriterSettings" /> 개체를 사용하여 <see cref="T:System.Xml.XmlWriter" />를 만들어야 합니다. 이렇게 해야 <see cref="T:System.Xml.XmlWriter" />의 출력 설정이 올바르게 설정됩니다.</param>
      <param name="documentResolver">XSLT <c>document()</c> 함수 확인에 사용되는 <see cref="T:System.Xml.XmlResolver" />입니다. 이 값이 <see langword="null" />이면 <c>document()</c> 함수가 확인되지 않습니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)">
      <summary>
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 개체에 지정된 입력 문서를 사용하여 변환을 실행하고 <see cref="T:System.Xml.XmlWriter" />에 결과를 출력합니다.</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 인터페이스를 구현하는 개체입니다. Microsoft .NET Framework에서 이 개체는 변환할 데이터를 포함하는 <see cref="T:System.Xml.XmlNode" /> 또는 <see cref="T:System.Xml.XmlDocument" />(대개 <see cref="T:System.Xml.XPath.XPathDocument" />)일 수 있습니다.</param>
      <param name="results">출력을 제공할 대상 <see cref="T:System.Xml.XmlWriter" />입니다.  
스타일시트에 <c>xsl:output</c> 요소가 포함된 경우 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 속성에서 반환된 <see cref="T:System.Xml.XmlWriterSettings" /> 개체를 사용하여 <see cref="T:System.Xml.XmlWriter" />를 만들어야 합니다. 이렇게 해야 <see cref="T:System.Xml.XmlWriter" />의 출력 설정이 올바르게 설정됩니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 개체에 지정된 입력 문서를 사용하여 변환을 실행하고 스트림에 결과를 출력합니다. <see cref="T:System.Xml.Xsl.XsltArgumentList" />는 추가 런타임 인수를 제공합니다.</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 인터페이스를 구현하는 개체입니다. Microsoft .NET Framework에서 이 개체는 변환할 데이터를 포함하는 <see cref="T:System.Xml.XmlNode" /> 또는 <see cref="T:System.Xml.XmlDocument" />(대개 <see cref="T:System.Xml.XPath.XPathDocument" />)일 수 있습니다.</param>
      <param name="arguments">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
      <param name="results">출력할 대상 스트림입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 개체에 지정된 입력 문서를 사용하여 변환을 실행하고 <see cref="T:System.IO.TextWriter" />에 결과를 출력합니다. <see cref="T:System.Xml.Xsl.XsltArgumentList" />는 추가 런타임 인수를 제공합니다.</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 인터페이스를 구현하는 개체입니다. Microsoft .NET Framework에서 이 개체는 변환할 데이터를 포함하는 <see cref="T:System.Xml.XmlNode" /> 또는 <see cref="T:System.Xml.XmlDocument" />(대개 <see cref="T:System.Xml.XPath.XPathDocument" />)일 수 있습니다.</param>
      <param name="arguments">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
      <param name="results">출력을 제공할 대상 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 개체에 지정된 입력 문서를 사용하여 변환을 실행하고 <see cref="T:System.Xml.XmlWriter" />에 결과를 출력합니다. <see cref="T:System.Xml.Xsl.XsltArgumentList" />는 추가 런타임 인수를 제공합니다.</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 인터페이스를 구현하는 개체입니다. Microsoft .NET Framework에서 이 개체는 변환할 데이터를 포함하는 <see cref="T:System.Xml.XmlNode" /> 또는 <see cref="T:System.Xml.XmlDocument" />(대개 <see cref="T:System.Xml.XPath.XPathDocument" />)일 수 있습니다.</param>
      <param name="arguments">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
      <param name="results">출력을 제공할 대상 <see cref="T:System.Xml.XmlWriter" />입니다.  
스타일시트에 <c>xsl:output</c> 요소가 포함된 경우 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 속성에서 반환된 <see cref="T:System.Xml.XmlWriterSettings" /> 개체를 사용하여 <see cref="T:System.Xml.XmlWriter" />를 만들어야 합니다. 이렇게 해야 <see cref="T:System.Xml.XmlWriter" />의 출력 설정이 올바르게 설정됩니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 또는 <paramref name="results" /> 값이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 변환을 실행하는 동안 오류가 발생한 경우</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 개체에 지정된 입력 문서를 사용하여 변환을 실행하고 <see cref="T:System.Xml.XmlWriter" />에 결과를 출력합니다. <see cref="T:System.Xml.Xsl.XsltArgumentList" />는 추가 런타임 인수를 제공하고 <see cref="T:System.Xml.XmlResolver" />는 XSLT <see langword="document()" /> 함수를 확인합니다.</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 개체에서 지정되는 변환할 문서입니다.</param>
      <param name="arguments">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />로 표시되는 인수 목록입니다.</param>
      <param name="results">출력을 제공할 대상 <see cref="T:System.Xml.XmlWriter" />입니다.  
스타일시트에 <see langword="xsl:output" /> 요소가 포함된 경우 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 속성에서 반환되는 <see cref="T:System.Xml.XmlWriterSettings" /> 개체를 사용하여 <see cref="T:System.Xml.XmlWriter" />를 만들어야 합니다. 이렇게 해야 <see cref="T:System.Xml.XmlWriter" />의 출력 설정이 올바르게 설정됩니다.</param>
      <param name="documentResolver">XSLT <see langword="document()" /> 함수 확인에 사용되는 <see cref="T:System.Xml.XmlResolver" />입니다. 이 값이 <see langword="null" />이면 <see langword="document()" /> 함수가 확인되지 않습니다.</param>
    </member>
    <member name="T:System.Xml.Xsl.XsltArgumentList">
      <summary>XSLT 매개 변수이거나 확장 개체인 여러 가지 인수를 포함합니다.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.#ctor">
      <summary>
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />의 새 인스턴스를 구현합니다.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.AddExtensionObject(System.String,System.Object)">
      <summary>
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />에 새 개체를 추가하고 이를 네임스페이스 URI와 연결합니다.</summary>
      <param name="namespaceUri">개체에 연결할 네임스페이스 URI입니다. 기본 네임스페이스를 사용하려면 빈 문자열을 지정합니다.</param>
      <param name="extension">목록에 추가할 개체입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="namespaceUri" />가 <see langword="null" /> 또는 http://www.w3.org/1999/XSL/Transform인 경우 
<paramref name="namespaceUri" />에 이미 연결된 확장 개체가 있는 경우</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 이 메서드를 호출할 수 있는 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.AddParam(System.String,System.String,System.Object)">
      <summary>
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />에 매개 변수를 추가하고 이를 네임스페이스 정규화 이름과 연결합니다.</summary>
      <param name="name">매개 변수에 연결할 이름입니다.</param>
      <param name="namespaceUri">매개 변수에 연결할 네임스페이스 URI입니다. 기본 네임스페이스를 사용하려면 빈 문자열을 지정합니다.</param>
      <param name="parameter">목록에 추가할 매개 변수 값 또는 개체입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="namespaceUri" />가 <see langword="null" /> 또는 http://www.w3.org/1999/XSL/Transform인 경우  
<paramref name="name" />이 W3C XML 사양에 따른 올바른 이름이 아닌 경우  
<paramref name="namespaceUri" />에 이미 연결된 매개 변수가 있는 경우</exception>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.Clear">
      <summary>
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />에서 모든 매개 변수와 확장 개체를 제거합니다.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.GetExtensionObject(System.String)">
      <summary>지정한 네임스페이스에 연결된 개체를 가져옵니다.</summary>
      <param name="namespaceUri">개체의 네임스페이스 URI입니다.</param>
      <returns>네임스페이스 URI 개체가 반환되고, 이 개체가 없는 경우 <see langword="null" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.GetParam(System.String,System.String)">
      <summary>네임스페이스 정규화 이름에 연결된 매개 변수를 가져옵니다.</summary>
      <param name="name">매개 변수의 이름입니다. <see cref="T:System.Xml.Xsl.XsltArgumentList" />는 전달된 이름이 올바른 로컬 이름인지 검사하지 않지만 이 이름은 <see langword="null" />이 될 수 없습니다.</param>
      <param name="namespaceUri">매개 변수에 연결된 네임스페이스 URI입니다.</param>
      <returns>매개 변수 개체가 반환되고, 이 개체가 없는 경우 <see langword="null" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.RemoveExtensionObject(System.String)">
      <summary>
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />에서 네임스페이스 URI가 있는 개체를 제거합니다.</summary>
      <param name="namespaceUri">제거할 개체에 연결된 네임스페이스 URI입니다.</param>
      <returns>네임스페이스 URI가 있는 개체가 반환되고, 이 개체가 없는 경우 <see langword="null" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.RemoveParam(System.String,System.String)">
      <summary>
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />에서 매개 변수를 제거합니다.</summary>
      <param name="name">제거할 매개 변수의 이름입니다. <see cref="T:System.Xml.Xsl.XsltArgumentList" />는 전달된 이름이 올바른 로컬 이름인지 검사하지 않지만 이 이름은 <see langword="null" />이 될 수 없습니다.</param>
      <param name="namespaceUri">제거할 매개 변수의 네임스페이스 URI입니다.</param>
      <returns>매개 변수 개체가 반환되고, 이 개체가 없는 경우 <see langword="null" />이 반환됩니다.</returns>
    </member>
    <member name="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered">
      <summary>스타일시트에 <c>xsl:message</c> 요소를 사용하여 지정된 메시지가 있는 경우 발생합니다.</summary>
    </member>
    <member name="T:System.Xml.Xsl.XsltCompileException">
      <summary>XSLT 스타일시트에서 오류가 발생했을 때 Load 메서드에서 throw하는 예외입니다.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor">
      <summary>
        <see cref="T:System.Xml.Xsl.XsltCompileException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.Exception,System.String,System.Int32,System.Int32)">
      <summary>
        <see langword="XsltCompileException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="inner">
        <see langword="XsltCompileException" />을 throw한 <see cref="T:System.Exception" />입니다.</param>
      <param name="sourceUri">스타일시트의 위치 경로입니다.</param>
      <param name="lineNumber">스타일시트에서 오류가 발생한 위치를 나타내는 줄 번호입니다.</param>
      <param name="linePosition">스타일시트에서 오류가 발생한 위치를 나타내는 줄 위치입니다.</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 및 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 개체의 정보를 사용하여 <see langword="XsltCompileException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">
        <see langword="SerializationInfo" />의 모든 속성이 포함된 <see langword="XsltCompileException" /> 개체입니다.</param>
      <param name="context">컨텍스트 정보가 포함된 <see langword="StreamingContext" /> 개체입니다.</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.Xml.Xsl.XsltCompileException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 메시지입니다.</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Xml.Xsl.XsltCompileException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 메시지입니다.</param>
      <param name="innerException">현재 예외의 원인이 되는 예외이거나, 내부 예외를 지정하지 않았으면 <see langword="null" />입니다.</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>모든 <see langword="XsltCompileException" /> 속성을 지정한 <see cref="T:System.Runtime.Serialization.SerializationInfo" />의 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 클래스로 스트리밍합니다.</summary>
      <param name="info">
        <see langword="SerializationInfo" /> 개체</param>
      <param name="context">
        <see langword="StreamingContext" /> 개체</param>
    </member>
    <member name="T:System.Xml.Xsl.XsltContext">
      <summary>XPath(XML Path Language)가 XPath 식 내의 함수, 매개 변수 및 네임스페이스를 확인할 수 있도록 하는 XSLT(Extensible Stylesheet Language for Transformations) 프로세서의 현재 실행 컨텍스트를 캡슐화합니다.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.#ctor">
      <summary>
        <see cref="T:System.Xml.Xsl.XsltContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.#ctor(System.Xml.NameTable)">
      <summary>지정된 <see cref="T:System.Xml.Xsl.XsltContext" />를 사용하여 <see cref="T:System.Xml.NameTable" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="table">사용할 <see cref="T:System.Xml.NameTable" />입니다.</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.CompareDocument(System.String,System.String)">
      <summary>파생 클래스에서 재정의될 때 <see cref="T:System.Xml.Xsl.XslTransform" /> 클래스인 XSLT 프로세서에 의해 문서가 로드된 순서를 기반으로 하여 두 문서의 기본 URI(Uniform Resource Identifier)를 비교합니다.</summary>
      <param name="baseUri">비교할 첫째 문서의 기본 URI입니다.</param>
      <param name="nextbaseUri">비교할 둘째 문서의 기본 URI입니다.</param>
      <returns>두 기본 URI의 상대 순서를 나타내는 정수 값입니다. <paramref name="baseUri" />가 <paramref name="nextbaseUri" /> 전에 발생하면 -1, 두 기본 URI가 동일하게 발생하면 0, <paramref name="baseUri" />가 <paramref name="nextbaseUri" /> 후에 발생하면 1입니다.</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
      <summary>파생 클래스에서 재정의되면 지정된 컨텍스트에서 공백 노드를 유지할지 또는 제거할지를 확인합니다.</summary>
      <param name="node">현재 컨텍스트에서 유지해야 하거나 제거해야 할 공백 노드입니다.</param>
      <returns>공백을 유지해야 하면 <see langword="true" />이고, 공백을 제거해야 하면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
      <summary>파생 클래스에서 재정의되면 함수 참조를 확인한 다음 이 함수를 나타내는 <see cref="T:System.Xml.Xsl.IXsltContextFunction" />을 반환합니다. <see cref="T:System.Xml.Xsl.IXsltContextFunction" />은 실행 시 함수의 반환 값을 가져오는 데 사용됩니다.</summary>
      <param name="prefix">XPath 식에 표시되는 함수의 접두사입니다.</param>
      <param name="name">함수의 이름.</param>
      <param name="ArgTypes">확인하고 있는 함수에 대한 인수 형식의 배열입니다. 이 배열을 사용하면 오버로드된 메서드 같이 동일한 이름의 메서드를 구분할 수 있습니다.</param>
      <returns>함수를 나타내는 <see cref="T:System.Xml.Xsl.IXsltContextFunction" />입니다.</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.ResolveVariable(System.String,System.String)">
      <summary>파생 클래스에서 재정의되면 변수 참조를 확인한 다음 이 변수를 나타내는 <see cref="T:System.Xml.Xsl.IXsltContextVariable" />을 반환합니다.</summary>
      <param name="prefix">XPath 식에 표시되는 변수의 접두사입니다.</param>
      <param name="name">변수 이름입니다.</param>
      <returns>런타임에 변수를 나타내는 <see cref="T:System.Xml.Xsl.IXsltContextVariable" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltContext.Whitespace">
      <summary>파생 클래스에 재정의될 때 공백 노드를 출력에 포함할지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>소스 문서의 공백 노드가 출력에 포함되는지 확인하면 <see langword="true" />이고, 공백 노드를 확인하지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltException">
      <summary>XSLT 변환을 처리하는 동안 오류가 발생하면 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor">
      <summary>
        <see cref="T:System.Xml.Xsl.XsltException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 및 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 개체의 정보를 사용하여 <see langword="XsltException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">
        <see langword="SerializationInfo" />의 모든 속성이 포함된 <see langword="XsltException" /> 개체입니다.</param>
      <param name="context">
        <see langword="StreamingContext" /> 개체</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.Xml.Xsl.XsltException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 메시지입니다.</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.String,System.Exception)">
      <summary>
        <see langword="XsltException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류 조건에 대한 설명입니다.</param>
      <param name="innerException">
        <see langword="XsltException" />을 throw한 <see cref="T:System.Exception" />입니다. 이 값은 <see langword="null" />일 수 있습니다.</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>모든 <see langword="XsltException" /> 속성을 지정한 <see cref="T:System.Runtime.Serialization.SerializationInfo" />의 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 클래스로 스트리밍합니다.</summary>
      <param name="info">
        <see langword="SerializationInfo" /> 개체</param>
      <param name="context">
        <see langword="StreamingContext" /> 개체</param>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.LineNumber">
      <summary>스타일시트에서 오류가 발생한 위치를 나타내는 줄 번호를 가져옵니다.</summary>
      <returns>스타일시트에서 오류가 발생한 위치를 나타내는 줄 번호입니다.</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.LinePosition">
      <summary>스타일시트에서 오류가 발생한 위치를 나타내는 줄 위치를 가져옵니다.</summary>
      <returns>스타일시트에서 오류가 발생한 위치를 나타내는 줄 위치입니다.</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.Message">
      <summary>현재 예외를 설명하는 서식이 지정된 오류 메시지를 가져옵니다.</summary>
      <returns>현재 예외를 설명하는 서식이 지정된 오류 메시지입니다.</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.SourceUri">
      <summary>스타일시트의 위치 경로를 가져옵니다.</summary>
      <returns>스타일시트의 위치 경로입니다.</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs">
      <summary>
        <see cref="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltMessageEncounteredEventArgs.#ctor">
      <summary>
        <see cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xml.Xsl.XsltMessageEncounteredEventArgs.Message">
      <summary>
        <c>xsl:message</c> 요소의 내용을 가져옵니다.</summary>
      <returns>콘텐츠를 <c>xsl: message</c> 요소입니다.</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltMessageEncounteredEventHandler">
      <summary>
        <see cref="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" />입니다.</param>
    </member>
    <member name="T:System.Xml.Xsl.XslTransform">
      <summary>XSLT(Extensible Stylesheet Language for Transformations) 스타일시트를 사용하여 XML 데이터를 변환합니다.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.#ctor">
      <summary>
        <see cref="T:System.Xml.Xsl.XslTransform" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.String)">
      <summary>URL로 지정된 XSLT 스타일시트를 로드합니다.</summary>
      <param name="url">로드할 XSLT 스타일시트를 지정하는 URL입니다.</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">로드된 리소스가 올바른 스타일시트가 아닙니다.</exception>
      <exception cref="T:System.Security.SecurityException">스타일시트에 포함 스크립트가 들어 있고 호출자에 <see langword="UnmanagedCode" /> 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)">
      <summary>URL로 지정된 XSLT 스타일시트를 로드합니다.</summary>
      <param name="url">로드할 XSLT 스타일시트를 지정하는 URL입니다.</param>
      <param name="resolver">스타일시트와 <c>xsl:import</c> 및 <c>xsl:include</c> 요소에 참조된 모든 스타일시트를 로드하는 데 사용할 <see cref="T:System.Xml.XmlResolver" />입니다.  
이 값이 <see langword="null" />이면 사용자 자격 증명 없는 기본 <see cref="T:System.Xml.XmlUrlResolver" />를 사용하여 스타일시트를 엽니다. 스타일시트의 외부 리소스를 확인하는 데 기본 <see cref="T:System.Xml.XmlUrlResolver" />가 사용되지 않으므로 <c>xsl:import</c> 및 <c>xsl:include</c> 요소는 확인되지 않습니다.  
<see cref="T:System.Xml.XmlResolver" /> 메서드가 완료된 다음 <see cref="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" />가 캐시되지 않습니다.</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">로드된 리소스가 올바른 스타일시트가 아닙니다.</exception>
      <exception cref="T:System.Security.SecurityException">스타일시트에 포함 스크립트가 들어 있고 호출자에 <see langword="UnmanagedCode" /> 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)">
      <summary>
        <see cref="T:System.Xml.XmlReader" />에 포함된 XSLT 스타일시트를 로드합니다.</summary>
      <param name="stylesheet">XSLT 스타일시트가 들어 있는 <see cref="T:System.Xml.XmlReader" /> 개체입니다.</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">현재 노드가 올바른 스타일시트에 맞지 않습니다.</exception>
      <exception cref="T:System.Security.SecurityException">스타일시트에 포함 스크립트가 들어 있고 호출자에 <see langword="UnmanagedCode" /> 권한이 없습니다.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)">
      <summary>
        <see cref="T:System.Xml.XmlReader" />에 포함된 XSLT 스타일시트를 로드합니다.</summary>
      <param name="stylesheet">XSLT 스타일시트가 들어 있는 <see cref="T:System.Xml.XmlReader" /> 개체입니다.</param>
      <param name="resolver">
        <c>xsl:import</c> 및 <c>xsl:include</c> 요소에서 참조된 모든 스타일시트를 로그하는 데 사용되는 <see cref="T:System.Xml.XmlResolver" />입니다. 이 값이 <see langword="null" />이면 외부 리소스가 확인되지 않습니다.  
<see cref="T:System.Xml.XmlResolver" /> 메서드가 완료된 다음 <see cref="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" />가 캐시되지 않습니다.</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">현재 노드가 올바른 스타일시트에 맞지 않습니다.</exception>
      <exception cref="T:System.Security.SecurityException">스타일시트에 포함 스크립트가 들어 있고 호출자에 <see langword="UnmanagedCode" /> 권한이 없습니다.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable)">
      <summary>
        <see cref="T:System.Xml.XPath.IXPathNavigable" />에 포함된 XSLT 스타일시트를 로드합니다.</summary>
      <param name="stylesheet">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 인터페이스를 구현하는 개체입니다. .NET Framework에서 이 개체는 <see cref="T:System.Xml.XmlNode" />(대개 <see cref="T:System.Xml.XmlDocument" />) 또는 XSLT 스타일시트를 포함하는 <see cref="T:System.Xml.XPath.XPathDocument" />일 수 있습니다.</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">로드된 리소스가 올바른 스타일시트가 아닙니다.</exception>
      <exception cref="T:System.Security.SecurityException">스타일시트에 포함 스크립트가 들어 있고 호출자에 <see langword="UnmanagedCode" /> 권한이 없습니다.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)">
      <summary>
        <see cref="T:System.Xml.XPath.IXPathNavigable" />에 포함된 XSLT 스타일시트를 로드합니다.</summary>
      <param name="stylesheet">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 인터페이스를 구현하는 개체입니다. .NET Framework에서 이 개체는 <see cref="T:System.Xml.XmlNode" />(대개 <see cref="T:System.Xml.XmlDocument" />) 또는 XSLT 스타일시트를 포함하는 <see cref="T:System.Xml.XPath.XPathDocument" />일 수 있습니다.</param>
      <param name="resolver">
        <c>xsl:import</c> 및 <c>xsl:include</c> 요소에서 참조된 모든 스타일시트를 로그하는 데 사용되는 <see cref="T:System.Xml.XmlResolver" />입니다. 이 값이 <see langword="null" />이면 외부 리소스가 확인되지 않습니다.  
<see cref="T:System.Xml.XmlResolver" /> 메서드가 완료된 다음 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />가 캐시되지 않습니다.</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">로드된 리소스가 올바른 스타일시트가 아닙니다.</exception>
      <exception cref="T:System.Security.SecurityException">스타일시트에 포함 스크립트가 들어 있고 호출자에 <see langword="UnmanagedCode" /> 권한이 없습니다.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" />에 포함된 XSLT 스타일시트를 로드합니다.</summary>
      <param name="stylesheet">XSLT 스타일시트가 들어 있는 <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체입니다.</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">현재 노드가 올바른 스타일시트에 맞지 않습니다.</exception>
      <exception cref="T:System.Security.SecurityException">스타일시트에 포함 스크립트가 들어 있고 호출자에 <see langword="UnmanagedCode" /> 권한이 없습니다.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" />에 포함된 XSLT 스타일시트를 로드합니다.</summary>
      <param name="stylesheet">XSLT 스타일시트가 들어 있는 <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체입니다.</param>
      <param name="resolver">
        <c>xsl:import</c> 및 <c>xsl:include</c> 요소에서 참조된 모든 스타일시트를 로그하는 데 사용되는 <see cref="T:System.Xml.XmlResolver" />입니다. 이 값이 <see langword="null" />이면 외부 리소스가 확인되지 않습니다.  
<see cref="T:System.Xml.XmlResolver" /> 메서드가 완료된 다음 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />가 캐시되지 않습니다.</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">현재 노드가 올바른 스타일시트에 맞지 않습니다.</exception>
      <exception cref="T:System.Security.SecurityException">스타일시트에 포함 스크립트가 들어 있고 호출자에 <see langword="UnmanagedCode" /> 권한이 없습니다.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String)">
      <summary>입력 파일의 XML 데이터를 변환하고 그 결과를 출력 파일로 출력합니다.</summary>
      <param name="inputfile">변환할 소스 문서의 URL입니다.</param>
      <param name="outputfile">출력 파일의 URL입니다.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String,System.Xml.XmlResolver)">
      <summary>입력 파일의 XML 데이터를 변환하고 그 결과를 출력 파일로 출력합니다.</summary>
      <param name="inputfile">변환할 소스 문서의 URL입니다.</param>
      <param name="outputfile">출력 파일의 URL입니다.</param>
      <param name="resolver">XSLT <c>document()</c> 함수 확인에 사용되는 <see cref="T:System.Xml.XmlResolver" />입니다. 이 값이 <see langword="null" />이면 <c>document()</c> 함수가 확인되지 않습니다.  
<see cref="T:System.Xml.XmlResolver" /> 메서드가 완료된 다음 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />가 캐시되지 않습니다.</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)">
      <summary>지정된 <paramref name="args" />를 사용하여 <see cref="T:System.Xml.XPath.IXPathNavigable" />의 XML 데이터를 변환하고 그 결과를 <see cref="T:System.Xml.XmlReader" />로 출력합니다.</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 인터페이스를 구현하는 개체입니다. .NET Framework에서 이 개체는 변환할 데이터를 포함하는 <see cref="T:System.Xml.XmlNode" />(대개 <see cref="T:System.Xml.XmlDocument" />) 또는 <see cref="T:System.Xml.XPath.XPathDocument" />일 수 있습니다.</param>
      <param name="args">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다.</param>
      <returns>변환 결과가 들어 있는 <see cref="T:System.Xml.XmlReader" />입니다.</returns>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>지정된 <paramref name="args" />를 사용하여 <see cref="T:System.Xml.XPath.IXPathNavigable" />의 XML 데이터를 변환하고 그 결과를 <see cref="T:System.IO.Stream" />로 출력합니다.</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 인터페이스를 구현하는 개체입니다. .NET Framework에서 이 개체는 변환할 데이터를 포함하는 <see cref="T:System.Xml.XmlNode" />(대개 <see cref="T:System.Xml.XmlDocument" />) 또는 <see cref="T:System.Xml.XPath.XPathDocument" />일 수 있습니다.</param>
      <param name="args">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다.</param>
      <param name="output">출력할 대상 스트림입니다.</param>
      <exception cref="T:System.InvalidOperationException">XSLT 변환을 처리하는 동안 오류가 발생한 경우  
참고: 이전 버전에서 업그레이드되면서 변경된 동작입니다. Microsoft .NET Framework version 1.1이나 그 이전 버전을 사용할 경우에는 <see cref="T:System.Xml.Xsl.XsltException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)">
      <summary>지정된 <paramref name="args" />를 사용하여 <see cref="T:System.Xml.XPath.IXPathNavigable" />의 XML 데이터를 변환하고 그 결과를 <see cref="T:System.IO.Stream" />로 출력합니다.</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 인터페이스를 구현하는 개체입니다. .NET Framework에서 이 개체는 변환할 데이터를 포함하는 <see cref="T:System.Xml.XmlNode" />(대개 <see cref="T:System.Xml.XmlDocument" />) 또는 <see cref="T:System.Xml.XPath.XPathDocument" />일 수 있습니다.</param>
      <param name="args">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다.</param>
      <param name="output">출력할 대상 스트림입니다.</param>
      <param name="resolver">XSLT <c>document()</c> 함수 확인에 사용되는 <see cref="T:System.Xml.XmlResolver" />입니다. 이 값이 <see langword="null" />이면 <c>document()</c> 함수가 확인되지 않습니다.  
<see cref="T:System.Xml.XmlResolver" /> 메서드가 완료된 다음 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />가 캐시되지 않습니다.</param>
      <exception cref="T:System.InvalidOperationException">XSLT 변환을 처리하는 동안 오류가 발생한 경우  
참고: 이전 버전에서 업그레이드되면서 변경된 동작입니다. Microsoft .NET Framework version 1.1이나 그 이전 버전을 사용할 경우에는 <see cref="T:System.Xml.Xsl.XsltException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>지정된 <paramref name="args" />를 사용하여 <see cref="T:System.Xml.XPath.IXPathNavigable" />의 XML 데이터를 변환하고 그 결과를 <see cref="T:System.IO.TextWriter" />로 출력합니다.</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 인터페이스를 구현하는 개체입니다. .NET Framework에서 이 개체는 변환할 데이터를 포함하는 <see cref="T:System.Xml.XmlNode" />(대개 <see cref="T:System.Xml.XmlDocument" />) 또는 <see cref="T:System.Xml.XPath.XPathDocument" />일 수 있습니다.</param>
      <param name="args">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다.</param>
      <param name="output">출력을 제공할 대상 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">XSLT 변환을 처리하는 동안 오류가 발생한 경우  
참고: 이전 버전에서 업그레이드되면서 변경된 동작입니다. Microsoft .NET Framework version 1.1이나 그 이전 버전을 사용할 경우에는 <see cref="T:System.Xml.Xsl.XsltException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)">
      <summary>지정된 <paramref name="args" />를 사용하여 <see cref="T:System.Xml.XPath.IXPathNavigable" />의 XML 데이터를 변환하고 그 결과를 <see cref="T:System.IO.TextWriter" />로 출력합니다.</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 인터페이스를 구현하는 개체입니다. .NET Framework에서 이 개체는 변환할 데이터를 포함하는 <see cref="T:System.Xml.XmlNode" />(대개 <see cref="T:System.Xml.XmlDocument" />) 또는 <see cref="T:System.Xml.XPath.XPathDocument" />일 수 있습니다.</param>
      <param name="args">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다.</param>
      <param name="output">출력을 제공할 대상 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="resolver">XSLT <c>document()</c> 함수 확인에 사용되는 <see cref="T:System.Xml.XmlResolver" />입니다. 이 값이 <see langword="null" />이면 <c>document()</c> 함수가 확인되지 않습니다.  
<see cref="T:System.Xml.XmlResolver" /> 메서드가 완료된 다음 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />가 캐시되지 않습니다.</param>
      <exception cref="T:System.InvalidOperationException">XSLT 변환을 처리하는 동안 오류가 발생한 경우  
참고: 이전 버전에서 업그레이드되면서 변경된 동작입니다. Microsoft .NET Framework version 1.1이나 그 이전 버전을 사용할 경우에는 <see cref="T:System.Xml.Xsl.XsltException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)">
      <summary>지정된 <paramref name="args" />를 사용하여 <see cref="T:System.Xml.XPath.IXPathNavigable" />의 XML 데이터를 변환하고 그 결과를 <see cref="T:System.Xml.XmlReader" />로 출력합니다.</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 인터페이스를 구현하는 개체입니다. .NET Framework에서 이 개체는 변환할 데이터를 포함하는 <see cref="T:System.Xml.XmlNode" />(대개 <see cref="T:System.Xml.XmlDocument" />) 또는 <see cref="T:System.Xml.XPath.XPathDocument" />일 수 있습니다.</param>
      <param name="args">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다.</param>
      <param name="resolver">XSLT <c>document()</c> 함수 확인에 사용되는 <see cref="T:System.Xml.XmlResolver" />입니다. 이 값이 <see langword="null" />이면 <c>document()</c> 함수가 확인되지 않습니다.  
<see cref="T:System.Xml.XmlResolver" /> 메서드가 완료된 다음 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />가 캐시되지 않습니다.</param>
      <returns>변환 결과가 들어 있는 <see cref="T:System.Xml.XmlReader" />입니다.</returns>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>지정된 <paramref name="args" />를 사용하여 <see cref="T:System.Xml.XPath.IXPathNavigable" />의 XML 데이터를 변환하고 그 결과를 <see cref="T:System.Xml.XmlWriter" />로 출력합니다.</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 인터페이스를 구현하는 개체입니다. .NET Framework에서 이 개체는 변환할 데이터를 포함하는 <see cref="T:System.Xml.XmlNode" />(대개 <see cref="T:System.Xml.XmlDocument" />) 또는 <see cref="T:System.Xml.XPath.XPathDocument" />일 수 있습니다.</param>
      <param name="args">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다.</param>
      <param name="output">출력을 제공할 대상 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">XSLT 변환을 처리하는 동안 오류가 발생한 경우  
참고: 이전 버전에서 업그레이드되면서 변경된 동작입니다. Microsoft .NET Framework version 1.1이나 그 이전 버전을 사용할 경우에는 <see cref="T:System.Xml.Xsl.XsltException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>지정된 <paramref name="args" />를 사용하여 <see cref="T:System.Xml.XPath.IXPathNavigable" />의 XML 데이터를 변환하고 그 결과를 <see cref="T:System.Xml.XmlWriter" />로 출력합니다.</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 인터페이스를 구현하는 개체입니다. .NET Framework에서 이 개체는 변환할 데이터를 포함하는 <see cref="T:System.Xml.XmlNode" />(대개 <see cref="T:System.Xml.XmlDocument" />) 또는 <see cref="T:System.Xml.XPath.XPathDocument" />일 수 있습니다.</param>
      <param name="args">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다.</param>
      <param name="output">출력을 제공할 대상 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
      <param name="resolver">XSLT <c>document()</c> 함수 확인에 사용되는 <see cref="T:System.Xml.XmlResolver" />입니다. 이 값이 <see langword="null" />이면 <c>document()</c> 함수가 확인되지 않습니다.  
<see cref="T:System.Xml.XmlResolver" /> 메서드가 완료된 다음 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />가 캐시되지 않습니다.</param>
      <exception cref="T:System.InvalidOperationException">XSLT 변환을 처리하는 동안 오류가 발생한 경우  
참고: 이전 버전에서 업그레이드되면서 변경된 동작입니다. Microsoft .NET Framework version 1.1이나 그 이전 버전을 사용할 경우에는 <see cref="T:System.Xml.Xsl.XsltException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)">
      <summary>지정된 <paramref name="args" />를 사용하여 <see cref="T:System.Xml.XPath.XPathNavigator" />의 XML 데이터를 변환하고 그 결과를 <see cref="T:System.Xml.XmlReader" />로 출력합니다.</summary>
      <param name="input">변환할 데이터를 포함하는 <see cref="T:System.Xml.XPath.XPathNavigator" />입니다.</param>
      <param name="args">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다.</param>
      <returns>변환 결과가 들어 있는 <see cref="T:System.Xml.XmlReader" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">XSLT 변환을 처리하는 동안 오류가 발생한 경우  
참고: 이전 버전에서 업그레이드되면서 변경된 동작입니다. Microsoft .NET Framework version 1.1이나 그 이전 버전을 사용할 경우에는 <see cref="T:System.Xml.Xsl.XsltException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>지정된 <paramref name="args" />를 사용하여 <see cref="T:System.Xml.XPath.XPathNavigator" />의 XML 데이터를 변환하고 그 결과를 <see cref="T:System.IO.Stream" />로 출력합니다.</summary>
      <param name="input">변환할 데이터를 포함하는 <see cref="T:System.Xml.XPath.XPathNavigator" />입니다.</param>
      <param name="args">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다.</param>
      <param name="output">출력할 대상 스트림입니다.</param>
      <exception cref="T:System.InvalidOperationException">XSLT 변환을 처리하는 동안 오류가 발생한 경우  
참고: 이전 버전에서 업그레이드되면서 변경된 동작입니다. Microsoft .NET Framework version 1.1이나 그 이전 버전을 사용할 경우에는 <see cref="T:System.Xml.Xsl.XsltException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)">
      <summary>지정된 <paramref name="args" />를 사용하여 <see cref="T:System.Xml.XPath.XPathNavigator" />의 XML 데이터를 변환하고 그 결과를 <see cref="T:System.IO.Stream" />로 출력합니다.</summary>
      <param name="input">변환할 데이터를 포함하는 <see cref="T:System.Xml.XPath.XPathNavigator" />입니다.</param>
      <param name="args">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다.</param>
      <param name="output">출력할 대상 스트림입니다.</param>
      <param name="resolver">XSLT <c>document()</c> 함수 확인에 사용되는 <see cref="T:System.Xml.XmlResolver" />입니다. 이 값이 <see langword="null" />이면 <c>document()</c> 함수가 확인되지 않습니다.  
<see cref="T:System.Xml.XmlResolver" /> 메서드가 완료된 다음 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" />가 캐시되지 않습니다.</param>
      <exception cref="T:System.InvalidOperationException">XSLT 변환을 처리하는 동안 오류가 발생한 경우  
참고: 이전 버전에서 업그레이드되면서 변경된 동작입니다. Microsoft .NET Framework version 1.1이나 그 이전 버전을 사용할 경우에는 <see cref="T:System.Xml.Xsl.XsltException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>지정된 <paramref name="args" />를 사용하여 <see cref="T:System.Xml.XPath.XPathNavigator" />의 XML 데이터를 변환하고 그 결과를 <see cref="T:System.IO.TextWriter" />로 출력합니다.</summary>
      <param name="input">변환할 데이터를 포함하는 <see cref="T:System.Xml.XPath.XPathNavigator" />입니다.</param>
      <param name="args">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다.</param>
      <param name="output">출력을 제공할 대상 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">XSLT 변환을 처리하는 동안 오류가 발생한 경우  
참고: 이전 버전에서 업그레이드되면서 변경된 동작입니다. Microsoft .NET Framework version 1.1이나 그 이전 버전을 사용할 경우에는 <see cref="T:System.Xml.Xsl.XsltException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)">
      <summary>지정된 <paramref name="args" />를 사용하여 <see cref="T:System.Xml.XPath.XPathNavigator" />의 XML 데이터를 변환하고 그 결과를 <see cref="T:System.IO.TextWriter" />로 출력합니다.</summary>
      <param name="input">변환할 데이터를 포함하는 <see cref="T:System.Xml.XPath.XPathNavigator" />입니다.</param>
      <param name="args">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다.</param>
      <param name="output">출력을 제공할 대상 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="resolver">XSLT <c>document()</c> 함수 확인에 사용되는 <see cref="T:System.Xml.XmlResolver" />입니다. 이 값이 <see langword="null" />이면 <c>document()</c> 함수가 확인되지 않습니다.  
<see cref="T:System.Xml.XmlResolver" /> 메서드가 완료된 다음 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />가 캐시되지 않습니다.</param>
      <exception cref="T:System.InvalidOperationException">XSLT 변환을 처리하는 동안 오류가 발생한 경우  
참고: 이전 버전에서 업그레이드되면서 변경된 동작입니다. Microsoft .NET Framework version 1.1이나 그 이전 버전을 사용할 경우에는 <see cref="T:System.Xml.Xsl.XsltException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)">
      <summary>지정된 <paramref name="args" />를 사용하여 <see cref="T:System.Xml.XPath.XPathNavigator" />의 XML 데이터를 변환하고 그 결과를 <see cref="T:System.Xml.XmlReader" />로 출력합니다.</summary>
      <param name="input">변환할 데이터를 포함하는 <see cref="T:System.Xml.XPath.XPathNavigator" />입니다.</param>
      <param name="args">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다.</param>
      <param name="resolver">XSLT <c>document()</c> 함수 확인에 사용되는 <see cref="T:System.Xml.XmlResolver" />입니다. 이 값이 <see langword="null" />이면 <c>document()</c> 함수가 확인되지 않습니다.  
<see cref="T:System.Xml.XmlResolver" /> 메서드가 완료된 다음 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />가 캐시되지 않습니다.</param>
      <returns>변환 결과가 들어 있는 <see cref="T:System.Xml.XmlReader" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">XSLT 변환을 처리하는 동안 오류가 발생한 경우  
참고: 이전 버전에서 업그레이드되면서 변경된 동작입니다. Microsoft .NET Framework version 1.1이나 그 이전 버전을 사용할 경우에는 <see cref="T:System.Xml.Xsl.XsltException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>지정된 인수를 사용하여 <see cref="T:System.Xml.XPath.XPathNavigator" />의 XML 데이터를 변환하고 그 결과를 <see cref="T:System.Xml.XmlWriter" />로 출력합니다.</summary>
      <param name="input">변환할 데이터를 포함하는 <see cref="T:System.Xml.XPath.XPathNavigator" />입니다.</param>
      <param name="args">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다.</param>
      <param name="output">출력을 제공할 대상 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">XSLT 변환을 처리하는 동안 오류가 발생한 경우  
참고: 이전 버전에서 업그레이드되면서 변경된 동작입니다. Microsoft .NET Framework version 1.1이나 그 이전 버전을 사용할 경우에는 <see cref="T:System.Xml.Xsl.XsltException" />이 throw됩니다.</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>지정된 인수를 사용하여 <see cref="T:System.Xml.XPath.XPathNavigator" />의 XML 데이터를 변환하고 그 결과를 <see cref="T:System.Xml.XmlWriter" />로 출력합니다.</summary>
      <param name="input">변환할 데이터를 포함하는 <see cref="T:System.Xml.XPath.XPathNavigator" />입니다.</param>
      <param name="args">변환에 대한 입력용으로 사용되는 네임스페이스 정규화 인수가 들어 있는 <see cref="T:System.Xml.Xsl.XsltArgumentList" />입니다.</param>
      <param name="output">출력을 제공할 대상 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
      <param name="resolver">XSLT <c>document()</c> 함수 확인에 사용되는 <see cref="T:System.Xml.XmlResolver" />입니다. 이 값이 <see langword="null" />이면 <c>document()</c> 함수가 확인되지 않습니다.  
<see cref="T:System.Xml.XmlResolver" /> 메서드가 완료된 다음 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />가 캐시되지 않습니다.</param>
      <exception cref="T:System.InvalidOperationException">XSLT 변환을 처리하는 동안 오류가 발생한 경우  
참고: 이전 버전에서 업그레이드되면서 변경된 동작입니다. Microsoft .NET Framework version 1.1이나 그 이전 버전을 사용할 경우에는 <see cref="T:System.Xml.Xsl.XsltException" />이 throw됩니다.</exception>
    </member>
    <member name="P:System.Xml.Xsl.XslTransform.XmlResolver">
      <summary>
        <see cref="T:System.Xml.XmlResolver" /> 메서드를 호출할 때 외부 리소스를 확인하기 위해 사용하는 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />를 설정합니다.</summary>
      <returns>변환을 수행하는 동안 사용할 <see cref="T:System.Xml.XmlResolver" />입니다. 경우 설정 <see langword="null" />, XSLT <c>document ()</c> 함수가 확인 되지 않습니다.</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltSettings">
      <summary>XSLT 스타일시트를 실행하는 동안 지원할 XSLT 기능을 지정합니다.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltSettings.#ctor">
      <summary>
        <see cref="T:System.Xml.Xsl.XsltSettings" /> 클래스의 새 인스턴스를 기본 설정으로 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltSettings.#ctor(System.Boolean,System.Boolean)">
      <summary>지정된 설정을 사용하여 <see cref="T:System.Xml.Xsl.XsltSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="enableDocumentFunction">XSLT <c>document()</c> 함수를 지원하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="enableScript">포함된 스크립트 블록을 지원하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.Default">
      <summary>기본 설정을 사용하는 <see cref="T:System.Xml.Xsl.XsltSettings" /> 개체를 가져옵니다. XSLT <c>document()</c> 함수와 포함된 스크립트 블록은 지원되지 않습니다.</summary>
      <returns>
        <see cref="T:System.Xml.Xsl.XsltSettings" /> 및 <see cref="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction" /> 속성이 <see langword="false" />로 설정된 <see cref="P:System.Xml.Xsl.XsltSettings.EnableScript" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction">
      <summary>XSLT <c>document()</c> 함수를 지원할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="true" /> XSLT를 지 원하는 데 <c>document ()</c> 함수를 고, 그렇지 <see langword="false" />합니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.EnableScript">
      <summary>포함된 스크립트 블록을 지원할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>XSLT 스타일시트에 있는 스크립트 블록을 지원하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.TrustedXslt">
      <summary>XSLT <c>document()</c> 함수 및 포함된 스크립트 블록을 지원하는 <see cref="T:System.Xml.Xsl.XsltSettings" /> 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xml.Xsl.XsltSettings" /> 및 <see cref="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction" /> 속성이 <see langword="true" />로 설정된 <see cref="P:System.Xml.Xsl.XsltSettings.EnableScript" /> 개체입니다.</returns>
    </member>
  </members>
</doc>
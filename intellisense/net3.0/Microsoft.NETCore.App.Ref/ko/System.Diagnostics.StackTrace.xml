<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Diagnostics.StackTrace</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.StackFrame">
      <summary>현재 스레드의 호출 스택에 대한 함수를 나타내는 <see cref="T:System.Diagnostics.StackFrame" />에 대한 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.StackFrame" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Boolean)">
      <summary>필요에 따라 소스 정보를 캡처하고 <see cref="T:System.Diagnostics.StackFrame" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="fNeedFileInfo">스택 프레임의 파일 이름, 줄 번호 및 열 번호를 캡처하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32)">
      <summary>현재 스택 프레임 위의 프레임에 해당하는 <see cref="T:System.Diagnostics.StackFrame" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="skipFrames">건너뛸 스택 프레임의 개수입니다.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32,System.Boolean)">
      <summary>필요에 따라 소스 정보를 캡처하고 현재 스택 프레임 위의 프레임에 해당하는 <see cref="T:System.Diagnostics.StackFrame" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="skipFrames">건너뛸 스택 프레임의 개수입니다.</param>
      <param name="fNeedFileInfo">스택 프레임의 파일 이름, 줄 번호 및 열 번호를 캡처하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32)">
      <summary>지정된 파일 이름과 줄 번호만 포함하는 <see cref="T:System.Diagnostics.StackFrame" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="fileName">파일 이름입니다.</param>
      <param name="lineNumber">지정된 파일의 줄 번호입니다.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32,System.Int32)">
      <summary>지정된 파일 이름, 줄 번호 및 열 번호만 포함하는 <see cref="T:System.Diagnostics.StackFrame" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="fileName">파일 이름입니다.</param>
      <param name="lineNumber">지정된 파일의 줄 번호입니다.</param>
      <param name="colNumber">지정된 파일의 열 번호입니다.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileColumnNumber">
      <summary>실행 중인 코드를 포함하는 파일에서 열 번호를 가져옵니다. 이 정보는 일반적으로 실행 파일의 디버깅 기호에서 추출됩니다.</summary>
      <returns>파일 열 번호 또는 파일 열 번호를 확인할 수 없는 경우 0입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileLineNumber">
      <summary>실행 중인 코드를 포함하는 파일에서 줄 번호를 가져옵니다. 이 정보는 일반적으로 실행 파일의 디버깅 기호에서 추출됩니다.</summary>
      <returns>파일 줄 번호 또는 파일 줄 번호를 확인할 수 없는 경우 0입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileName">
      <summary>실행 중인 코드를 포함하는 파일 이름을 가져옵니다. 이 정보는 일반적으로 실행 파일의 디버깅 기호에서 추출됩니다.</summary>
      <returns>파일 이름 또는 파일 이름을 확인할 수 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetILOffset">
      <summary>실행 중인 메서드의 MSIL(Microsoft Intermediate Language) 코드 시작 부분에서 오프셋을 가져옵니다. 이 오프셋은 JIT(just-in-time) 컴파일러가 디버깅 코드를 생성하는지 여부에 따라 근사값이 될 수 있습니다. 이 디버깅 정보의 생성은 <see cref="T:System.Diagnostics.DebuggableAttribute" />에 의해 제어됩니다.</summary>
      <returns>실행 중인 메서드의 MSIL 코드 처음부터 계산한 오프셋입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetMethod">
      <summary>프레임이 실행되고 있는 메서드를 가져옵니다.</summary>
      <returns>프레임이 실행되고 있는 메서드입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetNativeOffset">
      <summary>실행 중인 메서드의 네이티브 JIT(just-in-time) 컴파일 코드 처음부터 계산한 오프셋을 가져옵니다. 이 디버깅 정보의 생성은 <see cref="T:System.Diagnostics.DebuggableAttribute" /> 클래스를 통해 제어됩니다.</summary>
      <returns>실행 중인 메서드의 JIT 컴파일 코드 처음부터 계산한 오프셋입니다.</returns>
    </member>
    <member name="F:System.Diagnostics.StackFrame.OFFSET_UNKNOWN">
      <summary>네이티브 또는 MSIL(Microsoft Intermediate Language) 오프셋을 알 수 없을 때 <see cref="M:System.Diagnostics.StackFrame.GetNativeOffset" /> 또는 <see cref="M:System.Diagnostics.StackFrame.GetILOffset" /> 메서드를 통해 반환되는 값을 정의합니다. 이 필드는 상수입니다.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.ToString">
      <summary>읽을 수 있도록 스택 추적을 만듭니다.</summary>
      <returns>읽을 수 있도록 만든 스택 추적입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.StackFrameExtensions">
      <summary>현재 스레드의 호출 스택에 있는 함수 호출을 나타내는 <see cref="T:System.Diagnostics.StackFrame" /> 클래스에 대한 확장 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeImageBase(System.Diagnostics.StackFrame)">
      <summary>이 스택 프레임이 실행되는 네이티브 이미지의 기준 주소에 대한 포인터를 반환합니다.</summary>
      <param name="stackFrame">스택 프레임입니다.</param>
      <returns>.NET Framework를 대상으로 하는 경우 <see cref="F:System.IntPtr.Zero" /> 또는 네이티브 이미지의 기준 주소에 대한 포인터입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeIP(System.Diagnostics.StackFrame)">
      <summary>실행되는 메서드에 대한 네이티브 코드의 시작 부분에 대한 인터페이스 포인터를 가져옵니다.</summary>
      <param name="stackFrame">스택 프레임입니다.</param>
      <returns>.NET Framework를 대상으로 하는 경우 <see cref="F:System.IntPtr.Zero" /> 또는 실행되는 메서드에 대한 네이티브 코드의 시작 부분에 대한 인터페이스 포인터입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasILOffset(System.Diagnostics.StackFrame)">
      <summary>실행 중인 메서드의 IL 코드 처음부터 오프셋을 사용할 수 있는지를 나타냅니다.</summary>
      <param name="stackFrame">스택 프레임입니다.</param>
      <returns>오프셋을 사용할 수 있는 경우 <see langword="true" />이고, 그러지 않은 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasMethod(System.Diagnostics.StackFrame)">
      <summary>지정된 프레임이 실행되는 메서드에 대한 정보를 사용할 수 있는지 여부를 나타냅니다.</summary>
      <param name="stackFrame">스택 프레임입니다.</param>
      <returns>현재 프레임이 실행되는 메서드에 대한 정보를 사용할 수 있는 경우 <see langword="true" />이고, 그러지 않은 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasNativeImage(System.Diagnostics.StackFrame)">
      <summary>네이티브 이미지를 지정한 스택 프레임에 사용할 수 있는지를 나타냅니다.</summary>
      <param name="stackFrame">스택 프레임입니다.</param>
      <returns>네이티브 이미지를 스택 프레임에 사용할 수 있는 경우 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasSource(System.Diagnostics.StackFrame)">
      <summary>지정한 스택 프레임이 실행되는 코드가 포함된 파일을 사용할 수 있는지 여부를 나타냅니다.</summary>
      <param name="stackFrame">스택 프레임입니다.</param>
      <returns>지정한 스택 프레임이 실행되는 코드를 사용할 수 있는 경우 <see langword="true" />이고, 그러지 않은 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.StackTrace">
      <summary>여러 스택 프레임의 정렬된 컬렉션에 해당하는 스택 추적을 나타냅니다.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor">
      <summary>호출자 프레임에서 <see cref="T:System.Diagnostics.StackTrace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Boolean)">
      <summary>필요에 따라 소스 정보를 캡처하고 호출 프레임에서 <see cref="T:System.Diagnostics.StackTrace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="fNeedFileInfo">파일 이름, 줄 번호 및 열 번호를 캡처하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)">
      <summary>단일 프레임을 포함하는 <see cref="T:System.Diagnostics.StackTrace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="frame">
        <see cref="T:System.Diagnostics.StackTrace" /> 개체가 포함해야 하는 프레임입니다.</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception)">
      <summary>제공된 예외 개체를 사용하여 <see cref="T:System.Diagnostics.StackTrace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="e">스택 추적을 생성할 원본 예외 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수 <paramref name="e" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
      <summary>필요에 따라 소스 정보를 캡처하고 제공된 예외 개체를 사용하여 <see cref="T:System.Diagnostics.StackTrace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="exception">스택 추적을 생성할 원본 예외 개체입니다.</param>
      <param name="needFileInfo">파일 이름, 줄 번호 및 열 번호를 캡처하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수 <paramref name="e" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
      <summary>제공된 예외 개체를 사용하고 지정된 수의 프레임을 건너뛰어 <see cref="T:System.Diagnostics.StackTrace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="e">스택 추적을 생성할 원본 예외 개체입니다.</param>
      <param name="skipFrames">추적할 스택 프레임의 개수입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수 <paramref name="e" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="skipFrames" /> 매개 변수가 음수인 경우</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
      <summary>지정된 수의 프레임을 건너뛰고 필요에 따라 소스 정보를 캡처하여 제공된 예외 개체로 <see cref="T:System.Diagnostics.StackTrace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="e">스택 추적을 생성할 원본 예외 개체입니다.</param>
      <param name="skipFrames">추적할 스택 프레임의 개수입니다.</param>
      <param name="fNeedFileInfo">파일 이름, 줄 번호 및 열 번호를 캡처하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">매개 변수 <paramref name="e" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="skipFrames" /> 매개 변수가 음수인 경우</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32)">
      <summary>지정된 수의 프레임을 건너뛰어 호출자 프레임에서 <see cref="T:System.Diagnostics.StackTrace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="skipFrames">추적할 스택 프레임의 개수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="skipFrames" /> 매개 변수가 음수인 경우</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)">
      <summary>지정된 수의 프레임을 건너뛰고 필요에 따라 소스 정보를 캡처하여 호출자 프레임에서 <see cref="T:System.Diagnostics.StackTrace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="skipFrames">추적할 스택 프레임의 개수입니다.</param>
      <param name="fNeedFileInfo">파일 이름, 줄 번호 및 열 번호를 캡처하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="skipFrames" /> 매개 변수가 음수인 경우</exception>
    </member>
    <member name="P:System.Diagnostics.StackTrace.FrameCount">
      <summary>스택 추적의 프레임 수를 가져옵니다.</summary>
      <returns>스택 추적의 프레임 수입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrame(System.Int32)">
      <summary>지정된 스택 프레임을 가져옵니다.</summary>
      <param name="index">요청한 스택 프레임의 인덱스입니다.</param>
      <returns>지정된 스택 프레임입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrames">
      <summary>현재 스택 추적에 있는 모든 스택 프레임의 복사본을 반환합니다.</summary>
      <returns>스택 추적의 함수 호출을 나타내는 <see cref="T:System.Diagnostics.StackFrame" /> 형식의 배열입니다.</returns>
    </member>
    <member name="F:System.Diagnostics.StackTrace.METHODS_TO_SKIP">
      <summary>스택 추적에서 생략할 기본 메서드 수를 정의합니다. 이 필드는 상수입니다.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.ToString">
      <summary>읽을 수 있도록 스택 추적을 만듭니다.</summary>
      <returns>읽을 수 있도록 만든 스택 추적입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder">
      <summary>관리 코드의 기호 바인더를 나타냅니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder.GetReader(System.Int32,System.String,System.String)">
      <summary>현재 파일의 기호 판독기 인터페이스를 가져옵니다.</summary>
      <param name="importer">메타데이터를 가져오는 인터페이스입니다.</param>
      <param name="filename">판독기 인터페이스가 필요한 파일 이름입니다.</param>
      <param name="searchPath">기호 파일을 찾는 데 사용하는 검색 경로입니다.</param>
      <returns>
        <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> 인터페이스가 디버깅 기호를 읽습니다.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder1">
      <summary>관리 코드의 기호 바인더를 나타냅니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder1.GetReader(System.IntPtr,System.String,System.String)">
      <summary>현재 파일의 기호 판독기 인터페이스를 가져옵니다.</summary>
      <param name="importer">메타데이터 가져오기 인터페이스를 참조하는 <see cref="T:System.IntPtr" />입니다.</param>
      <param name="filename">판독기 인터페이스가 필요한 파일 이름입니다.</param>
      <param name="searchPath">기호 파일을 찾는 데 사용하는 검색 경로입니다.</param>
      <returns>
        <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> 인터페이스가 디버깅 기호를 읽습니다.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocument">
      <summary>기호 저장소가 참조하는 문서를 나타냅니다.</summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.CheckSumAlgorithmId">
      <summary>체크섬 알고리즘 식별자를 가져옵니다.</summary>
      <returns>체크섬 알고리즘을 식별하는 GUID입니다. 체크섬이 없으면 값은 모두 0입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.DocumentType">
      <summary>현재 문서의 형식을 가져옵니다.</summary>
      <returns>현재 문서의 형식입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.FindClosestLine(System.Int32)">
      <summary>시퀀스 위치가 될 수도 있고 그렇지 않을 수도 있는 현재 문서에서 줄을 지정하면 시퀀스 위치가 되는 가장 가까운 줄을 반환합니다.</summary>
      <param name="line">문서에서 지정된 줄입니다.</param>
      <returns>시퀀스 위치가 되는 가장 가까운 줄입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetCheckSum">
      <summary>체크섬을 가져옵니다.</summary>
      <returns>체크섬입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetSourceRange(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>지정된 범위의 포함 문서 소스를 가져옵니다.</summary>
      <param name="startLine">현재 문서의 시작 줄입니다.</param>
      <param name="startColumn">현재 문서의 시작 열입니다.</param>
      <param name="endLine">현재 문서의 끝 줄입니다.</param>
      <param name="endColumn">현재 문서의 끝 열입니다.</param>
      <returns>지정된 범위의 문서 소스입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.HasEmbeddedSource">
      <summary>현재 문서가 기호 저장소에 저장되었는지 여부를 확인합니다.</summary>
      <returns>현재 문서가 기호 저장소에 저장되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.Language">
      <summary>현재 문서의 언어를 가져옵니다.</summary>
      <returns>현재 문서의 언어입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.LanguageVendor">
      <summary>현재 문서의 언어 공급업체를 가져옵니다.</summary>
      <returns>현재 문서의 언어 공급업체입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.SourceLength">
      <summary>포함 리소스의 길이(바이트)를 가져옵니다.</summary>
      <returns>현재 문서의 리소스 길이입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.URL">
      <summary>현재 문서의 URL을 가져옵니다.</summary>
      <returns>현재 문서의 URL입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocumentWriter">
      <summary>기호 저장소가 참조하는 문서를 나타냅니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetCheckSum(System.Guid,System.Byte[])">
      <summary>체크섬 정보를 설정합니다.</summary>
      <param name="algorithmId">알고리즘 ID를 나타내는 GUID입니다.</param>
      <param name="checkSum">체크섬입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetSource(System.Byte[])">
      <summary>문서의 원시 소스를 기호 저장소에 저장합니다.</summary>
      <param name="source">부호 없는 바이트로 나타내진 문서 소스입니다.</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolMethod">
      <summary>기호 저장소 내의 메서드를 나타냅니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace">
      <summary>현재 메서드가 정의되어 있는 네임스페이스를 가져옵니다.</summary>
      <returns>현재 메서드가 정의되어 있는 네임스페이스입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary>지정된 위치에 해당하는 메서드에 들어 있는 MSIL(Microsoft intermediate language) 오프셋을 가져옵니다.</summary>
      <param name="document">오프셋이 요청된 문서입니다.</param>
      <param name="line">오프셋에 해당하는 문서 줄입니다.</param>
      <param name="column">오프셋에 해당하는 문서 열입니다.</param>
      <returns>지정된 문서에 들어 있는 오프셋입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters">
      <summary>현재 메서드의 매개 변수를 가져옵니다.</summary>
      <returns>현재 메서드의 매개 변수 배열입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary>지정된 위치가 이 메서드에 설명되어 있는 MSIL(Microsoft intermediate language)의 범위에 해당하는 시작 및 종료 오프셋 쌍의 배열을 가져옵니다.</summary>
      <param name="document">오프셋이 요청된 문서입니다.</param>
      <param name="line">범위에 해당하는 문서 줄입니다.</param>
      <param name="column">범위에 해당하는 문서 열입니다.</param>
      <returns>시작 및 종료 오프셋 쌍의 배열입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope(System.Int32)">
      <summary>오프셋이 메서드에서 지정되면 대부분의 포함 어휘 범위를 반환합니다.</summary>
      <param name="offset">어휘 범위의 메서드에 들어 있는 바이트 오프셋입니다.</param>
      <returns>메서드에서 지정된 바이트 오프셋에 대해 포함하는 대부분의 어휘 범위입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary>현재 메서드의 시퀀스 위치를 가져옵니다.</summary>
      <param name="offsets">시퀀스 위치에 대한 메서드 시작 부분부터의 바이트 오프셋 배열입니다.</param>
      <param name="documents">시퀀스 위치가 있는 문서의 배열입니다.</param>
      <param name="lines">시퀀스 위치가 있는 문서의 줄 배열입니다.</param>
      <param name="columns">시퀀스 위치가 있는 문서의 열 배열입니다.</param>
      <param name="endLines">시퀀스 위치가 끝나는 문서의 줄 배열입니다.</param>
      <param name="endColumns">시퀀스 위치가 끝나는 문서의 열 배열입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])">
      <summary>현재 메서드의 소스에 대한 시작 및 종료 위치를 가져옵니다.</summary>
      <param name="docs">시작 및 종료 소스 문서입니다.</param>
      <param name="lines">해당 소스 문서의 시작 및 종료 줄입니다.</param>
      <param name="columns">해당 소스 문서의 시작 및 끝 열입니다.</param>
      <returns>위치가 정의되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.RootScope">
      <summary>현재 메서드의 루트 어휘 범위를 가져옵니다. 이 범위는 전체 메서드를 포함합니다.</summary>
      <returns>전체 메서드를 포함하는 루트 어휘 범위입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount">
      <summary>메서드에 있는 시퀀스 위치의 수를 가져옵니다.</summary>
      <returns>메서드에 있는 시퀀스 위치의 수입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.Token">
      <summary>현재 메서드의 메타데이터가 들어 있는 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />을 가져옵니다.</summary>
      <returns>현재 메서드의 메타데이터 토큰입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolNamespace">
      <summary>기호 저장소 내의 네임스페이스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetNamespaces">
      <summary>현재 네임스페이스의 자식 멤버를 가져옵니다.</summary>
      <returns>현재 네임스페이스의 자식 멤버입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetVariables">
      <summary>현재 네임스페이스의 전역 범위에서 정의된 변수를 모두 가져옵니다.</summary>
      <returns>현재 네임스페이스의 전역 범위에서 정의된 변수입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolNamespace.Name">
      <summary>현재 네임스페이스를 가져옵니다.</summary>
      <returns>현재 네임스페이스입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolReader">
      <summary>관리 코드의 기호 판독기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>언어, 공급업체, 형식에 의해 지정된 문서를 가져옵니다.</summary>
      <param name="url">문서를 식별하는 URL입니다.</param>
      <param name="language">문서 언어입니다. 이 매개 변수를 <see cref="F:System.Guid.Empty" />로 지정할 수 있습니다.</param>
      <param name="languageVendor">문서 언어의 공급업체 ID입니다. 이 매개 변수를 <see cref="F:System.Guid.Empty" />로 지정할 수 있습니다.</param>
      <param name="documentType">문서의 형식입니다. 이 매개 변수를 <see cref="F:System.Guid.Empty" />로 지정할 수 있습니다.</param>
      <returns>지정된 문서입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocuments">
      <summary>기호 저장소에 정의된 모든 문서의 배열을 가져옵니다.</summary>
      <returns>기호 저장소에 정의된 모든 문서의 배열입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetGlobalVariables">
      <summary>모듈의 전역 변수를 모두 가져옵니다.</summary>
      <returns>모듈의 모든 변수의 배열입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>메서드의 식별자가 지정되면 기호 판독기 메서드 개체를 가져옵니다.</summary>
      <param name="method">메서드의 메타데이터 토큰입니다.</param>
      <returns>지정된 메서드 식별자의 기호 판독기 메서드 개체입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken,System.Int32)">
      <summary>메서드의 식별자와 메서드의 편집하며 계속하기 버전이 지정되면 기호 판독기 메서드 개체를 가져옵니다.</summary>
      <param name="method">메서드의 메타데이터 토큰입니다.</param>
      <param name="version">메서드의 편집하며 계속하기 버전입니다.</param>
      <returns>지정된 메서드 식별자의 기호 판독기 메서드 개체입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethodFromDocumentPosition(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary>지정된 위치가 문서에 포함되어 있는 기호 판독기 메서드 개체를 가져옵니다.</summary>
      <param name="document">메서드가 있는 문서입니다.</param>
      <param name="line">문서에 있는 줄의 위치입니다. 각 줄은 1부터 시작하여 번호가 매겨져 있습니다.</param>
      <param name="column">문서에 있는 열의 위치입니다. 각 열은 1부터 시작하여 번호가 매겨져 있습니다.</param>
      <returns>문서의 지정된 위치에 대한 판독기 메서드 개체입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetNamespaces">
      <summary>현재 기호 저장소의 전역 범위에서 정의된 네임스페이스를 가져옵니다.</summary>
      <returns>현재 기호 저장소의 전역 범위에서 정의된 네임스페이스입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String)">
      <summary>특성 이름이 지정되면 특성 값을 가져옵니다.</summary>
      <param name="parent">특성이 요청된 개체의 메타데이터 토큰입니다.</param>
      <param name="name">특성 이름입니다.</param>
      <returns>특성 값</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetVariables(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>부모가 지정되면 지역 변수가 아닌 변수를 가져옵니다.</summary>
      <param name="parent">변수가 요청된 형식의 메타데이터 토큰입니다.</param>
      <returns>부모 변수의 배열입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolReader.UserEntryPoint">
      <summary>모듈의 사용자 진입점으로 지정된 메서드의 메타데이터 토큰을 가져옵니다.</summary>
      <returns>모듈의 사용자 진입점인 메서드의 메타데이터 토큰입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolScope">
      <summary>
        <see cref="T:System.Diagnostics.SymbolStore.ISymbolMethod" />에 들어 있는 어휘 범위를 나타내며, 부모 및 자식 범위는 물론 범위의 시작 및 종료 오프셋에 액세스할 수 있습니다.</summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.EndOffset">
      <summary>현재 어휘 범위의 종료 오프셋을 가져옵니다.</summary>
      <returns>현재 어휘 범위의 종료 오프셋입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetChildren">
      <summary>현재 어휘 범위의 자식 어휘 범위를 가져옵니다.</summary>
      <returns>현재 어휘 범위의 자식 어휘 범위입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetLocals">
      <summary>현재 어휘 범위의 지역 변수를 가져옵니다.</summary>
      <returns>현재 어휘 범위의 지역 변수입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetNamespaces">
      <summary>현재 범위에서 사용된 네임스페이스를 가져옵니다.</summary>
      <returns>현재 범위에서 사용된 네임스페이스입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Method">
      <summary>현재 어휘 범위를 포함하는 메서드를 가져옵니다.</summary>
      <returns>현재 어휘 범위를 포함하는 메서드입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Parent">
      <summary>현재 범위의 부모 어휘 범위를 가져옵니다.</summary>
      <returns>현재 범위의 부모 어휘 범위입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.StartOffset">
      <summary>현재 어휘 범위의 시작 오프셋을 가져옵니다.</summary>
      <returns>현재 어휘 범위의 시작 오프셋입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolVariable">
      <summary>기호 저장소 내의 변수를 나타냅니다.</summary>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField1">
      <summary>변수의 첫 번째 주소를 가져옵니다.</summary>
      <returns>변수의 첫 번째 주소입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField2">
      <summary>변수의 두 번째 주소를 가져옵니다.</summary>
      <returns>변수의 두 번째 주소입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField3">
      <summary>변수의 세 번째 주소를 가져옵니다.</summary>
      <returns>변수의 세 번째 주소입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressKind">
      <summary>주소의 형식을 설명하는 <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" /> 값을 가져옵니다.</summary>
      <returns>주소의 형식입니다. <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Attributes">
      <summary>변수의 특성을 가져옵니다.</summary>
      <returns>변수 특성입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.EndOffset">
      <summary>변수 범위 내의 변수의 끝 오프셋을 가져옵니다.</summary>
      <returns>변수의 끝 오프셋입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolVariable.GetSignature">
      <summary>변수 시그니처를 가져옵니다.</summary>
      <returns>불투명 BLOB로서의 변수 시그니처입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Name">
      <summary>변수의 이름을 가져옵니다.</summary>
      <returns>변수 이름입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.StartOffset">
      <summary>변수 범위 내의 변수의 시작 오프셋을 가져옵니다.</summary>
      <returns>변수의 시작 오프셋입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolWriter">
      <summary>관리 코드의 기호 작성기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Close">
      <summary>
        <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" />를 닫고 기호를 기호 저장소에 커밋합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod">
      <summary>현재 메서드를 닫습니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseNamespace">
      <summary>최근의 네임스페이스를 닫습니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)">
      <summary>현재 어휘 범위를 닫습니다.</summary>
      <param name="endOffset">범위 내의 마지막 명령을 벗어난 지점입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>소스 문서를 정의합니다.</summary>
      <param name="url">문서를 식별하는 URL입니다.</param>
      <param name="language">문서 언어입니다. 이 매개 변수는 <see cref="F:System.Guid.Empty" />일 수 있습니다.</param>
      <param name="languageVendor">문서 언어의 공급업체 ID입니다. 이 매개 변수는 <see cref="F:System.Guid.Empty" />일 수 있습니다.</param>
      <param name="documentType">문서의 형식입니다. 이 매개 변수는 <see cref="F:System.Guid.Empty" />일 수 있습니다.</param>
      <returns>문서를 나타내는 개체입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary>형식의 필드나 전역 필드를 정의합니다.</summary>
      <param name="parent">메타데이터 형식 또는 메서드 토큰입니다.</param>
      <param name="name">필드 이름입니다.</param>
      <param name="attributes">필드 특성의 비트 조합입니다.</param>
      <param name="signature">필드 시그니처입니다.</param>
      <param name="addrKind">
        <paramref name="addr1" /> 및 <paramref name="addr2" />의 주소 형식입니다.</param>
      <param name="addr1">필드 사양의 첫 번째 주소입니다.</param>
      <param name="addr2">필드 사양의 두 번째 주소입니다.</param>
      <param name="addr3">필드 사양의 세 번째 주소입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary>단일 전역 변수를 정의합니다.</summary>
      <param name="name">전역 변수 이름입니다.</param>
      <param name="attributes">전역 변수 특성의 비트 조합입니다.</param>
      <param name="signature">전역 변수 시그니처입니다.</param>
      <param name="addrKind">
        <paramref name="addr1" />, <paramref name="addr2" /> 및 <paramref name="addr3" />의 주소 형식입니다.</param>
      <param name="addr1">전역 변수 사양의 첫 번째 주소입니다.</param>
      <param name="addr2">전역 변수 사양의 두 번째 주소입니다.</param>
      <param name="addr3">전역 변수 사양의 세 번째 주소입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>현재 어휘 범위에 단일 변수를 정의합니다.</summary>
      <param name="name">지역 변수 이름입니다.</param>
      <param name="attributes">지역 변수 특성의 비트 조합입니다.</param>
      <param name="signature">지역 변수 시그니처입니다.</param>
      <param name="addrKind">
        <paramref name="addr1" />, <paramref name="addr2" /> 및 <paramref name="addr3" />의 주소 형식입니다.</param>
      <param name="addr1">지역 변수 사양의 첫 번째 주소입니다.</param>
      <param name="addr2">지역 변수 사양의 두 번째 주소입니다.</param>
      <param name="addr3">지역 변수 사양의 세 번째 주소입니다.</param>
      <param name="startOffset">변수의 시작 오프셋입니다. 이 매개 변수가 0이면 매개 변수가 무시되고 변수가 전체 범위에 걸쳐 정의됩니다. 0이 아닌 경우에는 변수가 현재 범위의 오프셋에 포함됩니다.</param>
      <param name="endOffset">변수의 끝 오프셋입니다. 이 매개 변수가 0이면 매개 변수가 무시되고 변수가 전체 범위에 걸쳐 정의됩니다. 0이 아닌 경우에는 변수가 현재 범위의 오프셋에 포함됩니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary>현재 메서드의 단일 매개 변수를 정의합니다. 메서드 시그니처 내의 위치에서 각 매개 변수의 형식을 가져옵니다.</summary>
      <param name="name">매개 변수 이름입니다.</param>
      <param name="attributes">매개 변수 특성의 비트 조합입니다.</param>
      <param name="sequence">매개 변수 시그니처입니다.</param>
      <param name="addrKind">
        <paramref name="addr1" />, <paramref name="addr2" /> 및 <paramref name="addr3" />의 주소 형식입니다.</param>
      <param name="addr1">매개 변수 사양의 첫 번째 주소입니다.</param>
      <param name="addr2">매개 변수 사양의 두 번째 주소입니다.</param>
      <param name="addr3">매개 변수 사양의 세 번째 주소입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary>현재 메서드 내에서 시퀀스 위치 그룹을 정의합니다.</summary>
      <param name="document">시퀀스 위치를 정의할 문서 개체입니다.</param>
      <param name="offsets">메서드의 시작 부분에서 측정된 시퀀스 위치 오프셋입니다.</param>
      <param name="lines">시퀀스 위치의 문서 줄입니다.</param>
      <param name="columns">시퀀스 위치의 문서 위치입니다.</param>
      <param name="endLines">시퀀스 위치의 문서 끝 줄입니다.</param>
      <param name="endColumns">시퀀스 위치의 문서 끝 위치입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
      <summary>작성기와 연결할 메타데이터 생성기 인터페이스를 설정합니다.</summary>
      <param name="emitter">메타데이터 내보내기 인터페이스입니다.</param>
      <param name="filename">디버깅 기호가 쓰여진 파일 이름입니다. 일부 작성기에는 파일 이름이 필요하지만 다른 작성기에는 그렇지 않습니다. 파일 이름을 사용하지 않는 작성기에 대해 파일 이름이 지정되면 이 매개 변수는 무시됩니다.</param>
      <param name="fFullBuild">
        <see langword="true" />는 전체 다시 빌드를, <see langword="false" />는 증분 컴파일을 나타냅니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>기호 정보를 배치할 메서드를 엽니다.</summary>
      <param name="method">열릴 메서드의 메타데이터 토큰입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)">
      <summary>새 네임스페이스를 엽니다.</summary>
      <param name="name">새 네임스페이스의 이름입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
      <summary>현재 메서드에서 새 어휘 범위를 엽니다.</summary>
      <param name="startOffset">메서드의 시작 부분과 어휘 범위의 첫 번째 명령 사이의 오프셋(바이트 단위)입니다.</param>
      <returns>
        <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)" />와 함께 사용하여 차후에 범위의 시작과 끝 오프셋을 정의하는 불투명한 범위 식별자입니다. 이 경우 <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)" /> 및 <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)" />에 전달된 오프셋은 무시됩니다. 범위 식별자는 현재 메서드에서만 유효합니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
      <summary>소스 파일 내에서 메서드의 실제 시작과 끝을 지정합니다. <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)" />를 사용하여 메서드의 범위와 메서드 내에 있는 독립적인 시퀀스 위치를 지정합니다.</summary>
      <param name="startDoc">시작 위치가 들어 있는 문서입니다.</param>
      <param name="startLine">시작 줄 번호입니다.</param>
      <param name="startColumn">시작 열입니다.</param>
      <param name="endDoc">끝 위치가 들어 있는 문서입니다.</param>
      <param name="endLine">끝 줄 번호입니다.</param>
      <param name="endColumn">끝 열 번호입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)">
      <summary>지정된 어휘 범위에 대한 오프셋 범위를 정의합니다.</summary>
      <param name="scopeID">어휘 범위의 식별자입니다.</param>
      <param name="startOffset">어휘 범위 시작 부분의 바이트 오프셋입니다.</param>
      <param name="endOffset">어휘 범위 끝 부분의 바이트 오프셋입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
      <summary>특성 이름 및 특성 값이 주어지면 특성을 정의합니다.</summary>
      <param name="parent">특성이 정의되는 메타데이터 토큰입니다.</param>
      <param name="name">특성 이름입니다.</param>
      <param name="data">특성 값입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)">
      <summary>관리되는 <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" />가 기호를 내보내는 데 사용하는 내부 <see langword="ISymUnmanagedWriter" />(관리되지 않는 해당 인터페이스)를 설정합니다.</summary>
      <param name="underlyingWriter">내부 작성기를 나타내는 코드에 대한 포인터입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>사용자 정의 메서드를 현재 모듈의 진입점으로 식별합니다.</summary>
      <param name="entryMethod">사용자 엔트리 지점인 메서드의 메타데이터 토큰입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)">
      <summary>지정된 정규화된 네임스페이스 이름이 열린 어휘 범위 내에서 사용되도록 지정합니다.</summary>
      <param name="fullName">네임스페이스의 정규화된 이름입니다.</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymAddressKind">
      <summary>
        <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /> 인터페이스의 <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" />, <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" /> 및 <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> 메서드에서 지역 변수, 매개 변수 및 필드의 주소 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.BitField">
      <summary>비트 필드입니다. <paramref name="addr1" /> 매개 변수는 필드가 시작하는 위치이고 <paramref name="addr2" /> 매개 변수는 필드 길이입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.ILOffset">
      <summary>MSIL(Microsoft intermediate language) 오프셋입니다. <paramref name="addr1" /> 매개 변수는 MSIL 지역 변수나 매개 변수 인덱스입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeOffset">
      <summary>네이티브 오프셋입니다. <paramref name="addr1" /> 매개 변수는 부모의 시작 부분에서의 오프셋입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegister">
      <summary>네이티브 레지스터 주소입니다. <paramref name="addr1" /> 매개 변수는 변수가 저장되는 레지스터입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRegister">
      <summary>레지스터 상대 주소입니다. <paramref name="addr1" /> 매개 변수는 하위 레지스터이고 <paramref name="addr2" /> 매개 변수는 상위 레지스터입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRelative">
      <summary>레지스터 상대 주소입니다. <paramref name="addr1" /> 매개 변수는 레지스터이고 <paramref name="addr2" /> 매개 변수는 오프셋입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterStack">
      <summary>레지스터 상대 주소입니다. <paramref name="addr1" /> 매개 변수는 하위 레지스터이고 <paramref name="addr2" /> 매개 변수는 스택 레지스터이며 <paramref name="addr3" /> 매개 변수는 스택 포인터에서 값의 상위 부분까지의 오프셋입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRVA">
      <summary>네이티브 RVA(Relevant Virtual Address)입니다. <paramref name="addr1" /> 매개 변수는 모듈의 RVA입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeSectionOffset">
      <summary>네이티브 섹션 오프셋입니다. <paramref name="addr1" /> 매개 변수는 섹션이고 <paramref name="addr2" /> 매개 변수는 오프셋입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeStackRegister">
      <summary>레지스터 상대 주소입니다. <paramref name="addr1" /> 매개 변수는 스택 레지스터이고 <paramref name="addr2" /> 매개 변수는 스택 포인터에서 값의 하위 부분까지의 오프셋이며 <paramref name="addr3" /> 매개 변수는 상위 레지스터입니다.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymbolToken">
      <summary>
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 구조체는 기호화된 정보를 나타내는 토큰이 개체로 표현된 것입니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.#ctor(System.Int32)">
      <summary>값을 지정할 때 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="val">토큰에 사용될 값입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>
        <paramref name="obj" />가 이 인스턴스와 같은지 확인합니다.</summary>
      <param name="obj">확인할 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />입니다.</param>
      <returns>
        <see langword="true" />가 이 인스턴스와 같으면 <paramref name="obj" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Object)">
      <summary>
        <paramref name="obj" />가 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />의 인스턴스이며 해당 인스턴스와 같은지 여부를 확인합니다.</summary>
      <param name="obj">검사할 개체입니다.</param>
      <returns>
        <paramref name="obj" />가 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />의 인스턴스이고 해당 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetHashCode">
      <summary>현재 토큰의 해시 코드를 생성합니다.</summary>
      <returns>현재 토큰의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetToken">
      <summary>현재 토큰의 값을 가져옵니다.</summary>
      <returns>현재 토큰의 값입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Equality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>두 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 개체가 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="a">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 구조체입니다.</param>
      <param name="b">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 구조체입니다.</param>
      <returns>
        <paramref name="a" />과 <paramref name="b" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Inequality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>두 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 개체가 다른지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="a">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 구조체입니다.</param>
      <param name="b">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 구조체입니다.</param>
      <returns>
        <paramref name="a" />과 <paramref name="b" />가 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymDocumentType">
      <summary>기호 저장소와 함께 사용될 문서 형식의 공용 GUID를 보유합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymDocumentType.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.SymbolStore.SymDocumentType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymDocumentType.Text">
      <summary>기호 저장소와 함께 사용될 문서 형식의 GUID를 지정합니다.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageType">
      <summary>기호 저장소와 함께 사용될 언어 형식의 공용 GUID를 보유합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageType.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.SymbolStore.SymLanguageType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Basic">
      <summary>기호 저장소와 함께 사용될 Basic 언어 형식의 GUID를 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.C">
      <summary>기호 저장소와 함께 사용될 C 언어 형식의 GUID를 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Cobol">
      <summary>기호 저장소와 함께 사용될 Cobol 언어 형식의 GUID를 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CPlusPlus">
      <summary>기호 저장소와 함께 사용될 C++ 언어 형식의 GUID를 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CSharp">
      <summary>기호 저장소와 함께 사용될 C# 언어 형식의 GUID를 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.ILAssembly">
      <summary>기호 저장소와 함께 사용될 ILAssembly 언어 형식의 GUID를 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Java">
      <summary>기호 저장소와 함께 사용될 Java 언어 형식의 GUID를 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.JScript">
      <summary>기호 저장소와 함께 사용될 JScript 언어 형식의 GUID를 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.MCPlusPlus">
      <summary>기호 저장소와 함께 사용될 C++ 언어 형식의 GUID를 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Pascal">
      <summary>기호 저장소와 함께 사용될 Pascal 언어 형식의 GUID를 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.SMC">
      <summary>기호 저장소와 함께 사용될 SMC 언어 형식의 GUID를 지정합니다.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageVendor">
      <summary>기호 저장소와 함께 사용될 언어 공급업체의 공용 GUID를 보유합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageVendor.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.SymbolStore.SymLanguageVendor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageVendor.Microsoft">
      <summary>Microsoft 언어 공급업체의 GUID를 지정합니다.</summary>
    </member>
  </members>
</doc>
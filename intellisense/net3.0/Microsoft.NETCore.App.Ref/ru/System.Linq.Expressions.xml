<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Linq.Expressions</name>
  </assembly>
  <members>
    <member name="T:System.Dynamic.BinaryOperationBinder">
      <summary>Представляет бинарную динамическую операцию в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.BinaryOperationBinder" />.</summary>
      <param name="operation">Вид бинарной операции.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической бинарной операции.</summary>
      <param name="target">Целевой объект динамической операции.</param>
      <param name="args">Массив аргументов динамической операции.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку бинарной динамической операции, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической бинарной операции.</param>
      <param name="arg">Правый операнд динамической бинарной операции.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической бинарной операции, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической бинарной операции.</param>
      <param name="arg">Правый операнд динамической бинарной операции.</param>
      <param name="errorSuggestion">Результат привязки в случае ее неудачного завершения или значение NULL.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.Operation">
      <summary>Вид бинарной операции.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, который предоставляет вид бинарной операции.</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.BindingRestrictions">
      <summary>Представляет набор ограничений привязки в <see cref="T:System.Dynamic.DynamicMetaObject" />, при соблюдении которых динамическая привязка является допустимой.</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
      <summary>Объединяет ограничения привязки из списка экземпляров <see cref="T:System.Dynamic.DynamicMetaObject" /> в один набор ограничений.</summary>
      <param name="contributingObjects">Список экземпляров <see cref="T:System.Dynamic.DynamicMetaObject" />, ограничения которых объединяются в общий набор.</param>
      <returns>Новый набор ограничений привязки.</returns>
    </member>
    <member name="F:System.Dynamic.BindingRestrictions.Empty">
      <summary>Представляет пустой набор ограничений привязки. Это поле доступно только для чтения.</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)">
      <summary>Создает ограничение привязки, которое проверяет выражение на наличие неизменяемых свойств.</summary>
      <param name="expression">Выражение, представляющее ограничения.</param>
      <returns>Новые ограничения привязки.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)">
      <summary>Создает ограничение привязки, которое проверяет удостоверения экземпляров объектов в выражении.</summary>
      <param name="expression">Выражение для проверки.</param>
      <param name="instance">Точный экземпляр объекта для проверки.</param>
      <returns>Новые ограничения привязки.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает ограничение привязки, которое проверяет удостоверение типа среды выполнения в выражении.</summary>
      <param name="expression">Выражение для проверки.</param>
      <param name="type">Точный тип для проверки.</param>
      <returns>Новые ограничения привязки.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)">
      <summary>Объединяет набор ограничений привязки с текущими ограничениями привязки.</summary>
      <param name="restrictions">Набор ограничений привязки, объединяемый с текущими ограничениями привязки.</param>
      <returns>Новый набор ограничений привязки.</returns>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.ToExpression">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий ограничения привязки.</summary>
      <returns>Дерево выражения, представляющее ограничения.</returns>
    </member>
    <member name="T:System.Dynamic.CallInfo">
      <summary>Описывает аргументы в процессе динамической привязки.</summary>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Создает новый объект CallInfo, представляющий аргументы в процессе динамической привязки.</summary>
      <param name="argCount">Число аргументов.</param>
      <param name="argNames">Имена аргументов.</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])">
      <summary>Создает новый экземпляр <c>PositionalArgumentInfo</c>.</summary>
      <param name="argCount">Число аргументов.</param>
      <param name="argNames">Имена аргументов.</param>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentCount">
      <summary>Число аргументов.</summary>
      <returns>Число аргументов.</returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentNames">
      <summary>Имена аргументов.</summary>
      <returns>Доступная только для чтения коллекция имен аргументов.</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.Equals(System.Object)">
      <summary>Определяет, равен ли указанный экземпляр CallInfo текущему экземпляру.</summary>
      <param name="obj">Экземпляр <see cref="T:System.Dynamic.CallInfo" />, сравниваемый с текущим экземпляром.</param>
      <returns>Значение true, если указанный экземпляр равен текущему экземпляру; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.GetHashCode">
      <summary>Служит хэш-функцией текущего экземпляра <see cref="T:System.Dynamic.CallInfo" />.</summary>
      <returns>Хэш-код для текущего объекта <see cref="T:System.Dynamic.CallInfo" />.</returns>
    </member>
    <member name="T:System.Dynamic.ConvertBinder">
      <summary>Представляет динамическую операцию преобразования в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.#ctor(System.Type,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.ConvertBinder" />.</summary>
      <param name="type">Целевой тип преобразования.</param>
      <param name="explicit">Значение true, если преобразование должно быть явным; в противном случае — значение false.</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции преобразования.</summary>
      <param name="target">Целевой объект динамической операции преобразования.</param>
      <param name="args">Массив аргументов динамической операции преобразования.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Explicit">
      <summary>Получает значение, указывающее, должно ли преобразование быть явным.</summary>
      <returns>
        <see langword="true" />При явном преобразовании; в противном случае —. <see langword="false" /></returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции преобразования, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической операции преобразования.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции преобразования, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической операции преобразования.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Type">
      <summary>Целевой тип преобразования.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип, в который выполняется преобразование.</returns>
    </member>
    <member name="T:System.Dynamic.CreateInstanceBinder">
      <summary>Представляет динамическую операцию создания в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.CreateInstanceBinder" />.</summary>
      <param name="callInfo">Сигнатура аргументов на сайте вызова.</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции создания.</summary>
      <param name="target">Целевой объект динамической операции создания.</param>
      <param name="args">Массив аргументов динамической операции создания.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.CallInfo">
      <summary>Получает сигнатуру аргументов на сайте вызова.</summary>
      <returns>Сигнатура аргументов на сайте вызова.</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции создания, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической операции создания.</param>
      <param name="args">Аргументы динамической операции создания.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции создания, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической операции создания.</param>
      <param name="args">Аргументы динамической операции создания.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteIndexBinder">
      <summary>Представляет динамическую операцию удаления индекса в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.DeleteIndexBinder" />.</summary>
      <param name="callInfo">Сигнатура аргументов на сайте вызова.</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции удаления индекса.</summary>
      <param name="target">Целевой объект динамической операции удаления индекса.</param>
      <param name="args">Массив аргументов динамической операции удаления индекса.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.CallInfo">
      <summary>Получает сигнатуру аргументов на сайте вызова.</summary>
      <returns>Сигнатура аргументов на сайте вызова.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции удаления индекса, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической операции удаления индекса.</param>
      <param name="indexes">Аргументы динамической операции удаления индекса.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции удаления индекса, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической операции удаления индекса.</param>
      <param name="indexes">Аргументы динамической операции удаления индекса.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteMemberBinder">
      <summary>Представляет динамическую операцию удаления члена в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.DeleteIndexBinder" />.</summary>
      <param name="name">Имя члена, который требуется удалить.</param>
      <param name="ignoreCase">Значение true, если имя должно сравниваться без учета регистра; в противном случае — значение false.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции удаления члена.</summary>
      <param name="target">Целевой объект динамической операции удаления члена.</param>
      <param name="args">Массив аргументов динамической операции удаления члена.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции удаления члена, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической операции удаления члена.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции удаления члена, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической операции удаления члена.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.IgnoreCase">
      <summary>Получает значение, указывающее, следует ли игнорировать регистр имен членов при сравнении строк.</summary>
      <returns>
        <see langword="true" />значение, если сравнение строк должно игнорировать регистр. в противном случае —. <see langword="false" /></returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.Name">
      <summary>Получает имя члена, который требуется удалить.</summary>
      <returns>Имя члена, который требуется удалить.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObject">
      <summary>Представляет динамическую привязку и логику привязки объекта, участвующего в динамической привязке.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
      <param name="expression">Выражение, представляющее данный объект <see cref="T:System.Dynamic.DynamicMetaObject" /> в процессе динамической привязки.</param>
      <param name="restrictions">Набор ограничений привязки, при соблюдении которых привязка является допустимой.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
      <param name="expression">Выражение, представляющее данный объект <see cref="T:System.Dynamic.DynamicMetaObject" /> в процессе динамической привязки.</param>
      <param name="restrictions">Набор ограничений привязки, при соблюдении которых привязка является допустимой.</param>
      <param name="value">Значение среды выполнения, представленное объектом <see cref="T:System.Dynamic.DynamicMetaObject" />.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической бинарной операции.</summary>
      <param name="binder">Экземпляр класса <see cref="T:System.Dynamic.BinaryOperationBinder" />, который представляет сведения о динамической операции.</param>
      <param name="arg">Экземпляр класса <see cref="T:System.Dynamic.DynamicMetaObject" />, который представляет правый операнд бинарной операции.</param>
      <returns>Новый объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
      <summary>Выполняет привязку динамической операции преобразования.</summary>
      <param name="binder">Экземпляр класса <see cref="T:System.Dynamic.ConvertBinder" />, который представляет сведения о динамической операции.</param>
      <returns>Новый объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции создания экземпляра.</summary>
      <param name="binder">Экземпляр класса <see cref="T:System.Dynamic.CreateInstanceBinder" />, который представляет сведения о динамической операции.</param>
      <param name="args">Массив экземпляров <see cref="T:System.Dynamic.DynamicMetaObject" />, которые являются аргументами операции создания экземпляра.</param>
      <returns>Новый объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции удаления индекса.</summary>
      <param name="binder">Экземпляр класса <see cref="T:System.Dynamic.DeleteIndexBinder" />, который представляет сведения о динамической операции.</param>
      <param name="indexes">Массив экземпляров <see cref="T:System.Dynamic.DynamicMetaObject" />, которые являются индексами для операции удаления индекса.</param>
      <returns>Новый объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>Выполняет привязку динамической операции удаления члена.</summary>
      <param name="binder">Экземпляр класса <see cref="T:System.Dynamic.DeleteMemberBinder" />, который представляет сведения о динамической операции.</param>
      <returns>Новый объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции получения индекса.</summary>
      <param name="binder">Экземпляр класса <see cref="T:System.Dynamic.GetIndexBinder" />, который представляет сведения о динамической операции.</param>
      <param name="indexes">Массив экземпляров <see cref="T:System.Dynamic.DynamicMetaObject" />, которые являются индексами для операции получения индекса.</param>
      <returns>Новый объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
      <summary>Выполняет привязку динамической операции получения члена.</summary>
      <param name="binder">Экземпляр класса <see cref="T:System.Dynamic.GetMemberBinder" />, который представляет сведения о динамической операции.</param>
      <returns>Новый объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции вызова.</summary>
      <param name="binder">Экземпляр класса <see cref="T:System.Dynamic.InvokeBinder" />, который представляет сведения о динамической операции.</param>
      <param name="args">Массив экземпляров <see cref="T:System.Dynamic.DynamicMetaObject" />, которые являются аргументами для операции вызова.</param>
      <returns>Новый объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции вызова члена.</summary>
      <param name="binder">Экземпляр класса <see cref="T:System.Dynamic.InvokeMemberBinder" />, который представляет сведения о динамической операции.</param>
      <param name="args">Массив экземпляров <see cref="T:System.Dynamic.DynamicMetaObject" />, которые являются аргументами для операции вызова члена.</param>
      <returns>Новый объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции задания индекса.</summary>
      <param name="binder">Экземпляр класса <see cref="T:System.Dynamic.SetIndexBinder" />, который представляет сведения о динамической операции.</param>
      <param name="indexes">Массив экземпляров <see cref="T:System.Dynamic.DynamicMetaObject" />, которые являются индексами для операции задания индекса.</param>
      <param name="value">Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий значение операции задания индекса.</param>
      <returns>Новый объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции задания члена.</summary>
      <param name="binder">Экземпляр класса <see cref="T:System.Dynamic.SetMemberBinder" />, который представляет сведения о динамической операции.</param>
      <param name="value">Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий значение операции задания члена.</param>
      <returns>Новый объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
      <summary>Выполняет привязку динамической унарной операции.</summary>
      <param name="binder">Экземпляр класса <see cref="T:System.Dynamic.UnaryOperationBinder" />, который представляет сведения о динамической операции.</param>
      <returns>Новый объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)">
      <summary>Создает метаобъект для указанного объекта.</summary>
      <param name="value">Объект, для которого создается метаобъект.</param>
      <param name="expression">Выражение, представляющее данный объект <see cref="T:System.Dynamic.DynamicMetaObject" /> в процессе динамической привязки.</param>
      <returns>Если заданный объект реализует интерфейс <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" /> и не является удаленным объектом из другого домена приложения, метод <see cref="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)" /> возвращает метаобъект, относящийся к конкретному объекту. В противном случае создается и возвращается новый обычный метаобъект без ограничений.</returns>
    </member>
    <member name="F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects">
      <summary>Представляет пустой массив типа <see cref="T:System.Dynamic.DynamicMetaObject" />. Это поле доступно только для чтения.</summary>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Expression">
      <summary>Выражение, представляющее объект <see cref="T:System.Dynamic.DynamicMetaObject" /> в процессе динамической привязки.</summary>
      <returns>Выражение, представляющее объект <see cref="T:System.Dynamic.DynamicMetaObject" /> в процессе динамической привязки.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames">
      <summary>Возвращает перечисление имен всех динамических членов.</summary>
      <returns>Список имен динамических членов.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.HasValue">
      <summary>Получает значение, показывающее, имеет ли объект <see cref="T:System.Dynamic.DynamicMetaObject" /> значение среды выполнения.</summary>
      <returns>
        <see langword="true" />, если <see langword="false" />имеет значение времени выполнения; в противном случае —. <see cref="T:System.Dynamic.DynamicMetaObject" /></returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.LimitType">
      <summary>Получает тип ограничения <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
      <returns>Значение <see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType" />, если значение среды выполнения доступно; в противном случае — тип свойства <see cref="P:System.Dynamic.DynamicMetaObject.Expression" />.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Restrictions">
      <summary>Набор ограничений привязки, при соблюдении которых привязка является допустимой.</summary>
      <returns>Набор ограничений привязки.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.RuntimeType">
      <summary>Получает объект <see cref="T:System.Type" /> значения среды выполнения или NULL, если с объектом <see cref="T:System.Dynamic.DynamicMetaObject" /> не связано никакое значение.</summary>
      <returns>Объект <see cref="T:System.Type" /> значения среды выполнения или NULL.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Value">
      <summary>Значение среды выполнения, представленное объектом <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
      <returns>Значение среды выполнения, представленное объектом <see cref="T:System.Dynamic.DynamicMetaObject" />.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObjectBinder">
      <summary>Связыватель динамического источника вызова, участвующий в протоколе привязки <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.DynamicMetaObjectBinder" />.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>При переопределении в производном классе выполняет привязку динамической операции.</summary>
      <param name="target">Целевой объект динамической операции.</param>
      <param name="args">Массив аргументов динамической операции.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>Выполняет привязку динамической операции к набору аргументов в среде выполнения.</summary>
      <param name="args">Массив аргументов динамической операции.</param>
      <param name="parameters">Массив экземпляров класса <see cref="T:System.Linq.Expressions.ParameterExpression" />, представляющих параметры источника вызова в процессе привязки.</param>
      <param name="returnLabel">Элемент LabelTarget, возвращающий результат динамической привязки.</param>
      <returns>Выражение, проверяющее аргументы динамической операции и выполняющее эту операцию, если проверки пройдены успешно. Если проверки не пройдены при последующих выполнениях динамической операции, метод Bind вызывается еще раз, чтобы создать новый объект <see cref="T:System.Linq.Expressions.Expression" /> для новых типов аргументов.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Откладывает привязку операции до вычисления значений среды выполнения всех аргументов динамической операции.</summary>
      <param name="target">Целевой объект динамической операции.</param>
      <param name="args">Массив аргументов динамической операции.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])">
      <summary>Откладывает привязку операции до вычисления значений среды выполнения всех аргументов динамической операции.</summary>
      <param name="args">Массив аргументов динамической операции.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)">
      <summary>Получает выражение, которое вызовет обновление привязки. Она указывает, что привязка выражения более недействительна. Обычно используется в случае изменения "версии" динамического объекта.</summary>
      <param name="type">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> итогового выражения; допустим любой тип.</param>
      <returns>Выражение обновления.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObjectBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicObject">
      <summary>Предоставляет базовый класс для указания динамического поведения во время выполнения. Этот класс должен наследоваться; непосредственно создавать его экземпляры нельзя.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.#ctor">
      <summary>Позволяет производным типам инициализировать новый экземпляр типа <see cref="T:System.Dynamic.DynamicObject" />.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
      <summary>Возвращает перечисление имен всех динамических членов.</summary>
      <returns>Последовательность, содержащая имена динамических членов.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Предоставляет объект <see cref="T:System.Dynamic.DynamicMetaObject" />, вызывающий динамические виртуальные методы. Объект можно инкапсулировать в другой объект <see cref="T:System.Dynamic.DynamicMetaObject" />, чтобы обеспечить пользовательское поведение для отдельных действий. Данный метод поддерживает инфраструктуру среды DLR для разработчиков языков и не предназначен для непосредственного использования из кода.</summary>
      <param name="parameter">Выражение, представляющее объект <see cref="T:System.Dynamic.DynamicMetaObject" />, вызывающий динамические виртуальные методы.</param>
      <returns>Объект типа <see cref="T:System.Dynamic.DynamicMetaObject" />.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
      <summary>Предоставляет реализацию для двоичных операций. Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для таких операций, как сложение и умножение.</summary>
      <param name="binder">Предоставляет сведения о двоичной операции. Свойство <c>binder.Operation</c> возвращает объект <see cref="T:System.Linq.Expressions.ExpressionType" />. Например, для оператора <c>sum = аргумент1 + аргумент2</c>, в котором <c>аргумент1</c> и <c>аргумент2</c> являются производными от класса <see langword="DynamicObject" />, <c>binder.Operation</c> возвращает <c>ExpressionType.Add</c>.</param>
      <param name="arg">Правый операнд для двоичной операции. Например, для оператора <c>sum = аргумент1 + аргумент2</c>, в котором <c>аргумент1</c> и <c>аргумент2</c> являются производными от класса <see langword="DynamicObject" />, <paramref name="arg" /> равно <c>аргумент2</c>.</param>
      <param name="result">Результат двоичной операции.</param>
      <returns>Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />. Если данный метод возвращает значение <see langword="false" />, поведение определяется связывателем среды языка. (В большинстве случаев создается языковое исключение во время выполнения).</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary>Предоставляет реализацию для операций преобразования типа. Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для операций, преобразующих объект из одного типа в другой.</summary>
      <param name="binder">Предоставляет сведения об операции преобразования. Свойство <c>binder.Type</c> предоставляет тип, в который должен быть преобразован объект. Например, для оператора <c>(String)sampleObject</c> в C# (<c>CType(sampleObject, Type)</c> в Visual Basic), в котором <c>sampleObject</c> является экземпляром класса, производного от класса <see cref="T:System.Dynamic.DynamicObject" />, <c>binder.Type</c> возвращает тип <see cref="T:System.String" />. Свойство <c>binder.Explicit</c> предоставляет сведения о виде преобразования, который имеет место. Для явного преобразования возвращается значение <see langword="true" />, для неявного — значение <see langword="false" />.</param>
      <param name="result">Результат операции преобразования типа.</param>
      <returns>Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />. Если данный метод возвращает значение <see langword="false" />, поведение определяется связывателем среды языка. (В большинстве случаев создается языковое исключение во время выполнения).</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
      <summary>Предоставляет реализацию для операций, инициализирующих новый экземпляр динамического объекта. Этот метод не предназначен для использования в C# или Visual Basic.</summary>
      <param name="binder">Предоставляет сведения об операции инициализации.</param>
      <param name="args">Аргументы, переданные объекту во время инициализации. Например, для операции <c>new SampleType(100)</c>, в которой <c>SampleType</c> является типом, производным от класса <see cref="T:System.Dynamic.DynamicObject" />, <c>args[0]</c> равно 100.</param>
      <param name="result">Результат инициализации.</param>
      <returns>Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />. Если данный метод возвращает значение <see langword="false" />, поведение определяется связывателем среды языка. (В большинстве случаев создается языковое исключение во время выполнения).</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
      <summary>Предоставляет реализацию для операций, удаляющих объект по индексу. Этот метод не предназначен для использования в C# или Visual Basic.</summary>
      <param name="binder">Предоставляет сведения об удалении.</param>
      <param name="indexes">Удаляемые индексы.</param>
      <returns>Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />. Если данный метод возвращает значение <see langword="false" />, поведение определяется связывателем среды языка. (В большинстве случаев создается языковое исключение во время выполнения).</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>Предоставляет реализацию для операций, удаляющих элемент объекта. Этот метод не предназначен для использования в C# или Visual Basic.</summary>
      <param name="binder">Предоставляет сведения об удалении.</param>
      <returns>Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />. Если данный метод возвращает значение <see langword="false" />, поведение определяется связывателем среды языка. (В большинстве случаев создается языковое исключение во время выполнения).</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>Предоставляет реализацию для операций, получающих значение по индексу. Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для операций индексации.</summary>
      <param name="binder">Предоставляет сведения об операции.</param>
      <param name="indexes">Индексы, которые используются в операции. Например, для операции <c>sampleObject[3]</c> в C# (<c>sampleObject(3)</c> в Visual Basic), в которой <c>sampleObject</c> является производным от класса <see langword="DynamicObject" />, <c>indexes[0]</c> равно 3.</param>
      <param name="result">Результат операции индексации.</param>
      <returns>Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />. Если данный метод возвращает значение <see langword="false" />, поведение определяется связывателем среды языка. (В большинстве случаев создается исключение во время выполнения).</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>Предоставляет реализацию для операций, получающих значения членов. Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для таких операций, как получение значения свойства.</summary>
      <param name="binder">Предоставляет сведения об объекте, вызвавшем динамическую операцию. Свойство <c>binder.Name</c> предоставляет имя члена, с которым выполняется динамическая операция. Например, для оператора <c>Console.WriteLine(sampleObject.SampleProperty)</c>, в котором <c>sampleObject</c> является экземпляром класса, производного от класса <see cref="T:System.Dynamic.DynamicObject" />, <c>binder.Name</c> возвращает "SampleProperty". Свойство <c>binder.IgnoreCase</c> задает, учитывается ли регистр в имени члена.</param>
      <param name="result">Результат операции получения. Например, если для свойства вызывается метод, можно присвоить свойству значение <paramref name="result" />.</param>
      <returns>Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />. Если данный метод возвращает значение <see langword="false" />, поведение определяется связывателем среды языка. (В большинстве случаев создается исключение во время выполнения).</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
      <summary>Предоставляет реализацию для операций, вызывающих объект. Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для таких операций, как вызов объекта или делегата.</summary>
      <param name="binder">Предоставляет сведения об операции вызова.</param>
      <param name="args">Аргументы, переданные объекту во время операции вызова. Например, для операции <c>sampleObject(100)</c>, в которой <c>sampleObject</c> является производным от класса <see cref="T:System.Dynamic.DynamicObject" />, <c>args[0]</c> равно 100.</param>
      <param name="result">Результат вызова объекта.</param>
      <returns>Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />. Если данный метод возвращает значение <see langword="false" />, поведение определяется связывателем среды языка. (В большинстве случаев создается языковое исключение во время выполнения).</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>Предоставляет реализацию для операций, вызывающих член. Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для таких операций, как вызов метода.</summary>
      <param name="binder">Предоставляет сведения о динамической операции. Свойство <c>binder.Name</c> предоставляет имя члена, с которым выполняется динамическая операция. Например, для оператора <c>sampleObject.SampleMethod(100)</c>, в котором <c>sampleObject</c> является экземпляром класса, производного от класса <see cref="T:System.Dynamic.DynamicObject" />, <c>binder.Name</c> возвращает "SampleMethod". Свойство <c>binder.IgnoreCase</c> задает, учитывается ли регистр в имени члена.</param>
      <param name="args">Аргументы, переданные члену объекта во время операции вызова. Например, для оператора <c>sampleObject.SampleMethod(100)</c>, в котором <c>sampleObject</c> является производным от класса <see cref="T:System.Dynamic.DynamicObject" />, <c>args[0]</c> равно 100.</param>
      <param name="result">Результат вызова члена.</param>
      <returns>Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />. Если данный метод возвращает значение <see langword="false" />, поведение определяется связывателем среды языка. (В большинстве случаев создается языковое исключение во время выполнения).</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary>Предоставляет реализацию для операций, задающих значение по индексу. Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для операций, осуществляющих доступ к объектам по заданному индексу.</summary>
      <param name="binder">Предоставляет сведения об операции.</param>
      <param name="indexes">Индексы, которые используются в операции. Например, для операции <c>sampleObject[3] = 10</c> в C# (<c>sampleObject(3) = 10</c> в Visual Basic), в которой <c>sampleObject</c> является производным от класса <see cref="T:System.Dynamic.DynamicObject" />, <c>indexes[0]</c> равно 3.</param>
      <param name="value">Значение, которое необходимо задать для объекта с заданным индексом. Например, для операции <c>sampleObject[3] = 10</c> в C# (<c>sampleObject(3) = 10</c> в Visual Basic), в которой <c>sampleObject</c> является производным от класса <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="value" /> равно 10.</param>
      <returns>Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />. Если данный метод возвращает значение <see langword="false" />, поведение определяется связывателем среды языка. (В большинстве случаев создается языковое исключение во время выполнения).</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>Предоставляет реализацию для операций, задающих значения членов. Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для таких операций, как задание значения свойства.</summary>
      <param name="binder">Предоставляет сведения об объекте, вызвавшем динамическую операцию. Свойство <c>binder.Name</c> предоставляет имя члена, которому присваивается значение. Например, для оператора <c>sampleObject.SampleProperty = "Test"</c>, в котором <c>sampleObject</c> является экземпляром класса, производного от класса <see cref="T:System.Dynamic.DynamicObject" />, <c>binder.Name</c> возвращает "SampleProperty". Свойство <c>binder.IgnoreCase</c> задает, учитывается ли регистр в имени члена.</param>
      <param name="value">Значение, задаваемое для члена. Например, для оператора <c>sampleObject.SampleProperty = "Test"</c>, в котором <c>sampleObject</c> является экземпляром класса, производного от класса <see cref="T:System.Dynamic.DynamicObject" />, <paramref name="value" /> равно "Test".</param>
      <returns>Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />. Если данный метод возвращает значение <see langword="false" />, поведение определяется связывателем среды языка. (В большинстве случаев создается языковое исключение во время выполнения).</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
      <summary>Предоставляет реализацию для унарных операций. Классы, производные от класса <see cref="T:System.Dynamic.DynamicObject" />, могут переопределять этот метод, чтобы задать динамическое поведение для таких операций, как вычитание, увеличение или уменьшение.</summary>
      <param name="binder">Предоставляет сведения об унарной операции. Свойство <c>binder.Operation</c> возвращает объект <see cref="T:System.Linq.Expressions.ExpressionType" />. Например, для оператора <c>negativeNumber = -number</c>, в котором <c>number</c> является производным от класса <see langword="DynamicObject" />, <c>binder.Operation</c> возвращает "Negate".</param>
      <param name="result">Результат унарной операции.</param>
      <returns>Значение <see langword="true" />, если операция выполнена успешно; в противном случае — значение <see langword="false" />. Если данный метод возвращает значение <see langword="false" />, поведение определяется связывателем среды языка. (В большинстве случаев создается языковое исключение во время выполнения).</returns>
    </member>
    <member name="T:System.Dynamic.ExpandoObject">
      <summary>Представляет объект, члены которого можно динамически добавлять и удалять во время выполнения.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.#ctor">
      <summary>Инициализирует новый <see langword="ExpandoObject" />, не содержащий членов.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который может использоваться для итерации элементов коллекции.</returns>
    </member>
    <member name="E:System.Dynamic.ExpandoObject.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Возникает при смене значения свойства.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Предоставленный объект MetaObject будет вызывать динамические виртуальные методы. Объект можно инкапсулировать внутри другого объекта MetaObject, чтобы обеспечить пользовательское поведение для отдельных действий.</summary>
      <param name="parameter">Выражение, представляющее объект MetaObject, который будет вызывать динамические виртуальные методы.</param>
      <returns>Объект типа <see cref="T:System.Dynamic.DynamicMetaObject" />.</returns>
    </member>
    <member name="T:System.Dynamic.GetIndexBinder">
      <summary>Представляет динамическую операцию получения индекса в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.GetIndexBinder" />.</summary>
      <param name="callInfo">Сигнатура аргументов на сайте вызова.</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции получения индекса.</summary>
      <param name="target">Целевой объект динамической операции получения индекса.</param>
      <param name="args">Массив аргументов динамической операции получения индекса.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.CallInfo">
      <summary>Получает сигнатуру аргументов на сайте вызова.</summary>
      <returns>Сигнатура аргументов на сайте вызова.</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции получения индекса, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической операции получения индекса.</param>
      <param name="indexes">Аргументы динамической операции получения индекса.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции получения индекса, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической операции получения индекса.</param>
      <param name="indexes">Аргументы динамической операции получения индекса.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.GetMemberBinder">
      <summary>Представляет динамическую операцию получения члена в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.GetMemberBinder" />.</summary>
      <param name="name">Имя члена, который необходимо получить.</param>
      <param name="ignoreCase">Значение true, если имя должно сравниваться без учета регистра; в противном случае — значение false.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции получения члена.</summary>
      <param name="target">Целевой объект динамической операции получения члена.</param>
      <param name="args">Массив аргументов динамической операции получения члена.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции получения члена, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической операции получения члена.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции получения члена, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической операции получения члена.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.IgnoreCase">
      <summary>Получает значение, указывающее, следует ли игнорировать регистр имен членов при сравнении строк.</summary>
      <returns>
        <see langword="true" />значение, если регистр игнорируется; в противном случае —. <see langword="false" /></returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.Name">
      <summary>Получает имя члена, который требуется получить.</summary>
      <returns>Имя члена, который необходимо получить.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.IDynamicMetaObjectProvider">
      <summary>Представляет динамический объект, операции которого могут привязываться во время выполнения.</summary>
    </member>
    <member name="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Возвращает объект <see cref="T:System.Dynamic.DynamicMetaObject" />, который предназначен для операций привязки, выполняемых с данным объектом.</summary>
      <param name="parameter">Представление дерева выражений значения среды выполнения.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, привязываемый к данному объекту.</returns>
    </member>
    <member name="T:System.Dynamic.IInvokeOnGetBinder">
      <summary>Представляет сведения о динамической операции получения члена, указывающие, должен ли метод получения члена вызывать свойства при выполнении операции получения.</summary>
    </member>
    <member name="P:System.Dynamic.IInvokeOnGetBinder.InvokeOnGet">
      <summary>Получает значение, указывающее, должна ли данная операция получения члена вызывать свойства при выполнении операции получения. Значение по умолчанию при отсутствии данного интерфейса — true.</summary>
      <returns>
        <see langword="true" />Если операция получения члена должна вызывать свойства при выполнении операции Get; в противном случае —. <see langword="false" /></returns>
    </member>
    <member name="T:System.Dynamic.InvokeBinder">
      <summary>Представляет динамическую операцию вызова в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.InvokeBinder" />.</summary>
      <param name="callInfo">Сигнатура аргументов на сайте вызова.</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции вызова.</summary>
      <param name="target">Целевой объект динамической операции вызова.</param>
      <param name="args">Массив аргументов динамической операции вызова.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.CallInfo">
      <summary>Получает сигнатуру аргументов на сайте вызова.</summary>
      <returns>Сигнатура аргументов на сайте вызова.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции вызова, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической операции вызова.</param>
      <param name="args">Аргументы динамической операции вызова.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции вызова, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической операции вызова.</param>
      <param name="args">Аргументы динамической операции вызова.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.InvokeMemberBinder">
      <summary>Представляет динамическую операцию вызова члена в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.#ctor(System.String,System.Boolean,System.Dynamic.CallInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.InvokeMemberBinder" />.</summary>
      <param name="name">Имя вызываемого члена.</param>
      <param name="ignoreCase">Значение true, если имя должно сравниваться без учета регистра; в противном случае — значение false.</param>
      <param name="callInfo">Сигнатура аргументов на сайте вызова.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции вызова члена.</summary>
      <param name="target">Целевой объект динамической операции вызова члена.</param>
      <param name="args">Массив аргументов динамической операции вызова члена.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.CallInfo">
      <summary>Получает сигнатуру аргументов на сайте вызова.</summary>
      <returns>Сигнатура аргументов на сайте вызова.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции вызова, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической операции вызова.</param>
      <param name="args">Аргументы динамической операции вызова.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции вызова члена, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической операции вызова члена.</param>
      <param name="args">Аргументы динамической операции вызова члена.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции вызова члена, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической операции вызова члена.</param>
      <param name="args">Аргументы динамической операции вызова члена.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.IgnoreCase">
      <summary>Получает значение, указывающее, следует ли игнорировать регистр имен членов при сравнении строк.</summary>
      <returns>
        <see langword="true" />значение, если регистр игнорируется; в противном случае —. <see langword="false" /></returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.Name">
      <summary>Получает имя члена, который требуется вызвать.</summary>
      <returns>Имя вызываемого члена.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.SetIndexBinder">
      <summary>Представляет динамическую операцию задания индекса в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.SetIndexBinder" />.</summary>
      <param name="callInfo">Сигнатура аргументов на сайте вызова.</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции задания индекса.</summary>
      <param name="target">Целевой объект динамической операции задания индекса.</param>
      <param name="args">Массив аргументов динамической операции задания индекса.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.CallInfo">
      <summary>Получает сигнатуру аргументов на сайте вызова.</summary>
      <returns>Сигнатура аргументов на сайте вызова.</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции задания индекса, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической операции задания индекса.</param>
      <param name="indexes">Аргументы динамической операции задания индекса.</param>
      <param name="value">Значение, задаваемое для коллекции.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>При переопределении в производном классе выполняет привязку динамической операции задания индекса, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической операции задания индекса.</param>
      <param name="indexes">Аргументы динамической операции задания индекса.</param>
      <param name="value">Значение, задаваемое для коллекции.</param>
      <param name="errorSuggestion">Результат привязки, который необходимо использовать в случае ее неудачного завершения, или значение NULL.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.SetMemberBinder">
      <summary>Представляет динамическую операцию установки члена в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.SetMemberBinder" />.</summary>
      <param name="name">Имя члена, который необходимо получить.</param>
      <param name="ignoreCase">Значение true, если имя должно сравниваться без учета регистра; в противном случае — значение false.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической операции задания члена.</summary>
      <param name="target">Целевой объект динамической операции задания члена.</param>
      <param name="args">Массив аргументов динамической операции задания члена.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции задания члена, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической операции задания члена.</param>
      <param name="value">Значение, задаваемое для члена.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку динамической операции задания члена, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической операции задания члена.</param>
      <param name="value">Значение, задаваемое для члена.</param>
      <param name="errorSuggestion">Результат привязки для использования при сбое привязки или значение NULL.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.IgnoreCase">
      <summary>Получает значение, указывающее, следует ли игнорировать регистр имен членов при сравнении строк.</summary>
      <returns>
        <see langword="true" />значение, если регистр игнорируется; в противном случае —. <see langword="false" /></returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.Name">
      <summary>Получает имя члена, который требуется получить.</summary>
      <returns>Имя члена, который необходимо получить.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Dynamic.UnaryOperationBinder">
      <summary>Представляет унарную динамическую операцию в источнике вызова с указанием семантики привязки и сведений об операции.</summary>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Dynamic.BinaryOperationBinder" />.</summary>
      <param name="operation">Вид унарной операции.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Выполняет привязку динамической унарной операции.</summary>
      <param name="target">Целевой объект динамической операции.</param>
      <param name="args">Массив аргументов динамической операции.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку унарной динамической операции, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической унарной операции.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Выполняет привязку унарной динамической операции, если не удается привязать динамический целевой объект.</summary>
      <param name="target">Целевой объект динамической унарной операции.</param>
      <param name="errorSuggestion">Результат привязки в случае ее неудачного завершения или значение NULL.</param>
      <returns>Объект <see cref="T:System.Dynamic.DynamicMetaObject" />, представляющий результат привязки.</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.Operation">
      <summary>Вид унарной операции.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, который представляет вид унарной операции.</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.ReturnType">
      <summary>Тип результата операции.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип результата операции.</returns>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary>Представляет выражение, содержащее бинарный оператор.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла. Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
      <returns>Результат посещения этого узла.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary>Возвращает значение, указывающее, можно ли сократить узел дерева выражений.</summary>
      <returns>
        <see langword="true" />значение, если узел дерева выражения можно уменьшить; в противном случае —. <see langword="false" /></returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary>Возвращает функцию преобразования типа, используемую операцией преобразования или составного присваивания.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.LambdaExpression" />, представляющий тип функции преобразования.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary>Возвращает значение, указывающее, представляет ли узел дерева выражения ликвидированный вызов оператора.</summary>
      <returns>
        <see langword="true" />, если узел представляет удаленный вызов; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary>Возвращает значение, указывающее, представляет ли узел дерева выражения ликвидированный вызов оператора, тип возврата которого удален для типа со значением NULL.</summary>
      <returns>
        <see langword="true" />, если тип возврата оператора удален до типа со значением NULL, иначе возвращается значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary>Возвращает левый операнд бинарной операции.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, который предоставляет левый операнд бинарной операции.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary>Возвращает реализацию метода для бинарной операции.</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary>Сокращает узел бинарных выражений до более простого выражения.</summary>
      <returns>Преобразованное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary>Возвращает правый операнд бинарной операции.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, который предоставляет правый операнд бинарной операции.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="left">Свойство <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> результата.</param>
      <param name="conversion">Свойство <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> результата.</param>
      <param name="right">Свойство <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary>Представляет блок, содержащий последовательность выражений, в которых могут быть определены переменные.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла. Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
      <returns>Результат посещения этого узла.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary>Получает выражения в этом блоке.</summary>
      <returns>Доступная только для чтения коллекция, содержащая все выражения данного блока.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary>Возвращает тип узла данного выражения. При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary>Получает последнее выражение в этом блоке.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий последнее выражение в этом блоке.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.BlockExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="variables">Свойство <see cref="P:System.Linq.Expressions.BlockExpression.Variables" /> результата.</param>
      <param name="expressions">Свойство <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /> результата.</param>
      <returns>Данное выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary>Получает переменные, определенные в данном блоке.</summary>
      <returns>Доступная только для чтения коллекция, содержащая все переменные данного блока.</returns>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary>Представляет оператор catch в блоке try.</summary>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary>Возвращает тело блока catch.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело блока catch.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary>Возвращает тело фильтра <see cref="T:System.Linq.Expressions.CatchBlock" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело фильтра <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary>Возвращает тип исключений <see cref="T:System.Exception" />, перехватываемых этим обработчиком.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип исключений <see cref="T:System.Exception" />, перехватываемых этим обработчиком.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary>Возвращает строку <see cref="T:System.String" />, которая представляет текущий объект <see cref="T:System.Object" />.</summary>
      <returns>Объект <see cref="T:System.String" />. представляющий текущий объект <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="variable">Свойство <see cref="P:System.Linq.Expressions.CatchBlock.Variable" /> результата.</param>
      <param name="filter">Свойство <see cref="P:System.Linq.Expressions.CatchBlock.Filter" /> результата.</param>
      <param name="body">Свойство <see cref="P:System.Linq.Expressions.CatchBlock.Body" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary>Возвращает ссылку на объект <see cref="T:System.Exception" />, перехваченный этим обработчиком.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ParameterExpression" />, который представляет ссылку на объект <see cref="T:System.Exception" />, перехватываемый этим обработчиком.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary>Представляет выражение, имеющее условный оператор.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла. Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
      <returns>Результат посещения этого узла.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary>Возвращает выражение для выполнения, если результатом проверки является значение <see langword="false" />.</summary>
      <returns>Свойство <see cref="T:System.Linq.Expressions.Expression" />, представляющее выражение для выполнения, если тест имеет значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary>Возвращает выражение для выполнения, если результатом проверки является значение <see langword="true" />.</summary>
      <returns>Свойство <see cref="T:System.Linq.Expressions.Expression" />, представляющее выражение для выполнения, если тест имеет значение <see langword="true" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary>Возвращает тип узла данного выражения. При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary>Возвращает проверку условной операции.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, который предоставляет проверку условной операции.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы совпадают, возвращается данное выражение</summary>
      <param name="test">Свойство <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> результата.</param>
      <param name="ifTrue">Свойство <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> результата.</param>
      <param name="ifFalse">Свойство <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> результата.</param>
      <returns>Данное выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary>Представляет выражение, содержащее постоянное значение.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла. Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
      <returns>Результат посещения этого узла.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary>Возвращает тип узла для данного выражения. При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.ConstantExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary>Возвращает значение постоянного выражения.</summary>
      <returns>Объект <see cref="T:System.Object" />, равный значению представленного выражения.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary>Выпускает или очищает точку следования для сведений отладки. Это позволяет отладчику выделять при отладке правильный исходный код.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла. Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
      <returns>Результат посещения этого узла.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary>Получает объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, представляющий исходный файл.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, представляющий исходный файл.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary>Получает конечный столбец данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>Номер конечного столбца кода, с помощью которого было создано заключенное в оболочку выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary>Получает конечную строку данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>Номер конечной строки кода, с помощью которого было создано заключенное в оболочку выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary>Получает значение, указывающее, предназначено ли выражение <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> для очистки точки следования.</summary>
      <returns>
        <see langword="true" />значение, если для очистки точки последовательности; в противном случае —. <see langword="false" /><see cref="T:System.Linq.Expressions.DebugInfoExpression" /></returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary>Получает начальный столбец данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>Номер начального столбца кода, с помощью которого было создано заключенное в оболочку выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary>Получает начальную строку данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>Номер начальной строки кода, с помощью которого было создано заключенное в оболочку выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary>Представляет значение по умолчанию для типа или пустое выражение.</summary>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary>Возвращает тип узла данного выражения. При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.DefaultExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpression">
      <summary>Представляет динамическую операцию.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла. Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
      <returns>Результат посещения этого узла.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <summary>Получает аргументы для динамической операции.</summary>
      <returns>Доступная только для чтения коллекция, содержащая аргументы динамической операции.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
      <summary>Получает <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />, который определяет поведение во время выполнения динамического сайта.</summary>
      <returns>Объект <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />, который определяет поведение во время выполнения динамического сайта.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <summary>Получает тип делегата, используемого объектом <see cref="T:System.Runtime.CompilerServices.CallSite" />.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип делегата, используемого объектом <see cref="T:System.Runtime.CompilerServices.CallSite" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="returnType">Тип результата динамического выражения.</param>
      <param name="arguments">Аргументы динамической операции.</param>
      <returns>Класс <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="returnType">Тип результата динамического выражения.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <returns>Класс <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="returnType">Тип результата динамического выражения.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <param name="arg1">Второй аргумент динамической операции.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="returnType">Тип результата динамического выражения.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <param name="arg1">Второй аргумент динамической операции.</param>
      <param name="arg2">Третий аргумент динамической операции.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="returnType">Тип результата динамического выражения.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <param name="arg1">Второй аргумент динамической операции.</param>
      <param name="arg2">Третий аргумент динамической операции.</param>
      <param name="arg3">Четвертый аргумент динамической операции.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="returnType">Тип результата динамического выражения.</param>
      <param name="arguments">Аргументы динамической операции.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="delegateType">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="arguments">Аргументы динамической операции.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и одним аргументом.</summary>
      <param name="delegateType">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="arg0">Аргумент динамической операции.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и двумя аргументами.</summary>
      <param name="delegateType">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <param name="arg1">Второй аргумент динамической операции.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и тремя аргументами.</summary>
      <param name="delegateType">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <param name="arg1">Второй аргумент динамической операции.</param>
      <param name="arg2">Третий аргумент динамической операции.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и четырьмя аргументами.</summary>
      <param name="delegateType">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <param name="arg1">Второй аргумент динамической операции.</param>
      <param name="arg2">Третий аргумент динамической операции.</param>
      <param name="arg3">Четвертый аргумент динамической операции.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="delegateType">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="arguments">Аргументы динамической операции.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.DynamicExpression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <summary>Возвращает тип узла данного выражения. При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>Возвращает число аргументов для узла дерева выражения. Не следует использовать этот член. Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.</summary>
      <returns>Возвращает <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>Возвращает аргумент в индексе, создавая исключение, если индекс вне допустимых границ. Не следует использовать этот член. Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.</summary>
      <param name="index">Индекс аргумента.</param>
      <returns>Возвращает <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#CreateCallSite">
      <summary>При необходимости создает CallSite и возвращает этот CallSite для полиморфного встроенного кэша DynamicExpression. Не следует использовать этот член. Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.</summary>
      <returns>Возвращает <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.System#Linq#Expressions#IDynamicExpression#Rewrite(System.Linq.Expressions.Expression[])">
      <summary>Переопределите этот узел, заменив аргументы динамического выражения предоставленными значениями. Количество <paramref name="args" /> должно совпадать с количеством аргументов в текущем выражении. Не следует использовать этот тип. Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности. Этот вспомогательный метод позволяет перезаписывать узлы независимо от конкретной реализации класса, производного от DynamicExpression, который используется на месте вызова.</summary>
      <param name="args">Аргументы.</param>
      <returns>Возвращает переопределенное выражение <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.DynamicExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Сравнивает значение, отправленное в параметр, <paramref name="arguments" />, со свойством <see langword="Arguments" /> текущего экземпляра <see langword="DynamicExpression" />. Если значения параметров и свойства равны, возвращается текущий экземпляр. Если они не равны, возвращается новый экземпляр <see langword="DynamicExpression" />, идентичный текущему экземпляру за исключением того, что свойству <see langword="Arguments" /> присвоено значение параметра <paramref name="arguments" />.</summary>
      <param name="arguments">Свойство <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpressionVisitor">
      <summary>Представляет метод просмотра или перезаписи деревьев динамических выражений.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Linq.Expressions.DynamicExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.DynamicExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Возвращает <see cref="T:System.Linq.Expressions.Expression" />, измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary>Представляет инициализатор отдельного элемента коллекции <see cref="T:System.Collections.IEnumerable" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary>Получает метод экземпляра, который используется для добавления элемента в коллекцию <see cref="T:System.Collections.IEnumerable" />.</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" />, который представляет метод экземпляра, который добавляет элемент в коллекцию.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary>Получает коллекцию аргументов, передаваемых в метод, который добавляет элемент в коллекцию <see cref="T:System.Collections.IEnumerable" />.</summary>
      <returns>Коллекция <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.Expression" />, представляющих аргументы для метода, который добавляет элемент в коллекцию.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>Возвращает число аргументов для узла дерева выражения.  Не следует использовать этот член.  Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.</summary>
      <returns>Возвращает <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>Возвращает аргумент в индексе, создавая исключение, если индекс вне допустимых границ.  Не следует использовать этот член.  Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.</summary>
      <param name="index">Индекс аргумента.</param>
      <returns>Возвращает <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary>Возвращает текстовое представление объекта <see cref="T:System.Linq.Expressions.ElementInit" />.</summary>
      <returns>Текстовое представление объекта <see cref="T:System.Linq.Expressions.ElementInit" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="arguments">Свойство <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary>Предоставляет базовый класс, производными от которого являются классы, представляющие узлы дерева выражения. Также содержит методы фабрики <see langword="static" /> (<see langword="Shared" /> в Visual Basic) для создания различных типов узлов. Это класс <see langword="abstract" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary>Создает новый экземпляр класса <see cref="T:System.Linq.Expressions.Expression" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <param name="nodeType">Значение <see cref="T:System.Linq.Expressions.ExpressionType" /> для установки в качестве типа узла.</param>
      <param name="type">Значение <see cref="P:System.Linq.Expressions.Expression.Type" /> этого экземпляра <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла. Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
      <returns>Результат посещения этого узла.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического сложения, не содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Add" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор сложения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического сложения, не содержащую проверку переполнения. Может быть указан метод реализации.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Add" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> имеет значение <see langword="null" />, и оператор сложения не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, не содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, не содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, не содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания сложения, содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического сложения, содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор сложения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического сложения, содержащую проверку переполнения. Может быть указан метод реализации.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> имеет значение <see langword="null" /> , и оператор сложения не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию <see langword="AND" />.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.And" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Битовый оператор <see langword="AND" /> не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию <see langword="AND" />. Может быть указан метод реализации.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.And" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> имеет значение <see langword="null" />, и оператор битовой операции <see langword="AND" /> не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее условную операцию <see langword="AND" />, вычисляющую второй операнд, только если первый операнд имеет значение <see langword="true" />.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Битовый оператор <see langword="AND" /> не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.  

или - 
Типы <paramref name="left" />.Type и <paramref name="right" />.Type отличаются от логического типа.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее условную операцию <see langword="AND" />, вычисляющую второй операнд, только если первый операнд имеет значение true. Может быть указан метод реализации.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> имеет значение <see langword="null" />, и оператор битовой операции <see langword="AND" /> не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.  

или - 
Метод <paramref name="method" /> равен <see langword="null" />, а типы <paramref name="left" />.Type и <paramref name="right" />.Type отличаются от логического типа.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания AND.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания AND.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания AND.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.IndexExpression" /> для доступа к многомерному массиву.</summary>
      <param name="array">Выражение, представляющее многомерный массив.</param>
      <param name="indexes">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий выражения для индексации массива.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.IndexExpression" /> для доступа к массиву.</summary>
      <param name="array">Выражение, представляющее индексируемый массив.</param>
      <param name="indexes">Массив, содержащий выражения для индексации массива.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее применение оператора индекса массива к массиву с рангом более одного.</summary>
      <param name="array">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />.</param>
      <param name="indexes">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="array" /> или <paramref name="indexes" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="array" />.Type не представляет тип массива.  

или - 
Ранг типа <paramref name="array" />.Type не соответствует количеству элементов в <paramref name="indexes" />.  

или - 
Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов <paramref name="indexes" /> не представляет тип <see cref="T:System.Int32" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее применение оператора индекса массива к массиву ранга один.</summary>
      <param name="array">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="index">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="array" /> или <paramref name="index" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="array" />.Type не представляет тип массива.  

или - 
Тип <paramref name="array" />.Type представляет тип массива, ранг которого не равен 1.  

или - 
Тип <paramref name="index" />.Type не представляет тип <see cref="T:System.Int32" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее применение оператора индекса массива к многомерному массиву.</summary>
      <param name="array">Массив экземпляров <see cref="T:System.Linq.Expressions.Expression" />, которые являются индексами для операции индекса массива.</param>
      <param name="indexes">Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="array" /> или <paramref name="indexes" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="array" />.Type не представляет тип массива.  

или - 
Ранг типа <paramref name="array" />.Type не соответствует количеству элементов в <paramref name="indexes" />.  

-или- 
Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов <paramref name="indexes" /> не представляет тип <see cref="T:System.Int32" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> для получения длины одномерного массива.</summary>
      <param name="array">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" />, и свойство <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, равное <paramref name="array" />.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="array" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="array" />.Type не представляет тип массива.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее операцию присваивания.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Assign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberAssignment" />, который представляет инициализацию поля или свойства.</summary>
      <param name="member">Объект <see cref="T:System.Reflection.MemberInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</param>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberAssignment" />, у которого свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> равняется <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />, а для свойств <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> и <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="member" /> или <paramref name="expression" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> не представляет поле или свойство.  

или - 
Свойство, представленное <paramref name="member" />, не обладает доступа <see langword="set" />.  

-или- 
 <paramref name="expression" />.Type не может назначаться для типа поля или свойства, которое представляет <paramref name="member" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberAssignment" />, который представляет инициализацию члена с помощью метода доступа к свойству.</summary>
      <param name="propertyAccessor">
        <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа свойства.</param>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberAssignment" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> равное <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />, свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" />, для которого задано значение <see cref="T:System.Reflection.PropertyInfo" />, представляющее свойство, к которому получается доступ в <paramref name="propertyAccessor" />, и свойство <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />, для которого задано значение <paramref name="expression" />.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="propertyAccessor" /> или <paramref name="expression" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> не представляет метод доступа к свойству.  

или - 
В свойстве, доступ к которому осуществляется с помощью параметра <paramref name="propertyAccessor" />, отсутствует метод доступа <see langword="set" />.  

или - 
<paramref name="expression" />.Type не может назначаться для типа поля или свойства, которое представляет <paramref name="member" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащий заданные выражения и не содержащий переменных.</summary>
      <param name="expressions">Выражения в блоке.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее указанные переменные и выражения.</summary>
      <param name="variables">Переменные в блоке.</param>
      <param name="expressions">Выражения в блоке.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее указанные переменные и выражения.</summary>
      <param name="variables">Переменные в блоке.</param>
      <param name="expressions">Выражения в блоке.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее два выражения и не содержащее переменных.</summary>
      <param name="arg0">Первое выражение в блоке.</param>
      <param name="arg1">Второе выражение в блоке.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее три выражения и не содержащее переменных.</summary>
      <param name="arg0">Первое выражение в блоке.</param>
      <param name="arg1">Второе выражение в блоке.</param>
      <param name="arg2">Третье выражение в блоке.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее четыре выражения и не содержащее переменных.</summary>
      <param name="arg0">Первое выражение в блоке.</param>
      <param name="arg1">Второе выражение в блоке.</param>
      <param name="arg2">Третье выражение в блоке.</param>
      <param name="arg3">Четвертое выражение в блоке.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее пять выражений и не содержащее переменных.</summary>
      <param name="arg0">Первое выражение в блоке.</param>
      <param name="arg1">Второе выражение в блоке.</param>
      <param name="arg2">Третье выражение в блоке.</param>
      <param name="arg3">Четвертое выражение в блоке.</param>
      <param name="arg4">Пятое выражение в блоке.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащий заданные выражения и не содержащий переменных.</summary>
      <param name="expressions">Выражения в блоке.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее данные выражения, не содержащее переменных и имеющее конкретный тип результатов.</summary>
      <param name="type">Тип результата блока.</param>
      <param name="expressions">Выражения в блоке.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее указанные переменные и выражения.</summary>
      <param name="type">Тип результата блока.</param>
      <param name="variables">Переменные в блоке.</param>
      <param name="expressions">Выражения в блоке.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее указанные переменные и выражения.</summary>
      <param name="type">Тип результата блока.</param>
      <param name="variables">Переменные в блоке.</param>
      <param name="expressions">Выражения в блоке.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BlockExpression" />, содержащее данные выражения, не содержащее переменных и имеющее конкретный тип результатов.</summary>
      <param name="type">Тип результата блока.</param>
      <param name="expressions">Выражения в блоке.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор break.</summary>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Break, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение <paramref name="target" />, а при переходе целевой метке передается значение NULL.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор break. Можно указать значение, передаваемое метке при переходе.</summary>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="value">Значение, передаваемое связанной метке при переходе.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение break, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, а при переходе целевой метке передается значение <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор break с указанным типом. Можно указать значение, передаваемое метке при переходе.</summary>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="value">Значение, передаваемое связанной метке при переходе.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение break, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — <paramref name="type" />, а при переходе целевой метке передается значение <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор break с указанным типом.</summary>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение break, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, а свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — <paramref name="type" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода, не принимающего аргументы.</summary>
      <param name="instance">Выражение <see cref="T:System.Linq.Expressions.Expression" />, задающее экземпляр для вызова метода экземпляра (для метода <see langword="null" /> (<see langword="static" /> в Visual Basic) передается <see langword="Shared" />).</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> — <see langword="null" />.  
-или- 
 Свойство<paramref name="instance" /> имеет значение <see langword="null" /> , а свойство <paramref name="method" /> представляет метод экземпляра.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type не может быть назначен объявляющему типу метода, представленного свойством <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода, принимающего аргументы.</summary>
      <param name="instance">
        <see cref="T:System.Linq.Expressions.Expression" />, чтобы задать свойство <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> равным (передать <see langword="null" /> для метода <see langword="static" /> (<see langword="Shared" /> в Visual Basic).</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> — <see langword="null" />.  

или - 
Свойство<paramref name="instance" /> имеет значение <see langword="null" /> , а свойство <paramref name="method" /> представляет метод экземпляра.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type не может быть назначен объявляющему типу метода, представленного свойством <paramref name="method" />.  
-или- 
Число элементов в <paramref name="arguments" /> не соответствует числу параметров метода, представленного свойством <paramref name="method" />.  

или - 
Один или несколько элементов в <paramref name="arguments" /> невозможно присвоить соответствующему параметру метода, представленного свойством <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода, принимающего два аргумента.</summary>
      <param name="instance">Выражение <see cref="T:System.Linq.Expressions.Expression" />, указывающее экземпляр для вызова экземпляра. (Для статического метода (Shared в Visual Basic) передается NULL.)</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий целевой метод.</param>
      <param name="arg0">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</param>
      <param name="arg1">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода, принимающего три аргумента.</summary>
      <param name="instance">Выражение <see cref="T:System.Linq.Expressions.Expression" />, указывающее экземпляр для вызова экземпляра. (Для статического метода (Shared в Visual Basic) передается NULL.)</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий целевой метод.</param>
      <param name="arg0">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</param>
      <param name="arg1">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.</param>
      <param name="arg2">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий третий аргумент.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода, принимающего аргументы.</summary>
      <param name="instance">Выражение <see cref="T:System.Linq.Expressions.Expression" />, задающее экземпляр для вызова метода экземпляра (для метода <see langword="null" /> (<see langword="static" /> в Visual Basic) передается <see langword="Shared" />).</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> — <see langword="null" />.  
-или- 
 Свойство <paramref name="instance" /> имеет значение <see langword="null" />, а свойство <paramref name="method" /> представляет метод экземпляра.  

или - 
<paramref name="arguments" /> не является <see langword="null" /> и один или несколько его элементов является <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type не может быть назначен объявляющему типу метода, представленного свойством <paramref name="method" />.  
-или- 
Число элементов в <paramref name="arguments" /> не соответствует числу параметров метода, представленного свойством <paramref name="method" />.  

или - 
Один или несколько элементов в <paramref name="arguments" /> невозможно присвоить соответствующему параметру метода, представленного свойством <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющий вызов для метода, вызывая соответствующий метод фабрики.</summary>
      <param name="instance">
        <see cref="T:System.Linq.Expressions.Expression" />, для значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" /> которого будет выполнен поиск определенного метода.</param>
      <param name="methodName">Имя метода.</param>
      <param name="typeArguments">Массив объектов <see cref="T:System.Type" />, указывающий тип параметров универсального метода. Если methodName задает неуниверсальный метод, данный аргумент должен иметь значение NULL.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, который представляет аргументы для метода.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, свойство <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, равное <paramref name="instance" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которого задано значение <see cref="T:System.Reflection.MethodInfo" />, представляющее указанный метод экземпляра, а для указанных аргументов заданы значения <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="instance" /> или <paramref name="methodName" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Отсутствует метод с именем <paramref name="methodName" />, параметры типа которого соответствуют <paramref name="typeArguments" /> и типы параметров которого <paramref name="arguments" /> обнаружены в типе <paramref name="instance" />.Type или его базовых типах.  

или - 
Больше одного метода с именем <paramref name="methodName" />, параметры типа которого соответствуют <paramref name="typeArguments" />, и типы параметров которого <paramref name="arguments" /> обнаружены в типе <paramref name="instance" />.Type или его базовых типах.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов статического метода (Shared в Visual Basic).</summary>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий целевой метод.</param>
      <param name="arguments">Коллекция выражений <see cref="T:System.Linq.Expressions.Expression" />, представляющая аргументы вызова.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода <see langword="static" /> (<see langword="Shared" /> в Visual Basic), принимающего один аргумент.</summary>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arg0">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="method" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов статического метода, принимающего два аргумента.</summary>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arg0">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</param>
      <param name="arg1">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="method" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов статического метода, принимающего три аргумента.</summary>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arg0">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</param>
      <param name="arg1">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.</param>
      <param name="arg2">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий третий аргумент.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="method" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов статического метода, принимающего четыре аргумента.</summary>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arg0">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</param>
      <param name="arg1">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.</param>
      <param name="arg2">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий третий аргумент.</param>
      <param name="arg3">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий четвертый аргумент.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="method" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов статического метода, принимающего пять аргументов.</summary>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />.</param>
      <param name="arg0">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий первый аргумент.</param>
      <param name="arg1">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий второй аргумент.</param>
      <param name="arg2">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий третий аргумент.</param>
      <param name="arg3">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий четвертый аргумент.</param>
      <param name="arg4">Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий пятый аргумент.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="method" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющее вызов метода <see langword="static" /> (<see langword="Shared" /> в Visual Basic), принимающего аргументы.</summary>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" />, представляющий метод <see langword="static" /> (<see langword="Shared" /> в Visual Basic), чтобы задать значение <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> для свойства.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, и свойствами <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> и <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Число элементов в <paramref name="arguments" /> не соответствует числу параметров метода, представленного свойством <paramref name="method" />.  
-или- 
Один или несколько элементов в <paramref name="arguments" /> невозможно присвоить соответствующему параметру метода, представленного свойством <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.MethodCallExpression" />, представляющий вызов метода <see langword="static" /> (<see langword="Shared" /> в Visual Basic), вызывая соответствующий метод фабрики.</summary>
      <param name="type">Тип, который содержит указанный метод <see langword="static" /> (<see langword="Shared" /> в Visual Basic).</param>
      <param name="methodName">Имя метода.</param>
      <param name="typeArguments">Массив объектов <see cref="T:System.Type" />, указывающий тип параметров универсального метода. Если methodName задает неуниверсальный метод, данный аргумент должен иметь значение NULL.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, который представляет аргументы для метода.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MethodCallExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, свойство <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, для которого задано значение <see cref="T:System.Reflection.MethodInfo" />, представляющее указанный метод <see langword="static" /> (<see langword="Shared" /> в Visual Basic), и свойство <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />, для которого заданы указанные аргументы.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="type" /> или <paramref name="methodName" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Отсутствует метод с именем <paramref name="methodName" />, параметры типа которого соответствуют <paramref name="typeArguments" /> и типы параметров которого <paramref name="arguments" /> обнаружены в типе <paramref name="type" /> или его базовых типах.  
-или- 
Больше одного метода с именем <paramref name="methodName" />, параметры типа которого соответствуют <paramref name="typeArguments" />, и типы параметров которого <paramref name="arguments" /> обнаружены в типе <paramref name="type" /> или его базовых типах.</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary>Указывает, что узел можно сократить до более простого. Если возвращается значение true, для получения сокращенной формы можно вызвать Reduce().</summary>
      <returns>
        <see langword="true" />значение, если узел можно уменьшить; в противном случае —. <see langword="false" /></returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch со ссылкой на перехваченный объект <see cref="T:System.Exception" />, который используется в теле обработчика.</summary>
      <param name="variable">Объект <see cref="T:System.Linq.Expressions.ParameterExpression" />, представляющий ссылку на объект <see cref="T:System.Exception" />, перехваченный данным обработчиком.</param>
      <param name="body">Тело оператора catch.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch с фильтром <see cref="T:System.Exception" /> и ссылкой на перехваченный объект <see cref="T:System.Exception" />.</summary>
      <param name="variable">Объект <see cref="T:System.Linq.Expressions.ParameterExpression" />, представляющий ссылку на объект <see cref="T:System.Exception" />, перехваченный данным обработчиком.</param>
      <param name="body">Тело оператора catch.</param>
      <param name="filter">Тело фильтра <see cref="T:System.Exception" />.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch.</summary>
      <param name="type">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> объекта <see cref="T:System.Exception" />, который будет обрабатываться этим объектом <see cref="T:System.Linq.Expressions.CatchBlock" />.</param>
      <param name="body">Тело оператора catch.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch с фильтром <see cref="T:System.Exception" /> без ссылки на перехваченный объект <see cref="T:System.Exception" />.</summary>
      <param name="type">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> объекта <see cref="T:System.Exception" />, который будет обрабатываться этим объектом <see cref="T:System.Linq.Expressions.CatchBlock" />.</param>
      <param name="body">Тело оператора catch.</param>
      <param name="filter">Тело фильтра <see cref="T:System.Exception" />.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> для очистки точки последовательности.</summary>
      <param name="document">Объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, представляющий исходный файл.</param>
      <returns>Экземпляр объекта <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> для очистки точки следования.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий объединяющую операцию.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> параметра <paramref name="left" /> не представляет тип ссылки или тип, поддерживающий значение null.</exception>
      <exception cref="T:System.ArgumentException">Типы <paramref name="left" />.Type и <paramref name="right" />.Type не преобразовываются друг в друга.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий объединяющую операцию, заданную функции преобразования.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Типы <paramref name="left" />.Type и <paramref name="right" />.Type не преобразовываются друг в друга.  

или - 
<paramref name="conversion" /> не является <see langword="null" />, а тип <paramref name="conversion" />.Type является типом делегата, не принимающим ровно один аргумент.</exception>
      <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> параметра <paramref name="left" /> не представляет тип ссылки или тип, поддерживающий значение null.  
-или- 
Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /><paramref name="left" /> представляет тип, который не назначается для типа параметра типа делегата <paramref name="conversion" />.Type.  

или - 
Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /><paramref name="right" /> не равно типу возврата типа делегата <paramref name="conversion" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.ConditionalExpression" />, представляющий условный оператор.</summary>
      <param name="test">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.</param>
      <param name="ifTrue">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.</param>
      <param name="ifFalse">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ConditionalExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, и свойствами <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> и <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="test" />, <paramref name="ifTrue" /> или <paramref name="ifFalse" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="test" />.Type не является типом <see cref="T:System.Boolean" />.  
-или- 
 Тип <paramref name="ifTrue" />.Type не равен типу <paramref name="ifFalse" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.ConditionalExpression" />, представляющий условный оператор.</summary>
      <param name="test">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.</param>
      <param name="ifTrue">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.</param>
      <param name="ifFalse">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />.</param>
      <param name="type">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ConditionalExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, и свойствами <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> и <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary>Создает <see cref="T:System.Linq.Expressions.ConstantExpression" />, для свойства <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> которого задано указанное значение.</summary>
      <param name="value">Объект <see cref="T:System.Object" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ConstantExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />, и свойством <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />, для которого задано указанное значение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary>Создает <see cref="T:System.Linq.Expressions.ConstantExpression" />, содержащее свойства <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> и <see cref="P:System.Linq.Expressions.Expression.Type" />, для которых заданы указанные значения.</summary>
      <param name="value">Объект <see cref="T:System.Object" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ConstantExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />, и свойствами <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> и <see cref="P:System.Linq.Expressions.Expression.Type" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="value" /> не имеет значение <see langword="null" />, а <paramref name="type" /> не может быть назначен из динамического типа <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор continue.</summary>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Continue, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение <paramref name="target" />, а при переходе целевой метке передается значение NULL.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор continue с указанным типом.</summary>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Continue, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — <paramref name="type" />, а при переходе целевой метке передается значение null.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее операцию преобразования типа.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.Expression.Type" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="expression" /> или <paramref name="type" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор преобразования не определен для типов <paramref name="expression" />.Type и <paramref name="type" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее операцию преобразования, для которой указан метод реализации.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> или <paramref name="type" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который представляется этим параметром, возвращает значение <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно один аргумент.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор преобразования не определен для типов <paramref name="expression" />.Type и <paramref name="type" />.Type.  

или - 
Параметр <paramref name="expression" />.Type не назначается типу аргумента метода, представленному параметром <paramref name="method" />.  

или - 
Тип возврата метода, представленный <paramref name="method" />, не назначается для <paramref name="type" />.  

или - 
Тип <paramref name="expression" />.Type или <paramref name="type" /> поддерживает тип значения, а соответствующий тип, не поддерживающий значение null, не равен типу аргумента и типу возврата, соответственно метода, представленного <paramref name="method" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">Найдено более одного метода, соответствующего описанию <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее операцию преобразования, создающую исключение, если целевой тип переполнен.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.Expression.Type" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="expression" /> или <paramref name="type" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор преобразования не определен для типов <paramref name="expression" />.Type и <paramref name="type" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее операцию преобразования, создающую исключение, если целевой тип переполнен, и для которой указан метод реализации.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> или <paramref name="type" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который представляется этим параметром, возвращает значение <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно один аргумент.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор преобразования не определен для типов <paramref name="expression" />.Type и <paramref name="type" />.Type.  

или - 
Параметр <paramref name="expression" />.Type не назначается типу аргумента метода, представленному параметром <paramref name="method" />.  

-или- 
Тип возврата метода, представленный <paramref name="method" />, не назначается для <paramref name="type" />.  

или - 
Тип <paramref name="expression" />.Type или <paramref name="type" /> поддерживает тип значения, а соответствующий тип, не поддерживающий значение null, не равен типу аргумента и типу возврата, соответственно метода, представленного <paramref name="method" />.</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">Найдено более одного метода, соответствующего описанию <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> с заданным диапазоном.</summary>
      <param name="document">Объект <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, представляющий исходный файл.</param>
      <param name="startLine">Начальная строка данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />. Должно быть больше 0.</param>
      <param name="startColumn">Начальный столбец данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />. Должно быть больше 0.</param>
      <param name="endLine">Конечная строка данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />. Значение должно быть больше или равно значению начальной строки.</param>
      <param name="endColumn">Конечный столбец данного выражения <see cref="T:System.Linq.Expressions.DebugInfoExpression" />. Если конечная строка совпадает с начальной строкой, это значение должно быть больше или равно значению начального столбца. В любом случае оно должно быть больше 0.</param>
      <returns>Экземпляр <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий уменьшение выражения на 1.</summary>
      <param name="expression">Уменьшаемое выражение <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий уменьшенное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий уменьшение выражения на 1.</summary>
      <param name="expression">Уменьшаемое выражение <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий уменьшенное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary>Создает <see cref="T:System.Linq.Expressions.DefaultExpression" />, для свойства <see cref="P:System.Linq.Expressions.Expression.Type" /> которого задан указанный тип.</summary>
      <param name="type">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.DefaultExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Default" />, и свойством <see cref="P:System.Linq.Expressions.Expression.Type" />, для которого задан указанный тип.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического деления.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует присвоить свойству <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор деления не определен для типов <paramref name="left" /> и <paramref name="right" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического деления. Может быть указан метод реализации.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> имеет значение <see langword="null" /> , и оператор деления не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания деления, не содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания деления, не содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания деления, не содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="returnType">Тип результата динамического выражения.</param>
      <param name="arguments">Аргументы динамической операции.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="returnType">Тип результата динамического выражения.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="returnType">Тип результата динамического выражения.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <param name="arg1">Второй аргумент динамической операции.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="returnType">Тип результата динамического выражения.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <param name="arg1">Второй аргумент динамической операции.</param>
      <param name="arg2">Третий аргумент динамической операции.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="returnType">Тип результата динамического выражения.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <param name="arg1">Второй аргумент динамической операции.</param>
      <param name="arg2">Третий аргумент динамической операции.</param>
      <param name="arg3">Четвертый аргумент динамической операции.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="returnType">Тип результата динамического выражения.</param>
      <param name="arguments">Аргументы динамической операции.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равняется <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, а для свойств <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.ElementInit" />, присвоенный <see cref="T:System.Collections.Generic.IEnumerable`1" /> в качестве второго аргумента.</summary>
      <param name="addMethod">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />.</param>
      <param name="arguments">Объект <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.Expression" />, которые следует задать для свойства <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ElementInit" />, содержащее свойства <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> и <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="addMethod" /> или <paramref name="arguments" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Методу, представленному параметром <paramref name="addMethod" />, не присвоено имя "Добавить" (без учета регистра).  

или - 
Метод, представленный параметром <paramref name="addMethod" />, не является методом экземпляра.  

или - 
Число элементов в <paramref name="arguments" /> не соответствует числу параметров метода, представленного параметром <paramref name="addMethod" />.  

или - 
Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов <paramref name="arguments" /> невозможно присвоить типу соответствующего параметра метода, представленного <paramref name="addMethod" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.ElementInit" />, присвоенный массиву значений в качестве второго аргумента.</summary>
      <param name="addMethod">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, которые следует задать для свойства <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ElementInit" />, содержащее свойства <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> и <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="addMethod" /> или <paramref name="arguments" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Название метода, представленного параметром addMethod, отлично от "Add" (без учета регистра).  
-или- 
Метод, представленный параметром addMethod, не является методом экземпляра.  

или - 
Число элементов, содержащихся в параметре arguments, отличается от числа параметров для метода, представленного параметром addMethod.  

-или- 
Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов <paramref name="arguments" /> невозможно присвоить типу соответствующего параметра метода, представленного <paramref name="addMethod" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary>Создает пустое выражение типа <see cref="T:System.Void" />.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.DefaultExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Default" />, и свойство <see cref="P:System.Linq.Expressions.Expression.Type" />, равное <see cref="T:System.Void" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий сравнение равенства.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор равенства не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий сравнение равенства. Может быть указан метод реализации.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="liftToNull">
        <see langword="true" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение <see langword="true" />; <see langword="false" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение <see langword="false" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен <see langword="null" />, а оператор равенства не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию <see langword="XOR" /> с использованием <c>op_ExclusiveOr</c> для определяемых пользователем типов.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор<see langword="XOR" /> не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию <see langword="XOR" /> с использованием <c>op_ExclusiveOr</c> для определяемых пользователем типов. Может быть указан метод реализации.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> имеет значение <see langword="null" />, и оператор <see langword="XOR" /> не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания XOR с использованием <c>op_ExclusiveOr</c> для определяемых пользователем типов.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания XOR с использованием <c>op_ExclusiveOr</c> для определяемых пользователем типов.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания XOR с использованием <c>op_ExclusiveOr</c> для определяемых пользователем типов.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к полю.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />. Для <see langword="static" /> (<see langword="Shared" /> в Visual Basic) параметр <paramref name="expression" /> должен иметь значение <see langword="null" />.</param>
      <param name="field">Объект <see cref="T:System.Reflection.FieldInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberExpression.Member" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, и свойствами <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> и <see cref="P:System.Linq.Expressions.MemberExpression.Member" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="field" /> имеет значение <see langword="null" />.  

или - 
Поле, представленное параметром <paramref name="field" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic), и <paramref name="expression" /> равно <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="expression" />.Type не назначается объявляемому типу поля, представленному параметром <paramref name="field" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberExpression" />, который представляет доступ к полю, которому предоставлено имя поля.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />, где <see cref="P:System.Linq.Expressions.Expression.Type" /> содержит поле с именем <paramref name="fieldName" />. Для статических полей допускается значение NULL.</param>
      <param name="fieldName">Имя поля для доступа.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, имеющее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, свойство <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />, для которого задано значение <paramref name="expression" />, и свойство <see cref="P:System.Linq.Expressions.MemberExpression.Member" />, для которого задано значение <see cref="T:System.Reflection.FieldInfo" />, представляющее поле, обозначенное с помощью параметра <paramref name="fieldName" />.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> или <paramref name="fieldName" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Не определено поле с именем <paramref name="fieldName" /> для параметра <paramref name="expression" />.Type или его базовых типов.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к полю.</summary>
      <param name="expression">Объект, содержащий поле. Для статических полей допускается значение NULL.</param>
      <param name="type">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, содержащий поле.</param>
      <param name="fieldName">Поле для доступа.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.MemberExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary>Создает объект <see cref="T:System.Type" />, представляющий универсальный тип делегата <c>System.Action</c> с заданными аргументами типа.</summary>
      <param name="typeArgs">Массив до шестнадцати объектов <see cref="T:System.Type" />, указывающих аргументы типа для типа делегата <see langword="System.Action" />.</param>
      <returns>Тип делегата <c>System.Action</c> с заданными аргументами типа.</returns>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="typeArgs" /> содержит более шестнадцати элементов.</exception>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="typeArgs" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary>Создает объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий универсальный тип делегата <c>System.Func</c> или <c>System.Action</c> с заданными аргументами типа.</summary>
      <param name="typeArgs">Тип аргументов делегата.</param>
      <returns>Тип делегата.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary>Создает объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий универсальный тип делегата <c>System.Func</c> с заданными аргументами типа. Аргумент последнего типа задает тип возвращаемого значения созданного делегата.</summary>
      <param name="typeArgs">Массив до семнадцати объектов <see cref="T:System.Type" />, указывающих аргументы типа для типа делегата <see langword="System.Func" />.</param>
      <returns>Тип делегата <c>System.Func</c> с заданными аргументами типа.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> содержит менее одного или более семнадцати элементов.</exception>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="typeArgs" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор goto.</summary>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Goto, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — указанное значение, а при переходе целевой метке передается значение NULL.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор goto. Можно указать значение, передаваемое метке при переходе.</summary>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="value">Значение, передаваемое связанной метке при переходе.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Goto, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, а при переходе целевой метке передается значение <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор goto с указанным типом. Можно указать значение, передаваемое метке при переходе.</summary>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="value">Значение, передаваемое связанной метке при переходе.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Goto, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — <paramref name="type" />, а при переходе целевой метке передается значение <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор goto с указанным типом.</summary>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Goto, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — указанное значение, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — значение в параметре <paramref name="type" />, а при переходе целевой метке передается значение NULL.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее числовое сравнение объектов "больше, чем".</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор "больше, чем" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее числовое сравнение объектов "больше, чем". Может быть указан метод реализации.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="liftToNull">
        <see langword="true" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение <see langword="true" />; <see langword="false" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение <see langword="false" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is <see langword="null" />, а оператор "больше, чем" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "больше или равно".</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор "больше или равно" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "больше или равно".</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="liftToNull">
        <see langword="true" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение <see langword="true" />; <see langword="false" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение <see langword="false" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> имеет значение <see langword="null" /> , и оператор "больше или равно" не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.ConditionalExpression" />, представляющий условный блок с оператором <see langword="if" />.</summary>
      <param name="test">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.</param>
      <param name="ifTrue">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ConditionalExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, и свойствами <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> и <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, для которых заданы указанные значения. Свойству <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> присваивается значение выражения по умолчанию, тип получаемого выражения <see cref="T:System.Linq.Expressions.ConditionalExpression" />, возвращаемого этим методом, — <see cref="T:System.Void" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.ConditionalExpression" />, представляющий условный блок с операторами <see langword="if" /> и <see langword="else" />.</summary>
      <param name="test">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />.</param>
      <param name="ifTrue">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />.</param>
      <param name="ifFalse">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ConditionalExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />, и свойствами <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> и <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />, для которых заданы указанные значения. Тип выражения <see cref="T:System.Linq.Expressions.ConditionalExpression" />, возвращаемого этим методом, — <see cref="T:System.Void" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий увеличение значения выражения на 1.</summary>
      <param name="expression">Увеличиваемое выражение <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий увеличенное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий приращение выражения на 1.</summary>
      <param name="expression">Увеличиваемое выражение <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий увеличенное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.InvocationExpression" />, применяющее делегат или лямбда-выражение к списку выражений аргумента.</summary>
      <param name="expression">Выражение <see cref="T:System.Linq.Expressions.Expression" />, представляющее делегат или лямбда-выражение для применения.</param>
      <param name="arguments">Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий объекты <see cref="T:System.Linq.Expressions.Expression" />, представляющие аргументы, к которым применяется делегат или лямбда-выражение.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.InvocationExpression" />, которое применяет заданный делегат или лямбда-выражение к предоставленным аргументам.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="expression" />.Type не представляет тип делегата или <see cref="T:System.Linq.Expressions.Expression`1" />.  
-или- 
Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> нельзя назначить для типа соответствующего параметра делегата, представленного параметром <paramref name="expression" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> не содержит количество элементов, равное количеству списка параметров для делегата, представленного <paramref name="expression" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.InvocationExpression" />, применяющее делегат или лямбда-выражение к списку выражений аргумента.</summary>
      <param name="expression">Выражение <see cref="T:System.Linq.Expressions.Expression" />, представляющее делегат или лямбда-выражение для применения.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, представляющих аргументы, к которым применяется делегат или лямбда-выражение.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.InvocationExpression" />, которое применяет заданный делегат или лямбда-выражение к предоставленным аргументам.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="expression" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="expression" />.Type не представляет тип делегата или <see cref="T:System.Linq.Expressions.Expression`1" />.  

или - 
Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> нельзя назначить для типа соответствующего параметра делегата, представленного параметром <paramref name="expression" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> не содержит количество элементов, равное количеству списка параметров для делегата, представленного <paramref name="expression" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary>Возвращает значение, показывающее, имеет ли выражение значение false.</summary>
      <param name="expression">Вычисляемый объект <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <returns>Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Возвращает значение, показывающее, имеет ли выражение значение false.</summary>
      <param name="expression">Вычисляемый объект <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
      <returns>Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary>Возвращает значение, показывающее, имеет ли выражение значение true.</summary>
      <param name="expression">Вычисляемый объект <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <returns>Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Возвращает значение, показывающее, имеет ли выражение значение true.</summary>
      <param name="expression">Вычисляемый объект <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
      <returns>Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку с типом void, не имеющую имени.</summary>
      <returns>Новый объект <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.LabelExpression" />, представляющий метку без значения по умолчанию.</summary>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, с которым будет связано данное выражение <see cref="T:System.Linq.Expressions.LabelExpression" />.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelExpression" /> без значения по умолчанию.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.LabelExpression" />, представляющее метку с заданным значением по умолчанию.</summary>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, с которым будет связано данное выражение <see cref="T:System.Linq.Expressions.LabelExpression" />.</param>
      <param name="defaultValue">Значение данного выражения <see cref="T:System.Linq.Expressions.LabelExpression" /> после достижения метки через стандартный поток управления.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.LabelExpression" /> с заданным значением по умолчанию.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary>Создает объект<see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку с типом void и заданным именем.</summary>
      <param name="name">Имя метки.</param>
      <returns>Новый объект <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку с заданным типом.</summary>
      <param name="type">Тип значения, которое передается при переходе к метке.</param>
      <returns>Новый объект <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку с заданными типом и именем.</summary>
      <param name="type">Тип значения, которое передается при переходе к метке.</param>
      <param name="name">Имя метки.</param>
      <returns>Новый объект <see cref="T:System.Linq.Expressions.LabelTarget" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.LambdaExpression" />, создавая сначала тип делегата из тела выражения, параметр, указывающий, следует ли использовать оптимизацию вызовов с префиксом tail, а также перечисляемую коллекцию выражений параметров. Он может использоваться, если тип делегата неизвестен в момент компиляции.</summary>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.LambdaExpression" />, создавая сначала тип делегата из тела выражения, параметр, указывающий, следует ли использовать оптимизацию вызовов с префиксом tail, а также массив выражений параметров. Он может использоваться, если тип делегата неизвестен в момент компиляции.</summary>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">Массив, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.LambdaExpression" />, создавая сначала тип делегата из тела выражения и перечисляемую коллекцию выражений параметров. Он может использоваться, если тип делегата неизвестен в момент компиляции.</summary>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.LambdaExpression" />, создавая сначала тип делегата из тела выражения и массив выражений параметров. Он может использоваться, если тип делегата неизвестен в момент компиляции.</summary>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="parameters">Массив объектов <see cref="T:System.Linq.Expressions.ParameterExpression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, и свойствами <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="body" /> имеет значение <see langword="null" />.  

или - 
Один или несколько элементов <paramref name="parameters" /> имеют значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="parameters" /> содержит более шестнадцати элементов.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.LambdaExpression" />, создавая сначала тип делегата из тела выражения, имя для лямбда-функции, параметр, указывающий, следует ли использовать оптимизацию вызовов с префиксом tail, а также перечисляемую коллекцию выражений параметров. Он может использоваться, если тип делегата неизвестен в момент компиляции.</summary>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="name">Имя для лямбда-функции. Используется для выпуска сведений об отладке.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.LambdaExpression" />, создавая сначала тип делегата из тела выражения, имя для лямбда-функции и перечисляемую коллекцию выражений параметров. Он может использоваться, если тип делегата неизвестен в момент компиляции.</summary>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="name">Имя для лямбда-функции. Используется для выпуска сведений об отладке.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.LambdaExpression" />, в котором тип делегата известен во время компиляции, с параметром, указывающим, следует ли использовать оптимизацию вызовов с префиксом tail, а также перечисляемую коллекцию выражений параметров.</summary>
      <param name="delegateType">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий сигнатуру делегата для лямбда-выражения.</param>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.LambdaExpression" />, в котором тип делегата известен во время компиляции, с параметром, указывающим, следует ли использовать оптимизацию вызовов с префиксом tail, а также массив выражений параметров.</summary>
      <param name="delegateType">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий сигнатуру делегата для лямбда-выражения.</param>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">Массив, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.LambdaExpression" />, в котором тип делегата известен во время компиляции, с перечисляемой коллекцией выражений параметров.</summary>
      <param name="delegateType">Тип <see cref="T:System.Type" />, представляющий сигнатуру делегата для лямбда-выражения.</param>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <returns>Объект, представляющий лямбда-выражение со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />, и свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="delegateType" /> или <paramref name="body" /> имеет значение <see langword="null" />.  

или - 
Один или несколько элементов в <paramref name="parameters" /> имеют значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="delegateType" /> не представляет тип делегата.  

или - 
Тип <paramref name="body" />.Type представляет тип, который не может быть назначен для типа возврата типа делегата, представленного <paramref name="delegateType" />.  

или - 
<paramref name="parameters" /> не содержит количество элементов, равное количеству списка параметров для типа делегата, представленного <paramref name="delegateType" />.  

или - 
Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="parameters" /> нельзя назначить от типа соответствующего типа параметра типа делегата, представленного через <paramref name="delegateType" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.LambdaExpression" />, в котором тип делегата известен во время компиляции, с массивом выражений параметров.</summary>
      <param name="delegateType">Тип <see cref="T:System.Type" />, представляющий сигнатуру делегата для лямбда-выражения.</param>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="parameters">Массив объектов <see cref="T:System.Linq.Expressions.ParameterExpression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <returns>Объект, представляющий лямбда-выражение со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />, и свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="delegateType" /> или <paramref name="body" /> — <see langword="null" />.  

или - 
Один или несколько элементов в <paramref name="parameters" /> имеют значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="delegateType" /> не представляет тип делегата.  

или - 
Тип <paramref name="body" />.Type представляет тип, который не может быть назначен для типа возврата типа делегата, представленного <paramref name="delegateType" />.  

-или- 
 <paramref name="parameters" /> не содержит количество элементов, равное количеству списка параметров для типа делегата, представленного <paramref name="delegateType" />.  

или - 
Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="parameters" /> нельзя назначить от типа соответствующего типа параметра типа делегата, представленного через <paramref name="delegateType" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.LambdaExpression" />, в котором тип делегата известен во время компиляции, с именем для лямбда-функции, параметром, указывающим, следует ли использовать оптимизацию вызовов с префиксом tail и перечисляемой коллекцией выражений параметров.</summary>
      <param name="delegateType">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий сигнатуру делегата для лямбда-выражения.</param>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="name">Имя для лямбда-функции. Используется для выпуска сведений об отладке.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.LambdaExpression" />, в котором тип делегата известен во время компиляции, с именем для лямбда-функции и перечисляемой коллекцией выражений параметров.</summary>
      <param name="delegateType">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий сигнатуру делегата для лямбда-выражения.</param>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="name">Имя для лямбда-функции. Используется для выпуска сведений об отладке.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.LambdaExpression" />, у которого свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> равняется лямбда-выражению, а для свойств <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.Expression`1" />, в котором тип делегата известен во время компиляции, с параметром, указывающим, следует ли использовать оптимизацию вызовов с префиксом tail и перечисляемой коллекцией выражений параметров.</summary>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <typeparam name="TDelegate">Тип делегата.</typeparam>
      <returns>Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, содержащее свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, а также свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.Expression`1" />, в котором тип делегата известен во время компиляции, с параметром, указывающим, следует ли использовать оптимизацию вызовов с префиксом tail и массивом выражений параметров.</summary>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">Массив, содержащий объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <typeparam name="TDelegate">Тип делегата.</typeparam>
      <returns>Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, а также свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.Expression`1" />, в котором тип делегата известен во время компиляции, с перечисляемой коллекцией выражений параметров.</summary>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <typeparam name="TDelegate">Тип делегата.</typeparam>
      <returns>Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, а также свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> — <see langword="null" />.  

или - 
Один или несколько элементов в <paramref name="parameters" /> имеют значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="TDelegate" /> не является типом делегата.  

или - 
Тип <paramref name="body" />.Type представляет тип, который не может быть назначен для типа возврата параметра <paramref name="TDelegate" />.  

или - 
<paramref name="parameters" /> не содержит количество элементов, равное количеству списка параметров для <paramref name="TDelegate" />.  


-или- 
Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="parameters" /> нельзя назначить из типа соответствующего параметра <paramref name="TDelegate" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.Expression`1" />, в котором тип делегата известен во время компиляции, с массивом выражений параметров.</summary>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="parameters">Массив объектов <see cref="T:System.Linq.Expressions.ParameterExpression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <typeparam name="TDelegate">Тип делегата.</typeparam>
      <returns>Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, а также свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="body" /> имеет значение <see langword="null" />.  
-или- 
Один или несколько элементов в <paramref name="parameters" /> имеют значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Элемент <paramref name="TDelegate" /> не является типом делегата.  

или - 
Тип <paramref name="body" />.Type представляет тип, который не может быть назначен для типа возврата параметра <paramref name="TDelegate" />.  

или - 
<paramref name="parameters" /> не содержит количество элементов, равное количеству списка параметров для <paramref name="TDelegate" />.  

или - 
Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="parameters" /> нельзя назначить из типа соответствующего параметра <paramref name="TDelegate" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.Expression`1" />, в котором тип делегата известен во время компиляции, с именем для лямбда-функции, параметром, указывающим, следует ли использовать оптимизацию вызовов с префиксом tail и перечисляемой коллекцией выражений параметров.</summary>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="name">Имя лямбда-выражения. Используется для создания сведений об отладке.</param>
      <param name="tailCall">Значение <see cref="T:System.Boolean" />, которое указывает, следует ли использовать оптимизацию вызовов с префиксом tail при компиляции созданного выражения.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <typeparam name="TDelegate">Тип делегата.</typeparam>
      <returns>Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, содержащее свойство <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, а также свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.Expression`1" />, в котором тип делегата известен во время компиляции, с именем для лямбда-функции и перечисляемой коллекцией выражений параметров.</summary>
      <param name="body">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />.</param>
      <param name="name">Имя лямбда-выражения. Используется для создания сведений об отладке.</param>
      <param name="parameters">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ParameterExpression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />.</param>
      <typeparam name="TDelegate">Тип делегата.</typeparam>
      <returns>Выражение <see cref="T:System.Linq.Expressions.Expression`1" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />, а также свойства <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> и <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий побитовую операцию со сдвигом влево.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор сдвига влево не определен для типов <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий побитовую операцию со сдвигом влево.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен <see langword="null" />, а оператор сдвига влево не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига влево.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига влево.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига влево.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "меньше, чем".</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор "меньше, чем" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "меньше, чем".</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="liftToNull">
        <see langword="true" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение <see langword="true" />; <see langword="false" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение <see langword="false" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> имеет значение <see langword="null" />, и оператор "меньше, чем" не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "меньше или равно".</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор "меньше или равно" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий числовое сравнение объектов "меньше или равно".</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="liftToNull">
        <see langword="true" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение <see langword="true" />; <see langword="false" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение <see langword="false" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равен <see langword="null" />, а оператор "меньше или равно" не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberListBinding" />, где элемент является полем или свойством.</summary>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" />, представляющий поле или свойство, чтобы задать для свойства <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ElementInit" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberListBinding" /> со свойством<see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равным <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, и свойствами <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> и <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="member" /> имеет значение <see langword="null" />.  

или - 
Один или несколько элементов <paramref name="initializers" /> имеют значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> не представляет поле или свойство.  

или - 
Тип <see cref="P:System.Reflection.FieldInfo.FieldType" /> или <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> поля или свойства, которые представляет <paramref name="member" />, не реализовывает <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberListBinding" />, где элемент является полем или свойством.</summary>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" />, представляющий поле или свойство, чтобы задать для свойства <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</param>
      <param name="initializers">Массив объектов <see cref="T:System.Linq.Expressions.ElementInit" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberListBinding" /> со свойством<see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равным <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, и свойствами <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> и <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> — <see langword="null" />.  

или - 
Один или несколько элементов <paramref name="initializers" /> имеют значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> не представляет поле или свойство.  

или - 
Тип <see cref="P:System.Reflection.FieldInfo.FieldType" /> или <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> поля или свойства, которые представляет <paramref name="member" />, не реализовывает <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberListBinding" /> на основе указанного метода доступа к свойству.</summary>
      <param name="propertyAccessor">
        <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа свойства.</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ElementInit" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberListBinding" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" />, равное <see cref="T:System.Reflection.MemberInfo" />, представляющее свойство с доступом в <paramref name="propertyAccessor" />, и <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />, заполненные элементами <paramref name="initializers" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> — <see langword="null" />.  

или - 
Один или несколько элементов <paramref name="initializers" /> имеют значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> не представляет метод доступа к свойству.  

или - 
Тип <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> свойства, представленного методом с помощью доступа <paramref name="propertyAccessor" />, не реализовывает <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberListBinding" /> на основе указанного метода доступа к свойству.</summary>
      <param name="propertyAccessor">
        <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа свойства.</param>
      <param name="initializers">Массив объектов <see cref="T:System.Linq.Expressions.ElementInit" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberListBinding" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" />, равное <see cref="T:System.Reflection.MemberInfo" />, представляющее свойство с доступом в <paramref name="propertyAccessor" />, и <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />, заполненные элементами <paramref name="initializers" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> — <see langword="null" />.  

или - 
Один или несколько элементов <paramref name="initializers" /> имеют значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> не представляет метод доступа к свойству.  

или - 
Тип <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> свойства, представленного методом с помощью доступа <paramref name="propertyAccessor" />, не реализовывает <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Создает <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий указанные объекты <see cref="T:System.Linq.Expressions.ElementInit" /> для инициализации коллекции.</summary>
      <param name="newExpression">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.ElementInit" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, и свойствами <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> и <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="newExpression" /> или <paramref name="initializers" /> имеет значение <see langword="null" />.  

или - 
Один или несколько элементов <paramref name="initializers" /> имеют значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий метод с именем "Добавить" для добавления элементов в коллекцию.</summary>
      <param name="newExpression">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, и свойством <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />, для которого задано указанное значение.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="newExpression" /> или <paramref name="initializers" /> — <see langword="null" />.  

или - 
Один или несколько элементов <paramref name="initializers" /> имеют значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.</exception>
      <exception cref="T:System.InvalidOperationException">В <paramref name="newExpression" /> или его базовом типе не объявлен метод экземпляра с именем "Добавить" (без учета регистра).  

или - 
Метод "Добавить" в <paramref name="newExpression" />.Type или его базовом типе не принимает ровно один аргумент.  

или - 
Тип, представленный свойством <see cref="P:System.Linq.Expressions.Expression.Type" /> первого элемента <paramref name="initializers" />, невозможно назначить типу аргумента метода "Добавить" в <paramref name="newExpression" />.Type или его базовом типе.  

или - 
В <paramref name="newExpression" />.Type или его базовом типе есть несколько методов с именем "Добавить" (без учета регистра), совместимых с аргументом.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий указанные объекты <see cref="T:System.Linq.Expressions.ElementInit" /> для инициализации коллекции.</summary>
      <param name="newExpression">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</param>
      <param name="initializers">Массив объектов <see cref="T:System.Linq.Expressions.ElementInit" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, и свойствами <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> и <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="newExpression" /> или <paramref name="initializers" /> имеет значение <see langword="null" />.  
-или- 
Один или несколько элементов <paramref name="initializers" /> имеют значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий метод с именем "Добавить" для добавления элементов в коллекцию.</summary>
      <param name="newExpression">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</param>
      <param name="initializers">Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, и свойством <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />, для которого задано указанное значение.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="newExpression" /> или <paramref name="initializers" /> имеет значение <see langword="null" />.  

или - 
Один или несколько элементов <paramref name="initializers" /> имеют значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.</exception>
      <exception cref="T:System.InvalidOperationException">В <paramref name="newExpression" /> или его базовом типе не объявлен метод экземпляра с именем "Добавить" (без учета регистра).  

или - 
Метод "Добавить" в <paramref name="newExpression" />.Type или его базовом типе не принимает ровно один аргумент.  

или - 
Тип, представленный свойством <see cref="P:System.Linq.Expressions.Expression.Type" /> первого элемента <paramref name="initializers" />, невозможно назначить типу аргумента метода "Добавить" в <paramref name="newExpression" />.Type или его базовом типе.  

или - 
В <paramref name="newExpression" />.Type или его базовом типе есть несколько методов с именем "Добавить" (без учета регистра), совместимых с аргументом.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий указанный метод, чтобы добавить элементы к коллекции.</summary>
      <param name="newExpression">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</param>
      <param name="addMethod">
        <see cref="T:System.Reflection.MethodInfo" />, представляющий метод экземпляра с именем "Add" (без учета регистра), добавляющий элемент к коллекции.</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, и свойством <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />, для которого задано указанное значение.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="newExpression" /> или <paramref name="initializers" /> имеет значение <see langword="null" />.  

или - 
Один или несколько элементов <paramref name="initializers" /> имеют значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.  

или - 
Значение <paramref name="addMethod" /> не равно <see langword="null" /> и не представляет метод экземпляра с именем "Add" (без учета регистра), принимающий точно один аргумент.  

или - 
Значение <paramref name="addMethod" /> не равно <see langword="null" />, а тип, представленный свойством <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов параметра <paramref name="initializers" />, нельзя назначить для типа аргумента метода, представленного <paramref name="addMethod" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> не равен <see langword="null" />, и отсутствует метод экземпляра с именем "Add", принимающий один аргумент, совместимый с типом, для параметра <paramref name="newExpression" />.Type или его базового типа.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.ListInitExpression" />, использующий указанный метод, чтобы добавить элементы к коллекции.</summary>
      <param name="newExpression">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />.</param>
      <param name="addMethod">
        <see cref="T:System.Reflection.MethodInfo" />, представляющий метод экземпляра с одним аргументом, добавляющий элемент к коллекции.</param>
      <param name="initializers">Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ListInitExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />, и свойством <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />, для которого задано указанное значение.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="newExpression" /> или <paramref name="initializers" /> — <see langword="null" />.  

или - 
Один или несколько элементов <paramref name="initializers" /> имеют значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type не реализует <see cref="T:System.Collections.IEnumerable" />.  

или - 
Значение <paramref name="addMethod" /> не равно <see langword="null" /> и не представляет метод экземпляра с именем "Add" (без учета регистра), принимающий точно один аргумент.  

-или- 
 Значение <paramref name="addMethod" /> не равно <see langword="null" />, а тип, представленный свойством <see cref="P:System.Linq.Expressions.Expression.Type" /> одного или нескольких элементов параметра <paramref name="initializers" />, нельзя назначить для типа аргумента метода, представленного <paramref name="addMethod" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> не равен <see langword="null" />, и отсутствует метод экземпляра с именем "Add", принимающий один аргумент, совместимый с типом, для параметра <paramref name="newExpression" />.Type или его базового типа.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.LoopExpression" /> с заданным телом.</summary>
      <param name="body">Тело цикла.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.LoopExpression" /> с заданным телом и целью оператора break.</summary>
      <param name="body">Тело цикла.</param>
      <param name="break">Цель оператора break, используемая телом цикла.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.LoopExpression" /> с заданным телом.</summary>
      <param name="body">Тело цикла.</param>
      <param name="break">Цель оператора break, используемая телом цикла.</param>
      <param name="continue">Цель оператора continue, используемая телом цикла.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.LoopExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, присвоенные левый и правый операнды с помощью вызова соответствующего метода фабрики.</summary>
      <param name="binaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип бинарной операции.</param>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> представляет левый операнд.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> представляет правый операнд.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, полученный в результате вызова соответствующего заводского метода.</returns>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="binaryType" /> не соответствует двоичному узлу выражения.</exception>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, присвоенный левый операнд, правый операнд и метод реализации с помощью вызова соответствующего метода фабрики.</summary>
      <param name="binaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип бинарной операции.</param>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> представляет левый операнд.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> представляет правый операнд.</param>
      <param name="liftToNull">
        <see langword="true" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение <see langword="true" />; <see langword="false" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение <see langword="false" />.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" />, указывающий метод реализации.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, полученный в результате вызова соответствующего заводского метода.</returns>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="binaryType" /> не соответствует двоичному узлу выражения.</exception>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, присвоенный левый операнд, правый операнд, метод реализации и функция преобразования метода с помощью вызова соответствующего метода фабрики.</summary>
      <param name="binaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип бинарной операции.</param>
      <param name="left">
        <see cref="T:System.Linq.Expressions.Expression" /> представляет левый операнд.</param>
      <param name="right">
        <see cref="T:System.Linq.Expressions.Expression" /> представляет правый операнд.</param>
      <param name="liftToNull">
        <see langword="true" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение <see langword="true" />; <see langword="false" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение <see langword="false" />.</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" />, указывающий метод реализации.</param>
      <param name="conversion">
        <see cref="T:System.Linq.Expressions.LambdaExpression" />, представляющий тип функции преобразования. Этот параметр используется лишь в том случае, если <paramref name="binaryType" /> имеет значение <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> или составного присваивания.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, полученный в результате вызова соответствующего заводского метода.</returns>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="binaryType" /> не соответствует двоичному узлу выражения.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющий оператор catch с указанными элементами.</summary>
      <param name="type">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> объекта <see cref="T:System.Exception" />, который будет обрабатываться этим объектом <see cref="T:System.Linq.Expressions.CatchBlock" />.</param>
      <param name="variable">Объект <see cref="T:System.Linq.Expressions.ParameterExpression" />, представляющий ссылку на объект <see cref="T:System.Exception" />, перехваченный данным обработчиком.</param>
      <param name="body">Тело оператора catch.</param>
      <param name="filter">Тело фильтра <see cref="T:System.Exception" />.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="delegateType">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="arguments">Аргументы динамической операции.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и одним аргументом.</summary>
      <param name="delegateType">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="arg0">Аргумент динамической операции.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и двумя аргументами.</summary>
      <param name="delegateType">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <param name="arg1">Второй аргумент динамической операции.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и тремя аргументами.</summary>
      <param name="delegateType">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <param name="arg1">Второй аргумент динамической операции.</param>
      <param name="arg2">Третий аргумент динамической операции.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.DynamicExpression" />, представляющий динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> и четырьмя аргументами.</summary>
      <param name="delegateType">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="arg0">Первый аргумент динамической операции.</param>
      <param name="arg1">Второй аргумент динамической операции.</param>
      <param name="arg2">Третий аргумент динамической операции.</param>
      <param name="arg3">Четвертый аргумент динамической операции.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.DynamicExpression" />, которое представляет динамическую операцию, привязанную с использованием указанного объекта <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
      <param name="delegateType">Тип делегата, используемого <see cref="T:System.Runtime.CompilerServices.CallSite" />.</param>
      <param name="binder">Связыватель времени выполнения для динамической операции.</param>
      <param name="arguments">Аргументы динамической операции.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.DynamicExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />, и свойствами <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> и <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее переход указанного типа <see cref="T:System.Linq.Expressions.GotoExpressionKind" />. Также можно указать значение, передаваемое метке при переходе.</summary>
      <param name="kind">
        <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> выражения <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="value">Значение, передаваемое связанной метке при переходе.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение <paramref name="kind" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — <paramref name="type" />, а при переходе целевой метке передается значение <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.IndexExpression" />, представляющий доступ к индексированному свойству объекта.</summary>
      <param name="instance">Объект, которому принадлежит это свойство. Должно равняться NULL, если свойство имеет значение <see langword="static" /> (<see langword="shared" /> в Visual Basic).</param>
      <param name="indexer">Выражение <see cref="T:System.Linq.Expressions.Expression" />, представляющее индексируемое свойство.</param>
      <param name="arguments">Коллекция <c>IEnumerable&lt;Expression&gt;</c> (<c>IEnumerable (Of Expression)</c> в Visual Basic), содержащая аргументы, которые будут использоваться для индексации свойства.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberExpression" />, который представляет доступ к полю или свойству.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> представляет объект, к которому принадлежит элемент. Для статических членов допускается значение NULL.</param>
      <param name="member">
        <see cref="T:System.Reflection.MemberInfo" />, описывающий поле или свойство, к которому следует осуществить доступ.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.MemberExpression" />, полученный в результате вызова соответствующего заводского метода.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="member" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> не представляет поле или свойство.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.TryExpression" />, представляющее блок try с указанными элементами.</summary>
      <param name="type">Тип результата выражения try. Если он имеет значение NULL, body и все обработчики должны иметь одинаковый тип.</param>
      <param name="body">Тело блока try.</param>
      <param name="finally">Тело блока finally. Если с блоком try не связан ни один блок finally, передается NULL.</param>
      <param name="fault">Тело блока fault. Если с блоком try не связан ни один блок fault, передается NULL.</param>
      <param name="handlers">Коллекция объектов <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющих операторы catch, которые следует связать с блоком try.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, присвоенный операнду с помощью вызова соответствующего метода фабрики.</summary>
      <param name="unaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип унарной операции.</param>
      <param name="operand">
        <see cref="T:System.Linq.Expressions.Expression" /> представляет операнд.</param>
      <param name="type">Тип <see cref="T:System.Type" />, указывающий тип для преобразования в (передать <see langword="null" />, если не применяется).</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, полученный в результате вызова соответствующего заводского метода.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="unaryType" /> не соответствует унарному узлу выражения.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, присвоенный операнд и метод реализации с помощью вызова соответствующего метода фабрики.</summary>
      <param name="unaryType">
        <see cref="T:System.Linq.Expressions.ExpressionType" />, указывающий тип унарной операции.</param>
      <param name="operand">
        <see cref="T:System.Linq.Expressions.Expression" /> представляет операнд.</param>
      <param name="type">Тип <see cref="T:System.Type" />, указывающий тип для преобразования в (передать <see langword="null" />, если не применяется).</param>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, полученный в результате вызова соответствующего заводского метода.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="operand" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="unaryType" /> не соответствует унарному узлу выражения.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, который представляет рекурсивную инициализацию элементов поля или свойства.</summary>
      <param name="member">Объект <see cref="T:System.Reflection.MemberInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</param>
      <param name="bindings">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.MemberBinding" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> со свойством<see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равным <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, и свойствами <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> и <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="member" /> или <paramref name="bindings" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> не представляет поле или свойство.  
-или- 
Свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> элемента <paramref name="bindings" /> не представляет элемент типа поля или свойства, представленного <paramref name="member" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, который представляет рекурсивную инициализацию элементов поля или свойства.</summary>
      <param name="member">Объект <see cref="T:System.Reflection.MemberInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberBinding.Member" />.</param>
      <param name="bindings">Массив объектов <see cref="T:System.Linq.Expressions.MemberBinding" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> со свойством<see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равным <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, и свойствами <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> и <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="member" /> или <paramref name="bindings" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> не представляет поле или свойство.  

или - 
Свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> элемента <paramref name="bindings" /> не представляет элемент типа поля или свойства, представленного <paramref name="member" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, который представляет рекурсивную инициализацию элементов элемента, доступ к которому осуществляется с помощью метода доступа свойства.</summary>
      <param name="propertyAccessor">
        <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа к свойству.</param>
      <param name="bindings">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.MemberBinding" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" />, для которого задано значение <see cref="T:System.Reflection.PropertyInfo" />, представляющее свойство с доступом в <paramref name="propertyAccessor" />, и свойства <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="propertyAccessor" /> или <paramref name="bindings" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> не представляет метод доступа к свойству.  

или - 
Свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> элемента <paramref name="bindings" /> не представляет элемент типа свойства, доступ к которому осуществляется методом, который представляет <paramref name="propertyAccessor" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, который представляет рекурсивную инициализацию элементов элемента, доступ к которому осуществляется с помощью метода доступа свойства.</summary>
      <param name="propertyAccessor">
        <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа к свойству.</param>
      <param name="bindings">Массив объектов <see cref="T:System.Linq.Expressions.MemberBinding" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberMemberBinding" />, содержащее свойство <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" />, равное <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" />, для которого задано значение <see cref="T:System.Reflection.PropertyInfo" />, представляющее свойство с доступом в <paramref name="propertyAccessor" />, и свойства <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="propertyAccessor" /> или <paramref name="bindings" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> не представляет метод доступа к свойству.  

или - 
Свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> элемента <paramref name="bindings" /> не представляет элемент типа свойства, доступ к которому осуществляется методом, который представляет <paramref name="propertyAccessor" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Представляет выражение, создающее новый объект и инициализирующее свойство объекта.</summary>
      <param name="newExpression">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />.</param>
      <param name="bindings">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.MemberBinding" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberInitExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />, и свойствами <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> и <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="newExpression" /> или <paramref name="bindings" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> элемента <paramref name="bindings" /> не представляет элемент типа поля или свойства, который представляет <paramref name="newExpression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</summary>
      <param name="newExpression">Объект <see cref="T:System.Linq.Expressions.NewExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />.</param>
      <param name="bindings">Массив объектов <see cref="T:System.Linq.Expressions.MemberBinding" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberInitExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" />, и свойствами <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> и <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="newExpression" /> или <paramref name="bindings" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> элемента <paramref name="bindings" /> не представляет элемент типа поля или свойства, который представляет <paramref name="newExpression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического остатка.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор модуля не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического остатка.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> имеет значение <see langword="null" />, и оператор остатка от деления не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания остатка.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания остатка.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания остатка.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического умножения, не содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор умножения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического умножения, не содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">Значение <paramref name="method" /> равно <see langword="null" />, а оператор умножения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, не содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, не содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, не содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания умножения, содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического умножения, содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор умножения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического умножения, содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">Значение <paramref name="method" /> равно <see langword="null" />, а оператор умножения не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию арифметического отрицания.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />, и свойством <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, для которого задано указанное значение.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="expression" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Унарный минус-оператор не определен для типа <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию арифметического отрицания.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Negate" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который представляется этим параметром, возвращает значение <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно один аргумент.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равно <see langword="null" />, а унарный минус-оператор не определен для типа <paramref name="expression" />.Type.  

или - 
Тип <paramref name="expression" />.Type (или соответствующий тип, не поддерживающий значение null, если он является типом, поддерживающим значение null) не назначается типу аргумента метода, представленного <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию арифметического отрицания, содержащую проверку переполнения.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />, и свойством <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, для которого задано указанное значение.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="expression" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Унарный минус-оператор не определен для типа <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию арифметического отрицания, содержащую проверку переполнения. Может быть указан метод реализации.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="expression" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который представляется этим параметром, возвращает значение <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно один аргумент.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равно <see langword="null" />, а унарный минус-оператор не определен для типа <paramref name="expression" />.Type.  

или - 
Тип <paramref name="expression" />.Type (или соответствующий тип, не поддерживающий значение null, если он является типом, поддерживающим значение null) не назначается типу аргумента метода, представленного <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора без аргументов.</summary>
      <param name="constructor">Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.New" />, и свойством <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, для которого задано указанное значение.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="constructor" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Конструктор, который представляет <paramref name="constructor" />, содержит не менее одного параметра.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора с указанными аргументами.</summary>
      <param name="constructor">Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.New" />, и свойствами <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> и <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> — <see langword="null" />.  

или - 
Элемент <paramref name="arguments" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="arguments" /> не содержит количество элементов, равное количеству параметров для конструктора, представленного <paramref name="constructor" />.  

или - 
Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> невозможно присвоить типу соответствующего конструктора, представляемого <paramref name="constructor" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
      <summary>Создает <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора с указанными аргументами. Указаны элементы с доступом к полям, инициализированным конструктором.</summary>
      <param name="constructor">Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.</param>
      <param name="members">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Reflection.MemberInfo" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Members" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.New" />, и свойствами <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> и <see cref="P:System.Linq.Expressions.NewExpression.Members" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="constructor" /> имеет значение <see langword="null" />.  

или - 
Элемент <paramref name="arguments" /> имеет значение <see langword="null" />.  

или - 
Элемент <paramref name="members" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="arguments" /> не содержит количество элементов, равное количеству параметров для конструктора, представленного <paramref name="constructor" />.  

или - 
Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> невозможно присвоить типу соответствующего конструктора, представляемого <paramref name="constructor" />.  

или - 
Параметр <paramref name="members" /> не содержит то же количество элементов, что и параметр <paramref name="arguments" />.  


-или- 
Элемент свойства <paramref name="arguments" /> содержит <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий тип, который нельзя назначить для типа элемента, представленного соответствующим элементом <paramref name="members" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора с указанными аргументами. Указаны элементы с доступом к полям, инициализированным в качестве массива.</summary>
      <param name="constructor">Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.</param>
      <param name="members">Массив объектов <see cref="T:System.Reflection.MemberInfo" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Members" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.New" />, и свойствами <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> и <see cref="P:System.Linq.Expressions.NewExpression.Members" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="constructor" /> имеет значение <see langword="null" />.  
-или- 
Элемент <paramref name="arguments" /> имеет значение <see langword="null" />.  

или - 
Элемент <paramref name="members" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="arguments" /> не содержит количество элементов, равное количеству параметров для конструктора, представленного <paramref name="constructor" />.  
-или- 
Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> невозможно присвоить типу соответствующего конструктора, представляемого <paramref name="constructor" />.  
-или- 
Параметр <paramref name="members" /> не содержит то же количество элементов, что и параметр <paramref name="arguments" />.  

или - 
Элемент свойства <paramref name="arguments" /> содержит <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий тип, который нельзя назначить для типа элемента, представленного соответствующим элементом <paramref name="members" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов указанного конструктора с указанными аргументами.</summary>
      <param name="constructor">Объект <see cref="T:System.Reflection.ConstructorInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.New" />, и свойствами <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> и <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructor" /> — <see langword="null" />.  
-или- 
Элемент <paramref name="arguments" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Длина <paramref name="arguments" /> соответствует числу параметров конструктора, представляемого <paramref name="constructor" />.  

или - 
Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="arguments" /> невозможно присвоить типу соответствующего конструктора, представляемого <paramref name="constructor" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.New(System.Type)">
      <summary>Создает <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов конструктора указанного типа без параметров.</summary>
      <param name="type">
        <see cref="T:System.Type" /> содержит конструктор без аргументов.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.New" />, и свойство <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, для которого задано значение <see cref="T:System.Reflection.ConstructorInfo" />, представляющее конструктор указанного типа без параметров.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="type" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Тип, который представляет <paramref name="type" />, не содержит конструктор без параметров.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.NewArrayExpression" />, представляющее создание массива с указанным рангом.</summary>
      <param name="type">Тип <see cref="T:System.Type" />, представляющий тип элемента массива.</param>
      <param name="bounds">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewArrayExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />, и свойством <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />, для которого задано указанное значение.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="type" /> или <paramref name="bounds" /> — <see langword="null" />.  
-или- 
Элемент <paramref name="bounds" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="bounds" /> не представляет целочисленный тип.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.NewArrayExpression" />, представляющее создание массива с указанным рангом.</summary>
      <param name="type">Тип <see cref="T:System.Type" />, представляющий тип элемента массива.</param>
      <param name="bounds">Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewArrayExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" />, и свойством <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />, для которого задано указанное значение.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="type" /> или <paramref name="bounds" /> — <see langword="null" />.  

или - 
Элемент <paramref name="bounds" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="bounds" /> не представляет целочисленный тип.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает <see cref="T:System.Linq.Expressions.NewArrayExpression" />, представляющий создание одномерного массива и его инициализацию из списка элементов.</summary>
      <param name="type">Тип <see cref="T:System.Type" />, представляющий тип элемента массива.</param>
      <param name="initializers">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />, содержащий все объекты <see cref="T:System.Linq.Expressions.Expression" />, используемые для заполнения коллекции <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewArrayExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />, и свойством <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />, для которого задано указанное значение.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="type" /> или <paramref name="initializers" /> — <see langword="null" />.  
-или- 
Элемент <paramref name="initializers" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="initializers" /> представляет тип, который не назначается для типа, который представляет <paramref name="type" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Создает <see cref="T:System.Linq.Expressions.NewArrayExpression" />, представляющий создание одномерного массива и его инициализацию из списка элементов.</summary>
      <param name="type">Тип <see cref="T:System.Type" />, представляющий тип элемента массива.</param>
      <param name="initializers">Массив объектов <see cref="T:System.Linq.Expressions.Expression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.NewArrayExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />, и свойством <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />, для которого задано указанное значение.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="type" /> или <paramref name="initializers" /> — <see langword="null" />.  

или - 
Элемент <paramref name="initializers" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> элемента <paramref name="initializers" /> представляет тип, который не назначается для типа <paramref name="type" />.</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.NodeType">
      <summary>Получает тип узла данного объекта <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Одно из значений перечисления <see cref="T:System.Linq.Expressions.ExpressionType" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий побитовую операцию дополнения.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Not" />, и свойством <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, для которого задано указанное значение.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="expression" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Унарный  оператор Not не определен для типа <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий побитовую операцию дополнения. Может быть указан метод реализации.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Not" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="expression" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который представляется этим параметром, возвращает значение <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно один аргумент.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равно <see langword="null" />, а унарный оператор Not не определен для типа <paramref name="expression" />.Type.  

или - 
Тип <paramref name="expression" />.Type (или соответствующий тип, не поддерживающий значение null, если он является типом, поддерживающим значение null) не назначается типу аргумента метода, представленного <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий сравнение неравенства.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор неравенства не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий сравнение неравенства.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="liftToNull">
        <see langword="true" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />значение <see langword="true" />; <see langword="false" />, чтобы задать для <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> значение <see langword="false" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равно <see langword="null" />, а оператор неравенства не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)">
      <summary>Возвращает выражение, представляющее поразрядное дополнение до единицы.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <returns>Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Возвращает выражение, представляющее поразрядное дополнение до единицы.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
      <returns>Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию <see langword="OR" />.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Or" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Битовый оператор <see langword="OR" /> не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее битовую операцию <see langword="OR" />.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Or" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> имеет значение <see langword="null" />, и оператор битовой операции <see langword="OR" /> не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания OR.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания OR.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания OR.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее условную операцию <see langword="OR" />, вычисляющую второй операнд, только если первый операнд имеет значение <see langword="false" />.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Битовый оператор <see langword="OR" /> не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.  

или - 
Типы <paramref name="left" />.Type и <paramref name="right" />.Type отличаются от логического типа.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее условную операцию <see langword="OR" />, вычисляющую второй операнд, только если первый операнд имеет значение <see langword="false" />.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> имеет значение <see langword="null" />, и оператор битовой операции <see langword="OR" /> не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.  
-или- 
 Метод <paramref name="method" /> равен <see langword="null" />, а типы <paramref name="left" />.Type и <paramref name="right" />.Type отличаются от логического типа.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type)">
      <summary>Создает узел <see cref="T:System.Linq.Expressions.ParameterExpression" />, который можно использовать для идентификации параметра или переменной в дереве выражения.</summary>
      <param name="type">Тип параметра или переменной.</param>
      <returns>Узел <see cref="T:System.Linq.Expressions.ParameterExpression" /> с указанными именем и типом.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)">
      <summary>Создает узел <see cref="T:System.Linq.Expressions.ParameterExpression" />, который можно использовать для идентификации параметра или переменной в дереве выражения.</summary>
      <param name="type">Тип параметра или переменной.</param>
      <param name="name">Имя параметра или переменной только для целей отладки и печати.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.ParameterExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" />, и свойствами <see cref="P:System.Linq.Expressions.Expression.Type" /> и <see cref="P:System.Linq.Expressions.ParameterExpression.Name" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="type" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий присваивание выражения и последующее уменьшение исходного выражения на 1.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий присваивание выражения и последующее уменьшение исходного выражения на 1.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий присваивание выражения и последующее увеличение исходного выражения на 1.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий присваивание выражения и последующее увеличение исходного выражения на 1.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение числа в степень.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Power" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор потенцирования не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.  

или - 
Типы <paramref name="left" />.Type и <paramref name="right" />.Type не являются <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение числа в степень.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Power" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> — <see langword="null" />, и оператор возведения в степень не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.  

или - 
<paramref name="method" /> имеет значение <see langword="null" />, и <paramref name="left" />.Type и (или) <paramref name="right" />.Type не имеют значение <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение выражения в степень и присваивание результата исходному выражению.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение выражения в степень и присваивание результата исходному выражению.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий возведение выражения в степень и присваивание результата исходному выражению.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, который уменьшает выражение на 1 и присваивает результат исходному выражению.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, который уменьшает выражение на 1 и присваивает результат исходному выражению.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, который увеличивает выражение на 1 и присваивает результат исходному выражению.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, который увеличивает выражение на 1 и присваивает результат исходному выражению.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, к которому требуется применить операции.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий результирующее выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberExpression" />, который представляет доступ к свойству с помощью метода доступа свойства.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />. Для статических свойств допускается значение NULL.</param>
      <param name="propertyAccessor">
        <see cref="T:System.Reflection.MethodInfo" />, представляющий метод доступа к свойству.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, свойство <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />, для которого задано значение <paramref name="expression" />, и свойство <see cref="P:System.Linq.Expressions.MemberExpression.Member" />, для которого задано значение <see cref="T:System.Reflection.PropertyInfo" />, представляющее свойство, к которому предоставляется доступ в <paramref name="propertyAccessor" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> — <see langword="null" />.  

или - 
Метод, который представляет <paramref name="propertyAccessor" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic), и <paramref name="expression" /> равно <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type не может быть назначен объявляющему типу метода, представленного свойством <paramref name="propertyAccessor" />.  
-или- 
Метод, который представляет <paramref name="propertyAccessor" />, не является методом доступа к свойству.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к свойству.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />. Для статических свойств допускается значение NULL.</param>
      <param name="property">Объект <see cref="T:System.Reflection.PropertyInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.MemberExpression.Member" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, и свойствами <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> и <see cref="P:System.Linq.Expressions.MemberExpression.Member" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="property" /> имеет значение <see langword="null" />.  

или - 
Свойство, которое представляет <paramref name="property" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic), и <paramref name="expression" /> равно <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Тип <paramref name="expression" />.Type не может быть назначен объявляемому типу, который представляет <paramref name="property" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.IndexExpression" />, представляющее доступ к индексированному свойству.</summary>
      <param name="instance">Объект, которому принадлежит это свойство. Если свойство статическое или общее, оно должно иметь значение NULL.</param>
      <param name="indexer">Объект <see cref="T:System.Reflection.PropertyInfo" />, представляющий индексируемое свойство.</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> объектов <see cref="T:System.Linq.Expressions.Expression" />, используемых для индексации свойства.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.IndexExpression" />, представляющее доступ к индексированному свойству.</summary>
      <param name="instance">Объект, которому принадлежит это свойство. Если свойство статическое или общее, оно должно иметь значение NULL.</param>
      <param name="indexer">Объект <see cref="T:System.Reflection.PropertyInfo" />, представляющий индексируемое свойство.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, используемых для индексации свойства.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)">
      <summary>Создает <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к свойству.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />, где <see cref="P:System.Linq.Expressions.Expression.Type" /> содержит свойство с именем <paramref name="propertyName" />. Может принимать значение <see langword="null" /> для статических свойств.</param>
      <param name="propertyName">Имя свойства для доступа.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, имеющее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, свойство <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />, для которого задано значение <paramref name="expression" />, и свойство <see cref="P:System.Linq.Expressions.MemberExpression.Member" />, для которого задано значение <see cref="T:System.Reflection.PropertyInfo" />, представляющее свойство, обозначенное с помощью параметра <paramref name="propertyName" />.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="expression" /> или <paramref name="propertyName" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Не определено свойство с именем <paramref name="propertyName" /> для типа <paramref name="expression" />.Type или его базовых типов.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.IndexExpression" />, представляющее доступ к индексированному свойству.</summary>
      <param name="instance">Объект, которому принадлежит это свойство. Если свойство статическое или общее, оно должно иметь значение NULL.</param>
      <param name="propertyName">Имя индексатора.</param>
      <param name="arguments">Массив объектов <see cref="T:System.Linq.Expressions.Expression" />, используемых для индексации свойства.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющее доступ к свойству.</summary>
      <param name="expression">Объект, в котором содержится свойство. Для статических свойств допускается значение NULL.</param>
      <param name="type">
        <see cref="P:System.Linq.Expressions.Expression.Type" />, содержащий свойство.</param>
      <param name="propertyName">Свойство для доступа.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.MemberExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.MemberExpression" />, представляющий доступ к свойству или полю.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" />, в свойстве <see cref="P:System.Linq.Expressions.Expression.Type" /> которого содержится свойство или поле с именем, заданным параметром <paramref name="propertyOrFieldName" />. Для статических членов допускается значение NULL.</param>
      <param name="propertyOrFieldName">Имя свойства или поля для доступа.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.MemberExpression" />, имеющее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, свойство <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />, для которого задано значение <paramref name="expression" />, и свойство <see cref="P:System.Linq.Expressions.MemberExpression.Member" />, для которого задано значение <see cref="T:System.Reflection.PropertyInfo" /> или <see cref="T:System.Reflection.FieldInfo" />, представляющее свойство или поле, обозначенное с помощью параметра <paramref name="propertyOrFieldName" />.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> или <paramref name="propertyOrFieldName" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Не определено свойство или поле с именем <paramref name="propertyOrFieldName" /> для типа <paramref name="expression" />.Type или его базовых типов.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий выражение, которое содержит постоянное значение типа <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Quote" />, и свойством <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, для которого задано указанное значение.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="expression" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Reduce">
      <summary>Преобразует данный узел в более простое выражение. Если CanReduce возвращает значение true, данный метод должен вернуть допустимое выражение. Данный метод может вернуть другой узел, который нужно будет преобразовать еще раз.</summary>
      <returns>Преобразованное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceAndCheck">
      <summary>Преобразует данный узел в более простое выражение. Если CanReduce возвращает значение true, данный метод должен вернуть допустимое выражение. Данный метод может вернуть другой узел, который нужно будет преобразовать еще раз.</summary>
      <returns>Преобразованное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReduceExtensions">
      <summary>Упрощает выражение до известного типа узла (не являющегося узлом Extension) или возвращает выражение, если оно имеет известный тип.</summary>
      <returns>Преобразованное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее проверку равенства ссылок.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющее проверку неравенства ссылок.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий повторное создание исключения.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий повторное создание исключения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Rethrow(System.Type)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее повторное создание исключения с заданным типом.</summary>
      <param name="type">Новый тип <see cref="T:System.Type" /> выражения.</param>
      <returns>Объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий повторное создание исключения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор return.</summary>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Return, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — значение <paramref name="target" />, а при переходе целевой метке передается значение NULL.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор return. Можно указать значение, передаваемое метке при переходе.</summary>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="value">Значение, передаваемое связанной метке при переходе.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Continue, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, а при переходе целевой метке передается значение <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор return с указанным типом. Можно указать значение, передаваемое метке при переходе.</summary>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="value">Значение, передаваемое связанной метке при переходе.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Continue, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — <paramref name="type" />, а при переходе целевой метке передается значение <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющий оператор return с указанным типом.</summary>
      <param name="target">Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, на который будет выполнен переход по <see cref="T:System.Linq.Expressions.GotoExpression" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.GotoExpression" />, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> которого имеет значение Return, свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> — <paramref name="target" />, свойство <see cref="P:System.Linq.Expressions.Expression.Type" /> — <paramref name="type" />, а при переходе целевой метке передается значение null.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий побитовую операцию сдвига вправо.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор сдвига вправо не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий побитовую операцию сдвига вправо.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не имеет значение <see langword="null" />, и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">Значение <paramref name="method" /> равно <see langword="null" />, а оператор сдвига вправо не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига вправо.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига вправо.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий битовую операцию присваивания сдвига вправо.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает экземпляр класса <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <param name="variables">Коллекция объектов <see cref="T:System.Linq.Expressions.ParameterExpression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />.</param>
      <returns>Экземпляр класса <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />, и свойством <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />, для которого задано указанное значение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])">
      <summary>Создает экземпляр класса <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <param name="variables">Массив объектов <see cref="T:System.Linq.Expressions.ParameterExpression" /> для заполнения коллекции <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />.</param>
      <returns>Экземпляр класса <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" />, и свойством <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" />, для которого задано указанное значение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического вычитания, не содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор вычитания не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического вычитания, не содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не имеет значение <see langword="null" /> , и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> имеет значение <see langword="null" />, и оператор вычитания не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, не содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, не содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, не содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию присваивания вычитания, содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <param name="conversion">Объект <see cref="T:System.Linq.Expressions.LambdaExpression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" />, содержащее свойство <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равное <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, и свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического вычитания, содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="left" /> или <paramref name="right" /> — <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор вычитания не определен для типов <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.BinaryExpression" />, представляющий операцию арифметического вычитания, содержащую проверку переполнения.</summary>
      <param name="left">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />.</param>
      <param name="right">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.BinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />, и свойствами <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> и <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="left" /> или <paramref name="right" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> не имеет значение <see langword="null" /> , и метод, который он представляет, возвращает <see langword="void" />, а не <see langword="static" /> (<see langword="Shared" /> в Visual Basic), или не принимает ровно два аргумента.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> имеет значение <see langword="null" />, и оператор вычитания не определен для <paramref name="left" />.Type и <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор <see langword="switch" /> с вариантом по умолчанию.</summary>
      <param name="switchValue">Значение, проверяемое для каждого варианта case.</param>
      <param name="defaultBody">Результат оператора switch, если <paramref name="switchValue" /> не соответствует ни одному из вариантов case.</param>
      <param name="cases">Набор вариантов case для данного выражения switch.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор <see langword="switch" /> с вариантом по умолчанию.</summary>
      <param name="switchValue">Значение, проверяемое для каждого варианта case.</param>
      <param name="defaultBody">Результат оператора switch, если <paramref name="switchValue" /> не соответствует ни одному из вариантов case.</param>
      <param name="comparison">Используемый метод проверки равенства.</param>
      <param name="cases">Набор вариантов case для данного выражения switch.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор <see langword="switch" /> с вариантом по умолчанию.</summary>
      <param name="switchValue">Значение, проверяемое для каждого варианта case.</param>
      <param name="defaultBody">Результат оператора switch, если <paramref name="switchValue" /> не соответствует ни одному из вариантов case.</param>
      <param name="comparison">Используемый метод проверки равенства.</param>
      <param name="cases">Набор вариантов case для данного выражения switch.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий <see langword="switch" /> без варианта по умолчанию.</summary>
      <param name="switchValue">Значение, проверяемое для каждого варианта case.</param>
      <param name="cases">Набор вариантов case для данного выражения switch.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор <see langword="switch" /> с вариантом по умолчанию.</summary>
      <param name="type">Тип результата оператора switch.</param>
      <param name="switchValue">Значение, проверяемое для каждого варианта case.</param>
      <param name="defaultBody">Результат оператора switch, если <paramref name="switchValue" /> не соответствует ни одному из вариантов case.</param>
      <param name="comparison">Используемый метод проверки равенства.</param>
      <param name="cases">Набор вариантов case для данного выражения switch.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.SwitchExpression" />, представляющий оператор <see langword="switch" /> с вариантом по умолчанию.</summary>
      <param name="type">Тип результата оператора switch.</param>
      <param name="switchValue">Значение, проверяемое для каждого варианта case.</param>
      <param name="defaultBody">Результат оператора switch, если <paramref name="switchValue" /> не соответствует ни одному из вариантов case.</param>
      <param name="comparison">Используемый метод проверки равенства.</param>
      <param name="cases">Набор вариантов case для данного выражения switch.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.SwitchExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.SwitchCase" /> для использования в объекте <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
      <param name="body">Тело варианта case.</param>
      <param name="testValues">Тестовые значения варианта case.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.SwitchCase" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.SwitchCase" /> для использования в выражении <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
      <param name="body">Тело варианта case.</param>
      <param name="testValues">Тестовые значения варианта case.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.SwitchCase" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)">
      <summary>Создает экземпляр класса <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <param name="fileName">Объект <see cref="T:System.String" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.</param>
      <returns>
        <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, для свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> которого задано указанное значение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)">
      <summary>Создает экземпляр класса <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <param name="fileName">Объект <see cref="T:System.String" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.</param>
      <param name="language">Объект <see cref="T:System.Guid" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, содержащее свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> и <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />, для которых задано указанное значение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)">
      <summary>Создает экземпляр класса <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <param name="fileName">Объект <see cref="T:System.String" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.</param>
      <param name="language">Объект <see cref="T:System.Guid" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />.</param>
      <param name="languageVendor">Объект <see cref="T:System.Guid" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, содержащее свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> и <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />, для которых задано указанное значение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>Создает экземпляр класса <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</summary>
      <param name="fileName">Объект <see cref="T:System.String" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />.</param>
      <param name="language">Объект <see cref="T:System.Guid" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />.</param>
      <param name="languageVendor">Объект <see cref="T:System.Guid" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />.</param>
      <param name="documentType">Объект <see cref="T:System.Guid" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />, содержащее свойства <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />,<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />, <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> и <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />, для которых задано указанное значение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий создание исключения.</summary>
      <param name="value">Объект <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее исключение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее создание исключения с заданным типом.</summary>
      <param name="value">Объект <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="type">Новый тип <see cref="T:System.Type" /> выражения.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее исключение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ToString">
      <summary>Возвращает текстовое представление текущего объекта <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Текстовое представление выражения <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.TryExpression" />, представляющее блок try с произвольным числом операторов catch и без блоков fault и finally.</summary>
      <param name="body">Тело блока try.</param>
      <param name="handlers">Массив из нуля или более выражений <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющих операторы catch, которые следует связать с блоком try.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.TryExpression" />, представляющий блок try с произвольным числом операторов catch и блоком finally.</summary>
      <param name="body">Тело блока try.</param>
      <param name="finally">Тело блока finally.</param>
      <param name="handlers">Массив из нуля или более выражений <see cref="T:System.Linq.Expressions.CatchBlock" />, представляющих операторы catch, которые следует связать с блоком try.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.TryExpression" />, представляющий блок try с блоком fault и без операторов catch.</summary>
      <param name="body">Тело блока try.</param>
      <param name="fault">Тело блока fault.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.TryExpression" />, представляющий блок try с блоком finally и без операторов catch.</summary>
      <param name="body">Тело блока try.</param>
      <param name="finally">Тело блока finally.</param>
      <returns>Созданный <see cref="T:System.Linq.Expressions.TryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)">
      <summary>Создает объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий универсальный тип делегата System.Action с заданными аргументами типа.</summary>
      <param name="typeArgs">Массив от объектов Type, указывающих аргументы типа для типа делегата System.Action.</param>
      <param name="actionType">После выполнения возврата этим методом содержит универсальный тип делегата System.Action с определенным типом аргументов. Содержит NULL, если ни один универсальный делегат System.Action не соответствует <paramref name="typeArgs" />. Этот параметр передается неинициализированным.</param>
      <returns>Значение <see langword="true" />, если тип делегата System.Action создан для определенного <paramref name="typeArgs" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)">
      <summary>Создает объект <see cref="P:System.Linq.Expressions.Expression.Type" />, представляющий универсальный тип делегата System.Func с заданными аргументами типа. Аргумент последнего типа задает тип возвращаемого значения созданного делегата.</summary>
      <param name="typeArgs">Массив объектов Type, указывающих аргументы типа для типа делегата System.Func.</param>
      <param name="funcType">После выполнения возврата этим методом содержит универсальный тип делегата System.Func с определенным типом аргументов. Содержит NULL, если ни один универсальный делегат System.Func не соответствует <paramref name="typeArgs" />. Этот параметр передается неинициализированным.</param>
      <returns>Значение <see langword="true" />, если тип делегата System.Func создан для определенного <paramref name="typeArgs" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.Expression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="T:System.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий преобразование явной ссылки или упаковки, где <see langword="null" /> поддерживается в случае неудачного преобразования.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="type">Объект <see cref="T:System.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.Expression.Type" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.Expression.Type" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> или <paramref name="type" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />, сравнивающее идентификацию типов времени выполнения.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="T:System.Linq.Expressions.Expression" />.</param>
      <param name="type">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" />, и свойствами <see cref="T:System.Linq.Expressions.Expression" /> и <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />, для которых заданы указанные значения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает объект <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />.</param>
      <param name="type">Объект <see cref="P:System.Linq.Expressions.Expression.Type" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" />, и свойствами <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> и <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> или <paramref name="type" /> — <see langword="null" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию "унарный плюс".</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством <see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />, и свойством <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, для которого задано указанное значение.</returns>
      <exception cref="T:System.ArgumentNullException">Свойство <paramref name="expression" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Оператор "унарный плюс" не определен для типа <paramref name="expression" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Создает <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющий операцию "унарный плюс".</summary>
      <param name="expression">Объект <see cref="T:System.Linq.Expressions.Expression" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />.</param>
      <param name="method">Объект <see cref="T:System.Reflection.MethodInfo" />, который следует задать в качестве значения свойства <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />.</param>
      <returns>Выражение <see cref="T:System.Linq.Expressions.UnaryExpression" /> со свойством<see cref="P:System.Linq.Expressions.Expression.NodeType" />, равным <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" />, и свойствами <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> и <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />, для которых заданы указанные значения.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Значение параметра <paramref name="method" /> не равно <see langword="null" />, и метод, который представляется этим параметром, возвращает значение <see langword="void" />, не является <see langword="static" /> (<see langword="Shared" /> в Visual Basic) и не принимает ровно один аргумент.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> равно <see langword="null" />, а оператор "Унарный плюс" не определен для типа <paramref name="expression" />.  

или - 
Тип <paramref name="expression" />.Type (или соответствующий тип, не поддерживающий значение null, если он является типом, поддерживающим значение null) не назначается типу аргумента метода, представленного <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)">
      <summary>Создает выражение <see cref="T:System.Linq.Expressions.UnaryExpression" />, представляющее явную распаковку-преобразование.</summary>
      <param name="expression">
        <see cref="T:System.Linq.Expressions.Expression" /> для распаковки-преобразования.</param>
      <param name="type">Новый тип <see cref="T:System.Type" /> выражения.</param>
      <returns>Экземпляр <see cref="T:System.Linq.Expressions.UnaryExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type)">
      <summary>Создает узел <see cref="T:System.Linq.Expressions.ParameterExpression" />, который можно использовать для идентификации параметра или переменной в дереве выражения.</summary>
      <param name="type">Тип параметра или переменной.</param>
      <returns>Узел <see cref="T:System.Linq.Expressions.ParameterExpression" /> с указанными именем и типом.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)">
      <summary>Создает узел <see cref="T:System.Linq.Expressions.ParameterExpression" />, который можно использовать для идентификации параметра или переменной в дереве выражения.</summary>
      <param name="type">Тип параметра или переменной.</param>
      <param name="name">Имя параметра или переменной. Это имя используется только для целей отладки и печати.</param>
      <returns>Узел <see cref="T:System.Linq.Expressions.ParameterExpression" /> с указанными именем и типом.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Упрощает узел и вызывает делегат-посетитель для преобразованного выражения. Данный метод создает исключение, если узел невозможно упростить.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Func`2" />.</param>
      <returns>Просмотренное выражение или выражение, которое должно заменить его в дереве.</returns>
    </member>
    <member name="T:System.Linq.Expressions.Expression`1">
      <summary>Представляет строго типизированное лямбда-выражение в виде структуры данные в форме дерева выражений. Этот класс не наследуется.</summary>
      <typeparam name="TDelegate">Тип делегата, который представляет <see cref="T:System.Linq.Expressions.Expression`1" />.</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile">
      <summary>Компилирует лямбда-выражение, описанное с помощью дерева выражений в исполняемый код и создает делегат, представляющий лямбда-выражение.</summary>
      <returns>Делегат типа <paramref name="TDelegate" />, который представляет скомпилированное лямбда-выражение, описанное с помощью <see cref="T:System.Linq.Expressions.Expression`1" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)">
      <summary>Компилирует лямбда-выражение, описанное с помощью дерева выражений, в интерпретированный или скомпилированный код и создает делегат, представляющий лямбда-выражение.</summary>
      <param name="preferInterpretation">
        <see langword="true" />, чтобы указать, что выражение должно быть скомпилировано в интерпретированную форму, если она доступна; в противном случае — <see langword="false" />.</param>
      <returns>Делегат, представляющий скомпилированное лямбда-выражение, описанное <see cref="T:System.Linq.Expressions.Expression`1" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>Производит делегата, который представляет лямбда-выражение.</summary>
      <param name="debugInfoGenerator">Генератор отладочной информации, используемый компилятором для пометки точек следования и создания заметок для локальных переменных.</param>
      <returns>Делегат, содержащий скомпилированную версию лямбда-выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="body">Свойство <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> результата.</param>
      <param name="parameters">Свойство <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionType">
      <summary>Описывает типы узлов для узлов дерева выражений.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Add">
      <summary>Операция арифметического сложения, например <c>a + b</c>, без проверки переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssign">
      <summary>Операция составного присваивания арифметического сложения, например <c>(a += b)</c>, без проверки переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddAssignChecked">
      <summary>Операция составного присваивания арифметического сложения, например <c>(a += b)</c>, с проверкой переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AddChecked">
      <summary>Операция арифметического сложения, например <c>(a + b)</c>, с проверкой переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.And">
      <summary>Побитовая или логическая операция <see langword="AND" />, например <c>(a &amp; b)</c> в C# и <c>(a And b)</c> в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAlso">
      <summary>Условная операция <see langword="AND" />, вычисляющая второй операнд, только если первый операнд имеет значение <see langword="true" />. Соответствует <c>(a &amp;&amp; b)</c> в C# и <c>(b AndAlso)</c> в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.AndAssign">
      <summary>Побитовая или логическая операция составного присваивания <see langword="AND" />, например <c>(a &amp;= b)</c> в C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayIndex">
      <summary>Операция индексации в одномерном массиве, например <c>array[index]</c> в C# или <c>array(index)</c> в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ArrayLength">
      <summary>Операция получения длины одномерного массива, например <c>array.Length</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Assign">
      <summary>Операция присваивания, например <c>(a = b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Block">
      <summary>Блок выражений.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Call">
      <summary>Вызов метода, например выражение <c>obj.sampleMethod()</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Coalesce">
      <summary>Узел, представляющий операцию объединения null, например <c>(a ?? b)</c> в C# или <c>If(a, b)</c> в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Conditional">
      <summary>Условная операция, например <c>a &gt; b ? a : b</c> в C# или <c>If(a &gt; b, a, b)</c> в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Constant">
      <summary>Константа.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Convert">
      <summary>Операция приведения или преобразования, такая как <c>(SampleType) obj</c> в C# или <c>CType (obj, SampleType)</c> в Visual Basic. Если преобразованное значение слишком велико для целевого типа, в ходе числового преобразования не создается исключение.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ConvertChecked">
      <summary>Операция приведения или преобразования, такая как <c>(SampleType) obj</c> в C# или <c>CType (obj, SampleType)</c> в Visual Basic. Если преобразованное значение не соответствует целевому типу, в ходе числового преобразования создается исключение.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DebugInfo">
      <summary>Сведения для отладки.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Decrement">
      <summary>Унарная операция декремента, такая как <c>(a – 1)</c> в C# и Visual Basic. Сам объект <c>a</c> не должен быть изменен.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Default">
      <summary>Значение по умолчанию.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Divide">
      <summary>Операция деления, например <c>(a / b)</c>, для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.DivideAssign">
      <summary>Операция составного присваивания арифметического деления, например <c>(a /= b)</c>, для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Dynamic">
      <summary>Динамическая операция.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Equal">
      <summary>Узел, представляющий сравнение для определения равенства, например <c>(a == b)</c> в C# или <c>(a = b)</c> в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOr">
      <summary>Побитовая или логическая операция <see langword="XOR" />, например <c>(a ^ b)</c> в C# или <c>(a Xor b)</c> в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign">
      <summary>Побитовая или логическая операция составного присваивания <see langword="XOR" />, например <c>(a ^= b)</c> в C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Extension">
      <summary>Выражение расширения.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Goto">
      <summary>Выражение "перейти", например <c>goto Label</c> в C# или <c>GoTo Label</c> в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThan">
      <summary>Числовое сравнение "больше, чем", например <c>(a &gt; b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual">
      <summary>Сравнение "больше или равно", например <c>(a &gt;= b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Increment">
      <summary>Унарная операция инкремента, такая как <c>(a + 1)</c>, в C# и Visual Basic. Сам объект <c>a</c> не должен быть изменен.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Index">
      <summary>Операция индекса или операция, осуществляющая доступ к свойству, которое принимает аргументы.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Invoke">
      <summary>Операция, вызывающая делегат или лямбда-выражение, например <c>sampleDelegate.Invoke()</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsFalse">
      <summary>Значение условия <see langword="false" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.IsTrue">
      <summary>Значение условия <see langword="true" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Label">
      <summary>Метка.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Lambda">
      <summary>Лямбда-выражение, например <c>a =&gt; a + a</c> в C# или <c>Function(a) a + a</c> в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShift">
      <summary>Побитовая операция сдвига влево, например <c>(a &lt;&lt; b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign">
      <summary>Побитовая операция составного присваивания сдвига влево, например <c>(a &lt;&lt;= b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThan">
      <summary>Числовое сравнение "меньше, чем", например <c>(a &lt; b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual">
      <summary>Числовое сравнение "меньше или равно", например <c>(a &lt;= b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ListInit">
      <summary>Операция создания нового объекта <see cref="T:System.Collections.IEnumerable" /> и его инициализации из списка элементов, например <c>new List&lt;SampleType&gt;(){ a, b, c }</c> в C# или <c>Dim sampleList = { a, b, c }</c> в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Loop">
      <summary>Цикл, такой как <c>for</c> или <c>while</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberAccess">
      <summary>Операция чтения из поля или свойства, например <c>obj.SampleProperty</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MemberInit">
      <summary>Операция создания нового объекта и инициализации одного или нескольких его членов из списка элементов, например <c>new Point { X = 1, Y = 2 }</c> в C# или <c>New Point With {.X = 1, .Y = 2}</c> в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Modulo">
      <summary>Операция получения арифметического остатка, например <c>(a % b)</c> в C# или <c>(a Mod b)</c> в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.ModuloAssign">
      <summary>Операция составного присваивания арифметического остатка, например <c>(a %= b)</c> в C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Multiply">
      <summary>Операция арифметического умножения, например <c>(a * b)</c>, без проверки переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssign">
      <summary>Операция составного присваивания арифметического умножения, например <c>(a *= b)</c>, без проверки переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked">
      <summary>Операция составного присваивания арифметического умножения, например <c>(a *= b)</c>, с проверкой переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.MultiplyChecked">
      <summary>Операция арифметического умножения, например <c>(a * b)</c>, с проверкой переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Negate">
      <summary>Операция арифметического изменения знака, например <c>(-a)</c>. Сам объект <c>a</c> не должен быть изменен.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NegateChecked">
      <summary>Операция арифметического изменения знака, например <c>(-a)</c>, с проверкой переполнения. Сам объект <c>a</c> не должен быть изменен.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.New">
      <summary>Операция вызова конструктора для создания нового объекта, например <c>new SampleType()</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayBounds">
      <summary>Операция создания нового массива, где указаны границы всех измерений, например <c>new SampleType[dim1, dim2]</c> в C# или <c>New SampleType(dim1, dim2)</c> в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NewArrayInit">
      <summary>Операция создания нового одномерного массива и его инициализации из списка элементов, например <c>new SampleType[]{a, b, c}</c> в C# или <c>New SampleType(){a, b, c}</c> в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Not">
      <summary>Побитовая операция дополнения или логического отрицания. В C# она эквивалентна операциям <c>(~a)</c> для целочисленных типов и <c>(!a)</c> для логических значений. В Visual Basic она эквивалентна операции <c>(Not a)</c>. Сам объект <c>a</c> не должен быть изменен.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.NotEqual">
      <summary>Операция определения неравенства, например <c>(a != b)</c> в C# или <c>(a &lt;&gt; b)</c> в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OnesComplement">
      <summary>Операция дополнения до единицы, например <c>(~a)</c> в C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Or">
      <summary>Побитовая или логическая операция <see langword="OR" />, например <c>(a | b)</c> в C# или <c>(a Or b)</c> в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrAssign">
      <summary>Побитовое или логическое составное присваивание <see langword="OR" />, например <c>(a |= b)</c> в C#.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.OrElse">
      <summary>Сокращенная условная операция <see langword="OR" />, например <c>(a || b)</c> в C# или <c>(a OrElse b)</c> в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Parameter">
      <summary>Ссылка на параметр или переменную, определенную в контексте выражения. Для получения дополнительной информации см. <see cref="T:System.Linq.Expressions.ParameterExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostDecrementAssign">
      <summary>Унарное постфиксное уменьшение, например <c>(a--)</c>. Должен быть изменен сам объект <c>a</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PostIncrementAssign">
      <summary>Унарное постфиксное увеличение, например <c>(a++)</c>. Должен быть изменен сам объект <c>a</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Power">
      <summary>Математическая операция возведения числа в степень, например <c>(a ^ b)</c> в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PowerAssign">
      <summary>Операция составного присваивания возведения числа в степень, например <c>(a ^= b)</c> в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreDecrementAssign">
      <summary>Унарное префиксное уменьшение, например <c>(--a)</c>. Должен быть изменен сам объект <c>a</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.PreIncrementAssign">
      <summary>Унарное префиксное увеличение, например <c>(++a)</c>. Должен быть изменен сам объект <c>a</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Quote">
      <summary>Выражение, содержащее постоянное значение типа <see cref="T:System.Linq.Expressions.Expression" />. узел <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> может содержать ссылку на параметры, определенные в контексте представленного выражения.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShift">
      <summary>Побитовая операция сдвига вправо, например <c>(a &gt;&gt; b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RightShiftAssign">
      <summary>Побитовая операция составного присваивания сдвига вправо, например <c>(a &gt;&gt;= b)</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.RuntimeVariables">
      <summary>Список переменных времени выполнения. Для получения дополнительной информации см. <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Subtract">
      <summary>Операция арифметического вычитания, например <c>(a - b)</c>, без проверки переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssign">
      <summary>Операция составного присваивания арифметического вычитания, например <c>(a -= b)</c>, без проверки переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked">
      <summary>Операция составного присваивания арифметического вычитания, например <c>(a -= b)</c>, с проверкой переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.SubtractChecked">
      <summary>Операция арифметического вычитания, например <c>(a – b)</c>, с проверкой переполнения для числовых операндов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Switch">
      <summary>Операция выбора, например <see langword="switch" /> в C# или <see langword="Select Case" /> в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Throw">
      <summary>Операция создания исключения, например <c>throw new Exception()</c>.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Try">
      <summary>Выражение <see langword="try-catch" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeAs">
      <summary>Преобразование явной ссылки или упаковки, где в случае неудачного преобразования предоставляется <see langword="null" />, например <c>(obj as SampleType)</c> в C# или <c>TryCast(obj, SampleType)</c> в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeEqual">
      <summary>Проверка совпадения типа.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.TypeIs">
      <summary>Проверка типа, например <c>obj is SampleType</c> в C# или <c>TypeOf obj is SampleType</c> в Visual Basic.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.UnaryPlus">
      <summary>Унарная операция "плюс", например <c>(+a)</c>. Результатом заранее определенной унарной операции "плюс" является просто значение операнда, но определенные пользователем реализации могут иметь нетривиальные результаты.</summary>
    </member>
    <member name="F:System.Linq.Expressions.ExpressionType.Unbox">
      <summary>Операция распаковки-преобразования типа значения, например инструкции <see langword="unbox" /> и <see langword="unbox.any" /> в MSIL.</summary>
    </member>
    <member name="T:System.Linq.Expressions.ExpressionVisitor">
      <summary>Представляет метод просмотра или перезаписи деревьев выражений.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Linq.Expressions.ExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
      <summary>Распределяет список выражений среди одного или нескольких более узких методов просмотра в классе.</summary>
      <param name="nodes">Выражения, которые необходимо просмотреть.</param>
      <returns>Измененный список выражений в случае изменения любого из его элементов; в противном случае возвращается исходный список выражений.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
      <summary>Распределяет выражение среди одного или нескольких более узких методов просмотра в классе.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.Visit``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.Func{``0,``0})">
      <summary>Просматривает все узлы в коллекции, используя указанный метод просмотра элементов.</summary>
      <param name="nodes">Узлы, которое необходимо просмотреть.</param>
      <param name="elementVisitor">Делегат, который просматривает отдельный элемент, при необходимости заменяя его новым элементом.</param>
      <typeparam name="T">Тип узлов.</typeparam>
      <returns>Измененный список узлов в случае изменения любого из его элементов; в противном случае возвращается исходный список узлов.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(``0,System.String)">
      <summary>Просматривает выражение, приводя результат к типу исходного выражения.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <param name="callerName">Имя метода вызова; используется для создания более подробного сообщения об ошибке.</param>
      <typeparam name="T">Тип выражения.</typeparam>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
      <exception cref="T:System.InvalidOperationException">Метод посещения данного узла вернул другой тип.</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitAndConvert``1(System.Collections.ObjectModel.ReadOnlyCollection{``0},System.String)">
      <summary>Просматривает все выражения в коллекции, приводя результат к типу исходного выражения.</summary>
      <param name="nodes">Выражения, которые необходимо просмотреть.</param>
      <param name="callerName">Имя метода вызова; используется для создания более подробного сообщения об ошибке.</param>
      <typeparam name="T">Тип выражений.</typeparam>
      <returns>Измененная коллекция выражений в случае изменения любого выражения; в противном случае возвращается исходная коллекция выражений.</returns>
      <exception cref="T:System.InvalidOperationException">Метод посещения одного из выражений вернул другой тип.</exception>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.BinaryExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.BlockExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.CatchBlock" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.ConditionalExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
      <summary>Просматривает выражение <see cref="T:System.Linq.Expressions.ConstantExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDebugInfo(System.Linq.Expressions.DebugInfoExpression)">
      <summary>Просматривает выражение <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
      <summary>Просматривает выражение <see cref="T:System.Linq.Expressions.DefaultExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.DynamicExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.ElementInit" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
      <summary>Просматривает дочерний элемент выражения расширения.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.GotoExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.IndexExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.InvocationExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.LabelExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
      <summary>Просматривает выражение <see cref="T:System.Linq.Expressions.LabelTarget" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.Expression`1" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <typeparam name="T">Тип делегата.</typeparam>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.ListInitExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.LoopExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.MemberExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.MemberAssignment" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.MemberBinding" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.MemberListBinding" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.MemberMemberBinding" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.MethodCallExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.NewExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.NewArrayExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
      <summary>Просматривает выражение <see cref="T:System.Linq.Expressions.ParameterExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.SwitchCase" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.TryExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
      <summary>Просматривает дочерний элемент выражения <see cref="T:System.Linq.Expressions.UnaryExpression" />.</summary>
      <param name="node">Выражение, которое необходимо просмотреть.</param>
      <returns>Измененное выражение в случае изменения самого выражения или любого его подвыражения; в противном случае возвращается исходное выражение.</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpression">
      <summary>Представляет безусловный переход. Включает инструкции return, break и continue, а также другие переходы.</summary>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Kind">
      <summary>Вид выражения "go to". Используется только в информационных целях.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.GotoExpressionKind" />, представляющий вид выражения "go to".</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Target">
      <summary>Целевая метка, к которой нужно перейти из данного узла.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий целевую метку для данного узла.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.GotoExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.GotoExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="target">Свойство <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> результата.</param>
      <param name="value">Свойство <see cref="P:System.Linq.Expressions.GotoExpression.Value" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="P:System.Linq.Expressions.GotoExpression.Value">
      <summary>Значение, передаваемое целевому выражению, или NULL, если целевой тип — System.Void.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий значение, переданное целевому выражению, или NULL.</returns>
    </member>
    <member name="T:System.Linq.Expressions.GotoExpressionKind">
      <summary>Задает тип перехода, представляемый этим выражением <see cref="T:System.Linq.Expressions.GotoExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Break">
      <summary>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор break.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Continue">
      <summary>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор continue.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Goto">
      <summary>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее переход в некоторую позицию.</summary>
    </member>
    <member name="F:System.Linq.Expressions.GotoExpressionKind.Return">
      <summary>Выражение <see cref="T:System.Linq.Expressions.GotoExpression" />, представляющее оператор return.</summary>
    </member>
    <member name="T:System.Linq.Expressions.IArgumentProvider">
      <summary>Предоставляет внутренний интерфейс для доступа к аргументам нескольких узлов дерева (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression и IndexExpression).  Этот интерфейс API предназначен только для внутреннего использования.</summary>
    </member>
    <member name="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount">
      <summary>Возвращает число аргументов для узла дерева выражения. Этот интерфейс API предназначен только для внутреннего использования.</summary>
      <returns>Число аргументов для узла дерева выражения в виде <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)">
      <summary>Возвращает аргумент по индексу <paramref name="index" />, создавая исключение, если индекс <paramref name="index" /> находится вне допустимых границ. Этот интерфейс API предназначен только для внутреннего использования.</summary>
      <param name="index">Индекс аргумента.</param>
      <returns>Аргумент по индексу.</returns>
    </member>
    <member name="T:System.Linq.Expressions.IDynamicExpression">
      <summary>Предоставляет внутренний интерфейс для доступа к аргументам узлов дерева DynamicExpression, а также к функциональным возможностям CallSite и Rewriting.  Не следует использовать этот API.  Он является открытым только из-за рефакторинга DLL и существует только для внутренней оптимизации производительности.</summary>
    </member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.CreateCallSite">
      <summary>При необходимости создает CallSite и возвращает этот CallSite для полиморфного встроенного кэша DynamicExpression.  Не следует использовать этот тип.  Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.</summary>
      <returns>CallSite для полиморфного встроенного кэша DynamicExpression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IDynamicExpression.DelegateType">
      <summary>Получает тип делегата, используемого CallSite, который является типом правил, используемых в полиморфном встроенном кэше динамического выражения.</summary>
      <returns>Тип делегата, используемый CallSite.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IDynamicExpression.Rewrite(System.Linq.Expressions.Expression[])">
      <summary>Переопределяет этот узел, заменяя аргументы динамического выражения предоставленными значениями.  Количество <paramref name="args" /> должно совпадать с количеством аргументов в текущем выражении.  Не следует использовать этот тип.  Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.  Этот вспомогательный метод позволяет перезаписывать узлы независимо от конкретной реализации класса, производного от DynamicExpression, который используется на месте вызова.</summary>
      <param name="args">Аргументы, используемые для замены этого узла.</param>
      <returns>Переопределенный узел, но если никакие изменения не вносились, то возвращается тот же узел.</returns>
    </member>
    <member name="T:System.Linq.Expressions.IndexExpression">
      <summary>Представляет индексацию свойства или массива.</summary>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Arguments">
      <summary>Получает аргументы, которые будут использоваться для индексации свойства или массива.</summary>
      <returns>Предназначенная только для чтения коллекция, содержащая аргументы, которые будут использоваться для индексации свойства или массива.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Indexer">
      <summary>Получает объект <see cref="T:System.Reflection.PropertyInfo" /> для свойства, если выражение представляет индексированное свойство; в противном случае возвращает значение NULL.</summary>
      <returns>Объект <see cref="T:System.Reflection.PropertyInfo" /> для свойства, если выражение представляет индексированное свойство; в противном случае — значение NULL.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Object">
      <summary>Объект для индексации.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.Expression" />, представляющее индексируемый объект.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>Возвращает число аргументов для узла дерева выражения.  Не следует использовать этот член.  Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.</summary>
      <returns>Возвращает <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>Возвращает аргумент в индексе, создавая исключение, если индекс вне допустимых границ.  Не следует использовать этот член.  Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.</summary>
      <param name="index">Индекс аргумента.</param>
      <returns>Возвращает <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.IndexExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.IndexExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.IndexExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="object">Свойство <see cref="P:System.Linq.Expressions.IndexExpression.Object" /> результата.</param>
      <param name="arguments">Свойство <see cref="P:System.Linq.Expressions.IndexExpression.Arguments" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="T:System.Linq.Expressions.InvocationExpression">
      <summary>Представляет выражение, применяющее делегата или лямбда-выражения к списку выражений аргумента.</summary>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Arguments">
      <summary>Получает аргументы, к которым применяется делегат или лямбда-выражение.</summary>
      <returns>Коллекция <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.Expression" />, представляющих аргументы, к которым применяется делегат.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Expression">
      <summary>Получает делегата или лямбда-выражение для применения.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> представляющий делегата для применения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.NodeType">
      <summary>Возвращает тип узла данного выражения. При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>Возвращает число аргументов для узла дерева выражения.  Не следует использовать этот член.  Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.</summary>
      <returns>Число аргументов для узла дерева выражения в виде <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>Возвращает аргумент в индексе, создавая исключение, если индекс вне допустимых границ.  Не следует использовать этот член.  Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.</summary>
      <param name="index">Индекс аргумента.</param>
      <returns>Аргумент в индексе, вызываемый, если индекс находится вне допустимых границ, как <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.InvocationExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.InvocationExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.InvocationExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="expression">Свойство <see cref="P:System.Linq.Expressions.InvocationExpression.Expression" /> результата.</param>
      <param name="arguments">Свойство <see cref="P:System.Linq.Expressions.InvocationExpression.Arguments" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LabelExpression">
      <summary>Представляет метку, которую можно поместить в контекст любого выражения <see cref="T:System.Linq.Expressions.Expression" />. При перемещении к этой метке будет получено значение соответствующего выражения <see cref="T:System.Linq.Expressions.GotoExpression" />. В противном случае будет получено значение <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" />. Если тип <see cref="T:System.Type" /> имеет значение System.Void, никакое значение не предоставляется.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.DefaultValue">
      <summary>Значение выражения <see cref="T:System.Linq.Expressions.LabelExpression" />, если метка была достигнута с помощью стандартного потока управления (например, без применения оператора goto).</summary>
      <returns>Объект выражения, представляющий значение объекта <see cref="T:System.Linq.Expressions.LabelExpression" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Target">
      <summary>Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, с которым связана данная метка.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, с которым связана данная метка.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.LabelExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="target">Свойство <see cref="P:System.Linq.Expressions.LabelExpression.Target" /> результата.</param>
      <param name="defaultValue">Свойство <see cref="P:System.Linq.Expressions.LabelExpression.DefaultValue" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LabelTarget">
      <summary>Служит для представления целевой точки выражения <see cref="T:System.Linq.Expressions.GotoExpression" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Name">
      <summary>Получает имя метки.</summary>
      <returns>Имя метки.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LabelTarget.ToString">
      <summary>Возвращает строку <see cref="T:System.String" />, которая представляет текущий объект <see cref="T:System.Object" />.</summary>
      <returns>Объект <see cref="T:System.String" />. представляющий текущий объект <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LabelTarget.Type">
      <summary>Тип значения, которое передается при переходе к метке (или <see cref="T:System.Void" />, если значение передавать не нужно).</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип значения, которое передается при переходе к метке, или <see cref="T:System.Void" />, если значение передавать не нужно.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LambdaExpression">
      <summary>Описывает лямбда-выражение. Оно захватывает блок кода, сходный с телом метода .NET.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Body">
      <summary>Возвращает тело лямбда-выражения.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, который предоставляет тело лямбда-выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile">
      <summary>Производит делегата, который представляет лямбда-выражение.</summary>
      <returns>Объект <see cref="T:System.Delegate" />, содержащий скомпилированную версию лямбда-выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Boolean)">
      <summary>Создает интерпретированный или скомпилированный делегат, который представляет лямбда-выражение.</summary>
      <param name="preferInterpretation">
        <see langword="true" />, чтобы указать, что выражение должно быть скомпилировано в интерпретируемой форме, если она доступна; в противном случае — <see langword="false" />.</param>
      <returns>Делегат, представляющий скомпилированное лямбда-выражение, описанное объектом <see cref="T:System.Linq.Expressions.LambdaExpression" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LambdaExpression.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
      <summary>Производит делегата, который представляет лямбда-выражение.</summary>
      <param name="debugInfoGenerator">Генератор отладочной информации, используемый компилятором для пометки точек следования и создания заметок для локальных переменных.</param>
      <returns>Делегат, содержащий скомпилированную версию лямбда-выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Name">
      <summary>Получает имя лямбда-выражения.</summary>
      <returns>Имя лямбда-выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Parameters">
      <summary>Возвращает параметры лямбда-выражения.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.ParameterExpression" />, предоставляющих параметры лямбда-выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.ReturnType">
      <summary>Получает возвращаемый тип лямбда-выражения.</summary>
      <returns>Объект <see cref="T:System.Type" />, представляющий тип лямбда-выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.TailCall">
      <summary>Получает значение, которое определяет, можно ли компилировать лямбда-выражение с оптимизацией с помощью вызова с префиксом tail.</summary>
      <returns>
        <see langword="true" />значение, если лямбда-выражение будет скомпилировано с оптимизацией вызова с префиксом tail; в противном случае —. <see langword="false" /></returns>
    </member>
    <member name="P:System.Linq.Expressions.LambdaExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.LambdaExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ListInitExpression">
      <summary>Представляет вызов конструктора, который содержит инициализатор коллекции.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.CanReduce">
      <summary>Возвращает значение, указывающее, можно ли сократить узел дерева выражений.</summary>
      <returns>
        <see langword="true" />значение, если узел можно уменьшить; в противном случае —. <see langword="false" /></returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Initializers">
      <summary>Получает инициализаторы элементов, которые используются для инициализации коллекции.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.ElementInit" />, представляющих элементы, которые используются для инициализации коллекции.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NewExpression">
      <summary>Возвращает выражение содержащее вызов в конструктор типа коллекции.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" />, представляющий вызов в конструктор типа коллекции.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Reduce">
      <summary>Сокращает узел бинарных выражений до более простого выражения.</summary>
      <returns>Преобразованное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ListInitExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.ListInitExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ListInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="newExpression">Свойство <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> результата.</param>
      <param name="initializers">Свойство <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="T:System.Linq.Expressions.LoopExpression">
      <summary>Представляет бесконечный цикл. Может быть прерван с помощью оператора break.</summary>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Body">
      <summary>Получает объект <see cref="T:System.Linq.Expressions.Expression" />, являющийся телом цикла.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, являющийся телом цикла.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.BreakLabel">
      <summary>Получает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, который используется телом цикла в качестве целевого выражения оператора break.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, который используется телом цикла в качестве целевого выражения оператора break.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.ContinueLabel">
      <summary>Получает объект <see cref="T:System.Linq.Expressions.LabelTarget" />, который используется телом цикла в качестве целевого выражения оператора continue.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, который используется телом цикла в качестве целевого выражения оператора continue.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.NodeType">
      <summary>Возвращает тип узла данного выражения. При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.LoopExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.LoopExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.LoopExpression.Update(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="breakLabel">Свойство <see cref="P:System.Linq.Expressions.LoopExpression.BreakLabel" /> результата.</param>
      <param name="continueLabel">Свойство <see cref="P:System.Linq.Expressions.LoopExpression.ContinueLabel" /> результата.</param>
      <param name="body">Свойство <see cref="P:System.Linq.Expressions.LoopExpression.Body" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberAssignment">
      <summary>Представляет операцию присваивания для поля или свойства объекта.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberAssignment.Expression">
      <summary>Получает выражение для назначения полю или свойству.</summary>
      <returns>Тип <see cref="T:System.Linq.Expressions.Expression" />, представляющий значение для назначения полю или свойству.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberAssignment.Update(System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="expression">Свойство <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBinding">
      <summary>Обеспечивает базовый класс, производными от которого являются классы, представляющие привязки, используемые для инициализации элементов созданных производных объекта.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.#ctor(System.Linq.Expressions.MemberBindingType,System.Reflection.MemberInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Linq.Expressions.MemberBinding" />.</summary>
      <param name="type">Тип <see cref="T:System.Linq.Expressions.MemberBindingType" />, дискриминирующий тип представленной привязки.</param>
      <param name="member">Тип <see cref="T:System.Reflection.MemberInfo" />, представляющие поле или свойство для инициализации.</param>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.BindingType">
      <summary>Получает представленный тип привязки.</summary>
      <returns>Одно из значений <see cref="T:System.Linq.Expressions.MemberBindingType" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberBinding.Member">
      <summary>Получает поле или свойство для инициализации.</summary>
      <returns>Тип <see cref="T:System.Reflection.MemberInfo" />, представляющие поле или свойство для инициализации.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberBinding.ToString">
      <summary>Возвращает текстовое представление выражения <see cref="T:System.Linq.Expressions.MemberBinding" />.</summary>
      <returns>Текстовое представление выражения <see cref="T:System.Linq.Expressions.MemberBinding" />.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberBindingType">
      <summary>Описывает типы привязки, которые используются в объектах <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.Assignment">
      <summary>Привязка, представляющая инициализацию элемента со значением выражения.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.ListBinding">
      <summary>Привязка, представляющая инициализацию элемента типа <see cref="T:System.Collections.IList" /> or <see cref="T:System.Collections.Generic.ICollection`1" /> из списка элементов.</summary>
    </member>
    <member name="F:System.Linq.Expressions.MemberBindingType.MemberBinding">
      <summary>Привязка, представляющаяся рекуррентную инициализацию элементов элемента.</summary>
    </member>
    <member name="T:System.Linq.Expressions.MemberExpression">
      <summary>Представляет доступ к полю или свойству.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла. Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
      <returns>Результат посещения этого узла.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Expression">
      <summary>Получает содержащийся объект поля или свойства.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />, который представляет содержащийся объект поля или свойства.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.Member">
      <summary>Получает поле или свойство для доступа.</summary>
      <returns>Тип <see cref="T:System.Reflection.MemberInfo" />, представляющие поле или свойство для доступа.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="expression">Свойство <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberInitExpression">
      <summary>Представляет вызов конструктора и инициализацию одного или нескольких членов нового объекта.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Bindings">
      <summary>Получает привязки, описывающие способы инициализации членов созданного объекта.</summary>
      <returns>Объекты <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.MemberBinding" />, описывающие способы инициализации членов.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.CanReduce">
      <summary>Возвращает значение, указывающее, можно ли сократить узел дерева выражений.</summary>
      <returns>
        <see langword="true" />значение, если узел можно уменьшить; в противном случае —. <see langword="false" /></returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NewExpression">
      <summary>Возвращает выражение, представляющее вызов конструктора.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.NewExpression" />, представляющее вызов конструктора.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.NodeType">
      <summary>Возвращает тип узла для данного выражения. При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Reduce">
      <summary>Сокращает выражение <see cref="T:System.Linq.Expressions.MemberInitExpression" /> до более простого выражения.</summary>
      <returns>Преобразованное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MemberInitExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.MemberInitExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberInitExpression.Update(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="newExpression">Свойство <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> результата.</param>
      <param name="bindings">Свойство <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberListBinding">
      <summary>Предоставляет инициализацию элементов коллекции созданного объекта.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberListBinding.Initializers">
      <summary>Предоставляет инициализаторы элементов для инициализации коллекции элементов созданного объекта.</summary>
      <returns>Объекты <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.ElementInit" /> для инициализации элемента коллекции.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberListBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="initializers">Свойство <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MemberMemberBinding">
      <summary>Предоставляет инициализацию элементов элемента созданного объекта.</summary>
    </member>
    <member name="P:System.Linq.Expressions.MemberMemberBinding.Bindings">
      <summary>Получает привязки, описывающие способы инициализации элементов элемента.</summary>
      <returns>Объекты <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.MemberBinding" />, описывающие способы инициализации элементов элемента.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MemberMemberBinding.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="bindings">Свойство <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="T:System.Linq.Expressions.MethodCallExpression">
      <summary>Представляет вызов к статическому методу или методу экземпляра.</summary>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла. Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
      <returns>Результат посещения этого узла.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Arguments">
      <summary>Получает коллекцию выражений, представляющих аргументы вызванного метода.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.Expression" />, представляющих аргументы вызванному методу.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Method">
      <summary>Получает <see cref="T:System.Reflection.MethodInfo" /> для вызываемого метода.</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" />, представляющий вызванный метод.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Object">
      <summary>Получает выражение <see cref="T:System.Linq.Expressions.Expression" />, представляющее экземпляр для вызовов методов экземпляра или NULL для вызовов статических методов.</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" />, предоставляющий получающий объект метода.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>Возвращает число аргументов для узла дерева выражения.  Не следует использовать этот член.  Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.</summary>
      <returns>Число аргументов для узла дерева выражения в виде <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>Возвращает аргумент в индексе, создавая исключение, если индекс вне допустимых границ.  Не следует использовать этот член.  Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.</summary>
      <param name="index">Индекс аргумента.</param>
      <returns>Возвращает <see cref="T:System.Linq.Expressions.Expression" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.MethodCallExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.MethodCallExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.MethodCallExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="object">Свойство <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> результата.</param>
      <param name="arguments">Свойство <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="T:System.Linq.Expressions.NewArrayExpression">
      <summary>Представляет создание нового массива и возможную инициализацию элемента нового массива.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла. Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
      <returns>Результат посещения этого узла.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Expressions">
      <summary>Получает границы массива, если значение свойства <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равно <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> или если значения используются для инициализации элементов нового массива, если значение свойства <see cref="P:System.Linq.Expressions.Expression.NodeType" /> равно <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" />.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> объектов <see cref="T:System.Linq.Expressions.Expression" />, представляющих границы массива или значения инициализации.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewArrayExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.NewArrayExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewArrayExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="expressions">Свойство <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="T:System.Linq.Expressions.NewExpression">
      <summary>Представляет вызов конструктора.</summary>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла. Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
      <returns>Результат посещения этого узла.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Arguments">
      <summary>Получает аргументы для конструктора.</summary>
      <returns>Коллекция объектов <see cref="T:System.Linq.Expressions.Expression" />, представляющая аргументы для конструктора.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Constructor">
      <summary>Получает вызванный конструктор.</summary>
      <returns>Объект <see cref="T:System.Reflection.ConstructorInfo" />, представляющий вызываемый конструктор.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Members">
      <summary>Получает элементы, которые могут извлечь значения полей, инициализированных с помощью аргументов конструктора.</summary>
      <returns>Коллекция объектов <see cref="T:System.Reflection.MemberInfo" />, представляющих элементы, которые могут извлечь значения полей, инициализированных с помощью аргументов конструктора.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#ArgumentCount">
      <summary>Получает число аргументов для узла дерева выражения.</summary>
      <returns>Число аргументов для узла дерева выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)">
      <summary>Возвращает аргумент в индексе, создавая исключение, если индекс вне допустимых границ.</summary>
      <param name="index">Индекс аргумента.</param>
      <returns>Аргумент в индексе, вызываемый, если индекс вне допустимых границ.</returns>
    </member>
    <member name="P:System.Linq.Expressions.NewExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.NewExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.NewExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="arguments">Свойство <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ParameterExpression">
      <summary>Представляет именованное выражение параметра.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Отправляет в конкретный метод Visit для данного типа узла. Например, объект <see cref="T:System.Linq.Expressions.MethodCallExpression" /> вызывает метод <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <param name="visitor">Посетитель, с помощью которого выполняется посещение этого узла.</param>
      <returns>Результат посещения этого узла.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.IsByRef">
      <summary>Указывает, что данное выражение <c>ParameterExpression</c> должно рассматриваться в качестве параметра <see langword="ByRef" />.</summary>
      <returns>
        <see langword="true" />, <see langword="ByRef" /><c></c> ЕслиParameterExpressionявляетсяпараметром.впротивномслучае—<see langword="false" />значение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Name">
      <summary>Получает имя параметра или переменной.</summary>
      <returns>Объект <see cref="T:System.String" />, в котором содержится имя параметра.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ParameterExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.ParameterExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="T:System.Linq.Expressions.RuntimeVariablesExpression">
      <summary>Выражение, которое предоставляет разрешения среды выполнения на чтение и запись переменных.</summary>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.NodeType">
      <summary>Возвращает тип узла для данного выражения. При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.RuntimeVariablesExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="variables">Свойство <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables">
      <summary>Переменные или параметры, к которым среда выполнения предоставляет доступ.</summary>
      <returns>Доступная только для чтения коллекция, содержащая параметры, к которым средой выполнения будет предоставлен доступ.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchCase">
      <summary>Представляет один из вариантов для выражения <see cref="T:System.Linq.Expressions.SwitchExpression" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.Body">
      <summary>Получает тело блока case.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело блока case.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchCase.TestValues">
      <summary>Получает значение для данного блока case. Блока case для выполнения выбирается, когда свойство <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> совпадает с одним из этих значений.</summary>
      <returns>Доступная только для чтения коллекция значений данного блока case.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.ToString">
      <summary>Возвращает строку <see cref="T:System.String" />, которая представляет текущий объект <see cref="T:System.Object" />.</summary>
      <returns>Объект <see cref="T:System.String" />. представляющий текущий объект <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchCase.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="testValues">Свойство <see cref="P:System.Linq.Expressions.SwitchCase.TestValues" /> результата.</param>
      <param name="body">Свойство <see cref="P:System.Linq.Expressions.SwitchCase.Body" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SwitchExpression">
      <summary>Представляет выражение управления, которое обрабатывает выбор из нескольких вариантов путем передачи управления выражению <see cref="T:System.Linq.Expressions.SwitchCase" />.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Cases">
      <summary>Получает коллекцию объектов <see cref="T:System.Linq.Expressions.SwitchCase" /> для переключателя.</summary>
      <returns>Коллекция объектов <see cref="T:System.Linq.Expressions.SwitchCase" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Comparison">
      <summary>Получает метод проверки равенства, если он существует.</summary>
      <returns>Объект <see cref="T:System.Reflection.MethodInfo" />, представляющий метод проверки равенства.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.DefaultBody">
      <summary>Получает процедуру проверки для выбора варианта.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий процедуру проверки для выбора варианта.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.NodeType">
      <summary>Возвращает тип узла для данного выражения. При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.SwitchValue">
      <summary>Получает процедуру проверки для выбора варианта.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий процедуру проверки для выбора варианта.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SwitchExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.SwitchExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.SwitchExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase},System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="switchValue">Свойство <see cref="P:System.Linq.Expressions.SwitchExpression.SwitchValue" /> результата.</param>
      <param name="cases">Свойство <see cref="P:System.Linq.Expressions.SwitchExpression.Cases" /> результата.</param>
      <param name="defaultBody">Свойство <see cref="P:System.Linq.Expressions.SwitchExpression.DefaultBody" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="T:System.Linq.Expressions.SymbolDocumentInfo">
      <summary>Сохраняет информацию, необходимую для создания информации отладочных символов для исходного файла, в частности имени файла и уникального идентификатора языка.</summary>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType">
      <summary>Возвращает уникальный идентификатор типа документа, если он существует. Для текстовых файлов по умолчанию принимает значение GUID.</summary>
      <returns>Уникальный идентификатор типа документа.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.FileName">
      <summary>Имя исходного файла.</summary>
      <returns>Строковое представление имени исходного файла.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.Language">
      <summary>Возвращает уникальный идентификатор языка, если он существует.</summary>
      <returns>Уникальный идентификатор языка.</returns>
    </member>
    <member name="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor">
      <summary>Возвращает уникальный идентификатор поставщика языка, если он существует.</summary>
      <returns>Уникальный идентификатор поставщика языка.</returns>
    </member>
    <member name="T:System.Linq.Expressions.TryExpression">
      <summary>Представляет блок try/catch/finally/fault.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Body">
      <summary>Получает объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело блока try.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело блока try.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Fault">
      <summary>Получает объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело блока fault.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело блока fault.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Finally">
      <summary>Получает объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело блока finally.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, представляющий тело блока finally.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Handlers">
      <summary>Получает коллекцию выражений <see cref="T:System.Linq.Expressions.CatchBlock" />, связанных с блоком try.</summary>
      <returns>Коллекция выражений <see cref="T:System.Linq.Expressions.CatchBlock" />, связанных с блоком try.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TryExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.TryExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TryExpression.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock},System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="body">Свойство <see cref="P:System.Linq.Expressions.TryExpression.Body" /> результата.</param>
      <param name="handlers">Свойство <see cref="P:System.Linq.Expressions.TryExpression.Handlers" /> результата.</param>
      <param name="finally">Свойство <see cref="P:System.Linq.Expressions.TryExpression.Finally" /> результата.</param>
      <param name="fault">Свойство <see cref="P:System.Linq.Expressions.TryExpression.Fault" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="T:System.Linq.Expressions.TypeBinaryExpression">
      <summary>Представляет операцию между выражением и типом.</summary>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Expression">
      <summary>Получает операнд выражения операции проверки типа.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, который предоставляет операнд выражения операции проверки типа.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.NodeType">
      <summary>Возвращает тип узла для данного выражения. При переопределении этого метода узлы расширения должны возвращать <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" /> выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand">
      <summary>Получает операнд типа операции проверки типа.</summary>
      <returns>Объект <see cref="T:System.Type" />, который предоставляет операнд типа операции проверки типа.</returns>
    </member>
    <member name="M:System.Linq.Expressions.TypeBinaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="expression">Свойство <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="T:System.Linq.Expressions.UnaryExpression">
      <summary>Представляет выражение, содержащее унарный оператор.</summary>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.CanReduce">
      <summary>Возвращает значение, указывающее, можно ли сократить узел дерева выражений.</summary>
      <returns>
        <see langword="true" />значение, если узел можно уменьшить; в противном случае —. <see langword="false" /></returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLifted">
      <summary>Возвращает значение, указывающее, представляет ли узел дерева выражения ликвидированный вызов оператора.</summary>
      <returns>
        <see langword="true" />, если узел представляет удаленный вызов; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.IsLiftedToNull">
      <summary>Возвращает значение, указывающее, представляет ли узел дерева выражения ликвидированный вызов оператора, тип возврата которого удален для типа со значением NULL.</summary>
      <returns>
        <see langword="true" />, если тип возврата оператора удален до типа со значением NULL, иначе возвращается значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Method">
      <summary>Получает реализацию метода для унарной операции.</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" />, представляющий метод реализации.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.NodeType">
      <summary>Возвращает тип узла данного выражения <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.ExpressionType" />, представляющий данное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Operand">
      <summary>Получает операнд унарной операции.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.Expression" />, который предоставляет операнд унарной операции.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Reduce">
      <summary>Сокращает узел выражений до более простого выражения.</summary>
      <returns>Преобразованное выражение.</returns>
    </member>
    <member name="P:System.Linq.Expressions.UnaryExpression.Type">
      <summary>Получает статичный тип выражения, представленного этим выражением <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>Тип <see cref="P:System.Linq.Expressions.UnaryExpression.Type" />, представляющий этот статичный тип выражения.</returns>
    </member>
    <member name="M:System.Linq.Expressions.UnaryExpression.Update(System.Linq.Expressions.Expression)">
      <summary>Создает новое выражение, идентичное данному, но использующее предоставленные дочерние элементы. Если все дочерние элементы идентичны, возвращается данное выражение.</summary>
      <param name="operand">Свойство <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> результата.</param>
      <returns>Нужно использовать это выражение, если дочерние элементы не изменились, либо выражение с обновленными дочерними элементами.</returns>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary>Представляет результат операции сортировки.</summary>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary>Представляет результат операции сортировки.</summary>
      <typeparam name="T">Тип содержимого источника данных.</typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary>Предоставляет функциональные возможности расчета запросов к конкретному источнику данных, для которого не указан тип данных.</summary>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary>Получает тип элементов, которые возвращаются при выполнении дерева выражения, связанного с данным экземпляром класса <see cref="T:System.Linq.IQueryable" />.</summary>
      <returns>Тип <see cref="T:System.Type" />, представляющий тип элементов, которые возвращаются при выполнении дерева выражения, связанного с данным объектом.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary>Получает выражение, связанное с экземпляром класса <see cref="T:System.Linq.IQueryable" />.</summary>
      <returns>Выражение <see cref="T:System.Linq.Expressions.Expression" />, связанное с данным экземпляром класса <see cref="T:System.Linq.IQueryable" />.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary>Возвращает объект поставщика запросов, связанного с указанным источником данных.</summary>
      <returns>Объект <see cref="T:System.Linq.IQueryProvider" />, связанный с указанным источником данных.</returns>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary>Предоставляет функциональные возможности расчета запросов к конкретному источнику данных с известным типом данных.</summary>
      <typeparam name="T">Тип данных в источнике данных.</typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary>Определяет методы создания и выполнения запросов, описываемых объектом <see cref="T:System.Linq.IQueryable" />.</summary>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.IQueryable" />, который позволяет вычислить запрос, представленный заданным деревом выражения.</summary>
      <param name="expression">Дерево выражения, представляющее запрос LINQ.</param>
      <returns>Объект <see cref="T:System.Linq.IQueryable" />, который позволяет вычислить запрос, представленный заданным деревом выражений.</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>Создает объект <see cref="T:System.Linq.IQueryable`1" />, который позволяет вычислить запрос, представленный заданным деревом выражения.</summary>
      <param name="expression">Дерево выражения, представляющее запрос LINQ.</param>
      <typeparam name="TElement">Тип элементов возвращаемого объекта <see cref="T:System.Linq.IQueryable`1" />.</typeparam>
      <returns>Объект <see cref="T:System.Linq.IQueryable`1" />, который позволяет вычислить запрос, представленный заданным деревом выражений.</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>Выполняет запрос, представленный заданным деревом выражения.</summary>
      <param name="expression">Дерево выражения, представляющее запрос LINQ.</param>
      <returns>Значение, получаемое в результате выполнения указанного запроса.</returns>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary>Выполняет строго типизированный запрос, представленный заданным деревом выражения.</summary>
      <param name="expression">Дерево выражения, представляющее запрос LINQ.</param>
      <typeparam name="TResult">Тип значения, получаемого в результате выполнения запроса.</typeparam>
      <returns>Значение, получаемое в результате выполнения указанного запроса.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite">
      <summary>Базовый класс динамического места вызова. Этот тип используется в качестве типа параметра для целей динамического источника вызова.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite.Binder">
      <summary>Класс, предназначенный для привязки динамических операций к динамическому месту.</summary>
      <returns>Объект <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />, предназначенный для привязки динамических операций.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite.Create(System.Type,System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>Создает место вызова с заданным типом делегата и модулем привязки.</summary>
      <param name="delegateType">Тип делегата места вызова.</param>
      <param name="binder">Модуль привязки места вызова.</param>
      <returns>Новое место вызова.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSite`1">
      <summary>Тип динамического сайта.</summary>
      <typeparam name="T">Тип делегата.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSite`1.Create(System.Runtime.CompilerServices.CallSiteBinder)">
      <summary>Создает экземпляр динамического сайта вызова, инициализированного с помощью модуля привязки, ответственного за привязку среды выполнения динамических операций этого сайта вызова.</summary>
      <param name="binder">Модуль привязки, предназначенный для привязки среды выполнения динамических операций этого сайта вызова.</param>
      <returns>Новый экземпляр динамического сайта вызова.</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.CallSite`1.Target">
      <summary>Кэш уровня 0 — специальный делегат на основе журнала сайта.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSite`1.Update">
      <summary>Делегат обновления. Вызывается при отсутствии на динамическом сайте совпадений в кэше.</summary>
      <returns>Делегат обновления.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteBinder">
      <summary>Класс, предназначенный для привязки динамических операций к динамическому источнику вызова в среде выполнения.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>Выполняет привязку динамической операции к набору аргументов в среде выполнения.</summary>
      <param name="args">Массив аргументов динамической операции.</param>
      <param name="parameters">Массив экземпляров класса <see cref="T:System.Linq.Expressions.ParameterExpression" />, представляющих параметры источника вызова в процессе привязки.</param>
      <param name="returnLabel">Элемент LabelTarget, возвращающий результат динамической привязки.</param>
      <returns>Выражение, проверяющее аргументы динамической операции и выполняющее эту операцию, если проверки пройдены успешно. Если проверки не пройдены при последующих выполнениях динамической операции, метод Bind вызывается еще раз, чтобы создать новый объект <see cref="T:System.Linq.Expressions.Expression" /> для новых типов аргументов.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.BindDelegate``1(System.Runtime.CompilerServices.CallSite{``0},System.Object[])">
      <summary>Обеспечивает низкоуровневую поддержку привязки в среде выполнения. Этот метод можно переопределять в классах, предоставляя прямой делегат для реализации правила. Это позволяет сохранять правила на диск, обеспечивать специализированные правила в среде выполнения и предоставлять альтернативную политику кэширования.</summary>
      <param name="site">Источник вызова, для которого выполняется привязка.</param>
      <param name="args">Аргументы для привязки.</param>
      <typeparam name="T">Тип целевого элемента источника вызова.</typeparam>
      <returns>Новый делегат, заменяющий целевой элемент источника вызова.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteBinder.CacheTarget``1(``0)">
      <summary>Добавляет целевой элемент в кэш известных целевых элементов. Целевые элементы в кэше сканируются перед вызовом метода BindDelegate для получения нового правила.</summary>
      <param name="target">Целевой делегат, добавляемый в кэш.</param>
      <typeparam name="T">Тип добавляемого целевого элемента.</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel">
      <summary>Получает метку, с помощью которой можно обеспечить обновление привязки. Она указывает, что привязка выражения более недействительна. Обычно используется в случае изменения "версии" динамического объекта.</summary>
      <returns>Объект <see cref="T:System.Linq.Expressions.LabelTarget" />, представляющий метку, с помощью которой можно обеспечить обновление привязки.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallSiteHelpers">
      <summary>Класс, содержащий вспомогательные методы для источников вызова динамической среды выполнения (DLR).</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame(System.Reflection.MethodBase)">
      <summary>Проверяет, используется ли объект <see cref="T:System.Reflection.MethodBase" /> в качестве внутреннего объекта среды DLR (в этом случае он не должен отображаться в стеке кода языка).</summary>
      <param name="mb">Вводимый объект <see cref="T:System.Reflection.MethodBase" /></param>
      <returns>Значение true, если вводимый объект <see cref="T:System.Reflection.MethodBase" /> используется в качестве внутреннего объекта среды DLR (в этом случае он не должен отображаться в стеке кода языка). В противном случае — значение false.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DebugInfoGenerator">
      <summary>Создает сведения отладки для лямбда-выражений в дереве выражений.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Runtime.CompilerServices.DebugInfoGenerator" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.CreatePdbGenerator">
      <summary>Создает генератор символов базы данных программы (PDB).</summary>
      <returns>Генератор символов PDB.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.DebugInfoGenerator.MarkSequencePoint(System.Linq.Expressions.LambdaExpression,System.Int32,System.Linq.Expressions.DebugInfoExpression)">
      <summary>Задает точку следования в коде инструкций языка MSIL.</summary>
      <param name="method">Создаваемое лямбда-выражение.</param>
      <param name="ilOffset">Смещение внутри кода MSIL, на котором следует отметить точку следования.</param>
      <param name="sequencePoint">Сведения отладки, связанные с точкой следования.</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.DynamicAttribute">
      <summary>Означает, что использование объекта <see cref="T:System.Object" /> с элементом следует рассматривать как динамически выполняемый тип.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DynamicAttribute.#ctor(System.Boolean[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Runtime.CompilerServices.DynamicAttribute" />.</summary>
      <param name="transformFlags">Указывает с помощью префикса обхода конструкции типа, какие экземпляры <see cref="T:System.Object" /> следует считать динамически выполняемыми типами.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DynamicAttribute.TransformFlags">
      <summary>Указывает с помощью префикса обхода конструкции типа, какие экземпляры <see cref="T:System.Object" /> следует считать динамически выполняемыми типами.</summary>
      <returns>Список объектов <see cref="T:System.Object" />, которые следует рассматривать как динамически выполняемые типы.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IRuntimeVariables">
      <summary>Представляет значения переменных среды выполнения.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Count">
      <summary>Получает количество переменных среды выполнения.</summary>
      <returns>Количество переменных среды выполнения.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.IRuntimeVariables.Item(System.Int32)">
      <summary>Получает значение переменной среды выполнения по указанному индексу.</summary>
      <param name="index">Начинающийся с нуля индекс переменной среды выполнения, значение которого следует вернуть.</param>
      <returns>Значение переменной среды выполнения.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1">
      <summary>Построитель для коллекции, доступной только для чтения.</summary>
      <typeparam name="T">Тип элемента коллекции.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor">
      <summary>Создает документ <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Создает <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />, копируя содержимое заданной коллекции.</summary>
      <param name="collection">Коллекция, из которой требуется скопировать элементы.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.#ctor(System.Int32)">
      <summary>Создает построитель <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> с данной начальной емкостью. Содержимого нет, но построитель резервирует пространство для данного числа элементов, доступное без перераспределений.</summary>
      <param name="capacity">Начальная емкость.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Add(`0)">
      <summary>Добавляет элемент в коллекцию <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
      <param name="item">Объект, добавляемый в коллекцию <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Capacity">
      <summary>Получает или задает емкость этого <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
      <returns>Емкость этого <c>ReadOnlyCollectionBuilder.</c></returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Clear">
      <summary>Удаляет все элементы из коллекции <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Contains(`0)">
      <summary>Определяет, содержит ли коллекция <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> указанное значение.</summary>
      <param name="item">Объект, который требуется найти в <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
      <returns>Значение true, если элемент находится в <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.CopyTo(`0[],System.Int32)">
      <summary>Копирует элементы коллекции <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> в массив <see cref="T:System.Array" /> начиная с конкретного индекса <see cref="T:System.Array" />.</summary>
      <param name="array">Одномерный массив <see cref="T:System.Array" />, в который копируются элементы из интерфейса <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
      <param name="arrayIndex">Отсчитываемый от нуля индекс в массиве, с которого начинается копирование.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Count">
      <summary>Возвращает количество элементов в <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
      <returns>Число элементов в массиве <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerator`1" />, который может использоваться для выполнения итерации по коллекции.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.IndexOf(`0)">
      <summary>Возвращает индекс первого вхождения заданного значения в построитель.</summary>
      <param name="item">Искомый элемент.</param>
      <returns>Индекс первого вхождения элемента.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Insert(System.Int32,`0)">
      <summary>Вставляет элемент в список <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс, по которому следует вставить элемент.</param>
      <param name="item">Объект, вставляемый в коллекцию <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Item(System.Int32)">
      <summary>Возвращает или задает элемент по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс элемента, который требуется возвратить или задать.</param>
      <returns>Элемент, расположенный по указанному индексу.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Remove(`0)">
      <summary>Удаляет первое вхождение указанного объекта из коллекции <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</summary>
      <param name="item">Объект, который необходимо удалить из коллекции <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</param>
      <returns>Значение true, если элемент успешно удален из <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />; в противном случае — значение false. Этот метод также возвращает значение false, если элемент не найден в исходном объекте <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.RemoveAt(System.Int32)">
      <summary>Удаляет элемент <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />, расположенный по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс удаляемого элемента.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse">
      <summary>Изменяет порядок элементов во всем списке <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> на обратный.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.Reverse(System.Int32,System.Int32)">
      <summary>Изменяет порядок элементов в указанном диапазоне.</summary>
      <param name="index">Отсчитываемый от нуля индекс начала диапазона, порядок элементов которого требуется изменить.</param>
      <param name="count">Число элементов в диапазоне, порядок сортировки в котором требуется изменить.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Получает значение, указывающее, является ли объект <see cref="T:System.Collections.Generic.ICollection`1" /> доступным только для чтения.</summary>
      <returns>Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.Generic.ICollection`1" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Копирует элементы коллекции <see cref="T:System.Collections.Generic.ICollection`1" /> в массив, начиная с указанного индекса массива.</summary>
      <param name="array">Одномерный массив, в который копируются элементы из коллекции <see cref="T:System.Collections.Generic.ICollection`1" />. Индекс в массиве должен начинаться с нуля.</param>
      <param name="index">Отсчитываемый от нуля индекс в массиве <paramref name="array" />, указывающий начало копирования.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#IsSynchronized">
      <summary>Возвращает значение, показывающее, является ли доступ к коллекции <see cref="T:System.Collections.ICollection" /> синхронизированным (потокобезопасным).</summary>
      <returns>
        <see langword="true" />, если доступ к классу <see cref="T:System.Collections.ICollection" /> является синхронизированным (потокобезопасным); в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#ICollection#SyncRoot">
      <summary>Получает объект, с помощью которого можно синхронизировать доступ к коллекции <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Объект, который может использоваться для синхронизации доступа к <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, выполняющий перебор элементов в коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который может использоваться для итерации элементов коллекции.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Add(System.Object)">
      <summary>Добавляет элемент в коллекцию <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">Объект <see cref="T:System.Object" />, добавляемый в список <see cref="T:System.Collections.IList" />.</param>
      <returns>Позиция, на которую вставлен новый элемент.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Contains(System.Object)">
      <summary>Определяет, содержит ли коллекция <see cref="T:System.Collections.IList" /> указанное значение.</summary>
      <param name="value">Объект <see cref="T:System.Object" />, который требуется найти в коллекции <see cref="T:System.Collections.IList" />.</param>
      <returns>Значение <see langword="true" />, если параметр <paramref name="item" /> найден в коллекции <see cref="T:System.Collections.IList" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Определяет индекс заданного элемента коллекции <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">Объект для поиска в <see cref="T:System.Collections.IList" />.</param>
      <returns>Индекс <paramref name="item" />, если он найден в списке; в противном случае — значение -1.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Вставляет элемент в список <see cref="T:System.Collections.IList" /> по указанному индексу.</summary>
      <param name="index">Индекс (с нуля), по которому следует вставить параметр <paramref name="item" />.</param>
      <param name="value">Объект, вставляемый в список <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsFixedSize">
      <summary>Получает значение, указывающее, имеет ли список <see cref="T:System.Collections.IList" /> фиксированный размер.</summary>
      <returns>Значение <see langword="true" />, если словарь <see cref="T:System.Collections.IList" /> имеет фиксированный размер; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#IsReadOnly">
      <summary>Получает значение, указывающее, является ли объект <see cref="T:System.Collections.IList" /> доступным только для чтения.</summary>
      <returns>Значение <see langword="true" />, если интерфейс <see cref="T:System.Collections.IList" /> доступен только для чтения; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Item(System.Int32)">
      <summary>Возвращает или задает элемент по указанному индексу.</summary>
      <param name="index">Отсчитываемый от нуля индекс элемента, который требуется возвратить или задать.</param>
      <returns>Элемент, расположенный по указанному индексу.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.System#Collections#IList#Remove(System.Object)">
      <summary>Удаляет первое вхождение указанного объекта из коллекции <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">Объект, который необходимо удалить из коллекции <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToArray">
      <summary>Копирует элементы списка <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> в новый массив.</summary>
      <returns>Массив, содержащий копии элементов списка <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1.ToReadOnlyCollection">
      <summary>Создает объект <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащий все элементы <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" />, по возможности не копируя элементы в новый массив. Сбрасывает объект <see cref="T:System.Runtime.CompilerServices.ReadOnlyCollectionBuilder`1" /> после создания <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</summary>
      <returns>Новый экземпляр класса <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuleCache`1">
      <summary>Представляет кэш правил привязки времени выполнения.</summary>
      <typeparam name="T">Тип делегата.</typeparam>
    </member>
  </members>
</doc>
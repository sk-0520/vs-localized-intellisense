<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Collections.Immutable</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Immutable.IImmutableDictionary`2">
      <summary>Stellt eine unveränderliche Auflistung von Schlüssel-Wert-Paaren dar.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="TKey">Der Typ der Schlüssel im Wörterbuch.</typeparam>
      <typeparam name="TValue">Der Typ der Werte im Wörterbuch.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)">
      <summary>Fügt dem Wörterbuch ein Element mit dem angegebenen Schlüssel und Wert hinzu.</summary>
      <param name="key">Der Schlüssel des hinzuzufügenden Elements.</param>
      <param name="value">Der Wert des hinzuzufügenden Elements.</param>
      <returns>Ein neues unveränderliches Wörterbuch, das das zusätzliche Schlüssel-Wert-Paar enthält.</returns>
      <exception cref="T:System.ArgumentException">Der angegebene Schlüssel ist bereits im Wörterbuch vorhanden, hat jedoch einen anderen Wert.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Fügt dem Wörterbuch die angegebenen Schlüssel-Wert-Paare hinzu.</summary>
      <param name="pairs">Die Schlüssel-Wert-Paare, die hinzugefügt werden sollen.</param>
      <returns>Ein neues unveränderliches Wörterbuch, das die zusätzlichen Schlüssel-Wert-Paare enthält.</returns>
      <exception cref="T:System.ArgumentException">Einer der angegebenen Schlüssel ist bereits im Wörterbuch vorhanden, hat jedoch einen anderen Wert.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Clear">
      <summary>Ruft ein leeres Wörterbuch ab, das über dieselben Sortier- und Schlüssel-Wert-Vergleichsregeln wie diese Wörterbuchinstanz verfügt.</summary>
      <returns>Ein leeres Wörterbuch mit äquivalenten Sortier- und Schlüssel-Wert-Vergleichsregeln.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Bestimmt, ob das unveränderliche Wörterbuch das angegebene Schlüssel-Wert-Paar enthält.</summary>
      <param name="pair">Das Schlüssel-Wert-Paar, das gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn das angegebene Schlüssel-Wert-Paar im Wörterbuch gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)">
      <summary>Entfernt das Element mit dem angegebenen Schlüssel aus dem unveränderlichen Wörterbuch.</summary>
      <param name="key">Der Schlüssel des zu entfernenden Elements.</param>
      <returns>Ein neues unveränderliches Wörterbuch, aus dem das angegebene Element entfernt wurde, oder diese Instanz, wenn der angegebene Schlüssel im Wörterbuch nicht gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Entfernt die Elemente mit den angegebenen Schlüsseln aus dem unveränderlichen Wörterbuch.</summary>
      <param name="keys">Die Schlüssel der zu entfernenden Elemente.</param>
      <returns>Ein neues unveränderliches Wörterbuch, aus dem die angegebenen Schlüssel entfernt wurden, oder diese Instanz, wenn die angegebenen Schlüssel im Wörterbuch nicht gefunden wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)">
      <summary>Legt den angegebenen Schlüssel und Wert im unveränderlichen Wörterbuch fest, wobei ein vorhandener Wert für den Schlüssel überschrieben werden kann.</summary>
      <param name="key">Der Schlüssel des hinzuzufügenden Eintrags.</param>
      <param name="value">Der Schlüsselwert, der festgelegt werden soll.</param>
      <returns>Ein neues unveränderliches Wörterbuch, das das angegebene Schlüssel-Wert-Paar enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Legt die angegebenen Schlüssel-Wert-Paare im unveränderlichen Wörterbuch fest, wobei vorhandene Werte für die Schlüssel überschrieben werden können.</summary>
      <param name="items">Die Schlüssel-Wert-Paare, die im Wörterbuch festgelegt werden sollen. Falls ein Schlüssel bereits im Wörterbuch vorhanden ist, überschreibt diese Methode dessen vorherigen Wert.</param>
      <returns>Ein neues unveränderliches Wörterbuch, das die angegebenen Schlüssel-Wert-Paare enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary>Ermittelt, ob das Wörterbuch einen bestimmten Schlüssel enthält.</summary>
      <param name="equalKey">Der zu suchende Schlüssel.</param>
      <param name="actualKey">Der übereinstimmende Schlüssel im Wörterbuch, wenn gefunden, oder <c>equalkey</c>, wenn keine Übereinstimmung gefunden wird.</param>
      <returns>
        <see langword="true" />, wenn eine Übereinstimmung für <paramref name="equalKey" /> gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableList`1">
      <summary>Stellt eine Liste von Elementen dar, die nicht geändert werden kann.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="T">Der Typ der Elemente in der Liste.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Add(`0)">
      <summary>Erstellt eine Kopie der Liste und fügt das angegebene Objekt am Ende der kopierten Liste hinzu.</summary>
      <param name="value">Das Objekt, das der Liste hinzugefügt werden soll.</param>
      <returns>Eine neue Liste, der das Objekt hinzugefügt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Erstellt eine Kopie der Liste und fügt die angegebenen Objekte am Ende der kopierten Liste hinzu.</summary>
      <param name="items">Die Objekte, die der Liste hinzugefügt werden sollen.</param>
      <returns>Eine neue Liste, der die Elemente hinzugefügt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Clear">
      <summary>Erstellt eine Liste, aus der alle Elemente entfernt wurden, aber mit derselben Sortierungs- und Reihenfolgensemantik wie diese Liste.</summary>
      <returns>Eine leere Liste, die dieselbe Sortierungs- und Reihenfolgensemantik wie diese Instanz besitzt.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der <see cref="T:System.Collections.Immutable.IImmutableList`1" /> zurück, der am angegebenen Index beginnt und die angegebene Anzahl von Elementen enthält.</summary>
      <param name="item">Das im <see cref="T:System.Collections.Immutable.IImmutableList`1" /> zu suchende Objekt. Dieser Wert kann für Verweistypen NULL sein.</param>
      <param name="index">Die nullbasierten Startindizes für die Suche. 0 (null) ist in einer leeren Liste gültig.</param>
      <param name="count">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich, der zum Suchen von <paramref name="item" /> verwendet werden soll.</param>
      <returns>Der nullbasierte Index des ersten Vorkommens von <paramref name="item" /> innerhalb des Bereichs von Elementen in <see cref="T:System.Collections.Immutable.IImmutableList`1" />, der am <paramref name="index" /> beginnt und eine Anzahl von Elementen (<paramref name="count" />) enthält, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)">
      <summary>Fügt das angegebene Element am angegebenen Index in die unveränderliche Liste ein.</summary>
      <param name="index">Der nullbasierte Index, an dem der Wert eingefügt werden soll.</param>
      <param name="element">Das einzufügende Objekt.</param>
      <returns>Eine neue unveränderliche Liste, die das angegebene Element enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Fügt die angegebenen Elemente am angegebenen Index in die unveränderliche Liste ein.</summary>
      <param name="index">Der nullbasierte Index, an dem neue Elemente eingefügt werden sollen.</param>
      <param name="items">Die einzufügenden Elemente.</param>
      <returns>Eine neue unveränderliche Liste, die die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des letzten Vorkommens innerhalb des Bereichs von Elementen in der <see cref="T:System.Collections.Immutable.IImmutableList`1" /> zurück, der die angegebene Anzahl von Elementen enthält und am angegebenen Index endet.</summary>
      <param name="item">Das Objekt, das in der Liste gesucht werden soll. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <param name="index">Der nullbasierte Startindex für die Suche. 0 (null) ist in einer leeren Liste gültig.</param>
      <param name="count">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich, mit dem <paramref name="item" /> abgeglichen werden soll.</param>
      <returns>Gibt <see cref="T:System.Int32" /> zurück.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Entfernt das erste Vorkommen eines angegebenen Objekts aus dieser unveränderlichen Liste.</summary>
      <param name="value">Das Objekt, das aus der Liste entfernt werden soll.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich, der zum Suchen von <paramref name="value" /> verwendet werden soll.</param>
      <returns>Eine neue Liste, aus der das angegebene Objekt entfernt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary>Entfernt alle Elemente, die die vom angegebenen Prädikat definierten Bedingungen erfüllen.</summary>
      <param name="match">Der Delegat, der die Bedingungen für die Elemente definiert, die entfernt werden sollen.</param>
      <returns>Eine neue unveränderlichen Liste, aus der die Elemente entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)">
      <summary>Entfernt das Element am angegebenen Index der unveränderlichen Liste.</summary>
      <param name="index">Der Index des zu entfernenden Elements.</param>
      <returns>Eine neue Liste, aus der das Element entfernt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Entfernt das angegebene Objekt aus der Liste.</summary>
      <param name="items">Die Objekte, die aus der Liste entfernt werden sollen.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich, mit dem bestimmt wird, ob <paramref name="items" /> mit Objekten in der Liste übereinstimmen.</param>
      <returns>Eine neue unveränderliche Liste, aus der die angegebenen Objekte entfernt wurden, wenn <paramref name="items" /> mit Objekten in der Liste übereingestimmt haben.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Entfernt einen Bereich von Elementen aus der <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</summary>
      <param name="index">Der nullbasierte Startindex des zu entfernenden Bereichs von Elementen.</param>
      <param name="count">Die Anzahl der zu entfernenden Elemente.</param>
      <returns>Eine neue unveränderlichen Liste, aus der die Elemente entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Gibt eine neue Liste zurück, wobei das erste übereinstimmende Element in der Liste durch das angegebene Element ersetzt wurde.</summary>
      <param name="oldValue">Das zu ersetzende Element.</param>
      <param name="newValue">Das Element, durch das das erste Vorkommen von <paramref name="oldValue" /> ersetzt werden soll.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich, der für den Abgleich mit <paramref name="oldValue" /> verwendet werden soll.</param>
      <returns>Eine neue Liste, die selbst dann <paramref name="newValue" /> enthält, wenn <paramref name="oldvalue" /> und <paramref name="newValue" /> gleich sind.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> ist nicht in der Liste vorhanden.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)">
      <summary>Ersetzt ein Element an einer bestimmten Position in der Liste durch das angegebene Element.</summary>
      <param name="index">Die Position des zu ersetzenden Elements in der Liste.</param>
      <param name="value">Das durch ein Element zu ersetzende alte Element.</param>
      <returns>Eine neue Liste, die das neue Element selbst dann enthält, wenn das Element an der angegebenen Position und das neue Element gleich sind.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableQueue`1">
      <summary>Stellt eine unveränderliche FIFO-Auflistung (First-In-First-Out) von Objekten dar.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="T">Der Typ der Elemente in der Warteschlange.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Clear">
      <summary>Gibt eine neue Warteschlange zurück, deren Elemente entfernt wurden.</summary>
      <returns>Eine leere unveränderliche Warteschlange.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Dequeue">
      <summary>Entfernt das erste Element in der unveränderlichen Warteschlange und gibt die neue Warteschlange zurück.</summary>
      <returns>Die neue unveränderliche Warteschlange, aus der das erste Element entfernt wurde. Dieser Wert ist nie <c>NULL</c>.</returns>
      <exception cref="T:System.InvalidOperationException">Die Warteschlange ist leer.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)">
      <summary>Fügt ein Element am Ende der unveränderlichen Warteschlange hinzu und gibt die neue Warteschlange zurück.</summary>
      <param name="value">Das hinzuzufügende Element.</param>
      <returns>Die neue unveränderliche Warteschlange mit dem angegebenen hinzugefügten Element.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableQueue`1.IsEmpty">
      <summary>Ruft einen Wert ab, der angibt, ob diese unveränderliche Warteschlange leer ist.</summary>
      <returns>
        <see langword="true" />, wenn diese Warteschlange leer ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Peek">
      <summary>Gibt das Element am Anfang der unveränderlichen Warteschlange zurück, ohne es zu entfernen.</summary>
      <returns>Das Element am Anfang der Warteschlange.</returns>
      <exception cref="T:System.InvalidOperationException">Die Warteschlange ist leer.</exception>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableSet`1">
      <summary>Stellt eine Gruppe von Elementen dar, die nur durch Erstellen einer neuen Instanz der Gruppe geändert werden kann.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="T">Der Typ des in der Gruppe gespeicherten Elements.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Add(`0)">
      <summary>Fügt dieser unveränderlichen Gruppe das angegebene Element hinzu.</summary>
      <param name="value">Das hinzuzufügende Element.</param>
      <returns>Eine neue Gruppe mit dem hinzugefügten Element oder diese Gruppe, wenn das Element bereits in der Gruppe enthalten ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Clear">
      <summary>Ruft eine leere unveränderliche Gruppe ab, die dieselbe Sortierungs- und Reihenfolgensematik wie diese Instanz besitzt.</summary>
      <returns>Eine leere unveränderliche Gruppe, die dieselbe Sortierungs- und Reihenfolgensematik wie diese Instanz besitzt.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)">
      <summary>Ermittelt, ob diese unverändertliche Gruppe ein bestimmtes Element enthält.</summary>
      <param name="value">Das Element, das in der Gruppe gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn die Gruppe den angegebenen Wert enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Entfernt die Elemente in der angegebenen Auflistung aus der aktuellen unveränderlichen Gruppe.</summary>
      <param name="other">Die Auflistung der Elemente, die aus dieser Gruppe entfernt werden sollen.</param>
      <returns>Eine neue Gruppe, aus der die Elemente entfernt wurden; oder die ursprüngliche Gruppe, wenn keines der Elemente in der Gruppe enthalten war.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Erstellt eine unveränderliche Gruppe, die nur Elemente enthält, die in dieser Gruppe und der angegebenen Gruppe vorhanden sind.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen <see cref="T:System.Collections.Immutable.IImmutableSet`1" /> verglichen werden soll.</param>
      <returns>Eine neue unverändertliche Gruppe, die Elemente enthält, die in beiden Gruppen vorhanden sind.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob die aktuelle unverändertliche Gruppe eine echte (strikte) Teilmenge einer angegebenen Auflistung ist.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Gruppe eine echte Teilmenge der angegebenen Auflistung ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob die aktuelle unveränderliche Gruppe eine echte (strikte) Teilmenge der angegebenen Auflistung ist.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Gruppe eine echte Teilmenge der angegebenen Auflistung ist; andernfalls false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob die aktuelle unveränderliche Gruppe eine Teilmenge einer angegebenen Auflistung ist.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Gruppe eine Teilmenge der angegebenen Auflistung ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob die aktuelle unveränderliche Gruppe eine Obermenge einer angegebenen Auflistung ist.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Gruppe eine Obermenge der angegebenen Auflistung ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob sich die aktuelle unveränderliche Gruppe und die angegebene Auflistung überschneiden.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Gruppe und die angegebene Auflistung über mindestens ein gemeinsames Element verfügen; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)">
      <summary>Fügt dieser unveränderlichen Gruppe das angegebene Element hinzu.</summary>
      <param name="value">Das zu entfernende Element.</param>
      <returns>Eine neue Gruppe, aus der das angegebene Element entfernt wurde, oder die aktuelle Gruppe, wenn das Element in der Gruppe nicht gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob die aktuelle unveränderliche Gruppe und die angegebene Auflistung dieselben Elemente enthalten.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die Gruppen gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Erstellt eine unveränderliche Gruppe, die nur Elemente enthält, die entweder in der aktuellen Gruppe oder in der angegebenen Auflistung, aber nicht in beiden vorhanden sind.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>Eine neue Gruppe mit den Elementen, die nur in der aktuellen Gruppe oder in der angegebenen Auflistung, aber nicht in beiden vorhanden sind.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)">
      <summary>Bestimmt, ob die Liste einen bestimmten Wert enthält.</summary>
      <param name="equalValue">Der zu suchende Wert.</param>
      <param name="actualValue">Der übereinstimmende Wert aus der Gruppe, wenn gefunden, oder <c>equalvalue</c>, wenn keine Übereinstimmungen vorhanden sind.</param>
      <returns>
        <see langword="true" />, Wenn ein entsprechender Wert gefunden wurde; anderenfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Erstellt eine unveränderliche Gruppe, die alle Elemente enthält, die entweder in der aktuellen Gruppe oder in der angegebenen Auflistung vorhanden sind.</summary>
      <param name="other">Die Auflistung, aus der Elemente hinzugefügt werden sollen.</param>
      <returns>Eine neue unveränderliche Gruppe mit den hinzugefügten Elementen; oder die ursprüngliche Gruppe, wenn alle Elemente bereits in der Gruppe enthalten waren.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableStack`1">
      <summary>Stellt eine unveränderliche LIFO (Last-In-First-Out)-Auflistung dar.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="T">Der Typ der Elemente in dem Stapel.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Clear">
      <summary>Entfernt alle Objekte aus dem unveränderlichen Stapel.</summary>
      <returns>Ein leerer unveränderlicher Stapel.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableStack`1.IsEmpty">
      <summary>Ruft einen Wert ab, der angibt, ob dieser unveränderliche Stapel leer ist.</summary>
      <returns>
        <see langword="true" />, wenn dieser Stapel leer ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Peek">
      <summary>Gibt das Element am Anfang des unveränderlichen Stapels zurück, ohne ihn zu entfernen.</summary>
      <returns>Das Element oben im Stapel.</returns>
      <exception cref="T:System.InvalidOperationException">Der Stapel ist leer.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Pop">
      <summary>Entfernt das Element am Anfang des unveränderlichen Stapels und gibt den neuen Stapel zurück.</summary>
      <returns>Der neue Stapel; nie <c>NULL</c></returns>
      <exception cref="T:System.InvalidOperationException">Der Stapel ist leer.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Push(`0)">
      <summary>Fügt ein Element am Anfang des unveränderlichen Stapels ein und gibt den neuen Stapel zurück.</summary>
      <param name="value">Das Element, das auf dem Stapel abgelegt werden soll.</param>
      <returns>Der neue Stapel.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray">
      <summary>Stellt Methoden zum Erstellen eines Arrays bereit, das unveränderlich ist. Dies bedeutet, dass es nach der Erstellung nicht mehr geändert werden kann.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)">
      <summary>Durchsucht mithilfe des Standardvergleichs das sortierte unveränderliche Array nach einem angegebenen Element und gibt den nullbasierten Index des Elements zurück, wenn es gefunden wird.</summary>
      <param name="array">Das sortierte Array, das durchsucht werden soll.</param>
      <param name="value">Das Objekt, nach dem gesucht werden soll.</param>
      <typeparam name="T">Der Typ des im Array gespeicherten Elements.</typeparam>
      <returns>Der nullbasierte Index des Elements im Array, sofern das Element gefunden wird, andernfalls eine negative Zahl, die das bitweise Komplement des Indexes des nächsten Elements darstellt, das größer als <paramref name="value" /> ist, oder, wenn kein größeres Element vorhanden ist, das bitweise Komplement von <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> implementiert <see cref="T:System.IComparable" /> nicht, oder bei der Suche wird ein Element gefunden, das <see cref="T:System.IComparable" /> nicht implementiert.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})">
      <summary>Durchsucht ein sortiertes unveränderliches Array nach einem angegebenen Element und gibt den nullbasierten Index des Elements zurück, wenn es gefunden wird.</summary>
      <param name="array">Das sortierte Array, das durchsucht werden soll.</param>
      <param name="value">Das Objekt, nach dem gesucht werden soll.</param>
      <param name="comparer">Die Vergleichsimplementierung, die beim Vergleichen von Elementen verwendet werden soll, oder NULL, wenn der Standardvergleich verwendet werden soll.</param>
      <typeparam name="T">Der Typ des im Array gespeicherten Elements.</typeparam>
      <returns>Der nullbasierte Index des Elements im Array, sofern das Element gefunden wird, andernfalls eine negative Zahl, die das bitweise Komplement des Indexes des nächsten Elements darstellt, das größer als <paramref name="value" /> ist, oder, wenn kein größeres Element vorhanden ist, das bitweise Komplement von <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> ist NULL, und <paramref name="value" /> implementiert <see cref="T:System.IComparable" /> nicht, oder bei der Suche wird ein Element gefunden, das <see cref="T:System.IComparable" /> nicht implementiert.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)">
      <summary>Durchsucht ein sortiertes unveränderliches Array nach einem angegebenen Element und gibt den nullbasierten Index des Elements zurück, wenn es gefunden wird.</summary>
      <param name="array">Das sortierte Array, das durchsucht werden soll.</param>
      <param name="index">Der Startindex des zu durchsuchenden Bereichs.</param>
      <param name="length">Die Länge des zu durchsuchenden Bereichs.</param>
      <param name="value">Das Objekt, nach dem gesucht werden soll.</param>
      <typeparam name="T">Der Typ des im Array gespeicherten Elements.</typeparam>
      <returns>Der nullbasierte Index des Elements im Array, sofern das Element gefunden wird, andernfalls eine negative Zahl, die das bitweise Komplement des Indexes des nächsten Elements darstellt, das größer als <paramref name="value" /> ist, oder, wenn kein größeres Element vorhanden ist, das bitweise Komplement von <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> implementiert <see cref="T:System.IComparable" /> nicht, oder bei der Suche wird ein Element gefunden, das <see cref="T:System.IComparable" /> nicht implementiert.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> und <paramref name="length" /> geben keinen gültigen Bereich im <paramref name="array" /> an.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ist kleiner als die untere <paramref name="array" />-Grenze.

oder -

<paramref name="length" /> ist kleiner als Null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>Durchsucht ein sortiertes unveränderliches Array nach einem angegebenen Element und gibt den nullbasierten Index des Elements zurück.</summary>
      <param name="array">Das sortierte Array, das durchsucht werden soll.</param>
      <param name="index">Der Startindex des zu durchsuchenden Bereichs.</param>
      <param name="length">Die Länge des zu durchsuchenden Bereichs.</param>
      <param name="value">Das Objekt, nach dem gesucht werden soll.</param>
      <param name="comparer">Der Vergleich, der beim Vergleichen von Elementen auf Gleichheit verwendet werden soll, oder <see langword="null" />, wenn der Standardvergleich verwendet werden soll.</param>
      <typeparam name="T">Der Typ des im Array gespeicherten Elements.</typeparam>
      <returns>Der nullbasierte Index des Elements im Array, sofern das Element gefunden wird, andernfalls eine negative Zahl, die das bitweise Komplement des Indexes des nächsten Elements darstellt, das größer als <paramref name="value" /> ist, oder, wenn kein größeres Element vorhanden ist, das bitweise Komplement von <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> ist NULL, und <paramref name="value" /> implementiert <see cref="T:System.IComparable" /> nicht, oder bei der Suche wird ein Element gefunden, das <see cref="T:System.IComparable" /> nicht implementiert.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> und <paramref name="length" /> geben keinen gültigen Bereich im <paramref name="array" /> an.

oder -

<paramref name="comparer" /> ist <see langword="null" /> und <paramref name="value" /> verfügt über einen Typ, der nicht mit den Elementen von <paramref name="array" /> kompatibel ist.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ist kleiner als die untere <paramref name="array" />-Grenze.

oder -

<paramref name="length" /> ist kleiner als Null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1">
      <summary>Erstellt ein leeres unveränderliches Array.</summary>
      <typeparam name="T">Der Typ der im Array gespeicherten Elemente.</typeparam>
      <returns>Ein leeres unveränderliches Array.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0)">
      <summary>Erstellt ein unveränderliches Array, das das angegebene Objekt enthält.</summary>
      <param name="item">Das Objekt, das im Array gespeichert werden soll.</param>
      <typeparam name="T">Der Typ der im Array gespeicherten Elemente.</typeparam>
      <returns>Ein unveränderliches Array, das das angegebene Objekt enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)">
      <summary>Erstellt ein unveränderliches Array, das die angegebenen Objekte enthält.</summary>
      <param name="item1">Das erste Objekt, das im Array gespeichert werden soll.</param>
      <param name="item2">Das zweite Objekt, das im Array gespeichert werden soll.</param>
      <typeparam name="T">Der Typ der im Array gespeicherten Elemente.</typeparam>
      <returns>Ein unveränderliches Array, das die angegebenen Objekte enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)">
      <summary>Erstellt ein unveränderliches Array, das die angegebenen Objekte enthält.</summary>
      <param name="item1">Das erste Objekt, das im Array gespeichert werden soll.</param>
      <param name="item2">Das zweite Objekt, das im Array gespeichert werden soll.</param>
      <param name="item3">Das dritte Objekt, das im Array gespeichert werden soll.</param>
      <typeparam name="T">Der Typ der im Array gespeicherten Elemente.</typeparam>
      <returns>Ein unveränderliches Array, das die angegebenen Objekte enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)">
      <summary>Erstellt ein unveränderliches Array, das die angegebenen Objekte enthält.</summary>
      <param name="item1">Das erste Objekt, das im Array gespeichert werden soll.</param>
      <param name="item2">Das zweite Objekt, das im Array gespeichert werden soll.</param>
      <param name="item3">Das dritte Objekt, das im Array gespeichert werden soll.</param>
      <param name="item4">Das vierte Objekt, das im Array gespeichert werden soll.</param>
      <typeparam name="T">Der Typ der im Array gespeicherten Elemente.</typeparam>
      <returns>Ein unveränderliches Array, das die angegebenen Objekte enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[])">
      <summary>Erstellt ein unveränderliches Array aus dem angegebenen Objektarray.</summary>
      <param name="items">Das Array von Objekten, mit denen das Array aufgefüllt werden soll.</param>
      <typeparam name="T">Der Typ der im Array gespeicherten Elemente.</typeparam>
      <returns>Ein unveränderliches Array, das das Array von Elementen enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)">
      <summary>Erstellt ein unveränderliches Array mit den angegebenen Objekten aus einem anderen Array.</summary>
      <param name="items">Das Quellarray von Objekten.</param>
      <param name="start">Der Index des ersten aus <paramref name="items" /> zu kopierenden Elements.</param>
      <param name="length">Die Anzahl der Elemente von <paramref name="items" />, die in dieses unveränderliche Array eingeschlossen werden sollen.</param>
      <typeparam name="T">Der Typ der im Array gespeicherten Elemente.</typeparam>
      <returns>Ein unveränderliches Array, das die angegebenen Objekte aus dem Quellarray enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)">
      <summary>Erstellt ein unveränderliches Array mit den angegebenen Objekten aus einem anderen unveränderlichen Array.</summary>
      <param name="items">Das Quellarray von Objekten.</param>
      <param name="start">Der Index des ersten aus <paramref name="items" /> zu kopierenden Elements.</param>
      <param name="length">Die Anzahl der Elemente von <paramref name="items" />, die in dieses unveränderliche Array eingeschlossen werden sollen.</param>
      <typeparam name="T">Der Typ der im Array gespeicherten Elemente.</typeparam>
      <returns>Ein unveränderliches Array, das die angegebenen Objekte aus dem Quellarray enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1">
      <summary>Erstellt ein änderbares Array, das in <see cref="T:System.Collections.Immutable.ImmutableArray" /> konvertiert werden kann, ohne neuen Arbeitsspeicher zu belegen.</summary>
      <typeparam name="T">Der Typ der im Generator gespeicherten Elemente.</typeparam>
      <returns>Ein änderbares Array des angegebenen Typs, das effizient in ein unveränderliches Array konvertiert werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)">
      <summary>Erstellt ein änderbares Array, das in <see cref="T:System.Collections.Immutable.ImmutableArray" /> konvertiert werden kann, ohne neuen Arbeitsspeicher zu belegen.</summary>
      <param name="initialCapacity">Die Anfangskapazität des Generators.</param>
      <typeparam name="T">Der Typ der im Generator gespeicherten Elemente.</typeparam>
      <returns>Ein änderbares Array des angegebenen Typs, das effizient in ein unveränderliches Array konvertiert werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Erstellt ein neues <see cref="T:System.Collections.Immutable.ImmutableArray`1" />, das mit den angegebenen Elementen aufgefüllt ist.</summary>
      <param name="items">Die Elemente, die zum Array hinzugefügt werden sollen.</param>
      <typeparam name="T">Der Typ des im Array gespeicherten Elements.</typeparam>
      <returns>Ein unveränderliches Array, das die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Collections.Immutable.ImmutableArray`1" />-Struktur.</summary>
      <param name="items">Das Quellarray, mit dem das resultierende Array initialisiert wird.</param>
      <param name="selector">Die Funktion, die aus dem Quellarray auf jedes Element angewendet werden soll.</param>
      <typeparam name="TSource" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Collections.Immutable.ImmutableArray`1" />-Struktur.</summary>
      <param name="items">Das Quellarray, mit dem das resultierende Array initialisiert wird.</param>
      <param name="start">Der Index des ersten Elements im Quellarray, das in das resultierende Array eingeschlossen werden soll.</param>
      <param name="length">Die Anzahl von Elementen aus dem Quellarray, die in das sich ergebende Array eingeschlossen werden sollen.</param>
      <param name="selector">Die Funktion, die auf jedes Element vom Quellarray, das im resultierenden Array enthalten ist, angewendet werden soll.</param>
      <typeparam name="TSource" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Collections.Immutable.ImmutableArray`1" />-Struktur.</summary>
      <param name="items">Das Quellarray, mit dem das resultierende Array initialisiert wird.</param>
      <param name="selector">Die Funktion, die aus dem Quellarray auf jedes Element angewendet werden soll.</param>
      <param name="arg">Ein Argument, das an die Zuordnungsfunktion des Selektors übergeben werden soll.</param>
      <typeparam name="TSource" />
      <typeparam name="TArg" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Collections.Immutable.ImmutableArray`1" />-Struktur.</summary>
      <param name="items">Das Quellarray, mit dem das resultierende Array initialisiert wird.</param>
      <param name="start">Der Index des ersten Elements im Quellarray, das in das resultierende Array eingeschlossen werden soll.</param>
      <param name="length">Die Anzahl von Elementen aus dem Quellarray, die in das sich ergebende Array eingeschlossen werden sollen.</param>
      <param name="selector">Die Funktion, die auf jedes Element vom Quellarray, das im resultierenden Array enthalten ist, angewendet werden soll.</param>
      <param name="arg">Ein Argument, das an die Zuordnungsfunktion des Selektors übergeben werden soll.</param>
      <typeparam name="TSource" />
      <typeparam name="TArg" />
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Erstellt ein unveränderliches Array aus der angegebenen Auflistung.</summary>
      <param name="items">Die Auflistung von Objekten, die in das unveränderliche Array kopiert werden sollen.</param>
      <typeparam name="TSource">Der Typ der in <paramref name="items" /> enthaltenen Elemente.</typeparam>
      <returns>Ein unveränderliches Array, das die angegebene Auflistung von Objekten enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Erstellt ein unveränderliches Array aus dem aktuellen Inhalt des Arrays des Generators.</summary>
      <param name="builder">Der Generator, aus dem das unveränderliche Array erstellt werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente, die im unveränderlichen Array enthalten sind.</typeparam>
      <returns>Ein unveränderliches Array, das den aktuellen Inhalt des Arrays des Generators enthält.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1">
      <summary>Stellt ein Array dar, das unveränderlich ist; was bedeutet, dass es nach Erstellung nicht mehr geändert werden kann.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="T">Der Typ des Elements, das durch das Array gespeichert wird.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Add(`0)">
      <summary>Gibt eine Kopie des ursprünglichen Arrays mit dem angegebenen, am Ende hinzugefügten, Element zurück.</summary>
      <param name="item">Das Element, das zum Ende des Arrays hinzugefügt werden soll.</param>
      <returns>Ein neues Array mit dem am Ende hinzugefügten angegebenen Element.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Gibt eine Kopie des ursprünglichen Arrays mit den angegebenen, zum Ende des Arrays hinzugefügten, Elementen zurück.</summary>
      <param name="items">Die Elemente, die zum Array hinzugefügt werden sollen.</param>
      <returns>Ein neues Array mit den hinzugefügten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Gibt eine Kopie des ursprünglichen Arrays mit den angegebenen, zum Ende des Arrays hinzugefügten, Elementen zurück.</summary>
      <param name="items">Die Elemente, die zum Array hinzugefügt werden sollen.</param>
      <returns>Ein neues Array mit den hinzugefügten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.As``1">
      <summary>Gibt ein neues unveränderliches Array zurück, das die Elemente dieses Arrays enthält und zu einem anderen Typ umgewandelt wurde.</summary>
      <typeparam name="TOther">Der Typ des zurückzugebenden Array-Elements.</typeparam>
      <returns>Ein unveränderliches Array, das die Elemente dieses Arrays enthält und zu einem anderen Typ umgewandelt wurde. Wenn die Umwandlung fehlschlägt, gibt es ein Array zurück, dessen <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> Eigenschaft <see langword="true" /> zurückgibt.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsMemory">
      <summary>Erstellt eine neue schreibgeschützte Speicherregion über diesem unveränderlichen Array.</summary>
      <returns>Die schreibgeschützte Speicherdarstellung dieses unveränderlichen Arrays.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsSpan">
      <summary>Erstellt einen neue schreibgeschützten Bereich über diesem unveränderlichen Array.</summary>
      <returns>Die schreibgeschützte Bereichsdarstellung dieses unveränderlichen Arrays.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Builder">
      <summary>Eine beschreibbare Arrayzugriffsmethode, der in eine <see cref="T:System.Collections.Immutable.ImmutableArray`1" />-Instanz konvertiert werden kann, ohne zusätzlichen Speicher zu belegen.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)">
      <summary>Fügt dem Array das angegebene Element hinzu.</summary>
      <param name="item">Das Objekt, das dem Array hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])">
      <summary>Fügt das angegebene Element am Ende des Arrays hinzu.</summary>
      <param name="items">Das Element, das der Liste hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)">
      <summary>Fügt das angegebene Element am Ende des Arrays hinzu.</summary>
      <param name="items">Das Element, das der Liste hinzugefügt werden soll.</param>
      <param name="length">Die Anzahl der aus dem Quellarray hinzuzufügenden Elemente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Fügt das angegebene Element am Ende des Arrays hinzu.</summary>
      <param name="items">Das Element, das der Liste hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Fügt das angegebene Element am Ende des Arrays hinzu.</summary>
      <param name="items">Das Element, das der Liste hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)">
      <summary>Fügt das angegebene Element am Ende des Arrays hinzu.</summary>
      <param name="items">Das Element, das der Liste hinzugefügt werden soll.</param>
      <param name="length">Die Anzahl der aus dem Quellarray hinzuzufügenden Elemente.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)">
      <summary>Fügt das angegebene Element am Ende des Arrays hinzu.</summary>
      <param name="items">Das Element, das der Liste hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])">
      <summary>Fügt die angegebenen Elemente, die vom derzeit im Array angegebenen Typ abgeleitet werden, am Ende des Arrays hinzu.</summary>
      <param name="items">Die Elemente, die dem Ende des Arrays hinzugefügt werden sollen.</param>
      <typeparam name="TDerived">Der Typ, der von dem bereits im Array vorhandenen Elementtyp abgeleitet wird.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Fügt die angegebenen Elemente, die vom derzeit im Array angegebenen Typ abgeleitet werden, am Ende des Arrays hinzu.</summary>
      <param name="items">Die Elemente, die dem Ende des Arrays hinzugefügt werden sollen.</param>
      <typeparam name="TDerived">Der Typ, der von dem bereits im Array vorhandenen Elementtyp abgeleitet wird.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Fügt die angegebenen Elemente, die vom derzeit im Array angegebenen Typ abgeleitet werden, am Ende des Arrays hinzu.</summary>
      <param name="items">Die Elemente, die dem Ende des Arrays hinzugefügt werden sollen.</param>
      <typeparam name="TDerived">Der Typ, der von dem bereits im Array vorhandenen Elementtyp abgeleitet wird.</typeparam>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">
      <summary>Ruft die Länge des internen Arrays ab bzw. legt sie fest. Wenn sie festgelegt wird, wird das interne Array der angegebenen Kapazität neu zugeordnet, wenn es nicht bereits in der angegebenen Länge vorhanden ist.</summary>
      <returns>Die Länge des internen Arrays.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Clear">
      <summary>Entfernt alle Elemente aus dem Array.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)">
      <summary>Bestimmt, ob das Array einen bestimmten Wert enthält.</summary>
      <param name="item">Das Objekt, das im Array gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn das Objekt gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)">
      <summary>Kopiert den aktuellen Inhalt in das angegebene Array.</summary>
      <param name="array">Das Array, in das kopiert werden soll.</param>
      <param name="index">Der Index, an dem der Kopiervorgang gestartet werden soll.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">
      <summary>Ruft die Anzahl der Elemente im Array ab oder legt sie fest.</summary>
      <returns>Die Anzahl der Elemente im Array.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator">
      <summary>Ruft ein Objekt ab, das zum Durchlaufen der Auflistung verwendet werden kann.</summary>
      <returns>Ein Objekt, das zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)">
      <summary>Bestimmt den Index eines bestimmten Elements im Array.</summary>
      <param name="item">Das Element, das im Array gesucht werden soll.</param>
      <returns>Der Index von <paramref name="item" />, wenn das Element in der Liste gefunden wird, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)">
      <summary>Bestimmt den Index des angegebenen Elements.</summary>
      <param name="item">Das Element, das im Array gesucht werden soll.</param>
      <param name="startIndex">Die Anfangsposition der Suche.</param>
      <returns>Der Index von <paramref name="item" />, wenn das Element in der Liste gefunden wird, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary>Bestimmt den Index des angegebenen Elements.</summary>
      <param name="item">Das Element, das im Array gesucht werden soll.</param>
      <param name="startIndex">Die Anfangsposition der Suche.</param>
      <param name="count">Die Anzahl der zu suchenden Elemente.</param>
      <returns>Der Index von <paramref name="item" />, wenn das Element in der Liste gefunden wird, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Bestimmt den Index des angegebenen Elements.</summary>
      <param name="item">Das Element, das im Array gesucht werden soll.</param>
      <param name="startIndex">Der Index, bei dem mit der Suche begonnen werden soll.</param>
      <param name="count">Die Anfangsposition der Suche.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich für die Suche.</param>
      <returns>Der Index von <paramref name="item" />, wenn das Element in der Liste gefunden wird, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)">
      <summary>Fügt ein Element am angegebenen Index in das Array ein.</summary>
      <param name="index">Der nullbasierte Index, an dem das Element eingefügt werden soll.</param>
      <param name="item">Das Objekt, das in das Array eingefügt werden soll.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)">
      <summary>Ruft das Element am angegebenen Index ab oder legt dieses fest.</summary>
      <param name="index">Der Index des abzurufenden oder festzulegenden Elements.</param>
      <returns>Das Element am angegebenen Index.</returns>
      <exception cref="T:System.IndexOutOfRangeException">Der angegebene Index befindet sich nicht im Array.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ItemRef(System.Int32)">
      <summary>Ruft einen schreibgeschützten Verweis auf das Element am angegebenen Index ab.</summary>
      <param name="index">Der Elementindex.</param>
      <returns>Der schreibgeschützte Verweis auf das Element am angegebenen Index.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> ist größer oder gleich der Arrayzahl.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)">
      <summary>Bestimmt den nullbasierten Index des letzten Vorkommens des angegebenen Elements in diesem Array.</summary>
      <param name="item">Das Element, nach dem gesucht werden soll.</param>
      <returns>Der nullbasierte Index, in dem das Element gefunden wurde; oder -1, wenn es nicht gefunden werden konnte.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary>Bestimmt den nullbasierten Index des letzten Vorkommens des angegebenen Elements in diesem Array.</summary>
      <param name="item">Das Element, nach dem gesucht werden soll.</param>
      <param name="startIndex">Die Anfangsposition der Suche.</param>
      <returns>Der nullbasierte Index im Array, in dem das Element gefunden wurde; oder -1, wenn es nicht gefunden werden konnte.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>Bestimmt den nullbasierten Index des letzten Vorkommens des angegebenen Elements in diesem Array.</summary>
      <param name="item">Das Element, nach dem gesucht werden soll.</param>
      <param name="startIndex">Die Anfangsposition der Suche.</param>
      <param name="count">Die Anzahl der zu suchenden Elemente.</param>
      <returns>Der nullbasierte Index im Array, in dem das Element gefunden wurde; oder -1, wenn es nicht gefunden werden konnte.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Bestimmt den nullbasierten Index des letzten Vorkommens des angegebenen Elements in diesem Array.</summary>
      <param name="item">Das Element, nach dem gesucht werden soll.</param>
      <param name="startIndex">Die Anfangsposition der Suche.</param>
      <param name="count">Die Anzahl der zu suchenden Elemente.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich für die Suche.</param>
      <returns>Der nullbasierte Index im Array, in dem das Element gefunden wurde; oder -1, wenn es nicht gefunden werden konnte.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable">
      <summary>Extrahiert das interne Array als <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> und ersetzt es durch ein Array, das eine Länge von 0 (null) hat.</summary>
      <exception cref="T:System.InvalidOperationException">Wenn <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count" /> nicht <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity" /> entspricht.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)">
      <summary>Entfernt das angegebene Element.</summary>
      <param name="element">Das zu entfernende Element.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="element" /> gefunden und entfernt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)">
      <summary>Entfernt das Element am angegebenen Index aus dem Array.</summary>
      <param name="index">Der nullbasierte Index des zu entfernenden Elements.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Reverse">
      <summary>Kehrt die Reihenfolge der Elemente in der Auflistung um.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort">
      <summary>Sortiert den Inhalt des Arrays.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Sortiert den Inhalt des Arrays.</summary>
      <param name="comparer">Der Vergleich, der für die Sortierung verwendet wird. Wenn der Vergleich <see langword="null" /> ist, wird der Standardvergleich für den Elementtyp im Array verwendet.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Comparison{`0})">
      <summary>Sortiert die Elemente im gesamten Array mithilfe des angegebenen <see cref="T:System.Comparison`1" />-Objekts.</summary>
      <param name="comparison">Die <see cref="T:System.Comparison`1" />, die beim Vergleich von Elementen verwendet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> ist NULL.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Sortiert den Inhalt des Arrays.</summary>
      <param name="index">Der Startindex für die Sortierung.</param>
      <param name="count">Die Anzahl von Elementen, die in die Sortierung eingeschlossen werden sollen.</param>
      <param name="comparer">Der Vergleich, der für die Sortierung verwendet wird. Wenn der Vergleich <see langword="null" /> ist, wird der Standardvergleich für den Elementtyp im Array verwendet.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist.</summary>
      <returns>
        <see langword="true" />, wenn das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der das Array durchläuft.</summary>
      <returns>Ein Enumerator, der das Array durchläuft.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der das Array durchläuft.</summary>
      <returns>Ein Enumerator, der das Array durchläuft.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray">
      <summary>Erstellt ein neues Array mit dem aktuellen Inhalt dieses <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</summary>
      <returns>Ein neues Array mit dem Inhalt dieses <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable">
      <summary>Gibt ein unveränderliches Array mit dem aktuellen Inhalt dieses <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" /> zurück.</summary>
      <returns>Ein unveränderliches Array mit dem aktuellen Inhalt dieses <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastArray``1">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Collections.Immutable.ImmutableArray`1" />-Struktur, indem das zugrunde liegende             Array in ein Array des Typs <paramref name="TOther" /> umgewandelt wird.</summary>
      <typeparam name="TOther" />
      <exception cref="T:System.InvalidCastException">Wird ausgelöst, wenn die Umwandlung nicht zulässig ist.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Collections.Immutable.ImmutableArray`1" />-Struktur basierend auf den Inhalten einer vorhandenen Instanz, wodurch eine kovariante statische Umwandlung das vorhandene Array effizient wiederverwenden kann.</summary>
      <param name="items">Das Array, mit dem das Array initialisiert werden soll. Es wird keine Kopie erstellt.</param>
      <typeparam name="TDerived" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Clear">
      <summary>Gibt ein Array zurück, dessen Elemente entfernt wurden.</summary>
      <returns>Ein Array, dessen Elemente entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)">
      <summary>Bestimmt, ob das angegebene Element im Array vorhanden ist.</summary>
      <param name="item">Das Element, nach dem gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn das angegebene Element im Array gefunden wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])">
      <summary>Kopiert den Inhalt dieses Arrays in ein angegebenes Array.</summary>
      <param name="destination">Das Array, in das kopiert werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)">
      <summary>Kopiert den Inhalt dieses Arrays in das angegebene Array, wobei am angegebenen Zielindex begonnen wird.</summary>
      <param name="destination">Das Array, in das kopiert werden soll.</param>
      <param name="destinationIndex">Der Index im <paramref name="array" />, bei dem mit dem Kopieren begonnen wird.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Kopiert die angegebenen Elemente in diesem Array in das angegebene Array am angegebenen Startindex.</summary>
      <param name="sourceIndex">Der Index dieses Arrays, bei dem mit dem Kopieren begonnen wird.</param>
      <param name="destination">Das Array, in das kopiert werden soll.</param>
      <param name="destinationIndex">Der Index im <paramref name="array" />, bei dem mit dem Kopieren begonnen wird.</param>
      <param name="length">Die Anzahl von Elementen, die von diesem Array kopiert werden.</param>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableArray`1.Empty">
      <summary>Ruft ein leeres unveränderliches Array auf.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Enumerator">
      <summary>Ein Array-Enumerator.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Enumerator.Current">
      <summary>Ruft das aktuelle Element ab.</summary>
      <returns>Das aktuelle Element.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext">
      <summary>Wechselt zum nächsten Wert im Array.</summary>
      <returns>
        <see langword="true" />, wenn ein anderes Element im Array vorhanden ist; anderenfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Gibt an, ob eine angegebenes Array diesem Array entspricht.</summary>
      <param name="other">Ein Objekt, das mit diesem Objekt verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="other" /> mit diesem Array identisch ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)">
      <summary>Bestimmt, ob dieses Array dem angegebenen Objekt entspricht.</summary>
      <param name="obj">Das <see cref="T:System.Object" />, das mit diesem Array verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn dieses Array mit <paramref name="obj" /> identisch ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der den Inhalt des Arrays durchläuft.</summary>
      <returns>Ein Enumerator.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetHashCode">
      <summary>Gibt einen Hashcode für diese Instanz zurück.</summary>
      <returns>Ein Hashcode für diese Instanz, der zur Verwendung in Hashalgorithmen und Hashdatenstrukturen, z. B. einer Hashtabelle, geeignet ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)">
      <summary>Sucht im Array nach dem angegebenen Text.</summary>
      <param name="item">Das Element, nach dem gesucht werden soll.</param>
      <returns>Die nullbasierte Indexposition des Elements, wenn sie gefunden wurde, andernfalls -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)">
      <summary>Sucht im Array nach dem angegebenen Text.</summary>
      <param name="item">Das Element, nach dem gesucht werden soll.</param>
      <param name="startIndex">Der Index, bei dem mit der Suche begonnen werden soll.</param>
      <returns>Die nullbasierte Indexposition des Elements, wenn sie gefunden wurde, andernfalls -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Sucht im Array nach dem angegebenen Text.</summary>
      <param name="item">Das Element, nach dem gesucht werden soll.</param>
      <param name="startIndex">Der Index, bei dem mit der Suche begonnen werden soll.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich für die Suche.</param>
      <returns>Die nullbasierte Indexposition des Elements, wenn sie gefunden wurde, andernfalls -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary>Sucht im Array nach dem angegebenen Text.</summary>
      <param name="item">Das Element, nach dem gesucht werden soll.</param>
      <param name="startIndex">Der Index, bei dem mit der Suche begonnen werden soll.</param>
      <param name="count">Die Anzahl der zu suchenden Elemente.</param>
      <returns>Die nullbasierte Indexposition des Elements, wenn sie gefunden wurde, andernfalls -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Sucht im Array nach dem angegebenen Text.</summary>
      <param name="item">Das Element, nach dem gesucht werden soll.</param>
      <param name="startIndex">Der Index, bei dem mit der Suche begonnen werden soll.</param>
      <param name="count">Die Anzahl der zu suchenden Elemente.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich für die Suche.</param>
      <returns>Die nullbasierte Indexposition des Elements, wenn sie gefunden wurde, andernfalls -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)">
      <summary>Gibt ein neues Array mit dem angegebenen Wert zurück, der an der angegebenen Position eingefügt wurde.</summary>
      <param name="index">Der nullbasierte Index im Array, an dem das neue Element hinzugefügt werden soll.</param>
      <param name="item">Das am Anfang des Arrays einzufügende Element.</param>
      <returns>Ein neues Array mit dem Element , das am angegebenen Index eingefügt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Fügt die angegebenen Werte am angegebenen Index ein.</summary>
      <param name="index">Der Index, an dem der Wert eingefügt werden soll.</param>
      <param name="items">Die einzufügenden Elemente.</param>
      <returns>Ein neues unveränderliches Array mit den Elementen, die am angegebenen Index eingefügt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Fügt die angegebenen Werte am angegebenen Index ein.</summary>
      <param name="index">Der Index, an dem der Wert eingefügt werden soll.</param>
      <param name="items">Die einzufügenden Elemente.</param>
      <returns>Ein neues unveränderliches Array mit den Elementen, die am angegebenen Index eingefügt wurden.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefault">
      <summary>Ruft einen Wert ab, der angibt, ob dieses Array deklariert, aber nicht initialisiert wurde.</summary>
      <returns>
        <see langword="true" />, wenn <see cref="T:System.Collections.Immutable.ImmutableArray`1" /><see langword="null" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty">
      <summary>Ruft einen Wert ab, der angibt, ob dieser <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> leer ist oder nicht initialisiert wurde.</summary>
      <returns>
        <see langword="true" />
        <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> , Wenn<see langword="false" />oder <see langword="null" />ist,andernfalls <see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsEmpty">
      <summary>Ruft einen Wert ab, der angibt, ob dieser <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> leer ist.</summary>
      <returns>
        <see langword="true" />, wenn das <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> leer ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)">
      <summary>Ruft das Element am angegebenen Index im unveränderlichen Array ab.</summary>
      <param name="index">Der nullbasierte Index des abzurufenden Elements.</param>
      <returns>Das Element am angegebenen Index im unveränderlichen Array.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ItemRef(System.Int32)">
      <summary>Ruft einen schreibgeschützten Verweis auf das Element am angegebenen <paramref name="index" /> in der schreibgeschützten Liste ab.</summary>
      <param name="index">Der nullbasierte Index des Elements, auf das ein Verweis abgerufen werden soll.</param>
      <returns>Ein schreibgeschützter Verweis auf das Element am angegebenen <paramref name="index" /> in der schreibgeschützten Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)">
      <summary>Durchsucht das Array nach dem angegebenen Element; beginnt am Ende des Arrays.</summary>
      <param name="item">Das Element, nach dem gesucht werden soll.</param>
      <returns>Der nullbasierte Index im Array, in dem das Element gefunden wurde; oder -1, wenn es nicht gefunden werden konnte.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)">
      <summary>Durchsucht das Array nach dem angegebenen Element; beginnt am Ende des Arrays.</summary>
      <param name="item">Das Element, nach dem gesucht werden soll.</param>
      <param name="startIndex">Der Index, bei dem mit der Suche begonnen werden soll.</param>
      <returns>Der nullbasierte Index im Array, in dem das Element gefunden wurde; oder -1, wenn es nicht gefunden werden konnte.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>Durchsucht das Array nach dem angegebenen Element; beginnt am Ende des Arrays.</summary>
      <param name="item">Das Element, nach dem gesucht werden soll.</param>
      <param name="startIndex">Der Index, bei dem mit der Suche begonnen werden soll.</param>
      <param name="count">Die Anzahl der zu suchenden Elemente.</param>
      <returns>Der nullbasierte Index im Array, in dem das Element gefunden wurde; oder -1, wenn es nicht gefunden werden konnte.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Durchsucht das Array nach dem angegebenen Element; beginnt am Ende des Arrays.</summary>
      <param name="item">Das Element, nach dem gesucht werden soll.</param>
      <param name="startIndex">Der Index, bei dem mit der Suche begonnen werden soll.</param>
      <param name="count">Die Anzahl der zu suchenden Elemente.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich für die Suche.</param>
      <returns>Der nullbasierte Index im Array, in dem das Element gefunden wurde; oder -1, wenn es nicht gefunden werden konnte.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Length">
      <summary>Ruft die Anzahl der Elemente im Array ab.</summary>
      <returns>Die Anzahl der Elemente im Array.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.OfType``1">
      <summary>Filtert die Elemente dieses Arrays zu denen, die dem angegebenen Typ zugewiesen werden.</summary>
      <typeparam name="TResult">Der Typ, nach dem die Elemente der Sequenz gefiltert werden sollen.</typeparam>
      <returns>Ein <see cref="T:System.Collections.IEnumerable" />, das Elemente aus der Eingabesequenz vom Typ <paramref name="TResult" /> enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Gibt einen Wert zurück, der angibt, ob zwei Arrays gleich sind.</summary>
      <param name="left">Das Array, das links vom Operator steht.</param>
      <param name="right">Das Array, das rechts vom Operator steht.</param>
      <returns>
        <see langword="true" /> bei Gleichheit der Arrays, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary>Gibt einen Wert zurück, der angibt, ob zwei Arrays gleich sind.</summary>
      <param name="left">Das Array, das links vom Operator steht.</param>
      <param name="right">Das Array, das rechts vom Operator steht.</param>
      <returns>
        <see langword="true" /> bei Gleichheit der Arrays, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Gibt einen Wert zurück, der angibt, ob zwei Arrays ungleich sind.</summary>
      <param name="left">Das Array, das links vom Operator steht.</param>
      <param name="right">Das Array, das rechts vom Operator steht.</param>
      <returns>
        <see langword="true" />, wenn die Arrays nicht gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary>Prüft auf Ungleichheit zwischen zwei Arrays.</summary>
      <param name="left">Das Objekt, das links vom Operator steht.</param>
      <param name="right">Das Objekt, das rechts vom Operator steht.</param>
      <returns>
        <see langword="true" />, wenn die beiden Arrays nicht gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)">
      <summary>Gibt ein Array mit dem ersten Vorkommen des angegebenen Elements zurück, das aus dem Array entfernt wurde. Wenn keine Übereinstimmung gefunden wird, wird das aktuelle Array zurückgegeben.</summary>
      <param name="item">Das zu entfernende Element.</param>
      <returns>Ein neues Array, bei dem das Element entfernt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Gibt ein Array mit dem ersten Vorkommen des angegebenen Elements zurück, das aus dem Array entfernt wurde.  
 Wenn keine Übereinstimmung gefunden wird, wird das aktuelle Array zurückgegeben.</summary>
      <param name="item">Das zu entfernende Element.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich für die Suche.</param>
      <returns>Ein neues Array, bei dem das angegebene Element entfernt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})">
      <summary>Entfernt alle Elemente aus dem Array, die die angegebene Bedingung erfüllen.</summary>
      <param name="match">Der Delegat, der die Bedingungen für die Elemente definiert, die entfernt werden sollen.</param>
      <returns>Ein neues Array mit Elementen, die die angegebenen Bedingung erfüllen und entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)">
      <summary>Gibt ein Array mit dem Element zurück, das von angegebener Position entfernt wurde.</summary>
      <param name="index">Der 0-basierte Index des Elements, das aus dem zurückgegebenen Array entfernt werden soll.</param>
      <returns>Ein neues Array mit dem Element , das am angegebenen Index entfernt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Entfernt die angegebenen Elemente aus diesem Array.</summary>
      <param name="items">Die zu entfernenden Elemente, wenn Übereinstimmungen in dieser Liste gefunden werden.</param>
      <returns>Ein neues Array mit den entfernten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Entfernt die angegebenen Elemente aus diesem Array.</summary>
      <param name="items">Die zu entfernenden Elemente, wenn Übereinstimmungen in dieser Liste gefunden werden.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich für die Suche.</param>
      <returns>Ein neues Array mit den entfernten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Entfernt die angegebenen Werte aus dieser Liste.</summary>
      <param name="items">Die zu entfernenden Elemente, wenn Übereinstimmungen in dieser Liste gefunden werden.</param>
      <returns>Eine neue Liste mit den entfernten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Entfernt die angegebenen Elemente aus der Liste.</summary>
      <param name="items">Die zu entfernenden Elemente, wenn Übereinstimmungen in dieser Liste gefunden werden.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich für die Suche.</param>
      <returns>Ein neues Array mit den entfernten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Gibt ein Array mit den Elementen zurück, die von angegebener Position entfernt wurde.</summary>
      <param name="index">Der 0-basierte Index des Startelements, das aus dem Array entfernt werden soll.</param>
      <param name="length">Die Anzahl der aus dem Array zu entfernenden Elemente.</param>
      <returns>Ein neues Array, bei dem die angegebenen Elemente entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)">
      <summary>Findet das erste Element im Array, das mit dem angegebenen Wert übereinstimmt und den Wert mit dem angegebenen neuen Wert ersetzt.</summary>
      <param name="oldValue">Der Wert, der im Array gesucht und ersetzt werden soll.</param>
      <param name="newValue">Der Wert, durch den <c>oldvalue</c> ersetzt wird.</param>
      <returns>Ein neues Array mit <paramref name="newValue" />, selbst wenn die alten und neuen Werte identisch sind.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> konnte im Array nicht gefunden werden.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Findet das erste Element im Array, das mit dem angegebenen Wert übereinstimmt und den Wert mit dem angegebenen neuen Wert ersetzt.</summary>
      <param name="oldValue">Der Wert, der im Array gesucht und ersetzt werden soll.</param>
      <param name="newValue">Der Wert, durch den <c>oldvalue</c> ersetzt wird.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich zum Vergleichen von Werten.</param>
      <returns>Ein neues Array mit <paramref name="newValue" />, selbst wenn die alten und neuen Werte identisch sind.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> konnte im Array nicht gefunden werden.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)">
      <summary>Ersetzt das Element im angegebenen Index durch ein angegebenes Element.</summary>
      <param name="index">Der Index des zu ersetzenden Elements.</param>
      <param name="item">Das Element, das der Liste hinzugefügt werden soll.</param>
      <returns>Das neue Array, mit <paramref name="item" /> am angegebenen Index.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort">
      <summary>Sortiert die Elemente im unveränderlichen Array mithilfe des Standardvergleichs.</summary>
      <returns>Ein neues unveränderliches Array, das die Elemente in diesem Array in sortierter Reihenfolge enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Sortiert die Elemente im unveränderlichen Array mithilfe des angegebenen Vergleichs.</summary>
      <param name="comparer">Die Implementierung, die beim Vergleichen von Elementen verwendet werden soll, oder <see langword="null" />, wenn der Standardvergleich verwendet werden soll.</param>
      <returns>Ein neues unveränderliches Array, das die Elemente in diesem Array in sortierter Reihenfolge enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})">
      <summary>Sortiert die Elemente i, gesamten <see cref="T:System.Collections.Immutable.ImmutableArray`1" />-Objekt mithilfe des angegebenen <see cref="T:System.Comparison`1" />-Objekts.</summary>
      <param name="comparison">Die <see cref="T:System.Comparison`1" />, die beim Vergleich von Elementen verwendet werden soll.</param>
      <returns>Die sortierte Liste.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> ist NULL.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Sortiert die angegebenen Elemente im unveränderlichen Array mithilfe des angegebenen Vergleichs.</summary>
      <param name="index">Der Index des ersten zu sortierenden Elements.</param>
      <param name="count">Die Anzahl von Elementen, die in die Sortierung eingeschlossen werden sollen.</param>
      <param name="comparer">Die Implementierung, die beim Vergleichen von Elementen verwendet werden soll, oder <see langword="null" />, wenn der Standardvergleich verwendet werden soll.</param>
      <returns>Ein neues unveränderliches Array, das die Elemente in diesem Array in sortierter Reihenfolge enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</summary>
      <param name="item">Das Element, das dem Ende des Arrays hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count">
      <summary>Ruft die Anzahl der Arrays in der Auflistung ab.</summary>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn die Eigenschaft <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> TRUE zurückgibt.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob diese Instanz schreibgeschützt ist.</summary>
      <returns>
        <c>true</c> , wenn diese Instanz schreibgeschützt ist. andernfalls <c>false</c>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</summary>
      <param name="item">Das Objekt, das aus dem Array entfernt werden soll.</param>
      <returns>Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der das Array durchläuft.</summary>
      <returns>Ein Enumerator, mit dem das Array durchlaufen werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</summary>
      <param name="index">Der Index der Position, an der das Element eingefügt werden soll.</param>
      <param name="item">Das einzufügende Element.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Ruft das Element am angegebenen Index in der schreibgeschützten Liste ab oder legt es fest.</summary>
      <param name="index">Der nullbasierte Index des abzurufenden Elements.</param>
      <returns>Das Element am angegebenen Index in der schreibgeschützten Liste.</returns>
      <exception cref="T:System.NotSupportedException">Wird immer vom Setter ausgelöst.</exception>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn die Eigenschaft <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> TRUE zurückgibt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</summary>
      <param name="index">Der Index.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
      <summary>Ruft die Anzahl der Arrays in der Auflistung ab.</summary>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn die Eigenschaft <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> TRUE zurückgibt.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary>Ruft das Element am angegebenen Index ab.</summary>
      <param name="index">Der Index.</param>
      <returns>Das Element.</returns>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn die Eigenschaft <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> TRUE zurückgibt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Kopiert dieses Array in ein anderes Array, wobei am angegebenen Index begonnen wird.</summary>
      <param name="array">Das Array, in das das Array kopiert werden soll.</param>
      <param name="index">Der Index im Zielarray, um den Kopiervorgang zu beginnen.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count">
      <summary>Ruft die Größe des Arrays ab.</summary>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn die Eigenschaft <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> TRUE zurückgibt.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized">
      <summary>Siehe Schnittstelle <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot">
      <summary>Ruft den Synchronisierungsstamm ab.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der das unveränderliche Array durchläuft.</summary>
      <returns>Ein Enumerator, der das unveränderliche Array durchläuft.</returns>
      <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" />-Eigenschaft gibt <see langword="true" /> zurück.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)">
      <summary>Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</summary>
      <param name="value">Der Wert, der dem Array hinzugefügt werden soll.</param>
      <returns>Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</returns>
      <exception cref="T:System.NotSupportedException">Ausgelöst in allen Fällen.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear">
      <summary>Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</summary>
      <exception cref="T:System.NotSupportedException">Ausgelöst in allen Fällen.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)">
      <summary>Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</summary>
      <param name="value">Der zu suchende Wert.</param>
      <returns>Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Ruft den Wert beim angegebenen Index ab.</summary>
      <param name="value">Der Wert, dessen Index zurückgegeben werden soll.</param>
      <returns>Der Wert des Elements am angegebenen Index.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</summary>
      <param name="index">Der Index, der angibt, an welcher Position das Element eingefügt werden soll.</param>
      <param name="value">Der einzufügende Wert.</param>
      <exception cref="T:System.NotSupportedException">Ausgelöst in allen Fällen.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize">
      <summary>Ruft einen Wert ab, der angibt, ob diese Instanz eine festgelegte Größe hat.</summary>
      <returns>
        <c>true</c> , wenn diese Instanz eine Festgröße hat. andernfalls <c>false</c>.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob diese Instanz schreibgeschützt ist.</summary>
      <returns>
        <c>true</c> , wenn diese Instanz schreibgeschützt ist. andernfalls <c>false</c>.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)">
      <summary>Ruft die <see cref="T:System.Object" />-Klasse am angegebenen Index ab oder legt diese fest.</summary>
      <param name="index">Der Index.</param>
      <exception cref="T:System.NotSupportedException">Wird immer vom Setter ausgelöst.</exception>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn die Eigenschaft <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> TRUE zurückgibt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)">
      <summary>Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</summary>
      <param name="value">Der Wert, der aus dem Array entfernt werden soll.</param>
      <exception cref="T:System.NotSupportedException">Ausgelöst in allen Fällen.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Löst in allen Fällen <see cref="T:System.NotSupportedException" /> aus.</summary>
      <param name="index">Der Index des zu entfernenden Elements.</param>
      <exception cref="T:System.NotSupportedException">Ausgelöst in allen Fällen.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary>Gibt eine Kopie des ursprünglichen Arrays mit dem angegebenen, am Ende hinzugefügten, Element zurück.</summary>
      <param name="value">Der Wert, der am Ende des Arrays hinzugefügt werden soll.</param>
      <returns>Ein neues Array mit dem am Ende hinzugefügten angegebenen Element.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Gibt eine Kopie des ursprünglichen Arrays mit den angegebenen, zum Ende des Arrays hinzugefügten, Elementen zurück.</summary>
      <param name="items">Die Elemente, die dem Ende des Arrays hinzugefügt werden sollen.</param>
      <returns>Ein neues Array mit den am Ende hinzugefügten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary>Gibt ein Array zurück, dessen Elemente entfernt wurden.</summary>
      <returns>Ein Array, dessen Elemente entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary>Gibt ein neues Array mit dem angegebenen Wert zurück, der an der angegebenen Position eingefügt wurde.</summary>
      <param name="index">Der nullbasierte Index im Array, an dem das neue Element hinzugefügt werden soll.</param>
      <param name="element">Das am Anfang des Arrays einzufügende Element.</param>
      <returns>Ein neues Array, bei dem der angegebene Wert eingefügt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Fügt die angegebenen Werte am angegebenen Index ein.</summary>
      <param name="index">Der Index, an dem der Wert eingefügt werden soll.</param>
      <param name="items">Die einzufügenden Elemente.</param>
      <returns>Ein neues Array, bei dem die angegebenen Werte entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Gibt ein Array mit dem ersten Vorkommen des angegebenen Elements zurück, das aus dem Array entfernt wurde. Wenn keine Übereinstimmung gefunden wird, wird das aktuelle Array zurückgegeben.</summary>
      <param name="value">Der Wert, der aus dem Array entfernt werden soll.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich für die Suche.</param>
      <returns>Ein neues Array, bei dem der Wert entfernt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary>Entfernt alle Elemente aus dem Array, die die angegebene Bedingung erfüllen.</summary>
      <param name="match">Der Delegat, der die Bedingungen für die Elemente definiert, die entfernt werden sollen.</param>
      <returns>Ein neues Array mit Elementen, die die angegebenen Bedingung erfüllen und entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary>Gibt ein Array mit dem Element zurück, das von angegebener Position entfernt wurde.</summary>
      <param name="index">Der 0-basierte Index des Elements, das aus dem zurückgegebenen Array entfernt werden soll.</param>
      <returns>Ein neues Array, bei dem das angegebene Element entfernt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Entfernt die angegebenen Elemente aus diesem Array.</summary>
      <param name="items">Die zu entfernenden Elemente, wenn Übereinstimmungen in dieser Liste gefunden werden.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich für die Suche.</param>
      <returns>Ein neues Array mit den entfernten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary>Gibt ein Array mit den Elementen zurück, die von angegebener Position entfernt wurde.</summary>
      <param name="index">Der 0-basierte Index des Startelements, das aus dem Array entfernt werden soll.</param>
      <param name="count">Die Anzahl der aus dem Array zu entfernenden Elemente.</param>
      <returns>Ein neues Array, bei dem die angegebenen Elemente entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Findet das erste Element im Array, das mit dem angegebenen Wert übereinstimmt und den Wert mit dem angegebenen neuen Wert ersetzt.</summary>
      <param name="oldValue">Der Wert, der im Array gesucht und ersetzt werden soll.</param>
      <param name="newValue">Der Wert, durch den <c>oldvalue</c> ersetzt wird.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich zum Vergleichen von Werten.</param>
      <returns>Ein neues Array mit <paramref name="newValue" />, selbst wenn die alten und neuen Werte identisch sind.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> konnte im Array nicht gefunden werden.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary>Ersetzt das Element im angegebenen Index durch ein angegebenes Element.</summary>
      <param name="index">Der Index des zu ersetzenden Elements.</param>
      <param name="value">Der Wert, der der Liste hinzugefügt werden soll.</param>
      <returns>Das neue Array, mit <paramref name="item" /> am angegebenen Index.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Bestimmt, ob das aktuelle Auflistungselement in der Sortierreihenfolge vor oder nach einem anderen Element oder an derselben Position auftritt.</summary>
      <param name="other">Das Element, das mit der aktuellen Instanz verglichen werden soll.</param>
      <param name="comparer">Das Objekt, mit dem Mitglieder des aktuellen Arrays mit den entsprechenden Mitgliedern von anderen Arrays verglichen werden.</param>
      <returns>Eine ganze Zahl, die angibt, ob das aktuelle Element vorangestellt oder in der gleichen Position ist oder dem anderen Element folgt.</returns>
      <exception cref="T:System.ArgumentException">Die Arrays haben nicht dieselbe Länge.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Bestimmt, ob dieses Array und das angegebene Array strukturell übereinstimmen.</summary>
      <param name="other">Das Array, das mit der aktuellen Instanz verglichen werden soll.</param>
      <param name="comparer">Ein Objekt, das bestimmt, ob die aktuelle Instanz und andere strukturell übereinstimmen.</param>
      <returns>
        <see langword="true" />, wenn die beiden Arrays strukturell übereinstimmen, anderenfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Gibt einen Hashcode für die aktuelle Instanz zurück.</summary>
      <param name="comparer">Ein Objekt, das den Hashcode des aktuellen Objekts berechnet.</param>
      <returns>Der Hashcode für die aktuelle Instanz.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ToBuilder">
      <summary>Erstellt ein veränderbares Array, das den gleichen Inhalt wie dieses Array hat und über mehrere Vorgänge mithilfe von Standardschnittstellen effizient verändert werden kann.</summary>
      <returns>Der neue Generator mit dem gleichen Inhalt wie dieses Array.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary">
      <summary>Stellt eine Reihe von Initialisierungsmethoden für Instanzen der <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" /> Klasse bereit.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Contains``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary>Bestimmt, ob das angegebene unveränderliche Wörterbuch das angegebene Schlüssel-Wert-Paar enthält.</summary>
      <param name="map">Das zu durchsuchende unveränderliche Wörterbuch.</param>
      <param name="key">Der im unveränderlichen Wörterbuch zu suchende Schlüssel.</param>
      <param name="value">Der Wert, der auf dem angegebenen Schlüssel zu finden ist, wenn der Schlüssel gefunden wurde.</param>
      <typeparam name="TKey">Der Typ der Schlüssel im unveränderlichen Wörterbuch.</typeparam>
      <typeparam name="TValue">Der Typ der Werte im unveränderlichen Wörterbuch.</typeparam>
      <returns>
        <see langword="true" />, wenn diese Zuordnung das angegebene Schlüssel-Wert-Paar enthält; anderenfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2">
      <summary>Erstellt ein leeres unveränderliches Wörterbuch.</summary>
      <typeparam name="TKey">Der Typ der Schlüssel, die vom Wörterbuch gespeichert werden.</typeparam>
      <typeparam name="TValue">Der Typ der Werte, die vom Wörterbuch gespeichert werden.</typeparam>
      <returns>Ein leeres unveränderliches Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Erstellt ein leeres unveränderliches Wörterbuch, das den angegebenen Schlüsselvergleich verwendet.</summary>
      <param name="keyComparer">Die Implementierung zum Bestimmen der Gleichheit der Schlüssel im Wörterbuch.</param>
      <typeparam name="TKey">Der Typ der Schlüssel, die vom Wörterbuch gespeichert werden.</typeparam>
      <typeparam name="TValue">Der Typ der Werte, die vom Wörterbuch gespeichert werden.</typeparam>
      <returns>Ein leeres unveränderliches Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Erstellt ein leeres unveränderliches Wörterbuch, das den angegebenen Schlüssel- und Wertevergleich verwendet.</summary>
      <param name="keyComparer">Die Implementierung zum Bestimmen der Gleichheit der Schlüssel im Wörterbuch.</param>
      <param name="valueComparer">Die Implementierung zum Bestimmen der Gleichheit der Werte im Wörterbuch.</param>
      <typeparam name="TKey">Der Typ der Schlüssel, die vom Wörterbuch gespeichert werden.</typeparam>
      <typeparam name="TValue">Der Typ der Werte, die vom Wörterbuch gespeichert werden.</typeparam>
      <returns>Ein leeres unveränderliches Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2">
      <summary>Erstellt einen neuen unveränderlichen Wörterbuch-Generator.</summary>
      <typeparam name="TKey">Der Typ der Schlüssel, die vom Wörterbuch gespeichert werden.</typeparam>
      <typeparam name="TValue">Der Typ der Werte, die vom Wörterbuch gespeichert werden.</typeparam>
      <returns>Der neue Generator.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Erstellt einen neuen unveränderlichen Wörterbuch-Generator.</summary>
      <param name="keyComparer">Der Schlüsselvergleich.</param>
      <typeparam name="TKey">Der Typ der Schlüssel, die vom Wörterbuch gespeichert werden.</typeparam>
      <typeparam name="TValue">Der Typ der Werte, die vom Wörterbuch gespeichert werden.</typeparam>
      <returns>Der neue Generator.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Erstellt einen neuen unveränderlichen Wörterbuch-Generator.</summary>
      <param name="keyComparer">Der Schlüsselvergleich.</param>
      <param name="valueComparer">Der Wertevergleich.</param>
      <typeparam name="TKey">Der Typ der Schlüssel, die vom Wörterbuch gespeichert werden.</typeparam>
      <typeparam name="TValue">Der Typ der Werte, die vom Wörterbuch gespeichert werden.</typeparam>
      <returns>Der neue Generator.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Erstellt ein neues unveränderliches Wörterbuch, das die angegebenen Elemente enthält.</summary>
      <param name="items">Die Elemente, die zum Auffüllen des Wörterbuchs vor dessen Unveränderlichkeit verwendet werden.</param>
      <typeparam name="TKey">Der Typ der Schlüssel im Wörterbuch.</typeparam>
      <typeparam name="TValue">Der Typ der Werte im Wörterbuch.</typeparam>
      <returns>Ein neues unveränderliches Wörterbuch, das die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Erstellt ein neues unveränderliches Wörterbuch, das die angegebenen Elemente enthält und den angegebenen Schlüsselvergleich verwendet.</summary>
      <param name="keyComparer">Die zu verwendete Vergleichs-Implementierung zum Vergleich von Schlüsseln auf ihre Gleichheit.</param>
      <param name="items">Die Elemente, die zum Wörterbuch vor dessen Unveränderlichkeit hinzugefügt werden.</param>
      <typeparam name="TKey">Der Typ der Schlüssel im Wörterbuch.</typeparam>
      <typeparam name="TValue">Der Typ der Werte im Wörterbuch.</typeparam>
      <returns>Ein neues unveränderliches Wörterbuch, das die angegebenen Elemente enthält und den angegebenen Vergleich verwendet.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Erstellt ein neues unveränderliches Wörterbuch, das die angegebenen Elemente enthält und den angegebenen Schlüsselvergleich verwendet.</summary>
      <param name="keyComparer">Die zu verwendete Vergleichs-Implementierung zum Vergleich von Schlüsseln auf ihre Gleichheit.</param>
      <param name="valueComparer">Die Vergleichs-Implementierung zum Vergleich von Werten auf ihre Gleichheit.</param>
      <param name="items">Die Elemente, die zum Wörterbuch vor dessen Unveränderlichkeit hinzugefügt werden.</param>
      <typeparam name="TKey">Der Typ der Schlüssel im Wörterbuch.</typeparam>
      <typeparam name="TValue">Der Typ der Werte im Wörterbuch.</typeparam>
      <returns>Ein neues unveränderliches Wörterbuch, das die angegebenen Elemente enthält und den angegebenen Vergleich verwendet.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0)">
      <summary>Ruft den Wert für einen bestimmten Schlüssel auf, wenn ein übereinstimmender Schlüssel im Wörterbuch vorhanden ist.</summary>
      <param name="dictionary">Das Wörterbuch zum Abrufen des Werts.</param>
      <param name="key">Der zu suchende Schlüssel.</param>
      <typeparam name="TKey">Der Typ des Schlüssels.</typeparam>
      <typeparam name="TValue">Der Typ des Werts.</typeparam>
      <returns>Der Wert für den Schlüssel oder <c>default(TValue)</c>, wenn kein passender Schlüssel gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary>Ruft den Wert für einen bestimmten Schlüssel auf, wenn ein übereinstimmender Schlüssel im Wörterbuch vorhanden ist.</summary>
      <param name="dictionary">Das Wörterbuch zum Abrufen des Werts.</param>
      <param name="key">Der zu suchende Schlüssel.</param>
      <param name="defaultValue">Der zurückzugebende Standardwert, wenn kein übereinstimmender Schlüssel im Wörterbuch gefunden wurde.</param>
      <typeparam name="TKey">Der Typ des Schlüssels.</typeparam>
      <typeparam name="TValue">Der Typ des Werts.</typeparam>
      <returns>Der Wert für den Schlüssel oder <paramref name="defaultValue" />, wenn kein passender Schlüssel gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Erstellt ein unveränderliches Wörterbuch aus einer bestehenden Kollektion von Elementen, mit der Anwendung einer Transformationsfunktion zum Quellschlüssel.</summary>
      <param name="source">Die Quellauflistung, die zum Generieren des unveränderlichen Wörterbuchs verwandt wurde.</param>
      <param name="keySelector">Die Funktion, die zum Transformieren der Schlüssel für das unveränderliche Wörterbuch verwandt wurde.</param>
      <typeparam name="TSource">Der Typ des Elements in der Quellauflistung.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels im resultierenden unveränderlichen Wörterbuch.</typeparam>
      <returns>Das unveränderliche Wörterbuch, das Elemente von <paramref name="source" /> enthält, mit Schlüsseln, die durch die Anwendung von <paramref name="keySelector" /> transformiert wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Erstellt ein unveränderliches Wörterbuch basierend auf einer Sequenztransformation.</summary>
      <param name="source">Die Quellauflistung, die zum Generieren des unveränderlichen Wörterbuchs verwandt wurde.</param>
      <param name="keySelector">Die Funktion, die zum Transformieren der Schlüssel für das unveränderliche Wörterbuch verwandt wurde.</param>
      <param name="keyComparer">Der Schlüsselvergleich, der für das Wörterbuch verwendet werden soll.</param>
      <typeparam name="TSource">Der Typ des Elements in der Quellauflistung.</typeparam>
      <typeparam name="TKey">Der Typ des Schlüssels im resultierenden unveränderlichen Wörterbuch.</typeparam>
      <returns>Das unveränderliche Wörterbuch, das Elemente von <paramref name="source" /> enthält, mit Schlüsseln, die durch die Anwendung von <paramref name="keySelector" /> transformiert wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Listet eine Sequenz von Schlüssel-Wert-Paaren auf und erzeugt ein unveränderliches Wörterbuch ihrer Inhalte.</summary>
      <param name="source">Die Sequenz von aufzulistenden Schlüssel-Wert-Paaren.</param>
      <typeparam name="TKey">Der Typ der Schlüssel im Wörterbuch.</typeparam>
      <typeparam name="TValue">Der Typ der Werte im Wörterbuch.</typeparam>
      <returns>Ein unveränderliches Wörterbuch, das die Schlüssel-Wert-Paare in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Listet eine Sequenz von Schlüssel-Wert-Paaren auf und erzeugt mithilfe des angegebenen Schlüsselvergleichs ein unveränderliches Wörterbuch ihrer Inhalte.</summary>
      <param name="source">Die Sequenz von aufzulistenden Schlüssel-Wert-Paaren.</param>
      <param name="keyComparer">Der Schlüsselvergleich, der beim Erstellen des unveränderlichen Wörterbuchs verwendet wird.</param>
      <typeparam name="TKey">Der Typ der Schlüssel im Wörterbuch.</typeparam>
      <typeparam name="TValue">Der Typ der Werte im Wörterbuch.</typeparam>
      <returns>Ein unveränderliches Wörterbuch, das die Schlüssel-Wert-Paare in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Listet eine Sequenz von Schlüssel-Wert-Paaren auf und erzeugt mithilfe des angegebenen Schlüsselvergleichs ein unveränderliches Wörterbuch ihrer Inhalte.</summary>
      <param name="source">Die Sequenz von aufzulistenden Schlüssel-Wert-Paaren.</param>
      <param name="keyComparer">Der Schlüsselvergleich, der beim Erstellen des unveränderlichen Wörterbuchs verwendet wird.</param>
      <param name="valueComparer">Der Wertevergleich für die Verwendung des unveränderlichen Wörterbuchs.</param>
      <typeparam name="TKey">Der Typ der Schlüssel im Wörterbuch.</typeparam>
      <typeparam name="TValue">Der Typ der Werte im Wörterbuch.</typeparam>
      <returns>Ein unveränderliches Wörterbuch, das die Schlüssel-Wert-Paare in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}.Builder)">
      <summary>Erstellt ein unveränderlich Wörterbuch aus dem aktuellen Inhalt des Wörterbuchs des Generators.</summary>
      <param name="builder">Der Generator, aus dem das unveränderlich Wörterbuch erstellt werden soll.</param>
      <typeparam name="TKey">Der Typ der Schlüssel im Wörterbuch.</typeparam>
      <typeparam name="TValue">Der Typ der Werte im Wörterbuch.</typeparam>
      <returns>Ein unveränderliches sortiertes Wörterbuch, das den aktuellen Inhalt des Wörterbuchs des Generators enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Listet eine Sequenz auf und transformiert sie; und erzeugt ein unveränderliches Wörterbuch ihrer Inhalte.</summary>
      <param name="source">Die Sequenz, die aufgelistet werden soll, um das Wörterbuch zu generieren.</param>
      <param name="keySelector">Die Funktion, die den Schlüssel für das Wörterbuch aus jedem Sequenzelement erzeugt.</param>
      <param name="elementSelector">Die Funktion, die den Wert für das Wörterbuch aus jedem Sequenzelement erzeugt.</param>
      <typeparam name="TSource">Der Typ der Elemente in der Sequenz.</typeparam>
      <typeparam name="TKey">Der Typ der Schlüssel im resultierenden Wörterbuch.</typeparam>
      <typeparam name="TValue">Der Typ der Werte im resultierenden Wörterbuch.</typeparam>
      <returns>Ein unveränderliches Wörterbuch, das die Elemente in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Listet eine Sequenz auf und transformiert sie; und erzeugt mithilfe des angegebenen Schlüsselvergleichs ein unveränderliches Wörterbuch ihrer Inhalte.</summary>
      <param name="source">Die Sequenz, die aufgelistet werden soll, um das Wörterbuch zu generieren.</param>
      <param name="keySelector">Die Funktion, die den Schlüssel für das Wörterbuch aus jedem Sequenzelement erzeugt.</param>
      <param name="elementSelector">Die Funktion, die den Wert für das Wörterbuch aus jedem Sequenzelement erzeugt.</param>
      <param name="keyComparer">Der Schlüsselvergleich, der für das Wörterbuch verwendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente in der Sequenz.</typeparam>
      <typeparam name="TKey">Der Typ der Schlüssel im resultierenden Wörterbuch.</typeparam>
      <typeparam name="TValue">Der Typ der Werte im resultierenden Wörterbuch.</typeparam>
      <returns>Ein unveränderliches Wörterbuch, das die Elemente in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Listet eine Sequenz auf und transformiert sie; und erzeugt mithilfe des angegebenen Schlüssel- und Wertevergleichs ein unveränderliches Wörterbuch ihrer Inhalte.</summary>
      <param name="source">Die Sequenz, die aufgelistet werden soll, um das Wörterbuch zu generieren.</param>
      <param name="keySelector">Die Funktion, die den Schlüssel für das Wörterbuch aus jedem Sequenzelement erzeugt.</param>
      <param name="elementSelector">Die Funktion, die den Wert für das Wörterbuch aus jedem Sequenzelement erzeugt.</param>
      <param name="keyComparer">Der Schlüsselvergleich, der für das Wörterbuch verwendet werden soll.</param>
      <param name="valueComparer">Der Wertevergleich für die Verwendung des Wörterbuchs.</param>
      <typeparam name="TSource">Der Typ der Elemente in der Sequenz.</typeparam>
      <typeparam name="TKey">Der Typ der Schlüssel im resultierenden Wörterbuch.</typeparam>
      <typeparam name="TValue">Der Typ der Werte im resultierenden Wörterbuch.</typeparam>
      <returns>Ein unveränderliches Wörterbuch, das die Elemente in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2">
      <summary>Stellt eine unveränderliche unsortierte Auflistung von Schlüsseln und Werten dar.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="TKey">Der Typ der Schlüssel im Wörterbuch.</typeparam>
      <typeparam name="TValue">Der Typ der Werte im Wörterbuch.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)">
      <summary>Fügt ein Element mit dem angegebenen Schlüssel und Wert zum unveränderlichen Wörterbuch hinzu.</summary>
      <param name="key">Der Schlüssel des hinzuzufügenden Elements.</param>
      <param name="value">Der Wert des hinzuzufügenden Elements.</param>
      <returns>Ein neues unveränderliches Wörterbuch, das das zusätzliche Schlüssel-Wert-Paar enthält.</returns>
      <exception cref="T:System.ArgumentException">Der angegebene Schlüssel ist bereits im Wörterbuch vorhanden, hat jedoch einen anderen Wert.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Fügt dem unveränderlichen Wörterbuch die angegebenen Schlüssel-Wert-Paare hinzu.</summary>
      <param name="pairs">Die Schlüssel-Wert-Paare, die hinzugefügt werden sollen.</param>
      <returns>Ein neues unveränderliches Wörterbuch, das die zusätzlichen Schlüssel-Wert-Paare enthält.</returns>
      <exception cref="T:System.ArgumentException">Einer der angegebenen Schlüssel ist bereits im Wörterbuch vorhanden, hat jedoch einen anderen Wert.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Builder">
      <summary>Stellt eine Hashzuordnung dar, die mit wenigen oder gar keinen Speicherbelegungen geändert wird und sehr effizient unveränderliche Hashzuordnungsinstanzen produzieren oder erstellen kann.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)">
      <summary>Fügt ein Element mit dem angegebenem Schlüssel und Wert zum unveränderlichen Wörterbuch hinzu.</summary>
      <param name="key">Der Schlüssel des hinzuzufügenden Elements.</param>
      <param name="value">Der Wert des hinzuzufügenden Elements.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> ist NULL.</exception>
      <exception cref="T:System.ArgumentException">Ein Element mit demselben Schlüssel ist im Wörterbuch bereits vorhanden.</exception>
      <exception cref="T:System.NotSupportedException">Das Wörterbuch ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Fügt dem unveränderlichen Wörterbuch das angegebene Element hinzu.</summary>
      <param name="item">Das Objekt, das dem Wörterbuch hinzugefügt werden soll.</param>
      <exception cref="T:System.NotSupportedException">Das Wörterbuch ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Fügt dieser Auflistung eine Sequenz von Werten hinzu.</summary>
      <param name="items">Die Elemente, die dieser Auflistung hinzugefügt werden sollen.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear">
      <summary>Entfernt alle Elemente aus dem unveränderlichen Wörterbuch.</summary>
      <exception cref="T:System.NotSupportedException">Das Wörterbuch ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Ermittelt, ob das unveränderliche Wörterbuch einen bestimmten Wert enthält.</summary>
      <param name="item">Das Objekt, das im Wörterbuch gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn sich <paramref name="item" /> im Wörterbuch befindet, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)">
      <summary>Bestimmt, ob das unveränderliche Wörterbuch ein Element enthält, das über den angegebenen Schlüssel verfügt.</summary>
      <param name="key">Der im Wörterbuch zu suchende Schlüssel.</param>
      <returns>
        <see langword="true" />, wenn das Wörterbuch ein Element mit dem Schlüssel enthält, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> ist NULL.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)">
      <summary>Bestimmt, ob das unveränderliche Wörterbuch ein Element enthält, das über den angegebenen Wert verfügt.</summary>
      <param name="value">Der im unveränderlichen Wörterbuch zu suchende Wert. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <returns>
        <see langword="true" />, wenn das Wörterbuch ein Element mit dem angegebenen Wert enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Count">
      <summary>Ruft die Anzahl der Elemente in dem unverändertlichen Wörterbuch ab.</summary>
      <returns>Ruft die Anzahl der Elemente in dem unverändertlichen Wörterbuch ab.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der das unveränderliche Wörterbuch durchläuft.</summary>
      <returns>Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary>Ruft den Wert für einen bestimmten Schlüssel auf, wenn ein übereinstimmender Schlüssel im Wörterbuch vorhanden ist.</summary>
      <param name="key">Der zu suchende Schlüssel.</param>
      <returns>Der Wert für den Schlüssel oder <c>default(TValue)</c>, wenn kein passender Schlüssel gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary>Ruft den Wert für einen bestimmten Schlüssel auf, wenn ein übereinstimmender Schlüssel im Wörterbuch vorhanden ist.</summary>
      <param name="key">Der zu suchende Schlüssel.</param>
      <param name="defaultValue">Der zurückzugebende Standardwert, wenn kein übereinstimmender Schlüssel im Wörterbuch gefunden wurde.</param>
      <returns>Der Wert für den Schlüssel oder <paramref name="defaultValue" />, wenn kein passender Schlüssel gefunden wurde.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)">
      <summary>Ruft das Element mit dem angegebenen Schlüssel ab oder legt dieses fest.</summary>
      <param name="key">Das Element, das abgerufen oder festgelegt werden soll.</param>
      <returns>Das Element mit dem angegebenen Schlüssel.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Die Eigenschaft wird abgerufen, und <paramref name="key" /> wird nicht gefunden.</exception>
      <exception cref="T:System.NotSupportedException">Die Eigenschaft wird festgelegt, und <see cref="T:System.Collections.Generic.IDictionary`2" /> ist schreibgeschützt.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer">
      <summary>Ruft den Schlüsselvergleich ab oder legt ihn fest.</summary>
      <returns>Der Schlüsselvergleich.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys">
      <summary>Ruft eine Auflistung ab, die die Schlüssel des unveränderlichen Wörterbuchs enthält.</summary>
      <returns>Eine Auflistung, die die Schlüssel des Objekts enthält, mit dem das unveränderliche Wörterbuch implementiert wird.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)">
      <summary>Entfernt das Element mit dem angegebenen Schlüssel aus dem unveränderlichen Wörterbuch.</summary>
      <param name="key">Der Schlüssel des zu entfernenden Elements.</param>
      <returns>
        <see langword="true" />, wenn das Element erfolgreich entfernt wurde, andernfalls <see langword="false" />.  Diese Methode gibt auch dann <see langword="false" /> zurück, wenn <paramref name="key" /> nicht im Wörterbuch gefunden wurde.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> ist NULL.</exception>
      <exception cref="T:System.NotSupportedException">Das Wörterbuch ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Entfernt das erste Vorkommen eines bestimmten Objekts aus dem unveränderlichen Wörterbuch.</summary>
      <param name="item">Das Objekt, das aus dem Wörterbuch entfernt werden soll.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="item" /> erfolgreich aus dem Wörterbuch entfernt wurde, andernfalls <see langword="false" />. Diese Methode gibt auch dann false zurück, wenn <paramref name="item" /> nicht in dem Wörterbuch gefunden wurde.</returns>
      <exception cref="T:System.NotSupportedException">Das Wörterbuch ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Entfernt alle Einträge mit Schlüsseln, die mit denen übereinstimmen, die in der angegebenen Reihenfolge des unveränderlichen Wörterbuch gefunden wurden.</summary>
      <param name="keys">Die Schlüssel für Einträge, die aus dem Wörterbuch entfernt werden sollen.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Kopiert die Elemente des Wörterbuchs in ein Array des Typs <see cref="T:System.Collections.Generic.KeyValuePair`2" /> , wobei am angegebenen Arrayindex begonnen wird.</summary>
      <param name="array">Ein eindimensionales Array vom Typ <see cref="T:System.Collections.Generic.KeyValuePair`2" />, der das Ziel der kopierten Elemente aus dem Wörterbuch ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>Ruft einen Wert ab, der angibt, ob der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist.</summary>
      <returns>
        <see langword="true" />, wenn der Zugriff auf das <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary>Ruft ein Objekt ab, mit dem der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</summary>
      <returns>Ein Objekt, mit dem der Zugriff auf die <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Fügt dem Wörterbuchobjekt ein Element mit dem angegebenen Schlüssel und Wert hinzu.</summary>
      <param name="key">Der Schlüssel des hinzuzufügenden Elements.</param>
      <param name="value">Der Wert des hinzuzufügenden Elements.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Ermittelt, ob das Wörterbuchobjekt ein Element mit dem angegebenen Schlüssel enthält.</summary>
      <param name="key">Der zu suchende Schlüssel.</param>
      <returns>
        <see langword="true" />, wenn das Wörterbuch ein Element mit dem Schlüssel enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary>Gibt ein <see cref="T:System.Collections.IDictionaryEnumerator" />-Objekt für das Wörterbuch zurück.</summary>
      <returns>Ein <see cref="T:System.Collections.IDictionaryEnumerator" />-Objekt für das Wörterbuch.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.IDictionary" />-Objekt eine feste Größe hat.</summary>
      <returns>
        <see langword="true" />, wenn das <see cref="T:System.Collections.IDictionary" />-Objekt eine feste Größe hat, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist.</summary>
      <returns>
        <see langword="true" />, wenn das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary>Ruft das Element mit dem angegebenen Schlüssel ab oder legt dieses fest.</summary>
      <param name="key">Der Schlüssel.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary>Ruft eine <see cref="T:System.Collections.Generic.ICollection`1" /> ab, die die Schlüssel des <see cref="T:System.Collections.Generic.IDictionary`2" /> enthält.</summary>
      <returns>Eine <see cref="T:System.Collections.Generic.ICollection`1" />, die die Schlüssel des Objekts enthält, das <see cref="T:System.Collections.Generic.IDictionary`2" /> implementiert.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Entfernt das Element mit dem angegebenen Schlüssel aus dem Wörterbuch.</summary>
      <param name="key">Der Schlüssel des zu entfernenden Elements.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary>Ruft eine <see cref="T:System.Collections.Generic.ICollection`1" /> ab, die die Werte im <see cref="T:System.Collections.Generic.IDictionary`2" /> enthält.</summary>
      <returns>Eine <see cref="T:System.Collections.Generic.ICollection`1" />, die die Werte des Objekts enthält, das <see cref="T:System.Collections.Generic.IDictionary`2" /> implementiert.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns>Ein Enumeratorobjekt, mithilfe dessen eine Auflistung durchlaufen werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable">
      <summary>Erstellt ein unveränderlich Wörterbuch basierend auf dem Inhalt dieser Instanz.</summary>
      <returns>Ein unveränderliches Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary>Ermittelt, ob das Wörterbuch einen bestimmten Schlüssel enthält.</summary>
      <param name="equalKey">Der zu suchende Schlüssel.</param>
      <param name="actualKey">Der übereinstimmende Schlüssel im Wörterbuch, wenn gefunden, oder <c>equalkey</c>, wenn keine Übereinstimmung gefunden wird.</param>
      <returns>
        <see langword="true" />, wenn eine Übereinstimmung für <paramref name="equalKey" /> gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary>Ruft den dem angegebenen Schlüssel zugeordneten Wert ab.</summary>
      <param name="key">Der Schlüssel, dessen Wert abgerufen wird.</param>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den dem angegebenen Schlüssel zugeordneten Wert, wenn der Schlüssel gefunden wurde; oder andernfalls den Standardwert für den Typ des <paramref name="value" />-Parameters. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <returns>
        <see langword="true" />, wenn das Objekt, das das unveränderliche Wörterbuch implementiert, ein Element mit dem angegebenen Schlüssel enthält, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> ist NULL.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer">
      <summary>Ruft den Wertevergleich ab bzw. legt ihn fest.</summary>
      <returns>Der Wertevergleich.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Values">
      <summary>Ruft eine Auflistung ab, die die Werte des unveränderlichen Wörterbuchs enthält.</summary>
      <returns>Eine Sammlung, die die Werte des Objekts enthält, mit dem das Wörterbuch implementiert wird.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Clear">
      <summary>Ruft ein leeres unveränderliches Wörterbuch ab, das über dieselben Sortier- und Schlüssel-Wert-Vergleichsregeln wie diese Wörterbuchinstanz verfügt.</summary>
      <returns>Ein leeres Wörterbuch mit äquivalenten Sortier- und Schlüssel-Wert-Vergleichsregeln.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Bestimmt, ob dieses unveränderliche Wörterbuch das angegebene Schlüssel-Wert-Paar enthält.</summary>
      <param name="pair">Das Schlüssel-Wert-Paar, das gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn das angegebene Schlüssel-Wert-Paar im Wörterbuch gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)">
      <summary>Bestimmt, ob das unveränderliche Wörterbuch ein Element enthält, das über den angegebenen Schlüssel verfügt.</summary>
      <param name="key">Der zu suchende Schlüssel.</param>
      <returns>
        <see langword="true" />, wenn das unveränderliche Wörterbuch ein Element mit dem angegebenen Schlüssel enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)">
      <summary>Bestimmt, ob das unveränderliche Wörterbuch ein Element enthält, das über den angegebenen Wert verfügt.</summary>
      <param name="value">Der zu suchende Wert. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <returns>
        <see langword="true" />, wenn das Wörterbuch ein Element mit dem angegebenen Wert enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Count">
      <summary>Ruft die Anzahl der Schlüssel-Wert-Paare im unveränderlichen Wörterbuch ab.</summary>
      <returns>Die Anzahl der Schlüssel-Wert-Paare im Wörterbuch.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableDictionary`2.Empty">
      <summary>Ruft ein leeres unveränderliches Wörterbuch ab.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator">
      <summary>Listet den Inhalt des unveränderlichen Wörterbuchs auf, ohne Arbeitsspeicher zuzuweisen.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Current">
      <summary>Ruft das Element an der aktuellen Position des Enumerators ab.</summary>
      <returns>Das Element an der aktuellen Position des Enumerators im Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Dispose">
      <summary>Gibt alle von der aktuellen Instanz der <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator" />-Klasse verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.MoveNext">
      <summary>Setzt den Enumerator auf das nächste Element des unveränderlichen Wörterbuchs.</summary>
      <returns>
        <see langword="true" />, wenn der Enumerator erfolgreich auf das nächste Element gesetzt wurde, <see langword="false" />, wenn der Enumerator das Ende des Wörterbuchs überschritten hat.</returns>
      <exception cref="T:System.InvalidOperationException">Das Wörterbuch wurde nach der Erstellung des Enumerators geändert.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Reset">
      <summary>Setzt den Enumerator auf seine anfängliche Position, die vor dem ersten Element im Wörterbuch liegt.</summary>
      <exception cref="T:System.InvalidOperationException">Das Wörterbuch wurde nach der Erstellung des Enumerators geändert.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Ruft das aktuelle Element ab.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der das unveränderliche Wörterbuch durchläuft.</summary>
      <returns>Ein Enumerator, mit dem das Wörterbuch durchlaufen werden kann.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.IsEmpty">
      <summary>Ruft einen Wert ab, der angibt, ob diese Instanz des unveränderlichen Wörterbuchs leer ist.</summary>
      <returns>
        <see langword="true" />, wenn diese Instanz leer ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Item(`0)">
      <summary>Ruft den <paramref name="TValue" />-Wert ab, der dem angegebenen Schlüssel zugeordnet ist.</summary>
      <param name="key">Der Typ des Schlüssels.</param>
      <returns>Der dem angegebenen Schlüssel zugeordnete Wert. Wenn keine Ergebnisse gefunden werden, löst der Vorgang eine Ausnahme aus.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.KeyComparer">
      <summary>Ruft den Schlüsselvergleich für das unveränderliche Wörterbuch ab.</summary>
      <returns>Der Schlüsselvergleich.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Keys">
      <summary>Ruft die Schlüssel im unveränderlichen Wörterbuch ab.</summary>
      <returns>Die Schlüssel im unveränderlichen Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)">
      <summary>Entfernt das Element mit dem angegebenen Schlüssel aus dem unveränderlichen Wörterbuch.</summary>
      <param name="key">Der Schlüssel des zu entfernenden Elements.</param>
      <returns>Ein neues unveränderliches Wörterbuch, aus dem das angegebene Element entfernt wurde, oder diese Instanz, wenn der angegebene Schlüssel im Wörterbuch nicht gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Entfernt die Elemente mit den angegebenen Schlüsseln aus dem unveränderlichen Wörterbuch.</summary>
      <param name="keys">Die Schlüssel der zu entfernenden Elemente.</param>
      <returns>Ein neues unveränderliches Wörterbuch, aus dem die angegebenen Schlüssel entfernt wurden, oder diese Instanz, wenn die angegebenen Schlüssel im Wörterbuch nicht gefunden wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)">
      <summary>Legt den angegebenen Schlüssel und Wert im unveränderlichen Wörterbuch fest, wobei ein vorhandener Wert für den Schlüssel überschrieben werden kann.</summary>
      <param name="key">Der Schlüssel des hinzuzufügenden Eintrags.</param>
      <param name="value">Der Schlüsselwert, der festgelegt werden soll.</param>
      <returns>Ein neues unveränderliches Wörterbuch, das das angegebene Schlüssel-Wert-Paar enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Legt die angegebenen Schlüssel-Wert-Paare im unveränderlichen Wörterbuch fest, wobei vorhandene Werte für die Schlüssel überschrieben werden können.</summary>
      <param name="items">Die Schlüssel-Wert-Paare, die im Wörterbuch festgelegt werden sollen. Falls ein Schlüssel bereits im Wörterbuch vorhanden ist, überschreibt diese Methode dessen vorherigen Wert.</param>
      <returns>Ein neues unveränderliches Wörterbuch, das die angegebenen Schlüssel-Wert-Paare enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Kopiert die Elemente des Wörterbuchs in ein Array, wobei an einem bestimmten Arrayindex begonnen wird.</summary>
      <param name="array">Das eindimensionale Array, welches das Ziel der aus dem Wörterbuch kopierten Elemente ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Ruft einen Wert ab, der angibt, ob der Zugriff auf die <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist.</summary>
      <returns>
        <see langword="true" />, wenn der Zugriff auf das <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Ruft ein Objekt ab, mit dem der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</summary>
      <returns>Ein Objekt, mit dem der Zugriff auf die <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Fügt dem unveränderlichen Dictionary-Objekt ein Element mit dem angegebenen Schlüssel und Wert hinzu.</summary>
      <param name="key">Das Objekt, das als Schlüssel des hinzuzufügenden Elements verwendet werden soll.</param>
      <param name="value">Das Objekt, das als Wert des hinzuzufügenden Elements verwendet werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Clear">
      <summary>Löscht diese Instanz.</summary>
      <exception cref="T:System.NotSupportedException">Das Wörterbuchobjekt ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Bestimmt, ob das unveränderliche Dictionary-Objekt ein Element enthält, das über den angegebenen Schlüssel verfügt.</summary>
      <param name="key">Der im Dictionary-Objekt zu suchende Schlüssel.</param>
      <returns>
        <see langword="true" />, wenn das Wörterbuch ein Element mit dem Schlüssel enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Gibt ein <see cref="T:System.Collections.IDictionaryEnumerator" />-Objekt für das unveränderliche Dictionary-Objekt zurück.</summary>
      <returns>Ein Enumeratorobjekt für das Dictionary-Objekt.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.IDictionary" />-Objekt eine feste Größe hat.</summary>
      <returns>
        <see langword="true" />, wenn das <see cref="T:System.Collections.IDictionary" />-Objekt eine feste Größe hat, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist.</summary>
      <returns>
        <see langword="true" />, wenn das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Ruft das Element mit dem angegebenen Schlüssel ab oder legt dieses fest.</summary>
      <param name="key">Der Schlüssel.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Keys">
      <summary>Ruft eine <see cref="T:System.Collections.Generic.ICollection`1" /> ab, die die Schlüssel des <see cref="T:System.Collections.Generic.IDictionary`2" /> enthält.</summary>
      <returns>Eine <see cref="T:System.Collections.Generic.ICollection`1" />, die die Schlüssel des Objekts enthält, das <see cref="T:System.Collections.Generic.IDictionary`2" /> implementiert.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Entfernt das Element mit dem angegebenen Schlüssel aus dem unveränderlichen Dictionary-Objekt.</summary>
      <param name="key">Der Schlüssel des zu entfernenden Elements.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Values">
      <summary>Ruft eine <see cref="T:System.Collections.Generic.ICollection`1" /> ab, die die Werte im <see cref="T:System.Collections.Generic.IDictionary`2" /> enthält.</summary>
      <returns>Eine <see cref="T:System.Collections.Generic.ICollection`1" />, die die Werte des Objekts enthält, das <see cref="T:System.Collections.Generic.IDictionary`2" /> implementiert.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns>Ein Enumeratorobjekt, mithilfe dessen eine Auflistung durchlaufen werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ToBuilder">
      <summary>Erstellt ein unveränderliches Wörterbuch, das den gleichen Inhalt wie dieses Wörterbuch aufweist und über mehrere Vorgänge mithilfe änderbarer Standardschnittstellen effizient verändert werden kann.</summary>
      <returns>Eine Auflistung, die den gleichen Inhalt wie dieses Wörterbuch aufweist und über mehrere Vorgänge mithilfe änderbarer Standardschnittstellen effizient verändert werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary>Ermittelt, ob das Wörterbuch einen bestimmten Schlüssel enthält.</summary>
      <param name="equalKey">Der zu suchende Schlüssel.</param>
      <param name="actualKey">Der übereinstimmende Schlüssel im Wörterbuch, wenn gefunden, oder <c>equalkey</c>, wenn keine Übereinstimmung gefunden wird.</param>
      <returns>
        <see langword="true" />, wenn eine Übereinstimmung für <paramref name="equalKey" /> gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)">
      <summary>Ruft den dem angegebenen Schlüssel zugeordneten Wert ab.</summary>
      <param name="key">Der Schlüssel, dessen Wert abgerufen wird.</param>
      <param name="value">Enthält nach dem Beenden dieser Methode den Wert, der dem angegebenen Schlüssel zugeordnet ist (wenn der Schlüssel gefunden wurde), oder andernfalls den Standardwert für den Typ des <paramref name="value" />-Parameters. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <returns>
        <see langword="true" />, wenn das Objekt, das das Wörterbuch implementiert, ein Element mit dem angegebenen Schlüssel enthält, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> ist NULL.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.ValueComparer">
      <summary>Ruft den Wertevergleich ab, mit dem bestimmt wird, ob Werte identisch sind.</summary>
      <returns>Der Wertevergleich, mit dem bestimmt wird, ob Werte identisch sind.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Values">
      <summary>Ruft die Werte im unveränderlichen Wörterbuch ab.</summary>
      <returns>Die Werte im unveränderlichen Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Ruft eine Instanz des unveränderlichen Wörterbuchs ab, die den angegebenen Schlüsselvergleich verwendet.</summary>
      <param name="keyComparer">Der zu verwendende Schlüsselvergleich.</param>
      <returns>Eine Instanz des unveränderlichen Wörterbuchs, die den angegebenen Vergleich verwendet.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>Ruft eine Instanz des unveränderlichen Wörterbuchs ab, die die angegebenen Schlüssel- und Wertevergleiche verwendet.</summary>
      <param name="keyComparer">Der zu verwendende Schlüsselvergleich.</param>
      <param name="valueComparer">Der zu verwendende Wertevergleich.</param>
      <returns>Eine Instanz des unveränderlichen Wörterbuchs, die die angegebenen Vergleiche verwendet.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet">
      <summary>Stellt eine Reihe von Initialisierungsmethoden für Instanzen der <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" /> Klasse bereit.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1">
      <summary>Erstellt eine leeres unveränderliches Hashset.</summary>
      <typeparam name="T">Der Typ der Elemente, die im unveränderlichen Hashset gespeichert werden sollen.</typeparam>
      <returns>Ein leeres unveränderliches Hashset.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0)">
      <summary>Erstellt ein neues unveränderliches Hashset, das das angegebene Element enthält.</summary>
      <param name="item">Das Element, mit dem das Hashset vorab aufgefüllt wird.</param>
      <typeparam name="T">Der Typ der Elemente im unveränderlichen Hashset.</typeparam>
      <returns>Ein neues unveränderliches Hashset, das das angegebene Element enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0[])">
      <summary>Erstellt ein neues unveränderliches Hashset, das das angegebene Array von Elementen enthält.</summary>
      <param name="items">Ein Array, das die Elemente enthält, um das Hashset vorab aufzufüllen.</param>
      <typeparam name="T">Der Typ der Elemente im unveränderlichen Hashset.</typeparam>
      <returns>Ein neues unveränderliches Hashset, das die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Erstellt ein leeres unveränderliches Hashset, das den angegebenen Gleichheitsvergleich verwendet.</summary>
      <param name="equalityComparer">Das Objekt, mit dem Objekte im Set auf Gleichheit verglichen werden sollen.</param>
      <typeparam name="T">Der Typ der Elemente im unveränderlichen Hashset.</typeparam>
      <returns>Ein leeres unveränderliches Hashset.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0)">
      <summary>Erstellt ein neues unveränderliches Hashset, das das angegebene Element enthält, und verwendet für den Settyp den angegebenen Gleichheitsvergleich.</summary>
      <param name="equalityComparer">Das Objekt, mit dem Objekte im Set auf Gleichheit verglichen werden sollen.</param>
      <param name="item">Das Element, mit dem das Hashset vorab aufgefüllt wird.</param>
      <typeparam name="T">Der Typ der Elemente im unveränderlichen Hashset.</typeparam>
      <returns>Ein neues unveränderliches Hashset, das das angegebene Element enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0[])">
      <summary>Erstellt ein neues unveränderliches Hashset, das die in der Auflistung angegebenen Elemente enthält, und verwendet für den Settyp den angegebenen Gleichheitsvergleich.</summary>
      <param name="equalityComparer">Das Objekt, mit dem Objekte im Set auf Gleichheit verglichen werden sollen.</param>
      <param name="items">Ein Array, das die Elemente enthält, um das Hashset vorab aufzufüllen.</param>
      <typeparam name="T">Der Typ der Elemente, die im unveränderlichen Hashset gespeichert sind.</typeparam>
      <returns>Ein neues unveränderliches Hashset, das die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1">
      <summary>Erstellt einen neuen unveränderlichen Hashset-Generator.</summary>
      <typeparam name="T">Der Typ der in der Auflistung gespeicherten Elemente.</typeparam>
      <returns>Der unveränderliche Hashset-Generator.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Erstellt einen neuen unveränderlichen Hashset-Generator.</summary>
      <param name="equalityComparer">Das Objekt, mit dem Objekte im Set auf Gleichheit verglichen werden sollen.</param>
      <typeparam name="T">Der Typ der in der Auflistung gespeicherten Elemente.</typeparam>
      <returns>Der neue unveränderliche Hashset-Generator.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Erstellt ein neues unveränderliches Hashset, das mit den angegebenen Elementen vorab ausgefüllt ist.</summary>
      <param name="items">Die Elemente, die dem Hashset hinzugefügt werden sollen.</param>
      <typeparam name="T">Der Typ der in der Auflistung gespeicherten Elemente.</typeparam>
      <returns>Das neue unveränderliche Hashset, das die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Erstellt ein neues unveränderliches Hashset, das die angegebene Elemente enthält, und verwendet für den Settyp den angegebenen Gleichheitsvergleich.</summary>
      <param name="equalityComparer">Das Objekt, mit dem Objekte im Set auf Gleichheit verglichen werden sollen.</param>
      <param name="items">Die Elemente, die der Auflistung hinzugefügt werden solle, bevor Unveränderlichkeit angewendet wird.</param>
      <typeparam name="T">Der Typ der in der Auflistung gespeicherten Elemente.</typeparam>
      <returns>Das neue unveränderliche Hashset.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Listet eine Sequenz auf und erzeugt ein unveränderliches Hashset ihrer Inhalte.</summary>
      <param name="source">Die Sequenz, die aufgelistet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente in der Sequenz.</typeparam>
      <returns>Ein unveränderliches Hashset, das die Elemente in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Listet eine Sequenz auf, erzeugt ein unveränderliches Hashset ihres Inhalts und verwendet den angegebenen Gleichheitsvergleich für den Settyp.</summary>
      <param name="source">Die Sequenz, die aufgelistet werden soll.</param>
      <param name="equalityComparer">Das Objekt, mit dem Objekte im Set auf Gleichheit verglichen werden sollen.</param>
      <typeparam name="TSource">Der Typ der Elemente in der Sequenz.</typeparam>
      <returns>Ein unveränderliches Hashset, das die Elemente in der angegebenen Sequenz enthält, und das den angegebenen Gleichheitsvergleich verwendet.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Immutable.ImmutableHashSet{``0}.Builder)">
      <summary>Erstellt einen unveränderlichen Hashsatz aus dem aktuellen Inhalt des Satzes des Generators.</summary>
      <param name="builder">Der Generator, aus dem der unveränderliche Hashsatz erstellt werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente im HashSet.</typeparam>
      <returns>Ein unveränderlicher Hashsatz, der den aktuellen Inhalt der Sammlung des Generators enthält.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1">
      <summary>Stellt ein unveränderliches unsortiertes Hashset dar.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="T">Der Typ der Elemente im Hashset.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Add(`0)">
      <summary>Fügt dem Hashset das angegebene Element hinzu.</summary>
      <param name="item">Der Element, das zur Menge hinzugefügt wird.</param>
      <returns>Ein Hashset, das den hinzugefügten Wert sowie Werte, die zuvor im <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />-Objekt enthalten waren, enthält.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Builder">
      <summary>Stellt ein Hashset dar, das mit wenigen oder gar keinen Speicherbelegungen geändert wird und sehr effizient Instanzen unveränderlicher Hashsets erzeugen oder darauf aufbauen kann.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)">
      <summary>Fügt dem unveränderlichen Hashset das angegebene Element hinzu.</summary>
      <param name="item">Das Element, das hinzugefügt werden soll.</param>
      <returns>
        <see langword="true" />, wenn das Element nicht bereits Teil der Auflistung war, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear">
      <summary>Entfernt alle Elemente aus dem unveränderlichen Hashset.</summary>
      <exception cref="T:System.NotSupportedException">Das Hashset ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)">
      <summary>Bestimmt, ob das unveränderliche Hashset einen bestimmten Wert enthält.</summary>
      <param name="item">Das Objekt, das im Hashset gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="item" /> im Hashset gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.Count">
      <summary>Ruft die Anzahl der Elemente im unveränderlichen Hashset ab.</summary>
      <returns>Die Anzahl der Elemente im unveränderlichen Hashset.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Entfernt alle Elemente in der angegebenen Auflistung aus dem aktuellen Hashset.</summary>
      <param name="other">Die Auflistung der Elemente, die aus der Gruppe entfernt werden sollen.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der das unveränderliche Hashset durchläuft.</summary>
      <returns>Ein Enumerator, der zum Durchlaufen der Gruppe verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Ändert die aktuelle Gruppe, sodass sie nur Elemente enthält, die in einer angegebenen Auflistung ebenfalls enthalten sind.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob die aktuelle Gruppe eine echte (strikte) Teilmenge einer angegebenen Auflistung ist.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Gruppe eine echte Teilmenge von <paramref name="other" /> ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob die aktuelle Gruppe eine echte (strikte) Teilmenge einer angegebenen Auflistung ist.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Gruppe eine echte Obermenge von <paramref name="other" /> ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob die aktuelle Gruppe eine Teilmenge einer angegebenen Auflistung ist.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Gruppe eine Teilmenge von <paramref name="other" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob die aktuelle Gruppe eine Obermenge einer angegebenen Auflistung ist.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Gruppe eine Obermenge von <paramref name="other" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer">
      <summary>Ruft den Schlüsselvergleich ab oder legt ihn fest.</summary>
      <returns>Der Schlüsselvergleich.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob sich die aktuelle Gruppe und die angegebene Auflistung überschneiden.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Auflistung und <paramref name="other" /> über mindestens ein gemeinsames Element verfügen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)">
      <summary>Entfernt das erste Vorkommen eines bestimmten Objekts aus dem unveränderlichen Hashset.</summary>
      <param name="item">Das aus der Gruppe zu entfernende Objekt.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="item" /> erfolgreich aus der Gruppe entfernt wurde, andernfalls <see langword="false" />. Diese Methode gibt auch dann <see langword="false" /> zurück, wenn <paramref name="item" /> nicht in der ursprünglichen Gruppe gefunden wurde.</returns>
      <exception cref="T:System.NotSupportedException">Die Gruppe ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob die aktuelle Gruppe und die angegebene Auflistung dieselben Elemente enthalten.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Gruppe und <paramref name="other" /> gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Ändert die aktuelle Gruppe, sodass sie nur Elemente enthält, die entweder in der aktuellen Gruppe oder in der angegebenen Auflistung, nicht jedoch in beiden vorhanden sind.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Fügt dem Hashset ein Element hinzu.</summary>
      <param name="item">Das Objekt, das der Gruppe hinzugefügt werden soll.</param>
      <exception cref="T:System.NotSupportedException">Die Gruppe ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Kopiert die Elemente des Hashsets in ein Array, beginnend an einem bestimmten Arrayindex.</summary>
      <param name="array">Das eindimensionale Array, das als Ziel der aus dem Hashset kopierten Elemente fungiert. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist.</summary>
      <returns>
        <see langword="true" />, wenn das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns>Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns>Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable">
      <summary>Erstellt ein unveränderliches Hashset basierend auf dem Inhalt dieser Instanz.</summary>
      <returns>Eine unveränderliche Gruppe.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Ändert die aktuelle Gruppe, sodass sie alle Elemente enthält, die sowohl in der aktuellen Gruppe als auch in der angegebenen Auflistung vorhanden sind.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Clear">
      <summary>Ruft ein leeres unveränderliches Hashset ab, das dieselbe Sortierungs- und Reihenfolgensemantik wie diese Instanz besitzt.</summary>
      <returns>Ein leeres Hashset, das dieselbe Sortierungs- und Reihenfolgensemantik wie diese Instanz besitzt.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)">
      <summary>Ermittelt, ob dieses unveränderliche Hashset das angegebene Element enthält.</summary>
      <param name="item">Das Objekt, das im unveränderlichen Hashset gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn das <paramref name="item" /> in der <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" /> gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Count">
      <summary>Ruft die Anzahl der Elemente im unveränderlichen Hashset ab.</summary>
      <returns>Die Anzahl der Elemente im Hashset.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableHashSet`1.Empty">
      <summary>Ruft ein unveränderliches Hashset für diesen Typ ab, der den standardmäßigen <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> verwendet.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator">
      <summary>Listet den Inhalt des unveränderlichen Hashsets auf, ohne Arbeitsspeicher zuzuweisen.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Current">
      <summary>Ruft das Element an der aktuellen Position des Enumerators ab.</summary>
      <returns>Ruft das Element an der aktuellen Position des Enumerators ab.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Dispose">
      <summary>Gibt alle von der aktuellen Instanz der <see cref="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator" />-Klasse verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.MoveNext">
      <summary>Setzt den Enumerator auf das nächste Element des unveränderlichen Hashsets.</summary>
      <returns>
        <see langword="true" />, wenn der Enumerator erfolgreich auf das nächste Element gesetzt wurde, <see langword="false" />, wenn der Enumerator das Ende des Hashsets überschritten hat.</returns>
      <exception cref="T:System.InvalidOperationException">Das Hashset wurde nach dem Erstellen des Enumerators geändert.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Reset">
      <summary>Setzt den Enumerator auf seine anfängliche Position vor dem ersten Element im Hashset.</summary>
      <exception cref="T:System.InvalidOperationException">Das Hashset wurde nach dem Erstellen des Enumerators geändert.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Ruft das aktuelle Element ab.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Entfernt die Elemente in der angegebenen Auflistung aus dem aktuellen unveränderlichen Hashset.</summary>
      <param name="other">Die Auflistung der Elemente, die aus dieser Gruppe entfernt werden sollen.</param>
      <returns>Eine neue Gruppe, aus der die Elemente entfernt wurden; oder die ursprüngliche Gruppe, wenn keines der Elemente in der Gruppe enthalten war.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns>Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Erstellt ein unveränderliches Hashset, das Elemente enthält, die sowohl in dieser Gruppe als auch in der angegebenen Gruppe vorhanden sind.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>Eine neue unveränderliche Gruppe, die alle Elemente enthält, die in beiden Gruppen vorhanden sind.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.IsEmpty">
      <summary>Ruft einen Wert ab, der angibt, ob das aktuelle unveränderliche Hashset leer ist.</summary>
      <returns>
        <see langword="true" />, wenn diese Instanz leer ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob das aktuelle unveränderliche Hashset eine echte (strikte) Teilmenge einer angegebenen Auflistung ist.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Gruppe eine echte Teilmenge der angegebenen Auflistung ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob das aktuelle unveränderliche Hashset eine echte (strikte) Obermenge einer angegebenen Auflistung ist.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Gruppe eine echte Obermenge der angegebenen Auflistung ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob das aktuelle unveränderliche Hashset eine Teilmenge einer angegebenen Auflistung ist.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Gruppe eine Teilmenge der angegebenen Auflistung ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob das aktuelle unveränderliche Hashset eine Obermenge einer angegebenen Auflistung ist.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Gruppe eine Obermenge der angegebenen Auflistung ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.KeyComparer">
      <summary>Ruft das Objekt ab, das zum Abrufen der Hashcodes für die Schlüssel und zum Überprüfen der Werte im unveränderlichen Hashset auf Gleichheit verwendet wird.</summary>
      <returns>Der Vergleich, der zum Abrufen der Hashcodes für die Schlüssel und für Gleichheitsprüfungen verwendet wird.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob sich das aktuelle unveränderliche Hashset und die angegebene Auflistung überschneiden.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Gruppe und die angegebene Auflistung über mindestens ein gemeinsames Element verfügen; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)">
      <summary>Entfernt das angegebene Element aus diesem unveränderlichen Hashset.</summary>
      <param name="item">Das zu entfernende Element.</param>
      <returns>Eine neue Gruppe, aus der das angegebene Element entfernt wurde, oder die aktuelle Gruppe, wenn das Element in der Gruppe nicht gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob das aktuelle unveränderliche Hashset und die angegebene Auflistung dieselben Elemente enthalten.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die Gruppen gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Erstellt ein unveränderliches Hashset, das nur Elemente enthält, die entweder im aktuellen Hashset oder in der angegebenen Auflistung, jedoch nicht in beiden vorhanden sind.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>Eine neue Gruppe mit den Elementen, die nur in der aktuellen Gruppe oder in der angegebenen Auflistung, aber nicht in beiden vorhanden sind.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Fügt der Gruppe ein Element hinzu.</summary>
      <param name="item">Das Objekt, das der Gruppe hinzugefügt werden soll.</param>
      <exception cref="T:System.NotSupportedException">Die Gruppe ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Entfernt alle Elemente aus dieser Gruppe.</summary>
      <exception cref="T:System.NotSupportedException">Die Gruppe ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Kopiert die Elemente der Gruppe in ein Array, wobei an einem bestimmten Index begonnen wird.</summary>
      <param name="array">Das eindimensionale Array, das das Ziel der aus der Gruppe kopierten Elemente ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Siehe Schnittstelle <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Entfernt das erste Vorkommen eines bestimmten Objekts aus der Gruppe.</summary>
      <param name="item">Das aus der Gruppe zu entfernende Objekt.</param>
      <returns>
        <see langword="true" />, wenn das Element erfolgreich entfernt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns>Ein Enumerator, der die Auflistung durchläuft.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary>Fügt der aktuellen Gruppe ein Element hinzu und gibt einen Wert zurück, der angibt, ob das Element erfolgreich hinzugefügt wurde.</summary>
      <param name="item">Das zur Auflistung hinzuzufügende Element.</param>
      <returns>
        <see langword="true" />, wenn das Element der Gruppe hinzugefügt wurde. <see langword="false" />, wenn das Element bereits in der Gruppe enthalten ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Entfernt alle Elemente in der angegebenen Auflistung aus der aktuellen Gruppe.</summary>
      <param name="other">Die Auflistung der Elemente, die entfernt werden sollen.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Ändert die aktuelle Gruppe, sodass sie nur Elemente enthält, die in einer angegebenen Auflistung ebenfalls enthalten sind.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Auflistung verglichen werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Ändert die aktuelle Gruppe, sodass sie nur Elemente enthält, die entweder in der aktuellen Gruppe oder in der angegebenen Auflistung, nicht jedoch in beiden vorhanden sind.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Ändert die aktuelle Gruppe, sodass sie alle Elemente enthält, die entweder in der aktuellen Gruppe oder in der angegebenen Auflistung vorhanden sind.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Kopiert die Elemente der Gruppe in ein Array, wobei an einem bestimmten Index begonnen wird.</summary>
      <param name="array">Das eindimensionale Array, das das Ziel der aus der Gruppe kopierten Elemente ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>Siehe Schnittstelle <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#SyncRoot">
      <summary>Siehe <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der eine Gruppe durchläuft.</summary>
      <returns>Ein Enumerator, der zum Durchlaufen der Gruppe verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary>Fügt dieser unveränderlichen Gruppe das angegebene Element hinzu.</summary>
      <param name="item">Das hinzuzufügende Element.</param>
      <returns>Eine neue Gruppe mit dem hinzugefügten Element oder diese Gruppe, wenn das Element bereits in der Gruppe enthalten ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary>Ruft eine leere Gruppe ab, die dieselbe Sortierungs- und Reihenfolgensemantik wie diese Instanz besitzt.</summary>
      <returns>Eine leere Gruppe, die dieselbe Sortierungs- oder Reihenfolgensemantik wie diese Instanz besitzt.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Entfernt die Elemente in der angegebenen Auflistung aus der aktuellen Gruppe.</summary>
      <param name="other">Die Auflistung der Elemente, die aus dieser Gruppe entfernt werden sollen.</param>
      <returns>Eine neue Gruppe, aus der die Elemente entfernt wurden; oder die ursprüngliche Gruppe, wenn keines der Elemente in der Gruppe enthalten war.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Erstellt eine unveränderliche Gruppe, die Elemente enthält, die sowohl in dieser Gruppe als auch in der angegebenen Gruppe vorhanden sind.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>Eine neue unveränderliche Gruppe, die alle Elemente enthält, die in beiden Gruppen vorhanden sind.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary>Fügt dieser unveränderlichen Gruppe das angegebene Element hinzu.</summary>
      <param name="item">Das zu entfernende Element.</param>
      <returns>Eine neue Gruppe, aus der das angegebene Element entfernt wurde, oder die aktuelle Gruppe, wenn das Element in der Gruppe nicht gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Erstellt eine unveränderliche Gruppe, die nur Elemente enthält, die entweder in der aktuellen Gruppe oder in der angegebenen Auflistung, aber nicht in beiden vorhanden sind.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>Eine neue Gruppe mit den Elementen, die nur in der aktuellen Gruppe oder in der angegebenen Auflistung, aber nicht in beiden vorhanden sind.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Erstellt eine unveränderliche Gruppe, die alle Elemente enthält, die entweder in der aktuellen Gruppe oder in der angegebenen Auflistung vorhanden sind.</summary>
      <param name="other">Die Auflistung, aus der Elemente hinzugefügt werden sollen.</param>
      <returns>Eine neue unveränderliche Gruppe mit den hinzugefügten Elementen; oder die ursprüngliche Gruppe, wenn alle Elemente bereits in der Gruppe enthalten waren.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.ToBuilder">
      <summary>Erstellt ein unveränderliches Hashset, das den gleichen Inhalt wie diese Gruppe aufweist und über mehrere Vorgänge mithilfe änderbarer Standardschnittstellen effizient verändert werden kann.</summary>
      <returns>Eine Gruppe, die den gleichen Inhalt wie diese Gruppe aufweist und über mehrere Vorgänge mithilfe änderbarer Standardschnittstellen effizient verändert werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)">
      <summary>Durchsucht die Gruppe nach einem angegebenen Wert und gibt ggf. den identischen Wert zurück, sofern vorhanden.</summary>
      <param name="equalValue">Der zu suchende Wert.</param>
      <param name="actualValue">Der bei der Suche in der Gruppe gefundene Wert, oder der ursprüngliche Wert, wenn die Suche keine Übereinstimmung ergeben hat.</param>
      <returns>Ein Wert, der angibt, ob die Suche erfolgreich war.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Erstellt ein neues unveränderliches Hashset, das alle Elemente enthält, die entweder in der aktuellen Gruppe oder in der angegebenen Auflistung vorhanden sind.</summary>
      <param name="other">Die Auflistung, aus der Elemente hinzugefügt werden sollen.</param>
      <returns>Ein neues unveränderliches Hashset mit den hinzugefügten Elementen oder die ursprüngliche Gruppe, wenn alle Elemente bereits in der Gruppe enthalten waren.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Ruft eine Instanz des unveränderlichen Hashsets ab, die den angegebenen Gleichheitsvergleich für ihre Suchmethoden verwendet.</summary>
      <param name="equalityComparer">Der zu verwendende Gleichheitsvergleich.</param>
      <returns>Eine Instanz dieses unveränderlichen Hashsets, die den angegebenen Vergleich verwendet.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableInterlocked">
      <summary>Enthält ineinandergreifende Austauschmechanismen für unveränderliche Auflistungen.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})">
      <summary>Ruft den Wert aus einem Wörterbuch ab, nachdem er hinzugefügt oder ein vorhandener Eintrag aktualisiert wurde.</summary>
      <param name="location">Die Variable oder das Feld, die bzw. das automatisch aktualisiert wird, wenn das angegebene Element nicht im Wörterbuch enthalten ist.</param>
      <param name="key">Der Schlüssel für den hinzuzufügenden oder zu aktualisierenden Wert.</param>
      <param name="addValue">Der zu verwendende Wert, wenn kein vorheriger Wert vorhanden ist.</param>
      <param name="updateValueFactory">Die Funktion, die den Schlüssel und vorherigen Wert empfängt und einen neuen Wert zurückgibt, mit dem das Wörterbuch aktualisiert wird.</param>
      <typeparam name="TKey">Der Typ des Schlüssels, der vom Wörterbuch gespeichert wird.</typeparam>
      <typeparam name="TValue">Der Typ des Werts, der vom Wörterbuch gespeichert wird.</typeparam>
      <returns>Der hinzugefügte oder aktualisierte Wert.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
      <summary>Ruft den Wert aus einem Wörterbuch ab, nachdem er hinzugefügt oder ein vorhandener Eintrag aktualisiert wurde.</summary>
      <param name="location">Die Variable oder das Feld, die bzw. das automatisch aktualisiert wird, wenn das angegebene Element nicht im Wörterbuch enthalten ist.</param>
      <param name="key">Der Schlüssel für den hinzuzufügenden oder zu aktualisierenden Wert.</param>
      <param name="addValueFactory">Die Funktion, die den Schlüssel empfängt und einen neuen Wert zurückgibt, der dem Wörterbuch hinzugefügt wird, wenn noch kein Wert vorhanden ist.</param>
      <param name="updateValueFactory">Die Funktion, die den Schlüssel und vorherigen Wert empfängt und einen neuen Wert zurückgibt, mit dem das Wörterbuch aktualisiert wird.</param>
      <typeparam name="TKey">Der Typ des Schlüssels, der vom Wörterbuch gespeichert wird.</typeparam>
      <typeparam name="TValue">Der Typ des Werts, der vom Wörterbuch gespeichert wird.</typeparam>
      <returns>Der hinzugefügte oder aktualisierte Wert.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)">
      <summary>Fügt ein Element automatisch am Ende einer Warteschlange an.</summary>
      <param name="location">Die Variable oder das Feld, die bzw. das automatisch aktualisiert wird.</param>
      <param name="value">Der in die Warteschlange einzureihende Wert.</param>
      <typeparam name="T">Der Typ der in der Auflistung enthaltenen Elemente.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary>Ruft den Wert für den angegebenen Schlüssel aus dem Wörterbuch ab oder fügt einen dem Wörterbuch einen neuen Wert hinzu, wenn der Schlüssel nicht gefunden wurde.</summary>
      <param name="location">Die Variable oder das Feld, die bzw. das automatisch aktualisiert wird, wenn der angegebene Schlüssel nicht im Wörterbuch enthalten ist.</param>
      <param name="key">Der Schlüssel für den Wert, der abgerufen oder hinzugefügt werden soll.</param>
      <param name="value">Der zum Wörterbuch hinzuzufügende Wert, wenn der Schlüssel nicht gefunden werden kann.</param>
      <typeparam name="TKey">Der Typ der in der Auflistung enthaltenen Schlüssel.</typeparam>
      <typeparam name="TValue">Der Typ der Werte, die in der Auflistung enthalten sind.</typeparam>
      <returns>Der Wert am angegebenen Schlüssel oder <paramref name="valueFactory" />, wenn der Schlüssel nicht vorhanden war.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})">
      <summary>Ruft den Wert für den angegebenen Schlüssel aus dem Wörterbuch ab oder fügt einen dem Wörterbuch einen neuen Wert hinzu, wenn der Schlüssel nicht gefunden wurde.</summary>
      <param name="location">Die Variable oder das Feld, die bzw. das automatisch aktualisiert wird, wenn das angegebene Element nicht im Wörterbuch enthalten ist.</param>
      <param name="key">Der Schlüssel für den abzurufenden oder hinzuzufügenden Wert.</param>
      <param name="valueFactory">Die Funktion, die ausgeführt werden soll, um den in das Wörterbuch einzufügenden Wert abzurufen, wenn der Schlüssel nicht gefunden werden kann. Dieser Delegat wird nicht mehr als einmal aufgerufen.</param>
      <typeparam name="TKey">Der Typ der in der Auflistung enthaltenen Schlüssel.</typeparam>
      <typeparam name="TValue">Der Typ der Werte, die in der Auflistung enthalten sind.</typeparam>
      <returns>Der Wert am angegebenen Schlüssel oder <paramref name="valueFactory" />, wenn der Schlüssel nicht vorhanden war.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)">
      <summary>Ruft den Wert für den angegebenen Schlüssel aus dem Wörterbuch ab oder fügt einen dem Wörterbuch einen neuen Wert hinzu, wenn der Schlüssel nicht gefunden wurde.</summary>
      <param name="location">Die Variable oder das Feld, die bzw. das aktualisiert wird, wenn das angegebene Element nicht im Wörterbuch enthalten ist.</param>
      <param name="key">Der Schlüssel für den abzurufenden oder hinzuzufügenden Wert.</param>
      <param name="valueFactory">Die Funktion, die ausgeführt werden soll, um den in das Wörterbuch einzufügenden Wert abzurufen, wenn der Schlüssel nicht gefunden werden kann.</param>
      <param name="factoryArgument">Das an die Wertzuordnungsinstanz zu übergebende Argument.</param>
      <typeparam name="TKey">Der Typ der in der Auflistung enthaltenen Schlüssel.</typeparam>
      <typeparam name="TValue">Der Typ der Werte, die in der Auflistung enthalten sind.</typeparam>
      <typeparam name="TArg">Der Typ des Arguments, das für die wertefactory bereitgestellt wird.</typeparam>
      <returns>Der Wert am angegebenen Schlüssel oder <paramref name="valueFactory" />, wenn der Schlüssel nicht vorhanden war.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Vergleicht zwei unveränderliche Arrays auf Gleichheit und ersetzt eines der Arrays, wenn sie gleich sind.</summary>
      <param name="location">Das Ziel, dessen Wert mit <paramref name="comparand" /> verglichen und möglicherweise ersetzt wird.</param>
      <param name="value">Der Wert, der den Zielwert ersetzt, wenn der Vergleich Gleichheit ergibt.</param>
      <param name="comparand">Der Wert, der mit dem Wert bei <paramref name="location" /> verglichen wird.</param>
      <typeparam name="T">Der Typ des Elements, das durch das Array gespeichert wird.</typeparam>
      <returns>Der ursprüngliche Wert in <paramref name="location" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Legt ein Array auf das angegebene Array fest und gibt einen Verweis auf das ursprüngliche Array als atomarer Vorgang zurück.</summary>
      <param name="location">Das Array, das auf den angegebenen Wert festgelegt werden soll.</param>
      <param name="value">Der Wert, auf den der <paramref name="location" />-Parameter festgelegt ist.</param>
      <typeparam name="T">Der Typ des Elements, das durch das Array gespeichert wird.</typeparam>
      <returns>Der ursprüngliche Wert von <paramref name="location" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Legt ein Array auf das angegebene Array fest, wenn das Array nicht initialisiert wurde.</summary>
      <param name="location">Das Array, das auf den angegebenen Wert festgelegt werden soll.</param>
      <param name="value">Der Wert, auf den der <paramref name="location" />-Parameter festgelegt wird, wenn er nicht initialisiert wird.</param>
      <typeparam name="T">Der Typ des Elements, das durch das Array gespeichert wird.</typeparam>
      <returns>
        <see langword="true" />, wenn dem Array der angegebenen Wert zugewiesen wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)">
      <summary>Legt ein neues Element auf dem Stapel ab.</summary>
      <param name="location">Der zu aktualisierende Stapel.</param>
      <param name="value">Der Wert, der auf dem Stapel abgelegt werden soll.</param>
      <typeparam name="T">Der Typ der Elemente im Stapel.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary>Fügt den angegebenen Schlüssel und Wert dem Wörterbuch hinzu, wenn der Schlüssel nicht im Wörterbuch enthalten ist.</summary>
      <param name="location">Das Wörterbuch, das mit dem angegebenen Schlüssel und Wert aktualisiert werden soll.</param>
      <param name="key">Der hinzuzufügende Schlüssel, wenn er noch nicht im Wörterbuch definiert ist.</param>
      <param name="value">Der hinzuzufügende Wert.</param>
      <typeparam name="TKey">Der Typ der in der Auflistung enthaltenen Schlüssel.</typeparam>
      <typeparam name="TValue">Der Typ der Werte, die in der Auflistung enthalten sind.</typeparam>
      <returns>
        <see langword="true" />, wenn der Schlüssel nicht im Wörterbuch enthalten ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)">
      <summary>Entfernt das angegebene Element automatisch und setzt es an den Anfang der Warteschlange zurück, wenn die Warteschlange nicht leer ist.</summary>
      <param name="location">Die Variable oder das Feld, die bzw. das automatisch aktualisiert wird.</param>
      <param name="value">Wird auf den Wert am Anfang der Warteschlange festgelegt, wenn die Warteschlange nicht leer ist.</param>
      <typeparam name="T">Der Typ der Elemente in der Warteschlange.</typeparam>
      <returns>
        <see langword="true" />, wenn die Warteschlange nicht leer ist und das Anfangselement entfernt wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)">
      <summary>Entfernt ein Element von der obersten Position im Stapel, wenn ein zu entfernendes Element vorhanden ist.</summary>
      <param name="location">Der zu aktualisierende Stapel.</param>
      <param name="value">Empfängt den aus dem Stapel entfernten Wert, wenn der Stapel nicht leer ist.</param>
      <typeparam name="T">Der Typ der Elemente im Stapel.</typeparam>
      <returns>
        <see langword="true" />, wenn ein Element aus dem Stapel entfernt wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)">
      <summary>Entfernt das Element mit dem angegebenen Schlüssel, wenn der Schlüssel vorhanden ist.</summary>
      <param name="location">Das zu aktualisierende Wörterbuch.</param>
      <param name="key">Der zu entfernende Schlüssel.</param>
      <param name="value">Empfängt den Wert des entfernten Elements, wenn das Wörterbuch nicht leer ist.</param>
      <typeparam name="TKey">Der Typ der in der Auflistung enthaltenen Schlüssel.</typeparam>
      <typeparam name="TValue">Der Typ der Werte, die in der Auflistung enthalten sind.</typeparam>
      <returns>
        <see langword="true" />, wenn der Schlüssel gefunden und entfernt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)">
      <summary>Legt den angegebenen Schlüssel auf den angegebenen Wert fest, wenn für den angegebenen Schlüssel bereits ein bestimmter Wert festgelegt ist.</summary>
      <param name="location">Das zu aktualisierende Wörterbuch.</param>
      <param name="key">Der zu aktualisierende Schlüssel.</param>
      <param name="newValue">Der neue Wert, der festzulegen ist.</param>
      <param name="comparisonValue">Der aktuelle Wert für <paramref name="key" />, damit die Aktualisierung erfolgreich ausgeführt werden kann.</param>
      <typeparam name="TKey">Der Typ der in der Auflistung enthaltenen Schlüssel.</typeparam>
      <typeparam name="TValue">Der Typ der Werte, die in der Auflistung enthalten sind.</typeparam>
      <returns>
        <see langword="true" />, wenn <paramref name="key" /> und <paramref name="comparisonValue" /> im Wörterbuch vorhanden sind und der Vergleich in <paramref name="newValue" /> aktualisiert wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})">
      <summary>Mutiert einen Wert direkt mit der Transaktionssemantik eingeschränkter Sperren über eine angegebene Transaktionsfunktion.             Es wird solange wiederholt versucht, die Transformation durchzuführen, bis das Rennen um die optimistische Sperre gewonnen ist.</summary>
      <param name="location">Die Variable oder das Feld, die bzw. das geändert werden soll; mehrere Threads können darauf zugreifen.</param>
      <param name="transformer">Eine Funktion, die den Wert mutiert. Diese Funktion sollte keine Nebeneffekte haben, da sie mehrere Male ausgeführt werden kann, wenn Rennen mit anderen Threads auftreten.</param>
      <typeparam name="T">Der Datentyp.</typeparam>
      <returns>
        <see langword="true" />, wenn der Wert des Speicherorts durch Anwenden des Ergebnisses der Funktion <paramref name="transformer" /> geändert wird. <see langword="false" />, wenn der Wert des Speicherorts derselbe bleibt, da der letzte Aufruf von <paramref name="transformer" /> den vorhandenen Wert zurückgegeben hat.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)">
      <summary>Mutiert einen Wert direkt mit der Transaktionssemantik eingeschränkter Sperren über eine angegebene Transaktionsfunktion.             Es wird solange wiederholt versucht, die Transformation durchzuführen, bis das Rennen um die optimistische Sperre gewonnen ist.</summary>
      <param name="location">Die Variable oder das Feld, die bzw. das geändert werden soll; mehrere Threads können darauf zugreifen.</param>
      <param name="transformer">Eine Funktion, die den Wert mutiert. Diese Funktion sollte keine Nebeneffekte haben, da sie mehrere Male ausgeführt werden kann, wenn Rennen mit anderen Threads auftreten.</param>
      <param name="transformerArgument">Das an <paramref name="transformer" /> zu übergebende Argument.</param>
      <typeparam name="T">Der Datentyp.</typeparam>
      <typeparam name="TArg">Der Argumenttyp, der an das <paramref name="transformer" />-Argument übermittelt wird</typeparam>
      <returns>
        <see langword="true" />, wenn der Wert des Speicherorts durch Anwenden des Ergebnisses der Funktion <paramref name="transformer" /> geändert wird. <see langword="false" />, wenn der Wert des Speicherorts derselbe bleibt, da der letzte Aufruf von <paramref name="transformer" /> den vorhandenen Wert zurückgegeben hat.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList">
      <summary>Stellt eine Reihe von Initialisierungsmethoden für Instanzen der <see cref="T:System.Collections.Immutable.ImmutableList`1" /> Klasse bereit.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1">
      <summary>Erstellt eine leere unveränderlichen Liste.</summary>
      <typeparam name="T">Der Typ der in gespeicherten Elemente.</typeparam>
      <returns>Eine leere unveränderliche Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0)">
      <summary>Erstellt eine neue unveränderlichen Liste, die das angegebene Element enthält.</summary>
      <param name="item">Das Element, mit dem die Liste vorab aufgefüllt wird.</param>
      <typeparam name="T">Der Typ der Elemente im .</typeparam>
      <returns>Eine neue , die das angegebene Element enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0[])">
      <summary>Erstellt eine neue unveränderliche Liste, die das angegebene Array von Elementen enthält.</summary>
      <param name="items">Ein Array, das die Elemente enthält, um die Liste vorab aufzufüllen.</param>
      <typeparam name="T">Der Typ der Elemente im .</typeparam>
      <returns>Erstellt eine neue unveränderlichen Liste, die die angegebenen Element enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateBuilder``1">
      <summary>Erstellt einen neuen unveränderlichen Listen-Builder.</summary>
      <typeparam name="T">Der Typ der in der Auflistung gespeicherten Elemente.</typeparam>
      <returns>Der Generator für unveränderliche Auflistungen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Erstellt eine neue unveränderlichen Liste, die die angegebenen Elemente enthält.</summary>
      <param name="items">Das Element, das der Liste hinzugefügt werden soll.</param>
      <typeparam name="T">Der Typ der Elemente im .</typeparam>
      <returns>Eine unveränderliche Liste, die die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des ersten Vorkommens innerhalb der Liste zurück.</summary>
      <param name="list">Die zu durchsuchende Liste.</param>
      <param name="item">Das Objekt, das in der Liste gesucht werden soll. Der Wert kann für Verweistypen NULL sein.</param>
      <typeparam name="T">Der Typ der Elemente in der Liste.</typeparam>
      <returns>Der nullbasierte Index des ersten Vorkommens des Elements innerhalb des Bereichs von Elementen in der Liste, der sich vom Index bis zum letzten Element erstreckt, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des ersten Vorkommens innerhalb der Liste zurück.</summary>
      <param name="list">Die zu durchsuchende Liste.</param>
      <param name="item">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen NULL sein.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich für die Suche.</param>
      <typeparam name="T">Der Typ der Elemente in der Liste.</typeparam>
      <returns>Der nullbasierte Index des ersten Vorkommens des Elements innerhalb des Bereichs von Elementen in der unveränderlichen Liste, der sich vom Index bis zum letzten Element erstreckt, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary>Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der sich vom angegebenen Index bis zum letzten Element erstreckt.</summary>
      <param name="list">Die zu durchsuchende Liste.</param>
      <param name="item">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen NULL sein.</param>
      <param name="startIndex">Der nullbasierte Startindex für die Suche. 0 (null) ist in einer leeren Liste gültig.</param>
      <typeparam name="T">Der Typ der Elemente in der Liste.</typeparam>
      <returns>Der nullbasierte Index des ersten Vorkommens des Elements innerhalb des Bereichs von Elementen in der unveränderlichen Liste, der sich vom Index bis zum letzten Element erstreckt, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary>Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der sich vom angegebenen Index bis zum letzten Element erstreckt.</summary>
      <param name="list">Die zu durchsuchende Liste.</param>
      <param name="item">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen NULL sein.</param>
      <param name="startIndex">Der nullbasierte Startindex für die Suche. 0 (null) ist in einer leeren Liste gültig.</param>
      <param name="count">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
      <typeparam name="T">Der Typ der Elemente in der Liste.</typeparam>
      <returns>Der nullbasierte Index des ersten Vorkommens des Elements innerhalb des Bereichs von Elementen in der unveränderlichen Liste, der sich vom Index bis zum letzten Element erstreckt, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des letzten Vorkommens innerhalb der gesamten unveränderlichen Liste zurück.</summary>
      <param name="list">Die zu durchsuchende Liste.</param>
      <param name="item">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen NULL sein.</param>
      <typeparam name="T">Der Typ der Elemente in der Liste.</typeparam>
      <returns>Der nullbasierte Index des letzten Vorkommens des Elements in der gesamten unveränderlichen Liste, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des letzten Vorkommens innerhalb der gesamten unveränderlichen Liste zurück.</summary>
      <param name="list">Die zu durchsuchende Liste.</param>
      <param name="item">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen NULL sein.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich für die Suche.</param>
      <typeparam name="T">Der Typ der Elemente in der Liste.</typeparam>
      <returns>Der nullbasierte Index des letzten Vorkommens des Elements in der gesamten unveränderlichen Liste, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary>Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des letzten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der sich vom ersten Element bis zum angegebenen Index erstreckt.</summary>
      <param name="list">Die zu durchsuchende Liste.</param>
      <param name="item">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen NULL sein.</param>
      <param name="startIndex">Der nullbasierte Startindex für die Rückwärtssuche.</param>
      <typeparam name="T">Der Typ der Elemente in der Liste.</typeparam>
      <returns>Der nullbasierte Index des letzten Vorkommens des Elements innerhalb des Bereichs von Elementen in der unveränderlichen Liste, der sich vom ersten Element bis zum Index erstreckt, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary>Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des letzten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der sich vom ersten Element bis zum angegebenen Index erstreckt.</summary>
      <param name="list">Die zu durchsuchende Liste.</param>
      <param name="item">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen NULL sein.</param>
      <param name="startIndex">Der nullbasierte Startindex für die Rückwärtssuche.</param>
      <param name="count">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
      <typeparam name="T">Der Typ der Elemente in der Liste.</typeparam>
      <returns>Der nullbasierte Index des letzten Vorkommens des Elements innerhalb des Bereichs von Elementen in der unveränderlichen Liste, der sich vom ersten Element bis zum Index erstreckt, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>Entfernt den angegebenen Wert aus der Liste.</summary>
      <param name="list">Die zu durchsuchende Liste.</param>
      <param name="value">Der zu entfernende Wert.</param>
      <typeparam name="T">Der Typ der Elemente in der Liste.</typeparam>
      <returns>Eine neue unveränderliche Liste mit dem entfernten Element oder diese Liste, wenn das Element nicht in dieser Liste ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Entfernt die angegebenen Werte aus dieser Liste.</summary>
      <param name="list">Die zu durchsuchende Liste.</param>
      <param name="items">Die zu entfernenden Elemente, wenn Übereinstimmungen in dieser Liste gefunden werden.</param>
      <typeparam name="T">Der Typ der Elemente in der Liste.</typeparam>
      <returns>Eine neue unveränderlichen Liste, aus der die Elemente entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)">
      <summary>Ersetzt das erste gleiche Element in der Liste mit dem angegebenen Element.</summary>
      <param name="list">Die zu durchsuchende Liste.</param>
      <param name="oldValue">Das zu ersetzende Element.</param>
      <param name="newValue">Das durch ein Element zu ersetzende alte Element.</param>
      <typeparam name="T">Der Typ der Elemente in der Liste.</typeparam>
      <returns>Die neue Liste – selbst wenn der zu ersetzende Wert dem neuen Wert für diese Position entspricht.</returns>
      <exception cref="T:System.ArgumentException">Wird ausgelöst, wenn der alte Wert nicht in der Liste vorhanden ist.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Listet eine Sequenz auf und erzeugt eine unveränderliche Liste ihrer Inhalte.</summary>
      <param name="source">Die Sequenz, die aufgelistet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente in der Sequenz.</typeparam>
      <returns>Eine unveränderliche Liste, die die Elemente in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)">
      <summary>Erstellt eine unveränderliche Liste aus dem aktuellen Inhalt der Sammlung des Generators.</summary>
      <param name="builder">Der Generator, aus dem die unveränderliche Liste erstellt werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente in der Liste.</typeparam>
      <returns>Eine unveränderliche Liste, die den aktuellen Inhalt der Sammlung des Generators enthält.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1">
      <summary>Stellt eine unveränderliche Liste dar, bei der es sich um eine stark typisierte Liste von Objekten handelt, auf die über einen Index zugegriffen werden kann.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="T">Der Typ der Elemente in der Liste.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Add(`0)">
      <summary>Fügt das angegebene Objekt am Ende der unveränderlichen Liste hinzu.</summary>
      <param name="value">Das hinzuzufügende Objekt.</param>
      <returns>Eine neue unveränderliche Liste, der das Objekt hinzugefügt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Fügt die Elemente der angegebenen Auflistung am Ende der unveränderlichen Liste hinzu.</summary>
      <param name="items">Die Sammlung, deren Elemente am Ende der Liste hinzugefügt werden.</param>
      <returns>Eine neue unveränderliche Liste, der die Elemente hinzugefügt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)">
      <summary>Durchsucht mithilfe des Standardcomparers die gesamte sortierte Liste nach einem Element und gibt den nullbasierten Index des Elements zurück.</summary>
      <param name="item">Das zu suchende Objekt. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <returns>Der nullbasierte Index des Elements in der sortierten Liste, sofern das Element gefunden wird, andernfalls eine negative Zahl, die das bitweise Komplement des Indexes des nächsten Elements darstellt, das größer als das Element ist, oder, wenn kein größeres Element vorhanden ist, das bitweise Komplement von <see cref="P:System.Collections.ICollection.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">Der Standardcomparer kann keine Comparerimplementierung für Typ T finden.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>Durchsucht mithilfe des angegebenen Vergleichs die gesamte sortierte Liste nach einem Element und gibt den nullbasierten Index des Elements zurück.</summary>
      <param name="item">Das zu suchende Objekt. Der Wert kann für Verweistypen NULL sein.</param>
      <param name="comparer">Die Vergleichsimplementierung, die beim Vergleichen von Elementen verwendet werden soll, oder null, wenn der Standardvergleich verwendet werden soll.</param>
      <returns>Der nullbasierte Index des Elements in der sortierten Liste, sofern das Element gefunden wird, andernfalls eine negative Zahl, die das bitweise Komplement des Indexes des nächsten Elements darstellt, das größer als das Element ist, oder, wenn kein größeres Element vorhanden ist, das bitweise Komplement von <see cref="P:System.Collections.ICollection.Count" />.</returns>
      <exception cref="T:System.InvalidOperationException">„comparer“ ist <see langword="null" />, und der Standardcomparer kann keine Comparerimplementierung für Typ T finden.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>Durchsucht mithilfe des angegebenen Vergleichs einen Bereich von Elementen in der sortierten Liste nach einem Element und gibt den nullbasierten Index des Elements zurück.</summary>
      <param name="index">Der nullbasierte Startindex des zu durchsuchenden Bereichs.</param>
      <param name="count">Die Länge des zu durchsuchenden Bereichs.</param>
      <param name="item">Das zu suchende Objekt. Der Wert kann für Verweistypen NULL sein.</param>
      <param name="comparer">Die Vergleichsimplementierung, die beim Vergleichen von Elementen verwendet werden soll, oder <see langword="null" />, wenn der Standardvergleich verwendet werden soll.</param>
      <returns>Der nullbasierte Index des Elements in der sortierten Liste, sofern das Element gefunden wird, andernfalls eine negative Zahl, die das bitweise Komplement des Indexes des nächsten Elements darstellt, das größer als das Element ist, oder, wenn kein größeres Element vorhanden ist, das bitweise Komplement von <paramref name="count" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">„index“ ist kleiner als 0, oder <paramref name="count" /> ist kleiner als 0.</exception>
      <exception cref="T:System.ArgumentException">„index“ und <paramref name="count" /> geben keinen gültigen Bereich in der Liste an.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> ist <see langword="null" />, und der Standardcomparer kann keine Comparerimplementierung für Typ T finden.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Builder">
      <summary>Stellt eine Liste dar, die mit wenigen oder gar keinen Speicherbelegungen geändert wird und sehr effizient Instanzen unveränderlicher Listen erzeugen oder darauf aufbauen kann.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)">
      <summary>Fügt der unveränderlichen Liste ein Element hinzu.</summary>
      <param name="item">Das Element, das der Liste hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Fügt am Ende dieser Liste eine Reihe von Elementen hinzu.</summary>
      <param name="items">Die Elemente, die am Ende der Liste hinzugefügt werden sollen.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)">
      <summary>Durchsucht <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> mithilfe des Standardvergleichs vollständig nach einem Element und gibt den nullbasierten Index des Elements zurück.</summary>
      <param name="item">Das zu suchende Objekt. Der Wert kann für Verweistypen NULL sein.</param>
      <returns>Der nullbasierte Index des Elements in <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, sofern das Element gefunden wird, andernfalls eine negative Zahl, die das bitweise Komplement des Indexes des nächsten Elements darstellt, das größer als <paramref name="item" /> ist.</returns>
      <exception cref="T:System.InvalidOperationException">Die Standardvergleicheigenschaft <see cref="P:System.Collections.Generic.Comparer`1.Default" /> kann keine Implementierung der generischen <see cref="T:System.IComparable`1" />-Schnittstelle oder der <see cref="T:System.IComparable" />-Schnittstelle für Typ „T“ finden.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>Durchsucht <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> mithilfe des angegebenen Vergleichs vollständig nach einem Element und gibt den nullbasierten Index des Elements zurück.</summary>
      <param name="item">Das zu suchende Objekt. Dieser Wert kann für Verweistypen NULL sein.</param>
      <param name="comparer">Die Implementierung, die beim Vergleichen von Elementen verwendet werden soll, oder <see langword="null" />, wenn der Standardvergleich verwendet werden soll.</param>
      <returns>Der nullbasierte Index des Elements in <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, sofern das Element gefunden wird, andernfalls eine negative Zahl, die das bitweise Komplement des Indexes des nächsten Elements darstellt, das größer als <paramref name="item" /> ist.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> ist <see langword="null" />, und die Standardvergleicheigenschaft <see cref="P:System.Collections.Generic.Comparer`1.Default" /> kann keine Implementierung der generischen <see cref="T:System.IComparable`1" />-Schnittstelle oder der <see cref="T:System.IComparable" />-Schnittstelle für den Typ „T“ finden.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>Durchsucht den angegebenen Bereich von <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> mithilfe des angegebenen Vergleichs nach einem Element und gibt den nullbasierten Index des Elements zurück.</summary>
      <param name="index">Der nullbasierte Startindex des zu durchsuchenden Bereichs.</param>
      <param name="count">Die Länge des zu durchsuchenden Bereichs.</param>
      <param name="item">Das zu suchende Objekt. Dieser Wert kann für Verweistypen NULL sein.</param>
      <param name="comparer">Die Implementierung, die beim Vergleichen von Elementen verwendet werden soll, oder <see langword="null" />, wenn der Standardvergleich verwendet werden soll.</param>
      <returns>Der nullbasierte Index des Elements in <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, sofern das Element gefunden wird, andernfalls eine negative Zahl, die das bitweise Komplement des Indexes des nächsten Elements darstellt, das größer als <paramref name="item" /> ist.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ist kleiner als 0.

oder -

<paramref name="count" /> ist kleiner als 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> und <paramref name="count" /> geben keinen gültigen Bereich in der <see cref="T:System.Collections.Generic.List`1" /> an.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> ist <see langword="null" />, und die Standardvergleicheigenschaft <see cref="P:System.Collections.Generic.Comparer`1.Default" /> kann keine Implementierung der generischen <see cref="T:System.IComparable`1" />-Schnittstelle oder der <see cref="T:System.IComparable" />-Schnittstelle für den Typ „T“ finden.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Clear">
      <summary>Entfernt alle Elemente aus der unveränderlichen Liste.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)">
      <summary>Bestimmt, ob die unveränderliche Liste einen bestimmten Wert enthält.</summary>
      <param name="item">Das Objekt, das in der Liste gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn sich das Element in der Liste befindet, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})">
      <summary>Erstellt eine neue unveränderliche Liste aus der durch diesen Generator dargestellten Liste mithilfe der Konverterfunktion.</summary>
      <param name="converter">Die Konverterfunktion.</param>
      <typeparam name="TOutput">Der Typ der Ausgabe der Delegatkonverterfunktion.</typeparam>
      <returns>Eine neue unveränderliche Liste aus der Liste, die durch diesen Generator dargestellt wird.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])">
      <summary>Kopiert die gesamte unveränderliche Liste in ein kompatibles eindimensionales Array, wobei am Anfang des Zielarrays begonnen wird.</summary>
      <param name="array">Das eindimensionale Array, das als Ziel der aus der unveränderlichen Liste kopierten Elemente fungiert. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)">
      <summary>Kopiert die gesamte unveränderliche Liste in ein kompatibles eindimensionales Array, wobei am angegebenen Index im Zielarray begonnen wird.</summary>
      <param name="array">Das eindimensionale Array, das als Ziel der aus der unveränderlichen Liste kopierten Elemente fungiert. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex">Der nullbasierte Index im Array, ab dem kopiert wird.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Kopiert die gesamte unveränderliche Liste in ein kompatibles eindimensionales Array, wobei am angegebenen Index im Zielarray begonnen wird.</summary>
      <param name="index">Der nullbasierte Index in der unveränderlichen Quellliste, bei dem mit dem Kopieren begonnen wird.</param>
      <param name="array">Das eindimensionale Array, das als Ziel der aus der unveränderlichen Liste kopierten Elemente fungiert. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
      <param name="count">Die Anzahl der zu kopierenden Elemente.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Count">
      <summary>Ruft die Anzahl von Elementen in dieser unveränderlichen Liste ab.</summary>
      <returns>Die Anzahl von Elementen in der Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})">
      <summary>Bestimmt, ob die unveränderliche Liste Elemente enthält, die mit den vom angegebenen Prädikat definierten Bedingungen übereinstimmen.</summary>
      <param name="match">Der Delegat, der die Bedingungen für die Elemente definiert, nach denen gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn die unveränderliche Liste ein oder mehr Elemente enthält, die die durch das angegebene Prädikat definierten Bedingungen erfüllen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})">
      <summary>Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt das erste Vorkommen in der gesamten unveränderlichen Liste zurück.</summary>
      <param name="match">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns>Das erste Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, sofern vorhanden, andernfalls der Standardwert für den Typ <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})">
      <summary>Ruft alle Elemente ab, die die vom angegebenen Prädikat definierten Bedingungen erfüllen.</summary>
      <param name="match">Der Delegat, der die Bedingungen für die Elemente definiert, nach denen gesucht werden soll.</param>
      <returns>Eine unveränderliche Liste mit allen Elementen, die die durch das angegebene Prädikat angegebenen Bedingungen erfüllen, sofern gefunden, andernfalls eine leere unveränderliche Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der am angegebenen Index beginnt und die angegebene Anzahl von Elementen umfasst.</summary>
      <param name="startIndex">Der nullbasierte Startindex für die Suche.</param>
      <param name="count">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
      <param name="match">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns>Der nullbasierte Index des ersten Vorkommens eines Elements, das mit den durch <paramref name="match" /> definierten Bedingungen übereinstimmt, sofern gefunden; andernfalls -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der vom angegebenen Index bis zum letzten Element reicht.</summary>
      <param name="startIndex">Der nullbasierte Startindex für die Suche.</param>
      <param name="match">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns>Der nullbasierte Index des ersten Vorkommens eines Elements, das mit den durch <paramref name="match" /> definierten Bedingungen übereinstimmt, sofern gefunden; andernfalls -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})">
      <summary>Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt den nullbasierten Index des ersten Vorkommens in der gesamten unveränderlichen Liste zurück.</summary>
      <param name="match">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns>Der nullbasierte Index des ersten Vorkommens eines Elements, das mit den durch <paramref name="match" /> definierten Bedingungen übereinstimmt, sofern gefunden; andernfalls -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})">
      <summary>Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt das letzte Vorkommen in der gesamten unveränderlichen Liste zurück.</summary>
      <param name="match">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns>Das letzte Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, sofern vorhanden, andernfalls der Standardwert für den Typ <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt den nullbasierten Index des letzten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der die angegebene Anzahl von Elementen umfasst und am angegebenen Index endet.</summary>
      <param name="startIndex">Der nullbasierte Startindex für die Rückwärtssuche.</param>
      <param name="count">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
      <param name="match">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns>Der nullbasierte Index des letzten Vorkommnisses eines Elements, das mit den durch <paramref name="match" /> definierten Bedingungen übereinstimmt, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt den nullbasierten Index des letzten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der vom ersten Element bis zum angegebenen Index reicht.</summary>
      <param name="startIndex">Der nullbasierte Startindex für die Rückwärtssuche.</param>
      <param name="match">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns>Der nullbasierte Index des letzten Vorkommnisses eines Elements, das mit den durch <paramref name="match" /> definierten Bedingungen übereinstimmt, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})">
      <summary>Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt den nullbasierten Index des letzten Vorkommens in der gesamten unveränderlichen Liste zurück.</summary>
      <param name="match">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns>Der nullbasierte Index des letzten Vorkommnisses eines Elements, das mit den durch <paramref name="match" /> definierten Bedingungen übereinstimmt, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})">
      <summary>Führt die angegebene Aktion für jedes Element der Liste aus.</summary>
      <param name="action">Der Delegat, der für jedes Element der Liste ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns>Ein Enumerator, der zum Durchlaufen der Liste verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)">
      <summary>Erstellt eine flache Kopie eines Bereichs von Elementen in der unveränderlichen Quellliste.</summary>
      <param name="index">Der nullbasierte Index, an dem der Bereich beginnt.</param>
      <param name="count">Die Anzahl der Elemente im Bereich.</param>
      <returns>Eine flache Kopie eines Bereichs von Elementen in der unveränderlichen Quellliste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)">
      <summary>Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück.</summary>
      <param name="item">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <returns>Der nullbasierte Index des ersten Vorkommens von <paramref name="item" /> innerhalb des Bereichs von Elementen in der unveränderlichen Liste, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)">
      <summary>Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der sich vom angegebenen Index bis zum letzten Element erstreckt.</summary>
      <param name="item">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <param name="index">Der nullbasierte Startindex für die Suche. 0 (null) ist in einer leeren Liste gültig.</param>
      <returns>Der nullbasierte Index des ersten Vorkommens des Elements innerhalb des Bereichs von Elementen in der unveränderlichen Liste, der sich von <paramref name="index" /> bis zum letzten Element erstreckt, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary>Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der am angegebenen Index beginnt und die angegebene Anzahl von Elementen enthält.</summary>
      <param name="item">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <param name="index">Der nullbasierte Startindex für die Suche. 0 (null) ist in einer leeren Liste gültig.</param>
      <param name="count">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
      <returns>Der nullbasierte Index des ersten Vorkommens des Elements innerhalb des Bereichs von Elementen in der unveränderlichen Liste, der am <paramref name="index" /> beginnt und eine Anzahl von Elementen (<paramref name="count" />) enthält, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> zurück, der am angegebenen Index beginnt und die angegebene Anzahl von Elementen enthält.</summary>
      <param name="item">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <param name="index">Der nullbasierte Startindex für die Suche. 0 (null) ist in einer leeren Liste gültig.</param>
      <param name="count">Die Anzahl der zu suchenden Elemente.</param>
      <param name="equalityComparer">Der Wertevergleich, der zum Vergleichen von Elementen auf Gleichheit verwendet werden soll.</param>
      <returns>Der nullbasierte Index des ersten Vorkommens des Elements innerhalb des Bereichs von Elementen in der unveränderlichen Liste, der am <paramref name="index" /> beginnt und eine Anzahl von Elementen (<paramref name="count" />) enthält, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)">
      <summary>Fügt ein Element am angegebenen Index in die unveränderliche Liste ein.</summary>
      <param name="index">Der nullbasierte Index, an dem <paramref name="item" /> eingefügt werden soll.</param>
      <param name="item">Das Objekt, das in die unveränderliche Liste eingefügt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Fügt die Elemente einer Auflistung am angegebenen Index in die unveränderliche Liste ein.</summary>
      <param name="index">Der nullbasierte Index, an dem neue Elemente eingefügt werden sollen.</param>
      <param name="items">Die Auflistung, deren Elemente in die unveränderliche Liste eingefügt werden sollen. Die Auflistung an sich kann nicht <see langword="null" /> sein, sie kann jedoch Elemente enthalten, die NULL sind, wenn der Typ <c>T</c> einen Verweistyp darstellt.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)">
      <summary>Ruft den Wert für einen angegebenen Index in der Liste ab oder legt ihn fest.</summary>
      <param name="index">Der Index des abzurufenden oder festzulegenden Elements.</param>
      <returns>Der Wert am angegebenen Index.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ItemRef(System.Int32)">
      <summary>Ruft einen schreibgeschützten Verweis auf den Wert für einen angegebenen <paramref name="index" /> in der Liste ab.</summary>
      <param name="index">Der Index des gewünschten Elements.</param>
      <returns>Ein schreibgeschützter Verweis auf den Wert am angegebenen <paramref name="index" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)">
      <summary>Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des letzten Vorkommens innerhalb der gesamten unveränderlichen Liste zurück.</summary>
      <param name="item">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <returns>Der nullbasierte Index des letzten Vorkommens von <paramref name="item" /> in der gesamten unveränderlichen Liste, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary>Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des letzten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der sich vom ersten Element bis zum angegebenen Index erstreckt.</summary>
      <param name="item">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <param name="startIndex">Der nullbasierte Startindex für die Rückwärtssuche.</param>
      <returns>Der nullbasierte Index des letzten Vorkommens von <paramref name="item" /> innerhalb des Bereichs von Elementen in der unveränderlichen Liste, der sich vom ersten Element bis zum <paramref name="index" /> erstreckt, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des letzten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der die angegebene Anzahl von Elementen enthält und am angegebenen Index endet.</summary>
      <param name="item">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <param name="startIndex">Der nullbasierte Startindex für die Rückwärtssuche.</param>
      <param name="count">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
      <returns>Der nullbasierte Index des letzten Vorkommens von <paramref name="item" /> innerhalb des Bereichs von Elementen in der unveränderlichen Liste, der eine Anzahl von Elementen (<paramref name="count" />) enthält und am <paramref name="index" /> endet, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des letzten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der die angegebene Anzahl von Elementen enthält und am angegebenen Index endet.</summary>
      <param name="item">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <param name="startIndex">Der nullbasierte Startindex für die Suche. 0 (null) ist in einer leeren Liste gültig.</param>
      <param name="count">Die Anzahl der zu suchenden Elemente.</param>
      <param name="equalityComparer">Der Wertevergleich, der zum Vergleichen von Elementen auf Gleichheit verwendet werden soll.</param>
      <returns>Der nullbasierte Index des ersten Vorkommens des Elements innerhalb des Bereichs von Elementen in der unveränderlichen Liste, der am <paramref name="index" /> beginnt und eine Anzahl von Elementen (<paramref name="count" />) enthält, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)">
      <summary>Entfernt das erste Vorkommen eines bestimmten Objekts aus der unveränderlichen Liste.</summary>
      <param name="item">Das Objekt, das aus der Liste entfernt werden soll.</param>
      <returns>
        <see langword="true" />, wenn das Element erfolgreich aus der Liste entfernt wurde, andernfalls <see langword="false" />. Diese Methode gibt auch dann <see langword="false" /> zurück, wenn das Element nicht in der Liste gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})">
      <summary>Entfernt alle Elemente, die die vom angegebenen Prädikat definierten Bedingungen erfüllen.</summary>
      <param name="match">Der Delegat, der die Bedingungen für die Elemente definiert, die entfernt werden sollen.</param>
      <returns>Die Anzahl der aus der unveränderlichen Liste entfernten Elemente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)">
      <summary>Entfernt das Element am angegebenen Index aus der unveränderlichen Liste.</summary>
      <param name="index">Der nullbasierte Index des Elements, das aus der Liste entfernt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse">
      <summary>Kehrt die Reihenfolge der Elemente in der gesamten unveränderlichen Liste um.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)">
      <summary>Kehrt die Reihenfolge der Elemente im angegebenen Bereich der unveränderlichen Liste um.</summary>
      <param name="index">Der nullbasierte Startindex des Bereichs, in dem die Reihenfolge umgekehrt werden soll.</param>
      <param name="count">Die Anzahl der Elemente im Bereich, in dem die Reihenfolge umgekehrt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort">
      <summary>Sortiert die Elemente in der gesamten unveränderlichen Liste mithilfe des Standardvergleichs.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Sortiert die Elemente in der gesamten unveränderlichen Liste mithilfe des angegebenen Vergleichs.</summary>
      <param name="comparer">Die Implementierung, die beim Vergleichen von Elementen verwendet werden soll, oder <see langword="null" />, wenn der Standardvergleich (<see cref="P:System.Collections.Generic.Comparer`1.Default" />) verwendet werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})">
      <summary>Sortiert die Elemente in der gesamten unveränderlichen Liste mithilfe des angegebenen Vergleichsobjekts.</summary>
      <param name="comparison">Das Objekt, das beim Vergleichen von Elementen verwendet werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Sortiert die Elemente in einem Bereich von Elementen in der unveränderlichen Liste mithilfe des angegebenen Vergleichs.</summary>
      <param name="index">Der nullbasierte Startindex des zu sortierenden Bereichs.</param>
      <param name="count">Die Länge des zu sortierenden Bereichs.</param>
      <param name="comparer">Die Implementierung, die beim Vergleichen von Elementen verwendet werden soll, oder <see langword="null" />, wenn der Standardvergleich (<see cref="P:System.Collections.Generic.Comparer`1.Default" />) verwendet werden soll.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob diese Instanz schreibgeschützt ist.</summary>
      <returns>Immer <c>false</c>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns>Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Kopiert die Elemente der Liste in ein Array, wobei an einem bestimmten Arrayindex begonnen wird.</summary>
      <param name="array">Das eindimensionale Array, das das Ziel der aus der Liste kopierten Elemente ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>Ruft einen Wert ab, der angibt, ob der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist.</summary>
      <returns>
        <see langword="true" />, wenn der Zugriff auf das <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary>Ruft ein Objekt ab, mit dem der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</summary>
      <returns>Ein Objekt, mit dem der Zugriff auf die <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns>Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Add(System.Object)">
      <summary>Fügt der Liste ein Element hinzu.</summary>
      <param name="value">Das Objekt, das der Liste hinzugefügt werden soll.</param>
      <returns>Die Position, an der das neue Element eingefügt wurde, oder -1, um anzugeben, dass das Element nicht in die Auflistung eingefügt wurde.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Clear">
      <summary>Entfernt alle Elemente aus der Liste.</summary>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Contains(System.Object)">
      <summary>Bestimmt, ob die Liste einen bestimmten Wert enthält.</summary>
      <param name="value">Das Objekt, das in der Liste gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn <see cref="T:System.Object" /> in der Liste vorhanden ist, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IndexOf(System.Object)">
      <summary>Bestimmt den Index eines bestimmten Elements in der Liste.</summary>
      <param name="value">Das Objekt, das in der Liste gesucht werden soll.</param>
      <returns>Der Index von <paramref name="value" />, wenn das Element in der Liste gefunden wird, andernfalls -1.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Fügt ein Element am angegebenen Index in die Liste ein.</summary>
      <param name="index">Der nullbasierte Index, an dem <paramref name="value" /> eingefügt werden soll.</param>
      <param name="value">Das Objekt, das in die Liste eingefügt werden soll.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsFixedSize">
      <summary>Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Collections.IList" /> eine feste Größe hat.</summary>
      <returns>
        <see langword="true" />, wenn das <see cref="T:System.Collections.IList" /> eine feste Größe aufweist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist.</summary>
      <returns>
        <see langword="true" />, wenn das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Item(System.Int32)">
      <summary>Ruft die <see cref="T:System.Object" />-Klasse am angegebenen Index ab oder legt diese fest.</summary>
      <param name="index">Der Index.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Remove(System.Object)">
      <summary>Entfernt das erste Vorkommen eines bestimmten Objekts aus der Liste.</summary>
      <param name="value">Das Objekt, das aus der Liste entfernt werden soll.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable">
      <summary>Erstellt eine unveränderliche Liste basierend auf dem Inhalt dieser Instanz.</summary>
      <returns>Eine unveränderliche Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})">
      <summary>Bestimmt, ob jedes Element in der unveränderlichen Liste die vom angegebenen Prädikat definierten Bedingungen erfüllt.</summary>
      <param name="match">Der Delegat, der die Bedingungen definiert, auf die die Elemente geprüft werden sollen.</param>
      <returns>
        <see langword="true" />, wenn jedes Element in der unveränderlichen Liste die vom angegebenen Prädikat definierten Bedingungen erfüllt; andernfalls <see langword="false" />. Wenn die Liste über keine Elemente verfügt, ist der Rückgabewert <see langword="true" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Clear">
      <summary>Entfernt alle Elemente aus der unveränderlichen Liste.</summary>
      <returns>Eine leere Liste, die die gleiche Sortierung oder ungeordnete Semantik dieser Instanz beibehält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Contains(`0)">
      <summary>Ermittelt, ob diese unveränderliche Liste den angegebenen Wert enthält.</summary>
      <param name="value">Der zu suchende Wert.</param>
      <returns>
        <see langword="true" />, wenn die Liste den angegebenen Wert enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})">
      <summary>Konvertiert die Elemente in der aktuellen unveränderlichen Liste in einen anderen Typ und gibt eine Liste der konvertierten Elemente zurück.</summary>
      <param name="converter">Ein Delegat, der jedes Element von einem Typ in einen anderen Typ konvertiert.</param>
      <typeparam name="TOutput">Der Typ der Elemente des Zielarrays.</typeparam>
      <returns>Eine Liste des Zieltyps, die die konvertierten Elemente aus der aktuellen <see cref="T:System.Collections.Immutable.ImmutableList`1" />-Klasse enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])">
      <summary>Kopiert die gesamte unveränderliche Liste in ein kompatibles eindimensionales Array, wobei am Anfang des Zielarrays begonnen wird.</summary>
      <param name="array">Das eindimensionale Array, das als Ziel der aus der unveränderlichen Liste kopierten Elemente fungiert. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)">
      <summary>Kopiert die gesamte unveränderliche Liste in ein kompatibles eindimensionales Array, wobei am angegebenen Index im Zielarray begonnen wird.</summary>
      <param name="array">Das eindimensionale Array, das als Ziel der aus der unveränderlichen Liste kopierten Elemente fungiert. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Kopiert einen Bereich von Elementen aus der unveränderlichen Liste in ein kompatibles eindimensionales Array, beginnend am angegebenen Index im Zielarray.</summary>
      <param name="index">Der nullbasierte Index in der unveränderlichen Quellliste, bei dem mit dem Kopieren begonnen wird.</param>
      <param name="array">Das eindimensionale Array, das als Ziel der aus der unveränderlichen Liste kopierten Elemente fungiert. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex">Der nullbasierte Index im Array, ab dem kopiert wird.</param>
      <param name="count">Die Anzahl der zu kopierenden Elemente.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Count">
      <summary>Ruft die Anzahl der Elemente ab, die in der Liste enthalten sind.</summary>
      <returns>Die Anzahl von Elementen in der Liste.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableList`1.Empty">
      <summary>Ruft einen leeren Satz mit dem Standardvergleich für die Sortierung ab.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Enumerator">
      <summary>Listet den Inhalt einer binären Struktur auf.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.Current">
      <summary>Ruft das Element an der aktuellen Position des Enumerators ab.</summary>
      <returns>Ruft das Element an der aktuellen Position des Enumerators ab.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Dispose">
      <summary>Gibt alle von der aktuellen Instanz der <see cref="T:System.Collections.Immutable.ImmutableList`1.Enumerator" />-Klasse verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.MoveNext">
      <summary>Setzt den Enumerator auf das nächste Element der unveränderlichen Liste.</summary>
      <returns>
        <see langword="true" />, wenn der Enumerator erfolgreich auf das nächste Element gesetzt wurde, <see langword="false" />, wenn der Enumerator das Ende der Liste überschritten hat.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Reset">
      <summary>Setzt den Enumerator auf seine anfängliche Position vor dem ersten Element in der unveränderlichen Liste.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Das aktuelle Element.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})">
      <summary>Bestimmt, ob die unveränderliche Liste Elemente enthält, die mit den vom angegebenen Prädikat definierten Bedingungen übereinstimmen.</summary>
      <param name="match">Der Delegat, der die Bedingungen für die Elemente definiert, nach denen gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn die unveränderliche Liste ein oder mehr Elemente enthält, die die durch das angegebene Prädikat definierten Bedingungen erfüllen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})">
      <summary>Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt das erste Vorkommen in der gesamten unveränderlichen Liste zurück.</summary>
      <param name="match">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns>Das erste Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, sofern vorhanden, andernfalls der Standardwert für den Typ <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})">
      <summary>Ruft alle Elemente ab, die die vom angegebenen Prädikat definierten Bedingungen erfüllen.</summary>
      <param name="match">Der Delegat, der die Bedingungen für die Elemente definiert, nach denen gesucht werden soll.</param>
      <returns>Eine unveränderliche Liste mit allen Elementen, die die durch das angegebene Prädikat angegebenen Bedingungen erfüllen, sofern gefunden, andernfalls eine leere Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der am angegebenen Index beginnt und die angegebene Anzahl von Elementen umfasst.</summary>
      <param name="startIndex">Der nullbasierte Startindex für die Suche.</param>
      <param name="count">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
      <param name="match">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns>Der nullbasierte Index des ersten Vorkommnisses eines Elements, das mit den durch die Übereinstimmung definierten Bedingungen übereinstimmt, sofern gefunden, andernfalls ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der vom angegebenen Index bis zum letzten Element reicht.</summary>
      <param name="startIndex">Der nullbasierte Startindex für die Suche.</param>
      <param name="match">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns>Der nullbasierte Index des ersten Vorkommnisses eines Elements, das mit den durch die Übereinstimmung definierten Bedingungen übereinstimmt, sofern gefunden, andernfalls ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})">
      <summary>Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt den nullbasierten Index des ersten Vorkommens in der gesamten unveränderlichen Liste zurück.</summary>
      <param name="match">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns>Der nullbasierte Index des ersten Vorkommnisses eines Elements, das mit den durch die Übereinstimmung definierten Bedingungen übereinstimmt, sofern gefunden, andernfalls ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})">
      <summary>Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt das letzte Vorkommen in der gesamten unveränderlichen Liste zurück.</summary>
      <param name="match">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns>Das letzte Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, sofern vorhanden, andernfalls der Standardwert für den Typ <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt den nullbasierten Index des letzten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der die angegebene Anzahl von Elementen umfasst und am angegebenen Index endet.</summary>
      <param name="startIndex">Der nullbasierte Startindex für die Rückwärtssuche.</param>
      <param name="count">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
      <param name="match">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns>Der nullbasierte Index des letzten Vorkommnisses eines Elements, das mit den durch <paramref name="match" /> definierten Bedingungen übereinstimmt, sofern gefunden, andernfalls ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt den nullbasierten Index des letzten Vorkommens innerhalb des Bereichs von Elementen in der unveränderlichen Liste zurück, der vom ersten Element bis zum angegebenen Index reicht.</summary>
      <param name="startIndex">Der nullbasierte Startindex für die Rückwärtssuche.</param>
      <param name="match">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns>Der nullbasierte Index des letzten Vorkommnisses eines Elements, das mit den durch <paramref name="match" /> definierten Bedingungen übereinstimmt, sofern gefunden, andernfalls ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})">
      <summary>Sucht nach einem Element, das die durch das angegebene Prädikat definierten Bedingungen erfüllt, und gibt den nullbasierten Index des letzten Vorkommens in der gesamten unveränderlichen Liste zurück.</summary>
      <param name="match">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <returns>Der nullbasierte Index des letzten Vorkommnisses eines Elements, das mit den durch <paramref name="match" /> definierten Bedingungen übereinstimmt, sofern gefunden, andernfalls ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})">
      <summary>Führt die angegebene Aktion für jedes Element der unveränderlichen Liste aus.</summary>
      <param name="action">Der Delegat, der für jedes Element der unveränderlichen Liste ausgeführt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die unveränderliche Liste durchläuft.</summary>
      <returns>Ein Enumerator, mit dem die Elemente in der unveränderlichen Liste durchlaufen werden können.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)">
      <summary>Erstellt eine flache Kopie eines Bereichs von Elementen in der unveränderlichen Quellliste.</summary>
      <param name="index">Der nullbasierte Index, an dem der Bereich beginnt.</param>
      <param name="count">Die Anzahl der Elemente im Bereich.</param>
      <returns>Eine flache Kopie eines Bereichs von Elementen in der unveränderlichen Quellliste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)">
      <summary>Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des ersten Vorkommens innerhalb der gesamten unveränderlichen Liste zurück.</summary>
      <param name="value">Das Objekt, das in der unveränderlichen Liste gesucht werden soll. Der Wert kann für Verweistypen <c>NULL</c> sein.</param>
      <returns>Der nullbasierte Index des ersten Vorkommens von <paramref name="value" /> in der gesamten unveränderlichen Liste, andernfalls ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des ersten Vorkommens innerhalb des Bereichs von Elementen in der Liste zurück, der am angegebenen Index beginnt und die angegebene Anzahl von Elementen enthält.</summary>
      <param name="item">Das in der Liste zu suchende Objekt. Der Wert kann für Verweistypen null sein.</param>
      <param name="index">Der nullbasierte Startindex für die Suche. 0 (null) ist in einer leeren Liste gültig.</param>
      <param name="count">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich für die Suche.</param>
      <returns>Der nullbasierte Index des ersten Vorkommens des Elements innerhalb des Bereichs von Elementen in der Liste, die am Index beginnt und eine Anzahl von Elementen enthält, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)">
      <summary>Fügt das angegebene Objekt am angegebenen Index in die unveränderliche Liste ein.</summary>
      <param name="index">Der nullbasierte Index, an dem das Objekt eingefügt werden soll.</param>
      <param name="item">Das einzufügende Objekt.</param>
      <returns>Die neue unveränderliche Liste, nachdem das Objekt eingefügt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Fügt die Elemente einer Auflistung am angegebenen Index in die unveränderliche Liste ein.</summary>
      <param name="index">Der nullbasierte Index, an dem die Elemente eingefügt werden sollen.</param>
      <param name="items">Die Auflistung, deren Elemente eingefügt werden sollen.</param>
      <returns>Die neue unveränderliche Liste, nachdem die Elemente eingefügt wurden.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.IsEmpty">
      <summary>Ruft einen Wert ab, der angibt, ob diese Liste leer ist.</summary>
      <returns>
        <see langword="true" />, wenn die Liste leer ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Item(System.Int32)">
      <summary>Ruft das Element am angegebenen Index der Liste ab.</summary>
      <param name="index">Der Index des abzurufenden Elements.</param>
      <returns>Das Element am angegebenen Index.</returns>
      <exception cref="T:System.IndexOutOfRangeException">Bei einem GET-Vorgang ist <paramref name="index" /> negativ oder kleiner als <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ItemRef(System.Int32)">
      <summary>Ruft einen schreibgeschützten Verweis auf das Element der Gruppe am angegebenen <paramref name="index" /> ab.</summary>
      <param name="index">Der nullbasierte Index des Elements in der Gruppe, die zurückgegeben werden soll.</param>
      <returns>Ein schreibgeschützter Verweis auf das Element an der angegebenen Position.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> ist negativ oder nicht kleiner als <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Sucht nach dem angegebenen Objekt und gibt den nullbasierten Index des letzten Vorkommens innerhalb des Bereichs von Elementen in der Liste zurück, die die angegebene Anzahl von Elementen enthält und am angegebenen Index endet.</summary>
      <param name="item">Das Objekt, das in der Liste gesucht werden soll. Der Wert kann für Verweistypen NULL sein.</param>
      <param name="index">Der nullbasierte Startindex für die Rückwärtssuche.</param>
      <param name="count">Die Anzahl der Elemente im zu durchsuchenden Abschnitt.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich für die Suche.</param>
      <returns>Der nullbasierte Index des letzten Vorkommens des Elements innerhalb des Bereichs von Elementen in der Liste, die die Anzahl von Elementen enthält und am Index endet, sofern gefunden, andernfalls –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)">
      <summary>Entfernt das erste Vorkommen des angegebenen Objekts aus dieser unveränderlichen Liste.</summary>
      <param name="value">Das zu entfernende Objekt.</param>
      <returns>Eine neue Liste mit entferntem Objekt, oder diese Liste, wenn das angegebene Objekt nicht in dieser Liste enthalten ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Entfernt das erste Vorkommen des Objekts, das mit dem angegebenen Wert in dieser unveränderlichen Liste übereinstimmt.</summary>
      <param name="value">Der Wert des Elements, das aus der Liste entfernt wird.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich für die Suche.</param>
      <returns>Eine neue Liste mit entferntem Objekt, oder diese Liste, wenn das angegebene Objekt nicht in dieser Liste enthalten ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary>Entfernt alle Elemente, die die vom angegebenen Prädikat definierten Bedingungen erfüllen.</summary>
      <param name="match">Der Delegat, der die Bedingungen für die Elemente definiert, die entfernt werden sollen.</param>
      <returns>Eine neue Liste mit den entfernten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)">
      <summary>Entfernt das Element am angegebenen Index.</summary>
      <param name="index">Der nullbasierte Index des zu entfernenden Elements.</param>
      <returns>Eine neue Liste, aus der das Element entfernt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Entfernt einen Bereich von Elementen aus dieser unveränderlichen Liste.</summary>
      <param name="items">Die Auflistung, deren Elemente entfernt werden sollen, wenn in dieser Liste Übereinstimmungen gefunden werden.</param>
      <returns>Eine neue Liste mit den entfernten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Entfernt die angegebenen Werte aus dieser Liste.</summary>
      <param name="items">Die zu entfernenden Elemente, wenn Übereinstimmungen in dieser Liste gefunden werden.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich für die Suche.</param>
      <returns>Eine neue Liste mit den entfernten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Entfernt einen Bereich von Elementen, beginnend beim angegebenen Index und mit der angegebenen Anzahl von Elementen, aus dieser unveränderlichen Liste.</summary>
      <param name="index">Der Startindex, beim dem mit dem Entfernen begonnen werden soll.</param>
      <param name="count">Die Anzahl der zu entfernenden Elemente.</param>
      <returns>Eine neue Liste mit den entfernten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)">
      <summary>Ersetzt das angegebene Element in der unveränderlichen Liste durch ein neues Element.</summary>
      <param name="oldValue">Das zu ersetzende Element.</param>
      <param name="newValue">Das zu Element, das durch <paramref name="oldValue" /> ersetzt werden soll.</param>
      <returns>Die neue Liste mit dem ersetzten Element, auch wenn es dem alten Element entspricht.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> ist nicht in der unveränderlichen Liste vorhanden.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Ersetzt das angegebene Element in der unveränderlichen Liste durch ein neues Element.</summary>
      <param name="oldValue">Das in der Liste zu ersetzende Element.</param>
      <param name="newValue">Das zu Element, das durch <paramref name="oldValue" /> ersetzt werden soll.</param>
      <param name="equalityComparer">Der Vergleich. der für die Gleichheitsprüfung verwendet werden soll.</param>
      <returns>Eine neue Liste mit dem ersetzten Objekt, oder diese Liste, wenn das angegebene Objekt nicht in dieser Liste enthalten ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse">
      <summary>Kehrt die Reihenfolge der Elemente in der gesamten unveränderlichen Liste um.</summary>
      <returns>Die umgekehrte Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)">
      <summary>Kehrt die Reihenfolge der Elemente im angegebenen Bereich der unveränderlichen Liste um.</summary>
      <param name="index">Der nullbasierte Startindex des Bereichs, in dem die Reihenfolge umgekehrt werden soll.</param>
      <param name="count">Die Anzahl der Elemente im Bereich, in dem die Reihenfolge umgekehrt werden soll.</param>
      <returns>Die umgekehrte Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)">
      <summary>Ersetzt ein Element an einer bestimmten Position in der unveränderliche Liste mit dem angegebenen Element.</summary>
      <param name="index">Die Position des zu ersetzenden Elements in der Liste.</param>
      <param name="value">Das durch ein Element zu ersetzende alte Element.</param>
      <returns>Die neue Liste mit dem ersetzten Element, auch wenn es dem alten Element an dieser Position entspricht.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort">
      <summary>Sortiert die Elemente in der gesamten unveränderlichen Liste mithilfe des Standardvergleichs.</summary>
      <returns>Die sortierte Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Sortiert die Elemente in der gesamten unveränderlichen Liste mithilfe des angegebenen Vergleichs.</summary>
      <param name="comparer">Die Implementierung, die beim Vergleichen von Elementen verwendet werden soll, oder <see langword="null" />, wenn der Standardvergleich (<see cref="P:System.Collections.Generic.Comparer`1.Default" />) verwendet werden soll.</param>
      <returns>Die sortierte Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})">
      <summary>Sortiert die Elemente in der gesamten unveränderlichen Liste mithilfe des angegebenen Vergleichs.</summary>
      <param name="comparison">Der Delegat, der beim Vergleich von Elementen verwendet werden soll.</param>
      <returns>Die sortierte Liste.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Sortiert einen Bereich von Elementen in der unveränderlichen Liste mithilfe des angegebenen Vergleichs.</summary>
      <param name="index">Der nullbasierte Startindex des zu sortierenden Bereichs.</param>
      <param name="count">Die Länge des zu sortierenden Bereichs.</param>
      <param name="comparer">Die Implementierung, die beim Vergleichen von Elementen verwendet werden soll, oder <see langword="null" />, wenn der Standardvergleich (<see cref="P:System.Collections.Generic.Comparer`1.Default" />) verwendet werden soll.</param>
      <returns>Die sortierte Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Fügt der unveränderlichen Liste das angegebene Element hinzu.</summary>
      <param name="item">Das Element, das hinzugefügt werden soll.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Entfernt alle Elemente aus der unveränderlichen Liste.</summary>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist.</summary>
      <returns>
        <see langword="true" />, wenn das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Entfernt das erste Vorkommen eines bestimmten Objekts aus der unveränderlichen Liste.</summary>
      <param name="item">Das zu entfernende Objekt.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="item" /> erfolgreich aus der Liste entfernt wurde, andernfalls <see langword="false" />. Diese Methode gibt auch dann <see langword="false" /> zurück, wenn <paramref name="item" /> nicht in der ursprünglichen Liste gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die unveränderliche Liste durchläuft.</summary>
      <returns>Ein Enumerator, der zum Durchlaufen der Liste verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Fügt ein Objekt am angegebenen Index in die unveränderliche Liste ein.</summary>
      <param name="index">Der nullbasierte Index, an dem <paramref name="item" /> eingefügt werden soll.</param>
      <param name="item">Das einzufügende Objekt.</param>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Ruft den Wert am angegebenen Index ab oder legt diesen fest.</summary>
      <param name="index" />
      <exception cref="T:System.IndexOutOfRangeException">Wird vom Getter ausgelöst, wenn <paramref name="index" /> negativ oder weniger als <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" /> ist.</exception>
      <exception cref="T:System.NotSupportedException">Wird immer vom Setter ausgelöst.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Entfernt den Wert am angegebenen Index.</summary>
      <param name="index">Der nullbasierte Index des zu entfernenden Elements.</param>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Kopiert die gesamte unveränderliche Liste in ein kompatibles eindimensionales Array, beginnend am angegebenen Index des Arrays.</summary>
      <param name="array">Das eindimensionale Array, bei dem es sich um das Ziel der aus der unveränderlichen Liste kopierten Elemente handelt.</param>
      <param name="arrayIndex">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized">
      <summary>Siehe Schnittstelle <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot">
      <summary>Siehe <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die unveränderliche Liste durchläuft.</summary>
      <returns>Ein Enumerator, der zum Durchlaufen der Liste verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)">
      <summary>Fügt der unveränderlichen Liste ein Element hinzu.</summary>
      <param name="value">Das Objekt, das der Liste hinzugefügt werden soll.</param>
      <returns>Die Position, an der das neue Element eingefügt wurde, oder -1, um anzugeben, dass das Element nicht in die Liste eingefügt wurde.</returns>
      <exception cref="T:System.NotSupportedException">Wird immer ausgelöst.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear">
      <summary>Entfernt alle Elemente aus der unveränderlichen Liste.</summary>
      <exception cref="T:System.NotSupportedException">Wird immer ausgelöst.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)">
      <summary>Bestimmt, ob die unveränderliche Liste einen bestimmten Wert enthält.</summary>
      <param name="value">Das Objekt, das in der Liste gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn das Objekt in der Liste gefunden wurde, andernfalls <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Bestimmt den Index eines bestimmten Elements in der unveränderlichen Liste.</summary>
      <param name="value">Das Objekt, das in der Liste gesucht werden soll.</param>
      <returns>Der Index von <paramref name="value" />, wenn das Element in der Liste gefunden wird, andernfalls -1.</returns>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Fügt ein Element am angegebenen Index in die unveränderliche Liste ein.</summary>
      <param name="index">Der nullbasierte Index, an dem <paramref name="value" /> eingefügt werden soll.</param>
      <param name="value">Das Objekt, das in die Liste eingefügt werden soll.</param>
      <exception cref="T:System.NotSupportedException">Wird immer ausgelöst.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize">
      <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.IList" /> eine feste Größe aufweist.</summary>
      <returns>
        <see langword="true" />, wenn das <see cref="T:System.Collections.IList" /> eine feste Größe aufweist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist.</summary>
      <returns>
        <see langword="true" />, wenn das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)">
      <summary>Ruft die <see cref="T:System.Object" />-Klasse am angegebenen Index ab oder legt diese fest.</summary>
      <param name="index">Der Index.</param>
      <returns>Der Wert am angegebenen Index.</returns>
      <exception cref="T:System.IndexOutOfRangeException">Wird vom Getter ausgelöst, wenn <paramref name="index" /> negativ oder weniger als <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" /> ist.</exception>
      <exception cref="T:System.NotSupportedException">Wird immer vom Setter ausgelöst.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)">
      <summary>Entfernt das erste Vorkommen eines bestimmten Objekts aus der unveränderlichen Liste.</summary>
      <param name="value">Das Objekt, das aus der Liste entfernt werden soll.</param>
      <exception cref="T:System.NotSupportedException">Wird immer ausgelöst.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Entfernt das Element am angegebenen Index aus der unveränderlichen Liste.</summary>
      <param name="index">Der nullbasierte Index des zu entfernenden Elements.</param>
      <exception cref="T:System.NotSupportedException">Wird immer ausgelöst.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary>Fügt dieser unveränderlichen Liste den angegebenen Wert hinzu.</summary>
      <param name="value">Der hinzuzufügende Wert.</param>
      <returns>Eine neue Liste, der das Element hinzugefügt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Fügt die angegebenen Werte dieser unveränderliche Liste hinzu.</summary>
      <param name="items">Die hinzuzufügenden Werte.</param>
      <returns>Eine neue Liste, der die Elemente hinzugefügt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary>Ruft eine leere Liste ab, die dieselbe Sortierungs- und Reihenfolgensematik wie diese Instanz besitzt.</summary>
      <returns>Eine leere Liste, die dieselbe Sortierungs- und Reihenfolgensemantik wie diese Instanz besitzt.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary>Fügt das angegebene Element am angegebenen Index in die unveränderliche Liste ein.</summary>
      <param name="index">Der Index, an dem der Wert eingefügt werden soll.</param>
      <param name="item">Das einzufügende Element.</param>
      <returns>Eine neue unveränderliche Liste, die das angegebene Element enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Fügt die angegebenen Elemente am angegebenen Index in die unveränderliche Liste ein.</summary>
      <param name="index">Der Index, an dem die Elemente eingefügt werden sollen.</param>
      <param name="items">Die einzufügenden Elemente.</param>
      <returns>Eine neue unveränderliche Liste, die die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Entfernt das Element mit dem angegebenen Wert aus der Liste.</summary>
      <param name="value">Der Wert des Elements, das aus der Liste entfernt wird.</param>
      <param name="equalityComparer">Der zu verwendende Vergleich zum Vergleichen von Elementen auf Gleichheit.</param>
      <returns>Ein neues <see cref="T:System.Collections.Immutable.ImmutableList`1" />-Objekt, aus dem das angegebenen Element entfernt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary>Entfernt alle Elemente, die die vom angegebenen Prädikat definierten Bedingungen erfüllen.</summary>
      <param name="match">Der Delegat, der die Bedingungen für die Elemente definiert, die entfernt werden sollen.</param>
      <returns>Eine neue unveränderlichen Liste, aus der die Elemente entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary>Entfernt das Element am angegebenen Index der unveränderlichen Liste.</summary>
      <param name="index">Der Index des zu entfernenden Elements.</param>
      <returns>Eine neue Liste, aus der das Element entfernt wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Entfernt einen Bereich von Elementen aus dieser unveränderliche Liste, die die angegebenen Elementen entsprechen.</summary>
      <param name="items">Der Bereich von Elementen, die aus der Liste entfernt werden sollen, falls gefunden.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich zum Vergleichen von Elementen.</param>
      <returns>Eine unveränderliche Liste, aus der die Elemente entfernt wurden.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> oder <paramref name="equalityComparer" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary>Entfernt die angegebene Anzahl von Elementen an der angegebenen Position aus dieser Liste.</summary>
      <param name="index">Der Startindex für den Bereich der zu entfernenden Elemente.</param>
      <param name="count">Die Anzahl der zu entfernenden Elemente.</param>
      <returns>Eine neue Liste mit den entfernten Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Ersetzt ein Element in der Liste durch das angegebene Element.</summary>
      <param name="oldValue">Das zu ersetzende Element.</param>
      <param name="newValue">Das durch ein Element zu ersetzende alte Element.</param>
      <param name="equalityComparer">Der Gleichheitsvergleich für die Suche.</param>
      <returns>Die neue Liste.</returns>
      <exception cref="T:System.ArgumentException">Wird ausgelöst, wenn der alte Wert nicht in der Liste vorhanden ist.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary>Ersetzt ein Element an einer bestimmten Position in der Liste durch das angegebene Element.</summary>
      <param name="index">Die Position des zu ersetzenden Elements in der Liste.</param>
      <param name="value">Das durch ein Element zu ersetzende alte Element.</param>
      <returns>Die neue Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ToBuilder">
      <summary>Erstellt eine Liste mit dem gleichen Inhalt der Liste und kann über mehrere Vorgänge mithilfe von Standardschnittstellen effizient verändert werden kann.</summary>
      <returns>Die erstellte Liste mit dem gleichen Inhalt wie diese Liste.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})">
      <summary>Bestimmt, ob jedes Element in der unveränderlichen Liste die vom angegebenen Prädikat definierten Bedingungen erfüllt.</summary>
      <param name="match">Der Delegat, der die Bedingungen definiert, auf die die Elemente geprüft werden sollen.</param>
      <returns>
        <see langword="true" />, wenn jedes Element in der unveränderlichen Liste die vom angegebenen Prädikat definierten Bedingungen erfüllt; andernfalls <see langword="false" />. Wenn die Liste über keine Elemente verfügt, ist der Rückgabewert <see langword="true" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue">
      <summary>Stellt eine Reihe von Initialisierungsmethoden für Instanzen der <see cref="T:System.Collections.Immutable.ImmutableQueue`1" /> Klasse bereit.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1">
      <summary>Erstellt eine leere unveränderliche Warteschlange.</summary>
      <typeparam name="T">Der Typ der in der unveränderlichen Warteschlange zu speichernden Elemente.</typeparam>
      <returns>Eine leere unveränderliche Warteschlange.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0)">
      <summary>Erstellt eine neue unveränderliche Warteschlange, die das angegebene Element enthält.</summary>
      <param name="item">Das Element, mit dem die Warteschlange vorab aufgefüllt wird.</param>
      <typeparam name="T">Der Typ der Elemente in der unveränderlichen Warteschlange.</typeparam>
      <returns>Eine neue unveränderliche Warteschlange, die das angegebene Element enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0[])">
      <summary>Erstellt eine neue unveränderliche Warteschlange, die das angegebene Array von Elementen enthält.</summary>
      <param name="items">Ein Array, das die Elemente enthält, um die Warteschlange vorab aufzufüllen.</param>
      <typeparam name="T">Der Typ der Elemente in der unveränderlichen Warteschlange.</typeparam>
      <returns>Eine neue unveränderliche Warteschlange, die die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Erstellt eine neue unveränderliche Warteschlange, die die angegebenen Elemente enthält.</summary>
      <param name="items">Das zur Warteschlange hinzuzufügende Element, bevor die Unveränderlichkeit angewendet wird.</param>
      <typeparam name="T">Der Typ der Elemente in der Warteschlange.</typeparam>
      <returns>Eine neue unveränderliche Warteschlange, die die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Dequeue``1(System.Collections.Immutable.IImmutableQueue{``0},``0@)">
      <summary>Entfernt das Element am Anfang der unveränderlichen Warteschlange und gibt die neue Warteschlange zurück.</summary>
      <param name="queue">Die Warteschlange, aus der das Element entfernt werden soll.</param>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie das Element vom Anfang der Warteschlange.</param>
      <typeparam name="T">Der Typ der Elemente in der unveränderlichen Warteschlange.</typeparam>
      <returns>Die neue Warteschlange mit dem entfernten Element.</returns>
      <exception cref="T:System.InvalidOperationException">Der Stapel ist leer.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1">
      <summary>Stellt eine unveränderliche Warteschlange dar.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="T">Der Typ der Elemente in der Warteschlange.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Clear">
      <summary>Entfernt alle Objekte aus der unveränderlichen Warteschlange.</summary>
      <returns>Die leere unveränderliche Warteschlange.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue">
      <summary>Entfernt das Element am Anfang der unveränderlichen Warteschlange und gibt die neue Warteschlange zurück.</summary>
      <returns>Die neue unveränderliche Warteschlange; nie <c>NULL</c>.</returns>
      <exception cref="T:System.InvalidOperationException">Die Warteschlange ist leer.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)">
      <summary>Entfernt das Element am Anfang der unveränderlichen Warteschlange und gibt die neue Warteschlange zurück.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie das Element vom Anfang der Warteschlange.</param>
      <returns>Die neue unveränderliche Warteschlange, aus der das Anfangselement entfernt wurde.</returns>
      <exception cref="T:System.InvalidOperationException">Die Warteschlange ist leer.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Empty">
      <summary>Ruft eine leere unveränderliche Warteschlange ab.</summary>
      <returns>Eine leere unveränderliche Warteschlange.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)">
      <summary>Fügt ein Element am Ende der unveränderlichen Warteschlange hinzu und gibt die neue Warteschlange zurück.</summary>
      <param name="value">Das hinzuzufügende Element.</param>
      <returns>Die neue unveränderliche Warteschlange.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1.Enumerator">
      <summary>Listet den Inhalt von einer unveränderlichen Warteschlange auf, ohne Arbeitsspeicher zuzuweisen.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Enumerator.Current">
      <summary>Ruft das Element an der aktuellen Position des Enumerators ab.</summary>
      <returns>Ruft das Element an der aktuellen Position des Enumerators ab.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.MoveNext">
      <summary>Setzt den Enumerator auf das nächste Element der unveränderlichen Warteschlange.</summary>
      <returns>
        <see langword="true" />, wenn der Enumerator erfolgreich auf das nächste Element gesetzt wurde, <see langword="false" />, wenn der Enumerator das Ende der Warteschlange überschritten hat.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die unveränderliche Warteschlange durchläuft.</summary>
      <returns>Ein Enumerator, der zum Durchlaufen der Warteschlange verwendet werden kann.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.IsEmpty">
      <summary>Ruft einen Wert ab, der angibt, ob diese unveränderliche Warteschlange leer ist.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <returns>
        <see langword="true" />, wenn diese Warteschlange leer ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Peek">
      <summary>Gibt das Element am Anfang der unveränderlichen Warteschlange zurück, ohne es zu entfernen.</summary>
      <returns>Das Element am Anfang der Warteschlange.</returns>
      <exception cref="T:System.InvalidOperationException">Die Warteschlange ist leer.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.PeekRef">
      <summary>Ruft einen schreibgeschützten Verweis auf das Element an vorderster Position der Warteschlange ab.</summary>
      <exception cref="T:System.InvalidOperationException">Die Warteschlange ist leer.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns>Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns>Ein <see cref="T:System.Collections.IEnumerator" />-Objekt, das zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Clear">
      <summary>Entfernt alle Elemente aus der unveränderlichen Warteschlange.</summary>
      <returns>Die leere unveränderliche Warteschlange.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Dequeue">
      <summary>Entfernt das Element am Anfang der unveränderlichen Warteschlange und gibt die neue Warteschlange zurück.</summary>
      <returns>Die neue unveränderliche Warteschlange; nie <c>NULL</c>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Enqueue(`0)">
      <summary>Fügt ein Element am Ende der unveränderlichen Warteschlange hinzu und gibt die neue Warteschlange zurück.</summary>
      <param name="value">Das hinzuzufügende Element.</param>
      <returns>Die neue unveränderliche Warteschlange.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary">
      <summary>Stellt eine Reihe von Initialisierungsmethoden für Instanzen der <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2" /> Klasse bereit.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2">
      <summary>Erstellt ein leeres unveränderliches sortiertes Wörterbuch.</summary>
      <typeparam name="TKey">Der Typ der Schlüssel, die vom Wörterbuch gespeichert werden.</typeparam>
      <typeparam name="TValue">Der Typ der Werte, die vom Wörterbuch gespeichert werden.</typeparam>
      <returns>Ein leeres unveränderliches sortiertes Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0})">
      <summary>Erstellt ein leeres unveränderliches sortiertes Wörterbuch, das den angegebenen Schlüsselvergleich verwendet.</summary>
      <param name="keyComparer">Die Implementierung zum Bestimmen der Gleichheit der Schlüssel im Wörterbuch.</param>
      <typeparam name="TKey">Der Typ der Schlüssel, die vom Wörterbuch gespeichert werden.</typeparam>
      <typeparam name="TValue">Der Typ der Werte, die vom Wörterbuch gespeichert werden.</typeparam>
      <returns>Ein leeres unveränderliches sortiertes Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Erstellt ein leeres unveränderliches sortiertes Wörterbuch, das den angegebenen Schlüssel- und Wertevergleich verwendet.</summary>
      <param name="keyComparer">Die Implementierung zum Bestimmen der Gleichheit der Schlüssel im Wörterbuch.</param>
      <param name="valueComparer">Die Implementierung zum Bestimmen der Gleichheit der Werte im Wörterbuch.</param>
      <typeparam name="TKey">Der Typ der Schlüssel, die vom Wörterbuch gespeichert werden.</typeparam>
      <typeparam name="TValue">Der Typ der Werte, die vom Wörterbuch gespeichert werden.</typeparam>
      <returns>Ein leeres unveränderliches sortiertes Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2">
      <summary>Erstellt einen Generator für ein neues unveränderliches sortiertes Wörterbuch.</summary>
      <typeparam name="TKey">Der Typ der Schlüssel, die vom Wörterbuch gespeichert werden.</typeparam>
      <typeparam name="TValue">Der Typ der Werte, die vom Wörterbuch gespeichert werden.</typeparam>
      <returns>Der Generator für unveränderliche Auflistungen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0})">
      <summary>Erstellt einen Generator für ein neues unveränderliches sortiertes Wörterbuch.</summary>
      <param name="keyComparer">Der Schlüsselvergleich.</param>
      <typeparam name="TKey">Der Typ der Schlüssel, die vom Wörterbuch gespeichert werden.</typeparam>
      <typeparam name="TValue">Der Typ der Werte, die vom Wörterbuch gespeichert werden.</typeparam>
      <returns>Der Generator für unveränderliche Auflistungen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Erstellt einen Generator für ein neues unveränderliches sortiertes Wörterbuch.</summary>
      <param name="keyComparer">Der Schlüsselvergleich.</param>
      <param name="valueComparer">Der Wertevergleich.</param>
      <typeparam name="TKey">Der Typ der Schlüssel, die vom Wörterbuch gespeichert werden.</typeparam>
      <typeparam name="TValue">Der Typ der Werte, die vom Wörterbuch gespeichert werden.</typeparam>
      <returns>Der Generator für unveränderliche Auflistungen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Erstellt ein neues unveränderliches sortiertes Wörterbuch aus dem angegebenen Bereich von Elementen mit dem angegebenen Schlüsselvergleich.</summary>
      <param name="keyComparer">Die Vergleichsimplementierung, die zum Auswerten von Schlüsseln auf Gleichheit und Sortierreihenfolge verwendet wird.</param>
      <param name="items">Die Elemente, die dem sortierten Wörterbuch hinzugefügt werden.</param>
      <typeparam name="TKey">Der Typ der im Wörterbuch gespeicherten Schlüssel.</typeparam>
      <typeparam name="TValue">Der Typ der im Wörterbuch gespeicherten Werte.</typeparam>
      <returns>Das neue unveränderliche sortierte Wörterbuch, das die angegebenen Elemente enthält und den angegebenen Schlüsselvergleich verwendet.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Erstellt ein neues unveränderliches sortiertes Wörterbuch aus dem angegebenen Bereich von Elementen mit dem angegebenen Schlüssel- und Wertevergleich.</summary>
      <param name="keyComparer">Die Vergleichsimplementierung, die zum Vergleichen von Schlüsseln auf Gleichheit und Sortierreihenfolge verwendet wird.</param>
      <param name="valueComparer">Die Vergleichsimplementierung, die zum Vergleichen von Werten auf Gleichheit und Sortierreihenfolge verwendet wird.</param>
      <param name="items">Die Elemente, die dem sortierten Wörterbuch hinzugefügt werden, bevor es unveränderlich wird.</param>
      <typeparam name="TKey">Der Typ der im Wörterbuch gespeicherten Schlüssel.</typeparam>
      <typeparam name="TValue">Der Typ der im Wörterbuch gespeicherten Werte.</typeparam>
      <returns>Ein unveränderliches sortiertes Wörterbuch, das die angegebenen Elemente enthält und die angegebenen Vergleiche verwendet.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Erstellt ein unveränderliches sortiertes Wörterbuch, das die angegebenen Elemente enthält und den Standardvergleich verwendet.</summary>
      <param name="items">Die Elemente, die dem sortierten Wörterbuch hinzugefügt werden, bevor es unveränderlich wird.</param>
      <typeparam name="TKey">Der Typ der im Wörterbuch gespeicherten Schlüssel.</typeparam>
      <typeparam name="TValue">Der Typ der im Wörterbuch gespeicherten Werte.</typeparam>
      <returns>Ein unveränderliches sortiertes Wörterbuch, das die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Listet eine Sequenz von Schlüssel-Wert-Paaren auf und erzeugt ein unveränderliches sortiertes Wörterbuch ihrer Inhalte.</summary>
      <param name="source">Die Sequenz von aufzulistenden Schlüssel-Wert-Paaren.</param>
      <typeparam name="TKey">Der Typ der Schlüssel im Wörterbuch.</typeparam>
      <typeparam name="TValue">Der Typ der Werte im Wörterbuch.</typeparam>
      <returns>Ein unveränderliches sortiertes Wörterbuch, das die Schlüssel-Wert-Paare in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})">
      <summary>Listet eine Sequenz von Schlüssel-Wert-Paaren auf und erzeugt mithilfe des angegebenen Schlüsselvergleichs ein unveränderliches Wörterbuch ihrer Inhalte.</summary>
      <param name="source">Die Sequenz von aufzulistenden Schlüssel-Wert-Paaren.</param>
      <param name="keyComparer">Der Schlüsselvergleich, der beim Erstellen des unveränderlichen Wörterbuchs verwendet wird.</param>
      <typeparam name="TKey">Der Typ der Schlüssel im Wörterbuch.</typeparam>
      <typeparam name="TValue">Der Typ der Werte im Wörterbuch.</typeparam>
      <returns>Ein unveränderliches sortiertes Wörterbuch, das die Schlüssel-Wert-Paare in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Listet eine Sequenz von Schlüssel-Wert-Paaren auf und erzeugt mithilfe des angegebenen Schlüssel- und Wertevergleichs ein unveränderliches sortiertes Wörterbuch ihrer Inhalte.</summary>
      <param name="source">Die Sequenz von aufzulistenden Schlüssel-Wert-Paaren.</param>
      <param name="keyComparer">Der Schlüsselvergleich, der beim Erstellen des unveränderlichen Wörterbuchs verwendet wird.</param>
      <param name="valueComparer">Der Wertevergleich für die Verwendung des unveränderlichen Wörterbuchs.</param>
      <typeparam name="TKey">Der Typ der Schlüssel im Wörterbuch.</typeparam>
      <typeparam name="TValue">Der Typ der Werte im Wörterbuch.</typeparam>
      <returns>Ein unveränderliches sortiertes Wörterbuch, das die Schlüssel-Wert-Paare in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Immutable.ImmutableSortedDictionary{``0,``1}.Builder)">
      <summary>Erstellt ein unveränderliches sortiertes Wörterbuch aus dem aktuellen Inhalt des Wörterbuchs des Generators.</summary>
      <param name="builder">Der Generator, aus dem das unveränderlich sortierte Wörterbuch erstellt werden soll.</param>
      <typeparam name="TKey">Der Typ der Schlüssel im Wörterbuch.</typeparam>
      <typeparam name="TValue">Der Typ der Werte im Wörterbuch.</typeparam>
      <returns>Ein unveränderliches sortiertes Wörterbuch, das den aktuellen Inhalt des Wörterbuchs des Generators enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Listet eine Sequenz auf, transformiert sie und erzeugt ein unveränderliches sortiertes Wörterbuch ihrer Inhalte.</summary>
      <param name="source">Die Sequenz, die aufgelistet werden soll, um das Wörterbuch zu generieren.</param>
      <param name="keySelector">Die Funktion, die den Schlüssel für das Wörterbuch aus jedem Sequenzelement erzeugt.</param>
      <param name="elementSelector">Die Funktion, die den Wert für das Wörterbuch aus jedem Sequenzelement erzeugt.</param>
      <typeparam name="TSource">Der Typ der Elemente in der Sequenz.</typeparam>
      <typeparam name="TKey">Der Typ der Schlüssel im resultierenden Wörterbuch.</typeparam>
      <typeparam name="TValue">Der Typ der Werte im resultierenden Wörterbuch.</typeparam>
      <returns>Ein unveränderliches sortiertes Wörterbuch, das die Elemente in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})">
      <summary>Listet eine Sequenz auf, transformiert sie und erzeugt mithilfe des angegebenen Schlüsselvergleichs ein unveränderliches sortiertes Wörterbuch ihrer Inhalte.</summary>
      <param name="source">Die Sequenz, die aufgelistet werden soll, um das Wörterbuch zu generieren.</param>
      <param name="keySelector">Die Funktion, die den Schlüssel für das Wörterbuch aus jedem Sequenzelement erzeugt.</param>
      <param name="elementSelector">Die Funktion, die den Wert für das Wörterbuch aus jedem Sequenzelement erzeugt.</param>
      <param name="keyComparer">Der Schlüsselvergleich, der für das Wörterbuch verwendet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente in der Sequenz.</typeparam>
      <typeparam name="TKey">Der Typ der Schlüssel im resultierenden Wörterbuch.</typeparam>
      <typeparam name="TValue">Der Typ der Werte im resultierenden Wörterbuch.</typeparam>
      <returns>Ein unveränderliches Wörterbuch, das die Elemente in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Listet eine Sequenz auf, transformiert sie und erzeugt mithilfe des angegebenen Schlüssel- und Wertevergleichs ein unveränderliches sortiertes Wörterbuch ihrer Inhalte.</summary>
      <param name="source">Die Sequenz, die aufgelistet werden soll, um das Wörterbuch zu generieren.</param>
      <param name="keySelector">Die Funktion, die den Schlüssel für das Wörterbuch aus jedem Sequenzelement erzeugt.</param>
      <param name="elementSelector">Die Funktion, die den Wert für das Wörterbuch aus jedem Sequenzelement erzeugt.</param>
      <param name="keyComparer">Der Schlüsselvergleich, der für das Wörterbuch verwendet werden soll.</param>
      <param name="valueComparer">Der Wertevergleich für die Verwendung des Wörterbuchs.</param>
      <typeparam name="TSource">Der Typ der Elemente in der Sequenz.</typeparam>
      <typeparam name="TKey">Der Typ der Schlüssel im resultierenden Wörterbuch.</typeparam>
      <typeparam name="TValue">Der Typ der Werte im resultierenden Wörterbuch.</typeparam>
      <returns>Ein unveränderliches sortiertes Wörterbuch, das die Elemente in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2">
      <summary>Stellt ein unveränderlich sortiertes Wörterbuch dar.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="TKey">Der Typ des im Wörterbuch enthaltenen Schlüssels.</typeparam>
      <typeparam name="TValue">Der Typ des im Wörterbuch enthaltenen Werts.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Add(`0,`1)">
      <summary>Fügt ein Element mit dem angegebenen Schlüssel und Wert zum unveränderlich sortierten Wörterbuch hinzu.</summary>
      <param name="key">Der Schlüssel des hinzuzufügenden Eintrags.</param>
      <param name="value">Der Wert des hinzuzufügenden Eintrags.</param>
      <returns>Ein neues unveränderlich sortiertes Wörterbuch, das das zusätzliche Schlüssel-Wert-Paar enthält.</returns>
      <exception cref="T:System.ArgumentException">Der angegebene Schlüssel ist bereits im Wörterbuch vorhanden, hat jedoch einen anderen Wert.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Fügt dem unveränderlich sortierten Wörterbuch die angegebenen Schlüssel-Wert-Paare hinzu.</summary>
      <param name="items">Die Schlüssel-Wert-Paare, die hinzugefügt werden sollen.</param>
      <returns>Ein neues unveränderliches Wörterbuch, das die zusätzlichen Schlüssel-Wert-Paare enthält.</returns>
      <exception cref="T:System.ArgumentException">Einer der angegebenen Schlüssel ist bereits im Wörterbuch vorhanden, hat jedoch einen anderen Wert.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder">
      <summary>Stellt ein sortiertes Wörterbuch dar, das mit wenigen oder gar keinen Speicherbelegungen geändert wird und das sehr effizient unveränderlich sortierte Wörterbuch-Instanzen produzieren oder auf ihnen aufbauen kann.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)">
      <summary>Fügt ein Element mit dem angegebenem Schlüssel und Wert zum unveränderlich sortierten Wörterbuch hinzu.</summary>
      <param name="key">Der Schlüssel des hinzuzufügenden Elements.</param>
      <param name="value">Der Wert des hinzuzufügenden Elements.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Ein angegebenes Element wird zum unveränderlich sortierten Wörterbuch hinzugefügt.</summary>
      <param name="item">Das Objekt, das dem Wörterbuch hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Fügt eine Sequenz von Werten zum unveränderlich sortierten Wörterbuch hinzu.</summary>
      <param name="items">Die Elemente, die dem Wörterbuch hinzugefügt werden.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear">
      <summary>Entfernt alle Elemente aus dem unveränderlich sortierten Wörterbuch.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Ermittelt, ob das unveränderlich sortierte Wörterbuch einen bestimmten Wert enthält.</summary>
      <param name="item">Das Objekt, das im Wörterbuch gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn sich <paramref name="item" /> im Wörterbuch befindet, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)">
      <summary>Bestimmt, ob das unveränderlich sortierte Wörterbuch ein Element enthält, das über den angegebenen Schlüssel verfügt.</summary>
      <param name="key">Der im Wörterbuch zu suchende Schlüssel.</param>
      <returns>
        <see langword="true" />, wenn das Wörterbuch ein Element mit dem Schlüssel enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)">
      <summary>Ermittelt, ob das unveränderlich sortierte Wörterbuch ein Element mit dem angegebenen Wert enthält.</summary>
      <param name="value">Der Wert, der im Wörterbuch gesucht werden soll. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <returns>
        <see langword="true" />, wenn das unveränderlich sortierte Wörterbuch ein Element mit dem angegebenen Wert enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count">
      <summary>Ruft die Anzahl der Elemente in diesem unveränderlich sortierten Wörterbuch ab.</summary>
      <returns>Die Anzahl der Elemente in diesem Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der das unveränderlich sortierte Wörterbuch durchläuft.</summary>
      <returns>Ein Enumerator, mit dem das Wörterbuch durchlaufen werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary>Ruft den Wert für einen angegebenen Schlüssel auf, wenn ein übereinstimmender Schlüssel im Wörterbuch vorhanden ist, andernfalls ist es der Standardwert.</summary>
      <param name="key">Der zu suchende Schlüssel.</param>
      <returns>Der Wert für den Schlüssel oder <c>default(TValue)</c>, wenn kein passender Schlüssel gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary>Ruft den Wert für einen angegebenen Schlüssel auf, wenn ein übereinstimmender Schlüssel im Wörterbuch vorhanden ist, andernfalls ist es der Standardwert.</summary>
      <param name="key">Der zu suchende Schlüssel.</param>
      <param name="defaultValue">Der zurückzugebende Standardwert, wenn kein übereinstimmender Schlüssel im Wörterbuch gefunden wurde.</param>
      <returns>Der Wert für den Schlüssel oder <paramref name="defaultValue" />, wenn kein passender Schlüssel gefunden wurde.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Item(`0)">
      <summary>Ruft den Wert für einen angegebenen Schlüssel im unveränderlich sortierten Wörterbuch ab oder legt ihn an.</summary>
      <param name="key">Der Schlüssel, dessen Wert abgerufen werden soll.</param>
      <returns>Der Wert, der dem angegebenen Schlüssel zugeordnet ist.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer">
      <summary>Ruft den Schlüsselvergleich ab oder legt ihn fest.</summary>
      <returns>Der Schlüsselvergleich.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys">
      <summary>Ruft eine stark typisierte, schreibgeschützte Auflistung von Elementen ab.</summary>
      <returns>Eine stark typisierte, schreibgeschützte Auflistung von Elementen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)">
      <summary>Entfernt das Element mit dem angegebenen Schlüssel aus dem unveränderlich sortierten Wörterbuch.</summary>
      <param name="key">Der Schlüssel des zu entfernenden Elements.</param>
      <returns>
        <see langword="true" />, wenn das Element erfolgreich entfernt wurde, andernfalls <see langword="false" />. Diese Methode gibt auch dann <see langword="false" /> zurück, wenn <paramref name="key" /> nicht im ursprünglichen Wörterbuch gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Entfernt das erste Vorkommen eines bestimmten Objekts aus dem unveränderlich sortierten Wörterbuch.</summary>
      <param name="item">Das Objekt, das aus dem Wörterbuch entfernt werden soll.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="item" /> erfolgreich aus dem Wörterbuch entfernt wurde, andernfalls <see langword="false" />. Diese Methode gibt auch dann <see langword="false" /> zurück, wenn <paramref name="item" /> nicht im Wörterbuch gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Entfernt alle Einträge mit Schlüsseln, die mit denen übereinstimmen, die in der angegebenen Reihenfolge des unveränderlichen sortierte Wörterbuch gefunden wurden.</summary>
      <param name="keys">Die Schlüssel für Einträge, die aus dem Wörterbuch entfernt werden sollen.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Kopiert die Elemente des Wörterbuchs in ein Array, wobei an einem bestimmten Arrayindex begonnen wird.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <param name="array">Das eindimensionale Array, welches das Ziel der aus dem Wörterbuch kopierten Elemente ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="index">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>Ruft einen Wert ab, der angibt, ob der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist.</summary>
      <returns>
        <see langword="true" />, wenn der Zugriff auf das <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary>Ruft ein Objekt ab, mit dem der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</summary>
      <returns>Ein Objekt, mit dem der Zugriff auf die <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Fügt dem Wörterbuchobjekt ein Element mit dem angegebenen Schlüssel und Wert hinzu.</summary>
      <param name="key">Der Schlüssel des hinzuzufügenden Elements.</param>
      <param name="value">Der Wert des hinzuzufügenden Elements.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Ermittelt, ob das Wörterbuchobjekt ein Element mit dem angegebenen Schlüssel enthält.</summary>
      <param name="key">Der zu suchende Schlüssel.</param>
      <returns>
        <see langword="true" />, wenn das Wörterbuch ein Element mit dem Schlüssel enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary>Gibt ein <see cref="T:System.Collections.IDictionaryEnumerator" />-Objekt für das Wörterbuch zurück.</summary>
      <returns>Ein <see cref="T:System.Collections.IDictionaryEnumerator" />-Objekt für das Wörterbuch.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.IDictionary" />-Objekt eine feste Größe hat.</summary>
      <returns>
        <see langword="true" />, wenn das <see cref="T:System.Collections.IDictionary" />-Objekt eine feste Größe hat, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist.</summary>
      <returns>
        <see langword="true" />, wenn das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary>Ruft das Element mit dem angegebenen Schlüssel ab oder legt dieses fest.</summary>
      <param name="key">Der Schlüssel.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary>Ruft eine <see cref="T:System.Collections.Generic.ICollection`1" /> ab, die die Schlüssel des <see cref="T:System.Collections.Generic.IDictionary`2" /> enthält.</summary>
      <returns>Eine <see cref="T:System.Collections.Generic.ICollection`1" />, die die Schlüssel des Objekts enthält, das <see cref="T:System.Collections.Generic.IDictionary`2" /> implementiert.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Entfernt das Element mit dem angegebenen Schlüssel aus dem Wörterbuch.</summary>
      <param name="key">Der Schlüssel des zu entfernenden Elements.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary>Ruft eine <see cref="T:System.Collections.Generic.ICollection`1" /> ab, die die Werte im <see cref="T:System.Collections.Generic.IDictionary`2" /> enthält.</summary>
      <returns>Eine <see cref="T:System.Collections.Generic.ICollection`1" />, die die Werte des Objekts enthält, das <see cref="T:System.Collections.Generic.IDictionary`2" /> implementiert.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns>Ein Enumeratorobjekt, mithilfe dessen eine Auflistung durchlaufen werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable">
      <summary>Erstellt ein unveränderlich sortiertes Wörterbuch basierend auf dem Inhalt dieser Instanz.</summary>
      <returns>Ein unveränderliche sortiertes Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary>Ermittelt, ob das Wörterbuch einen bestimmten Schlüssel enthält.</summary>
      <param name="equalKey">Der zu suchende Schlüssel.</param>
      <param name="actualKey">Der übereinstimmende Schlüssel im Wörterbuch, wenn gefunden, oder <c>equalkey</c>, wenn keine Übereinstimmung gefunden wird.</param>
      <returns>
        <see langword="true" />, wenn eine Übereinstimmung für <paramref name="equalKey" /> gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary>Ruft den dem angegebenen Schlüssel zugeordneten Wert ab.</summary>
      <param name="key">Der Schlüssel, dessen Wert abgerufen wird.</param>
      <param name="value">Enthält nach dem Beenden dieser Methode den Wert, der dem angegebenen Schlüssel zugeordnet ist (wenn der Schlüssel gefunden wurde), oder andernfalls den Standardwert für den Typ des <paramref name="value" />-Parameters. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <returns>
        <see langword="true" />, wenn das Objekt, das das Wörterbuch implementiert, ein Element mit dem angegebenen Schlüssel enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer">
      <summary>Ruft den Wertevergleich ab bzw. legt ihn fest.</summary>
      <returns>Der Wertevergleich.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueRef(`0)">
      <summary>Gibt einen schreibgeschützten Verweis auf den mit dem angegebenen <paramref name="key" /> verknüpften Wert zurück.</summary>
      <param name="key" />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Der <paramref name="key" /> ist nicht vorhanden.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values">
      <summary>Ruft eine Auflistung ab, die die Werte des unveränderlich sortierten Wörterbuchs enthält.</summary>
      <returns>Eine Sammlung, die die Werte des Objekts enthält, mit dem das Wörterbuch implementiert wird.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Clear">
      <summary>Ruft ein leeres unveränderlich sortiertes Wörterbuch ab, das über dieselben Sortier- und Schlüssel-Wert-Vergleichsregeln wie diese Wörterbuchinstanz verfügt.</summary>
      <returns>Ein leeres Wörterbuch mit äquivalenten Sortier- und Schlüssel-Wert-Vergleichsregeln.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Bestimmt, ob dieses unveränderlich sortierte Wörterbuch das angegebene Schlüssel-Wert-Paar enthält.</summary>
      <param name="pair">Das Schlüssel-Wert-Paar, das gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn das angegebene Schlüssel-Wert-Paar im Wörterbuch gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsKey(`0)">
      <summary>Ermittelt, ob diese unveränderlich sortierte Zuordnung den angegebenen Schlüssel enthält.</summary>
      <param name="key">Der zu suchende Schlüssel.</param>
      <returns>
        <see langword="true" />, wenn das unveränderliche Wörterbuch den angegebenen Schlüssel enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsValue(`1)">
      <summary>Ermittelt, ob das unveränderlich sortierte Wörterbuch ein Element mit dem angegebenen Wert enthält.</summary>
      <param name="value">Der zu suchende Wert. Der Wert kann für Verweistypen <see langword="null" /> sein.</param>
      <returns>
        <see langword="true" />, wenn das Wörterbuch ein Element mit dem angegebenen Wert enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Count">
      <summary>Ruft die Anzahl der Schlüssel-Wert-Paare im unveränderlich sortierten Wörterbuch ab.</summary>
      <returns>Die Anzahl der Schlüssel-Wert-Paare im Wörterbuch.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedDictionary`2.Empty">
      <summary>Ruft ein leeres unveränderlich sortiertes Wörterbuch ab.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator">
      <summary>Listet den Inhalt einer binären Struktur auf.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Current">
      <summary>Ruft das Element an der aktuellen Position des Enumerators ab.</summary>
      <returns>Ruft das Element an der aktuellen Position des Enumerators ab.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Dispose">
      <summary>Gibt alle von der aktuellen Instanz der <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator" />-Klasse verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.MoveNext">
      <summary>Setzt den Enumerator auf das nächste Element des unveränderlich sortierten Wörterbuchs.</summary>
      <returns>
        <see langword="true" />, wenn der Enumerator erfolgreich auf das nächste Element gesetzt wurde, <see langword="false" />, wenn der Enumerator das Ende des sortierten Wörterbuchs überschritten hat.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Reset">
      <summary>Setzt den Enumerator auf seine anfängliche Position vor dem ersten Element im unveränderlich sortierten Wörterbuch.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Das aktuelle Element.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der das unveränderlich sortierte Wörterbuch durchläuft.</summary>
      <returns>Ein Enumerator, mit dem das Wörterbuch durchlaufen werden kann.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.IsEmpty">
      <summary>Ruft einen Wert ab, der angibt, ob diese Instanz des unveränderlich sortierten Wörterbuchs leer ist.</summary>
      <returns>
        <see langword="true" />, wenn diese Instanz leer ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Item(`0)">
      <summary>Ruft den <paramref name="TValue" />-Wert ab, der dem angegebenen Schlüssel zugeordnet ist.</summary>
      <param name="key">Der Schlüssel, dessen Wert abgerufen werden soll.</param>
      <returns>Der dem angegebenen Schlüssel zugeordnete Wert. Wenn keine Ergebnisse gefunden werden, löst der Vorgang eine Ausnahme aus.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.KeyComparer">
      <summary>Ruft den Schlüsselvergleich für das unveränderlich sortierte Wörterbuch ab.</summary>
      <returns>Der Schlüsselvergleich für das Wörterbuch.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Keys">
      <summary>Ruft die Schlüssel im unveränderlich sortierten Wörterbuch ab.</summary>
      <returns>Die Schlüssel im unveränderlichen Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Remove(`0)">
      <summary>Entfernt das Element mit dem angegebenen Wert aus dem unveränderlich sortierten Wörterbuch.</summary>
      <param name="value">Der Wert des zu entfernenden Elements.</param>
      <returns>Ein neues unveränderliches Wörterbuch, aus dem das angegebene Element entfernt wurde, oder diese Instanz, wenn der angegebene Wert im Wörterbuch nicht gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Entfernt die Elemente mit den angegebenen Schlüsseln aus dem unveränderlich sortierten Wörterbuch.</summary>
      <param name="keys">Die Schlüssel der zu entfernenden Elemente.</param>
      <returns>Ein neues unveränderliches Wörterbuch, aus dem die angegebenen Schlüssel entfernt wurden, oder diese Instanz, wenn die angegebenen Schlüssel im Wörterbuch nicht gefunden wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItem(`0,`1)">
      <summary>Legt den angegebenen Schlüssel und Wert im unveränderlich sortierten Wörterbuch fest, wobei ein vorhandener Wert für den Schlüssel überschrieben werden kann.</summary>
      <param name="key">Der Schlüssel des hinzuzufügenden Eintrags.</param>
      <param name="value">Der Schlüsselwert, der festgelegt werden soll.</param>
      <returns>Ein neues unveränderlich sortiertes Wörterbuch, das das angegebene Schlüssel-Wert-Paar enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Legt die angegebenen Schlüssel-Wert-Paare im unveränderlich sortierten Wörterbuch fest, wobei vorhandene Werte für die Schlüssel überschrieben werden können.</summary>
      <param name="items">Die Schlüssel-Wert-Paare, die im Wörterbuch festgelegt werden sollen. Falls ein Schlüssel bereits im Wörterbuch vorhanden ist, überschreibt diese Methode dessen vorherigen Wert.</param>
      <returns>Ein unveränderliches Wörterbuch, das die angegebenen Schlüssel-Wert-Paare enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <param name="item" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Kopiert die Elemente des Wörterbuchs in ein Array, wobei an einem bestimmten Arrayindex begonnen wird.</summary>
      <param name="array">Das eindimensionale Array, welches das Ziel der aus dem Wörterbuch kopierten Elemente ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="index">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Ruft einen Wert ab, der angibt, ob der Zugriff auf die <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist.</summary>
      <returns>
        <see langword="true" />, wenn der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Ruft ein Objekt ab, mit dem der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</summary>
      <returns>Ein Objekt, mit dem der Zugriff auf die <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Fügt dem Wörterbuchobjekt ein Element mit dem angegebenen Schlüssel und Wert hinzu.</summary>
      <param name="key">Das Objekt, das als Schlüssel des hinzuzufügenden Elements verwendet werden soll.</param>
      <param name="value">Das Objekt, das als Wert des hinzuzufügenden Elements verwendet werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Clear">
      <summary>Löscht diese Instanz.</summary>
      <exception cref="T:System.NotSupportedException">Das Wörterbuchobjekt ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Bestimmt, ob das unveränderliche Dictionary-Objekt ein Element enthält, das über den angegebenen Schlüssel verfügt.</summary>
      <param name="key">Der im Dictionary-Objekt zu suchende Schlüssel.</param>
      <returns>
        <see langword="true" />, wenn das Wörterbuch ein Element mit dem Schlüssel enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Gibt ein <see cref="T:System.Collections.IDictionaryEnumerator" />-Objekt für das unveränderliche Dictionary-Objekt zurück.</summary>
      <returns>Ein Enumeratorobjekt für das Dictionary-Objekt.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.IDictionary" />-Objekt eine feste Größe hat.</summary>
      <returns>
        <see langword="true" />, wenn das <see cref="T:System.Collections.IDictionary" />-Objekt eine feste Größe hat, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist.</summary>
      <returns>
        <see langword="true" />, wenn das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Ruft das Element mit dem angegebenen Schlüssel ab oder legt dieses fest.</summary>
      <param name="key">Der Schlüssel.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>Ruft eine <see cref="T:System.Collections.Generic.ICollection`1" /> ab, die die Schlüssel des <see cref="T:System.Collections.Generic.IDictionary`2" /> enthält.</summary>
      <returns>Eine <see cref="T:System.Collections.Generic.ICollection`1" />, die die Schlüssel des Objekts enthält, das <see cref="T:System.Collections.Generic.IDictionary`2" /> implementiert.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Entfernt das Element mit dem angegebenen Schlüssel aus dem unveränderlichen Dictionary-Objekt.</summary>
      <param name="key">Der Schlüssel des zu entfernenden Elements.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>Ruft eine <see cref="T:System.Collections.Generic.ICollection`1" /> ab, die die Werte im <see cref="T:System.Collections.Generic.IDictionary`2" /> enthält.</summary>
      <returns>Eine <see cref="T:System.Collections.Generic.ICollection`1" />, die die Werte des Objekts enthält, das <see cref="T:System.Collections.Generic.IDictionary`2" /> implementiert.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns>Ein Enumeratorobjekt, mithilfe dessen eine Auflistung durchlaufen werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="pairs" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear" />
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <param name="key" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <param name="keys" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <param name="items" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ToBuilder">
      <summary>Erstellt ein unveränderlich sortiertes Wörterbuch, das den gleichen Inhalt wie dieses Wörterbuch aufweist und über mehrere Vorgänge mithilfe änderbarer Standardschnittstellen effizient verändert werden kann.</summary>
      <returns>Eine Auflistung mit dem gleichen Inhalt wie dieses Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetKey(`0,`0@)">
      <summary>Ermittelt, ob das Wörterbuch einen bestimmten Schlüssel enthält.</summary>
      <param name="equalKey">Der zu suchende Schlüssel.</param>
      <param name="actualKey">Der übereinstimmende Schlüssel im Wörterbuch, wenn gefunden, oder <c>equalkey</c>, wenn keine Übereinstimmung gefunden wird.</param>
      <returns>
        <see langword="true" />, wenn eine Übereinstimmung für <paramref name="equalKey" /> gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>Ruft den dem angegebenen Schlüssel zugeordneten Wert ab.</summary>
      <param name="key">Der Schlüssel, dessen Wert abgerufen wird.</param>
      <param name="value">Enthält nach dem Beenden dieser Methode den Wert, der dem angegebenen Schlüssel zugeordnet ist (wenn der Schlüssel gefunden wurde), oder andernfalls den Standardwert für den Typ des <paramref name="value" />-Parameters.</param>
      <returns>
        <see langword="true" />, wenn das Wörterbuch ein Element mit dem angegebenen Schlüssel enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueComparer">
      <summary>Ruft den Wertevergleich ab, mit dem bestimmt wird, ob Werte identisch sind.</summary>
      <returns>Der Wertevergleich, mit dem bestimmt wird, ob Werte identisch sind.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueRef(`0)">
      <summary>Gibt einen schreibgeschützten Verweis auf den mit dem angegebenen <paramref name="key" /> verknüpften Wert zurück.</summary>
      <param name="key" />
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Der <paramref name="key" /> ist nicht vorhanden.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Values">
      <summary>Ruft die Werte im unveränderlich sortierten Wörterbuch ab.</summary>
      <returns>Die Werte im Wörterbuch.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0})">
      <summary>Ruft eine Instanz des unveränderlich sortierten Wörterbuchs ab, die den angegebenen Schlüsselvergleich verwendet.</summary>
      <param name="keyComparer">Der zu verwendende Schlüsselvergleich.</param>
      <returns>Eine Instanz des unveränderlichen Wörterbuchs, die den angegebenen Vergleich verwendet.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>Ruft eine Instanz des unveränderlich sortierten Wörterbuchs ab, die die angegebenen Schlüssel- und Wertevergleiche verwendet.</summary>
      <param name="keyComparer">Der zu verwendende Schlüsselvergleich.</param>
      <param name="valueComparer">Der zu verwendende Wertevergleich.</param>
      <returns>Eine Instanz des unveränderlichen Wörterbuchs, die die angegebenen Vergleiche verwendet.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet">
      <summary>Stellt eine Reihe von Initialisierungsmethoden für Instanzen der <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1" /> Klasse bereit.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1">
      <summary>Erstellt eine leere unveränderliche Gruppe.</summary>
      <typeparam name="T">Der Typ der Elemente, die in der unveränderlichen Gruppe gespeichert werden sollen.</typeparam>
      <returns>Eine leere unveränderlich sortierte Gruppe.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)">
      <summary>Erstellt eine neue unveränderlich sortierte Gruppe, die das angegebene Element enthält.</summary>
      <param name="item">Das Element, mit dem die Gruppe vorab aufgefüllt wird.</param>
      <typeparam name="T">Der Typ der Elemente in der unveränderlichen Gruppe.</typeparam>
      <returns>Eine neue unveränderliche Gruppe, die das angegebene Element enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])">
      <summary>Erstellt eine neue unveränderlich sortierte Gruppe, die das angegebene Array von Elementen enthält.</summary>
      <param name="items">Ein Array, das die Elemente enthält, um die Gruppe vorab aufzufüllen.</param>
      <typeparam name="T">Der Typ der Elemente in der unveränderlichen Gruppe.</typeparam>
      <returns>Eine neue unveränderliche Gruppe, die die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})">
      <summary>Erstellt eine leere unveränderlich sortierte Gruppe, die den angegebenen Vergleich verwendet.</summary>
      <param name="comparer">Die Implementierung, die beim Vergleich von Elementen in der Gruppe verwendet werden soll.</param>
      <typeparam name="T">Der Typ der Elemente in der unveränderlichen Gruppe.</typeparam>
      <returns>Eine leere unveränderliche Gruppe.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)">
      <summary>Eine neue unveränderlich sortierte Gruppe, die das angegebene Element enthält und den angegebenen Vergleich verwendet.</summary>
      <param name="comparer">Die Implementierung, die beim Vergleich von Elementen in der Gruppe verwendet werden soll.</param>
      <param name="item">Das Element, mit dem die Gruppe vorab aufgefüllt wird.</param>
      <typeparam name="T">Der Typ der Elemente, die in der unveränderlichen Gruppe gespeichert sind.</typeparam>
      <returns>Eine neue unveränderliche Gruppe, die das angegebene Element enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])">
      <summary>Eine neue unveränderlich sortierte Gruppe, die den angegebenen Array von Elementen enthält und den angegebenen Vergleich verwendet.</summary>
      <param name="comparer">Die Implementierung, die beim Vergleich von Elementen in der Gruppe verwendet werden soll.</param>
      <param name="items">Ein Array, das die Elemente enthält, um die Gruppe vorab aufzufüllen.</param>
      <typeparam name="T">Der Typ der Elemente in der unveränderlichen Gruppe.</typeparam>
      <returns>Eine neue unveränderliche Gruppe, die die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1">
      <summary>Gibt eine Auflistung zurück, die zum Erstellen einer unveränderlich sortierten Gruppe verwendet werden kann.</summary>
      <typeparam name="T">Der Typ der in der Auflistung gespeicherten Elemente.</typeparam>
      <returns>Der Generator für unveränderliche Auflistungen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})">
      <summary>Gibt eine Auflistung zurück, die zum Erstellen einer unveränderlich sortierten Gruppe verwendet werden kann.</summary>
      <param name="comparer">Der zum Vergleichen von Elementen in der Gruppe für Gleichheit verwendete Vergleich.</param>
      <typeparam name="T">Der Typ der in der Auflistung gespeicherten Elemente.</typeparam>
      <returns>Die unveränderliche Auflistung.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Erstellt eine neue unveränderliche Auflistung, die die angegebenen Elemente enthält.</summary>
      <param name="comparer">Der zu verwendende Vergleich zum Vergleichen von Elementen in dieser Gruppe.</param>
      <param name="items">Die Elemente, die der Menge vor deren Unveränderlichkeit hinzugefügt werden.</param>
      <typeparam name="T">Der Typ der in der Auflistung gespeicherten Elemente.</typeparam>
      <returns>Eine neue unveränderliche Gruppe, die die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Erstellt eine neue unveränderliche Auflistung, die die angegebenen Elemente enthält.</summary>
      <param name="items">Die Elemente, die der Menge vor deren Unveränderlichkeit hinzugefügt werden.</param>
      <typeparam name="T">Der Typ der in der Auflistung gespeicherten Elemente.</typeparam>
      <returns>Eine neue unveränderliche Gruppe, die die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Listet eine Sequenz auf und erzeugt ein unveränderlich sortierte Gruppe ihrer Inhalte.</summary>
      <param name="source">Die Sequenz, die aufgelistet werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente in der Sequenz.</typeparam>
      <returns>Eine unveränderliche Gruppe, die die Elemente in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>Listet eine Sequenz auf, erzeugt ein unveränderlich sortierte Gruppe ihrer Inhalte und verwendet den angegeben Vergleich.</summary>
      <param name="source">Die Sequenz, die aufgelistet werden soll.</param>
      <param name="comparer">Der Vergleich zum Initialisieren und Hinzufügen von Mitgliedern zur sortierten Gruppe.</param>
      <typeparam name="TSource">Der Typ der Elemente in der Sequenz.</typeparam>
      <returns>Eine unveränderliche Gruppe, die die Elemente in der angegebenen Sequenz enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet{``0}.Builder)">
      <summary>Erstellt einen unveränderlichen sortierten Satz aus dem aktuellen Inhalt des Satzes des Generators.</summary>
      <param name="builder">Der Generator, aus dem der unveränderliche sortierte Satz erstellt werden soll.</param>
      <typeparam name="TSource">Der Typ der Elemente in der unveränderlich sortierten Gruppe.</typeparam>
      <returns>Ein unveränderlicher sortierter Satz, der den aktuellen Inhalt der Sammlung des Generators enthält.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1">
      <summary>Stellt die Implementierung einer unveränderlichen sortierten Gruppe dar.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="T">Der Typ der Elemente in der Gruppe.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)">
      <summary>Fügt dieser unveränderlichen sortierten Gruppe den angegebenen Wert hinzu.</summary>
      <param name="value">Der hinzuzufügende Wert.</param>
      <returns>Eine neue Gruppe mit dem hinzugefügten Element oder diese Gruppe, wenn das Element bereits in dieser Gruppe enthalten ist.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Builder">
      <summary>Stellt eine sortierte Gruppe dar, die Änderungen mit wenig oder keinen Speicherbelegungen ermöglicht und unveränderlich sortierte Gruppen effizient bearbeitet oder erstellt.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)">
      <summary>Fügt der aktuellen Gruppe ein Element hinzu und gibt einen Wert zurück, um anzugeben, ob das Element erfolgreich hinzugefügt wurde.</summary>
      <param name="item">Der Element, das zur Menge hinzugefügt wird.</param>
      <returns>
        <see langword="true" />, wenn das Element der Gruppe hinzugefügt wurde. <see langword="false" />, wenn das Element bereits in der Gruppe enthalten ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear">
      <summary>Entfernt alle Elemente aus dieser Gruppe.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)">
      <summary>Bestimmt, ob die Gruppe das angegebene Objekt enthält.</summary>
      <param name="item">Das Objekt, das in der Gruppe gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn das <paramref name="item" /> in der Gruppe gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count">
      <summary>Ruft die Anzahl der Elemente in der unveränderlich sortierten Gruppe ab.</summary>
      <returns>Die Anzahl der Elemente in dieser Gruppe.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Entfernt die angegebenen Elementgruppe aus der aktuellen Gruppe.</summary>
      <param name="other">Die Auflistung der Elemente, die aus der Gruppe entfernt werden sollen.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die Gruppe durchläuft.</summary>
      <returns>Ein Enumerator, der zum Durchlaufen der Gruppe verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Ändert die aktuelle Gruppe, sodass sie nur Elemente enthält, die in einer angegebenen Auflistung ebenfalls enthalten sind.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob die aktuelle Gruppe eine echte (strikte) Teilmenge einer angegebenen Auflistung ist.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Gruppe eine echte Teilmenge von <paramref name="other" /> ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob die aktuelle Gruppe eine echte (strikte) Teilmenge einer angegebenen Auflistung ist.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Gruppe eine echte Obermenge von <paramref name="other" /> ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob die aktuelle Gruppe eine Teilmenge einer angegebenen Auflistung ist.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Gruppe eine Teilmenge von <paramref name="other" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob die aktuelle Gruppe eine Obermenge einer angegebenen Auflistung ist.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Gruppe eine Obermenge von <paramref name="other" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)">
      <summary>Ruft das Element der Gruppe am angegebenen Index ab.</summary>
      <param name="index">Der nullbasierte Index des Elements in der Gruppe, die zurückgegeben werden soll.</param>
      <returns>Das Element an der angegebenen Position.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ItemRef(System.Int32)">
      <summary>Ruft einen schreibgeschützten Verweis auf das Element der Gruppe am angegebenen <paramref name="index" /> ab.</summary>
      <param name="index">Der nullbasierte Index des Elements in der Gruppe, die zurückgegeben werden soll.</param>
      <returns>Ein schreibgeschützter Verweis auf das Element an der angegebenen Position.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer">
      <summary>Ruft das Objekt ab oder legt es fest, mit dem die Gleichheit der Werte in der unveränderlich sortierten Gruppe bestimmt wird.</summary>
      <returns>Der Vergleich, mit dem die Gleichheit der Werte in der Gruppe bestimmt wird.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max">
      <summary>Ruft den durch den Vergleich definierten Höchstwert in der unveränderlich sortierten Gruppe ab.</summary>
      <returns>Der Höchstwert in der Gruppe.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min">
      <summary>Ruft den durch den Vergleich definierten Mindestwert in der unveränderlich sortierten Gruppe ab.</summary>
      <returns>Der Mindestwert in der Gruppe.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob sich die aktuelle Gruppe und die angegebene Auflistung überschneiden.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Auflistung und <paramref name="other" /> über mindestens ein gemeinsames Element verfügen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)">
      <summary>Entfernt das erste Vorkommen des angegebenen Objekts aus der Gruppe.</summary>
      <param name="item">Das aus der Gruppe zu entfernende Objekt.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="item" /> aus der Gruppe entfernt wurde; <see langword="false" />, wenn <paramref name="item" /> in der Gruppe nicht gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse">
      <summary>Gibt einen Enumerator zurück, der die unveränderlich sortierte Gruppe in umgekehrter Reihenfolge durchläuft.</summary>
      <returns>Ein Enumerator, der die Gruppe in umgekehrter Reihenfolge durchläuft.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob die aktuelle Gruppe und die angegebene Auflistung dieselben Elemente enthalten.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Gruppe und <paramref name="other" /> gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Ändert die aktuelle Gruppe, sodass sie nur Elemente enthält, die entweder in der aktuellen Gruppe oder in der angegebenen Auflistung, nicht jedoch in beiden vorhanden sind.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Fügt der aktuellen Gruppe ein Element hinzu und gibt einen Wert zurück, um anzugeben, ob das Element erfolgreich hinzugefügt wurde.</summary>
      <param name="item">Der Element, das zur Menge hinzugefügt wird.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Kopiert die Elemente der Auflistung in ein Array, wobei an einem bestimmten Arrayindex begonnen wird.</summary>
      <param name="array">Das eindimensionale Array, das das Ziel der aus der Auflistung kopierten Elemente ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob diese Instanz schreibgeschützt ist.</summary>
      <returns>Immer <c>false</c>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns>Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Kopiert die Elemente der Gruppe in ein Array, wobei an einem bestimmten Arrayindex begonnen wird.</summary>
      <param name="array">Das eindimensionale Array, das das Ziel der aus der Gruppe kopierten Elemente ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>Ruft einen Wert ab, der angibt, ob der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist.</summary>
      <returns>
        <see langword="true" />, wenn der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary>Ruft ein Objekt ab, mit dem der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</summary>
      <returns>Ein Objekt, mit dem der Zugriff auf die <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns>Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable">
      <summary>Erstellt einen unveränderlich sortierte Gruppe basierend auf dem Inhalt dieser Instanz.</summary>
      <returns>Eine unveränderliche Gruppe.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Ändert die aktuelle Gruppe, sodass sie alle Elemente enthält, die sowohl in der aktuellen Gruppe als auch in der angegebenen Auflistung vorhanden sind.</summary>
      <param name="other">Die Auflistung, die mit dem aktuellen Zustand verglichen werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear">
      <summary>Entfernt alle Elemente aus der unveränderlichen sortierten Gruppe.</summary>
      <returns>Eine leere Gruppe, aus der die Elemente entfernt wurden.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)">
      <summary>Ermittelt, ob diese unveränderliche sortierte Gruppe den angegebenen Wert enthält.</summary>
      <param name="value">Der zu suchende Wert.</param>
      <returns>
        <see langword="true" />, wenn die Gruppe den angegebenen Wert enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Count">
      <summary>Ruft die Anzahl der Elemente in der unveränderlich sortierten Gruppe ab.</summary>
      <returns>Die Anzahl der Elemente in der unveränderlichen sortierten Gruppe.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedSet`1.Empty">
      <summary>Ruft eine leere unveränderliche sortierte Gruppe ab.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator">
      <summary>Listet den Inhalt einer binären Struktur auf.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Current">
      <summary>Ruft das Element an der aktuellen Position des Enumerators ab.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <returns>Ruft das Element an der aktuellen Position des Enumerators ab.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Dispose">
      <summary>Gibt alle von der aktuellen Instanz der <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator" />-Klasse verwendeten Ressourcen frei.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.MoveNext">
      <summary>Setzt den Enumerator auf das nächste Element der unveränderlich sortierten Gruppe.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <returns>
        <see langword="true" />, wenn der Enumerator erfolgreich auf das nächste Element gesetzt wurde, <see langword="false" />, wenn der Enumerator das Ende der sortierten Gruppe überschritten hat.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Reset">
      <summary>Setzt den Enumerator auf seine anfängliche Position vor dem ersten Element in der unveränderlich sortierten Gruppe.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Das aktuelle Element.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Entfernt eine angegebene Gruppe von Elementen aus dieser unveränderlichen sortierten Gruppe.</summary>
      <param name="other">Die Elemente, die aus der Gruppe entfernt werden sollen.</param>
      <returns>Eine neue Gruppe, aus der die Elemente entfernt wurden; oder die ursprüngliche Gruppe, wenn keines der Elemente in der Gruppe enthalten war.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die unveränderliche sortierte Gruppe durchläuft.</summary>
      <returns>Ein Enumerator, der zum Durchlaufen der Gruppe verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)">
      <summary>Ruft die Position, an der der angegebene Wert auftritt, innerhalb dieser unveränderlichen sortierten Gruppe ab.</summary>
      <param name="item">Der Wert, dessen Position gesucht wird.</param>
      <returns>Der Index des angegebenen <paramref name="item" /> in der sortierten Gruppe, sofern <paramref name="item" /> gefunden wurde. Wenn <paramref name="item" /> nicht gefunden wurde und kleiner als mindestens ein Element in dieser Gruppe ist, gibt diese Methode eine negative Zahl zurück, die das bitweise Komplement des Indexes des ersten Elements darstellt, das größer als der Wert ist. Wenn <paramref name="item" /> nicht gefunden wurde und größer als alle Elemente in der Gruppe ist, gibt diese Methode eine negative Zahl zurück, die das bitweise Komplement des Indexes des letzten Elements plus 1 darstellt.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Erstellt eine unveränderliche sortierte Gruppe, die Elemente enthält, die sowohl in dieser Gruppe als auch in der angegebenen Gruppe vorhanden sind.</summary>
      <param name="other">Die Gruppe, deren Schnittmenge mit dieser gebildet werden soll.</param>
      <returns>Eine neue unveränderliche sortierte Gruppe, die Elemente enthält, die in beiden Gruppen vorhanden sind.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty">
      <summary>Ruft einen Wert ab, der angibt, ob diese unveränderliche sortierte Gruppe leer ist.</summary>
      <returns>
        <see langword="true" />, wenn die Gruppe leer ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob die aktuelle unveränderliche sortierte Gruppe eine echte (strikte) Teilmenge der angegebenen Auflistung ist.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Gruppe eine echte Teilmenge von <paramref name="other" /> ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob die aktuelle unveränderliche sortierte Gruppe eine echte Obermenge einer angegebenen Auflistung ist.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Gruppe eine echte Obermenge von <paramref name="other" /> ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob die aktuelle unveränderliche sortierte Gruppe eine Teilmenge einer angegebenen Auflistung ist.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Gruppe eine Teilmenge von <paramref name="other" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob die aktuelle unveränderliche sortierte Gruppe eine Obermenge einer angegebenen Auflistung ist.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Gruppe eine Obermenge von <paramref name="other" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)">
      <summary>Ruft das Element der unveränderlichen sortierten Gruppe am angegebenen Index ab.</summary>
      <param name="index">Der Index des Elements, das aus der sortierten Gruppe abgerufen werden soll.</param>
      <returns>Das Element am angegebenen Index.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ItemRef(System.Int32)">
      <summary>Ruft einen schreibgeschützten Verweis auf das Element der Gruppe am angegebenen <paramref name="index" /> ab.</summary>
      <param name="index">Der nullbasierte Index des Elements in der Gruppe, die zurückgegeben werden soll.</param>
      <returns>Ein schreibgeschützter Verweis auf das Element an der angegebenen Position.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer">
      <summary>Ruft den Vergleich ab, der zum Sortieren von Schlüsseln in der unveränderlichen sortierten Gruppe verwendet wird.</summary>
      <returns>Der zum Sortieren von Schlüsseln verwendete Vergleich.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Max">
      <summary>Ruft den durch den Vergleich definierten Höchstwert in der unveränderlich sortierten Gruppe ab.</summary>
      <returns>Der Höchstwert in der Gruppe.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Min">
      <summary>Ruft den durch den Vergleich definierten Mindestwert in der unveränderlich sortierten Gruppe ab.</summary>
      <returns>Der Mindestwert in der Gruppe.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob die aktuelle unveränderliche sortierte Gruppe und eine angegebene Auflistung gemeinsame Elemente enthalten.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die aktuelle Auflistung und <paramref name="other" /> über mindestens ein gemeinsames Element verfügen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)">
      <summary>Entfernt den angegebenen Wert aus dieser unveränderlichen sortierten Gruppe.</summary>
      <param name="value">Das zu entfernende Element.</param>
      <returns>Eine neue unveränderliche sortierte Gruppe, aus der das Element entfernt wurde, oder diese Gruppe, wenn das Element in der Gruppe nicht gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse">
      <summary>Gibt <see cref="T:System.Collections.Generic.IEnumerable`1" /> zum Durchlaufen dieser unveränderlichen sortierten Gruppe in umgekehrter Reihenfolge zurück.</summary>
      <returns>Ein Enumerator, der die unveränderliche sortierte Gruppe in umgekehrter Reihenfolge durchläuft.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Bestimmt, ob die aktuelle unveränderliche sortierte Gruppe und die angegebene Auflistung dieselben Elemente enthalten.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn die Gruppen gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Erstellt eine unveränderliche sortierte Gruppe, die Elemente enthält, die entweder in dieser Gruppe oder in einer angegebenen Sequenz, aber nicht in beiden vorhanden sind.</summary>
      <param name="other">Die andere Sequenz von Elementen.</param>
      <returns>Die neue unveränderliche sortierte Gruppe.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Fügt der Auflistung den angegebenen Wert hinzu.</summary>
      <param name="item">Der hinzuzufügende Wert.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Entfernt alle Elemente aus der Auflistung.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Kopiert die Elemente der Auflistung in ein Array, wobei an einem bestimmten Arrayindex begonnen wird.</summary>
      <param name="array">Das eindimensionale Array, das das Ziel der aus der Auflistung kopierten Elemente ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="arrayIndex">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Siehe Schnittstelle <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Entfernt das erste Vorkommen eines bestimmten Objekts aus der Auflistung.</summary>
      <param name="item">Das Objekt, das aus der Auflistung entfernt werden soll.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="item" /> erfolgreich aus der Auflistung entfernt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns>Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Fügt ein Element am angegebenen Index in die Gruppe ein.</summary>
      <param name="index">Der nullbasierte Index, an dem <paramref name="item" /> eingefügt werden soll.</param>
      <param name="item">Das in die Gruppe einzufügende Objekt.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Siehe Schnittstelle <see cref="T:System.Collections.Generic.IList`1" />.</summary>
      <param name="index" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Entfernt das Element am angegebenen Index.</summary>
      <param name="index">Der nullbasierte Index des zu entfernenden Elements.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary>Fügt der aktuellen Gruppe ein Element hinzu und gibt einen Wert zurück, um anzugeben, ob das Element erfolgreich hinzugefügt wurde.</summary>
      <param name="item">Der Element, das zur Menge hinzugefügt wird.</param>
      <returns>
        <see langword="true" />, wenn das Element der Gruppe hinzugefügt wurde. <see langword="false" />, wenn das Element bereits in der Gruppe enthalten ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Entfernt alle Elemente in der angegebenen Auflistung aus der aktuellen Gruppe.</summary>
      <param name="other">Die Auflistung der Elemente, die aus der Gruppe entfernt werden sollen.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Ändert die aktuelle Gruppe, sodass sie nur Elemente enthält, die in einer angegebenen Auflistung ebenfalls enthalten sind.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Ändert die aktuelle Gruppe, sodass sie nur Elemente enthält, die entweder in der aktuellen Gruppe oder in der angegebenen Auflistung, nicht jedoch in beiden vorhanden sind.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Ändert die aktuelle Gruppe, sodass sie alle Elemente enthält, die sowohl in der aktuellen Gruppe als auch in der angegebenen Auflistung vorhanden sind.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Kopiert die Elemente der Gruppe in ein Array, wobei an einem bestimmten Arrayindex begonnen wird.</summary>
      <param name="array">Das eindimensionale Array, das das Ziel der aus der Gruppe kopierten Elemente ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="index">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>Siehe Schnittstelle <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>Siehe <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns>Ein Enumeratorobjekt, mithilfe dessen eine Auflistung durchlaufen werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)">
      <summary>Fügt der Gruppe ein Element hinzu.</summary>
      <param name="value">Das Objekt, das der Gruppe hinzugefügt werden soll.</param>
      <returns>Die Position, an der das neue Element eingefügt wurde, oder -1, um anzugeben, dass das Element nicht in die Auflistung eingefügt wurde.</returns>
      <exception cref="T:System.NotSupportedException">Die Gruppe ist schreibgeschützt oder weist eine feste Größe auf.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear">
      <summary>Entfernt alle Elemente aus der Gruppe.</summary>
      <exception cref="T:System.NotSupportedException">Ausgelöst in allen Fällen.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)">
      <summary>Ermittelt, ob die Gruppe einen bestimmten Wert enthält.</summary>
      <param name="value">Das Objekt, das in der Gruppe gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn das Objekt in der Gruppe gefunden wird, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Bestimmt den Index eines bestimmten Elements in der Gruppe.</summary>
      <param name="value">Das Objekt, das in der Gruppe gesucht werden soll.</param>
      <returns>Der Index von <paramref name="value" />, wenn das Element in der Liste gefunden wird, andernfalls -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Fügt ein Element am angegebenen Index in die Gruppe ein.</summary>
      <param name="index">Der nullbasierte Index, an dem <paramref name="value" /> eingefügt werden soll.</param>
      <param name="value">Das in die Gruppe einzufügende Objekt.</param>
      <exception cref="T:System.NotSupportedException">Die Gruppe ist schreibgeschützt oder weist eine feste Größe auf.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize">
      <summary>Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Collections.IList" /> eine feste Größe hat.</summary>
      <returns>
        <see langword="true" />, wenn das <see cref="T:System.Collections.IList" /> eine feste Größe aufweist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob die <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist.</summary>
      <returns>
        <see langword="true" />, wenn das <see cref="T:System.Collections.Generic.ICollection`1" /> schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)">
      <summary>Ruft die <see cref="T:System.Object" />-Klasse am angegebenen Index ab oder legt diese fest.</summary>
      <param name="index">Der Index.</param>
      <returns>Die <see cref="T:System.Object" />.</returns>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)">
      <summary>Entfernt das erste Vorkommen eines bestimmten Objekts aus der Gruppe.</summary>
      <param name="value">Das aus der Gruppe zu entfernende Objekt.</param>
      <exception cref="T:System.NotSupportedException">Die Gruppe ist schreibgeschützt oder weist eine feste Größe auf.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Entfernt das Element am angegebenen Index aus der Gruppe.</summary>
      <param name="index">Der nullbasierte Index des zu entfernenden Elements.</param>
      <exception cref="T:System.NotSupportedException">Die Gruppe ist schreibgeschützt oder weist eine feste Größe auf.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary>Fügt dieser unveränderlichen Gruppe das angegebene Element hinzu.</summary>
      <param name="value">Das hinzuzufügende Element.</param>
      <returns>Eine neue Gruppe mit dem hinzugefügten Element oder diese Gruppe, wenn das Element bereits in der Gruppe enthalten ist.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary>Ruft eine leere unveränderliche Gruppe ab, die dieselbe Sortierungs- und Reihenfolgensematik wie diese Instanz besitzt.</summary>
      <returns>Eine leere unveränderliche Gruppe, die dieselbe Sortierungs- und Reihenfolgensematik wie diese Instanz besitzt.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Entfernt die Elemente in der angegebenen Auflistung aus der aktuellen unveränderlichen Gruppe.</summary>
      <param name="other">Die Elemente, die aus der Gruppe entfernt werden sollen.</param>
      <returns>Die neue Gruppe, aus der die Elemente entfernt wurden; oder die ursprüngliche Gruppe, wenn keines der Elemente in der Gruppe enthalten war.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Erstellt eine unveränderliche Gruppe, die Elemente enthält, die sowohl in dieser Gruppe als auch in der angegebenen Gruppe vorhanden sind.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>Eine neue unveränderliche Gruppe, die alle Elemente enthält, die in beiden Gruppen vorhanden sind.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary>Fügt dieser unveränderlichen Gruppe das angegebene Element hinzu.</summary>
      <param name="value">Das zu entfernende Element.</param>
      <returns>Eine neue Gruppe, aus der das angegebene Element entfernt wurde, oder die aktuelle Gruppe, wenn das Element in der Gruppe nicht gefunden wurde.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Erstellt eine unveränderliche Gruppe, die nur Elemente enthält, die entweder in der aktuellen Gruppe oder in der angegebenen Auflistung, aber nicht in beiden vorhanden sind.</summary>
      <param name="other">Die Auflistung, die mit der aktuellen Gruppe verglichen werden soll.</param>
      <returns>Eine neue Gruppe mit den Elementen, die nur in der aktuellen Gruppe oder in der angegebenen Auflistung, aber nicht in beiden vorhanden sind.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Erstellt eine unveränderliche Gruppe, die alle Elemente enthält, die entweder in der aktuellen Gruppe oder in der angegebenen Auflistung vorhanden sind.</summary>
      <param name="other">Die Auflistung, aus der Elemente hinzugefügt werden sollen.</param>
      <returns>Eine neue unveränderliche Gruppe mit den hinzugefügten Elementen; oder die ursprüngliche Gruppe, wenn alle Elemente bereits in der Gruppe enthalten waren.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder">
      <summary>Erstellt eine Auflistung, die denselben Inhalt wie diese unveränderliche sortierte Gruppe aufweist und mithilfe änderbarer Standardschnittstellen effizient bearbeitet werden kann.</summary>
      <returns>Der Generator für sortierte Gruppen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)">
      <summary>Durchsucht die Gruppe nach einem angegebenen Wert und gibt ggf. den identischen Wert zurück, sofern vorhanden.</summary>
      <param name="equalValue">Der zu suchende Wert.</param>
      <param name="actualValue">Der bei der Suche in der Gruppe gefundene Wert, oder der ursprüngliche Wert, wenn die Suche keine Übereinstimmung ergeben hat.</param>
      <returns>Ein Wert, der angibt, ob die Suche erfolgreich war.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Fügt dieser unveränderlichen sortierten Gruppe eine bestimmte Gruppe von Elementen hinzu.</summary>
      <param name="other">Die hinzuzufügenden Elemente.</param>
      <returns>Die neue Gruppe mit den hinzugefügten Elementen; oder die ursprüngliche Gruppe, wenn alle Elemente bereits in der Gruppe enthalten waren.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})">
      <summary>Gibt die unveränderliche sortierte Gruppe mit dem angegebenen Schlüsselvergleich zurück.</summary>
      <param name="comparer">Der zu suchende Vergleich.</param>
      <returns>Die unveränderliche sortierte Gruppe mit dem angegebenen Schlüsselvergleich.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack">
      <summary>Stellt eine Reihe von Initialisierungsmethoden für Instanzen der <see cref="T:System.Collections.Immutable.ImmutableStack`1" /> Klasse bereit.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1">
      <summary>Erstellt einen leeren unveränderlichen Stapel.</summary>
      <typeparam name="T">Der Typ der Elemente, die im unveränderlichen Stapel gespeichert werden.</typeparam>
      <returns>Ein leerer unveränderlicher Stapel.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0)">
      <summary>Erstellt einen neuen unveränderlichen Stapel, der das angegebene Element enthält.</summary>
      <param name="item">Das Element, mit dem der Stapel vorab aufgefüllt wird.</param>
      <typeparam name="T">Der Typ der Elemente im unveränderlichen Stapel.</typeparam>
      <returns>Eine neue unveränderliche Auflistung, die das angegebene Element enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0[])">
      <summary>Erstellt einen neuen unveränderlichen Stapel, der das angegebene Array von Elementen enthält.</summary>
      <param name="items">Ein Array, das die Elemente enthält, um den Stapel vorab aufzufüllen.</param>
      <typeparam name="T">Der Typ der Elemente im unveränderlichen Stapel.</typeparam>
      <returns>Ein neuer unveränderlicher Stapel, der die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Erstellt einen neuen unveränderlichen Stapel, der die angegebenen Elemente enthält.</summary>
      <param name="items">Die Elemente, die zum Stapel vor dessen Unveränderlichkeit hinzugefügt werden.</param>
      <typeparam name="T">Der Typ der Elemente im Stapel.</typeparam>
      <returns>Ein unveränderlicher Stapel, der die angegebenen Elemente enthält.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Pop``1(System.Collections.Immutable.IImmutableStack{``0},``0@)">
      <summary>Entfernt das angegebene Element aus einem unveränderlichen Stapel.</summary>
      <param name="stack">Der Stapel, der geändert werden soll.</param>
      <param name="value">Das Element, das aus dem Stapel entfernt werden soll.</param>
      <typeparam name="T">Der Typ des Elements, das im Stapel enthalten ist.</typeparam>
      <returns>Ein Stapel; nie <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException">Der Stapel ist leer.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1">
      <summary>Stellt einen unveränderlichen Stapel dar.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="T">Der Typ des Elements im Stapel.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Clear">
      <summary>Entfernt alle Objekte aus dem unveränderlichen Stapel.</summary>
      <returns>Ein leerer unveränderlicher Stapel.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Empty">
      <summary>Ruft einen leeren unveränderlichen Stapel ab.</summary>
      <returns>Ein leerer unveränderlicher Stapel.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1.Enumerator">
      <summary>Listet den Inhalt von einem unveränderlichen Stapel auf, ohne Arbeitsspeicher zuzuweisen.  
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Enumerator.Current">
      <summary>Ruft das Element an der aktuellen Position des Enumerators ab.</summary>
      <returns>Ruft das Element an der aktuellen Position des Enumerators ab.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Enumerator.MoveNext">
      <summary>Setzt den Enumerator auf das nächste Element des unveränderlichen Stapels.</summary>
      <returns>
        <see langword="true" />, wenn der Enumerator erfolgreich auf das nächste Element gesetzt wurde, <see langword="false" />, wenn der Enumerator das Ende der Auflistung überschritten hat.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der den unveränderlichen Stapel durchläuft.</summary>
      <returns>Ein Enumerator, der zum Durchlaufen des Stapels verwendet werden kann.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.IsEmpty">
      <summary>Ruft einen Wert ab, der angibt, ob diese Instanz des unveränderlichen Stapels leer ist.</summary>
      <returns>
        <see langword="true" />, wenn diese Instanz leer ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Peek">
      <summary>Gibt das Objekt oben im Stapel zurück, ohne es zu entfernen.</summary>
      <returns>Das Objekt am Anfang des Stapels.</returns>
      <exception cref="T:System.InvalidOperationException">Der Stapel ist leer.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.PeekRef">
      <summary>Ruft einen schreibgeschützten Verweis auf das Element am Anfang des Stapels ab.</summary>
      <returns>Ein schreibgeschützter Verweis auf das Element am Anfang des Stapels.</returns>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn der Stapel leer ist.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop">
      <summary>Entfernt das oberste Element aus dem unveränderlichen Stapel und gibt den Stapel nach dem Entfernen zurück.</summary>
      <returns>Ein Stapel; nie <see langword="null" />.</returns>
      <exception cref="T:System.InvalidOperationException">Der Stapel ist leer.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop(`0@)">
      <summary>Entfernt das angegebene Element aus dem unveränderlichen Stapel und gibt den Stapel nach dem Entfernen zurück.</summary>
      <param name="value">Der Wert, der aus dem Stapel entfernt werden soll.</param>
      <returns>Ein Stapel; nie <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Push(`0)">
      <summary>Fügt ein Objekt am Anfang des unveränderlichen Stapels ein und gibt den neuen Stapel zurück.</summary>
      <param name="value">Das Objekt, das auf dem Stapel abgelegt werden soll.</param>
      <returns>Der neue Stapel.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die Auflistung durchläuft.</summary>
      <returns>Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns>Ein <see cref="T:System.Collections.IEnumerator" />-Objekt, das zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Clear">
      <summary>Entfernt alle Elemente aus dem unveränderlichen Stapel.</summary>
      <returns>Der leere unveränderliche Stapel.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Pop">
      <summary>Entfernt das Element am Anfang des unveränderlichen Stapels und gibt den neuen Stapel zurück.</summary>
      <returns>Der neue Stapel; nie <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Push(`0)">
      <summary>Fügt ein Element am Anfang des unveränderlichen Stapels ein und gibt den neuen Stapel zurück.</summary>
      <param name="value">Das Element, das auf dem Stapel abgelegt werden soll.</param>
      <returns>Der neue Stapel.</returns>
    </member>
    <member name="T:System.Linq.ImmutableArrayExtensions">
      <summary>LINQ-Erweiterungsmethodenüberschreibungen, die eine höhere Effizienz für <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> bieten als die standardmäßigen LINQ-Methoden 
 NuGet-Paket: System.Collections.Immutable (Grundlegendes zu unveränderlichen Collections und deren Installation)</summary>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})">
      <summary>Wendet eine Funktion auf eine Sequenz von Elementen auf kumulative Art und Weise an.</summary>
      <param name="immutableArray">Die Auflistung, auf die die Funktion angewendet werden soll.</param>
      <param name="func">Eine Funktion, die für jedes Element auf kumulative Art und Weise aufgerufen werden soll.</param>
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>Der endgültige Wert, nachdem die kumulative Funktion auf alle Elemente angewendet wurde.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})">
      <summary>Wendet eine Funktion auf eine Sequenz von Elementen auf kumulative Art und Weise an.</summary>
      <param name="immutableArray">Die Auflistung, auf die die Funktion angewendet werden soll.</param>
      <param name="seed">Der erste Akkumulatorwert.</param>
      <param name="func">Eine Funktion, die für jedes Element auf kumulative Art und Weise aufgerufen werden soll.</param>
      <typeparam name="TAccumulate">Der Typ des kumulierten Werts.</typeparam>
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>Der letzte Akkumulatorwert.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})">
      <summary>Wendet eine Funktion auf eine Sequenz von Elementen auf kumulative Art und Weise an.</summary>
      <param name="immutableArray">Die Auflistung, auf die die Funktion angewendet werden soll.</param>
      <param name="seed">Der erste Akkumulatorwert.</param>
      <param name="func">Eine Funktion, die für jedes Element auf kumulative Art und Weise aufgerufen werden soll.</param>
      <param name="resultSelector" />
      <typeparam name="TAccumulate">Der Typ des kumulierten Werts.</typeparam>
      <typeparam name="TResult">Der Typ des von der Ergebnisauswahl zurückgegebenen Ergebnisses.</typeparam>
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>Der letzte Akkumulatorwert.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Ruft einen Wert ab, der angibt, ob alle Elemente in diesem Array einer angegebenen Bedingung entsprechen.</summary>
      <param name="immutableArray">Das Array, das auf Übereinstimmungen geprüft werden soll.</param>
      <param name="predicate">Das Prädikat.</param>
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>
        <see langword="true" />, wenn jedes Element der Quellsequenz den Test im angegebenen Prädikat besteht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Ruft einen Wert ab, der angibt, ob das Array Elemente enthält.</summary>
      <param name="immutableArray">Das Array, das auf Übereinstimmungen geprüft werden soll.</param>
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>
        <see langword="true" />, wenn das Array Elemente enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Ruft einen Wert ab, der angibt, ob das Array Elemente enthält, die eine bestimmte Bedingung erfüllen.</summary>
      <param name="immutableArray">Das Array, das auf Übereinstimmungen geprüft werden soll.</param>
      <param name="predicate">Der Delegat, der die Bedingung definiert, der ein Element entsprechen soll.</param>
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>
        <see langword="true" />, wenn ein Element der angegebenen Bedingung entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Gibt einen Wert zurück, der angibt, ob diese Auflistung Elemente enthält.</summary>
      <param name="builder">Der Generator, der zum Suchen nach Übereinstimmungen verwendet werden soll.</param>
      <typeparam name="T">Der Typ der Elemente im Array.</typeparam>
      <returns>
        <see langword="true" />, wenn der Array-Generator Elemente enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary>Gibt das Element an einem angegebenen Index in einem Array zurück.</summary>
      <param name="immutableArray">Das Array, in dem ein Element gesucht werden soll.</param>
      <param name="index">Der Index des abzurufenden Elements.</param>
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>Das Element am angegebenen Index.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary>Gibt das Element an einem angegebenen Index in einer Sequenz oder einen Standardwert zurück, wenn der Index außerhalb des gültigen Bereichs liegt.</summary>
      <param name="immutableArray">Das Array, in dem ein Element gesucht werden soll.</param>
      <param name="index">Der Index des abzurufenden Elements.</param>
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>Das Element am angegebenen Index oder der Standardwert, wenn der Index nicht gefunden wird.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Gibt das erste Element in einem Array zurück.</summary>
      <param name="immutableArray">Das Array, von dem ein Element abgerufen werden soll.</param>
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>Das erste Element im Array.</returns>
      <exception cref="T:System.InvalidOperationException">Das Array ist leer.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Gibt das erste Element in einer Sequenz zurück, das eine angegebene Bedingung erfüllt.</summary>
      <param name="immutableArray">Das Array, von dem ein Element abgerufen werden soll.</param>
      <param name="predicate">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>Das erste Element in der Liste, wenn es die von <paramref name="predicate" /> angegebene Bedingung erfüllt.</returns>
      <exception cref="T:System.InvalidOperationException">Das Array ist leer.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Gibt das erste Element in der Auflistung zurück.</summary>
      <param name="builder">Der Generator, von dem ein Element abgerufen werden soll.</param>
      <typeparam name="T">Der Typ der Elemente im Array.</typeparam>
      <returns>Das erste Element in der Liste.</returns>
      <exception cref="T:System.InvalidOperationException">Das Array ist leer.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Gibt das erste Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz keine Elemente enthält.</summary>
      <param name="immutableArray">Das Array, aus dem Elemente abgerufen werden sollen.</param>
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>Das erste Element in der Liste, falls gefunden, andernfalls der Standardwert für den Elementtyp.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Gibt das erste Element der Sequenz zurück, das eine Bedingung erfüllt, oder einen Standardwert, wenn ein solches Element nicht gefunden wird.</summary>
      <param name="immutableArray">Das Array, aus dem Elemente abgerufen werden sollen.</param>
      <param name="predicate">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>Das erste Element in der Liste, falls gefunden, andernfalls der Standardwert für den Elementtyp.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Gibt das erste Element in der Auflistung oder den Standardwert zurück, wenn die Auflistung leer ist.</summary>
      <param name="builder">Der Generator, von dem ein Element abgerufen werden soll.</param>
      <typeparam name="T">Der Elementtyp im Generator.</typeparam>
      <returns>Das erste Element in der Liste, falls gefunden, andernfalls der Standardwert für den Elementtyp.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Gibt das letzte Element des Arrays zurück.</summary>
      <param name="immutableArray">Das Array, aus dem Elemente abgerufen werden sollen.</param>
      <typeparam name="T">Der Typ des Elements, das im Array enthalten ist.</typeparam>
      <returns>Das letzte Element im Array.</returns>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn die Auflistung leer ist.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Gibt das letzte Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt.</summary>
      <param name="immutableArray">Das Array, aus dem Elemente abgerufen werden sollen.</param>
      <param name="predicate">Der Delegat, der die Bedingungen für das abzurufende Element definiert.</param>
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>Das letzte Element des Arrays, das die <paramref name="predicate" />-Bedingung erfüllt.</returns>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn die Auflistung leer ist.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Gibt das letzte Element in der Auflistung zurück.</summary>
      <param name="builder">Der Generator, aus dem Elemente abgerufen werden sollen.</param>
      <typeparam name="T">Der Elementtyp im Generator.</typeparam>
      <returns>Das letzte Element im Generator.</returns>
      <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn die Auflistung leer ist.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Gibt das letzte Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz keine Elemente enthält.</summary>
      <param name="immutableArray">Das Array, aus dem Elemente abgerufen werden sollen.</param>
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>Gibt das letzte Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz keine Elemente enthält.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Gibt das letzte Element einer Sequenz, das eine Bedingung erfüllt, oder einen Standardwert zurück, wenn ein solches Element nicht gefunden wird.</summary>
      <param name="immutableArray">Das Array, aus dem ein Element abgerufen werden soll.</param>
      <param name="predicate">Der Delegat, der die Bedingungen für das Element definiert, nach dem gesucht werden soll.</param>
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>Gibt das letzte Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz keine Elemente enthält.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Gibt das letzte Element in der Auflistung oder den Standardwert zurück, wenn die Auflistung leer ist.</summary>
      <param name="builder">Der Generator, von dem ein Element abgerufen werden soll.</param>
      <typeparam name="T">Der Elementtyp im Generator.</typeparam>
      <returns>Gibt das letzte Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz keine Elemente enthält.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary>Projiziert jedes Element einer Sequenz in ein neues Format.</summary>
      <param name="immutableArray">Das unveränderliche Array zum Auswählen von Elementen.</param>
      <param name="selector">Eine Transformationsfunktion, die auf jedes Element angewendet werden soll.</param>
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <typeparam name="TResult">Der Typ des Ergebniselements.</typeparam>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente das Ergebnis des Aufrufs einer Transformierenfunktion für jedes Element der Quelle sind.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projiziert jedes Element einer Sequenz in ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, fasst die resultierenden Sequenzen zu einer einzigen Sequenz zusammen, und ruft für jedes Element in dieser Sequenz eine Ergebnisauswahlfunktion auf.</summary>
      <param name="immutableArray">Das unveränderliche Array.</param>
      <param name="collectionSelector">Eine Transformationsfunktion, die auf jedes Element der Eingabesequenz angewendet werden soll</param>
      <param name="resultSelector">Eine Transformationsfunktion, die auf jedes Element der Zwischensequenz angewendet werden soll</param>
      <typeparam name="TSource">Der Typ der Elemente von <paramref name="immutableArray" />.</typeparam>
      <typeparam name="TCollection">Der Typ der Zwischenelemente, die von <paramref name="collectionSelector" /> erfasst werden.</typeparam>
      <typeparam name="TResult">Der Typ der Elemente in der resultierenden Sequenz.</typeparam>
      <returns>Ein <see cref="T:System.Collections.Generic.IEnumerable`1" />, dessen Elemente erzeugt werden, indem für jedes Element von <paramref name="collectionSelector" /> die 1:n-Transformationsfunktion <paramref name="immutableArray" /> aufgerufen wird, und anschließend jedes Element der Sequenz und dessen entsprechendes Quellelement einem Ergebniselement zugeordnet werden.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Bestimmt, ob zwei Sequenzen durch einen Gleichheitsvergleich als gleich bestimmt werden.</summary>
      <param name="immutableArray">Das für den Vergleich zu verwendende Array.</param>
      <param name="items">Die für den Vergleich zu verwendenden Elemente.</param>
      <param name="comparer">Der Vergleich. der für die Gleichheitsprüfung verwendet werden soll.</param>
      <typeparam name="TDerived">Der Typ des Elements im verglichenen Array.</typeparam>
      <typeparam name="TBase">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>
        <see langword="true" />, um anzugeben, dass die Sequenzen gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Bestimmt, ob zwei Sequenzen durch einen Gleichheitsvergleich als gleich bestimmt werden.</summary>
      <param name="immutableArray">Das für den Vergleich zu verwendende Array.</param>
      <param name="items">Die für den Vergleich zu verwendenden Elemente.</param>
      <param name="comparer">Der Vergleich. der für die Gleichheitsprüfung verwendet werden soll.</param>
      <typeparam name="TDerived">Der Typ des Elements im verglichenen Array.</typeparam>
      <typeparam name="TBase">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>
        <see langword="true" />, um anzugeben, dass die Sequenzen gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})">
      <summary>Bestimmt, ob zwei Sequenzen durch einen Gleichheitsvergleich als gleich bestimmt werden.</summary>
      <param name="immutableArray">Das für den Vergleich zu verwendende Array.</param>
      <param name="items">Die für den Vergleich zu verwendenden Elemente.</param>
      <param name="predicate">Der Vergleich. der für die Gleichheitsprüfung verwendet werden soll.</param>
      <typeparam name="TDerived">Der Typ des Elements im verglichenen Array.</typeparam>
      <typeparam name="TBase">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>
        <see langword="true" />, um anzugeben, dass die Sequenzen gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Gibt das einzige Element einer Sequenz zurück und löst eine Ausnahme aus, wenn nicht genau ein Element in der Sequenz vorhanden ist.</summary>
      <param name="immutableArray">Das Array, aus dem das Element abgerufen werden soll.</param>
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>Das Element in der Sequenz.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Gibt das einzige Element einer Sequenz zurück, das eine angegebene Bedingung erfüllt, und löst eine Ausnahme aus, wenn mehrere solche Elemente vorhanden sind.</summary>
      <param name="immutableArray" />
      <param name="predicate" />
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>Gibt <see cref="T:System.Boolean" /> zurück.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Gibt das einzige Element einer Sequenz oder einen Standardwert zurück, wenn die Sequenz leer ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente in der Sequenz vorhanden sind.</summary>
      <param name="immutableArray">Das Array.</param>
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>Das Element im Array oder der Standardwert, wenn das Array leer ist.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> enthält mehr als ein Element.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Gibt das einzige Element einer Sequenz, das eine angegebene Bedingung erfüllt, oder einen Standardwert zurück, wenn kein solches Element vorhanden ist. Diese Methode löst eine Ausnahme aus, wenn mehrere Elemente die Bedingung erfüllen.</summary>
      <param name="immutableArray">Das Array, aus dem das Element abgerufen werden soll.</param>
      <param name="predicate">Die Bedingung, die das Element erfüllen muss.</param>
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>Das Element, sofern es die angegebene Bedingung erfüllt, andernfalls das Standardelement.</returns>
      <exception cref="T:System.InvalidOperationException">Die Bedingung in <paramref name="predicate" /> wird von mehreren Elementen erfüllt.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Kopiert den Inhalt dieses Arrays in ein änderbares Array.</summary>
      <param name="immutableArray" />
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>Das neu instanziierte Array.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})">
      <summary>Erstellt ein Wörterbuch basierend auf dem Inhalt dieses Arrays.</summary>
      <param name="immutableArray">Das Array, aus dem ein Wörterbuch erstellt werden soll.</param>
      <param name="keySelector">Die Schlüsselauswahl.</param>
      <typeparam name="TKey">Der Typ des Schlüssels.</typeparam>
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>Das neu initialisierte Wörterbuch.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Erstellt ein Wörterbuch basierend auf dem Inhalt dieses Arrays.</summary>
      <param name="immutableArray">Das Array, aus dem ein Wörterbuch erstellt werden soll.</param>
      <param name="keySelector">Die Schlüsselauswahl.</param>
      <param name="comparer">Der Vergleich, mit dem das Wörterbuch initialisiert werden soll.</param>
      <typeparam name="TKey">Der Typ des Schlüssels.</typeparam>
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>Das neu initialisierte Wörterbuch.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})">
      <summary>Erstellt ein Wörterbuch basierend auf dem Inhalt dieses Arrays.</summary>
      <param name="immutableArray">Das Array, aus dem ein Wörterbuch erstellt werden soll.</param>
      <param name="keySelector">Die Schlüsselauswahl.</param>
      <param name="elementSelector">Die Elementauswahl.</param>
      <typeparam name="TKey">Der Typ des Schlüssels.</typeparam>
      <typeparam name="TElement">Der Typ des Elements.</typeparam>
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>Das neu initialisierte Wörterbuch.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Erstellt ein Wörterbuch basierend auf dem Inhalt dieses Arrays.</summary>
      <param name="immutableArray">Das Array, aus dem ein Wörterbuch erstellt werden soll.</param>
      <param name="keySelector">Die Schlüsselauswahl.</param>
      <param name="elementSelector">Die Elementauswahl.</param>
      <param name="comparer">Der Vergleich, mit dem das Wörterbuch initialisiert werden soll.</param>
      <typeparam name="TKey">Der Typ des Schlüssels.</typeparam>
      <typeparam name="TElement">Der Typ des Elements.</typeparam>
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>Das neu initialisierte Wörterbuch.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Filtert eine Sequenz von Werten basierend auf einem Prädikat.</summary>
      <param name="immutableArray">Das zu filternde Array.</param>
      <param name="predicate">Die Bedingung, die zum Filtern des Arrayinhalts verwendet werden soll.</param>
      <typeparam name="T">Der Typ des Elements, das in der Auflistung enthalten ist.</typeparam>
      <returns>Gibt <see cref="T:System.Collections.Generic.IEnumerable`1" /> mit Elementen zurück, die die Bedingung erfüllen.</returns>
    </member>
  </members>
</doc>
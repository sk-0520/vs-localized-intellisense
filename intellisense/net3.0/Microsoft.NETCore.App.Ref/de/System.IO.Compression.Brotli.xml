<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.IO.Compression.Brotli</name>
  </assembly>
  <members>
    <member name="T:System.IO.Compression.BrotliDecoder" />
    <member name="M:System.IO.Compression.BrotliDecoder.Decompress(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@)">
      <param name="source" />
      <param name="destination" />
      <param name="bytesConsumed" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.IO.Compression.BrotliDecoder.Dispose" />
    <member name="M:System.IO.Compression.BrotliDecoder.TryDecompress(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <param name="source" />
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="T:System.IO.Compression.BrotliEncoder" />
    <member name="M:System.IO.Compression.BrotliEncoder.#ctor(System.Int32,System.Int32)">
      <param name="quality" />
      <param name="window" />
    </member>
    <member name="M:System.IO.Compression.BrotliEncoder.Compress(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)">
      <param name="source" />
      <param name="destination" />
      <param name="bytesConsumed" />
      <param name="bytesWritten" />
      <param name="isFinalBlock" />
    </member>
    <member name="M:System.IO.Compression.BrotliEncoder.Dispose" />
    <member name="M:System.IO.Compression.BrotliEncoder.Flush(System.Span{System.Byte},System.Int32@)">
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.IO.Compression.BrotliEncoder.GetMaxCompressedLength(System.Int32)">
      <param name="inputSize" />
    </member>
    <member name="M:System.IO.Compression.BrotliEncoder.TryCompress(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <param name="source" />
      <param name="destination" />
      <param name="bytesWritten" />
    </member>
    <member name="M:System.IO.Compression.BrotliEncoder.TryCompress(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32,System.Int32)">
      <param name="source" />
      <param name="destination" />
      <param name="bytesWritten" />
      <param name="quality" />
      <param name="window" />
    </member>
    <member name="T:System.IO.Compression.BrotliStream">
      <summary>Stellt Methoden und Eigenschaften bereit, die zum Komprimieren und Dekomprimieren von Streams über die Brotli-Datenformatspezifikation verwendet werden.</summary>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionLevel)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.IO.Compression.BrotliStream" />-Klasse mithilfe des angegebenen Stream- und Komprimierungsgrads.</summary>
      <param name="stream">Der zu komprimierende Stream.</param>
      <param name="compressionLevel">Einer der Enumerationswerte, der angibt, ob die Geschwindigkeit oder Komprimierungsleistungsfähigkeit priorisiert wird, wenn der Stream komprimiert wird.</param>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionLevel,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.IO.Compression.BrotliStream" />-Klasse unter Verwendung des angegebenen Streams und der Komprimierungsebene und lässt den Stream optional geöffnet.</summary>
      <param name="stream">Der zu komprimierende Stream.</param>
      <param name="compressionLevel">Einer der Enumerationswerte, der angibt, ob die Geschwindigkeit oder Komprimierungsleistungsfähigkeit priorisiert wird, wenn der Stream komprimiert wird.</param>
      <param name="leaveOpen">
        <see langword="true" />, um den Stream offen zu lassen, nachdem das <see cref="T:System.IO.Compression.BrotliStream" />-Objekt freigegeben wurde, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.IO.Compression.BrotliStream" />-Klasse mithilfe des angegebenen Stream- und Komprimierungsmodus.</summary>
      <param name="stream">Der zu komprimierende Stream.</param>
      <param name="mode">Einer der Enumerationswerte, der angibt, ob der Stream gelesen oder geschrieben wird.</param>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.IO.Compression.BrotliStream" />-Klasse unter Verwendung des angegebenen Streams und des Komprimierungsmodus und lässt den Stream optional geöffnet.</summary>
      <param name="stream">Der zu komprimierende Stream.</param>
      <param name="mode">Einer der Enumerationswerte, der angibt, ob der Stream gelesen oder geschrieben wird.</param>
      <param name="leaveOpen" />
    </member>
    <member name="P:System.IO.Compression.BrotliStream.BaseStream">
      <summary>Ruft einen Verweis auf den zugrunde liegenden Stream ab.</summary>
      <returns>Ein Streamobjekt, das den zugrunde liegenden Stream darstellt.</returns>
      <exception cref="T:System.ObjectDisposedException">Der zugrunde liegende Stream ist geschlossen.</exception>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Beginnt einen asynchronen Lesevorgang. (Verwenden Sie stattdessen die <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />-Methode.)</summary>
      <param name="buffer">Der Puffer, aus dem Daten gelesen werden.</param>
      <param name="offset">Der Byteoffset im <paramref name="array" />, ab dem aus dem Stream gelesene Daten gelesen werden.</param>
      <param name="count">Die maximale Anzahl der zu lesenden Bytes.</param>
      <param name="asyncCallback">Ein optionaler asynchroner Rückruf, der nach Abschluss des Lesevorgangs aufgerufen werden soll.</param>
      <param name="asyncState">Ein vom Benutzer bereitgestelltes Objekt, das diese asynchrone Leseanforderung von anderen Anforderungen unterscheidet.</param>
      <returns>Ein Objekt, das den asynchronen Lesevorgang darstellt, der möglicherweise noch aussteht.</returns>
      <exception cref="T:System.IO.IOException">Die Methode hat versucht, asynchron über das Ende des Streams hinaus zu lesen, oder ein Plattenfehler ist aufgetreten.</exception>
      <exception cref="T:System.ArgumentException">Mindestens eines der Argumente ist ungültig.</exception>
      <exception cref="T:System.ObjectDisposedException">Es wurden Methoden aufgerufen, nachdem der Stream geschlossen wurde.</exception>
      <exception cref="T:System.NotSupportedException">Die aktuelle <see cref="T:System.IO.Compression.BrotliStream" />-Implementierung unterstützt den Lesevorgang nicht.</exception>
      <exception cref="T:System.InvalidOperationException">Dieser Aufruf kann nicht abgeschlossen werden.</exception>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Beginnt einen asynchronen Schreibvorgang. (Verwenden Sie stattdessen die <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />-Methode.)</summary>
      <param name="buffer">Der Puffer, aus dem Daten geschrieben werden.</param>
      <param name="offset">Der Byteoffset im <paramref name="array" />, ab dem Daten aus dem Stream geschrieben werden.</param>
      <param name="count">Die maximale Anzahl der zu schreibenden Bytes.</param>
      <param name="asyncCallback">Ein optionaler asynchroner Rückruf, der nach Abschluss des Schreibvorgangs aufgerufen wird.</param>
      <param name="asyncState">Ein vom Benutzer bereitgestelltes Objekt, das diese asynchrone Schreibanforderung von anderen Anforderungen unterscheidet.</param>
      <returns>Ein Objekt, das den asynchronen Schreibvorgang darstellt, der möglicherweise noch aussteht.</returns>
      <exception cref="T:System.IO.IOException">Die Methode hat versucht, asynchron über das Ende des Streams hinaus zu schreiben, oder ein Plattenfehler ist aufgetreten.</exception>
      <exception cref="T:System.ArgumentException">Mindestens eines der Argumente ist ungültig.</exception>
      <exception cref="T:System.ObjectDisposedException">Es wurden Methoden aufgerufen, nachdem der Stream geschlossen wurde.</exception>
      <exception cref="T:System.NotSupportedException">Die aktuelle <see cref="T:System.IO.Compression.BrotliStream" />-Implementierung unterstützt den Schreibvorgang nicht.</exception>
      <exception cref="T:System.InvalidOperationException">Der Schreibvorgang kann nicht ausgeführt werden, da der Stream geschlossen ist.</exception>
    </member>
    <member name="P:System.IO.Compression.BrotliStream.CanRead">
      <summary>Ruft einen Wert ab, der angibt, ob der Stream Lesevorgänge unterstützt, während eine Datei dekomprimiert wird.</summary>
      <returns>
        <see langword="true" />, wenn der <see cref="T:System.IO.Compression.CompressionMode" />-Wert gleich <see langword="Decompress," /> ist und der zugrunde liegende Stream Lesevorgänge unterstützt und nicht geschlossen ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.Compression.BrotliStream.CanSeek">
      <summary>Ruft einen Wert, der angibt, ob der Stream Suchvorgänge unterstützt.</summary>
      <returns>
        <see langword="false" /> in allen Fällen.</returns>
    </member>
    <member name="P:System.IO.Compression.BrotliStream.CanWrite">
      <summary>Ruft einen Wert, der angibt, ob der Stream Schreibvorgänge unterstützt.</summary>
      <returns>
        <see langword="true" />, wenn der <see cref="T:System.IO.Compression.CompressionMode" />-Wert gleich <see langword="Compress" /> ist und der zugrunde liegende Stream Schreibvorgänge unterstützt und nicht geschlossen ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.DisposeAsync">
      <summary>Gibt die nicht verwalteten Ressourcen, die von der <see cref="T:System.IO.Compression.BrotliStream" /> verwendet werden, asynchron frei.</summary>
      <returns>Eine Aufgabe, die den asynchronen Löschvorgang darstellt.</returns>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.EndRead(System.IAsyncResult)">
      <summary>Wartet, bis der ausstehende asynchrone Lesevorgang abgeschlossen ist. (Verwenden Sie stattdessen die <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />-Methode.)</summary>
      <param name="asyncResult">Der Verweis auf die ausstehende asynchrone Anforderung, die beendet werden soll.</param>
      <returns>Die Anzahl der aus dem Stream gelesenen Bytes. Diese Anzahl kann zwischen 0 und der Anzahl der angeforderten Bytes liegen. <see cref="T:System.IO.Compression.BrotliStream" /> gibt null (0) nur am Ende des Streams zurück, andernfalls wird er blockiert, bis mindestens ein Byte verfügbar ist.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> basiert nicht auf einer <see cref="M:System.IO.Compression.BrotliStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />-Methode im aktuellen Stream.</exception>
      <exception cref="T:System.InvalidOperationException">Der Abschlussvorgang kann nicht ausgeführt werden, da der Stream geschlossen ist.</exception>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.EndWrite(System.IAsyncResult)">
      <summary>Behandelt das Ende eines asynchronen Schreibvorgangs. (Verwenden Sie stattdessen die <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />-Methode.)</summary>
      <param name="asyncResult">Das -Objekt, das den asynchronen Aufruf darstellt.</param>
      <exception cref="T:System.InvalidOperationException">Der zugrunde liegende Stream ist geschlossen oder <see langword="null" />.</exception>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.Flush">
      <summary>Die aktuelle Implementierung dieser Methode hat keine Funktion.</summary>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>Löscht alle Puffer für diesen Brotli-Datenstrom asynchron, veranlasst die Ausgabe aller gepufferten Daten an das zugrunde liegende Gerät und überwacht Abbruchanforderungen.</summary>
      <param name="cancellationToken">Das Token zum Überwachen von Abbruchanforderungen. Der Standardwert ist <see cref="P:System.Threading.CancellationToken.None" />sein.</param>
      <returns>Eine Aufgabe, die die asynchrone Leerung darstellt.</returns>
    </member>
    <member name="P:System.IO.Compression.BrotliStream.Length">
      <summary>Diese Eigenschaft wird nicht unterstützt und löst immer eine <see cref="T:System.NotSupportedException" /> aus.</summary>
      <returns>Ein Long-Wert.</returns>
      <exception cref="T:System.NotSupportedException">Diese Eigenschaft wird für diesen Stream nicht unterstützt.</exception>
    </member>
    <member name="P:System.IO.Compression.BrotliStream.Position">
      <summary>Diese Eigenschaft wird nicht unterstützt und löst immer eine <see cref="T:System.NotSupportedException" /> aus.</summary>
      <returns>Ein Long-Wert.</returns>
      <exception cref="T:System.NotSupportedException">Diese Eigenschaft wird für diesen Stream nicht unterstützt.</exception>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Liest eine Anzahl von dekomprimierten Bytes in das angegebene Bytearray.</summary>
      <param name="buffer">Das Array, das zum Speichern von dekomprimierten Bytes verwendet wird.</param>
      <param name="offset">Das Byteoffset in <paramref name="buffer" />, an dem die gelesenen Bytes platziert werden.</param>
      <param name="count">Die maximale Anzahl der zu lesenden dekomprimierten Bytes.</param>
      <returns>Die Anzahl der Bytes, die im Bytearray dekomprimiert wurden. Wenn das Ende des Streams erreicht worden ist, wird 0 oder die Anzahl der gelesenen Bytes zurückgegeben.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Die <see cref="T:System.IO.Compression.CompressionMode" />-Wert lautete <see langword="Compress" />, als das Objekt erstellt wurde, oder es gibt bereits einen aktiven asynchronen Vorgang für diesen Stream.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> oder <paramref name="count" /> ist kleiner als 0.</exception>
      <exception cref="T:System.ArgumentException">Die Länge von <paramref name="buffer" /> abzüglich des Indexausgangspunkts ist kleiner als <paramref name="count" />.</exception>
      <exception cref="T:System.IO.InvalidDataException">Die Daten haben ein ungültiges Format.</exception>
      <exception cref="T:System.ObjectDisposedException">Der zugrunde liegende Stream ist NULL oder geschlossen.</exception>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.Read(System.Span{System.Byte})">
      <summary>Liest eine Bytesequenz aus dem aktuellen Brotli-Datenstrom in eine Bytespanne und erhöht die Position innerhalb des Brotli-Datenstroms um die Anzahl der gelesen Bytes.</summary>
      <param name="buffer">Ein Bereich im Arbeitsspeicher. Bei der Rückgabe dieser Methode werden die Inhalte dieses Bereichs durch die aus der aktuellen Quelle gelesenen Bytes ersetzt.</param>
      <returns>Die Gesamtanzahl der in den Puffer gelesenen Bytes. Dies kann weniger als die Anzahl der im Puffer zugeordneten Bytes sein, wenn diese Anzahl an Bytes derzeit nicht verfügbar ist, oder 0 (null), wenn das Ende des Streams erreicht ist.</returns>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Liest eine Folge von Bytes asynchron aus dem aktuellen Brotli-Datenstrom, schreibt diese beim angegebenen Index beginnend in ein Bytearray, erhöht die Position im Brotli-Datenstrom um die Anzahl der gelesenen Bytes und überwacht Abbruchsanforderungen.</summary>
      <param name="buffer">Der Puffer, in den die Daten geschrieben werden sollen.</param>
      <param name="offset">Der Byteoffset in <paramref name="buffer" />, ab dem Daten aus dem Brotli-Datenstrom geschrieben werden.</param>
      <param name="count">Die maximale Anzahl der zu lesenden Bytes.</param>
      <param name="cancellationToken">Das Token zum Überwachen von Abbruchanforderungen. Der Standardwert ist <see cref="P:System.Threading.CancellationToken.None" />sein.</param>
      <returns>Eine Aufgabe, die den asynchronen Lesevorgang darstellt, der die Gesamtanzahl der in <paramref name="buffer" /> gelesenen Bytes umschließt. Der Ergebniswert kann niedriger als die Anzahl der angeforderten Bytes sein, wenn die Anzahl an derzeit verfügbaren Bytes kleiner ist als die angeforderte Anzahl, oder sie kann 0 (null) sein, wenn das Ende des Brotli-Datenstroms erreicht ist.</returns>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>Liest eine Folge von Bytes asynchron aus dem aktuellen Brotli-Datenstrom, schreibt diese in einen Bytespeicherbereich, erhöht die Position im Brotli-Datenstrom um die Anzahl der gelesenen Bytes und überwacht Abbruchsanforderungen.</summary>
      <param name="buffer">Der Bereich im Arbeitsspeicher, in den die Daten geschrieben werden sollen.</param>
      <param name="cancellationToken">Das Token zum Überwachen von Abbruchanforderungen. Der Standardwert ist <see cref="P:System.Threading.CancellationToken.None" />sein.</param>
      <returns>Eine Aufgabe, die den asynchronen Lesevorgang darstellt, der die Gesamtanzahl der in den Puffer gelesenen Bytes umschließt. Der Ergebniswert kann geringer als die Anzahl der im Puffer zugeordneten Bytes sein, wenn diese Anzahl an Bytes derzeit nicht verfügbar ist, oder er kann 0 (null) sein, wenn das Ende des Brotli-Datenstroms erreicht ist.</returns>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Diese Eigenschaft wird nicht unterstützt und löst immer eine <see cref="T:System.NotSupportedException" /> aus.</summary>
      <param name="offset">Die Position im Stream.</param>
      <param name="origin">Einer der <see cref="T:System.IO.SeekOrigin" />-Werte.</param>
      <returns>Ein Long-Wert.</returns>
      <exception cref="T:System.NotSupportedException">Diese Eigenschaft wird für diesen Stream nicht unterstützt.</exception>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.SetLength(System.Int64)">
      <summary>Diese Eigenschaft wird nicht unterstützt und löst immer eine <see cref="T:System.NotSupportedException" /> aus.</summary>
      <param name="value">Die Länge des Streams.</param>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Schreibt komprimierte Bytes aus dem angegebenen Bytearray in den zugrunde liegenden Stream.</summary>
      <param name="buffer">Der Puffer, der die zu komprimierenden Daten enthält.</param>
      <param name="offset">Das Byteoffset in <paramref name="array" />, aus dem die Bytes gelesen werden.</param>
      <param name="count">Die maximale Anzahl der zu schreibenden Bytes.</param>
      <exception cref="T:System.ObjectDisposedException">Der Schreibvorgang kann nicht ausgeführt werden, da der Stream geschlossen ist.</exception>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>Schreibt eine Bytesequenz aus einer schreibgeschützten Bytespanne in den aktuellen Brotli-Datenstrom und erhöht die aktuelle Position in diesem Brotli-Datenstrom um die Anzahl der geschriebenen Bytes.</summary>
      <param name="buffer">Ein Bereich im Arbeitsspeicher. Diese Methode kopiert den Inhalt dieses Bereichs in den aktuellen Brotli-Datenstrom.</param>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Schreibt komprimierte Bytes aus dem angegebenen Bytearray asynchron in den zugrunde liegenden Brotli-Datenstrom.</summary>
      <param name="buffer">Der Puffer, der die zu komprimierenden Daten enthält.</param>
      <param name="offset">Der nullbasierte Byteoffset in <paramref name="buffer" />, ab dem Bytes in den Brotli-Datenstrom kopiert werden.</param>
      <param name="count">Die maximale Anzahl der zu schreibenden Bytes.</param>
      <param name="cancellationToken">Das Token zum Überwachen von Abbruchanforderungen. Der Standardwert ist <see cref="P:System.Threading.CancellationToken.None" />sein.</param>
      <returns>Eine Aufgabe, die den asynchronen Schreibvorgang darstellt.</returns>
    </member>
    <member name="M:System.IO.Compression.BrotliStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>Schreibt komprimierte Bytes aus dem angegebenen Bytespeicherbereich asynchron in den zugrunde liegenden Brotli-Datenstrom.</summary>
      <param name="buffer">Der Speicherbereich, aus dem Daten geschrieben werden sollen.</param>
      <param name="cancellationToken">Das Token zum Überwachen von Abbruchanforderungen. Der Standardwert ist <see cref="P:System.Threading.CancellationToken.None" />sein.</param>
      <returns>Eine Aufgabe, die den asynchronen Schreibvorgang darstellt.</returns>
    </member>
  </members>
</doc>
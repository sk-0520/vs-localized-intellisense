<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Serialization.Json</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.Serialization.DateTimeFormat">
      <summary>Spécifie les options du format de date/heure.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.DateTimeFormat.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Serialization.DateTimeFormat" /> à l'aide de la chaîne de format spécifiée.</summary>
      <param name="formatString">Chaîne de format.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DateTimeFormat.#ctor(System.String,System.IFormatProvider)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Serialization.DateTimeFormat" /> avec la chaîne de format et le fournisseur de format spécifiés.</summary>
      <param name="formatString">Chaîne de format.</param>
      <param name="formatProvider">Fournisseur de format.</param>
    </member>
    <member name="P:System.Runtime.Serialization.DateTimeFormat.DateTimeStyles">
      <summary>Obtient ou définit les options de mise en forme qui personnalisent l'analyse de chaîne pour certaines méthodes d'analyse de la date et de l'heure.</summary>
      <returns>Options de mise en forme qui personnalisent l'analyse de chaîne pour plusieurs méthodes d'analyse de date et d'heure.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DateTimeFormat.FormatProvider">
      <summary>Obtient un objet qui contrôle la mise en forme.</summary>
    </member>
    <member name="P:System.Runtime.Serialization.DateTimeFormat.FormatString">
      <summary>Obtient les chaînes de format permettant de contrôler la mise en forme produite lorsqu'une date ou une heure est représentée sous forme de chaîne.</summary>
      <returns>Chaînes de format permettant de contrôler la mise en forme produite lorsqu'une date ou une heure est représentée sous forme de chaîne.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.EmitTypeInformation">
      <summary>Spécifie la fréquence d'émission des informations de type.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.EmitTypeInformation.Always">
      <summary>Est toujours en mesure d'émettre des informations de type.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.EmitTypeInformation.AsNeeded">
      <summary>Selon les besoins, émission des informations de type.</summary>
    </member>
    <member name="F:System.Runtime.Serialization.EmitTypeInformation.Never">
      <summary>Ne jamais émettre des informations de type.</summary>
    </member>
    <member name="T:System.Runtime.Serialization.Json.DataContractJsonSerializer">
      <summary>Sérialise des objets au format JSON (JavaScript Object Notation) et désérialise les données JSON vers des objets. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> pour sérialiser ou désérialiser un objet du type spécifié.</summary>
      <param name="type">Type des instances sérialisées ou désérialisées.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> pour sérialiser ou désérialiser un objet du type spécifié, avec une collection de types connus pouvant être présents dans le graphique d'objets.</summary>
      <param name="type">Type des instances sérialisées ou désérialisées.</param>
      <param name="knownTypes">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Type" /> qui contient les types pouvant être présents dans le graphique d'objets.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Runtime.Serialization.Json.DataContractJsonSerializerSettings)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> pour sérialiser ou désérialiser un objet avec le type et les paramètres de sérialiseur spécifiés.</summary>
      <param name="type">Type des instances sérialisées ou désérialisées.</param>
      <param name="settings">Paramètres de sérialiseur pour le sérialiseur JSON.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> pour sérialiser ou désérialiser un objet d'un type spécifié à l'aide de l'élément racine XML spécifié par un paramètre.</summary>
      <param name="type">Type des instances sérialisées ou désérialisées.</param>
      <param name="rootName">Nom de l'élément XML renfermant le contenu à sérialiser ou désérialiser.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> pour sérialiser ou désérialiser un objet d’un type spécifié à l’aide de l’élément racine XML spécifié par un paramètre, avec une collection des types connus pouvant être présents dans le graphique d’objets.</summary>
      <param name="type">Type des instances sérialisées ou désérialisées.</param>
      <param name="rootName">Nom de l'élément XML renfermant le contenu à sérialiser ou désérialiser. La valeur par défaut est « racine ».</param>
      <param name="knownTypes">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Type" /> qui contient les types pouvant être présents dans le graphique d'objets.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> pour sérialiser ou désérialiser un objet d'un type spécifié à l'aide de l'élément racine XML spécifié par un paramètre de type <see cref="T:System.Xml.XmlDictionaryString" />.</summary>
      <param name="type">Type des instances sérialisées ou désérialisées.</param>
      <param name="rootName">
        <see cref="T:System.Xml.XmlDictionaryString" /> qui contient le nom de l'élément racine du contenu.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> pour sérialiser ou désérialiser un objet d'un type spécifié à l'aide de l'élément racine XML spécifié par un paramètre de type <see cref="T:System.Xml.XmlDictionaryString" />, avec une collection des types connus pouvant être présents dans le graphique d'objets.</summary>
      <param name="type">Type des instances sérialisées ou désérialisées.</param>
      <param name="rootName">
        <see cref="T:System.Xml.XmlDictionaryString" /> qui contient le nom de l'élément racine du contenu.</param>
      <param name="knownTypes">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> de <see cref="T:System.Type" /> qui contient les types pouvant être présents dans le graphique d'objets.</param>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.DateTimeFormat">
      <summary>Obtient le format des éléments de type date et heure dans le graphique d'objet.</summary>
      <returns>Format des éléments de type date et heure dans le graphique d'objet.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.EmitTypeInformation">
      <summary>Obtient ou définit les paramètres du sérialiseur JSON de contrat de données pour l'émission des informations de type.</summary>
      <returns>Paramètres du sérialiseur JSON de contrat de données pour l'émission des informations de type.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.IgnoreExtensionDataObject">
      <summary>Obtient une valeur qui spécifie si les données inconnues sont ignorées lors de la désérialisation, et si l’interface <see cref="T:System.Runtime.Serialization.IExtensibleDataObject" /> est ignorée lors de la sérialisation.</summary>
      <returns>
        <see langword="true" /> pour ignorer des données inconnues et <see cref="T:System.Runtime.Serialization.IExtensibleDataObject" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
      <summary>Obtient une valeur qui spécifie si le <see cref="T:System.Xml.XmlDictionaryReader" /> est positionné au-dessus d'un élément XML représentant un objet pouvant être désérialisé par le sérialiseur.</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlDictionaryReader" /> utilisé pour lire le flux XML mappé depuis JSON.</param>
      <returns>
        <see langword="true" /> si le lecteur est correctement positionné ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.IsStartObject(System.Xml.XmlReader)">
      <summary>Détermine si la classe <see cref="T:System.Xml.XmlReader" /> est positionnée sur un objet pouvant être désérialisé.</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> utilisé pour lire le flux XML.</param>
      <returns>
        <see langword="true" /> si le lecteur est correctement positionné ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.KnownTypes">
      <summary>Obtient une collection des types pouvant être présents dans le graphique d'objets sérialisé à l'aide de cette instance de <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" />.</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> qui contient les types attendus passés en tant que types connus au constructeur <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" />.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.MaxItemsInObjectGraph">
      <summary>Obtient le nombre maximal d'éléments dans un graphique d'objets que le sérialiseur sérialise ou désérialise au cours d'un appel de lecture ou d'écriture.</summary>
      <returns>Nombre maximal d'éléments à sérialiser ou à désérialiser.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Le nombre d'éléments dépasse la valeur maximale.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.IO.Stream)">
      <summary>Lit un flux de document au format JSON (JavaScript Object Notation) et retourne l'objet désérialisé.</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> à lire.</param>
      <returns>L'objet désérialisé.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlDictionaryReader)">
      <summary>Lit le document XML mappé depuis JSON (JavaScript Object Notation) avec un <see cref="T:System.Xml.XmlDictionaryReader" /> et retourne l'objet désérialisé.</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlDictionaryReader" /> utilisé pour lire le document XML mappé de JSON.</param>
      <returns>L'objet désérialisé.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>Lit le document XML mappé depuis JSON avec un <see cref="T:System.Xml.XmlDictionaryReader" /> et retourne l'objet désérialisé ; il vous permet également de spécifier si le sérialiseur doit vérifier s'il est positionné sur un élément approprié avant de tenter de le désérialiser.</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlDictionaryReader" /> utilisé pour lire le document XML mappé de JSON.</param>
      <param name="verifyObjectName">
        <see langword="true" /> pour vérifier si le nom et l'espace de noms de l'élément XML englobant correspondent au nom et à l'espace de noms attendus ; sinon, <see langword="false" /> pour ignorer la vérification. La valeur par défaut est <see langword="true" />.</param>
      <returns>L'objet désérialisé.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlReader)">
      <summary>Lit le document XML mappé depuis JSON (JavaScript Object Notation) avec un <see cref="T:System.Xml.XmlReader" /> et retourne l'objet désérialisé.</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> utilisé pour lire le document XML mappé de JSON.</param>
      <returns>L'objet désérialisé.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)">
      <summary>Lit un document XML mappé depuis JSON avec un <see cref="T:System.Xml.XmlReader" /> et retourne l'objet désérialisé ; il vous permet également de spécifier si le sérialiseur doit vérifier s'il est positionné sur un élément approprié avant de tenter de le désérialiser.</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> utilisé pour lire le document XML mappé de JSON.</param>
      <param name="verifyObjectName">
        <see langword="true" /> pour vérifier si le nom et l'espace de noms de l'élément XML englobant correspondent au nom et à l'espace de noms attendus ; sinon, <see langword="false" /> pour ignorer la vérification. La valeur par défaut est <see langword="true" />.</param>
      <returns>L'objet désérialisé.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.SerializeReadOnlyTypes">
      <summary>Obtient ou définit une valeur qui spécifie s'il faut sérialiser des types de lecture seule.</summary>
      <returns>
        <see langword="true" /> pour sérialiser des types en lecture seule ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.UseSimpleDictionaryFormat">
      <summary>Obtient une valeur qui spécifie s’il faut utiliser un format de dictionnaire simple.</summary>
      <returns>
        <see langword="true" /> pour utiliser un format de dictionnaire simple ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
      <summary>Écrit l'élément XML de fermeture dans un document XML, à l'aide d'un <see cref="T:System.Xml.XmlDictionaryWriter" /> qui peut être mappé avec JSON (JavaScript Object Notation).</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> utilisé pour écrire le document XML à mapper à JSON.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteEndObject(System.Xml.XmlWriter)">
      <summary>Écrit l'élément XML de fermeture dans un document XML, à l'aide d'un <see cref="T:System.Xml.XmlWriter" /> qui peut être mappé avec JSON (JavaScript Object Notation).</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> utilisé pour écrire le document XML mappé à JSON.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.IO.Stream,System.Object)">
      <summary>Sérialise un objet spécifié vers des données JSON (JavaScript Objet Notation) et écrit le JSON obtenu dans un flux.</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> dans lequel il est écrit.</param>
      <param name="graph">Objet contenant les données à écrire dans le flux.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">Le type en cours de sérialisation n'est pas conforme aux règles de contrat de données. Par exemple, l'attribut <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> n'a pas été appliqué au type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">Il y a un problème avec l'instance en cours d'écriture.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">Le nombre maximal d'objets à sérialiser a été dépassé. Vérifiez la propriété <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>Sérialise un objet au format XML pouvant être mappé à JSON (JavaScript Object Notation). Écrit toutes les données d'objet, notamment l'élément XML de début, le contenu et l'élément de fermeture, à l'aide de <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> utilisé pour écrire le flux ou le document XML à mapper à JSON.</param>
      <param name="graph">Objet qui contient les données à écrire.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">Le type en cours de sérialisation n'est pas conforme aux règles de contrat de données. Par exemple, l'attribut <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> n'a pas été appliqué au type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">Il y a un problème avec l'instance en cours d'écriture.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">Le nombre maximal d'objets à sérialiser a été dépassé. Vérifiez la propriété <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.Xml.XmlWriter,System.Object)">
      <summary>Sérialise un objet au format XML pouvant être mappé à JSON (JavaScript Object Notation). Écrit toutes les données d'objet, notamment l'élément XML de début, le contenu et l'élément de fermeture, à l'aide de <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> utilisé pour écrire le document XML à mapper à JSON.</param>
      <param name="graph">Objet qui contient les données à écrire.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">Le type en cours de sérialisation n'est pas conforme aux règles de contrat de données. Par exemple, l'attribut <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> n'a pas été appliqué au type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">Il y a un problème avec l'instance en cours d'écriture.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">Le nombre maximal d'objets à sérialiser a été dépassé. Vérifiez la propriété <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>Écrit le contenu XML qui peut être mappé à JSON (JavaScript Object Notation) à l'aide d'un <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> dans lequel écrire.</param>
      <param name="graph">Objet à écrire.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">Le type en cours de sérialisation n'est pas conforme aux règles de contrat de données. Par exemple, l'attribut <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> n'a pas été appliqué au type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">Il y a un problème avec l'instance en cours d'écriture.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">Le nombre maximal d'objets à sérialiser a été dépassé. Vérifiez la propriété <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)">
      <summary>Écrit le contenu XML qui peut être mappé à JSON (JavaScript Object Notation) à l'aide d'un <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> utilisé pour l'écriture.</param>
      <param name="graph">Objet à écrire.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">Le type en cours de sérialisation n'est pas conforme aux règles de contrat de données. Par exemple, l'attribut <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> n'a pas été appliqué au type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">Il y a un problème avec l'instance en cours d'écriture.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">Le nombre maximal d'objets à sérialiser a été dépassé. Vérifiez la propriété <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>Écrit l'élément XML de début pour sérialiser un objet dans XML qui peut être mappé à JSON (JavaScript Object Notation) à l'aide d'un <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlDictionaryWriter" /> utilisé pour écrire l'élément XML de début.</param>
      <param name="graph">Objet à écrire.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)">
      <summary>Écrit l'élément XML de début pour sérialiser un objet dans XML qui peut être mappé à JSON (JavaScript Object Notation) à l'aide d'un <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" /> utilisé pour écrire l'élément XML de début.</param>
      <param name="graph">Objet à écrire.</param>
    </member>
    <member name="T:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings">
      <summary>Spécifie les paramètres <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" />.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings" />.</summary>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.DateTimeFormat">
      <summary>Obtient ou définit un DateTimeFormat qui définit le format d'affichage des dates et de l'heure approprié pour la culture.</summary>
      <returns>DateTimeFormat qui définit le format d'affichage des dates et de l'heure approprié pour la culture.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.EmitTypeInformation">
      <summary>Obtient ou définit les paramètres du sérialiseur JSON de contrat de données pour l'émission des informations de type.</summary>
      <returns>Paramètres du sérialiseur JSON de contrat de données pour l'émission des informations de type.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.IgnoreExtensionDataObject">
      <summary>Obtient ou définit une valeur qui spécifie s'il faut ignorer les données fournies par une extension de la classe en cours de sérialisation ou de désérialisation.</summary>
      <returns>
        <see langword="true" /> pour ignorer les données fournies par une extension de la classe lors de la sérialisation ou la désérialisation de la classe, sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.KnownTypes">
      <summary>Obtient ou définit une collection des types pouvant être présents dans le graphique d'objets sérialisé à l'aide de l'instance DataContractJsonSerializerSettings.</summary>
      <returns>Collection des types pouvant être présents dans le graphique d'objets sérialisé à l'aide de cette instance DataContractJsonSerializerSettings.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.MaxItemsInObjectGraph">
      <summary>Obtient ou définit le nombre maximal d'éléments à sérialiser ou désérialiser dans un graphique d'objets.</summary>
      <returns>Nombre maximal d'éléments à sérialiser ou désérialiser dans un graphique d'objets.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.RootName">
      <summary>Obtient ou définit le nom racine de l'objet sélectionné.</summary>
      <returns>Nom racine de l'objet sélectionné.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.SerializeReadOnlyTypes">
      <summary>Obtient ou définit une valeur qui spécifie s'il faut sérialiser des types de lecture seule.</summary>
      <returns>
        <see langword="true" /> pour sérialiser des types en lecture seule ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings.UseSimpleDictionaryFormat">
      <summary>Obtient ou définit une valeur qui spécifie s'il faut utiliser un format de dictionnaire simple.</summary>
      <returns>
        <see langword="true" /> pour utiliser un format de dictionnaire simple ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer">
      <summary>Spécifie l'interface permettant d'initialiser un lecteur JSON (JavaScript Objet Notation) lorsque vous le réutilisez pour lire un flux ou une mémoire tampon particulière.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer.SetInput(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>Réinitialise un lecteur JSON (JavaScript Object Notation) dans une mémoire tampon spécifiée qui contient des données encodées en JSON.</summary>
      <param name="buffer">Tableau de mémoire tampon <see cref="T:System.Byte" /> d'entrée dans lequel lire.</param>
      <param name="offset">La position de départ à partir de laquelle effectuer la lecture dans <paramref name="buffer" />.</param>
      <param name="count">Le nombre d'octets pouvant être lus à partir de <paramref name="buffer" />.</param>
      <param name="encoding">
        <see cref="T:System.Text.Encoding" /> utilisé par le lecteur.</param>
      <param name="quotas">
        <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> à appliquer.</param>
      <param name="onClose">Délégué <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> à appeler lorsque le lecteur est fermé.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.IXmlJsonReaderInitializer.SetInput(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>Réinitialise un lecteur JSON (JavaScript Object Notation) dans un flux spécifié qui contient des données encodées en JSON.</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> d'entrée à partir duquel effectuer la lecture.</param>
      <param name="encoding">
        <see cref="T:System.Text.Encoding" /> utilisé par le lecteur.</param>
      <param name="quotas">
        <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> à appliquer.</param>
      <param name="onClose">Délégué à appeler lorsque le lecteur est fermé.</param>
    </member>
    <member name="T:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer">
      <summary>Spécifie l'interface permettant d'initialiser un writer JSON (JavaScript Objet Notation) si vous le réutilisez pour écrire un flux de sortie particulier.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.IXmlJsonWriterInitializer.SetOutput(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Initialise (ou réinitialise) un writer JSON (JavaScript Objet Notation) dans un flux de sortie spécifié avec un codage de caractères spécifié.</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> de sortie dans lequel le writer écrit.</param>
      <param name="encoding">Objet <see cref="T:System.Text.Encoding" /> qui spécifie le codage de caractères du flux de sortie.</param>
      <param name="ownsStream">Si la valeur est <see langword="true" />, le flux de sortie est fermé par le writer lorsqu'il est terminé ; sinon, la valeur est <see langword="false" />.</param>
    </member>
    <member name="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
      <summary>Produit des instances de <see cref="T:System.Xml.XmlDictionaryReader" /> permettant de lire des données encodées en JSON (JavaScript Object Notation) d'un flux ou d'une mémoire tampon et de les mapper sur un Infoset XML et sur les instances de <see cref="T:System.Xml.XmlDictionaryWriter" /> capables de mapper un Infoset XML à sa contrepartie JSON et d'écrire des données encodées en JSON dans un flux de données.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>Crée un objet <see cref="T:System.Xml.XmlDictionaryReader" /> capable de mapper des mémoires tampons encodées en JSON (JavaScript Object Notation), dont la taille, le décalage et le codage de caractères sont précisés, à un Infoset XML.</summary>
      <param name="buffer">Tableau de mémoire tampon <see cref="T:System.Byte" /> d'entrée dans lequel lire.</param>
      <param name="offset">Position de départ à partir de laquelle effectuer la lecture dans <paramref name="buffer" />.</param>
      <param name="count">Nombre d'octets pouvant être lus à partir de <paramref name="buffer" />.</param>
      <param name="encoding">
        <see cref="T:System.Text.Encoding" /> qui spécifie l'encodage de caractère utilisé par le lecteur. Si <see langword="null" /> est spécifié comme valeur, le lecteur essaie de détecter automatiquement l'encodage.</param>
      <param name="quotas">
        <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> utilisé pour empêcher les attaques par déni de service lors de la lecture de données non fiables.</param>
      <param name="onClose">Délégué <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> à appeler lorsque le lecteur est fermé. La valeur par défaut est <see langword="null" />.</param>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> capable de lire des données JSON (JavaScript Object Notation).</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Crée un objet <see cref="T:System.Xml.XmlDictionaryReader" /> capable de mapper des mémoires tampons encodées en JSON (JavaScript Object Notation), dont la taille et le décalage sont précisés, à un Infoset XML.</summary>
      <param name="buffer">Tableau de mémoire tampon <see cref="T:System.Byte" /> d'entrée dans lequel lire.</param>
      <param name="offset">Position de départ à partir de laquelle effectuer la lecture dans <paramref name="buffer" />.</param>
      <param name="count">Nombre d'octets pouvant être lus à partir de <paramref name="buffer" />.</param>
      <param name="quotas">
        <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> utilisé pour empêcher les attaques par déni de service lors de la lecture de données non fiables.</param>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> capable de lire des données JSON (JavaScript Object Notation).</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Crée un objet <see cref="T:System.Xml.XmlDictionaryReader" /> capable de mapper des mémoires tampons encodées en JSON (JavaScript Object Notation) à un Infoset XML.</summary>
      <param name="buffer">Tableau de mémoire tampon <see cref="T:System.Byte" /> d'entrée dans lequel lire.</param>
      <param name="quotas">
        <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> utilisé pour empêcher les attaques par déni de service lors de la lecture de données non fiables.</param>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> capable de traiter les données JSON (JavaScript Objet Notation).</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Text.Encoding,System.Xml.XmlDictionaryReaderQuotas,System.Xml.OnXmlDictionaryReaderClose)">
      <summary>Crée un objet <see cref="T:System.Xml.XmlDictionaryReader" /> capable de mapper des flux encodés en JSON (JavaScript Object Notation), dont la taille et le décalage sont précisés, à un Infoset XML.</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> d'entrée à partir duquel effectuer la lecture.</param>
      <param name="encoding">
        <see cref="T:System.Text.Encoding" /> qui spécifie l'encodage de caractère utilisé par le lecteur. Si <see langword="null" /> est spécifié comme valeur, le lecteur essaie de détecter automatiquement l'encodage.</param>
      <param name="quotas">
        <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> utilisé pour empêcher les attaques par déni de service lors de la lecture de données non fiables.</param>
      <param name="onClose">Délégué <see cref="T:System.Xml.OnXmlDictionaryReaderClose" /> à appeler lorsque le lecteur est fermé.</param>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> capable de lire des données JSON (JavaScript Object Notation).</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Crée un objet <see cref="T:System.Xml.XmlDictionaryReader" /> capable de mapper des flux encodés en JSON (JavaScript Object Notation) à un Infoset XML.</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> d'entrée à partir duquel effectuer la lecture.</param>
      <param name="quotas">
        <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> utilisé pour empêcher les attaques par déni de service lors de la lecture de données non fiables.</param>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryReader" /> capable de lire des données JSON (JavaScript Object Notation).</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
      <summary>Crée un objet <see cref="T:System.Xml.XmlDictionaryWriter" /> qui écrit des données encodées par JSON dans un flux.</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> de sortie pour le générateur JSON.</param>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryWriter" /> qui écrit des données encodées par JSON dans un flux s'appuyant sur un Infoset XML.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
      <summary>Crée un objet <see cref="T:System.Xml.XmlDictionaryWriter" /> qui écrit des données encodées par JSON dans un flux d'après un codage de caractères indiqué.</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> de sortie pour le générateur JSON.</param>
      <param name="encoding">
        <see cref="T:System.Text.Encoding" /> qui spécifie l'encodage de caractères utilisé par le générateur. L'encodage par défaut est UTF-8.</param>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryWriter" /> qui écrit des données encodées par JSON dans un flux s'appuyant sur un Infoset XML.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Crée un objet <see cref="T:System.Xml.XmlDictionaryWriter" /> qui écrit des données encodées par JSON dans un flux d'après un codage de caractères indiqué.</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> de sortie pour le générateur JSON.</param>
      <param name="encoding">
        <see cref="T:System.Text.Encoding" /> qui spécifie l'encodage de caractères utilisé par le générateur. L'encodage par défaut est UTF-8.</param>
      <param name="ownsStream">Si la valeur est <see langword="true" />, le flux de sortie est fermé par le writer lorsqu'il est terminé ; sinon, la valeur est <see langword="false" />. La valeur par défaut est <see langword="true" />.</param>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryWriter" /> qui écrit des données encodées par JSON dans un flux s'appuyant sur un Infoset XML.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)">
      <summary>Crée un objet <see cref="T:System.Xml.XmlDictionaryWriter" /> qui écrit des données encodées par JSON dans un flux d'après un caractère spécifié.</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> de sortie pour le générateur JSON.</param>
      <param name="encoding">
        <see cref="T:System.Text.Encoding" /> qui spécifie l'encodage de caractères utilisé par le générateur. L'encodage par défaut est UTF-8.</param>
      <param name="ownsStream">Si la valeur est <see langword="true" />, le flux de sortie est fermé par le writer lorsqu'il est terminé ; sinon, la valeur est <see langword="false" />. La valeur par défaut est <see langword="true" />.</param>
      <param name="indent">Si la valeur est <see langword="true" />, la sortie utilise le format multiligne, mettant en retrait chaque niveau correctement ; sinon, <see langword="false" />.</param>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryWriter" /> qui écrit des données encodées par JSON dans un flux s'appuyant sur un Infoset XML.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean,System.String)">
      <summary>Crée un objet <see cref="T:System.Xml.XmlDictionaryWriter" /> qui écrit des données encodées par JSON dans un flux d'après un caractère spécifié.</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> de sortie pour le générateur JSON.</param>
      <param name="encoding">
        <see cref="T:System.Text.Encoding" /> qui spécifie l'encodage de caractères utilisé par le générateur. L'encodage par défaut est UTF-8.</param>
      <param name="ownsStream">Si la valeur est <see langword="true" />, le flux de sortie est fermé par le writer lorsqu'il est terminé ; sinon, la valeur est <see langword="false" />. La valeur par défaut est <see langword="true" />.</param>
      <param name="indent">Si la valeur est <see langword="true" />, la sortie utilise le format multiligne, mettant en retrait chaque niveau correctement ; sinon, <see langword="false" />.</param>
      <param name="indentChars">Chaîne utilisée pour mettre en retrait chaque niveau.</param>
      <returns>
        <see cref="T:System.Xml.XmlDictionaryWriter" /> qui écrit des données encodées par JSON dans un flux s'appuyant sur un Infoset XML.</returns>
    </member>
  </members>
</doc>
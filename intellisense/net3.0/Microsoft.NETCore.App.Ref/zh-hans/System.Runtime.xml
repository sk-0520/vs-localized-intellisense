<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid">
      <summary>为 Win32 关键句柄实现提供基类，在这些实现中值为 -1 时表示无效句柄。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.#ctor">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid" /> 类的新实例。</summary>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid.IsInvalid">
      <summary>获取一个值，该值指示句柄是否无效。</summary>
      <returns>如果句柄无效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid">
      <summary>为 Win32 关键句柄实现提供基类，在这些实现中值为 0 或 -1 时都表示无效句柄。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid.#ctor">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid" /> 类的新实例。</summary>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid.IsInvalid">
      <summary>获取一个值，该值指示句柄是否无效。</summary>
      <returns>如果句柄无效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeFileHandle">
      <summary>表示文件句柄的包装类。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeFileHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" /> 类的新实例。</summary>
      <param name="preexistingHandle">
        <see cref="T:System.IntPtr" /> 对象，表示要使用的预先存在的句柄。</param>
      <param name="ownsHandle">若要在终止阶段可靠地释放此句柄，则为 <see langword="true" />；若要阻止可靠释放（不建议使用），则为 <see langword="false" />。</param>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.SafeFileHandle.IsInvalid">
      <summary>获取一个值，该值指示句柄是否无效。</summary>
      <returns>如果句柄无效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid">
      <summary>为 Win32 安全句柄实现提供基类，在这些实现中值为 -1 时表示无效句柄。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid" /> 类的新实例，并指定是否要可靠地释放句柄。</summary>
      <param name="ownsHandle">若要在终止阶段可靠地释放此句柄，则为 <see langword="true" />；若要阻止可靠释放（不建议使用），则为 <see langword="false" />。</param>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.IsInvalid">
      <summary>获取一个值，该值指示句柄是否无效。</summary>
      <returns>如果句柄无效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid">
      <summary>为 Win32 安全句柄实现提供基类，在这些实现中，值为 0 或 -1 都表示无效句柄。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid" /> 类的新实例，并指定是否要可靠地释放句柄。</summary>
      <param name="ownsHandle">若要在终止阶段可靠地释放此句柄，则为 <see langword="true" />；若要阻止可靠释放（不建议使用），则为 <see langword="false" />。</param>
    </member>
    <member name="P:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid">
      <summary>获取一个值，该值指示句柄是否无效。</summary>
      <returns>如果句柄无效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeWaitHandle">
      <summary>表示等待句柄的包装类。</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeWaitHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" /> 类的新实例。</summary>
      <param name="existingHandle">
        <see cref="T:System.IntPtr" /> 对象，表示要使用的预先存在的句柄。</param>
      <param name="ownsHandle">若要在终止阶段可靠地释放此句柄，则为 <see langword="true" />；若要阻止可靠释放（不建议使用），则为 <see langword="false" />。</param>
    </member>
    <member name="T:System.AccessViolationException">
      <summary>在试图读写受保护内存时引发的异常。</summary>
    </member>
    <member name="M:System.AccessViolationException.#ctor">
      <summary>使用由系统提供的用于描述错误的消息初始化 <see cref="T:System.AccessViolationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.AccessViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.AccessViolationException" /> 类的新实例。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，用于保存序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
    </member>
    <member name="M:System.AccessViolationException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.AccessViolationException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.AccessViolationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.AccessViolationException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Action">
      <summary>封装一个方法，该方法不具有参数并且不返回值。</summary>
    </member>
    <member name="T:System.Action`1">
      <summary>封装一个方法，该方法只有一个参数并且不返回值。</summary>
      <param name="obj">此委托封装的方法的参数。</param>
      <typeparam name="T">此委托封装的方法的参数类型。</typeparam>
    </member>
    <member name="T:System.Action`10">
      <summary>封装一个方法，该方法具有 10 个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`11">
      <summary>封装一个方法，该方法具有 11 个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`12">
      <summary>封装一个方法，该方法具有 12 个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`13">
      <summary>封装一个方法，该方法具有 13 个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`14">
      <summary>封装一个方法，该方法具有 14 个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <param name="arg14">此委托封装的方法的第十四个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`15">
      <summary>封装一个方法，该方法具有 15 个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <param name="arg14">此委托封装的方法的第十四个参数。</param>
      <param name="arg15">此委托封装的方法的第十五个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`16">
      <summary>封装一个方法，该方法具有 16 个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <param name="arg14">此委托封装的方法的第十四个参数。</param>
      <param name="arg15">此委托封装的方法的第十五个参数。</param>
      <param name="arg16">此委托封装的方法的第十六个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
      <typeparam name="T16">此委托封装的方法的第十六个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`2">
      <summary>封装一个方法，该方法具有两个参数且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`3">
      <summary>封装一个方法，该方法具有三个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`4">
      <summary>封装一个方法，该方法具有四个参数且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`5">
      <summary>封装一个方法，该方法具有五个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`6">
      <summary>封装一个方法，该方法具有六个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`7">
      <summary>封装一个方法，该方法具有七个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`8">
      <summary>封装一个方法，该方法具有八个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
    </member>
    <member name="T:System.Action`9">
      <summary>封装一个方法，该方法具有九个参数并且不返回值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
    </member>
    <member name="T:System.Activator">
      <summary>包含特定的方法，用以在本地或从远程创建对象类型，或获取对现有远程对象的引用。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Activator.CreateInstance(System.String,System.String)">
      <summary>使用已命名的程序集和无参数构造函数，创建名称已指定的类型的实例。</summary>
      <param name="assemblyName">将在其中查找名为 <paramref name="typeName" /> 的类型的程序集的名称。 如果 <paramref name="assemblyName" /> 为 <see langword="null" />，则搜索正在执行的程序集。</param>
      <param name="typeName">首选类型的完全限定名。</param>
      <returns>要访问新创建的实例则必须解包的句柄。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">未找到匹配的公共构造函数。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
      <exception cref="T:System.MemberAccessException">你无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">通过反射调用的构造函数引发异常。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" />获取 COM 类型。</exception>
      <exception cref="T:System.NotSupportedException">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的程序集。  
或 
当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。 请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</exception>
      <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。  
 或  
 程序集名称或基本代码无效。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>使用指定的程序集和与指定参数匹配程度最高的构造函数来创建指定名称的类型的实例。</summary>
      <param name="assemblyName">将在其中查找名为 <paramref name="typeName" /> 的类型的程序集的名称。 如果 <paramref name="assemblyName" /> 为 <see langword="null" />，则搜索正在执行的程序集。</param>
      <param name="typeName">首选类型的完全限定名。</param>
      <param name="ignoreCase">使用 <see langword="true" /> 指定对 <paramref name="typeName" /> 的搜索不区分大小写；使用 <see langword="false" /> 则指定搜索区分大小写。</param>
      <param name="bindingAttr">影响 <paramref name="typeName" /> 构造函数搜索的零个或多个位标志的组合。 如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</param>
      <param name="binder">使用 <paramref name="bindingAttr" /> 和 <paramref name="args" /> 来查找和标识 <paramref name="typeName" /> 构造函数的对象。 如果 <paramref name="binder" /> 为 <see langword="null" />，则使用默认联编程序。</param>
      <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 <paramref name="args" /> 为空数组或 <see langword="null" />，则调用不带任何参数的构造函数（无参数构造函数）。</param>
      <param name="culture">区域性特定的信息，这些信息控制将 <paramref name="args" /> 强制转换为 <paramref name="typeName" /> 构造函数所声明的正式类型。 如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。  
此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
      <returns>要访问新创建的实例则必须解包的句柄。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">未找到匹配的构造函数。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">通过反射调用的构造函数引发异常。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" />获取 COM 类型。</exception>
      <exception cref="T:System.NotSupportedException">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。  
或 
 <paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。  
或 
最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的程序集。  

或 - 
当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。 请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</exception>
      <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。  
 或  
 程序集名称或基本代码无效。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.String,System.String,System.Object[])">
      <summary>使用已命名的程序集和无参数构造函数，创建名称已指定的类型的实例。</summary>
      <param name="assemblyName">将在其中查找名为 <paramref name="typeName" /> 的类型的程序集的名称。 如果 <paramref name="assemblyName" /> 为 <see langword="null" />，则搜索正在执行的程序集。</param>
      <param name="typeName">首选类型的完全限定名。</param>
      <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。  
此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
      <returns>要访问新创建的实例则必须解包的句柄。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">未找到匹配的公共构造函数。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyName" /> 中未找到 <paramref name="typename" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyName" />。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</exception>
      <exception cref="T:System.NotSupportedException">不支持创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" />、<see cref="T:System.Void" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。  

或 - 
<paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。  

或 
 <paramref name="activationAttributes" /> 不是 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" />。  
数组。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyName" /> 不是有效的程序集。  

或 - 
当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。 请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</exception>
      <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据加载了两次。  

或 -  

 程序集名称或基本代码无效。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">在 <paramref name="activationAttributes" /> 中指定的目标中尝试远程激活时出错。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type)">
      <summary>使用类型的无参数构造函数创建指定类型的实例。</summary>
      <param name="type">要创建的对象的类型。</param>
      <returns>对新创建对象的引用。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是 <see langword="RuntimeType" />。  
或 
 <paramref name="type" /> 是开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />）。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。  

或 - 
不支持创建 <see cref="T:System.TypedReference" />、 <see cref="T:System.ArgIterator" />、 <see cref="T:System.Void" />和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。  

或 - 
包含 <paramref name="type" /> 的程序集是一个用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建的动态程序集。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">正在被调用的构造函数引发了一个异常。</exception>
      <exception cref="T:System.MethodAccessException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.MemberAccessException" />。  


            

 调用方没有权限调用此构造函数。</exception>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</exception>
      <exception cref="T:System.MissingMethodException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.MissingMemberException" />。  


            

 未找到匹配的公共构造函数。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或标识的类未注册。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> 不是有效类型。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Boolean)">
      <summary>使用类型的无参数构造函数创建指定类型的实例。</summary>
      <param name="type">要创建的对象的类型。</param>
      <param name="nonPublic">如果公共或非公共无参数构造函数可以匹配，则为 <see langword="true" />；如果只有公共无参数构造函数可以匹配，则为 <see langword="false" />。</param>
      <returns>对新创建对象的引用。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是 <see langword="RuntimeType" />。  
或 
 <paramref name="type" /> 是开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />）。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。  
或 
不支持创建 <see cref="T:System.TypedReference" />、 <see cref="T:System.ArgIterator" />、 <see cref="T:System.Void" />和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。  
或 
包含 <paramref name="type" /> 的程序集是一个用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建的动态程序集。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">正在被调用的构造函数引发了一个异常。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</exception>
      <exception cref="T:System.MissingMethodException">未找到匹配的公共构造函数。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或标识的类未注册。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> 不是有效类型。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Object[])">
      <summary>使用与指定参数匹配程度最高的构造函数创建指定类型的实例。</summary>
      <param name="type">要创建的对象的类型。</param>
      <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 <paramref name="args" /> 为空数组或 <see langword="null" />，则调用不带任何参数的构造函数（无参数构造函数）。</param>
      <returns>对新创建对象的引用。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是 <see langword="RuntimeType" />。  
或 
 <paramref name="type" /> 是开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />）。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。  
或 
不支持创建 <see cref="T:System.TypedReference" />、 <see cref="T:System.ArgIterator" />、 <see cref="T:System.Void" />和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。  
或 
包含 <paramref name="type" /> 的程序集是一个用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建的动态程序集。  

或 - 
最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">正在被调用的构造函数引发了一个异常。</exception>
      <exception cref="T:System.MethodAccessException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.MemberAccessException" />。  


            

 调用方没有权限调用此构造函数。</exception>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</exception>
      <exception cref="T:System.MissingMethodException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.MissingMemberException" />。  


            

 未找到匹配的公共构造函数。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或标识的类未注册。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> 不是有效类型。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Object[],System.Object[])">
      <summary>使用与指定参数匹配程度最高的构造函数创建指定类型的实例。</summary>
      <param name="type">要创建的对象的类型。</param>
      <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 <paramref name="args" /> 为空数组或 <see langword="null" />，则调用不带任何参数的构造函数（无参数构造函数）。</param>
      <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。  
此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
      <returns>对新创建对象的引用。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是 <see langword="RuntimeType" />。  
或 
 <paramref name="type" /> 是开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />）。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。  
或 
不支持创建 <see cref="T:System.TypedReference" />、 <see cref="T:System.ArgIterator" />、 <see cref="T:System.Void" />和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。  

或 - 
<paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。  

或 - 
包含 <paramref name="type" /> 的程序集是一个用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建的动态程序集。  


或 
最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">正在被调用的构造函数引发了一个异常。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</exception>
      <exception cref="T:System.MissingMethodException">未找到匹配的公共构造函数。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或标识的类未注册。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> 不是有效类型。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>使用与指定参数匹配程度最高的构造函数创建指定类型的实例。</summary>
      <param name="type">要创建的对象的类型。</param>
      <param name="bindingAttr">影响 <paramref name="type" /> 构造函数搜索的零个或多个位标志的组合。 如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</param>
      <param name="binder">使用 <paramref name="bindingAttr" /> 和 <paramref name="args" /> 来查找和标识 <paramref name="type" /> 构造函数的对象。 如果 <paramref name="binder" /> 为 <see langword="null" />，则使用默认联编程序。</param>
      <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 <paramref name="args" /> 为空数组或 <see langword="null" />，则调用不带任何参数的构造函数（无参数构造函数）。</param>
      <param name="culture">区域性特定的信息，这些信息控制将 <paramref name="args" /> 强制转换为 <paramref name="type" /> 构造函数所声明的正式类型。 如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <returns>对新创建对象的引用。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是 <see langword="RuntimeType" />。  
或 
 <paramref name="type" /> 是开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />）。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。  

或 - 
不支持创建 <see cref="T:System.TypedReference" />、 <see cref="T:System.ArgIterator" />、 <see cref="T:System.Void" />和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。  

或 - 
包含 <paramref name="type" /> 的程序集是一个用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建的动态程序集。  


或 
最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">正在被调用的构造函数引发了一个异常。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</exception>
      <exception cref="T:System.MissingMethodException">未找到匹配的构造函数。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或标识的类未注册。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> 不是有效类型。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>使用与指定参数匹配程度最高的构造函数创建指定类型的实例。</summary>
      <param name="type">要创建的对象的类型。</param>
      <param name="bindingAttr">影响 <paramref name="type" /> 构造函数搜索的零个或多个位标志的组合。 如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</param>
      <param name="binder">使用 <paramref name="bindingAttr" /> 和 <paramref name="args" /> 来查找和标识 <paramref name="type" /> 构造函数的对象。 如果 <paramref name="binder" /> 为 <see langword="null" />，则使用默认联编程序。</param>
      <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 <paramref name="args" /> 为空数组或 <see langword="null" />，则调用不带任何参数的构造函数（无参数构造函数）。</param>
      <param name="culture">区域性特定的信息，这些信息控制将 <paramref name="args" /> 强制转换为 <paramref name="type" /> 构造函数所声明的正式类型。 如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。  
此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
      <returns>对新创建对象的引用。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是 <see langword="RuntimeType" />。  

或 - 
<paramref name="type" /> 是开放式泛型类型（即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />）。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="type" /> 不能为 <see cref="T:System.Reflection.Emit.TypeBuilder" />。  
或 
不支持创建 <see cref="T:System.TypedReference" />、 <see cref="T:System.ArgIterator" />、 <see cref="T:System.Void" />和 <see cref="T:System.RuntimeArgumentHandle" /> 类型，或者这些类型的数组。  
或 
 <paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。  
或 
包含 <paramref name="type" /> 的程序集是一个用 <see cref="F:System.Reflection.Emit.AssemblyBuilderAccess.Save" /> 创建的动态程序集。  
或 
最匹配 <paramref name="args" /> 的构造函数具有 <see langword="varargs" /> 参数。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">正在被调用的构造函数引发了一个异常。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
      <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException">未通过 <see cref="Overload:System.Type.GetTypeFromProgID" /> 或 <see cref="Overload:System.Type.GetTypeFromCLSID" /> 获取 COM 类型。</exception>
      <exception cref="T:System.MissingMethodException">未找到匹配的构造函数。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="type" /> 是一个 COM 对象，但用于获取类型的类标识符无效，或标识的类未注册。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="type" /> 不是有效类型。</exception>
    </member>
    <member name="M:System.Activator.CreateInstance``1">
      <summary>使用无参数构造函数，创建指定泛型类型参数所指定类型的实例。</summary>
      <typeparam name="T">要创建的类型。</typeparam>
      <returns>对新创建对象的引用。</returns>
      <exception cref="T:System.MissingMethodException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.MissingMemberException" />。  


            

 为 <paramref name="T" /> 指定的类型没有无参数构造函数。</exception>
    </member>
    <member name="M:System.Activator.CreateInstanceFrom(System.String,System.String)">
      <summary>使用已命名的程序集文件和无参数构造函数，创建名称已指定的类型的实例。</summary>
      <param name="assemblyFile">包含某程序集的文件的名称，将在该程序集内查找名为 <paramref name="typeName" /> 的类型。</param>
      <param name="typeName">首选类型的名称。</param>
      <returns>要访问新创建的实例则必须解包的句柄。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">未找到匹配的公共构造函数。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typename" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyFile" />。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">通过反射调用的构造函数引发异常。</exception>
      <exception cref="T:System.Security.SecurityException">调用方确实具有所需的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的程序集。  
或 
当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。 请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</exception>
    </member>
    <member name="M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>使用指定的程序集文件和与指定参数匹配程度最高的构造函数来创建指定名称的类型的实例。</summary>
      <param name="assemblyFile">包含某程序集的文件的名称，将在该程序集内查找名为 <paramref name="typeName" /> 的类型。</param>
      <param name="typeName">首选类型的名称。</param>
      <param name="ignoreCase">使用 <see langword="true" /> 指定对 <paramref name="typeName" /> 的搜索不区分大小写；使用 <see langword="false" /> 则指定搜索区分大小写。</param>
      <param name="bindingAttr">影响 <paramref name="typeName" /> 构造函数搜索的零个或多个位标志的组合。 如果 <paramref name="bindingAttr" /> 为零，则对公共构造函数进行区分大小写的搜索。</param>
      <param name="binder">使用 <paramref name="bindingAttr" /> 和 <paramref name="args" /> 来查找和标识 <paramref name="typeName" /> 构造函数的对象。 如果 <paramref name="binder" /> 为 <see langword="null" />，则使用默认联编程序。</param>
      <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。 如果 <paramref name="args" /> 为空数组或 <see langword="null" />，则调用不带任何参数的构造函数（无参数构造函数）。</param>
      <param name="culture">区域性特定的信息，这些信息控制将 <paramref name="args" /> 强制转换为 <paramref name="typeName" /> 构造函数所声明的正式类型。 如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。  
此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
      <returns>要访问新创建的实例则必须解包的句柄。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">未找到匹配的构造函数。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typename" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyFile" />。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">通过反射调用的构造函数引发异常。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的程序集。  

或 - 
当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。 请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</exception>
    </member>
    <member name="M:System.Activator.CreateInstanceFrom(System.String,System.String,System.Object[])">
      <summary>使用已命名的程序集文件和无参数构造函数，创建名称已指定的类型的实例。</summary>
      <param name="assemblyFile">包含某程序集的文件的名称，将在该程序集内查找名为 <paramref name="typeName" /> 的类型。</param>
      <param name="typeName">首选类型的名称。</param>
      <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 这通常为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。  
此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
      <returns>要访问新创建的实例则必须解包的句柄。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">未找到匹配的公共构造函数。</exception>
      <exception cref="T:System.TypeLoadException">在 <paramref name="assemblyFile" /> 中未找到 <paramref name="typename" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyFile" />。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有权限调用此构造函数。</exception>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">通过反射调用的构造函数引发异常。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="activationAttributes" /> 不是空数组，且正在创建的类型不是从 <see cref="T:System.MarshalByRefObject" /> 派生得来的。</exception>
      <exception cref="T:System.Security.SecurityException">调用方确实具有所需的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的程序集。  
或 
当前已加载公共语言运行时 (CLR) 2.0 或更新版本，但 <paramref name="assemblyName" /> 是使用比当前加载版本更新的 CLR 版本编译的。 请注意，.NET Framework 2.0、3.0 和 3.5 都使用 CLR 2.0。</exception>
    </member>
    <member name="T:System.AggregateException">
      <summary>表示在应用程序执行期间发生的一个或多个错误。</summary>
    </member>
    <member name="M:System.AggregateException.#ctor">
      <summary>使用由系统提供的用于描述错误的消息初始化 <see cref="T:System.AggregateException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.AggregateException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>用对作为此异常原因的内部异常的引用初始化 <see cref="T:System.AggregateException" /> 类的新实例。</summary>
      <param name="innerExceptions">导致当前异常的异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerExceptions" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerExceptions" /> 的元素为 Null。</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.Exception[])">
      <summary>用对作为此异常原因的内部异常的引用初始化 <see cref="T:System.AggregateException" /> 类的新实例。</summary>
      <param name="innerExceptions">导致当前异常的异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerExceptions" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerExceptions" /> 的元素为 Null。</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.AggregateException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为 null。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">异常未能正确进行反序列化。</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.AggregateException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.AggregateException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerExceptions">导致当前异常的异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerExceptions" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerExceptions" /> 的元素为 Null。</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.AggregateException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerException" /> 参数为 null。</exception>
    </member>
    <member name="M:System.AggregateException.#ctor(System.String,System.Exception[])">
      <summary>使用指定错误信息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.AggregateException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerExceptions">导致当前异常的异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerExceptions" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerExceptions" /> 的元素为 Null。</exception>
    </member>
    <member name="M:System.AggregateException.Flatten">
      <summary>将 <see cref="T:System.AggregateException" /> 实例平展入单个新实例。</summary>
      <returns>一个新的平展 <see cref="T:System.AggregateException" />。</returns>
    </member>
    <member name="M:System.AggregateException.GetBaseException">
      <summary>返回 <see cref="T:System.AggregateException" />，它是此异常的根本原因。</summary>
      <returns>
        <see cref="T:System.AggregateException" />，它是此异常的根本原因。</returns>
    </member>
    <member name="M:System.AggregateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.AggregateException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为 null。</exception>
    </member>
    <member name="M:System.AggregateException.Handle(System.Func{System.Exception,System.Boolean})">
      <summary>在每个由此 <see cref="T:System.AggregateException" /> 包含的 <see cref="T:System.Exception" /> 上调用处理程序。</summary>
      <param name="predicate">每个异常要执行的谓词。 该谓词作为要处理的 <see cref="T:System.Exception" /> 的参数并返回一个布尔值以指示是否处理了该异常。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> 参数为 null。</exception>
      <exception cref="T:System.AggregateException">未处理此 <see cref="T:System.AggregateException" /> 包含的异常。</exception>
    </member>
    <member name="P:System.AggregateException.InnerExceptions">
      <summary>获取导致当前异常的 <see cref="T:System.Exception" /> 实例的只读集合。</summary>
      <returns>导致当前异常的<see cref="T:System.Exception" />实例的只读集合。</returns>
    </member>
    <member name="P:System.AggregateException.Message">
      <summary>获取描述异常的消息。</summary>
      <returns>描述该异常的消息。</returns>
    </member>
    <member name="M:System.AggregateException.ToString">
      <summary>创建并返回当前 <see cref="T:System.AggregateException" /> 的字符串表示形式。</summary>
      <returns>当前异常的字符串表示形式。</returns>
    </member>
    <member name="T:System.AppContext">
      <summary>提供用于设置和检索应用程序上下文相关数据的成员。</summary>
    </member>
    <member name="P:System.AppContext.BaseDirectory">
      <summary>获取程序集解析程序用于探测程序集的基目录的路径名。</summary>
      <returns>程序集解析程序用于探测程序集的基目录的路径名。</returns>
    </member>
    <member name="M:System.AppContext.GetData(System.String)">
      <summary>返回分配给当前应用程序域的已命名数据元素的值。</summary>
      <param name="name">数据元素的名称。</param>
      <returns>如果 <paramref name="name" /> 识别出已命名值，则为 <paramref name="name" /> 的值；否则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.AppContext.SetSwitch(System.String,System.Boolean)">
      <summary>设置开关的值。</summary>
      <param name="switchName">开关的名称。</param>
      <param name="isEnabled">开关的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="switchName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="switchName" /> 为 <see cref="F:System.String.Empty" />。</exception>
    </member>
    <member name="P:System.AppContext.TargetFrameworkName">
      <summary>获取当前应用程序所针对的框架版本的名称。</summary>
      <returns>当前应用程序所针对的框架版本的名称。</returns>
    </member>
    <member name="M:System.AppContext.TryGetSwitch(System.String,System.Boolean@)">
      <summary>尝试获取开关的值。</summary>
      <param name="switchName">开关的名称。</param>
      <param name="isEnabled">此方法返回时，如果找到 <paramref name="switchName" />，则包含 <paramref name="switchName" /> 的值；如果未找到 <paramref name="switchName" />，则为 <see langword="false" />。 此参数未经初始化即被传递。</param>
      <returns>如果设置了 <paramref name="switchName" /> 且 <paramref name="isEnabled" /> 参数包含开关的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="switchName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="switchName" /> 为 <see cref="F:System.String.Empty" />。</exception>
    </member>
    <member name="T:System.ApplicationException">
      <summary>用作应用程序定义的异常的基类。</summary>
    </member>
    <member name="M:System.ApplicationException.#ctor">
      <summary>初始化 <see cref="T:System.ApplicationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ApplicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.ApplicationException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.ApplicationException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.ApplicationException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.ApplicationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ApplicationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为空引用，则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="T:System.ArgIterator">
      <summary>表示变长参数列表；即采用可变数量的参数的函数的参数。</summary>
    </member>
    <member name="M:System.ArgIterator.#ctor(System.RuntimeArgumentHandle)">
      <summary>使用指定的参数列表初始化 <see cref="T:System.ArgIterator" /> 结构的新实例。</summary>
      <param name="arglist">一个由强制参数和可选参数组成的参数列表。</param>
    </member>
    <member name="M:System.ArgIterator.#ctor(System.RuntimeArgumentHandle,System.Void*)">
      <summary>使用指定的参数列表和指向列表项的指针来初始化 <see cref="T:System.ArgIterator" /> 结构的新实例。</summary>
      <param name="arglist">一个由强制参数和可选参数组成的参数列表。</param>
      <param name="ptr">一个指针，它指向首先访问的 <paramref name="arglist" /> 中的参数，或者如果 <paramref name="arglist" /> 为<see langword="null" />，则指向 <paramref name="ptr" /> 中的第一个强制参数。</param>
    </member>
    <member name="M:System.ArgIterator.End">
      <summary>结束由此实例表示的变长参数列表的处理。</summary>
    </member>
    <member name="M:System.ArgIterator.Equals(System.Object)">
      <summary>此方法不受支持，它始终会引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="o">要与该实例进行比较的对象。</param>
      <returns>不支持此比较。 不返回任何值。</returns>
      <exception cref="T:System.NotSupportedException">不支持此方法。</exception>
    </member>
    <member name="M:System.ArgIterator.GetHashCode">
      <summary>返回此对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ArgIterator.GetNextArg">
      <summary>返回变长参数列表中的下一参数。</summary>
      <returns>作为 <see cref="T:System.TypedReference" /> 对象的下一参数。</returns>
      <exception cref="T:System.InvalidOperationException">尝试在列表结尾以外进行读取。</exception>
    </member>
    <member name="M:System.ArgIterator.GetNextArg(System.RuntimeTypeHandle)">
      <summary>返回变长参数列表中具有指定类型的下一个参数。</summary>
      <param name="rth">标识要检索的参数类型的运行时类型句柄。</param>
      <returns>作为 <see cref="T:System.TypedReference" /> 对象的下一参数。</returns>
      <exception cref="T:System.InvalidOperationException">尝试在列表结尾以外进行读取。</exception>
      <exception cref="T:System.ArgumentNullException">其余参数的指针为零。</exception>
    </member>
    <member name="M:System.ArgIterator.GetNextArgType">
      <summary>返回下一个参数的类型。</summary>
      <returns>下一个参数的类型。</returns>
    </member>
    <member name="M:System.ArgIterator.GetRemainingCount">
      <summary>返回参数列表中剩余参数的个数。</summary>
      <returns>剩余参数的个数。</returns>
    </member>
    <member name="T:System.ArgumentException">
      <summary>当向方法提供的参数之一无效时引发的异常。</summary>
    </member>
    <member name="M:System.ArgumentException.#ctor">
      <summary>初始化 <see cref="T:System.ArgumentException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.ArgumentException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.ArgumentException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ArgumentException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为空引用，则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String)">
      <summary>使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:System.ArgumentException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="paramName">导致当前异常的参数的名称。</param>
    </member>
    <member name="M:System.ArgumentException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定的错误消息、参数名称和对内部异常的引用（为该异常根源）来初始化 <see cref="T:System.ArgumentException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="paramName">导致当前异常的参数的名称。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为空引用，则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="M:System.ArgumentException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>设置带有参数名和附加异常信息的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 对象是空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
    </member>
    <member name="P:System.ArgumentException.Message">
      <summary>获取错误消息和参数名；如果未设置参数名，则仅获取错误消息。</summary>
      <returns>描述异常的详细信息的文本字符串。 此属性的值采用以下两种形式之一： 
  条件 
  值 
  <paramref name="paramName" /> 是空引用（在 Visual Basic 中为 <see langword="Nothing" />）或长度为零。  
  传递到构造函数的 <paramref name="message" /> 字符串。  
  <paramref name="paramName" /> 不是空引用（在 Visual Basic 中为 <see langword="Nothing" />）并且长度大于零。  
  附有无效参数名的 <paramref name="message" /> 字符串。</returns>
    </member>
    <member name="P:System.ArgumentException.ParamName">
      <summary>获取导致该异常的参数的名称。</summary>
      <returns>参数名称。</returns>
    </member>
    <member name="T:System.ArgumentNullException">
      <summary>当将 null 引用（Visual Basic 中为 <see langword="Nothing" />）传递到不接受其作为有效参数的方法时引发的异常。</summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor">
      <summary>初始化 <see cref="T:System.ArgumentNullException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.ArgumentNullException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">用于描述序列化数据的源或目标的对象。</param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String)">
      <summary>使用导致此异常的参数的名称初始化 <see cref="T:System.ArgumentNullException" /> 类的新实例。</summary>
      <param name="paramName">导致异常的参数的名称。</param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和引发此异常的异常初始化 <see cref="T:System.ArgumentNullException" /> 类的新实例。</summary>
      <param name="message">说明发生此异常的原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</param>
    </member>
    <member name="M:System.ArgumentNullException.#ctor(System.String,System.String)">
      <summary>使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:System.ArgumentNullException" /> 类的实例。</summary>
      <param name="paramName">导致异常的参数的名称。</param>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="T:System.ArgumentOutOfRangeException">
      <summary>当参数值超出调用的方法所定义的允许取值范围时引发的异常。</summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor">
      <summary>初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">用于描述序列化数据的源或目标的对象。</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
      <summary>使用导致此异常的参数的名称初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 类的新实例。</summary>
      <param name="paramName">导致此异常的参数的名称。</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和引发此异常的异常初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 类的新实例。</summary>
      <param name="message">说明发生此异常的原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
      <summary>使用指定的错误消息、参数名和参数值来初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 类的新实例。</summary>
      <param name="paramName">导致异常的参数的名称。</param>
      <param name="actualValue">导致此异常的参数值。</param>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
      <summary>使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:System.ArgumentOutOfRangeException" /> 类的新实例。</summary>
      <param name="paramName">导致异常的参数的名称。</param>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.ActualValue">
      <summary>获取导致此异常的参数值。</summary>
      <returns>
        <see langword="Object" />，它包含导致当前 <see cref="T:System.Exception" /> 的参数的值。</returns>
    </member>
    <member name="M:System.ArgumentOutOfRangeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>设置带有无效参数值和附加异常信息的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">用于描述序列化数据的源或目标的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 对象为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ArgumentOutOfRangeException.Message">
      <summary>获取错误消息和无效参数值的字符串表示形式；或者，如果该参数值为 null，则仅获取错误消息。</summary>
      <returns>此异常的文本消息。 此属性的值采用以下两种形式之一。  
  条件 
  值 
  <paramref name="actualValue" /> 为 <see langword="null" />。  

  传递到构造函数的 <paramref name="message" /> 字符串。  

  <paramref name="actualValue" /> 不为 <see langword="null" />。  

  附有无效参数值字符串表示形式的 <paramref name="message" /> 字符串。</returns>
    </member>
    <member name="T:System.ArithmeticException">
      <summary>当算术、强制转换或转换操作发生错误时引发的异常。</summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor">
      <summary>初始化 <see cref="T:System.ArithmeticException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.ArithmeticException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.ArithmeticException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ArithmeticException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ArithmeticException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为空引用，则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="T:System.Array">
      <summary>提供一些方法，用于创建、处理、搜索数组并对数组进行排序，从而充当公共语言运行时中所有数组的基类。</summary>
    </member>
    <member name="M:System.Array.AsReadOnly``1(``0[])">
      <summary>返回指定数组的只读包装。</summary>
      <param name="array">要包装在只读 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 包装器中的从零开始的一维数组。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <returns>指定数组的只读 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 包装。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)">
      <summary>使用由一维排序数组中每个元素和指定的值实现的 <see cref="T:System.IComparable" /> 接口，在该数组的一个元素范围内搜索值。</summary>
      <param name="array">要搜索的排序一维 <see cref="T:System.Array" />。</param>
      <param name="index">要搜索的范围的起始索引。</param>
      <param name="length">要搜索的范围的长度。</param>
      <param name="value">要搜索的对象。</param>
      <returns>如果找到 <paramref name="value" />，则为指定 <paramref name="array" /> 中的指定 <paramref name="value" /> 的索引；否则为负数。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小于 <paramref name="array" /> 中的一个或多个元素，则返回的负数是大于 <paramref name="value" /> 的第一个元素的索引的按位求补。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大于 <paramref name="array" /> 中的所有元素，则返回的负数是（最后一个元素的索引加 1）的按位求补。 如果使用非排序的 <paramref name="array" /> 调用此方法，返回值则可能不正确并且可能会返回负数，即使 <paramref name="value" /> 存在于 <paramref name="array" /> 中也是如此。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。  
或 
 <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="array" /> 中指定有效范围。  

或 - 
<paramref name="value" /> 的类型与 <paramref name="array" /> 的元素不兼容。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 不实现 <see cref="T:System.IComparable" /> 接口，并且搜索遇到不实现 <see cref="T:System.IComparable" /> 接口的元素。</exception>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
      <summary>使用指定 <see cref="T:System.Collections.IComparer" /> 接口，在一维排序数组的某个元素范围中搜索值。</summary>
      <param name="array">要搜索的排序一维 <see cref="T:System.Array" />。</param>
      <param name="index">要搜索的范围的起始索引。</param>
      <param name="length">要搜索的范围的长度。</param>
      <param name="value">要搜索的对象。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.IComparer" /> 实现。  
或 
 若为 <see langword="null" />，则使用每个元素的 <see cref="T:System.IComparable" /> 实现。</param>
      <returns>如果找到 <paramref name="value" />，则为指定 <paramref name="array" /> 中的指定 <paramref name="value" /> 的索引；否则为负数。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小于 <paramref name="array" /> 中的一个或多个元素，则返回的负数是大于 <paramref name="value" /> 的第一个元素的索引的按位求补。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大于 <paramref name="array" /> 中的所有元素，则返回的负数是（最后一个元素的索引加 1）的按位求补。 如果使用非排序的 <paramref name="array" /> 调用此方法，返回值则可能不正确并且可能会返回负数，即使 <paramref name="value" /> 存在于 <paramref name="array" /> 中也是如此。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。  
或 
 <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="array" /> 中指定有效范围。  

或 - 
<paramref name="comparer" /> 为 <see langword="null" />，并且 <paramref name="value" /> 的类型与 <paramref name="array" /> 的元素不兼容。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 <see langword="null" />，<paramref name="value" /> 不实现 <see cref="T:System.IComparable" /> 接口，并且搜索遇到不实现 <see cref="T:System.IComparable" /> 接口的元素。</exception>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object)">
      <summary>使用由数组中每个元素和指定对象实现的 <see cref="T:System.IComparable" /> 接口，在整个一维排序数组中搜索特定元素。</summary>
      <param name="array">要搜索的排序一维 <see cref="T:System.Array" />。</param>
      <param name="value">要搜索的对象。</param>
      <returns>如果找到 <paramref name="value" />，则为指定 <paramref name="array" /> 中的指定 <paramref name="value" /> 的索引；否则为负数。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小于 <paramref name="array" /> 中的一个或多个元素，则返回的负数是大于 <paramref name="value" /> 的第一个元素的索引的按位求补。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大于 <paramref name="array" /> 中的所有元素，则返回的负数是（最后一个元素的索引加 1）的按位求补。 如果使用非排序的 <paramref name="array" /> 调用此方法，返回值则可能不正确并且可能会返回负数，即使 <paramref name="value" /> 存在于 <paramref name="array" /> 中也是如此。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 的类型与 <paramref name="array" />的元素不兼容。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 不实现 <see cref="T:System.IComparable" /> 接口，并且搜索遇到不实现 <see cref="T:System.IComparable" /> 接口的元素。</exception>
    </member>
    <member name="M:System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)">
      <summary>使用指定 <see cref="T:System.Collections.IComparer" /> 接口，在整个一维排序数组中搜索值。</summary>
      <param name="array">要搜索的排序一维 <see cref="T:System.Array" />。</param>
      <param name="value">要搜索的对象。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.IComparer" /> 实现。  
或 
 若为 <see langword="null" />，则使用每个元素的 <see cref="T:System.IComparable" /> 实现。</param>
      <returns>如果找到 <paramref name="value" />，则为指定 <paramref name="array" /> 中的指定 <paramref name="value" /> 的索引；否则为负数。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小于 <paramref name="array" /> 中的一个或多个元素，则返回的负数是大于 <paramref name="value" /> 的第一个元素的索引的按位求补。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大于 <paramref name="array" /> 中的所有元素，则返回的负数是（最后一个元素的索引加 1）的按位求补。 如果使用非排序的 <paramref name="array" /> 调用此方法，返回值则可能不正确并且可能会返回负数，即使 <paramref name="value" /> 存在于 <paramref name="array" /> 中也是如此。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 为 <see langword="null" />，并且 <paramref name="value" /> 的类型与 <paramref name="array" />的元素不兼容。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 <see langword="null" />，<paramref name="value" /> 不实现 <see cref="T:System.IComparable" /> 接口，并且搜索遇到不实现 <see cref="T:System.IComparable" /> 接口的元素。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0)">
      <summary>使用由 <see cref="T:System.Array" /> 中每个元素和指定对象实现的 <see cref="T:System.IComparable`1" /> 泛型接口，在整个一维排序数组中搜索特定元素。</summary>
      <param name="array">要搜索的从零开始的一维排序 <see cref="T:System.Array" />。</param>
      <param name="value">要搜索的对象。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <returns>如果找到 <paramref name="value" />，则为指定 <paramref name="array" /> 中的指定 <paramref name="value" /> 的索引；否则为负数。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小于 <paramref name="array" /> 中的一个或多个元素，则返回的负数是大于 <paramref name="value" /> 的第一个元素的索引的按位求补。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大于 <paramref name="array" /> 中的所有元素，则返回的负数是（最后一个元素的索引加 1）的按位求补。 如果使用非排序的 <paramref name="array" /> 调用此方法，返回值则可能不正确并且可能会返回负数，即使 <paramref name="value" /> 存在于 <paramref name="array" /> 中也是如此。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="T" /> 不实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})">
      <summary>使用指定 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型接口，在整个一维排序数组中搜索值。</summary>
      <param name="array">要搜索的从零开始的一维排序 <see cref="T:System.Array" />。</param>
      <param name="value">要搜索的对象。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。  

或 - 
若为 <see langword="null" />，则使用每个元素的 <see cref="T:System.IComparable`1" /> 实现。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <returns>如果找到 <paramref name="value" />，则为指定 <paramref name="array" /> 中的指定 <paramref name="value" /> 的索引；否则为负数。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小于 <paramref name="array" /> 中的一个或多个元素，则返回的负数是大于 <paramref name="value" /> 的第一个元素的索引的按位求补。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大于 <paramref name="array" /> 中的所有元素，则返回的负数是（最后一个元素的索引加 1）的按位求补。 如果使用非排序的 <paramref name="array" /> 调用此方法，返回值则可能不正确并且可能会返回负数，即使 <paramref name="value" /> 存在于 <paramref name="array" /> 中也是如此。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 为 <see langword="null" />，并且 <paramref name="value" /> 的类型与 <paramref name="array" /> 的元素不兼容。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 <see langword="null" />，并且 <paramref name="T" /> 不实现 <see cref="T:System.IComparable`1" /> 泛型接口</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)">
      <summary>使用由 <see cref="T:System.Array" /> 中每个元素和指定值实现的 <see cref="T:System.IComparable`1" /> 泛型接口，在一维排序数组的某个元素范围中搜索值。</summary>
      <param name="array">要搜索的从零开始的一维排序 <see cref="T:System.Array" />。</param>
      <param name="index">要搜索的范围的起始索引。</param>
      <param name="length">要搜索的范围的长度。</param>
      <param name="value">要搜索的对象。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <returns>如果找到 <paramref name="value" />，则为指定 <paramref name="array" /> 中的指定 <paramref name="value" /> 的索引；否则为负数。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小于 <paramref name="array" /> 中的一个或多个元素，则返回的负数是大于 <paramref name="value" /> 的第一个元素的索引的按位求补。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大于 <paramref name="array" /> 中的所有元素，则返回的负数是（最后一个元素的索引加 1）的按位求补。 如果使用非排序的 <paramref name="array" /> 调用此方法，返回值则可能不正确并且可能会返回负数，即使 <paramref name="value" /> 存在于 <paramref name="array" /> 中也是如此。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。  
或 
 <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="array" /> 中指定有效范围。  

或 - 
<paramref name="value" /> 的类型与 <paramref name="array" /> 的元素不兼容。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="T" /> 不实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>使用指定 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型接口，在一维排序数组的某个元素范围中搜索值。</summary>
      <param name="array">要搜索的从零开始的一维排序 <see cref="T:System.Array" />。</param>
      <param name="index">要搜索的范围的起始索引。</param>
      <param name="length">要搜索的范围的长度。</param>
      <param name="value">要搜索的对象。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。  
或 
 若为 <see langword="null" />，则使用每个元素的 <see cref="T:System.IComparable`1" /> 实现。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <returns>如果找到 <paramref name="value" />，则为指定 <paramref name="array" /> 中的指定 <paramref name="value" /> 的索引；否则为负数。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 小于 <paramref name="array" /> 中的一个或多个元素，则返回的负数是大于 <paramref name="value" /> 的第一个元素的索引的按位求补。 如果找不到 <paramref name="value" /> 且 <paramref name="value" /> 大于 <paramref name="array" /> 中的所有元素，则返回的负数是（最后一个元素的索引加 1）的按位求补。 如果使用非排序的 <paramref name="array" /> 调用此方法，返回值则可能不正确并且可能会返回负数，即使 <paramref name="value" /> 存在于 <paramref name="array" /> 中也是如此。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。  
或 
 <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="array" /> 中指定有效范围。  

或 - 
<paramref name="comparer" /> 为 <see langword="null" />，并且 <paramref name="value" /> 的类型与 <paramref name="array" /> 的元素不兼容。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 <see langword="null" />，并且 <paramref name="T" /> 不实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.Clear(System.Array,System.Int32,System.Int32)">
      <summary>将数组中的某个范围的元素设置为每个元素类型的默认值。</summary>
      <param name="array">需要清除其元素的数组。</param>
      <param name="index">要清除的一系列元素的起始索引。</param>
      <param name="length">要清除的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。  

或 - 
<paramref name="length" /> 小于零。  

或 
<paramref name="index" /> 和 <paramref name="length" /> 大于 <paramref name="array" /> 的大小。</exception>
    </member>
    <member name="M:System.Array.Clone">
      <summary>创建 <see cref="T:System.Array" /> 的浅表副本。</summary>
      <returns>
        <see cref="T:System.Array" /> 的浅表副本。</returns>
    </member>
    <member name="M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>复制 <see cref="T:System.Array" /> 中的一系列元素（从指定的源索引开始），并将它们粘贴到另一 <see cref="T:System.Array" /> 中（从指定的目标索引开始）。  保证在复制未成功完成的情况下撤消所有更改。</summary>
      <param name="sourceArray">包含要复制的数据的 <see cref="T:System.Array" />。</param>
      <param name="sourceIndex">一个 32 位整数，它表示 <paramref name="sourceArray" /> 中复制开始处的索引。</param>
      <param name="destinationArray">接收数据的 <see cref="T:System.Array" />。</param>
      <param name="destinationIndex">一个 32 位整数，它表示 <paramref name="destinationArray" /> 中存储开始处的索引。</param>
      <param name="length">一个 32 位整数，它表示要复制的元素数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> 为 <see langword="null" />。  

或 - 
<paramref name="destinationArray" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 具有不同的秩。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> 类型与 <paramref name="destinationArray" /> 类型不同，且不派生自后者。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 中至少有一个元素无法转换为 <paramref name="destinationArray" /> 的类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> 少于 <paramref name="sourceArray" /> 的第一个维度的下限。  
或 
 <paramref name="destinationIndex" /> 少于 <paramref name="destinationArray" /> 的第一个维度的下限。  
或 
 <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> 大于从 <paramref name="sourceIndex" /> 到 <paramref name="sourceArray" /> 末尾的元素数。  
或 
 <paramref name="length" /> 大于从 <paramref name="destinationIndex" /> 到 <paramref name="destinationArray" /> 末尾的元素数。</exception>
    </member>
    <member name="M:System.Array.ConvertAll``2(``0[],System.Converter{``0,``1})">
      <summary>将一种类型的数组转换为另一种类型的数组。</summary>
      <param name="array">要转换为目标类型的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="converter">用于将每个元素从一种类型转换为另一种类型的 <see cref="T:System.Converter`2" />。</param>
      <typeparam name="TInput">源数组元素的类型。</typeparam>
      <typeparam name="TOutput">目标数组元素的类型。</typeparam>
      <returns>目标类型的数组，包含从源数组转换而来的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。  
或 
 <paramref name="converter" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Array,System.Int32)">
      <summary>从第一个元素开始复制 <see cref="T:System.Array" /> 中的一系列元素，将它们粘贴到另一 <see cref="T:System.Array" /> 中（从第一个元素开始）。 长度指定为 32 位整数。</summary>
      <param name="sourceArray">包含要复制的数据的 <see cref="T:System.Array" />。</param>
      <param name="destinationArray">接收数据的 <see cref="T:System.Array" />。</param>
      <param name="length">一个 32 位整数，它表示要复制的元素数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> 为 <see langword="null" />。  

或 - 
<paramref name="destinationArray" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 具有不同的秩。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 属于不兼容的类型。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 中至少有一个元素无法转换为 <paramref name="destinationArray" /> 的类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> 大于 <paramref name="sourceArray" /> 中的元素数。  
或 
 <paramref name="length" /> 大于 <paramref name="destinationArray" /> 中的元素数。</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Array,System.Int64)">
      <summary>从第一个元素开始复制 <see cref="T:System.Array" /> 中的一系列元素，将它们粘贴到另一 <see cref="T:System.Array" /> 中（从第一个元素开始）。 长度指定为 64 位整数。</summary>
      <param name="sourceArray">包含要复制的数据的 <see cref="T:System.Array" />。</param>
      <param name="destinationArray">接收数据的 <see cref="T:System.Array" />。</param>
      <param name="length">一个 64 位整数，它表示要复制的元素数目。 该整数必须介于零和 <see cref="F:System.Int32.MaxValue" /> 之间（包括这两个值）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> 为 <see langword="null" />。  
或 
 <paramref name="destinationArray" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 具有不同的秩。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 属于不兼容的类型。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 中至少有一个元素无法转换为 <paramref name="destinationArray" /> 的类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小于 0 或大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> 大于 <paramref name="sourceArray" /> 中的元素数。  
或 
 <paramref name="length" /> 大于 <paramref name="destinationArray" /> 中的元素数。</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>复制 <see cref="T:System.Array" /> 中的一系列元素（从指定的源索引开始），并将它们粘贴到另一 <see cref="T:System.Array" /> 中（从指定的目标索引开始）。 长度和索引指定为 32 位整数。</summary>
      <param name="sourceArray">包含要复制的数据的 <see cref="T:System.Array" />。</param>
      <param name="sourceIndex">一个 32 位整数，它表示 <paramref name="sourceArray" /> 中复制开始处的索引。</param>
      <param name="destinationArray">接收数据的 <see cref="T:System.Array" />。</param>
      <param name="destinationIndex">一个 32 位整数，它表示 <paramref name="destinationArray" /> 中存储开始处的索引。</param>
      <param name="length">一个 32 位整数，它表示要复制的元素数目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> 为 <see langword="null" />。  

或 - 
<paramref name="destinationArray" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 具有不同的秩。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 属于不兼容的类型。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 中至少有一个元素无法转换为 <paramref name="destinationArray" /> 的类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> 少于 <paramref name="sourceArray" /> 的第一个维度的下限。  
或 
 <paramref name="destinationIndex" /> 少于 <paramref name="destinationArray" /> 的第一个维度的下限。  

或 - 
<paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> 大于从 <paramref name="sourceIndex" /> 到 <paramref name="sourceArray" /> 末尾的元素数。  

或 - 
<paramref name="length" /> 大于从 <paramref name="destinationIndex" /> 到 <paramref name="destinationArray" /> 末尾的元素数。</exception>
    </member>
    <member name="M:System.Array.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)">
      <summary>复制 <see cref="T:System.Array" /> 中的一系列元素（从指定的源索引开始），并将它们粘贴到另一 <see cref="T:System.Array" /> 中（从指定的目标索引开始）。 长度和索引指定为 64 位整数。</summary>
      <param name="sourceArray">包含要复制的数据的 <see cref="T:System.Array" />。</param>
      <param name="sourceIndex">一个 64 位整数，它表示复制开始处的 <paramref name="sourceArray" /> 中的索引。</param>
      <param name="destinationArray">接收数据的 <see cref="T:System.Array" />。</param>
      <param name="destinationIndex">一个 64 位整数，它表示存储开始处的 <paramref name="destinationArray" /> 中的索引。</param>
      <param name="length">一个 64 位整数，它表示要复制的元素数目。 该整数必须介于零和 <see cref="F:System.Int32.MaxValue" /> 之间（包括这两个值）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceArray" /> 为 <see langword="null" />。  
或 
 <paramref name="destinationArray" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 具有不同的秩。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="sourceArray" /> 和 <paramref name="destinationArray" /> 属于不兼容的类型。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="sourceArray" /> 中至少有一个元素无法转换为 <paramref name="destinationArray" /> 的类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" /> 超出了 <paramref name="sourceArray" /> 的有效索引范围。  
或 
 <paramref name="destinationIndex" /> 超出了 <paramref name="destinationArray" /> 的有效索引范围。  
或 
 <paramref name="length" /> 小于 0 或大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="length" /> 大于从 <paramref name="sourceIndex" /> 到 <paramref name="sourceArray" />末尾的元素数。  
或 
 <paramref name="length" /> 大于从 <paramref name="destinationIndex" /> 到 <paramref name="destinationArray" /> 末尾的元素数。</exception>
    </member>
    <member name="M:System.Array.CopyTo(System.Array,System.Int32)">
      <summary>从指定的目标数组索引处开始，将当前一维数组的所有元素复制到指定的一维数组中。 索引指定为 32 位整数。</summary>
      <param name="array">一维数组，它是从当前数组复制的元素的目标。</param>
      <param name="index">一个 32 位整数，它表示 <paramref name="array" /> 中复制开始处的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。  

或 - 
源数组中的元素数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 的末尾之间的可用元素数。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">无法自动将源 <see cref="T:System.Array" /> 的类型转换为目标 <paramref name="array" /> 的类型。</exception>
      <exception cref="T:System.RankException">源数组是多维数组。</exception>
      <exception cref="T:System.InvalidCastException">源 <see cref="T:System.Array" /> 中至少有一个元素无法转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="M:System.Array.CopyTo(System.Array,System.Int64)">
      <summary>从指定的目标数组索引处开始，将当前一维数组的所有元素复制到指定的一维数组中。 索引指定为 64 位整数。</summary>
      <param name="array">一维数组，它是从当前数组复制的元素的目标。</param>
      <param name="index">一个 64 位整数，它表示 <paramref name="array" /> 中复制开始处的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了 <paramref name="array" /> 的有效索引范围。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。  

或 - 
源数组中的元素数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 的末尾之间的可用元素数。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">无法自动将源 <see cref="T:System.Array" /> 的类型转换为目标 <paramref name="array" /> 的类型。</exception>
      <exception cref="T:System.RankException">源 <see cref="T:System.Array" /> 是多维的。</exception>
      <exception cref="T:System.InvalidCastException">源 <see cref="T:System.Array" /> 中至少有一个元素无法转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32)">
      <summary>创建使用从零开始的索引、具有指定 <see cref="T:System.Type" /> 和长度的一维 <see cref="T:System.Array" />。</summary>
      <param name="elementType">要创建的 <see cref="T:System.Array" /> 的 <see cref="T:System.Type" />。</param>
      <param name="length">要创建的 <see cref="T:System.Array" /> 的大小。</param>
      <returns>使用从零开始的索引、具有指定 <see cref="T:System.Type" /> 和长度的新的一维 <see cref="T:System.Array" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> 不是有效的 <see cref="T:System.Type" />。</exception>
      <exception cref="T:System.NotSupportedException">不支持 <paramref name="elementType" />。 例如，不支持 <see cref="T:System.Void" />。  
或 
 <paramref name="elementType" /> 为开放式泛型类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 小于零。</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32,System.Int32)">
      <summary>创建使用从零开始的索引、具有指定 <see cref="T:System.Array" /> 和维长的二维 <see cref="T:System.Type" />。</summary>
      <param name="elementType">要创建的 <see cref="T:System.Array" /> 的 <see cref="T:System.Type" />。</param>
      <param name="length1">要创建的 <see cref="T:System.Array" /> 的第一维的大小。</param>
      <param name="length2">要创建的 <see cref="T:System.Array" /> 的第二维的大小。</param>
      <returns>使用从零开始的索引、具有指定 <see cref="T:System.Array" /> 的新的二维 <see cref="T:System.Type" />，其每个维度都为指定的长度。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> 不是有效的 <see cref="T:System.Type" />。</exception>
      <exception cref="T:System.NotSupportedException">不支持 <paramref name="elementType" />。 例如，不支持 <see cref="T:System.Void" />。  
或 
 <paramref name="elementType" /> 为开放式泛型类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length1" /> 小于零。  
或 
 <paramref name="length2" /> 小于零。</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)">
      <summary>创建使用从零开始的索引、具有指定 <see cref="T:System.Type" /> 和维长的三维 <see cref="T:System.Array" />。</summary>
      <param name="elementType">要创建的 <see cref="T:System.Array" /> 的 <see cref="T:System.Type" />。</param>
      <param name="length1">要创建的 <see cref="T:System.Array" /> 的第一维的大小。</param>
      <param name="length2">要创建的 <see cref="T:System.Array" /> 的第二维的大小。</param>
      <param name="length3">要创建的 <see cref="T:System.Array" /> 的第三维的大小。</param>
      <returns>每个维具有指定长度、使用从零开始的索引的指定 <see cref="T:System.Type" /> 的新三维 <see cref="T:System.Array" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> 不是有效的 <see cref="T:System.Type" />。</exception>
      <exception cref="T:System.NotSupportedException">不支持 <paramref name="elementType" />。 例如，不支持 <see cref="T:System.Void" />。  
或 
 <paramref name="elementType" /> 为开放式泛型类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length1" /> 小于零。  
或 
 <paramref name="length2" /> 小于零。  
或 
 <paramref name="length3" /> 小于零。</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[])">
      <summary>创建索引从零开始、具有指定 <see cref="T:System.Type" /> 和维长的多维 <see cref="T:System.Array" />。 维的长度在一个 32 位整数数组中指定。</summary>
      <param name="elementType">要创建的 <see cref="T:System.Array" /> 的 <see cref="T:System.Type" />。</param>
      <param name="lengths">一个 32 位整数数组，它表示要创建的 <see cref="T:System.Array" /> 中每个维度的大小。</param>
      <returns>指定 <see cref="T:System.Type" /> 的新多维 <see cref="T:System.Array" />，该数组每个维具有指定长度，且使用从零开始的索引。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> 为 <see langword="null" />。  

或 - 
<paramref name="lengths" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> 不是有效的 <see cref="T:System.Type" />。  
或 
<paramref name="lengths" /> 数组包含的元素少于一个。</exception>
      <exception cref="T:System.NotSupportedException">不支持 <paramref name="elementType" />。 例如，不支持 <see cref="T:System.Void" />。  

或 - 
<paramref name="elementType" /> 为开放式泛型类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lengths" /> 中的任何值都小于零。</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])">
      <summary>创建具有指定下限、指定 <see cref="T:System.Array" /> 和维长的多维 <see cref="T:System.Type" />。</summary>
      <param name="elementType">要创建的 <see cref="T:System.Array" /> 的 <see cref="T:System.Type" />。</param>
      <param name="lengths">一维数组，它包含要创建的 <see cref="T:System.Array" /> 的每个维度的大小。</param>
      <param name="lowerBounds">一维数组，它包含要创建的 <see cref="T:System.Array" /> 的每个维度的下限（起始索引）。</param>
      <returns>新的指定 <see cref="T:System.Array" /> 的多维 <see cref="T:System.Type" />，每个维度都有指定的长度和下限。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> 为 <see langword="null" />。  
或 
 <paramref name="lengths" /> 为 <see langword="null" />。  

或 - 
<paramref name="lowerBounds" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> 不是有效的 <see cref="T:System.Type" />。  

或 - 
<paramref name="lengths" /> 数组包含的元素少于一个。  

或 
<paramref name="lengths" /> 和 <paramref name="lowerBounds" /> 数组包含的元素数不同。</exception>
      <exception cref="T:System.NotSupportedException">不支持 <paramref name="elementType" />。 例如，不支持 <see cref="T:System.Void" />。  
或 
 <paramref name="elementType" /> 为开放式泛型类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lengths" /> 中的任何值都小于零。  
或 
<paramref name="lowerBounds" /> 中的任意一个值都很大，因此，维的下限和长度的和大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Array.CreateInstance(System.Type,System.Int64[])">
      <summary>创建索引从零开始、具有指定 <see cref="T:System.Type" /> 和维长的多维 <see cref="T:System.Array" />。 维度的长度在一个 64 位整数数组中指定。</summary>
      <param name="elementType">要创建的 <see cref="T:System.Array" /> 的 <see cref="T:System.Type" />。</param>
      <param name="lengths">一个 64 位整数数组，它表示要创建的 <see cref="T:System.Array" /> 中每个维度的大小。 数组中的每个整数都必须介于零和 <see cref="F:System.Int32.MaxValue" /> 之间，（包括零和 System.Int32.MaxValue）。</param>
      <returns>指定 <see cref="T:System.Type" /> 的新多维 <see cref="T:System.Array" />，该数组每个维具有指定长度，且使用从零开始的索引。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elementType" /> 为 <see langword="null" />。  

或 - 
<paramref name="lengths" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elementType" /> 不是有效的 <see cref="T:System.Type" />。  
或 
<paramref name="lengths" /> 数组包含的元素少于一个。</exception>
      <exception cref="T:System.NotSupportedException">不支持 <paramref name="elementType" />。 例如，不支持 <see cref="T:System.Void" />。  

或 - 
<paramref name="elementType" /> 为开放式泛型类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lengths" /> 中的所有值都小于零或大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Array.Empty``1">
      <summary>返回一个空数组。</summary>
      <typeparam name="T">数组元素的类型。</typeparam>
      <returns>空数组。</returns>
    </member>
    <member name="M:System.Array.Exists``1(``0[],System.Predicate{``0})">
      <summary>确定指定数组包含的元素是否与指定谓词定义的条件匹配。</summary>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索的元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <returns>如果 <paramref name="array" /> 包含一个或多个元素与指定谓词定义的条件匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。  
或 
 <paramref name="match" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Array.Fill``1(``0[],``0)">
      <param name="array" />
      <param name="value" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Array.Fill``1(``0[],``0,System.Int32,System.Int32)">
      <param name="array" />
      <param name="value" />
      <param name="startIndex" />
      <param name="count" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Array.Find``1(``0[],System.Predicate{``0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <see cref="T:System.Array" /> 中的第一个匹配元素。</summary>
      <param name="array">要搜索的从零开始的一维数组。</param>
      <param name="match">用于定义要搜索的元素的条件的谓词。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <returns>如果找到与指定谓词定义的条件匹配的第一个元素，则为该元素；否则为类型 <paramref name="T" /> 的默认值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。  
或 
 <paramref name="match" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Array.FindAll``1(``0[],System.Predicate{``0})">
      <summary>检索与指定谓词定义的条件匹配的所有元素。</summary>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索的元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <returns>如果找到一个其中所有元素均与指定谓词定义的条件匹配的 <see cref="T:System.Array" />，则为该数组；否则为一个空 <see cref="T:System.Array" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。  

或 - 
<paramref name="match" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
      <summary>搜索与指定谓词所定义的条件相匹配的一个元素，并返回 <see cref="T:System.Array" /> 中从指定的索引开始、包含指定元素个数的元素范围内第一个匹配项的从零开始的索引。</summary>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。  
或 
 <paramref name="match" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。  

或 - 
<paramref name="count" /> 小于零。  

或 
 <paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="array" /> 中指定有效部分。</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回 <see cref="T:System.Array" /> 中从指定索引到最后一个元素的元素范围内第一个匹配项的从零开始的索引。</summary>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。  
或 
 <paramref name="match" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。</exception>
    </member>
    <member name="M:System.Array.FindIndex``1(``0[],System.Predicate{``0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <see cref="T:System.Array" /> 中第一个匹配元素的从零开始的索引。</summary>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。  
或 
 <paramref name="match" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Array.FindLast``1(``0[],System.Predicate{``0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <see cref="T:System.Array" /> 中的最后一个匹配元素。</summary>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <returns>如果找到，则为与指定谓词所定义的条件相匹配的最后一个元素；否则为类型 <paramref name="T" /> 的默认值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。  
或 
 <paramref name="match" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回 <see cref="T:System.Array" /> 中包含指定元素个数、到指定索引结束的元素范围内最后一个匹配项的从零开始的索引。</summary>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。  

或 - 
<paramref name="match" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。  
或 
 <paramref name="count" /> 小于零。  

或 - 
<paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="array" /> 中指定有效部分。</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})">
      <summary>搜索与由指定谓词定义的条件相匹配的元素，并返回 <see cref="T:System.Array" /> 中从第一个元素到指定索引的元素范围内最后一个匹配项的从零开始的索引。</summary>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。  
或 
 <paramref name="match" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。</exception>
    </member>
    <member name="M:System.Array.FindLastIndex``1(``0[],System.Predicate{``0})">
      <summary>搜索与指定谓词所定义的条件相匹配的元素，并返回整个 <see cref="T:System.Array" /> 中最后一个匹配元素的从零开始的索引。</summary>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="match">
        <see cref="T:System.Predicate`1" />，定义要搜索元素的条件。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <returns>如果找到与 <paramref name="match" /> 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。  
或 
 <paramref name="match" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Array.ForEach``1(``0[],System.Action{``0})">
      <summary>对指定数组的每个元素执行指定操作。</summary>
      <param name="array">从零开始的一维 <see cref="T:System.Array" />，要对其元素执行操作。</param>
      <param name="action">要对 <paramref name="array" /> 的每个元素执行的 <see cref="T:System.Action`1" />。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。  
或 
 <paramref name="action" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Array.GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Array" />。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 的一个 <see cref="T:System.Array" />。</returns>
    </member>
    <member name="M:System.Array.GetLength(System.Int32)">
      <summary>获取一个 32 位整数，该整数表示 <see cref="T:System.Array" /> 的指定维中的元素数。</summary>
      <param name="dimension">
        <see cref="T:System.Array" /> 的从零开始的维度，其长度需要确定。</param>
      <returns>一个 32 位整数，它表示指定维中的元素数。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> 小于零。  
或 
 <paramref name="dimension" /> 等于或大于 <see cref="P:System.Array.Rank" />。</exception>
    </member>
    <member name="M:System.Array.GetLongLength(System.Int32)">
      <summary>获取一个 64 位整数，该整数表示 <see cref="T:System.Array" /> 的指定维中的元素数。</summary>
      <param name="dimension">
        <see cref="T:System.Array" /> 的从零开始的维度，其长度需要确定。</param>
      <returns>一个 64 位整数，它表示指定维度中的元素数。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> 小于零。  

或 - 
<paramref name="dimension" /> 等于或大于 <see cref="P:System.Array.Rank" />。</exception>
    </member>
    <member name="M:System.Array.GetLowerBound(System.Int32)">
      <summary>获取数组中指定维度第一个元素的索引。</summary>
      <param name="dimension">数组的从零开始的维度，其起始索引需要确定。</param>
      <returns>数组中指定维度第一个元素的索引。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> 小于零。  
或 
 <paramref name="dimension" /> 等于或大于 <see cref="P:System.Array.Rank" />。</exception>
    </member>
    <member name="M:System.Array.GetUpperBound(System.Int32)">
      <summary>获取数组中指定维度最后一个元素的索引。</summary>
      <param name="dimension">数组的从零开始的维度，其上限需要确定。</param>
      <returns>数组中指定维度最后一个元素的索引，或 -1（如果指定维度为空）。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="dimension" /> 小于零。  
或 
 <paramref name="dimension" /> 等于或大于 <see cref="P:System.Array.Rank" />。</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int32)">
      <summary>获取一维 <see cref="T:System.Array" /> 中指定位置的值。 索引指定为 32 位整数。</summary>
      <param name="index">一个 32 位整数，它表示要获取的 <see cref="T:System.Array" /> 元素的位置。</param>
      <returns>一维 <see cref="T:System.Array" /> 中指定位置的值。</returns>
      <exception cref="T:System.ArgumentException">当前的 <see cref="T:System.Array" /> 不是正好有一维。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 超出当前 <see cref="T:System.Array" /> 的有效索引的范围。</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int32,System.Int32)">
      <summary>获取二维 <see cref="T:System.Array" /> 中指定位置的值。 索引指定为 32 位整数。</summary>
      <param name="index1">一个 32 位整数，它表示要获取的 <see cref="T:System.Array" /> 元素的第一维索引。</param>
      <param name="index2">一个 32 位整数，它表示要获取的 <see cref="T:System.Array" /> 元素的第二维索引。</param>
      <returns>二维 <see cref="T:System.Array" /> 中指定位置的值。</returns>
      <exception cref="T:System.ArgumentException">当前的 <see cref="T:System.Array" /> 不是正好有两维。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index1" /> 或 <paramref name="index2" /> 超出当前 <see cref="T:System.Array" /> 的对应维度的有效索引的范围。</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int32,System.Int32,System.Int32)">
      <summary>获取三维 <see cref="T:System.Array" /> 中指定位置的值。 索引指定为 32 位整数。</summary>
      <param name="index1">一个 32 位整数，它表示要获取的 <see cref="T:System.Array" /> 元素的第一维索引。</param>
      <param name="index2">一个 32 位整数，它表示要获取的 <see cref="T:System.Array" /> 元素的第二维索引。</param>
      <param name="index3">一个 32 位整数，它表示要获取的 <see cref="T:System.Array" /> 元素的第三维索引。</param>
      <returns>三维 <see cref="T:System.Array" /> 中指定位置的值。</returns>
      <exception cref="T:System.ArgumentException">当前的 <see cref="T:System.Array" /> 不是正好有三维。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index1" /> 或 <paramref name="index2" /> 或 <paramref name="index3" /> 超出当前 <see cref="T:System.Array" /> 的对应维度的有效索引的范围。</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int32[])">
      <summary>获取多维 <see cref="T:System.Array" /> 中指定位置的值。 索引指定为一个 32 位整数数组。</summary>
      <param name="indices">32 位整数的一维数组，它表示用于指定要获取的 <see cref="T:System.Array" /> 元素的位置的索引。</param>
      <returns>多维 <see cref="T:System.Array" /> 中指定位置的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">当前 <see cref="T:System.Array" /> 中的维数不等于 <paramref name="indices" /> 中的元素数。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="indices" /> 中的任何元素都超出当前 <see cref="T:System.Array" /> 的对应维度的有效索引的范围。</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int64)">
      <summary>获取一维 <see cref="T:System.Array" /> 中指定位置的值。 索引指定为 64 位整数。</summary>
      <param name="index">一个 64 位整数，它表示要获取的 <see cref="T:System.Array" /> 元素的位置。</param>
      <returns>一维 <see cref="T:System.Array" /> 中指定位置的值。</returns>
      <exception cref="T:System.ArgumentException">当前的 <see cref="T:System.Array" /> 不是正好有一维。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出当前 <see cref="T:System.Array" /> 的有效索引的范围。</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int64,System.Int64)">
      <summary>获取二维 <see cref="T:System.Array" /> 中指定位置的值。 索引指定为 64 位整数。</summary>
      <param name="index1">一个 64 位整数，它表示要获取的 <see cref="T:System.Array" /> 元素的第一维索引。</param>
      <param name="index2">一个 64 位整数，它表示要获取的 <see cref="T:System.Array" /> 元素的第二维索引。</param>
      <returns>二维 <see cref="T:System.Array" /> 中指定位置的值。</returns>
      <exception cref="T:System.ArgumentException">当前的 <see cref="T:System.Array" /> 不是正好有两维。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index1" /> 或 <paramref name="index2" /> 超出当前 <see cref="T:System.Array" /> 的对应维度的有效索引的范围。</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int64,System.Int64,System.Int64)">
      <summary>获取三维 <see cref="T:System.Array" /> 中指定位置的值。 索引指定为 64 位整数。</summary>
      <param name="index1">一个 64 位整数，它表示要获取的 <see cref="T:System.Array" /> 元素的第一维索引。</param>
      <param name="index2">一个 64 位整数，它表示要获取的 <see cref="T:System.Array" /> 元素的第二维索引。</param>
      <param name="index3">一个 64 位整数，它表示要获取的 <see cref="T:System.Array" /> 元素的第三维索引。</param>
      <returns>三维 <see cref="T:System.Array" /> 中指定位置的值。</returns>
      <exception cref="T:System.ArgumentException">当前的 <see cref="T:System.Array" /> 不是正好有三维。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index1" /> 或 <paramref name="index2" /> 或 <paramref name="index3" /> 超出当前 <see cref="T:System.Array" /> 的对应维度的有效索引的范围。</exception>
    </member>
    <member name="M:System.Array.GetValue(System.Int64[])">
      <summary>获取多维 <see cref="T:System.Array" /> 中指定位置的值。 索引指定为一个 64 位整数数组。</summary>
      <param name="indices">一个 64 位整数的一维数组，它表示指定要获取的 <see cref="T:System.Array" /> 元素的位置的索引。</param>
      <returns>多维 <see cref="T:System.Array" /> 中指定位置的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">当前 <see cref="T:System.Array" /> 中的维数不等于 <paramref name="indices" /> 中的元素数。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indices" /> 中的任何元素都超出当前 <see cref="T:System.Array" /> 的对应维度的有效索引的范围。</exception>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object)">
      <summary>在一个一维数组中搜索指定对象，并返回其首个匹配项的索引。</summary>
      <param name="array">要搜索的一维数组。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <returns>如果找到，则为 <paramref name="array" /> 中 <paramref name="value" /> 的第一个匹配项的索引；否则为该数组的下限减 1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32)">
      <summary>在一个一维数组的一系列元素中搜索指定对象，然后返回其首个匹配项的索引。 范围从指定索引到该数组结尾。</summary>
      <param name="array">要搜索的一维数组。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <param name="startIndex">搜索的起始索引。 空数组中 0（零）为有效值。</param>
      <returns>如果在从 <paramref name="startIndex" /> 到最后一个元素的 <paramref name="array" /> 中的元素范围中找到了 <paramref name="value" /> 的第一个匹配项的索引，则为该索引；否则为数组的下限减 1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
    </member>
    <member name="M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>在一个一维数组的一系列元素中搜索指定对象，然后返回其首个匹配项的索引。 该元素系列的范围从指定数量的元素的指定索引开始。</summary>
      <param name="array">要搜索的一维数组。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <param name="startIndex">搜索的起始索引。 空数组中 0（零）为有效值。</param>
      <param name="count">要搜索的元素数。</param>
      <returns>如果在从索引 <paramref name="startIndex" /> 到 <paramref name="startIndex" /> + <paramref name="count" /> - 1 的 <paramref name="array" /> 中找到了 <paramref name="value" /> 的第一个匹配项的索引，则为该索引；否则为该数组的下限减 1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。  
或 
 <paramref name="count" /> 小于零。  

或 - 
<paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="array" /> 中指定有效部分。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0)">
      <summary>在一个一维数组中搜索指定对象，并返回其首个匹配项的索引。</summary>
      <param name="array">要搜索的从零开始的一维数组。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <returns>如果在整个 <paramref name="array" /> 中找到 <paramref name="value" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32)">
      <summary>在一个一维数组的一系列元素中搜索指定对象，然后返回其首个匹配项的索引。 范围从指定索引到该数组结尾。</summary>
      <param name="array">要搜索的从零开始的一维数组。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <param name="startIndex">从零开始的搜索的起始索引。 空数组中 0（零）为有效值。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <returns>如果在 <paramref name="value" /> 中从 <paramref name="array" /> 到最后一个元素这部分元素中找到 <paramref name="startIndex" /> 的匹配项，则为第一个匹配项的从零开始的索引；否则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。</exception>
    </member>
    <member name="M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>在一个一维数组的一系列元素中搜索指定对象，然后返回其首个匹配项的索引。 该元素系列的范围从指定数量的元素的指定索引开始。</summary>
      <param name="array">要搜索的从零开始的一维数组。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <param name="startIndex">从零开始的搜索的起始索引。 空数组中 0（零）为有效值。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <returns>如果在从 <paramref name="count" /> 开始并且包含 <paramref name="startIndex" /> 中指定元素数量的 <paramref name="array" /> 元素范围中找到了 <paramref name="value" /> 第一个匹配项从零开始的索引，则为该索引；否则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。  

或 - 
<paramref name="count" /> 小于零。  

或 
 <paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="array" /> 中指定有效部分。</exception>
    </member>
    <member name="M:System.Array.Initialize">
      <summary>通过调用值类型的无参数构造函数，初始化值类型 <see cref="T:System.Array" /> 的每一个元素。</summary>
    </member>
    <member name="P:System.Array.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Array" /> 是否具有固定大小。</summary>
      <returns>此属性对于所有数组总是 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Array.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Array" /> 是否为只读。</summary>
      <returns>此属性对于所有数组总是 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Array.IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Array" /> 的访问（线程安全）。</summary>
      <returns>此属性对于所有数组总是 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object)">
      <summary>搜索指定的对象，并返回整个一维 <see cref="T:System.Array" /> 中最后一个匹配项的索引。</summary>
      <param name="array">要搜索的一维 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <returns>如果在整个 <paramref name="value" /> 中找到 <paramref name="array" /> 的匹配项，则为最后一个匹配项的索引；否则为该数组的下限减 1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32)">
      <summary>搜索指定的对象，并返回一维 <see cref="T:System.Array" /> 中从第一个元素到指定索引这部分元素中最后一个匹配项的索引。</summary>
      <param name="array">要搜索的一维 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <param name="startIndex">向后搜索的起始索引。</param>
      <returns>如果在 <paramref name="value" /> 中从第一个元素到 <paramref name="array" /> 这部分元素中找到 <paramref name="startIndex" /> 的匹配项，则为最后一个匹配项的索引；否则为该数组的下限减 1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
      <summary>搜索指定的对象，并返回一维 <see cref="T:System.Array" /> 中到指定索引为止包含指定个元素的这部分元素中最后一个匹配项的索引。</summary>
      <param name="array">要搜索的一维 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <param name="startIndex">向后搜索的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <returns>如果在 <paramref name="value" /> 中到 <paramref name="array" /> 为止并且包含的元素个数为在 <paramref name="count" /> 中指定的个数的这部分元素中找到 <paramref name="startIndex" /> 的匹配项，则为最后一个匹配项的索引；否则为该数组的下限减 1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。  
或 
 <paramref name="count" /> 小于零。  
或 
 <paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="array" /> 中指定有效部分。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0)">
      <summary>搜索指定的对象，并返回整个 <see cref="T:System.Array" /> 中最后一个匹配项的索引。</summary>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <returns>如果在整个 <paramref name="array" /> 中找到 <paramref name="value" /> 的最后一个匹配项从零开始的索引，则为该索引；否则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)">
      <summary>搜索指定的对象，并返回 <see cref="T:System.Array" /> 中从第一个元素到指定索引这部分元素中最后一个匹配项的索引。</summary>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <returns>如果在 <paramref name="array" /> 中从第一个元素到 <paramref name="startIndex" /> 的元素范围中找到了该 <paramref name="value" /> 最后一个匹配项从零开始的索引，则为该索引；否则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。</exception>
    </member>
    <member name="M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)">
      <summary>搜索指定的对象，并返回 <see cref="T:System.Array" /> 中到指定索引为止包含指定个元素的这部分元素中最后一个匹配项的索引。</summary>
      <param name="array">要搜索的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="value">要在 <paramref name="array" /> 中查找的对象。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <returns>如果在 <paramref name="startIndex" /> 中找到了包含 <paramref name="count" /> 中指定元素数并且到 <paramref name="array" /> 结尾的元素范围内的 <paramref name="value" /> 的最后一个匹配项的从零开始的索引，则为该索引；否则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="array" /> 的有效索引范围。  
或 
 <paramref name="count" /> 小于零。  
或 
 <paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="array" /> 中指定有效部分。</exception>
    </member>
    <member name="P:System.Array.Length">
      <summary>获取 <see cref="T:System.Array" /> 的所有维度中的元素总数。</summary>
      <returns>
        <see cref="T:System.Array" /> 的所有维度中的元素总数；如果数组中无元素，则为零。</returns>
      <exception cref="T:System.OverflowException">数组是多维的，并且包括多于 <see cref="F:System.Int32.MaxValue" /> 个元素。</exception>
    </member>
    <member name="P:System.Array.LongLength">
      <summary>获取一个 64 位整数，该整数表示 <see cref="T:System.Array" /> 的所有维数中元素的总数。</summary>
      <returns>一个 64 位整数，表示 <see cref="T:System.Array" /> 的所有维数中元素的总数。</returns>
    </member>
    <member name="P:System.Array.Rank">
      <summary>获取 <see cref="T:System.Array" /> 的秩（维数）。 例如，一维数组返回 1，二维数组返回 2，依次类推。</summary>
      <returns>该 <see cref="T:System.Array" /> 的秩（维数）。</returns>
    </member>
    <member name="M:System.Array.Resize``1(``0[]@,System.Int32)">
      <summary>将一维数组的元素数更改为指定的新大小。</summary>
      <param name="array">要调整大小的一维数组，该数组从零开始；如果为 <see langword="null" />，则新建具有指定大小的数组。</param>
      <param name="newSize">新数组的大小。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="newSize" /> 小于零。</exception>
    </member>
    <member name="M:System.Array.Reverse(System.Array)">
      <summary>反转整个一维 <see cref="T:System.Array" /> 中元素的顺序。</summary>
      <param name="array">要反转的一维 <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
    </member>
    <member name="M:System.Array.Reverse(System.Array,System.Int32,System.Int32)">
      <summary>反转一维 <see cref="T:System.Array" /> 中某部分元素的元素顺序。</summary>
      <param name="array">要反转的一维 <see cref="T:System.Array" />。</param>
      <param name="index">要反转的部分的起始索引。</param>
      <param name="length">要反转的部分中的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。  
或 
 <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="array" /> 中指定有效范围。</exception>
    </member>
    <member name="M:System.Array.Reverse``1(``0[])">
      <param name="array" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Array.Reverse``1(``0[],System.Int32,System.Int32)">
      <param name="array" />
      <param name="index" />
      <param name="length" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32)">
      <summary>将某值设置给一维 <see cref="T:System.Array" /> 中指定位置的元素。 索引指定为 32 位整数。</summary>
      <param name="value">指定元素的新值。</param>
      <param name="index">一个 32 位整数，它表示要设置的 <see cref="T:System.Array" /> 元素的位置。</param>
      <exception cref="T:System.ArgumentException">当前的 <see cref="T:System.Array" /> 不是正好有一维。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不能转换为当前 <see cref="T:System.Array" />的元素类型。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 超出当前 <see cref="T:System.Array" /> 的有效索引的范围。</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32,System.Int32)">
      <summary>将某值设置给二维 <see cref="T:System.Array" /> 中指定位置的元素。 索引指定为 32 位整数。</summary>
      <param name="value">指定元素的新值。</param>
      <param name="index1">一个 32 位整数，它表示要设置的 <see cref="T:System.Array" /> 元素的第一维索引。</param>
      <param name="index2">一个 32 位整数，它表示要设置的 <see cref="T:System.Array" /> 元素的第二维索引。</param>
      <exception cref="T:System.ArgumentException">当前的 <see cref="T:System.Array" /> 不是正好有两维。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不能强制转换为当前 <see cref="T:System.Array" /> 的元素类型。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index1" /> 或 <paramref name="index2" /> 超出当前 <see cref="T:System.Array" /> 的对应维度的有效索引的范围。</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32,System.Int32,System.Int32)">
      <summary>将某值设置给三维 <see cref="T:System.Array" /> 中指定位置的元素。 索引指定为 32 位整数。</summary>
      <param name="value">指定元素的新值。</param>
      <param name="index1">一个 32 位整数，它表示要设置的 <see cref="T:System.Array" /> 元素的第一维索引。</param>
      <param name="index2">一个 32 位整数，它表示要设置的 <see cref="T:System.Array" /> 元素的第二维索引。</param>
      <param name="index3">一个 32 位整数，它表示要设置的 <see cref="T:System.Array" /> 元素的第三维索引。</param>
      <exception cref="T:System.ArgumentException">当前的 <see cref="T:System.Array" /> 不是正好有三维。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不能强制转换为当前 <see cref="T:System.Array" /> 的元素类型。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index1" /> 或 <paramref name="index2" /> 或 <paramref name="index3" /> 超出当前 <see cref="T:System.Array" /> 的对应维度的有效索引的范围。</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int32[])">
      <summary>将某值设置给多维 <see cref="T:System.Array" /> 中指定位置的元素。 索引指定为一个 32 位整数数组。</summary>
      <param name="value">指定元素的新值。</param>
      <param name="indices">32 位整数的一维数组，它表示用于指定要设置的元素的位置的索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">当前 <see cref="T:System.Array" /> 中的维数不等于 <paramref name="indices" /> 中的元素数。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不能强制转换为当前 <see cref="T:System.Array" /> 的元素类型。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="indices" /> 中的任何元素都超出当前 <see cref="T:System.Array" /> 的对应维度的有效索引的范围。</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int64)">
      <summary>将某值设置给一维 <see cref="T:System.Array" /> 中指定位置的元素。 索引指定为 64 位整数。</summary>
      <param name="value">指定元素的新值。</param>
      <param name="index">一个 64 位整数，它表示要设置的 <see cref="T:System.Array" /> 元素的位置。</param>
      <exception cref="T:System.ArgumentException">当前的 <see cref="T:System.Array" /> 不是正好有一维。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不能转换为当前 <see cref="T:System.Array" />的元素类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出当前 <see cref="T:System.Array" /> 的有效索引的范围。</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int64,System.Int64)">
      <summary>将某值设置给二维 <see cref="T:System.Array" /> 中指定位置的元素。 索引指定为 64 位整数。</summary>
      <param name="value">指定元素的新值。</param>
      <param name="index1">一个 64 位整数，它表示要设置的 <see cref="T:System.Array" /> 元素的第一维索引。</param>
      <param name="index2">一个 64 位整数，它表示要设置的 <see cref="T:System.Array" /> 元素的第二维索引。</param>
      <exception cref="T:System.ArgumentException">当前的 <see cref="T:System.Array" /> 不是正好有两维。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不能强制转换为当前 <see cref="T:System.Array" /> 的元素类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index1" /> 或 <paramref name="index2" /> 超出当前 <see cref="T:System.Array" /> 的对应维度的有效索引的范围。</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int64,System.Int64,System.Int64)">
      <summary>将某值设置给三维 <see cref="T:System.Array" /> 中指定位置的元素。 索引指定为 64 位整数。</summary>
      <param name="value">指定元素的新值。</param>
      <param name="index1">一个 64 位整数，它表示要设置的 <see cref="T:System.Array" /> 元素的第一维索引。</param>
      <param name="index2">一个 64 位整数，它表示要设置的 <see cref="T:System.Array" /> 元素的第二维索引。</param>
      <param name="index3">一个 64 位整数，它表示要设置的 <see cref="T:System.Array" /> 元素的第三维索引。</param>
      <exception cref="T:System.ArgumentException">当前的 <see cref="T:System.Array" /> 不是正好有三维。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不能强制转换为当前 <see cref="T:System.Array" /> 的元素类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index1" /> 或 <paramref name="index2" /> 或 <paramref name="index3" /> 超出当前 <see cref="T:System.Array" /> 的对应维度的有效索引的范围。</exception>
    </member>
    <member name="M:System.Array.SetValue(System.Object,System.Int64[])">
      <summary>将某值设置给多维 <see cref="T:System.Array" /> 中指定位置的元素。 索引指定为一个 64 位整数数组。</summary>
      <param name="value">指定元素的新值。</param>
      <param name="indices">64 位整数的一维数组，它表示用于指定要设置元素的位置索引。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="indices" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">当前 <see cref="T:System.Array" /> 中的维数不等于 <paramref name="indices" /> 中的元素数。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="value" /> 不能强制转换为当前 <see cref="T:System.Array" /> 的元素类型。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indices" /> 中的任何元素都超出当前 <see cref="T:System.Array" /> 的对应维度的有效索引的范围。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array)">
      <summary>使用 <see cref="T:System.Array" /> 中每个元素的 <see cref="T:System.IComparable" /> 实现，对整个一维 <see cref="T:System.Array" /> 中的元素进行排序。</summary>
      <param name="array">要排序的一维 <see cref="T:System.Array" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable" /> 接口。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array)">
      <summary>基于第一个 <see cref="T:System.Array" /> 中的关键字，使用每个关键字的 <see cref="T:System.Array" /> 实现，对两个一维 <see cref="T:System.IComparable" /> 对象（一个包含关键字，另一个包含对应的项）进行排序。</summary>
      <param name="keys">一维 <see cref="T:System.Array" />，它包含要排序的关键字。</param>
      <param name="items">一维 <see cref="T:System.Array" />，其中包含与 <paramref name="keys" /><see cref="T:System.Array" /> 中每个关键字对应的项。  
或 
 如果为 <see langword="null" />，则只对 <paramref name="keys" /><see cref="T:System.Array" /> 进行排序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 是多维的。  
或 
<paramref name="items" /><see cref="T:System.Array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 <see langword="null" />，并且 <paramref name="keys" /> 的长度大于 <paramref name="items" /> 的长度。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable" /> 接口。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)">
      <summary>基于第一个 <see cref="T:System.Array" /> 中的关键字，使用指定的 <see cref="T:System.Array" />，对两个一维 <see cref="T:System.Collections.IComparer" /> 对象（一个包含关键字，另一个包含对应的项）进行排序。</summary>
      <param name="keys">一维 <see cref="T:System.Array" />，它包含要排序的关键字。</param>
      <param name="items">一维 <see cref="T:System.Array" />，其中包含与 <paramref name="keys" /><see cref="T:System.Array" /> 中每个关键字对应的项。  
或 
 如果为 <see langword="null" />，则只对 <paramref name="keys" /><see cref="T:System.Array" /> 进行排序。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.IComparer" /> 实现。  
或 
 若为 <see langword="null" />，则使用每个元素的 <see cref="T:System.IComparable" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 是多维的。  

或 - 
<paramref name="items" /><see cref="T:System.Array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 <see langword="null" />，并且 <paramref name="keys" /> 的长度大于 <paramref name="items" /> 的长度。  
或 
<paramref name="comparer" /> 的实现导致排序时出现错误。 例如，将某个项与其自身比较时，<paramref name="comparer" /> 可能不返回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 <see langword="null" />，且 <paramref name="keys" /><see cref="T:System.Array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable" /> 接口。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)">
      <summary>基于第一个 <see cref="T:System.Array" /> 中的关键字，使用每个关键字的 <see cref="T:System.Array" /> 实现，对两个一维 <see cref="T:System.IComparable" /> 对象（一个包含关键字，另一个包含对应的项）的部分元素进行排序。</summary>
      <param name="keys">一维 <see cref="T:System.Array" />，它包含要排序的关键字。</param>
      <param name="items">一维 <see cref="T:System.Array" />，其中包含与 <paramref name="keys" /><see cref="T:System.Array" /> 中每个关键字对应的项。  
或 
 如果为 <see langword="null" />，则只对 <paramref name="keys" /><see cref="T:System.Array" /> 进行排序。</param>
      <param name="index">排序范围的起始索引。</param>
      <param name="length">排序范围内的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 是多维的。  

或 - 
<paramref name="items" /><see cref="T:System.Array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="keys" /> 的下限。  
或 
 <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不为 <see langword="null" />，且 <paramref name="keys" /> 的长度大于 <paramref name="items" />的长度。  
或 
 <paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="keys" /><see cref="T:System.Array" /> 中指定有效范围。  
或 
 <paramref name="items" /> 不为 <see langword="null" />，且 <paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="items" /><see cref="T:System.Array" /> 中指定有效范围。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable" /> 接口。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>基于第一个 <see cref="T:System.Array" /> 中的关键字，使用指定的 <see cref="T:System.Array" />，对两个一维 <see cref="T:System.Collections.IComparer" /> 对象（一个包含关键字，另一个包含对应的项）的部分元素进行排序。</summary>
      <param name="keys">一维 <see cref="T:System.Array" />，它包含要排序的关键字。</param>
      <param name="items">一维 <see cref="T:System.Array" />，其中包含与 <paramref name="keys" /><see cref="T:System.Array" /> 中每个关键字对应的项。  

或 - 
如果为 <see langword="null" />，则只对 <paramref name="keys" /><see cref="T:System.Array" /> 进行排序。</param>
      <param name="index">排序范围的起始索引。</param>
      <param name="length">排序范围内的元素数。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.IComparer" /> 实现。  
或 
 若为 <see langword="null" />，则使用每个元素的 <see cref="T:System.IComparable" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 是多维的。  
或 
<paramref name="items" /><see cref="T:System.Array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="keys" /> 的下限。  
或 
 <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 <see langword="null" />，且 <paramref name="keys" /> 的下限与 <paramref name="items" /> 的下限不匹配。  
或 
 <paramref name="items" /> 不是 <see langword="null" />，并且 <paramref name="keys" /> 的长度大于 <paramref name="items" /> 的长度。  

或 - 
<paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="keys" /><see cref="T:System.Array" /> 中指定有效范围。  

或 
 <paramref name="items" /> 不为 <see langword="null" />，且 <paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="items" /><see cref="T:System.Array" /> 中指定有效范围。  
或 
<paramref name="comparer" /> 的实现导致排序时出现错误。 例如，将某个项与其自身比较时，<paramref name="comparer" /> 可能不返回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 <see langword="null" />，且 <paramref name="keys" /><see cref="T:System.Array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable" /> 接口。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Array" />，对一维 <see cref="T:System.Collections.IComparer" /> 中的元素进行排序。</summary>
      <param name="array">要排序的一维数组。</param>
      <param name="comparer">比较元素时要使用的实现。  
或 
 若为 <see langword="null" />，则使用每个元素的 <see cref="T:System.IComparable" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 <see langword="null" />，<paramref name="array" /> 中的一个或多个元素不实现 <see cref="T:System.IComparable" /> 接口。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 的实现导致排序时出现错误。 例如，将某个项与其自身比较时，<paramref name="comparer" /> 可能不返回 0。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32)">
      <summary>使用 <see cref="T:System.Array" /> 中每个元素的 <see cref="T:System.IComparable" /> 实现，对一维 <see cref="T:System.Array" /> 中某部分元素进行排序。</summary>
      <param name="array">要排序的一维 <see cref="T:System.Array" />。</param>
      <param name="index">排序范围的起始索引。</param>
      <param name="length">排序范围内的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。  
或 
 <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="array" /> 中指定有效范围。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable" /> 接口。</exception>
    </member>
    <member name="M:System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Array" />，对一维 <see cref="T:System.Collections.IComparer" /> 的部分元素进行排序。</summary>
      <param name="array">要排序的一维 <see cref="T:System.Array" />。</param>
      <param name="index">排序范围的起始索引。</param>
      <param name="length">排序范围内的元素数。</param>
      <param name="comparer">比较元素时要使用的 <see cref="T:System.Collections.IComparer" /> 实现。  

或 - 
若为 <see langword="null" />，则使用每个元素的 <see cref="T:System.IComparable" /> 实现。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> 是多维的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。  
或 
 <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="array" /> 中指定有效范围。  
或 
<paramref name="comparer" /> 的实现导致排序时出现错误。 例如，将某个项与其自身比较时，<paramref name="comparer" /> 可能不返回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 <see langword="null" />，<paramref name="array" /> 中的一个或多个元素不实现 <see cref="T:System.IComparable" /> 接口。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[])">
      <summary>使用 <see cref="T:System.Array" /> 的每个元素的 <see cref="T:System.IComparable`1" /> 泛型接口实现，对整个 <see cref="T:System.Array" /> 中的元素进行排序。</summary>
      <param name="array">要排序的从零开始的一维 <see cref="T:System.Array" />。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Array" /> 泛型接口，对 <see cref="T:System.Collections.Generic.IComparer`1" /> 中的元素进行排序。</summary>
      <param name="array">要排序的从零开始的一维 <see cref="T:System.Array" /></param>
      <param name="comparer">比较元素时使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型接口实现；如果为 <see langword="null" />，则使用每个元素的 <see cref="T:System.IComparable`1" /> 泛型接口实现。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 <see langword="null" />，并且 <paramref name="array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" /> 的实现导致排序时出现错误。 例如，将某个项与其自身比较时，<paramref name="comparer" /> 可能不返回 0。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Comparison{``0})">
      <summary>使用指定的 <see cref="T:System.Array" /> 对 <see cref="T:System.Comparison`1" /> 中的元素进行排序。</summary>
      <param name="array">要排序的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="comparison">比较元素时要使用的 <see cref="T:System.Comparison`1" />。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。  

或 - 
<paramref name="comparison" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparison" /> 的实现导致排序时出现错误。 例如，将某个项与其自身比较时，<paramref name="comparison" /> 可能不返回 0。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32)">
      <summary>使用 <see cref="T:System.Array" /> 的每个元素的 <see cref="T:System.IComparable`1" /> 泛型接口实现，对 <see cref="T:System.Array" /> 中某个元素范围内的元素进行排序。</summary>
      <param name="array">要排序的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="index">排序范围的起始索引。</param>
      <param name="length">排序范围内的元素数。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。  
或 
 <paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="array" /> 中指定有效范围。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>使用指定的 <see cref="T:System.Array" /> 泛型接口，对 <see cref="T:System.Collections.Generic.IComparer`1" /> 中某个元素范围内的元素进行排序。</summary>
      <param name="array">要排序的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="index">排序范围的起始索引。</param>
      <param name="length">排序范围内的元素数。</param>
      <param name="comparer">比较元素时使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型接口实现；如果为 <see langword="null" />，则使用每个元素的 <see cref="T:System.IComparable`1" /> 泛型接口实现。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。  

或 - 
<paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="array" /> 中指定有效范围。  
或 
<paramref name="comparer" /> 的实现导致排序时出现错误。 例如，将某个项与其自身比较时，<paramref name="comparer" /> 可能不返回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 <see langword="null" />，并且 <paramref name="array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[])">
      <summary>基于第一个 <see cref="T:System.Array" /> 中的关键字，使用每个关键字的 <see cref="T:System.Array" /> 泛型接口实现，对两个 <see cref="T:System.IComparable`1" /> 对象（一个包含关键字，另一个包含对应的项）进行排序。</summary>
      <param name="keys">从零开始的一维 <see cref="T:System.Array" />，它包含要排序的关键字。</param>
      <param name="items">从零开始的一维 <see cref="T:System.Array" />，其中包含与 <paramref name="keys" /> 中的关键字对应的项；如果为 <see langword="null" />，则只对 <paramref name="keys" /> 进行排序。</param>
      <typeparam name="TKey">关键字数组元素的类型。</typeparam>
      <typeparam name="TValue">项数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不为 <see langword="null" />，且 <paramref name="keys" /> 的下限与 <paramref name="items" />的下限不匹配。  
或 
 <paramref name="items" /> 不是 <see langword="null" />，并且 <paramref name="keys" /> 的长度大于 <paramref name="items" /> 的长度。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 中的一个或多个元素不实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})">
      <summary>基于第一个 <see cref="T:System.Array" /> 中的关键字，使用指定的 <see cref="T:System.Array" /> 泛型接口，对两个 <see cref="T:System.Collections.Generic.IComparer`1" /> 对象（一个包含关键字，另一个包含对应的项）进行排序。</summary>
      <param name="keys">从零开始的一维 <see cref="T:System.Array" />，它包含要排序的关键字。</param>
      <param name="items">从零开始的一维 <see cref="T:System.Array" />，其中包含与 <paramref name="keys" /> 中的关键字对应的项；如果为 <see langword="null" />，则只对 <paramref name="keys" /> 进行排序。</param>
      <param name="comparer">比较元素时使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型接口实现；如果为 <see langword="null" />，则使用每个元素的 <see cref="T:System.IComparable`1" /> 泛型接口实现。</param>
      <typeparam name="TKey">关键字数组元素的类型。</typeparam>
      <typeparam name="TValue">项数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不为 <see langword="null" />，且 <paramref name="keys" /> 的下限与 <paramref name="items" />的下限不匹配。  
或 
 <paramref name="items" /> 不是 <see langword="null" />，并且 <paramref name="keys" /> 的长度大于 <paramref name="items" /> 的长度。  
或 
<paramref name="comparer" /> 的实现导致排序时出现错误。 例如，将某个项与其自身比较时，<paramref name="comparer" /> 可能不返回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 <see langword="null" />，且 <paramref name="keys" /><see cref="T:System.Array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)">
      <summary>基于第一个 <see cref="T:System.Array" /> 中的关键字，使用每个关键字的 <see cref="T:System.Array" /> 泛型接口实现，对两个 <see cref="T:System.IComparable`1" /> 对象（一个包含关键字，另一个包含对应的项）的部分元素进行排序。</summary>
      <param name="keys">从零开始的一维 <see cref="T:System.Array" />，它包含要排序的关键字。</param>
      <param name="items">从零开始的一维 <see cref="T:System.Array" />，其中包含与 <paramref name="keys" /> 中的关键字对应的项；如果为 <see langword="null" />，则只对 <paramref name="keys" /> 进行排序。</param>
      <param name="index">排序范围的起始索引。</param>
      <param name="length">排序范围内的元素数。</param>
      <typeparam name="TKey">关键字数组元素的类型。</typeparam>
      <typeparam name="TValue">项数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="keys" /> 的下限。  

或 - 
<paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 <see langword="null" />，且 <paramref name="keys" /> 的下限与 <paramref name="items" /> 的下限不匹配。  

或 - 
<paramref name="items" /> 不是 <see langword="null" />，并且 <paramref name="keys" /> 的长度大于 <paramref name="items" /> 的长度。  

或 - 
<paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="keys" /><see cref="T:System.Array" /> 中指定有效范围。  


或 
 <paramref name="items" /> 不为 <see langword="null" />，且 <paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="items" /><see cref="T:System.Array" /> 中指定有效范围。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="keys" />
        <see cref="T:System.Array" /> 中的一个或多个元素不实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
    </member>
    <member name="M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
      <summary>基于第一个 <see cref="T:System.Array" /> 中的关键字，使用指定的 <see cref="T:System.Array" /> 泛型接口，对两个 <see cref="T:System.Collections.Generic.IComparer`1" /> 对象（一个包含关键字，另一个包含对应的项）的部分元素进行排序。</summary>
      <param name="keys">从零开始的一维 <see cref="T:System.Array" />，它包含要排序的关键字。</param>
      <param name="items">从零开始的一维 <see cref="T:System.Array" />，其中包含与 <paramref name="keys" /> 中的关键字对应的项；如果为 <see langword="null" />，则只对 <paramref name="keys" /> 进行排序。</param>
      <param name="index">排序范围的起始索引。</param>
      <param name="length">排序范围内的元素数。</param>
      <param name="comparer">比较元素时使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 泛型接口实现；如果为 <see langword="null" />，则使用每个元素的 <see cref="T:System.IComparable`1" /> 泛型接口实现。</param>
      <typeparam name="TKey">关键字数组元素的类型。</typeparam>
      <typeparam name="TValue">项数组元素的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keys" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="keys" /> 的下限。  

或 - 
<paramref name="length" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="items" /> 不是 <see langword="null" />，且 <paramref name="keys" /> 的下限与 <paramref name="items" /> 的下限不匹配。  
或 
 <paramref name="items" /> 不是 <see langword="null" />，并且 <paramref name="keys" /> 的长度大于 <paramref name="items" /> 的长度。  

或 - 
<paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="keys" /><see cref="T:System.Array" /> 中指定有效范围。  

或 - 
<paramref name="items" /> 不为 <see langword="null" />，且 <paramref name="index" /> 和 <paramref name="length" /> 未在 <paramref name="items" /><see cref="T:System.Array" /> 中指定有效范围。  


或 
<paramref name="comparer" /> 的实现导致排序时出现错误。 例如，将某个项与其自身比较时，<paramref name="comparer" /> 可能不返回 0。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> 为 <see langword="null" />，且 <paramref name="keys" /><see cref="T:System.Array" /> 中的一个或多个元素未实现 <see cref="T:System.IComparable`1" /> 泛型接口。</exception>
    </member>
    <member name="P:System.Array.SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Array" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Array" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Array.System#Collections#ICollection#Count">
      <summary>获取 <see cref="T:System.Array" /> 中包含的元素数。</summary>
      <returns>集合中包含的元素数。</returns>
    </member>
    <member name="M:System.Array.System#Collections#IList#Add(System.Object)">
      <summary>调用此方法始终会引发 <see cref="T:System.NotSupportedException" /> 异常。</summary>
      <param name="value">要添加到 <see cref="T:System.Collections.IList" /> 的对象。</param>
      <returns>不支持向数组添加值。 不返回任何值。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Clear">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Contains(System.Object)">
      <summary>确定某元素是否在 <see cref="T:System.Collections.IList" /> 中。</summary>
      <param name="value">要在当前列表中定位的对象。 要定位的元素对于引用类型可以是 <see langword="null" />。</param>
      <returns>如果在 <see langword="true" /> 中找到 <paramref name="value" />，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Array.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。</summary>
      <param name="value">要在当前列表中定位的对象。</param>
      <returns>如果在列表中找到，则为值的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Array.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>在 <see cref="T:System.Collections.IList" /> 中的指定索引处插入一个项。</summary>
      <param name="index">应插入 <paramref name="value" /> 的索引位置。</param>
      <param name="value">要插入的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。  
或 
<see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> 在 <see cref="T:System.Collections.IList" /> 中是 null 引用。</exception>
    </member>
    <member name="P:System.Array.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的索引。</param>
      <returns>指定索引处的元素。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。  

或 - 
<paramref name="index" /> 等于或大于 <see cref="P:System.Collections.ICollection.Count" />。</exception>
      <exception cref="T:System.ArgumentException">当前的 <see cref="T:System.Array" /> 不是正好有一维。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从 <see cref="T:System.Collections.IList" /> 中删除的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。  
或 
<see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除位于指定索引处的 <see cref="T:System.Collections.IList" /> 项。</summary>
      <param name="index">要移除的元素的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">索引不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。  
或 
<see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>确定当前集合对象在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">一个将当前对象与 <paramref name="other" /> 进行比较的对象。</param>
      <returns>一个指示当前集合对象与其他对象的关系的整数，如下表所示。  
  返回值 
  说明 
  -1 
  当前实例位于 <paramref name="other" /> 之前。  

  0 
  当前实例与 <paramref name="other" /> 位于同一位置。  

  1 
  当前实例位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>确定某个对象与当前实例是否相等。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">一个可确定当前实例与 <paramref name="other" /> 是否相等的对象。</param>
      <returns>如果两个对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>返回当前实例的哈希代码。</summary>
      <param name="comparer">一个计算当前对象的哈希代码的对象。</param>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})">
      <summary>确定数组中的每个元素是否都与指定谓词定义的条件匹配。</summary>
      <param name="array">要对照条件进行检查的从零开始的一维 <see cref="T:System.Array" />。</param>
      <param name="match">用于定义检查元素时要对照的条件的谓词。</param>
      <typeparam name="T">数组元素的类型。</typeparam>
      <returns>如果 <paramref name="array" /> 中的每个元素都与指定谓词定义的条件匹配，则为 <see langword="true" />；否则为 <see langword="false" />。 如果数组中没有元素，则返回值为 <see langword="true" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。  
或 
 <paramref name="match" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.ArraySegment`1">
      <summary>分隔一维数组的一部分。</summary>
      <typeparam name="T">数组段中元素的类型。</typeparam>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[])">
      <summary>初始化 <see cref="T:System.ArraySegment`1" /> 结构的新实例，该结构用于分隔指定数组中的所有元素。</summary>
      <param name="array">要包装的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ArraySegment`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.ArraySegment`1" /> 结构的新结构，该结构用于分隔指定数组中指定的元素范围。</summary>
      <param name="array">包含要分隔的元素范围的数组。</param>
      <param name="offset">范围中第一个元素的从零开始的索引。</param>
      <param name="count">范围中的元素数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 未在 <paramref name="array" /> 中指定有效范围。</exception>
    </member>
    <member name="P:System.ArraySegment`1.Array">
      <summary>获取原始数组，其中包含数组段分隔的元素范围。</summary>
      <returns>传递到构造函数并且包含由 <see cref="T:System.ArraySegment`1" /> 分隔的范围的原始数组。</returns>
    </member>
    <member name="M:System.ArraySegment`1.CopyTo(`0[])">
      <param name="destination" />
    </member>
    <member name="M:System.ArraySegment`1.CopyTo(`0[],System.Int32)">
      <param name="destination" />
      <param name="destinationIndex" />
    </member>
    <member name="M:System.ArraySegment`1.CopyTo(System.ArraySegment{`0})">
      <param name="destination" />
    </member>
    <member name="P:System.ArraySegment`1.Count">
      <summary>获取由数组段分隔的范围中的元素个数。</summary>
      <returns>由 <see cref="T:System.ArraySegment`1" /> 分隔的范围中的元素个数。</returns>
    </member>
    <member name="P:System.ArraySegment`1.Empty" />
    <member name="T:System.ArraySegment`1.Enumerator">
      <typeparam name="T" />
    </member>
    <member name="P:System.ArraySegment`1.Enumerator.Current" />
    <member name="M:System.ArraySegment`1.Enumerator.Dispose" />
    <member name="M:System.ArraySegment`1.Enumerator.MoveNext" />
    <member name="P:System.ArraySegment`1.Enumerator.System#Collections#IEnumerator#Current" />
    <member name="M:System.ArraySegment`1.Enumerator.System#Collections#IEnumerator#Reset" />
    <member name="M:System.ArraySegment`1.Equals(System.ArraySegment{`0})">
      <summary>确定指定的 <see cref="T:System.ArraySegment`1" /> 结构是否等于当前实例。</summary>
      <param name="obj">要与当前实例进行比较的结构。</param>
      <returns>如果指定的 <see cref="T:System.ArraySegment`1" /> 结构等于当前实例，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ArraySegment`1.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前实例。</summary>
      <param name="obj">要与当前实例进行比较的对象。</param>
      <returns>如果指定的对象为 <see cref="T:System.ArraySegment`1" /> 结构并且等于当前实例，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ArraySegment`1.GetEnumerator" />
    <member name="M:System.ArraySegment`1.GetHashCode">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ArraySegment`1.Item(System.Int32)">
      <param name="index" />
    </member>
    <member name="P:System.ArraySegment`1.Offset">
      <summary>获取由数组段分隔的范围中的第一个元素的位置（相对于原始数组的开始位置）。</summary>
      <returns>由 <see cref="T:System.ArraySegment`1" /> 分隔的范围中的第一个元素的位置（相对于原始数组的开始位置）。</returns>
    </member>
    <member name="M:System.ArraySegment`1.op_Equality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>指示两个 <see cref="T:System.ArraySegment`1" /> 结构是否相等。</summary>
      <param name="a">相等运算符左侧的结构。</param>
      <param name="b">相等运算符右侧的结构。</param>
      <returns>如果 <see langword="true" /> 等于 <paramref name="a" />，则为 <paramref name="b" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ArraySegment`1.op_Implicit(T[])~System.ArraySegment{`0}">
      <param name="array" />
    </member>
    <member name="M:System.ArraySegment`1.op_Inequality(System.ArraySegment{`0},System.ArraySegment{`0})">
      <summary>指示两个 <see cref="T:System.ArraySegment`1" /> 结构是否不相等。</summary>
      <param name="a">不等运算符左侧的结构。</param>
      <param name="b">不等运算符右侧的结构。</param>
      <returns>如果 <see langword="true" /> 不等于 <paramref name="a" />，则为 <paramref name="b" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ArraySegment`1.Slice(System.Int32)">
      <param name="index" />
    </member>
    <member name="M:System.ArraySegment`1.Slice(System.Int32,System.Int32)">
      <param name="index" />
      <param name="count" />
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>向数组段添加一项。</summary>
      <param name="item">要添加到数组段的对象。</param>
      <exception cref="T:System.NotSupportedException">数组段是只读的。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>从数组段中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">数组段是只读的。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
      <summary>确定数组段是否包含特定值。</summary>
      <param name="item">要在数组段中查找的对象。</param>
      <returns>如果在数组段中找到 <paramref name="item" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示该数组段是否为只读。</summary>
      <returns>如果数组段为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>从数组段中移除特定对象的第一个匹配项。</summary>
      <param name="item">要从数组段中移除的对象。</param>
      <returns>如果从数组段中成功移除了 <paramref name="item" />，则为 <see langword="true" />；否则为 <see langword="false" />。 如果在数组段中找不到 <paramref name="item" />，此方法也会返回 <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">数组段是只读的。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回循环访问数组段的枚举器。</summary>
      <returns>一个枚举器，可用于循环访问数组段。</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#IndexOf(`0)">
      <summary>确定数组段中特定项的索引。</summary>
      <param name="item">要在数组段中查找的对象。</param>
      <returns>如果在列表中找到，则为 <paramref name="item" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>将一个项插入数组段中的指定索引处。</summary>
      <param name="index">应插入 <paramref name="item" /> 的从零开始的索引。</param>
      <param name="item">要插入数组段中的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是数组段中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">数组段是只读的。</exception>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <returns>指定索引处的元素。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.ArraySegment`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">设置该属性，而且数组段为只读。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>移除指定索引处的数组段。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是数组段中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">数组段是只读的。</exception>
    </member>
    <member name="P:System.ArraySegment`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary>获取数组段的指定索引处的元素。</summary>
      <param name="index">要获取的元素的索引(索引从零开始)。</param>
      <returns>指定索引处的元素。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.ArraySegment`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">已设置此属性。</exception>
    </member>
    <member name="M:System.ArraySegment`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问数组段的枚举器。</summary>
      <returns>一个枚举器，可用于循环访问数组段。</returns>
    </member>
    <member name="M:System.ArraySegment`1.ToArray" />
    <member name="T:System.ArrayTypeMismatchException">
      <summary>当试图在数组中存储类型不正确的元素时引发的异常。</summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor">
      <summary>初始化 <see cref="T:System.ArrayTypeMismatchException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.ArrayTypeMismatchException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.ArrayTypeMismatchException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ArrayTypeMismatchException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为空引用，则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="T:System.AsyncCallback">
      <summary>引用在相应异步操作完成时调用的方法。</summary>
      <param name="ar">异步操作的结果。</param>
    </member>
    <member name="T:System.Attribute">
      <summary>表示自定义特性的基类。</summary>
    </member>
    <member name="M:System.Attribute.#ctor">
      <summary>初始化 <see cref="T:System.Attribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Attribute.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.Object" /> 或 <see langword="null" />。</param>
      <returns>如果 <paramref name="obj" /> 与此实例类型相同，并且具有相同的字段值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)">
      <summary>检索应用于指定程序集的自定义属性。 参数指定程序集和要搜索的自定义属性的类型。</summary>
      <param name="element">一个派生自 <see cref="T:System.Reflection.Assembly" /> 类的对象，用于描述模块的可重用集合。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <returns>一个引用，指向应用于 <paramref name="attributeType" /> 的 <paramref name="element" /> 类型的单个自定义属性；如果没有此类属性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>检索应用于程序集的自定义属性。 参数指定程序集、要搜索的自定义属性的类型以及忽略的搜索选项。</summary>
      <param name="element">一个派生自 <see cref="T:System.Reflection.Assembly" /> 类的对象，用于描述模块的可重用集合。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <param name="inherit">此参数被忽略，并且不会影响此方法的操作。</param>
      <returns>一个引用，指向应用于 <paramref name="attributeType" /> 的 <paramref name="element" /> 类型的单个自定义属性；如果没有此类属性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)">
      <summary>检索应用于类型成员的自定义属性。 参数指定成员和要搜索的自定义属性的类型。</summary>
      <param name="element">一个从 <see cref="T:System.Reflection.MemberInfo" /> 类派生的对象，该类描述类的构造函数、事件、字段、方法或属性成员。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <returns>一个引用，指向应用于 <paramref name="attributeType" /> 的 <paramref name="element" /> 类型的单个自定义属性；如果没有此类属性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>检索应用于类型成员的自定义属性。 参数指定成员、要搜索的自定义属性的类型以及是否搜索成员的祖先。</summary>
      <param name="element">一个从 <see cref="T:System.Reflection.MemberInfo" /> 类派生的对象，该类描述类的构造函数、事件、字段、方法或属性成员。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <param name="inherit">如果为 <see langword="true" />，则指定还在 <paramref name="element" /> 的祖先中搜索自定义属性。</param>
      <returns>一个引用，指向应用于 <paramref name="attributeType" /> 的 <paramref name="element" /> 类型的单个自定义属性；如果没有此类属性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)">
      <summary>检索应用于模块的自定义属性。 参数指定模块和要搜索的自定义属性的类型。</summary>
      <param name="element">一个从 <see cref="T:System.Reflection.Module" /> 类派生的对象，该类描述可移植的可执行文件。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <returns>一个引用，指向应用于 <paramref name="attributeType" /> 的 <paramref name="element" /> 类型的单个自定义属性；如果没有此类属性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>检索应用于模块的自定义属性。 参数指定模块、要搜索的自定义属性的类型以及忽略的搜索选项。</summary>
      <param name="element">一个从 <see cref="T:System.Reflection.Module" /> 类派生的对象，该类描述可移植的可执行文件。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <param name="inherit">此参数被忽略，并且不会影响此方法的操作。</param>
      <returns>一个引用，指向应用于 <paramref name="attributeType" /> 的 <paramref name="element" /> 类型的单个自定义属性；如果没有此类属性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)">
      <summary>检索应用于方法参数的自定义属性。 参数指定方法参数和要搜索的自定义属性的类型。</summary>
      <param name="element">一个从 <see cref="T:System.Reflection.ParameterInfo" /> 类派生的对象，该类描述类成员的参数。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <returns>一个引用，指向应用于 <paramref name="attributeType" /> 的 <paramref name="element" /> 类型的单个自定义属性；如果没有此类属性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>检索应用于方法参数的自定义属性。 参数指定方法参数、要搜索的自定义属性的类型以及是否搜索方法参数的祖先。</summary>
      <param name="element">一个从 <see cref="T:System.Reflection.ParameterInfo" /> 类派生的对象，该类描述类成员的参数。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <param name="inherit">如果为 <see langword="true" />，则指定还在 <paramref name="element" /> 的祖先中搜索自定义属性。</param>
      <returns>一个引用，指向应用于 <paramref name="attributeType" /> 的 <paramref name="element" /> 类型的单个自定义属性；如果没有此类属性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly)">
      <summary>检索一个数组，它由应用于程序集的自定义属性组成。 参数指定程序集。</summary>
      <param name="element">一个派生自 <see cref="T:System.Reflection.Assembly" /> 类的对象，用于描述模块的可重用集合。</param>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，其中包含应用于 <paramref name="element" /> 的自定义属性；如果不存在任何此类自定义属性，则为空数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)">
      <summary>检索一个数组，它由应用于程序集的自定义属性组成。 参数指定程序集及忽略的搜索选项。</summary>
      <param name="element">一个派生自 <see cref="T:System.Reflection.Assembly" /> 类的对象，用于描述模块的可重用集合。</param>
      <param name="inherit">此参数被忽略，并且不会影响此方法的操作。</param>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，其中包含应用于 <paramref name="element" /> 的自定义属性；如果不存在任何此类自定义属性，则为空数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
      <summary>检索一个数组，它由应用于程序集的自定义属性组成。 参数指定程序集和要搜索的自定义属性的类型。</summary>
      <param name="element">一个派生自 <see cref="T:System.Reflection.Assembly" /> 类的对象，用于描述模块的可重用集合。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，包含应用于 <paramref name="attributeType" /> 的 <paramref name="element" /> 类型的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>检索一个数组，它由应用于程序集的自定义属性组成。 参数指定程序集、要搜索的自定义属性的类型以及忽略的搜索选项。</summary>
      <param name="element">一个派生自 <see cref="T:System.Reflection.Assembly" /> 类的对象，用于描述模块的可重用集合。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <param name="inherit">此参数被忽略，并且不会影响此方法的操作。</param>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，包含应用于 <paramref name="attributeType" /> 的 <paramref name="element" /> 类型的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)">
      <summary>检索应用于类型的成员的自定义属性的数组。 参数指定成员。</summary>
      <param name="element">一个从 <see cref="T:System.Reflection.MemberInfo" /> 类派生的对象，该类描述类的构造函数、事件、字段、方法或属性成员。</param>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，其中包含应用于 <paramref name="element" /> 的自定义属性；如果不存在任何此类自定义属性，则为空数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
      <summary>检索应用于类型的成员的自定义属性的数组。 参数指定成员、要搜索的自定义属性的类型以及是否搜索成员的祖先。</summary>
      <param name="element">一个从 <see cref="T:System.Reflection.MemberInfo" /> 类派生的对象，该类描述类的构造函数、事件、字段、方法或属性成员。</param>
      <param name="inherit">如果为 <see langword="true" />，则指定还在 <paramref name="element" /> 的祖先中搜索自定义属性。</param>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，其中包含应用于 <paramref name="element" /> 的自定义属性；如果不存在任何此类自定义属性，则为空数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)">
      <summary>检索应用于类型的成员的自定义属性的数组。 参数指定成员和要搜索的自定义属性的类型。</summary>
      <param name="element">一个从 <see cref="T:System.Reflection.MemberInfo" /> 类派生的对象，该类描述类的构造函数、事件、字段、方法或属性成员。</param>
      <param name="type">要搜索的自定义属性的类型或基类型。</param>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，包含应用于 <paramref name="type" /> 的 <paramref name="element" /> 类型的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="type" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>检索应用于类型的成员的自定义属性的数组。 参数指定成员、要搜索的自定义属性的类型以及是否搜索成员的祖先。</summary>
      <param name="element">一个从 <see cref="T:System.Reflection.MemberInfo" /> 类派生的对象，该类描述类的构造函数、事件、字段、方法或属性成员。</param>
      <param name="type">要搜索的自定义属性的类型或基类型。</param>
      <param name="inherit">如果为 <see langword="true" />，则指定还在 <paramref name="element" /> 的祖先中搜索自定义属性。</param>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，包含应用于 <paramref name="type" /> 的 <paramref name="element" /> 类型的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="type" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module)">
      <summary>检索应用于模块的自定义属性的数组。 参数指定模块。</summary>
      <param name="element">一个从 <see cref="T:System.Reflection.Module" /> 类派生的对象，该类描述可移植的可执行文件。</param>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，其中包含应用于 <paramref name="element" /> 的自定义属性；如果不存在任何此类自定义属性，则为空数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)">
      <summary>检索应用于模块的自定义属性的数组。 参数指定模块及忽略的搜索选项。</summary>
      <param name="element">一个从 <see cref="T:System.Reflection.Module" /> 类派生的对象，该类描述可移植的可执行文件。</param>
      <param name="inherit">此参数被忽略，并且不会影响此方法的操作。</param>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，其中包含应用于 <paramref name="element" /> 的自定义属性；如果不存在任何此类自定义属性，则为空数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)">
      <summary>检索应用于模块的自定义属性的数组。 参数指定模块和要搜索的自定义属性的类型。</summary>
      <param name="element">一个从 <see cref="T:System.Reflection.Module" /> 类派生的对象，该类描述可移植的可执行文件。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，包含应用于 <paramref name="attributeType" /> 的 <paramref name="element" /> 类型的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>检索应用于模块的自定义属性的数组。 参数指定模块、要搜索的自定义属性的类型以及忽略的搜索选项。</summary>
      <param name="element">一个从 <see cref="T:System.Reflection.Module" /> 类派生的对象，该类描述可移植的可执行文件。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <param name="inherit">此参数被忽略，并且不会影响此方法的操作。</param>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，包含应用于 <paramref name="attributeType" /> 的 <paramref name="element" /> 类型的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)">
      <summary>检索应用于方法参数的自定义属性的数组。 参数指定方法参数。</summary>
      <param name="element">一个从 <see cref="T:System.Reflection.ParameterInfo" /> 类派生的对象，该类描述类成员的参数。</param>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，其中包含应用于 <paramref name="element" /> 的自定义属性；如果不存在任何此类自定义属性，则为空数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)">
      <summary>检索应用于方法参数的自定义属性的数组。 参数指定方法参数以及是否搜索方法参数的祖先。</summary>
      <param name="element">一个从 <see cref="T:System.Reflection.ParameterInfo" /> 类派生的对象，该类描述类成员的参数。</param>
      <param name="inherit">如果为 <see langword="true" />，则指定还在 <paramref name="element" /> 的祖先中搜索自定义属性。</param>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，其中包含应用于 <paramref name="element" /> 的自定义属性；如果不存在任何此类自定义属性，则为空数组。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> 的 <see cref="P:System.Reflection.ParameterInfo.Member" /> 属性为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
      <summary>检索应用于方法参数的自定义属性的数组。 参数指定方法参数和要搜索的自定义属性的类型。</summary>
      <param name="element">一个从 <see cref="T:System.Reflection.ParameterInfo" /> 类派生的对象，该类描述类成员的参数。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，包含应用于 <paramref name="attributeType" /> 的 <paramref name="element" /> 类型的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>检索应用于方法参数的自定义属性的数组。 参数指定方法参数、要搜索的自定义属性的类型以及是否搜索方法参数的祖先。</summary>
      <param name="element">一个从 <see cref="T:System.Reflection.ParameterInfo" /> 类派生的对象，该类描述类成员的参数。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <param name="inherit">如果为 <see langword="true" />，则指定还在 <paramref name="element" /> 的祖先中搜索自定义属性。</param>
      <returns>一个 <see cref="T:System.Attribute" /> 数组，包含应用于 <paramref name="attributeType" /> 的 <paramref name="element" /> 类型的自定义属性；如果不存在此类自定义属性，则为空数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Attribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Attribute.IsDefaultAttribute">
      <summary>在派生类中重写时，指示此实例的值是否是派生类的默认值。</summary>
      <returns>如果此实例是该类的默认属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)">
      <summary>确定是否将任意自定义属性应用于程序集。 参数指定程序集和要搜索的自定义属性的类型。</summary>
      <param name="element">一个派生自 <see cref="T:System.Reflection.Assembly" /> 类的对象，用于描述模块的可重用集合。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <returns>如果类型 <paramref name="attributeType" /> 的某个自定义属性应用于 <paramref name="element" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)">
      <summary>确定是否将任意自定义属性应用于程序集。 参数指定程序集、要搜索的自定义属性的类型以及忽略的搜索选项。</summary>
      <param name="element">一个派生自 <see cref="T:System.Reflection.Assembly" /> 类的对象，用于描述模块的可重用集合。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <param name="inherit">此参数被忽略，并且不会影响此方法的操作。</param>
      <returns>如果类型 <paramref name="attributeType" /> 的某个自定义属性应用于 <paramref name="element" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)">
      <summary>确定是否将任意自定义属性应用于类型成员。 参数指定成员和要搜索的自定义属性的类型。</summary>
      <param name="element">一个从 <see cref="T:System.Reflection.MemberInfo" /> 类派生的对象，该类描述类的构造函数、事件、字段、方法、类型或属性成员。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <returns>如果类型 <paramref name="attributeType" /> 的某个自定义属性应用于 <paramref name="element" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>确定是否将任意自定义属性应用于类型成员。 参数指定成员、要搜索的自定义属性的类型以及是否搜索成员的祖先。</summary>
      <param name="element">一个从 <see cref="T:System.Reflection.MemberInfo" /> 类派生的对象，该类描述类的构造函数、事件、字段、方法、类型或属性成员。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <param name="inherit">如果为 <see langword="true" />，则指定还在 <paramref name="element" /> 的祖先中搜索自定义属性。</param>
      <returns>如果类型 <paramref name="attributeType" /> 的某个自定义属性应用于 <paramref name="element" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type)">
      <summary>确定是否将指定类型的任何自定义属性应用于模块。 参数指定模块和要搜索的自定义属性的类型。</summary>
      <param name="element">一个从 <see cref="T:System.Reflection.Module" /> 类派生的对象，该类描述可移植的可执行文件。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <returns>如果类型 <paramref name="attributeType" /> 的某个自定义属性应用于 <paramref name="element" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)">
      <summary>确定是否将任意自定义属性应用于模块。 参数指定模块、要搜索的自定义属性的类型以及忽略的搜索选项。</summary>
      <param name="element">一个从 <see cref="T:System.Reflection.Module" /> 类派生的对象，该类描述可移植的可执行文件。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <param name="inherit">此参数被忽略，并且不会影响此方法的操作。</param>
      <returns>如果类型 <paramref name="attributeType" /> 的某个自定义属性应用于 <paramref name="element" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)">
      <summary>确定是否将任意自定义属性应用于方法参数。 参数指定方法参数和要搜索的自定义属性的类型。</summary>
      <param name="element">一个从 <see cref="T:System.Reflection.ParameterInfo" /> 类派生的对象，该类描述类成员的参数。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <returns>如果类型 <paramref name="attributeType" /> 的某个自定义属性应用于 <paramref name="element" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
    </member>
    <member name="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>确定是否将任意自定义属性应用于方法参数。 参数指定方法参数、要搜索的自定义属性的类型以及是否搜索方法参数的祖先。</summary>
      <param name="element">一个从 <see cref="T:System.Reflection.ParameterInfo" /> 类派生的对象，该类描述类成员的参数。</param>
      <param name="attributeType">要搜索的自定义属性的类型或基类型。</param>
      <param name="inherit">如果为 <see langword="true" />，则指定还在 <paramref name="element" /> 的祖先中搜索自定义属性。</param>
      <returns>如果类型 <paramref name="attributeType" /> 的某个自定义属性应用于 <paramref name="element" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.ExecutionEngineException">
        <paramref name="element" /> 不是方法、构造函数或类型。</exception>
    </member>
    <member name="M:System.Attribute.Match(System.Object)">
      <summary>当在派生类中重写时，返回一个指示此实例是否等于指定对象的值。</summary>
      <param name="obj">与 <see cref="T:System.Object" /> 的此实例进行比较的 <see cref="T:System.Attribute" />。</param>
      <returns>如果该实例等于 <paramref name="obj" />，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Attribute.TypeId">
      <summary>在派生类中实现时，获取此 <see cref="T:System.Attribute" /> 的唯一标识符。</summary>
      <returns>一个表示该属性的唯一标识符的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.AttributeTargets">
      <summary>指定可应用属性的应用程序元素。</summary>
    </member>
    <member name="F:System.AttributeTargets.All">
      <summary>可以对任何应用程序元素应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Assembly">
      <summary>可以对程序集应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Class">
      <summary>可以对类应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Constructor">
      <summary>可以对构造函数应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Delegate">
      <summary>可以对委托应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Enum">
      <summary>可以对枚举应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Event">
      <summary>可以对事件应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Field">
      <summary>可以对字段应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.GenericParameter">
      <summary>可以对泛型参数应用属性。 目前，此属性仅可应用于 C#、Microsoft 中间语言 (MSIL) 和已发出的代码中。</summary>
    </member>
    <member name="F:System.AttributeTargets.Interface">
      <summary>可以对接口应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Method">
      <summary>可以对方法应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Module">
      <summary>可以对模块应用属性。 <see langword="Module" /> 引用的是可移植可执行文件（.dll 或 .exe），而不是 Visual Basic 标准模块。</summary>
    </member>
    <member name="F:System.AttributeTargets.Parameter">
      <summary>可以对参数应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Property">
      <summary>可以对属性 (Property) 应用属性 (Attribute)。</summary>
    </member>
    <member name="F:System.AttributeTargets.ReturnValue">
      <summary>可以对返回值应用属性。</summary>
    </member>
    <member name="F:System.AttributeTargets.Struct">
      <summary>可以对结构应用属性，即值类型。</summary>
    </member>
    <member name="T:System.AttributeUsageAttribute">
      <summary>指定另一个属性类的用法。 此类不能被继承。</summary>
    </member>
    <member name="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)">
      <summary>用指定的 <see cref="T:System.AttributeUsageAttribute" />、<see cref="T:System.AttributeTargets" /> 值和 <see cref="P:System.AttributeUsageAttribute.AllowMultiple" /> 值列表初始化 <see cref="P:System.AttributeUsageAttribute.Inherited" /> 类的新实例。</summary>
      <param name="validOn">使用按位"或"运算符组合的一组值，用于指示哪些程序元素是有效的。</param>
    </member>
    <member name="P:System.AttributeUsageAttribute.AllowMultiple">
      <summary>获取或设置一个布尔值，该值指示能否为一个程序元素指定多个指示属性实例。</summary>
      <returns>如果允许指定多个实例，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.AttributeUsageAttribute.Inherited">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值确定指示的属性是否由派生类和重写成员继承。</summary>
      <returns>如果该属性可以由派生类和重写成员继承，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.AttributeUsageAttribute.ValidOn">
      <summary>获取一组值，这组值标识指示的属性可应用到的程序元素。</summary>
      <returns>一个或多个 <see cref="T:System.AttributeTargets" /> 值。 默认值为 <see langword="All" />。</returns>
    </member>
    <member name="T:System.BadImageFormatException">
      <summary>当动态链接库 (DLL) 或可执行程序的文件映像无效时引发的异常。</summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor">
      <summary>初始化 <see cref="T:System.BadImageFormatException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.BadImageFormatException" /> 类的新实例。</summary>
      <param name="info">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.BadImageFormatException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.BadImageFormatException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为空引用，则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.String)">
      <summary>用指定的错误消息和文件名初始化 <see cref="T:System.BadImageFormatException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
      <param name="fileName">包含无效图像的文件的全名。</param>
    </member>
    <member name="M:System.BadImageFormatException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.BadImageFormatException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="fileName">包含无效图像的文件的全名。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="P:System.BadImageFormatException.FileName">
      <summary>获取导致该异常的文件的名称。</summary>
      <returns>带有无效图像的文件的名称，或一个空引用（如果未向当前实例的构造函数传递任何文件名）。</returns>
    </member>
    <member name="P:System.BadImageFormatException.FusionLog">
      <summary>获取描述程序集加载失败的原因的日志文件。</summary>
      <returns>一个 <see langword="String" />，包含由程序集缓存报告的错误。</returns>
    </member>
    <member name="M:System.BadImageFormatException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用文件名、程序集缓存日志和其他异常信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="P:System.BadImageFormatException.Message">
      <summary>获取错误消息和引发此异常的文件的名称。</summary>
      <returns>包含错误消息和引发此异常的文件名称的字符串。</returns>
    </member>
    <member name="M:System.BadImageFormatException.ToString">
      <summary>返回该异常的完全限定名，还可能返回错误消息、内部异常的名称和堆栈跟踪。</summary>
      <returns>一个字符串，包含该异常的完全限定名，还可能包含错误信息、内部异常的名称和堆栈跟踪。</returns>
    </member>
    <member name="T:System.Boolean">
      <summary>表示一个布尔（<see langword="true" /> 或 <see langword="false" />）值。</summary>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Boolean)">
      <summary>将此实例与指定的 <see cref="T:System.Boolean" /> 对象进行比较，并返回一个指示二者关系的整数。</summary>
      <param name="value">要与此示例比较的 <see cref="T:System.Boolean" /> 对象。</param>
      <returns>一个有符号整数，指示此实例和 <paramref name="value" /> 相对值。  
  返回值 
  条件 
  小于零 
  此示例为 <see langword="false" /> 而 <paramref name="value" /> 为 <see langword="true" />。  

  零 
  此实例与 <paramref name="value" /> 相等（都为 <see langword="true" />，或者都为 <see langword="false" />）。  

  大于零 
  此示例为 <see langword="true" /> 而 <paramref name="value" /> 为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Boolean.CompareTo(System.Object)">
      <summary>将此实例与指定对象进行比较，并返回一个指示二者关系的整数。</summary>
      <param name="obj">要与此示例比较的对象，或 <see langword="null" />。</param>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="obj" /> 的相对顺序。  
  返回值 
  条件 
  小于零 
  此示例为 <see langword="false" /> 而 <paramref name="obj" /> 为 <see langword="true" />。  

  零 
  此实例与 <paramref name="obj" /> 相等（都为 <see langword="true" />，或者都为 <see langword="false" />）。  

  大于零 
  此示例为 <see langword="true" /> 而 <paramref name="obj" /> 为 <see langword="false" />。  

或 
 <paramref name="obj" /> 为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Boolean" />。</exception>
    </member>
    <member name="M:System.Boolean.Equals(System.Boolean)">
      <summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.Boolean" /> 相等。</summary>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.Boolean" /> 值。</param>
      <returns>如果 <see langword="true" /> 的值与此实例相同，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Boolean.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="obj">要与此实例进行比较的对象。</param>
      <returns>如果 <see langword="true" /> 为 <paramref name="obj" /> 且拥有与此实例相等的值，则为 <see cref="T:System.Boolean" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.Boolean.FalseString">
      <summary>将布尔值 <see langword="false" /> 表示为一个字符串。 此字段为只读。</summary>
    </member>
    <member name="M:System.Boolean.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.Boolean" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.Boolean.GetTypeCode">
      <summary>返回 <see cref="T:System.Boolean" /> 值类型的类型代码。</summary>
      <returns>枚举常数 <see cref="F:System.TypeCode.Boolean" />。</returns>
    </member>
    <member name="M:System.Boolean.Parse(System.ReadOnlySpan{System.Char})">
      <param name="value" />
    </member>
    <member name="M:System.Boolean.Parse(System.String)">
      <summary>将逻辑值的指定字符串表示形式转换为其等效的 <see cref="T:System.Boolean" />。</summary>
      <param name="value">包含要转换的值的字符串。</param>
      <returns>如果 <paramref name="value" /> 等效于 <see cref="F:System.Boolean.TrueString" />，则为 <see langword="true" />；如果 <paramref name="value" /> 等效于 <see cref="F:System.Boolean.FalseString" />，则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 并不等效于 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />。</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>
        <see langword="true" /> 或 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>如果此实例的值为 <see langword="true" />，则为 1；否则为 0。</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">你试图将 <see cref="T:System.Boolean" /> 值转换为 <see cref="T:System.Char" /> 值。 不支持此转换。</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">你试图将 <see cref="T:System.Boolean" /> 值转换为 <see cref="T:System.DateTime" /> 值。 不支持此转换。</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>如果此实例的值为 <see langword="true" />，则为 1；否则为 0。</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>如果此实例的值为 <see langword="true" />，则为 1；否则为 0。</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>如果此实例的值为 <see langword="true" />，则为 1；否则为 0。</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>如果此实例的值为 <see langword="true" />，则为 1；否则为 0。</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>如果此实例的值为 <see langword="true" />，则为 1；否则为 0。</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>如果此实例的值为 <see langword="true" />，则为 1；否则为 0。</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>如果此实例的值为 <see langword="true" />，则为 1；否则为 0。</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">所需类型。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 实现，提供有关返回值格式的区域性特定信息。</param>
      <returns>一个指定类型的对象，其值与此 <see langword="Boolean" /> 对象的值相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">不支持请求的类型转换。</exception>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>如果此实例的值为 <see langword="true" />，则为 1；否则为 0。</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>如果此实例的值为 <see langword="true" />，则为 1；否则为 0。</returns>
    </member>
    <member name="M:System.Boolean.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>如果此实例的值为 <see langword="true" />，则为 1；否则为 0。</returns>
    </member>
    <member name="M:System.Boolean.ToString">
      <summary>将此实例的值转换为其等效字符串表示形式（“True”或“False”）。</summary>
      <returns>如果此实例的值为 <see langword="true" />，则为“True”（<see cref="F:System.Boolean.TrueString" /> 属性的值）；如果此实例的值为 <see langword="false" />，则为“False”（<see cref="F:System.Boolean.FalseString" /> 属性的值）。</returns>
    </member>
    <member name="M:System.Boolean.ToString(System.IFormatProvider)">
      <summary>将此实例的值转换为其等效字符串表示形式（“True”或“False”）。</summary>
      <param name="provider">（保留）一个 <see cref="T:System.IFormatProvider" /> 对象。</param>
      <returns>如果此实例的值为 <see cref="F:System.Boolean.TrueString" />，则为 <see langword="true" />，或者，如果此实例的值为 <see cref="F:System.Boolean.FalseString" />，则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.Boolean.TrueString">
      <summary>将布尔值 <see langword="true" /> 表示为一个字符串。 此字段为只读。</summary>
    </member>
    <member name="M:System.Boolean.TryFormat(System.Span{System.Char},System.Int32@)">
      <param name="destination" />
      <param name="charsWritten" />
    </member>
    <member name="M:System.Boolean.TryParse(System.ReadOnlySpan{System.Char},System.Boolean@)">
      <param name="value" />
      <param name="result" />
    </member>
    <member name="M:System.Boolean.TryParse(System.String,System.Boolean@)">
      <summary>尝试将逻辑值的指定字符串表示形式转换为其等效的 <see cref="T:System.Boolean" /> 值。 一个指示转换是否成功的返回值。</summary>
      <param name="value">包含要转换的值的字符串。</param>
      <param name="result">此方法返回时，如果转换成功，若 <see langword="true" /> 与 <paramref name="value" /> 相等，则包含 <see cref="F:System.Boolean.TrueString" />，若 <see langword="false" /> 与 <paramref name="value" /> 相等，则包含 <see cref="F:System.Boolean.FalseString" />。 如果转换失败，则包含 <see langword="false" />。 如果 <paramref name="value" /> 为 <see langword="null" /> 或不等于 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" /> 字段的值，则转换失败。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Buffer">
      <summary>操作基元类型的数组。</summary>
    </member>
    <member name="M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
      <summary>将指定数目的字节从起始于特定偏移量的源数组复制到起始于特定偏移量的目标数组。</summary>
      <param name="src">源缓冲区。</param>
      <param name="srcOffset">
        <paramref name="src" /> 中的字节偏移量，从零开始。</param>
      <param name="dst">目标缓冲区。</param>
      <param name="dstOffset">
        <paramref name="dst" /> 中的字节偏移量，从零开始。</param>
      <param name="count">要复制的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="src" /> 或 <paramref name="dst" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="src" /> 或 <paramref name="dst" /> 不是基元数组。  

或 - 
<paramref name="src" /> 中的字节数小于 <paramref name="srcOffset" /> 加上<paramref name="count" /> 之和。  

或 
<paramref name="dst" /> 中的字节数小于 <paramref name="dstOffset" /> 加上<paramref name="count" /> 之和。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="srcOffset" />、<paramref name="dstOffset" /> 或 <paramref name="count" /> 小于 0。</exception>
    </member>
    <member name="M:System.Buffer.ByteLength(System.Array)">
      <summary>返回指定数组中的字节数。</summary>
      <param name="array">一个数组。</param>
      <returns>数组中的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 不是基元。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" />大于 2 GB。</exception>
    </member>
    <member name="M:System.Buffer.GetByte(System.Array,System.Int32)">
      <summary>检索指定数组中指定位置的字节。</summary>
      <param name="array">一个数组。</param>
      <param name="index">数组中的位置。</param>
      <returns>数组中指定位置的字节。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 不是基元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 为负或大于 <paramref name="array" /> 的长度。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" />大于 2 GB。</exception>
    </member>
    <member name="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)">
      <summary>将指定为长整型值的一些字节从内存中的一个地址复制到另一个地址。  
 此 API 不兼容 CLS。</summary>
      <param name="source">要复制的字节的地址。</param>
      <param name="destination">目标地址。</param>
      <param name="destinationSizeInBytes">目标内存块中可用的字节数。</param>
      <param name="sourceBytesToCopy">要复制的字节数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceBytesToCopy" /> 大于 <paramref name="destinationSizeInBytes" />。</exception>
    </member>
    <member name="M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)">
      <summary>将指定为无符号长整型值的一些字节从内存中的一个地址复制到另一个地址。  
 此 API 不兼容 CLS。</summary>
      <param name="source">要复制的字节的地址。</param>
      <param name="destination">目标地址。</param>
      <param name="destinationSizeInBytes">目标内存块中可用的字节数。</param>
      <param name="sourceBytesToCopy">要复制的字节数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceBytesToCopy" /> 大于 <paramref name="destinationSizeInBytes" />。</exception>
    </member>
    <member name="M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)">
      <summary>将指定的值分配给指定数组中特定位置处的字节。</summary>
      <param name="array">一个数组。</param>
      <param name="index">数组中的位置。</param>
      <param name="value">要分配的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 不是基元。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 为负或大于 <paramref name="array" /> 的长度。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="array" />大于 2 GB。</exception>
    </member>
    <member name="T:System.Buffers.IMemoryOwner`1">
      <summary>标识负责适当地释放基础内存的内存块所有者。</summary>
      <typeparam name="T">要存储在内存中的元素的类型。</typeparam>
    </member>
    <member name="P:System.Buffers.IMemoryOwner`1.Memory">
      <summary>获取属于此所有者的内存。</summary>
      <returns>属于此所有者的内存。</returns>
    </member>
    <member name="T:System.Buffers.IPinnable">
      <summary>提供用于固定和取消固定对象的一个机制，以防止垃圾回收器移动这些对象。</summary>
    </member>
    <member name="M:System.Buffers.IPinnable.Pin(System.Int32)">
      <summary>固定内存块。</summary>
      <param name="elementIndex">返回的 <see cref="T:System.Buffers.MemoryHandle" /> 指向的内存缓冲区内元素的偏移量。</param>
      <returns>内存块的句柄。</returns>
    </member>
    <member name="M:System.Buffers.IPinnable.Unpin">
      <summary>释放已固定的内存块。</summary>
    </member>
    <member name="T:System.Buffers.MemoryHandle">
      <summary>为内存块提供一个内存句柄。</summary>
    </member>
    <member name="M:System.Buffers.MemoryHandle.#ctor(System.Void*,System.Runtime.InteropServices.GCHandle,System.Buffers.IPinnable)">
      <summary>为内存块创建新的内存句柄。</summary>
      <param name="pointer">指向内存的一个指针。</param>
      <param name="handle">用于固定数组缓冲区的一个句柄。</param>
      <param name="pinnable">对手动管理对象的引用；如果没有内存管理器，则为 <see langword="default" />。</param>
    </member>
    <member name="M:System.Buffers.MemoryHandle.Dispose">
      <summary>释放已固定的句柄并释放 <see cref="T:System.Buffers.IPinnable" /> 实例。</summary>
    </member>
    <member name="P:System.Buffers.MemoryHandle.Pointer">
      <summary>返回指向内存块的指针。</summary>
      <returns>指向内存块的指针。</returns>
    </member>
    <member name="T:System.Buffers.MemoryManager`1">
      <summary>用于替换 <see cref="T:System.Memory`1" /> 实现的抽象基类。</summary>
      <typeparam name="T">此内存管理器管理的内存缓冲区中的项的类型。</typeparam>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.#ctor">
      <summary>初始化 <see cref="T:System.Buffers.MemoryManager`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.CreateMemory(System.Int32)">
      <summary>返回一个内存缓冲区，它由当前内存管理器管理的内存中指定数量的元素构成。</summary>
      <param name="length">内存缓冲区内的元素数，偏移量从 0 开始。</param>
      <returns>内存缓冲区。</returns>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.CreateMemory(System.Int32,System.Int32)">
      <summary>返回一个内存缓冲区，它由当前内存管理器管理的内存中指定数量（初始偏移量为指定的偏移量）的元素构成。</summary>
      <param name="start">元素的偏移量，返回的内存缓冲区将其作为起始偏移量。</param>
      <param name="length">要包括在返回的内存缓冲区中的元素数。</param>
      <returns>由 <paramref name="length" /> 个元素组成的初始偏移量为 <paramref name="start" /> 的内存缓冲区。</returns>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.Dispose(System.Boolean)">
      <summary>释放由当前内存管理器使用的所有资源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示释放托管资源和非托管资源；<see langword="false" /> 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.GetSpan">
      <summary>返回包装基础内存缓冲区的内存范围。</summary>
      <returns>包装基础内存缓冲区的内存范围。</returns>
    </member>
    <member name="P:System.Buffers.MemoryManager`1.Memory">
      <summary>获取由此 <see cref="T:System.Buffers.MemoryManager`1" /> 处理的内存块。</summary>
      <returns>此<see cref="T:System.Buffers.MemoryManager`1" />处理的内存块。</returns>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.Pin(System.Int32)">
      <summary>返回已固定且可以获取其地址的内存的句柄。</summary>
      <param name="elementIndex">返回的 <see cref="T:System.Buffers.MemoryHandle" /> 指向的内存缓冲区内元素的偏移量。</param>
      <returns>已固定的内存的句柄。</returns>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.System#IDisposable#Dispose">
      <summary>释放由内存管理器使用的所有资源。</summary>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.TryGetArray(System.ArraySegment{`0}@)">
      <summary>返回数组段。</summary>
      <param name="segment">要写入的数组段。</param>
      <returns>如果方法成功检索到数组段，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Buffers.MemoryManager`1.Unpin">
      <summary>取消固定已固定的内存，使垃圾回收器能够自由移动它。</summary>
    </member>
    <member name="T:System.Buffers.OperationStatus">
      <summary>定义可以从基于范围的操作返回的值，这些操作支持处理多个不连续缓冲区中包含的输入。</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.DestinationTooSmall">
      <summary>对输入进行部分处理，直至达到适合目标缓冲区的最大量。 调用方可以扩大目标缓冲区，适当划分该缓冲区，然后重试。</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.Done">
      <summary>已完成对整个输入缓冲区的处理操作。</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.InvalidData">
      <summary>输入包含无法处理的无效字节。 如果已对输入进行部分处理，则目标包含部分结果。 这将确保任何附加到输入的其他数据都不会使无效序列变得有效。</summary>
    </member>
    <member name="F:System.Buffers.OperationStatus.NeedMoreData">
      <summary>已对输入进行部分处理，直到可使用的输入的最后一个有效区块。 调用方可以使用更多数据拼结剩余未处理输入，适当划分缓冲区，然后重试。</summary>
    </member>
    <member name="T:System.Buffers.ReadOnlySpanAction`2">
      <param name="span" />
      <param name="arg" />
      <typeparam name="T" />
      <typeparam name="TArg" />
    </member>
    <member name="T:System.Buffers.SpanAction`2">
      <param name="span" />
      <param name="arg" />
      <typeparam name="T" />
      <typeparam name="TArg" />
    </member>
    <member name="T:System.Byte">
      <summary>表示一个 8 位无符号整数。</summary>
    </member>
    <member name="M:System.Byte.CompareTo(System.Byte)">
      <summary>将此实例与指定的 8 位无符号整数进行比较并返回对其相对值的指示。</summary>
      <param name="value">要比较的 8 位无符号整数。</param>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。  
  返回值 
  说明 
  小于零 
  此实例小于 <paramref name="value" />。  

  零 
  此实例等于 <paramref name="value" />。  

  大于零 
  此实例大于 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Byte.CompareTo(System.Object)">
      <summary>将此实例与指定对象进行比较并返回一个对二者的相对值的指示。</summary>
      <param name="value">要比较的对象，或为 <see langword="null" />。</param>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。  
  返回值 
  说明 
  小于零 
  此实例小于 <paramref name="value" />。  

  零 
  此实例等于 <paramref name="value" />。  

  大于零 
  此实例大于 <paramref name="value" />。  

或 
 <paramref name="value" /> 为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Byte" />。</exception>
    </member>
    <member name="M:System.Byte.Equals(System.Byte)">
      <summary>返回一个值，该值指示此实例和指定的 <see cref="T:System.Byte" /> 对象是否表示相同的值。</summary>
      <param name="obj">要与此实例进行比较的对象。</param>
      <returns>如果 <see langword="true" /> 与此实例相等，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Byte.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="obj">与此实例进行比较的对象，或为 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.Byte" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Byte.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.Byte" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.Byte.GetTypeCode">
      <summary>返回值类型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.Byte" />。</summary>
      <returns>枚举常数 <see cref="F:System.TypeCode.Byte" />。</returns>
    </member>
    <member name="F:System.Byte.MaxValue">
      <summary>表示 <see cref="T:System.Byte" />的最大可能值。 此字段为常数。</summary>
    </member>
    <member name="F:System.Byte.MinValue">
      <summary>表示 <see cref="T:System.Byte" /> 的最小可能值。 此字段为常数。</summary>
    </member>
    <member name="M:System.Byte.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.Byte.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 <see cref="T:System.Byte" /> 表示形式。</summary>
      <param name="s">包含要转换的数字的字符串。 该字符串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 样式来进行解释。</param>
      <returns>一个字节值，它与 <paramref name="s" /> 中包含的数相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Byte" />。</summary>
      <param name="s">包含要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <returns>一个字节值，它与 <paramref name="s" /> 中包含的数相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。  
或 
 <paramref name="s" /> 包含非零的小数位。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
或 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Byte" />。</summary>
      <param name="s">包含要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，用于提供有关 <paramref name="s" /> 格式的区域性特定信息。 如果 <paramref name="provider" /> 为 <see langword="null" />，则使用当前区域性。</param>
      <returns>一个字节值，它与 <paramref name="s" /> 中包含的数相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。  
或 
 <paramref name="s" /> 包含非零的小数位。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  

或 - 
<paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
    </member>
    <member name="M:System.Byte.Parse(System.String,System.IFormatProvider)">
      <summary>将指定的区域性特定格式的数字字符串表示形式转换为它的等效 <see cref="T:System.Byte" />。</summary>
      <param name="s">包含要转换的数字的字符串。 该字符串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 样式来进行解释。</param>
      <param name="provider">一个对象，它提供有关 <paramref name="s" /> 的区域性特定分析信息。 如果 <paramref name="provider" /> 为 <see langword="null" />，则使用当前区域性。</param>
      <returns>一个字节值，它与 <paramref name="s" /> 中包含的数相等。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>如果当前实例的值不为零，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，未更改。</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Decimal" />。</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int16" />。</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.SByte" />。</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Single" />。</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">此 <see cref="T:System.Byte" /> 值要转换为的类型。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 实现，提供有关返回值格式的信息。</param>
      <returns>当前实例的值，已转换为 <paramref name="type" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">不支持请求的类型转换。</exception>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt16" />。</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt32" />。</returns>
    </member>
    <member name="M:System.Byte.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt64" />。</returns>
    </member>
    <member name="M:System.Byte.ToString">
      <summary>将当前 <see cref="T:System.Byte" /> 对象的值转换为其等效的字符串表示形式。</summary>
      <returns>此对象的值的字符串表示形式，由一系列从 0 到 9 之间的数字组成，不包含前导零。</returns>
    </member>
    <member name="M:System.Byte.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将当前 <see cref="T:System.Byte" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>此对象值的字符串表示形式，采用 <paramref name="provider" /> 参数所指定的格式。</returns>
    </member>
    <member name="M:System.Byte.ToString(System.String)">
      <summary>使用指定的格式将当前 <see cref="T:System.Byte" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <param name="format">一个数值格式字符串。</param>
      <returns>按照 <see cref="T:System.Byte" /> 参数指定的方式进行格式设置的当前 <paramref name="format" /> 对象的字符串表示形式。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 包含不受支持的说明符。 “备注”部分中列出了受支持的格式说明符。</exception>
    </member>
    <member name="M:System.Byte.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息将当前 <see cref="T:System.Byte" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <param name="format">标准或自定义的数值格式字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>按照 <see cref="T:System.Byte" /> 和 <paramref name="format" /> 参数指定的方式进行格式设置的当前 <paramref name="provider" /> 对象的字符串表示形式。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 包含不受支持的说明符。 “备注”部分中列出了受支持的格式说明符。</exception>
    </member>
    <member name="M:System.Byte.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.Byte.TryParse(System.ReadOnlySpan{System.Char},System.Byte@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.Byte.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Byte@)">
      <summary>尝试将数字的字符串表示形式转换为它的等效 <see cref="T:System.Byte" />，并返回一个指示转换是否成功的值。</summary>
      <param name="s">包含要转换的数字的字符串。 该字符串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 样式来进行解释。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <see cref="T:System.Byte" /> 中所包含的数字等效的 <paramref name="s" /> 值；如果转换失败，则包含零。 此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Byte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Byte@)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Byte" />。 一个指示转换是否成功的返回值。</summary>
      <param name="s">包含要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。 如果 <paramref name="provider" /> 为 <see langword="null" />，则使用当前区域性。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所含数字等效的 8 位无符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、格式不正确，或者表示的数字小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" />，则转换失败。 此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
或 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
    </member>
    <member name="T:System.Char">
      <summary>将字符表示为 UTF-16 代码单位。</summary>
    </member>
    <member name="M:System.Char.CompareTo(System.Char)">
      <summary>将此实例与指定的 <see cref="T:System.Char" /> 对象进行比较，并指示此实例在排序顺序中是位于指定的 <see cref="T:System.Char" /> 对象之前、之后还是与其出现在同一位置。</summary>
      <param name="value">要比较的 <see cref="T:System.Char" /> 对象。</param>
      <returns>一个有符号数字，指示此实例在排序顺序中相对于 <paramref name="value" /> 参数的位置。  
  返回值 
  说明 
  小于零 
  此实例位于 <paramref name="value" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="value" /> 相同。  

  大于零 
  此实例位于 <paramref name="value" /> 之后。</returns>
    </member>
    <member name="M:System.Char.CompareTo(System.Object)">
      <summary>将此实例与指定的对象进行比较，并指示此实例在排序顺序中是位于指定的 <see cref="T:System.Object" /> 之前、之后还是与其出现在同一位置。</summary>
      <param name="value">要与此实例比较的对象，或 <see langword="null" />。</param>
      <returns>一个有符号数字，指示此实例在排序顺序中相对于 <paramref name="value" /> 参数的位置。  
  返回值 
  说明 
  小于零 
  此实例位于 <paramref name="value" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="value" /> 相同。  

  大于零 
  此实例位于 <paramref name="value" /> 之后。  

或 
 <paramref name="value" /> 为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Char" /> 对象。</exception>
    </member>
    <member name="M:System.Char.ConvertFromUtf32(System.Int32)">
      <summary>将指定的 Unicode 码位转换为 UTF-16 编码字符串。</summary>
      <param name="utf32">21 位 Unicode 码位。</param>
      <returns>由一个 <see cref="T:System.Char" /> 对象或一个 <see cref="T:System.Char" /> 对象的代理项对组成的字符串，等效于 <paramref name="utf32" /> 参数所指定的码位。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="utf32" /> 不是一个从 U+0 到 U+10FFFF 范围内的有效 21 位 Unicode 码位（从 U+D800 到 U+DFFF 范围的代理项对除外）。</exception>
    </member>
    <member name="M:System.Char.ConvertToUtf32(System.Char,System.Char)">
      <summary>将 UTF-16 编码的代理项对的值转换为 Unicode 码位。</summary>
      <param name="highSurrogate">高代理项代码单位（即代码单位从 U+D800 到 U+DBFF）。</param>
      <param name="lowSurrogate">低代理项代码单位（即代码单位从 U+DC00 到 U+DFFF）。</param>
      <returns>
        <paramref name="highSurrogate" /> 和 <paramref name="lowSurrogate" /> 参数表示的 21 位 Unicode 码位。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="highSurrogate" /> 不在 U + D800 到 U + DBFF 的范围内，或者 <paramref name="lowSurrogate" /> 不在 U + DC00 到 U+DFFF 的范围内。</exception>
    </member>
    <member name="M:System.Char.ConvertToUtf32(System.String,System.Int32)">
      <summary>将字符串中指定位置的 UTF-16 编码字符或代理项对的值转换为 Unicode 码位。</summary>
      <param name="s">包含字符或代理项对的字符串。</param>
      <param name="index">字符或代理项对在 <paramref name="s" /> 中的索引位置。</param>
      <returns>字符或代理项对表示的 21 位 Unicode 码位，该字符或代理项对在 <paramref name="s" /> 参数中的位置由 <paramref name="index" /> 参数指定。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <paramref name="s" /> 内的位置。</exception>
      <exception cref="T:System.ArgumentException">指定的索引位置包含代理项对，且对中的第一个字符不是有效的高代理项或对中的第二个字符不是有效的低代理项。</exception>
    </member>
    <member name="M:System.Char.Equals(System.Char)">
      <summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.Char" /> 对象相等。</summary>
      <param name="obj">要与此实例进行比较的对象。</param>
      <returns>如果 <see langword="true" /> 参数与此实例的值相等，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj">要与此示例比较的对象，或 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.Char" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Char.GetNumericValue(System.Char)">
      <summary>将指定的数字 Unicode 字符转换为双精度浮点数。</summary>
      <param name="c">要转换的 Unicode 字符。</param>
      <returns>如果该字符表示数字，则数值为 <paramref name="c" />；否则为 -1.0。</returns>
    </member>
    <member name="M:System.Char.GetNumericValue(System.String,System.Int32)">
      <summary>将指定字符串中位于指定位置的数字 Unicode 字符转换为双精度浮点数。</summary>
      <param name="s">
        <see cref="T:System.String" />。</param>
      <param name="index">
        <paramref name="s" /> 中的字符位置。</param>
      <returns>如果 <paramref name="index" /> 中位于 <paramref name="s" /> 处的字符表示数字，则为该字符的数值；否则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</exception>
    </member>
    <member name="M:System.Char.GetTypeCode">
      <summary>返回值类型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.Char" />。</summary>
      <returns>枚举常数 <see cref="F:System.TypeCode.Char" />。</returns>
    </member>
    <member name="M:System.Char.GetUnicodeCategory(System.Char)">
      <summary>将指定的 Unicode 字符分类到由一个 <see cref="T:System.Globalization.UnicodeCategory" /> 值标识的组中。</summary>
      <param name="c">要分类的 Unicode 字符。</param>
      <returns>一个 <see cref="T:System.Globalization.UnicodeCategory" /> 值，它标识包含 <paramref name="c" /> 的组。</returns>
    </member>
    <member name="M:System.Char.GetUnicodeCategory(System.String,System.Int32)">
      <summary>将指定字符串中位于指定位置的字符分类到由一个 <see cref="T:System.Globalization.UnicodeCategory" /> 值标识的组中。</summary>
      <param name="s">
        <see cref="T:System.String" />。</param>
      <param name="index">
        <paramref name="s" /> 中的字符位置。</param>
      <returns>一个 <see cref="T:System.Globalization.UnicodeCategory" /> 枚举常数，标识包含 <paramref name="index" /> 中位于 <paramref name="s" /> 处的字符的组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</exception>
    </member>
    <member name="M:System.Char.IsControl(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于控制字符类别。</summary>
      <param name="c">要计算的 Unicode 字符。</param>
      <returns>如果 <see langword="true" /> 是控制字符，则为 <paramref name="c" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsControl(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于控制字符类别。</summary>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <returns>如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个控制字符，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</exception>
    </member>
    <member name="M:System.Char.IsDigit(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于十进制数字类别。</summary>
      <param name="c">要计算的 Unicode 字符。</param>
      <returns>如果 <see langword="true" /> 是十进制数，则为 <paramref name="c" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsDigit(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于十进制数字类别。</summary>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <returns>如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个十进制数，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</exception>
    </member>
    <member name="M:System.Char.IsHighSurrogate(System.Char)">
      <summary>指示指定的 <see cref="T:System.Char" /> 对象是否是一个高代理项。</summary>
      <param name="c">要计算的 Unicode 字符。</param>
      <returns>如果 <see langword="true" /> 参数的数值范围是从 U+D800 到 U+DBFF，则为 <paramref name="c" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsHighSurrogate(System.String,System.Int32)">
      <summary>指示字符串中指定位置处的 <see cref="T:System.Char" /> 对象是否为高代理项。</summary>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <returns>如果 <see langword="true" /> 中指定字符的数值范围是从 U+D800 到 U+DBFF，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <paramref name="s" /> 内的位置。</exception>
    </member>
    <member name="M:System.Char.IsLetter(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于 Unicode 字母类别。</summary>
      <param name="c">要计算的 Unicode 字符。</param>
      <returns>如果 <see langword="true" /> 是一个字母，则为 <paramref name="c" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsLetter(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的指定字符串是否属于 Unicode 字母类别。</summary>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <returns>如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个字母，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</exception>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于字母或十进制数字类别。</summary>
      <param name="c">要计算的 Unicode 字符。</param>
      <returns>如果 <see langword="true" /> 是字母或十进制数，则为 <paramref name="c" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsLetterOrDigit(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于字母或十进制数字类别。</summary>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <returns>如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个字母或十进制数，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</exception>
    </member>
    <member name="M:System.Char.IsLower(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于小写字母类别。</summary>
      <param name="c">要计算的 Unicode 字符。</param>
      <returns>如果 <see langword="true" /> 是一个小写字母，则为 <paramref name="c" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsLower(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于小写字母类别。</summary>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <returns>如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个小写字母，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</exception>
    </member>
    <member name="M:System.Char.IsLowSurrogate(System.Char)">
      <summary>指示指定的 <see cref="T:System.Char" /> 对象是否是一个低代理项。</summary>
      <param name="c">要计算的字符。</param>
      <returns>如果 <see langword="true" /> 参数的数值范围是从 U+DC00 到 U+DFFF，则为 <paramref name="c" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsLowSurrogate(System.String,System.Int32)">
      <summary>指示字符串中指定位置处的 <see cref="T:System.Char" /> 对象是否为低代理项。</summary>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <returns>如果 <see langword="true" /> 中指定字符的数值范围是从 U+DC00 到 U+DFFF，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <paramref name="s" /> 内的位置。</exception>
    </member>
    <member name="M:System.Char.IsNumber(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于数字类别。</summary>
      <param name="c">要计算的 Unicode 字符。</param>
      <returns>如果 <see langword="true" /> 是一个数字，则为 <paramref name="c" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsNumber(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置的字符是否属于数字类别。</summary>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <returns>如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个数字，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</exception>
    </member>
    <member name="M:System.Char.IsPunctuation(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于标点符号类别。</summary>
      <param name="c">要计算的 Unicode 字符。</param>
      <returns>如果 <see langword="true" /> 是一个标点符号，则为 <paramref name="c" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsPunctuation(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于标点符号类别。</summary>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <returns>如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个标点符号，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</exception>
    </member>
    <member name="M:System.Char.IsSeparator(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于分隔符类别。</summary>
      <param name="c">要计算的 Unicode 字符。</param>
      <returns>如果 <see langword="true" /> 是分隔符，则为 <paramref name="c" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsSeparator(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于分隔符类别。</summary>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <returns>如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个分隔符，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</exception>
    </member>
    <member name="M:System.Char.IsSurrogate(System.Char)">
      <summary>指示指定的字符是否具有指定的代理项代码单位。</summary>
      <param name="c">要计算的 Unicode 字符。</param>
      <returns>如果 <see langword="true" /> 为高代理项或低代理项，则为 <paramref name="c" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsSurrogate(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置的字符是否具有代理项代码单位。</summary>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <returns>如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个高代理项或低代理项，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</exception>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.Char,System.Char)">
      <summary>指示两个指定的 <see cref="T:System.Char" /> 对象是否形成一个代理项对。</summary>
      <param name="highSurrogate">要作为代理项对的高代理项进行计算的字符。</param>
      <param name="lowSurrogate">要作为代理项对的低代理项进行计算的字符。</param>
      <returns>如果 <see langword="true" /> 参数的数值范围是从 U+D800 到 U+DBFF，且 <paramref name="highSurrogate" /> 参数的数值是从 U+DC00 到 U+DFFF，则为 <paramref name="lowSurrogate" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsSurrogatePair(System.String,System.Int32)">
      <summary>指示字符串中指定位置处的两个相邻 <see cref="T:System.Char" /> 对象是否形成一个代理项对。</summary>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符对的开始位置。</param>
      <returns>如果 <see langword="true" /> 参数包括 <paramref name="s" /> 和 <paramref name="index" /> + 1 位置处的相邻字符，并且 <paramref name="index" /> 位置处字符的数值范围从 U+D800 到 U+DBFF，<paramref name="index" />+1 位置处字符的数值范围从 U+DC00 到 U+DFFF，则为 <paramref name="index" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <paramref name="s" /> 内的位置。</exception>
    </member>
    <member name="M:System.Char.IsSymbol(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于符号字符类别。</summary>
      <param name="c">要计算的 Unicode 字符。</param>
      <returns>如果 <see langword="true" /> 是符号字符，则为 <paramref name="c" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsSymbol(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于符号字符类别。</summary>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <returns>如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个符号字符，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</exception>
    </member>
    <member name="M:System.Char.IsUpper(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于大写字母类别。</summary>
      <param name="c">要计算的 Unicode 字符。</param>
      <returns>如果 <see langword="true" /> 是一个大写字母，则为 <paramref name="c" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsUpper(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于大写字母类别。</summary>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <returns>如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是一个大写字母，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</exception>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.Char)">
      <summary>指示指定的 Unicode 字符是否属于空格类别。</summary>
      <param name="c">要计算的 Unicode 字符。</param>
      <returns>如果 <see langword="true" /> 是空格，则为 <paramref name="c" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Char.IsWhiteSpace(System.String,System.Int32)">
      <summary>指示指定字符串中位于指定位置处的字符是否属于空格类别。</summary>
      <param name="s">一个字符串。</param>
      <param name="index">
        <paramref name="s" /> 中要计算的字符的位置。</param>
      <returns>如果 <see langword="true" /> 中位于 <paramref name="index" /> 的字符是空格，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于 <paramref name="s" /> 中最后一个位置。</exception>
    </member>
    <member name="F:System.Char.MaxValue">
      <summary>表示 <see cref="T:System.Char" /> 的最大可能值。 此字段为常数。</summary>
    </member>
    <member name="F:System.Char.MinValue">
      <summary>表示 <see cref="T:System.Char" /> 的最小可能值。 此字段为常数。</summary>
    </member>
    <member name="M:System.Char.Parse(System.String)">
      <summary>将指定字符串的值转换为它的等效 Unicode 字符。</summary>
      <param name="s">包含单个字符的字符串，或 <see langword="null" />。</param>
      <returns>一个等效于 <paramref name="s" /> 中唯一字符的 Unicode 字符。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的长度不是 1。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>注意不支持此转换。 尝试这样做会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前 <see cref="T:System.Char" /> 对象的转换值。</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前 <see cref="T:System.Char" /> 对象的值未更改。</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>注意不支持此转换。 尝试这样做会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>注意不支持此转换。 尝试这样做会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>注意不支持此转换。 尝试这样做会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前 <see cref="T:System.Char" /> 对象的转换值。</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前 <see cref="T:System.Char" /> 对象的转换值。</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前 <see cref="T:System.Char" /> 对象的转换值。</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前 <see cref="T:System.Char" /> 对象的转换值。</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>注意不支持此转换。 尝试这样做会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">不支持此转换。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">一个 <see cref="T:System.Type" /> 对象。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 对象。</param>
      <returns>指定类型的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">当前 <see cref="T:System.Char" /> 对象的值不能转换为 <paramref name="type" /> 参数指定的类型。</exception>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 对象。 （由于 <see langword="null" /> 参数已被忽略，因此指定 <paramref name="provider" />。）</param>
      <returns>当前 <see cref="T:System.Char" /> 对象的转换值。</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 对象。 （由于 <see langword="null" /> 参数已被忽略，因此指定 <paramref name="provider" />。）</param>
      <returns>当前 <see cref="T:System.Char" /> 对象的转换值。</returns>
    </member>
    <member name="M:System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 对象。 （由于 <see langword="null" /> 参数已被忽略，因此指定 <paramref name="provider" />。）</param>
      <returns>当前 <see cref="T:System.Char" /> 对象的转换值。</returns>
    </member>
    <member name="M:System.Char.ToLower(System.Char)">
      <summary>将 Unicode 字符的值转换为它的小写等效项。</summary>
      <param name="c">要转换的 Unicode 字符。</param>
      <returns>
        <paramref name="c" /> 的小写等效项，或者，如果 <paramref name="c" /> 已经是小写字母或不是字母，则为 <paramref name="c" /> 的未更改值。</returns>
    </member>
    <member name="M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)">
      <summary>使用指定的区域性特定格式设置信息将指定 Unicode 字符的值转换为它的小写等效项。</summary>
      <param name="c">要转换的 Unicode 字符。</param>
      <param name="culture">一个对象，用于提供区域性特定的大小写规则。</param>
      <returns>
        <paramref name="c" /> 的小写等效项（根据 <paramref name="culture" /> 进行修改），或者，如果 <paramref name="c" /> 已经是小写字母或不是字母，则为 <paramref name="c" /> 的未更改值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Char.ToLowerInvariant(System.Char)">
      <summary>使用固定区域性的大小写规则，将 Unicode 字符的值转换为其小写等效项。</summary>
      <param name="c">要转换的 Unicode 字符。</param>
      <returns>
        <paramref name="c" /> 参数的小写等效项，或者，如果 <paramref name="c" /> 已经是小写字母或不是字母，则为 <paramref name="c" /> 的未更改值。</returns>
    </member>
    <member name="M:System.Char.ToString">
      <summary>将此实例的值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式。</returns>
    </member>
    <member name="M:System.Char.ToString(System.Char)">
      <summary>将指定的 Unicode 字符转换为它的等效字符串表示形式。</summary>
      <param name="c">要转换的 Unicode 字符。</param>
      <returns>
        <paramref name="c" /> 值的字符串表示形式。</returns>
    </member>
    <member name="M:System.Char.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息将此实例的值转换为它的等效字符串表示形式。</summary>
      <param name="provider">（保留）一个对象，用于提供区域性特定的格式设置信息。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</returns>
    </member>
    <member name="M:System.Char.ToUpper(System.Char)">
      <summary>将 Unicode 字符的值转换为它的大写等效项。</summary>
      <param name="c">要转换的 Unicode 字符。</param>
      <returns>
        <paramref name="c" /> 的大写等效项，或者，如果 <paramref name="c" /> 已经是大写字母或不是字母，则为 <paramref name="c" /> 的未更改值。</returns>
    </member>
    <member name="M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)">
      <summary>使用指定的区域性特定格式设置信息将指定 Unicode 字符的值转换为它的大写等效项。</summary>
      <param name="c">要转换的 Unicode 字符。</param>
      <param name="culture">一个对象，用于提供区域性特定的大小写规则。</param>
      <returns>
        <paramref name="c" /> 的大写等效项（根据 <paramref name="culture" /> 进行修改），或者，如果 <paramref name="c" /> 已经是大写字母、没有大写等效项或不是字母，则为 <paramref name="c" /> 的未更改值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Char.ToUpperInvariant(System.Char)">
      <summary>使用固定区域性的大小写规则，将 Unicode 字符的值转换为其大写等效项。</summary>
      <param name="c">要转换的 Unicode 字符。</param>
      <returns>
        <paramref name="c" /> 参数的小写等效项，或者，如果 <paramref name="c" /> 已经是大写字母或不是字母，则为 <paramref name="c" /> 的未更改值。</returns>
    </member>
    <member name="M:System.Char.TryParse(System.String,System.Char@)">
      <summary>将指定字符串的值转换为它的等效 Unicode 字符。 一个指示转换是成功还是失败的返回代码。</summary>
      <param name="s">包含单个字符的字符串，或 <see langword="null" />。</param>
      <param name="result">此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中的唯一字符等效的 Unicode 字符；如果转换失败，则包含未定义的值。 如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <paramref name="s" /> 的长度不为 1，则转换失败。 此参数未经初始化即被传递。</param>
      <returns>如果 <see langword="true" /> 参数成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.CharEnumerator">
      <summary>支持循环访问 <see cref="T:System.String" /> 对象并读取其各个字符。 此类不能被继承。</summary>
    </member>
    <member name="M:System.CharEnumerator.Clone">
      <summary>创建当前 <see cref="T:System.CharEnumerator" /> 对象的副本。</summary>
      <returns>
        <see cref="T:System.Object" />，是当前 <see cref="T:System.CharEnumerator" /> 对象的副本。</returns>
    </member>
    <member name="P:System.CharEnumerator.Current">
      <summary>获取由此 <see cref="T:System.CharEnumerator" /> 对象枚举的字符串中当前引用的字符。</summary>
      <returns>当前由此 <see cref="T:System.CharEnumerator" /> 对象引用的 Unicode 字符。</returns>
      <exception cref="T:System.InvalidOperationException">该索引无效；即它位于枚举字符串的第一个字符之前或最后一个字符之后。</exception>
    </member>
    <member name="M:System.CharEnumerator.Dispose">
      <summary>释放 <see cref="T:System.CharEnumerator" /> 类的当前实例所使用的所有资源。</summary>
    </member>
    <member name="M:System.CharEnumerator.MoveNext">
      <summary>递增当前 <see cref="T:System.CharEnumerator" /> 对象的内部索引使其指向枚举的字符串的下一个字符。</summary>
      <returns>如果索引递增成功并且在枚举字符串内，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.CharEnumerator.Reset">
      <summary>将索引初始化为逻辑上位于枚举字符串的第一个字符之前的位置。</summary>
    </member>
    <member name="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
      <summary>获取由此 <see cref="T:System.CharEnumerator" /> 对象枚举的字符串中当前引用的字符。 有关此成员的说明，请参见 <see cref="P:System.Collections.IEnumerator.Current" />。</summary>
      <returns>当前由此 <see cref="T:System.CharEnumerator" /> 对象引用的已装箱 Unicode 字符。</returns>
      <exception cref="T:System.InvalidOperationException">枚举未启动。  
 或  
 枚举已经终止。</exception>
    </member>
    <member name="T:System.CLSCompliantAttribute">
      <summary>指示程序元素是否符合公共语言规范 (CLS)。 此类不能被继承。</summary>
    </member>
    <member name="M:System.CLSCompliantAttribute.#ctor(System.Boolean)">
      <summary>用布尔值初始化 <see cref="T:System.CLSCompliantAttribute" /> 类的实例，该值指示所指示的程序元素是否符合 CLS。</summary>
      <param name="isCompliant">如果程序元素符合 CLS，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="P:System.CLSCompliantAttribute.IsCompliant">
      <summary>获取指示所指示的程序元素是否符合 CLS 的布尔值。</summary>
      <returns>如果程序元素符合 CLS，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Collections.DictionaryEntry">
      <summary>定义可设置或检索的字典键/值对。</summary>
    </member>
    <member name="M:System.Collections.DictionaryEntry.#ctor(System.Object,System.Object)">
      <summary>使用指定的键和值初始化 <see cref="T:System.Collections.DictionaryEntry" /> 类型的实例。</summary>
      <param name="key">每个键/值对中定义的对象。</param>
      <param name="value">与 <paramref name="key" /> 相关联的定义。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />，并且 .NET Framework 版本为 1.0 或 1.1。</exception>
    </member>
    <member name="M:System.Collections.DictionaryEntry.Deconstruct(System.Object@,System.Object@)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="P:System.Collections.DictionaryEntry.Key">
      <summary>获取或设置键/值对中的键。</summary>
      <returns>键/值对中的键。</returns>
    </member>
    <member name="P:System.Collections.DictionaryEntry.Value">
      <summary>获取或设置键/值对中的值。</summary>
      <returns>键/值对中的值。</returns>
    </member>
    <member name="T:System.Collections.Generic.IAsyncEnumerable`1">
      <summary>公开对指定类型的值提供异步迭代的枚举器。</summary>
      <typeparam name="T">集合中元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
      <summary>返回一个异步循环访问集合的枚举器。</summary>
      <param name="cancellationToken">一个 <see cref="T:System.Threading.CancellationToken" />，可用于取消异步迭代。</param>
      <returns>一个可用于异步循环访问集合的枚举器。</returns>
    </member>
    <member name="T:System.Collections.Generic.IAsyncEnumerator`1">
      <summary>支持在泛型集合上进行简单的异步迭代。</summary>
      <typeparam name="T">集合中元素的类型。</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IAsyncEnumerator`1.Current">
      <summary>获取集合中位于枚举数当前位置的元素。</summary>
      <returns>集合中位于枚举数当前位置的元素。</returns>
    </member>
    <member name="M:System.Collections.Generic.IAsyncEnumerator`1.MoveNextAsync">
      <summary>将枚举器异步推进到集合的下一个元素。</summary>
      <returns>一个 <see cref="T:System.Threading.Tasks.ValueTask`1" />，如果枚举器成功前移到下一个元素，则其完成，且结果为 <see langword="true" />；如果枚举器已超出集合末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Collections.Generic.ICollection`1">
      <summary>定义操作泛型集合的方法。</summary>
      <typeparam name="T">集合中元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Add(`0)">
      <summary>将某项添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。</summary>
      <param name="item">要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Clear">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Contains(`0)">
      <summary>确定 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含特定值。</summary>
      <param name="item">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中定位的对象。</param>
      <returns>如果在 <see langword="true" /> 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)">
      <summary>从特定的 <see cref="T:System.Collections.Generic.ICollection`1" /> 索引开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Generic.ICollection`1" /> 复制的元素的目标。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的元素个数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.Count">
      <summary>获取 <see cref="T:System.Collections.Generic.ICollection`1" /> 中包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 中包含的元素数。</returns>
    </member>
    <member name="P:System.Collections.Generic.ICollection`1.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.ICollection`1.Remove(`0)">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="item">要从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中删除的对象。</param>
      <returns>如果从 <see langword="true" /> 中成功移除 <paramref name="item" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。 如果在原始 <see langword="false" /> 中没有找到 <paramref name="item" />，该方法也会返回 <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读。</exception>
    </member>
    <member name="T:System.Collections.Generic.IComparer`1">
      <summary>定义类型为比较两个对象而实现的方法。</summary>
      <typeparam name="T">要比较的对象的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IComparer`1.Compare(`0,`0)">
      <summary>比较两个对象并返回一个值，该值指示一个对象小于、等于还是大于另一个对象。</summary>
      <param name="x">要比较的第一个对象。</param>
      <param name="y">要比较的第二个对象。</param>
      <returns>一个有符号整数，指示 <paramref name="x" /> 和 <paramref name="y" /> 的相对值，如下表所示。  
  值 
  含义 
  小于零 
 <paramref name="x" /> 小于 <paramref name="y" />。  

  零 
 <paramref name="x" /> 等于 <paramref name="y" />。  

  大于零 
 <paramref name="x" /> 大于 <paramref name="y" />。</returns>
    </member>
    <member name="T:System.Collections.Generic.IDictionary`2">
      <summary>表示键/值对的泛型集合。</summary>
      <typeparam name="TKey">字典中键的类型。</typeparam>
      <typeparam name="TValue">字典中值的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
      <summary>在 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中添加一个带有所提供的键和值的元素。</summary>
      <param name="key">用作要添加的元素的键的对象。</param>
      <param name="value">用作要添加的元素的值的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 中已存在具有相同键的元素。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
      <summary>确定是否 <see cref="T:System.Collections.Generic.IDictionary`2" /> 包含带有指定键的元素。</summary>
      <param name="key">要在 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中定位的键。</param>
      <returns>如果 <see langword="true" /> 包含具有键的元素，则为 <see cref="T:System.Collections.Generic.IDictionary`2" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Item(`0)">
      <summary>获取或设置具有指定键的元素。</summary>
      <param name="key">要获取或设置的元素的键。</param>
      <returns>带有指定键的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">检索了属性但没有找到 <paramref name="key" />。</exception>
      <exception cref="T:System.NotSupportedException">设置了该属性，但 <see cref="T:System.Collections.Generic.IDictionary`2" /> 为只读。</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Keys">
      <summary>获取包含 <see cref="T:System.Collections.Generic.ICollection`1" /> 的键的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象的键。</returns>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
      <summary>从 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中移除包含指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
      <returns>如果该元素已成功移除，则为 <see langword="true" />；否则为 <see langword="false" />。  如果在原始 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中没有找到 <paramref name="key" />，此方法也会返回 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
      <summary>获取与指定键关联的值。</summary>
      <param name="key">要获取其值的键。</param>
      <param name="value">当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则，将返回 <paramref name="value" /> 参数的类型的默认值。 此参数未经初始化即被传递。</param>
      <returns>如果实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象包含具有指定键的元素，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Collections.Generic.IDictionary`2.Values">
      <summary>获取一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含实现 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的对象中的值。</returns>
    </member>
    <member name="T:System.Collections.Generic.IEnumerable`1">
      <summary>公开枚举数，该枚举数支持在指定类型的集合上进行简单迭代。</summary>
      <typeparam name="T">要枚举的对象的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>用于循环访问集合的枚举数。</returns>
    </member>
    <member name="T:System.Collections.Generic.IEnumerator`1">
      <summary>支持在泛型集合上进行简单迭代。</summary>
      <typeparam name="T">要枚举的对象的类型。</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IEnumerator`1.Current">
      <summary>获取集合中位于枚举数当前位置的元素。</summary>
      <returns>集合中位于枚举数当前位置的元素。</returns>
    </member>
    <member name="T:System.Collections.Generic.IEqualityComparer`1">
      <summary>定义方法以支持对象的相等比较。</summary>
      <typeparam name="T">要比较的对象的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.Equals(`0,`0)">
      <summary>确定指定的对象是否相等。</summary>
      <param name="x">要比较的第一个类型为 <paramref name="T" /> 的对象。</param>
      <param name="y">要比较的第二个类型为 <paramref name="T" /> 的对象。</param>
      <returns>如果指定的对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)">
      <summary>返回指定对象的哈希代码。</summary>
      <param name="obj">
        <see cref="T:System.Object" />，将为其返回哈希代码。</param>
      <returns>指定对象的哈希代码。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 的类型为引用类型，<paramref name="obj" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Collections.Generic.IList`1">
      <summary>表示可按照索引单独访问的一组对象。</summary>
      <typeparam name="T">列表中元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IList`1.IndexOf(`0)">
      <summary>确定 <see cref="T:System.Collections.Generic.IList`1" /> 中特定项的索引。</summary>
      <param name="item">要在 <see cref="T:System.Collections.Generic.IList`1" /> 中定位的对象。</param>
      <returns>如果在列表中找到，则为 <paramref name="item" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)">
      <summary>在 <see cref="T:System.Collections.Generic.IList`1" /> 中的指定索引处插入一个项。</summary>
      <param name="index">应插入 <paramref name="item" /> 的从零开始的索引。</param>
      <param name="item">要插入到 <see cref="T:System.Collections.Generic.IList`1" /> 中的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.Generic.IList`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IList`1" /> 为只读。</exception>
    </member>
    <member name="P:System.Collections.Generic.IList`1.Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <returns>指定索引处的元素。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.Generic.IList`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">设置了该属性，但 <see cref="T:System.Collections.Generic.IList`1" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)">
      <summary>移除位于指定索引处的 <see cref="T:System.Collections.Generic.IList`1" /> 项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.Generic.IList`1" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IList`1" /> 为只读。</exception>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyCollection`1">
      <summary>表示元素的强类型的只读集合。</summary>
      <typeparam name="T">元素的类型。</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyCollection`1.Count">
      <summary>获取集合中的元素数。</summary>
      <returns>集合中的元素数。</returns>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyDictionary`2">
      <summary>表示键/值对的泛型只读集合。</summary>
      <typeparam name="TKey">只读字典中的键的类型。</typeparam>
      <typeparam name="TValue">只读字典中的值的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)">
      <summary>确定只读字典是否包含具有指定键的元素。</summary>
      <param name="key">要定位的键。</param>
      <returns>如果该只读词典包含一具有指定键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)">
      <summary>获取在只读目录中有指定键的元素。</summary>
      <param name="key">要定位的键。</param>
      <returns>在只读目录中有指定键的元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">检索了属性但没有找到 <paramref name="key" />。</exception>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Keys">
      <summary>获取包含只读字典中的密钥的可枚举集合。</summary>
      <returns>包含只读字典中的密钥的可枚举集合。</returns>
    </member>
    <member name="M:System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)">
      <summary>获取与指定的键关联的值。</summary>
      <param name="key">要定位的键。</param>
      <param name="value">当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则，将返回 <paramref name="value" /> 参数的类型的默认值。 此参数未经初始化即被传递。</param>
      <returns>如果实现 <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> 接口的对象包含具有指定键的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyDictionary`2.Values">
      <summary>获取包含只读字典中的值的可枚举集合。</summary>
      <returns>包含只读字典中的值的可枚举集合。</returns>
    </member>
    <member name="T:System.Collections.Generic.IReadOnlyList`1">
      <summary>表示可按照索引访问的一组只读元素。</summary>
      <typeparam name="T">只读列表中元素的类型。</typeparam>
    </member>
    <member name="P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)">
      <summary>获取位于只读列表中指定索引处的元素。</summary>
      <param name="index">要获取的元素的索引(索引从零开始)。</param>
      <returns>在只读列表中指定索引处的元素。</returns>
    </member>
    <member name="T:System.Collections.Generic.ISet`1">
      <summary>提供用于集的抽象化的基接口。</summary>
      <typeparam name="T">集内元素的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
      <summary>向当前集内添加元素，并返回一个指示是否已成功添加元素的值。</summary>
      <param name="item">要添加到集中的元素。</param>
      <returns>如果该元素已添加到集内，则为 <see langword="true" />；如果该元素已在集内，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>从当前集内移除指定集合中的所有元素。</summary>
      <param name="other">要从集内移除的项的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前集，使该集仅包含也存在在指定集合中的元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否为指定集合的真（严格）子集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是 <paramref name="other" /> 的真子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否为指定集合的真（严格）超集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是 <paramref name="other" /> 的真超集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定一个集是否为指定集合的子集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是 <paramref name="other" /> 的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否为指定集合的超集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是 <paramref name="other" /> 的超集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否与指定的集合重叠。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集与 <paramref name="other" /> 至少共享一个通用元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集与指定的集合是否包含相同的元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集等于 <paramref name="other" />，则为 <see langword="true" />；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前集，使该集仅包含存在于当前集或指定集合中的元素（但不同时存在于两者中）。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前集，使该集包含存在于当前集、指定集合或两者中的所有元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Collections.Generic.KeyNotFoundException">
      <summary>指定用于访问集合中元素的键与集合中的任何键都不匹配时所引发的异常。</summary>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor">
      <summary>使用默认属性值初始化 <see cref="T:System.Collections.Generic.KeyNotFoundException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Collections.Generic.KeyNotFoundException" /> 类的新实例。</summary>
      <param name="info">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Collections.Generic.KeyNotFoundException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Collections.Generic.KeyNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对导致此异常的内部异常的引用来初始化 <see cref="T:System.Collections.Generic.KeyNotFoundException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Collections.Generic.KeyValuePair" />
    <member name="M:System.Collections.Generic.KeyValuePair.Create``2(``0,``1)">
      <param name="key" />
      <param name="value" />
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="T:System.Collections.Generic.KeyValuePair`2">
      <summary>定义可设置或检索的键/值对。</summary>
      <typeparam name="TKey">键的类型。</typeparam>
      <typeparam name="TValue">值的类型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.#ctor(`0,`1)">
      <summary>用指定的键和值初始化 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构的新实例。</summary>
      <param name="key">每个键/值对中定义的对象。</param>
      <param name="value">与 <paramref name="key" /> 相关联的定义。</param>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.Deconstruct(`0@,`1@)">
      <param name="key" />
      <param name="value" />
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Key">
      <summary>获取键/值对中的键。</summary>
      <returns>一个 <typeparamref name="TKey" />，它是 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的键。</returns>
    </member>
    <member name="M:System.Collections.Generic.KeyValuePair`2.ToString">
      <summary>使用键和值的字符串表示形式返回 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的字符串表示形式，它包括键和值的字符串表示形式。</returns>
    </member>
    <member name="P:System.Collections.Generic.KeyValuePair`2.Value">
      <summary>获取键/值对中的值。</summary>
      <returns>一个 <typeparamref name="TValue" />，它是 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的值。</returns>
    </member>
    <member name="T:System.Collections.ICollection">
      <summary>定义所有非泛型集合的大小、枚举数和同步方法。</summary>
    </member>
    <member name="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Collections.ICollection" /> 索引开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。  
或 
源 <see cref="T:System.Collections.ICollection" /> 中的元素个数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。  

或 - 
无法自动将源 <see cref="T:System.Collections.ICollection" /> 的类型转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.ICollection.Count">
      <summary>获取 <see cref="T:System.Collections.ICollection" /> 中包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 中包含的元素数。</returns>
    </member>
    <member name="P:System.Collections.ICollection.IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.ICollection.SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="T:System.Collections.IComparer">
      <summary>公开一种比较两个对象的方法。</summary>
    </member>
    <member name="M:System.Collections.IComparer.Compare(System.Object,System.Object)">
      <summary>比较两个对象并返回一个值，该值指示一个对象小于、等于还是大于另一个对象。</summary>
      <param name="x">要比较的第一个对象。</param>
      <param name="y">要比较的第二个对象。</param>
      <returns>一个带符号整数，指示 <paramref name="x" /> 和<paramref name="y" /> 的相对值：   - 如果小于 0，则 <paramref name="x" /> 小于 <paramref name="y" />。   - 如果为 0，则 <paramref name="x" /> 等于 <paramref name="y" />。   - 如果大于 0，则 <paramref name="x" /> 大于 <paramref name="y" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 和 <paramref name="y" /> 都不实现 <see cref="T:System.IComparable" /> 接口。  
或 
 <paramref name="x" /> 和 <paramref name="y" /> 的类型不同，它们都无法处理与另一个进行的比较。</exception>
    </member>
    <member name="T:System.Collections.IDictionary">
      <summary>表示键/值对的非通用集合。</summary>
    </member>
    <member name="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
      <summary>在 <see cref="T:System.Collections.IDictionary" /> 对象中添加一个带有所提供的键和值的元素。</summary>
      <param name="key">用作要添加的元素的键的 <see cref="T:System.Object" />。</param>
      <param name="value">用作要添加的元素的键的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.IDictionary" /> 对象中已存在具有相同键的元素。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IDictionary" /> 为只读。  
或 
<see cref="T:System.Collections.IDictionary" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.IDictionary.Clear">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 对象中移除所有元素。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IDictionary" /> 对象是只读的。</exception>
    </member>
    <member name="M:System.Collections.IDictionary.Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IDictionary" /> 对象是否包含具有指定键的元素。</summary>
      <param name="key">要在 <see cref="T:System.Collections.IDictionary" /> 对象中查找的键。</param>
      <returns>如果 <see langword="true" /> 包含具有键的元素，则为 <see cref="T:System.Collections.IDictionary" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.IDictionary.GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IDictionary" /> 对象的 <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象的 <see cref="T:System.Collections.IDictionary" /> 对象。</returns>
    </member>
    <member name="P:System.Collections.IDictionary.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 对象是否具有固定大小。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 对象具有固定大小，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.IDictionary.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 对象是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.IDictionary" /> 对象为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.IDictionary.Item(System.Object)">
      <summary>获取或设置具有指定键的元素。</summary>
      <param name="key">要获取或设置的元素的键。</param>
      <returns>具有指定键的元素，如果该键不存在，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">设置该属性，而且 <see cref="T:System.Collections.IDictionary" /> 对象为只读。  
或 
设置了该属性，但 <paramref name="key" /> 不存在于集合中，且 <see cref="T:System.Collections.IDictionary" /> 具有固定的大小。</exception>
    </member>
    <member name="P:System.Collections.IDictionary.Keys">
      <summary>获取 <see cref="T:System.Collections.ICollection" /> 对象，它包含 <see cref="T:System.Collections.IDictionary" /> 对象的键。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 对象，它包含 <see cref="T:System.Collections.IDictionary" /> 对象的键。</returns>
    </member>
    <member name="M:System.Collections.IDictionary.Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 对象中移除具有指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IDictionary" /> 对象是只读的。  
或 
<see cref="T:System.Collections.IDictionary" /> 具有固定的大小。</exception>
    </member>
    <member name="P:System.Collections.IDictionary.Values">
      <summary>获取 <see cref="T:System.Collections.ICollection" /> 对象，它包含 <see cref="T:System.Collections.IDictionary" /> 对象中的值。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 对象，它包含 <see cref="T:System.Collections.IDictionary" /> 对象中的值。</returns>
    </member>
    <member name="T:System.Collections.IDictionaryEnumerator">
      <summary>枚举非泛型字典的元素。</summary>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Entry">
      <summary>同时获取当前字典项的键和值。</summary>
      <returns>同时包含当前字典项的键和值的 <see cref="T:System.Collections.DictionaryEntry" />。</returns>
      <exception cref="T:System.InvalidOperationException">将 <see cref="T:System.Collections.IDictionaryEnumerator" /> 定位于字典的第一项之前或最后一项之后。</exception>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Key">
      <summary>获取当前字典项的键。</summary>
      <returns>当前枚举元素的键。</returns>
      <exception cref="T:System.InvalidOperationException">将 <see cref="T:System.Collections.IDictionaryEnumerator" /> 定位于字典的第一项之前或最后一项之后。</exception>
    </member>
    <member name="P:System.Collections.IDictionaryEnumerator.Value">
      <summary>获取当前字典项的值。</summary>
      <returns>当前枚举元素的值。</returns>
      <exception cref="T:System.InvalidOperationException">将 <see cref="T:System.Collections.IDictionaryEnumerator" /> 定位于字典的第一项之前或最后一项之后。</exception>
    </member>
    <member name="T:System.Collections.IEnumerable">
      <summary>公开枚举数，该枚举数支持在非泛型集合上进行简单迭代。</summary>
    </member>
    <member name="M:System.Collections.IEnumerable.GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>一个可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="T:System.Collections.IEnumerator">
      <summary>支持对非泛型集合的简单迭代。</summary>
    </member>
    <member name="P:System.Collections.IEnumerator.Current">
      <summary>获取集合中位于枚举数当前位置的元素。</summary>
      <returns>集合中位于枚举数当前位置的元素。</returns>
    </member>
    <member name="M:System.Collections.IEnumerator.MoveNext">
      <summary>将枚举数推进到集合的下一个元素。</summary>
      <returns>如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">集合在枚举器创建后被修改。</exception>
    </member>
    <member name="M:System.Collections.IEnumerator.Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">集合在枚举器创建后被修改。</exception>
    </member>
    <member name="T:System.Collections.IEqualityComparer">
      <summary>定义方法以支持对象的相等比较。</summary>
    </member>
    <member name="M:System.Collections.IEqualityComparer.Equals(System.Object,System.Object)">
      <summary>确定指定的对象是否相等。</summary>
      <param name="x">要比较的第一个对象。</param>
      <param name="y">要比较的第二个对象。</param>
      <returns>如果指定的对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 和 <paramref name="y" /> 的类型不同，它们都无法处理与另一个进行的比较。</exception>
    </member>
    <member name="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)">
      <summary>返回指定对象的哈希代码。</summary>
      <param name="obj">
        <see cref="T:System.Object" />，将为其返回哈希代码。</param>
      <returns>指定对象的哈希代码。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 的类型为引用类型，<paramref name="obj" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Collections.IList">
      <summary>表示可按照索引单独访问的对象的非泛型集合。</summary>
    </member>
    <member name="M:System.Collections.IList.Add(System.Object)">
      <summary>将某项添加到 <see cref="T:System.Collections.IList" /> 中。</summary>
      <param name="value">要添加到 <see cref="T:System.Collections.IList" /> 的对象。</param>
      <returns>插入了新元素的位置，-1 指示该项未插入到集合中。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。  
或 
<see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.IList.Clear">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.IList.Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中定位的对象。</param>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到了 <see cref="T:System.Object" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.IList.IndexOf(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。</summary>
      <param name="value">要在 <see cref="T:System.Collections.IList" /> 中定位的对象。</param>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.IList.Insert(System.Int32,System.Object)">
      <summary>在 <see cref="T:System.Collections.IList" /> 中的指定索引处插入一个项。</summary>
      <param name="index">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value">要插入到 <see cref="T:System.Collections.IList" /> 中的对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。  

或 - 
<see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> 在 <see cref="T:System.Collections.IList" /> 中是 null 引用。</exception>
    </member>
    <member name="P:System.Collections.IList.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns>如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.IList.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.IList.Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <returns>指定索引处的元素。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">设置了该属性，但 <see cref="T:System.Collections.IList" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.IList.Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从 <see cref="T:System.Collections.IList" /> 中删除的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。  

或 - 
<see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.IList.RemoveAt(System.Int32)">
      <summary>移除位于指定索引处的 <see cref="T:System.Collections.IList" /> 项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.IList" /> 为只读。  

或 - 
<see cref="T:System.Collections.IList" /> 具有固定的大小。</exception>
    </member>
    <member name="T:System.Collections.IStructuralComparable">
      <summary>支持集合对象的结构比较。</summary>
    </member>
    <member name="M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)">
      <summary>确定当前集合对象在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">一个将当前集合对象的成员与 <paramref name="other" /> 的对应成员进行比较的对象。</param>
      <returns>指明当前集合对象与 <paramref name="other" /> 的排序顺序关系的带符号整数： - 如果小于 0，表明当前实例先于 <paramref name="other" />。 - 如果等于 0，表明当前实例和 <paramref name="other" /> 的顺序相同。 - 如果大于 0，表明当前实例后于 <paramref name="other" />。  
  返回值 
  说明 
  -1 
  当前实例位于 <paramref name="other" /> 之前。  

  0 
  当前实例与 <paramref name="other" /> 位于同一位置。  

  1 
  当前实例位于 <paramref name="other" /> 之后。</returns>
      <exception cref="T:System.ArgumentException">此实例与 <paramref name="other" /> 不是同一类型。</exception>
    </member>
    <member name="T:System.Collections.IStructuralEquatable">
      <summary>定义方法以支持对象的结构相等性比较。</summary>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>确定某个对象与当前实例在结构上是否相等。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">一个可确定当前实例与 <paramref name="other" /> 是否相等的对象。</param>
      <returns>如果两个对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)">
      <summary>返回当前实例的哈希代码。</summary>
      <param name="comparer">一个计算当前对象的哈希代码的对象。</param>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="T:System.Collections.ObjectModel.Collection`1">
      <summary>提供泛型集合的基类。</summary>
      <typeparam name="T">集合中的元素类型。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor">
      <summary>初始化为空的 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>将 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 类的新实例初始化为指定列表的包装。</summary>
      <param name="list">由新的集合包装的列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Add(`0)">
      <summary>将对象添加到 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的结尾处。</summary>
      <param name="item">要添加到 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 末尾的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Clear">
      <summary>从 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中移除所有元素。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.ClearItems">
      <summary>从 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中移除所有元素。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Contains(`0)">
      <summary>确定某元素是否在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中。</summary>
      <param name="item">要在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中定位的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <returns>如果在 <see langword="true" /> 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.ObjectModel.Collection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)">
      <summary>从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 复制到兼容的一维 <see cref="T:System.Array" />。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 复制的元素的目标。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中的元素个数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Count">
      <summary>获取 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中实际包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中实际包含的元素数。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的枚举数。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> 的一个 <see cref="T:System.Collections.ObjectModel.Collection`1" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)">
      <summary>搜索指定的对象，并返回整个 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中第一个匹配项的从零开始的索引。</summary>
      <param name="item">要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <returns>如果找到，则为整个 <paramref name="item" /> 中 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 第一个匹配项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)">
      <summary>将元素插入 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的指定索引处。</summary>
      <param name="index">应插入 <paramref name="item" /> 的从零开始的索引。</param>
      <param name="item">要插入的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。  
或 
 <paramref name="index" /> 大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)">
      <summary>将元素插入 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的指定索引处。</summary>
      <param name="index">应插入 <paramref name="item" /> 的从零开始的索引。</param>
      <param name="item">要插入的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。  

或 - 
<paramref name="index" /> 大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <returns>指定索引处的元素。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。  
或 
 <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.Items">
      <summary>获取 <see cref="T:System.Collections.Generic.IList`1" /> 周围的 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 包装。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> 周围的 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 包装。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.Remove(`0)">
      <summary>从 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="item">要从 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中删除的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <returns>如果成功移除 <paramref name="item" />，则为 <see langword="true" />；否则为 <see langword="false" />。  如果在原始 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 中没有找到 <paramref name="item" />，此方法也会返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的指定索引处的元素。</summary>
      <param name="index">要移除的元素的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。  
或 
 <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的指定索引处的元素。</summary>
      <param name="index">要移除的元素的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。  
或 
 <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)">
      <summary>替换指定索引处的元素。</summary>
      <param name="index">待替换元素的从零开始的索引。</param>
      <param name="item">位于指定索引处的元素的新值。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。  
或 
 <paramref name="index" /> 大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。  在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的默认实现中，此属性始终返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Collections.ICollection" /> 索引开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。  

或 - 
<paramref name="array" /> 没有从零开始的索引。  

或 
源 <see cref="T:System.Collections.ICollection" /> 中的元素个数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。  
或 
无法自动将源 <see cref="T:System.Collections.ICollection" /> 的类型转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。  在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的默认实现中，此属性始终返回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。  在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)">
      <summary>将某项添加到 <see cref="T:System.Collections.IList" /> 中。</summary>
      <param name="value">要添加到 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。</param>
      <returns>新元素的插入位置。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.IList" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.IList" />。</param>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到了 <see cref="T:System.Object" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.IList" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.IList" />。</param>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.IList" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将某项插入 <see cref="T:System.Collections.IList" /> 中指定的索引处。</summary>
      <param name="index">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value">要插入到 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.IList" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns>如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。  在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的默认实现中，此属性始终返回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。  在 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 的默认实现中，此属性始终返回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <returns>指定索引处的元素。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">已设置属性，且 <paramref name="value" /> 属于不能对 <see cref="T:System.Collections.IList" /> 赋值的类型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从 <see cref="T:System.Object" /> 移除的 <see cref="T:System.Collections.IList" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 属于不能分配给 <see cref="T:System.Collections.IList" /> 的类型。</exception>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyCollection`1">
      <summary>提供泛型只读集合的基类。</summary>
      <typeparam name="T">集合中的元素类型。</typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 类的新实例，该实例是指定列表周围的只读包装。</summary>
      <param name="list">要包装的列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)">
      <summary>确定某元素是否在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中。</summary>
      <param name="value">要在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中定位的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <returns>如果在 <see langword="true" /> 中找到 <paramref name="value" />，则为 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)">
      <summary>从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 复制到兼容的一维 <see cref="T:System.Array" />。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 复制的元素的目标。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中的元素个数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count">
      <summary>获取包含在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 实例中的元素数。</summary>
      <returns>包含在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 实例中的元素数。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的枚举数。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> 的一个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)">
      <summary>搜索指定的对象，并返回整个 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 中第一个匹配项的从零开始的索引。</summary>
      <param name="value">要在 <see cref="T:System.Collections.Generic.List`1" /> 中定位的对象。 对于引用类型，该值可以为 <see langword="null" />。</param>
      <returns>如果找到，则为整个 <paramref name="item" /> 中 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 第一个匹配项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)">
      <summary>获取指定索引处的元素。</summary>
      <param name="index">要获取的元素的索引(索引从零开始)。</param>
      <returns>指定索引处的元素。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。  

或 - 
<paramref name="index" /> 等于或大于 <see cref="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count" />。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.Items">
      <summary>返回 <see cref="T:System.Collections.Generic.IList`1" /> 包装的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> 包装的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>将某项添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。  此实现始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 的对象。</param>
      <exception cref="T:System.NotSupportedException">始终引发。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除所有项。  此实现始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">始终引发。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。  在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的默认实现中，此属性始终返回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除特定对象的第一个匹配项。  此实现始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中删除的对象。</param>
      <returns>如果从 <see langword="true" /> 中成功移除 <paramref name="value" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">始终引发。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>在 <see cref="T:System.Collections.Generic.IList`1" /> 中的指定索引处插入一个项。  此实现始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value">要插入到 <see cref="T:System.Collections.Generic.IList`1" /> 中的对象。</param>
      <exception cref="T:System.NotSupportedException">始终引发。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>获取指定索引处的元素。 如果您尝试设置指定索引处的项，则会发生 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要获取的元素的索引(索引从零开始)。</param>
      <returns>指定索引处的元素。</returns>
      <exception cref="T:System.NotSupportedException">如果设置了该属性，则总是引发此异常。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>移除位于指定索引处的 <see cref="T:System.Collections.Generic.IList`1" /> 项。  此实现始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">始终引发。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Collections.ICollection" /> 索引开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。  

或 - 
<paramref name="array" /> 没有从零开始的索引。  

或 
源 <see cref="T:System.Collections.ICollection" /> 中的元素个数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。  
或 
无法自动将源 <see cref="T:System.Collections.ICollection" /> 的类型转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 <see langword="true" /> 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 <see langword="false" />。  在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的默认实现中，此属性始终返回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。  在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)">
      <summary>将某项添加到 <see cref="T:System.Collections.IList" /> 中。  此实现始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要添加到 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。</param>
      <returns>新元素的插入位置。</returns>
      <exception cref="T:System.NotSupportedException">始终引发。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除所有项。  此实现始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">始终引发。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.IList" />。</param>
      <returns>如果在 <see cref="T:System.Collections.IList" /> 中找到了 <see cref="T:System.Object" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 所属的类型不是泛型类型参数 <paramref name="T" /> 的指定类型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.IList" />。</param>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 所属的类型不是泛型类型参数 <paramref name="T" /> 的指定类型。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>在 <see cref="T:System.Collections.IList" /> 中的指定索引处插入一个项。  此实现始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value">要插入到 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">始终引发。</exception>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns>如果 <see langword="true" /> 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。  在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的默认实现中，此属性始终返回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Collections.IList" />；否则为 <see langword="false" />。  在 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 的默认实现中，此属性始终返回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)">
      <summary>获取指定索引处的元素。 如果尝试设置指定索引处的项，则会发生 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要获取的元素的索引(索引从零开始)。</param>
      <returns>指定索引处的元素。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="T:System.Collections.IList" /> 中的有效索引。</exception>
      <exception cref="T:System.NotSupportedException">如果设置了该属性，则总是引发此异常。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。  此实现始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要从 <see cref="T:System.Object" /> 移除的 <see cref="T:System.Collections.IList" />。</param>
      <exception cref="T:System.NotSupportedException">始终引发。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除位于指定索引处的 <see cref="T:System.Collections.IList" /> 项。  此实现始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">始终引发。</exception>
    </member>
    <member name="T:System.Comparison`1">
      <summary>表示比较同一类型的两个对象的方法。</summary>
      <param name="x">要比较的第一个对象。</param>
      <param name="y">要比较的第二个对象。</param>
      <typeparam name="T">要比较的对象的类型。</typeparam>
      <returns>一个有符号整数，指示 <paramref name="x" /> 和 <paramref name="y" /> 的相对值，如下表所示。  
  值 
  含义 
  小于 0 
 <paramref name="x" /> 小于 <paramref name="y" />。  

  0 
 <paramref name="x" /> 等于 <paramref name="y" />。  

  大于 0 
 <paramref name="x" /> 大于 <paramref name="y" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultValueAttribute">
      <summary>指定属性的默认值。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Boolean)">
      <summary>使用 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 值初始化 <see cref="T:System.Boolean" /> 类的新实例。</summary>
      <param name="value">
        <see cref="T:System.Boolean" />，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Byte)">
      <summary>使用 8 位无符号整数初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">8 位无符号整数，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Char)">
      <summary>使用 Unicode 字符初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">Unicode 字符，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Double)">
      <summary>使用双精度浮点数字初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">双精度浮点数字，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int16)">
      <summary>使用 16 位有符号整数初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的实例。</summary>
      <param name="value">16 位有符号整数，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int32)">
      <summary>使用 32 位有符号整数初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">32 位有符号整数，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int64)">
      <summary>使用 64 位有符号整数初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">64 位有符号整数，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">表示默认值的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.SByte)">
      <summary>使用 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 值初始化 <see cref="T:System.SByte" /> 类的新实例。</summary>
      <param name="value">默认的带符号字节值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Single)">
      <summary>使用单精度浮点数字初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">单精度浮点数字，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.String)">
      <summary>使用 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 初始化 <see cref="T:System.String" /> 类的新实例。</summary>
      <param name="value">
        <see cref="T:System.String" />，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Type,System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例，将指定的值转换为指定的类型，并将固定区域性作为翻译上下文。</summary>
      <param name="type">表示要将值转换为的类型的 <see cref="T:System.Type" />。</param>
      <param name="value">可以通过该类型的 <see cref="T:System.String" /> 和美国英语转换为该类型的 <see cref="T:System.ComponentModel.TypeConverter" />。英语区域性。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.UInt16)">
      <summary>使用 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 值初始化 <see cref="T:System.UInt16" /> 类的新实例。</summary>
      <param name="value">默认的无符号 16 位整数值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.UInt32)">
      <summary>使用 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 值初始化 <see cref="T:System.UInt32" /> 类的新实例。</summary>
      <param name="value">默认的无符号整数值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.UInt64)">
      <summary>使用 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 值初始化 <see cref="T:System.UInt64" /> 类的新实例。</summary>
      <param name="value">默认的无符号长整型值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.DefaultValueAttribute" />。</summary>
      <param name="obj">要进行值的相等性测试的对象。</param>
      <returns>如果给定对象的值等于当前对象的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.SetValue(System.Object)">
      <summary>设置此属性 (Attribute) 所绑定到的属性 (Property) 的默认值。</summary>
      <param name="value">默认值。</param>
    </member>
    <member name="P:System.ComponentModel.DefaultValueAttribute.Value">
      <summary>获取此属性 (Attribute) 绑定到的属性 (Property) 的默认值。</summary>
      <returns>表示此属性 (Attribute) 绑定到的属性 (Property) 的默认值的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableAttribute">
      <summary>指定可在编辑器中查看的属性或方法。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor">
      <summary>使用设置为默认状态的 <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> 初始化 <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor(System.ComponentModel.EditorBrowsableState)">
      <summary>使用 <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> 初始化 <see cref="T:System.ComponentModel.EditorBrowsableState" /> 类的新实例。</summary>
      <param name="state">要将 <see cref="T:System.ComponentModel.EditorBrowsableState" /> 设置成的 <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" />。</param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前的 <see cref="T:System.ComponentModel.EditorBrowsableAttribute" />。</summary>
      <param name="obj">要进行值的相等性测试的对象。</param>
      <returns>如果给定对象的值等于当前对象的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.EditorBrowsableAttribute.State">
      <summary>获取属性或方法的可浏览状态。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.EditorBrowsableState" />，它是属性或方法的可浏览状态。</returns>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableState">
      <summary>在编辑器中指定属性或方法的可浏览状态。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Advanced">
      <summary>该属性或方法是只有高级用户才可以看到的功能。 编辑器可以显示或隐藏这些属性。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Always">
      <summary>该属性或方法在编辑器中始终是可浏览的。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Never">
      <summary>该属性或方法始终不能在编辑器中浏览。</summary>
    </member>
    <member name="T:System.Configuration.Assemblies.AssemblyHashAlgorithm">
      <summary>指定用于哈希文件和用于生成强名称的所有哈希算法。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.MD5">
      <summary>检索 MD5 消息摘要算法。 MD5 是 Rivest 在 1991 年开发的。 它与 MD4 基本相同，只是增加了安全性。它虽然比 MD4 稍慢一些，但更安全。 该算法包括四个不同的步骤，其设计与 MD4 的略有不同。 消息摘要的大小以及填充要求保持不变。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.None">
      <summary>一个掩码，它指示无哈希算法。 如果为多模块程序集指定 <see langword="None" />，则公共语言运行时默认采用 SHA1 算法，因为多模块程序集需要生成哈希。 由于与 SHA1 冲突，Microsoft 建议使用 SHA256。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA1">
      <summary>用于检索“安全哈希算法”修订版的掩码，该修订版更正了 SHA 中的一个未发布的错误。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA256">
      <summary>用于检索“安全哈希算法”的版本的掩码，其哈希值大小为 256 位。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA384">
      <summary>用于检索“安全哈希算法”的版本的掩码，其哈希值大小为 384 位。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyHashAlgorithm.SHA512">
      <summary>用于检索“安全哈希算法”的版本的掩码，其哈希值大小为 512 位。</summary>
    </member>
    <member name="T:System.Configuration.Assemblies.AssemblyVersionCompatibility">
      <summary>定义不同类型程序集版本的兼容性。 .NET Framework 1.0 版中没有提供这项功能。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameDomain">
      <summary>程序集无法与其他版本在同一应用程序域中一起执行。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameMachine">
      <summary>该程序集无法与其他版本在同一台计算机上一起执行。</summary>
    </member>
    <member name="F:System.Configuration.Assemblies.AssemblyVersionCompatibility.SameProcess">
      <summary>程序集无法与其他版本在同一进程中一起执行。</summary>
    </member>
    <member name="T:System.Converter`2">
      <summary>表示将对象从一种类型转换为另一种类型的方法。</summary>
      <param name="input">要转换的对象。</param>
      <typeparam name="TInput">要转换的对象的类型。</typeparam>
      <typeparam name="TOutput">要将输入对象转换到的类型。</typeparam>
      <returns>
        <typeparamref name="TOutput" />，它表示已转换的 <typeparamref name="TInput" />。</returns>
    </member>
    <member name="T:System.DateTime">
      <summary>表示时间上的一刻，通常以日期和当天的时间表示。</summary>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定的年、月和日。</summary>
      <param name="year">年（1 到 9999）。</param>
      <param name="month">月（1 到 12）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于 1 或大于 9999。  
或 
 <paramref name="month" /> 小于 1 或大于 12。  
或 
 <paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定日历的指定年、月和日。</summary>
      <param name="year">年（1 到 <paramref name="calendar" /> 中的年数）。</param>
      <param name="month">月（1 到 <paramref name="calendar" /> 中的月数）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <param name="calendar">用于解释 <paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 的日历。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在 <paramref name="calendar" /> 支持的范围内。  
或 
 <paramref name="month" /> 小于 1 或大于 <paramref name="calendar" /> 中的月数。  

或 - 
<paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定的年、月、日、小时、分钟和秒。</summary>
      <param name="year">年（1 到 9999）。</param>
      <param name="month">月（1 到 12）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <param name="hour">小时（0 到 23）。</param>
      <param name="minute">分（0 到 59）。</param>
      <param name="second">秒（0 到 59）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于 1 或大于 9999。  
或 
 <paramref name="month" /> 小于 1 或大于 12。  
或 
 <paramref name="day" /> 小于 1 或大于 <paramref name="month" />中的天数。  
或 
 <paramref name="hour" /> 小于 0 或大于 23。  
或 
 <paramref name="minute" /> 小于 0 或大于 59。  
或 
 <paramref name="second" /> 小于 0 或大于 59。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定年、月、日、小时、分钟、秒和协调世界时 (UTC) 或本地时间。</summary>
      <param name="year">年（1 到 9999）。</param>
      <param name="month">月（1 到 12）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <param name="hour">小时（0 到 23）。</param>
      <param name="minute">分（0 到 59）。</param>
      <param name="second">秒（0 到 59）。</param>
      <param name="kind">枚举值之一，该值指示 <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" /> 和 <paramref name="second" /> 指定了本地时间、协调世界时 (UTC)，还是两者皆未指定。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于 1 或大于 9999。  

或 - 
<paramref name="month" /> 小于 1 或大于 12。  

或 
 <paramref name="day" /> 小于 1 或大于 <paramref name="month" />中的天数。  
或 
 <paramref name="hour" /> 小于 0 或大于 23。  
或 
 <paramref name="minute" /> 小于 0 或大于 59。  

或 - 
<paramref name="second" /> 小于 0 或大于 59。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> 不是 <see cref="T:System.DateTimeKind" /> 值之一。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定日历的年、月、日、小时、分钟和秒。</summary>
      <param name="year">年（1 到 <paramref name="calendar" /> 中的年数）。</param>
      <param name="month">月（1 到 <paramref name="calendar" /> 中的月数）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <param name="hour">小时（0 到 23）。</param>
      <param name="minute">分（0 到 59）。</param>
      <param name="second">秒（0 到 59）。</param>
      <param name="calendar">用于解释 <paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 的日历。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在 <paramref name="calendar" /> 支持的范围内。  
或 
 <paramref name="month" /> 小于 1 或大于 <paramref name="calendar" /> 中的月数。  

或 - 
<paramref name="day" /> 小于 1 或大于 <paramref name="month" />中的天数。  

或 
 <paramref name="hour" /> 小于 0 或大于 23 
或 
 <paramref name="minute" /> 小于 0 或大于 59。  

或 - 
<paramref name="second" /> 小于 0 或大于 59。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定的年、月、日、小时、分钟、秒和毫秒。</summary>
      <param name="year">年（1 到 9999）。</param>
      <param name="month">月（1 到 12）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <param name="hour">小时（0 到 23）。</param>
      <param name="minute">分（0 到 59）。</param>
      <param name="second">秒（0 到 59）。</param>
      <param name="millisecond">毫秒（0 到 999）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于 1 或大于 9999。  

或 - 
<paramref name="month" /> 小于 1 或大于 12。  

或 - 
<paramref name="day" /> 小于 1 或大于 <paramref name="month" />中的天数。  


或 
 <paramref name="hour" /> 小于 0 或大于 23。  
或 
 <paramref name="minute" /> 小于 0 或大于 59。  

或 - 
<paramref name="second" /> 小于 0 或大于 59。  

或 
 <paramref name="millisecond" /> 小于 0 或大于 999。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定年、月、日、小时、分钟、秒、毫秒和协调世界时 (UTC) 或本地时间。</summary>
      <param name="year">年（1 到 9999）。</param>
      <param name="month">月（1 到 12）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <param name="hour">小时（0 到 23）。</param>
      <param name="minute">分（0 到 59）。</param>
      <param name="second">秒（0 到 59）。</param>
      <param name="millisecond">毫秒（0 到 999）。</param>
      <param name="kind">枚举值之一，该值指示 <paramref name="year" />、<paramref name="month" />、<paramref name="day" />, <paramref name="hour" />、<paramref name="minute" />、<paramref name="second" /> 和 <paramref name="millisecond" /> 指定了本地时间、协调世界时 (UTC)，还是两者皆未指定。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于 1 或大于 9999。  
或 
 <paramref name="month" /> 小于 1 或大于 12。  
或 
 <paramref name="day" /> 小于 1 或大于 <paramref name="month" />中的天数。  

或 - 
<paramref name="hour" /> 小于 0 或大于 23。  

或 - 
<paramref name="minute" /> 小于 0 或大于 59。  

或 - 
<paramref name="second" /> 小于 0 或大于 59。  

或 - 
<paramref name="millisecond" /> 小于 0 或大于 999。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> 不是 <see cref="T:System.DateTimeKind" /> 值之一。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定日历的指定年、月、日、小时、分钟、秒和毫秒。</summary>
      <param name="year">年（1 到 <paramref name="calendar" /> 中的年数）。</param>
      <param name="month">月（1 到 <paramref name="calendar" /> 中的月数）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <param name="hour">小时（0 到 23）。</param>
      <param name="minute">分（0 到 59）。</param>
      <param name="second">秒（0 到 59）。</param>
      <param name="millisecond">毫秒（0 到 999）。</param>
      <param name="calendar">用于解释 <paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 的日历。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在 <paramref name="calendar" /> 支持的范围内。  

或 - 
<paramref name="month" /> 小于 1 或大于 <paramref name="calendar" /> 中的月数。  

或 - 
<paramref name="day" /> 小于 1 或大于 <paramref name="month" />中的天数。  


或 
 <paramref name="hour" /> 小于 0 或大于 23。  
或 
 <paramref name="minute" /> 小于 0 或大于 59。  
或 
 <paramref name="second" /> 小于 0 或大于 59。  

或 - 
<paramref name="millisecond" /> 小于 0 或大于 999。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定日历的指定年、月、日、小时、分钟、秒、毫秒和协调世界时 (UTC) 或本地时间。</summary>
      <param name="year">年（1 到 <paramref name="calendar" /> 中的年数）。</param>
      <param name="month">月（1 到 <paramref name="calendar" /> 中的月数）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <param name="hour">小时（0 到 23）。</param>
      <param name="minute">分（0 到 59）。</param>
      <param name="second">秒（0 到 59）。</param>
      <param name="millisecond">毫秒（0 到 999）。</param>
      <param name="calendar">用于解释 <paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 的日历。</param>
      <param name="kind">枚举值之一，该值指示 <paramref name="year" />、<paramref name="month" />、<paramref name="day" />, <paramref name="hour" />、<paramref name="minute" />、<paramref name="second" /> 和 <paramref name="millisecond" /> 指定了本地时间、协调世界时 (UTC)，还是两者皆未指定。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 不在 <paramref name="calendar" /> 支持的范围内。  
或 
 <paramref name="month" /> 小于 1 或大于 <paramref name="calendar" /> 中的月数。  
或 
 <paramref name="day" /> 小于 1 或大于 <paramref name="month" />中的天数。  

或 - 
<paramref name="hour" /> 小于 0 或大于 23。  

或 
 <paramref name="minute" /> 小于 0 或大于 59。  

或 - 
<paramref name="second" /> 小于 0 或大于 59。  

或 
 <paramref name="millisecond" /> 小于 0 或大于 999。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> 不是 <see cref="T:System.DateTimeKind" /> 值之一。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定的刻度数。</summary>
      <param name="ticks">一个日期和时间，以公历 0001 年 1 月 1 日 00:00:00.000 以来所经历的以 100 纳秒为间隔的间隔数来表示。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.#ctor(System.Int64,System.DateTimeKind)">
      <summary>将 <see cref="T:System.DateTime" /> 结构的新实例初始化为指定的计时周期数以及协调世界时 (UTC) 或本地时间。</summary>
      <param name="ticks">一个日期和时间，以公历 0001 年 1 月 1 日 00:00:00.000 以来所经历的以 100 纳秒为间隔的间隔数来表示。</param>
      <param name="kind">枚举值之一，该值指示 <paramref name="ticks" /> 是指定了本地时间、协调世界时 (UTC)，还是两者皆未指定。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ticks" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="kind" /> 不是 <see cref="T:System.DateTimeKind" /> 值之一。</exception>
    </member>
    <member name="M:System.DateTime.Add(System.TimeSpan)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定 <see cref="T:System.TimeSpan" /> 的值添加到此实例的值上。</summary>
      <param name="value">正或负时间间隔。</param>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的时间间隔之和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.AddDays(System.Double)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的天数加到此实例的值上。</summary>
      <param name="value">由整数和小数部分组成的天数。 <paramref name="value" /> 参数可以是负数也可以是正数。</param>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的天数之和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.AddHours(System.Double)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的小时数加到此实例的值上。</summary>
      <param name="value">由整数和小数部分组成的小时数。 <paramref name="value" /> 参数可以是负数也可以是正数。</param>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的小时数之和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.AddMilliseconds(System.Double)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的毫秒数加到此实例的值上。</summary>
      <param name="value">由整数和小数部分组成的毫秒数。 <paramref name="value" /> 参数可以是负数也可以是正数。 请注意，该值被舍入到最近的整数。</param>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的毫秒数之和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.AddMinutes(System.Double)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的分钟数加到此实例的值上。</summary>
      <param name="value">由整数和小数部分组成的分钟数。 <paramref name="value" /> 参数可以是负数也可以是正数。</param>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的分钟数之和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.AddMonths(System.Int32)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的月数加到此实例的值上。</summary>
      <param name="months">月份数。 <paramref name="months" /> 参数可以是负数也可以是正数。</param>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="months" /> 所表示的时间之和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。  
或 
 <paramref name="months" /> 小于 -120,000 或大于 120,000。</exception>
    </member>
    <member name="M:System.DateTime.AddSeconds(System.Double)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的秒数加到此实例的值上。</summary>
      <param name="value">由整数和小数部分组成的秒数。 <paramref name="value" /> 参数可以是负数也可以是正数。</param>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的秒数之和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.AddTicks(System.Int64)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的刻度数加到此实例的值上。</summary>
      <param name="value">以 100 纳秒为单位的计时周期数。 <paramref name="value" /> 参数可以是正数也可以是负数。</param>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的时间之和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.AddYears(System.Int32)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，它将指定的年份数加到此实例的值上。</summary>
      <param name="value">年份数。 <paramref name="value" /> 参数可以是负数也可以是正数。</param>
      <returns>一个对象，其值是此实例所表示的日期和时间与 <paramref name="value" /> 所表示的年份数之和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 或生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.Compare(System.DateTime,System.DateTime)">
      <summary>对两个 <see cref="T:System.DateTime" /> 的实例进行比较，并返回一个指示第一个实例是早于、等于还是晚于第二个实例的整数。</summary>
      <param name="t1">要比较的第一个对象。</param>
      <param name="t2">要比较的第二个对象。</param>
      <returns>有符号数字，指示 <paramref name="t1" /> 和 <paramref name="t2" /> 的相对值。  
  值类型 
  条件 
  小于零 
 <paramref name="t1" /> 早于 <paramref name="t2" />。  

  零 
 <paramref name="t1" /> 与 <paramref name="t2" /> 相同。  

  大于零 
 <paramref name="t1" /> 晚于 <paramref name="t2" />。</returns>
    </member>
    <member name="M:System.DateTime.CompareTo(System.DateTime)">
      <summary>将此实例的值与指定的 <see cref="T:System.DateTime" /> 值相比较，并返回一个整数，该整数指示此实例是早于、等于还是晚于指定的 <see cref="T:System.DateTime" /> 值。</summary>
      <param name="value">要与当前类型进行比较的对象。</param>
      <returns>有符号数字，指示此实例和 <paramref name="value" /> 参数的相对值。  
  值 
  说明 
  小于零 
  此实例早于 <paramref name="value" />。  

  零 
  此实例与 <paramref name="value" /> 相同。  

  大于零 
  此实例晚于 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.DateTime.CompareTo(System.Object)">
      <summary>将此实例的值与包含指定的 <see cref="T:System.DateTime" /> 值的指定对象相比较，并返回一个整数，该整数指示此实例是早于、等于还是晚于指定的 <see cref="T:System.DateTime" /> 值。</summary>
      <param name="value">要比较的装箱对象，或 <see langword="null" />。</param>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。  
  值 
  说明 
  小于零 
  此实例早于 <paramref name="value" />。  

  零 
  此实例与 <paramref name="value" /> 相同。  

  大于零 
  此实例晚于 <paramref name="value" />，或 <paramref name="value" /> 为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.DateTime" />。</exception>
    </member>
    <member name="P:System.DateTime.Date">
      <summary>获取此实例的日期部分。</summary>
      <returns>一个新对象，其日期与此实例相同，时间值设置为午夜 12:00:00 (00:00:00)。</returns>
    </member>
    <member name="P:System.DateTime.Day">
      <summary>获取此实例所表示的日期为该月中的第几天。</summary>
      <returns>日组成部分，表示为 1 和 31 之间的一个值。</returns>
    </member>
    <member name="P:System.DateTime.DayOfWeek">
      <summary>获取此实例所表示的日期是星期几。</summary>
      <returns>一个枚举常量，指示此 <see cref="T:System.DateTime" /> 值是星期几。</returns>
    </member>
    <member name="P:System.DateTime.DayOfYear">
      <summary>获取此实例所表示的日期是该年中的第几天。</summary>
      <returns>该年中的第几天，表示为 1 和 366 之间的一个值。</returns>
    </member>
    <member name="M:System.DateTime.DaysInMonth(System.Int32,System.Int32)">
      <summary>返回指定年和月中的天数。</summary>
      <param name="year">年。</param>
      <param name="month">月（介于 1 到 12 之间的一个数字）。</param>
      <returns>指定 <paramref name="month" /> 中 <paramref name="year" /> 中的天数。  
例如，如果 <paramref name="month" /> 等于 2（表示二月），则返回值为 28 或 29，具体取决于 <paramref name="year" /> 是否为闰年。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> 小于 1 或大于 12。  
或 
 <paramref name="year" /> 小于 1 或大于 9999。</exception>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime)">
      <summary>返回一个值，该值指示此实例的值是否等于指定 <see cref="T:System.DateTime" /> 实例的值。</summary>
      <param name="value">要与此实例进行比较的对象。</param>
      <returns>如果 <see langword="true" /> 参数与此实例的值相等，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTime.Equals(System.DateTime,System.DateTime)">
      <summary>返回一个值，该值指示的两个 <see cref="T:System.DateTime" /> 实例是否具有同一个日期和时间值。</summary>
      <param name="t1">要比较的第一个对象。</param>
      <param name="t2">要比较的第二个对象。</param>
      <returns>如果两个值相等，则为，<see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTime.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="value">要与此实例进行比较的对象。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="value" /> 的实例并且等于此实例的值，则为 <see cref="T:System.DateTime" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTime.FromBinary(System.Int64)">
      <summary>反序列化一个 64 位二进制值，并重新创建序列化的 <see cref="T:System.DateTime" /> 初始对象。</summary>
      <param name="dateData">64 位带符号整数，它对 2 位字段的 <see cref="P:System.DateTime.Kind" /> 属性以及 62 位字段的 <see cref="P:System.DateTime.Ticks" /> 属性进行了编码。</param>
      <returns>一个对象，它等效于由 <see cref="T:System.DateTime" /> 方法序列化的 <see cref="M:System.DateTime.ToBinary" /> 对象。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateData" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.FromFileTime(System.Int64)">
      <summary>将指定的 Windows 文件时间转换为等效的本地时间。</summary>
      <param name="fileTime">以计时周期表示的 Windows 文件时间。</param>
      <returns>一个表示本地时间的对象，等效于由 <paramref name="fileTime" /> 参数表示的日期和时间。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> 小于零或表示大于 <see cref="F:System.DateTime.MaxValue" /> 的时间。</exception>
    </member>
    <member name="M:System.DateTime.FromFileTimeUtc(System.Int64)">
      <summary>将指定的 Windows 文件时间转换为等效的 UTC 时间。</summary>
      <param name="fileTime">以计时周期表示的 Windows 文件时间。</param>
      <returns>一个表示 UTC 时间的对象，等效于由 <paramref name="fileTime" /> 参数表示的日期和时间。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fileTime" /> 小于零或表示大于 <see cref="F:System.DateTime.MaxValue" /> 的时间。</exception>
    </member>
    <member name="M:System.DateTime.FromOADate(System.Double)">
      <summary>返回与指定的 OLE 自动化日期等效的 <see cref="T:System.DateTime" />。</summary>
      <param name="d">OLE 自动化日期值。</param>
      <returns>一个对象，它表示与 <paramref name="d" /> 相同的日期和时间。</returns>
      <exception cref="T:System.ArgumentException">日期不是有效的 OLE 自动化日期值。</exception>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats">
      <summary>将此实例的值转换为标准日期和时间格式说明符支持的所有字符串表示形式。</summary>
      <returns>字符串数组，其中每个元素都表示此实例的以标准日期和时间格式说明符之一进行格式设置的一个值。</returns>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.Char)">
      <summary>将此实例的值转换为指定的标准日期和时间格式说明符支持的所有字符串表示形式。</summary>
      <param name="format">标准日期和时间格式字符串。</param>
      <returns>符串数组，其中每个元素都表示此实例的以 <paramref name="format" /> 标准日期和时间格式说明符之一进行格式设置的一个值。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的标准日期和时间格式说明符。</exception>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.Char,System.IFormatProvider)">
      <summary>将此实例的值转换为指定的标准日期和时间格式说明符和区域性特定格式信息支持的所有字符串表示形式。</summary>
      <param name="format">标准和时间格式字符串。</param>
      <param name="provider">一个对象，它提供有关此实例的区域性特定格式设置信息。</param>
      <returns>字符串数组，其中每个元素都表示此实例的以标准日期和时间格式说明符之一进行格式设置的一个值。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不是有效的标准日期和时间格式说明符。</exception>
    </member>
    <member name="M:System.DateTime.GetDateTimeFormats(System.IFormatProvider)">
      <summary>将此实例的值转换为标准日期和时间格式说明符和指定的区域性特定格式信息支持的所有字符串表示形式。</summary>
      <param name="provider">一个对象，它提供有关此实例的区域性特定格式设置信息。</param>
      <returns>字符串数组，其中每个元素都表示此实例的以标准日期和时间格式说明符之一进行格式设置的一个值。</returns>
    </member>
    <member name="M:System.DateTime.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.DateTime.GetTypeCode">
      <summary>返回值类型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.DateTime" />。</summary>
      <returns>枚举常数 <see cref="F:System.TypeCode.DateTime" />。</returns>
    </member>
    <member name="P:System.DateTime.Hour">
      <summary>获取此实例所表示日期的小时部分。</summary>
      <returns>小时组成部分，表示为 0 和 23 之间的一个值。</returns>
    </member>
    <member name="M:System.DateTime.IsDaylightSavingTime">
      <summary>指示此 <see cref="T:System.DateTime" /> 实例是否在当前时区的夏时制范围内。</summary>
      <returns>如果 <see langword="true" /> 属性的值为 <see cref="P:System.DateTime.Kind" /> 或 <see cref="F:System.DateTimeKind.Local" />，并且 <see cref="F:System.DateTimeKind.Unspecified" /> 的此实例的值在当前时区的夏时制范围内，则为 <see cref="T:System.DateTime" />；如果 <see langword="false" /> 为 <see cref="P:System.DateTime.Kind" />，则为 <see cref="F:System.DateTimeKind.Utc" />。</returns>
    </member>
    <member name="M:System.DateTime.IsLeapYear(System.Int32)">
      <summary>返回指定的年份是否为闰年的指示。</summary>
      <param name="year">四位数年份。</param>
      <returns>如果 <see langword="true" /> 是闰年，则为 <paramref name="year" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于 1 或大于 9999。</exception>
    </member>
    <member name="P:System.DateTime.Kind">
      <summary>获取一个值，该值指示由此实例表示的时间是基于本地时间、协调世界时 (UTC)，还是两者皆否。</summary>
      <returns>用于指示当前时间表示的含义的枚举值之一。 默认值为 <see cref="F:System.DateTimeKind.Unspecified" />。</returns>
    </member>
    <member name="F:System.DateTime.MaxValue">
      <summary>表示 <see cref="T:System.DateTime" /> 的最大可能值。 此字段为只读。</summary>
    </member>
    <member name="P:System.DateTime.Millisecond">
      <summary>获取此实例所表示日期的毫秒部分。</summary>
      <returns>毫秒组成部分，表示为 0 和 999 之间的一个值。</returns>
    </member>
    <member name="P:System.DateTime.Minute">
      <summary>获取此实例所表示日期的分钟部分。</summary>
      <returns>分钟组成部分，表示为 0 和 59 之间的一个值。</returns>
    </member>
    <member name="F:System.DateTime.MinValue">
      <summary>表示 <see cref="T:System.DateTime" /> 的最小可能值。 此字段为只读。</summary>
    </member>
    <member name="P:System.DateTime.Month">
      <summary>获取此实例所表示日期的月份部分。</summary>
      <returns>月组成部分，表示为 1 和 12 之间的一个值。</returns>
    </member>
    <member name="P:System.DateTime.Now">
      <summary>获取一个 <see cref="T:System.DateTime" /> 对象，该对象设置为此计算机上的当前日期和时间，表示为本地时间。</summary>
      <returns>其值为当前日期和时间的对象。</returns>
    </member>
    <member name="M:System.DateTime.op_Addition(System.DateTime,System.TimeSpan)">
      <summary>将指定的时间间隔加到指定的日期和时间以生成新的日期和时间。</summary>
      <param name="d">要添加的日期和时间值。</param>
      <param name="t">待添加的时间间隔。</param>
      <returns>一个对象，它是 <paramref name="d" /> 和 <paramref name="t" /> 值的和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.op_Equality(System.DateTime,System.DateTime)">
      <summary>确定 <see cref="T:System.DateTime" /> 的两个指定的实例是否相等。</summary>
      <param name="d1">要比较的第一个对象。</param>
      <param name="d2">要比较的第二个对象。</param>
      <returns>如果 <see langword="true" /> 和 <paramref name="d1" /> 表示同一日期和时间，则为 <paramref name="d2" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTime.op_GreaterThan(System.DateTime,System.DateTime)">
      <summary>确定指定的 <see cref="T:System.DateTime" /> 是否晚于另一个指定的 <see cref="T:System.DateTime" />。</summary>
      <param name="t1">要比较的第一个对象。</param>
      <param name="t2">要比较的第二个对象。</param>
      <returns>如果 <see langword="true" /> 晚于 <paramref name="t1" />，则为 <paramref name="t2" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTime.op_GreaterThanOrEqual(System.DateTime,System.DateTime)">
      <summary>确定一个指定的 <see cref="T:System.DateTime" /> 表示的日期和时间等于还是晚于另一个指定的 <see cref="T:System.DateTime" />。</summary>
      <param name="t1">要比较的第一个对象。</param>
      <param name="t2">要比较的第二个对象。</param>
      <returns>如果 <see langword="true" /> 等于或晚于 <paramref name="t1" />，则为 <paramref name="t2" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTime.op_Inequality(System.DateTime,System.DateTime)">
      <summary>确定 <see cref="T:System.DateTime" /> 的两个指定的实例是否不等。</summary>
      <param name="d1">要比较的第一个对象。</param>
      <param name="d2">要比较的第二个对象。</param>
      <returns>如果 <see langword="true" /> 和 <paramref name="d1" /> 不表示同一日期和时间，则为 <paramref name="d2" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTime.op_LessThan(System.DateTime,System.DateTime)">
      <summary>确定指定的 <see cref="T:System.DateTime" /> 是否早于另一个指定的 <see cref="T:System.DateTime" />。</summary>
      <param name="t1">要比较的第一个对象。</param>
      <param name="t2">要比较的第二个对象。</param>
      <returns>如果 <see langword="true" /> 早于 <paramref name="t1" />，则为 <paramref name="t2" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTime.op_LessThanOrEqual(System.DateTime,System.DateTime)">
      <summary>确定一个指定的 <see cref="T:System.DateTime" /> 表示的日期和时间等于还是早于另一个指定的 <see cref="T:System.DateTime" />。</summary>
      <param name="t1">要比较的第一个对象。</param>
      <param name="t2">要比较的第二个对象。</param>
      <returns>如果 <paramref name="t1" /> 等于或早于 <paramref name="t2" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.DateTime)">
      <summary>将指定的日期和时间与另一个指定的日期和时间相减，返回一个时间间隔。</summary>
      <param name="d1">要从中减去的日期和时间值（被减数）。</param>
      <param name="d2">要减去的日期和时间值（减数）。</param>
      <returns>
        <paramref name="d1" /> 和 <paramref name="d2" /> 之间的时间间隔；即 <paramref name="d1" /> 减去 <paramref name="d2" />。</returns>
    </member>
    <member name="M:System.DateTime.op_Subtraction(System.DateTime,System.TimeSpan)">
      <summary>从指定的日期和时间减去指定的时间间隔，返回新的日期和时间。</summary>
      <param name="d">要从其中减去的日期和时间值。</param>
      <param name="t">待减去的时间间隔。</param>
      <returns>一个对象，其值为 <paramref name="d" /> 的值减去 <paramref name="t" /> 的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTime" /> 小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的区域性特定格式设置信息和格式类型，将包含日期和时间的字符串表示形式的内存范围转换为其等效的 <see cref="T:System.DateTime" />。</summary>
      <param name="s">包含要分析的字符串的内存范围。 有关详细信息，请参阅要分析的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式信息。  请参阅分析和区域性约定</param>
      <param name="styles">枚举值的按位组合，用于指示 <paramref name="s" /> 成功执行分析操作所需的样式元素以及定义如何根据当前时区或当前日期解释已分析日期的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间，由 <paramref name="provider" /> 和 <paramref name="styles" /> 指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不包含日期和时间的有效字符串表示形式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包含无效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值组合。 例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />。</exception>
    </member>
    <member name="M:System.DateTime.Parse(System.String)">
      <summary>使用当前线程区域性的约定将日期和时间的字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。</summary>
      <param name="s">包含要转换的日期和时间的字符串。 有关详细信息，请参阅要分析的字符串。</param>
      <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不包含日期和时间的有效字符串表示形式。</exception>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息，将日期和时间的字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。</summary>
      <param name="s">包含要转换的日期和时间的字符串。 有关详细信息，请参阅要分析的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式信息。  请参阅分析和区域性约定</param>
      <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间，由 <paramref name="provider" /> 指定。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不包含日期和时间的有效字符串表示形式。</exception>
    </member>
    <member name="M:System.DateTime.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的区域性特定格式设置信息和格式类型，将日期和时间的字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。</summary>
      <param name="s">包含要转换的日期和时间的字符串。 有关详细信息，请参阅要分析的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。  请参阅分析和区域性约定</param>
      <param name="styles">枚举值的按位组合，用于指示 <paramref name="s" /> 成功执行分析操作所需的样式元素以及定义如何根据当前时区或当前日期解释已分析日期的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间，由 <paramref name="provider" /> 和 <paramref name="styles" /> 指定。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不包含日期和时间的有效字符串表示形式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包含无效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值组合。 例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />。</exception>
    </member>
    <member name="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <param name="s" />
      <param name="format" />
      <param name="provider" />
      <param name="style" />
    </member>
    <member name="M:System.DateTime.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <param name="s" />
      <param name="formats" />
      <param name="provider" />
      <param name="style" />
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <param name="format">用于定义所需的 <paramref name="s" /> 格式的格式说明符。 有关详细信息，请参阅“备注”部分。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式信息。</param>
      <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 或 <paramref name="format" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 或 <paramref name="format" /> 是一个空字符串。  
或 
 <paramref name="s" /> 不包含与 <paramref name="format" /> 中指定的模式相对应的日期和时间。  
或 
<paramref name="s" /> 中的小时组成部分和 AM/PM 指示符不一致。</exception>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式、区域性特定的格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。 字符串表示形式的格式必须与指定的格式完全匹配，否则会引发异常。</summary>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <param name="format">用于定义所需的 <paramref name="s" /> 格式的格式说明符。 有关详细信息，请参阅“备注”部分。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="style">枚举值的按位组合，提供有关以下内容的附加信息：<paramref name="s" />、可能出现在 <paramref name="s" /> 中的样式元素或从 <paramref name="s" /> 到 <see cref="T:System.DateTime" /> 值的转换。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间，由 <paramref name="format" />、<paramref name="provider" /> 和 <paramref name="style" /> 指定。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 或 <paramref name="format" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 或 <paramref name="format" /> 是一个空字符串。  

或 - 
<paramref name="s" /> 不包含与 <paramref name="format" /> 中指定的模式相对应的日期和时间。  

或 
<paramref name="s" /> 中的小时组成部分和 AM/PM 指示符不一致。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 包含无效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值组合。 例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />。</exception>
    </member>
    <member name="M:System.DateTime.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式数组、区域性特定格式信息和样式，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。 字符串表示形式的格式必须至少与指定的格式之一完全匹配，否则会引发异常。</summary>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <param name="formats">
        <paramref name="s" /> 的允许格式的数组。 有关详细信息，请参阅“备注”部分。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式信息。</param>
      <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <returns>一个对象，它等效于 <paramref name="s" /> 中包含的日期和时间，由 <paramref name="formats" />、<paramref name="provider" /> 和 <paramref name="style" /> 指定。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 或 <paramref name="formats" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 是一个空字符串。  
或 
<paramref name="formats" /> 的一个元素为空字符串。  
或 
 <paramref name="s" /> 不包含与 <paramref name="formats" /> 中任意元素相对应的日期和时间。  
或 
<paramref name="s" /> 中的小时组成部分和 AM/PM 指示符不一致。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 包含无效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值组合。 例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />。</exception>
    </member>
    <member name="P:System.DateTime.Second">
      <summary>获取此实例所表示日期的秒部分。</summary>
      <returns>秒组成部分，表示为 0 和 59 之间的一个值。</returns>
    </member>
    <member name="M:System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)">
      <summary>创建新的 <see cref="T:System.DateTime" /> 对象，该对象具有与指定的 <see cref="T:System.DateTime" /> 相同的刻度数，但是根据指定的 <see cref="T:System.DateTimeKind" /> 值的指示，指定为本地时间或协调世界时 (UTC)，或者两者皆否。</summary>
      <param name="value">日期和时间。</param>
      <param name="kind">枚举值之一，该值指示新对象是表示本地时间、UTC，还是两者皆否。</param>
      <returns>一个新对象，它与由 <paramref name="value" /> 参数和由 <see cref="T:System.DateTimeKind" /> 参数指定的 <paramref name="kind" /> 值代表的对象具有相同刻度数。</returns>
    </member>
    <member name="M:System.DateTime.Subtract(System.DateTime)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，从此实例的值中减去指定的日期和时间。</summary>
      <param name="value">要减去的日期和时间值。</param>
      <returns>一个时间间隔，它等于此实例所表示的日期和时间减去 <paramref name="value" /> 所表示的日期和时间。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">结果小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.Subtract(System.TimeSpan)">
      <summary>返回一个新的 <see cref="T:System.DateTime" />，从此实例的值中减去指定持续时间。</summary>
      <param name="value">待减去的时间间隔。</param>
      <returns>一个对象，它等于此实例所表示的日期和时间减去 <paramref name="value" /> 所表示的时间间隔。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">结果小于 <see cref="F:System.DateTime.MinValue" /> 或大于 <see cref="F:System.DateTime.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>返回当前 <see cref="T:System.DateTime" /> 对象。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>当前对象。</returns>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>将当前 <see cref="T:System.DateTime" /> 对象转换为指定类型的对象。</summary>
      <param name="type">所需类型。</param>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>由 <paramref name="type" /> 参数指定的类型的对象，其值与当前 <see cref="T:System.DateTime" /> 对象等效。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DateTime" /> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.DateTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化当前的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象所需的所有数据填充 <see cref="T:System.DateTime" /> 对象。</summary>
      <param name="info">要填充数据的对象。</param>
      <param name="context">此序列化的目标。 （未使用此参数；指定 <see langword="null" />。）</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.DateTime.Ticks">
      <summary>获取表示此实例的日期和时间的计时周期数。</summary>
      <returns>表示此实例的日期和时间的计时周期数。 该值介于 <see langword="DateTime.MinValue.Ticks" /> 和 <see langword="DateTime.MaxValue.Ticks" /> 之间。</returns>
    </member>
    <member name="P:System.DateTime.TimeOfDay">
      <summary>获取此实例的当天的时间。</summary>
      <returns>一个时间间隔，它表示当天自午夜以来已经过时间的部分。</returns>
    </member>
    <member name="M:System.DateTime.ToBinary">
      <summary>将当前 <see cref="T:System.DateTime" /> 对象序列化为一个 64 位二进制值，该值随后可用于重新创建 <see cref="T:System.DateTime" /> 对象。</summary>
      <returns>64 位有符号整数，它对 <see cref="P:System.DateTime.Kind" /> 和 <see cref="P:System.DateTime.Ticks" /> 属性进行了编码。</returns>
    </member>
    <member name="P:System.DateTime.Today">
      <summary>获取当前日期。</summary>
      <returns>一个对象，设置为当天日期，其时间组成部分设置为 00:00:00。</returns>
    </member>
    <member name="M:System.DateTime.ToFileTime">
      <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为 Windows 文件时间。</summary>
      <returns>表示为 Windows 文件时间的当前 <see cref="T:System.DateTime" /> 对象的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的文件时间将表示公元 1601 年 1 月 1 日午夜 12:00 之前的日期和时间。 UTC。</exception>
    </member>
    <member name="M:System.DateTime.ToFileTimeUtc">
      <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为 Windows 文件时间。</summary>
      <returns>表示为 Windows 文件时间的当前 <see cref="T:System.DateTime" /> 对象的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的文件时间将表示公元 1601 年 1 月 1 日午夜 12:00 之前的日期和时间。 UTC。</exception>
    </member>
    <member name="M:System.DateTime.ToLocalTime">
      <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为本地时间。</summary>
      <returns>一个对象，其 <see cref="P:System.DateTime.Kind" /> 属性为 <see cref="F:System.DateTimeKind.Local" />，并且其值为等效于当前 <see cref="T:System.DateTime" /> 对象的值的本地时间；如果经转换的值过大以至于不能由 <see cref="F:System.DateTime.MaxValue" /> 对象表示，则为 <see cref="T:System.DateTime" />，或者，如果经转换的值过小以至于不能表示为 <see cref="F:System.DateTime.MinValue" /> 对象，则为 <see cref="T:System.DateTime" />。</returns>
    </member>
    <member name="M:System.DateTime.ToLongDateString">
      <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为其等效的长日期字符串表示形式。</summary>
      <returns>一个字符串，它包含当前 <see cref="T:System.DateTime" /> 对象的长日期字符串表示形式。</returns>
    </member>
    <member name="M:System.DateTime.ToLongTimeString">
      <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为其等效的长时间字符串表示形式。</summary>
      <returns>一个字符串，它包含当前 <see cref="T:System.DateTime" /> 对象的长时间字符串表示形式。</returns>
    </member>
    <member name="M:System.DateTime.ToOADate">
      <summary>将此实例的值转换为等效的 OLE 自动化日期。</summary>
      <returns>一个双精度浮点数，它包含与此实例的值等效的 OLE 自动化日期。</returns>
      <exception cref="T:System.OverflowException">此实例的值无法表示为 OLE 自动化日期。</exception>
    </member>
    <member name="M:System.DateTime.ToShortDateString">
      <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为其等效的短日期字符串表示形式。</summary>
      <returns>一个字符串，它包含当前 <see cref="T:System.DateTime" /> 对象的短日期字符串表示形式。</returns>
    </member>
    <member name="M:System.DateTime.ToShortTimeString">
      <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为其等效的短时间字符串表示形式。</summary>
      <returns>一个字符串，它包含当前 <see cref="T:System.DateTime" /> 对象的短时间字符串表示形式。</returns>
    </member>
    <member name="M:System.DateTime.ToString">
      <summary>使用当前的区域性格式约定将当前 <see cref="T:System.DateTime" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <returns>当前 <see cref="T:System.DateTime" /> 对象的值的字符串表示形式。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">此日期和时间超出了当前区域性所用日历支持的日期范围。</exception>
    </member>
    <member name="M:System.DateTime.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息将当前 <see cref="T:System.DateTime" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>由 <see cref="T:System.DateTime" /> 指定的当前 <paramref name="provider" /> 对象的值的字符串表示形式。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">日期和时间超出了 <paramref name="provider" /> 所用日历支持的日期范围。</exception>
    </member>
    <member name="M:System.DateTime.ToString(System.String)">
      <summary>使用指定的格式和当前区域性的格式约定将当前 <see cref="T:System.DateTime" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <param name="format">标准或自定义日期和时间格式字符串。</param>
      <returns>由 <see cref="T:System.DateTime" /> 指定的当前 <paramref name="format" /> 对象的值的字符串表示形式。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的长度为 1，而且它不是为 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 定义的格式说明符字符之一。  
或 
 <paramref name="format" /> 不包含有效的自定义格式模式。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">此日期和时间超出了当前区域性所用日历支持的日期范围。</exception>
    </member>
    <member name="M:System.DateTime.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息将当前 <see cref="T:System.DateTime" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <param name="format">标准或自定义日期和时间格式字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>由 <see cref="T:System.DateTime" /> 和 <paramref name="format" /> 指定的当前 <paramref name="provider" /> 对象的值的字符串表示形式。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的长度为 1，而且它不是为 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 定义的格式说明符字符之一。  
或 
 <paramref name="format" /> 不包含有效的自定义格式模式。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">日期和时间超出了 <paramref name="provider" /> 所用日历支持的日期范围。</exception>
    </member>
    <member name="M:System.DateTime.ToUniversalTime">
      <summary>将当前 <see cref="T:System.DateTime" /> 对象的值转换为协调世界时 (UTC)。</summary>
      <returns>一个对象，其 <see cref="P:System.DateTime.Kind" /> 属性为 <see cref="F:System.DateTimeKind.Utc" />，并且其值为等效于当前 <see cref="T:System.DateTime" /> 对象的值的 UTC；如果经转换的值过大以至于不能由 <see cref="F:System.DateTime.MaxValue" /> 对象表示，则为 <see cref="T:System.DateTime" />，或者，如果经转换的值过小以至于不能表示为 <see cref="F:System.DateTime.MinValue" /> 对象，则为 <see cref="T:System.DateTime" />。</returns>
    </member>
    <member name="M:System.DateTime.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.DateTime@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.DateTime.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <param name="s" />
      <param name="provider" />
      <param name="styles" />
      <param name="result" />
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.DateTime@)">
      <summary>将日期和时间的指定字符串表示形式转换为其 <see cref="T:System.DateTime" /> 等效项，并返回一个指示转换是否成功的值。</summary>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <see cref="T:System.DateTime" /> 中包含的日期和时间等效的 <paramref name="s" /> 值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue" />。 如果 <paramref name="s" /> 参数为 <see langword="null" />，是空字符串 ("") 或者不包含日期和时间的有效字符串表示形式，则转换失败。 此参数未经初始化即被传递。</param>
      <returns>如果 <see langword="true" /> 参数成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTime.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>使用指定的区域性特定格式信息和格式设置样式，将日期和时间的指定字符串表示形式转换为其 <see cref="T:System.DateTime" /> 等效项，并返回一个指示转换是否成功的值。</summary>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="styles">枚举值的按位组合，该组合定义如何根据当前时区或当前日期解释已分析日期。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <see cref="T:System.DateTime" /> 中包含的日期和时间等效的 <paramref name="s" /> 值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue" />。 如果 <paramref name="s" /> 参数为 <see langword="null" />，是空字符串 ("") 或者不包含日期和时间的有效字符串表示形式，则转换失败。 此参数未经初始化即被传递。</param>
      <returns>如果 <see langword="true" /> 参数成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
或 
 <paramref name="styles" /> 包含无效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值组合（例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />）。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="provider" /> 是一个非特定区域性，并且不能在分析操作中使用。</exception>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <param name="s" />
      <param name="format" />
      <param name="provider" />
      <param name="style" />
      <param name="result" />
    </member>
    <member name="M:System.DateTime.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <param name="s" />
      <param name="formats" />
      <param name="provider" />
      <param name="style" />
      <param name="result" />
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>使用指定的格式、区域性特定的格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。 字符串表示形式的格式必须与指定的格式完全匹配。 该方法返回一个指示转换是否成功的值。</summary>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <param name="format">所需的 <paramref name="s" /> 格式。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="style">一个或多个枚举值的按位组合，指示 <paramref name="s" /> 允许使用的格式。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <see cref="T:System.DateTime" /> 中包含的日期和时间等效的 <paramref name="s" /> 值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue" />。 如果 <paramref name="s" /> 或 <paramref name="format" /> 参数为 <see langword="null" />，或者为空字符串，或者未包含对应于 <paramref name="format" /> 中指定的模式的日期和时间，则转换失败。 此参数未经初始化即被传递。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
或 
 <paramref name="styles" /> 包含无效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值组合（例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />）。</exception>
    </member>
    <member name="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)">
      <summary>使用指定的格式数组、区域性特定格式信息和样式，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTime" />。 字符串表示形式的格式必须至少与指定的格式之一完全匹配。 该方法返回一个指示转换是否成功的值。</summary>
      <param name="s">包含要转换的日期和时间的字符串。</param>
      <param name="formats">
        <paramref name="s" /> 的允许格式的数组。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式信息。</param>
      <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <see cref="T:System.DateTime" /> 中包含的日期和时间等效的 <paramref name="s" /> 值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue" />。 如果 <paramref name="s" /> 或 <paramref name="formats" /> 为 <see langword="null" />，<paramref name="s" /> 或 <paramref name="formats" /> 的某个元素为空字符串， 或者 <paramref name="s" /> 的格式与 <paramref name="formats" /> 中的格式模式所指定的格式都不完全匹配，则转换失败。 此参数未经初始化即被传递。</param>
      <returns>如果 <see langword="true" /> 参数成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
或 
 <paramref name="styles" /> 包含无效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值组合（例如，<see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />）。</exception>
    </member>
    <member name="F:System.DateTime.UnixEpoch" />
    <member name="P:System.DateTime.UtcNow">
      <summary>获取一个 <see cref="T:System.DateTime" /> 对象，该对象设置为此计算机上的当前日期和时间，表示为协调通用时间 (UTC)。</summary>
      <returns>其值为当前 UTC 日期和时间的对象。</returns>
    </member>
    <member name="P:System.DateTime.Year">
      <summary>获取此实例所表示日期的年份部分。</summary>
      <returns>年份（介于 1 和 9999 之间）。</returns>
    </member>
    <member name="T:System.DateTimeKind">
      <summary>指定 <see cref="T:System.DateTime" /> 对象是表示本地时间、协调通用时间 (UTC)，还是既不指定为本地时间，也不指定为 UTC。</summary>
    </member>
    <member name="F:System.DateTimeKind.Local">
      <summary>表示的时间为本地时间。</summary>
    </member>
    <member name="F:System.DateTimeKind.Unspecified">
      <summary>表示的时间既未指定为本地时间，也未指定为协调通用时间 (UTC)。</summary>
    </member>
    <member name="F:System.DateTimeKind.Utc">
      <summary>表示的时间为 UTC。</summary>
    </member>
    <member name="T:System.DateTimeOffset">
      <summary>表示一个时间点，通常以相对于协调世界时 (UTC) 的日期和时间来表示。</summary>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime)">
      <summary>使用指定的 <see cref="T:System.DateTime" /> 值初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
      <param name="dateTime">日期和时间。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">通过应用偏移量得出的协调世界时 (UTC) 日期和时间早于 <see cref="F:System.DateTimeOffset.MinValue" />。  
或 
通过应用偏移量得出的 UTC 日期和时间晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.DateTime,System.TimeSpan)">
      <summary>使用指定的 <see cref="T:System.DateTime" /> 值和偏移量初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
      <param name="dateTime">日期和时间。</param>
      <param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime.Kind" /> 等于 <see cref="F:System.DateTimeKind.Utc" /> 且 <paramref name="offset" /> 不等于零。  
或 
 <paramref name="dateTime.Kind" /> 等于 <see cref="F:System.DateTimeKind.Local" /> 且 <paramref name="offset" /> 不等于系统的本地时区偏移量。  
或 
 未使用整分钟数指定<paramref name="offset" /> 。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 -14 小时或大于 14 小时。  

或 - 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> 小于 <see cref="F:System.DateTimeOffset.MinValue" /> 或大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.TimeSpan)">
      <summary>用指定日历的指定年、月、日、小时、分钟、秒、毫秒和偏移量初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
      <param name="year">年。</param>
      <param name="month">月（1 到 12）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <param name="hour">小时（0 到 23）。</param>
      <param name="minute">分（0 到 59）。</param>
      <param name="second">秒（0 到 59）。</param>
      <param name="millisecond">毫秒（0 到 999）。</param>
      <param name="calendar">用于解释 <paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 的日历。</param>
      <param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 不表示整分钟数。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> 不能为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于 <paramref name="calendar" /> 参数的 <see langword="MinSupportedDateTime.Year" /> 或大于 <see langword="MaxSupportedDateTime.Year" />。  

或 - 
<paramref name="month" /> 在 <paramref name="calendar" /> 中小于或大于 <paramref name="year" /> 中的月数。  

或 
 <paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。  
或 
 <paramref name="hour" /> 小于 0 或大于 23。  

或 - 
<paramref name="minute" /> 小于 0 或大于 59。  

或 
 <paramref name="second" /> 小于 0 或大于 59。  
或 
 <paramref name="millisecond" /> 小于 0 或大于 999。  

或 - 
<paramref name="offset" /> 小于 -14 小时或大于 14 小时。  

或 
<paramref name="year" />、<paramref name="month" /> 和 <paramref name="day" /> 参数不能表示为日期和时间值。  
或 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> 属性早于 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>使用指定的年、月、日、小时、分钟、秒、毫秒和偏移量初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
      <param name="year">年（1 到 9999）。</param>
      <param name="month">月（1 到 12）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <param name="hour">小时（0 到 23）。</param>
      <param name="minute">分（0 到 59）。</param>
      <param name="second">秒（0 到 59）。</param>
      <param name="millisecond">毫秒（0 到 999）。</param>
      <param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 不表示整分钟数。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于 1 或大于 9999。  
或 
 <paramref name="month" /> 小于 1 或大于 12。  
或 
 <paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。  
或 
 <paramref name="hour" /> 小于 0 或大于 23。  

或 - 
<paramref name="minute" /> 小于 0 或大于 59。  

或 
 <paramref name="second" /> 小于 0 或大于 59。  
或 
 <paramref name="millisecond" /> 小于 0 或大于 999。  

或 - 
<paramref name="offset" /> 小于 -14 或大于 14。  

或 - 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> 属性早于 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
      <summary>使用指定的年、月、日、小时、分钟、秒和偏移量初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
      <param name="year">年（1 到 9999）。</param>
      <param name="month">月（1 到 12）。</param>
      <param name="day">日（1 到 <paramref name="month" /> 中的天数）。</param>
      <param name="hour">小时（0 到 23）。</param>
      <param name="minute">分（0 到 59）。</param>
      <param name="second">秒（0 到 59）。</param>
      <param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 不表示整分钟数。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于 1 或大于 9999。  
或 
 <paramref name="month" /> 小于 1 或大于 12。  
或 
 <paramref name="day" /> 小于 1 或大于 <paramref name="month" /> 中的天数。  
或 
 <paramref name="hour" /> 小于 0 或大于 23。  
或 
 <paramref name="minute" /> 小于 0 或大于 59。  
或 
 <paramref name="second" /> 小于 0 或大于 59。  
或 
 <paramref name="offset" /> 小于 -14 小时或大于 14 小时。  

或 - 
<see cref="P:System.DateTimeOffset.UtcDateTime" /> 属性早于 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.#ctor(System.Int64,System.TimeSpan)">
      <summary>使用指定的计时周期数和偏移量初始化 <see cref="T:System.DateTimeOffset" /> 结构的新实例。</summary>
      <param name="ticks">一个日期和时间，以 0001 年 1 月 1 日午夜 12:00:00 以来所经历的以 100 纳秒为间隔的间隔数来表示。</param>
      <param name="offset">与协调世界时 (UTC) 之间的时间偏移量。</param>
      <exception cref="T:System.ArgumentException">未使用整分钟数指定 <paramref name="offset" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.DateTimeOffset.UtcDateTime" /> 属性早于 <see cref="F:System.DateTimeOffset.MinValue" /> 或晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。  

或 - 
<paramref name="ticks" /> 小于 <see langword="DateTimeOffset.MinValue.Ticks" /> 或大于 <see langword="DateTimeOffset.MaxValue.Ticks" />。  

或 - 
<paramref name="Offset" /> 小于 -14 小时或大于 14 小时。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Add(System.TimeSpan)">
      <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它向此实例的值添加指定的时间间隔。</summary>
      <param name="timeSpan">一个 <see cref="T:System.TimeSpan" /> 对象，表示正时间间隔或负时间间隔。</param>
      <returns>一个对象，其值为当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="timeSpan" /> 所表示的时间间隔之和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  

或 - 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddDays(System.Double)">
      <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它将由整数和小数部分组成的指定天数加到此实例的值上。</summary>
      <param name="days">由整数和小数部分组成的天数。 此数值可以是负数也可以是正数。</param>
      <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="days" /> 所表示的天数之和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  

或 - 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddHours(System.Double)">
      <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它将由整数和小数部分组成的指定小时数添加到此实例的值上。</summary>
      <param name="hours">由整数和小数部分组成的小时数。 此数值可以是负数也可以是正数。</param>
      <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="hours" /> 所表示的小时数之和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
或 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMilliseconds(System.Double)">
      <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它将指定的毫秒数加到此实例的值上。</summary>
      <param name="milliseconds">由整数和小数部分组成的毫秒数。 此数值可以是负数也可以是正数。</param>
      <returns>一个对象，其值为当前 <see cref="T:System.DateTimeOffset" /> 对象表示的时间和日期与 <paramref name="milliseconds" /> 对象表示的整毫秒数之和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
或 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMinutes(System.Double)">
      <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它将由整数和小数部分组成的指定分钟数添加到此实例的值上。</summary>
      <param name="minutes">由整数和小数部分组成的分钟数。 此数值可以是负数也可以是正数。</param>
      <returns>一个对象，其值是当前 <see cref="T:System.DateTimeOffset" /> 对象表示的日期和时间与 <paramref name="minutes" /> 表示的分钟数之和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  

或 - 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddMonths(System.Int32)">
      <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它将指定的月份数加到此实例的值上。</summary>
      <param name="months">整月份数。 此数值可以是负数也可以是正数。</param>
      <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="months" /> 所表示的月份数之和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
或 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddSeconds(System.Double)">
      <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它将由整数和小数部分组成的指定秒数加到此实例的值上。</summary>
      <param name="seconds">由整数和小数部分组成的秒数。 此数值可以是负数也可以是正数。</param>
      <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="seconds" /> 所表示的秒数之和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
或 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddTicks(System.Int64)">
      <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它将指定的计时周期数加到此实例的值上。</summary>
      <param name="ticks">以 100 纳秒为单位的计时周期数。 此数值可以是负数也可以是正数。</param>
      <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="ticks" /> 所表示的计时周期数之和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  

或 - 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.AddYears(System.Int32)">
      <summary>返回一个新的 <see cref="T:System.DateTimeOffset" /> 对象，它将指定的年份数加到此实例的值上。</summary>
      <param name="years">年份数。 此数值可以是负数也可以是正数。</param>
      <returns>一个对象，其值为当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间与 <paramref name="years" /> 所表示的年数之和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
或 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Compare(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>对两个 <see cref="T:System.DateTimeOffset" /> 对象进行比较，并指明第一个对象是早于、等于还是晚于第二个对象。</summary>
      <param name="first">要比较的第一个对象。</param>
      <param name="second">要比较的第二个对象。</param>
      <returns>一个有符号的整数，它表示 <paramref name="first" /> 参数的值是早于、晚于还是等于 <paramref name="second" /> 参数的值，如下表所示。  
  返回值 
  含义 
  小于零 
 <paramref name="first" /> 早于 <paramref name="second" />。  

  零 
 <paramref name="first" /> 等于 <paramref name="second" />。  

  大于零 
 <paramref name="first" /> 晚于 <paramref name="second" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.CompareTo(System.DateTimeOffset)">
      <summary>将当前的 <see cref="T:System.DateTimeOffset" /> 对象与指定的 <see cref="T:System.DateTimeOffset" /> 对象进行比较，并指明当前对象是早于、等于还是晚于另一个 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <param name="other">将与当前的 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。</param>
      <returns>一个有符号的整数，它指明了当前的 <see cref="T:System.DateTimeOffset" /> 对象与 <paramref name="other" /> 之间的关系，如下表所示。  
  返回值 
  说明 
  小于零 
  当前的 <see cref="T:System.DateTimeOffset" /> 对象早于 <paramref name="other" />。  

  零 
  当前的 <see cref="T:System.DateTimeOffset" /> 对象与 <paramref name="other" /> 相同。  

  大于零。  

  当前的 <see cref="T:System.DateTimeOffset" /> 对象晚于 <paramref name="other" />。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Date">
      <summary>获取 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的日期组成部分。</summary>
      <returns>一个 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的日期组成部分。</returns>
    </member>
    <member name="P:System.DateTimeOffset.DateTime">
      <summary>获取 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Day">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的月中的某一天。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的日组成部分，以 1 到 31 之间的一个值来表示。</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfWeek">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的周中的某一天。</summary>
      <returns>用于指示当前 <see cref="T:System.DateTimeOffset" /> 对象的星期几的枚举值之一。</returns>
    </member>
    <member name="P:System.DateTimeOffset.DayOfYear">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的年中的某一天。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的年中的某一天，以 1 到 366 之间的一个值来表示。</returns>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset)">
      <summary>确定当前的 <see cref="T:System.DateTimeOffset" /> 对象是否与指定的 <see cref="T:System.DateTimeOffset" /> 对象表示同一时间点。</summary>
      <param name="other">要与当前 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。</param>
      <returns>如果两个 <see cref="T:System.DateTimeOffset" /> 对象具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>确定两个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否表示同一时间点。</summary>
      <param name="first">要比较的第一个对象。</param>
      <param name="second">要比较的第二个对象。</param>
      <returns>如果这两个 <see cref="T:System.DateTimeOffset" /> 对象具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.Equals(System.Object)">
      <summary>确定 <see cref="T:System.DateTimeOffset" /> 对象是否与指定的对象表示同一时间点。</summary>
      <param name="obj">要与当前 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。</param>
      <returns>如果 <paramref name="obj" /> 参数是 <see cref="T:System.DateTimeOffset" /> 对象，并且与当前的 <see cref="T:System.DateTimeOffset" /> 对象表示同一时间点，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.EqualsExact(System.DateTimeOffset)">
      <summary>确定当前的 <see cref="T:System.DateTimeOffset" /> 对象与指定的 <see cref="T:System.DateTimeOffset" /> 对象是否表示同一时间并且是否具有相同的偏移量。</summary>
      <param name="other">要与当前 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。</param>
      <returns>如果当前的 <see cref="T:System.DateTimeOffset" /> 对象与 <paramref name="other" /> 具有相同的日期和时间值以及相同的 <see cref="P:System.DateTimeOffset.Offset" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.FromFileTime(System.Int64)">
      <summary>将指定的 Windows 文件时间转换为等效的本地时间。</summary>
      <param name="fileTime">以计时周期表示的 Windows 文件时间。</param>
      <returns>一个对象，表示偏移量被设置为本地时间偏移量的 <paramref name="fileTime" /> 的日期和时间。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="filetime" /> 小于零。  

或 - 
<paramref name="filetime" /> 大于 <see langword="DateTimeOffset.MaxValue.Ticks" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.FromUnixTimeMilliseconds(System.Int64)">
      <summary>将表示为从 1970-01-01T00:00:00Z 开始已经过的毫秒数的 Unix 时间转换为 <see cref="T:System.DateTimeOffset" /> 值。</summary>
      <param name="milliseconds">一个 Unix 时间，它表示为从 1970-01-01T00:00:00Z（1970 年 1 月 1 日，UTC 时间上午 12:00）开始已经过的毫秒数。 对于在此日期之前的 Unix 时间，其值为负数。</param>
      <returns>一个日期和时间值，以 Unix 时间表示同一时刻。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="milliseconds" /> 小于 -62,135,596,800,000。  

或 - 
<paramref name="milliseconds" /> 大于 253,402,300,799,999。</exception>
    </member>
    <member name="M:System.DateTimeOffset.FromUnixTimeSeconds(System.Int64)">
      <summary>将表示为从 1970-01-01T00:00:00Z 开始已经过的秒数的 Unix 时间转换为 <see cref="T:System.DateTimeOffset" /> 值。</summary>
      <param name="seconds">一个 Unix 时间，它表示为从 1970-01-01T00:00:00Z（1970 年 1 月 1 日，UTC 时间上午 12:00）开始已经过的秒数。 对于在此日期之前的 Unix 时间，其值为负数。</param>
      <returns>一个日期和时间值，以 Unix 时间表示同一时刻。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="seconds" /> 小于 -62,135,596,800。  
或 
 <paramref name="seconds" /> 大于 253,402,300,799。</exception>
    </member>
    <member name="M:System.DateTimeOffset.GetHashCode">
      <summary>返回当前 <see cref="T:System.DateTimeOffset" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Hour">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的时间的小时组成部分。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的小时组成部分。 此属性使用 24 小时制；值介于 0 到 23 之间。</returns>
    </member>
    <member name="P:System.DateTimeOffset.LocalDateTime">
      <summary>获取 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的本地日期和时间。</summary>
      <returns>当前的 <see cref="T:System.DateTimeOffset" /> 对象的本地日期和时间。</returns>
    </member>
    <member name="F:System.DateTimeOffset.MaxValue">
      <summary>表示 <see cref="T:System.DateTimeOffset" /> 的最大可能值。 此字段为只读。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="F:System.DateTime.MaxValue" /> 位于当前或指定区域性的默认日历的范围之外。</exception>
    </member>
    <member name="P:System.DateTimeOffset.Millisecond">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的时间的毫秒组成部分。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的毫秒组成部分，以 0 到 999 之间的一个整数来表示。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Minute">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的时间的分钟组成部分。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的分钟组成部分，以 0 到 59 之间的一个整数来表示。</returns>
    </member>
    <member name="F:System.DateTimeOffset.MinValue">
      <summary>表示可能的最早 <see cref="T:System.DateTimeOffset" /> 值。 此字段为只读。</summary>
    </member>
    <member name="P:System.DateTimeOffset.Month">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期的月份组成部分。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的月份组成部分，以 1 到 12 之间的一个整数来表示。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Now">
      <summary>获取一个 <see cref="T:System.DateTimeOffset" /> 对象，该对象设置为当前计算机上的当前日期和时间，偏移量设置为本地时间与协调世界时 (UTC) 之间的偏移量。</summary>
      <returns>一个 <see cref="T:System.DateTimeOffset" /> 对象，其日期和时间为当前的本地时间，其偏移量为本地时区与协调世界时 (UTC) 之间的偏移量。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Offset">
      <summary>获取与协调世界时 (UTC) 之间的时间偏移量。</summary>
      <returns>当前的 <see cref="T:System.DateTimeOffset" /> 对象的时间值与协调世界时 (UTC) 之差。</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Addition(System.DateTimeOffset,System.TimeSpan)">
      <summary>将指定的时间间隔与具有指定日期和时间的 <see cref="T:System.DateTimeOffset" /> 对象相加，产生一个具有新的日期和时间的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <param name="dateTimeOffset">要向其加上时间间隔的对象。</param>
      <param name="timeSpan">待添加的时间间隔。</param>
      <returns>一个对象，其值为 <paramref name="dateTimeTz" /> 与 <paramref name="timeSpan" /> 的值之和。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  

或 - 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Equality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>确定两个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否表示同一时间点。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果两个 <see cref="T:System.DateTimeOffset" /> 对象具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>确定一个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否大于（或晚于）另一个指定的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值晚于 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_GreaterThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>确定一个指定的 <see cref="T:System.DateTimeOffset" /> 对象是大于还是等于另一个指定的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值等于或晚于 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Implicit(System.DateTime)~System.DateTimeOffset">
      <summary>定义从 <see cref="T:System.DateTime" /> 对象到 <see cref="T:System.DateTimeOffset" /> 对象的隐式转换。</summary>
      <param name="dateTime">要转换的对象。</param>
      <returns>被转换的对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">通过应用偏移量得出的协调世界时 (UTC) 日期和时间早于 <see cref="F:System.DateTimeOffset.MinValue" />。  

或 - 
通过应用偏移量得出的 UTC 日期和时间晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.op_Inequality(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>确定两个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否表示不同的时间点。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 不具有相同的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThan(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>确定一个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否小于另一个指定的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值早于 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_LessThanOrEqual(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>确定一个指定的 <see cref="T:System.DateTimeOffset" /> 对象是否小于另一个指定的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <paramref name="left" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值早于 <paramref name="right" /> 的 <see cref="P:System.DateTimeOffset.UtcDateTime" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>从一个 <see cref="T:System.DateTimeOffset" /> 对象中减去另一个对象并生成时间间隔。</summary>
      <param name="left">被减数。</param>
      <param name="right">减数。</param>
      <returns>一个表示 <paramref name="left" /> 与 <paramref name="right" /> 之差的对象。</returns>
    </member>
    <member name="M:System.DateTimeOffset.op_Subtraction(System.DateTimeOffset,System.TimeSpan)">
      <summary>从指定的日期和时间减去指定的时间间隔，并生成新的日期和时间。</summary>
      <param name="dateTimeOffset">要从其减去的日期和时间对象。</param>
      <param name="timeSpan">待减去的时间间隔。</param>
      <returns>一个对象，它等于 <paramref name="dateTimeOffset" /> 减 <paramref name="timeSpan" /> 的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" /> 或大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <param name="input" />
      <param name="formatProvider" />
      <param name="styles" />
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String)">
      <summary>将日期、时间和偏移量的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。</summary>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <returns>一个对象，它等效于 <paramref name="input" /> 中包含的日期和时间。</returns>
      <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。  

或 - 
<paramref name="input" /> 包含不带日期或时间的偏移量值的字符串表示形式。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider)">
      <summary>使用指定的特定于区域性的格式信息，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。</summary>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定的格式信息。</param>
      <returns>一个对象，它等效于 <paramref name="input" /> 中包含的日期和时间，由 <paramref name="formatProvider" /> 指定。</returns>
      <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。  
或 
 <paramref name="input" /> 包含不带日期或时间的偏移量值的字符串表示形式。</exception>
    </member>
    <member name="M:System.DateTimeOffset.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的区域性特定格式信息和格式设置样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。</summary>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定的格式信息。</param>
      <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
      <returns>一个对象，它等效于 <paramref name="input" /> 中包含的日期和时间，由 <paramref name="formatProvider" /> 和 <paramref name="styles" /> 指定。</returns>
      <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。  
或 
 <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
或 
 <paramref name="styles" /> 包含不支持的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
或 
 <paramref name="styles" /> 包含不能一起使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。  

或 - 
<paramref name="input" /> 包含不带日期或时间的偏移量值的字符串表示形式。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式、区域性特定的格式信息和样式将表示日期和时间的字符范围转换为其等效的 <see cref="T:System.DateTimeOffset" />。 日期和时间表示形式的格式必须与指定的格式完全匹配。</summary>
      <param name="input">一个表示日期和时间的字符范围。</param>
      <param name="format">包含格式说明符的字符范围，用于定义 <paramref name="input" /> 的预期格式。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
      <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。</param>
      <returns>一个对象，它等效于 <paramref name="input" /> 参数中包含的日期和时间，由 <paramref name="format" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 参数指定。</returns>
      <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。或<paramref name="styles" /> 参数包含不支持的值。或<paramref name="styles" /> 参数包含不能一起使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 是一个空的字符范围。 -或- <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。 -或- <paramref name="format" /> 是一个空的字符范围。 或 <paramref name="input" /> 中的小时组成部分和 AM/PM 指示符不一致。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式、区域性特定的格式信息和样式将包含日期和时间的字符串表示形式的字符范围转换为其等效的 <see cref="T:System.DateTimeOffset" />。 日期和时间表示形式的格式必须与一种指定的格式完全匹配。</summary>
      <param name="input">包含要转换的日期和时间的字符范围。</param>
      <param name="formats">一个由格式说明符组成的数组，格式说明符用于定义 <paramref name="input" /> 的期望格式。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
      <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。</param>
      <returns>一个对象，它等效于 <paramref name="input" /> 参数中包含的日期和时间，由 <paramref name="formats" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 参数指定。</returns>
      <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。-或- <paramref name="styles" /> 包含不支持的值。  

或 -<paramref name="styles" /> 参数包含不能一起使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 是一个空的字符范围。-或- <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。或<paramref name="formats" /> 的元素均不包含有效的格式说明符。  

或 -<paramref name="input" /> 中的小时组成部分和 AM/PM 指示符不一致。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="format">用于定义所需的 <paramref name="input" /> 格式的格式说明符。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
      <returns>一个对象，它等效于 <paramref name="input" /> 中包含的日期和时间，由 <paramref name="format" /> 和 <paramref name="formatProvider" /> 指定。</returns>
      <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。  
或 
 <paramref name="format" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 为空字符串 ("")。  
或 
 <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。  
或 
 <paramref name="format" /> 是一个空字符串。  
或 
<paramref name="input" /> 中的小时组成部分和 AM/PM 指示符不一致。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式、区域性特定的格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="format">用于定义所需的 <paramref name="input" /> 格式的格式说明符。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
      <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。</param>
      <returns>一个对象，它等效于 <paramref name="input" /> 参数中包含的日期和时间，由 <paramref name="format" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 参数指定。</returns>
      <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。  
或 
<paramref name="styles" /> 参数包含不支持的值。  
或 
<paramref name="styles" /> 参数包含不能一起使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。  
或 
 <paramref name="format" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 为空字符串 ("")。  
或 
 <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。  
或 
 <paramref name="format" /> 是一个空字符串。  

或 - 
<paramref name="input" /> 中的小时组成部分和 AM/PM 指示符不一致。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
      <summary>使用指定的格式、区域性特定的格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="formats">一个由格式说明符组成的数组，格式说明符用于定义 <paramref name="input" /> 的期望格式。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
      <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。</param>
      <returns>一个对象，它等效于 <paramref name="input" /> 参数中包含的日期和时间，由 <paramref name="formats" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 参数指定。</returns>
      <exception cref="T:System.ArgumentException">偏移量大于 14 小时或小于 -14 小时。  
或 
 <paramref name="styles" /> 包含不支持的值。  
或 
<paramref name="styles" /> 参数包含不能一起使用的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 为空字符串 ("")。  
或 
 <paramref name="input" /> 不包含日期和时间的有效字符串表示形式。  
或 
<paramref name="formats" /> 的元素均不包含有效的格式说明符。  

或 - 
<paramref name="input" /> 中的小时组成部分和 AM/PM 指示符不一致。</exception>
    </member>
    <member name="P:System.DateTimeOffset.Second">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的时钟时间的秒组成部分。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 对象的秒组成部分，以 0 到 59 之间的一个整数值来表示。</returns>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.DateTimeOffset)">
      <summary>从当前的 <see cref="T:System.DateTimeOffset" /> 对象中减去表示特定日期和时间的 <see cref="T:System.DateTimeOffset" /> 值。</summary>
      <param name="value">一个对象，表示要减去的值。</param>
      <returns>一个对象，指定两个 <see cref="T:System.DateTimeOffset" /> 对象之间的间隔。</returns>
    </member>
    <member name="M:System.DateTimeOffset.Subtract(System.TimeSpan)">
      <summary>从当前的 <see cref="T:System.DateTimeOffset" /> 对象中减去指定的时间间隔。</summary>
      <param name="value">待减去的时间间隔。</param>
      <returns>一个对象，它等于当前的 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期和时间减去 <paramref name="value" /> 所表示的时间间隔。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTimeOffset" /> 值小于 <see cref="F:System.DateTimeOffset.MinValue" />。  
或 
生成的 <see cref="T:System.DateTimeOffset" /> 值大于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
    </member>
    <member name="M:System.DateTimeOffset.System#IComparable#CompareTo(System.Object)">
      <summary>将当前 <see cref="T:System.DateTimeOffset" /> 对象的值与相同类型的另一个对象进行比较。</summary>
      <param name="obj">要与当前 <see cref="T:System.DateTimeOffset" /> 对象进行比较的对象。</param>
      <returns>一个 32 位带符号整数，它指示当前的 <see cref="T:System.DateTimeOffset" /> 对象是小于、等于还是大于 <paramref name="obj" />。 此方法的返回值的说明如下： 
  返回值 
  说明 
  小于零 
  当前的 <see cref="T:System.DateTimeOffset" /> 对象小于（早于）<paramref name="obj" />。  
  零 
  当前的 <see cref="T:System.DateTimeOffset" /> 对象与 <paramref name="obj" /> 相等（表示同一时间点）。  
  大于零 
  当前的 <see cref="T:System.DateTimeOffset" /> 对象大于（晚于）<paramref name="obj" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>在对象的反序列化完成时运行。</summary>
      <param name="sender">启动回调的对象。 当前未实现该参数的功能。</param>
    </member>
    <member name="M:System.DateTimeOffset.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化当前 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象所需的数据来填充 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <param name="info">要填充数据的对象。</param>
      <param name="context">此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext" />）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.DateTimeOffset.Ticks">
      <summary>获取计时周期数，此计时周期数表示时钟时间中当前 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 对象的时钟时间中的计时周期数。</returns>
    </member>
    <member name="P:System.DateTimeOffset.TimeOfDay">
      <summary>获取当前 <see cref="T:System.DateTimeOffset" /> 对象的日时。</summary>
      <returns>表示当前日期自午夜以来的时间间隔。</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToFileTime">
      <summary>将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为 Windows 文件时间。</summary>
      <returns>用 Windows 文件时间来表示的当前 <see cref="T:System.DateTimeOffset" /> 对象的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">所生成的文件时间将表示协调世界时 (UTC) 公元 1601 年 1 月 1 日午夜之前的日期和时间 协调世界时 (UTC)。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToLocalTime">
      <summary>将当前的 <see cref="T:System.DateTimeOffset" /> 对象转换为表示本地时间的 <see cref="T:System.DateTimeOffset" /> 对象。</summary>
      <returns>一个对象，表示当前的 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间，已转换为本地时间。</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToOffset(System.TimeSpan)">
      <summary>将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为偏移量值所指定的日期和时间。</summary>
      <param name="offset">
        <see cref="T:System.DateTimeOffset" /> 值所转换成的偏移量。</param>
      <returns>一个对象，它等于原始的 <see cref="T:System.DateTimeOffset" /> 对象（也就是说，它们的 <see cref="M:System.DateTimeOffset.ToUniversalTime" /> 方法返回的时间点相同），但其 <see cref="P:System.DateTimeOffset.Offset" /> 属性设置为 <paramref name="offset" />。</returns>
      <exception cref="T:System.ArgumentException">所生成的 <see cref="T:System.DateTimeOffset" /> 对象的值 <see cref="P:System.DateTimeOffset.DateTime" /> 值早于 <see cref="F:System.DateTimeOffset.MinValue" />。  

或 - 
所生成的 <see cref="T:System.DateTimeOffset" /> 对象的 <see cref="P:System.DateTimeOffset.DateTime" /> 值晚于 <see cref="F:System.DateTimeOffset.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 -14 小时。  

或 - 
<paramref name="offset" /> 大于 14 小时。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString">
      <summary>将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为其等效的字符串表示形式。</summary>
      <returns>一个 <see cref="T:System.DateTimeOffset" /> 对象的字符串表示形式，并在字符串末尾追加了偏移量。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">此日期和时间超出了当前区域性所用日历支持的日期范围。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>由 <paramref name="formatProvider" /> 指定的当前 <see cref="T:System.DateTimeOffset" /> 对象值的字符串表示形式。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">日期和时间超出了 <paramref name="formatProvider" /> 所用日历支持的日期范围。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String)">
      <summary>使用指定的格式将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <param name="format">一个格式字符串。</param>
      <returns>由 <paramref name="format" /> 指定的当前 <see cref="T:System.DateTimeOffset" /> 对象值的字符串表示形式。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的长度为 1，它不属于为 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 定义的标准格式说明符字符。  
或 
 <paramref name="format" /> 不包含有效的自定义格式模式。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">此日期和时间超出了当前区域性所用日历支持的日期范围。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息将当前 <see cref="T:System.DateTimeOffset" /> 对象的值转换为它的等效字符串表示形式。</summary>
      <param name="format">一个格式字符串。</param>
      <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的长度为 1，它不属于为 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 定义的标准格式说明符字符。  

或 - 
<paramref name="format" /> 不包含有效的自定义格式模式。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">日期和时间超出了 <paramref name="formatProvider" /> 所用日历支持的日期范围。</exception>
    </member>
    <member name="M:System.DateTimeOffset.ToUniversalTime">
      <summary>将当前的 <see cref="T:System.DateTimeOffset" /> 对象转换为一个表示协调世界时 (UTC) 的 <see cref="T:System.DateTimeOffset" /> 值。</summary>
      <returns>一个对象，它表示转换为协调世界时 (UTC) 的当前 <see cref="T:System.DateTimeOffset" /> 对象的日期和时间。</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToUnixTimeMilliseconds">
      <summary>返回自 1970-01-01T00:00:00.000Z 起已经过的毫秒数。</summary>
      <returns>自 1970-01-01T00:00:00.000Z 起已经过的毫秒数。</returns>
    </member>
    <member name="M:System.DateTimeOffset.ToUnixTimeSeconds">
      <summary>返回自 1970-01-01T00:00:00.00Z 起已经过的秒数。</summary>
      <returns>自 1970-01-01T00:00:00.00Z 起已经过的秒数。</returns>
    </member>
    <member name="M:System.DateTimeOffset.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="formatProvider" />
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.DateTimeOffset@)">
      <param name="input" />
      <param name="result" />
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <param name="input" />
      <param name="formatProvider" />
      <param name="styles" />
      <param name="result" />
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.DateTimeOffset@)">
      <summary>尝试将日期和时间的指定字符串表示形式转换为它的等效 <see cref="T:System.DateTimeOffset" />，并返回一个指示转换是否成功的值。</summary>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" />；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 参数为 <see langword="null" />，或者不包含日期和时间的有效字符串表示形式，则转换失败。 此参数未经初始化即被传递。</param>
      <returns>如果 <paramref name="input" /> 参数成功转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.DateTimeOffset.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>尝试将日期和时间的指定字符串表示形式转换为其等效 <see cref="T:System.DateTimeOffset" />，并返回一个指示转换是否成功的值。</summary>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
      <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" />；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 参数为 <see langword="null" />，或者不包含日期和时间的有效字符串表示形式，则转换失败。 此参数未经初始化即被传递。</param>
      <returns>如果 <paramref name="input" /> 参数成功转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包括未定义的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  

或 - 
不支持 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。  

或 - 
<paramref name="styles" /> 包括互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>使用指定的格式、区域性特定的格式信息和样式将字符范围中的日期和时间的表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 日期和时间表示形式的格式必须与指定的格式完全匹配。</summary>
      <param name="input">包含要转换的日期和时间表示形式的字符范围。</param>
      <param name="format">用于定义所需的 <paramref name="input" /> 格式的格式说明符。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
      <param name="styles">枚举值的一个按位组合，指示 <paramref name="input" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" /></param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" />；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue" />。 如果出现以下情况，转换将失败</param>
      <returns>如果 <paramref name="input" /> 参数成功转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包括未定义的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。-或- <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> 不受支持。-或- <paramref name="styles" /> 包括相互排斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <param name="input" />
      <param name="formats" />
      <param name="formatProvider" />
      <param name="styles" />
      <param name="result" />
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包括未定义的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。-或- <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" /> 不受支持。-或- <paramref name="styles" /> 包括相互排斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>使用指定的格式、区域性特定的格式信息和样式将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="format">用于定义所需的 <paramref name="input" /> 格式的格式说明符。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
      <param name="styles">枚举值的一个按位组合，指示输入所允许的格式。 要指定的一个典型值为 <see langword="None" />。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" />；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 参数为 <see langword="null" />，或者不包含 <paramref name="format" /> 和 <c>provider</c> 所定义的所需格式的日期和时间的有效字符串表示形式，则转换失败。 此参数未经初始化即被传递。</param>
      <returns>如果 <paramref name="input" /> 参数成功转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包括未定义的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
或 
 不支持 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。  
或 
 <paramref name="styles" /> 包括互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
    </member>
    <member name="M:System.DateTimeOffset.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTimeOffset@)">
      <summary>使用指定的格式数组、区域性特定格式信息和样式，将日期和时间的指定字符串表示形式转换为其等效的 <see cref="T:System.DateTimeOffset" />。 字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
      <param name="input">包含要转换的日期和时间的字符串。</param>
      <param name="formats">一个用于定义 <paramref name="input" /> 的所需格式的数组。</param>
      <param name="formatProvider">一个对象，提供有关 <paramref name="input" /> 的区域性特定格式设置信息。</param>
      <param name="styles">枚举值的一个按位组合，指示输入所允许的格式。 要指定的一个典型值为 <see langword="None" />。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 的日期和时间等效的 <see cref="T:System.DateTimeOffset" />；如果转换失败，则包含 <see cref="F:System.DateTimeOffset.MinValue" />。 如果 <paramref name="input" /> 不包含日期和时间的有效字符串表示形式，或者不包含 <paramref name="format" /> 所定义的所需格式的日期和时间，或者 <paramref name="formats" /> 为 <see langword="null" />，则转换失败。 此参数未经初始化即被传递。</param>
      <returns>如果 <paramref name="input" /> 参数成功转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 包括未定义的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。  
或 
 不支持 <see cref="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault" />。  

或 - 
<paramref name="styles" /> 包括互斥的 <see cref="T:System.Globalization.DateTimeStyles" /> 值。</exception>
    </member>
    <member name="F:System.DateTimeOffset.UnixEpoch" />
    <member name="P:System.DateTimeOffset.UtcDateTime">
      <summary>获取一个 <see cref="T:System.DateTime" /> 值，该值表示当前 <see cref="T:System.DateTimeOffset" /> 对象的协调世界时 (UTC) 日期和时间。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的协调世界时 (UTC) 日期和时间。</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcNow">
      <summary>获取一个 <see cref="T:System.DateTimeOffset" /> 对象，其日期和时间设置为当前的协调世界时 (UTC) 日期和时间，其偏移量为 <see cref="F:System.TimeSpan.Zero" />。</summary>
      <returns>一个对象，其日期和时间为当前的协调世界时 (UTC)，其偏移量为 <see cref="F:System.TimeSpan.Zero" />。</returns>
    </member>
    <member name="P:System.DateTimeOffset.UtcTicks">
      <summary>获取表示当前 <see cref="T:System.DateTimeOffset" /> 对象的协调世界时 (UTC) 日期和时间的计时周期数。</summary>
      <returns>
        <see cref="T:System.DateTimeOffset" /> 对象的协调世界时 (UTC) 中的计时周期数。</returns>
    </member>
    <member name="P:System.DateTimeOffset.Year">
      <summary>获取由当前 <see cref="T:System.DateTimeOffset" /> 对象所表示的日期的年份组成部分。</summary>
      <returns>当前 <see cref="T:System.DateTimeOffset" /> 对象的年份组成部分，以 0 到 9999 之间的一个整数值来表示。</returns>
    </member>
    <member name="T:System.DayOfWeek">
      <summary>指定一周的某天。</summary>
    </member>
    <member name="F:System.DayOfWeek.Friday">
      <summary>表示星期五。</summary>
    </member>
    <member name="F:System.DayOfWeek.Monday">
      <summary>表示星期一。</summary>
    </member>
    <member name="F:System.DayOfWeek.Saturday">
      <summary>表示星期六。</summary>
    </member>
    <member name="F:System.DayOfWeek.Sunday">
      <summary>表示星期日。</summary>
    </member>
    <member name="F:System.DayOfWeek.Thursday">
      <summary>表示星期四。</summary>
    </member>
    <member name="F:System.DayOfWeek.Tuesday">
      <summary>表示星期二。</summary>
    </member>
    <member name="F:System.DayOfWeek.Wednesday">
      <summary>表示星期三。</summary>
    </member>
    <member name="T:System.DBNull">
      <summary>表示不存在的值。 此类不能被继承。</summary>
    </member>
    <member name="M:System.DBNull.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口并返回序列化 <see cref="T:System.DBNull" /> 对象所需的数据。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，包含序列化 <see cref="T:System.DBNull" /> 对象所需的信息。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含与 <see cref="T:System.DBNull" /> 对象关联的已序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.DBNull.GetTypeCode">
      <summary>获取 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.DBNull" /> 值。</summary>
      <returns>
        <see cref="T:System.TypeCode" />（为 <see cref="T:System.DBNull" />）的 <see cref="F:System.TypeCode.DBNull" /> 值。</returns>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>不支持此转换。 如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>无。 未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>不支持此转换。 如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>无。 未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支持此转换。 如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>无。 未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。 如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>无。 未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>不支持此转换。 如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>无。 未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>不支持此转换。 如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>无。 未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>不支持此转换。 如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>无。 未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>不支持此转换。 如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>无。 未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>不支持此转换。 如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>无。 未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>不支持此转换。 如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>无。 未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>不支持此转换。 如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>无。 未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>将当前的 <see cref="T:System.DBNull" /> 对象转换为指定类型。</summary>
      <param name="type">当前的 <see cref="T:System.DBNull" /> 对象要转换为的类型。</param>
      <param name="provider">用于实现 <see cref="T:System.IFormatProvider" /> 接口和增强转换的对象。 如果指定了 <see langword="null" />，则从当前区域获得格式信息。</param>
      <returns>如果支持这种转换，则返回当前 <see cref="T:System.DBNull" /> 对象的等效装箱项；否则将引发异常，并且不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 类型不支持此转换。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>不支持此转换。 如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>无。 未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>不支持此转换。 如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>无。 未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>不支持此转换。 如果尝试执行此转换，便会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">一个实现 <see cref="T:System.IFormatProvider" /> 接口的对象。 （未使用此参数；指定 <see langword="null" />。）</param>
      <returns>无。 未使用此成员的返回值。</returns>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.DBNull" /> 类型不支持此转换。</exception>
    </member>
    <member name="M:System.DBNull.ToString">
      <summary>返回空字符串（<see cref="F:System.String.Empty" />）。</summary>
      <returns>空字符串（<see cref="F:System.String.Empty" />）。</returns>
    </member>
    <member name="M:System.DBNull.ToString(System.IFormatProvider)">
      <summary>使用指定的 <see cref="T:System.IFormatProvider" /> 返回空字符串。</summary>
      <param name="provider">用于格式化返回值的 <see cref="T:System.IFormatProvider" />。  
或 
 从操作系统的当前区域设置中获取格式信息的 <see langword="null" />。</param>
      <returns>空字符串（<see cref="F:System.String.Empty" />）。</returns>
    </member>
    <member name="F:System.DBNull.Value">
      <summary>表示 <see cref="T:System.DBNull" /> 类的唯一实例。</summary>
    </member>
    <member name="T:System.Decimal">
      <summary>表示十进制浮点数。</summary>
    </member>
    <member name="M:System.Decimal.#ctor(System.Double)">
      <summary>将 <see cref="T:System.Decimal" /> 的新实例初始化为指定的双精度浮点数的值。</summary>
      <param name="value">要表示为 <see cref="T:System.Decimal" /> 的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Decimal.MaxValue" /> 或小于 <see cref="F:System.Decimal.MinValue" />。  
或 
 <paramref name="value" /> 为 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />。</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32)">
      <summary>将 <see cref="T:System.Decimal" /> 的新实例初始化为指定的 32 位有符号整数的值。</summary>
      <param name="value">要表示为 <see cref="T:System.Decimal" /> 的值。</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean,System.Byte)">
      <summary>用指定实例构成部分的参数来初始化 <see cref="T:System.Decimal" /> 的新实例。</summary>
      <param name="lo">96 位整数的低 32 位。</param>
      <param name="mid">96 位整数的中间 32 位。</param>
      <param name="hi">96 位整数的高 32 位。</param>
      <param name="isNegative">若要指示负数，则为 <see langword="true" />；若要指示正数，则为 <see langword="false" />。</param>
      <param name="scale">10 的指数（0 到 28 之间）。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scale" /> 大于 28。</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int32[])">
      <summary>将 <see cref="T:System.Decimal" /> 的新实例初始化为以二进制表示的、包含在指定数组中的十进制值。</summary>
      <param name="bits">包含十进制值表示形式的 32 位有符号整数的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bits" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bits" /> 的长度不为 4。  

或 - 
<paramref name="bits" /> 中的十进制值的表示形式无效。</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.Int64)">
      <summary>将 <see cref="T:System.Decimal" /> 的新实例初始化为指定的 64 位有符号整数的值。</summary>
      <param name="value">要表示为 <see cref="T:System.Decimal" /> 的值。</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.Single)">
      <summary>将 <see cref="T:System.Decimal" /> 的新实例初始化为指定的单精度浮点数的值。</summary>
      <param name="value">要表示为 <see cref="T:System.Decimal" /> 的值。</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Decimal.MaxValue" /> 或小于 <see cref="F:System.Decimal.MinValue" />。  
或 
 <paramref name="value" /> 为 <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />。</exception>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt32)">
      <summary>将 <see cref="T:System.Decimal" /> 的新实例初始化为指定的 32 位无符号整数的值。</summary>
      <param name="value">要表示为 <see cref="T:System.Decimal" /> 的值。</param>
    </member>
    <member name="M:System.Decimal.#ctor(System.UInt64)">
      <summary>将 <see cref="T:System.Decimal" /> 的新实例初始化为指定的 64 位无符号整数的值。</summary>
      <param name="value">要表示为 <see cref="T:System.Decimal" /> 的值。</param>
    </member>
    <member name="M:System.Decimal.Add(System.Decimal,System.Decimal)">
      <summary>将两个指定的 <see cref="T:System.Decimal" /> 值相加。</summary>
      <param name="d1">要相加的第一个值。</param>
      <param name="d2">要相加的第二个值。</param>
      <returns>
        <paramref name="d1" /> 与 <paramref name="d2" /> 的和。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="d1" /> 与 <paramref name="d2" /> 的和小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.Ceiling(System.Decimal)">
      <summary>返回大于或等于指定的十进制数的最小整数值。</summary>
      <param name="d">十进制数。</param>
      <returns>大于或等于 <paramref name="d" /> 参数的最小整数值。 请注意，此方法返回 <see cref="T:System.Decimal" />，而不是整数类型。</returns>
    </member>
    <member name="M:System.Decimal.Compare(System.Decimal,System.Decimal)">
      <summary>比较两个指定的 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="d1">要比较的第一个值。</param>
      <param name="d2">要比较的第二个值。</param>
      <returns>有符号数字，指示 <paramref name="d1" /> 和 <paramref name="d2" /> 的相对值。  
  返回值 
  含义 
  小于零 
 <paramref name="d1" /> 小于 <paramref name="d2" />。  

  零 
 <paramref name="d1" /> 与 <paramref name="d2" /> 相等。  

  大于零 
 <paramref name="d1" /> 大于 <paramref name="d2" />。</returns>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Decimal)">
      <summary>将此实例与指定的 <see cref="T:System.Decimal" /> 对象进行比较并返回一个对二者的相对值的比较。</summary>
      <param name="value">与该实例进行比较的对象。</param>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。  
  返回值 
  含义 
  小于零 
  此实例小于 <paramref name="value" />。  

  零 
  此实例等于 <paramref name="value" />。  

  大于零 
  此实例大于 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Decimal.CompareTo(System.Object)">
      <summary>将此实例与指定对象进行比较并返回一个对二者的相对值的比较。</summary>
      <param name="value">要与此实例进行比较的对象，或 <see langword="null" />。</param>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。  
  返回值 
  含义 
  小于零 
  此实例小于 <paramref name="value" />。  

  零 
  此实例等于 <paramref name="value" />。  

  大于零 
  此实例大于 <paramref name="value" />。  

或 
 <paramref name="value" /> 为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Decimal" />。</exception>
    </member>
    <member name="M:System.Decimal.Divide(System.Decimal,System.Decimal)">
      <summary>将两个指定的 <see cref="T:System.Decimal" /> 值相除。</summary>
      <param name="d1">被除数。</param>
      <param name="d2">除数。</param>
      <returns>
        <paramref name="d1" /> 除以 <paramref name="d2" /> 的结果。</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> 为零。</exception>
      <exception cref="T:System.OverflowException">返回值（即：商）小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal)">
      <summary>返回一个值，该值指示此实例和指定的 <see cref="T:System.Decimal" /> 对象是否表示相同的值。</summary>
      <param name="value">要与此实例进行比较的对象。</param>
      <returns>如果 <see langword="true" /> 与此实例相等，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Decimal.Equals(System.Decimal,System.Decimal)">
      <summary>返回一个值，该值指示 <see cref="T:System.Decimal" /> 的两个指定实例是否表示同一个值。</summary>
      <param name="d1">要比较的第一个值。</param>
      <param name="d2">要比较的第二个值。</param>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Decimal.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例和指定的 <see cref="T:System.Object" /> 是否表示相同的类型和值。</summary>
      <param name="value">与该实例进行比较的对象。</param>
      <returns>如果 <paramref name="value" /> 是一个 <see cref="T:System.Decimal" /> 且与此实例相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Decimal.Floor(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 数字向负无穷方向舍入为最接近的整数。</summary>
      <param name="d">要舍入的值。</param>
      <returns>如果 <paramref name="d" /> 有小数部分，则为负无穷方向上小于 <paramref name="d" /> 的下一个整 <see cref="T:System.Decimal" /> 数字。  
或 
如果 <paramref name="d" /> 没有小数部分，则 <paramref name="d" /> 原样返回。 请注意，该方法将返回 <see cref="T:System.Decimal" /> 类型的整数值。</returns>
    </member>
    <member name="M:System.Decimal.FromOACurrency(System.Int64)">
      <summary>将指定的 64 位有符号整数（它包含 OLE 自动化货币值）转换为等效的 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="cy">一个 OLE 自动化货币值。</param>
      <returns>包含 <paramref name="cy" /> 的等效数的 <see cref="T:System.Decimal" />。</returns>
    </member>
    <member name="M:System.Decimal.GetBits(System.Decimal)">
      <summary>将 <see cref="T:System.Decimal" /> 的指定实例的值转换为其等效的二进制表示形式。</summary>
      <param name="d">要转换的值。</param>
      <returns>包含 <paramref name="d" /> 二进制表示形式、由四个元素组成的 32 位有符号整数数组。</returns>
    </member>
    <member name="M:System.Decimal.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Decimal.GetTypeCode">
      <summary>返回值类型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.Decimal" />。</summary>
      <returns>枚举常数 <see cref="F:System.TypeCode.Decimal" />。</returns>
    </member>
    <member name="F:System.Decimal.MaxValue">
      <summary>表示 <see cref="T:System.Decimal" /> 的最大可能值。 该字段是常数且为只读。</summary>
    </member>
    <member name="F:System.Decimal.MinusOne">
      <summary>表示数字负一 (-1)。</summary>
    </member>
    <member name="F:System.Decimal.MinValue">
      <summary>表示 <see cref="T:System.Decimal" /> 的最小可能值。 该字段是常数且为只读。</summary>
    </member>
    <member name="M:System.Decimal.Multiply(System.Decimal,System.Decimal)">
      <summary>两个指定的 <see cref="T:System.Decimal" /> 值相乘。</summary>
      <param name="d1">被乘数。</param>
      <param name="d2">乘数。</param>
      <returns>
        <paramref name="d1" /> 与 <paramref name="d2" /> 相乘的结果。</returns>
      <exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.Negate(System.Decimal)">
      <summary>返回指定的 <see cref="T:System.Decimal" /> 值乘以 -1 的结果。</summary>
      <param name="d">要求反的值。</param>
      <returns>具有 <paramref name="d" /> 的值，但符号相反的十进制数。  
或 
如果 <paramref name="d" /> 为零，则为零。</returns>
    </member>
    <member name="F:System.Decimal.One">
      <summary>表示数字一 (1)。</summary>
    </member>
    <member name="M:System.Decimal.op_Addition(System.Decimal,System.Decimal)">
      <summary>将两个指定的 <see cref="T:System.Decimal" /> 值相加。</summary>
      <param name="d1">要相加的第一个值。</param>
      <param name="d2">要相加的第二个值。</param>
      <returns>
        <paramref name="d1" /> 与 <paramref name="d2" /> 相加的结果。</returns>
      <exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Decrement(System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" /> 操作数减 1。</summary>
      <param name="d">要递减的值。</param>
      <returns>
        <paramref name="d" /> 减 1 所得的值。</returns>
      <exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Division(System.Decimal,System.Decimal)">
      <summary>将两个指定的 <see cref="T:System.Decimal" /> 值相除。</summary>
      <param name="d1">被除数。</param>
      <param name="d2">除数。</param>
      <returns>
        <paramref name="d1" /> 除以 <paramref name="d2" /> 的结果。</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> 为零。</exception>
      <exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Equality(System.Decimal,System.Decimal)">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Decimal" /> 值是否相等。</summary>
      <param name="d1">要比较的第一个值。</param>
      <param name="d2">要比较的第二个值。</param>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Byte">
      <summary>定义从 <see cref="T:System.Decimal" /> 到 8 位无符号整数的显式转换。</summary>
      <param name="value">要转换的值。</param>
      <returns>8 位无符号整数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Char">
      <summary>定义从 Unicode 字符到 <see cref="T:System.Decimal" /> 的显式转换。</summary>
      <param name="value">要转换的值。</param>
      <returns>表示转换后的 <see cref="T:System.Decimal" /> 的 Unicode 字符。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Char.MinValue" /> 或大于 <see cref="F:System.Char.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Double">
      <summary>定义从 <see cref="T:System.Decimal" /> 到双精度浮点数的显式转换。</summary>
      <param name="value">要转换的值。</param>
      <returns>双精度浮点数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int16">
      <summary>定义从 <see cref="T:System.Decimal" /> 到 16 位有符号整数的显式转换。</summary>
      <param name="value">要转换的值。</param>
      <returns>16 位有符号整数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int32">
      <summary>定义从 <see cref="T:System.Decimal" /> 到 32 位有符号整数的显式转换。</summary>
      <param name="value">要转换的值。</param>
      <returns>32 位有符号整数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Int64">
      <summary>定义从 <see cref="T:System.Decimal" /> 到 64 位有符号整数的显式转换。</summary>
      <param name="value">要转换的值。</param>
      <returns>64 位有符号整数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.SByte">
      <summary>定义从 <see cref="T:System.Decimal" /> 到 8 位有符号整数的显式转换。  
此 API 不兼容 CLS。</summary>
      <param name="value">要转换的值。</param>
      <returns>8 位有符号整数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.Single">
      <summary>定义从 <see cref="T:System.Decimal" /> 到单精度浮点数的显式转换。</summary>
      <param name="value">要转换的值。</param>
      <returns>单精度浮点数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt16">
      <summary>定义从 <see cref="T:System.Decimal" /> 到 16 位无符号整数的显式转换。  
此 API 不兼容 CLS。</summary>
      <param name="value">要转换的值。</param>
      <returns>16 位无符号整数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt32">
      <summary>定义从 <see cref="T:System.Decimal" /> 到 32 位无符号整数的显式转换。  
此 API 不兼容 CLS。</summary>
      <param name="value">要转换的值。</param>
      <returns>32 位无符号整数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Decimal)~System.UInt64">
      <summary>定义从 <see cref="T:System.Decimal" /> 到 64 位无符号整数的显式转换。  
此 API 不兼容 CLS。</summary>
      <param name="value">要转换的值。</param>
      <returns>64 位无符号整数，它表示转换后的 <see cref="T:System.Decimal" />。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 为负数或大于 <see cref="F:System.UInt64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Double)~System.Decimal">
      <summary>定义从双精度浮点数到 <see cref="T:System.Decimal" /> 的显式转换。</summary>
      <param name="value">要转换的双精度浮点数。</param>
      <returns>已转换的双精度浮点数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Decimal.MaxValue" /> 或小于 <see cref="F:System.Decimal.MinValue" />。  
或 
 <paramref name="value" /> 为 <see cref="F:System.Double.NaN" />、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Explicit(System.Single)~System.Decimal">
      <summary>定义从单精度浮点数到 <see cref="T:System.Decimal" /> 的显式转换。</summary>
      <param name="value">要转换的单精度浮点数。</param>
      <returns>已转换的单精度浮点数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.Decimal.MaxValue" /> 或小于 <see cref="F:System.Decimal.MinValue" />。  
或 
 <paramref name="value" /> 为 <see cref="F:System.Single.NaN" />、<see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />。</exception>
    </member>
    <member name="M:System.Decimal.op_GreaterThan(System.Decimal,System.Decimal)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Decimal" /> 是否大于另一个指定的 <see cref="T:System.Decimal" />。</summary>
      <param name="d1">要比较的第一个值。</param>
      <param name="d2">要比较的第二个值。</param>
      <returns>如果 <see langword="true" /> 大于 <paramref name="d1" />，则为 <paramref name="d2" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Decimal.op_GreaterThanOrEqual(System.Decimal,System.Decimal)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Decimal" /> 是否大于等于另一个指定的 <see cref="T:System.Decimal" />。</summary>
      <param name="d1">要比较的第一个值。</param>
      <param name="d2">要比较的第二个值。</param>
      <returns>如果 <paramref name="d1" /> 大于等于 <paramref name="d2" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Byte)~System.Decimal">
      <summary>定义从 8 位无符号整数到 <see cref="T:System.Decimal" /> 的隐式转换。</summary>
      <param name="value">要转换的 8 位无符号整数。</param>
      <returns>已转换的 8 位无符号整数。</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Char)~System.Decimal">
      <summary>定义从 Unicode 字符到 <see cref="T:System.Decimal" /> 的隐式转换。</summary>
      <param name="value">要转换的 Unicode 字符。</param>
      <returns>转换后的 Unicode 字符。</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int16)~System.Decimal">
      <summary>定义从 16 位有符号整数到 <see cref="T:System.Decimal" /> 的隐式转换。</summary>
      <param name="value">要转换的 16 位带符号整数。</param>
      <returns>转换后的 16 位有符号整数。</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int32)~System.Decimal">
      <summary>定义从 32 位有符号整数到 <see cref="T:System.Decimal" /> 的隐式转换。</summary>
      <param name="value">要转换的 32 位带符号整数。</param>
      <returns>转换后的 32 位有符号整数。</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.Int64)~System.Decimal">
      <summary>定义从 64 位有符号整数到 <see cref="T:System.Decimal" /> 的隐式转换。</summary>
      <param name="value">要转换的 64 位带符号整数。</param>
      <returns>转换后的 64 位有符号整数。</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.SByte)~System.Decimal">
      <summary>定义从 8 位有符号整数到 <see cref="T:System.Decimal" /> 值的隐式转换。  
此 API 不兼容 CLS。</summary>
      <param name="value">要转换的 8 位带符号整数。</param>
      <returns>转换后的 8 位有符号整数。</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt16)~System.Decimal">
      <summary>定义从 16 位无符号整数到 <see cref="T:System.Decimal" /> 的隐式转换。  
此 API 不兼容 CLS。</summary>
      <param name="value">要转换的 16 位无符号整数。</param>
      <returns>已转换的 16 位无符号整数。</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt32)~System.Decimal">
      <summary>定义从 32 位无符号整数到 <see cref="T:System.Decimal" /> 的隐式转换。  
此 API 不兼容 CLS。</summary>
      <param name="value">要转换的 32 位无符号整数。</param>
      <returns>已转换的 32 位无符号整数。</returns>
    </member>
    <member name="M:System.Decimal.op_Implicit(System.UInt64)~System.Decimal">
      <summary>定义从 64 位无符号整数到 <see cref="T:System.Decimal" /> 的隐式转换。  
此 API 不兼容 CLS。</summary>
      <param name="value">要转换的 64 位无符号整数。</param>
      <returns>已转换的 64 位无符号整数。</returns>
    </member>
    <member name="M:System.Decimal.op_Increment(System.Decimal)">
      <summary>将 <see cref="T:System.Decimal" /> 操作数增加 1。</summary>
      <param name="d">要递增的值。</param>
      <returns>
        <paramref name="d" /> 增加 1 后的值。</returns>
      <exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Inequality(System.Decimal,System.Decimal)">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Decimal" /> 对象是否具有不同的值。</summary>
      <param name="d1">要比较的第一个值。</param>
      <param name="d2">要比较的第二个值。</param>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Decimal.op_LessThan(System.Decimal,System.Decimal)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Decimal" /> 是否小于另一个指定的 <see cref="T:System.Decimal" />。</summary>
      <param name="d1">要比较的第一个值。</param>
      <param name="d2">要比较的第二个值。</param>
      <returns>如果 <paramref name="d1" /> 小于 <paramref name="d2" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Decimal.op_LessThanOrEqual(System.Decimal,System.Decimal)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Decimal" /> 是小于还是等于另一个指定的 <see cref="T:System.Decimal" />。</summary>
      <param name="d1">要比较的第一个值。</param>
      <param name="d2">要比较的第二个值。</param>
      <returns>如果 <paramref name="d1" /> 小于等于 <paramref name="d2" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Decimal.op_Modulus(System.Decimal,System.Decimal)">
      <summary>返回两个指定 <see cref="T:System.Decimal" /> 值相除所得的余数。</summary>
      <param name="d1">被除数。</param>
      <param name="d2">除数。</param>
      <returns>该余数是由 <paramref name="d1" /> 除以 <paramref name="d2" /> 所得。</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> 为 <see langword="zero" />。</exception>
      <exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Multiply(System.Decimal,System.Decimal)">
      <summary>两个指定的 <see cref="T:System.Decimal" /> 值相乘。</summary>
      <param name="d1">要相乘的第一个值。</param>
      <param name="d2">要相乘的第二个值。</param>
      <returns>
        <paramref name="d1" /> 与 <paramref name="d2" /> 相乘的结果。</returns>
      <exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_Subtraction(System.Decimal,System.Decimal)">
      <summary>将两个指定的 <see cref="T:System.Decimal" /> 值相减。</summary>
      <param name="d1">被减数。</param>
      <param name="d2">减数。</param>
      <returns>
        <paramref name="d2" /> 减 <paramref name="d1" /> 所得的结果。</returns>
      <exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.op_UnaryNegation(System.Decimal)">
      <summary>对指定 <see cref="T:System.Decimal" /> 操作数的值求反。</summary>
      <param name="d">要求反的值。</param>
      <returns>
        <paramref name="d" /> 乘以负一 (-1) 的结果。</returns>
    </member>
    <member name="M:System.Decimal.op_UnaryPlus(System.Decimal)">
      <summary>返回 <see cref="T:System.Decimal" /> 操作数的值（操作数符号不变）。</summary>
      <param name="d">要返回的操作数。</param>
      <returns>操作数 <paramref name="d" /> 的值。</returns>
    </member>
    <member name="M:System.Decimal.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.Decimal.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 <see cref="T:System.Decimal" /> 表示形式。</summary>
      <param name="s">要转换的数字的字符串表示形式。</param>
      <returns>
        <paramref name="s" /> 中包含的数字的等效值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 <see cref="T:System.Decimal" />。</summary>
      <param name="s">要转换的数字的字符串表示形式。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的按位组合，指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Number" />。</param>
      <returns>
        <see cref="T:System.Decimal" /> 数，它与 <paramref name="s" /> 所指定的 <paramref name="style" /> 中包含的数字等效。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
或 
 <paramref name="style" /> 是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字</exception>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>使用指定样式和区域性特定格式将数字的字符串表示形式转换为其 <see cref="T:System.Decimal" /> 等效项。</summary>
      <param name="s">要转换的数字的字符串表示形式。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的按位组合，指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Number" />。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 对象，用于提供有关 <paramref name="s" /> 格式的区域性特定信息。</param>
      <returns>
        <see cref="T:System.Decimal" /> 数，它与 <paramref name="style" /> 和 <paramref name="provider" /> 所指定的 <paramref name="s" /> 中包含的数字等效。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  

或 - 
<paramref name="style" /> 是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
    </member>
    <member name="M:System.Decimal.Parse(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息将数字的字符串表示形式转换为其 <see cref="T:System.Decimal" /> 等效项。</summary>
      <param name="s">要转换的数字的字符串表示形式。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" />，它提供有关 <paramref name="s" /> 的区域性特定分析信息。</param>
      <returns>
        <see cref="T:System.Decimal" /> 数，它与 <paramref name="s" /> 所指定的 <paramref name="provider" /> 中包含的数字等效。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Decimal.Remainder(System.Decimal,System.Decimal)">
      <summary>计算两个 <see cref="T:System.Decimal" /> 值相除后的余数。</summary>
      <param name="d1">被除数。</param>
      <param name="d2">除数。</param>
      <returns>将 <paramref name="d1" /> 除以 <paramref name="d2" /> 后的余数。</returns>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="d2" /> 为零。</exception>
      <exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.Round(System.Decimal)">
      <summary>将小数值舍入到最接近的整数。</summary>
      <param name="d">要舍入的小数。</param>
      <returns>最接近 <paramref name="d" /> 参数的整数。 如果 <paramref name="d" /> 正好处于两个整数中间，其中一个整数为偶数，另一个整数为奇数，则返回偶数。</returns>
      <exception cref="T:System.OverflowException">结果在 <see cref="T:System.Decimal" /> 值范围之外。</exception>
    </member>
    <member name="M:System.Decimal.Round(System.Decimal,System.Int32)">
      <summary>将 <see cref="T:System.Decimal" /> 值舍入到指定的小数位数。</summary>
      <param name="d">要舍入的小数。</param>
      <param name="decimals">指定数字要舍入到的小数位数的值，范围从 0 到 28。</param>
      <returns>舍入到 <paramref name="d" /> 的小数位数等于 <paramref name="decimals" /> 的小数位数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> 不是一个介于 0 到 28 的值。</exception>
    </member>
    <member name="M:System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)">
      <summary>将小数值舍入到指定精度。 一个参数，指定当一个值正好处于另两个数中间时如何舍入这个值。</summary>
      <param name="d">要舍入的小数。</param>
      <param name="decimals">返回值中的有效小数位数（精度）。</param>
      <param name="mode">一个值，指定当 <paramref name="d" /> 正好处于另两个数字中间时如何舍入。</param>
      <returns>最接近 <paramref name="d" /> 参数的数字，其精度等于 <paramref name="decimals" /> 参数。 如果 <paramref name="d" /> 位于两个数字的中间，其中一个为偶数，另一个为奇数，则 <paramref name="mode" /> 参数确定返回这两个数字中的哪一个。 如果 <paramref name="d" /> 的精度小于 <paramref name="decimals" />，则原样返回 <paramref name="d" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="decimals" /> 小于 0 或大于 28。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是 <see cref="T:System.MidpointRounding" /> 值。</exception>
      <exception cref="T:System.OverflowException">结果在 <see cref="T:System.Decimal" /> 对象范围之外。</exception>
    </member>
    <member name="M:System.Decimal.Round(System.Decimal,System.MidpointRounding)">
      <summary>将小数值舍入到最接近的整数。 一个参数，指定当一个值正好处于另两个数中间时如何舍入这个值。</summary>
      <param name="d">要舍入的小数。</param>
      <param name="mode">一个值，指定当 <paramref name="d" /> 正好处于另两个数字中间时如何舍入。</param>
      <returns>最接近 <paramref name="d" /> 参数的整数。 如果 <paramref name="d" /> 位于两个数字的中间，其中一个为偶数，另一个为奇数，则 <paramref name="mode" /> 参数确定返回这两个数字中的哪一个。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是 <see cref="T:System.MidpointRounding" /> 值。</exception>
      <exception cref="T:System.OverflowException">结果在 <see cref="T:System.Decimal" /> 对象范围之外。</exception>
    </member>
    <member name="M:System.Decimal.Subtract(System.Decimal,System.Decimal)">
      <summary>从一个 <see cref="T:System.Decimal" /> 值中减去指定的另一个值。</summary>
      <param name="d1">被减数。</param>
      <param name="d2">减数。</param>
      <returns>
        <paramref name="d2" /> 减 <paramref name="d1" /> 所得的结果。</returns>
      <exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>如果当前实例的值不为零，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Byte" />。</returns>
      <exception cref="T:System.OverflowException">生成的整数值小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>无。 不支持此转换。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>无。 不支持此转换。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，未更改。</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int16" />。</returns>
      <exception cref="T:System.OverflowException">生成的整数值小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int32" />。</returns>
      <exception cref="T:System.OverflowException">生成的整数值小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int64" />。</returns>
      <exception cref="T:System.OverflowException">生成的整数值小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.SByte" />。</returns>
      <exception cref="T:System.OverflowException">生成的整数值小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Single" />。</returns>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">要将此 <see cref="T:System.Decimal" /> 实例的值转换为的类型。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 实现，提供有关返回值格式的区域性特定信息。</param>
      <returns>当前实例的值，已转换为 <paramref name="type" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">不支持请求的类型转换。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt16" />。</returns>
      <exception cref="T:System.OverflowException">生成的整数值小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt32" />。</returns>
      <exception cref="T:System.OverflowException">生成的整数值小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt64" />。</returns>
      <exception cref="T:System.OverflowException">生成的整数值小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>在对象的反序列化完成时运行。</summary>
      <param name="sender">启动回调的对象。 当前未实现该参数的功能。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="T:System.Decimal" /> 对象包含无效或已损坏的数据。</exception>
    </member>
    <member name="M:System.Decimal.ToByte(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 的值转换为等效的 8 位无符号整数。</summary>
      <param name="value">要转换的十进制数。</param>
      <returns>等效于 <paramref name="value" /> 的 8 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.ToDouble(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 的值转换为等效的双精度浮点数。</summary>
      <param name="d">要转换的十进制数。</param>
      <returns>与 <paramref name="d" /> 等效的双精度浮点数。</returns>
    </member>
    <member name="M:System.Decimal.ToInt16(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 值转换为等效的 16 位有符号整数。</summary>
      <param name="value">要转换的十进制数。</param>
      <returns>等效于 <paramref name="value" /> 的 16 位有符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.ToInt32(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 值转换为等效的 32 位有符号整数。</summary>
      <param name="d">要转换的十进制数。</param>
      <returns>与 <paramref name="d" /> 的值等效的 32 位有符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> 小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.ToInt64(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 值转换为等效的 64 位有符号整数。</summary>
      <param name="d">要转换的十进制数。</param>
      <returns>与 <paramref name="d" /> 的值等效的 64 位有符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> 小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.ToOACurrency(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 值转换为等效的 OLE 自动化货币值，该值包含在一个 64 位有符号整数中。</summary>
      <param name="value">要转换的十进制数。</param>
      <returns>包含 <paramref name="value" /> 的 OLE 自动化等效值的 64 位有符号整数。</returns>
    </member>
    <member name="M:System.Decimal.ToSByte(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 值转换为等效的 8 位有符号整数。</summary>
      <param name="value">要转换的十进制数。</param>
      <returns>等效于 <paramref name="value" /> 的 8 位有符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.ToSingle(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 的值转换为等效的单精度浮点数。</summary>
      <param name="d">要转换的十进制数。</param>
      <returns>等效于 <paramref name="d" /> 的值的单精度浮点数字。</returns>
    </member>
    <member name="M:System.Decimal.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>表示此实例的值的字符串。</returns>
    </member>
    <member name="M:System.Decimal.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</returns>
    </member>
    <member name="M:System.Decimal.ToString(System.String)">
      <summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="format">标准或自定义的数值格式字符串。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。</exception>
    </member>
    <member name="M:System.Decimal.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="format">一个数值格式字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。</exception>
    </member>
    <member name="M:System.Decimal.ToUInt16(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 的值转换为等效的 16 位无符号整数。</summary>
      <param name="value">要转换的十进制数。</param>
      <returns>与 <paramref name="value" /> 的值等效的 16 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 大于 <see cref="F:System.UInt16.MaxValue" /> 或小于 <see cref="F:System.UInt16.MinValue" />。</exception>
    </member>
    <member name="M:System.Decimal.ToUInt32(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 的值转换为等效的 32 位无符号整数。</summary>
      <param name="d">要转换的十进制数。</param>
      <returns>与 <paramref name="d" /> 的值等效的 32 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> 为负数或大于 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.ToUInt64(System.Decimal)">
      <summary>将指定的 <see cref="T:System.Decimal" /> 的值转换为等效的 64 位无符号整数。</summary>
      <param name="d">要转换的十进制数。</param>
      <returns>与 <paramref name="d" /> 的值等效的 64 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="d" /> 为负数或大于 <see cref="F:System.UInt64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Decimal.Truncate(System.Decimal)">
      <summary>返回指定的 <see cref="T:System.Decimal" /> 的整数位，所有小数位均被放弃。</summary>
      <param name="d">要截断的十进制数。</param>
      <returns>
        <paramref name="d" /> 向零舍入为最接近的整数后的结果。</returns>
    </member>
    <member name="M:System.Decimal.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.Decimal.TryParse(System.ReadOnlySpan{System.Char},System.Decimal@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.Decimal.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Decimal@)">
      <summary>将数字的字符串表示形式转换为它的等效 <see cref="T:System.Decimal" /> 表示形式。 一个指示转换是否成功的返回值。</summary>
      <param name="s">要转换的数字的字符串表示形式。</param>
      <param name="result">如果转换成功，此方法返回与 <paramref name="s" /> 中所含数值相当的 <see cref="T:System.Decimal" /> 数；如果转换失败，此方法返回零。 如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是有效格式的数字，或者表示的数字小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />，则转换失败。 此参数未经初始化即进行传递；<paramref name="result" /> 中最初提供的任何值都会遭覆盖。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Decimal.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Decimal@)">
      <summary>使用指定样式和区域性特定格式将数字的字符串表示形式转换为其 <see cref="T:System.Decimal" /> 等效项。 一个指示转换是否成功的返回值。</summary>
      <param name="s">要转换的数字的字符串表示形式。</param>
      <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Number" />。</param>
      <param name="provider">一个对象，它提供有关 <paramref name="s" /> 的区域性特定分析信息。</param>
      <param name="result">如果转换成功，此方法返回与 <paramref name="s" /> 中所含数值相当的 <see cref="T:System.Decimal" /> 数；如果转换失败，此方法返回零。 如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是格式符合 <paramref name="style" /> 的数字、表示小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字，表明转换失败。 此参数未经初始化即进行传递；<paramref name="result" /> 中最初提供的任何值都会遭覆盖。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
或 
 <paramref name="style" /> 是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
    </member>
    <member name="F:System.Decimal.Zero">
      <summary>表示数字零 (0)。</summary>
    </member>
    <member name="T:System.Delegate">
      <summary>表示委托，委托是一种数据结构，它引用静态方法或引用类实例及该类的实例方法。</summary>
    </member>
    <member name="M:System.Delegate.#ctor(System.Object,System.String)">
      <summary>初始化一个委托，该委托对指定的类实例调用指定的实例方法。</summary>
      <param name="target">类实例，委托对其调用 <paramref name="method" />。</param>
      <param name="method">委托表示的实例方法的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 为 <see langword="null" />。  
或 
 <paramref name="method" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">绑定到目标方法时出错。</exception>
    </member>
    <member name="M:System.Delegate.#ctor(System.Type,System.String)">
      <summary>初始化一个委托，该委托从指定的类调用指定的静态方法。</summary>
      <param name="target">
        <see cref="T:System.Type" />，它表示定义 <paramref name="method" /> 的类。</param>
      <param name="method">委托表示的静态方法的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 为 <see langword="null" />。  
或 
 <paramref name="method" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see langword="RuntimeType" />。 请参阅反射中的运行时类型。  
或 
 <paramref name="target" /> 表示开放式泛型类型。</exception>
    </member>
    <member name="M:System.Delegate.Clone">
      <summary>创建委托的浅表副本。</summary>
      <returns>委托的浅表副本。</returns>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate,System.Delegate)">
      <summary>将两个委托的调用列表连接在一起。</summary>
      <param name="a">最先出现其调用列表的委托。</param>
      <param name="b">最后出现其调用列表的委托。</param>
      <returns>新的委托，它的调用列表将 <paramref name="a" /> 和 <paramref name="b" /> 的调用列表按该顺序连接在一起。 如果 <paramref name="b" /> 为 <see langword="null" />，则返回 <paramref name="a" />；如果 <paramref name="a" /> 为 null 引用，则返回 <paramref name="b" />；如果 <paramref name="a" /> 和 <paramref name="b" /> 均为 null 引用，则返回 null 引用。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="a" /> 和 <paramref name="b" /> 均不为 <see langword="null" />，且 <paramref name="a" /> 和 <paramref name="b" /> 不是相同委托类型的实例。</exception>
    </member>
    <member name="M:System.Delegate.Combine(System.Delegate[])">
      <summary>将委托数组的调用列表连接在一起。</summary>
      <param name="delegates">要组合的委托的数组。</param>
      <returns>新的委托，该委托的调用列表将 <paramref name="delegates" /> 数组中的委托的调用列表串联在一起。 如果 <paramref name="delegates" /> 为 <see langword="null" />，<paramref name="delegates" /> 包含零个元素，或 <paramref name="delegates" /> 中的每个条目均为 <see langword="null" />，则返回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">不是所有 <paramref name="delegates" /> 中的非 null 项都是同一委托类型的实例。</exception>
    </member>
    <member name="M:System.Delegate.CombineImpl(System.Delegate)">
      <summary>将指定多路广播（可组合）委托和当前多路广播（可组合）委托的调用列表连接起来。</summary>
      <param name="d">多路广播（可组合）委托，其调用列表要追加到当前多路广播（可组合）委托的调用列表的结尾。</param>
      <returns>新的多路广播（可组合）委托，其调用列表将当前多路广播（可组合）委托的调用列表和 <paramref name="d" /> 的调用列表连接在一起；或者如果 <paramref name="d" /> 为 <see langword="null" />，则返回当前多路广播（可组合）委托。</returns>
      <exception cref="T:System.MulticastNotSupportedException">始终引发。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo)">
      <summary>使用指定的第一个参数创建指定类型的委托，该委托表示指定的静态方法或实例方法。</summary>
      <param name="type">要创建的委托的 <see cref="T:System.Type" />。</param>
      <param name="firstArgument">委托要绑定到的对象，若要将 <paramref name="method" /> 作为 <see langword="static" />（在 Visual Basic 中为 <see langword="Shared" />），则为 <see langword="null" />。</param>
      <param name="method">描述该委托要表示的静态或实例方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <returns>指定类型的委托，表示指定的静态或实例方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。  

或 - 
<paramref name="method" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不继承 <see cref="T:System.MulticastDelegate" />。  
或 
 <paramref name="type" /> 不是 <see langword="RuntimeType" />。 请参阅反射中的运行时类型。  
或 
 无法绑定 <paramref name="method" />。  
或 
 <paramref name="method" /> 不是 <see langword="RuntimeMethodInfo" />。 请参阅反射中的运行时类型。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有访问 <paramref name="method" /> 所必需的权限。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)">
      <summary>使用指定的第一个参数和针对绑定失败的指定行为，创建表示指定的静态方法或实例方法的指定类型的委托。</summary>
      <param name="type">一个 <see cref="T:System.Type" />，表示要创建的委托的类型。</param>
      <param name="firstArgument">一个 <see cref="T:System.Object" />，它是委托表示的方法的第一个参数。 对于实例方法，它必须与实例类型兼容。</param>
      <param name="method">描述该委托要表示的静态或实例方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="throwOnBindFailure">如果无法绑定 <paramref name="method" /> 时引发异常，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>表示指定的静态方法或实例方法的指定类型的委托，如果 <paramref name="throwOnBindFailure" /> 为 <see langword="null" />，并且委托无法绑定到 <paramref name="method" />，则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。  
或 
 <paramref name="method" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不继承 <see cref="T:System.MulticastDelegate" />。  

或 - 
<paramref name="type" /> 不是 <see langword="RuntimeType" />。 请参阅反射中的运行时类型。  

或 
 无法绑定 <paramref name="method" />，且 <paramref name="throwOnBindFailure" /> 为 <see langword="true" />。  
或 
 <paramref name="method" /> 不是 <see langword="RuntimeMethodInfo" />。 请参阅反射中的运行时类型。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有访问 <paramref name="method" /> 所必需的权限。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String)">
      <summary>创建指定类型的委托，该委托表示要对指定的类实例调用的指定实例方法。</summary>
      <param name="type">要创建的委托的 <see cref="T:System.Type" />。</param>
      <param name="target">类实例，对其调用 <paramref name="method" />。</param>
      <param name="method">委托要表示的实例方法的名称。</param>
      <returns>指定的类型的委托，表示要对指定的类实例调用的指定的实例方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。  
或 
 <paramref name="target" /> 为 <see langword="null" />。  
或 
 <paramref name="method" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不继承 <see cref="T:System.MulticastDelegate" />。  

或 - 
<paramref name="type" /> 不是 <see langword="RuntimeType" />。 请参阅反射中的运行时类型。  

或 
 <paramref name="method" /> 不是实例方法。  
或 
 无法绑定 <paramref name="method" />，例如因为找不到它。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有访问 <paramref name="method" /> 所必需的权限。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean)">
      <summary>创建指定类型的委托，该委托表示要按指定的大小写敏感度对指定类实例调用的指定实例方法。</summary>
      <param name="type">要创建的委托的 <see cref="T:System.Type" />。</param>
      <param name="target">类实例，对其调用 <paramref name="method" />。</param>
      <param name="method">委托要表示的实例方法的名称。</param>
      <param name="ignoreCase">一个布尔值，它指示在比较方法名称时是否忽略大小写。</param>
      <returns>指定的类型的委托，表示要对指定的类实例调用的指定的实例方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。  
或 
 <paramref name="target" /> 为 <see langword="null" />。  

或 - 
<paramref name="method" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不继承 <see cref="T:System.MulticastDelegate" />。  
或 
 <paramref name="type" /> 不是 <see langword="RuntimeType" />。 请参阅反射中的运行时类型。  
或 
 <paramref name="method" /> 不是实例方法。  
或 
 无法绑定 <paramref name="method" />，例如因为找不到它。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有访问 <paramref name="method" /> 所必需的权限。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Object,System.String,System.Boolean,System.Boolean)">
      <summary>使用用于指定是否区分大小写的值和针对绑定失败的指定行为，创建指定类型的委托，该委托表示要对指定类实例调用的指定实例方法。</summary>
      <param name="type">要创建的委托的 <see cref="T:System.Type" />。</param>
      <param name="target">类实例，对其调用 <paramref name="method" />。</param>
      <param name="method">委托要表示的实例方法的名称。</param>
      <param name="ignoreCase">一个布尔值，它指示在比较方法名称时是否忽略大小写。</param>
      <param name="throwOnBindFailure">如果无法绑定 <paramref name="method" /> 时引发异常，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>指定的类型的委托，表示要对指定的类实例调用的指定的实例方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。  
或 
 <paramref name="target" /> 为 <see langword="null" />。  
或 
 <paramref name="method" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不继承 <see cref="T:System.MulticastDelegate" />。  
或 
 <paramref name="type" /> 不是 <see langword="RuntimeType" />。 请参阅反射中的运行时类型。  
或 
 <paramref name="method" /> 不是实例方法。  
或 
 无法绑定 <paramref name="method" />，例如因为找不到它，并且 <paramref name="throwOnBindFailure" /> 为 <see langword="true" />。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有访问 <paramref name="method" /> 所必需的权限。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo)">
      <summary>创建指定类型的委托以表示指定的静态方法。</summary>
      <param name="type">要创建的委托的 <see cref="T:System.Type" />。</param>
      <param name="method">描述该委托要表示的静态或实例方法的 <see cref="T:System.Reflection.MethodInfo" />。 .NET Framework 1.0 和 1.1 版中仅支持静态方法。</param>
      <returns>表示指定静态方法的指定类型的委托。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。  
或 
 <paramref name="method" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不继承 <see cref="T:System.MulticastDelegate" />。  
或 
 <paramref name="type" /> 不是 <see langword="RuntimeType" />。 请参阅反射中的运行时类型。  

或 - 
<paramref name="method" /> 不是一种静态方法，并且 .NET Framework 版本为 1.0 或 1.1。  

或 
 无法绑定 <paramref name="method" />。  
或 
 <paramref name="method" /> 不是 <see langword="RuntimeMethodInfo" />。 请参阅反射中的运行时类型。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有访问 <paramref name="method" /> 所必需的权限。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Reflection.MethodInfo,System.Boolean)">
      <summary>使用针对绑定失败的指定行为，创建用于表示指定静态方法的指定类型的委托。</summary>
      <param name="type">要创建的委托的 <see cref="T:System.Type" />。</param>
      <param name="method">描述该委托要表示的静态或实例方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="throwOnBindFailure">如果无法绑定 <paramref name="method" /> 时引发异常，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>表示指定静态方法的指定类型的委托。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。  
或 
 <paramref name="method" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不继承 <see cref="T:System.MulticastDelegate" />。  

或 - 
<paramref name="type" /> 不是 <see langword="RuntimeType" />。 请参阅反射中的运行时类型。  

或 
 无法绑定 <paramref name="method" />，且 <paramref name="throwOnBindFailure" /> 为 <see langword="true" />。  
或 
 <paramref name="method" /> 不是 <see langword="RuntimeMethodInfo" />。 请参阅反射中的运行时类型。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有访问 <paramref name="method" /> 所必需的权限。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String)">
      <summary>创建指定类型的委托，该委托表示指定类的指定静态方法。</summary>
      <param name="type">要创建的委托的 <see cref="T:System.Type" />。</param>
      <param name="target">表示实现 <paramref name="method" /> 的类的 <see cref="T:System.Type" />。</param>
      <param name="method">委托要表示的静态方法的名称。</param>
      <returns>指定类型的委托，该委托表示指定类的指定静态方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。  
或 
 <paramref name="target" /> 为 <see langword="null" />。  
或 
 <paramref name="method" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不继承 <see cref="T:System.MulticastDelegate" />。  
或 
 <paramref name="type" /> 不是 <see langword="RuntimeType" />。 请参阅反射中的运行时类型。  

或 - 
<paramref name="target" /> 不是 <see langword="RuntimeType" />。  

或 
 <paramref name="target" /> 为开放式泛型类型。 也就是说，其 <see cref="P:System.Type.ContainsGenericParameters" /> 属性为 <see langword="true" />。  

或 - 
<paramref name="method" /> 不是 <see langword="static" /> 方法（在 Visual Basic 中为 <see langword="Shared" /> 方法）。  

或 - 
无法绑定 <paramref name="method" />，例如因为找不到它，并且 <paramref name="throwOnBindFailure" /> 为 <see langword="true" />。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有访问 <paramref name="method" /> 所必需的权限。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean)">
      <summary>使用用于指定是否区分大小写的值创建指定类型的委托，该委托表示指定类的指定静态方法。</summary>
      <param name="type">要创建的委托的 <see cref="T:System.Type" />。</param>
      <param name="target">表示实现 <paramref name="method" /> 的类的 <see cref="T:System.Type" />。</param>
      <param name="method">委托要表示的静态方法的名称。</param>
      <param name="ignoreCase">一个布尔值，它指示在比较方法名称时是否忽略大小写。</param>
      <returns>指定类型的委托，该委托表示指定类的指定静态方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。  
或 
 <paramref name="target" /> 为 <see langword="null" />。  

或 - 
<paramref name="method" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不继承 <see cref="T:System.MulticastDelegate" />。  

或 - 
<paramref name="type" /> 不是 <see langword="RuntimeType" />。 请参阅反射中的运行时类型。  

或 - 
<paramref name="target" /> 不是 <see langword="RuntimeType" />。  


或 
 <paramref name="target" /> 为开放式泛型类型。 也就是说，其 <see cref="P:System.Type.ContainsGenericParameters" /> 属性为 <see langword="true" />。  
或 
 <paramref name="method" /> 不是 <see langword="static" /> 方法（在 Visual Basic 中为 <see langword="Shared" /> 方法）。  

或 - 
无法绑定 <paramref name="method" />，例如因为找不到它。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有访问 <paramref name="method" /> 所必需的权限。</exception>
    </member>
    <member name="M:System.Delegate.CreateDelegate(System.Type,System.Type,System.String,System.Boolean,System.Boolean)">
      <summary>使用用于指定是否区分大小写的值和针对绑定失败的指定行为，创建指定类型的委托，该委托表示指定类的指定静态方法。</summary>
      <param name="type">要创建的委托的 <see cref="T:System.Type" />。</param>
      <param name="target">表示实现 <paramref name="method" /> 的类的 <see cref="T:System.Type" />。</param>
      <param name="method">委托要表示的静态方法的名称。</param>
      <param name="ignoreCase">一个布尔值，它指示在比较方法名称时是否忽略大小写。</param>
      <param name="throwOnBindFailure">如果无法绑定 <paramref name="method" /> 时引发异常，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>指定类型的委托，该委托表示指定类的指定静态方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。  
或 
 <paramref name="target" /> 为 <see langword="null" />。  
或 
 <paramref name="method" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不继承 <see cref="T:System.MulticastDelegate" />。  
或 
 <paramref name="type" /> 不是 <see langword="RuntimeType" />。 请参阅反射中的运行时类型。  

或 - 
<paramref name="target" /> 不是 <see langword="RuntimeType" />。  

或 - 
<paramref name="target" /> 为开放式泛型类型。 也就是说，其 <see cref="P:System.Type.ContainsGenericParameters" /> 属性为 <see langword="true" />。  


或 
 <paramref name="method" /> 不是 <see langword="static" /> 方法（在 Visual Basic 中为 <see langword="Shared" /> 方法）。  

或 - 
无法绑定 <paramref name="method" />，例如因为找不到它，并且 <paramref name="throwOnBindFailure" /> 为 <see langword="true" />。</exception>
      <exception cref="T:System.MissingMethodException">找不到 <paramref name="type" /> 的 <see langword="Invoke" /> 方法。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有访问 <paramref name="method" /> 所必需的权限。</exception>
    </member>
    <member name="M:System.Delegate.DynamicInvoke(System.Object[])">
      <summary>动态调用（后期绑定）由当前委托所表示的方法。</summary>
      <param name="args">作为参数传递给当前委托所表示的方法的对象数组。  

或 - 
如果当前委托所表示的方法不需要参数，则为 <see langword="null" />。</param>
      <returns>委托所表示的方法返回的对象。</returns>
      <exception cref="T:System.MemberAccessException">调用方不能访问由委托表示的方法（例如，在方法为私有方法的情况下）。  

或 - 
<paramref name="args" /> 中列出的参数的数目、顺序或类型无效。</exception>
      <exception cref="T:System.ArgumentException">对对象或类调用委托所表示的方法，但该对象或类不支持这种方法。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">委托所表示的方法是实例方法，目标对象为 <see langword="null" />。  
或 
封装的方法之一引发异常。</exception>
    </member>
    <member name="M:System.Delegate.DynamicInvokeImpl(System.Object[])">
      <summary>动态调用（后期绑定）由当前委托所表示的方法。</summary>
      <param name="args">作为参数传递给当前委托所表示的方法的对象数组。  
或 
 如果当前委托所表示的方法不需要参数，则为 <see langword="null" />。</param>
      <returns>委托所表示的方法返回的对象。</returns>
      <exception cref="T:System.MemberAccessException">调用方不能访问由委托表示的方法（例如，在方法为私有方法的情况下）。  
或 
<paramref name="args" /> 中列出的参数的数目、顺序或类型无效。</exception>
      <exception cref="T:System.ArgumentException">对对象或类调用委托所表示的方法，但该对象或类不支持这种方法。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">委托所表示的方法是实例方法，目标对象为 <see langword="null" />。  
或 
封装的方法之一引发异常。</exception>
    </member>
    <member name="M:System.Delegate.Equals(System.Object)">
      <summary>确定指定的对象和当前委托的类型是否相同，是否共享相同的目标、方法和调用列表。</summary>
      <param name="obj">要与当前委托进行比较的对象。</param>
      <returns>如果 <paramref name="obj" /> 和当前委托具有相同的目标、方法和调用列表，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.MemberAccessException">调用方不能访问由委托表示的方法（例如，在方法为私有方法的情况下）。</exception>
    </member>
    <member name="M:System.Delegate.GetHashCode">
      <summary>返回委托的哈希代码。</summary>
      <returns>委托的哈希代码。</returns>
    </member>
    <member name="M:System.Delegate.GetInvocationList">
      <summary>返回委托的调用列表。</summary>
      <returns>委托构成的数组，表示当前委托的调用列表。</returns>
    </member>
    <member name="M:System.Delegate.GetMethodImpl">
      <summary>获取当前委托所表示的静态方法。</summary>
      <returns>描述当前委托表示的静态方法的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
      <exception cref="T:System.MemberAccessException">调用方不能访问由委托表示的方法（例如，在方法为私有方法的情况下）。</exception>
    </member>
    <member name="M:System.Delegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>不支持。</summary>
      <param name="info">不支持。</param>
      <param name="context">不支持。</param>
      <exception cref="T:System.NotSupportedException">不支持此方法。</exception>
    </member>
    <member name="P:System.Delegate.Method">
      <summary>获取委托所表示的方法。</summary>
      <returns>描述委托所表示的方法的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
      <exception cref="T:System.MemberAccessException">调用方不能访问由委托表示的方法（例如，在方法为私有方法的情况下）。</exception>
    </member>
    <member name="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)">
      <summary>确定指定的委托是否相等。</summary>
      <param name="d1">要比较的第一个委托。</param>
      <param name="d2">要比较的第二个委托。</param>
      <returns>如果 <see langword="true" /> 等于 <paramref name="d1" />，则为 <paramref name="d2" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)">
      <summary>确定指定的委托是否相等。</summary>
      <param name="d1">要比较的第一个委托。</param>
      <param name="d2">要比较的第二个委托。</param>
      <returns>如果 <see langword="true" /> 不等于 <paramref name="d1" />，则为 <paramref name="d2" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Delegate.Remove(System.Delegate,System.Delegate)">
      <summary>从一个委托的调用列表中移除另一个委托的最后一个调用列表。</summary>
      <param name="source">委托，将从中移除 <paramref name="value" /> 的调用列表。</param>
      <param name="value">委托，它提供将从其中移除 <paramref name="source" /> 的调用列表的调用列表。</param>
      <returns>一个新委托，其调用列表的构成方法为：获取 <paramref name="source" /> 的调用列表，如果在 <paramref name="value" /> 的调用列表中找到了 <paramref name="value" /> 的调用列表，则从中移除 <paramref name="source" /> 的最后一个调用列表。 如果 <paramref name="source" /> 为 <see langword="null" />，或在 <paramref name="value" /> 的调用列表中没有找到 <paramref name="value" /> 的调用列表，则返回 <paramref name="source" />。 如果 <paramref name="value" /> 的调用列表等于 <paramref name="source" /> 的调用列表，或 <paramref name="source" /> 为空引用，则返回空引用。</returns>
      <exception cref="T:System.MemberAccessException">调用方不能访问由委托表示的方法（例如，在方法为私有方法的情况下）。</exception>
      <exception cref="T:System.ArgumentException">委托类型不匹配。</exception>
    </member>
    <member name="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)">
      <summary>从一个委托的调用列表中移除另一个委托的所有调用列表。</summary>
      <param name="source">委托，将从中移除 <paramref name="value" /> 的调用列表。</param>
      <param name="value">委托，它提供将从其中移除 <paramref name="source" /> 的调用列表的调用列表。</param>
      <returns>一个新委托，其调用列表的构成方法为：获取 <paramref name="source" /> 的调用列表，如果在 <paramref name="value" /> 的调用列表中找到了 <paramref name="value" /> 的调用列表，则从中移除 <paramref name="source" /> 的所有调用列表。 如果 <paramref name="source" /> 为 <see langword="null" />，或在 <paramref name="value" /> 的调用列表中没有找到 <paramref name="value" /> 的调用列表，则返回 <paramref name="source" />。 如果 <paramref name="value" /> 的调用列表等于 <paramref name="source" /> 的调用列表，如果 <paramref name="source" /> 只包含等于 <paramref name="value" /> 的调用列表的一系列调用列表，或者如果 <paramref name="source" /> 为空引用，则返回空引用。</returns>
      <exception cref="T:System.MemberAccessException">调用方不能访问由委托表示的方法（例如，在方法为私有方法的情况下）。</exception>
      <exception cref="T:System.ArgumentException">委托类型不匹配。</exception>
    </member>
    <member name="M:System.Delegate.RemoveImpl(System.Delegate)">
      <summary>从一个委托的调用列表中移除另一个委托的调用列表。</summary>
      <param name="d">委托，它提供要从当前委托的调用列表中移除的调用列表。</param>
      <returns>一个新委托，其调用列表的构成方法为：获取当前委托的调用列表，如果在当前委托的调用列表中找到了 <paramref name="value" /> 的调用列表，则从中移除 <paramref name="value" /> 的调用列表。 如果 <paramref name="value" /> 为 <see langword="null" />，或者在当前委托的调用列表中没有找到 <paramref name="value" /> 的调用列表，则返回当前委托。 如果 <paramref name="value" /> 的调用列表等于当前委托的调用列表，则返回 <see langword="null" />。</returns>
      <exception cref="T:System.MemberAccessException">调用方不能访问由委托表示的方法（例如，在方法为私有方法的情况下）。</exception>
    </member>
    <member name="P:System.Delegate.Target">
      <summary>获取类实例，当前委托将对其调用实例方法。</summary>
      <returns>如果委托表示实例方法，则为当前委托对其调用实例方法的对象；如果委托表示静态方法，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
      <summary>指定即使相应的类型不允许，也可将 <see langword="null" /> 用作输入。</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.AllowNullAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
      <summary>指定即使相应的类型允许，也不可将 <see langword="null" /> 用作输入。</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.DisallowNullAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
      <summary>指定一个在任何情况下都不会返回的方法。</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
      <summary>指定如果向关联的 <see cref="T:System.Boolean" /> 参数传递了指定的值，则不返回方法。</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
      <summary>使用指定的参数值初始化 <see cref="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute" /> 类的新实例。</summary>
      <param name="parameterValue">条件参数值。 如果关联形参的实参与此值匹配，则认为诊断无法访问方法之后的代码。</param>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
      <summary>获取条件参数值。</summary>
      <returns>条件参数值。 如果关联形参的实参与此值匹配，则认为诊断无法访问方法之后的代码。</returns>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
      <summary>指定即使相应的类型不允许，输出也可为 <see langword="null" />。</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
      <summary>指定在某个方法返回 <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue" /> 时，即使相应的类型不允许，参数也可能为 <see langword="null" />。</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
      <summary>使用指定的返回值条件初始化属性。</summary>
      <param name="returnValue">返回值条件。 如果方法返回此值，则关联的参数可能为 <see langword="null" />。</param>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
      <summary>获取返回值条件。</summary>
      <returns>返回值条件。 如果方法返回此值，则关联的参数可能为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
      <summary>指定即使相应的类型允许，输出也不为 <see langword="null" />。</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.NotNullAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.CodeAnalysis.NotNullAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
      <summary>指定如果命名参数为非 null，则输出也为非 null。</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
      <summary>使用关联的参数名初始化属性。</summary>
      <param name="parameterName">关联的参数名。  指定指定形参的实参为非 null，则输出也为非 null。</param>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
      <summary>获取关联的参数名。</summary>
      <returns>关联的参数名。 指定指定形参的实参为非 null，则输出也为非 null。</returns>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
      <summary>指定在方法返回 <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue" /> 时，即使相应的类型允许，参数也不会为 <see langword="null" />。</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
      <summary>使用指定的返回值条件初始化属性。</summary>
      <param name="returnValue">返回值条件。 如果方法返回此值，则关联的参数不为 <see langword="null" />。</param>
    </member>
    <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
      <summary>获取返回值条件。</summary>
      <returns>返回值条件。 如果方法返回此值，则关联的参数不为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Diagnostics.ConditionalAttribute">
      <summary>指示编译器，除非定义了指定的有条件编译符号，否则，应忽略方法调用或属性。</summary>
    </member>
    <member name="M:System.Diagnostics.ConditionalAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.ConditionalAttribute" /> 类的新实例。</summary>
      <param name="conditionString">一个字符串，它指定与此属性关联的区分大小写的条件编译符号。</param>
    </member>
    <member name="P:System.Diagnostics.ConditionalAttribute.ConditionString">
      <summary>获取与 <see cref="T:System.Diagnostics.ConditionalAttribute" /> 属性相关的条件编译符号。</summary>
      <returns>一个字符串，它指定与 <see cref="T:System.Diagnostics.ConditionalAttribute" /> 属性关联的区分大小写的条件编译符号。</returns>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute">
      <summary>修改运行库实时 (JIT) 调试的代码生成。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary>使用为实时 (JIT) 编译器指定的跟踪和优化选项来初始化 <see cref="T:System.Diagnostics.DebuggableAttribute" /> 类的新实例。</summary>
      <param name="isJITTrackingEnabled">如果启用调试，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="isJITOptimizerDisabled">如果禁用执行优化程序，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Diagnostics.DebuggableAttribute.#ctor(System.Diagnostics.DebuggableAttribute.DebuggingModes)">
      <summary>使用为实时 (JIT) 编译器指定的调试模式来初始化 <see cref="T:System.Diagnostics.DebuggableAttribute" /> 类的新实例。</summary>
      <param name="modes">
        <see cref="T:System.Diagnostics.DebuggableAttribute.DebuggingModes" /> 值的按位组合指定 JIT 编译器的调试模式。</param>
    </member>
    <member name="P:System.Diagnostics.DebuggableAttribute.DebuggingFlags">
      <summary>获取属性的调试模式。</summary>
      <returns>
        <see cref="T:System.Diagnostics.DebuggableAttribute.DebuggingModes" /> 值的按位组合，它描述实时 (JIT) 编译器的调试模式。 默认值为 <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default" />。</returns>
    </member>
    <member name="T:System.Diagnostics.DebuggableAttribute.DebuggingModes">
      <summary>指定实时 (JIT) 编译器的调试模式。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default">
      <summary>指示实时 (JIT) 编译器使用其默认行为，包括启用优化、禁用“编辑并继续”支持以及使用符号存储区序列点（如果存在）。 从 .NET Framework 2.0 版本开始，始终生成 JIT 跟踪信息，即方法中相对于本机代码偏移量的 Microsoft 中间语言 (MSIL) 偏移量。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations">
      <summary>禁用编译器为使输出文件更小、更快、更有效而执行的优化。 优化会导致输出文件中的代码重排，这会增加调试的难度。 通常在调试时应禁用优化。 在 2.0 或更高版本中，将这个值与 Default (Default | DisableOptimizations) 组合在一起可启用 JIT 跟踪和禁用优化。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.EnableEditAndContinue">
      <summary>启用“编辑并继续”。 借助“编辑并继续”，你可以在程序处于中断模式时对源代码进行更改。 “编辑并继续”的能力取决于编译器。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints">
      <summary>使用隐式 MSIL 序列点，而非程序数据库 (PDB) 序列点。 符号信息中的每个源行通常至少包含一个 Microsoft 中间语言 (MSIL) 偏移量。 当实时 (JIT) 编译器要编译方法时，它会请求分析服务提供应保留的 MSIL 偏移量列表。 这些 MSIL 偏移量称为序列点。</summary>
    </member>
    <member name="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.None">
      <summary>从 .NET Framework 2.0 版本开始，始终生成 JIT 跟踪信息，并且此标志与 <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default" /> 具有相同效果，将 <see cref="P:System.Diagnostics.DebuggableAttribute.IsJITTrackingEnabled" /> 属性设置为 <see langword="false" /> 除外。 但是，由于始终启用 JIT 跟踪，所以在版本 2.0 或更高版本中将忽略此属性值。  
请注意，与 <see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations" /> 标志不同，<see cref="F:System.Diagnostics.DebuggableAttribute.DebuggingModes.None" /> 标志不能用于禁用 JIT 优化。</summary>
    </member>
    <member name="P:System.Diagnostics.DebuggableAttribute.IsJITOptimizerDisabled">
      <summary>获取一个值，用以指示运行库优化程序是否已禁用。</summary>
      <returns>如果运行库优化程序已禁用，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Diagnostics.DebuggableAttribute.IsJITTrackingEnabled">
      <summary>获取一个值，用以指示运行库是否将在代码生成过程中跟踪对调试器重要的信息。</summary>
      <returns>如果运行库将在代码生成过程中跟踪调试器的信息，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.DivideByZeroException">
      <summary>尝试将整数或 <see cref="T:System.Decimal" /> 值除以零时引发的异常。</summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor">
      <summary>初始化 <see cref="T:System.DivideByZeroException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.DivideByZeroException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.DivideByZeroException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.DivideByZeroException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.DivideByZeroException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Double">
      <summary>表示一个双精度浮点数。</summary>
    </member>
    <member name="M:System.Double.CompareTo(System.Double)">
      <summary>将此实例与指定的双精度浮点数进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定双精度浮点数的值。</summary>
      <param name="value">要比较的双精度浮点数。</param>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。  
  返回值 
  说明 
  小于零 
  此实例小于 <paramref name="value" />。  

或 
此实例不是数字 (<see cref="F:System.Double.NaN" />) 而 <paramref name="value" /> 是数字。  

  零 
  此实例等于 <paramref name="value" />。  

或 
此实例和 <paramref name="value" /> 都不是数字 (<see cref="F:System.Double.NaN" />)、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />。  

  大于零 
  此实例大于 <paramref name="value" />。  

- 或 - 
此实例是数字而 <paramref name="value" /> 不是数字 (<see cref="F:System.Double.NaN" />)。</returns>
    </member>
    <member name="M:System.Double.CompareTo(System.Object)">
      <summary>将此实例与指定对象进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定对象的值。</summary>
      <param name="value">要比较的对象，或为 <see langword="null" />。</param>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。  
  值 
  说明 
  负整数 
  此实例小于 <paramref name="value" />。  

或 
此实例不是数字 (<see cref="F:System.Double.NaN" />) 而 <paramref name="value" /> 是数字。  

  零 
  此实例等于 <paramref name="value" />。  

- 或 - 
此实例和 <paramref name="value" /> 都是 <see langword="Double.NaN" />、<see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" /> 正整数 
  此实例大于 <paramref name="value" />。  

或 
此实例是数字而 <paramref name="value" /> 不是数字 (<see cref="F:System.Double.NaN" />)。  

或 
 <paramref name="value" /> 为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Double" />。</exception>
    </member>
    <member name="F:System.Double.Epsilon">
      <summary>表示大于零的最小正 <see cref="T:System.Double" /> 值。 此字段为常数。</summary>
    </member>
    <member name="M:System.Double.Equals(System.Double)">
      <summary>返回一个值，该值指示此实例和指定的 <see cref="T:System.Double" /> 对象是否表示相同的值。</summary>
      <param name="obj">要与此示例比较的 <see cref="T:System.Double" /> 对象。</param>
      <returns>如果 <see langword="true" /> 与此实例相等，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="obj">与此实例进行比较的对象。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.Double" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Double.GetTypeCode">
      <summary>返回值类型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.Double" />。</summary>
      <returns>枚举常数 <see cref="F:System.TypeCode.Double" />。</returns>
    </member>
    <member name="M:System.Double.IsFinite(System.Double)">
      <summary>确定指定值是否为有限值（零、不正常或正常）。</summary>
      <param name="d">一个双精度浮点数。</param>
      <returns>如果该值为有限值（零、不正常或正常），则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.IsInfinity(System.Double)">
      <summary>返回一个值，该值指示指定数字是计算为负无穷大还是正无穷大。</summary>
      <param name="d">一个双精度浮点数。</param>
      <returns>如果 <paramref name="d" /> 的计算结果为 <see cref="F:System.Double.PositiveInfinity" /> 或 <see cref="F:System.Double.NegativeInfinity" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.IsNaN(System.Double)">
      <summary>返回一个值，该值指示指定的值是否不为数字 (<see cref="F:System.Double.NaN" />)。</summary>
      <param name="d">一个双精度浮点数。</param>
      <returns>如果 <paramref name="d" /> 的计算结果为 <see cref="F:System.Double.NaN" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.IsNegative(System.Double)">
      <summary>确定指定值是否为负值。</summary>
      <param name="d">一个双精度浮点数。</param>
      <returns>如果该值为负值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.IsNegativeInfinity(System.Double)">
      <summary>返回一个值，通过该值指示指定数字是否计算为负无穷大。</summary>
      <param name="d">一个双精度浮点数。</param>
      <returns>如果 <paramref name="d" /> 的计算结果为 <see cref="F:System.Double.NegativeInfinity" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.IsNormal(System.Double)">
      <summary>确定指定值是否正常。</summary>
      <param name="d">一个双精度浮点数。</param>
      <returns>如果该值正常，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.IsPositiveInfinity(System.Double)">
      <summary>返回一个值，通过该值指示指定数字是否计算为正无穷大。</summary>
      <param name="d">一个双精度浮点数。</param>
      <returns>如果 <paramref name="d" /> 的计算结果为 <see cref="F:System.Double.PositiveInfinity" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.IsSubnormal(System.Double)">
      <summary>确定指定值是否不正常。</summary>
      <param name="d">一个双精度浮点数。</param>
      <returns>如果该值不正常，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.Double.MaxValue">
      <summary>表示 <see cref="T:System.Double" /> 的最大可能值。 此字段为常数。</summary>
    </member>
    <member name="F:System.Double.MinValue">
      <summary>表示 <see cref="T:System.Double" /> 的最小可能值。 此字段为常数。</summary>
    </member>
    <member name="F:System.Double.NaN">
      <summary>表示不是数字 (<see langword="NaN" />) 的值。 此字段为常数。</summary>
    </member>
    <member name="F:System.Double.NegativeInfinity">
      <summary>表示负无穷。 此字段为常数。</summary>
    </member>
    <member name="M:System.Double.op_Equality(System.Double,System.Double)">
      <summary>返回一个值，该值指示两个指定的 <see cref="T:System.Double" /> 值是否相等。</summary>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.op_GreaterThan(System.Double,System.Double)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Double" /> 值是否大于另一个指定的 <see cref="T:System.Double" /> 值。</summary>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
      <returns>如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.op_GreaterThanOrEqual(System.Double,System.Double)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Double" /> 值是否大于或等于另一个指定的 <see cref="T:System.Double" /> 值。</summary>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
      <returns>如果 <paramref name="left" /> 大于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.op_Inequality(System.Double,System.Double)">
      <summary>返回一个值，该值指示两个指定的 <see cref="T:System.Double" /> 值是否不相等。</summary>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.op_LessThan(System.Double,System.Double)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Double" /> 值是否小于另一个指定的 <see cref="T:System.Double" /> 值。</summary>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
      <returns>如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.op_LessThanOrEqual(System.Double,System.Double)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Double" /> 值是否小于或等于另一个指定的 <see cref="T:System.Double" /> 值。</summary>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
      <returns>如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.Double.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效双精度浮点数。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <returns>与 <paramref name="s" /> 中指定的数值或符号等效的双精度浮点数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不表示具有有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效双精度浮点数。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 一个要指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的组合。</param>
      <returns>与 <paramref name="s" /> 中指定的数值或符号等效的双精度浮点数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不表示具有有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  

或 - 
<paramref name="style" /> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
    </member>
    <member name="M:System.Double.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效双精度浮点数。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float" /> 与 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的组合。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <returns>与 <paramref name="s" /> 中指定的数值或符号等效的双精度浮点数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不表示一个数值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
或 
 <paramref name="style" /> 是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Double.Parse(System.String,System.IFormatProvider)">
      <summary>将指定的区域性特定格式的数字的字符串表示形式转换为它的等效双精度浮点数。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <returns>与 <paramref name="s" /> 中指定的数值或符号等效的双精度浮点数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不表示具有有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</exception>
    </member>
    <member name="F:System.Double.PositiveInfinity">
      <summary>表示正无穷。 此字段为常数。</summary>
    </member>
    <member name="M:System.Double.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>如果当前实例的值不为零，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Byte" />。</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Decimal" />。</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，未更改。</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int16" />。</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.SByte" />。</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Single" />。</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">此 <see cref="T:System.Double" /> 值要转换为的类型。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 实现，提供有关返回值格式的区域性特定信息。</param>
      <returns>当前实例的值，已转换为 <paramref name="type" />。</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt16" />。</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt32" />。</returns>
    </member>
    <member name="M:System.Double.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt64" />。</returns>
    </member>
    <member name="M:System.Double.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式。</returns>
    </member>
    <member name="M:System.Double.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</returns>
    </member>
    <member name="M:System.Double.ToString(System.String)">
      <summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="format">一个数值格式字符串。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。</exception>
    </member>
    <member name="M:System.Double.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="format">一个数值格式字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
    </member>
    <member name="M:System.Double.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.Double.TryParse(System.ReadOnlySpan{System.Char},System.Double@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.Double.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Double@)">
      <summary>将数字的字符串表示形式转换为它的等效双精度浮点数。 一个指示转换是否成功的返回值。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 参数等效的双精度浮点数；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是有效格式的数字，或者表示的数字小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" />，则转换失败。 此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Double.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Double@)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效双精度浮点数。 一个指示转换是否成功的返回值。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的按位组合，指示 <paramref name="s" /> 的允许格式。 一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float" /> 与 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的组合。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" />，它提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含的数值或符号等效的双精度浮点数；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、格式不符合 <paramref name="style" />、表示的数字小于<see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" />，或者 <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 枚举的常数的有效组合，则转换失败。 此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
或 
 <paramref name="style" /> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
    </member>
    <member name="T:System.DuplicateWaitObjectException">
      <summary>当对象在同步对象数组中不止一次出现时引发的异常。</summary>
    </member>
    <member name="M:System.DuplicateWaitObjectException.#ctor">
      <summary>初始化 <see cref="T:System.DuplicateWaitObjectException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.DuplicateWaitObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.DuplicateWaitObjectException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.DuplicateWaitObjectException.#ctor(System.String)">
      <summary>使用导致此异常的参数的名称初始化 <see cref="T:System.DuplicateWaitObjectException" /> 类的新实例。</summary>
      <param name="parameterName">导致异常的参数的名称。</param>
    </member>
    <member name="M:System.DuplicateWaitObjectException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.DuplicateWaitObjectException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="M:System.DuplicateWaitObjectException.#ctor(System.String,System.String)">
      <summary>使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:System.DuplicateWaitObjectException" /> 类的新实例。</summary>
      <param name="parameterName">导致异常的参数的名称。</param>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="T:System.EntryPointNotFoundException">
      <summary>因不存在项方法而导致加载类的尝试失败时引发的异常。</summary>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor">
      <summary>初始化 <see cref="T:System.EntryPointNotFoundException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.EntryPointNotFoundException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.EntryPointNotFoundException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.EntryPointNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.EntryPointNotFoundException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="T:System.Enum">
      <summary>为枚举提供基类。</summary>
    </member>
    <member name="M:System.Enum.#ctor">
      <summary>初始化 <see cref="T:System.Enum" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Enum.CompareTo(System.Object)">
      <summary>将此实例与指定对象进行比较并返回一个对二者的相对值的指示。</summary>
      <param name="target">要比较的对象，或为 <see langword="null" />。</param>
      <returns>一个指示此实例和 <paramref name="target" /> 的相对值的带符号数字。  
  值 
  含义 
  小于零 
  此实例的值小于 <paramref name="target" /> 的值。  

  零 
  此实例的值等于 <paramref name="target" /> 的值。  

  大于零 
  此实例的值大于 <paramref name="target" /> 的值。  

或 
 <paramref name="target" /> 为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 和此实例不是同一类型。</exception>
      <exception cref="T:System.InvalidOperationException">此实例不是类型 <see cref="T:System.SByte" />、<see cref="T:System.Int16" />、<see cref="T:System.Int32" />、<see cref="T:System.Int64" />、<see cref="T:System.Byte" />、<see cref="T:System.UInt16" />、<see cref="T:System.UInt32" /> 或 <see cref="T:System.UInt64" />。</exception>
      <exception cref="T:System.NullReferenceException">此实例为 NULL。</exception>
    </member>
    <member name="M:System.Enum.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="obj">与此实例进行比较的对象，或为 <see langword="null" />。</param>
      <returns>如果枚举值 <paramref name="obj" /> 的类型和基础值与此实例相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Enum.Format(System.Type,System.Object,System.String)">
      <summary>根据指定格式将指定枚举类型的指定值转换为其等效的字符串表示形式。</summary>
      <param name="enumType">要转换的值的枚举类型。</param>
      <param name="value">要转换的值。</param>
      <param name="format">要使用的输出格式。</param>
      <returns>
        <paramref name="value" /> 的字符串表示形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" />、<paramref name="value" /> 或 <paramref name="format" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 参数不是 <see cref="T:System.Enum" /> 类型。  

或 - 
<paramref name="value" /> 来自于类型与 <paramref name="enumType" /> 不同的枚举。  

或 - 
<paramref name="value" /> 的类型不是 <paramref name="enumType" /> 的基础类型。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 参数包含无效值。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> 等于“X”，但枚举类型未知。</exception>
    </member>
    <member name="M:System.Enum.GetHashCode">
      <summary>返回该实例的值的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Enum.GetName(System.Type,System.Object)">
      <summary>在指定枚举中检索具有指定值的常数的名称。</summary>
      <param name="enumType">枚举类型。</param>
      <param name="value">特定枚举常量的值（根据其基础类型）。</param>
      <returns>一个字符串，其中包含 <paramref name="enumType" /> 中值为 <paramref name="value" /> 的枚举常量的名称；或者，如果没有找到这样的常量，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 或 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。  
或 
 <paramref name="value" /> 既不属于类型 <paramref name="enumType" />，也不具有与 <paramref name="enumType" /> 相同的基础类型。</exception>
    </member>
    <member name="M:System.Enum.GetNames(System.Type)">
      <summary>检索指定枚举中常数名称的数组。</summary>
      <param name="enumType">枚举类型。</param>
      <returns>
        <paramref name="enumType" /> 的常数名称的字符串数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 参数不是 <see cref="T:System.Enum" />。</exception>
    </member>
    <member name="M:System.Enum.GetTypeCode">
      <summary>返回此枚举成员的基础类型的类型代码。</summary>
      <returns>此实例的基础类型的类型代码。</returns>
      <exception cref="T:System.InvalidOperationException">枚举类型未知。</exception>
    </member>
    <member name="M:System.Enum.GetUnderlyingType(System.Type)">
      <summary>返回指定枚举的基础类型。</summary>
      <param name="enumType">基础类型将被检索的枚举。</param>
      <returns>
        <paramref name="enumType" /> 的基础类型。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
    </member>
    <member name="M:System.Enum.GetValues(System.Type)">
      <summary>检索指定枚举中常数值的数组。</summary>
      <param name="enumType">枚举类型。</param>
      <returns>一个数组，其中包含 <paramref name="enumType" /> 中常数的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
      <exception cref="T:System.InvalidOperationException">在仅限反射的上下文中通过反射调用方法， 

或 - 
<paramref name="enumType" /> 是在仅限反射的上下文中加载的程序集中的类型。</exception>
    </member>
    <member name="M:System.Enum.HasFlag(System.Enum)">
      <summary>确定当前实例中是否设置了一个或多个位域。</summary>
      <param name="flag">一个枚举值。</param>
      <returns>如果在 <paramref name="flag" /> 中设置的位域也在当前实例中进行了设置，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="flag" /> 是与当前实例不同的类型。</exception>
    </member>
    <member name="M:System.Enum.IsDefined(System.Type,System.Object)">
      <summary>返回一个布尔值，该值指示给定的整数值或其名称字符串是否存在于指定的枚举中。</summary>
      <param name="enumType">枚举类型。</param>
      <param name="value">
        <paramref name="enumType" /> 中的常量的值或名称。</param>
      <returns>如果 <paramref name="enumType" /> 中的某个常量的值等于 <paramref name="value" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 或 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see langword="Enum" />。  
或 
<paramref name="value" /> 的类型是枚举，但它不是类型 <paramref name="enumType" /> 的枚举。  

或 - 
<paramref name="value" /> 的类型不是 <paramref name="enumType" /> 的基础类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 的类型不为 <see cref="T:System.SByte" />、<see cref="T:System.Int16" />、<see cref="T:System.Int32" />、<see cref="T:System.Int64" />、<see cref="T:System.Byte" />、<see cref="T:System.UInt16" />、<see cref="T:System.UInt32" /><see cref="T:System.UInt64" /> 或 <see cref="T:System.String" />。</exception>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String)">
      <summary>将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。</summary>
      <param name="enumType">枚举类型。</param>
      <param name="value">包含要转换的值或名称的字符串。</param>
      <returns>
        <paramref name="enumType" /> 类型的对象，其值由 <paramref name="value" /> 表示。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 或 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。  
或 
 <paramref name="value" /> 为空字符串或只包含空格。  
或 
 <paramref name="value" /> 是一个名称，而不是为该枚举定义的命名常量之一。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 超出了 <paramref name="enumType" /> 的基础类型范围。</exception>
    </member>
    <member name="M:System.Enum.Parse(System.Type,System.String,System.Boolean)">
      <summary>将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。 一个参数指定该操作是否不区分大小写。</summary>
      <param name="enumType">枚举类型。</param>
      <param name="value">包含要转换的值或名称的字符串。</param>
      <param name="ignoreCase">
        <see langword="true" /> 为忽略大小写；<see langword="false" /> 为考虑大小写。</param>
      <returns>
        <paramref name="enumType" /> 类型的对象，其值由 <paramref name="value" /> 表示。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 或 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。  
或 
 <paramref name="value" /> 为空字符串 ("") 或只包含空格。  

或 - 
<paramref name="value" /> 是一个名称，而不是为该枚举定义的命名常量之一。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 超出了 <paramref name="enumType" /> 的基础类型范围。</exception>
    </member>
    <member name="M:System.Enum.Parse``1(System.String)">
      <param name="value" />
      <typeparam name="TEnum" />
    </member>
    <member name="M:System.Enum.Parse``1(System.String,System.Boolean)">
      <param name="value" />
      <param name="ignoreCase" />
      <typeparam name="TEnum" />
    </member>
    <member name="M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为布尔值。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>此成员总是引发异常。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为 8 位无符号整数。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>转换后的值。</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为 Unicode 字符。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>此成员总是引发异常。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为 <see cref="T:System.DateTime" />。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>此成员总是引发异常。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为 <see cref="T:System.Decimal" />。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>此成员总是引发异常。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为双精度浮点数。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>此成员总是引发异常。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为 16 位有符号整数。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>转换后的值。</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为 32 位有符号整数。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>转换后的值。</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为 64 位有符号整数。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>转换后的值。</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为 8 位有符号整数。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>转换后的值。</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为单精度浮点数。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>此成员总是引发异常。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为指定类型。</summary>
      <param name="type">要转换为的类型。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>转换后的值。</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为 16 位无符号整数。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>转换后的值。</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为 32 位无符号整数。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>转换后的值。</returns>
    </member>
    <member name="M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>根据基础类型将当前值转换为 64 位无符号整数。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>转换后的值。</returns>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Byte)">
      <summary>将指定的 8 位无符号整数转换为枚举成员。</summary>
      <param name="enumType">要返回的枚举类型。</param>
      <param name="value">要转换为枚举成员的值。</param>
      <returns>设置为 <paramref name="value" /> 的枚举实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Int16)">
      <summary>将指定的 16 位有符号整数转换为枚举成员。</summary>
      <param name="enumType">要返回的枚举类型。</param>
      <param name="value">要转换为枚举成员的值。</param>
      <returns>设置为 <paramref name="value" /> 的枚举实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Int32)">
      <summary>将指定的 32 位有符号整数转换为枚举成员。</summary>
      <param name="enumType">要返回的枚举类型。</param>
      <param name="value">要转换为枚举成员的值。</param>
      <returns>设置为 <paramref name="value" /> 的枚举实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Int64)">
      <summary>将指定的 64 位有符号整数转换为枚举成员。</summary>
      <param name="enumType">要返回的枚举类型。</param>
      <param name="value">要转换为枚举成员的值。</param>
      <returns>设置为 <paramref name="value" /> 的枚举实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.Object)">
      <summary>将具有整数值的指定对象转换为枚举成员。</summary>
      <param name="enumType">要返回的枚举类型。</param>
      <param name="value">要转换为枚举成员的值。</param>
      <returns>值为 <paramref name="value" /> 的枚举对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 或 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。  
或 
 <paramref name="value" /> 不是类型 <see cref="T:System.SByte" />、<see cref="T:System.Int16" />、<see cref="T:System.Int32" />、<see cref="T:System.Int64" />、<see cref="T:System.Byte" />、<see cref="T:System.UInt16" />、<see cref="T:System.UInt32" /> 或 <see cref="T:System.UInt64" />。</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.SByte)">
      <summary>将指定的 8 位有符号整数值转换为枚举成员。</summary>
      <param name="enumType">要返回的枚举类型。</param>
      <param name="value">要转换为枚举成员的值。</param>
      <returns>设置为 <paramref name="value" /> 的枚举实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.UInt16)">
      <summary>将指定的 16 位无符号整数值转换为枚举成员。</summary>
      <param name="enumType">要返回的枚举类型。</param>
      <param name="value">要转换为枚举成员的值。</param>
      <returns>设置为 <paramref name="value" /> 的枚举实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.UInt32)">
      <summary>将指定的 32 位无符号整数值转换为枚举成员。</summary>
      <param name="enumType">要返回的枚举类型。</param>
      <param name="value">要转换为枚举成员的值。</param>
      <returns>设置为 <paramref name="value" /> 的枚举实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
    </member>
    <member name="M:System.Enum.ToObject(System.Type,System.UInt64)">
      <summary>将指定的 64 位无符号整数值转换为枚举成员。</summary>
      <param name="enumType">要返回的枚举类型。</param>
      <param name="value">要转换为枚举成员的值。</param>
      <returns>设置为 <paramref name="value" /> 的枚举实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> 不是 <see cref="T:System.Enum" />。</exception>
    </member>
    <member name="M:System.Enum.ToString">
      <summary>将此实例的值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式。</returns>
    </member>
    <member name="M:System.Enum.ToString(System.IFormatProvider)">
      <summary>此方法重载已过时；请使用 <see cref="M:System.Enum.ToString" />。</summary>
      <param name="provider">（已过时）</param>
      <returns>此实例的值的字符串表示形式。</returns>
    </member>
    <member name="M:System.Enum.ToString(System.String)">
      <summary>使用指定格式将此实例的值转换成其等效的字符串表示。</summary>
      <param name="format">一个格式字符串。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 包含无效的规范。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> 等于“X”，但枚举类型未知。</exception>
    </member>
    <member name="M:System.Enum.ToString(System.String,System.IFormatProvider)">
      <summary>此方法重载已过时；请使用 <see cref="M:System.Enum.ToString(System.String)" />。</summary>
      <param name="format">格式规范。</param>
      <param name="provider">（已过时。）</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 不包含有效的格式规范。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="format" /> 等于“X”，但枚举类型未知。</exception>
    </member>
    <member name="M:System.Enum.TryParse(System.Type,System.String,System.Boolean,System.Object@)">
      <param name="enumType" />
      <param name="value" />
      <param name="ignoreCase" />
      <param name="result" />
    </member>
    <member name="M:System.Enum.TryParse(System.Type,System.String,System.Object@)">
      <param name="enumType" />
      <param name="value" />
      <param name="result" />
    </member>
    <member name="M:System.Enum.TryParse``1(System.String,``0@)">
      <summary>将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。 用于指示转换是否成功的返回值。</summary>
      <param name="value">要转换的枚举名称或基础值的区分大小写字符串表示形式。</param>
      <param name="result">当此方法返回时，如果分析操作成功，<paramref name="result" /> 将包含值由 <paramref name="value" /> 表示的 <c>TEnum</c> 类型的对象。 如果分析操作失败，<paramref name="result" /> 将包含 <c>TEnum</c> 的基础类型的默认值。 请注意，此值无需为 <c>TEnum</c> 枚举的成员。 此参数未经初始化即被传递。</param>
      <typeparam name="TEnum">要将 <paramref name="value" /> 转换到的枚举类型。</typeparam>
      <returns>如果 <see langword="true" /> 参数成功转换，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="TEnum" /> 不是枚举类型。</exception>
    </member>
    <member name="M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)">
      <summary>将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。 一个参数指定该操作是否区分大小写。 用于指示转换是否成功的返回值。</summary>
      <param name="value">要转换的枚举名称或基础值的字符串表示形式。</param>
      <param name="ignoreCase">若要不区分大小写，则为 <see langword="true" />；若要区分大小写，则为 <see langword="false" />。</param>
      <param name="result">当此方法返回时，如果分析操作成功，<paramref name="result" /> 将包含值由 <paramref name="value" /> 表示的 <c>TEnum</c> 类型的对象。 如果分析操作失败，<paramref name="result" /> 将包含 <c>TEnum</c> 的基础类型的默认值。 请注意，此值无需为 <c>TEnum</c> 枚举的成员。 此参数未经初始化即被传递。</param>
      <typeparam name="TEnum">要将 <paramref name="value" /> 转换到的枚举类型。</typeparam>
      <returns>如果 <see langword="true" /> 参数成功转换，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="TEnum" /> 不是枚举类型。</exception>
    </member>
    <member name="T:System.EventArgs">
      <summary>表示包含事件数据的类的基类，并提供要用于不包含事件数据的事件的值。</summary>
    </member>
    <member name="M:System.EventArgs.#ctor">
      <summary>初始化 <see cref="T:System.EventArgs" /> 类的新实例。</summary>
    </member>
    <member name="F:System.EventArgs.Empty">
      <summary>提供要用于没有事件数据的事件的值。</summary>
    </member>
    <member name="T:System.EventHandler">
      <summary>表示将处理不包含事件数据的事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">不包含事件数据的对象。</param>
    </member>
    <member name="T:System.EventHandler`1">
      <summary>表示将在事件提供数据时处理该事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的对象。</param>
      <typeparam name="TEventArgs">由该事件生成的事件数据的类型。</typeparam>
    </member>
    <member name="T:System.Exception">
      <summary>表示在应用程序执行过程中发生的错误。</summary>
    </member>
    <member name="M:System.Exception.#ctor">
      <summary>初始化 <see cref="T:System.Exception" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Exception" /> 类的新实例。</summary>
      <param name="info">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">类名为 <see langword="null" /> 或者 <see cref="P:System.Exception.HResult" /> 为零 (0)。</exception>
    </member>
    <member name="M:System.Exception.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.Exception" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Exception.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Exception" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</param>
    </member>
    <member name="P:System.Exception.Data">
      <summary>获取提供有关异常的其他用户定义信息的键/值对集合。</summary>
      <returns>一个对象，它实现 <see cref="T:System.Collections.IDictionary" /> 接口并包含用户定义的键/值对的集合。 默认值为空集合。</returns>
    </member>
    <member name="M:System.Exception.GetBaseException">
      <summary>当在派生类中重写时，返回 <see cref="T:System.Exception" />，它是一个或多个并发的异常的根源。</summary>
      <returns>异常链中第一个被引发的异常。 如果当前异常的 <see cref="P:System.Exception.InnerException" /> 属性是 null 引用（Visual Basic 中为<see langword="Nothing" /> ），则此属性返回当前异常。</returns>
    </member>
    <member name="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>当在派生类中重写时，用关于异常的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
    </member>
    <member name="M:System.Exception.GetType">
      <summary>获取当前实例的运行时类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象，表示当前实例的确切运行时类型。</returns>
    </member>
    <member name="P:System.Exception.HelpLink">
      <summary>获取或设置指向与此异常关联的帮助文件链接。</summary>
      <returns>统一资源名称 (URN) 或统一资源定位器 (URL)。</returns>
    </member>
    <member name="P:System.Exception.HResult">
      <summary>获取或设置 HRESULT（一个分配给特定异常的编码数字值）。</summary>
      <returns>HRESULT 值。</returns>
    </member>
    <member name="P:System.Exception.InnerException">
      <summary>获取导致当前异常的 <see cref="T:System.Exception" /> 实例。</summary>
      <returns>描述导致当前异常的错误的一个对象。 <see cref="P:System.Exception.InnerException" /> 属性返回的值与传递到 <see cref="M:System.Exception.#ctor(System.String,System.Exception)" /> 构造函数中的值相同，如果没有向构造函数提供内部异常值，则为 <see langword="null" /> 。 此属性是只读的。</returns>
    </member>
    <member name="P:System.Exception.Message">
      <summary>获取描述当前异常的消息。</summary>
      <returns>解释异常原因的错误消息或空字符串 ("")。</returns>
    </member>
    <member name="E:System.Exception.SerializeObjectState">
      <summary>当异常被序列化用来创建包含有关该异常的徐列出数据的异常状态对象时会出现该问题。</summary>
    </member>
    <member name="P:System.Exception.Source">
      <summary>获取或设置导致错误的应用程序或对象的名称。</summary>
      <returns>导致错误的应用程序或对象的名称。</returns>
      <exception cref="T:System.ArgumentException">对象必须是运行时 <see cref="N:System.Reflection" /> 对象。</exception>
    </member>
    <member name="P:System.Exception.StackTrace">
      <summary>获取调用堆栈上的即时框架字符串表示形式。</summary>
      <returns>用于描述调用堆栈的直接帧的字符串。</returns>
    </member>
    <member name="P:System.Exception.TargetSite">
      <summary>获取引发当前异常的方法。</summary>
      <returns>引发当前异常的 <see cref="T:System.Reflection.MethodBase" />。</returns>
    </member>
    <member name="M:System.Exception.ToString">
      <summary>创建并返回当前异常的字符串表示形式。</summary>
      <returns>当前异常的字符串表示形式。</returns>
    </member>
    <member name="T:System.ExecutionEngineException">
      <summary>当公共语言运行时的执行引擎中存在内部错误时引发的异常。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ExecutionEngineException.#ctor">
      <summary>初始化 <see cref="T:System.ExecutionEngineException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ExecutionEngineException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.ExecutionEngineException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.ExecutionEngineException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ExecutionEngineException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="T:System.FieldAccessException">
      <summary>当试图非法访问类中的私有字段或受保护字段时引发的异常。</summary>
    </member>
    <member name="M:System.FieldAccessException.#ctor">
      <summary>初始化 <see cref="T:System.FieldAccessException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.FieldAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.FieldAccessException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.FieldAccessException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.FieldAccessException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.FieldAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.FieldAccessException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.FileStyleUriParser">
      <summary>基于 File 方案的可自定义分析器。</summary>
    </member>
    <member name="M:System.FileStyleUriParser.#ctor">
      <summary>创建一个基于 File 方案的可自定义分析器。</summary>
    </member>
    <member name="T:System.FlagsAttribute">
      <summary>指示可将枚举视为位域（即一组标志）。</summary>
    </member>
    <member name="M:System.FlagsAttribute.#ctor">
      <summary>初始化 <see cref="T:System.FlagsAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.FormatException">
      <summary>当自变量的格式无效或复合格式字符串的格式不标准时引发的异常。</summary>
    </member>
    <member name="M:System.FormatException.#ctor">
      <summary>初始化 <see cref="T:System.FormatException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.FormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.FormatException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.FormatException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.FormatException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.FormatException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.FormatException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="T:System.FormattableString">
      <summary>表示复合格式字符串和要设置格式的参数。</summary>
    </member>
    <member name="M:System.FormattableString.#ctor">
      <summary>实例化 <see cref="T:System.FormattableString" /> 类的新实例。</summary>
    </member>
    <member name="P:System.FormattableString.ArgumentCount">
      <summary>获取要格式化的参数数量。</summary>
      <returns>要设置格式的参数的数目。</returns>
    </member>
    <member name="M:System.FormattableString.CurrentCulture(System.FormattableString)">
      <summary>返回一个结果字符串，其参数可以通过当前区域性的约定格式化。</summary>
      <param name="formattable">要格式化的字符串。</param>
      <returns>使用当前区域性的约定格式化当前实例生成的字符串。</returns>
    </member>
    <member name="P:System.FormattableString.Format">
      <summary>返回复合格式字符串。</summary>
      <returns>复合格式字符串。</returns>
    </member>
    <member name="M:System.FormattableString.GetArgument(System.Int32)">
      <summary>返回指定索引位置处的参数。</summary>
      <param name="index">自变量的索引。 其值的范围介于零到 <see cref="P:System.FormattableString.ArgumentCount" /> 值减去一之间。</param>
      <returns>自变量。</returns>
    </member>
    <member name="M:System.FormattableString.GetArguments">
      <summary>返回一个对象数组，其中包含一个或多个要设置格式的对象。</summary>
      <returns>一个对象数组，其中包含一个或多个要设置格式的对象。</returns>
    </member>
    <member name="M:System.FormattableString.Invariant(System.FormattableString)">
      <summary>返回一个结果字符串，其参数可以通过固定区域性的约定格式化。</summary>
      <param name="formattable">要转换为结果字符串的对象。</param>
      <returns>使用固定区域性的约定格式化当前实例生成的字符串。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formattable" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.FormattableString.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>返回使用指定区域性的格式化约定格式化格式字符串及其参数生成的字符串。</summary>
      <param name="ignored">一个字符串。 此参数忽略。</param>
      <param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
      <returns>使用 <paramref name="formatProvider" /> 参数的约定格式化的字符串。</returns>
    </member>
    <member name="M:System.FormattableString.ToString">
      <summary>返回使用当前区域性的格式化约定格式化复合格式字符串及其参数生成的字符串。</summary>
      <returns>使用当前区域性的约定格式化的结果字符串。</returns>
    </member>
    <member name="M:System.FormattableString.ToString(System.IFormatProvider)">
      <summary>返回使用指定区域性的格式化约定格式化复合格式字符串及其参数生成的字符串。</summary>
      <param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
      <returns>使用 <paramref name="formatProvider" /> 的约定格式化的结果字符串。</returns>
    </member>
    <member name="T:System.FtpStyleUriParser">
      <summary>基于文件传输协议 (FTP) 方案的可自定义分析器。</summary>
    </member>
    <member name="M:System.FtpStyleUriParser.#ctor">
      <summary>创建一个基于文件传输协议 (FTP) 方案的可自定义分析器。</summary>
    </member>
    <member name="T:System.Func`1">
      <summary>封装一个不具有参数但却返回 <typeparamref name="TResult" /> 参数指定的类型值的方法。</summary>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.Func`10">
      <summary>封装一个方法，该方法具有九个参数，并返回 <typeparamref name="TResult" /> 参数所指定的类型的值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.Func`11">
      <summary>封装一个方法，该方法具有 10 个参数，并返回 <typeparamref name="TResult" /> 参数所指定的类型的值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.Func`12">
      <summary>封装一个方法，该方法具有 11 个参数，并返回 <typeparamref name="TResult" /> 参数所指定的类型的值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.Func`13">
      <summary>封装一个方法，该方法具有 12 个参数，并返回 <typeparamref name="TResult" /> 参数所指定的类型的值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.Func`14">
      <summary>封装一个方法，该方法具有 13 个参数，并返回 <typeparamref name="TResult" /> 参数所指定的类型的值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.Func`15">
      <summary>封装一个方法，该方法具有 14 个参数，并返回 <typeparamref name="TResult" /> 参数所指定的类型的值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <param name="arg14">此委托封装的方法的第十四个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.Func`16">
      <summary>封装一个方法，该方法具有 15 个参数，并返回 <typeparamref name="TResult" /> 参数所指定的类型的值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <param name="arg14">此委托封装的方法的第十四个参数。</param>
      <param name="arg15">此委托封装的方法的第十五个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.Func`17">
      <summary>封装一个方法，该方法具有 16 个参数，并返回 <typeparamref name="TResult" /> 参数所指定的类型的值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <param name="arg9">此委托封装的方法的第九个参数。</param>
      <param name="arg10">此委托封装的方法的第十个参数。</param>
      <param name="arg11">此委托封装的方法的第十一个参数。</param>
      <param name="arg12">此委托封装的方法的第十二个参数。</param>
      <param name="arg13">此委托封装的方法的第十三个参数。</param>
      <param name="arg14">此委托封装的方法的第十四个参数。</param>
      <param name="arg15">此委托封装的方法的第十五个参数。</param>
      <param name="arg16">此委托封装的方法的第十六个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="T9">此委托封装的方法的第九个参数的类型。</typeparam>
      <typeparam name="T10">此委托封装的方法的第十个参数的类型。</typeparam>
      <typeparam name="T11">此委托封装的方法的第十一个参数的类型。</typeparam>
      <typeparam name="T12">此委托封装的方法的第十二个参数的类型。</typeparam>
      <typeparam name="T13">此委托封装的方法的第十三个参数的类型。</typeparam>
      <typeparam name="T14">此委托封装的方法的第十四个参数的类型。</typeparam>
      <typeparam name="T15">此委托封装的方法的第十五个参数的类型。</typeparam>
      <typeparam name="T16">此委托封装的方法的第十六个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.Func`2">
      <summary>封装一个具有一个参数并返回 <typeparamref name="TResult" /> 参数指定的类型值的方法。</summary>
      <param name="arg">此委托封装的方法的参数。</param>
      <typeparam name="T">此委托封装的方法的参数类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.Func`3">
      <summary>封装一个具有两个参数并返回 <typeparamref name="TResult" /> 参数指定的类型值的方法。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.Func`4">
      <summary>封装一个具有三个参数并返回 <typeparamref name="TResult" /> 参数指定的类型值的方法。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.Func`5">
      <summary>封装一个具有四个参数并返回 <typeparamref name="TResult" /> 参数指定的类型值的方法。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.Func`6">
      <summary>封装一个方法，该方法具有五个参数，并返回 <typeparamref name="TResult" /> 参数所指定的类型的值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.Func`7">
      <summary>封装一个方法，该方法有六个参数，并返回 <typeparamref name="TResult" /> 参数所指定的类型的值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.Func`8">
      <summary>封装一个函数，该方法具有三个参数，并返回 <typeparamref name="TResult" /> 参数所指定的类型的值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.Func`9">
      <summary>封装一个方法，该方法具有八个参数，并返回 <typeparamref name="TResult" /> 参数所指定的类型的值。</summary>
      <param name="arg1">此委托封装的方法的第一个参数。</param>
      <param name="arg2">此委托封装的方法的第二个参数。</param>
      <param name="arg3">此委托封装的方法的第三个参数。</param>
      <param name="arg4">此委托封装的方法的第四个参数。</param>
      <param name="arg5">此委托封装的方法的第五个参数。</param>
      <param name="arg6">此委托封装的方法的第六个参数。</param>
      <param name="arg7">此委托封装的方法的第七个参数。</param>
      <param name="arg8">此委托封装的方法的第八个参数。</param>
      <typeparam name="T1">此委托封装的方法的第一个参数的类型。</typeparam>
      <typeparam name="T2">此委托封装的方法的第二个参数的类型。</typeparam>
      <typeparam name="T3">此委托封装的方法的第三个参数的类型。</typeparam>
      <typeparam name="T4">此委托封装的方法的第四个参数的类型。</typeparam>
      <typeparam name="T5">此委托封装的方法的第五个参数的类型。</typeparam>
      <typeparam name="T6">此委托封装的方法的第六个参数的类型。</typeparam>
      <typeparam name="T7">此委托封装的方法的第七个参数的类型。</typeparam>
      <typeparam name="T8">此委托封装的方法的第八个参数的类型。</typeparam>
      <typeparam name="TResult">此委托封装的方法的返回值类型。</typeparam>
      <returns>此委托封装的方法的返回值。</returns>
    </member>
    <member name="T:System.GC">
      <summary>控制系统垃圾回收器（一种自动回收未使用内存的服务）。</summary>
    </member>
    <member name="M:System.GC.AddMemoryPressure(System.Int64)">
      <summary>通知运行时在安排垃圾回收时应考虑分配大量的非托管内存。</summary>
      <param name="bytesAllocated">已分配的非托管内存的增量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bytesAllocated" /> 小于或等于 0。  

或 - 
在 32 位的计算机上，<paramref name="bytesAllocated" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.GC.CancelFullGCNotification">
      <summary>取消注册垃圾回收通知。</summary>
      <exception cref="T:System.InvalidOperationException">此成员在启用并发垃圾回收时不可用。 若要了解如何禁用并发垃圾回收，请参阅 &lt;gcConcurrent&gt; 运行时设置。</exception>
    </member>
    <member name="M:System.GC.Collect">
      <summary>强制对所有代进行即时垃圾回收。</summary>
    </member>
    <member name="M:System.GC.Collect(System.Int32)">
      <summary>强制对 0 代到指定代进行即时垃圾回收。</summary>
      <param name="generation">最后一代进行垃圾回收次数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> 无效。</exception>
    </member>
    <member name="M:System.GC.Collect(System.Int32,System.GCCollectionMode)">
      <summary>强制在 <see cref="T:System.GCCollectionMode" /> 值所指定的时间对 0 代到指定代进行垃圾回收。</summary>
      <param name="generation">最后一代进行垃圾回收次数。</param>
      <param name="mode">一个枚举值，指定垃圾回收是强制进行（<see cref="F:System.GCCollectionMode.Default" /> 或 <see cref="F:System.GCCollectionMode.Forced" />）还是优化 (<see cref="F:System.GCCollectionMode.Optimized" />)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> 无效。  
或 
 <paramref name="mode" /> 不是 <see cref="T:System.GCCollectionMode" /> 值之一。</exception>
    </member>
    <member name="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean)">
      <summary>在由 <see cref="T:System.GCCollectionMode" /> 值指定的时间，强制对 0 代到指定代进行垃圾回收，另有数值指定回收是否应该为阻碍性。</summary>
      <param name="generation">最后一代进行垃圾回收次数。</param>
      <param name="mode">一个枚举值，指定垃圾回收是强制进行（<see cref="F:System.GCCollectionMode.Default" /> 或 <see cref="F:System.GCCollectionMode.Forced" />）还是优化 (<see cref="F:System.GCCollectionMode.Optimized" />)。</param>
      <param name="blocking">
        <see langword="true" /> 执行阻碍性垃圾回收；<see langword="false" /> 在可能的情况下执行后台垃圾回收。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> 无效。  

或 - 
<paramref name="mode" /> 不是 <see cref="T:System.GCCollectionMode" /> 值之一。</exception>
    </member>
    <member name="M:System.GC.Collect(System.Int32,System.GCCollectionMode,System.Boolean,System.Boolean)">
      <summary>在由 <see cref="T:System.GCCollectionMode" /> 值指定的时间，强制对 0 代到指定代进行垃圾回收，另有数值指定回收应该为阻碍性还是压缩性。</summary>
      <param name="generation">最后一代进行垃圾回收次数。</param>
      <param name="mode">一个枚举值，指定垃圾回收是强制进行（<see cref="F:System.GCCollectionMode.Default" /> 或 <see cref="F:System.GCCollectionMode.Forced" />）还是优化 (<see cref="F:System.GCCollectionMode.Optimized" />)。</param>
      <param name="blocking">
        <see langword="true" /> 执行阻碍性垃圾回收；<see langword="false" /> 在可能的情况下执行后台垃圾回收。</param>
      <param name="compacting">
        <see langword="true" /> 表示压缩小对象堆；<see langword="false" /> 表示仅进行清理。</param>
    </member>
    <member name="M:System.GC.CollectionCount(System.Int32)">
      <summary>返回已经对对象的指定代进行的垃圾回收次数。</summary>
      <param name="generation">对象的代，将针对此代确定垃圾回收计数。</param>
      <returns>自启动进程以来已经对指定代进行的垃圾回收次数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="generation" /> 小于 0。</exception>
    </member>
    <member name="M:System.GC.EndNoGCRegion">
      <summary>结束无 GC 区域延迟模式。</summary>
      <exception cref="T:System.InvalidOperationException">垃圾回收器不处于无 GC 区域延迟模式。  
或 
无 GC 区域延迟模式已结束，可能是因为已引发垃圾回收。  

或 - 
内存分配超过了 <see cref="M:System.GC.TryStartNoGCRegion(System.Int64)" /> 方法调用中指定的量。</exception>
    </member>
    <member name="M:System.GC.GetAllocatedBytesForCurrentThread">
      <summary>获取自当前线程的生存期开始以来分配给它的总字节数。</summary>
      <returns>自当前线程的生存期开始以来分配给它的总字节数。</returns>
    </member>
    <member name="M:System.GC.GetGCMemoryInfo">
      <summary>获取垃圾回收的内存信息。</summary>
      <returns>一个对象，该对象包含有关垃圾回收器的内存使用量的信息。</returns>
    </member>
    <member name="M:System.GC.GetGeneration(System.Object)">
      <summary>返回指定对象的当前代数。</summary>
      <param name="obj">检索其代信息的对象。</param>
      <returns>
        <paramref name="obj" /> 的当前代数。</returns>
    </member>
    <member name="M:System.GC.GetGeneration(System.WeakReference)">
      <summary>返回指定弱引用的目标的当前代数。</summary>
      <param name="wo">引用要确定其代数的目标对象的 <see cref="T:System.WeakReference" />。</param>
      <returns>
        <paramref name="wo" /> 的目标的当前代数。</returns>
      <exception cref="T:System.ArgumentException">已经对 <paramref name="wo" /> 执行了垃圾回收。</exception>
    </member>
    <member name="M:System.GC.GetTotalAllocatedBytes(System.Boolean)">
      <summary>获取在进程生命周期内分配的字节计数。</summary>
      <param name="precise">如果为 <see langword="true" />，则收集一个精确的数字；否则，收集近似计数。 收集精确值会大大降低性能。</param>
      <returns>在进程生命周期内分配的总字节数。</returns>
    </member>
    <member name="M:System.GC.GetTotalMemory(System.Boolean)">
      <summary>检索当前认为要分配的字节数。 一个参数，指示此方法是否可以等待较短间隔再返回，以便系统回收垃圾和终结对象。</summary>
      <param name="forceFullCollection">如果此方法可以在返回之前等待垃圾回收发生，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>一个数字，它是托管内存中当前所分配字节数的可用的最佳近似值。</returns>
    </member>
    <member name="M:System.GC.KeepAlive(System.Object)">
      <summary>引用指定对象，使其从当前例程开始到调用此方法的那一刻为止均不符合进行垃圾回收的条件。</summary>
      <param name="obj">要引用的对象。</param>
    </member>
    <member name="P:System.GC.MaxGeneration">
      <summary>获取系统当前支持的最大代数。</summary>
      <returns>从零到所支持的最大代数间的一个值。</returns>
    </member>
    <member name="M:System.GC.RegisterForFullGCNotification(System.Int32,System.Int32)">
      <summary>指定当条件支持完整垃圾回收以及回收完成时，应引发垃圾回收通知。</summary>
      <param name="maxGenerationThreshold">一个介于 1 和 99 之间的数字，指定根据在第 2 代中分配的对象，应何时引发通知。</param>
      <param name="largeObjectHeapThreshold">一个介于 1 和 99 之间的数字，指定根据大对象堆中分配的对象，应何时引发通知。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxGenerationThreshold" /> 或 <paramref name="largeObjectHeapThreshold" /> 不在 1 和 99 之间。</exception>
      <exception cref="T:System.InvalidOperationException">此成员在启用并发垃圾回收时不可用。 若要了解如何禁用并发垃圾回收，请参阅 &lt;gcConcurrent&gt; 运行时设置。</exception>
    </member>
    <member name="M:System.GC.RemoveMemoryPressure(System.Int64)">
      <summary>通知运行时已释放非托管内存，在安排垃圾回收时不需要再考虑它。</summary>
      <param name="bytesAllocated">已释放的非托管内存量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bytesAllocated" /> 小于或等于 0。  
或 
在 32 位的计算机上，<paramref name="bytesAllocated" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.GC.ReRegisterForFinalize(System.Object)">
      <summary>请求系统调用指定对象的终结器，此前已为该对象调用 <see cref="M:System.GC.SuppressFinalize(System.Object)" />。</summary>
      <param name="obj">必须为其调用终结器的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.GC.SuppressFinalize(System.Object)">
      <summary>请求公共语言运行时不要调用指定对象的终结器。</summary>
      <param name="obj">不得执行其终结器的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.GC.TryStartNoGCRegion(System.Int64)">
      <summary>如果指定数量的内存可用，则在关键路径执行期间尝试禁止垃圾回收。</summary>
      <param name="totalSize">在不会触发垃圾回收的情况下分配的内存量（以字节为单位）。 它必须小于或等于临时段的大小。 有关暂时段大小的信息，请参阅垃圾回收基础知识一文中“暂时代和暂时段”一节。</param>
      <returns>如果运行时能够调配所需数量的内存，且垃圾回收器能够进入无 GC 区域延迟模式，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalSize" /> 超出了暂时段大小。</exception>
      <exception cref="T:System.InvalidOperationException">进程已进入无 GC 区域延迟模式。</exception>
    </member>
    <member name="M:System.GC.TryStartNoGCRegion(System.Int64,System.Boolean)">
      <summary>如果指定数量的内存可用，则在关键路径执行期间尝试禁止垃圾回收；并在初始没有足够内存可用的情况下，控制垃圾回收器是否进行完整的阻碍性垃圾回收。</summary>
      <param name="totalSize">在不会触发垃圾回收的情况下分配的内存量（以字节为单位）。 它必须小于或等于临时段的大小。 有关暂时段大小的信息，请参阅垃圾回收基础知识一文中“暂时代和暂时段”一节。</param>
      <param name="disallowFullBlockingGC">
        <see langword="true" /> 表示如果垃圾回收器初始无法分配 <paramref name="totalSize" /> 字节，则忽略完整的阻碍性垃圾回收；否则为 <see langword="false" />。</param>
      <returns>如果运行时能够调配所需数量的内存，且垃圾回收器能够进入无 GC 区域延迟模式，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalSize" /> 超出了暂时段大小。</exception>
      <exception cref="T:System.InvalidOperationException">进程已进入无 GC 区域延迟模式。</exception>
    </member>
    <member name="M:System.GC.TryStartNoGCRegion(System.Int64,System.Int64)">
      <summary>如果指定数量的内存可用于大对象堆和小对象堆，则在关键路径执行期间尝试禁止垃圾回收。</summary>
      <param name="totalSize">在不会触发垃圾回收的情况下分配的内存量（以字节为单位）。 <paramref name="totalSize" /> -<paramref name="lohSize" /> 必须小于或等于临时段的大小。 有关暂时段大小的信息，请参阅垃圾回收基础知识一文中“暂时代和暂时段”一节。</param>
      <param name="lohSize">
        <paramref name="totalSize" /> 中用于大对象堆 (LOH) 分配的字节数。</param>
      <returns>如果运行时能够调配所需数量的内存，且垃圾回收器能够进入无 GC 区域延迟模式，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalSize" /> - <paramref name="lohSize" /> 超出了暂时段大小。</exception>
      <exception cref="T:System.InvalidOperationException">进程已进入无 GC 区域延迟模式。</exception>
    </member>
    <member name="M:System.GC.TryStartNoGCRegion(System.Int64,System.Int64,System.Boolean)">
      <summary>如果指定数量的内存可用大对象堆和小对象堆，则在关键路径执行期间尝试禁止垃圾回收；并在初始没有足够内存可用的情况下，控制垃圾回收器是否进行完整的阻碍性垃圾回收。</summary>
      <param name="totalSize">在不会触发垃圾回收的情况下分配的内存量（以字节为单位）。 <paramref name="totalSize" /> -<paramref name="lohSize" /> 必须小于或等于临时段的大小。 有关暂时段大小的信息，请参阅垃圾回收基础知识一文中“暂时代和暂时段”一节。</param>
      <param name="lohSize">
        <paramref name="totalSize" /> 中用于大对象堆 (LOH) 分配的字节数。</param>
      <param name="disallowFullBlockingGC">
        <see langword="true" /> 表示如果垃圾回收器初始无法分配小对象堆 (SOH) 和 LOH 上的指定内存，则忽略完整的阻碍性垃圾回收；否则为 <see langword="false" />。</param>
      <returns>如果运行时能够调配所需数量的内存，且垃圾回收器能够进入无 GC 区域延迟模式，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalSize" /> - <paramref name="lohSize" /> 超出了暂时段大小。</exception>
      <exception cref="T:System.InvalidOperationException">进程已进入无 GC 区域延迟模式。</exception>
    </member>
    <member name="M:System.GC.WaitForFullGCApproach">
      <summary>返回已注册通知的状态，用于确定公共语言运行时是否即将引发完整、阻碍性垃圾回收。</summary>
      <returns>已注册垃圾回收通知的状态。</returns>
    </member>
    <member name="M:System.GC.WaitForFullGCApproach(System.Int32)">
      <summary>在指定的超时期限内，返回已注册通知的状态，用于确定公共语言运行时是否即将引发完整、阻碍性垃圾回收。</summary>
      <param name="millisecondsTimeout">在获取通知状态前等待的时间长度。 指定 -1 表示无限期等待。</param>
      <returns>已注册垃圾回收通知的状态。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 必须为非负数，或者小于等于 <see cref="F:System.Int32.MaxValue" /> 或 -1。</exception>
    </member>
    <member name="M:System.GC.WaitForFullGCComplete">
      <summary>返回已注册通知的状态，用于确定公共语言运行时引发的完整、阻碍性垃圾回收是否已完成。</summary>
      <returns>已注册垃圾回收通知的状态。</returns>
    </member>
    <member name="M:System.GC.WaitForFullGCComplete(System.Int32)">
      <summary>在指定的超时期限内，返回已注册通知的状态，用于确定公共语言运行时引发的完整、阻碍性垃圾回收是否已完成。</summary>
      <param name="millisecondsTimeout">在获取通知状态前等待的时间长度。 指定 -1 表示无限期等待。</param>
      <returns>已注册垃圾回收通知的状态。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="millisecondsTimeout" /> 必须为非负数，或者小于等于 <see cref="F:System.Int32.MaxValue" /> 或 -1。</exception>
    </member>
    <member name="M:System.GC.WaitForPendingFinalizers">
      <summary>挂起当前线程，直到处理终结器队列的线程清空该队列为止。</summary>
    </member>
    <member name="T:System.GCCollectionMode">
      <summary>指定强制垃圾回收的行为。</summary>
    </member>
    <member name="F:System.GCCollectionMode.Default">
      <summary>此枚举的默认设置，它当前为 <see cref="F:System.GCCollectionMode.Forced" />。</summary>
    </member>
    <member name="F:System.GCCollectionMode.Forced">
      <summary>强制立即执行垃圾回收。</summary>
    </member>
    <member name="F:System.GCCollectionMode.Optimized">
      <summary>使垃圾回收器可以确定当前时间是否是回收对象的最佳时间。</summary>
    </member>
    <member name="T:System.GCMemoryInfo">
      <summary>提供一组可用于检索垃圾回收信息的 API。</summary>
    </member>
    <member name="P:System.GCMemoryInfo.FragmentedBytes">
      <summary>获取上次垃圾回收发生时的总片段数。</summary>
      <returns>一个整数, 表示上次垃圾回收发生时的碎片总计。</returns>
    </member>
    <member name="P:System.GCMemoryInfo.HeapSizeBytes">
      <summary>获取上次垃圾回收发生时的总堆大小。</summary>
      <returns>上次垃圾回收发生时堆的总大小 (以字节为单位)。</returns>
    </member>
    <member name="P:System.GCMemoryInfo.HighMemoryLoadThresholdBytes">
      <summary>获取上次垃圾回收发生时的高内存负载阈值。</summary>
      <returns>上次垃圾回收发生时的高内存负载阈值 (以字节为单位)。</returns>
    </member>
    <member name="P:System.GCMemoryInfo.MemoryLoadBytes">
      <summary>获取上次垃圾回收发生时的内存负载。</summary>
      <returns>上次垃圾回收发生时的内存负载。</returns>
    </member>
    <member name="P:System.GCMemoryInfo.TotalAvailableMemoryBytes">
      <summary>获取上次垃圾回收发生时垃圾回收器使用的总可用内存。</summary>
      <returns>上次垃圾回收发生时垃圾回收器使用的总可用内存 (以字节为单位)。</returns>
    </member>
    <member name="T:System.GCNotificationStatus">
      <summary>提供相关信息，介绍下一次完整垃圾回收通知的当前注册。</summary>
    </member>
    <member name="F:System.GCNotificationStatus.Canceled">
      <summary>用户已取消当前注册。</summary>
    </member>
    <member name="F:System.GCNotificationStatus.Failed">
      <summary>由于某种原因，通知失败。</summary>
    </member>
    <member name="F:System.GCNotificationStatus.NotApplicable">
      <summary>此结果可能由以下原因导致：没有垃圾回收通知的当前注册、启用了并发垃圾回收，或 <paramref name="millisecondsTimeout" /> 参数指定的时间已过期且未获得垃圾回收通知。 （若要了解如何禁用并发垃圾回收的，请参阅 &lt;gcConcurrent&gt; 运行时设置。）</summary>
    </member>
    <member name="F:System.GCNotificationStatus.Succeeded">
      <summary>已成功通知且未取消注册。</summary>
    </member>
    <member name="F:System.GCNotificationStatus.Timeout">
      <summary>
        <paramref name="millisecondsTimeout" /> 参数为 <see cref="M:System.GC.WaitForFullGCApproach(System.Int32)" /> 或 <see cref="M:System.GC.WaitForFullGCComplete(System.Int32)" /> 指定的时间已过。</summary>
    </member>
    <member name="T:System.GenericUriParser">
      <summary>用于分层 URI 的可自定义分析器。</summary>
    </member>
    <member name="M:System.GenericUriParser.#ctor(System.GenericUriParserOptions)">
      <summary>创建用于分层 URI 的可自定义分析器。</summary>
      <param name="options">为此 <see cref="T:System.GenericUriParser" /> 指定选项。</param>
    </member>
    <member name="T:System.GenericUriParserOptions">
      <summary>指定 <see cref="T:System.UriParser" /> 的选项。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.AllowEmptyAuthority">
      <summary>此分析器允许没有证书颁发机构的 URI。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Default">
      <summary>分析器：需要授权；将反斜杠转换为正斜杠；反转义路径点、正斜杠和反斜杠；并删除末尾的点、空段和只包含点的段。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontCompressPath">
      <summary>此分析器不对 URI 进行规范化。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontConvertPathBackslashes">
      <summary>此分析器不将反斜杠转换为正斜杠。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontUnescapePathDotsAndSlashes">
      <summary>此分析器不对路径点、正斜杠或反斜杠进行转义还原。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.GenericAuthority">
      <summary>此分析器允许基于注册表的证书颁发机构。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Idn">
      <summary>分析器支持对主机名进行国际化域名 (IDN) 语法分析。 是否使用 IDN 由配置值指定。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.IriParsing">
      <summary>分析器支持 RFC 3987 中指定的国际资源标识符 (IRI) 语法分析规则。 是否使用 IRI 由配置值指定。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoFragment">
      <summary>此方案不定义段部分。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoPort">
      <summary>此方案不定义端口。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoQuery">
      <summary>此方案不定义查询部分。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoUserInfo">
      <summary>此方案不定义用户信息部分。</summary>
    </member>
    <member name="T:System.Globalization.Calendar">
      <summary>表示部门中的时间（如周、月和年）。</summary>
    </member>
    <member name="M:System.Globalization.Calendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.Calendar" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定天数的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要向其添加天数的 <see cref="T:System.DateTime" />。</param>
      <param name="days">要添加的天数。</param>
      <returns>将指定天数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentException">得到的 <see cref="T:System.DateTime" /> 超出了此日历支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="days" /> 超出了 <see cref="T:System.DateTime" /> 返回值支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定小时数的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要向其添加小时数的 <see cref="T:System.DateTime" />。</param>
      <param name="hours">要添加的小时数。</param>
      <returns>将指定小时数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentException">得到的 <see cref="T:System.DateTime" /> 超出了此日历支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="hours" /> 超出了 <see cref="T:System.DateTime" /> 返回值支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定毫秒数的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要添加毫秒的 <see cref="T:System.DateTime" />。</param>
      <param name="milliseconds">要添加的毫秒数。</param>
      <returns>将指定毫秒数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentException">得到的 <see cref="T:System.DateTime" /> 超出了此日历支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="milliseconds" /> 超出了 <see cref="T:System.DateTime" /> 返回值支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定分钟数的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要向其添加分钟数的 <see cref="T:System.DateTime" />。</param>
      <param name="minutes">若要添加的分钟数。</param>
      <returns>将指定分钟数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentException">得到的 <see cref="T:System.DateTime" /> 超出了此日历支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="minutes" /> 超出了 <see cref="T:System.DateTime" /> 返回值支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)">
      <summary>当在派生类中重写时，将返回与指定 <see cref="T:System.DateTime" /> 相距指定月数的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">将向其添加月数的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要添加的月数。</param>
      <returns>将指定月数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentException">得到的 <see cref="T:System.DateTime" /> 超出了此日历支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 超出了 <see cref="T:System.DateTime" /> 返回值支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定秒数的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要向其添加秒数的 <see cref="T:System.DateTime" />。</param>
      <param name="seconds">要添加的秒数。</param>
      <returns>将指定的秒数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentException">得到的 <see cref="T:System.DateTime" /> 超出了此日历支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="seconds" /> 超出了 <see cref="T:System.DateTime" /> 返回值支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定周数的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要向其添加星期数的 <see cref="T:System.DateTime" />。</param>
      <param name="weeks">要添加的星期数。</param>
      <returns>将指定周数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentException">得到的 <see cref="T:System.DateTime" /> 超出了此日历支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="weeks" /> 超出了 <see cref="T:System.DateTime" /> 返回值支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)">
      <summary>当在派生类中重写时，将返回与指定 <see cref="T:System.DateTime" /> 相距指定年数的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">将向其添加年数的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要添加的年数。</param>
      <returns>将指定年数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentException">得到的 <see cref="T:System.DateTime" /> 超出了此日历支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="years" /> 超出了 <see cref="T:System.DateTime" /> 返回值支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.Calendar.AlgorithmType">
      <summary>获取一个值，该值指示当前日历是阳历、阴历还是二者的组合。</summary>
      <returns>
        <see cref="T:System.Globalization.CalendarAlgorithmType" /> 值之一。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.Clone">
      <summary>创建表示当前 <see cref="T:System.Globalization.Calendar" /> 对象副本的新对象。</summary>
      <returns>表示当前 <see cref="T:System.Globalization.Calendar" /> 对象成员副本的 <see cref="T:System.Object" /> 的新实例。</returns>
    </member>
    <member name="F:System.Globalization.Calendar.CurrentEra">
      <summary>表示当前日历的当前纪元。 字段的值为 0。</summary>
    </member>
    <member name="P:System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear">
      <summary>获取 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 属性指定的年份之前的年中天数。</summary>
      <returns>由 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 指定的在年之前的一年的天数。</returns>
    </member>
    <member name="P:System.Globalization.Calendar.Eras">
      <summary>当在派生类中重写时，获取当前日历中的纪元列表。</summary>
      <returns>表示当前日历中的纪元的整数数组。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)">
      <summary>当在派生类中重写时，将返回指定 <see cref="T:System.DateTime" /> 中的月中日期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个正整数，用于表示 <paramref name="time" /> 参数中的月中日期。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)">
      <summary>当在派生类中重写时，将返回指定 <see cref="T:System.DateTime" /> 中的周中日期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个 <see cref="T:System.DayOfWeek" /> 值，用于表示 <paramref name="time" /> 参数中的周中日期。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)">
      <summary>当在派生类中重写时，将返回指定 <see cref="T:System.DateTime" /> 中的年中日期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个正整数，用于表示 <paramref name="time" /> 参数中的年中日期。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)">
      <summary>返回当前纪元的指定月份和年份中的天数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">一个正整数，用于表示月份。</param>
      <returns>当前纪元中指定年份的指定月份中的天数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  

或 - 
<paramref name="month" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>当在派生类中重写时，返回指定月份、纪元年份中的天数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">一个正整数，用于表示月份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元中指定年份的指定月份中的天数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="month" /> 超出了日历支持的范围。  
或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInYear(System.Int32)">
      <summary>返回当前纪元中指定年份的天数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <returns>当前纪元中指定年份的天数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>当在派生类中重写时，返回指定纪元年份中的天数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元中指定年份的天数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetEra(System.DateTime)">
      <summary>当在派生类中重写时，将返回指定 <see cref="T:System.DateTime" /> 中的纪元。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个整数，用于表示 <paramref name="time" /> 中的纪元。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetHour(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的小时值。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>0 到 23 之间的一个整数，用于表示 <paramref name="time" /> 中的小时。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetLeapMonth(System.Int32)">
      <summary>计算指定年份的闰月。</summary>
      <param name="year">年份。</param>
      <returns>一个正整数，表示指定年份中的闰月。  
或 
如果此日历不支持闰月或 <paramref name="year" /> 参数不表示闰年，则为零。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>计算指定纪元年份的闰月。</summary>
      <param name="year">年份。</param>
      <param name="era">纪元。</param>
      <returns>一个正整数，用于表示指定纪元年份中的闰月。  
或 
如果此日历不支持闰月，或者 <paramref name="year" /> 和 <paramref name="era" /> 参数未指定闰年，则为零。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的毫秒值。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>从 0 到 999 之间的双精度浮点数，用于表示 <paramref name="time" /> 参数中的毫秒。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetMinute(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的分钟值。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>0 到 59 之间的一个整数，用于表示 <paramref name="time" /> 中的分钟。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonth(System.DateTime)">
      <summary>当在派生类中重写时，将返回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个正整数，用于表示 <paramref name="time" /> 中的月份。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)">
      <summary>返回当前纪元中指定年份的月数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <returns>当前纪元中指定年份的月数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>当在派生类中重写时，将返回指定纪元中指定年份的月数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元中指定年份的月数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  

或 - 
<paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetSecond(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的秒值。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>0 到 59 之间的一个整数，用于表示 <paramref name="time" /> 中的秒。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>返回一年中包含指定 <see cref="T:System.DateTime" /> 值中的日期的那个星期。</summary>
      <param name="time">日期和时间值。</param>
      <param name="rule">定义日历周的枚举值。</param>
      <param name="firstDayOfWeek">表示一周的第一天的枚举值。</param>
      <returns>一个正整数，用于表示一年中包含 <paramref name="time" /> 参数内日期所在的星期。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 早于 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 或晚于 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />。  
或 
 <paramref name="firstDayOfWeek" /> 不是有效的 <see cref="T:System.DayOfWeek" /> 值。  
或 
 <paramref name="rule" /> 不是有效的 <see cref="T:System.Globalization.CalendarWeekRule" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.GetYear(System.DateTime)">
      <summary>当在派生类中重写时，将返回指定 <see cref="T:System.DateTime" /> 中的年份。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个整数，用于表示 <paramref name="time" /> 中的年份。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)">
      <summary>确定当前纪元中的指定日期是否为闰日。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">一个正整数，用于表示月份。</param>
      <param name="day">一个正整数，用于表示天。</param>
      <returns>如果指定的日期是闰日，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="month" /> 超出了日历支持的范围。  

或 - 
<paramref name="day" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>当在派生类中重写时，将确定指定纪元中的指定日期是否为闰日。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">一个正整数，用于表示月份。</param>
      <param name="day">一个正整数，用于表示天。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>如果指定的日期是闰日，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="month" /> 超出了日历支持的范围。  
或 
 <paramref name="day" /> 超出了日历支持的范围。  
或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)">
      <summary>确定当前纪元中指定年份的指定月份是否为闰月。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">一个正整数，用于表示月份。</param>
      <returns>如果指定的月份是闰月，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="month" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>当在派生类中重写时，将确定指定纪元中指定年份的指定月份是否为闰月。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">一个正整数，用于表示月份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>如果指定的月份是闰月，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="month" /> 超出了日历支持的范围。  
或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapYear(System.Int32)">
      <summary>确定当前纪元中的指定年份是否为闰年。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <returns>如果指定的年是闰年，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>当在派生类中重写时，将确定指定纪元中的指定年份是否为闰年。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>如果指定的年是闰年，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.Calendar.IsReadOnly">
      <summary>获取一个值，该值指示此 <see cref="T:System.Globalization.Calendar" /> 对象是否为只读。</summary>
      <returns>如果此 <see cref="T:System.Globalization.Calendar" /> 对象为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Globalization.Calendar.MaxSupportedDateTime">
      <summary>获取此 <see cref="T:System.Globalization.Calendar" /> 对象支持的最晚日期和时间。</summary>
      <returns>此日历支持的最晚日期和时间。 默认值为 <see cref="F:System.DateTime.MaxValue" />。</returns>
    </member>
    <member name="P:System.Globalization.Calendar.MinSupportedDateTime">
      <summary>获取此 <see cref="T:System.Globalization.Calendar" /> 对象支持的最早日期和时间。</summary>
      <returns>此日历支持的最早日期和时间。 默认值为 <see cref="F:System.DateTime.MinValue" />。</returns>
    </member>
    <member name="M:System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)">
      <summary>返回指定的 <see cref="T:System.Globalization.Calendar" /> 对象的只读版本。</summary>
      <param name="calendar">一个 <see cref="T:System.Globalization.Calendar" /> 对象。</param>
      <returns>如果 <paramref name="calendar" /> 是只读的，则为由 <paramref name="calendar" /> 参数指定的 <see cref="T:System.Globalization.Calendar" /> 对象。  
或 
如果 <paramref name="calendar" /> 不是只读的，则为由 <paramref name="calendar" /> 指定的 <see cref="T:System.Globalization.Calendar" /> 对象的只读成员副本。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="calendar" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>返回设置为当前纪元中指定日期和时间的 <see cref="T:System.DateTime" />。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">一个正整数，用于表示月份。</param>
      <param name="day">一个正整数，用于表示天。</param>
      <param name="hour">0 到 23 之间的一个整数，用于表示小时。</param>
      <param name="minute">0 到 59 之间的一个整数，用于表示分钟。</param>
      <param name="second">0 到 59 之间的一个整数，用于表示秒。</param>
      <param name="millisecond">0 到 999 之间的一个整数，用于表示毫秒。</param>
      <returns>设置为当前纪元中指定日期和时间的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="month" /> 超出了日历支持的范围。  

或 - 
<paramref name="day" /> 超出了日历支持的范围。  

或 
 <paramref name="hour" /> 小于 0 或大于 23。  
或 
 <paramref name="minute" /> 小于 0 或大于 59。  

或 - 
<paramref name="second" /> 小于 0 或大于 59。  

或 
 <paramref name="millisecond" /> 小于 0 或大于 999。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>当在派生类中重写时，将返回设置为指定纪元中指定日期和时间的 <see cref="T:System.DateTime" />。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">一个正整数，用于表示月份。</param>
      <param name="day">一个正整数，用于表示天。</param>
      <param name="hour">0 到 23 之间的一个整数，用于表示小时。</param>
      <param name="minute">0 到 59 之间的一个整数，用于表示分钟。</param>
      <param name="second">0 到 59 之间的一个整数，用于表示秒。</param>
      <param name="millisecond">0 到 999 之间的一个整数，用于表示毫秒。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>设置为当前纪元中指定日期和时间的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="month" /> 超出了日历支持的范围。  

或 - 
<paramref name="day" /> 超出了日历支持的范围。  

或 
 <paramref name="hour" /> 小于 0 或大于 23。  

或 - 
<paramref name="minute" /> 小于 0 或大于 59。  

或 - 
<paramref name="second" /> 小于 0 或大于 59。  

或 - 
<paramref name="millisecond" /> 小于 0 或大于 999。  


或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.Calendar.ToFourDigitYear(System.Int32)">
      <summary>使用 <see cref="P:System.Globalization.Calendar.TwoDigitYearMax" /> 属性将指定的年份转换为四位数年份，以确定相应的纪元。</summary>
      <param name="year">一个两位数或四位数的整数，用于表示要转换的年份。</param>
      <returns>包含 <paramref name="year" /> 的四位数表示形式的整数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.Calendar.TwoDigitYearMax">
      <summary>获取或设置可以用两位数年份表示的 100 年范围内的最后一年。</summary>
      <returns>可以用两位数年份表示的 100 年范围内的最后一年。</returns>
      <exception cref="T:System.InvalidOperationException">当前 <see cref="T:System.Globalization.Calendar" /> 对象为只读。</exception>
    </member>
    <member name="T:System.Globalization.CalendarAlgorithmType">
      <summary>指定日历是阳历、阴历还是阴阳历。</summary>
    </member>
    <member name="F:System.Globalization.CalendarAlgorithmType.LunarCalendar">
      <summary>阴历。</summary>
    </member>
    <member name="F:System.Globalization.CalendarAlgorithmType.LunisolarCalendar">
      <summary>阴阳历。</summary>
    </member>
    <member name="F:System.Globalization.CalendarAlgorithmType.SolarCalendar">
      <summary>阳历。</summary>
    </member>
    <member name="F:System.Globalization.CalendarAlgorithmType.Unknown">
      <summary>未知日历。</summary>
    </member>
    <member name="T:System.Globalization.CalendarWeekRule">
      <summary>定义确定年份第一周的不同规则。</summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstDay">
      <summary>指示年的第一周从该年的第一天开始，到所指定周的下一个首日前结束。 值为 0。</summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstFourDayWeek">
      <summary>指示年的第一周是第一个在指定的周首日前包含四天或更多天的周。 值为 2。</summary>
    </member>
    <member name="F:System.Globalization.CalendarWeekRule.FirstFullWeek">
      <summary>指示年的第一周从所指定周首日的第一个匹配项开始，可以是年的第一天或其后某一天。 值为 1。</summary>
    </member>
    <member name="T:System.Globalization.CharUnicodeInfo">
      <summary>检索关于 Unicode 字符的信息。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)">
      <summary>获取指定数值型字符的十进制数字值。</summary>
      <param name="ch">要获取其十进制数字值的 Unicode 字符。</param>
      <returns>指定数值型字符的十进制数字值。  
 或  
 如果指定字符不是十进制数字，则为 -1。</returns>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)">
      <summary>获取位于指定字符串的指定索引处的数值型字符的十进制数字值。</summary>
      <param name="s">包含要获取其十进制数字值的 Unicode 字符的 <see cref="T:System.String" />。</param>
      <param name="index">要获取其十进制数字值的 Unicode 字符的索引。</param>
      <returns>位于指定字符串的指定索引处的数值型字符的十进制数字值。  
 或  
 如果位于指定字符串的指定索引位处的字符不是十进制数字，则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出 <paramref name="s" /> 中的有效索引范围。</exception>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)">
      <summary>获取指定数值型字符的数字值。</summary>
      <param name="ch">要为其获取数字值的 Unicode 字符。</param>
      <returns>指定数值型字符的数字值。  
 或  
 如果指定的字符不是数字，则为 -1。</returns>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)">
      <summary>获取位于指定字符串的指定索引处的数值型字符的数字值。</summary>
      <param name="s">包含要获取其数字值的 Unicode 字符的 <see cref="T:System.String" />。</param>
      <param name="index">要获取其数字值的 Unicode 字符的索引。</param>
      <returns>位于指定字符串的指定索引处的数值型字符的数字值。  
 或  
 如果位于指定字符串的指定索引处的字符不是数字，则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出 <paramref name="s" /> 中的有效索引范围。</exception>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)">
      <summary>获取与指定字符关联的数值。</summary>
      <param name="ch">要获取其数值的 Unicode 字符。</param>
      <returns>与指定字符关联的数值。  

或 -  

 如果指定的字符不是数值型字符，则为 -1。</returns>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)">
      <summary>获取与位于指定字符串的指定索引处的字符关联的数值。</summary>
      <param name="s">包含要获取其数值的 Unicode 字符的 <see cref="T:System.String" />。</param>
      <param name="index">要获取其数值的 Unicode 字符的索引。</param>
      <returns>与位于指定字符串的指定索引处的字符关联的数值。  

或 -  

 如果位于指定字符串的指定索引处的字符不是数值型字符，则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出 <paramref name="s" /> 中的有效索引范围。</exception>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)">
      <summary>获取指定字符的 Unicode 类别。</summary>
      <param name="ch">要获取其 Unicode 类别的 Unicode 字符。</param>
      <returns>指示指定字符类别的 <see cref="T:System.Globalization.UnicodeCategory" /> 值。</returns>
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Int32)">
      <param name="codePoint" />
    </member>
    <member name="M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)">
      <summary>获取位于指定字符串的指定索引处的字符的 Unicode 类别。</summary>
      <param name="s">包含要获取其 Unicode 类别的 Unicode 字符的 <see cref="T:System.String" />。</param>
      <param name="index">要获取其 Unicode 类别的 Unicode 字符的索引。</param>
      <returns>指示位于指定字符串的指定索引处的字符类别的 <see cref="T:System.Globalization.UnicodeCategory" /> 值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出 <paramref name="s" /> 中的有效索引范围。</exception>
    </member>
    <member name="T:System.Globalization.ChineseLunisolarCalendar">
      <summary>表示时间划分方式，例如“月”、“日”和“年”。 年按农历计算，而日和月按阴阳历计算。</summary>
    </member>
    <member name="M:System.Globalization.ChineseLunisolarCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.ChineseLunisolarCalendar" /> 类的新实例。</summary>
    </member>
    <member name="F:System.Globalization.ChineseLunisolarCalendar.ChineseEra">
      <summary>指定对应于当前 <see cref="T:System.Globalization.ChineseLunisolarCalendar" /> 对象的纪元。</summary>
    </member>
    <member name="P:System.Globalization.ChineseLunisolarCalendar.DaysInYearBeforeMinSupportedYear">
      <summary>获取 <see cref="P:System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime" /> 属性指定的年份之前的年中天数。</summary>
      <returns>由 <see cref="P:System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime" /> 指定的在年之前的一年的天数。</returns>
    </member>
    <member name="P:System.Globalization.ChineseLunisolarCalendar.Eras">
      <summary>获取与当前 <see cref="T:System.Globalization.ChineseLunisolarCalendar" /> 对象支持的日期和时间范围对应的纪元。</summary>
      <returns>32 位有符号整数数组，用于指定相关的纪元。 <see cref="T:System.Globalization.ChineseLunisolarCalendar" /> 对象的返回值始终是包含一个等于 <see cref="F:System.Globalization.ChineseLunisolarCalendar.ChineseEra" /> 值的元素的数组。</returns>
    </member>
    <member name="M:System.Globalization.ChineseLunisolarCalendar.GetEra(System.DateTime)">
      <summary>检索对应于指定 <see cref="T:System.DateTime" /> 类型的纪元。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" /> 类型。</param>
      <returns>一个整数，表示 <paramref name="time" /> 参数中的纪元。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 小于 <see cref="P:System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime" /> 或大于 <see cref="P:System.Globalization.ChineseLunisolarCalendar.MaxSupportedDateTime" />。</exception>
    </member>
    <member name="P:System.Globalization.ChineseLunisolarCalendar.MaxSupportedDateTime">
      <summary>获取 <see cref="T:System.Globalization.ChineseLunisolarCalendar" /> 类支持的最晚日期和时间。</summary>
      <returns>一<see cref="T:System.DateTime" />种类型, 它表示公历上2101年1月28日 (约等于构造函数<c>DateTime (2101, 1, 28, 23, 59, 59, 999)</c>的最后一刻。</returns>
    </member>
    <member name="P:System.Globalization.ChineseLunisolarCalendar.MinSupportedDateTime">
      <summary>获取 <see cref="T:System.Globalization.ChineseLunisolarCalendar" /> 类支持的最早日期和时间。</summary>
      <returns>表示公历中1901年2月19日的类型,等效于构造函数,DateTime(1901,2,19)。<see cref="T:System.DateTime" /><c></c></returns>
    </member>
    <member name="T:System.Globalization.CompareInfo">
      <summary>实现用于区分区域性的字符串的一组方法。</summary>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>将一个字符串的一部分与另一个字符串的一部分相比较。</summary>
      <param name="string1">要比较的第一个字符串。</param>
      <param name="offset1">
        <paramref name="string1" /> 中的字符从零开始的索引，将从此位置开始比较。</param>
      <param name="length1">
        <paramref name="string1" /> 中要比较的连续字符数。</param>
      <param name="string2">要比较的第二个字符串。</param>
      <param name="offset2">
        <paramref name="string2" /> 中的字符从零开始的索引，将从此位置开始比较。</param>
      <param name="length2">
        <paramref name="string2" /> 中要比较的连续字符数。</param>
      <returns>一个 32 位有符号整数，指示两个比较数之间的词法关系。
  值

  条件

  零

  这两个字符串相等。

  小于零

  <paramref name="string1" /> 的指定部分小于 <paramref name="string2" /> 的指定部分。

  大于零

  <paramref name="string1" /> 的指定部分大于 <paramref name="string2" /> 的指定部分。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" />、<paramref name="length1" />、<paramref name="offset2" /> 或 <paramref name="length2" /> 小于零。
或
 <paramref name="offset1" /> 大于或等于 <paramref name="string1" /> 中的字符数。
或
 <paramref name="offset2" /> 大于或等于 <paramref name="string2" /> 中的字符数。
或
 <paramref name="length1" /> 大于从 <paramref name="offset1" /> 到 <paramref name="string1" /> 末尾的字符数。

或 -

 <paramref name="length2" /> 大于从 <paramref name="offset2" /> 到 <paramref name="string2" /> 末尾的字符数。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值将一个字符串的一部分与另一个字符串的一部分相比较。</summary>
      <param name="string1">要比较的第一个字符串。</param>
      <param name="offset1">
        <paramref name="string1" /> 中的字符从零开始的索引，将从此位置开始比较。</param>
      <param name="length1">
        <paramref name="string1" /> 中要比较的连续字符数。</param>
      <param name="string2">要比较的第二个字符串。</param>
      <param name="offset2">
        <paramref name="string2" /> 中的字符从零开始的索引，将从此位置开始比较。</param>
      <param name="length2">
        <paramref name="string2" /> 中要比较的连续字符数。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="string1" /> 和 <paramref name="string2" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> 和 <see cref="F:System.Globalization.CompareOptions.StringSort" />。</param>
      <returns>一个 32 位有符号整数，指示两个比较数之间的词法关系。
  值

  条件

  零

  这两个字符串相等。

  小于零

  <paramref name="string1" /> 的指定部分小于 <paramref name="string2" /> 的指定部分。

  大于零

  <paramref name="string1" /> 的指定部分大于 <paramref name="string2" /> 的指定部分。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" />、<paramref name="length1" />、<paramref name="offset2" /> 或 <paramref name="length2" /> 小于零。
或
 <paramref name="offset1" /> 大于或等于 <paramref name="string1" /> 中的字符数。
或
 <paramref name="offset2" /> 大于或等于 <paramref name="string2" /> 中的字符数。
或
 <paramref name="length1" /> 大于从 <paramref name="offset1" /> 到 <paramref name="string1" /> 末尾的字符数。
或
 <paramref name="length2" /> 大于从 <paramref name="offset2" /> 到 <paramref name="string2" /> 末尾的字符数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)">
      <summary>将一个字符串的结尾部分与另一个字符串的结尾部分相比较。</summary>
      <param name="string1">要比较的第一个字符串。</param>
      <param name="offset1">
        <paramref name="string1" /> 中的字符从零开始的索引，将从此位置开始比较。</param>
      <param name="string2">要比较的第二个字符串。</param>
      <param name="offset2">
        <paramref name="string2" /> 中的字符从零开始的索引，将从此位置开始比较。</param>
      <returns>一个 32 位有符号整数，指示两个比较数之间的词法关系。
  值

  条件

  零

  这两个字符串相等。

  小于零

  <paramref name="string1" /> 的指定部分小于 <paramref name="string2" /> 的指定部分。

  大于零

  <paramref name="string1" /> 的指定部分大于 <paramref name="string2" /> 的指定部分。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" /> 或 <paramref name="offset2" /> 小于零。
或
 <paramref name="offset1" /> 大于或等于 <paramref name="string1" /> 中的字符数。
或
 <paramref name="offset2" /> 大于或等于 <paramref name="string2" /> 中的字符数。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值将一个字符串的结尾部分与另一个字符串的结尾部分相比较。</summary>
      <param name="string1">要比较的第一个字符串。</param>
      <param name="offset1">
        <paramref name="string1" /> 中的字符从零开始的索引，将从此位置开始比较。</param>
      <param name="string2">要比较的第二个字符串。</param>
      <param name="offset2">
        <paramref name="string2" /> 中的字符从零开始的索引，将从此位置开始比较。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="string1" /> 和 <paramref name="string2" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> 和 <see cref="F:System.Globalization.CompareOptions.StringSort" />。</param>
      <returns>一个 32 位有符号整数，指示两个比较数之间的词法关系。
  值

  条件

  零

  这两个字符串相等。

  小于零

  <paramref name="string1" /> 的指定部分小于 <paramref name="string2" /> 的指定部分。

  大于零

  <paramref name="string1" /> 的指定部分大于 <paramref name="string2" /> 的指定部分。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset1" /> 或 <paramref name="offset2" /> 小于零。

或 -

 <paramref name="offset1" /> 大于或等于 <paramref name="string1" /> 中的字符数。
或
 <paramref name="offset2" /> 大于或等于 <paramref name="string2" /> 中的字符数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.String)">
      <summary>比较两个字符串。</summary>
      <param name="string1">要比较的第一个字符串。</param>
      <param name="string2">要比较的第二个字符串。</param>
      <returns>一个 32 位有符号整数，指示两个比较数之间的词法关系。
  值

  条件

  零

  这两个字符串相等。

  小于零

 <paramref name="string1" /> 小于 <paramref name="string2" />。

  大于零

 <paramref name="string1" /> 大于 <paramref name="string2" />。</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值比较两个字符串。</summary>
      <param name="string1">要比较的第一个字符串。</param>
      <param name="string2">要比较的第二个字符串。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="string1" /> 和 <paramref name="string2" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" /> 和 <see cref="F:System.Globalization.CompareOptions.StringSort" />。</param>
      <returns>一个 32 位有符号整数，指示两个比较数之间的词法关系。
  值

  条件

  零

  这两个字符串相等。

  小于零

 <paramref name="string1" /> 小于 <paramref name="string2" />。

  大于零

 <paramref name="string1" /> 大于 <paramref name="string2" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前 <see cref="T:System.Globalization.CompareInfo" /> 对象。</summary>
      <param name="value">将与当前 <see cref="T:System.Globalization.CompareInfo" /> 进行比较的对象。</param>
      <returns>如果指定的对象等于当前的 <see cref="T:System.Globalization.CompareInfo" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32)">
      <summary>初始化与具有指定标识符的区域性关联的新 <see cref="T:System.Globalization.CompareInfo" /> 对象。</summary>
      <param name="culture">表示区域性标识符的整数。</param>
      <returns>一个新 <see cref="T:System.Globalization.CompareInfo" /> 对象，它与具有指定标识符的区域性关联，并使用当前 <see cref="T:System.Reflection.Assembly" /> 中的字符串比较方法。</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32,System.Reflection.Assembly)">
      <summary>初始化一个新的 <see cref="T:System.Globalization.CompareInfo" /> 对象，该对象与指定区域性关联，并使用指定 <see cref="T:System.Reflection.Assembly" /> 中的字符串比较方法。</summary>
      <param name="culture">表示区域性标识符的整数。</param>
      <param name="assembly">一个 <see cref="T:System.Reflection.Assembly" />，它包含将使用的字符串比较方法。</param>
      <returns>一个新 <see cref="T:System.Globalization.CompareInfo" /> 对象，它与具有指定标识符的区域性关联，并使用当前 <see cref="T:System.Reflection.Assembly" /> 中的字符串比较方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assembly" /> 属于无效类型。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetCompareInfo(System.String)">
      <summary>初始化与具有指定名称的区域性关联的新 <see cref="T:System.Globalization.CompareInfo" /> 对象。</summary>
      <param name="name">表示区域性名称的字符串。</param>
      <returns>一个新 <see cref="T:System.Globalization.CompareInfo" /> 对象，它与具有指定标识符的区域性关联，并使用当前 <see cref="T:System.Reflection.Assembly" /> 中的字符串比较方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是无效的区域性名称。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetCompareInfo(System.String,System.Reflection.Assembly)">
      <summary>初始化一个新的 <see cref="T:System.Globalization.CompareInfo" /> 对象，该对象与指定区域性关联，并使用指定 <see cref="T:System.Reflection.Assembly" /> 中的字符串比较方法。</summary>
      <param name="name">表示区域性名称的字符串。</param>
      <param name="assembly">一个 <see cref="T:System.Reflection.Assembly" />，它包含将使用的字符串比较方法。</param>
      <returns>一个新 <see cref="T:System.Globalization.CompareInfo" /> 对象，它与具有指定标识符的区域性关联，并使用当前 <see cref="T:System.Reflection.Assembly" /> 中的字符串比较方法。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。

或 -

 <paramref name="assembly" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是无效的区域性名称。

或 -

 <paramref name="assembly" /> 属于无效类型。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetHashCode">
      <summary>用作当前 <see cref="T:System.Globalization.CompareInfo" /> 的哈希函数，适合在哈希算法和数据结构（如哈希表）中使用。</summary>
      <returns>当前 <see cref="T:System.Globalization.CompareInfo" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetHashCode(System.ReadOnlySpan{System.Char},System.Globalization.CompareOptions)">
      <summary>根据指定的比较选项获取字符范围的哈希代码。</summary>
      <param name="source">要返回其哈希代码的字符范围。</param>
      <param name="options">确定如何比较字符串的值。</param>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)">
      <summary>根据指定的比较选项获取字符串的哈希代码。</summary>
      <param name="source">要返回其哈希代码的字符串。</param>
      <param name="options">确定如何比较字符串的值。</param>
      <returns>32 位有符号整数哈希代码。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetSortKey(System.String)">
      <summary>获取指定字符串的排序关键字。</summary>
      <param name="source">获取其 <see cref="T:System.Globalization.SortKey" /> 对象的字符串。</param>
      <returns>包含指定字符串的排序关键字的 <see cref="T:System.Globalization.SortKey" /> 对象。</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.SortKey" /> 值获取指定字符串的 <see cref="T:System.Globalization.CompareOptions" /> 对象。</summary>
      <param name="source">获取其 <see cref="T:System.Globalization.SortKey" /> 对象的字符串。</param>
      <param name="options">以下一个或多个定义该排序关键字如何计算的枚举值的按位组合: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />、 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />和 <see cref="F:System.Globalization.CompareOptions.StringSort" />。</param>
      <returns>包含指定字符串的排序关键字的 <see cref="T:System.Globalization.SortKey" /> 对象。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)">
      <summary>搜索指定的字符并返回整个源字符串内第一个匹配项的从零开始的索引。</summary>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符。</param>
      <returns>如果找到，则为 <paramref name="value" /> 在 <paramref name="source" /> 内的第一个匹配项从零开始的索引；否则为 -1。 如果 <paramref name="value" /> 为可忽略字符，则将返回 0（零）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜索指定的字符，并返回整个源字符串内第一个匹配项的从零开始的索引。</summary>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符。</param>
      <param name="options">一个值，用于定义应如何比较这些字符串。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>如果在 <paramref name="value" /> 中找到 <paramref name="source" /> 的第一个匹配项的从零开始的索引，使用指定的比较选项；否则为 -1。 如果 <paramref name="value" /> 为可忽略字符，则将返回 0（零）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)">
      <summary>搜索指定的字符，并返回源字符串内从指定的索引位置到字符串结尾这一部分中第一个匹配项的从零开始的索引。</summary>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符。</param>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <returns>如果在部分 <paramref name="value" />（从 <paramref name="source" /> 到 <paramref name="startIndex" /> 的结尾这一部分）中找到 <paramref name="source" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="startIndex" /> 为可忽略字符，则将返回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜索指定的字符，并返回源字符串中从指定的索引位置到字符串结尾这一部分中第一个匹配项的从零开始的索引。</summary>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符。</param>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>使用指定的比较选项，如果在 <paramref name="value" /> 中从 <paramref name="source" /> 一直到 <paramref name="startIndex" /> 的结尾这部分找到 <paramref name="source" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="startIndex" /> 为可忽略字符，则将返回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)">
      <summary>搜索指定的字符，并返回源字符串内从指定的索引位置开始、包含指定的元素数的部分中第一个匹配项的从零开始的索引。</summary>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符。</param>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <returns>如果在 <paramref name="value" /> 的从 <paramref name="source" /> 开始、包含 <paramref name="startIndex" /> 所指定的元素数的部分中，找到 <paramref name="count" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="startIndex" /> 为可忽略字符，则将返回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。
或
 <paramref name="count" /> 小于零。
或
 <paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="source" /> 中指定有效部分。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜索指定的字符，并返回源字符串内从指定的索引位置开始、包含所指定元素数的部分中第一个匹配项的从零开始的索引。</summary>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符。</param>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>使用指定的比较选项，如果在 <paramref name="value" /> 中从 <paramref name="source" /> 开始、包含 <paramref name="startIndex" /> 指定的元素数的部分找到 <paramref name="count" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="startIndex" /> 为可忽略字符，则将返回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。
或
 <paramref name="count" /> 小于零。
或
 <paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="source" /> 中指定有效部分。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)">
      <summary>搜索指定的子字符串并返回整个源字符串内第一个匹配项的从零开始的索引。</summary>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符串。</param>
      <returns>如果找到，则为 <paramref name="value" /> 在 <paramref name="source" /> 内的第一个匹配项从零开始的索引；否则为 -1。 如果 <paramref name="value" /> 为可忽略字符，则将返回 0（零）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
或
 <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜索指定的子字符串，并返回整个源字符串内第一个匹配项的从零开始的索引。</summary>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符串。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>如果在 <paramref name="value" /> 中找到 <paramref name="source" /> 的第一个匹配项的从零开始的索引，使用指定的比较选项；否则为 -1。 如果 <paramref name="value" /> 为可忽略字符，则将返回 0（零）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
或
 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)">
      <summary>搜索指定的子字符串，并返回源字符串内从指定的索引位置到字符串结尾这一部分中第一个匹配项的从零开始的索引。</summary>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符串。</param>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <returns>如果在部分 <paramref name="value" />（从 <paramref name="source" /> 到 <paramref name="startIndex" /> 的结尾这一部分）中找到 <paramref name="source" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="startIndex" /> 为可忽略字符，则将返回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。

或 -

 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜索指定的子字符串，并返回源字符串内从指定的索引位置到字符串结尾这一部分中第一个匹配项的从零开始的索引。</summary>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符串。</param>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>使用指定的比较选项，如果在 <paramref name="value" /> 中从 <paramref name="source" /> 一直到 <paramref name="startIndex" /> 的结尾这部分找到 <paramref name="source" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="startIndex" /> 为可忽略字符，则将返回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。

或 -

 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)">
      <summary>搜索指定的子字符串，并返回源字符串内从指定的索引位置开始、包含指定的元素数的部分中第一个匹配项的从零开始的索引。</summary>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符串。</param>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <returns>如果在 <paramref name="value" /> 的从 <paramref name="source" /> 开始、包含 <paramref name="startIndex" /> 所指定的元素数的部分中，找到 <paramref name="count" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="startIndex" /> 为可忽略字符，则将返回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
或
 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。
或
 <paramref name="count" /> 小于零。

或 -

 <paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="source" /> 中指定有效部分。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜索指定的子字符串，并返回源字符串内从指定的索引位置开始、包含所指定元素数的部分中第一个匹配项的从零开始的索引。</summary>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符串。</param>
      <param name="startIndex">从零开始的搜索的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>使用指定的比较选项，如果在 <paramref name="value" /> 中从 <paramref name="source" /> 开始、包含 <paramref name="startIndex" /> 指定的元素数的部分找到 <paramref name="count" /> 的第一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="startIndex" /> 为可忽略字符，则将返回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
或
 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。
或
 <paramref name="count" /> 小于零。
或
 <paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="source" /> 中指定有效部分。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)">
      <summary>确定指定的源字符串是否以指定的前缀开头。</summary>
      <param name="source">要在其中搜索的字符串。</param>
      <param name="prefix">要与 <paramref name="source" /> 的开头进行比较的字符串。</param>
      <returns>如果 <paramref name="prefix" /> 的长度小于或等于 <paramref name="source" /> 的长度，并且 <paramref name="source" /> 以 <paramref name="prefix" /> 开始，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。

或 -

 <paramref name="prefix" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值确定指定的源字符串是否以指定的前缀开头。</summary>
      <param name="source">要在其中搜索的字符串。</param>
      <param name="prefix">要与 <paramref name="source" /> 的开头进行比较的字符串。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="prefix" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>如果 <paramref name="prefix" /> 的长度小于或等于 <paramref name="source" /> 的长度，并且 <paramref name="source" /> 以 <paramref name="prefix" /> 开始，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
或
 <paramref name="prefix" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsSortable(System.Char)">
      <summary>指示指定的 Unicode 字符是否可排序。</summary>
      <param name="ch">一个 Unicode 字符。</param>
      <returns>如果 <paramref name="ch" /> 参数可排序，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsSortable(System.String)">
      <summary>指示指定的 Unicode 字符串是否可排序。</summary>
      <param name="text">由 0 或更多 Unicode 字符组成的字符串。</param>
      <returns>如果 <paramref name="str" /> 参数不是空字符串 ("") 且 <paramref name="str" /> 中的所有 Unicode 字符都是可排序的，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)">
      <summary>确定指定的源字符串是否以指定的后缀结尾。</summary>
      <param name="source">要在其中搜索的字符串。</param>
      <param name="suffix">要与 <paramref name="source" /> 的结尾进行比较的字符串。</param>
      <returns>如果 <paramref name="suffix" /> 的长度小于或等于 <paramref name="source" /> 的长度，并且 <paramref name="source" /> 以 <paramref name="suffix" /> 结尾，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
或
 <paramref name="suffix" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值确定指定的源字符串是否以指定的后缀结尾。</summary>
      <param name="source">要在其中搜索的字符串。</param>
      <param name="suffix">要与 <paramref name="source" /> 的结尾进行比较的字符串。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="suffix" />。 <paramref name="options" /> 可以为其自身使用的枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>如果 <paramref name="suffix" /> 的长度小于或等于 <paramref name="source" /> 的长度，并且 <paramref name="source" /> 以 <paramref name="suffix" /> 结尾，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
或
 <paramref name="suffix" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)">
      <summary>搜索指定的字符，并返回整个源字符串内最后一个匹配项的从零开始的索引。</summary>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符。</param>
      <returns>如果找到，则为 <paramref name="value" /> 在 <paramref name="source" /> 内的最后一个匹配项从零开始的索引；否则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜索指定的字符，并返回整个源字符串内最后一个匹配项的从零开始的索引。</summary>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>使用指定的比较选项，如果在<paramref name="value" /> 中找到 <paramref name="source" /> 的最后一个匹配项，则为从零开始的索引；否则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)">
      <summary>搜索指定的字符，并返回源字符串内从字符串开头到指定的索引位置这一部分中最后一个匹配项的从零开始的索引。</summary>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <returns>如果在部分 <paramref name="value" />（从 <paramref name="source" /> 的开头到 <paramref name="source" /> 这一部分）中找到 <paramref name="startIndex" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="startIndex" /> 为可忽略字符，则将返回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜索指定的字符，并返回源字符串内从字符串开头到指定的索引位置这一部分中最后一个匹配项的从零开始的索引。</summary>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>使用指定的比较选项，如果在 <paramref name="value" /> 中从 <paramref name="source" /> 一直到 <paramref name="source" /> 的开始这部分找到 <paramref name="startIndex" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="startIndex" /> 为可忽略字符，则将返回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)">
      <summary>搜索指定的字符，并返回源字符串内包含指定的元素数、以指定的索引位置结尾的部分中最后一个匹配项的从零开始的索引。</summary>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <returns>在包含 <paramref name="value" /> 所指定的元素数并以 <paramref name="source" /> 结尾的这部分 <paramref name="count" /> 中，如果找到 <paramref name="startIndex" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="startIndex" /> 为可忽略字符，则将返回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。
或
 <paramref name="count" /> 小于零。

或 -

 <paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="source" /> 中指定有效部分。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜索指定的字符，并返回源字符串内包含所指定元素数、以指定的索引位置结尾的部分中最后一个匹配项的从零开始的索引。</summary>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>使用指定的比较选项，如果在 <paramref name="value" /> 中结束于 <paramref name="source" /> 、包含 <paramref name="count" /> 指定的元素数的部分找到 <paramref name="startIndex" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="startIndex" /> 为可忽略字符，则将返回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。

或 -

 <paramref name="count" /> 小于零。
或
 <paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="source" /> 中指定有效部分。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)">
      <summary>搜索指定的子字符串，并返回整个源字符串内最后一个匹配项的从零开始的索引。</summary>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符串。</param>
      <returns>如果找到，则为 <paramref name="value" /> 在 <paramref name="source" /> 内的最后一个匹配项从零开始的索引；否则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
或
 <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜索指定的子字符串，并返回整个源字符串内最后一个匹配项的从零开始的索引。</summary>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符串。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>使用指定的比较选项，如果在<paramref name="value" /> 中找到 <paramref name="source" /> 的最后一个匹配项，则为从零开始的索引；否则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。

或 -

 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)">
      <summary>搜索指定的子字符串，并返回源字符串内从字符串开头到指定的索引位置这一部分中最后一个匹配项的从零开始的索引。</summary>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符串。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <returns>如果在部分 <paramref name="value" />（从 <paramref name="source" /> 的开头到 <paramref name="source" /> 这一部分）中找到 <paramref name="startIndex" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="startIndex" /> 为可忽略字符，则将返回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
或
 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜索指定的子字符串，并返回源字符串内从字符串开头到指定的索引位置这一部分中最后一个匹配项的从零开始的索引。</summary>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符串。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>使用指定的比较选项，如果在 <paramref name="value" /> 中从 <paramref name="source" /> 一直到 <paramref name="source" /> 的开始这部分找到 <paramref name="startIndex" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="startIndex" /> 为可忽略字符，则将返回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。

或 -

 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)">
      <summary>搜索指定的子字符串，并返回源字符串内包含指定的元素数、以指定的索引位置结尾的部分中最后一个匹配项的从零开始的索引。</summary>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符串。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <returns>在包含 <paramref name="value" /> 所指定的元素数并以 <paramref name="source" /> 结尾的这部分 <paramref name="count" /> 中，如果找到 <paramref name="startIndex" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="startIndex" /> 为可忽略字符，则将返回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。

或 -

 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。
或
 <paramref name="count" /> 小于零。
或
 <paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="source" /> 中指定有效部分。</exception>
    </member>
    <member name="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)">
      <summary>使用指定的 <see cref="T:System.Globalization.CompareOptions" /> 值，搜索指定的子字符串，并返回源字符串内包含所指定元素数、以指定的索引位置结尾的部分中最后一个匹配项的从零开始的索引。</summary>
      <param name="source">要搜索的字符串。</param>
      <param name="value">要在 <paramref name="source" /> 中定位的字符串。</param>
      <param name="startIndex">向后搜索的从零开始的起始索引。</param>
      <param name="count">要搜索的部分中的元素数。</param>
      <param name="options">一个值，用于定义应如何比较 <paramref name="source" /> 和 <paramref name="value" />。 <paramref name="options" /> 可以为枚举值 <see cref="F:System.Globalization.CompareOptions.Ordinal" />，或为以下一个或多个值的按位组合：<see cref="F:System.Globalization.CompareOptions.IgnoreCase" />、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" /> 和 <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />。</param>
      <returns>使用指定的比较选项，如果在 <paramref name="value" /> 中结束于 <paramref name="source" /> 、包含 <paramref name="count" /> 指定的元素数的部分找到 <paramref name="startIndex" /> 的最后一个匹配项，则为该项的从零开始的索引；否则为 -1。 如果 <paramref name="startIndex" /> 为可忽略字符，则将返回 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 <see langword="null" />。
或
 <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 超出了 <paramref name="source" /> 的有效索引范围。
或
 <paramref name="count" /> 小于零。
或
 <paramref name="startIndex" /> 和 <paramref name="count" /> 未在 <paramref name="source" /> 中指定有效部分。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 包含无效的 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
    </member>
    <member name="P:System.Globalization.CompareInfo.LCID">
      <summary>获取当前 <see cref="T:System.Globalization.CompareInfo" /> 的格式正确的区域性标识符。</summary>
      <returns>当前 <see cref="T:System.Globalization.CompareInfo" /> 的格式正确的区域性标识符。</returns>
    </member>
    <member name="P:System.Globalization.CompareInfo.Name">
      <summary>获取用于通过 <see cref="T:System.Globalization.CompareInfo" /> 对象执行排序操作的区域性的名称。</summary>
      <returns>区域性的名称。</returns>
    </member>
    <member name="M:System.Globalization.CompareInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>在整个对象图形已经反序列化时运行。</summary>
      <param name="sender">启动回调的对象。</param>
    </member>
    <member name="M:System.Globalization.CompareInfo.ToString">
      <summary>返回表示当前 <see cref="T:System.Globalization.CompareInfo" /> 对象的字符串。</summary>
      <returns>表示当前 <see cref="T:System.Globalization.CompareInfo" /> 对象的字符串。</returns>
    </member>
    <member name="P:System.Globalization.CompareInfo.Version">
      <summary>获取用于比较和排序字符串的 Unicode 版本的相关信息。</summary>
      <returns>包含用于比较和排序字符串的 Unicode 版本的相关信息的对象。</returns>
    </member>
    <member name="T:System.Globalization.CompareOptions">
      <summary>定义要用于 <see cref="T:System.Globalization.CompareInfo" /> 的字符串比较选项。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreCase">
      <summary>指示字符串比较必须忽略大小写。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreKanaType">
      <summary>指示字符串比较必须忽略 Kana 类型。 假名类型是指日语平假名和片假名字符，它们表示日语中的语音。 平假名用于表示日语自有的短语和字词，而片假名用于表示从其他语言借用的字词，如“computer”或“Internet”。 语音既可以用平假名也可以用片假名表示。 如果选择该值，则认为一个语音的平假名字符等于同一语音的片假名字符。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreNonSpace">
      <summary>指示字符串比较必须忽略不占空间的组合字符，比如音调符号。 Unicode 标准将组合字符定义为与基字符组合起来产生新字符的字符。 不占空间的组合字符在呈现时其本身不占用空间位置。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreSymbols">
      <summary>指示字符串比较必须忽略符号，如空格字符、标点、货币符号、百分号、数学符号、&amp; 号等等。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.IgnoreWidth">
      <summary>指示字符串比较必须忽略字符宽度。 例如，日语片假名字符可以写为全角或半角形式。 如果选择此值，则认为片假名字符的全角形式等同于半角形式。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.None">
      <summary>指定字符串比较的默认选项设置。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.Ordinal">
      <summary>指示必须使用字符串的连续 Unicode UTF-16 编码值进行字符串比较（使用代码单元进行代码单元比较），这样可以提高比较速度，但不能区分区域性。 如果 XXXX16 小于 YYYY16，则以“XXXX16”代码单元开头的字符串位于以“YYYY16”代码单元开头的字符串之前。 此值必须单独使用，而不能与其他 <see cref="T:System.Globalization.CompareOptions" /> 值组合在一起。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.OrdinalIgnoreCase">
      <summary>字符串比较必须忽略大小写，然后执行序号比较。 此方法相当于先使用固定区域性将字符串转换为大写，然后再对结果执行序号比较。</summary>
    </member>
    <member name="F:System.Globalization.CompareOptions.StringSort">
      <summary>指示字符串比较必须使用字符串排序算法。 在字符串排序中，连字符、撇号以及其他非字母数字符号都排在字母数字字符之前。</summary>
    </member>
    <member name="T:System.Globalization.CultureInfo">
      <summary>提供有关特定区域性（对于非托管代码开发，则称为“区域设置”）的信息。 这些信息包括区域性的名称、书写系统、使用的日历、字符串的排序顺序以及对日期和数字的格式化设置。</summary>
    </member>
    <member name="M:System.Globalization.CultureInfo.#ctor(System.Int32)">
      <summary>根据区域性标识符指定的区域性初始化 <see cref="T:System.Globalization.CultureInfo" /> 类的新实例。</summary>
      <param name="culture">预定义的 <see cref="T:System.Globalization.CultureInfo" /> 标识符、现有 <see cref="T:System.Globalization.CultureInfo" /> 对象的 <see cref="P:System.Globalization.CultureInfo.LCID" /> 属性或仅 Windows 区域性标识符。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="culture" /> 小于零。</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="culture" /> 不是有效的区域性标识符。 有关详细信息，请参阅“调用方备注”部分。</exception>
    </member>
    <member name="M:System.Globalization.CultureInfo.#ctor(System.Int32,System.Boolean)">
      <summary>基于区域性标识符指定的区域性并基于布尔值（指定是否使用系统中用户选定的区域性设置）来初始化 <see cref="T:System.Globalization.CultureInfo" /> 类的新实例。</summary>
      <param name="culture">预定义的 <see cref="T:System.Globalization.CultureInfo" /> 标识符、现有 <see cref="T:System.Globalization.CultureInfo" /> 对象的 <see cref="P:System.Globalization.CultureInfo.LCID" /> 属性或仅 Windows 区域性标识符。</param>
      <param name="useUserOverride">一个布尔值，它指示是使用用户选定的区域性设置 (<see langword="true" />)，还是使用默认区域性设置 (<see langword="false" />)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="culture" /> 小于零。</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="culture" /> 不是有效的区域性标识符。 有关详细信息，请参阅“调用方备注”部分。</exception>
    </member>
    <member name="M:System.Globalization.CultureInfo.#ctor(System.String)">
      <summary>根据由名称指定的区域性初始化 <see cref="T:System.Globalization.CultureInfo" /> 类的新实例。</summary>
      <param name="name">预定义的 <see cref="T:System.Globalization.CultureInfo" /> 名称、现有 <see cref="T:System.Globalization.CultureInfo" /> 的 <see cref="P:System.Globalization.CultureInfo.Name" /> 或仅 Windows 区域性名称。 <paramref name="name" /> 不区分大小写。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="name" /> 不是有效的区域性名称。 有关详细信息，请参阅“对调用方的说明”部分。</exception>
    </member>
    <member name="M:System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)">
      <summary>基于名称指定的区域性并基于布尔值（指定是否使用系统中用户选定的区域性设置）来初始化 <see cref="T:System.Globalization.CultureInfo" /> 类的新实例。</summary>
      <param name="name">预定义的 <see cref="T:System.Globalization.CultureInfo" /> 名称、现有 <see cref="T:System.Globalization.CultureInfo" /> 的 <see cref="P:System.Globalization.CultureInfo.Name" /> 或仅 Windows 区域性名称。 <paramref name="name" /> 不区分大小写。</param>
      <param name="useUserOverride">一个布尔值，它指示是使用用户选定的区域性设置 (<see langword="true" />)，还是使用默认区域性设置 (<see langword="false" />)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="name" /> 不是有效的区域性名称。 有关详细信息，请参阅“调用方备注”部分。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.Calendar">
      <summary>获取区域性使用的默认日历。</summary>
      <returns>表示区域性使用的默认日历的 <see cref="T:System.Globalization.Calendar" />。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.ClearCachedData">
      <summary>刷新缓存的区域性相关信息。</summary>
    </member>
    <member name="M:System.Globalization.CultureInfo.Clone">
      <summary>创建当前 <see cref="T:System.Globalization.CultureInfo" /> 的副本。</summary>
      <returns>当前 <see cref="T:System.Globalization.CultureInfo" /> 的副本。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.CompareInfo">
      <summary>获取为区域性定义如何比较字符串的 <see cref="T:System.Globalization.CompareInfo" />。</summary>
      <returns>为区域性定义如何比较字符串的 <see cref="T:System.Globalization.CompareInfo" />。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)">
      <summary>创建表示与指定名称关联的特定区域性的 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <param name="name">预定义的 <see cref="T:System.Globalization.CultureInfo" /> 名称或现有 <see cref="T:System.Globalization.CultureInfo" /> 的对象。 <paramref name="name" /> 不区分大小写。</param>
      <returns>一个表示以下内容的 <see cref="T:System.Globalization.CultureInfo" /> 对象： 
固定的区域性，如果 <paramref name="name" /> 是空字符串 ("")。  

或 - 
与 <paramref name="name" /> 关联的特定区域性，如果 <paramref name="name" /> 是非特定区域性。  

或 - 
由 <paramref name="name" /> 指定的区域性，如果 <paramref name="name" /> 已经是特定区域性。</returns>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="name" /> 不是有效的区域性名称。  

或 - 
<paramref name="name" /> 指定的区域性没有特定的区域性与之关联。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="name" /> 为 null。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.CultureTypes">
      <summary>获取属于当前 <see cref="T:System.Globalization.CultureInfo" /> 对象的区域性类型。</summary>
      <returns>一个或多个 <see cref="T:System.Globalization.CultureTypes" /> 值的按位组合。 没有默认值。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.CurrentCulture">
      <summary>获取表示当前线程使用的区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</summary>
      <returns>表示当前线程使用的区域性的对象。</returns>
      <exception cref="T:System.ArgumentNullException">属性设置为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.CurrentUICulture">
      <summary>获取或设置 <see cref="T:System.Globalization.CultureInfo" /> 对象，该对象表示资源管理器在运行时查找区域性特定资源时所用的当前用户接口区域性。</summary>
      <returns>资源管理器用于在运行时查找查找区域性特定资源的区域性。</returns>
      <exception cref="T:System.ArgumentNullException">属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">该属性设置为不能用于定位资源文件的区域性名称。 资源文件名必须仅包含字母、数字、连字符或下划线。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.DateTimeFormat">
      <summary>获取或设置 <see cref="T:System.Globalization.DateTimeFormatInfo" />，它定义适合区域性的、显示日期和时间的格式。</summary>
      <returns>一个 <see cref="T:System.Globalization.DateTimeFormatInfo" />，它定义适合区域性的、显示日期和时间的格式。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">设置了 <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> 属性或任何 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 属性，但 <see cref="T:System.Globalization.CultureInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture">
      <summary>获取或设置当前应用程序域中线程的默认区域性。</summary>
      <returns>如果当前系统区域性为应用程序域中的默认线程区域性，则为当前应用程序中线程的默认区域性或 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture">
      <summary>获取或设置当前应用程序域中线程的默认 UI 区域性。</summary>
      <returns>如果当前系统 UI 区域性为当前应用程序域中的默认线程 UI 区域性，则当前应用程序域中线程的默认 UI 区域性或 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">在集运算中，<see cref="P:System.Globalization.CultureInfo.Name" /> 属性值无效。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.DisplayName">
      <summary>获取完整的本地化区域性名称。</summary>
      <returns>格式的完整本地化的区域性名称languagefull [country/regionfull]，其中languagefull是语言的完整名称和country/regionfull是国家/地区的完整名称。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.EnglishName">
      <summary>获取格式为 languagefull [country/regionfull] 的英语区域性名称。</summary>
      <returns>格式的区域性名称languagefull [country/regionfull]，where languagefull是语言的完整名称和国家/地区 /regionfull是国家/地区的完整名称。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.Equals(System.Object)">
      <summary>确定指定的对象是否与当前 <see cref="T:System.Globalization.CultureInfo" /> 具有相同的区域性。</summary>
      <param name="value">将与当前 <see cref="T:System.Globalization.CultureInfo" /> 进行比较的对象。</param>
      <returns>如果 <paramref name="value" /> 与当前 <see cref="T:System.Globalization.CultureInfo" /> 具有相同的区域性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetConsoleFallbackUICulture">
      <summary>如果默认的图形用户界面区域性不合适，则获取适合控制台应用程序的备用用户界面区域性。</summary>
      <returns>用于在控制台上读取和显示文本的备用区域性。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetCultureInfo(System.Int32)">
      <summary>使用特定的区域性标识符检索某个区域性的缓存的只读实例。</summary>
      <param name="culture">区域设置标识符 (LCID)。</param>
      <returns>一个只读 <see cref="T:System.Globalization.CultureInfo" /> 对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="culture" /> 小于零。</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="culture" /> 指定不支持的区域性。 有关详细信息，请参阅“调用方备注”部分。</exception>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)">
      <summary>使用特定的区域性名称检索某个区域性的缓存的只读实例。</summary>
      <param name="name">区域性的名称。 <paramref name="name" /> 不区分大小写。</param>
      <returns>一个只读 <see cref="T:System.Globalization.CultureInfo" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="name" /> 指定不支持的区域性。 有关详细信息，请参阅“调用方备注”部分。</exception>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetCultureInfo(System.String,System.String)">
      <summary>检索某个区域性的缓存的只读实例。 参数指定了一个使用 <see cref="T:System.Globalization.TextInfo" /> 和 <see cref="T:System.Globalization.CompareInfo" /> 对象进行初始化的区域性，而这些对象则是由另一个区域性指定的。</summary>
      <param name="name">区域性的名称。 <paramref name="name" /> 不区分大小写。</param>
      <param name="altName">区域性的名称提供了 <see cref="T:System.Globalization.TextInfo" /> 和 <see cref="T:System.Globalization.CompareInfo" /> 对象，这些对象用于对 <paramref name="name" /> 进行初始化。 <paramref name="altName" /> 不区分大小写。</param>
      <returns>一个只读 <see cref="T:System.Globalization.CultureInfo" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="altName" /> 为 null。</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="name" /> 或 <paramref name="altName" /> 用于指定不支持的区域性。 有关详细信息，请参阅“调用方备注”部分。</exception>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)">
      <summary>已否决。 检索只读的 <see cref="T:System.Globalization.CultureInfo" /> 对象，其语言特征由指定的 RFC 4646 语言标记标识。</summary>
      <param name="name">按 RFC 4646 标准指定的语言名称。</param>
      <returns>一个只读 <see cref="T:System.Globalization.CultureInfo" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.Globalization.CultureNotFoundException">
        <paramref name="name" /> 与支持的区域性不符。</exception>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)">
      <summary>获取由指定 <see cref="T:System.Globalization.CultureTypes" /> 参数筛选的支持的区域性列表。</summary>
      <param name="types">按位组合的列举值，用于筛选要检索的区域性。</param>
      <returns>一个数组，该数组包含由 <paramref name="types" /> 参数指定的区域性。 区域性数组未排序。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="types" /> 指定了无效的 <see cref="T:System.Globalization.CultureTypes" /> 值组合。</exception>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetFormat(System.Type)">
      <summary>获取一个定义如何格式化指定类型的对象。</summary>
      <param name="formatType">要为其获取格式化对象的 <see cref="T:System.Type" />。 此方法仅支持 <see cref="T:System.Globalization.NumberFormatInfo" /> 和 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 两种类型。</param>
      <returns>
        <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> 属性的值，如果 <paramref name="formatType" /> 是 <see cref="T:System.Globalization.NumberFormatInfo" /> 类的 <see cref="T:System.Globalization.CultureInfo" /> 对象，则该属性为包含当前 <see cref="T:System.Type" /> 的默认数字格式信息的 <see cref="T:System.Globalization.NumberFormatInfo" />。  

或 - 
<see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> 属性的值，如果 <paramref name="formatType" /> 是 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 类的 <see cref="T:System.Globalization.CultureInfo" /> 对象，则该属性为包含当前 <see cref="T:System.Type" /> 的默认日期和时间格式信息的 <see cref="T:System.Globalization.DateTimeFormatInfo" />。  

或 - 
如果 <paramref name="formatType" /> 是其他任何对象，则为 null。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.GetHashCode">
      <summary>用作当前 <see cref="T:System.Globalization.CultureInfo" /> 的哈希函数，适合用在哈希算法和数据结构（如哈希表）中。</summary>
      <returns>当前 <see cref="T:System.Globalization.CultureInfo" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.IetfLanguageTag">
      <summary>已否决。 获取某种语言的 RFC 4646 标准标识。</summary>
      <returns>一个字符串，表示某种语言的 RFC 4646 标准标识。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.InstalledUICulture">
      <summary>获取表示操作系统中安装的区域性的 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <returns>表示操作系统中安装的区域性的 <see cref="T:System.Globalization.CultureInfo" />。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.InvariantCulture">
      <summary>获取不依赖于区域性（固定）的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</summary>
      <returns>不依赖于区域性（固定）的对象。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.IsNeutralCulture">
      <summary>获取一个值，该值指示当前 <see cref="T:System.Globalization.CultureInfo" /> 是否表示非特定区域性。</summary>
      <returns>如果当前 <see cref="T:System.Globalization.CultureInfo" /> 表示非特定区域性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.IsReadOnly">
      <summary>获取一个值，该值指示当前 <see cref="T:System.Globalization.CultureInfo" /> 是否为只读。</summary>
      <returns>如果当前 <see langword="true" /> 为只读，则为 <see cref="T:System.Globalization.CultureInfo" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.KeyboardLayoutId">
      <summary>获取活动的输入法区域设置标识符。</summary>
      <returns>一个指定输入区域设置标识符的 32 位有符号数字。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.LCID">
      <summary>获取当前 <see cref="T:System.Globalization.CultureInfo" /> 的区域性标识符。</summary>
      <returns>当前 <see cref="T:System.Globalization.CultureInfo" /> 的区域性标识符。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.Name">
      <summary>获取格式为 languagecode2-country/regioncode2 的区域性名称。</summary>
      <returns>格式的区域性名称languagecode2-country/regioncode2。 languagecode2派生自 ISO 639-1 小写的双字母代码。 country/regioncode2派生自 ISO 3166，一般包含两个大写字母，或一个 BCP-47 语言标记。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.NativeName">
      <summary>获取为区域性设置的显示名称，它由语言、国家/地区以及可选的书写符号组成。</summary>
      <returns>区域性名称。 由语言的全名、国家/地区的全名以及可选脚本组成。 有关其格式的讨论，请参见对 <see cref="T:System.Globalization.CultureInfo" /> 类的说明。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.NumberFormat">
      <summary>获取或设置 <see cref="T:System.Globalization.NumberFormatInfo" />，它定义适合区域性的、显示数字、货币和百分比的格式。</summary>
      <returns>一个 <see cref="T:System.Globalization.NumberFormatInfo" />，它定义适合区域性的、显示数字、货币和百分比的格式。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">设置了 <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> 属性或任何 <see cref="T:System.Globalization.NumberFormatInfo" /> 属性，但 <see cref="T:System.Globalization.CultureInfo" /> 是只读的。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.OptionalCalendars">
      <summary>获取该区域性可使用的日历的列表。</summary>
      <returns>类型为 <see cref="T:System.Globalization.Calendar" /> 的数组，表示当前 <see cref="T:System.Globalization.CultureInfo" /> 代表的区域性所使用的日历。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.Parent">
      <summary>获取表示当前 <see cref="T:System.Globalization.CultureInfo" /> 的父区域性的 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <returns>表示当前 <see cref="T:System.Globalization.CultureInfo" /> 的父区域性的 <see cref="T:System.Globalization.CultureInfo" />。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)">
      <summary>返回指定的 <see cref="T:System.Globalization.CultureInfo" /> 对象周围的只读包装器。</summary>
      <param name="ci">要包装的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <returns>
        <paramref name="ci" /> 周围的只读 <see cref="T:System.Globalization.CultureInfo" /> 包装。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ci" /> 为 null。</exception>
    </member>
    <member name="P:System.Globalization.CultureInfo.TextInfo">
      <summary>获取定义与区域性关联的书写体系的 <see cref="T:System.Globalization.TextInfo" />。</summary>
      <returns>定义与区域性关联的书写体系的 <see cref="T:System.Globalization.TextInfo" />。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName">
      <summary>获取当前 <see cref="T:System.Globalization.CultureInfo" /> 的语言的由三个字母构成的 ISO 639-2 代码。</summary>
      <returns>当前 <see cref="T:System.Globalization.CultureInfo" /> 的语言的由三个字母构成的 ISO 639-2 代码。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName">
      <summary>获取 Windows API 中定义的由三个字母构成的语言代码。</summary>
      <returns>Windows API 中定义的由三个字母构成的语言代码。</returns>
    </member>
    <member name="M:System.Globalization.CultureInfo.ToString">
      <summary>返回一个字符串，该字符串包含当前 <see cref="T:System.Globalization.CultureInfo" /> 的名称，其格式为 languagecode2 -country/regioncode2。</summary>
      <returns>包含当前 <see cref="T:System.Globalization.CultureInfo" /> 名称的字符串。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName">
      <summary>获取当前 <see cref="T:System.Globalization.CultureInfo" /> 的语言的由两个字母构成的 ISO 639-1 代码。</summary>
      <returns>当前 <see cref="T:System.Globalization.CultureInfo" /> 的语言的由两个字母构成的 ISO 639-1 代码。</returns>
    </member>
    <member name="P:System.Globalization.CultureInfo.UseUserOverride">
      <summary>获取一个值，该值指示当前 <see cref="T:System.Globalization.CultureInfo" /> 对象是否使用用户选定的区域性设置。</summary>
      <returns>如果当前 <see cref="T:System.Globalization.CultureInfo" /> 使用用户选定的区域性设置，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Globalization.CultureNotFoundException">
      <summary>当方法尝试构造不可用的区域性时引发的异常。</summary>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 类的新实例，将其消息字符串设置为系统提供的消息。</summary>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化数据和上下文初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 类的新实例。</summary>
      <param name="message">与此异常一起显示的错误消息。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 类的新实例。</summary>
      <param name="message">与此异常一起显示的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为空引用，则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.Int32,System.Exception)">
      <summary>使用指定的错误消息、无效的区域性 ID 和对导致此异常的内部异常的引用来初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 类的新实例。</summary>
      <param name="message">与此异常一起显示的错误消息。</param>
      <param name="invalidCultureId">找不到的区域性 ID。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为空引用，则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.Int32,System.String)">
      <summary>使用指定的错误消息、无效的区域性 ID 和导致此异常的参数的名称来初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 类的新实例。</summary>
      <param name="paramName">导致当前异常的参数的名称。</param>
      <param name="invalidCultureId">找不到的区域性 ID。</param>
      <param name="message">与此异常一起显示的错误消息。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.String)">
      <summary>使用指定的错误消息和导致此异常的参数的名称来初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 类的新实例。</summary>
      <param name="paramName">导致当前异常的参数的名称。</param>
      <param name="message">与此异常一起显示的错误消息。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定的错误消息、无效的区域性名称和对导致此异常的内部异常的引用来初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 类的新实例。</summary>
      <param name="message">与此异常一起显示的错误消息。</param>
      <param name="invalidCultureName">找不到的区域性名称。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为空引用，则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.#ctor(System.String,System.String,System.String)">
      <summary>使用指定的错误消息、无效的区域性名称和导致此异常的参数的名称来初始化 <see cref="T:System.Globalization.CultureNotFoundException" /> 类的新实例。</summary>
      <param name="paramName">导致当前异常的参数的名称。</param>
      <param name="invalidCultureName">找不到的区域性名称。</param>
      <param name="message">与此异常一起显示的错误消息。</param>
    </member>
    <member name="M:System.Globalization.CultureNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>设置带有参数名和附加异常信息的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Globalization.CultureNotFoundException.InvalidCultureId">
      <summary>获取找不到的区域性标识符。</summary>
      <returns>无效的区域性标识符。</returns>
    </member>
    <member name="P:System.Globalization.CultureNotFoundException.InvalidCultureName">
      <summary>获取找不到的区域性名称。</summary>
      <returns>无效的区域性名称。</returns>
    </member>
    <member name="P:System.Globalization.CultureNotFoundException.Message">
      <summary>获取解释异常原因的错误消息。</summary>
      <returns>描述异常的详细信息的文本字符串。</returns>
    </member>
    <member name="T:System.Globalization.CultureTypes">
      <summary>定义可以使用 <see cref="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" /> 方法检索的区域性列表的类型。</summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.AllCultures">
      <summary>.NET 识别的所有区域性，包括非特定和特定区域性以及用户创建的自定义区域性。
在 .NET Framework 4 和更高版本以及正在 Windows 上运行的 .NET Core 上，将包括可从 Windows 操作系统获取的区域性数据。 在正在 Linux 和 macOS 上运行的 .NET Core 上，将包括 ICU 库中定义的区域性数据。
 <see cref="F:System.Globalization.CultureTypes.AllCultures" /> 是包括 <see cref="F:System.Globalization.CultureTypes.NeutralCultures" />、<see cref="F:System.Globalization.CultureTypes.SpecificCultures" /> 和 <see cref="F:System.Globalization.CultureTypes.InstalledWin32Cultures" /> 值的复合字段。</summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.FrameworkCultures">
      <summary>此成员已弃用；结合使用此值与 <see cref="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" /> 可以返回 .NET Framework 2.0 附带的非特定和特定区域性。</summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.InstalledWin32Cultures">
      <summary>此成员已弃用。 Windows 操作系统中安装的所有区域性。</summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.NeutralCultures">
      <summary>与某种语言关联但并不特定于某一国家/地区的区域性。</summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.ReplacementCultures">
      <summary>此成员已弃用。 用户创建的自定义区域性，可以替换 .NET Framework 附带的区域性。</summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.SpecificCultures">
      <summary>特定于某一国家/地区的区域性。</summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.UserCustomCulture">
      <summary>此成员已弃用。 用户创建的自定义区域性。</summary>
    </member>
    <member name="F:System.Globalization.CultureTypes.WindowsOnlyCultures">
      <summary>此成员已弃用且将被忽略。</summary>
    </member>
    <member name="T:System.Globalization.DateTimeFormatInfo">
      <summary>提供有关日期和时间值格式的区域性特定信息。</summary>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.#ctor">
      <summary>初始化不依赖于区域性的（固定的）<see cref="T:System.Globalization.DateTimeFormatInfo" /> 类的新可写实例。</summary>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames">
      <summary>获取或设置 <see cref="T:System.String" /> 类型的一维数组，它包含周中各天的区域性特定的缩写名称。</summary>
      <returns>一个类型 <see cref="T:System.String" /> 的一维数组，它包含周中各天的特定于区域性的缩写名称。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的数组包含"Sun"、"Mon"、"Tue"、"Wed"、"Thu"、"Fri"和"Sat"。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">该属性正被设置为多维数组或者长度不是正好为 7 的数组。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames">
      <summary>获取或设置与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的月份缩写名称的字符串数组。</summary>
      <returns>月份缩写名称的数组。</returns>
      <exception cref="T:System.ArgumentException">在设置操作中，该数组是多维数组或者长度不是正好为 13 的数组。</exception>
      <exception cref="T:System.ArgumentNullException">在设置操作中，数组或数组的其中一个元素为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">在设置操作中，当前的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames">
      <summary>获取或设置一维字符串数组，它包含各月的特定于区域性的缩写名称。</summary>
      <returns>一个具有 13 个元素的一维字符串数组，它包含各月的特定于区域性的缩写名称。 对于 12 个月的日历，数组的第 13 个元素是一个空字符串。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 数组包含"Jan"、"Feb"、"Mar"、"Apr"、"May"、"Jun"、"Jul"、"Aug"、"Sep"、"Oct"、"Nov"、"Dec"和""。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">该属性正被设置为多维数组或者长度不是正好为 13 的数组。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.AMDesignator">
      <summary>获取或设置表示处于"上午"（中午前）的各小时的字符串指示项。</summary>
      <returns>表示属于上午的各小时的字符串指示项。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值为"AM"。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.Calendar">
      <summary>获取或设置用于当前区域性的日历。</summary>
      <returns>用于当前区域性的日历。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值是一个 <see cref="T:System.Globalization.GregorianCalendar" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性正被设置为对当前区域性无效的 <see cref="T:System.Globalization.Calendar" /> 对象。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.CalendarWeekRule">
      <summary>获取或设置一个值，该值指定使用哪一规则确定该年的第一个日历周。</summary>
      <returns>一个值，该值确定该年的第一个日历周。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值是 <see cref="F:System.Globalization.CalendarWeekRule.FirstDay" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性正被设置的值不是有效的 <see cref="T:System.Globalization.CalendarWeekRule" /> 值。</exception>
      <exception cref="T:System.InvalidOperationException">在设置操作中，当前的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.Clone">
      <summary>创建 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 的浅表副本。</summary>
      <returns>从原始 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 复制的新 <see cref="T:System.Globalization.DateTimeFormatInfo" />。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.CurrentInfo">
      <summary>获取基于当前区域性对值进行格式设置的只读的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</summary>
      <returns>一个基于当前线程的 <see cref="T:System.Globalization.CultureInfo" /> 对象的只读的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.DateSeparator">
      <summary>获取或设置分隔日期中各组成部分（即年、月、日）的字符串。</summary>
      <returns>分隔日期中各组成部分（即年、月、日）的字符串。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值为“/”。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.DayNames">
      <summary>获取或设置包含该周中各天的特定于区域性的完整名称的一维字符串数组。</summary>
      <returns>一个一维字符串数组，它包含周中各天的特定于区域性的完整名称。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 数组包含"Sunday"、"Monday"、"Tuesday"、"Wednesday"、"Thursday"、"Friday"和"Saturday"。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">该属性正被设置为多维数组或者长度不是正好为 7 的数组。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek">
      <summary>获取或设置该周的第一天。</summary>
      <returns>表示一周的第一天的枚举值。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值是 <see cref="F:System.DayOfWeek.Sunday" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性正被设置的值不是有效的 <see cref="T:System.DayOfWeek" /> 值。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern">
      <summary>为长日期和长时间值获取或设置自定义格式字符串。</summary>
      <returns>长日期和时间值的自定义格式字符串。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek)">
      <summary>基于与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的区域性，返回周中指定日期的区域性特定的缩写名称。</summary>
      <param name="dayofweek">一个 <see cref="T:System.DayOfWeek" /> 值。</param>
      <returns>由 <paramref name="dayofweek" /> 表示的周中日期的区域性特定的缩写名称。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dayofweek" /> 不是有效的 <see cref="T:System.DayOfWeek" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)">
      <summary>返回包含指定纪元的缩写名称的字符串（如果缩写名称存在）。</summary>
      <param name="era">表示纪元的整数。</param>
      <returns>包含指定纪元的缩写名称的字符串（如果缩写名称存在）。  

或 -  

 包含纪元的完整名称的字符串（如果缩写名称不存在）。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 不表示在 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 属性中指定的日历中的有效纪元。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(System.Int32)">
      <summary>基于与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的区域性，返回指定月份的区域性特定的缩写名称。</summary>
      <param name="month">1 到 13 之间的一个整数，用于表示要检索的月份的名称。</param>
      <returns>由 <paramref name="month" /> 表示的月份的区域性特定的缩写名称。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> 小于 1 或大于 13。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns">
      <summary>返回可用于对日期和时间值进行格式设置的所有标准模式。</summary>
      <returns>一个数组，包含可以对日期和时间值进行格式化的标准模式。</returns>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns(System.Char)">
      <summary>返回可使用指定标准格式字符串对日期和时间值进行格式设置的所有模式。</summary>
      <param name="format">标准格式字符串。</param>
      <returns>一个数组，它包含可使用指定格式字符串对日期和时间值进行格式设置的标准模式。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="format" /> 不是有效的标准格式字符串。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek)">
      <summary>基于与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的区域性，返回周中指定日期的区域性特定的全名。</summary>
      <param name="dayofweek">一个 <see cref="T:System.DayOfWeek" /> 值。</param>
      <returns>由 <paramref name="dayofweek" /> 表示的周中日期的区域性特定的全名。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dayofweek" /> 不是有效的 <see cref="T:System.DayOfWeek" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)">
      <summary>返回表示指定纪元的整数。</summary>
      <param name="eraName">包含纪元名称的字符串。</param>
      <returns>如果 <paramref name="eraName" /> 有效，则为表示纪元的整数；否则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eraName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)">
      <summary>返回包含指定纪元名称的字符串。</summary>
      <param name="era">表示纪元的整数。</param>
      <returns>包含纪元名称的字符串。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 不表示在 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 属性中指定的日历中的有效纪元。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)">
      <summary>返回指定类型的对象，它提供日期和时间格式化服务。</summary>
      <param name="formatType">所需格式化服务的类型。</param>
      <returns>如果 <paramref name="formatType" /> 与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 的类型相同，则为当前对象；否则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetInstance(System.IFormatProvider)">
      <summary>返回与指定 <see cref="T:System.IFormatProvider" /> 关联的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</summary>
      <param name="provider">获取 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象的 <see cref="T:System.IFormatProvider" />。  
或 
 要获取 <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" /> 的 <see langword="null" />。</param>
      <returns>与 <see cref="T:System.IFormatProvider" /> 关联的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</returns>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetMonthName(System.Int32)">
      <summary>基于与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的区域性，返回指定月份的区域性特定的全名。</summary>
      <param name="month">1 到 13 之间的一个整数，用于表示要检索的月份的名称。</param>
      <returns>由 <paramref name="month" /> 表示的月份的区域性特定的全名。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> 小于 1 或大于 13。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.GetShortestDayName(System.DayOfWeek)">
      <summary>获取与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的周中指定日期的最短日期缩写名称。</summary>
      <param name="dayOfWeek">
        <see cref="T:System.DayOfWeek" /> 值之一。</param>
      <returns>对应于 <paramref name="dayOfWeek" /> 参数的周的缩写名称。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dayOfWeek" /> 不是 <see cref="T:System.DayOfWeek" /> 枚举中的值。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.InvariantInfo">
      <summary>获取不依赖于区域性的（固定）默认只读的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</summary>
      <returns>不依赖于区域性的（固定的）默认只读对象。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是否为只读。</summary>
      <returns>如果 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.LongDatePattern">
      <summary>获取或设置长日期值的自定义格式字符串。</summary>
      <returns>长日期值的自定义格式字符串。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.LongTimePattern">
      <summary>为长时间值获取或设置自定义格式字符串。</summary>
      <returns>长时间值的格式模式。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthDayPattern">
      <summary>为月和日值获取或设置自定义格式字符串。</summary>
      <returns>可排序的月份和日期值的自定义格式字符串。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames">
      <summary>获取或设置与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的月份名称的字符串数组。</summary>
      <returns>月份名称的字符串数组。</returns>
      <exception cref="T:System.ArgumentException">在设置操作中，该数组是多维数组或者长度不是正好为 13 的数组。</exception>
      <exception cref="T:System.ArgumentNullException">在设置操作中，数组或数组的其中一个元素为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">在设置操作中，当前的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.MonthNames">
      <summary>获取或设置 <see cref="T:System.String" /> 类型的一维数组，它包含月份的区域性特定的全名。</summary>
      <returns>一个类型 <see cref="T:System.String" /> 的一维数组，该数组包含月份的特定于区域性的完整名称。 在 12 个月的日历中，数组的第 13 个元素是一个空字符串。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 数组包含"January"、"February"、"March"、"April"、"May"、"June"、"July"、"August"、"September"、"October"、"November"、"December"和""。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">该属性正被设置为多维数组或者长度不是正好为 13 的数组。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName">
      <summary>获取与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的本机日历名称。</summary>
      <returns>在与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的区域性中，如果所用日历的本地名称可用，则为该名称；如果该本地日历名称不可用，则为空字符串 ("")。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.PMDesignator">
      <summary>获取或设置表示处于"下午"（中午后）的各小时的字符串指示项。</summary>
      <returns>表示处于"下午"（中午后）的各小时的字符串指示项。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值为"PM"。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.ReadOnly(System.Globalization.DateTimeFormatInfo)">
      <summary>返回只读的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 包装。</summary>
      <param name="dtfi">要包装的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</param>
      <returns>一个只读的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 包装器。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dtfi" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.RFC1123Pattern">
      <summary>获取自定义的格式字符串，该字符串用于基于 Internet 工程任务组 (IETF) 征求意见文档 (RFC) 1123 规范的时间值。</summary>
      <returns>基于 IETF RFC 1123 规范的时间值的自定义格式字符串。</returns>
    </member>
    <member name="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)">
      <summary>设置对应于指定的标准格式字符串的自定义日期和时间格式字符串。</summary>
      <param name="patterns">自定义格式字符串的数组。</param>
      <param name="format">在 <paramref name="patterns" /> 参数中指定的与自定格式字符串相关的标准格式字符串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="patterns" /> 是 <see langword="null" /> 或长度为零的数组。  

或 - 
<paramref name="format" /> 不是有效的标准格式字符串，或者是不能设置其模式的标准格式字符串。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="patterns" /> 有一个值为 <see langword="null" /> 的数组元素。</exception>
      <exception cref="T:System.InvalidOperationException">此 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern">
      <summary>为短日期值获取或设置自定义格式字符串。</summary>
      <returns>短日期值的自定义格式字符串。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortestDayNames">
      <summary>获取或设置与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的唯一最短日期缩写名称的字符串数组。</summary>
      <returns>日期名称的字符串数组。</returns>
      <exception cref="T:System.ArgumentException">在设置操作中，该数组中不会正好有七个元素。</exception>
      <exception cref="T:System.ArgumentNullException">在设置操作中，值数组或值数组的其中一个元素为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">在设置操作中，当前的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern">
      <summary>为短时间值获取或设置自定义格式字符串。</summary>
      <returns>短时间值的自定义格式字符串。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern">
      <summary>获取可排序数据和时间值的自定义格式字符串。</summary>
      <returns>可排序的日期和时间值的自定义格式字符串。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.TimeSeparator">
      <summary>获取或设置分隔时间中各组成部分（即小时、分钟和秒钟）的字符串。</summary>
      <returns>分隔时间中各组成部分的字符串。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值为“:”。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern">
      <summary>获取 ISO 8601 定义的通用的可排序日期和时间字符串的自定义格式字符串。</summary>
      <returns>通用的可排序的日期和时间字符串的自定义格式字符串。</returns>
    </member>
    <member name="P:System.Globalization.DateTimeFormatInfo.YearMonthPattern">
      <summary>为年和月值获取或设置自定义格式字符串。</summary>
      <returns>可排序的年份和月份值的自定义格式字符串。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="T:System.Globalization.DateTimeStyles">
      <summary>定义一些格式设置选项，这些选项可自定义许多日期和时间分析方法的字符串分析方法。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AdjustToUniversal">
      <summary>以协调世界时 (UTC) 形式返回日期和时间。 如果输入字符串表示本地时间（通过时区说明符或 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" />），则会将日期和时间从本地时间转换为 UTC。 如果输入字符串表示 UTC 时间（通过时区说明符或 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" />），则不进行任何转换。 如果输入字符串不表示本地时间或 UTC 时间，则不进行任何转换，并且生成的 <see cref="P:System.DateTime.Kind" /> 属性为 <see cref="F:System.DateTimeKind.Unspecified" />。 此值不能与 <see cref="F:System.Globalization.DateTimeStyles.RoundtripKind" /> 一起使用。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowInnerWhite">
      <summary>在分析期间必须忽略字符串中间的多余空白字符，但空白字符出现在 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 格式模式中的情况除外。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowLeadingWhite">
      <summary>在分析期间必须忽略前导空白字符，但空白字符出现在 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 格式模式中的情况除外。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowTrailingWhite">
      <summary>在分析期间必须忽略尾随空白字符，但空白字符出现在 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 格式模式中的情况除外。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AllowWhiteSpaces">
      <summary>在分析期间必须忽略字符串任意位置的多余空白字符，但空白字符出现在 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 格式模式中的情况除外。 该值是 <see cref="F:System.Globalization.DateTimeStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.DateTimeStyles.AllowTrailingWhite" /> 和 <see cref="F:System.Globalization.DateTimeStyles.AllowInnerWhite" /> 值的组合。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeLocal">
      <summary>如果分析的字符串中未指定任何时区，则假定该字符串表示本地时间。 此值不能与 <see cref="F:System.Globalization.DateTimeStyles.AssumeUniversal" /> 或 <see cref="F:System.Globalization.DateTimeStyles.RoundtripKind" /> 一起使用。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.AssumeUniversal">
      <summary>如果分析的字符串中未指定任何时区，则假定该字符串表示 UTC。 此值不能与 <see cref="F:System.Globalization.DateTimeStyles.AssumeLocal" /> 或 <see cref="F:System.Globalization.DateTimeStyles.RoundtripKind" /> 一起使用。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.NoCurrentDateDefault">
      <summary>如果分析的字符串只包含时间而不包含日期，则分析方法会假定以下公历日期：年 = 1、月 = 1 并且日 = 1。 如果没有使用此值，则假定为当前日期。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.None">
      <summary>必须使用默认格式设置选项。 此值表示 <see cref="M:System.DateTime.Parse(System.String)" />、 <see cref="M:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)" /> 和 <see cref="M:System.DateTime.TryParse(System.String,System.DateTime@)" /> 方法的默认样式。</summary>
    </member>
    <member name="F:System.Globalization.DateTimeStyles.RoundtripKind">
      <summary>在使用“o”或“r”标准格式说明符将 <see cref="T:System.DateTimeKind" /> 对象先转换为字符串，然后再将该字符串转换回 <see cref="T:System.DateTime" /> 对象时，将保留日期的 <see cref="T:System.DateTime" /> 字段。</summary>
    </member>
    <member name="T:System.Globalization.DaylightTime">
      <summary>定义夏时制周期。</summary>
    </member>
    <member name="M:System.Globalization.DaylightTime.#ctor(System.DateTime,System.DateTime,System.TimeSpan)">
      <summary>使用指定的开始，结束和时差信息初始化 <see cref="T:System.Globalization.DaylightTime" /> 类的新实例。</summary>
      <param name="start">夏时制开始时表示日期和时间的对象。 该值必须是本地时间。</param>
      <param name="end">夏时制结束时表示日期和时间的对象。 该值必须是本地时间。</param>
      <param name="delta">表示标准时间和夏时制之间的时差的的对象（以计时周期计算）。</param>
    </member>
    <member name="P:System.Globalization.DaylightTime.Delta">
      <summary>获取表示标准时间与夏时制之间的时间间隔 。</summary>
      <returns>表示标准时间与夏时制之间的时间间隔 。</returns>
    </member>
    <member name="P:System.Globalization.DaylightTime.End">
      <summary>获取表示夏时制周期结束的日期和时间的对象。</summary>
      <returns>夏时制周期结束时表示日期和时间的对象。 该值是本地时间。</returns>
    </member>
    <member name="P:System.Globalization.DaylightTime.Start">
      <summary>获取表示夏时制周期开始的日期和时间的对象。</summary>
      <returns>夏时制周期开始时表示日期和时间的对象。 该值是本地时间。</returns>
    </member>
    <member name="T:System.Globalization.DigitShapes">
      <summary>指定特定于区域的数字显示方式。</summary>
    </member>
    <member name="F:System.Globalization.DigitShapes.Context">
      <summary>数字形状取决于同一输出中前面的文本。 拉丁文后使用欧洲语言样式的数字；阿拉伯语后使用阿拉伯-印度语数字；泰语后使用泰语数字。</summary>
    </member>
    <member name="F:System.Globalization.DigitShapes.NativeNational">
      <summary>数字形状是从 0 到 9 的数字的本地等效数字形状。 从 0 到 9 的 ASCII 数字被等效的本地文字替换。</summary>
    </member>
    <member name="F:System.Globalization.DigitShapes.None">
      <summary>数字形状不变。 Unicode 可保持完全的兼容性。</summary>
    </member>
    <member name="T:System.Globalization.EastAsianLunisolarCalendar">
      <summary>表示一种日历，它将时间分为月、日、年和纪元，并且其日期基于太阳和月亮的循环。</summary>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>计算与指定日期相距指定月数的日期。</summary>
      <param name="time">
        <see cref="T:System.DateTime" />，将向其添加 <paramref name="months" />。</param>
      <param name="months">要添加的月数。</param>
      <returns>一个新的 <see cref="T:System.DateTime" />，通过在 <paramref name="time" /> 参数中添加指定的月数得到。</returns>
      <exception cref="T:System.ArgumentException">结果超出了 <see cref="T:System.DateTime" /> 支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小于-120000 或大于 120000。  
或 
 <paramref name="time" /> 小于 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 或大于 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />。</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>计算与指定日期相距指定年数的日期。</summary>
      <param name="time">
        <see cref="T:System.DateTime" />，将向其添加 <paramref name="years" />。</param>
      <param name="years">要添加的年数。</param>
      <returns>一个新的 <see cref="T:System.DateTime" />，通过在 <paramref name="time" /> 参数中添加指定的年数得到。</returns>
      <exception cref="T:System.ArgumentException">结果超出了 <see cref="T:System.DateTime" /> 支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 小于 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 或大于 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />。</exception>
    </member>
    <member name="P:System.Globalization.EastAsianLunisolarCalendar.AlgorithmType">
      <summary>获取一个值，该值指示当前日历是阳历、阴历还是二者的组合。</summary>
      <returns>始终返回 <see cref="F:System.Globalization.CalendarAlgorithmType.LunisolarCalendar" />。</returns>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem(System.Int32)">
      <summary>计算甲子（60 年）循环中指定年份的天干。</summary>
      <param name="sexagenaryYear">一个从 1 到 60 的整数，用于表示甲子循环中的一年。</param>
      <returns>一个从 1 到 10 的数字。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sexagenaryYear" /> 小于 1 或大于 60。</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetDayOfMonth(System.DateTime)">
      <summary>计算指定日期中的月中日期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 31 之间的一个整数，表示 <paramref name="time" /> 参数中指定的月中日期。</returns>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetDayOfWeek(System.DateTime)">
      <summary>计算指定日期中的周中日期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>
        <see cref="T:System.DayOfWeek" /> 值之一，用于表示 <paramref name="time" /> 参数中指定的周中日期。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 小于 <see cref="P:System.Globalization.Calendar.MinSupportedDateTime" /> 或大于 <see cref="P:System.Globalization.Calendar.MaxSupportedDateTime" />。</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetDayOfYear(System.DateTime)">
      <summary>计算指定日期中的年中日期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个从 1 到 354（在平年中）或从 1 到 384（在闰年中）的整数，用于表示 <paramref name="time" /> 参数中指定的年中日期。</returns>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>计算指定纪元年份的指定月份中的天数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">一个从 1 到 12（在平年中）或从 1 到 13（在闰年中）的整数，用于表示月份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元年份中指定月份的天数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" /> 或 <paramref name="era" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>计算指定纪元年份中的天数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元年份中的天数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>计算指定纪元年份的闰月。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>一个从 1 到 13 的正整数，表示指定纪元年份的闰月。  
或 
如果此日历不支持闰月，或者 <paramref name="year" /> 和 <paramref name="era" /> 参数未指定闰年，则为零。</returns>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetMonth(System.DateTime)">
      <summary>返回指定日期中的月份。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个 1 到 13 之间的整数，用于表示 <paramref name="time" /> 参数中指定的月份。</returns>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>计算指定纪元年份中的月数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元中指定年份的月数。 返回值是 12 个月（在平年中）或 13 个月（在闰年中）。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear(System.DateTime)">
      <summary>计算与指定日期对应的甲子（60 年）循环中的年份。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>甲子循环中的一个从 1 到 60 的数字，它与 <paramref name="date" /> 参数对应。</returns>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch(System.Int32)">
      <summary>计算甲子（60 年）循环中指定年份的地支。</summary>
      <param name="sexagenaryYear">一个从 1 到 60 的整数，用于表示甲子循环中的一年。</param>
      <returns>一个从 1 到 12 的整数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sexagenaryYear" /> 小于 1 或大于 60。</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.GetYear(System.DateTime)">
      <summary>返回指定日期中的年份。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的年份。</returns>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>确定指定纪元中的指定日期是否为闰日。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 13 之间的一个整数，用于表示月。</param>
      <param name="day">1 到 31 之间的一个整数，用于表示日。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>如果指定的日期是闰日，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" /> 或 <paramref name="era" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>确定指定纪元年份中的指定月份是否为闰月。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 13 之间的一个整数，用于表示月。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>如果 <paramref name="month" /> 参数是闰月，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" /> 或 <paramref name="era" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>确定指定纪元中的指定年份是否为闰年。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>如果指定的年是闰年，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>返回设置为指定的日期、时间和纪元的 <see cref="T:System.DateTime" />。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 13 之间的一个整数，用于表示月。</param>
      <param name="day">1 到 31 之间的一个整数，用于表示日。</param>
      <param name="hour">0 到 23 之间的一个整数，用于表示小时。</param>
      <param name="minute">0 到 59 之间的一个整数，用于表示分钟。</param>
      <param name="second">0 到 59 之间的一个整数，用于表示秒。</param>
      <param name="millisecond">0 到 999 之间的一个整数，用于表示毫秒。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>一个设置为指定的日期、时间和纪元的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、<paramref name="second" />、<paramref name="millisecond" /> 或 <paramref name="era" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.EastAsianLunisolarCalendar.ToFourDigitYear(System.Int32)">
      <summary>将指定的年份转换为四位数的年份。</summary>
      <param name="year">一个两位数或四位数的整数，用于表示要转换的年份。</param>
      <returns>一个包含 <paramref name="year" /> 参数的四位数表示形式的整数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax">
      <summary>获取或设置可以用两位数年份表示的 100 年范围内的最后一年。</summary>
      <returns>可以用两位数年份表示的 100 年范围内的最后一年。</returns>
      <exception cref="T:System.InvalidOperationException">当前 <see cref="T:System.Globalization.EastAsianLunisolarCalendar" /> 为只读。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">位于设置操作中的值小于 99 或大于当前日历中受支持的最大年份。</exception>
    </member>
    <member name="T:System.Globalization.GregorianCalendar">
      <summary>表示公历。</summary>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.#ctor">
      <summary>使用默认的 <see cref="T:System.Globalization.GregorianCalendar" /> 值初始化 <see cref="T:System.Globalization.GregorianCalendarTypes" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.#ctor(System.Globalization.GregorianCalendarTypes)">
      <summary>使用指定的 <see cref="T:System.Globalization.GregorianCalendarTypes" /> 值初始化 <see cref="T:System.Globalization.GregorianCalendar" /> 类的新实例。</summary>
      <param name="type">
        <see cref="T:System.Globalization.GregorianCalendarTypes" /> 值，指示要创建的日历的语言版本。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="type" /> 不是 <see cref="T:System.Globalization.GregorianCalendarTypes" /> 枚举的一个成员。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定月数的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">将向其添加月数的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要添加的月数。</param>
      <returns>将指定月数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentException">生成的 <see cref="T:System.DateTime" /> 超出了支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小于 -120000。  
或 
 <paramref name="months" /> 大于 120000。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定年数的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">将向其添加年数的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要添加的年数。</param>
      <returns>将指定年数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentException">生成的 <see cref="T:System.DateTime" /> 超出了支持的范围。</exception>
    </member>
    <member name="F:System.Globalization.GregorianCalendar.ADEra">
      <summary>表示当前纪元。 此字段为常数。</summary>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.AlgorithmType">
      <summary>获取一个值，该值指示当前日历是阳历、阴历还是二者的组合。</summary>
      <returns>始终返回 <see cref="F:System.Globalization.CalendarAlgorithmType.SolarCalendar" />。</returns>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.CalendarType">
      <summary>获取或设置 <see cref="T:System.Globalization.GregorianCalendarTypes" /> 值，该值指示当前 <see cref="T:System.Globalization.GregorianCalendar" /> 的语言版本。</summary>
      <returns>一个 <see cref="T:System.Globalization.GregorianCalendarTypes" /> 值，该值指示当前 <see cref="T:System.Globalization.GregorianCalendar" /> 的语言版本。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">在设置操作中指定的值不是 <see cref="T:System.Globalization.GregorianCalendarTypes" /> 枚举的成员。</exception>
      <exception cref="T:System.InvalidOperationException">在设置操作中，当前实例是只读的。</exception>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.Eras">
      <summary>获取 <see cref="T:System.Globalization.GregorianCalendar" /> 中的纪元列表。</summary>
      <returns>表示 <see cref="T:System.Globalization.GregorianCalendar" /> 中的纪元的整数数组。</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的月中日期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 31 之间的一个整数，用于表示 <paramref name="time" /> 中的月中日期。</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的周中日期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个 <see cref="T:System.DayOfWeek" /> 值，用于表示 <paramref name="time" /> 中的周中日期。</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的日期是该年中的第几天。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 366 之间的一个整数，用于表示 <paramref name="time" /> 中的年中日期。</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>返回指定纪元中指定年份的指定月份中的天数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元中指定年份的指定月份中的天数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 超出了日历支持的范围。  
或 
 <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="month" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>返回指定纪元中指定年份的天数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元中指定年份的天数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 超出了日历支持的范围。  

或 - 
<paramref name="year" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetEra(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的纪元。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个整数，用于表示 <paramref name="time" /> 中的纪元。</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>计算指定纪元年份的闰月。</summary>
      <param name="year">年份。</param>
      <param name="era">纪元。 指定 <see cref="F:System.Globalization.GregorianCalendar.ADEra" /> 或 <see langword="GregorianCalendar.Eras[Calendar.CurrentEra]" />。</param>
      <returns>总为 0，因为公历无法识别闰月。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于公历 1 年或大于公历 9999 年。  
或 
 <paramref name="era" /> 不是 <see cref="F:System.Globalization.GregorianCalendar.ADEra" /> 或 <see langword="GregorianCalendar.Eras[Calendar.CurrentEra]" />。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetMonth(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 12 之间的一个整数，用于表示 <paramref name="time" /> 中的月份。</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>返回指定纪元中指定年份的月数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元中指定年份的月数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 超出了日历支持的范围。  
或 
 <paramref name="year" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.GetYear(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的年份。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个整数，用于表示 <paramref name="time" /> 中的年份。</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>确定指定纪元中的指定日期是否为闰日。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="day">1 到 31 之间的一个整数，用于表示天。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>如果指定的日期是闰日，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 超出了日历支持的范围。  
或 
 <paramref name="year" /> 超出了日历支持的范围。  

或 - 
<paramref name="month" /> 超出了日历支持的范围。  

或 
 <paramref name="day" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>确定指定纪元中指定年份的指定月份是否为闰月。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>除非被派生类重写，否则此方法始终返回 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 超出了日历支持的范围。  
或 
 <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="month" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>确定指定纪元中的指定年份是否为闰年。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>如果指定的年是闰年，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 超出了日历支持的范围。  
或 
 <paramref name="year" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.MaxSupportedDateTime">
      <summary>获取 <see cref="T:System.Globalization.GregorianCalendar" /> 类型支持的最晚日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.GregorianCalendar" />类型支持的最晚日期和时间, 即公元9999年12月31日的最后一刻 和等效于<see cref="F:System.DateTime.MaxValue" />。</returns>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.MinSupportedDateTime">
      <summary>获取 <see cref="T:System.Globalization.GregorianCalendar" /> 类型支持的最早日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.GregorianCalendar" />类型支持的最早日期和时间, 即公元0001年1月1日开始的那一刻 和等效于<see cref="F:System.DateTime.MinValue" />。</returns>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>返回设置为指定纪元中指定日期和时间的 <see cref="T:System.DateTime" />。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="day">1 到 31 之间的一个整数，用于表示天。</param>
      <param name="hour">0 到 23 之间的一个整数，用于表示小时。</param>
      <param name="minute">0 到 59 之间的一个整数，用于表示分钟。</param>
      <param name="second">0 到 59 之间的一个整数，用于表示秒。</param>
      <param name="millisecond">0 到 999 之间的一个整数，用于表示毫秒。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>设置为当前纪元中指定日期和时间的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 超出了日历支持的范围。  
或 
 <paramref name="year" /> 超出了日历支持的范围。  

或 - 
<paramref name="month" /> 超出了日历支持的范围。  

或 
 <paramref name="day" /> 超出了日历支持的范围。  
或 
 <paramref name="hour" /> 小于 0 或大于 23。  

或 - 
<paramref name="minute" /> 小于 0 或大于 59。  

或 
 <paramref name="second" /> 小于 0 或大于 59。  
或 
 <paramref name="millisecond" /> 小于 0 或大于 999。</exception>
    </member>
    <member name="M:System.Globalization.GregorianCalendar.ToFourDigitYear(System.Int32)">
      <summary>使用 <see cref="P:System.Globalization.GregorianCalendar.TwoDigitYearMax" /> 属性将指定的年份转换为四位数年份，以确定相应的纪元。</summary>
      <param name="year">一个两位数或四位数的整数，用于表示要转换的年份。</param>
      <returns>包含 <paramref name="year" /> 的四位数表示形式的整数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.GregorianCalendar.TwoDigitYearMax">
      <summary>获取或设置可以用两位数年份表示的 100 年范围内的最后一年。</summary>
      <returns>可以用两位数年份表示的 100 年范围内的最后一年。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">为设置操作指定的值小于 99。  
或 
为设置操作指定的值大于 <see langword="MaxSupportedDateTime.Year" />。</exception>
      <exception cref="T:System.InvalidOperationException">在设置操作中，当前实例是只读的。</exception>
    </member>
    <member name="T:System.Globalization.GregorianCalendarTypes">
      <summary>定义公历的不同语言版本。</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.Arabic">
      <summary>指公历的阿拉伯语版本。</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.Localized">
      <summary>指公历的已本地化版本（基于使用 <see cref="T:System.Globalization.CultureInfo" /> 的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 的语言）。</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.MiddleEastFrench">
      <summary>指公历的中东法语版本。</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.TransliteratedEnglish">
      <summary>指公历的已转译的英语版本。</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.TransliteratedFrench">
      <summary>指公历的已转译的法语版本。</summary>
    </member>
    <member name="F:System.Globalization.GregorianCalendarTypes.USEnglish">
      <summary>指美国。公历的英语版本。</summary>
    </member>
    <member name="T:System.Globalization.HebrewCalendar">
      <summary>表示希伯来历。</summary>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.HebrewCalendar" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定月数的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">
        <see cref="T:System.DateTime" />，将向其添加 <paramref name="months" />。</param>
      <param name="months">要添加的月数。</param>
      <returns>将指定月数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentException">生成的 <see cref="T:System.DateTime" /> 超出了支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小于 -120,000 或大于 120,000。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定年数的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">
        <see cref="T:System.DateTime" />，将向其添加 <paramref name="years" />。</param>
      <param name="years">要添加的年数。</param>
      <returns>将指定年数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentException">生成的 <see cref="T:System.DateTime" /> 超出了支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.AlgorithmType">
      <summary>获取一个值，该值指示当前日历是阳历、阴历还是二者的组合。</summary>
      <returns>始终返回 <see cref="F:System.Globalization.CalendarAlgorithmType.LunisolarCalendar" />。</returns>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.Eras">
      <summary>获取 <see cref="T:System.Globalization.HebrewCalendar" /> 中的纪元列表。</summary>
      <returns>表示 <see cref="T:System.Globalization.HebrewCalendar" /> 类型中的纪元的整数数组。 返回值始终是包含一个等于 <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> 的元素的数组。</returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的月中日期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 30 之间的一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的月中日期。</returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的周中日期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个 <see cref="T:System.DayOfWeek" /> 值，用于表示指定的 <see cref="T:System.DateTime" /> 中的周中日期。</returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的日期是该年中的第几天。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 385 之间的一个整数，表示指定 <see cref="T:System.DateTime" /> 中的日期是该年中的第几天。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 在公历中早于 1583 年 9 月 17 日，或大于 <see cref="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime" />。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>返回指定纪元中指定年份的指定月份中的天数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 13 之间的一个整数，用于表示月份。</param>
      <param name="era">一个整数，用于表示纪元。 指定 <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> 或 <see langword="Calendar.Eras[Calendar.CurrentEra]" />。</param>
      <returns>指定纪元中指定年份的指定月份中的天数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" /> 或 <paramref name="era" /> 超出了当前 <see cref="T:System.Globalization.HebrewCalendar" /> 对象支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>返回指定纪元中指定年份的天数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。 指定 <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> 或 <see langword="HebrewCalendar.Eras[Calendar.CurrentEra]" />。</param>
      <returns>指定纪元中指定年份的天数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 超出了当前 <see cref="T:System.Globalization.HebrewCalendar" /> 对象支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetEra(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的纪元。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个整数，用于表示指定 <see cref="T:System.DateTime" /> 中的纪元。 返回值始终为 <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" />。</returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>计算指定纪元年份的闰月。</summary>
      <param name="year">年份。</param>
      <param name="era">纪元。 指定 <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> 或 <see langword="HebrewCalendar.Eras[Calendar.CurrentEra]" />。</param>
      <returns>一个正整数，用于表示指定纪元年份中的闰月。 如果 <paramref name="year" /> 和 <paramref name="era" /> 参数指定闰年，则返回值为 7；如果不是闰年，则为 0。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 不是 <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> 或 <see langword="HebrewCalendar.Eras[Calendar.CurrentEra]" />。  
或 
 <paramref name="year" /> 小于希伯来历年份 5343 或大于希伯来历年份 5999。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetMonth(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 13 之间的一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的月份。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 小于 <see cref="P:System.Globalization.HebrewCalendar.MinSupportedDateTime" /> 或大于 <see cref="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime" />。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>返回指定纪元中指定年份的月数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。 指定 <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> 或 <see langword="HebrewCalendar.Eras[Calendar.CurrentEra]" />。</param>
      <returns>指定纪元中指定年份的月数。 返回值是 12（在平年中）或 13（在闰年中）。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 超出了当前 <see cref="T:System.Globalization.HebrewCalendar" /> 对象支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.GetYear(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 值中的年份。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的年份。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 超出了当前 <see cref="T:System.Globalization.HebrewCalendar" /> 对象支持的范围。</exception>
    </member>
    <member name="F:System.Globalization.HebrewCalendar.HebrewEra">
      <summary>表示当前纪元。 此字段为常数。</summary>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>确定指定纪元中的指定日期是否为闰日。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 13 之间的一个整数，用于表示月份。</param>
      <param name="day">1 到 30 之间的一个整数，用于表示月中日期。</param>
      <param name="era">一个整数，用于表示纪元。 指定 <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> 或 <see langword="HebrewCalendar.Eras[Calendar.CurrentEra]" />。</param>
      <returns>如果指定的日期是闰日，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" /> 或 <paramref name="era" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>确定指定纪元中指定年份的指定月份是否为闰月。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 13 之间的一个整数，用于表示月份。</param>
      <param name="era">一个整数，用于表示纪元。 指定 <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> 或 <see langword="HebrewCalendar.Eras[Calendar.CurrentEra]" />。</param>
      <returns>如果指定的月份是闰月，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" /> 或 <paramref name="era" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>确定指定纪元中的指定年份是否为闰年。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。 指定 <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> 或 <see langword="HebrewCalendar.Eras[Calendar.CurrentEra]" />。</param>
      <returns>如果指定的年是闰年，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime">
      <summary>获取 <see cref="T:System.Globalization.HebrewCalendar" /> 类型支持的最晚日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.HebrewCalendar" />类型支持的最晚日期和时间, 该日期和时间相当于公元2239年9月29日的最后一刻 公历。</returns>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.MinSupportedDateTime">
      <summary>获取 <see cref="T:System.Globalization.HebrewCalendar" /> 类型支持的最早日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.HebrewCalendar" />类型支持的最早日期和时间, 该日期和时间等效于1月1日, 公元1583 公历。</returns>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>返回设置为指定纪元中指定日期和时间的 <see cref="T:System.DateTime" />。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 13 之间的一个整数，用于表示月份。</param>
      <param name="day">1 到 30 之间的一个整数，用于表示月中日期。</param>
      <param name="hour">0 到 23 之间的一个整数，用于表示小时。</param>
      <param name="minute">0 到 59 之间的一个整数，用于表示分钟。</param>
      <param name="second">0 到 59 之间的一个整数，用于表示秒。</param>
      <param name="millisecond">0 到 999 之间的一个整数，用于表示毫秒。</param>
      <param name="era">一个整数，用于表示纪元。 指定 <see cref="F:System.Globalization.HebrewCalendar.HebrewEra" /> 或 <see langword="HebrewCalendar.Eras[Calendar.CurrentEra]" />。</param>
      <returns>设置为当前纪元中指定日期和时间的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" /> 或 <paramref name="era" /> 超出了当前 <see cref="T:System.Globalization.HebrewCalendar" /> 对象支持的范围。  

或 - 
<paramref name="hour" /> 小于 0 或大于 23。  

或 - 
<paramref name="minute" /> 小于 0 或大于 59。  


或 
 <paramref name="second" /> 小于 0 或大于 59。  

或 - 
<paramref name="millisecond" /> 小于 0 或大于 999。</exception>
    </member>
    <member name="M:System.Globalization.HebrewCalendar.ToFourDigitYear(System.Int32)">
      <summary>使用 <see cref="P:System.Globalization.HebrewCalendar.TwoDigitYearMax" /> 属性将指定的年份转换为四位数年份，以确定相应的纪元。</summary>
      <param name="year">从 0 到 99 的两位数年份，或者从 5343 到 5999 的四位数希伯来历年份。</param>
      <returns>如果 <paramref name="year" /> 参数是两位数年份，则返回值是对应的四位数年份。 如果 <paramref name="year" /> 参数是四位数年份，则返回值是未更改的 <paramref name="year" /> 参数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于 0。  

或 - 
<paramref name="year" /> 小于 <see cref="P:System.Globalization.HebrewCalendar.MinSupportedDateTime" /> 或大于 <see cref="P:System.Globalization.HebrewCalendar.MaxSupportedDateTime" />。</exception>
    </member>
    <member name="P:System.Globalization.HebrewCalendar.TwoDigitYearMax">
      <summary>获取或设置可以用两位数年份表示的 100 年范围内的最后一年。</summary>
      <returns>可以用两位数年份表示的 100 年范围内的最后一年。</returns>
      <exception cref="T:System.InvalidOperationException">当前 <see cref="T:System.Globalization.HebrewCalendar" /> 对象为只读。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">在设置操作中，希伯来历年数值小于 5343 而不是 99，或者大于 5999。</exception>
    </member>
    <member name="T:System.Globalization.HijriCalendar">
      <summary>表示回历。</summary>
    </member>
    <member name="M:System.Globalization.HijriCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.HijriCalendar" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Globalization.HijriCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定月数的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要向其添加月数的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要添加的月数。</param>
      <returns>将指定月数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentException">生成的 <see cref="T:System.DateTime" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小于 -120000。  
或 
 <paramref name="months" /> 大于 120000。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定年数的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">要向其添加年数的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要添加的年数。</param>
      <returns>将指定年数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentException">生成的 <see cref="T:System.DateTime" /> 超出了支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.HijriCalendar.AlgorithmType">
      <summary>获取一个值，该值指示当前日历是阳历、阴历还是二者的组合。</summary>
      <returns>始终返回 <see cref="F:System.Globalization.CalendarAlgorithmType.LunarCalendar" />。</returns>
    </member>
    <member name="P:System.Globalization.HijriCalendar.DaysInYearBeforeMinSupportedYear">
      <summary>获取 <see cref="P:System.Globalization.HijriCalendar.MinSupportedDateTime" /> 属性指定的年份之前的年中天数。</summary>
      <returns>由 <see cref="P:System.Globalization.HijriCalendar.MinSupportedDateTime" /> 指定的在年之前的一年的天数。</returns>
    </member>
    <member name="P:System.Globalization.HijriCalendar.Eras">
      <summary>获取 <see cref="T:System.Globalization.HijriCalendar" /> 中的纪元列表。</summary>
      <returns>表示 <see cref="T:System.Globalization.HijriCalendar" /> 中的纪元的整数数组。</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDayOfMonth(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的月中日期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 30 之间的一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的月中日期。</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDayOfWeek(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的周中日期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个 <see cref="T:System.DayOfWeek" /> 值，用于表示指定的 <see cref="T:System.DateTime" /> 中的周中日期。</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDayOfYear(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的日期是该年中的第几天。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 355 之间的一个整数，用于表示指定 <see cref="T:System.DateTime" /> 中的年中日期。</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>返回指定纪元年份中指定月份的天数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元中指定年份的指定月份中的天数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 超出了此日历支持的范围。  
或 
 <paramref name="year" /> 超出了此日历支持的范围。  
或 
 <paramref name="month" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>返回指定纪元年份中的天数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元年份中的天数。 天数在平年中为 354，在闰年中为 355。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetEra(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的纪元。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个整数，用于表示指定 <see cref="T:System.DateTime" /> 中的纪元。</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>计算指定纪元年份的闰月。</summary>
      <param name="year">年份。</param>
      <param name="era">纪元。 指定 <see cref="F:System.Globalization.Calendar.CurrentEra" /> 或 <see cref="F:System.Globalization.HijriCalendar.HijriEra" />。</param>
      <returns>总为 0，因为 <see cref="T:System.Globalization.HijriCalendar" /> 类型不支持闰月的概念。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于回历年 1 或大于 9666 年。  
或 
 <paramref name="era" /> 不是 <see cref="F:System.Globalization.Calendar.CurrentEra" /> 或 <see cref="F:System.Globalization.HijriCalendar.HijriEra" />。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetMonth(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 12 之间的一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的月份。</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>返回指定纪元年份中的月数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元年份中的月数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 超出了此日历支持的范围。  
或 
 <paramref name="year" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.GetYear(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的年份。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的年份。</returns>
    </member>
    <member name="P:System.Globalization.HijriCalendar.HijriAdjustment">
      <summary>获取或设置要在日历中添加或减去的天数，以适应斋月的开头和结尾的差异以及国家/地区间的日期差别。</summary>
      <returns>-2 到 2 之间的一个整数，表示要在日历中添加或减去的天数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">属性设置为无效值。</exception>
    </member>
    <member name="F:System.Globalization.HijriCalendar.HijriEra">
      <summary>表示当前纪元。 此字段为常数。</summary>
    </member>
    <member name="M:System.Globalization.HijriCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>确定指定的日期是否为闰日。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="day">1 到 30 之间的一个整数，用于表示月中日期。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>如果指定的日期是闰日，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 超出了此日历支持的范围。  

或 - 
<paramref name="year" /> 超出了此日历支持的范围。  

或 
 <paramref name="month" /> 超出了此日历支持的范围。  

或 - 
<paramref name="day" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>确定指定纪元年份中的指定月份是否为闰月。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>此方法始终返回 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 超出了此日历支持的范围。  

或 - 
<paramref name="year" /> 超出了此日历支持的范围。  

或 
 <paramref name="month" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>确定指定纪元中的指定年份是否为闰年。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>如果指定的年是闰年，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 超出了此日历支持的范围。  
或 
 <paramref name="year" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.HijriCalendar.MaxSupportedDateTime">
      <summary>获取此日历支持的最晚日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.HijriCalendar" />类型支持的最晚日期和时间, 该日期和时间等效于9999年12月31日结束的那一刻 公历。</returns>
    </member>
    <member name="P:System.Globalization.HijriCalendar.MinSupportedDateTime">
      <summary>获取此日历支持的最早日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.HijriCalendar" />类型支持的最早日期和时间, 该日期和时间等效于622年7月18日的第一个时刻 公历。</returns>
    </member>
    <member name="M:System.Globalization.HijriCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>返回设置为指定的日期、时间和纪元的 <see cref="T:System.DateTime" />。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="day">1 到 30 之间的一个整数，用于表示月中日期。</param>
      <param name="hour">0 到 23 之间的一个整数，用于表示小时。</param>
      <param name="minute">0 到 59 之间的一个整数，用于表示分钟。</param>
      <param name="second">0 到 59 之间的一个整数，用于表示秒。</param>
      <param name="millisecond">0 到 999 之间的一个整数，用于表示毫秒。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>设置为当前纪元中指定日期和时间的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 超出了此日历支持的范围。  

或 - 
<paramref name="year" /> 超出了此日历支持的范围。  

或 - 
<paramref name="month" /> 超出了此日历支持的范围。  


或 
 <paramref name="day" /> 超出了此日历支持的范围。  

或 - 
<paramref name="hour" /> 小于 0 或大于 23。  

或 
 <paramref name="minute" /> 小于 0 或大于 59。  
或 
 <paramref name="second" /> 小于 0 或大于 59。  
或 
 <paramref name="millisecond" /> 小于 0 或大于 999。</exception>
    </member>
    <member name="M:System.Globalization.HijriCalendar.ToFourDigitYear(System.Int32)">
      <summary>使用 <see cref="P:System.Globalization.HijriCalendar.TwoDigitYearMax" /> 属性将指定的年份转换为四位数年份，以确定相应的纪元。</summary>
      <param name="year">一个两位数或四位数的整数，用于表示要转换的年份。</param>
      <returns>包含 <paramref name="year" /> 的四位数表示形式的整数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.HijriCalendar.TwoDigitYearMax">
      <summary>获取或设置可以用两位数年份表示的 100 年范围内的最后一年。</summary>
      <returns>可以用两位数年份表示的 100 年范围内的最后一年。</returns>
      <exception cref="T:System.InvalidOperationException">此日历为只读。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">设置操作中的值小于 100 或大于 9666。</exception>
    </member>
    <member name="T:System.Globalization.IdnMapping">
      <summary>支持在 Internet 域名中使用非 ASCII 字符。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Globalization.IdnMapping.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.IdnMapping" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Globalization.IdnMapping.AllowUnassigned">
      <summary>获取或设置一个值，该值指示当前 <see cref="T:System.Globalization.IdnMapping" /> 对象的成员所执行的操作中是否使用未分配的 Unicode 码位。</summary>
      <returns>如果在操作中使用未分配的码位，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Globalization.IdnMapping.Equals(System.Object)">
      <summary>指示当前 <see cref="T:System.Globalization.IdnMapping" /> 对象与指定对象是否相等。</summary>
      <param name="obj">要与当前对象进行比较的对象。</param>
      <returns>如果 <paramref name="obj" /> 参数指定的对象从 <see cref="T:System.Globalization.IdnMapping" /> 派生且它的 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 属性相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetAscii(System.String)">
      <summary>将由 Unicode 字符组成的域名标签的字符串编码为 US-ASCII 字符范围内的可显示的 Unicode 字符的字符串。 根据 IDNA 标准格式化的字符串。</summary>
      <param name="unicode">要转换的字符串，它包含一个或多个由标签分隔符分隔的域名标签。</param>
      <returns>由 <paramref name="unicode" /> 参数指定的字符串的等效项包括 US-ASCII 字符范围（U+0020 至 U+007E）内的可显示 Unicode 字符并根据 IDNA 标准格式化。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="unicode" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">根据 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 属性以及 IDNA 标准，<paramref name="unicode" /> 是无效的。</exception>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)">
      <summary>编码包含US-ASCII字符范围以外的 Unicode 字符的域名称标签子字符串。 子串转换为在 US-ASCII 字符范围内可显示的“ Unicode ”字符串并根据 IDNA 标准格式化。</summary>
      <param name="unicode">要转换的字符串，它包含一个或多个由标签分隔符分隔的域名标签。</param>
      <param name="index">
        <paramref name="unicode" /> 的从零开始的偏移量，用于指定开始转换的子字符串的位置。 转换运算将继续执行到 <paramref name="unicode" /> 字符串的末尾。</param>
      <returns>由 <paramref name="unicode" /> 和 <paramref name="index" /> 指定的子字符串的等效项包括 US-ASCII 字符范围（U+0020 至 U+007E）内的可显示 Unicode 字符并根据 IDNA 标准格式化。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="unicode" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。  
或 
 <paramref name="index" /> 大于 <paramref name="unicode" /> 的长度。</exception>
      <exception cref="T:System.ArgumentException">根据 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 属性以及 IDNA 标准，<paramref name="unicode" /> 是无效的。</exception>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)">
      <summary>编码包含 US-ASCII 字符范围以外的 Unicode 字符的域名称标签子字符串的指定字符数。 子串转换为在 US-ASCII 字符范围内可显示的“ Unicode ”字符串并根据 IDNA 标准格式化。</summary>
      <param name="unicode">要转换的字符串，它包含一个或多个由标签分隔符分隔的域名标签。</param>
      <param name="index">
        <paramref name="unicode" /> 的从零开始的偏移量，用于指定子字符串的起始位置。</param>
      <param name="count">要在 <paramref name="index" /> 字符串中的 <paramref name="unicode" /> 指定的位置开始的子字符串中转换的字符数。</param>
      <returns>由 <paramref name="unicode" />、<paramref name="index" /> 和 <paramref name="count" /> 参数指定的子字符串的等效项，包括 US-ASCII 字符范围（U+0020 至 U+007E）内的可显示 Unicode 字符并根据 IDNA 标准格式化。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="unicode" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。  
或 
 <paramref name="index" /> 大于 <paramref name="unicode" /> 的长度。  
或 
 <paramref name="index" /> 大于 <paramref name="unicode" /> 的长度减去 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentException">根据 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 属性以及 IDNA 标准，<paramref name="unicode" /> 是无效的。</exception>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetHashCode">
      <summary>返回此 <see cref="T:System.Globalization.IdnMapping" /> 对象的哈希代码。</summary>
      <returns>从 <see cref="T:System.Globalization.IdnMapping" /> 对象的属性派生的四个 32 位常量中的一个。  返回值没有特殊意义，不适合在哈希代码算法中使用。</returns>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetUnicode(System.String)">
      <summary>对基于 IDNA 标准编码的一个或者多个域名标签的字符串进行解码，解码为一个 Unicode 字符串。</summary>
      <param name="ascii">要解码的字符串，包含根据 IDNA 标准在 US-ASCII 字符范围 （U+0020 至 U+007E） 编码的一个或多个标签。</param>
      <returns>由 <paramref name="ascii" /> 参数指定的 IDNA 子字符串的 Unicode 等效项。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ascii" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">根据 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 属性以及 IDNA 标准，<paramref name="ascii" /> 是无效的。</exception>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)">
      <summary>对基于 IDNA 标准编码的一个或者多个域名标签的子字符串进行解码，解码为 Unicode 字符串。</summary>
      <param name="ascii">要解码的字符串，包含根据 IDNA 标准在 US-ASCII 字符范围 （U+0020 至 U+007E） 编码的一个或多个标签。</param>
      <param name="index">
        <paramref name="ascii" /> 的从零开始的偏移量，用于指定开始解码的子字符串的位置。 解码运算将继续执行到 <paramref name="ascii" /> 字符串的末尾。</param>
      <returns>由 <paramref name="ascii" /> 和 <paramref name="index" /> 参数指定的 IDNA 子字符串的 Unicode 等效项。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ascii" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。  
或 
 <paramref name="index" /> 大于 <paramref name="ascii" /> 的长度。</exception>
      <exception cref="T:System.ArgumentException">根据 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 属性以及 IDNA 标准，<paramref name="ascii" /> 是无效的。</exception>
    </member>
    <member name="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)">
      <summary>对基于 IDNA 标准编码、具有指定长度并包含一个或者多个域名标签的子字符串进行解码，解码为一个 Unicode 字符串。</summary>
      <param name="ascii">要解码的字符串，包含根据 IDNA 标准在 US-ASCII 字符范围 （U+0020 至 U+007E） 编码的一个或多个标签。</param>
      <param name="index">
        <paramref name="ascii" /> 的从零开始的偏移量，用于指定子字符串的起始位置。</param>
      <param name="count">要在 <paramref name="ascii" /> 字符串中的 <paramref name="index" /> 指定的位置开始的子字符串中转换的字符数。</param>
      <returns>由 <paramref name="ascii" />、<paramref name="index" /> 和 <paramref name="count" /> 参数指定的 IDNA 子字符串的 Unicode 等效项。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ascii" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。  

或 - 
<paramref name="index" /> 大于 <paramref name="ascii" /> 的长度。  

或 
 <paramref name="index" /> 大于 <paramref name="ascii" /> 的长度减去 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentException">根据 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 属性以及 IDNA 标准，<paramref name="ascii" /> 是无效的。</exception>
    </member>
    <member name="P:System.Globalization.IdnMapping.UseStd3AsciiRules">
      <summary>获取或设置一个值，该值指示在当前 <see cref="T:System.Globalization.IdnMapping" /> 对象的成员所执行的操作中是使用标准命名约定还是宽松命名约定。</summary>
      <returns>如果在操作中使用标准命名转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Globalization.ISOWeek">
      <summary>提供静态成员，以支持 ISO 周日期，这是由国际标准化组织 (ISO) 发布的 ISO 8601 日期和时间标准的一部分。</summary>
    </member>
    <member name="M:System.Globalization.ISOWeek.GetWeekOfYear(System.DateTime)">
      <summary>计算给定的公历日期的 ISO 周数。</summary>
      <param name="date">公历中的日期。</param>
      <returns>1 至 53 之间的数字表示给定的公历日期的 ISO 周数。</returns>
    </member>
    <member name="M:System.Globalization.ISOWeek.GetWeeksInYear(System.Int32)">
      <summary>计算给定的 ISO 周编号年份中的周数。</summary>
      <param name="year">ISO 周编号年份（也称为非正式的 ISO 年份）。</param>
      <returns>一年中的 ISO 周数。 返回 52 或 53。</returns>
    </member>
    <member name="M:System.Globalization.ISOWeek.GetYear(System.DateTime)">
      <summary>计算映射到输入公历日期的 ISO 周编号年份（也称为非正式的 ISO 年份）。</summary>
      <param name="date">公历中的日期。</param>
      <returns>ISO 周编号年份，介于 1 至 9999 之间</returns>
    </member>
    <member name="M:System.Globalization.ISOWeek.GetYearEnd(System.Int32)">
      <summary>计算周编号年份结束的公历日期。</summary>
      <param name="year">ISO 周编号年份（也称为非正式的 ISO 年份）。</param>
      <returns>周编号年份结束的公历日期。</returns>
    </member>
    <member name="M:System.Globalization.ISOWeek.GetYearStart(System.Int32)">
      <summary>计算周编号年份开始的公历日期。</summary>
      <param name="year">ISO 周编号年份（也称为非正式的 ISO 年份）。</param>
      <returns>周编号年份开始的公历日期。</returns>
    </member>
    <member name="M:System.Globalization.ISOWeek.ToDateTime(System.Int32,System.Int32,System.DayOfWeek)">
      <summary>将由指定 ISO 年份、周数和星期几表示的 ISO 周日期映射到相应的公历日期。</summary>
      <param name="year">ISO 周编号年份（也称为非正式的 ISO 年份）。</param>
      <param name="week">给定的 ISO 周编号年份中的 ISO 周数。</param>
      <param name="dayOfWeek">给定的 ISO 周内一星期中的某一天。</param>
      <returns>公历日期相当于输入的 ISO 周日期。</returns>
    </member>
    <member name="T:System.Globalization.JapaneseCalendar">
      <summary>表示日本历。</summary>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.JapaneseCalendar" /> 类的新实例。</summary>
      <exception cref="T:System.TypeInitializationException">由于缺少区域性信息，因此无法初始化 <see cref="T:System.Globalization.JapaneseCalendar" /> 对象。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定月数的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">将向其添加月数的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要添加的月数。</param>
      <returns>将指定月数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentException">生成的 <see cref="T:System.DateTime" /> 超出了支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小于 -120000。  
或 
 <paramref name="months" /> 大于 120000。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定年数的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">将向其添加年数的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要添加的年数。</param>
      <returns>将指定年数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentException">生成的 <see cref="T:System.DateTime" /> 超出了支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 超出 <see cref="T:System.Globalization.JapaneseCalendar" /> 类型支持范围。  
或 
 <paramref name="years" /> 小于 -10,000 或大于 10,000。</exception>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.AlgorithmType">
      <summary>获取一个值，该值指示当前日历是阳历、阴历还是二者的组合。</summary>
      <returns>始终返回 <see cref="F:System.Globalization.CalendarAlgorithmType.SolarCalendar" />。</returns>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.Eras">
      <summary>获取 <see cref="T:System.Globalization.JapaneseCalendar" /> 中的纪元列表。</summary>
      <returns>表示 <see cref="T:System.Globalization.JapaneseCalendar" /> 中的纪元的整数数组。</returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的月中日期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 31 之间的一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的月中日期。</returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的周中日期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个 <see cref="T:System.DayOfWeek" /> 值，用于表示指定的 <see cref="T:System.DateTime" /> 中的周中日期。</returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的日期是该年中的第几天。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 366 之间的一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的年中日期。</returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>返回指定纪元中指定年份的指定月份中的天数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元中指定年份的指定月份中的天数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  

或 - 
<paramref name="month" /> 超出了日历支持的范围。  

或 - 
<paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>返回指定纪元中指定年份的天数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元中指定年份的天数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的纪元。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个整数，用于表示指定 <see cref="T:System.DateTime" /> 中的纪元。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">生成的 <see cref="T:System.DateTime" /> 超出了支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>计算指定纪元年份的闰月。</summary>
      <param name="year">年份。</param>
      <param name="era">纪元。</param>
      <returns>返回值总是为 0，因为 <see cref="T:System.Globalization.JapaneseCalendar" /> 类型不支持闰月的概念。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 超出了 <see cref="T:System.Globalization.JapaneseCalendar" /> 类型支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 12 之间的一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的月份。</returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>返回指定纪元中指定年份的月数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>返回值始终为 12。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>返回一年中包含指定 <see cref="T:System.DateTime" /> 值中的日期的那个星期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <param name="rule">
        <see cref="T:System.Globalization.CalendarWeekRule" /> 值之一，用于定义一个日历周。</param>
      <param name="firstDayOfWeek">
        <see cref="T:System.DayOfWeek" /> 值之一，用于表示一个星期的第一天。</param>
      <returns>从 1 开始的一个整数，用于表示一年中包含 <paramref name="time" /> 参数内日期的那个星期。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 或 <paramref name="firstDayOfWeek" /> 超出了日历支持的范围。  

或 - 
<paramref name="rule" /> 不是有效的 <see cref="T:System.Globalization.CalendarWeekRule" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的年份。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的年份。</returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>确定指定纪元中的指定日期是否为闰日。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="day">1 到 31 之间的一个整数，用于表示天。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>如果指定的日期是闰日，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="month" /> 超出了日历支持的范围。  
或 
 <paramref name="day" /> 超出了日历支持的范围。  

或 - 
<paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>确定指定纪元中指定年份的指定月份是否为闰月。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>除非被派生类重写，否则此方法始终返回 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="month" /> 超出了日历支持的范围。  

或 - 
<paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>确定指定纪元中的指定年份是否为闰年。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>如果指定的年份是闰年，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.MaxSupportedDateTime">
      <summary>获取当前 <see cref="T:System.Globalization.JapaneseCalendar" /> 对象支持的最晚日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.JapaneseCalendar" />类型支持的最晚日期和时间, 该日期和时间等效于9999年12月31日结束的那一刻 公历。</returns>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.MinSupportedDateTime">
      <summary>获取当前 <see cref="T:System.Globalization.JapaneseCalendar" /> 对象支持的最早日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.JapaneseCalendar" />类型支持的最早日期和时间, 该日期和时间等效于1868年9月8日开始的那一刻 公历。</returns>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>返回设置为指定纪元中指定日期和时间的 <see cref="T:System.DateTime" />。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="day">1 到 31 之间的一个整数，用于表示天。</param>
      <param name="hour">0 到 23 之间的一个整数，用于表示小时。</param>
      <param name="minute">0 到 59 之间的一个整数，用于表示分钟。</param>
      <param name="second">0 到 59 之间的一个整数，用于表示秒。</param>
      <param name="millisecond">0 到 999 之间的一个整数，用于表示毫秒。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>设置为当前纪元中指定日期和时间的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="month" /> 超出了日历支持的范围。  
或 
 <paramref name="day" /> 超出了日历支持的范围。  
或 
 <paramref name="hour" /> 小于 0 或大于 23。  
或 
 <paramref name="minute" /> 小于 0 或大于 59。  
或 
 <paramref name="second" /> 小于 0 或大于 59。  

或 - 
<paramref name="millisecond" /> 小于 0 或大于 999。  

或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)">
      <summary>使用 <see cref="P:System.Globalization.JapaneseCalendar.TwoDigitYearMax" /> 属性将指定的年份转换为四位数年份，以确定相应的纪元。</summary>
      <param name="year">一个表示要转换的年份的整数（通常为两位数）。</param>
      <returns>包含 <paramref name="year" /> 的四位数表示形式的整数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.JapaneseCalendar.TwoDigitYearMax">
      <summary>获取或设置可以用两位数年份表示的 100 年范围内的最后一年。</summary>
      <returns>可以用两位数年份表示的 100 年范围内的最后一年。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">为设置操作指定的值小于 99。  
或 
为 Set 操作指定的值大于 8011（或 <see langword="MaxSupportedDateTime.Year" />）。</exception>
      <exception cref="T:System.InvalidOperationException">在设置操作中，当前实例是只读的。</exception>
    </member>
    <member name="T:System.Globalization.JapaneseLunisolarCalendar">
      <summary>表示时间划分方式，例如“月”、“日”和“年”。 年按日本历计算，而日和月则按阴阳历计算。</summary>
    </member>
    <member name="M:System.Globalization.JapaneseLunisolarCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.JapaneseLunisolarCalendar" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Globalization.JapaneseLunisolarCalendar.DaysInYearBeforeMinSupportedYear">
      <summary>获取 <see cref="P:System.Globalization.JapaneseLunisolarCalendar.MinSupportedDateTime" /> 属性指定的年份之前的年中天数。</summary>
      <returns>由 <see cref="P:System.Globalization.JapaneseLunisolarCalendar.MinSupportedDateTime" /> 指定的在年之前的一年的天数。</returns>
    </member>
    <member name="P:System.Globalization.JapaneseLunisolarCalendar.Eras">
      <summary>获取与 <see cref="T:System.Globalization.JapaneseLunisolarCalendar" /> 对象相关的纪元。</summary>
      <returns>32 位有符号整数数组，用于指定相关的纪元。</returns>
    </member>
    <member name="M:System.Globalization.JapaneseLunisolarCalendar.GetEra(System.DateTime)">
      <summary>检索对应于指定 <see cref="T:System.DateTime" /> 的纪元。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个整数，表示 <paramref name="time" /> 参数中指定的纪元。</returns>
    </member>
    <member name="F:System.Globalization.JapaneseLunisolarCalendar.JapaneseEra">
      <summary>指定当前纪元。</summary>
    </member>
    <member name="P:System.Globalization.JapaneseLunisolarCalendar.MaxSupportedDateTime">
      <summary>获取 <see cref="T:System.Globalization.JapaneseLunisolarCalendar" /> 类支持的最晚日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.JapaneseLunisolarCalendar" />类支持的最晚日期和时间, 该日期和时间等效于2050年1月22日的最后一刻 公历。</returns>
    </member>
    <member name="P:System.Globalization.JapaneseLunisolarCalendar.MinSupportedDateTime">
      <summary>获取 <see cref="T:System.Globalization.JapaneseLunisolarCalendar" /> 类支持的最早日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.JapaneseLunisolarCalendar" />类支持的最早日期和时间, 该日期和时间等效于1960年1月28日开始的那一刻 公历。</returns>
    </member>
    <member name="T:System.Globalization.JulianCalendar">
      <summary>表示儒略历。</summary>
    </member>
    <member name="M:System.Globalization.JulianCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.JulianCalendar" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Globalization.JulianCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定月数的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">将向其添加月数的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要添加的月数。</param>
      <returns>将指定月数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentException">生成的 <see cref="T:System.DateTime" /> 超出了支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小于 -120000。  

或 - 
<paramref name="months" /> 大于 120000。</exception>
    </member>
    <member name="M:System.Globalization.JulianCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定年数的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">将向其添加年数的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要添加的年数。</param>
      <returns>将指定年数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentException">生成的 <see cref="T:System.DateTime" /> 超出了支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.JulianCalendar.AlgorithmType">
      <summary>获取一个值，该值指示当前日历是阳历、阴历还是二者的组合。</summary>
      <returns>始终返回 <see cref="F:System.Globalization.CalendarAlgorithmType.SolarCalendar" />。</returns>
    </member>
    <member name="P:System.Globalization.JulianCalendar.Eras">
      <summary>获取 <see cref="T:System.Globalization.JulianCalendar" /> 中的纪元列表。</summary>
      <returns>表示 <see cref="T:System.Globalization.JulianCalendar" /> 中的纪元的整数数组。</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetDayOfMonth(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的月中日期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 31 之间的一个整数，用于表示 <paramref name="time" /> 中的月中日期。</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetDayOfWeek(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的周中日期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个 <see cref="T:System.DayOfWeek" /> 值，用于表示 <paramref name="time" /> 中的周中日期。</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetDayOfYear(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的日期是该年中的第几天。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 366 之间的一个整数，用于表示 <paramref name="time" /> 中的年中日期。</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>返回指定纪元中指定年份的指定月份中的天数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元中指定年份的指定月份中的天数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 超出了日历支持的范围。  
或 
 <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="month" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>返回指定纪元中指定年份的天数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元中指定年份的天数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 超出了日历支持的范围。  
或 
 <paramref name="year" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetEra(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的纪元。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个整数，用于表示 <paramref name="time" /> 中的纪元。</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>计算指定纪元年份的闰月。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>一个正整数，用于表示指定纪元年份中的闰月。 另外，如果日历不支持闰月，或者 <paramref name="year" /> 和 <paramref name="era" /> 未指定闰年，此方法将返回零。</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetMonth(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 12 之间的一个整数，用于表示 <paramref name="time" /> 中的月份。</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>返回指定纪元中指定年份的月数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元中指定年份的月数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="era" /> 超出了日历支持的范围。  
或 
 <paramref name="year" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.JulianCalendar.GetYear(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的年份。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个整数，用于表示 <paramref name="time" /> 中的年份。</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>确定指定纪元中的指定日期是否为闰日。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="day">1 到 31 之间的一个整数，用于表示天。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>如果指定的日期是闰日，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="month" /> 超出了日历支持的范围。  
或 
 <paramref name="day" /> 超出了日历支持的范围。  
或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.JulianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>确定指定纪元中指定年份的指定月份是否为闰月。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>除非被派生类重写，否则此方法始终返回 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="month" /> 超出了日历支持的范围。  
或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.JulianCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>确定指定纪元中的指定年份是否为闰年。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>如果指定的年是闰年，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="F:System.Globalization.JulianCalendar.JulianEra">
      <summary>表示当前纪元。 此字段为常数。</summary>
    </member>
    <member name="P:System.Globalization.JulianCalendar.MaxSupportedDateTime">
      <summary>获取 <see cref="T:System.Globalization.JulianCalendar" /> 类支持的最晚日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.JulianCalendar" />类支持的最晚日期和时间, 该日期和时间等效于9999年12月31日的最后一刻 公历。</returns>
    </member>
    <member name="P:System.Globalization.JulianCalendar.MinSupportedDateTime">
      <summary>获取 <see cref="T:System.Globalization.JulianCalendar" /> 类支持的最早日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.JulianCalendar" />类支持的最早日期和时间, 该日期和时间相当于公元0001年1月1日开始的那一刻 公历。</returns>
    </member>
    <member name="M:System.Globalization.JulianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>返回设置为指定纪元中指定日期和时间的 <see cref="T:System.DateTime" />。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="day">1 到 31 之间的一个整数，用于表示天。</param>
      <param name="hour">0 到 23 之间的一个整数，用于表示小时。</param>
      <param name="minute">0 到 59 之间的一个整数，用于表示分钟。</param>
      <param name="second">0 到 59 之间的一个整数，用于表示秒。</param>
      <param name="millisecond">0 到 999 之间的一个整数，用于表示毫秒。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>设置为当前纪元中指定日期和时间的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  

或 - 
<paramref name="month" /> 超出了日历支持的范围。  

或 
 <paramref name="day" /> 超出了日历支持的范围。  
或 
 <paramref name="hour" /> 小于 0 或大于 23。  

或 - 
<paramref name="minute" /> 小于 0 或大于 59。  

或 
 <paramref name="second" /> 小于 0 或大于 59。  
或 
 <paramref name="millisecond" /> 小于 0 或大于 999。  

或 - 
<paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.JulianCalendar.ToFourDigitYear(System.Int32)">
      <summary>使用 <see cref="P:System.Globalization.JulianCalendar.TwoDigitYearMax" /> 属性将指定的年份转换为四位数年份，以确定相应的纪元。</summary>
      <param name="year">一个两位数或四位数的整数，用于表示要转换的年份。</param>
      <returns>包含 <paramref name="year" /> 的四位数表示形式的整数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.JulianCalendar.TwoDigitYearMax">
      <summary>获取或设置可以用两位数年份表示的 100 年范围内的最后一年。</summary>
      <returns>可以用两位数年份表示的 100 年范围内的最后一年。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">为设置操作指定的值小于 99。  
或 
为设置操作指定的值大于 <see langword="MaxSupportedDateTime.Year" />。</exception>
      <exception cref="T:System.InvalidOperationException">在设置操作中，当前实例是只读的。</exception>
    </member>
    <member name="T:System.Globalization.KoreanCalendar">
      <summary>表示朝鲜历。</summary>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.KoreanCalendar" /> 类的新实例。</summary>
      <exception cref="T:System.TypeInitializationException">由于缺少区域性信息，因此无法初始化 <see cref="T:System.Globalization.KoreanCalendar" /> 对象。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定月数的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">将向其添加月数的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要添加的月数。</param>
      <returns>将指定月数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小于 -120000。  
或 
 <paramref name="months" /> 大于 120000。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定年数的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">将向其添加年数的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要添加的年数。</param>
      <returns>将指定年数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="years" /> 或 <paramref name="time" /> 已超出范围。</exception>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.AlgorithmType">
      <summary>获取一个值，该值指示当前日历是阳历、阴历还是二者的组合。</summary>
      <returns>始终返回 <see cref="F:System.Globalization.CalendarAlgorithmType.SolarCalendar" />。</returns>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.Eras">
      <summary>获取 <see cref="T:System.Globalization.KoreanCalendar" /> 中的纪元列表。</summary>
      <returns>表示 <see cref="T:System.Globalization.KoreanCalendar" /> 中的纪元的整数数组。</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDayOfMonth(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的月中日期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 31 之间的一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的月中日期。</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDayOfWeek(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的周中日期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个 <see cref="T:System.DayOfWeek" /> 值，用于表示指定的 <see cref="T:System.DateTime" /> 中的周中日期。</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDayOfYear(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的日期是该年中的第几天。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 366 之间的一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的年中日期。</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>返回指定纪元中指定年份的指定月份中的天数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元中指定年份的指定月份中的天数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="month" /> 超出了日历支持的范围。  
或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>返回指定纪元中指定年份的天数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元中指定年份的天数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetEra(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的纪元。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个整数，用于表示指定 <see cref="T:System.DateTime" /> 中的纪元。</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>计算指定纪元年份的闰月。</summary>
      <param name="year">年份。</param>
      <param name="era">纪元。</param>
      <returns>返回值始终为 0，因为 <see cref="T:System.Globalization.KoreanCalendar" /> 类不支持闰月这一概念。</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetMonth(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 12 之间的一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的月份。</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>返回指定纪元中指定年份的月数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元中指定年份的月数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>返回一年中包含指定 <see cref="T:System.DateTime" /> 值中的日期的那个星期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <param name="rule">
        <see cref="T:System.Globalization.CalendarWeekRule" /> 值之一，用于定义一个日历周。</param>
      <param name="firstDayOfWeek">
        <see cref="T:System.DayOfWeek" /> 值之一，用于表示一个星期的第一天。</param>
      <returns>从 1 开始的一个整数，用于表示一年中包含 <paramref name="time" /> 参数内日期的那个星期。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 或 <paramref name="firstDayOfWeek" /> 超出了日历支持的范围。  
或 
 <paramref name="rule" /> 不是有效的 <see cref="T:System.Globalization.CalendarWeekRule" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.GetYear(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的年份。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的年份。</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>确定指定纪元中的指定日期是否为闰日。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="day">1 到 31 之间的一个整数，用于表示天。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>如果指定的日期是闰日，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="month" /> 超出了日历支持的范围。  
或 
 <paramref name="day" /> 超出了日历支持的范围。  
或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>确定指定纪元中指定年份的指定月份是否为闰月。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>除非被派生类重写，否则此方法始终返回 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="month" /> 超出了日历支持的范围。  
或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>确定指定纪元中的指定年份是否为闰年。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>如果指定的年是闰年，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="F:System.Globalization.KoreanCalendar.KoreanEra">
      <summary>表示当前纪元。 此字段为常数。</summary>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.MaxSupportedDateTime">
      <summary>获取 <see cref="T:System.Globalization.KoreanCalendar" /> 类支持的最晚日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.KoreanCalendar" />类支持的最晚日期和时间, 该日期和时间等效于9999年12月31日的最后一刻 公历。</returns>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.MinSupportedDateTime">
      <summary>获取 <see cref="T:System.Globalization.KoreanCalendar" /> 类支持的最早日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.KoreanCalendar" />类支持的最早日期和时间, 该日期和时间相当于公元0001年1月1日开始的那一刻 公历。</returns>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>返回设置为指定纪元中指定日期和时间的 <see cref="T:System.DateTime" />。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="day">1 到 31 之间的一个整数，用于表示天。</param>
      <param name="hour">0 到 23 之间的一个整数，用于表示小时。</param>
      <param name="minute">0 到 59 之间的一个整数，用于表示分钟。</param>
      <param name="second">0 到 59 之间的一个整数，用于表示秒。</param>
      <param name="millisecond">0 到 999 之间的一个整数，用于表示毫秒。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>设置为当前纪元中指定日期和时间的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="month" /> 超出了日历支持的范围。  
或 
 <paramref name="day" /> 超出了日历支持的范围。  
或 
 <paramref name="hour" /> 小于 0 或大于 23。  

或 - 
<paramref name="minute" /> 小于 0 或大于 59。  

或 - 
<paramref name="second" /> 小于 0 或大于 59。  


或 
 <paramref name="millisecond" /> 小于 0 或大于 999。  
或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.KoreanCalendar.ToFourDigitYear(System.Int32)">
      <summary>使用 <see cref="P:System.Globalization.KoreanCalendar.TwoDigitYearMax" /> 属性将指定的年份转换为四位数年份，以确定相应的纪元。</summary>
      <param name="year">一个两位数或四位数的整数，用于表示要转换的年份。</param>
      <returns>包含 <paramref name="year" /> 的四位数表示形式的整数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.KoreanCalendar.TwoDigitYearMax">
      <summary>获取或设置可以用两位数年份表示的 100 年范围内的最后一年。</summary>
      <returns>可以用两位数年份表示的 100 年范围内的最后一年。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">为设置操作指定的值小于 99。  
或 
为设置操作指定的值大于 <see langword="MaxSupportedDateTime.Year" />。</exception>
      <exception cref="T:System.InvalidOperationException">在设置操作中，当前实例是只读的。</exception>
    </member>
    <member name="T:System.Globalization.KoreanLunisolarCalendar">
      <summary>表示时间划分方式，例如“月”、“日”和“年”。 “年”采用公历计算，而“日”和“月”则采用阴阳历计算。</summary>
    </member>
    <member name="M:System.Globalization.KoreanLunisolarCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Globalization.KoreanLunisolarCalendar.DaysInYearBeforeMinSupportedYear">
      <summary>获取 <see cref="P:System.Globalization.KoreanLunisolarCalendar.MinSupportedDateTime" /> 属性指定的年份之前的年中天数。</summary>
      <returns>由 <see cref="P:System.Globalization.KoreanLunisolarCalendar.MinSupportedDateTime" /> 指定的在年之前的一年的天数。</returns>
    </member>
    <member name="P:System.Globalization.KoreanLunisolarCalendar.Eras">
      <summary>获取与当前 <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> 对象支持的日期和时间范围对应的纪元。</summary>
      <returns>32 位有符号整数数组，用于指定相关的纪元。 <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> 对象的返回值始终是包含一个等于 <see cref="F:System.Globalization.KoreanLunisolarCalendar.GregorianEra" /> 值的元素的数组。</returns>
    </member>
    <member name="M:System.Globalization.KoreanLunisolarCalendar.GetEra(System.DateTime)">
      <summary>检索对应于指定 <see cref="T:System.DateTime" /> 的纪元。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个整数，用于表示 <paramref name="time" /> 参数指定的纪元。 <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> 对象的返回值始终是 <see cref="F:System.Globalization.KoreanLunisolarCalendar.GregorianEra" /> 值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 表示小于 <see cref="P:System.Globalization.KoreanLunisolarCalendar.MinSupportedDateTime" /> 或大于 <see cref="P:System.Globalization.KoreanLunisolarCalendar.MaxSupportedDateTime" /> 的日期和时间。</exception>
    </member>
    <member name="F:System.Globalization.KoreanLunisolarCalendar.GregorianEra">
      <summary>指定对应于当前 <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> 对象的公历纪元。</summary>
    </member>
    <member name="P:System.Globalization.KoreanLunisolarCalendar.MaxSupportedDateTime">
      <summary>获取 <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> 类支持的最晚日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.KoreanLunisolarCalendar" />类支持的最晚日期和时间, 该日期和时间等效于2051年2月10日的最后一刻 公历。</returns>
    </member>
    <member name="P:System.Globalization.KoreanLunisolarCalendar.MinSupportedDateTime">
      <summary>获取 <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> 类支持的最早日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.KoreanLunisolarCalendar" /> 类支持的最早日期和时间。</returns>
    </member>
    <member name="T:System.Globalization.NumberFormatInfo">
      <summary>提供用于对数字值进行格式设置和分析的区域性特定信息。</summary>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.#ctor">
      <summary>初始化不依赖于区域性的（固定的）<see cref="T:System.Globalization.NumberFormatInfo" /> 类的新可写实例。</summary>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.Clone">
      <summary>创建 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象的浅表副本。</summary>
      <returns>从原始 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象复制的新对象。</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits">
      <summary>获取或设置在货币值中使用的小数位数。</summary>
      <returns>要在货币值中使用的小数位数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值为 2。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为一个小于 0 或大于 99 的值。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator">
      <summary>获取或设置要在货币值中用作小数分隔符的字符串。</summary>
      <returns>要在货币值中用作小数分隔符的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“.”。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
      <exception cref="T:System.ArgumentException">该属性被设置为空字符串。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator">
      <summary>获取或设置在货币值中隔开小数点左边的位数组的字符串。</summary>
      <returns>在货币值中隔开小数点左边的位数组的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“,”。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes">
      <summary>获取或设置货币值中小数点左边每一组的位数。</summary>
      <returns>货币值中小数点左边每一组的位数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值是一个一维数组，该数组只包含一个设置为 3 的元素。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">设置了该属性，但数组包含一个小于 0 或大于 9 的项。  
 或  
 设置了该属性，但数组包含一个设置为 0 的项（最后一项除外）。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern">
      <summary>获取或设置负货币值的格式模式。</summary>
      <returns>负货币值的格式模式。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值是 0，它表示“($n)”，其中“$”是 <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />，<paramref name="n" /> 是一个数字。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为一个小于 0 或大于 15 的值。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern">
      <summary>获取或设置正货币值的格式模式。</summary>
      <returns>正货币值的格式模式。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值是 0，它表示“$n”，其中“$”是 <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />，<paramref name="n" /> 是一个数字。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为一个小于 0 或大于 3 的值。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrencySymbol">
      <summary>获取或设置用作货币符号的字符串。</summary>
      <returns>用作货币符号的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“¤”。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.CurrentInfo">
      <summary>获取基于当前区域性对值进行格式设置的只读的 <see cref="T:System.Globalization.NumberFormatInfo" />。</summary>
      <returns>基于当前线程的区域性的只读的 <see cref="T:System.Globalization.NumberFormatInfo" />。</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.DigitSubstitution">
      <summary>获取或设置指定图形用户界面如何显示数字形状的值。</summary>
      <returns>指定区域性特定的数字形状的枚举值之一。</returns>
      <exception cref="T:System.InvalidOperationException">当前 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
      <exception cref="T:System.ArgumentException">设置操作中的值不是有效的 <see cref="T:System.Globalization.DigitShapes" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)">
      <summary>获取提供数字格式化服务的指定类型的对象。</summary>
      <param name="formatType">所需格式化服务的 <see cref="T:System.Type" />。</param>
      <returns>如果 <paramref name="formatType" /> 与当前 <see cref="T:System.Globalization.NumberFormatInfo" /> 的类型相同，则为当前 <see cref="T:System.Globalization.NumberFormatInfo" />；否则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.GetInstance(System.IFormatProvider)">
      <summary>获取与指定 <see cref="T:System.Globalization.NumberFormatInfo" /> 关联的 <see cref="T:System.IFormatProvider" />。</summary>
      <param name="formatProvider">用于获取 <see cref="T:System.IFormatProvider" /> 的 <see cref="T:System.Globalization.NumberFormatInfo" />。  
或 
 要获取 <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" /> 的 <see langword="null" />。</param>
      <returns>与指定 <see cref="T:System.Globalization.NumberFormatInfo" /> 关联的 <see cref="T:System.IFormatProvider" />。</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.InvariantInfo">
      <summary>获取不依赖于区域性的（固定）只读的 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象。</summary>
      <returns>不依赖于区域性的（固定的）默认只读对象。</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象是否为只读。</summary>
      <returns>如果 <see langword="true" /> 是只读的，则为 <see cref="T:System.Globalization.NumberFormatInfo" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NaNSymbol">
      <summary>获取或设置表示 IEEE NaN（非数字）值的字符串。</summary>
      <returns>表示 IEEE NaN（非数字）值的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“NaN”。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NativeDigits">
      <summary>获取或设置与西文数字 0 到 9 等同的本机数字的字符串数组。</summary>
      <returns>包含与西文数字 0 到 9 等同的本机数字的字符串数组。 默认值是包含元素“0”、“1”、“2”、“3”、“4”、“5”、“6”、“7”、“8”和“9”的一个数组。</returns>
      <exception cref="T:System.InvalidOperationException">当前 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
      <exception cref="T:System.ArgumentNullException">在集运算中，值为 <see langword="null" />。  

或 - 
在集运算中，值数组的元素是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">在集运算中，值数组不包含 10 个元素。  
或 
在集运算中，值数组的元素不包含单个 <see cref="T:System.Char" /> 对象或一对构成代理项对的 <see cref="T:System.Char" /> 对象。  

或 - 
在集运算中，值数组的元素不是由 Unicode 标准定义的数字。 即，数组元素中的数字不具有 Unicode <see langword="Number, Decimal Digit" /> (Nd) 常规类别值。  

或 - 
在集运算中，值数组中的元素的数值不对应数组中元素的位置。 也就是说，位于索引 0 的元素（数组的第一个元素）不具有数值 0，或位于索引 1 处的元素不具有数值 1。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol">
      <summary>获取或设置表示负无穷大的字符串。</summary>
      <returns>表示负无穷大的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“Infinity”。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NegativeSign">
      <summary>获取或设置表示关联数字是负值的字符串。</summary>
      <returns>表示关联数字是负值的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“-”。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits">
      <summary>获取或设置在数值中使用的小数位数。</summary>
      <returns>在数值中使用的小数位数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值为 2。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为一个小于 0 或大于 99 的值。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator">
      <summary>获取或设置在数值中用作小数分隔符的字符串。</summary>
      <returns>在数值中用作小数分隔符的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“.”。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
      <exception cref="T:System.ArgumentException">该属性被设置为空字符串。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator">
      <summary>获取或设置在数值中隔开小数点左边的位数组的字符串。</summary>
      <returns>在数值中隔开小数点左边的位数组的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“,”。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberGroupSizes">
      <summary>获取或设置数值中小数点左边每一组的位数。</summary>
      <returns>数值中小数点左边每一组的位数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值是一个一维数组，该数组只包含一个设置为 3 的元素。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">设置了该属性，但数组包含一个小于 0 或大于 9 的项。  

或 -  

 设置了该属性，但数组包含一个设置为 0 的项（最后一项除外）。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.NumberNegativePattern">
      <summary>获取或设置负数值的格式模式。</summary>
      <returns>负数值的格式模式。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为一个小于 0 或大于 4 的值。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits">
      <summary>获取或设置在百分比值中使用的小数位数。</summary>
      <returns>要在百分比值中使用的小数位数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值为 2。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为一个小于 0 或大于 99 的值。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator">
      <summary>获取或设置在百分比值中用作小数点分隔符的字符串。</summary>
      <returns>在百分比值中用作小数分隔符的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“.”。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
      <exception cref="T:System.ArgumentException">该属性被设置为空字符串。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator">
      <summary>获取或设置在百分比值中隔离小数点左边数字组的字符串。</summary>
      <returns>在百分比值中隔开小数点左边的位数组的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“,”。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentGroupSizes">
      <summary>获取或设置在百分比值中小数点左边每一组的位数。</summary>
      <returns>百分比值中小数点左边的每一组的位数。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值是一个一维数组，该数组只包含一个设置为 3 的元素。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">设置了该属性，但数组包含一个小于 0 或大于 9 的项。  

或 -  

 设置了该属性，但数组包含一个设置为 0 的项（最后一项除外）。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentNegativePattern">
      <summary>获取或设置负百分比值的格式模式。</summary>
      <returns>负百分比值的格式模式。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值是 0，它表示“-n %”，其中“%”是 <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />，<paramref name="n" /> 是一个数字。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为一个小于 0 或大于 11 的值。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentPositivePattern">
      <summary>获取或设置正百分比值的格式模式。</summary>
      <returns>正百分比值的格式模式。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 的默认值是 0，它表示“n %”，其中“%”是 <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />，<paramref name="n" /> 是一个数字。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为一个小于 0 或大于 3 的值。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PercentSymbol">
      <summary>获取或设置用作百分比符号的字符串。</summary>
      <returns>用作百分比符号的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“%”。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PerMilleSymbol">
      <summary>获取或设置用作千分比符号的字符串。</summary>
      <returns>用作千分比符号的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“‰”，它是 Unicode 字符 U+2030。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol">
      <summary>获取或设置表示正无穷大的字符串。</summary>
      <returns>表示正无穷大的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“Infinity”。</returns>
      <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="P:System.Globalization.NumberFormatInfo.PositiveSign">
      <summary>获取或设置指示关联数字是正值的字符串。</summary>
      <returns>指示关联数字是正值的字符串。 <see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> 默认为“+”。</returns>
      <exception cref="T:System.ArgumentNullException">在设置操作中，要分配的值为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象为只读。</exception>
    </member>
    <member name="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)">
      <summary>返回只读的 <see cref="T:System.Globalization.NumberFormatInfo" /> 包装。</summary>
      <param name="nfi">要包装的 <see cref="T:System.Globalization.NumberFormatInfo" />。</param>
      <returns>
        <paramref name="nfi" /> 周围的只读 <see cref="T:System.Globalization.NumberFormatInfo" /> 包装。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nfi" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Globalization.NumberStyles">
      <summary>确定数字字符串参数中允许的样式，这些参数已传递到整数和浮点数类型的 <see langword="Parse" /> 和 <see langword="TryParse" /> 方法。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowCurrencySymbol">
      <summary>指示数字字符串可包含货币符号。 有效的货币符号由 <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> 属性确定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowDecimalPoint">
      <summary>指示数字字符串可以具有小数点。 如果 <see cref="T:System.Globalization.NumberStyles" /> 值包括 <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> 标志，分析的字符串包括货币符号，则小数分隔符字符由 <see cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" /> 属性确定。 否则，小数分隔符由 <see cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" /> 属性确定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowExponent">
      <summary>指示数字字符串用于指数符号中。 该 <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> 标志允许分析的字符串包含以“E”或“e”字符开始并且后接可选的正号或负号以及整数的指数。 换句话说，它成功地分析 nnnExx、nnnE+xx 和 nnnE-xx 格式的字符串。 它不允许有效位数或尾数中有小数分隔符或小数符号；若要允许分析字符串中的这些元素，请使用 <see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> 标志，或使用包含各个标志的组合样式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowHexSpecifier">
      <summary>指示数值字符串表示一个十六进制值。 有效的十六进制值包括数字 0-9 和十六进制数字 A-F 和 a-f。 使用此样式分析的字符串前缀不能为“0x”或“&amp;h”。 使用 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 样式分析的字符串总是被解释为一个十六进制值。 可与 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 组合的标志只有 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />。 <see cref="T:System.Globalization.NumberStyles" /> 枚举包括由这三个标识组成的复合样式 <see cref="F:System.Globalization.NumberStyles.HexNumber" />。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingSign">
      <summary>指示数字字符串可以具有前导符号。 有效的前导符号字符由 <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> 和 <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> 属性确定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowLeadingWhite">
      <summary>指示所分析的字符串中可以存在前导空白字符。 有效的空白字符具有 Unicode 值 U+0009、U+000A、U+000B、U+000C、U+000D 和 U+0020。 请注意，这是 <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> 方法针对其返回 <see langword="true" /> 的字符的子集。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowParentheses">
      <summary>指示数字字符串可以具有一对将数字括起来的括号。 括号指示要分析的字符串表示一个负数。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowThousands">
      <summary>指示数字字符串可以具有组分隔符，例如将百位与千位分隔开来的符号。 如果 <see cref="T:System.Globalization.NumberStyles" /> 值包括 <see cref="F:System.Globalization.NumberStyles.AllowCurrencySymbol" /> 标志，要分析的字符串包括货币符号，则有效组分隔符字符由 <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" /> 属性确定，且每个组中的位数由 <see cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" /> 属性确定。 否则，有效的组分隔符字符由 <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" /> 属性确定，每组的位数由 <see cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" /> 属性确定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingSign">
      <summary>指示数字字符串可以具有结尾符号。 有效的结尾符号字符由 <see cref="P:System.Globalization.NumberFormatInfo.PositiveSign" /> 和 <see cref="P:System.Globalization.NumberFormatInfo.NegativeSign" /> 属性确定。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.AllowTrailingWhite">
      <summary>指示所分析的字符串中可以存在结尾空白字符。 有效的空白字符具有 Unicode 值 U+0009、U+000A、U+000B、U+000C、U+000D 和 U+0020。 请注意，这是 <see cref="M:System.Char.IsWhiteSpace(System.Char)" /> 方法针对其返回 <see langword="true" /> 的字符的子集。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Any">
      <summary>指示使用除 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 以外的所有样式。 这是复合数字样式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Currency">
      <summary>指示使用除 <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 以外的所有样式。 这是复合数字样式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Float">
      <summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />、<see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowExponent" /> 样式。 这是复合数字样式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.HexNumber">
      <summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 样式。 这是复合数字样式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Integer">
      <summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" /> 样式。 这是复合数字样式。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.None">
      <summary>指示没有样式元素（比如前导或尾随空白、千位分隔符或小数分隔符）可出现在分析的字符串中。 要分析的字符串只能包含整型小数位数。</summary>
    </member>
    <member name="F:System.Globalization.NumberStyles.Number">
      <summary>指示使用 <see cref="F:System.Globalization.NumberStyles.AllowLeadingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingWhite" />、<see cref="F:System.Globalization.NumberStyles.AllowLeadingSign" />、<see cref="F:System.Globalization.NumberStyles.AllowTrailingSign" />、<see cref="F:System.Globalization.NumberStyles.AllowDecimalPoint" /> 和 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 样式。 这是复合数字样式。</summary>
    </member>
    <member name="T:System.Globalization.PersianCalendar">
      <summary>表示波斯历。</summary>
    </member>
    <member name="M:System.Globalization.PersianCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.PersianCalendar" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Globalization.PersianCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>返回一个基于指定 <see cref="T:System.DateTime" /> 对象偏移指定月数的 <see cref="T:System.DateTime" /> 对象。</summary>
      <param name="time">将向其添加月数的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要添加的正月数或负月数。</param>
      <returns>一个 <see cref="T:System.DateTime" /> 对象，表示将由 <paramref name="months" /> 参数指定的月数加上由 <paramref name="time" /> 参数指定的日期后所得的日期。</returns>
      <exception cref="T:System.ArgumentException">生成的 <see cref="T:System.DateTime" /> 超出了支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小于 -120,000 或大于 120,000。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>返回一个基于指定 <see cref="T:System.DateTime" /> 对象偏移指定年数的 <see cref="T:System.DateTime" /> 对象。</summary>
      <param name="time">将向其添加年数的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要添加的正年数或负年数。</param>
      <returns>通过将指定的年数添加到指定的 <see cref="T:System.DateTime" /> 对象所得到的 <see cref="T:System.DateTime" /> 对象。</returns>
      <exception cref="T:System.ArgumentException">生成的 <see cref="T:System.DateTime" /> 超出了支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="years" /> 小于 -10,000 或大于 10,000。</exception>
    </member>
    <member name="P:System.Globalization.PersianCalendar.AlgorithmType">
      <summary>获取一个值，该值指示当前日历是阳历、阴历还是二者的组合。</summary>
      <returns>始终返回 <see cref="F:System.Globalization.CalendarAlgorithmType.SolarCalendar" />。</returns>
    </member>
    <member name="P:System.Globalization.PersianCalendar.Eras">
      <summary>获取 <see cref="T:System.Globalization.PersianCalendar" /> 对象中的纪元列表。</summary>
      <returns>表示 <see cref="T:System.Globalization.PersianCalendar" /> 对象中的纪元的整数数组。 此数组由值为 <see cref="F:System.Globalization.PersianCalendar.PersianEra" /> 的单个元素组成。</returns>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetDayOfMonth(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 对象中的日期是该月的几号。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>从 1 到 31 之间的一个整数，表示指定 <see cref="T:System.DateTime" /> 对象中的日期是该月的几号。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 参数表示一个小于 <see cref="P:System.Globalization.PersianCalendar.MinSupportedDateTime" /> 或大于 <see cref="P:System.Globalization.PersianCalendar.MaxSupportedDateTime" /> 的日期。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetDayOfWeek(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 对象中的日期是星期几。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个 <see cref="T:System.DayOfWeek" /> 值，它表示指定的 <see cref="T:System.DateTime" /> 对象中的日期是星期几。</returns>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetDayOfYear(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 对象中的日期是该年中的第几天。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>从 1 到 366 之间的一个整数，表示指定 <see cref="T:System.DateTime" /> 对象中的日期是该年中的第几天。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 参数表示一个小于 <see cref="P:System.Globalization.PersianCalendar.MinSupportedDateTime" /> 或大于 <see cref="P:System.Globalization.PersianCalendar.MaxSupportedDateTime" /> 的日期。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>返回指定纪元年份中指定月份的天数。</summary>
      <param name="year">1 到 9378 之间的一个整数，用于表示年。</param>
      <param name="month">一个表示月份的整数，如果 <paramref name="year" /> 不是 9378，则值的范围是从 1 到 12；如果 <paramref name="year" /> 是 9378，则值的范围是从 1 到 10。</param>
      <param name="era">整数 0 或 1，用于表示纪元。</param>
      <returns>指定纪元年份中指定月份的天数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" /> 或 <paramref name="era" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>返回指定纪元中指定年份的天数。</summary>
      <param name="year">1 到 9378 之间的一个整数，用于表示年。</param>
      <param name="era">整数 0 或 1，用于表示纪元。</param>
      <returns>指定纪元年份中的天数。 天数在平年中为 365，在闰年中为 366。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetEra(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 对象中的纪元。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>始终返回 <see cref="F:System.Globalization.PersianCalendar.PersianEra" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 参数表示一个小于 <see cref="P:System.Globalization.PersianCalendar.MinSupportedDateTime" /> 或大于 <see cref="P:System.Globalization.PersianCalendar.MaxSupportedDateTime" /> 的日期。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>返回指定纪元年份的闰月。</summary>
      <param name="year">1 到 9378 之间的一个整数，用于表示要转换的年份。</param>
      <param name="era">整数 0 或 1，用于表示纪元。</param>
      <returns>返回值始终为 0。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetMonth(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 对象中的月份。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 12 之间的一个整数，表示指定 <see cref="T:System.DateTime" /> 对象中的月份。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 参数表示一个小于 <see cref="P:System.Globalization.PersianCalendar.MinSupportedDateTime" /> 或大于 <see cref="P:System.Globalization.PersianCalendar.MaxSupportedDateTime" /> 的日期。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>返回指定纪元中指定年份中的月数。</summary>
      <param name="year">1 到 9378 之间的一个整数，用于表示年。</param>
      <param name="era">整数 0 或 1，用于表示纪元。</param>
      <returns>如果 <paramref name="year" /> 参数为 9378，则返回 10；否则始终返回 12。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.GetYear(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 对象中的年份。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个介于 1 到 9378 之间的整数，表示指定 <see cref="T:System.DateTime" /> 中的年份。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 参数表示一个小于 <see cref="P:System.Globalization.PersianCalendar.MinSupportedDateTime" /> 或大于 <see cref="P:System.Globalization.PersianCalendar.MaxSupportedDateTime" /> 的日期。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>确定指定的日期是否为闰日。</summary>
      <param name="year">1 到 9378 之间的一个整数，用于表示年。</param>
      <param name="month">一个表示月份的整数，如果 <paramref name="year" /> 不是 9378，则值的范围是从 1 到 12；如果 <paramref name="year" /> 是 9378，则值的范围是从 1 到 10。</param>
      <param name="day">1 到 31 之间的一个整数，用于表示日。</param>
      <param name="era">整数 0 或 1，用于表示纪元。</param>
      <returns>如果指定的日期是闰日，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" /> 或 <paramref name="era" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>确定指定纪元年份中的指定月份是否为闰月。</summary>
      <param name="year">1 到 9378 之间的一个整数，用于表示年。</param>
      <param name="month">一个表示月份的整数，如果 <paramref name="year" /> 不是 9378，则值的范围是从 1 到 12；如果 <paramref name="year" /> 是 9378，则值的范围是从 1 到 10。</param>
      <param name="era">整数 0 或 1，用于表示纪元。</param>
      <returns>始终返回 <see langword="false" />，因为 <see cref="T:System.Globalization.PersianCalendar" /> 类不支持闰月这一概念。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" /> 或 <paramref name="era" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>确定指定纪元中的指定年份是否为闰年。</summary>
      <param name="year">1 到 9378 之间的一个整数，用于表示年。</param>
      <param name="era">整数 0 或 1，用于表示纪元。</param>
      <returns>如果指定的年是闰年，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.PersianCalendar.MaxSupportedDateTime">
      <summary>获取 <see cref="T:System.Globalization.PersianCalendar" /> 类支持的最晚日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.PersianCalendar" /> 类支持的最晚日期和时间。</returns>
    </member>
    <member name="P:System.Globalization.PersianCalendar.MinSupportedDateTime">
      <summary>获取 <see cref="T:System.Globalization.PersianCalendar" /> 类支持的最早日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.PersianCalendar" /> 类支持的最早日期和时间。</returns>
    </member>
    <member name="F:System.Globalization.PersianCalendar.PersianEra">
      <summary>表示当前纪元。 此字段为常数。</summary>
    </member>
    <member name="M:System.Globalization.PersianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>返回一个 <see cref="T:System.DateTime" /> 对象，该对象设置为指定日期、时间和纪元。</summary>
      <param name="year">1 到 9378 之间的一个整数，用于表示年。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月。</param>
      <param name="day">1 到 31 之间的一个整数，用于表示日。</param>
      <param name="hour">0 到 23 之间的一个整数，用于表示小时。</param>
      <param name="minute">0 到 59 之间的一个整数，用于表示分钟。</param>
      <param name="second">0 到 59 之间的一个整数，用于表示秒。</param>
      <param name="millisecond">0 到 999 之间的一个整数，用于表示毫秒。</param>
      <param name="era">整数 0 或 1，用于表示纪元。</param>
      <returns>设置为当前纪元中的指定日期和时间的 <see cref="T:System.DateTime" /> 对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、<paramref name="second" />、<paramref name="millisecond" /> 或 <paramref name="era" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.PersianCalendar.ToFourDigitYear(System.Int32)">
      <summary>将指定的年份转换为四位数的年份表示形式。</summary>
      <param name="year">1 到 9378 之间的一个整数，用于表示要转换的年份。</param>
      <returns>包含 <paramref name="year" /> 的四位数表示形式的整数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于 0 或大于 9378。</exception>
    </member>
    <member name="P:System.Globalization.PersianCalendar.TwoDigitYearMax">
      <summary>获取或设置可以用两位数年份表示的 100 年范围内的最后一年。</summary>
      <returns>可以用两位数年份表示的 100 年范围内的最后一年。</returns>
      <exception cref="T:System.InvalidOperationException">此日历为只读。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">设置操作中的值小于 100 或大于 9378。</exception>
    </member>
    <member name="T:System.Globalization.RegionInfo">
      <summary>包含有关国家/地区的信息。</summary>
    </member>
    <member name="M:System.Globalization.RegionInfo.#ctor(System.Int32)">
      <summary>基于与指定的区域性标识符关联的国家/地区初始化 <see cref="T:System.Globalization.RegionInfo" /> 类的一个新实例。</summary>
      <param name="culture">区域性标识符。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="culture" /> 指定固定、自定义或非特定区域性。</exception>
    </member>
    <member name="M:System.Globalization.RegionInfo.#ctor(System.String)">
      <summary>基于按名称指定的国家/地区或特定区域性初始化 <see cref="T:System.Globalization.RegionInfo" /> 类的一个新实例。</summary>
      <param name="name">一个字符串，它包含 ISO 3166 中为国家/地区定义的由两个字母组成的代码。  

或 -  

 包含特定区域、自定义区域或仅 Windows 区域的区域名称的字符串。 如果区域性名称未采用 RFC 4646 格式，应用程序应指定整个区域性名称，而不是仅指定国家/地区。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是有效的国家/地区名称或特定的区域性名称。</exception>
    </member>
    <member name="P:System.Globalization.RegionInfo.CurrencyEnglishName">
      <summary>获取该国家/地区中使用的货币的英文名称。</summary>
      <returns>该国家/地区中使用的货币的英文名称。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.CurrencyNativeName">
      <summary>获取该国家/地区中使用的货币名称，它使用该国家/地区的本地语言格式表示。</summary>
      <returns>该国家/地区中使用的货币的本地名称，它使用与 ISO 3166 国家/地区代码关联的语言格式表示。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.CurrencySymbol">
      <summary>获取与国家/地区关联的货币符号。</summary>
      <returns>与国家/地区关联的货币符号。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.CurrentRegion">
      <summary>获取表示当前线程所使用的国家/地区的 <see cref="T:System.Globalization.RegionInfo" />。</summary>
      <returns>表示当前线程所使用的国家/地区的 <see cref="T:System.Globalization.RegionInfo" />。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.DisplayName">
      <summary>获取以 .NET Framework 本地化版本语言表示的国家/地区的全名。</summary>
      <returns>以 .NET Framework 本地化版本语言表示的国家/地区的全名。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.EnglishName">
      <summary>获取以英文表示的国家/地区的全名。</summary>
      <returns>以英文表示的国家/地区的全名。</returns>
    </member>
    <member name="M:System.Globalization.RegionInfo.Equals(System.Object)">
      <summary>确定指定的对象与当前 <see cref="T:System.Globalization.RegionInfo" /> 是否为同一实例。</summary>
      <param name="value">将与当前 <see cref="T:System.Globalization.RegionInfo" /> 进行比较的对象。</param>
      <returns>如果 <paramref name="value" /> 参数是 <see cref="T:System.Globalization.RegionInfo" /> 对象并且其 <see cref="P:System.Globalization.RegionInfo.Name" /> 属性与当前 <see cref="P:System.Globalization.RegionInfo.Name" /> 对象的 <see cref="T:System.Globalization.RegionInfo" /> 属性相同，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.GeoId">
      <summary>获取地理区域、国家/地区、城市或地点的唯一标识号。</summary>
      <returns>一个唯一标识地理位置的 32 位有符号数字。</returns>
    </member>
    <member name="M:System.Globalization.RegionInfo.GetHashCode">
      <summary>用作当前 <see cref="T:System.Globalization.RegionInfo" /> 的哈希函数，适合用在哈希算法和数据结构（如哈希表）中。</summary>
      <returns>当前 <see cref="T:System.Globalization.RegionInfo" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.IsMetric">
      <summary>获取一个值，该值指示该国家/地区是否使用公制进行度量。</summary>
      <returns>如果该国家/地区使用公制进行度量，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.ISOCurrencySymbol">
      <summary>获取与国家/地区关联的由三个字符组成的 ISO 4217 货币符号。</summary>
      <returns>与国家/地区关联的由三个字符组成的 ISO 4217 货币符号。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.Name">
      <summary>获取当前 <see cref="T:System.Globalization.RegionInfo" /> 对象的名称或 ISO 3166 双字母国家/地区代码。</summary>
      <returns>
        <see cref="M:System.Globalization.RegionInfo.#ctor(System.String)" /> 构造函数的 <paramref name="name" /> 参数指定的值。 返回值为大写。  

或 - 
ISO 3166 中为 <see cref="M:System.Globalization.RegionInfo.#ctor(System.Int32)" /> 构造函数的 <paramref name="culture" /> 参数指定的国家/地区定义的双字母代码。 返回值为大写。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.NativeName">
      <summary>获取一个国家/地区的名称，它使用该国家/地区的本地语言格式表示。</summary>
      <returns>该国家/地区的本地名称，它使用与 ISO 3166 国家/地区代码关联的语言格式表示。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.ThreeLetterISORegionName">
      <summary>获取在 ISO 3166 中定义的由三个字母组成的国家/地区代码。</summary>
      <returns>在 ISO 3166 中定义的由三个字母组成的国家/地区代码。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.ThreeLetterWindowsRegionName">
      <summary>获取 Windows 分配给此 <see cref="T:System.Globalization.RegionInfo" /> 所表示国家/地区的由三个字母组成的代码。</summary>
      <returns>Windows 分配给此 <see cref="T:System.Globalization.RegionInfo" /> 所表示国家/地区的由三个字母组成的代码。</returns>
    </member>
    <member name="M:System.Globalization.RegionInfo.ToString">
      <summary>返回一个字符串，它包含区域性名称或 ISO 3166 中为当前 <see cref="T:System.Globalization.RegionInfo" /> 指定的双字母国家/地区代码。</summary>
      <returns>一个字符串，它包含区域性名称或 ISO 3166 中为当前 <see cref="T:System.Globalization.RegionInfo" /> 定义的双字母国家/地区代码。</returns>
    </member>
    <member name="P:System.Globalization.RegionInfo.TwoLetterISORegionName">
      <summary>获取在 ISO 3166 中定义的由两个字母组成的国家/地区代码。</summary>
      <returns>在 ISO 3166 中定义的由两个字母组成的国家/地区代码。</returns>
    </member>
    <member name="T:System.Globalization.SortKey">
      <summary>表示将字符串映射到其排序关键字的映射结果。</summary>
    </member>
    <member name="M:System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)">
      <summary>比较两个排序关键字。</summary>
      <param name="sortkey1">将比较的第一个排序关键字。</param>
      <param name="sortkey2">将比较的第二个排序关键字。</param>
      <returns>一个带符号整数，指示 <paramref name="sortkey1" /> 和 <paramref name="sortkey2" /> 之间的关系。  
  值 
  条件 
  小于零 
 <paramref name="sortkey1" /> 小于 <paramref name="sortkey2" />。  

  零 
 <paramref name="sortkey1" /> 等于 <paramref name="sortkey2" />。  

  大于零 
 <paramref name="sortkey1" /> 大于 <paramref name="sortkey2" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortkey1" /> 或 <paramref name="sortkey2" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.SortKey.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前 <see cref="T:System.Globalization.SortKey" /> 对象。</summary>
      <param name="value">要与当前 <see cref="T:System.Globalization.SortKey" /> 对象进行比较的对象。</param>
      <returns>如果 <paramref name="value" /> 等于当前的 <see cref="T:System.Globalization.SortKey" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.SortKey.GetHashCode">
      <summary>用作当前 <see cref="T:System.Globalization.SortKey" /> 对象的哈希函数，适合用在哈希算法和数据结构（例如哈希表）中。</summary>
      <returns>当前 <see cref="T:System.Globalization.SortKey" /> 对象的哈希代码。</returns>
    </member>
    <member name="P:System.Globalization.SortKey.KeyData">
      <summary>获取表示当前 <see cref="T:System.Globalization.SortKey" /> 对象的字节数组。</summary>
      <returns>表示当前 <see cref="T:System.Globalization.SortKey" /> 对象的字节数组。</returns>
    </member>
    <member name="P:System.Globalization.SortKey.OriginalString">
      <summary>获取用于创建当前 <see cref="T:System.Globalization.SortKey" /> 对象的原始字符串。</summary>
      <returns>用于创建当前 <see cref="T:System.Globalization.SortKey" /> 对象的原始字符串。</returns>
    </member>
    <member name="M:System.Globalization.SortKey.ToString">
      <summary>返回表示当前 <see cref="T:System.Globalization.SortKey" /> 对象的字符串。</summary>
      <returns>表示当前 <see cref="T:System.Globalization.SortKey" /> 对象的字符串。</returns>
    </member>
    <member name="T:System.Globalization.SortVersion">
      <summary>提供用于比较和排序字符串的 Unicode 版本的相关信息。</summary>
    </member>
    <member name="M:System.Globalization.SortVersion.#ctor(System.Int32,System.Guid)">
      <summary>创建 <see cref="T:System.Globalization.SortVersion" /> 类的新实例。</summary>
      <param name="fullVersion">版本号。</param>
      <param name="sortId">排序 ID。</param>
    </member>
    <member name="M:System.Globalization.SortVersion.Equals(System.Globalization.SortVersion)">
      <summary>返回一个值，该值指示此 <see cref="T:System.Globalization.SortVersion" /> 实例是否与指定的 <see cref="T:System.Globalization.SortVersion" /> 对象相等。</summary>
      <param name="other">与该实例进行比较的对象。</param>
      <returns>如果 <paramref name="other" /> 与此实例的版本相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Globalization.SortVersion.Equals(System.Object)">
      <summary>返回一个值，该值指示此 <see cref="T:System.Globalization.SortVersion" /> 实例是否与指定的对象相等。</summary>
      <param name="obj">与此实例进行比较的对象。</param>
      <returns>如果 <paramref name="obj" /> 是表示与此实例版本相同的 <see cref="T:System.Globalization.SortVersion" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Globalization.SortVersion.FullVersion">
      <summary>获取 <see cref="T:System.Globalization.SortVersion" /> 对象的全版本号。</summary>
      <returns>此 <see cref="T:System.Globalization.SortVersion" /> 对象的版本号。</returns>
    </member>
    <member name="M:System.Globalization.SortVersion.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Globalization.SortVersion.op_Equality(System.Globalization.SortVersion,System.Globalization.SortVersion)">
      <summary>指示两个 <see cref="T:System.Globalization.SortVersion" /> 实例是否相等。</summary>
      <param name="left">要比较的第一个实例。</param>
      <param name="right">要比较的第二个实例。</param>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 的值相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Globalization.SortVersion.op_Inequality(System.Globalization.SortVersion,System.Globalization.SortVersion)">
      <summary>指示两个 <see cref="T:System.Globalization.SortVersion" /> 实例是否不相等。</summary>
      <param name="left">要比较的第一个实例。</param>
      <param name="right">要比较的第二个实例。</param>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 的值不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Globalization.SortVersion.SortId">
      <summary>获取此 <see cref="T:System.Globalization.SortVersion" /> 对象的全局唯一标识符。</summary>
      <returns>此 <see cref="T:System.Globalization.SortVersion" /> 对象的全局唯一标识符。</returns>
    </member>
    <member name="T:System.Globalization.StringInfo">
      <summary>提供将字符串拆分为文本元素和循环访问这些文本元素的功能。</summary>
    </member>
    <member name="M:System.Globalization.StringInfo.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.StringInfo" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Globalization.StringInfo.#ctor(System.String)">
      <summary>将 <see cref="T:System.Globalization.StringInfo" /> 类的新实例初始化为指定的字符串。</summary>
      <param name="value">用于初始化此 <see cref="T:System.Globalization.StringInfo" /> 对象的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.Equals(System.Object)">
      <summary>指示当前 <see cref="T:System.Globalization.StringInfo" /> 对象是否与指定的对象相等。</summary>
      <param name="value">一个对象。</param>
      <returns>如果 <paramref name="value" /> 参数是 <see cref="T:System.Globalization.StringInfo" /> 对象并且其 <see cref="P:System.Globalization.StringInfo.String" /> 属性等同于此 <see cref="T:System.Globalization.StringInfo" /> 对象的 <see cref="P:System.Globalization.StringInfo.String" /> 属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Globalization.StringInfo.GetHashCode">
      <summary>计算当前 <see cref="T:System.Globalization.StringInfo" /> 对象的值的哈希代码。</summary>
      <returns>基于此 <see cref="T:System.Globalization.StringInfo" /> 对象的字符串值的 32 位带符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Globalization.StringInfo.GetNextTextElement(System.String)">
      <summary>获取指定字符串中的第一个文本元素。</summary>
      <param name="str">要从中获取文本元素的字符串。</param>
      <returns>包含指定字符串中的第一个文本元素的字符串。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)">
      <summary>获取指定字符串中指定索引处的文本元素。</summary>
      <param name="str">要从中获取文本元素的字符串。</param>
      <param name="index">文本元素开始位置的从零开始的索引。</param>
      <returns>包含指定字符串中指定索引处的文本元素的字符串。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了 <paramref name="str" /> 的有效索引范围。</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)">
      <summary>返回一个循环访问整个字符串的文本元素的枚举数。</summary>
      <param name="str">要循环访问的字符串。</param>
      <returns>整个字符串的 <see cref="T:System.Globalization.TextElementEnumerator" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)">
      <summary>返回一个枚举数，它循环访问字符串的文本元素并从指定索引处开始。</summary>
      <param name="str">要循环访问的字符串。</param>
      <param name="index">开始迭代处的从零开始的索引。</param>
      <returns>在 <paramref name="index" /> 处开始的字符串的 <see cref="T:System.Globalization.TextElementEnumerator" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了 <paramref name="str" /> 的有效索引范围。</exception>
    </member>
    <member name="P:System.Globalization.StringInfo.LengthInTextElements">
      <summary>获取当前 <see cref="T:System.Globalization.StringInfo" /> 对象中的文本元素数量。</summary>
      <returns>此 <see cref="T:System.Globalization.StringInfo" /> 对象中基本字符、代理项对和组合字符序列的数量。</returns>
    </member>
    <member name="M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)">
      <summary>返回指定字符串中每个基字符、高代理项或控制字符的索引。</summary>
      <param name="str">要搜索的字符串。</param>
      <returns>一个整数数组，它包含指定字符串中每个基字符、高代理项或控制字符的从零开始的索引。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Globalization.StringInfo.String">
      <summary>获取或设置当前 <see cref="T:System.Globalization.StringInfo" /> 对象的值。</summary>
      <returns>作为当前 <see cref="T:System.Globalization.StringInfo" /> 对象的值的字符串。</returns>
      <exception cref="T:System.ArgumentNullException">设置操作中的值为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32)">
      <summary>从当前的 <see cref="T:System.Globalization.StringInfo" /> 对象检索文本元素的子字符串（从指定的文本元素开始，一直到最后一个文本元素）。</summary>
      <param name="startingTextElement">此 <see cref="T:System.Globalization.StringInfo" /> 对象中文本元素的从零开始的索引。</param>
      <returns>此 <see cref="T:System.Globalization.StringInfo" /> 对象中的文本元素的子字符串（从 <paramref name="startingTextElement" /> 参数指定的文本元素索引开始，一直到此对象中的最后一个文本元素）。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startingTextElement" /> 小于零。  
或 
当前 <see cref="T:System.Globalization.StringInfo" /> 对象的值字符串是空字符串 ("")。</exception>
    </member>
    <member name="M:System.Globalization.StringInfo.SubstringByTextElements(System.Int32,System.Int32)">
      <summary>从当前的 <see cref="T:System.Globalization.StringInfo" /> 对象中检索文本元素的子字符串（从指定文本元素开始，一直到指定数目的文本元素）。</summary>
      <param name="startingTextElement">此 <see cref="T:System.Globalization.StringInfo" /> 对象中文本元素的从零开始的索引。</param>
      <param name="lengthInTextElements">要检索的文本元素的数目。</param>
      <returns>此 <see cref="T:System.Globalization.StringInfo" /> 对象中的文本元素的子字符串。 子字符串包含由 <paramref name="lengthInTextElements" /> 参数指定的文本元素数量，并从 <paramref name="startingTextElement" /> 参数指定的文本元素索引开始。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startingTextElement" /> 小于零。  
或 
 <paramref name="startingTextElement" /> 大于或等于当前 <see cref="T:System.Globalization.StringInfo" /> 对象的值字符串的长度。  
或 
 <paramref name="lengthInTextElements" /> 小于零。  
或 
当前 <see cref="T:System.Globalization.StringInfo" /> 对象的值字符串是空字符串 ("")。  
或 
 <paramref name="startingTextElement" /> + <paramref name="lengthInTextElements" /> 指定大于此 <see cref="T:System.Globalization.StringInfo" /> 对象中的文本元素数目的索引。</exception>
    </member>
    <member name="T:System.Globalization.TaiwanCalendar">
      <summary>台湾日历。</summary>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.TaiwanCalendar" /> 类的新实例。</summary>
      <exception cref="T:System.TypeInitializationException">由于缺少区域性信息，因此无法初始化 <see cref="T:System.Globalization.TaiwanCalendar" /> 对象。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定月数的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">将向其添加月数的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要添加的月数。</param>
      <returns>将指定月数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentException">生成的 <see cref="T:System.DateTime" /> 超出了支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小于 -120000。  

或 - 
<paramref name="months" /> 大于 120000。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定年数的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">将向其添加年数的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要添加的年数。</param>
      <returns>将指定年数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentException">生成的 <see cref="T:System.DateTime" /> 超出了支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.AlgorithmType">
      <summary>获取一个值，该值指示当前日历是阳历、阴历还是二者的组合。</summary>
      <returns>始终返回 <see cref="F:System.Globalization.CalendarAlgorithmType.SolarCalendar" />。</returns>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.Eras">
      <summary>获取 <see cref="T:System.Globalization.TaiwanCalendar" /> 中的纪元列表。</summary>
      <returns>一个数组，它由值始终是当前纪元的单个元素组成。</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDayOfMonth(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的月中日期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 31 之间的一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的月中日期。</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDayOfWeek(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的周中日期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个 <see cref="T:System.DayOfWeek" /> 值，用于表示指定的 <see cref="T:System.DateTime" /> 中的周中日期。</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDayOfYear(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的日期是该年中的第几天。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 366 之间的一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的年中日期。</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>返回指定纪元中指定年份的指定月份中的天数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元中指定年份的指定月份中的天数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="month" /> 超出了日历支持的范围。  
或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>返回指定纪元中指定年份的天数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元中指定年份的天数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetEra(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的纪元。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个整数，用于表示指定 <see cref="T:System.DateTime" /> 中的纪元。</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>计算指定纪元年份的闰月。</summary>
      <param name="year">年份。</param>
      <param name="era">纪元。</param>
      <returns>返回值始终为 0，因为 <see cref="T:System.Globalization.TaiwanCalendar" /> 类不支持闰月这一概念。</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetMonth(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 12 之间的一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的月份。</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>返回指定纪元中指定年份的月数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元中指定年份的月数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>返回一年中包含指定 <see cref="T:System.DateTime" /> 值中的日期的那个星期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <param name="rule">
        <see cref="T:System.Globalization.CalendarWeekRule" /> 值之一，用于定义一个日历周。</param>
      <param name="firstDayOfWeek">
        <see cref="T:System.DayOfWeek" /> 值之一，用于表示一个星期的第一天。</param>
      <returns>一个正整数，用于表示一年中包含 <paramref name="time" /> 参数内日期所在的星期。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 或 <paramref name="firstDayOfWeek" /> 超出了日历支持的范围。  

或 - 
<paramref name="rule" /> 不是有效的 <see cref="T:System.Globalization.CalendarWeekRule" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.GetYear(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的年份。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的年份。</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>确定指定纪元中的指定日期是否为闰日。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="day">1 到 31 之间的一个整数，用于表示天。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>如果指定的日期是闰日，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="month" /> 超出了日历支持的范围。  
或 
 <paramref name="day" /> 超出了日历支持的范围。  

或 - 
<paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>确定指定纪元中指定年份的指定月份是否为闰月。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>除非被派生类重写，否则此方法始终返回 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="month" /> 超出了日历支持的范围。  

或 - 
<paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>确定指定纪元中的指定年份是否为闰年。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>如果指定的年是闰年，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  

或 - 
<paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.MaxSupportedDateTime">
      <summary>获取 <see cref="T:System.Globalization.TaiwanCalendar" /> 类支持的最晚日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.TaiwanCalendar" />类支持的最晚日期和时间, 该日期和时间等效于9999年12月31日的最后一刻 公历。</returns>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.MinSupportedDateTime">
      <summary>获取 <see cref="T:System.Globalization.TaiwanCalendar" /> 类支持的最早日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.TaiwanCalendar" />类支持的最早日期和时间, 该日期和时间等效于1912年1月1日开始的那一刻 公历。</returns>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>返回设置为指定纪元中指定日期和时间的 <see cref="T:System.DateTime" />。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="day">1 到 31 之间的一个整数，用于表示天。</param>
      <param name="hour">0 到 23 之间的一个整数，用于表示小时。</param>
      <param name="minute">0 到 59 之间的一个整数，用于表示分钟。</param>
      <param name="second">0 到 59 之间的一个整数，用于表示秒。</param>
      <param name="millisecond">0 到 999 之间的一个整数，用于表示毫秒。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>设置为当前纪元中指定日期和时间的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="month" /> 超出了日历支持的范围。  
或 
 <paramref name="day" /> 超出了日历支持的范围。  
或 
 <paramref name="hour" /> 小于 0 或大于 23。  

或 - 
<paramref name="minute" /> 小于 0 或大于 59。  

或 
 <paramref name="second" /> 小于 0 或大于 59。  
或 
 <paramref name="millisecond" /> 小于 0 或大于 999。  
或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.TaiwanCalendar.ToFourDigitYear(System.Int32)">
      <summary>使用 <see cref="P:System.Globalization.TaiwanCalendar.TwoDigitYearMax" /> 属性将指定的年份转换为四位数年份，以确定相应的纪元。</summary>
      <param name="year">一个两位数或四位数的整数，用于表示要转换的年份。</param>
      <returns>包含 <paramref name="year" /> 的四位数表示形式的整数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.TaiwanCalendar.TwoDigitYearMax">
      <summary>获取或设置可以用两位数年份表示的 100 年范围内的最后一年。</summary>
      <returns>可以用两位数年份表示的 100 年范围内的最后一年。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">为设置操作指定的值小于 99。  
或 
为设置操作指定的值大于 <see langword="MaxSupportedDateTime.Year" />。</exception>
      <exception cref="T:System.InvalidOperationException">在设置操作中，当前实例是只读的。</exception>
    </member>
    <member name="T:System.Globalization.TaiwanLunisolarCalendar">
      <summary>表示台湾日历。 在台湾日历中，年按公历计算，而日和月则按阴阳历计算。</summary>
    </member>
    <member name="M:System.Globalization.TaiwanLunisolarCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.TaiwanLunisolarCalendar" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Globalization.TaiwanLunisolarCalendar.DaysInYearBeforeMinSupportedYear">
      <summary>获取 <see cref="P:System.Globalization.TaiwanLunisolarCalendar.MinSupportedDateTime" /> 属性指定的年份之前的年中天数。</summary>
      <returns>由 <see cref="P:System.Globalization.TaiwanLunisolarCalendar.MinSupportedDateTime" /> 指定的在年之前的一年的天数。</returns>
    </member>
    <member name="P:System.Globalization.TaiwanLunisolarCalendar.Eras">
      <summary>获取与当前 <see cref="T:System.Globalization.TaiwanLunisolarCalendar" /> 对象相关的纪元。</summary>
      <returns>一个数组，它由值始终是当前纪元的单个元素组成。</returns>
    </member>
    <member name="M:System.Globalization.TaiwanLunisolarCalendar.GetEra(System.DateTime)">
      <summary>检索对应于指定 <see cref="T:System.DateTime" /> 的纪元。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个整数，表示 <paramref name="time" /> 参数中指定的纪元。</returns>
    </member>
    <member name="P:System.Globalization.TaiwanLunisolarCalendar.MaxSupportedDateTime">
      <summary>获取 <see cref="T:System.Globalization.TaiwanLunisolarCalendar" /> 类支持的最晚日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.TaiwanLunisolarCalendar" />类支持的最晚日期和时间, 该日期和时间等效于2051年2月10日的最后一刻 公历。</returns>
    </member>
    <member name="P:System.Globalization.TaiwanLunisolarCalendar.MinSupportedDateTime">
      <summary>获取 <see cref="T:System.Globalization.TaiwanLunisolarCalendar" /> 类支持的最早日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.TaiwanLunisolarCalendar" />类支持的最早日期和时间, 该日期和时间等效于1912年2月18日的第一个时刻 公历。</returns>
    </member>
    <member name="T:System.Globalization.TextElementEnumerator">
      <summary>枚举字符串的文本元素。</summary>
    </member>
    <member name="P:System.Globalization.TextElementEnumerator.Current">
      <summary>获取字符串中的当前文本元素。</summary>
      <returns>包含字符串中当前文本元素的对象。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数位于字符串的第一个文本元素之前或最后一个文本元素之后。</exception>
    </member>
    <member name="P:System.Globalization.TextElementEnumerator.ElementIndex">
      <summary>获取枚举数当前所在的文本元素的索引。</summary>
      <returns>枚举数当前所在的文本元素的索引。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数位于字符串的第一个文本元素之前或最后一个文本元素之后。</exception>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.GetTextElement">
      <summary>获取字符串中的当前文本元素。</summary>
      <returns>包含所读取字符串中当前文本元素的新字符串。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数位于字符串的第一个文本元素之前或最后一个文本元素之后。</exception>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.MoveNext">
      <summary>将枚举数前移到字符串的下一个文本元素。</summary>
      <returns>如果枚举数成功前移到下一个文本元素，则为 <see langword="true" />；如果枚举数已超过字符串的结尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Globalization.TextElementEnumerator.Reset">
      <summary>将枚举数设置为其初始位置，该位置位于字符串中第一个文本元素之前。</summary>
    </member>
    <member name="T:System.Globalization.TextInfo">
      <summary>定义特定于书写体系的文本属性和行为（如大小写）。</summary>
    </member>
    <member name="P:System.Globalization.TextInfo.ANSICodePage">
      <summary>获取当前 <see cref="T:System.Globalization.TextInfo" /> 所表示书写体系使用的“美国国家标准协会”(ANSI) 代码页。</summary>
      <returns>当前 <see cref="T:System.Globalization.TextInfo" /> 所表示书写体系使用的 ANSI 代码页。</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.Clone">
      <summary>创建表示当前 <see cref="T:System.Globalization.TextInfo" /> 对象副本的新对象。</summary>
      <returns>表示当前 <see cref="T:System.Globalization.TextInfo" /> 对象成员副本的 <see cref="T:System.Object" /> 的新实例。</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.CultureName">
      <summary>获取与当前 <see cref="T:System.Globalization.TextInfo" /> 对象关联的区域性的名称。</summary>
      <returns>区域性的名称。</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.EBCDICCodePage">
      <summary>获取当前 <see cref="T:System.Globalization.TextInfo" /> 所表示书写体系使用的“扩充的二进制编码的十进制交换码”(EBCDIC) 代码页。</summary>
      <returns>当前 <see cref="T:System.Globalization.TextInfo" /> 所表示书写体系使用的 EBCDIC 代码页。</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.Equals(System.Object)">
      <summary>确定指定的对象是否与当前 <see cref="T:System.Globalization.TextInfo" /> 对象表示同一书写体系。</summary>
      <param name="obj">将与当前 <see cref="T:System.Globalization.TextInfo" /> 进行比较的对象。</param>
      <returns>如果 <paramref name="obj" /> 与当前 <see cref="T:System.Globalization.TextInfo" /> 表示同一书写体系，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.GetHashCode">
      <summary>用作当前 <see cref="T:System.Globalization.TextInfo" /> 的哈希函数，适合用在哈希算法和数据结构（如哈希表）中。</summary>
      <returns>当前 <see cref="T:System.Globalization.TextInfo" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.IsReadOnly">
      <summary>获取一个值，该值指示当前 <see cref="T:System.Globalization.TextInfo" /> 对象是否为只读。</summary>
      <returns>如果当前 <see cref="T:System.Globalization.TextInfo" /> 对象为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.IsRightToLeft">
      <summary>获取一个值，该值指示当前 <see cref="T:System.Globalization.TextInfo" /> 对象是否表示一个文本书写方向为从右到左的书写体系。</summary>
      <returns>如果文本书写方向为从右到左，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.LCID">
      <summary>获取与当前 <see cref="T:System.Globalization.TextInfo" /> 对象关联的区域性的区域性标识符。</summary>
      <returns>一个数字，标识创建当前 <see cref="T:System.Globalization.TextInfo" /> 对象所使用的区域性。</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.ListSeparator">
      <summary>获取或设置在列表中分隔项的字符串。</summary>
      <returns>在列表中分隔项的字符串。</returns>
      <exception cref="T:System.ArgumentNullException">设置操作中的值为 null。</exception>
      <exception cref="T:System.InvalidOperationException">在设置操作中，当前的 <see cref="T:System.Globalization.TextInfo" /> 对象是只读的。</exception>
    </member>
    <member name="P:System.Globalization.TextInfo.MacCodePage">
      <summary>获取当前 <see cref="T:System.Globalization.TextInfo" /> 所表示书写体系使用的 Macintosh 代码页。</summary>
      <returns>当前 <see cref="T:System.Globalization.TextInfo" /> 所表示书写体系使用的 Macintosh 代码页。</returns>
    </member>
    <member name="P:System.Globalization.TextInfo.OEMCodePage">
      <summary>获取当前 <see cref="T:System.Globalization.TextInfo" /> 所表示书写体系使用的“原始设备制造商”(OEM) 代码页。</summary>
      <returns>当前 <see cref="T:System.Globalization.TextInfo" /> 所表示书写体系使用的 OEM 代码页。</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.ReadOnly(System.Globalization.TextInfo)">
      <summary>返回指定的 <see cref="T:System.Globalization.TextInfo" /> 对象的只读版本。</summary>
      <param name="textInfo">一个 <see cref="T:System.Globalization.TextInfo" /> 对象。</param>
      <returns>如果 <paramref name="textInfo" /> 是只读的，则为由 <paramref name="textInfo" /> 参数指定的 <see cref="T:System.Globalization.TextInfo" /> 对象。  

或 - 
如果 <paramref name="textInfo" /> 不是只读的，则为由 <paramref name="textInfo" /> 指定的 <see cref="T:System.Globalization.TextInfo" /> 对象的只读成员副本。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textInfo" /> 为 null。</exception>
    </member>
    <member name="M:System.Globalization.TextInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>反序列化完成时引发反序列化事件。</summary>
      <param name="sender">反序列化事件源。</param>
    </member>
    <member name="M:System.Globalization.TextInfo.ToLower(System.Char)">
      <summary>将指定的字符转换为小写。</summary>
      <param name="c">要转换为小写的字符。</param>
      <returns>转换为小写的指定字符。</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.ToLower(System.String)">
      <summary>将指定的字符串转换为小写。</summary>
      <param name="str">要转换为小写的字符串。</param>
      <returns>转换为小写的指定字符串。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 null。</exception>
    </member>
    <member name="M:System.Globalization.TextInfo.ToString">
      <summary>返回表示当前 <see cref="T:System.Globalization.TextInfo" /> 的字符串。</summary>
      <returns>表示当前 <see cref="T:System.Globalization.TextInfo" /> 的字符串。</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.ToTitleCase(System.String)">
      <summary>将指定字符串转换为词首字母大写（不包含视为首字母缩写的全部大写词）。</summary>
      <param name="str">要转换为词首字母大写的字符串。</param>
      <returns>转换为词首字母大写的指定字符串。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Globalization.TextInfo.ToUpper(System.Char)">
      <summary>将指定的字符转换为大写。</summary>
      <param name="c">要转换为大写的字符。</param>
      <returns>转换为大写的指定字符。</returns>
    </member>
    <member name="M:System.Globalization.TextInfo.ToUpper(System.String)">
      <summary>将指定的字符串转换为大写。</summary>
      <param name="str">要转换为大写的字符串。</param>
      <returns>转换为大写的指定字符串。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 null。</exception>
    </member>
    <member name="T:System.Globalization.ThaiBuddhistCalendar">
      <summary>表示泰国佛历。</summary>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定月数的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">将向其添加月数的 <see cref="T:System.DateTime" />。</param>
      <param name="months">要添加的月数。</param>
      <returns>将指定月数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentException">生成的 <see cref="T:System.DateTime" /> 超出了支持的范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小于 -120000。  
或 
 <paramref name="months" /> 大于 120000。</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>返回与指定 <see cref="T:System.DateTime" /> 相距指定年数的 <see cref="T:System.DateTime" />。</summary>
      <param name="time">将向其添加年数的 <see cref="T:System.DateTime" />。</param>
      <param name="years">要添加的年数。</param>
      <returns>将指定年数添加到指定的 <see cref="T:System.DateTime" /> 中时得到的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentException">生成的 <see cref="T:System.DateTime" /> 超出了支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.AlgorithmType">
      <summary>获取一个值，该值指示当前日历是阳历、阴历还是二者的组合。</summary>
      <returns>始终返回 <see cref="F:System.Globalization.CalendarAlgorithmType.SolarCalendar" />。</returns>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.Eras">
      <summary>获取 <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> 类中的纪元的列表。</summary>
      <returns>一个数组，它由值始终是当前纪元的单个元素组成。</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDayOfMonth(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的月中日期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 31 之间的一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的月中日期。</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDayOfWeek(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的周中日期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个 <see cref="T:System.DayOfWeek" /> 值，用于表示指定的 <see cref="T:System.DateTime" /> 中的周中日期。</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDayOfYear(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的日期是该年中的第几天。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 366 之间的一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的年中日期。</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>返回指定纪元中指定年份的指定月份中的天数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元中指定年份的指定月份中的天数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  

或 - 
<paramref name="month" /> 超出了日历支持的范围。  

或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>返回指定纪元中指定年份的天数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元中指定年份的天数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetEra(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的纪元。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个整数，用于表示指定 <see cref="T:System.DateTime" /> 中的纪元。</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>计算指定纪元年份的闰月。</summary>
      <param name="year">年份。</param>
      <param name="era">纪元。</param>
      <returns>返回值始终为 0，因为 <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> 类不支持闰月这一概念。</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetMonth(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的月份。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>1 到 12 之间的一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的月份。</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>返回指定纪元中指定年份的月数。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>指定纪元中指定年份的月数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  

或 - 
<paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)">
      <summary>返回一年中包含指定 <see cref="T:System.DateTime" /> 值中的日期的那个星期。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <param name="rule">
        <see cref="T:System.Globalization.CalendarWeekRule" /> 值之一，用于定义一个日历周。</param>
      <param name="firstDayOfWeek">
        <see cref="T:System.DayOfWeek" /> 值之一，用于表示一个星期的第一天。</param>
      <returns>一个从 1 开始的正整数，表示一年中包括 <paramref name="time" /> 参数中的日期的那个星期。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 或 <paramref name="firstDayOfWeek" /> 超出了日历支持的范围。  
或 
 <paramref name="rule" /> 不是有效的 <see cref="T:System.Globalization.CalendarWeekRule" /> 值。</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.GetYear(System.DateTime)">
      <summary>返回指定 <see cref="T:System.DateTime" /> 中的年份。</summary>
      <param name="time">要读取的 <see cref="T:System.DateTime" />。</param>
      <returns>一个整数，用于表示指定的 <see cref="T:System.DateTime" /> 中的年份。</returns>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>确定指定纪元中的指定日期是否为闰日。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="day">1 到 31 之间的一个整数，用于表示天。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>如果指定的日期是闰日，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  
或 
 <paramref name="month" /> 超出了日历支持的范围。  
或 
 <paramref name="day" /> 超出了日历支持的范围。  

或 - 
<paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>确定指定纪元中指定年份的指定月份是否为闰月。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>除非被派生类重写，否则此方法始终返回 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  

或 - 
<paramref name="month" /> 超出了日历支持的范围。  

或 
 <paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>确定指定纪元中的指定年份是否为闰年。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>如果指定的年是闰年，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  

或 - 
<paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.MaxSupportedDateTime">
      <summary>获取 <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> 类支持的最晚日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.ThaiBuddhistCalendar" />类支持的最晚日期和时间, 该日期和时间等效于9999年12月31日的最后一刻 公历。</returns>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.MinSupportedDateTime">
      <summary>获取 <see cref="T:System.Globalization.ThaiBuddhistCalendar" /> 类支持的最早日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.ThaiBuddhistCalendar" />类支持的最早日期和时间, 该日期和时间相当于公元0001年1月1日开始的那一刻 公历。</returns>
    </member>
    <member name="F:System.Globalization.ThaiBuddhistCalendar.ThaiBuddhistEra">
      <summary>表示当前纪元。 此字段为常数。</summary>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>返回设置为指定纪元中指定日期和时间的 <see cref="T:System.DateTime" />。</summary>
      <param name="year">一个整数，用于表示年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月份。</param>
      <param name="day">1 到 31 之间的一个整数，用于表示天。</param>
      <param name="hour">0 到 23 之间的一个整数，用于表示小时。</param>
      <param name="minute">0 到 59 之间的一个整数，用于表示分钟。</param>
      <param name="second">0 到 59 之间的一个整数，用于表示秒。</param>
      <param name="millisecond">0 到 999 之间的一个整数，用于表示毫秒。</param>
      <param name="era">一个整数，用于表示纪元。</param>
      <returns>设置为当前纪元中指定日期和时间的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。  

或 - 
<paramref name="month" /> 超出了日历支持的范围。  

或 
 <paramref name="day" /> 超出了日历支持的范围。  
或 
 <paramref name="hour" /> 小于 0 或大于 23。  
或 
 <paramref name="minute" /> 小于 0 或大于 59。  
或 
 <paramref name="second" /> 小于 0 或大于 59。  
或 
 <paramref name="millisecond" /> 小于 0 或大于 999。  

或 - 
<paramref name="era" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.ThaiBuddhistCalendar.ToFourDigitYear(System.Int32)">
      <summary>使用 <see cref="P:System.Globalization.ThaiBuddhistCalendar.TwoDigitYearMax" /> 属性将指定的年份转换为四位数年份，以确定相应的纪元。</summary>
      <param name="year">一个两位数或四位数的整数，用于表示要转换的年份。</param>
      <returns>包含 <paramref name="year" /> 的四位数表示形式的整数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了日历支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.ThaiBuddhistCalendar.TwoDigitYearMax">
      <summary>获取或设置可以用两位数年份表示的 100 年范围内的最后一年。</summary>
      <returns>可以用两位数年份表示的 100 年范围内的最后一年。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">为设置操作指定的值小于 99。  
或 
为设置操作指定的值大于 <see langword="MaxSupportedDateTime.Year" />。</exception>
      <exception cref="T:System.InvalidOperationException">在设置操作中，当前实例是只读的。</exception>
    </member>
    <member name="T:System.Globalization.TimeSpanStyles">
      <summary>定义一些格式设置选项，这些选项可自定义 <see cref="Overload:System.TimeSpan.ParseExact" /> 和 <see cref="Overload:System.TimeSpan.TryParseExact" /> 方法的字符串分析方法。</summary>
    </member>
    <member name="F:System.Globalization.TimeSpanStyles.AssumeNegative">
      <summary>指示输入始终解释为一个负时间间隔。</summary>
    </member>
    <member name="F:System.Globalization.TimeSpanStyles.None">
      <summary>指示仅当存在一个负号时输入解释为一个负时间间隔。</summary>
    </member>
    <member name="T:System.Globalization.UmAlQuraCalendar">
      <summary>表示沙特阿拉伯回历 (Um Al Qura)。</summary>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.#ctor">
      <summary>初始化 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.AddMonths(System.DateTime,System.Int32)">
      <summary>计算与指定初始日期相距指定月数的日期。</summary>
      <param name="time">要加上月数的日期。 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 类仅支持从 04/30/1900 00.00.00（公历日期）到 11/16/2077 23:59:59（公历日期）的日期。</param>
      <param name="months">要添加的正月数或负月数。</param>
      <returns>在将 <paramref name="months" /> 参数指定的月数加到 <paramref name="time" /> 参数指定的日期后所得的日期。</returns>
      <exception cref="T:System.ArgumentException">得到的日期不在 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 类支持的范围内。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="months" /> 小于 -120,000 或大于 120,000。  
或 
 <paramref name="time" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.AddYears(System.DateTime,System.Int32)">
      <summary>计算与指定初始日期相距指定年数的日期。</summary>
      <param name="time">要加上年数的日期。 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 类仅支持从 04/30/1900 00.00.00（公历日期）到 11/16/2077 23:59:59（公历日期）的日期。</param>
      <param name="years">要添加的正年数或负年数。</param>
      <returns>在将 <paramref name="years" /> 参数指定的年数加到 <paramref name="time" /> 参数指定的日期后所得的日期。</returns>
      <exception cref="T:System.ArgumentException">得到的日期不在 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 类支持的范围内。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="years" /> 小于 -10,000 或大于 10,000。  
或 
 <paramref name="time" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.AlgorithmType">
      <summary>获取一个值，该值指示当前日历是阳历、阴历还是二者的组合。</summary>
      <returns>始终返回 <see cref="F:System.Globalization.CalendarAlgorithmType.LunarCalendar" />。</returns>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.DaysInYearBeforeMinSupportedYear">
      <summary>获取 <see cref="P:System.Globalization.UmAlQuraCalendar.MinSupportedDateTime" /> 属性指定的年份之前的年中天数。</summary>
      <returns>由 <see cref="P:System.Globalization.UmAlQuraCalendar.MinSupportedDateTime" /> 指定的在年之前的一年的天数。</returns>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.Eras">
      <summary>获取当前 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 支持的纪元的列表。</summary>
      <returns>一个数组，它由值为 <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" /> 的单个元素组成。</returns>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDayOfMonth(System.DateTime)">
      <summary>计算指定日期出现在月中的哪一天。</summary>
      <param name="time">要读取的数据类型。 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 类仅支持从 04/30/1900 00.00.00（公历日期）到 11/16/2077 23:59:59（公历日期）的日期。</param>
      <returns>一个从 1 到 30 的整数，表示由 <paramref name="time" /> 参数指定的月中日期。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDayOfWeek(System.DateTime)">
      <summary>计算指定日期出现在星期几。</summary>
      <param name="time">要读取的数据类型。 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 类仅支持从 04/30/1900 00.00.00（公历日期）到 11/16/2077 23:59:59（公历日期）的日期。</param>
      <returns>一个 <see cref="T:System.DayOfWeek" /> 值，表示 <paramref name="time" /> 参数指定的日期是星期几。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDayOfYear(System.DateTime)">
      <summary>计算指定日期出现在年中的哪一天。</summary>
      <param name="time">要读取的数据类型。 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 类仅支持从 04/30/1900 00.00.00（公历日期）到 11/16/2077 23:59:59（公历日期）的日期。</param>
      <returns>一个从 1 到 355 的整数，表示 <paramref name="time" /> 参数指定的日期是年中的第几天。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)">
      <summary>计算指定纪元年份的指定月份中的天数。</summary>
      <param name="year">年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月。</param>
      <param name="era">纪元。 指定 <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> 或 <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />。</param>
      <returns>指定纪元年份中指定月份的天数。 返回值是 29（在平年中）或 30（在闰年中）。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" /> 或 <paramref name="era" /> 超出了 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 类支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetDaysInYear(System.Int32,System.Int32)">
      <summary>计算指定纪元的指定年份中的天数。</summary>
      <param name="year">年份。</param>
      <param name="era">纪元。 指定 <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> 或 <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />。</param>
      <returns>指定纪元年份中的天数。 天数在平年中为 354，在闰年中为 355。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 超出了 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 类支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetEra(System.DateTime)">
      <summary>计算指定日期出现在哪个纪元。</summary>
      <param name="time">要读取的数据类型。</param>
      <returns>总是返回 <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" /> 值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetLeapMonth(System.Int32,System.Int32)">
      <summary>计算指定纪元年份的闰月。</summary>
      <param name="year">年份。</param>
      <param name="era">纪元。 指定 <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> 或 <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />。</param>
      <returns>总为 0，因为 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 类不支持闰月。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于 1318 或大于 1450。  

或 - 
<paramref name="era" /> 不是 <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> 或 <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetMonth(System.DateTime)">
      <summary>计算指定日期出现在哪个月份中。</summary>
      <param name="time">要读取的数据类型。 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 类仅支持从 04/30/1900 00.00.00（公历日期）到 11/16/2077 23:59:59（公历日期）的日期。</param>
      <returns>一个从 1 到 12 的整数，表示 <paramref name="time" /> 参数指定的日期中的月份。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetMonthsInYear(System.Int32,System.Int32)">
      <summary>计算指定纪元的指定年份中的月数。</summary>
      <param name="year">年份。</param>
      <param name="era">纪元。 指定 <see langword="UmAlQuaraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> 或 <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />。</param>
      <returns>始终为 12。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了此日历支持的范围。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="era" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.GetYear(System.DateTime)">
      <summary>计算由指定 <see cref="T:System.DateTime" /> 表示的日期所在的年份。</summary>
      <param name="time">要读取的数据类型。 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 类仅支持从 04/30/1900 00.00.00（公历日期）到 11/16/2077 23:59:59（公历日期）的日期。</param>
      <returns>一个整数，表示由 <paramref name="time" /> 参数指定的年份。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="time" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>确定指定的日期是否为闰日。</summary>
      <param name="year">年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月。</param>
      <param name="day">1 到 30 之间的一个整数，用于表示日。</param>
      <param name="era">纪元。 指定 <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> 或 <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />。</param>
      <returns>如果指定的日期是闰日，则为 <see langword="true" />；否则为 <see langword="false" />。 返回值始终为 <see langword="false" /> 因为 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 类不支持闰日。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" /> 或 <paramref name="era" /> 超出了 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 类支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)">
      <summary>确定指定纪元年份中的指定月份是否为闰月。</summary>
      <param name="year">年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月。</param>
      <param name="era">纪元。 指定 <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> 或 <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />。</param>
      <returns>总为 <see langword="false" />，因为 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 类不支持闰月。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" /> 或 <paramref name="era" /> 超出了 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 类支持的范围。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.IsLeapYear(System.Int32,System.Int32)">
      <summary>确定指定纪元中的指定年份是否为闰年。</summary>
      <param name="year">年份。</param>
      <param name="era">纪元。 指定 <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> 或 <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />。</param>
      <returns>如果指定的年是闰年，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 或 <paramref name="era" /> 超出了 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 类支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.MaxSupportedDateTime">
      <summary>获取此日历支持的最晚日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.UmAlQuraCalendar" />类支持的最晚日期和时间, 该日期和时间等效于2077年11月16日最后一时刻 公历。</returns>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.MinSupportedDateTime">
      <summary>获取此日历支持的最早日期和时间。</summary>
      <returns>
        <see cref="T:System.Globalization.UmAlQuraCalendar" />类支持的最早日期和时间, 该日期和时间等效于1900年4月30日开始的那一刻 公历。</returns>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>返回设置为指定的日期、时间和纪元的 <see cref="T:System.DateTime" />。</summary>
      <param name="year">年份。</param>
      <param name="month">1 到 12 之间的一个整数，用于表示月。</param>
      <param name="day">1 到 29 之间的一个整数，用于表示日。</param>
      <param name="hour">0 到 23 之间的一个整数，用于表示小时。</param>
      <param name="minute">0 到 59 之间的一个整数，用于表示分钟。</param>
      <param name="second">0 到 59 之间的一个整数，用于表示秒。</param>
      <param name="millisecond">0 到 999 之间的一个整数，用于表示毫秒。</param>
      <param name="era">纪元。 指定 <see langword="UmAlQuraCalendar.Eras[UmAlQuraCalendar.CurrentEra]" /> 或 <see cref="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra" />。</param>
      <returns>设置为当前纪元中指定日期和时间的 <see cref="T:System.DateTime" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" /> 或 <paramref name="era" /> 超出了 <see cref="T:System.Globalization.UmAlQuraCalendar" /> 类支持的范围。  
或 
 <paramref name="hour" /> 小于 0 或大于 23。  
或 
 <paramref name="minute" /> 小于 0 或大于 59。  
或 
 <paramref name="second" /> 小于 0 或大于 59。  
或 
 <paramref name="millisecond" /> 小于 0 或大于 999。</exception>
    </member>
    <member name="M:System.Globalization.UmAlQuraCalendar.ToFourDigitYear(System.Int32)">
      <summary>使用 <see cref="P:System.Globalization.UmAlQuraCalendar.TwoDigitYearMax" /> 属性将指定的年份转换为四位数年份，以确定相应的纪元。</summary>
      <param name="year">一个从 0 到 99 的两位数年份，或一个从 1318 到 1450 的四位数 Um Al Qura 日历年份。</param>
      <returns>如果 <paramref name="year" /> 参数是两位数年份，则返回值是对应的四位数年份。 如果 <paramref name="year" /> 参数是四位数年份，则返回值是未更改的 <paramref name="year" /> 参数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 超出了此日历支持的范围。</exception>
    </member>
    <member name="P:System.Globalization.UmAlQuraCalendar.TwoDigitYearMax">
      <summary>获取或设置可以用两位数年份表示的 100 年范围内的最后一年。</summary>
      <returns>可以用两位数年份表示的 100 年范围内的最后一年。</returns>
      <exception cref="T:System.InvalidOperationException">此日历为只读。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">在设置操作中，Um Al Qura 年份值小于 1318 而不是 99，或者大于 1450。</exception>
    </member>
    <member name="F:System.Globalization.UmAlQuraCalendar.UmAlQuraEra">
      <summary>表示当前纪元。 此字段为常数。</summary>
    </member>
    <member name="T:System.Globalization.UnicodeCategory">
      <summary>定义字符的 Unicode 类别。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ClosePunctuation">
      <summary>成对的标点符号（例如括号、方括号和大括号）的结束字符。 由 Unicode 代码“Pe”（标点，结束）表示。 值为 21。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ConnectorPunctuation">
      <summary>连接两个字符的连接符标点字符。 由 Unicode 代码“Pc”（标点，连接符）表示。 值为 18。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Control">
      <summary>控制代码字符，其 Unicode 值是 U+007F，或者位于 U+0000 到 U+001F 或 U+0080 到 U+009F 范围内。 由 Unicode 代码“Cc”（其他，控制）表示。 值为 14。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.CurrencySymbol">
      <summary>货币符号字符。 由 Unicode 代码“Sc”（符号，货币）表示。 值为 26。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.DashPunctuation">
      <summary>短划线或连字符字符。 由 Unicode 代码“Pd”（标点，短划线）表示。 值为 19。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.DecimalDigitNumber">
      <summary>十进制数字字符，即范围 0 到 9 内的字符。 由 Unicode 代码“Nd”（数字，十进制数字）表示。 值为 8。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.EnclosingMark">
      <summary>封闭符号字符，它将基字符前面的所有字符（包括基字符）括起来。 由 Unicode 代码“Me”（符号，封闭）表示。 值为 7。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.FinalQuotePunctuation">
      <summary>右引号或后引号字符。 由 Unicode 代码“Pf”（标点，后引号）表示。 值为 23。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Format">
      <summary>格式字符，它影响文本布局或文本处理操作，但是它通常不会呈现。 由 Unicode 代码“Cf”（其他，格式）表示。 值为 15。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.InitialQuotePunctuation">
      <summary>左引号或前引号字符。 由 Unicode 代码“Pi”（标点，前引号）表示。 值为 22。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LetterNumber">
      <summary>由字母表示的数字，而不是十进制数字，例如，罗马数字 5 由字母“V”表示。 此指示符由 Unicode 代码“Nl”（数字，字母）表示。 值为 9。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LineSeparator">
      <summary>用于分隔文本各行的字符。 由 Unicode 代码“Zl”（分隔符，行）表示。 值为 12。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.LowercaseLetter">
      <summary>小写字母。 由 Unicode 代码“Ll”（字母，小写）表示。 值为 1。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.MathSymbol">
      <summary>数学符号字符，例如“+”或“=”。 由 Unicode 代码“Sm”（符号，数学）表示。 值为 25。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ModifierLetter">
      <summary>修饰符字母字符，它是独立式的间距字符，指示前面字母的修改。 由 Unicode 代码“Lm”（字母，修饰符）表示。 值为 3。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ModifierSymbol">
      <summary>修饰符符号字符，它指示环绕字符的修改。 例如，分数斜线号指示其左侧的数字为分子，右侧的数字为分母。 此指示符由 Unicode 代码“Sk”（符号，修饰符）表示。 值为 27。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.NonSpacingMark">
      <summary>指示基字符的修改的非间距字符。 由 Unicode 代码“Mn”（符号，非间距）表示。 值为 5。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OpenPunctuation">
      <summary>成对的标点符号（例如括号、方括号和大括号）的开始字符。 由 Unicode 代码“Ps”（标点，开始）表示。 值为 20。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherLetter">
      <summary>不属于大写字母、小写字母、词首字母大写或修饰符字母的字母。 由 Unicode 代码“Lo”（字母，其他）表示。 值为 4。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherNotAssigned">
      <summary>未指派给任何 Unicode 类别的字符。 由 Unicode 代码“Cn”（其他，未分配）表示。 值为 29。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherNumber">
      <summary>既不是十进制数字也不是字母数字的数字，例如分数 1/2。 此指示符由 Unicode 代码“No”（数字，其他）表示。 值为 10。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherPunctuation">
      <summary>不属于连接符、短划线、开始标点、结束标点、前引号或后引号的标点字符。 由 Unicode 代码“Po”（标点，其他）表示。 值为 24。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.OtherSymbol">
      <summary>不属于数学符号、货币符号或修饰符符号的符号字符。 由 Unicode 代码“So”（符号，其他）表示。 值为 28。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.ParagraphSeparator">
      <summary>用于分隔段落的字符。 由 Unicode 代码“Zp”（分隔符，段落）表示。 值为 13。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.PrivateUse">
      <summary>专用字符，其 Unicode 值在范围 U+E000 到 U+F8FF 内。 由 Unicode 代码“Co”（其他，专用）表示。 值为 17。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.SpaceSeparator">
      <summary>没有标志符号但不属于控制或格式字符的空白字符。 由 Unicode 代码“Zs”（分隔符，空白）表示。 值为 11。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.SpacingCombiningMark">
      <summary>间距字符，它指示基字符的修改并影响基字符的标志符号的宽度。 由 Unicode 代码“Mc”（符号，间距组合）表示。 值为 6。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.Surrogate">
      <summary>高代理项或低代理项字符。 代理项代码值在范围 U+D800 到 U+DFFF 内。 由 Unicode 代码“Cs”（其他，代理项）表示。 值为 16。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.TitlecaseLetter">
      <summary>词首字母大写的字母。 由 Unicode 代码“Lt”（字母，词首字母大写）表示。 值为 2。</summary>
    </member>
    <member name="F:System.Globalization.UnicodeCategory.UppercaseLetter">
      <summary>大写字母。 由 Unicode 代码“Lu”（字母，大写）表示。 值为 0。</summary>
    </member>
    <member name="T:System.GopherStyleUriParser">
      <summary>基于 Gopher 方案的可自定义分析器。</summary>
    </member>
    <member name="M:System.GopherStyleUriParser.#ctor">
      <summary>创建一个基于 Gopher 方案的可自定义分析器。</summary>
    </member>
    <member name="T:System.Guid">
      <summary>表示全局唯一标识符 (GUID)。</summary>
    </member>
    <member name="M:System.Guid.#ctor(System.Byte[])">
      <summary>使用指定的字节数组初始化 <see cref="T:System.Guid" /> 类的新实例。</summary>
      <param name="b">包含用于初始化 GUID 的值的 16 元素字节数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="b" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="b" /> 的长度不是 16 个字节。</exception>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>使用指定的整数和字节初始化 <see cref="T:System.Guid" /> 类的新实例。</summary>
      <param name="a">GUID 的前 4 个字节。</param>
      <param name="b">GUID 的下两个字节。</param>
      <param name="c">GUID 的下两个字节。</param>
      <param name="d">GUID 的下一个字节。</param>
      <param name="e">GUID 的下一个字节。</param>
      <param name="f">GUID 的下一个字节。</param>
      <param name="g">GUID 的下一个字节。</param>
      <param name="h">GUID 的下一个字节。</param>
      <param name="i">GUID 的下一个字节。</param>
      <param name="j">GUID 的下一个字节。</param>
      <param name="k">GUID 的下一个字节。</param>
    </member>
    <member name="M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])">
      <summary>使用指定的整数和字节数组初始化 <see cref="T:System.Guid" /> 类的新实例。</summary>
      <param name="a">GUID 的前 4 个字节。</param>
      <param name="b">GUID 的下两个字节。</param>
      <param name="c">GUID 的下两个字节。</param>
      <param name="d">GUID 的其余 8 个字节。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="d" /> 的长度不是 8 个字节。</exception>
    </member>
    <member name="M:System.Guid.#ctor(System.ReadOnlySpan{System.Byte})">
      <param name="b" />
    </member>
    <member name="M:System.Guid.#ctor(System.String)">
      <summary>使用指定字符串所表示的值初始化 <see cref="T:System.Guid" /> 类的新实例。</summary>
      <param name="g">包含下面任一格式的 GUID 的字符串（“d”表示忽略大小写的十六进制数字）：  
 32 个连续的数字：  
 dddddddddddddddddddddddddddddddd  
 或  
 8、4、4、4 和 12 位数字的分组，各组之间有连线符。 也可以用一对大括号或者圆括号将整个 GUID 括起来：  
 dddddddd-dddd-dddd-dddd-dddddddddddd  
 或  
 {dddddddd-dddd-dddd-dddd-dddddddddddd}  

或 -  

 (dddddddd-dddd-dddd-dddd-dddddddddddd)  

或 -  

 8、4 和 4 位数字的分组，和一个 8 组 2 位数字的子集，每组都带有前缀“0x”或“0X”，以逗号分隔。 整个 GUID 和子集用大括号括起来：  
 {0xdddddddd, 0xdddd, 0xdddd,{0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd}}  
 所有大括号、逗号和“0x”前缀都是必需的。 所有内置的空格都将被忽略。 组中的所有前导零都将被忽略。  
 组中显示的数字为可在该组显示的有意义数字的最大数目。 你可以指定从 1 到为组显示的位数。 指定的位数被认为是该组低序位的位数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="g" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="g" /> 的格式无效。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="g" /> 的格式无效。</exception>
    </member>
    <member name="M:System.Guid.#ctor(System.UInt32,System.UInt16,System.Byte,System.UInt16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>使用指定的无符号整数和字节初始化 <see cref="T:System.Guid" /> 类的新实例。</summary>
      <param name="a">GUID 的前 4 个字节。</param>
      <param name="b">GUID 的下两个字节。</param>
      <param name="k">GUID 的下一个字节。</param>
      <param name="c">GUID 的下两个字节。</param>
      <param name="d">GUID 的下一个字节。</param>
      <param name="e">GUID 的下一个字节。</param>
      <param name="f">GUID 的下一个字节。</param>
      <param name="g">GUID 的下一个字节。</param>
      <param name="h">GUID 的下一个字节。</param>
      <param name="i">GUID 的下一个字节。</param>
      <param name="j">GUID 的下一个字节。</param>
    </member>
    <member name="M:System.Guid.CompareTo(System.Guid)">
      <summary>将此实例与指定 <see cref="T:System.Guid" /> 对象进行比较并返回它们的相对值。</summary>
      <param name="value">要与此实例进行比较的对象。</param>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。  
  返回值 
  说明 
  负整数 
  此实例小于 <paramref name="value" />。  

  零 
  此实例等于 <paramref name="value" />。  

  正整数 
  此实例大于 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Guid.CompareTo(System.Object)">
      <summary>将此实例与指定对象进行比较并返回一个对二者的相对值的指示。</summary>
      <param name="value">要比较的对象，或为 <see langword="null" />。</param>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。  
  返回值 
  说明 
  负整数 
  此实例小于 <paramref name="value" />。  

  零 
  此实例等于 <paramref name="value" />。  

  正整数 
  此实例大于 <paramref name="value" />，或 <paramref name="value" /> 为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Guid" />。</exception>
    </member>
    <member name="F:System.Guid.Empty">
      <summary>
        <see cref="T:System.Guid" /> 结构的只读实例，其值均为零。</summary>
    </member>
    <member name="M:System.Guid.Equals(System.Guid)">
      <summary>返回一个值，该值指示此实例和指定的 <see cref="T:System.Guid" /> 对象是否表示相同的值。</summary>
      <param name="g">要与此实例进行比较的对象。</param>
      <returns>如果 <see langword="true" /> 与此实例相等，则为 <paramref name="g" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Guid.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="o">与该实例进行比较的对象。</param>
      <returns>如果 <paramref name="o" /> 是值与此实例相等的 <see cref="T:System.Guid" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Guid.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Guid.NewGuid">
      <summary>初始化 <see cref="T:System.Guid" /> 结构的新实例。</summary>
      <returns>一个新的 GUID 对象。</returns>
    </member>
    <member name="M:System.Guid.op_Equality(System.Guid,System.Guid)">
      <summary>指示两个指定的 <see cref="T:System.Guid" /> 对象的值是否相等。</summary>
      <param name="a">要比较的第一个对象。</param>
      <param name="b">要比较的第二个对象。</param>
      <returns>如果 <paramref name="a" /> 和 <paramref name="b" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Guid.op_Inequality(System.Guid,System.Guid)">
      <summary>指示两个指定的 <see cref="T:System.Guid" /> 对象的值是否不相等。</summary>
      <param name="a">要比较的第一个对象。</param>
      <param name="b">要比较的第二个对象。</param>
      <returns>如果 <paramref name="a" /> 和 <paramref name="b" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Guid.Parse(System.ReadOnlySpan{System.Char})">
      <param name="input" />
    </member>
    <member name="M:System.Guid.Parse(System.String)">
      <summary>将 GUID 的字符串表示形式转换为等效的 <see cref="T:System.Guid" /> 结构。</summary>
      <param name="input">要转换的字符串。</param>
      <returns>一个包含已分析的值的结构。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 的格式无法识别。</exception>
    </member>
    <member name="M:System.Guid.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <param name="input" />
      <param name="format" />
    </member>
    <member name="M:System.Guid.ParseExact(System.String,System.String)">
      <summary>将 GUID 的字符串表示形式转换为等效的 <see cref="T:System.Guid" /> 结构，前提是该字符串采用的是指定格式。</summary>
      <param name="input">要转换的 GUID。</param>
      <param name="format">下列说明符之一，指示解释 <paramref name="input" /> 时要使用的确切格式：“N”、“D”、“B”、“P”或“X”。</param>
      <returns>一个包含已分析的值的结构。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="format" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 未采用 <paramref name="format" /> 指定的格式。</exception>
    </member>
    <member name="M:System.Guid.ToByteArray">
      <summary>返回包含此实例的值的 16 元素字节数组。</summary>
      <returns>16 元素字节数组。</returns>
    </member>
    <member name="M:System.Guid.ToString">
      <summary>返回注册表格式的此实例值的字符串表示形式。</summary>
      <returns>这 <see cref="T:System.Guid" />的值，格式化通过使用“D”格式说明符如下所示: 
 <c>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</c>  
其中 GUID 的值表示为一系列小写的十六进制位，这些十六进制位分别以 8 个、4 个、4 个、4 个和 12 个位为一组并由连字符分隔开。 例如，返回值可以是“382c74c3-721d-4f34-80e5-57657b6cbc27”。 若要将从 a 到 f 的十六进制数转换为大写，请对返回的字符串调用 <see cref="M:System.String.ToUpper" /> 方法。</returns>
    </member>
    <member name="M:System.Guid.ToString(System.String)">
      <summary>根据所提供的格式说明符，返回此 <see cref="T:System.Guid" /> 实例值的字符串表示形式。</summary>
      <param name="format">一个单格式说明符，它指示如何格式化此 <see cref="T:System.Guid" /> 的值。 <paramref name="format" /> 参数可以是“N”、“D”、“B”、“P”或“X”。 如果 <paramref name="format" /> 为 <see langword="null" /> 或空字符串 ("")，则使用“D”。</param>
      <returns>此 <see cref="T:System.Guid" /> 的值，用一系列指定格式的小写十六进制位表示。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的值不是 <see langword="null" />、空字符串 ("")、“N”、“D”、“B”、“P”或“X”。</exception>
    </member>
    <member name="M:System.Guid.ToString(System.String,System.IFormatProvider)">
      <summary>根据所提供的格式说明符和区域性特定的格式信息，返回 <see cref="T:System.Guid" /> 类的此实例值的字符串表示形式。</summary>
      <param name="format">一个单格式说明符，它指示如何格式化此 <see cref="T:System.Guid" /> 的值。 <paramref name="format" /> 参数可以是“N”、“D”、“B”、“P”或“X”。 如果 <paramref name="format" /> 为 <see langword="null" /> 或空字符串 ("")，则使用“D”。</param>
      <param name="provider">（保留）一个对象，用于提供区域性特定的格式设置信息。</param>
      <returns>此 <see cref="T:System.Guid" /> 的值，用一系列指定格式的小写十六进制位表示。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 的值不是 <see langword="null" />、空字符串 ("")、“N”、“D”、“B”、“P”或“X”。</exception>
    </member>
    <member name="M:System.Guid.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char})">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
    </member>
    <member name="M:System.Guid.TryParse(System.ReadOnlySpan{System.Char},System.Guid@)">
      <param name="input" />
      <param name="result" />
    </member>
    <member name="M:System.Guid.TryParse(System.String,System.Guid@)">
      <summary>将 GUID 的字符串表示形式转换为等效的 <see cref="T:System.Guid" /> 结构。</summary>
      <param name="input">要转换的 GUID。</param>
      <param name="result">将包含已分析的值的结构。 如果此方法返回 <see langword="true" />，<paramref name="result" /> 将包含有效的 <see cref="T:System.Guid" />。 如果 <paramref name="result" /> 等于 <see cref="F:System.Guid.Empty" />，则此方法将返回 <see langword="false" />。</param>
      <returns>如果分析操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Guid.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.Guid@)">
      <param name="input" />
      <param name="format" />
      <param name="result" />
    </member>
    <member name="M:System.Guid.TryParseExact(System.String,System.String,System.Guid@)">
      <summary>将 GUID 的字符串表示形式转换为等效的 <see cref="T:System.Guid" /> 结构，前提是该字符串采用的是指定格式。</summary>
      <param name="input">要转换的 GUID。</param>
      <param name="format">下列说明符之一，指示解释 <paramref name="input" /> 时要使用的确切格式：“N”、“D”、“B”、“P”或“X”。</param>
      <param name="result">将包含已分析的值的结构。 如果此方法返回 <see langword="true" />，<paramref name="result" /> 将包含有效的 <see cref="T:System.Guid" />。 如果 <paramref name="result" /> 等于 <see cref="F:System.Guid.Empty" />，则此方法将返回 <see langword="false" />。</param>
      <returns>如果分析操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Guid.TryWriteBytes(System.Span{System.Byte})">
      <param name="destination" />
    </member>
    <member name="T:System.HashCode">
      <summary>将多个值的哈希代码合并为一个哈希代码。</summary>
    </member>
    <member name="M:System.HashCode.Add``1(``0)">
      <summary>将单个值添加到哈希代码。</summary>
      <param name="value">要添加到哈希代码的值。</param>
      <typeparam name="T">要添加到哈希代码的值的类型。</typeparam>
    </member>
    <member name="M:System.HashCode.Add``1(``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>向哈希代码添加单个值，指定提供哈希代码函数的类型。</summary>
      <param name="value">要添加到哈希代码的值。</param>
      <param name="comparer">使用 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 计算哈希代码。
此值可以是空引用（Visual Basic 中无内容），它将使用 <typeparamref name="T" /> 的默认相等比较器。</param>
      <typeparam name="T">要添加到哈希代码的值的类型。</typeparam>
    </member>
    <member name="M:System.HashCode.Combine``1(``0)">
      <summary>传播由指定值返回的哈希代码。</summary>
      <param name="value1">要添加到哈希代码的值。</param>
      <typeparam name="T1">要添加哈希代码的值的类型。</typeparam>
      <returns>表示单个值的哈希代码。</returns>
    </member>
    <member name="M:System.HashCode.Combine``2(``0,``1)">
      <summary>将两个值合并到哈希代码中。</summary>
      <param name="value1">第一个要合并到哈希代码中的值。</param>
      <param name="value2">第二个要合并到哈希代码中的值。</param>
      <typeparam name="T1">要合并到哈希代码中的第一个值的类型。</typeparam>
      <typeparam name="T2">要合并到哈希代码中的第二个值的类型。</typeparam>
      <returns>表示两个值的哈希代码。</returns>
    </member>
    <member name="M:System.HashCode.Combine``3(``0,``1,``2)">
      <summary>将三个值合并到哈希代码中。</summary>
      <param name="value1">第一个要合并到哈希代码中的值。</param>
      <param name="value2">第二个要合并到哈希代码中的值。</param>
      <param name="value3">第三个要合并到哈希代码中的值。</param>
      <typeparam name="T1">要合并到哈希代码中的第一个值的类型。</typeparam>
      <typeparam name="T2">要合并到哈希代码中的第二个值的类型。</typeparam>
      <typeparam name="T3">要合并到哈希代码中的第三个值的类型。</typeparam>
      <returns>表示三个值的哈希代码。</returns>
    </member>
    <member name="M:System.HashCode.Combine``4(``0,``1,``2,``3)">
      <summary>将四个值合并到哈希代码中。</summary>
      <param name="value1">第一个要合并到哈希代码中的值。</param>
      <param name="value2">第二个要合并到哈希代码中的值。</param>
      <param name="value3">第三个要合并到哈希代码中的值。</param>
      <param name="value4">第四个要合并到哈希代码中的值。</param>
      <typeparam name="T1">要合并到哈希代码中的第一个值的类型。</typeparam>
      <typeparam name="T2">要合并到哈希代码中的第二个值的类型。</typeparam>
      <typeparam name="T3">要合并到哈希代码中的第三个值的类型。</typeparam>
      <typeparam name="T4">要合并到哈希代码中的第四个值的类型。</typeparam>
      <returns>表示四个值的哈希代码。</returns>
    </member>
    <member name="M:System.HashCode.Combine``5(``0,``1,``2,``3,``4)">
      <summary>将五个值合并到哈希代码中。</summary>
      <param name="value1">第一个要合并到哈希代码中的值。</param>
      <param name="value2">第二个要合并到哈希代码中的值。</param>
      <param name="value3">第三个要合并到哈希代码中的值。</param>
      <param name="value4">第四个要合并到哈希代码中的值。</param>
      <param name="value5">第五个要合并到哈希代码中的值。</param>
      <typeparam name="T1">要合并到哈希代码中的第一个值的类型。</typeparam>
      <typeparam name="T2">要合并到哈希代码中的第二个值的类型。</typeparam>
      <typeparam name="T3">要合并到哈希代码中的第三个值的类型。</typeparam>
      <typeparam name="T4">要合并到哈希代码中的第四个值的类型。</typeparam>
      <typeparam name="T5">要合并到哈希代码中的第5个值的类型。</typeparam>
      <returns>表示五个值的哈希代码。</returns>
    </member>
    <member name="M:System.HashCode.Combine``6(``0,``1,``2,``3,``4,``5)">
      <summary>将六个值合并到哈希代码中。</summary>
      <param name="value1">第一个要合并到哈希代码中的值。</param>
      <param name="value2">第二个要合并到哈希代码中的值。</param>
      <param name="value3">第三个要合并到哈希代码中的值。</param>
      <param name="value4">第四个要合并到哈希代码中的值。</param>
      <param name="value5">第五个要合并到哈希代码中的值。</param>
      <param name="value6">第六个要合并到哈希代码中的值。</param>
      <typeparam name="T1">要合并到哈希代码中的第一个值的类型。</typeparam>
      <typeparam name="T2">要合并到哈希代码中的第二个值的类型。</typeparam>
      <typeparam name="T3">要合并到哈希代码中的第三个值的类型。</typeparam>
      <typeparam name="T4">要合并到哈希代码中的第四个值的类型。</typeparam>
      <typeparam name="T5">要合并到哈希代码中的第5个值的类型。</typeparam>
      <typeparam name="T6">要合并到哈希代码中的第6个值的类型。</typeparam>
      <returns>表示六个值的哈希代码。</returns>
    </member>
    <member name="M:System.HashCode.Combine``7(``0,``1,``2,``3,``4,``5,``6)">
      <summary>将七个值合并到哈希代码中。</summary>
      <param name="value1">第一个要合并到哈希代码中的值。</param>
      <param name="value2">第二个要合并到哈希代码中的值。</param>
      <param name="value3">第三个要合并到哈希代码中的值。</param>
      <param name="value4">第四个要合并到哈希代码中的值。</param>
      <param name="value5">第五个要合并到哈希代码中的值。</param>
      <param name="value6">第六个要合并到哈希代码中的值。</param>
      <param name="value7">第七个要合并到哈希代码中的值。</param>
      <typeparam name="T1">要合并到哈希代码中的第一个值的类型。</typeparam>
      <typeparam name="T2">要合并到哈希代码中的第二个值的类型。</typeparam>
      <typeparam name="T3">要合并到哈希代码中的第三个值的类型。</typeparam>
      <typeparam name="T4">要合并到哈希代码中的第四个值的类型。</typeparam>
      <typeparam name="T5">要合并到哈希代码中的第5个值的类型。</typeparam>
      <typeparam name="T6">要合并到哈希代码中的第6个值的类型。</typeparam>
      <typeparam name="T7">要合并到哈希代码中的第7个值的类型。</typeparam>
      <returns>表示七个值的哈希代码。</returns>
    </member>
    <member name="M:System.HashCode.Combine``8(``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>将八个值合并到哈希代码中。</summary>
      <param name="value1">第一个要合并到哈希代码中的值。</param>
      <param name="value2">第二个要合并到哈希代码中的值。</param>
      <param name="value3">第三个要合并到哈希代码中的值。</param>
      <param name="value4">第四个要合并到哈希代码中的值。</param>
      <param name="value5">第五个要合并到哈希代码中的值。</param>
      <param name="value6">第六个要合并到哈希代码中的值。</param>
      <param name="value7">第七个要合并到哈希代码中的值。</param>
      <param name="value8">第八个要合并到哈希代码中的值。</param>
      <typeparam name="T1">要合并到哈希代码中的第一个值的类型。</typeparam>
      <typeparam name="T2">要合并到哈希代码中的第二个值的类型。</typeparam>
      <typeparam name="T3">要合并到哈希代码中的第三个值的类型。</typeparam>
      <typeparam name="T4">要合并到哈希代码中的第四个值的类型。</typeparam>
      <typeparam name="T5">要合并到哈希代码中的第5个值的类型。</typeparam>
      <typeparam name="T6">要合并到哈希代码中的第6个值的类型。</typeparam>
      <typeparam name="T7">要合并到哈希代码中的第7个值的类型。</typeparam>
      <typeparam name="T8">要合并到哈希代码中的第8个值的类型。</typeparam>
      <returns>表示八个值的哈希代码。</returns>
    </member>
    <member name="M:System.HashCode.Equals(System.Object)">
      <summary>此方法不受支持，因此不应调用。</summary>
      <param name="obj">已忽略。</param>
      <returns>此方法将始终引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">始终在调用此方法时引发。</exception>
    </member>
    <member name="M:System.HashCode.GetHashCode">
      <summary>此方法不受支持，因此不应调用。</summary>
      <returns>此方法将始终引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">始终在调用此方法时引发。</exception>
    </member>
    <member name="M:System.HashCode.ToHashCode">
      <summary>连续调用 <see cref="Overload:System.HashCode.Add" /> 后计算最终哈希代码。</summary>
      <returns>计算的哈希代码。</returns>
    </member>
    <member name="T:System.HttpStyleUriParser">
      <summary>基于 HTTP 方案的可自定义分析器。</summary>
    </member>
    <member name="M:System.HttpStyleUriParser.#ctor">
      <summary>创建基于 HTTP 方案的可自定义分析器。</summary>
    </member>
    <member name="T:System.IAsyncDisposable">
      <summary>提供一种用于异步释放非托管资源的机制。</summary>
    </member>
    <member name="M:System.IAsyncDisposable.DisposeAsync">
      <summary>以异步方式执行与释放或重置非托管资源相关的应用程序定义的任务。</summary>
      <returns>一个表示异步释放操作的任务。</returns>
    </member>
    <member name="T:System.IAsyncResult">
      <summary>表示异步操作的状态。</summary>
    </member>
    <member name="P:System.IAsyncResult.AsyncState">
      <summary>获取一个用户定义的对象，该对象限定或包含有关异步操作的信息。</summary>
      <returns>一个用户定义的对象，限定或包含有关异步操作的信息。</returns>
    </member>
    <member name="P:System.IAsyncResult.AsyncWaitHandle">
      <summary>获取用于等待异步操作完成的 <see cref="T:System.Threading.WaitHandle" />。</summary>
      <returns>用于等待异步操作完成的 <see cref="T:System.Threading.WaitHandle" />。</returns>
    </member>
    <member name="P:System.IAsyncResult.CompletedSynchronously">
      <summary>获取一个值，该值指示异步操作是否同步完成。</summary>
      <returns>如果异步操作同步完成，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IAsyncResult.IsCompleted">
      <summary>获取一个值，该值指示异步操作是否已完成。</summary>
      <returns>如果操作完成则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ICloneable">
      <summary>支持克隆，即用与现有实例相同的值创建类的新实例。</summary>
    </member>
    <member name="M:System.ICloneable.Clone">
      <summary>创建作为当前实例副本的新对象。</summary>
      <returns>作为此实例副本的新对象。</returns>
    </member>
    <member name="T:System.IComparable">
      <summary>定义由值类型或类实现的特定于类型的通用比较方法，旨在对其实例进行排序。</summary>
    </member>
    <member name="M:System.IComparable.CompareTo(System.Object)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <param name="obj">与此实例进行比较的对象。</param>
      <returns>一个值，指示要比较的对象的相对顺序。 返回值的含义如下： 
  值 
  含义 
  小于零 
  此实例在排序顺序中位于 <paramref name="obj" /> 之前。  
  零 
  此实例在排序顺序中的位置与 <paramref name="obj" /> 相同。  
  大于零 
  此实例在排序顺序中位于 <paramref name="obj" /> 之后。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不具有与此实例相同的类型。</exception>
    </member>
    <member name="T:System.IComparable`1">
      <summary>定义由值类型或类实现的通用比较方法，旨在创建特定于类型的比较方法以对实例进行排序。</summary>
      <typeparam name="T">要比较的对象的类型。</typeparam>
    </member>
    <member name="M:System.IComparable`1.CompareTo(`0)">
      <summary>将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。</summary>
      <param name="other">与此实例进行比较的对象。</param>
      <returns>一个值，指示要比较的对象的相对顺序。 返回值的含义如下： 
  值 
  含义 
  小于零 
  此实例在排序顺序中位于 <paramref name="other" /> 之前。  
  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  
  大于零 
  此实例在排序顺序中位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="T:System.IConvertible">
      <summary>定义将实现引用或值类型的值转换为具有等效值的公共语言运行时类型的方法。</summary>
    </member>
    <member name="M:System.IConvertible.GetTypeCode">
      <summary>返回此实例的 <see cref="T:System.TypeCode" />。</summary>
      <returns>枚举常数，它是实现该接口的类或值类型的 <see cref="T:System.TypeCode" />。</returns>
    </member>
    <member name="M:System.IConvertible.ToBoolean(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 Boolean 值。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <returns>与此实例的值等效的 Boolean 值。</returns>
    </member>
    <member name="M:System.IConvertible.ToByte(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将该实例的值转换为等效的 8 位无符号整数。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <returns>与该实例的值等效的 8 位无符号整数。</returns>
    </member>
    <member name="M:System.IConvertible.ToChar(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 Unicode 字符。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <returns>与此实例的值等效的 Unicode 字符。</returns>
    </member>
    <member name="M:System.IConvertible.ToDateTime(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 <see cref="T:System.DateTime" />。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <returns>与此实例的值等效的 <see cref="T:System.DateTime" /> 实例。</returns>
    </member>
    <member name="M:System.IConvertible.ToDecimal(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 <see cref="T:System.Decimal" /> 数字。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <returns>与此实例的值等效的 <see cref="T:System.Decimal" /> 数字。</returns>
    </member>
    <member name="M:System.IConvertible.ToDouble(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的双精度浮点数字。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <returns>与此实例的值等效的双精度浮点数字。</returns>
    </member>
    <member name="M:System.IConvertible.ToInt16(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 16 位有符号整数。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <returns>与此实例的值等效的 16 位有符号整数。</returns>
    </member>
    <member name="M:System.IConvertible.ToInt32(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 32 位有符号整数。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <returns>与此实例的值等效的 32 位有符号整数。</returns>
    </member>
    <member name="M:System.IConvertible.ToInt64(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 64 位有符号整数。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <returns>与此实例的值等效的 64 位有符号整数。</returns>
    </member>
    <member name="M:System.IConvertible.ToSByte(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 8 位有符号整数。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <returns>与此实例的值等效的 8 位有符号整数。</returns>
    </member>
    <member name="M:System.IConvertible.ToSingle(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的单精度浮点数字。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <returns>与此实例的值等效的单精度浮点数字。</returns>
    </member>
    <member name="M:System.IConvertible.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为等效的 <see cref="T:System.String" />。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <returns>与此实例的值等效的 <see cref="T:System.String" /> 实例。</returns>
    </member>
    <member name="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将此实例的值转换为具有等效值的指定 <see cref="T:System.Object" /> 的 <see cref="T:System.Type" />。</summary>
      <param name="conversionType">要将此实例的值转换为的 <see cref="T:System.Type" />。</param>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <returns>其值与此实例值等效的 <paramref name="conversionType" /> 类型的 <see cref="T:System.Object" /> 实例。</returns>
    </member>
    <member name="M:System.IConvertible.ToUInt16(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将该实例的值转换为等效的 16 位无符号整数。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <returns>与该实例的值等效的 16 位无符号整数。</returns>
    </member>
    <member name="M:System.IConvertible.ToUInt32(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将该实例的值转换为等效的 32 位无符号整数。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <returns>与该实例的值等效的 32 位无符号整数。</returns>
    </member>
    <member name="M:System.IConvertible.ToUInt64(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式设置信息将该实例的值转换为等效的 64 位无符号整数。</summary>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> 接口实现，提供区域性特定的格式设置信息。</param>
      <returns>与该实例的值等效的 64 位无符号整数。</returns>
    </member>
    <member name="T:System.ICustomFormatter">
      <summary>定义一种方法，它支持自定义设置对象的值的格式。</summary>
    </member>
    <member name="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式设置信息将指定对象的值转换为等效的字符串表示形式。</summary>
      <param name="format">包含格式规范的格式字符串。</param>
      <param name="arg">要设置格式的对象。</param>
      <param name="formatProvider">一个对象，它提供有关当前实例的格式信息。</param>
      <returns>
        <paramref name="arg" /> 的值的字符串表示形式，按照 <paramref name="format" /> 和 <paramref name="formatProvider" /> 的指定来进行格式设置。</returns>
    </member>
    <member name="T:System.IDisposable">
      <summary>提供一种用于释放非托管资源的机制。</summary>
    </member>
    <member name="M:System.IDisposable.Dispose">
      <summary>执行与释放或重置非托管资源关联的应用程序定义的任务。</summary>
    </member>
    <member name="T:System.IEquatable`1">
      <summary>定义由值类型或类实现的通用方法，旨在创建特定于类型的方法以确定实例的质量。</summary>
      <typeparam name="T">要比较的对象的类型。</typeparam>
    </member>
    <member name="M:System.IEquatable`1.Equals(`0)">
      <summary>指示当前对象是否等于同一类型的另一个对象。</summary>
      <param name="other">一个与此对象进行比较的对象。</param>
      <returns>如果当前对象等于 <paramref name="other" /> 参数，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.IFormatProvider">
      <summary>提供用于检索控制格式化的对象的机制。</summary>
    </member>
    <member name="M:System.IFormatProvider.GetFormat(System.Type)">
      <summary>返回一个对象，该对象为指定类型提供格式设置服务。</summary>
      <param name="formatType">一个对象，该对象指定要返回的格式对象的类型。</param>
      <returns>如果 <see cref="T:System.IFormatProvider" /> 实现能够提供该类型的对象，则为 <paramref name="formatType" /> 所指定对象的实例；否则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.IFormattable">
      <summary>提供一种功能，用以将对象的值格式化为字符串表示形式。</summary>
    </member>
    <member name="M:System.IFormattable.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式格式化当前实例的值。</summary>
      <param name="format">要使用的格式。  

或 - 
null 引用（Visual Basic 中为 <see langword="Nothing" />）将使用为 <see cref="T:System.IFormattable" /> 实现的类型所定义的默认格式。</param>
      <param name="formatProvider">要用于设置值格式的提供程序。  

或 - 
null 引用（Visual Basic 中为 <see langword="Nothing" />）将从操作系统的当前区域设置中获取数字格式信息。</param>
      <returns>使用指定格式的当前实例的值。</returns>
    </member>
    <member name="T:System.Index">
      <summary>表示一种可用于从开头或从结尾索引集合的类型。</summary>
    </member>
    <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
      <summary>通过指定索引位置和指示从集合开头还是从结尾开始索引的值，初始化新的 <see cref="T:System.Index" />。</summary>
      <param name="value">索引值。 它必须大于或等于零。</param>
      <param name="fromEnd">一个布尔值，表示索引是从集合开头 (<see langword="false" />) 还是集合末尾 (<see langword="true" />) 开始。</param>
    </member>
    <member name="P:System.Index.End">
      <summary>获取指向最后一个元素以外的 <see cref="T:System.Index" />。</summary>
      <returns>
        <see cref="T:System.Index" />指向最后一个元素之外的。</returns>
    </member>
    <member name="M:System.Index.Equals(System.Index)">
      <summary>返回一个值，该值指示当前对象是否与另一个 <see cref="T:System.Index" /> 对象相等。</summary>
      <param name="other">与该实例进行比较的对象。</param>
      <returns>如果当前 Index 对象与 <paramref name="other" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Index.Equals(System.Object)">
      <summary>指示当前 Index 对象是否与指定的对象相等。</summary>
      <param name="value">与此实例进行比较的对象。</param>
      <returns>如果 <paramref name="value" /> 为 <see cref="T:System.Index" /> 类型，并且等于当前的实例，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Index.FromEnd(System.Int32)">
      <summary>在指定索引位置处，从集合末尾创建 <see cref="T:System.Index" />。</summary>
      <param name="value">集合末尾的索引值。</param>
      <returns>索引值。</returns>
    </member>
    <member name="M:System.Index.FromStart(System.Int32)">
      <summary>在集合开头处，从指定索引中创建 <see cref="T:System.Index" />。</summary>
      <param name="value">集合开头的索引位置。</param>
      <returns>索引值。</returns>
    </member>
    <member name="M:System.Index.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>哈希代码。</returns>
    </member>
    <member name="M:System.Index.GetOffset(System.Int32)">
      <summary>使用给定的集合长度从头开始计算偏移量。</summary>
      <param name="length">将与索引一起使用的集合的长度。 必须是正值。</param>
      <returns>偏移量。</returns>
    </member>
    <member name="P:System.Index.IsFromEnd">
      <summary>获取一个值，该值指示从开头还是结尾进行索引。</summary>
      <returns>
        <see langword="true" />如果索引来自末尾, 则为; 否则为。否则为&lt;see. langword="false"&gt;&lt;/see.&gt;。</returns>
    </member>
    <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
      <summary>将整数转换为索引。</summary>
      <param name="value">要转换的整数。</param>
      <returns>一个表示整数的索引。</returns>
    </member>
    <member name="P:System.Index.Start">
      <summary>获取一个 <see cref="T:System.Index" />，它指向集合中的第一个元素。</summary>
      <returns>指向集合中第一个元素的实例。</returns>
    </member>
    <member name="M:System.Index.ToString">
      <summary>返回当前 <see cref="T:System.Index" /> 实例的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.Index" /> 的字符串表示形式。</returns>
    </member>
    <member name="P:System.Index.Value">
      <summary>获取索引值。</summary>
      <returns>索引值。</returns>
    </member>
    <member name="T:System.IndexOutOfRangeException">
      <summary>试图访问索引超出界限的数组或集合的元素时引发的异常。</summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor">
      <summary>初始化 <see cref="T:System.IndexOutOfRangeException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.IndexOutOfRangeException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IndexOutOfRangeException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="T:System.InsufficientExecutionStackException">
      <summary>执行堆栈不足，大多数方法无法执行时所引发的异常。</summary>
    </member>
    <member name="M:System.InsufficientExecutionStackException.#ctor">
      <summary>初始化 <see cref="T:System.InsufficientExecutionStackException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.InsufficientExecutionStackException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.InsufficientExecutionStackException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.InsufficientExecutionStackException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.InsufficientExecutionStackException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <c>inner</c> 参数不为 <see langword="null" />，则当前异常会在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.InsufficientMemoryException">
      <summary>当检测到没有足够的可用内存时引发的异常。 此类不能被继承。</summary>
    </member>
    <member name="M:System.InsufficientMemoryException.#ctor">
      <summary>使用由系统提供的用于描述错误的消息初始化 <see cref="T:System.InsufficientMemoryException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.InsufficientMemoryException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.InsufficientMemoryException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.InsufficientMemoryException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.InsufficientMemoryException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Int16">
      <summary>表示 16 位有符号整数。</summary>
    </member>
    <member name="M:System.Int16.CompareTo(System.Int16)">
      <summary>将此实例与指定的 16 位有符号整数进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定的 16 位有符号整数的值。</summary>
      <param name="value">要比较的整数。</param>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。  
  返回值 
  说明 
  小于零 
  此实例小于 <paramref name="value" />。  

  零 
  此实例等于 <paramref name="value" />。  

  大于零 
  此实例大于 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Int16.CompareTo(System.Object)">
      <summary>将此实例与指定对象进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于此对象的值。</summary>
      <param name="value">要比较的对象，或为 <see langword="null" />。</param>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。  
  返回值 
  说明 
  小于零 
  此实例小于 <paramref name="value" />。  

  零 
  此实例等于 <paramref name="value" />。  

  大于零 
  此实例大于 <paramref name="value" />。  

- 或 - 
 <paramref name="value" /> 为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Int16" />。</exception>
    </member>
    <member name="M:System.Int16.Equals(System.Int16)">
      <summary>返回一个值，该值指示此实例是否等于指定的 <see cref="T:System.Int16" /> 值。</summary>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.Int16" /> 值。</param>
      <returns>如果 <see langword="true" /> 的值与此实例相同，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Int16.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="obj">要与此实例进行比较的对象。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.Int16" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Int16.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Int16.GetTypeCode">
      <summary>返回值类型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.Int16" />。</summary>
      <returns>枚举常数 <see cref="F:System.TypeCode.Int16" />。</returns>
    </member>
    <member name="F:System.Int16.MaxValue">
      <summary>表示 <see cref="T:System.Int16" /> 的最大可能值。 此字段为常数。</summary>
    </member>
    <member name="F:System.Int16.MinValue">
      <summary>表示 <see cref="T:System.Int16" /> 的最小可能值。 此字段为常数。</summary>
    </member>
    <member name="M:System.Int16.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.Int16.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 16 位有符号整数。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <returns>与 <paramref name="s" /> 中包含的数字等效的 16 位有符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 16 位有符号整数。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 16 位带符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
或 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。  

或 - 
<paramref name="s" /> 包含非零的小数位。</exception>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 16 位有符号整数。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" />，它提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 16 位带符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  

或 - 
<paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。  
或 
 <paramref name="s" /> 包含非零的小数位。</exception>
    </member>
    <member name="M:System.Int16.Parse(System.String,System.IFormatProvider)">
      <summary>将指定的区域性特定格式的数字的字符串表示形式转换为它的等效 16 位有符号整数。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" />，它提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 16 位带符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>如果当前实例的值不为零，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Byte" />。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Decimal" />。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，未更改。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.SByte" />。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Single" />。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">此 <see cref="T:System.Int16" /> 值要转换为的类型。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 实现，提供有关返回值格式的信息。</param>
      <returns>当前实例的值，已转换为 <paramref name="type" />。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，未更改。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt32" />。</returns>
    </member>
    <member name="M:System.Int16.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt64" />。</returns>
    </member>
    <member name="M:System.Int16.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由减号（如果值为负）和范围从 0 到 9 且没有前导零的数字序列组成。</returns>
    </member>
    <member name="M:System.Int16.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" />，它提供区域性特定的格式设置信息。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</returns>
    </member>
    <member name="M:System.Int16.ToString(System.String)">
      <summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="format">一个数值格式字符串。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
    </member>
    <member name="M:System.Int16.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式设置信息，将此实例的数值转换为其等效字符串表示形式。</summary>
      <param name="format">一个数值格式字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
    </member>
    <member name="M:System.Int16.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.Int16.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.Int16.TryParse(System.ReadOnlySpan{System.Char},System.Int16@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int16@)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 16 位有符号整数。 一个指示转换是否成功的返回值。</summary>
      <param name="s">包含要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含数字等效的 16 位有符号整数值；如果转换失败，则为零。 如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、格式不符合 <paramref name="style" />，或者表示的数字小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" />，则转换失败。 此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
或 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
    </member>
    <member name="M:System.Int16.TryParse(System.String,System.Int16@)">
      <summary>将数字的字符串表示形式转换为它的等效 16 位有符号整数。 一个指示转换是否成功的返回值。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含数字等效的 16 位有符号整数值；如果转换失败，则为零。 如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、格式不正确，或者表示的数字小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" />，则转换失败。 此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Int32">
      <summary>表示 32 位带符号整数。</summary>
    </member>
    <member name="M:System.Int32.CompareTo(System.Int32)">
      <summary>将此实例与指定的 32 位有符号整数进行比较并返回对其相对值的指示。</summary>
      <param name="value">要比较的整数。</param>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。  
  返回值 
  说明 
  小于零 
  此实例小于 <paramref name="value" />。  

  零 
  此实例等于 <paramref name="value" />。  

  大于零 
  此实例大于 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Int32.CompareTo(System.Object)">
      <summary>将此实例与指定对象进行比较并返回一个对二者的相对值的指示。</summary>
      <param name="value">要比较的对象，或为 <see langword="null" />。</param>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。  
  返回值 
  说明 
  小于零 
  此实例小于 <paramref name="value" />。  

  零 
  此实例等于 <paramref name="value" />。  

  大于零 
  此实例大于 <paramref name="value" />。  

或 
 <paramref name="value" /> 为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Int32" />。</exception>
    </member>
    <member name="M:System.Int32.Equals(System.Int32)">
      <summary>返回一个值，该值指示此实例是否等于指定的 <see cref="T:System.Int32" /> 值。</summary>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.Int32" /> 值。</param>
      <returns>如果 <see langword="true" /> 的值与此实例相同，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Int32.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="obj">与此实例进行比较的对象。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.Int32" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Int32.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Int32.GetTypeCode">
      <summary>返回值类型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.Int32" />。</summary>
      <returns>枚举常数 <see cref="F:System.TypeCode.Int32" />。</returns>
    </member>
    <member name="F:System.Int32.MaxValue">
      <summary>表示 <see cref="T:System.Int32" /> 的最大可能值。 此字段为常数。</summary>
    </member>
    <member name="F:System.Int32.MinValue">
      <summary>表示 <see cref="T:System.Int32" /> 的最小可能值。 此字段为常数。</summary>
    </member>
    <member name="M:System.Int32.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.Int32.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 32 位有符号整数。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <returns>与 <paramref name="s" /> 中包含的数字等效的 32 位有符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 32 位有符号整数。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 32 位带符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
或 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。  
或 
 <paramref name="s" /> 包含非零的小数位。</exception>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 32 位有符号整数。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，用于提供有关 <paramref name="s" /> 格式的区域性特定信息。</param>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 32 位带符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  

或 - 
<paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。  

或 - 
<paramref name="s" /> 包含非零的小数位。</exception>
    </member>
    <member name="M:System.Int32.Parse(System.String,System.IFormatProvider)">
      <summary>将指定的区域性特定格式的数字的字符串表示形式转换为它的等效 32 位有符号整数。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 32 位带符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>如果当前实例的值不为零，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Byte" />。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Decimal" />。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int16" />。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，未更改。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.SByte" />。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Single" />。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">此 <see cref="T:System.Int32" /> 值要转换为的类型。</param>
      <param name="provider">一个对象，用于提供有关返回值格式的信息。</param>
      <returns>当前实例的值，已转换为 <paramref name="type" />。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt16" />。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt32" />。</returns>
    </member>
    <member name="M:System.Int32.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt64" />。</returns>
    </member>
    <member name="M:System.Int32.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由减号（如果值为负）和没有前导零的从 0 到 9 的数字序列组成。</returns>
    </member>
    <member name="M:System.Int32.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</returns>
    </member>
    <member name="M:System.Int32.ToString(System.String)">
      <summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="format">标准或自定义的数值格式字符串。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效或不受支持。</exception>
    </member>
    <member name="M:System.Int32.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="format">标准或自定义的数值格式字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效或不受支持。</exception>
    </member>
    <member name="M:System.Int32.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.Int32.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.Int32.TryParse(System.ReadOnlySpan{System.Char},System.Int32@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int32@)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 32 位有符号整数。 一个指示转换是否成功的返回值。</summary>
      <param name="s">包含要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含的数字等效的 32 位无符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、格式不符合 <paramref name="style" />，或者表示的数字小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" />，则转换失败。 此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  

或 - 
<paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
    </member>
    <member name="M:System.Int32.TryParse(System.String,System.Int32@)">
      <summary>将数字的字符串表示形式转换为它的等效 32 位有符号整数。 一个指示转换是否成功的返回值。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含的数字等效的 32 位无符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、格式不正确，或者表示的数字小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" />，则转换失败。 此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Int64">
      <summary>表示 64 位有符号整数。</summary>
    </member>
    <member name="M:System.Int64.CompareTo(System.Int64)">
      <summary>将此实例与指定的 64 位有符号整数进行比较并返回对其相对值的指示。</summary>
      <param name="value">要比较的整数。</param>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。  
  返回值 
  说明 
  小于零 
  此实例小于 <paramref name="value" />。  

  零 
  此实例等于 <paramref name="value" />。  

  大于零 
  此实例大于 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Int64.CompareTo(System.Object)">
      <summary>将此实例与指定对象进行比较并返回一个对二者的相对值的指示。</summary>
      <param name="value">要比较的对象，或为 <see langword="null" />。</param>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。  
  返回值 
  说明 
  小于零 
  此实例小于 <paramref name="value" />。  

  零 
  此实例等于 <paramref name="value" />。  

  大于零 
  此实例大于 <paramref name="value" />。  

或 
 <paramref name="value" /> 为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Int64" />。</exception>
    </member>
    <member name="M:System.Int64.Equals(System.Int64)">
      <summary>返回一个值，该值指示此实例是否等于指定的 <see cref="T:System.Int64" /> 值。</summary>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.Int64" /> 值。</param>
      <returns>如果 <see langword="true" /> 的值与此实例相同，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Int64.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="obj">与此实例进行比较的对象。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.Int64" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Int64.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Int64.GetTypeCode">
      <summary>返回值类型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.Int64" />。</summary>
      <returns>枚举常数 <see cref="F:System.TypeCode.Int64" />。</returns>
    </member>
    <member name="F:System.Int64.MaxValue">
      <summary>表示 <see langword="Int64" /> 的最大可能值。 此字段为常数。</summary>
    </member>
    <member name="F:System.Int64.MinValue">
      <summary>表示 <see langword="Int64" /> 的最小可能值。 此字段为常数。</summary>
    </member>
    <member name="M:System.Int64.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.Int64.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 64 位有符号整数。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <returns>与 <paramref name="s" /> 中包含的数字等效的 64 位有符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 64 位有符号整数。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">
        <see cref="T:System.Globalization.NumberStyles" /> 值的按位组合，指示 <paramref name="s" /> 的允许格式。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 64 位带符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
或 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。  
或 
 <paramref name="style" /> 支持小数位，但 <paramref name="s" /> 包括非零的小数位。</exception>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 64 位有符号整数。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" />，它提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 64 位带符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  

或 - 
<paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。  
或 
 <paramref name="style" /> 支持小数位，但 <paramref name="s" /> 包括非零的小数位。</exception>
    </member>
    <member name="M:System.Int64.Parse(System.String,System.IFormatProvider)">
      <summary>将指定的区域性特定格式的数字的字符串表示形式转换为它的等效 64 位有符号整数。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 64 位带符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>如果当前实例的值不为零，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Byte" />。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Decimal" />。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int16" />。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，未更改。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.SByte" />。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Single" />。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">此 <see cref="T:System.Int64" /> 值要转换为的类型。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 实现，提供有关返回值的格式的信息。</param>
      <returns>当前实例的值，已转换为 <paramref name="type" />。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt16" />。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt32" />。</returns>
    </member>
    <member name="M:System.Int64.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt64" />。</returns>
    </member>
    <member name="M:System.Int64.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由减号（如果值为负）和范围从 0 到 9 且没有前导零的数字序列组成。</returns>
    </member>
    <member name="M:System.Int64.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" />，它提供区域性特定的格式设置信息。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</returns>
    </member>
    <member name="M:System.Int64.ToString(System.String)">
      <summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="format">一个数值格式字符串。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效或不受支持。</exception>
    </member>
    <member name="M:System.Int64.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="format">一个数值格式字符串。</param>
      <param name="provider">一个对象，它提供有关此实例的区域性特定格式设置信息。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效或不受支持。</exception>
    </member>
    <member name="M:System.Int64.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.Int64.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.Int64.TryParse(System.ReadOnlySpan{System.Char},System.Int64@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Int64@)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 64 位有符号整数。 一个指示转换是否成功的返回值。</summary>
      <param name="s">包含要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含的数字等效的 64 位无符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、格式不符合 <paramref name="style" />，或者表示的数字小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" />，则转换失败。 此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
或 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
    </member>
    <member name="M:System.Int64.TryParse(System.String,System.Int64@)">
      <summary>将数字的字符串表示形式转换为它的等效 64 位有符号整数。 一个指示转换是否成功的返回值。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含的数字等效的 64 位无符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、格式不正确，或者表示的数字小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" />，则转换失败。 此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.IntPtr">
      <summary>用于表示指针或句柄的平台特定类型。</summary>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int32)">
      <summary>使用指定的 32 位指针或句柄初始化 <see cref="T:System.IntPtr" /> 的新实例。</summary>
      <param name="value">32 位有符号整数中包含的指针或句柄。</param>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Int64)">
      <summary>使用指定的 64 位指针初始化 <see cref="T:System.IntPtr" /> 的新实例。</summary>
      <param name="value">64 位有符号整数中包含的指针或句柄。</param>
      <exception cref="T:System.OverflowException">在 32 位的平台上，<paramref name="value" /> 太大或太小，无法表示为 <see cref="T:System.IntPtr" />。</exception>
    </member>
    <member name="M:System.IntPtr.#ctor(System.Void*)">
      <summary>使用指定的指向未指定类型的指针初始化 <see cref="T:System.IntPtr" /> 的新实例。</summary>
      <param name="value">指向未指定类型的指针。</param>
    </member>
    <member name="M:System.IntPtr.Add(System.IntPtr,System.Int32)">
      <summary>为指针值添加偏移量。</summary>
      <param name="pointer">要为其增加偏移量的指针。</param>
      <param name="offset">要增加的偏移量。</param>
      <returns>反映为 <paramref name="offset" /> 增加 <paramref name="pointer" /> 的新指针。</returns>
    </member>
    <member name="M:System.IntPtr.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="obj">要与此示例比较的对象，或 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.IntPtr" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IntPtr.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)">
      <summary>为指针值添加偏移量。</summary>
      <param name="pointer">要为其增加偏移量的指针。</param>
      <param name="offset">要增加的偏移量。</param>
      <returns>反映为 <paramref name="offset" /> 增加 <paramref name="pointer" /> 的新指针。</returns>
    </member>
    <member name="M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)">
      <summary>确定 <see cref="T:System.IntPtr" /> 的两个指定的实例是否相等。</summary>
      <param name="value1">要比较的第一个指针或句柄。</param>
      <param name="value2">要比较的第二个指针或句柄。</param>
      <returns>如果 <paramref name="value1" /> 等于 <paramref name="value2" />，则为 <see langword="true" />否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr">
      <summary>将 32 位有符号整数的值转换为 <see cref="T:System.IntPtr" />。</summary>
      <param name="value">32 位带符号整数。</param>
      <returns>初始化为 <see cref="T:System.IntPtr" /> 的 <paramref name="value" /> 新实例。</returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr">
      <summary>将 64 位有符号整数值转换为 <see cref="T:System.IntPtr" />。</summary>
      <param name="value">64 位带符号整数。</param>
      <returns>初始化为 <see cref="T:System.IntPtr" /> 的 <paramref name="value" /> 新实例。</returns>
      <exception cref="T:System.OverflowException">在 32 位的平台上，<paramref name="value" /> 太大，无法表示为一个 <see cref="T:System.IntPtr" />。</exception>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32">
      <summary>将指定的 <see cref="T:System.IntPtr" /> 的值转换为 32 位有符号整数。</summary>
      <param name="value">要转换的指针或句柄。</param>
      <returns>
        <paramref name="value" /> 的内容。</returns>
      <exception cref="T:System.OverflowException">在 64 位平台上，<paramref name="value" /> 的值太大，无法表示为一个 32 位有符号整数。</exception>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64">
      <summary>将指定的 <see cref="T:System.IntPtr" /> 的值转换为 64 位有符号整数。</summary>
      <param name="value">要转换的指针或句柄。</param>
      <returns>
        <paramref name="value" /> 的内容。</returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*">
      <summary>将指定的 <see cref="T:System.IntPtr" /> 的值转换为指向未指定类型的指针。  
此 API 不兼容 CLS。</summary>
      <param name="value">要转换的指针或句柄。</param>
      <returns>
        <paramref name="value" /> 的内容。</returns>
    </member>
    <member name="M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr">
      <summary>将指向未指定类型的指定指针转换为 <see cref="T:System.IntPtr" />。  
此 API 不兼容 CLS。</summary>
      <param name="value">指向未指定类型的指针。</param>
      <returns>初始化为 <see cref="T:System.IntPtr" /> 的 <paramref name="value" /> 新实例。</returns>
    </member>
    <member name="M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)">
      <summary>确定 <see cref="T:System.IntPtr" /> 的两个指定的实例是否不等。</summary>
      <param name="value1">要比较的第一个指针或句柄。</param>
      <param name="value2">要比较的第二个指针或句柄。</param>
      <returns>如果 <paramref name="value1" /> 不等于 <paramref name="value2" />，则为 <see langword="true" />否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)">
      <summary>从指针值中减去偏移量。</summary>
      <param name="pointer">要从中减去偏移量的指针。</param>
      <param name="offset">要减去的偏移量。</param>
      <returns>反映从 <paramref name="offset" /> 中减去 <paramref name="pointer" /> 的新指针。</returns>
    </member>
    <member name="P:System.IntPtr.Size">
      <summary>获取此实例的大小。</summary>
      <returns>此进程中的指针或句柄的大小（以字节为单位）。 此属性的值在 32 位进程中为 4，在 64 位进程中为 8。 通过 C# 和 Visual Basic 编译器编译代码时，可以通过设置 <see langword="/platform" /> 开关定义该进程类型。</returns>
    </member>
    <member name="M:System.IntPtr.Subtract(System.IntPtr,System.Int32)">
      <summary>从指针值中减去偏移量。</summary>
      <param name="pointer">要从中减去偏移量的指针。</param>
      <param name="offset">要减去的偏移量。</param>
      <returns>反映从 <paramref name="offset" /> 中减去 <paramref name="pointer" /> 的新指针。</returns>
    </member>
    <member name="M:System.IntPtr.System#IEquatable{System#IntPtr}#Equals(System.IntPtr)">
      <param name="other" />
    </member>
    <member name="M:System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化当前的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象所需的所有数据填充 <see cref="T:System.IntPtr" /> 对象。</summary>
      <param name="info">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">此序列化的目标。 （未使用此参数；指定 <see langword="null" />。）</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IntPtr.ToInt32">
      <summary>将此实例的值转换为 32 位有符号整数。</summary>
      <returns>与此实例的值相等的 32 位有符号整数。</returns>
      <exception cref="T:System.OverflowException">在 64 位平台上，此实例的值太大或太小，无法表示为一个 32 位有符号的整数。</exception>
    </member>
    <member name="M:System.IntPtr.ToInt64">
      <summary>将此实例的值转换为 64 位有符号整数。</summary>
      <returns>与此实例的值相等的 64 位有符号整数。</returns>
    </member>
    <member name="M:System.IntPtr.ToPointer">
      <summary>将此实例的值转换为指向未指定类型的指针。</summary>
      <returns>指向 <see cref="T:System.Void" /> 的指针，即是说，该指针所指向的内存包含有未指定类型的数据。</returns>
    </member>
    <member name="M:System.IntPtr.ToString">
      <summary>将当前 <see cref="T:System.IntPtr" /> 对象的数值转换为其等效字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式。</returns>
    </member>
    <member name="M:System.IntPtr.ToString(System.String)">
      <summary>将当前 <see cref="T:System.IntPtr" /> 对象的数值转换为其等效字符串表示形式。</summary>
      <param name="format">控制当前 <see cref="T:System.IntPtr" /> 对象转换方式的格式规范。</param>
      <returns>当前 <see cref="T:System.IntPtr" /> 对象的值的字符串表示形式。</returns>
    </member>
    <member name="F:System.IntPtr.Zero">
      <summary>表示已初始化为零的指针或句柄的只读字段。</summary>
    </member>
    <member name="T:System.InvalidCastException">
      <summary>因无效类型转换或显式转换引发的异常。</summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor">
      <summary>初始化 <see cref="T:System.InvalidCastException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.InvalidCastException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.InvalidCastException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.InvalidCastException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="M:System.InvalidCastException.#ctor(System.String,System.Int32)">
      <summary>使用指定的消息和错误代码初始化 <see cref="T:System.InvalidCastException" /> 类的新实例。</summary>
      <param name="message">指示所发生异常的原因的消息。</param>
      <param name="errorCode">与异常关联的错误代码 (HRESULT) 值。</param>
    </member>
    <member name="T:System.InvalidOperationException">
      <summary>当方法调用对于对象的当前状态无效时引发的异常。</summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor">
      <summary>初始化 <see cref="T:System.InvalidOperationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.InvalidOperationException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.InvalidOperationException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.InvalidOperationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="T:System.InvalidProgramException">
      <summary>当程序包含无效的 Microsoft 中间语言 (MSIL) 或元数据时引发的异常。 这通常表示生成程序的编译器中有 bug。</summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.InvalidProgramException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.InvalidProgramException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.InvalidProgramException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.InvalidProgramException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="T:System.InvalidTimeZoneException">
      <summary>时区信息无效时引发的异常。</summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor">
      <summary>使用由系统提供的消息初始化 <see cref="T:System.InvalidTimeZoneException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.InvalidTimeZoneException" /> 类的新实例。</summary>
      <param name="info">包含序列化数据的对象。</param>
      <param name="context">包含序列化数据的流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为 <see langword="null" />。  
或 
<paramref name="context" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String)">
      <summary>使用指定的消息字符串初始化 <see cref="T:System.InvalidTimeZoneException" /> 类的新实例。</summary>
      <param name="message">描述异常的字符串。</param>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.InvalidTimeZoneException" /> 类的新实例。</summary>
      <param name="message">描述异常的字符串。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="T:System.IO.DirectoryNotFoundException">
      <summary>当找不到文件或目录的一部分时所引发的异常。</summary>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor">
      <summary>初始化 <see cref="T:System.IO.DirectoryNotFoundException" /> 类的新实例，使其消息字符串设置为系统提供的消息，其 HRESULT 设置为 COR_E_DIRECTORYNOTFOUND。</summary>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用指定的序列化和上下文信息初始化 <see cref="T:System.IO.DirectoryNotFoundException" /> 类的新实例。</summary>
      <param name="info">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.IO.DirectoryNotFoundException" /> 类的新实例，使其消息字符串设置为 <paramref name="message" />，其 HRESULT 设置为 COR_E_DIRECTORYNOTFOUND。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IO.DirectoryNotFoundException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.IO.FileAccess">
      <summary>定义文件的读取、写入或读/写访问权限的常量。</summary>
    </member>
    <member name="F:System.IO.FileAccess.Read">
      <summary>对文件的读访问。 可从文件中读取数据。 与 <see langword="Write" /> 组合以进行读写访问。</summary>
    </member>
    <member name="F:System.IO.FileAccess.ReadWrite">
      <summary>对文件的读写访问权限。 可从文件读取数据和将数据写入文件。</summary>
    </member>
    <member name="F:System.IO.FileAccess.Write">
      <summary>文件的写访问。 可将数据写入文件。 与 <see langword="Read" /> 组合以进行读写访问。</summary>
    </member>
    <member name="T:System.IO.FileAttributes">
      <summary>提供文件和目录的属性。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Archive">
      <summary>此文件标记为包含在增量备份操作中。 每当修改文件时，Windows 会设置该属性，并且在增量备份期间处理文件时，备份软件应进行清理该属性。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Compressed">
      <summary>此文件是压缩文件。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Device">
      <summary>留待将来使用。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Directory">
      <summary>此文件是一个目录。 <see langword="Directory" /> 在 Windows、Linux 和 macOS 上受支持。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Encrypted">
      <summary>此文件或目录已加密。 对于文件来说，表示文件中的所有数据都是加密的。 对于目录来说，表示新创建的文件和目录在默认情况下是加密的。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Hidden">
      <summary>文件是隐藏的，因此没有包括在普通的目录列表中。 <see langword="Hidden" /> 在 Windows、Linux 和 macOS 上受支持。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.IntegrityStream">
      <summary>文件或目录包括完整性支持数据。 在此值适用于文件时，文件中的所有数据流具有完整性支持。 此值将应用于一个目录时，所有新文件和子目录在该目录中和默认情况下应包括完整性支持。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Normal">
      <summary>该文件是没有特殊属性的标准文件。 仅当其单独使用时，此特性才有效。 <see langword="Normal" /> 在 Windows、Linux 和 macOS 上受支持。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.NoScrubData">
      <summary>文件或目录从完整性扫描数据中排除。 此值将应用于一个目录时，所有新文件和子目录在该目录中和默认情况下应不包括数据完整性。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.NotContentIndexed">
      <summary>将不会通过操作系统的内容索引服务来索引此文件。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Offline">
      <summary>此文件处于脱机状态， 文件数据不能立即供使用。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.ReadOnly">
      <summary>此文件是只读的。 <see langword="ReadOnly" /> 在 Windows、Linux 和 macOS 上受支持。 在 Linux 和 macOS 上，更改 <see langword="ReadOnly" /> 标记是权限操作。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.ReparsePoint">
      <summary>文件包含一个重新分析点，它是一个与文件或目录关联的用户定义的数据块。 <see langword="ReparsePoint" /> 在 Windows、Linux 和 macOS 上受支持。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.SparseFile">
      <summary>此文件是稀疏文件。 稀疏文件一般是数据通常为零的大文件。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.System">
      <summary>此文件是系统文件。 即，该文件是操作系统的一部分或者由操作系统以独占方式使用。</summary>
    </member>
    <member name="F:System.IO.FileAttributes.Temporary">
      <summary>文件是临时文件。 临时文件包含当执行应用程序时需要的，但当应用程序完成后不需要的数据。 文件系统尝试将所有数据保存在内存中，而不是将数据刷新回大容量存储，以便可以快速访问。 当临时文件不再需要时，应用程序应立即删除它。</summary>
    </member>
    <member name="T:System.IO.FileLoadException">
      <summary>当找到托管程序集却不能加载它时引发的异常。</summary>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor">
      <summary>初始化 <see cref="T:System.IO.FileLoadException" /> 类的新实例，将新实例的 <see cref="P:System.Exception.Message" /> 属性设置为描述错误的系统提供的消息（如“无法加载指定文件”）。 此消息将当前系统区域性考虑在内。</summary>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.IO.FileLoadException" /> 类的新实例。</summary>
      <param name="info">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.IO.FileLoadException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IO.FileLoadException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String,System.String)">
      <summary>使用指定错误信息和不能加载的文件的名称来初始化 <see cref="T:System.IO.FileLoadException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="fileName">一个 <see cref="T:System.String" />，它包含未加载的文件的名称。</param>
    </member>
    <member name="M:System.IO.FileLoadException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定的错误信息、不能加载的文件的名称和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IO.FileLoadException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="fileName">一个 <see cref="T:System.String" />，它包含未加载的文件的名称。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="P:System.IO.FileLoadException.FileName">
      <summary>获取导致该异常的文件的名称。</summary>
      <returns>一个 <see cref="T:System.String" />，包含具有无效图像的文件的名称；或者，如果没有将文件名传递给当前实例的构造函数，则为空引用。</returns>
    </member>
    <member name="P:System.IO.FileLoadException.FusionLog">
      <summary>获取描述程序集加载失败的原因的日志文件。</summary>
      <returns>一个 String，包含由程序集缓存报告的错误。</returns>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.IO.FileLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用文件名和其他异常信息来设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="P:System.IO.FileLoadException.Message">
      <summary>获取错误消息和引发此异常的文件的名称。</summary>
      <returns>包含错误消息和引发此异常的文件名称的字符串。</returns>
    </member>
    <member name="M:System.IO.FileLoadException.ToString">
      <summary>返回当前异常的完全限定名，还可能返回错误信息、内部异常的名称和堆栈跟踪。</summary>
      <returns>一个字符串，它包含此异常的完全限定名，还可能包含错误信息、内部异常的名称和堆栈跟踪（取决于所使用的 <see cref="T:System.IO.FileLoadException" /> 构造函数）。</returns>
    </member>
    <member name="T:System.IO.FileMode">
      <summary>指定操作系统打开文件的方式。</summary>
    </member>
    <member name="F:System.IO.FileMode.Append">
      <summary>若存在文件，则打开该文件并查找到文件尾，或者创建一个新文件。 这需要 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" /> 权限。 <see langword="FileMode.Append" /> 只能与 <see langword="FileAccess.Write" /> 一起使用。 试图查找文件尾之前的位置时会引发 <see cref="T:System.IO.IOException" /> 异常，并且任何试图读取的操作都会失败并引发 <see cref="T:System.NotSupportedException" /> 异常。</summary>
    </member>
    <member name="F:System.IO.FileMode.Create">
      <summary>指定操作系统应创建新文件。 如果文件已存在，它将被覆盖。 这需要 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> 权限。 <see langword="FileMode.Create" /> 等效于这样的请求：如果文件不存在，则使用 <see cref="F:System.IO.FileMode.CreateNew" />；否则使用 <see cref="F:System.IO.FileMode.Truncate" />。 如果该文件已存在但为隐藏文件，则将引发 <see cref="T:System.UnauthorizedAccessException" />异常。</summary>
    </member>
    <member name="F:System.IO.FileMode.CreateNew">
      <summary>指定操作系统应创建新文件。 这需要 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> 权限。 如果文件已存在，则将引发 <see cref="T:System.IO.IOException" />异常。</summary>
    </member>
    <member name="F:System.IO.FileMode.Open">
      <summary>指定操作系统应打开现有文件。 打开文件的能力取决于 <see cref="T:System.IO.FileAccess" /> 枚举所指定的值。 如果文件不存在，引发一个 <see cref="T:System.IO.FileNotFoundException" /> 异常。</summary>
    </member>
    <member name="F:System.IO.FileMode.OpenOrCreate">
      <summary>指定操作系统应打开文件（如果文件存在）；否则，应创建新文件。 如果用 <see langword="FileAccess.Read" /> 打开文件，则需要 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />权限。 如果文件访问为 <see langword="FileAccess.Write" />，则需要 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />权限。 如果用 <see langword="FileAccess.ReadWrite" /> 打开文件，则同时需要 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /> 和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />权限。</summary>
    </member>
    <member name="F:System.IO.FileMode.Truncate">
      <summary>指定操作系统应打开现有文件。 该文件被打开时，将被截断为零字节大小。 这需要 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> 权限。 尝试从使用 <see langword="FileMode.Truncate" /> 打开的文件中进行读取将导致 <see cref="T:System.ArgumentException" /> 异常。</summary>
    </member>
    <member name="T:System.IO.FileNotFoundException">
      <summary>尝试访问磁盘上不存在的文件失败时引发的异常。</summary>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor">
      <summary>初始化 <see cref="T:System.IO.FileNotFoundException" /> 类的新实例，将其消息字符串设置为系统提供的消息。</summary>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用指定的序列化和上下文信息初始化 <see cref="T:System.IO.FileNotFoundException" /> 类的新实例。</summary>
      <param name="info">保存有关所引发异常的序列化对象数据的对象。</param>
      <param name="context">一个包含有关源或目标的上下文信息的对象。</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.IO.FileNotFoundException" /> 类的新实例。</summary>
      <param name="message">错误说明。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IO.FileNotFoundException" /> 类的新实例。</summary>
      <param name="message">错误说明。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.String)">
      <summary>使用指定错误信息和找不到的文件名来初始化 <see cref="T:System.IO.FileNotFoundException" /> 类的新实例。</summary>
      <param name="message">错误说明，或 <see langword="null" />，以结合使用系统提供的消息和给定 <paramref name="fileName" />。 <paramref name="message" /> 的内容应易于用户理解。 此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="fileName">包含无效图像的文件的全名。</param>
    </member>
    <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.String,System.Exception)">
      <summary>使用指定的错误信息、找不到的文件名和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IO.FileNotFoundException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="fileName">包含无效图像的文件的全名。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="P:System.IO.FileNotFoundException.FileName">
      <summary>获取无法找到的文件的名称。</summary>
      <returns>文件的名称，如果没有将文件名传递给此实例的构造函数，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.IO.FileNotFoundException.FusionLog">
      <summary>获取日志文件，该文件描述加载程序集失败的原因。</summary>
      <returns>由程序集缓存报告的错误。</returns>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.IO.FileNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>设置带有文件名和附加异常信息的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">保存有关所引发异常的序列化对象数据的对象。</param>
      <param name="context">包含有关源或目标的上下文信息的对象。</param>
    </member>
    <member name="P:System.IO.FileNotFoundException.Message">
      <summary>获取解释异常原因的错误消息。</summary>
      <returns>错误消息。</returns>
    </member>
    <member name="M:System.IO.FileNotFoundException.ToString">
      <summary>返回该异常的完全限定名，还可能返回错误消息、内部异常的名称和堆栈跟踪。</summary>
      <returns>此异常的完全限定名，还可能包含错误消息、内部异常的名称和堆栈跟踪。</returns>
    </member>
    <member name="T:System.IO.FileOptions">
      <summary>表示用于创建 <see cref="T:System.IO.FileStream" /> 对象的高级选项。</summary>
    </member>
    <member name="F:System.IO.FileOptions.Asynchronous">
      <summary>指示文件可用于异步读取和写入。</summary>
    </member>
    <member name="F:System.IO.FileOptions.DeleteOnClose">
      <summary>指示当不再使用某个文件时，自动删除该文件。</summary>
    </member>
    <member name="F:System.IO.FileOptions.Encrypted">
      <summary>指示文件是加密的，只能通过用于加密的同一用户帐户来解密。</summary>
    </member>
    <member name="F:System.IO.FileOptions.None">
      <summary>指示在生成 <see cref="T:System.IO.FileStream" /> 对象时，不应使用其他选项。</summary>
    </member>
    <member name="F:System.IO.FileOptions.RandomAccess">
      <summary>指示随机访问文件。 系统可将此选项用作优化文件缓存的提示。</summary>
    </member>
    <member name="F:System.IO.FileOptions.SequentialScan">
      <summary>指示按从头到尾的顺序访问文件。 系统可将此选项用作优化文件缓存的提示。 如果应用程序移动用于随机访问的文件指针，可能不发生优化缓存，但仍然保证操作的正确性。 如果指定此标志，可提升某些案例中的性能。</summary>
    </member>
    <member name="F:System.IO.FileOptions.WriteThrough">
      <summary>指示系统应通过任何中间缓存、直接写入磁盘。</summary>
    </member>
    <member name="T:System.IO.FileShare">
      <summary>包含用于控制其他 <see cref="T:System.IO.FileStream" /> 对象对同一文件可以具有的访问类型的常数。</summary>
    </member>
    <member name="F:System.IO.FileShare.Delete">
      <summary>允许随后删除文件。</summary>
    </member>
    <member name="F:System.IO.FileShare.Inheritable">
      <summary>使文件句柄可由子进程继承。 Win32 不直接支持此功能。</summary>
    </member>
    <member name="F:System.IO.FileShare.None">
      <summary>谢绝共享当前文件。 文件关闭前，打开该文件的任何请求（由此进程或另一进程发出的请求）都将失败。</summary>
    </member>
    <member name="F:System.IO.FileShare.Read">
      <summary>允许随后打开文件读取。 如果未指定此标志，则文件关闭前，任何打开该文件以进行读取的请求（由此进程或另一进程发出的请求）都将失败。 但是，即使指定了此标志，仍可能需要附加权限才能够访问该文件。</summary>
    </member>
    <member name="F:System.IO.FileShare.ReadWrite">
      <summary>允许随后打开文件读取或写入。 如果未指定此标志，则文件关闭前，任何打开该文件以进行读取或写入的请求（由此进程或另一进程发出）都将失败。 但是，即使指定了此标志，仍可能需要附加权限才能够访问该文件。</summary>
    </member>
    <member name="F:System.IO.FileShare.Write">
      <summary>允许随后打开文件写入。 如果未指定此标志，则文件关闭前，任何打开该文件以进行写入的请求（由此进程或另一进过程发出的请求）都将失败。 但是，即使指定了此标志，仍可能需要附加权限才能够访问该文件。</summary>
    </member>
    <member name="T:System.IO.FileStream">
      <summary>为文件提供 <see cref="T:System.IO.Stream" />，既支持同步读写操作，也支持异步读写操作。</summary>
    </member>
    <member name="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess)">
      <summary>使用指定的读/写权限为指定的文件句柄初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</summary>
      <param name="handle">当前 <see langword="FileStream" /> 对象将封装的文件的文件句柄。</param>
      <param name="access">一个常数，用于设置 <see langword="FileStream" /> 对象的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 属性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> 不是 <see cref="T:System.IO.FileAccess" /> 的字段。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误，例如磁盘错误。  

或 -  

 已关闭流。</exception>
      <exception cref="T:System.UnauthorizedAccessException">对于指定的文件句柄，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件句柄设置为只读访问时会出现此情况。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32)">
      <summary>使用指定的读/写权限和缓冲区大小为指定的文件句柄初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</summary>
      <param name="handle">当前 <see langword="FileStream" /> 对象将封装的文件的文件句柄。</param>
      <param name="access">一个 <see cref="T:System.IO.FileAccess" /> 常数，它设置 <see langword="FileStream" /> 对象的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 属性。</param>
      <param name="bufferSize">一个大于零的正 <see cref="T:System.Int32" /> 值，表示缓冲区大小。 默认缓冲区大小为 4096。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> 参数是无效的句柄。  
或 
<paramref name="handle" /> 参数是同步句柄，但被异步使用。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 参数为负。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误，例如磁盘错误。  
 或  
 已关闭流。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">对于指定的文件句柄，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件句柄设置为只读访问时会出现此情况。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
      <summary>使用指定的读/写权限、缓冲区大小和同步或异步状态为指定的文件句柄初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</summary>
      <param name="handle">此 <see langword="FileStream" /> 对象将封装的文件的文件句柄。</param>
      <param name="access">一个常数，用于设置 <see langword="FileStream" /> 对象的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 属性。</param>
      <param name="bufferSize">一个大于零的正 <see cref="T:System.Int32" /> 值，表示缓冲区大小。 默认缓冲区大小为 4096。</param>
      <param name="isAsync">如果异步打开句柄（即以重叠的 I/O 模式），则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> 参数是无效的句柄。  
或 
<paramref name="handle" /> 参数是同步句柄，但被异步使用。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 参数为负。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误，例如磁盘错误。  
 或  
 已关闭流。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">对于指定的文件句柄，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件句柄设置为只读访问时会出现此情况。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess)">
      <summary>使用指定的读/写权限为指定的文件句柄初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</summary>
      <param name="handle">当前 <see langword="FileStream" /> 对象将封装的文件的文件句柄。</param>
      <param name="access">一个常数，用于设置 <see langword="FileStream" /> 对象的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 属性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> 不是 <see cref="T:System.IO.FileAccess" /> 的字段。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误，例如磁盘错误。  
 或  
 已关闭流。</exception>
      <exception cref="T:System.UnauthorizedAccessException">对于指定的文件句柄，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件句柄设置为只读访问时会出现此情况。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean)">
      <summary>使用指定的读/写权限和 <see cref="T:System.IO.FileStream" /> 实例所属权为指定的文件句柄初始化 <see langword="FileStream" /> 类的新实例。</summary>
      <param name="handle">当前 <see langword="FileStream" /> 对象将封装的文件的文件句柄。</param>
      <param name="access">一个常数，用于设置 <see langword="FileStream" /> 对象的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 属性。</param>
      <param name="ownsHandle">如果文件句柄将由此 <see langword="FileStream" /> 实例所有，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> 不是 <see cref="T:System.IO.FileAccess" /> 的字段。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误，例如磁盘错误。  
 或  
 已关闭流。</exception>
      <exception cref="T:System.UnauthorizedAccessException">对于指定的文件句柄，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件句柄设置为只读访问时会出现此情况。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32)">
      <summary>使用指定的读/写权限、<see langword="FileStream" /> 实例所属权和缓冲区大小为指定的文件句柄初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</summary>
      <param name="handle">此 <see langword="FileStream" /> 对象将封装的文件的文件句柄。</param>
      <param name="access">一个常数，用于设置 <see langword="FileStream" /> 对象的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 属性。</param>
      <param name="ownsHandle">如果文件句柄将由此 <see langword="FileStream" /> 实例所有，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="bufferSize">一个大于零的正 <see cref="T:System.Int32" /> 值，表示缓冲区大小。 默认缓冲区大小为 4096。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 为负数。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误，例如磁盘错误。  
 或  
 已关闭流。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">对于指定的文件句柄，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件句柄设置为只读访问时会出现此情况。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.IntPtr,System.IO.FileAccess,System.Boolean,System.Int32,System.Boolean)">
      <summary>使用指定的读/写权限、<see langword="FileStream" /> 实例所属权、缓冲区大小和同步或异步状态为指定的文件句柄初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</summary>
      <param name="handle">此 <see langword="FileStream" /> 对象将封装的文件的文件句柄。</param>
      <param name="access">一个常数，用于设置 <see langword="FileStream" /> 对象的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 属性。</param>
      <param name="ownsHandle">如果文件句柄将由此 <see langword="FileStream" /> 实例所有，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="bufferSize">一个大于零的正 <see cref="T:System.Int32" /> 值，表示缓冲区大小。 默认缓冲区大小为 4096。</param>
      <param name="isAsync">如果异步打开句柄（即以重叠的 I/O 模式），则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="access" /> 小于 <see langword="FileAccess.Read" /> 或大于 <see langword="FileAccess.ReadWrite" />，或者 <paramref name="bufferSize" /> 小于等于 0。</exception>
      <exception cref="T:System.ArgumentException">该句柄无效。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误，例如磁盘错误。  
 或  
 已关闭流。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.UnauthorizedAccessException">对于指定的文件句柄，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件句柄设置为只读访问时会出现此情况。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
      <summary>使用指定的路径和创建模式初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</summary>
      <param name="path">当前 <see langword="FileStream" /> 对象将封装的文件的相对路径或绝对路径。</param>
      <param name="mode">一个确定如何打开或创建文件的常数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是一个空字符串 ("")，仅包含空格，或者包含一个或多个无效字符。  
或 
 <paramref name="path" /> 指非文件设备，如 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 指非文件设备，如非 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到该文件。例如，当 <paramref name="mode" /> 是 <see langword="FileMode.Truncate" /> 或 <see langword="FileMode.Open" />，并且 <paramref name="path" /> 指定的文件不存在时会出现这种情况。 该文件必须以这些模式存在。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="path" /> 指定只读文件。</exception>
      <exception cref="T:System.IO.IOException">I/O 错误，例如在 <paramref name="path" /> 指定的文件已存在时指定 <see langword="FileMode.CreateNew" />，会发生此错误。  
或 
已关闭流。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，例如位于未映射的驱动器上。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 包含无效值。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>使用指定的路径、创建模式和读/写权限初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</summary>
      <param name="path">当前 <see langword="FileStream" /> 对象将封装的文件的相对路径或绝对路径。</param>
      <param name="mode">一个确定如何打开或创建文件的常数。</param>
      <param name="access">一个常数，用于确定 <see langword="FileStream" /> 对象访问文件的方式。 该常数还可以确定由 <see langword="FileStream" /> 对象的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 属性返回的值。 如果 <paramref name="path" /> 指定磁盘文件，则 <see cref="P:System.IO.FileStream.CanSeek" /> 为 <see langword="true" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是一个空字符串 ("")，仅包含空格，或者包含一个或多个无效字符。  
或 
 <paramref name="path" /> 指非文件设备，如 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 指非文件设备，如非 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到该文件。例如，当 <paramref name="mode" /> 是 <see langword="FileMode.Truncate" /> 或 <see langword="FileMode.Open" />，并且 <paramref name="path" /> 指定的文件不存在时会出现这种情况。 该文件必须以这些模式存在。</exception>
      <exception cref="T:System.IO.IOException">I/O 错误，例如在 <paramref name="path" /> 指定的文件已存在时指定 <see langword="FileMode.CreateNew" />，会发生此错误。  
或 
已关闭流。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，例如位于未映射的驱动器上。</exception>
      <exception cref="T:System.UnauthorizedAccessException">对于指定的 <paramref name="path" />，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件或目录设置为只读访问时会出现此情况。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 包含无效值。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>使用指定的路径、创建模式、读/写权限和共享权限创建 <see cref="T:System.IO.FileStream" /> 类的新实例。</summary>
      <param name="path">当前 <see langword="FileStream" /> 对象将封装的文件的相对路径或绝对路径。</param>
      <param name="mode">一个确定如何打开或创建文件的常数。</param>
      <param name="access">一个常数，用于确定 <see langword="FileStream" /> 对象访问文件的方式。 该常数还可以确定由 <see langword="FileStream" /> 对象的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 属性返回的值。 如果 <paramref name="path" /> 指定磁盘文件，则 <see cref="P:System.IO.FileStream.CanSeek" /> 为 <see langword="true" />。</param>
      <param name="share">一个常数，确定文件将如何由进程共享。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是一个空字符串 ("")，仅包含空格，或者包含一个或多个无效字符。  
或 
 <paramref name="path" /> 指非文件设备，如 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 指非文件设备，如非 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到该文件。例如，当 <paramref name="mode" /> 是 <see langword="FileMode.Truncate" /> 或 <see langword="FileMode.Open" />，并且 <paramref name="path" /> 指定的文件不存在时会出现这种情况。 该文件必须以这些模式存在。</exception>
      <exception cref="T:System.IO.IOException">I/O 错误，例如在 <paramref name="path" /> 指定的文件已存在时指定 <see langword="FileMode.CreateNew" />，会发生此错误。  
或 
系统正在运行 Windows 98 或 Windows 98 Second Edition，并将 <paramref name="share" /> 设置为 <see langword="FileShare.Delete" />。  
或 
已关闭流。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，例如位于未映射的驱动器上。</exception>
      <exception cref="T:System.UnauthorizedAccessException">对于指定的 <paramref name="path" />，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件或目录设置为只读访问时会出现此情况。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 包含无效值。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
      <summary>用指定的路径、创建模式、读/写及共享权限和缓冲区大小初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</summary>
      <param name="path">当前 <see langword="FileStream" /> 对象将封装的文件的相对路径或绝对路径。</param>
      <param name="mode">一个确定如何打开或创建文件的常数。</param>
      <param name="access">一个常数，用于确定 <see langword="FileStream" /> 对象访问文件的方式。 该常数还可以确定由 <see langword="FileStream" /> 对象的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 属性返回的值。 如果 <paramref name="path" /> 指定磁盘文件，则 <see cref="P:System.IO.FileStream.CanSeek" /> 为 <see langword="true" />。</param>
      <param name="share">一个常数，确定文件将如何由进程共享。</param>
      <param name="bufferSize">一个大于零的正 <see cref="T:System.Int32" /> 值，表示缓冲区大小。 默认缓冲区大小为 4096。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是一个空字符串 ("")，仅包含空格，或者包含一个或多个无效字符。  
或 
 <paramref name="path" /> 指非文件设备，如 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 指非文件设备，如非 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 为负数或零。  

或 - 
<paramref name="mode" />、<paramref name="access" /> 或 <paramref name="share" /> 包含无效的值。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到该文件。例如，当 <paramref name="mode" /> 是 <see langword="FileMode.Truncate" /> 或 <see langword="FileMode.Open" />，并且 <paramref name="path" /> 指定的文件不存在时会出现这种情况。 该文件必须以这些模式存在。</exception>
      <exception cref="T:System.IO.IOException">I/O 错误，例如在 <paramref name="path" /> 指定的文件已存在时指定 <see langword="FileMode.CreateNew" />，会发生此错误。  

或 - 
系统正在运行 Windows 98 或 Windows 98 Second Edition，并将 <paramref name="share" /> 设置为 <see langword="FileShare.Delete" />。  

或 - 
已关闭流。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，例如位于未映射的驱动器上。</exception>
      <exception cref="T:System.UnauthorizedAccessException">对于指定的 <paramref name="path" />，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件或目录设置为只读访问时会出现此情况。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
      <summary>使用指定的路径、创建模式、读/写和共享权限、缓冲区大小和同步或异步状态初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</summary>
      <param name="path">当前 <see langword="FileStream" /> 对象将封装的文件的相对路径或绝对路径。</param>
      <param name="mode">一个确定如何打开或创建文件的常数。</param>
      <param name="access">一个常数，用于确定 <see langword="FileStream" /> 对象访问文件的方式。 该常数还可以确定由 <see langword="FileStream" /> 对象的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 属性返回的值。 如果 <paramref name="path" /> 指定磁盘文件，则 <see cref="P:System.IO.FileStream.CanSeek" /> 为 <see langword="true" />。</param>
      <param name="share">一个常数，确定文件将如何由进程共享。</param>
      <param name="bufferSize">一个大于零的正 <see cref="T:System.Int32" /> 值，表示缓冲区大小。 默认缓冲区大小为 4096。</param>
      <param name="useAsync">指定使用异步 I/O 还是同步 I/O。 但是，请注意，基础操作系统可能不支持异步 I/O，因此在指定 <see langword="true" /> 后，根据所用平台，句柄可能同步打开。 当异步打开时，<see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 和 <see cref="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法在执行大量读或写时效果更好，但对于少量的读/写，这些方法速度可能要慢得多。 如果应用程序打算利用异步 I/O，将 <paramref name="useAsync" /> 参数设置为 <see langword="true" />。 正确使用异步 I/O 可以使应用程序的速度加快 10 倍，但是如果在没有为异步 I/O 重新设计应用程序的情况下使用异步 I/O，则可能使性能降低 10 倍。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是一个空字符串 ("")，仅包含空格，或者包含一个或多个无效字符。  
或 
 <paramref name="path" /> 指非文件设备，如 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 指非文件设备，如非 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 为负数或零。  
或 
 <paramref name="mode" />、<paramref name="access" /> 或 <paramref name="share" /> 包含无效的值。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到该文件。例如，当 <paramref name="mode" /> 是 <see langword="FileMode.Truncate" /> 或 <see langword="FileMode.Open" />，并且 <paramref name="path" /> 指定的文件不存在时会出现这种情况。 该文件必须以这些模式存在。</exception>
      <exception cref="T:System.IO.IOException">I/O 错误，例如在 <paramref name="path" /> 指定的文件已存在时指定 <see langword="FileMode.CreateNew" />，会发生此错误。  
或 
系统正在运行 Windows 98 或 Windows 98 Second Edition，并将 <paramref name="share" /> 设置为 <see langword="FileShare.Delete" />。  
或 
已关闭流。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，例如位于未映射的驱动器上。</exception>
      <exception cref="T:System.UnauthorizedAccessException">对于指定的 <paramref name="path" />，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件或目录设置为只读访问时会出现此情况。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
    </member>
    <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
      <summary>使用指定的路径、创建模式、读/写和共享权限、其他 FileStreams 可以具有的对此文件的访问权限、缓冲区大小和附加文件选项初始化 <see cref="T:System.IO.FileStream" /> 类的新实例。</summary>
      <param name="path">当前 <see langword="FileStream" /> 对象将封装的文件的相对路径或绝对路径。</param>
      <param name="mode">一个确定如何打开或创建文件的常数。</param>
      <param name="access">一个常数，用于确定 <see langword="FileStream" /> 对象访问文件的方式。 该常数还可以确定由 <see langword="FileStream" /> 对象的 <see cref="P:System.IO.FileStream.CanRead" /> 和 <see cref="P:System.IO.FileStream.CanWrite" /> 属性返回的值。 如果 <paramref name="path" /> 指定磁盘文件，则 <see cref="P:System.IO.FileStream.CanSeek" /> 为 <see langword="true" />。</param>
      <param name="share">一个常数，确定文件将如何由进程共享。</param>
      <param name="bufferSize">一个大于零的正 <see cref="T:System.Int32" /> 值，表示缓冲区大小。 默认缓冲区大小为 4096。</param>
      <param name="options">一个指定附加文件选项的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 是一个空字符串 ("")，仅包含空格，或者包含一个或多个无效字符。  
或 
 <paramref name="path" /> 指非文件设备，如 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 指非文件设备，如非 NTFS 环境中的“con:”、“com1:”、“lpt1:”等。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 为负数或零。  
或 
 <paramref name="mode" />、<paramref name="access" /> 或 <paramref name="share" /> 包含无效的值。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到该文件。例如，当 <paramref name="mode" /> 是 <see langword="FileMode.Truncate" /> 或 <see langword="FileMode.Open" />，并且 <paramref name="path" /> 指定的文件不存在时会出现这种情况。 该文件必须以这些模式存在。</exception>
      <exception cref="T:System.IO.IOException">I/O 错误，例如在 <paramref name="path" /> 指定的文件已存在时指定 <see langword="FileMode.CreateNew" />，会发生此错误。  
或 
已关闭流。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定的路径无效，例如位于未映射的驱动器上。</exception>
      <exception cref="T:System.UnauthorizedAccessException">对于指定的 <paramref name="path" />，操作系统不允许所请求的 <paramref name="access" />。例如当 <paramref name="access" /> 是 <see langword="Write" /> 或 <see langword="ReadWrite" />，并将文件或目录设置为只读访问时会出现此情况。  
或 
 <see cref="F:System.IO.FileOptions.Encrypted" /> 指定用于 <paramref name="options" />，但在当前平台上不支持文件加密。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定的路径和/或文件名超过了系统定义的最大长度。</exception>
    </member>
    <member name="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步读操作。 请考虑改用 <see cref="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />。</summary>
      <param name="array">将数据读入的缓冲区。</param>
      <param name="offset">
        <paramref name="array" /> 中的字节偏移量，从此处开始读取。</param>
      <param name="numBytes">最多读取的字节数。</param>
      <param name="callback">异步读操作完成后调用的方法。</param>
      <param name="state">一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。</param>
      <returns>引用异步读取的对象。</returns>
      <exception cref="T:System.ArgumentException">数组长度减去 <paramref name="offset" /> 小于 <paramref name="numBytes" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="numBytes" /> 为负数。</exception>
      <exception cref="T:System.IO.IOException">尝试在文件的末尾后进行异步读取。</exception>
    </member>
    <member name="M:System.IO.FileStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步写操作。 请考虑改用 <see cref="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />。</summary>
      <param name="array">包含要写入当前流的数据的缓冲区。</param>
      <param name="offset">
        <paramref name="array" /> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
      <param name="numBytes">最多写入的字节数。</param>
      <param name="callback">异步写操作完成后调用的方法。</param>
      <param name="state">一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。</param>
      <returns>引用异步写入的对象。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 长度减去 <paramref name="offset" /> 小于 <paramref name="numBytes" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="numBytes" /> 为负数。</exception>
      <exception cref="T:System.NotSupportedException">流不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="P:System.IO.FileStream.CanRead">
      <summary>获取一个值，该值指示当前流是否支持读取。</summary>
      <returns>如果流支持读取，则为 <see langword="true" />；如果流已关闭或是通过只写访问方式打开的，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.FileStream.CanSeek">
      <summary>获取一个值，该值指示当前流是否支持查找。</summary>
      <returns>如果流支持查找，则为 <see langword="true" />；如果流已关闭或者如果 <see langword="FileStream" /> 是从操作系统句柄（如管道或到控制台的输出）构造的，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.FileStream.CanWrite">
      <summary>获取一个值，该值指示当前流是否支持写入。</summary>
      <returns>如果流支持写入，则为 <see langword="true" />；如果流已关闭或是通过只读访问方式打开的，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.FileStream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
      <summary>使用指定的缓冲区大小和取消令牌，从当前文件流中异步读取字节并将其写入到另一个流中。</summary>
      <param name="destination">向其中复制当前文件流的内容的流。</param>
      <param name="bufferSize">缓冲区的大小（以字节为单位）。 此值必须大于零。 默认大小为 81920。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步复制操作的任务。</returns>
    </member>
    <member name="M:System.IO.FileStream.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.FileStream" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示释放托管资源和非托管资源；<see langword="false" /> 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.IO.FileStream.DisposeAsync">
      <summary>异步释放 <see cref="T:System.IO.FileStream" /> 使用的非托管资源。</summary>
      <returns>一个表示异步释放操作的任务。</returns>
    </member>
    <member name="M:System.IO.FileStream.EndRead(System.IAsyncResult)">
      <summary>等待挂起的异步读操作完成。 （请考虑改用 <see cref="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />。）</summary>
      <param name="asyncResult">对所等待的挂起异步请求的引用。</param>
      <returns>从流中读取的字节数，介于 0 和所请求的字节数之间。 流仅在流结尾返回 0，否则在至少有 1 个字节可用之前应一直进行阻止。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">此 <see cref="T:System.IAsyncResult" /> 对象不是通过对该类调用 <see cref="M:System.IO.FileStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 来创建的。</exception>
      <exception cref="T:System.InvalidOperationException">多次调用了<see cref="M:System.IO.FileStream.EndRead(System.IAsyncResult)" /> 。</exception>
      <exception cref="T:System.IO.IOException">流已关闭或出现了内部错误。</exception>
    </member>
    <member name="M:System.IO.FileStream.EndWrite(System.IAsyncResult)">
      <summary>结束异步写入操作，在 I/O 操作完成之前一直阻止。 （请考虑改用 <see cref="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />。）</summary>
      <param name="asyncResult">挂起的异步 I/O 请求。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">此 <see cref="T:System.IAsyncResult" /> 对象不是通过对该类调用 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 来创建的。</exception>
      <exception cref="T:System.InvalidOperationException">多次调用了<see cref="M:System.IO.FileStream.EndWrite(System.IAsyncResult)" /> 。</exception>
      <exception cref="T:System.IO.IOException">流已关闭或出现了内部错误。</exception>
    </member>
    <member name="M:System.IO.FileStream.Finalize">
      <summary>确保垃圾回收器回收 <see langword="FileStream" /> 时释放资源并执行其他清理操作。</summary>
    </member>
    <member name="M:System.IO.FileStream.Flush">
      <summary>清除此流的缓冲区，使得所有缓冲数据都写入到文件中。</summary>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.FileStream.Flush(System.Boolean)">
      <summary>清除此流的缓冲区，将所有缓冲数据都写入到文件中，并且也清除所有中间文件缓冲区。</summary>
      <param name="flushToDisk">如果刷新所有中间文件缓冲区，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.IO.FileStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>异步清理这个流的所有缓冲区，并使所有缓冲数据写入基础设备，并且监控取消请求。</summary>
      <param name="cancellationToken">要监视取消请求的标记。</param>
      <returns>表示异步刷新操作的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放流。</exception>
    </member>
    <member name="P:System.IO.FileStream.Handle">
      <summary>获取当前 <see langword="FileStream" /> 对象所封装文件的操作系统文件句柄。</summary>
      <returns>此 <see langword="FileStream" /> 对象所封装文件的操作系统文件句柄；如果 <see langword="FileStream" /> 已关闭，则为 -1。</returns>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="P:System.IO.FileStream.IsAsync">
      <summary>获取一个值，它指示 <see langword="FileStream" /> 是异步打开还是同步打开的。</summary>
      <returns>如果 <see langword="FileStream" /> 是异步打开的，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.FileStream.Length">
      <summary>获取用字节表示的流长度。</summary>
      <returns>表示流长度（以字节为单位）的长值。</returns>
      <exception cref="T:System.NotSupportedException">此流的 <see cref="P:System.IO.FileStream.CanSeek" /> 为 <see langword="false" />。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误，例如文件被关闭。</exception>
    </member>
    <member name="M:System.IO.FileStream.Lock(System.Int64,System.Int64)">
      <summary>防止其他进程读取或写入 <see cref="T:System.IO.FileStream" />。</summary>
      <param name="position">要锁定的范围的起始处。 此参数的值必须大于或等于零 (0)。</param>
      <param name="length">要锁定的范围。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 或 <paramref name="length" /> 为负数。</exception>
      <exception cref="T:System.ObjectDisposedException">文件关闭。</exception>
      <exception cref="T:System.IO.IOException">另一个进程已锁定了文件的一部分，因此进程无法访问该文件。</exception>
    </member>
    <member name="P:System.IO.FileStream.Name">
      <summary>获取 <see langword="FileStream" /> 中已打开的文件的绝对路径。</summary>
      <returns>一个字符串, 它是文件的绝对路径。</returns>
    </member>
    <member name="P:System.IO.FileStream.Position">
      <summary>获取或设置此流的当前位置。</summary>
      <returns>此流的当前位置。</returns>
      <exception cref="T:System.NotSupportedException">流不支持查找。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。  
或
 将位置设置为非常大的值，此值超出 Windows 98 或更早版本中的流的末尾。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">试图将位置设置为负值。</exception>
      <exception cref="T:System.IO.EndOfStreamException">试图越过不支持此值的流的末尾进行查找。</exception>
    </member>
    <member name="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>从流中读取字节块并将该数据写入给定缓冲区中。</summary>
      <param name="array">当此方法返回时，包含指定的字节数组，此数组中 <paramref name="offset" /> 和 (<paramref name="offset" /> + <paramref name="count" /> - 1<c>)</c> 之间的值被从当前源中读取的字节所替换。</param>
      <param name="offset">
        <paramref name="array" /> 中的字节偏移量，将在此处放置读取的字节。</param>
      <param name="count">最多读取的字节数。</param>
      <returns>读入缓冲区中的总字节数。 如果字节数当前不可用，则总字节数可能小于所请求的字节数；如果已到达流结尾，则为零。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 描述 <paramref name="array" /> 中的无效范围。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
    </member>
    <member name="M:System.IO.FileStream.Read(System.Span{System.Byte})">
      <summary>从当前文件流中读取字节序列，并在该文件流中按照读取的字节数提升位置。</summary>
      <param name="buffer">内存的区域。 当此方法返回时，此区域的内容将替换为从当前文件流读取的字节。</param>
      <returns>读入缓冲区中的总字节数。 如果很多字节当前不可用，则这可小于在缓冲区中分配的字节数；如果已到达流结尾，则为零 (0)。</returns>
    </member>
    <member name="M:System.IO.FileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>从当前文件流异步读取字节的序列，将其写入从指定偏移量开始的字节数组，按读取的字节数向前移动文件流中的位置，并监视取消请求。</summary>
      <param name="buffer">要写入数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从该偏移量开始写入从流中读取的数据。</param>
      <param name="count">最多读取的字节数。</param>
      <param name="cancellationToken">要监视取消请求的标记。</param>
      <returns>一个表示异步读取操作并将读取的总字节数包装到缓冲区中的任务。 如果当前可用字节数少于所请求的字节数，则该结果值可小于所请求的字节数；如果已到达流结尾时，则为 0（零）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</exception>
      <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放流。</exception>
      <exception cref="T:System.InvalidOperationException">之前的读取操作当前正在使用流。</exception>
    </member>
    <member name="M:System.IO.FileStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>从当前文件流异步读取字节的序列，将其写入某内存区域，按读取的字节数向前移动文件流中的位置，并监视取消请求。</summary>
      <param name="buffer">要写入数据的缓冲区。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>一个表示异步读取操作并将读取的总字节数包装到缓冲区中的任务。 如果当前可用字节数少于所请求的字节数，则该结果值可小于所请求的字节数；如果已到达流结尾时，则为 0（零）。</returns>
    </member>
    <member name="M:System.IO.FileStream.ReadByte">
      <summary>从文件中读取一个字节，并将读取位置提升一个字节。</summary>
      <returns>强制转换为 <see cref="T:System.Int32" /> 的字节；或者如果已到达流的末尾，则为 -1。</returns>
      <exception cref="T:System.NotSupportedException">当前流不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">当前流已关闭。</exception>
    </member>
    <member name="P:System.IO.FileStream.SafeFileHandle">
      <summary>获取 <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" /> 对象，它代表当前 <see cref="T:System.IO.FileStream" /> 对象所封装的文件的操作系统文件句柄。</summary>
      <returns>一个对象，该对象表示当前 <see cref="T:System.IO.FileStream" /> 对象封装的文件的操作系统文件句柄。</returns>
    </member>
    <member name="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>将该流的当前位置设置为给定值。</summary>
      <param name="offset">相对于 <paramref name="origin" /> 的点，从此处开始查找。</param>
      <param name="origin">使用 <see cref="T:System.IO.SeekOrigin" /> 类型的值，将开始位置、结束位置或当前位置指定为 <paramref name="offset" /> 的参考点。</param>
      <returns>流中的新位置。</returns>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.NotSupportedException">该流不支持查找，例如如果 <see langword="FileStream" /> 是从管道或控制台输出构造的，则不支持查找。</exception>
      <exception cref="T:System.ArgumentException">试图在流的开始位置之前进行查找。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
    </member>
    <member name="M:System.IO.FileStream.SetLength(System.Int64)">
      <summary>将该流的长度设置为给定值。</summary>
      <param name="value">流的新长度。</param>
      <exception cref="T:System.IO.IOException">发生了 I/O 错误。</exception>
      <exception cref="T:System.NotSupportedException">该流不支持写入和查找。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">试图将 <paramref name="value" /> 参数设置为小于 0。</exception>
    </member>
    <member name="M:System.IO.FileStream.Unlock(System.Int64,System.Int64)">
      <summary>允许其他进程访问以前锁定的某个文件的全部或部分。</summary>
      <param name="position">要取消锁定的范围的开始处。</param>
      <param name="length">要取消锁定的范围。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> 或 <paramref name="length" /> 为负数。</exception>
    </member>
    <member name="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>将字节块写入文件流。</summary>
      <param name="array">包含要写入该流的数据的缓冲区。</param>
      <param name="offset">
        <paramref name="array" /> 中的从零开始的字节偏移量，从此处开始将字节复制到该流。</param>
      <param name="count">最多写入的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 描述 <paramref name="array" />中的无效范围。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。  

或 -

 另一个线程可能导致操作系统的文件句柄的位置发生意外更改。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.NotSupportedException">当前的流实例不支持写入。</exception>
    </member>
    <member name="M:System.IO.FileStream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>将字节的序列从只读范围写入当前文件流，并按写入的字节数向前移动此文件流中的当前位置。</summary>
      <param name="buffer">内存的区域。 此方法将此区域的内容复制到当前文件流。</param>
    </member>
    <member name="M:System.IO.FileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>将字节的序列异步写入当前流，将该流中的当前位置向前移动写入的字节数，并监视取消请求。</summary>
      <param name="buffer">从中写入数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到该流。</param>
      <param name="count">最多写入的字节数。</param>
      <param name="cancellationToken">要监视取消请求的标记。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</exception>
      <exception cref="T:System.NotSupportedException">流不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放流。</exception>
      <exception cref="T:System.InvalidOperationException">流正在由前一次写操作使用。</exception>
    </member>
    <member name="M:System.IO.FileStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>将字节的序列从内存区域异步写入当前文件流，按写入的字节数向前移动该文件流中的当前位置，并监视取消请求。</summary>
      <param name="buffer">从中写入数据的内存区域。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步写入操作的任务。</returns>
    </member>
    <member name="M:System.IO.FileStream.WriteByte(System.Byte)">
      <summary>一个字节写入文件流中的当前位置。</summary>
      <param name="value">要写入流的字节。</param>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
      <exception cref="T:System.NotSupportedException">流不支持写入。</exception>
    </member>
    <member name="T:System.IO.HandleInheritability">
      <summary>指定基础句柄是否已由子进程继承。</summary>
    </member>
    <member name="F:System.IO.HandleInheritability.Inheritable">
      <summary>指定句柄已由子进程继承。</summary>
    </member>
    <member name="F:System.IO.HandleInheritability.None">
      <summary>指定句柄未由子进程继承。</summary>
    </member>
    <member name="T:System.IO.IOException">
      <summary>发生 I/O 错误时引发的异常。</summary>
    </member>
    <member name="M:System.IO.IOException.#ctor">
      <summary>初始化 <see cref="T:System.IO.IOException" /> 类的新实例，其中将消息字符串设置为空字符串 ("")，将其 HRESULT 设置为 COR_E_IO，并且将其内部异常设置为空引用。</summary>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用指定的序列化和上下文信息初始化 <see cref="T:System.IO.IOException" /> 类的新实例。</summary>
      <param name="info">用于串行化或反序列化对象的数据。</param>
      <param name="context">对象的源和目标。</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.IO.IOException" /> 类的新实例，其中将消息字符串设置为 <paramref name="message" />，将其 HRESULT 设置为 COR_E_IO，并且将其内部异常设置为 <see langword="null" />。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IO.IOException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="M:System.IO.IOException.#ctor(System.String,System.Int32)">
      <summary>初始化 <see cref="T:System.IO.IOException" /> 类的新实例，将其消息字符串设置为 <paramref name="message" /> 并将其 HRESULT 设置为用户定义的。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="hresult">标识已发生的错误的整数。</param>
    </member>
    <member name="T:System.IO.PathTooLongException">
      <summary>当路径名或完全限定的文件名长度超过系统定义的最大长度时引发的异常。</summary>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor">
      <summary>初始化 <see cref="T:System.IO.PathTooLongException" /> 类的新实例，使其 HRESULT 设置为 COR_E_PATHTOOLONG。</summary>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用指定的序列化和上下文信息初始化 <see cref="T:System.IO.PathTooLongException" /> 类的新实例。</summary>
      <param name="info">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.IO.PathTooLongException" /> 类的新实例，使其消息字符串设置为 <paramref name="message" />，而其 HRESULT 设置为 COR_E_PATHTOOLONG。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.IO.PathTooLongException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.IO.PathTooLongException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.IO.SeekOrigin">
      <summary>指定流中的位置以供查找使用。</summary>
    </member>
    <member name="F:System.IO.SeekOrigin.Begin">
      <summary>指定流的开始位置。</summary>
    </member>
    <member name="F:System.IO.SeekOrigin.Current">
      <summary>指定流中的当前位置。</summary>
    </member>
    <member name="F:System.IO.SeekOrigin.End">
      <summary>指定流的结束位置。</summary>
    </member>
    <member name="T:System.IO.Stream">
      <summary>提供字节序列的一般视图。 这是一个抽象类。</summary>
    </member>
    <member name="M:System.IO.Stream.#ctor">
      <summary>初始化 <see cref="T:System.IO.Stream" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步读操作。 （请考虑改用 <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />。）</summary>
      <param name="buffer">数据读入的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从该偏移量开始写入从流中读取的数据。</param>
      <param name="count">最多读取的字节数。</param>
      <param name="callback">可选的异步回调，在完成读取时调用。</param>
      <param name="state">一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。</param>
      <returns>表示异步读取的 <see cref="T:System.IAsyncResult" />（可能仍处于挂起状态）。</returns>
      <exception cref="T:System.IO.IOException">尝试的异步读取超过了流的结尾，或者发生了磁盘错误。</exception>
      <exception cref="T:System.ArgumentException">一个或多个自变量无效。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
      <exception cref="T:System.NotSupportedException">当前 <see langword="Stream" /> 实现不支持读取操作。</exception>
    </member>
    <member name="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步写操作。 （请考虑改用 <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />。）</summary>
      <param name="buffer">从中写入数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从此处开始写入。</param>
      <param name="count">最多写入的字节数。</param>
      <param name="callback">可选的异步回调，在完成写入时调用。</param>
      <param name="state">一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。</param>
      <returns>表示异步写入的 <see langword="IAsyncResult" />（可能仍处于挂起状态）。</returns>
      <exception cref="T:System.IO.IOException">尝试进行的异步写入超过了流的结尾，或者发生了磁盘错误。</exception>
      <exception cref="T:System.ArgumentException">一个或多个自变量无效。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
      <exception cref="T:System.NotSupportedException">当前 <see langword="Stream" /> 实现不支持写入操作。</exception>
    </member>
    <member name="P:System.IO.Stream.CanRead">
      <summary>当在派生类中重写时，获取指示当前流是否支持读取的值。</summary>
      <returns>如果流支持读取，为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.Stream.CanSeek">
      <summary>当在派生类中重写时，获取指示当前流是否支持查找功能的值。</summary>
      <returns>如果流支持查找，为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.Stream.CanTimeout">
      <summary>获取一个值，该值确定当前流是否可以超时。</summary>
      <returns>一个确定当前流是否可以超时的值。</returns>
    </member>
    <member name="P:System.IO.Stream.CanWrite">
      <summary>当在派生类中重写时，获取指示当前流是否支持写入功能的值。</summary>
      <returns>如果流支持写入，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Stream.Close">
      <summary>关闭当前流并释放与之关联的所有资源（如套接字和文件句柄）。 不直接调用此方法，而应确保流得以正确释放。</summary>
    </member>
    <member name="M:System.IO.Stream.CopyTo(System.IO.Stream)">
      <summary>从当前流中读取字节并将其写入到另一流中。</summary>
      <param name="destination">当前流的内容将复制到的流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">当前流不支持读取。  

或 - 
<paramref name="destination" /> 不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">在调用 <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> 方法前当前流或 <paramref name="destination" /> 已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)">
      <summary>使用指定的缓冲区大小，从当前流中读取字节并将其写入到另一流中。</summary>
      <param name="destination">当前流的内容将复制到的流。</param>
      <param name="bufferSize">缓冲区的大小。 此值必须大于零。 默认大小为 81920。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="bufferSize" /> 为负数或零。</exception>
      <exception cref="T:System.NotSupportedException">当前流不支持读取。  
或 
 <paramref name="destination" /> 不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">在调用 <see cref="M:System.IO.Stream.CopyTo(System.IO.Stream)" /> 方法前当前流或 <paramref name="destination" /> 已关闭。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.Stream.CopyToAsync(System.IO.Stream)">
      <summary>从当前流中异步读取字节并将其写入到另一个流中。</summary>
      <param name="destination">当前流的内容将复制到的流。</param>
      <returns>表示异步复制操作的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">当前流或目标流已释放。</exception>
      <exception cref="T:System.NotSupportedException">当前流不支持阅读，或目标流不支持写入。</exception>
    </member>
    <member name="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)">
      <summary>使用指定的缓冲区大小，从当前流中异步读取字节并将其写入到另一流中。</summary>
      <param name="destination">当前流的内容将复制到的流。</param>
      <param name="bufferSize">缓冲区的大小（以字节为单位）。 此值必须大于零。 默认大小为 81920。</param>
      <returns>表示异步复制操作的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" /> 为负数或零。</exception>
      <exception cref="T:System.ObjectDisposedException">当前流或目标流已释放。</exception>
      <exception cref="T:System.NotSupportedException">当前流不支持阅读，或目标流不支持写入。</exception>
    </member>
    <member name="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
      <summary>使用指定的缓冲区大小和取消令牌，从当前流中异步读取字节并将其写入到另一个流中。</summary>
      <param name="destination">当前流的内容将复制到的流。</param>
      <param name="bufferSize">缓冲区的大小（以字节为单位）。 此值必须大于零。 默认大小为 81920。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步复制操作的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="buffersize" /> 为负数或零。</exception>
      <exception cref="T:System.ObjectDisposedException">当前流或目标流已释放。</exception>
      <exception cref="T:System.NotSupportedException">当前流不支持阅读，或目标流不支持写入。</exception>
    </member>
    <member name="M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Threading.CancellationToken)">
      <summary>通过指定的取消令牌，从当前流中异步读取字节并将其写入到另一个流中。</summary>
      <param name="destination">当前流的内容将复制到的流。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步复制操作的任务。</returns>
    </member>
    <member name="M:System.IO.Stream.CreateWaitHandle">
      <summary>分配 <see cref="T:System.Threading.WaitHandle" /> 对象。</summary>
      <returns>对已分配的 <see langword="WaitHandle" /> 的引用。</returns>
    </member>
    <member name="M:System.IO.Stream.Dispose">
      <summary>释放由 <see cref="T:System.IO.Stream" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.IO.Stream.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.Stream" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示释放托管资源和非托管资源；<see langword="false" /> 表示仅释放非托管资源。</param>
    </member>
    <member name="M:System.IO.Stream.DisposeAsync">
      <summary>异步释放 <see cref="T:System.IO.Stream" /> 使用的非托管资源。</summary>
      <returns>一个表示异步释放操作的任务。</returns>
    </member>
    <member name="M:System.IO.Stream.EndRead(System.IAsyncResult)">
      <summary>等待挂起的异步读取完成。 （请考虑改用 <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" />。）</summary>
      <param name="asyncResult">对要完成的挂起异步请求的引用。</param>
      <returns>从流中读取的字节数，介于零 (0) 和所请求的字节数之间。 流仅在流结尾返回零 (0)，否则在至少有 1 个字节可用之前应一直进行阻止。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">处于挂起状态的读取操作的句柄不可用。  
 或  
 挂起操作不支持读取。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="asyncResult" /> 不是源自当前流的 <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.IO.IOException">流已关闭或出现了内部错误。</exception>
    </member>
    <member name="M:System.IO.Stream.EndWrite(System.IAsyncResult)">
      <summary>结束异步写操作。 （请考虑改用 <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" />。）</summary>
      <param name="asyncResult">对未完成的异步 I/O 请求的引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">处于挂起状态的写入操作的句柄不可用。  

或 -  

 挂起操作不支持写入。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="asyncResult" /> 不是源自当前流的 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.IO.IOException">流已关闭或出现了内部错误。</exception>
    </member>
    <member name="M:System.IO.Stream.Flush">
      <summary>当在派生类中重写时，将清除该流的所有缓冲区，并使得所有缓冲数据被写入到基础设备。</summary>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
    </member>
    <member name="M:System.IO.Stream.FlushAsync">
      <summary>异步清除此流的所有缓冲区并导致所有缓冲数据都写入基础设备中。</summary>
      <returns>表示异步刷新操作的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放流。</exception>
    </member>
    <member name="M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)">
      <summary>异步清理这个流的所有缓冲区，并使所有缓冲数据写入基础设备，并且监控取消请求。</summary>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步刷新操作的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放流。</exception>
    </member>
    <member name="P:System.IO.Stream.Length">
      <summary>当在派生类中重写时，获取流长度（以字节为单位）。</summary>
      <returns>表示流长度（以字节为单位）的长值。</returns>
      <exception cref="T:System.NotSupportedException">从 <see langword="Stream" /> 派生的类不支持查找。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
    </member>
    <member name="F:System.IO.Stream.Null">
      <summary>无后备存储区的 <see langword="Stream" />。</summary>
    </member>
    <member name="M:System.IO.Stream.ObjectInvariant">
      <summary>提供对 <see cref="T:System.Diagnostics.Contracts.Contract" /> 的支持。</summary>
    </member>
    <member name="P:System.IO.Stream.Position">
      <summary>当在派生类中重写时，获取或设置当前流中的位置。</summary>
      <returns>流中的当前位置。</returns>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.NotSupportedException">流不支持查找。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
    </member>
    <member name="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>当在派生类中重写时，从当前流读取字节序列，并将此流中的位置提升读取的字节数。</summary>
      <param name="buffer">字节数组。 当此方法返回时，此缓冲区包含指定的字符数组，此数组中 <paramref name="offset" /> 和 (<paramref name="offset" /> + <paramref name="count" /> - 1) 之间的值被从当前源中读取的字节所替换。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。</param>
      <param name="count">要从当前流中最多读取的字节数。</param>
      <returns>读入缓冲区中的总字节数。 如果很多字节当前不可用，则总字节数可能小于请求的字节数；如果已到达流结尾，则为零 (0)。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
    </member>
    <member name="M:System.IO.Stream.Read(System.Span{System.Byte})">
      <summary>当在派生类中重写时，从当前流读取字节序列，并将此流中的位置提升读取的字节数。</summary>
      <param name="buffer">内存的区域。 当此方法返回时，此区域的内容将替换为从当前源读取的字节。</param>
      <returns>读入缓冲区中的总字节数。 如果很多字节当前不可用，则这可小于在缓冲区中分配的字节数；如果已到达流结尾，则为零 (0)。</returns>
    </member>
    <member name="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>从当前流异步读取字节序列，并将流中的位置提升读取的字节数。</summary>
      <param name="buffer">要写入数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从该偏移量开始写入从流中读取的数据。</param>
      <param name="count">最多读取的字节数。</param>
      <returns>表示异步读取操作的任务。 <paramref name="TResult" /> 参数的值包含读入缓冲区的总字节数。 如果当前可用字节数少于所请求的字节数，则该结果值可小于所请求的字节数；如果已到达流结尾时，则为 0（零）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</exception>
      <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放流。</exception>
      <exception cref="T:System.InvalidOperationException">之前的读取操作当前正在使用流。</exception>
    </member>
    <member name="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>从当前流异步读取字节的序列，将流中的位置提升读取的字节数，并监视取消请求。</summary>
      <param name="buffer">要写入数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从该偏移量开始写入从流中读取的数据。</param>
      <param name="count">最多读取的字节数。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步读取操作的任务。 <paramref name="TResult" /> 参数的值包含读入缓冲区的总字节数。 如果当前可用字节数少于所请求的字节数，则该结果值可小于所请求的字节数；如果已到达流结尾时，则为 0（零）。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</exception>
      <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放流。</exception>
      <exception cref="T:System.InvalidOperationException">之前的读取操作当前正在使用流。</exception>
    </member>
    <member name="M:System.IO.Stream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>从当前流异步读取字节的序列，将流中的位置提升读取的字节数，并监视取消请求。</summary>
      <param name="buffer">要将数据写入的内存区域。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步读取操作的任务。 其 <see cref="P:System.Threading.Tasks.ValueTask`1.Result" /> 属性的值包含读入缓冲区的总字节数。 如果很多字节当前不可用，则结果值可小于在缓冲区中分配的字节数；如果已到达流结尾，则结果值可以为 0（零）。</returns>
    </member>
    <member name="M:System.IO.Stream.ReadByte">
      <summary>从流中读取一个字节，并将流内的位置向前提升一个字节，或者如果已到达流结尾，则返回 -1。</summary>
      <returns>强制转换为 <see langword="Int32" /> 的无符号字节，如果到达流的末尾，则为 -1。</returns>
      <exception cref="T:System.NotSupportedException">流不支持读取。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
    </member>
    <member name="P:System.IO.Stream.ReadTimeout">
      <summary>获取或设置一个值（以毫秒为单位），该值确定流在超时前尝试读取多长时间。</summary>
      <returns>一个确定流在超时前尝试读取多长时间的值（以毫秒为单位）。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IO.Stream.ReadTimeout" /> 方法总是引发 <see cref="T:System.InvalidOperationException" />。</exception>
    </member>
    <member name="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>当在派生类中重写时，设置当前流中的位置。</summary>
      <param name="offset">相对于 <paramref name="origin" /> 参数的字节偏移量。</param>
      <param name="origin">
        <see cref="T:System.IO.SeekOrigin" /> 类型的值，指示用于获取新位置的参考点。</param>
      <returns>当前流中的新位置。</returns>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.NotSupportedException">流不支持查找，例如在流通过管道或控制台输出构造的情况下即为如此。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
    </member>
    <member name="M:System.IO.Stream.SetLength(System.Int64)">
      <summary>当在派生类中重写时，设置当前流的长度。</summary>
      <param name="value">所需的当前流的长度（以字节表示）。</param>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.NotSupportedException">流不支持写入和查找，例如在流通过管道或控制台输出构造的情况下即为如此。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
    </member>
    <member name="M:System.IO.Stream.Synchronized(System.IO.Stream)">
      <summary>在指定的 <see cref="T:System.IO.Stream" /> 对象周围创建线程安全（同步）包装。</summary>
      <param name="stream">要同步的 <see cref="T:System.IO.Stream" /> 对象。</param>
      <returns>一个线程安全的 <see cref="T:System.IO.Stream" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>当在派生类中重写时，向当前流中写入字节序列，并将此流中的当前位置提升写入的字节数。</summary>
      <param name="buffer">字节数组。 此方法将 <paramref name="count" /> 个字节从 <paramref name="buffer" /> 复制到当前流。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。</param>
      <param name="count">要写入当前流的字节数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.IO.IOException">发生 I/O 错误，例如找不到指定文件。</exception>
      <exception cref="T:System.NotSupportedException">流不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用 <see cref="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)" />。</exception>
    </member>
    <member name="M:System.IO.Stream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>当在派生类中重写时，向当前流中写入字节序列，并将此流中的当前位置提升写入的字节数。</summary>
      <param name="buffer">内存的区域。 此方法将此区域的内容复制到当前流。</param>
    </member>
    <member name="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>将字节序列异步写入当前流，并将流的当前位置提升写入的字节数。</summary>
      <param name="buffer">从中写入数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到该流。</param>
      <param name="count">最多写入的字节数。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</exception>
      <exception cref="T:System.NotSupportedException">流不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放流。</exception>
      <exception cref="T:System.InvalidOperationException">流正在由前一次写操作使用。</exception>
    </member>
    <member name="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>将字节的序列异步写入当前流，将该流中的当前位置向前移动写入的字节数，并监视取消请求。</summary>
      <param name="buffer">从中写入数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到该流。</param>
      <param name="count">最多写入的字节数。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步写入操作的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</exception>
      <exception cref="T:System.NotSupportedException">流不支持写入。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放流。</exception>
      <exception cref="T:System.InvalidOperationException">流正在由前一次写操作使用。</exception>
    </member>
    <member name="M:System.IO.Stream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>将字节的序列异步写入当前流，将该流中的当前位置向前移动写入的字节数，并监视取消请求。</summary>
      <param name="buffer">从中写入数据的内存区域。</param>
      <param name="cancellationToken">要监视取消请求的标记。 默认值为 <see cref="P:System.Threading.CancellationToken.None" />。</param>
      <returns>表示异步写入操作的任务。</returns>
    </member>
    <member name="M:System.IO.Stream.WriteByte(System.Byte)">
      <summary>将一个字节写入流内的当前位置，并将流内的位置向前提升一个字节。</summary>
      <param name="value">要写入流中的字节。</param>
      <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
      <exception cref="T:System.NotSupportedException">该流不支持写入，或者该流已关闭。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
    </member>
    <member name="P:System.IO.Stream.WriteTimeout">
      <summary>获取或设置一个值（以毫秒为单位），该值确定流在超时前尝试写入多长时间。</summary>
      <returns>一个确定流在超时前尝试写入多长时间的值（以毫秒为单位）。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IO.Stream.WriteTimeout" /> 方法总是引发 <see cref="T:System.InvalidOperationException" />。</exception>
    </member>
    <member name="T:System.IObservable`1">
      <summary>定义基于推送的通知的提供程序。</summary>
      <typeparam name="T">提供通知信息的对象。</typeparam>
    </member>
    <member name="M:System.IObservable`1.Subscribe(System.IObserver{`0})">
      <summary>通知提供程序：某观察程序将要接收通知。</summary>
      <param name="observer">要接收通知的对象。</param>
      <returns>对允许观察者在提供程序发送完通知前停止接收这些通知的接口的引用。</returns>
    </member>
    <member name="T:System.IObserver`1">
      <summary>提供用于接收基于推送的通知的机制。</summary>
      <typeparam name="T">提供通知信息的对象。</typeparam>
    </member>
    <member name="M:System.IObserver`1.OnCompleted">
      <summary>通知观察者提供程序已完成发送基于推送的通知。</summary>
    </member>
    <member name="M:System.IObserver`1.OnError(System.Exception)">
      <summary>通知观察者，提供程序遇到错误情况。</summary>
      <param name="error">一个提供有关错误的附加信息的对象。</param>
    </member>
    <member name="M:System.IObserver`1.OnNext(`0)">
      <summary>向观察者提供新数据。</summary>
      <param name="value">当前的通知信息。</param>
    </member>
    <member name="T:System.IProgress`1">
      <summary>定义进度更新的提供程序。</summary>
      <typeparam name="T">进度更新值的类型。</typeparam>
    </member>
    <member name="M:System.IProgress`1.Report(`0)">
      <summary>报告进度更新。</summary>
      <param name="value">进度更新之后的值。</param>
    </member>
    <member name="T:System.Lazy`1">
      <summary>提供对延迟初始化的支持。</summary>
      <typeparam name="T">被延迟初始化的对象的类型。</typeparam>
    </member>
    <member name="M:System.Lazy`1.#ctor">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例。 发生迟缓初始化时，使用目标类型的无参数构造函数。</summary>
    </member>
    <member name="M:System.Lazy`1.#ctor(`0)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例，该类使用已预先初始化的指定值。</summary>
      <param name="value">要使用的已预先初始化的值。</param>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例。 发生迟缓初始化时，使用目标类型的无参数构造函数和指定的初始化模式。</summary>
      <param name="isThreadSafe">
        <see langword="true" /> 表示此示例可由多个线程同时使用；<see langword="false" /> 表示此实例一次只能由一个线程使用。</param>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0})">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例。 发生延迟初始化时，使用指定的初始化函数。</summary>
      <param name="valueFactory">在需要时被调用以产生延迟初始化值的委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例。 发生延迟初始化时，使用指定的初始化函数和初始化模式。</summary>
      <param name="valueFactory">在需要时被调用以产生延迟初始化值的委托。</param>
      <param name="isThreadSafe">
        <see langword="true" /> 表示此示例可由多个线程同时使用；<see langword="false" /> 表示此实例一次只能由一个线程使用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例，其中使用指定的初始化函数和线程安全性模式。</summary>
      <param name="valueFactory">在需要时被调用以产生延迟初始化值的委托。</param>
      <param name="mode">指定线程安全模式的枚举值之一。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 包含无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="valueFactory" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)">
      <summary>初始化 <see cref="T:System.Lazy`1" /> 类的新实例，其中使用 <paramref name="T" /> 的无参数构造函数和指定的线程安全性模式。</summary>
      <param name="mode">指定线程安全模式的枚举值之一。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> 包含无效值。</exception>
    </member>
    <member name="P:System.Lazy`1.IsValueCreated">
      <summary>获取一个值，该值指示是否已为此 <see cref="T:System.Lazy`1" /> 实例创建一个值。</summary>
      <returns>如果已为此 <see cref="T:System.Lazy`1" /> 实例创建了一个值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Lazy`1.ToString">
      <summary>创建并返回此实例的 <see cref="P:System.Lazy`1.Value" /> 属性的字符串表示形式。</summary>
      <returns>如果已创建该值（即，如果 <see cref="M:System.Object.ToString" /> 属性返回 <see langword="true" />），则为对此实例的 <see cref="P:System.Lazy`1.Value" /> 属性调用 <see cref="P:System.Lazy`1.IsValueCreated" /> 方法所获得的结果。 否则为一个指示尚未创建该值的字符串。</returns>
      <exception cref="T:System.NullReferenceException">
        <see cref="P:System.Lazy`1.Value" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Lazy`1.Value">
      <summary>获取当前 <see cref="T:System.Lazy`1" /> 实例的延迟初始化值。</summary>
      <returns>当前 <see cref="T:System.Lazy`1" /> 实例的延迟初始化值。</returns>
      <exception cref="T:System.MemberAccessException">
        <see cref="T:System.Lazy`1" /> 实例初始化为使用正在迟缓初始化的类型的无参数构造函数，并且缺少访问该构造函数的权限。</exception>
      <exception cref="T:System.MissingMemberException">
        <see cref="T:System.Lazy`1" /> 实例初始化为使用正在迟缓初始化的类型的无参数构造函数，并且该类型没有无参数的公共构造函数。</exception>
      <exception cref="T:System.InvalidOperationException">初始化函数尝试访问此实例上的 <see cref="P:System.Lazy`1.Value" />。</exception>
    </member>
    <member name="T:System.Lazy`2">
      <summary>提供对对象及其关联的元数据的延迟间接引用，以供 Managed Extensibility Framework 使用。</summary>
      <typeparam name="T">所引用对象的类型。</typeparam>
      <typeparam name="TMetadata">元数据的类型。</typeparam>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1)">
      <summary>使用指定的元数据初始化 <see cref="T:System.Lazy`2" /> 类的新实例。</summary>
      <param name="metadata">与引用的对象关联的元数据。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Boolean)">
      <summary>使用指定的元数据和线程安全值初始化 <see cref="T:System.Lazy`2" /> 类的新实例。</summary>
      <param name="metadata">与引用的对象关联的元数据。</param>
      <param name="isThreadSafe">指示创建的 <see cref="T:System.Lazy`2" /> 对象是否是线程安全的。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(`1,System.Threading.LazyThreadSafetyMode)">
      <summary>使用指定的元数据和线程同步模式初始化 <see cref="T:System.Lazy`2" /> 类的新实例。</summary>
      <param name="metadata">与引用的对象关联的元数据。</param>
      <param name="mode">线程同步模式。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1)">
      <summary>使用指定的元数据初始化 <see cref="T:System.Lazy`2" /> 类的新实例，该实例使用指定函数来获取所引用对象。</summary>
      <param name="valueFactory">返回所引用对象的函数。</param>
      <param name="metadata">与引用的对象关联的元数据。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Boolean)">
      <summary>使用指定的元数据和线程安全值初始化 <see cref="T:System.Lazy`2" /> 类的新实例，该实例使用指定函数来获取所引用对象。</summary>
      <param name="valueFactory">返回所引用对象的函数。</param>
      <param name="metadata">与引用的对象关联的元数据。</param>
      <param name="isThreadSafe">指示创建的 <see cref="T:System.Lazy`2" /> 对象是否是线程安全的。</param>
    </member>
    <member name="M:System.Lazy`2.#ctor(System.Func{`0},`1,System.Threading.LazyThreadSafetyMode)">
      <summary>使用指定的元数据和线程同步模式初始化 <see cref="T:System.Lazy`2" /> 类的新实例，该实例使用指定函数来获取所引用对象。</summary>
      <param name="valueFactory">返回所引用对象的函数</param>
      <param name="metadata">与引用的对象关联的元数据。</param>
      <param name="mode">线程同步模式</param>
    </member>
    <member name="P:System.Lazy`2.Metadata">
      <summary>获取与引用的对象关联的元数据。</summary>
      <returns>与引用的对象关联的元数据。</returns>
    </member>
    <member name="T:System.LdapStyleUriParser">
      <summary>基于 轻型目录访问协议 (LDAP) 方案的可自定义分析器。</summary>
    </member>
    <member name="M:System.LdapStyleUriParser.#ctor">
      <summary>创建一个基于轻型目录访问协议 (LDAP) 方案的可自定义分析器。</summary>
    </member>
    <member name="T:System.MarshalByRefObject">
      <summary>在支持远程处理的应用程序中，允许跨应用程序域边界访问对象。</summary>
    </member>
    <member name="M:System.MarshalByRefObject.#ctor">
      <summary>初始化 <see cref="T:System.MarshalByRefObject" /> 类的新实例。</summary>
    </member>
    <member name="M:System.MarshalByRefObject.GetLifetimeService">
      <summary>检索控制此实例的生存期策略的当前生存期服务对象。</summary>
      <returns>
        <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> 类型的对象，用于控制此实例的生存期策略。</returns>
      <exception cref="T:System.Security.SecurityException">直接调用方没有基础结构权限。</exception>
    </member>
    <member name="M:System.MarshalByRefObject.InitializeLifetimeService">
      <summary>获取生存期服务对象来控制此实例的生存期策略。</summary>
      <returns>
        <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> 类型的对象，用于控制此实例的生存期策略。 这是此实例当前的生存期服务对象（如果存在）；否则为初始化为 <see cref="P:System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime" /> 属性的值的新生存期服务对象。</returns>
      <exception cref="T:System.Security.SecurityException">直接调用方没有基础结构权限。</exception>
    </member>
    <member name="M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)">
      <summary>创建当前 <see cref="T:System.MarshalByRefObject" /> 对象的浅表副本。</summary>
      <param name="cloneIdentity">如果要删除当前 <see cref="T:System.MarshalByRefObject" /> 对象的标识，则为 <see langword="false" />，这使该对象在跨远程边界封送时分配一个新标识。 值 <see langword="false" /> 通常比较合适。 如果为 <see langword="true" />，则将当前 <see cref="T:System.MarshalByRefObject" /> 对象的标识复制到它的克隆项，这会将远程客户端调用路由到远程服务器对象。</param>
      <returns>当前 <see cref="T:System.MarshalByRefObject" /> 对象的浅表副本。</returns>
    </member>
    <member name="T:System.MemberAccessException">
      <summary>访问类成员的尝试失败时引发的异常。</summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor">
      <summary>初始化 <see cref="T:System.MemberAccessException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.MemberAccessException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.MemberAccessException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.MemberAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.MemberAccessException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="T:System.Memory`1">
      <summary>表示连续内存区域。</summary>
      <typeparam name="T">中项的类型<see cref="T:System.Memory`1" />。</typeparam>
    </member>
    <member name="M:System.Memory`1.#ctor(`0[])">
      <summary>在整个指定数组上创建新的 <see cref="T:System.Memory`1" /> 对象。</summary>
      <param name="array">用来从中创建 <see cref="T:System.Memory`1" /> 对象的数组。</param>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="T" /> 为引用类型，并且 <paramref name="array" /> 不是 <paramref name="T" /> 类型的数组。
或
数组是协变。</exception>
    </member>
    <member name="M:System.Memory`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>从指定索引开始，创建包含数组的指定元素数的新 <see cref="T:System.Memory`1" /> 对象。</summary>
      <param name="array">源数组。</param>
      <param name="start">要包括在新的 <see cref="T:System.Memory`1" /> 内的第一个元素的索引。</param>
      <param name="length">要包括在新的 <see cref="T:System.Memory`1" /> 中的元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="array" /> 是 <see langword="null" />，但 <paramref name="start" /> 或 <paramref name="length" /> 不为零。
或
<paramref name="start" /> 在数组的界限外。

或 -

<paramref name="start" /> 和 <paramref name="length" /> 超过数组中的元素数。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="T" /> 为引用类型，并且 <paramref name="array" /> 不是 <paramref name="T" /> 类型的数组。</exception>
    </member>
    <member name="M:System.Memory`1.CopyTo(System.Memory{`0})">
      <summary>将 <see cref="T:System.Memory`1" /> 对象的内容复制到目标 <see cref="T:System.Memory`1" /> 对象。</summary>
      <param name="destination">目标 <see cref="T:System.Memory`1" /> 对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 的长度小于当前实例的长度。</exception>
    </member>
    <member name="P:System.Memory`1.Empty">
      <summary>返回空的 <see cref="T:System.Memory`1" /> 对象。</summary>
      <returns>一个空对象。</returns>
    </member>
    <member name="M:System.Memory`1.Equals(System.Memory{`0})">
      <summary>确定指定的 <see cref="T:System.Memory`1" /> 对象是否等于当前对象。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <returns>如果当前实例与 <paramref name="other" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Memory`1.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <param name="obj">要与当前实例进行比较的对象。</param>
      <returns>如果当前实例与 <paramref name="obj" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Memory`1.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Memory`1.IsEmpty">
      <summary>指示当前实例是否为空。</summary>
      <returns>
        <see langword="true" />如果当前实例为空, 则为; 否则为。否则为<see langword="false" />。</returns>
    </member>
    <member name="P:System.Memory`1.Length">
      <summary>获取当前实例中的项数。</summary>
      <returns>当前实例中的项数。</returns>
    </member>
    <member name="M:System.Memory`1.op_Implicit(System.ArraySegment{`0})~System.Memory{`0}">
      <summary>定义从 <see cref="T:System.ArraySegment`1" /> 对象到 <see cref="T:System.Memory`1" /> 对象的隐式转换。</summary>
      <param name="segment">要转换的对象。</param>
      <returns>被转换的 <see cref="T:System.ArraySegment`1" /> 对象。</returns>
    </member>
    <member name="M:System.Memory`1.op_Implicit(System.Memory{`0})~System.ReadOnlyMemory{`0}">
      <summary>定义从 <see cref="T:System.Memory`1" /> 对象到 <see cref="T:System.ReadOnlyMemory`1" /> 对象的隐式转换。</summary>
      <param name="memory">要转换的对象。</param>
      <returns>被转换的对象。</returns>
    </member>
    <member name="M:System.Memory`1.op_Implicit(T[])~System.Memory{`0}">
      <summary>定义从数组到 <see cref="T:System.Memory`1" /> 对象的隐式转换。</summary>
      <param name="array">要转换的数组。</param>
      <returns>被转换的对象。</returns>
    </member>
    <member name="M:System.Memory`1.Pin">
      <summary>为 <see cref="T:System.Memory`1" /> 对象创建句柄。</summary>
      <returns>
        <see cref="T:System.Memory`1" /> 对象的句柄。</returns>
      <exception cref="T:System.ArgumentException">具有非基元（非直接复制到本机结构中的）成员的实例不能被固定。</exception>
    </member>
    <member name="M:System.Memory`1.Slice(System.Int32)">
      <summary>从指定索引处开始的当前内存外形成切片。</summary>
      <param name="start">开始切片处的索引。</param>
      <returns>包含当前实例的所有元素（从 <paramref name="start" /> 到实例末尾）的对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" /> 小于零或大于 <see cref="P:System.Memory`1.Length" />。</exception>
    </member>
    <member name="M:System.Memory`1.Slice(System.Int32,System.Int32)">
      <summary>从指定长度的指定索引处开始，在当前内存外形成切片。</summary>
      <param name="start">开始切片处的索引。</param>
      <param name="length">要包括在切片中的元素数。</param>
      <returns>包含当前实例的 <paramref name="length" /> 元素（从 <paramref name="start" /> 开始）的对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" /> 小于零或大于 <see cref="P:System.Memory`1.Length" />。
或
<paramref name="length" /> 大于 <see cref="P:System.Memory`1.Length" /> - <paramref name="start" /></exception>
    </member>
    <member name="P:System.Memory`1.Span">
      <summary>返回当前实例的范围。</summary>
      <returns>从当前<see cref="T:System.Memory`1" />对象创建的范围。</returns>
    </member>
    <member name="M:System.Memory`1.ToArray">
      <summary>将此内存的内容复制到新数组中。</summary>
      <returns>包含当前内存中元素的数组。</returns>
    </member>
    <member name="M:System.Memory`1.ToString">
      <summary>返回此 <see cref="T:System.Memory`1" /> 对象的字符串表示形式。</summary>
      <returns>此 <see cref="T:System.Memory`1" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="M:System.Memory`1.TryCopyTo(System.Memory{`0})">
      <summary>将此内存的内容复制到目标 <see cref="T:System.Memory`1" /> 实例。</summary>
      <param name="destination">目标 <see cref="T:System.Memory`1" /> 对象。</param>
      <returns>如果复制操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.MethodAccessException">
      <summary>存在想要访问某个方法（如访问部分可信代码中的私有方法）的无效尝试时，所引发的异常。</summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor">
      <summary>初始化 <see cref="T:System.MethodAccessException" /> 类的新实例，将新实例的 <see cref="P:System.Exception.Message" /> 属性设置为系统提供的描述错误的消息，如“试图访问该方法时失败”。 此消息将当前系统区域性考虑在内。</summary>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.MethodAccessException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.MethodAccessException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.MethodAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.MethodAccessException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="T:System.MidpointRounding">
      <summary>指定数学舍入方法应如何处理两个数字间的中间值。</summary>
    </member>
    <member name="F:System.MidpointRounding.AwayFromZero">
      <summary>当一个数字是其他两个数字的中间值时，会将其舍入为两个值中绝对值较小的值。</summary>
    </member>
    <member name="F:System.MidpointRounding.ToEven">
      <summary>当一个数字是其他两个数字的中间值时，会将其舍入为最接近的偶数。</summary>
    </member>
    <member name="F:System.MidpointRounding.ToNegativeInfinity">
      <summary>当一个数字是其他两个数字的中间值时，会将其舍入为最接近且不大于无限精确的结果。</summary>
    </member>
    <member name="F:System.MidpointRounding.ToPositiveInfinity">
      <summary>当一个数字是其他两个数字的中间值时，会将其舍入为最接近且不小于无限精确的结果。</summary>
    </member>
    <member name="F:System.MidpointRounding.ToZero">
      <summary>当一个数字是其他两个数字的中间值时，会将其舍入为最接近结果，而不是无限精确的结果。</summary>
    </member>
    <member name="T:System.MissingFieldException">
      <summary>试图动态访问不存在的字段时引发的异常。 如果类库中的某个字段已被移除或重命名，请重新编译引用该库的所有程序集。</summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor">
      <summary>初始化 <see cref="T:System.MissingFieldException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.MissingFieldException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.MissingFieldException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.MissingFieldException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="M:System.MissingFieldException.#ctor(System.String,System.String)">
      <summary>使用指定的类名称和字段名称初始化 <see cref="T:System.MissingFieldException" /> 类的新实例。</summary>
      <param name="className">试图访问不存在的字段时所用的类名。</param>
      <param name="fieldName">无法访问的字段名。</param>
    </member>
    <member name="P:System.MissingFieldException.Message">
      <summary>获取显示缺少字段的签名、类名和字段名的文本字符串。 此属性是只读的。</summary>
      <returns>错误消息字符串。</returns>
    </member>
    <member name="T:System.MissingMemberException">
      <summary>当尝试动态访问一个不存在或未声明为 public 的类成员时引发的异常。 如果类库中的某个成员已移除或重命名，请重新编译引用该库的所有程序集。</summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor">
      <summary>初始化 <see cref="T:System.MissingMemberException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.MissingMemberException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.MissingMemberException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息以及对内部异常（为该异常的根源）的引用来初始化 <see cref="T:System.MissingMemberException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前 <see langword="Exception" /> 的 <see cref="T:System.Exception" /> 的实例。 如果 <paramref name="inner" /> 不是空引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理 <paramref name="inner" /> 的 catch 块中引发当前的 <see langword="Exception" />。</param>
    </member>
    <member name="M:System.MissingMemberException.#ctor(System.String,System.String)">
      <summary>使用指定的类名称和成员名称初始化 <see cref="T:System.MissingMemberException" /> 类的新实例。</summary>
      <param name="className">试图访问不存在的成员所用的类名称。</param>
      <param name="memberName">无法访问的成员名称。</param>
    </member>
    <member name="F:System.MissingMemberException.ClassName">
      <summary>保留缺少成员的类名。</summary>
    </member>
    <member name="M:System.MissingMemberException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用类名、成员名、缺少成员的签名和其他异常信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 对象为 <see langword="null" />。</exception>
    </member>
    <member name="F:System.MissingMemberException.MemberName">
      <summary>保留缺少成员的名称。</summary>
    </member>
    <member name="P:System.MissingMemberException.Message">
      <summary>获取显示类名、成员名和缺少成员签名的文本字符串。</summary>
      <returns>错误消息字符串。</returns>
    </member>
    <member name="F:System.MissingMemberException.Signature">
      <summary>保留缺少成员的签名。</summary>
    </member>
    <member name="T:System.MissingMethodException">
      <summary>试图动态访问不存在的方法时引发的异常。</summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor">
      <summary>初始化 <see cref="T:System.MissingMethodException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.MissingMethodException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.MissingMethodException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.MissingMethodException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="M:System.MissingMethodException.#ctor(System.String,System.String)">
      <summary>使用指定的类名称和方法名称初始化 <see cref="T:System.MissingMethodException" /> 类的新实例。</summary>
      <param name="className">试图访问不存在的方法时所用的类名。</param>
      <param name="methodName">无法访问的方法名。</param>
    </member>
    <member name="P:System.MissingMethodException.Message">
      <summary>获取显示类名、方法名称和缺少方法签名的文本字符串。 此属性是只读的。</summary>
      <returns>错误消息字符串。</returns>
    </member>
    <member name="T:System.ModuleHandle">
      <summary>表示模块的运行时句柄。</summary>
    </member>
    <member name="F:System.ModuleHandle.EmptyHandle">
      <summary>表示一个空模块句柄。</summary>
    </member>
    <member name="M:System.ModuleHandle.Equals(System.ModuleHandle)">
      <summary>返回一个 <see cref="T:System.Boolean" /> 值，该值指示指定的 <see cref="T:System.ModuleHandle" /> 结构是否等于当前的 <see cref="T:System.ModuleHandle" />。</summary>
      <param name="handle">要与当前 <see cref="T:System.ModuleHandle" /> 比较的 <see cref="T:System.ModuleHandle" /> 结构。</param>
      <returns>如果 <paramref name="handle" /> 等于当前的 <see cref="T:System.ModuleHandle" /> 结构，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ModuleHandle.Equals(System.Object)">
      <summary>返回一个 <see cref="T:System.Boolean" /> 值，该值指示指定对象是否是一个 <see cref="T:System.ModuleHandle" /> 结构，以及是否等于当前的 <see cref="T:System.ModuleHandle" />。</summary>
      <param name="obj">要与当前 <see cref="T:System.ModuleHandle" /> 结构比较的对象。</param>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.ModuleHandle" /> 结构，且等于当前 <see cref="T:System.ModuleHandle" /> 结构，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ModuleHandle.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>一个 32 位带符号整数，它是此实例的哈希代码。</returns>
    </member>
    <member name="M:System.ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(System.Int32)">
      <summary>返回由指定元数据标记标识的字段的运行时句柄。</summary>
      <param name="fieldToken">一个元数据令牌，用于标识模块中的一个字段。</param>
      <returns>由 <paramref name="fieldToken" /> 标识的字段的 <see cref="T:System.RuntimeFieldHandle" />。</returns>
    </member>
    <member name="M:System.ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(System.Int32)">
      <summary>返回由指定元数据标记标识的方法或构造函数的运行时方法句柄。</summary>
      <param name="methodToken">一个元数据令牌，用于标识模块中的方法或构造函数。</param>
      <returns>由 <paramref name="methodToken" /> 标识的方法或构造函数的 <see cref="T:System.RuntimeMethodHandle" />。</returns>
    </member>
    <member name="M:System.ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(System.Int32)">
      <summary>返回由指定元数据标记标识的类型的运行时类型句柄。</summary>
      <param name="typeToken">一个元数据令牌，用于标识模块中的一个类型。</param>
      <returns>由 <paramref name="typeToken" /> 标识的类型的 <see cref="T:System.RuntimeTypeHandle" />。</returns>
    </member>
    <member name="P:System.ModuleHandle.MDStreamVersion">
      <summary>获取元数据流版本。</summary>
      <returns>表示元数据流版本的 32 位整数。 高序位的两个字节表示主版本号，低序位的两个字节表示次版本号。</returns>
    </member>
    <member name="M:System.ModuleHandle.op_Equality(System.ModuleHandle,System.ModuleHandle)">
      <summary>测试两个 <see cref="T:System.ModuleHandle" /> 结构是否相等。</summary>
      <param name="left">相等运算符左侧的 <see cref="T:System.ModuleHandle" /> 结构。</param>
      <param name="right">相等运算符右侧的 <see cref="T:System.ModuleHandle" /> 结构。</param>
      <returns>如果 <see cref="T:System.ModuleHandle" /> 结构相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ModuleHandle.op_Inequality(System.ModuleHandle,System.ModuleHandle)">
      <summary>测试两个 <see cref="T:System.ModuleHandle" /> 结构是否相等。</summary>
      <param name="left">不等运算符左侧的 <see cref="T:System.ModuleHandle" /> 结构。</param>
      <param name="right">不等运算符右侧的 <see cref="T:System.ModuleHandle" /> 结构。</param>
      <returns>如果 <see cref="T:System.ModuleHandle" /> 结构不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ModuleHandle.ResolveFieldHandle(System.Int32)">
      <summary>返回由指定元数据标记标识的字段的运行时句柄。</summary>
      <param name="fieldToken">一个元数据令牌，用于标识模块中的一个字段。</param>
      <returns>由 <paramref name="fieldToken" /> 标识的字段的 <see cref="T:System.RuntimeFieldHandle" />。</returns>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="metadataToken" /> 不是当前模块范围内的有效令牌。  
或 
 <paramref name="metadataToken" /> 不是当前模块范围内的字段的令牌。  
或 
 <paramref name="metadataToken" /> 标识了一个字段，该字段的父 <see langword="TypeSpec" /> 有一个包含元素类型 <see langword="var" /> 或 <see langword="mvar" /> 的签名。</exception>
      <exception cref="T:System.InvalidOperationException">该方法在空字段句柄上调用。</exception>
    </member>
    <member name="M:System.ModuleHandle.ResolveFieldHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])">
      <summary>返回由指定元数据标记标识的字段的运行时字段句柄，指定标记所在范围内的类型和方法的泛型类型参数。</summary>
      <param name="fieldToken">一个元数据令牌，用于标识模块中的一个字段。</param>
      <param name="typeInstantiationContext">
        <see cref="T:System.RuntimeTypeHandle" /> 结构的数组，表示标记所在范围内的类型的泛型类型参数，如果类型不是泛型，则为 <see langword="null" />。</param>
      <param name="methodInstantiationContext">
        <see cref="T:System.RuntimeTypeHandle" /> 结构的数组，表示标记所在范围内的方法的泛型类型参数，如果方法不是泛型，则为 <see langword="null" />。</param>
      <returns>由 <paramref name="fieldToken" /> 标识的字段的 <see cref="T:System.RuntimeFieldHandle" />。</returns>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="metadataToken" /> 不是当前模块范围内的有效令牌。  
或 
 <paramref name="metadataToken" /> 不是当前模块范围内的字段的令牌。  
或 
 <paramref name="metadataToken" /> 标识了一个字段，该字段的父 <see langword="TypeSpec" /> 有一个包含元素类型 <see langword="var" /> 或 <see langword="mvar" /> 的签名。</exception>
      <exception cref="T:System.InvalidOperationException">该方法在空字段句柄上调用。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldToken" /> 不是有效的令牌。</exception>
    </member>
    <member name="M:System.ModuleHandle.ResolveMethodHandle(System.Int32)">
      <summary>返回由指定元数据标记标识的方法或构造函数的运行时方法句柄。</summary>
      <param name="methodToken">一个元数据令牌，用于标识模块中的方法或构造函数。</param>
      <returns>由 <paramref name="methodToken" /> 标识的方法或构造函数的 <see cref="T:System.RuntimeMethodHandle" />。</returns>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="methodToken" /> 不是当前模块中方法的有效元数据标记。  

或 - 
<paramref name="metadataToken" /> 不是当前模块范围内的方法或构造函数的令牌。  

或 - 
<paramref name="metadataToken" /> 是一个 <see langword="MethodSpec" />，它的签名中包含元素类型 <see langword="var" /> 或 <see langword="mvar" />。</exception>
      <exception cref="T:System.InvalidOperationException">该方法在空方法句柄上调用。</exception>
    </member>
    <member name="M:System.ModuleHandle.ResolveMethodHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])">
      <summary>返回由指定元数据标记标识的方法或构造函数的运行时方法句柄，指定标记所在范围内的类型和方法的泛型类型参数。</summary>
      <param name="methodToken">一个元数据令牌，用于标识模块中的方法或构造函数。</param>
      <param name="typeInstantiationContext">
        <see cref="T:System.RuntimeTypeHandle" /> 结构的数组，表示标记所在范围内的类型的泛型类型参数，如果类型不是泛型，则为 <see langword="null" />。</param>
      <param name="methodInstantiationContext">
        <see cref="T:System.RuntimeTypeHandle" /> 结构的数组，表示标记所在范围内的方法的泛型类型参数，如果方法不是泛型，则为 <see langword="null" />。</param>
      <returns>由 <paramref name="methodToken" /> 标识的方法或构造函数的 <see cref="T:System.RuntimeMethodHandle" />。</returns>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="methodToken" /> 不是当前模块中方法的有效元数据标记。  
或 
 <paramref name="metadataToken" /> 不是当前模块范围内的方法或构造函数的令牌。  

或 - 
<paramref name="metadataToken" /> 是一个 <see langword="MethodSpec" />，它的签名中包含元素类型 <see langword="var" /> 或 <see langword="mvar" />。</exception>
      <exception cref="T:System.InvalidOperationException">该方法在空方法句柄上调用。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="methodToken" /> 不是有效的令牌。</exception>
    </member>
    <member name="M:System.ModuleHandle.ResolveTypeHandle(System.Int32)">
      <summary>返回由指定元数据标记标识的类型的运行时类型句柄。</summary>
      <param name="typeToken">一个元数据令牌，用于标识模块中的一个类型。</param>
      <returns>由 <paramref name="typeToken" /> 标识的类型的 <see cref="T:System.RuntimeTypeHandle" />。</returns>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="typeToken" /> 不是当前模块中类型的有效元数据标记。  
或 
 <paramref name="metadataToken" /> 不是当前模块范围内的类型的令牌。  

或 - 
<paramref name="metadataToken" /> 是一个 <see langword="TypeSpec" />，它的签名中包含元素类型 <see langword="var" /> 或 <see langword="mvar" />。</exception>
      <exception cref="T:System.InvalidOperationException">该方法在空类型句柄上调用。</exception>
    </member>
    <member name="M:System.ModuleHandle.ResolveTypeHandle(System.Int32,System.RuntimeTypeHandle[],System.RuntimeTypeHandle[])">
      <summary>返回由指定元数据标记标识的类型的运行时类型句柄，指定标记所在范围内的类型和方法的泛型类型参数。</summary>
      <param name="typeToken">一个元数据令牌，用于标识模块中的一个类型。</param>
      <param name="typeInstantiationContext">
        <see cref="T:System.RuntimeTypeHandle" /> 结构的数组，表示标记所在范围内的类型的泛型类型参数，如果类型不是泛型，则为 <see langword="null" />。</param>
      <param name="methodInstantiationContext">
        <see cref="T:System.RuntimeTypeHandle" /> 结构对象的数组，表示标记所在范围内的方法的泛型类型参数，如果方法不是泛型，则为 <see langword="null" />。</param>
      <returns>由 <paramref name="typeToken" /> 标识的类型的 <see cref="T:System.RuntimeTypeHandle" />。</returns>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="typeToken" /> 不是当前模块中类型的有效元数据标记。  
或 
 <paramref name="metadataToken" /> 不是当前模块范围内的类型的令牌。  
或 
 <paramref name="metadataToken" /> 是一个 <see langword="TypeSpec" />，它的签名中包含元素类型 <see langword="var" /> 或 <see langword="mvar" />。</exception>
      <exception cref="T:System.InvalidOperationException">该方法在空类型句柄上调用。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="typeToken" /> 不是有效的令牌。</exception>
    </member>
    <member name="T:System.MTAThreadAttribute">
      <summary>指示应用程序的 COM 线程模型为多线程单元 (MTA)。</summary>
    </member>
    <member name="M:System.MTAThreadAttribute.#ctor">
      <summary>初始化 <see cref="T:System.MTAThreadAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.MulticastDelegate">
      <summary>表示多路广播委托；即，其调用列表中可以拥有多个元素的委托。</summary>
    </member>
    <member name="M:System.MulticastDelegate.#ctor(System.Object,System.String)">
      <summary>初始化 <see cref="T:System.MulticastDelegate" /> 类的新实例。</summary>
      <param name="target">在其上定义 <paramref name="method" /> 的对象。</param>
      <param name="method">为其创建委托的方法的名称。</param>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
    </member>
    <member name="M:System.MulticastDelegate.#ctor(System.Type,System.String)">
      <summary>初始化 <see cref="T:System.MulticastDelegate" /> 类的新实例。</summary>
      <param name="target">在其上定义 <paramref name="method" /> 的对象的类型。</param>
      <param name="method">为其创建委托的静态方法的名称。</param>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
    </member>
    <member name="M:System.MulticastDelegate.CombineImpl(System.Delegate)">
      <summary>将此 <see cref="T:System.Delegate" /> 与指定的 <see cref="T:System.Delegate" /> 合并，以形成一个新委托。</summary>
      <param name="follow">将与此委托进行合并的委托。</param>
      <returns>一个委托，它是 <see cref="T:System.MulticastDelegate" /> 调用列表的新根。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="follow" /> 没有与此实例相同的类型。</exception>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
    </member>
    <member name="M:System.MulticastDelegate.Equals(System.Object)">
      <summary>确定此多路广播委托和指定的对象是否相等。</summary>
      <param name="obj">与该实例进行比较的对象。</param>
      <returns>如果 <paramref name="obj" /> 和此实例具有相同的调用列表，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
    </member>
    <member name="M:System.MulticastDelegate.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
    </member>
    <member name="M:System.MulticastDelegate.GetInvocationList">
      <summary>按照调用顺序返回此多路广播委托的调用列表。</summary>
      <returns>一个委托数组，这些委托的调用列表合起来与此实例的调用列表一致。</returns>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
    </member>
    <member name="M:System.MulticastDelegate.GetMethodImpl">
      <summary>返回由当前的 <see cref="T:System.MulticastDelegate" /> 表示的静态方法。</summary>
      <returns>由当前的 <see cref="T:System.MulticastDelegate" /> 表示的静态方法。</returns>
    </member>
    <member name="M:System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化该实例所需的所有数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">一个对象，它保存将此实例序列化或反序列化所需的全部数据。</param>
      <param name="context">（保留）存储和检索序列化数据的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">发生了序列化错误。</exception>
    </member>
    <member name="M:System.MulticastDelegate.op_Equality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>确定两个 <see cref="T:System.MulticastDelegate" /> 对象是否相等。</summary>
      <param name="d1">左操作数。</param>
      <param name="d2">右操作数。</param>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 具有相同的调用列表，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
    </member>
    <member name="M:System.MulticastDelegate.op_Inequality(System.MulticastDelegate,System.MulticastDelegate)">
      <summary>确定两个 <see cref="T:System.MulticastDelegate" /> 对象是否相等。</summary>
      <param name="d1">左操作数。</param>
      <param name="d2">右操作数。</param>
      <returns>如果 <paramref name="d1" /> 和 <paramref name="d2" /> 没有相同的调用列表，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
    </member>
    <member name="M:System.MulticastDelegate.RemoveImpl(System.Delegate)">
      <summary>从此 <see cref="T:System.MulticastDelegate" /> 的调用列表中移除与指定委托相等的元素。</summary>
      <param name="value">要在调用列表中搜索的委托。</param>
      <returns>如果在此实例的调用列表中找到 <paramref name="value" />，则为其调用列表中没有 <paramref name="value" /> 的新 <see cref="T:System.Delegate" />；否则为此实例（带有其原始调用列表）。</returns>
      <exception cref="T:System.MemberAccessException">无法创建抽象类的实例，或者此成员是使用晚期绑定机制调用的。</exception>
    </member>
    <member name="T:System.MulticastNotSupportedException">
      <summary>尝试组合两个基于 <see cref="T:System.Delegate" /> 类型而非 <see cref="T:System.MulticastDelegate" /> 类型的委托时引发的异常。 此类不能被继承。</summary>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor">
      <summary>初始化 <see cref="T:System.MulticastNotSupportedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.MulticastNotSupportedException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.MulticastNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.MulticastNotSupportedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="T:System.NetPipeStyleUriParser">
      <summary>基于“Indigo”系统的 NetPipe 方案的分析器。</summary>
    </member>
    <member name="M:System.NetPipeStyleUriParser.#ctor">
      <summary>创建基于“Indigo”系统的 NetPipe 方案的分析器。</summary>
    </member>
    <member name="T:System.NetTcpStyleUriParser">
      <summary>基于“Indigo”系统的 NetTcp 方案的分析器。</summary>
    </member>
    <member name="M:System.NetTcpStyleUriParser.#ctor">
      <summary>基于“Indigo”系统的 NetTcp 方案创建分析器。</summary>
    </member>
    <member name="T:System.NewsStyleUriParser">
      <summary>基于使用网络新闻传输协议 (NNTP) 的新闻方案的可自定义分析器。</summary>
    </member>
    <member name="M:System.NewsStyleUriParser.#ctor">
      <summary>创建一个基于使用网络新闻传输协议 (NNTP) 的新闻方案的可自定义分析器。</summary>
    </member>
    <member name="T:System.NonSerializedAttribute">
      <summary>指示可序列化类的某个字段不应被序列化。 此类不能被继承。</summary>
    </member>
    <member name="M:System.NonSerializedAttribute.#ctor">
      <summary>初始化 <see cref="T:System.NonSerializedAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.NotFiniteNumberException">
      <summary>当浮点值为正无穷大、负无穷大或非数字 (NaN) 时引发的异常。</summary>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor">
      <summary>初始化 <see cref="T:System.NotFiniteNumberException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.Double)">
      <summary>使用无效数字初始化 <see cref="T:System.NotFiniteNumberException" /> 类的新实例。</summary>
      <param name="offendingNumber">引发异常的参数的值。</param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.NotFiniteNumberException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.NotFiniteNumberException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String,System.Double)">
      <summary>使用指定的错误消息和无效数字初始化 <see cref="T:System.NotFiniteNumberException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
      <param name="offendingNumber">引发异常的参数的值。</param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String,System.Double,System.Exception)">
      <summary>使用指定的错误消息、无效数字和对内部异常（为该异常的根源）的引用来初始化 <see cref="T:System.NotFiniteNumberException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="offendingNumber">引发异常的参数的值。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="M:System.NotFiniteNumberException.#ctor(System.String,System.Exception)">
      <summary>使用指定错误消息和对作为此异常的根本原因的内部异常的引用来初始化 <see cref="T:System.NotFiniteNumberException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="M:System.NotFiniteNumberException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用无效数字和附加异常信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 对象为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.NotFiniteNumberException.OffendingNumber">
      <summary>获取无效数字，它可以是正无穷大、负无穷大或非数字 (NaN)。</summary>
      <returns>无效数字。</returns>
    </member>
    <member name="T:System.NotImplementedException">
      <summary>在无法实现请求的方法或操作时引发的异常。</summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.NotImplementedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.NotImplementedException" /> 类的新实例。</summary>
      <param name="info">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.NotImplementedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.NotImplementedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.NotImplementedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.NotSupportedException">
      <summary>当调用的方法不受支持，或试图读取、查找或写入不支持调用功能的流时引发的异常。</summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor">
      <summary>初始化 <see cref="T:System.NotSupportedException" /> 类的新实例，将新实例的 <see cref="P:System.Exception.Message" /> 属性设置为系统提供的描述错误的消息。 此消息将当前系统区域性考虑在内。</summary>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.NotSupportedException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.NotSupportedException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.NotSupportedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.NotSupportedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为空引用，则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="T:System.Nullable">
      <summary>支持可分配有 <see langword="null" /> 的值类型。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Nullable.Compare``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>比较两个 <see cref="T:System.Nullable`1" /> 对象的相对值。</summary>
      <param name="n1">一个 <see cref="T:System.Nullable`1" /> 对象。</param>
      <param name="n2">一个 <see cref="T:System.Nullable`1" /> 对象。</param>
      <typeparam name="T">
        <paramref name="n1" /> 和 <paramref name="n2" /> 参数的基础值类型。</typeparam>
      <returns>一个整数，指示 <paramref name="n1" /> 和 <paramref name="n2" /> 参数的相对值。  
  返回值 
  说明 
  小于零 
  <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="false" />，<paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="true" />。  

- 或 - 
<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="true" />，并且 <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.Value" /> 属性的值小于 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.Value" /> 属性的值。  

  零 
  <paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="false" />。  

或 
<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="true" />，并且 <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.Value" /> 属性的值等于 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.Value" /> 属性的值。  

  大于零 
  <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="true" />，<paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="false" />。  

- 或 - 
<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="true" />，并且 <paramref name="n1" /> 的 <see cref="P:System.Nullable`1.Value" /> 属性的值大于 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.Value" /> 属性的值。</returns>
    </member>
    <member name="M:System.Nullable.Equals``1(System.Nullable{``0},System.Nullable{``0})">
      <summary>指示两个指定的 <see cref="T:System.Nullable`1" /> 对象是否相等。</summary>
      <param name="n1">一个 <see cref="T:System.Nullable`1" /> 对象。</param>
      <param name="n2">一个 <see cref="T:System.Nullable`1" /> 对象。</param>
      <typeparam name="T">
        <paramref name="n1" /> 和 <paramref name="n2" /> 参数的基础值类型。</typeparam>
      <returns>如果 <paramref name="n1" /> 参数等于 <paramref name="n2" /> 参数，则为 <see langword="true" />；否则为 <see langword="false" />。  
返回值取决于所比较的两个参数的 <see cref="P:System.Nullable`1.HasValue" /> 和 <see cref="P:System.Nullable`1.Value" /> 属性。  
  返回值 
  说明 
 <see langword="true" /><paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="false" />。  

或 
<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="true" />，并且参数的 <see cref="P:System.Nullable`1.Value" /> 属性相等。  

 <see langword="false" /> 一个参数的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="true" />，另一个参数的该属性为 <see langword="false" />。  

- 或 - 
<paramref name="n1" /> 和 <paramref name="n2" /> 的 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="true" />，并且参数的 <see cref="P:System.Nullable`1.Value" /> 属性不相等。</returns>
    </member>
    <member name="M:System.Nullable.GetUnderlyingType(System.Type)">
      <summary>返回指定可以为 null 的类型的基础类型参数。</summary>
      <param name="nullableType">一个 <see cref="T:System.Type" /> 对象，描述关闭的泛型可以为 null 的类型。</param>
      <returns>如果 <paramref name="nullableType" /> 参数为关闭的泛型可以为 null 的类型，则为 <paramref name="nullableType" /> 参数的类型变量；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nullableType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Nullable`1">
      <summary>表示可分配有 <see langword="null" /> 的值类型。</summary>
      <typeparam name="T">
        <see cref="T:System.Nullable`1" /> 泛型类型的基础值类型。</typeparam>
    </member>
    <member name="M:System.Nullable`1.#ctor(`0)">
      <summary>将 <see cref="T:System.Nullable`1" /> 结构的新实例初始化为指定值。</summary>
      <param name="value">一个值类型。</param>
    </member>
    <member name="M:System.Nullable`1.Equals(System.Object)">
      <summary>指示当前 <see cref="T:System.Nullable`1" /> 对象是否与指定的对象相等。</summary>
      <param name="other">一个对象。</param>
      <returns>如果 <paramref name="other" /> 等于当前的 <see cref="T:System.Nullable`1" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。  
此表描述如何定义所比较值的相等性： 
  返回值 
  说明 
 <see langword="true" /><see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="false" />，并且 <paramref name="other" /> 参数为 <see langword="null" />。 即，根据定义，两个 null 值相等。  

或 - 
<see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="true" />，并且 <see cref="P:System.Nullable`1.Value" /> 属性返回的值等于 <paramref name="other" /> 参数。  

 <see langword="false" /> 当前 <see cref="P:System.Nullable`1.HasValue" /> 结构的 <see cref="T:System.Nullable`1" /> 属性为 <see langword="true" />，并且 <paramref name="other" /> 参数为 <see langword="null" />。  
或 
当前 <see cref="P:System.Nullable`1.HasValue" /> 结构的 <see cref="T:System.Nullable`1" /> 属性为 <see langword="false" />，并且 <paramref name="other" /> 参数不为 <see langword="null" />。  
或 
当前 <see cref="P:System.Nullable`1.HasValue" /> 结构的 <see cref="T:System.Nullable`1" /> 属性为 <see langword="true" />，并且 <see cref="P:System.Nullable`1.Value" /> 属性返回的值不等于 <paramref name="other" /> 参数。</returns>
    </member>
    <member name="M:System.Nullable`1.GetHashCode">
      <summary>检索由 <see cref="P:System.Nullable`1.Value" /> 属性返回的对象的哈希代码。</summary>
      <returns>如果 <see cref="P:System.Nullable`1.Value" /> 属性为 <see langword="true" />，则为 <see cref="P:System.Nullable`1.HasValue" /> 属性返回的对象的哈希代码；如果 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="false" />，则为零。</returns>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault">
      <summary>检索当前 <see cref="T:System.Nullable`1" /> 对象的值，或基础类型的默认值。</summary>
      <returns>如果 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="true" />，则为 <see cref="P:System.Nullable`1.Value" /> 属性的值；否则为基础类型的默认值。</returns>
    </member>
    <member name="M:System.Nullable`1.GetValueOrDefault(`0)">
      <summary>检索当前 <see cref="T:System.Nullable`1" /> 对象的值或指定的默认值。</summary>
      <param name="defaultValue">如果 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="false" />，则为一个返回值。</param>
      <returns>如果 <see cref="P:System.Nullable`1.Value" /> 属性为 <see langword="true" />，则为 <see cref="P:System.Nullable`1.HasValue" /> 属性的值；否则为 <paramref name="defaultValue" /> 参数。</returns>
    </member>
    <member name="P:System.Nullable`1.HasValue">
      <summary>获取一个值，该值指示 <see cref="T:System.Nullable`1" /> 对象是否具有基础类型的有效值。</summary>
      <returns>如果当前的 <see langword="true" /> 对象具有值，则为 <see cref="T:System.Nullable`1" />；如果当前的 <see cref="T:System.Nullable`1" /> 对象没有值，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Nullable`1.op_Explicit(System.Nullable{`0})~T">
      <summary>定义 <see cref="T:System.Nullable`1" /> 实例到其基础值的显式转换。</summary>
      <param name="value">可以为 Null 的值。</param>
      <returns>
        <paramref name="value" /> 参数的 <see cref="P:System.Nullable`1.Value" /> 属性的值。</returns>
    </member>
    <member name="M:System.Nullable`1.op_Implicit(T)~System.Nullable{`0}">
      <summary>创建一个新的 <see cref="T:System.Nullable`1" /> 对象，并将其初始化为指定的值。</summary>
      <param name="value">一个值类型。</param>
      <returns>一个 <see cref="T:System.Nullable`1" /> 对象，其 <see cref="P:System.Nullable`1.Value" /> 属性使用 <paramref name="value" /> 参数进行初始化。</returns>
    </member>
    <member name="M:System.Nullable`1.ToString">
      <summary>返回当前 <see cref="T:System.Nullable`1" /> 对象的值的文本表示形式。</summary>
      <returns>如果 <see cref="T:System.Nullable`1" /> 属性为 <see langword="true" />，则是当前 <see cref="P:System.Nullable`1.HasValue" /> 对象的值的文本表示形式；如果 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="false" />，则是一个空字符串 ("")。</returns>
    </member>
    <member name="P:System.Nullable`1.Value">
      <summary>获取当前 <see cref="T:System.Nullable`1" /> 对象的值，如果它已被分配了有效的基础值。</summary>
      <returns>如果 <see cref="T:System.Nullable`1" /> 属性为 <see langword="true" />，则为当前 <see cref="P:System.Nullable`1.HasValue" /> 对象的值。 如果 <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="false" />，则将引发异常。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Nullable`1.HasValue" /> 属性为 <see langword="false" />。</exception>
    </member>
    <member name="T:System.NullReferenceException">
      <summary>尝试取消引用空对象引用时引发的异常。</summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor">
      <summary>初始化 <see cref="T:System.NullReferenceException" /> 类的新实例，将新实例的 <see cref="P:System.Exception.Message" /> 属性设置为系统提供的描述错误的消息，如“在需要对象实例的地方找到了值‘null’。”。 此消息将当前系统区域性考虑在内。</summary>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.NullReferenceException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.NullReferenceException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。 <paramref name="message" /> 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.NullReferenceException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.NullReferenceException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Object">
      <summary>支持 .NET 类层次结构中的所有类，并为派生类提供低级别服务。 这是所有 .NET 类的最终基类；它是类型层次结构的根。</summary>
    </member>
    <member name="M:System.Object.#ctor">
      <summary>初始化 <see cref="T:System.Object" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Object.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <param name="obj">要与当前对象进行比较的对象。</param>
      <returns>如果指定的对象等于当前对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Object.Equals(System.Object,System.Object)">
      <summary>确定指定的对象实例是否被视为相等。</summary>
      <param name="objA">要比较的第一个对象。</param>
      <param name="objB">要比较的第二个对象。</param>
      <returns>如果对象被视为相等，则为 <see langword="true" />，否则为 <see langword="false" />。 如果 <paramref name="objA" /> 和 <paramref name="objB" /> 均为 null，此方法返回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Object.Finalize">
      <summary>在垃圾回收将某一对象回收前允许该对象尝试释放资源并执行其他清理操作。</summary>
    </member>
    <member name="M:System.Object.GetHashCode">
      <summary>作为默认哈希函数。</summary>
      <returns>当前对象的哈希代码。</returns>
    </member>
    <member name="M:System.Object.GetType">
      <summary>获取当前实例的 <see cref="T:System.Type" />。</summary>
      <returns>当前实例的准确运行时类型。</returns>
    </member>
    <member name="M:System.Object.MemberwiseClone">
      <summary>创建当前 <see cref="T:System.Object" /> 的浅表副本。</summary>
      <returns>当前 <see cref="T:System.Object" /> 的浅表副本。</returns>
    </member>
    <member name="M:System.Object.ReferenceEquals(System.Object,System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 实例是否是相同的实例。</summary>
      <param name="objA">要比较的第一个对象。</param>
      <param name="objB">要比较的第二个对象。</param>
      <returns>如果 <paramref name="objA" /> 是与 <paramref name="objB" /> 相同的实例，或两者均为 null，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Object.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="T:System.ObjectDisposedException">
      <summary>对已释放的对象执行操作时所引发的异常。</summary>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.ObjectDisposedException" /> 类的新实例。</summary>
      <param name="info">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String)">
      <summary>使用包含已释放对象名称的字符串初始化 <see cref="T:System.ObjectDisposedException" /> 类的新实例。</summary>
      <param name="objectName">包含已释放对象的名称的字符串。</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.ObjectDisposedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 不为 <see langword="null" />，则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="M:System.ObjectDisposedException.#ctor(System.String,System.String)">
      <summary>使用指定的对象名称和消息初始化 <see cref="T:System.ObjectDisposedException" /> 类的新实例。</summary>
      <param name="objectName">已释放的对象名。</param>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.ObjectDisposedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用参数名和附加异常信息检索 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
    </member>
    <member name="P:System.ObjectDisposedException.Message">
      <summary>获取描述错误的消息。</summary>
      <returns>描述错误的字符串。</returns>
    </member>
    <member name="P:System.ObjectDisposedException.ObjectName">
      <summary>获取已释放对象的名称。</summary>
      <returns>包含已释放对象的名称的字符串。</returns>
    </member>
    <member name="T:System.ObsoleteAttribute">
      <summary>标记不再使用的程序元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.ObsoleteAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String)">
      <summary>使用指定的变通方法消息初始化 <see cref="T:System.ObsoleteAttribute" /> 类的新实例。</summary>
      <param name="message">描述可选的变通方法的文本字符串。</param>
    </member>
    <member name="M:System.ObsoleteAttribute.#ctor(System.String,System.Boolean)">
      <summary>使用变通方法消息和布尔值初始化 <see cref="T:System.ObsoleteAttribute" /> 类的新实例，该布尔值指示是否将使用已过时的元素视为错误。</summary>
      <param name="message">描述可选的变通方法的文本字符串。</param>
      <param name="error">如果使用过时的元素生成编译器错误，则为 <see langword="true" />；如果生成编译器警告，则为 <see langword="false" />。</param>
    </member>
    <member name="P:System.ObsoleteAttribute.IsError">
      <summary>获取指示编译器是否将使用已过时的程序元素视为错误的布尔值。</summary>
      <returns>如果将使用已过时的元素视为错误，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ObsoleteAttribute.Message">
      <summary>获取变通方法消息，包括对可选程序元素的说明。</summary>
      <returns>变通方法文本字符串。</returns>
    </member>
    <member name="T:System.OutOfMemoryException">
      <summary>没有足够的内存继续执行程序时引发的异常。</summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor">
      <summary>初始化 <see cref="T:System.OutOfMemoryException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.OutOfMemoryException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.OutOfMemoryException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.OutOfMemoryException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="T:System.OverflowException">
      <summary>在选中的上下文中所进行的算术运算、类型转换或转换操作导致溢出时引发的异常。</summary>
    </member>
    <member name="M:System.OverflowException.#ctor">
      <summary>初始化 <see cref="T:System.OverflowException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.OverflowException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.OverflowException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.OverflowException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.OverflowException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.OverflowException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="T:System.ParamArrayAttribute">
      <summary>指示方法在调用中将允许参数的数目可变。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ParamArrayAttribute.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.ParamArrayAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.PlatformNotSupportedException">
      <summary>当功能未在特定平台上运行时所引发的异常。</summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.PlatformNotSupportedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.PlatformNotSupportedException" /> 类的新实例。</summary>
      <param name="info">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.PlatformNotSupportedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的文本消息。</param>
    </member>
    <member name="M:System.PlatformNotSupportedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.PlatformNotSupportedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Predicate`1">
      <summary>表示定义一组条件并确定指定对象是否符合这些条件的方法。</summary>
      <param name="obj">要按照由此委托表示的方法中定义的条件进行比较的对象。</param>
      <typeparam name="T">要比较的对象的类型。</typeparam>
      <returns>如果 <paramref name="obj" /> 符合由此委托表示的方法中定义的条件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Range">
      <summary>表示具有起始索引和结束索引的范围。</summary>
    </member>
    <member name="M:System.Range.#ctor(System.Index,System.Index)">
      <summary>使用指定的起始索引和结束索引初始化新的 <see cref="T:System.Range" /> 实例。</summary>
      <param name="start">范围的包含起始索引。</param>
      <param name="end">范围的非包含结束索引。</param>
    </member>
    <member name="P:System.Range.All">
      <summary>获取一个 <see cref="T:System.Range" /> 对象，该对象从第一个元素开始直至结束。</summary>
      <returns>从一开始到末尾的范围。</returns>
    </member>
    <member name="P:System.Range.End">
      <summary>获取一个表示范围的不包含结束索引的 <see cref="T:System.Index" />。</summary>
      <returns>范围的结束索引。</returns>
    </member>
    <member name="M:System.Range.EndAt(System.Index)">
      <summary>创建一个 <see cref="T:System.Range" /> 对象，该对象从集合中的第一个元素开始，直至指定的结束索引。</summary>
      <param name="end">将创建 <see cref="T:System.Range" /> 对象的最后一个元素的位置。</param>
      <returns>从第一个元素开始直至 <paramref name="end" /> 的范围。</returns>
    </member>
    <member name="M:System.Range.Equals(System.Object)">
      <summary>返回一个值，该值指示当前实例是否与指定的对象相等。</summary>
      <param name="value">一个与此 Range 对象进行比较的对象。</param>
      <returns>如果 <paramref name="value" /> 为 <see cref="T:System.Range" /> 类型，并且等于当前的实例，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Range.Equals(System.Range)">
      <summary>返回一个值，该值指示其他 <see cref="T:System.Range" /> 实例是否与指定的对象相等。</summary>
      <param name="other">一个与此 Range 对象进行比较的 Range 对象。</param>
      <returns>如果当前实例等于 <paramref name="other" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Range.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>哈希代码。</returns>
    </member>
    <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
      <param name="length" />
    </member>
    <member name="P:System.Range.Start">
      <summary>获取 <see cref="T:System.Range" /> 的非包含起始索引。</summary>
      <returns>范围的包含起始索引。</returns>
    </member>
    <member name="M:System.Range.StartAt(System.Index)">
      <summary>返回一个新的 <see cref="T:System.Range" /> 实例，从指定的起始索引开始到集合末尾。</summary>
      <param name="start">要从中创建范围的第一个元素的位置。</param>
      <returns>从 <paramref name="start" /> 开始到集合末尾的范围。</returns>
    </member>
    <member name="M:System.Range.ToString">
      <summary>返回当前 <see cref="T:System.Range" /> 对象的字符串表示形式。</summary>
      <returns>范围的字符串表示形式。</returns>
    </member>
    <member name="T:System.RankException">
      <summary>将维数错误的数组传递给方法时引发的异常。</summary>
    </member>
    <member name="M:System.RankException.#ctor">
      <summary>初始化 <see cref="T:System.RankException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.RankException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.RankException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.RankException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.RankException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.RankException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.RankException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="T:System.ReadOnlyMemory`1">
      <summary>表示相邻的内存区域，类似于 <see cref="T:System.ReadOnlySpan`1" />。 与 <see cref="T:System.ReadOnlySpan`1" /> 不同，它不是类似 byref 的类型。</summary>
      <typeparam name="T">要从中读取内存的连续区域的对象类型。</typeparam>
    </member>
    <member name="M:System.ReadOnlyMemory`1.#ctor(`0[])">
      <summary>在整个目标数组上创建新的内存区域。</summary>
      <param name="array">目标数组。</param>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="array" /> 是协变的，数组的类型并不完全是 <see langword="T[]" />。</exception>
    </member>
    <member name="M:System.ReadOnlyMemory`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>在目标数组的一部分上创建新的内存区域，从指定位置开始并包含指定数量的元素。</summary>
      <param name="array">目标数组。</param>
      <param name="start">开始内存区域的索引。</param>
      <param name="length">内存区域中的项数。</param>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="array" /> 是协变的，数组的类型并不完全是 <see langword="T[]" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" />、<paramref name="length" /> 或 <paramref name="start" /> + <paramref name="length" /> 确定数组范围之外的位置。</exception>
    </member>
    <member name="M:System.ReadOnlyMemory`1.CopyTo(System.Memory{`0})">
      <summary>将只读内存区域的内容复制到目标内存区域。</summary>
      <param name="destination">要将项复制到其中的内存区域。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 比源内存区域更小。</exception>
    </member>
    <member name="P:System.ReadOnlyMemory`1.Empty">
      <summary>获取空的 <see cref="T:System.ReadOnlyMemory`1" />。</summary>
      <returns>空的只读内存区域。</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前只读内存区域。</summary>
      <param name="obj">要比较的对象。</param>
      <returns>如果当前实例与 <paramref name="obj" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.Equals(System.ReadOnlyMemory{`0})">
      <summary>确定当前实例与指定的 <see cref="T:System.ReadOnlyMemory`1" /> 对象是否相等。</summary>
      <param name="other">要比较的只读内存。</param>
      <returns>如果当前实例与 <paramref name="other" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.GetHashCode">
      <summary>返回该 <see cref="T:System.ReadOnlyMemory`1" /> 的哈希代码。</summary>
      <returns>哈希代码。</returns>
    </member>
    <member name="P:System.ReadOnlyMemory`1.IsEmpty">
      <summary>获取一个指示此只读内存区域是否为空的值。</summary>
      <returns>
        <see langword="true" />如果只读内存区域为空 (即其<see cref="P:System.ReadOnlyMemory`1.Length" />为 0), 则为; <see langword="false" />否则为。</returns>
    </member>
    <member name="P:System.ReadOnlyMemory`1.Length">
      <summary>获取内存区域中的项数。</summary>
      <returns>内存区域中的项数。</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.op_Implicit(System.ArraySegment{`0})~System.ReadOnlyMemory{`0}">
      <summary>定义 <see cref="T:System.ArraySegment`1" /> 到 <see cref="T:System.ReadOnlyMemory`1" /> 的隐式转换。</summary>
      <param name="segment">要写入的数组段。</param>
      <returns>数组段的只读内存表示形式。</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.op_Implicit(T[])~System.ReadOnlyMemory{`0}">
      <summary>定义数组到 <see cref="T:System.ReadOnlyMemory`1" /> 的隐式转换。</summary>
      <param name="array">要转换的类型为 T 的数组。</param>
      <returns>类型为 T 的数组的只读内存表示形式。</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.Pin">
      <summary>为内存创建句柄。</summary>
      <returns>内存的句柄。</returns>
      <exception cref="T:System.ArgumentException">具有非基元（非直接复制到本机结构中的）成员的实例不能被固定。</exception>
    </member>
    <member name="M:System.ReadOnlyMemory`1.Slice(System.Int32)">
      <summary>在给定内存区域外形成一个切片，从指定的位置开始，一直到它的结尾。</summary>
      <param name="start">开始切片处的索引。</param>
      <returns>表示所需切片的只读内存区域。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" /> 小于 0 或大于 <see cref="P:System.ReadOnlyMemory`1.Length" />。</exception>
    </member>
    <member name="M:System.ReadOnlyMemory`1.Slice(System.Int32,System.Int32)">
      <summary>从 <paramref name="length" /> 元素的 <paramref name="start" /> 位置开始，在给定内存区域外形成一个切片。</summary>
      <param name="start">开始切片处的索引。</param>
      <param name="length">切片所需的长度。</param>
      <returns>表示所需切片的只读内存区域。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" />、<paramref name="length" /> 或 <paramref name="start" /> + <paramref name="length" /> 超出了当前实例的范围。</exception>
    </member>
    <member name="P:System.ReadOnlyMemory`1.Span">
      <summary>从内存区域获取跨度。</summary>
      <returns>内存跨度。</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.ToArray">
      <summary>将此内存区域中的内容复制到新数组中。</summary>
      <returns>一个数组。</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.ToString">
      <summary>返回此只读内存实例的字符串表示形式。</summary>
      <returns>对于 <see cref="T:System.ReadOnlyMemory`1" />，返回一个新的字符串实例，其表示内存指向的字符。 否则，返回包含类型名称和元素数量的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.ReadOnlyMemory`1.TryCopyTo(System.Memory{`0})">
      <summary>尝试将只读内存的内容复制到目标中，并返回表示复制操作是否成功的值。</summary>
      <param name="destination">要将项复制到其中的内存区域。</param>
      <returns>如果复制操作成功，则为 <see langword="true" />。 如果 <paramref name="destination" /> 小于当前实例且没有数据写入到 <paramref name="destination" />，则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ReadOnlySpan`1">
      <summary>提供任意内存的连续区域的类型安全和内存安全只读表示。</summary>
      <typeparam name="T">中项的类型<see cref="T:System.ReadOnlySpan`1" />。</typeparam>
    </member>
    <member name="M:System.ReadOnlySpan`1.#ctor(`0[])">
      <summary>在整个指定数组上创建新的 <see cref="T:System.ReadOnlySpan`1" />。</summary>
      <param name="array">用来从中创建 <see cref="T:System.ReadOnlySpan`1" /> 的数组。</param>
    </member>
    <member name="M:System.ReadOnlySpan`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>从指定索引开始，创建包含数组的指定元素数的新 <see cref="T:System.ReadOnlySpan`1" />。</summary>
      <param name="array">用来从中创建 <see cref="T:System.ReadOnlySpan`1" /> 的数组。</param>
      <param name="start">要包含的第一个元素的索引。</param>
      <param name="length">要包含的元素的数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="array" /> 是 <see langword="null" />，但 <paramref name="start" /> 或 <paramref name="length" /> 不为零。
或
<paramref name="start" /> 在数组的界限外。

或 -

<paramref name="start" /> 和 <paramref name="length" /> 超过数组中的元素数。</exception>
    </member>
    <member name="M:System.ReadOnlySpan`1.#ctor(System.Void*,System.Int32)">
      <summary>从指定的内存地址开始，从指定的 <typeparamref name="T" /> 元素数创建新的 <see cref="T:System.ReadOnlySpan`1" />。</summary>
      <param name="pointer">指向内存中指定 <typeparamref name="T" /> 元素数的起始地址的指针。</param>
      <param name="length">要包含在 <see cref="T:System.ReadOnlySpan`1" /> 中的 <typeparamref name="T" /> 元素数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> 是引用类型或包含引用，因此不能存储在非管理的内存中。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 为负数。</exception>
    </member>
    <member name="M:System.ReadOnlySpan`1.CopyTo(System.Span{`0})">
      <summary>将此 <see cref="T:System.ReadOnlySpan`1" /> 的内容复制到目标 <see cref="T:System.Span`1" />。</summary>
      <param name="destination">要将项复制到的范围。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 短于源 <see cref="T:System.ReadOnlySpan`1" />。</exception>
    </member>
    <member name="P:System.ReadOnlySpan`1.Empty">
      <summary>返回一个空 <see cref="T:System.ReadOnlySpan`1" />。</summary>
      <returns>一个空 <see cref="T:System.ReadOnlySpan`1" />。</returns>
    </member>
    <member name="T:System.ReadOnlySpan`1.Enumerator">
      <summary>为 <see cref="T:System.ReadOnlySpan`1" /> 的元素提供枚举器。</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.ReadOnlySpan`1.Enumerator.Current">
      <summary>获取对枚举器当前位置的项目的引用。</summary>
      <returns>
        <see cref="T:System.ReadOnlySpan`1" /> 中位于该枚举数当前位置的元素。</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.Enumerator.MoveNext">
      <summary>将枚举器推进到 <see cref="T:System.ReadOnlySpan`1" /> 的下一项。</summary>
      <returns>如果枚举器成功推进到下一项，则为 <see langword="true" />；如果已通过范围的末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.Equals(System.Object)">
      <summary>不支持。 引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="obj">不支持。</param>
      <returns>不支持。</returns>
      <exception cref="T:System.NotSupportedException">始终由此方法引发。</exception>
    </member>
    <member name="M:System.ReadOnlySpan`1.GetEnumerator">
      <summary>返回用于此 <see cref="T:System.ReadOnlySpan`1" /> 的枚举器。</summary>
      <returns>用于此只读范围的枚举器。</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.GetHashCode">
      <summary>不支持。 引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>不支持。</returns>
      <exception cref="T:System.NotSupportedException">始终由此方法引发。</exception>
    </member>
    <member name="P:System.ReadOnlySpan`1.IsEmpty">
      <summary>返回一个值，该值指示当前只读范围为空。</summary>
      <returns>
        <see langword="true" />当当前跨度为空时为;否则<see langword="false" />为。</returns>
    </member>
    <member name="P:System.ReadOnlySpan`1.Item(System.Int32)">
      <summary>从指定的从零开始的索引处的只读范围获取项。</summary>
      <param name="index">要获取的元素的索引(索引从零开始)。</param>
      <returns>只读范围内的元素。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于零，或者大于或等于 <see cref="P:System.ReadOnlySpan`1.Length" />。</exception>
    </member>
    <member name="P:System.ReadOnlySpan`1.Length">
      <summary>只读范围中的项数。</summary>
      <returns>项数。</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.op_Equality(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})">
      <summary>返回一个值，该值指示两个 <see cref="T:System.ReadOnlySpan`1" /> 实例是否相等。</summary>
      <param name="left">要比较的第一个范围。</param>
      <param name="right">要比较的第二个范围。</param>
      <returns>如果这两个 <see cref="T:System.ReadOnlySpan`1" /> 实例相等，则为 <see langword="true" />；否则为 <see langword="false" /></returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.op_Implicit(System.ArraySegment{`0})~System.ReadOnlySpan{`0}">
      <summary>定义 <see cref="T:System.ArraySegment`1" /> 到 <see cref="T:System.ReadOnlySpan`1" /> 的隐式转换。</summary>
      <param name="segment">要转换为 <see cref="T:System.ReadOnlySpan`1" /> 的数组段。</param>
      <returns>与数组段对应的只读范围。</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.op_Implicit(T[])~System.ReadOnlySpan{`0}">
      <summary>定义数组到 <see cref="T:System.ReadOnlySpan`1" /> 的隐式转换。</summary>
      <param name="array">要转换为 <see cref="T:System.ReadOnlySpan`1" /> 的数组。</param>
      <returns>与 <paramref name="array" /> 对应的只读范围。</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.op_Inequality(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0})">
      <summary>返回一个值，该值指示两个 <see cref="T:System.ReadOnlySpan`1" /> 实例是否不相等。</summary>
      <param name="left">要比较的第一个只读范围。</param>
      <param name="right">要比较的第二个只读范围。</param>
      <returns>如果这两个 <see cref="T:System.ReadOnlySpan`1" /> 实例不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.Slice(System.Int32)">
      <summary>从指定索引处开始的当前只读范围外形成切片。</summary>
      <param name="start">开始切片处的索引。</param>
      <returns>由当前范围（从 <paramref name="start" /> 到范围末尾）的所有元素组成的范围。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" /> 大于只读范围中的项数。</exception>
    </member>
    <member name="M:System.ReadOnlySpan`1.Slice(System.Int32,System.Int32)">
      <summary>从指定长度的指定索引处开始的当前只读范围外形成切片。</summary>
      <param name="start">开始切片处的索引。</param>
      <param name="length">切片所需的长度。</param>
      <returns>由当前范围（从 <paramref name="start" /> 开始）中 <paramref name="length" /> 元素组成的只读范围。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" /> 小于零或大于 <see cref="P:System.Span`1.Length" />。</exception>
    </member>
    <member name="M:System.ReadOnlySpan`1.ToArray">
      <summary>将此只读范围的内容复制到新数组中。</summary>
      <returns>包含当前范围中数据的数组。</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.ToString">
      <summary>返回此 <see cref="T:System.ReadOnlySpan`1" /> 的字符串表示形式。</summary>
      <returns>此实例的字符串表示形式。</returns>
    </member>
    <member name="M:System.ReadOnlySpan`1.TryCopyTo(System.Span{`0})">
      <summary>尝试将此 <see cref="T:System.ReadOnlySpan`1" /> 的内容复制到 <see cref="T:System.Span`1" /> 中，并返回一个值以指示操作是否成功。</summary>
      <param name="destination">复制操作的目标。</param>
      <returns>如果复制操作已成功，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Reflection.AmbiguousMatchException">
      <summary>当绑定到成员的操作导致一个以上的成员匹配绑定条件时引发的异常。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor">
      <summary>通过使用空消息字符串和将根源异常设置为 <see langword="null" /> 来初始化 <see cref="T:System.Reflection.AmbiguousMatchException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AmbiguousMatchException" /> 类的一个新实例，将其消息字符串设置为给定消息，将根源异常设置为 <see langword="null" />。</summary>
      <param name="message">指示此异常的引发原因的字符串。</param>
    </member>
    <member name="M:System.Reflection.AmbiguousMatchException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Reflection.AmbiguousMatchException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Reflection.Assembly">
      <summary>表示一个程序集，它是一个可重用、无版本冲突并且可自我描述的公共语言运行时应用程序构建基块。</summary>
    </member>
    <member name="M:System.Reflection.Assembly.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.Assembly" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Reflection.Assembly.CodeBase">
      <summary>获取最初指定的程序集的位置，例如，在 <see cref="T:System.Reflection.AssemblyName" /> 对象中指定的位置。</summary>
      <returns>程序集的位置（按照最初的指定）。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.CreateInstance(System.String)">
      <summary>使用区分大小写的搜索，从此程序集中查找指定的类型，然后使用系统激活器创建它的实例。</summary>
      <param name="typeName">要查找类型的 <see cref="P:System.Type.FullName" />。</param>
      <returns>使用无参数构造函数创建的指定类型的实例；如果未找到 <paramref name="typeName" />，则为 <see langword="null" />。 该类型使用默认联编程序解析，而无需指定区域性或激活属性，并将 <see cref="T:System.Reflection.BindingFlags" /> 设置为 <see langword="Public" /> 或 <see langword="Instance" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> 为空字符串 ("") 或以空字符开头的字符串。  
或 
当前程序集已加载到仅反射上下文中。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">未找到匹配的构造函数。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="typeName" /> 所需的从属程序集无法找到。</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="typeName" /> 所需的从属程序集已找到，但无法加载。  
或 
当前程序集被加载到仅反射上下文中，并且 <paramref name="typeName" /> 所需的从属程序集未预先加载。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="typeName" /> 需要一个从属程序集，但该文件不是有效的程序集。  

或 - 
<paramref name="typeName" /> 需要一个从属程序集，该程序集已针对比当前加载的版本更高的运行时版本进行了编译。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)">
      <summary>使用可选的区分大小写搜索，从此程序集中查找指定的类型，然后使用系统激活器创建它的实例。</summary>
      <param name="typeName">要查找类型的 <see cref="P:System.Type.FullName" />。</param>
      <param name="ignoreCase">如果为 <see langword="true" />，则忽略类型名的大小写；否则，为 <see langword="false" />。</param>
      <returns>使用无参数构造函数创建的指定类型的实例；如果未找到 <paramref name="typeName" />，则为 <see langword="null" />。 该类型使用默认联编程序解析，而无需指定区域性或激活属性，并将 <see cref="T:System.Reflection.BindingFlags" /> 设置为 <see langword="Public" /> 或 <see langword="Instance" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> 为空字符串 ("") 或以空字符开头的字符串。  
或 
当前程序集已加载到仅反射上下文中。</exception>
      <exception cref="T:System.MissingMethodException">未找到匹配的构造函数。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="typeName" /> 所需的从属程序集无法找到。</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="typeName" /> 所需的从属程序集已找到，但无法加载。  
或 
当前程序集被加载到仅反射上下文中，并且 <paramref name="typeName" /> 所需的从属程序集未预先加载。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="typeName" /> 需要一个从属程序集，但该文件不是有效的程序集。  
或 
 <paramref name="typeName" /> 需要一个从属程序集，该程序集已针对比当前加载的版本更高的运行时版本进行了编译。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
      <summary>使用可选的区分大小写搜索并具有指定的区域性、参数和绑定及激活特性，从此程序集中查找指定的类型，并使用系统激活器创建它的实例。</summary>
      <param name="typeName">要查找类型的 <see cref="P:System.Type.FullName" />。</param>
      <param name="ignoreCase">如果为 <see langword="true" />，则忽略类型名的大小写；否则，为 <see langword="false" />。</param>
      <param name="bindingAttr">影响执行搜索的方式的位掩码。 此值是 <see cref="T:System.Reflection.BindingFlags" />中的位标志的组合。</param>
      <param name="binder">一个对象，它启用绑定、对参数类型的强制、对成员的调用，以及通过反射对 <see langword="MemberInfo" /> 对象的检索。 如果 <paramref name="binder" /> 为 <see langword="null" />，则使用默认联编程序。</param>
      <param name="args">包含要传递给构造函数的自变量的数组。 此参数数组在数量、顺序和类型方面必须与要调用的构造函数的参数匹配。 如果需要无参数构造函数，则 <paramref name="args" /> 必须是空数组或 <see langword="null" />。</param>
      <param name="culture">用于控制类型强制的 <see langword="CultureInfo" /> 的实例。 如果这是 <see langword="null" />，则使用当前线程的 <see langword="CultureInfo" /> 。 （例如，这对于将表示 1000 的 <see langword="String" /> 转换为 <see langword="Double" /> 值是必需的，因为不同的区域性以不同的方式表示 1000。）</param>
      <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。 通常，为包含单个 <see cref="T:System.Runtime.Remoting.Activation.UrlAttribute" /> 对象的数组，该对象指定激活远程对象所需的 URL。  此参数与客户端激活的对象相关。 客户端激活是一项传统技术，保留用于向后兼容，但不建议用于新的开发。 应改用 Windows Communication Foundation 来开发分布式应用程序。</param>
      <returns>如果未找到 <see langword="null" />，则为指定的类型实例或 <paramref name="typeName" />。 所提供的参数用于解析类型，以及绑定用于创建实例的构造函数。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> 为空字符串 ("") 或以空字符开头的字符串。  
或 
当前程序集已加载到仅反射上下文中。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">未找到匹配的构造函数。</exception>
      <exception cref="T:System.NotSupportedException">非空激活属性数组被传递给不是继承自 <see cref="T:System.MarshalByRefObject" /> 的类型。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="typeName" /> 所需的从属程序集无法找到。</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="typeName" /> 所需的从属程序集已找到，但无法加载。  
或 
当前程序集被加载到仅反射上下文中，并且 <paramref name="typeName" /> 所需的从属程序集未预先加载。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="typeName" /> 需要一个从属程序集，但该文件不是有效的程序集。  
或 
 <paramref name="typeName" /> 需要一个从属程序集，该程序集已针对比当前加载的版本更高的运行时版本进行了编译。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)">
      <summary>创建由类型的程序集的显示名称限定的类型的名称。</summary>
      <param name="assemblyName">程序集的显示名称。</param>
      <param name="typeName">类型的全名。</param>
      <returns>由程序集的显示名称限定的类型的完整名称。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.CustomAttributes">
      <summary>获取包含此程序集自定义属性的集合。</summary>
      <returns>包含此程序集自定义属性的集合。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.DefinedTypes">
      <summary>获取定义在此程序集中的类型的集合。</summary>
      <returns>定义在此程序集中的类型的集合。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.EntryPoint">
      <summary>获取此程序集的入口点。</summary>
      <returns>表示此程序集入口点的对象。 如果没有找到入口点（例如，此程序集是一个 DLL），则返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.Equals(System.Object)">
      <summary>确定此程序集和指定的对象是否相等。</summary>
      <param name="o">与该实例进行比较的对象。</param>
      <returns>如果 <see langword="true" /> 与此实例相等，则为 <paramref name="o" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.EscapedCodeBase">
      <summary>获取 URI，包括表示基本代码的转义符。</summary>
      <returns>带有转义符的 URI。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.ExportedTypes">
      <summary>获取此程序集中定义的公共类型的集合，这些公共类型在程序集外可见。</summary>
      <returns>此程序集中定义的公共类型的集合，这些公共类型在程序集外可见。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.FullName">
      <summary>获取程序集的显示名称。</summary>
      <returns>程序集的显示名称。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetAssembly(System.Type)">
      <summary>获取在其中定义指定类型的当前加载的程序集。</summary>
      <param name="type">一个对象，该对象表示将返回的程序集中的类型。</param>
      <returns>在其中定义指定类型的程序集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetCallingAssembly">
      <summary>返回方法（该方法调用当前正在执行的方法）的 <see cref="T:System.Reflection.Assembly" />。</summary>
      <returns>方法（该方法调用当前正在执行的方法）的 <see langword="Assembly" /> 对象。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)">
      <summary>获取此程序集的所有自定义属性。</summary>
      <param name="inherit">对于 <see cref="T:System.Reflection.Assembly" /> 类型的对象，将忽略此参数。</param>
      <returns>包含此程序集自定义属性的数组。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>获取按类型指定的此程序集的自定义属性。</summary>
      <param name="attributeType">要为其返回自定义属性的类型。</param>
      <param name="inherit">对于 <see cref="T:System.Reflection.Assembly" /> 类型的对象，将忽略此参数。</param>
      <returns>一个数组，它包含由 <paramref name="attributeType" /> 指定的此程序集的自定义属性。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是运行时类型。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetCustomAttributesData">
      <summary>返回有关已应用于当前 <see cref="T:System.Reflection.Assembly" />（表示为 <see cref="T:System.Reflection.CustomAttributeData" /> 对象）的特性的信息。</summary>
      <returns>
        <see cref="T:System.Reflection.CustomAttributeData" /> 对象的泛型列表，这些对象表示有关已应用于当前程序集的特性的数据。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetEntryAssembly">
      <summary>获取默认应用程序域中的进程可执行文件。 在其他的应用程序域中，这是由 <see cref="M:System.AppDomain.ExecuteAssembly(System.String)" /> 执行的第一个可执行文件。</summary>
      <returns>程序集是默认应用程序域中的进程可执行文件，或是由 <see cref="M:System.AppDomain.ExecuteAssembly(System.String)" /> 执行的第一个可执行文件。 当从非托管代码调用时可返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetExecutingAssembly">
      <summary>获取包含当前执行的代码的程序集。</summary>
      <returns>包含当前执行的代码的程序集。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetExportedTypes">
      <summary>获取此程序集中定义的公共类型，这些公共类型在程序集外可见。</summary>
      <returns>一个数组，表示此程序集中定义并在程序集外可见的类型。</returns>
      <exception cref="T:System.NotSupportedException">程序集是动态程序集。</exception>
      <exception cref="T:System.IO.FileNotFoundException">无法加载从属程序集。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetFile(System.String)">
      <summary>获取此程序集清单的文件表中指定文件的 <see cref="T:System.IO.FileStream" />。</summary>
      <param name="name">指定文件的名称。 不包括文件的路径。</param>
      <returns>包含指定文件的流，如果找不到文件则为 <see langword="null" />。</returns>
      <exception cref="T:System.IO.FileLoadException">无法加载已找到的文件。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为空字符串 ("")。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="name" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> 不是有效的程序集。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetFiles">
      <summary>获取程序集清单文件表中的文件。</summary>
      <returns>包含这些文件的流数组。</returns>
      <exception cref="T:System.IO.FileLoadException">无法加载已找到的文件。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到文件。</exception>
      <exception cref="T:System.BadImageFormatException">文件不是有效的程序集。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetFiles(System.Boolean)">
      <summary>获取程序集清单的文件表中的文件，指定是否包括资源模块。</summary>
      <param name="getResourceModules">
        <see langword="true" /> 则包括资源模块；否则，为 <see langword="false" />。</param>
      <returns>包含这些文件的流数组。</returns>
      <exception cref="T:System.IO.FileLoadException">无法加载已找到的文件。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到文件。</exception>
      <exception cref="T:System.BadImageFormatException">文件不是有效的程序集。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetForwardedTypes" />
    <member name="M:System.Reflection.Assembly.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetLoadedModules">
      <summary>获取作为此程序集的一部分的所有加载模块。</summary>
      <returns>模块的数组。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetLoadedModules(System.Boolean)">
      <summary>获取属于此程序集的所有已加载模块，同时指定是否包括资源模块。</summary>
      <param name="getResourceModules">
        <see langword="true" /> 则包括资源模块；否则，为 <see langword="false" />。</param>
      <returns>模块的数组。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceInfo(System.String)">
      <summary>返回关于给定资源如何保持的信息。</summary>
      <param name="resourceName">区分大小写的资源名称。</param>
      <returns>用关于资源拓扑的信息填充的对象；如果未找到资源，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resourceName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="resourceName" /> 参数为空字符串 ("")。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceNames">
      <summary>返回此程序集中的所有资源的名称。</summary>
      <returns>包含所有资源名称的数组。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)">
      <summary>从此程序集加载指定的清单资源。</summary>
      <param name="name">所请求的清单资源的名称（区分大小写）。</param>
      <returns>如果在编译期间没有指定任何资源，或者资源对调用方不可见，则为清单资源或者为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为空字符串 ("")。</exception>
      <exception cref="T:System.IO.FileLoadException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.IO.IOException" />。  


            

 无法加载已找到的文件。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="name" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> 不是有效的程序集。</exception>
      <exception cref="T:System.NotImplementedException">资源的长度大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)">
      <summary>从此程序集加载指定清单资源，清单资源的范围由指定类型的命名空间确定。</summary>
      <param name="type">其命名空间用于确定清单资源名的范围的类型。</param>
      <param name="name">所请求的清单资源的名称（区分大小写）。</param>
      <returns>如果在编译期间没有指定任何资源，或者资源对调用方不可见，则为清单资源或者为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为空字符串 ("")。</exception>
      <exception cref="T:System.IO.FileLoadException">无法加载已找到的文件。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="name" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> 不是有效的程序集。</exception>
      <exception cref="T:System.NotImplementedException">资源的长度大于 <see cref="F:System.Int64.MaxValue" />。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetModule(System.String)">
      <summary>获取此程序集中的指定模块。</summary>
      <param name="name">请求的模块的名称。</param>
      <returns>所请求的模块，若未找到该模块则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为空字符串 ("")。</exception>
      <exception cref="T:System.IO.FileLoadException">无法加载已找到的文件。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="name" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> 不是有效的程序集。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetModules">
      <summary>获取作为此程序集的一部分的所有模块。</summary>
      <returns>模块的数组。</returns>
      <exception cref="T:System.IO.FileNotFoundException">要加载的模块未指定文件扩展名。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetModules(System.Boolean)">
      <summary>获取属于此程序集的所有模块，同时指定是否包括资源模块。</summary>
      <param name="getResourceModules">
        <see langword="true" /> 则包括资源模块；否则，为 <see langword="false" />。</param>
      <returns>模块的数组。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetName">
      <summary>获取此程序集的 <see cref="T:System.Reflection.AssemblyName" />。</summary>
      <returns>包含此程序集的完全分析的显示名称的对象。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetName(System.Boolean)">
      <summary>获取此程序集的 <see cref="T:System.Reflection.AssemblyName" />，并按 <paramref name="copiedName" /> 指定的那样设置基本代码。</summary>
      <param name="copiedName">如果为 <see langword="true" />，则将 <see cref="P:System.Reflection.Assembly.CodeBase" /> 设置为程序集被影像复制后的位置；如果为 <see langword="false" />，则将 <see cref="P:System.Reflection.Assembly.CodeBase" /> 设置为原位置。</param>
      <returns>包含此程序集的完全分析的显示名称的对象。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>获取序列化信息，其中包含重新实例化此程序集所需的所有数据。</summary>
      <param name="info">用序列化信息填充的对象。</param>
      <param name="context">序列化的目标上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetReferencedAssemblies">
      <summary>获取此程序集引用的所有程序集的 <see cref="T:System.Reflection.AssemblyName" /> 对象。</summary>
      <returns>包含此程序集引用的所有程序集的完全分析的显示名称的数组。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)">
      <summary>获取指定区域性的附属程序集。</summary>
      <param name="culture">指定的区域性。</param>
      <returns>指定的附属程序集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到该程序集。</exception>
      <exception cref="T:System.IO.FileLoadException">找到了具有匹配文件名的附属程序集，但 <see langword="CultureInfo" /> 与所指定的不匹配。</exception>
      <exception cref="T:System.BadImageFormatException">附属程序集不是有效的程序集。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
      <summary>获取指定区域性的附属程序集的指定版本。</summary>
      <param name="culture">指定的区域性。</param>
      <param name="version">附属程序集的版本。</param>
      <returns>指定的附属程序集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileLoadException">找到了具有匹配的文件名的附属程序集，但 <see langword="CultureInfo" /> 或版本与所指定的不匹配。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到该程序集。</exception>
      <exception cref="T:System.BadImageFormatException">附属程序集不是有效的程序集。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetType(System.String)">
      <summary>获取程序集实例中具有指定名称的 <see cref="T:System.Type" /> 对象。</summary>
      <param name="name">类型的全名。</param>
      <returns>表示指定类的对象，若未找到该类则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> 所需的从属程序集无法找到。</exception>
      <exception cref="T:System.IO.FileLoadException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.IO.IOException" />。  

          
          <paramref name="name" /> 所需的从属程序集已找到，但无法加载。  

或 - 
当前程序集被加载到仅反射上下文中，并且 <paramref name="name" /> 所需的从属程序集未预先加载。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> 需要一个从属程序集，但该文件不是有效的程序集。  

或 - 
<paramref name="name" /> 需要一个从属程序集，该程序集已针对比当前加载的版本更高的运行时版本进行了编译。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetType(System.String,System.Boolean)">
      <summary>获取程序集实例中具有指定名称的 <see cref="T:System.Type" /> 对象，并选择在找不到该类型时引发异常。</summary>
      <param name="name">类型的全名。</param>
      <param name="throwOnError">
        <see langword="true" /> 表示在找不到该类型时引发异常；<see langword="false" /> 则表示返回 <see langword="null" />。</param>
      <returns>表示指定类的对象。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 无效。  

或 - 
<paramref name="name" /> 的长度超过 1024 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> 为 <see langword="true" />，且找不到此类型。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> 所需的从属程序集无法找到。</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="name" /> 所需的从属程序集已找到，但无法加载。  

或 - 
当前程序集被加载到仅反射上下文中，并且 <paramref name="name" /> 所需的从属程序集未预先加载。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> 需要一个从属程序集，但该文件不是有效的程序集。  
或 
 <paramref name="name" /> 需要一个从属程序集，该程序集已针对比当前加载的版本更高的运行时版本进行了编译。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>获取程序集实例中具有指定名称的 <see cref="T:System.Type" /> 对象，带有忽略大小写和在找不到该类型时引发异常的选项。</summary>
      <param name="name">类型的全名。</param>
      <param name="throwOnError">
        <see langword="true" /> 表示在找不到该类型时引发异常；<see langword="false" /> 则表示返回 <see langword="null" />。</param>
      <param name="ignoreCase">如果为 <see langword="true" />，则忽略类型名的大小写；否则，为 <see langword="false" />。</param>
      <returns>表示指定类的对象。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 无效。  
或 
<paramref name="name" /> 的长度超过 1024 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> 为 <see langword="true" />，且找不到此类型。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="name" /> 所需的从属程序集无法找到。</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="name" /> 所需的从属程序集已找到，但无法加载。  
或 
当前程序集被加载到仅反射上下文中，并且 <paramref name="name" /> 所需的从属程序集未预先加载。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="name" /> 需要一个从属程序集，但该文件不是有效的程序集。  

或 - 
<paramref name="name" /> 需要一个从属程序集，该程序集已针对比当前加载的版本更高的运行时版本进行了编译。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.GetTypes">
      <summary>获取此程序集中定义的类型。</summary>
      <returns>一个数组，包含此程序集中定义的所有类型。</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">该程序集包含一个或多个无法加载的类型。 此异常的 <see cref="P:System.Reflection.ReflectionTypeLoadException.Types" /> 属性返回的数组针对已加载的每个类型包含一个 <see cref="T:System.Type" /> 对象，针对无法加载的每个类型包含一个 <see langword="null" />，而 <see cref="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions" /> 属性针对无法加载的每个类型包含一个异常。</exception>
    </member>
    <member name="P:System.Reflection.Assembly.GlobalAssemblyCache">
      <summary>获取一个值，该值指示程序集是否是从全局程序集缓存加载的。</summary>
      <returns>如果程序集是从全局程序集缓存加载的，则为<see langword="true" /> ；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.HostContext">
      <summary>获取用于加载程序集的主机上下文。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指示用于加载程序集的主机上下文（如果有）。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.ImageRuntimeVersion">
      <summary>获取表示公共语言运行时 (CLR) 的版本的字符串，该信息保存在包含清单的文件中。</summary>
      <returns>CLR 版本的文件夹名。 这不是完整路径。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.IsCollectible">
      <summary>获取一个值，该值指示此程序集是否保留在可回收的 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" /> 中。</summary>
      <returns>
        <see langword="true" />如果此程序集保存在可回收<see cref="T:System.Runtime.Loader.AssemblyLoadContext" />的中, <see langword="false" />则为; 否则为。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)">
      <summary>指示指定的属性是否已应用于该程序集。</summary>
      <param name="attributeType">要为此程序集检查的属性类型。</param>
      <param name="inherit">对于该类型的对象，将忽略此参数。</param>
      <returns>如果已将该属性应用于程序集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 使用的类型无效。</exception>
    </member>
    <member name="P:System.Reflection.Assembly.IsDynamic">
      <summary>获取一个值，该值指示当前程序集是否是通过使用反射发出在当前进程中动态生成的。</summary>
      <returns>如果当前程序集是在当前进程中动态生成的，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.IsFullyTrusted">
      <summary>获取一个值，该值指示当前程序集是否是以完全信任方式加载的。</summary>
      <returns>如果当前程序集是以完全信任方式加载的，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Byte[])">
      <summary>加载带有基于通用对象文件格式 (COFF) 的映像的程序集，该映像包含已发出的程序集。 此程序集将会加载到调用方的应用程序域中。</summary>
      <param name="rawAssembly">字节数组，它是包含已发出程序集的基于 COFF 的映像。</param>
      <returns>加载的程序集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> 不是有效的程序集。  
或 
当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="rawAssembly" /> 是用更高的版本编译的。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[])">
      <summary>加载带有基于通用对象文件格式 (COFF) 的映像的程序集，此映像包含一个已发出的程序集，并且还可以选择包括程序集的符号。 此程序集将会加载到调用方的应用程序域中。</summary>
      <param name="rawAssembly">字节数组，它是包含已发出程序集的基于 COFF 的映像。</param>
      <param name="rawSymbolStore">包含表示程序集符号的原始字节的字节数组。</param>
      <returns>加载的程序集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> 不是有效的程序集。  

或 - 
当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="rawAssembly" /> 是用更高的版本编译的。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName)">
      <summary>在给定程序集的 <see cref="T:System.Reflection.AssemblyName" /> 的情况下，加载程序集。</summary>
      <param name="assemblyRef">描述要加载的程序集的对象。</param>
      <returns>加载的程序集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyRef" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyRef" /> 未找到。</exception>
      <exception cref="T:System.IO.FileLoadException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.IO.IOException" />。  


            

 无法加载已找到的文件。
或
<paramref name="assemblyRef" /> 指定远程程序集，但在远程程序集中执行代码的功能已禁用。 请参阅 &lt;loadFromRemoteSources&gt;。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyRef" /> 不是有效的程序集。 或 
当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyRef" /> 是用更高的版本编译的。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.Load(System.String)">
      <summary>通过给定程序集的长格式名称加载程序集。</summary>
      <param name="assemblyString">程序集名称的长格式。</param>
      <returns>加载的程序集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyString" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyString" /> 是一个长度为零的字符串。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyString" /> 未找到。</exception>
      <exception cref="T:System.IO.FileLoadException">无法加载已找到的文件。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyString" /> 不是有效的程序集。  

或 - 
当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyString" /> 是用更高的版本编译的。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.LoadFile(System.String)">
      <summary>加载指定路径上的程序集文件的内容。</summary>
      <param name="path">要加载的文件的完全限定路径。</param>
      <returns>加载的程序集。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 参数不是绝对路径。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileLoadException">无法加载已找到的文件。
或
在远程程序集中执行代码的功能已禁用。 请参阅 &lt;loadFromRemoteSources&gt;。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="path" /> 参数为空字符串 ("") 或不存在。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="path" /> 不是有效的程序集。  
或 
当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="path" /> 是用更高的版本编译的。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.LoadFrom(System.String)">
      <summary>已知程序集的文件名或路径，加载程序集。</summary>
      <param name="assemblyFile">包含程序集清单的文件的名称或路径。</param>
      <returns>加载的程序集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyFile" />，或者你正在试图加载的模块未指定文件名扩展。</exception>
      <exception cref="T:System.IO.FileLoadException">无法加载已找到的文件。
或
在远程程序集中执行代码的功能已禁用。 请参阅 &lt;loadFromRemoteSources&gt;。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的程序集 ；例如 64 位进程中的 32 位程序集。 有关详细信息，请参阅异常主题。  

或 - 
当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyFile" /> 是用更高的版本编译的。</exception>
      <exception cref="T:System.Security.SecurityException">指定了不以“file://”开头的基本代码，且没有所需的 <see cref="T:System.Net.WebPermission" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyFile" /> 参数为空字符串 ("")。</exception>
      <exception cref="T:System.IO.PathTooLongException">程序集名称超过系统定义的最大长度。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.LoadFrom(System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)">
      <summary>通过给定程序集文件名或路径、哈希值及哈希算法来加载程序集。</summary>
      <param name="assemblyFile">包含程序集清单的文件的名称或路径。</param>
      <param name="hashValue">计算所得的哈希代码的值。</param>
      <param name="hashAlgorithm">用于对文件进行哈希处理并生成强名称的哈希算法。</param>
      <returns>加载的程序集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyFile" />，或者你正在试图加载的模块未指定文件扩展名。</exception>
      <exception cref="T:System.IO.FileLoadException">无法加载已找到的文件。

或 -

在远程程序集中执行代码的功能已禁用。 请参阅 &lt;loadFromRemoteSources&gt;。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的程序集 ；例如 64 位进程中的 32 位程序集。 有关详细信息，请参阅异常主题。  
或 
 <paramref name="assemblyFile" /> 使用高于当前所加载版本的公共语言运行时版本编译而成。</exception>
      <exception cref="T:System.Security.SecurityException">指定了不以“file://”开头的基本代码，且没有所需的 <see cref="T:System.Net.WebPermission" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyFile" /> 参数为空字符串 ("")。</exception>
      <exception cref="T:System.IO.PathTooLongException">程序集名称超过系统定义的最大长度。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[])">
      <summary>加载带有基于通用对象文件格式 (COFF) 的映像（包含已发出的模块）或资源文件的模块（该模块相对于此程序集是内部的）。</summary>
      <param name="moduleName">模块的名称。 此字符串必须与程序集清单中的文件名对应。</param>
      <param name="rawModule">基于 COFF 映像的字节数组，该数组包含发送的模块或资源。</param>
      <returns>加载的模块。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="moduleName" /> 或 <paramref name="rawModule" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="moduleName" /> 与此程序集清单中的文件条目不匹配。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawModule" /> 不是有效的模块。</exception>
      <exception cref="T:System.IO.FileLoadException">无法加载已找到的文件。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[],System.Byte[])">
      <summary>加载带有基于通用对象文件格式 (COFF) 的映像（包含已发出的模块）或资源文件的模块（该模块相对于此程序集是内部的）。 还加载表示此模块的符号的原始字节。</summary>
      <param name="moduleName">模块的名称。 此字符串必须与程序集清单中的文件名对应。</param>
      <param name="rawModule">基于 COFF 映像的字节数组，该数组包含发送的模块或资源。</param>
      <param name="rawSymbolStore">一个字节数组，包含表示模块符号的原始字节。 如果这是一个资源文件，则必须为 <see langword="null" />。</param>
      <returns>加载的模块。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="moduleName" /> 或 <paramref name="rawModule" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="moduleName" /> 与此程序集清单中的文件条目不匹配。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawModule" /> 不是有效的模块。</exception>
      <exception cref="T:System.IO.FileLoadException">无法加载已找到的文件。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.LoadWithPartialName(System.String)">
      <summary>使用部分名称从应用程序目录或从全局程序集缓存加载程序集。</summary>
      <param name="partialName">程序集的显示名称。</param>
      <returns>加载的程序集。 如果未找到 <paramref name="partialName" />，此方法将返回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partialName" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的程序集。  
或 
当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="partialName" /> 是用更高的版本编译的。</exception>
    </member>
    <member name="P:System.Reflection.Assembly.Location">
      <summary>获取包含清单的已加载文件的完整路径或 UNC 位置。</summary>
      <returns>包含清单的已加载文件的位置。 如果已加载文件使用了影像复制，则该位置是该文件被影像复制后的位置。 如果从字节数组加载程序集（如使用 <see cref="M:System.Reflection.Assembly.Load(System.Byte[])" /> 方法重载时），则返回值为空字符串 ("")。</returns>
      <exception cref="T:System.NotSupportedException">当前的程序集是动态程序集，由 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 对象表示。</exception>
    </member>
    <member name="P:System.Reflection.Assembly.ManifestModule">
      <summary>获取包含当前程序集清单的模块。</summary>
      <returns>包含程序集清单的模块。</returns>
    </member>
    <member name="E:System.Reflection.Assembly.ModuleResolve">
      <summary>当公共语言运行时类加载程序不能通过正常方法解析对程序集的内部模块的引用时发生。</summary>
    </member>
    <member name="P:System.Reflection.Assembly.Modules">
      <summary>获取包含此程序集中模块的集合。</summary>
      <returns>包含此程序集中模块的集合。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.op_Equality(System.Reflection.Assembly,System.Reflection.Assembly)">
      <summary>指示两个 <see cref="T:System.Reflection.Assembly" /> 对象是否相等。</summary>
      <param name="left">要与 <paramref name="right" /> 进行比较的程序集。</param>
      <param name="right">要与 <paramref name="left" /> 进行比较的程序集。</param>
      <returns>如果 <see langword="true" /> 等于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.op_Inequality(System.Reflection.Assembly,System.Reflection.Assembly)">
      <summary>指示两个 <see cref="T:System.Reflection.Assembly" /> 对象是否不相等。</summary>
      <param name="left">要与 <paramref name="right" /> 进行比较的程序集。</param>
      <param name="right">要与 <paramref name="left" /> 进行比较的程序集。</param>
      <returns>如果 <see langword="true" /> 不等于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Assembly.ReflectionOnly">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示此程序集是否被加载到只反射上下文中。</summary>
      <returns>如果程序集被加载到只反射上下文而不是执行上下文中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.ReflectionOnlyLoad(System.Byte[])">
      <summary>加载来自基于通用对象文件格式 (COFF) 的映像的程序集，该映像包含已发出的程序集。 程序集被加载到调用方的应用程序域的只反射上下文中。</summary>
      <param name="rawAssembly">字节数组，它是包含已发出程序集的基于 COFF 的映像。</param>
      <returns>加载的程序集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rawAssembly" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="rawAssembly" /> 不是有效的程序集。  

或 - 
当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="rawAssembly" /> 是用更高的版本编译的。</exception>
      <exception cref="T:System.IO.FileLoadException">无法加载 <paramref name="rawAssembly" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">仅限 .NET Core：不支持此成员。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.ReflectionOnlyLoad(System.String)">
      <summary>将给定显示名称的程序集加载到只反射上下文中。</summary>
      <param name="assemblyString">程序集的显示名称，由 <see cref="P:System.Reflection.AssemblyName.FullName" /> 属性返回。</param>
      <returns>加载的程序集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyString" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyString" /> 为空字符串 ("")。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyString" /> 未找到。</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="assemblyString" /> 已找到，但无法加载。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyString" /> 不是有效的程序集。  

或 - 
当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyString" /> 是用更高的版本编译的。</exception>
      <exception cref="T:System.PlatformNotSupportedException">仅限 .NET Core：不支持此成员。</exception>
    </member>
    <member name="M:System.Reflection.Assembly.ReflectionOnlyLoadFrom(System.String)">
      <summary>将给定路径的程序集加载到只反射上下文中。</summary>
      <param name="assemblyFile">包含程序集清单的文件的路径。</param>
      <returns>加载的程序集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyFile" />，或者你正在试图加载的模块未指定文件扩展名。</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="assemblyFile" /> 已找到，但无法加载。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的程序集。  
或 
当前加载的是公共语言运行时 2.0 版或更高版本，而 <paramref name="assemblyFile" /> 是用更高的版本编译的。</exception>
      <exception cref="T:System.Security.SecurityException">指定了不以“file://”开头的基本代码，且没有所需的 <see cref="T:System.Net.WebPermission" />。</exception>
      <exception cref="T:System.IO.PathTooLongException">程序集名称超过系统定义的最大长度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyFile" /> 为空字符串 ("")。</exception>
      <exception cref="T:System.PlatformNotSupportedException">仅限 .NET Core：不支持此成员。</exception>
    </member>
    <member name="P:System.Reflection.Assembly.SecurityRuleSet">
      <summary>获取一个值，该值指示公共语言运行时 (CLR) 对此程序集强制执行的安全规则集。</summary>
      <returns>CLR 对此程序集强制执行的安全规则集。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.ToString">
      <summary>返回程序集的全名，即所谓的显示名称。</summary>
      <returns>程序集的全名；如果不能确定程序集的全名，则为类名。</returns>
    </member>
    <member name="M:System.Reflection.Assembly.UnsafeLoadFrom(System.String)">
      <summary>绕过某些安全检查，将程序集加载到加载源上下文中。</summary>
      <param name="assemblyFile">包含程序集清单的文件的名称或路径。</param>
      <returns>加载的程序集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">未找到 <paramref name="assemblyFile" />，或者你正在试图加载的模块未指定文件名扩展。</exception>
      <exception cref="T:System.IO.FileLoadException">无法加载已找到的文件。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的程序集。  
或 
 <paramref name="assemblyFile" /> 使用高于当前所加载版本的公共语言运行时版本编译而成。</exception>
      <exception cref="T:System.Security.SecurityException">指定了不以“file://”开头的基本代码，且没有所需的 <see cref="T:System.Net.WebPermission" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyFile" /> 参数为空字符串 ("")。</exception>
      <exception cref="T:System.IO.PathTooLongException">程序集名称超过系统定义的最大长度。</exception>
    </member>
    <member name="T:System.Reflection.AssemblyAlgorithmIdAttribute">
      <summary>指定对程序集中的所有文件进行哈希计算的算法。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyAlgorithmIdAttribute.#ctor(System.Configuration.Assemblies.AssemblyHashAlgorithm)">
      <summary>用指定的哈希算法初始化 <see cref="T:System.Reflection.AssemblyAlgorithmIdAttribute" /> 类的新实例，使用 <see cref="T:System.Configuration.Assemblies.AssemblyHashAlgorithm" /> 的成员之一来表示哈希算法。</summary>
      <param name="algorithmId">表示哈希算法的 <see langword="AssemblyHashAlgorithm" /> 的成员。</param>
    </member>
    <member name="M:System.Reflection.AssemblyAlgorithmIdAttribute.#ctor(System.UInt32)">
      <summary>用指定的哈希算法初始化 <see cref="T:System.Reflection.AssemblyAlgorithmIdAttribute" /> 类的新实例，使用无符号整数来表示哈希算法。</summary>
      <param name="algorithmId">表示哈希算法的无符号整数。</param>
    </member>
    <member name="P:System.Reflection.AssemblyAlgorithmIdAttribute.AlgorithmId">
      <summary>获取程序集清单内容的哈希算法。</summary>
      <returns>表示程序集哈希算法的无符号整数。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCompanyAttribute">
      <summary>定义程序集清单的公司名称自定义属性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCompanyAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyCompanyAttribute" /> 类的新实例。</summary>
      <param name="company">公司名称信息。</param>
    </member>
    <member name="P:System.Reflection.AssemblyCompanyAttribute.Company">
      <summary>获取公司名称信息。</summary>
      <returns>包含公司名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyConfigurationAttribute">
      <summary>指定程序集的生成配置，如零售或调试。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyConfigurationAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyConfigurationAttribute" /> 类的新实例。</summary>
      <param name="configuration">程序集配置。</param>
    </member>
    <member name="P:System.Reflection.AssemblyConfigurationAttribute.Configuration">
      <summary>获取程序集配置信息。</summary>
      <returns>包含程序集配置信息的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyContentType">
      <summary>提供有关程序集中代码包含的类型的信息。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyContentType.Default">
      <summary>程序集包含 .NET Framework 代码。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyContentType.WindowsRuntime">
      <summary>程序集包括 Windows 运行时 代码。</summary>
    </member>
    <member name="T:System.Reflection.AssemblyCopyrightAttribute">
      <summary>定义程序集清单的版权自定义属性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCopyrightAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyCopyrightAttribute" /> 类的新实例。</summary>
      <param name="copyright">版权信息。</param>
    </member>
    <member name="P:System.Reflection.AssemblyCopyrightAttribute.Copyright">
      <summary>获取版权信息。</summary>
      <returns>包含版权信息的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyCultureAttribute">
      <summary>指定程序集支持的区域性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyCultureAttribute.#ctor(System.String)">
      <summary>用正在属性化的程序集支持的区域性初始化 <see cref="T:System.Reflection.AssemblyCultureAttribute" /> 类的新实例。</summary>
      <param name="culture">属性化程序集支持的区域性。</param>
    </member>
    <member name="P:System.Reflection.AssemblyCultureAttribute.Culture">
      <summary>获取属性化程序集支持的区域性。</summary>
      <returns>包含受支持区域性的名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDefaultAliasAttribute">
      <summary>定义程序集清单的友好默认别名。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDefaultAliasAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyDefaultAliasAttribute" /> 类的新实例。</summary>
      <param name="defaultAlias">程序集默认别名信息。</param>
    </member>
    <member name="P:System.Reflection.AssemblyDefaultAliasAttribute.DefaultAlias">
      <summary>获取默认别名信息。</summary>
      <returns>包含默认别名信息的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDelaySignAttribute">
      <summary>指定程序集在创建时未完全签名。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDelaySignAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyDelaySignAttribute" /> 类的新实例。</summary>
      <param name="delaySign">如果此属性表示的功能被激活，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="P:System.Reflection.AssemblyDelaySignAttribute.DelaySign">
      <summary>获取指示该属性状态的值。</summary>
      <returns>如果此程序集已采用延迟签名方式生成，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyDescriptionAttribute">
      <summary>提供程序集的文本说明。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyDescriptionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyDescriptionAttribute" /> 类的新实例。</summary>
      <param name="description">程序集说明。</param>
    </member>
    <member name="P:System.Reflection.AssemblyDescriptionAttribute.Description">
      <summary>获取程序集说明信息。</summary>
      <returns>包含程序集说明的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFileVersionAttribute">
      <summary>指示编译器使用 Win32 文件版本资源的特定版本号。 Win32 文件版本不需要与程序集的版本号相同。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFileVersionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyFileVersionAttribute" /> 类的新实例，指定文件版本。</summary>
      <param name="version">文件版本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Reflection.AssemblyFileVersionAttribute.Version">
      <summary>获取 Win32 文件版本资源名称。</summary>
      <returns>包含文件版本资源名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyFlagsAttribute">
      <summary>为程序集指定 <see cref="T:System.Reflection.AssemblyNameFlags" /> 标志的按位组合，从而描述实时 (JIT) 编译器选项，该程序集是否可重定目标以及是否有完整或已标记化的公钥。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.Int32)">
      <summary>使用 <see cref="T:System.Reflection.AssemblyFlagsAttribute" /> 标志（被强制转换为整数值）的指定组合初始化 <see cref="T:System.Reflection.AssemblyNameFlags" /> 类的新实例。</summary>
      <param name="assemblyFlags">
        <see cref="T:System.Reflection.AssemblyNameFlags" /> 标志（被强制转换为整数值）的按位组合，表示实时 (JIT) 编译器选项、寿命、程序集是否可重定目标以及是否有完整或已标记化的公钥。</param>
    </member>
    <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.Reflection.AssemblyNameFlags)">
      <summary>使用 <see cref="T:System.Reflection.AssemblyFlagsAttribute" /> 标志的指定组合初始化 <see cref="T:System.Reflection.AssemblyNameFlags" /> 类的新实例。</summary>
      <param name="assemblyFlags">
        <see cref="T:System.Reflection.AssemblyNameFlags" /> 标志的按位组合，表示实时 (JIT) 编译器选项、寿命、程序集是否可重定目标以及是否有完整或已标记化的公钥。</param>
    </member>
    <member name="M:System.Reflection.AssemblyFlagsAttribute.#ctor(System.UInt32)">
      <summary>使用 <see cref="T:System.Reflection.AssemblyFlagsAttribute" /> 标志（被强制转换为无符号整数值）的指定组合初始化 <see cref="T:System.Reflection.AssemblyNameFlags" /> 类的新实例。</summary>
      <param name="flags">
        <see cref="T:System.Reflection.AssemblyNameFlags" /> 标志（被强制转换为无符号整数值）的按位组合，表示实时 (JIT) 编译器选项、寿命、程序集是否可重定目标以及是否有完整或已标记化的公钥。</param>
    </member>
    <member name="P:System.Reflection.AssemblyFlagsAttribute.AssemblyFlags">
      <summary>获取一个整数值，该值表示在创建此属性实例时指定的 <see cref="T:System.Reflection.AssemblyNameFlags" /> 标志的组合。</summary>
      <returns>一个整数值，表示 <see cref="T:System.Reflection.AssemblyNameFlags" /> 标志的按位组合。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyFlagsAttribute.Flags">
      <summary>获取一个无符号整数值，该值表示创建此属性实例时指定的 <see cref="T:System.Reflection.AssemblyNameFlags" /> 标志的组合。</summary>
      <returns>一个无符号整数值，表示 <see cref="T:System.Reflection.AssemblyNameFlags" /> 标志的按位组合。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyInformationalVersionAttribute">
      <summary>定义程序集清单的其他版本信息。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyInformationalVersionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute" /> 类的新实例。</summary>
      <param name="informationalVersion">程序集版本信息。</param>
    </member>
    <member name="P:System.Reflection.AssemblyInformationalVersionAttribute.InformationalVersion">
      <summary>获取版本信息。</summary>
      <returns>包含版本信息的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyFileAttribute">
      <summary>指定包含用于生成强名称的密钥对的文件的名称。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)">
      <summary>使用文件的名称初始化 <see langword="AssemblyKeyFileAttribute" /> 类的新实例，该文件包含为正在属性化的程序集生成强名称的密钥对。</summary>
      <param name="keyFile">包含密钥对的文件的名称。</param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyFileAttribute.KeyFile">
      <summary>获取文件的名称，该文件包含用于为属性化程序集生成强名称的密钥对。</summary>
      <returns>包含密钥对所在文件的名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyKeyNameAttribute">
      <summary>指定包含用于生成强名称的密钥对的 CSP 中的密钥容器的名称。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyKeyNameAttribute.#ctor(System.String)">
      <summary>使用容器的名称初始化 <see cref="T:System.Reflection.AssemblyKeyNameAttribute" /> 类的新实例，该容器包含为正在特性化的程序集生成强名称的密钥对。</summary>
      <param name="keyName">包含密钥对的容器的名称。</param>
    </member>
    <member name="P:System.Reflection.AssemblyKeyNameAttribute.KeyName">
      <summary>获取容器的名称，该容器包含用于为特性化程序集生成强名称的密钥对。</summary>
      <returns>一个字符串，它包含带有相关密钥对的容器的名称。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyMetadataAttribute">
      <summary>定义经过修饰的程序集的密钥/值元数据对。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyMetadataAttribute.#ctor(System.String,System.String)">
      <summary>使用指定的元数据密钥和值初始化 <see cref="T:System.Reflection.AssemblyMetadataAttribute" /> 类的新实例。</summary>
      <param name="key">元数据密钥。</param>
      <param name="value">元数据的值。</param>
    </member>
    <member name="P:System.Reflection.AssemblyMetadataAttribute.Key">
      <summary>获取元数据密钥。</summary>
      <returns>元数据密钥。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyMetadataAttribute.Value">
      <summary>获取元数据值。</summary>
      <returns>元数据的值。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyName">
      <summary>完整描述程序集的唯一标识。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyName.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyName" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyName.#ctor(System.String)">
      <summary>使用指定的显示名称初始化 <see cref="T:System.Reflection.AssemblyName" /> 类的新实例。</summary>
      <param name="assemblyName">程序集的显示名称，由 <see cref="P:System.Reflection.AssemblyName.FullName" /> 属性返回。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyName" /> 是一个长度为零的字符串。</exception>
      <exception cref="T:System.IO.FileLoadException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.IO.IOException" />。  


            

 无法找到或无法加载引用的程序集。</exception>
    </member>
    <member name="M:System.Reflection.AssemblyName.Clone">
      <summary>制作此 <see cref="T:System.Reflection.AssemblyName" /> 对象的副本。</summary>
      <returns>作为 <see cref="T:System.Reflection.AssemblyName" /> 对象副本的对象。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.CodeBase">
      <summary>获取或设置程序集的 URL 位置。</summary>
      <returns>一个字符串，它是程序集的 URL 位置。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.ContentType">
      <summary>获取或设置指示程序集包含的内容类型的值。</summary>
      <returns>指示程序集包含哪种内容类型的值。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.CultureInfo">
      <summary>获取或设置程序集支持的区域性。</summary>
      <returns>一个对象，它表示程序集支持的区域性。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.CultureName">
      <summary>获取或设置与此程序集关联的区域性名称。</summary>
      <returns>区域性名称。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.EscapedCodeBase">
      <summary>获取 URI，包括表示基本代码的转义符。</summary>
      <returns>带有转义符的 URI。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.Flags">
      <summary>获取或设置该程序集的属性。</summary>
      <returns>表示程序集特性的值。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.FullName">
      <summary>获取程序集的全名（也称为显示名称）。</summary>
      <returns>作为程序集的全名（也称为显示名称）的字符串。</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
      <summary>获取给定文件的 <see cref="T:System.Reflection.AssemblyName" />。</summary>
      <param name="assemblyFile">要返回其 <see cref="T:System.Reflection.AssemblyName" /> 的程序集的路径。</param>
      <returns>表示给定的程序集文件的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFile" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyFile" /> 无效，如包含无效区域性的程序集。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="assemblyFile" /> 未找到。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有路径发现权限。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="assemblyFile" /> 不是有效的程序集。</exception>
      <exception cref="T:System.IO.FileLoadException">一个程序集或模块用两个不同的证据集加载了两次。</exception>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>获取序列化信息，其中包含重新创建此 <see langword="AssemblyName" /> 实例所需的所有数据。</summary>
      <param name="info">用序列化信息填充的对象。</param>
      <param name="context">序列化的目标上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetPublicKey">
      <summary>获取程序集的公钥。</summary>
      <returns>字节数组，包含程序集的公钥。</returns>
      <exception cref="T:System.Security.SecurityException">提供了公钥（例如使用 <see cref="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])" /> 方法），但未提供公钥标记。</exception>
    </member>
    <member name="M:System.Reflection.AssemblyName.GetPublicKeyToken">
      <summary>获取公钥标记，该标记为应用程序或程序集签名时所用公钥的 SHA-1 哈希值的最后 8 个字节。</summary>
      <returns>包含公钥调用的字节数组。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.HashAlgorithm">
      <summary>获取或设置程序集清单使用的哈希算法。</summary>
      <returns>程序集清单使用的哈希算法。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.KeyPair">
      <summary>获取或设置用于为程序集创建强名称签名的加密公钥/私钥对。</summary>
      <returns>要用于为程序集创建强名称的加密公钥/私钥对。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.Name">
      <summary>获取或设置程序集的简单名称。 这通常（但不一定）是程序集的清单文件的文件名，不包括其扩展名。</summary>
      <returns>程序集的简单名称。</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.OnDeserialization(System.Object)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并在完成反序列化后由反序列化事件回调。</summary>
      <param name="sender">反序列化事件源。</param>
    </member>
    <member name="P:System.Reflection.AssemblyName.ProcessorArchitecture">
      <summary>获取或设置一个值，该值标识可执行文件的目标平台的处理器和每字位数。</summary>
      <returns>枚举值之一，标识可执行文件的目标平台的处理器和每字位数。</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName,System.Reflection.AssemblyName)">
      <summary>返回指示两个程序集名称是否相同的值。 该比较基于简单的程序集名称。</summary>
      <param name="reference">引用程序集名称。</param>
      <param name="definition">与引用程序集进行比较的程序集名称。</param>
      <returns>如果简单程序集名称相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])">
      <summary>设置用于标识程序集的公钥。</summary>
      <param name="publicKey">字节数组，包含程序集的公钥。</param>
    </member>
    <member name="M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])">
      <summary>设置公钥标记，该标记为应用程序或程序集签名时所用公钥的 SHA-1 哈希值的最后 8 个字节。</summary>
      <param name="publicKeyToken">字节数组，包含程序集的公钥标记。</param>
    </member>
    <member name="M:System.Reflection.AssemblyName.ToString">
      <summary>返回程序集的全名，即所谓的显示名称。</summary>
      <returns>程序集的全名；如果不能确定程序集的全名，则为类名。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.Version">
      <summary>获取或设置程序集的主版本号、次版本号、内部版本号和修订号。</summary>
      <returns>一个对象，表示程序集的主版本号、次版本号、内部版本号和修订号。</returns>
    </member>
    <member name="P:System.Reflection.AssemblyName.VersionCompatibility">
      <summary>获取或设置与程序集同其他程序集的兼容性相关的信息。</summary>
      <returns>一个值，表示有关程序集同其他程序集的兼容性的信息。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyNameFlags">
      <summary>提供有关 <see cref="T:System.Reflection.Assembly" /> 引用的信息。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.EnableJITcompileOptimizer">
      <summary>指定已经为程序集禁用实时 (JIT) 编译器优化。 这与成员名称暗示的含义正好相反。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.EnableJITcompileTracking">
      <summary>指定已经为程序集启用实时 (JIT) 编译器跟踪。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.None">
      <summary>指定没有有效标志。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.PublicKey">
      <summary>指定公钥基于完整公钥而不是公钥标记构成。</summary>
    </member>
    <member name="F:System.Reflection.AssemblyNameFlags.Retargetable">
      <summary>指定可以在运行时将程序集重定向到来自其他发行者的程序集。 此值支持 .NET Framework 基础结构，但不适合在代码中直接使用。</summary>
    </member>
    <member name="T:System.Reflection.AssemblyProductAttribute">
      <summary>定义程序集清单的产品名自定义属性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyProductAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyProductAttribute" /> 类的新实例。</summary>
      <param name="product">产品名称信息。</param>
    </member>
    <member name="P:System.Reflection.AssemblyProductAttribute.Product">
      <summary>获取产品名称信息。</summary>
      <returns>包含产品名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.AssemblySignatureKeyAttribute">
      <summary>提供从更早、更简单的名称键值到更大、散列值算法更安全的键值的迁移。</summary>
    </member>
    <member name="M:System.Reflection.AssemblySignatureKeyAttribute.#ctor(System.String,System.String)">
      <summary>使用指定的公钥和副署创建 <see cref="T:System.Reflection.AssemblySignatureKeyAttribute" /> 类的新实例。</summary>
      <param name="publicKey">公开或标识密钥。</param>
      <param name="countersignature">强名称密钥的签名密钥的副署。</param>
    </member>
    <member name="P:System.Reflection.AssemblySignatureKeyAttribute.Countersignature">
      <summary>获取此程序集强名称的副署。</summary>
      <returns>此签名密钥的副署。</returns>
    </member>
    <member name="P:System.Reflection.AssemblySignatureKeyAttribute.PublicKey">
      <summary>获取用于签名程序集的强名称的公钥。</summary>
      <returns>此程序集的公钥。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyTitleAttribute">
      <summary>提供程序集的说明。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTitleAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyTitleAttribute" /> 类的新实例。</summary>
      <param name="title">程序集标题。</param>
    </member>
    <member name="P:System.Reflection.AssemblyTitleAttribute.Title">
      <summary>获取程序集标题信息。</summary>
      <returns>程序集标题。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyTrademarkAttribute">
      <summary>定义程序集清单的商标自定义属性。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyTrademarkAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.AssemblyTrademarkAttribute" /> 类的新实例。</summary>
      <param name="trademark">商标信息。</param>
    </member>
    <member name="P:System.Reflection.AssemblyTrademarkAttribute.Trademark">
      <summary>获取商标信息。</summary>
      <returns>包含商标信息的 <see langword="String" />。</returns>
    </member>
    <member name="T:System.Reflection.AssemblyVersionAttribute">
      <summary>指定正在属性化的程序集的版本。</summary>
    </member>
    <member name="M:System.Reflection.AssemblyVersionAttribute.#ctor(System.String)">
      <summary>使用正在属性化的程序集的版本号来初始化 <see langword="AssemblyVersionAttribute" /> 类的新实例。</summary>
      <param name="version">属性化程序集的版本号。</param>
    </member>
    <member name="P:System.Reflection.AssemblyVersionAttribute.Version">
      <summary>获取属性化程序集的版本号。</summary>
      <returns>包含程序集的版本号的字符串。</returns>
    </member>
    <member name="T:System.Reflection.Binder">
      <summary>从候选者列表中选择一个成员，并执行实参类型到形参类型的类型转换。</summary>
    </member>
    <member name="M:System.Reflection.Binder.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.Binder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)">
      <summary>基于指定的判据，从给定的字段集中选择一个字段。</summary>
      <param name="bindingAttr">
        <see cref="T:System.Reflection.BindingFlags" /> 值的按位组合。</param>
      <param name="match">用于匹配的候选字段集。 例如，当 <see cref="T:System.Reflection.Binder" /> 使用 <see cref="Overload:System.Type.InvokeMember" /> 对象时，此参数将指定反射已确定为可能匹配项的字段集，通常是因为它们有正确的成员名称。 由 <see cref="P:System.Type.DefaultBinder" /> 提供的默认实现会更改此数组的顺序。</param>
      <param name="value">用于定位匹配字段的字段值。</param>
      <param name="culture">一个 <see cref="T:System.Globalization.CultureInfo" /> 实例，用于在强制类型的联编程序实现中控制数据类型强制。 如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。  
注意   例如，如果联编程序实现允许将字符串值强制转换为数值类型，则此参数对于将表示 1000 的 <see langword="String" /> 转换为 <see langword="Double" /> 值是必需的，因为不同的区域性以不同的方式表示 1000。 默认联编程序不进行此类字符串强制。</param>
      <returns>匹配的字段。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">对于默认的联编程序，<paramref name="bindingAttr" /> 包括 <see cref="F:System.Reflection.BindingFlags.SetField" />，并且 <paramref name="match" /> 包含多个与 <paramref name="value" /> 良好匹配且匹配程度相同的字段。 例如，<paramref name="value" /> 包含一个实现 <c>IMyClass</c> 接口的 <c>MyClass</c> 对象，并且 <paramref name="match" /> 包含一个类型为 <c>MyClass</c> 的字段和一个类型为 <c>IMyClass</c> 的字段。</exception>
      <exception cref="T:System.MissingFieldException">对于默认联编程序，<paramref name="bindingAttr" /> 包括 <see cref="F:System.Reflection.BindingFlags.SetField" />，并且 <paramref name="match" /> 不包含任何可接受 <paramref name="value" /> 的字段。</exception>
      <exception cref="T:System.NullReferenceException">对于默认联编程序，<paramref name="bindingAttr" /> 包括 <see cref="F:System.Reflection.BindingFlags.SetField" />，并且 <paramref name="match" /> 为 <see langword="null" /> 或一个空数组。  

或 - 
<paramref name="bindingAttr" /> 包括 <see cref="F:System.Reflection.BindingFlags.SetField" />，并且 <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)">
      <summary>基于提供的参数，从给定的方法集中选择要调用的方法。</summary>
      <param name="bindingAttr">
        <see cref="T:System.Reflection.BindingFlags" /> 值的按位组合。</param>
      <param name="match">用于匹配的候选方法集。 例如，当 <see cref="T:System.Reflection.Binder" /> 使用 <see cref="Overload:System.Type.InvokeMember" /> 对象时，此参数将指定反射已确定为可能匹配项的方法集，通常是因为它们有正确的成员名称。 由 <see cref="P:System.Type.DefaultBinder" /> 提供的默认实现会更改此数组的顺序。</param>
      <param name="args">传入的参数。 联编程序可以更改此数组中的参数的顺序；例如，如果 <paramref name="names" /> 参数用于指定位置顺序以外的顺序，则默认联编程序会更改参数的顺序。 如果联编程序实现强制转换参数类型，则也可以更改参数的类型和值。</param>
      <param name="modifiers">使绑定能够处理在其中修改了类型的参数签名的参数修饰符数组。 默认的联编程序实现不使用此参数。</param>
      <param name="culture">一个 <see cref="T:System.Globalization.CultureInfo" /> 实例，用于在强制类型的联编程序实现中控制数据类型强制。 如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。  
注意   例如，如果联编程序实现允许将字符串值强制转换为数值类型，则此参数对于将表示 1000 的 <see langword="String" /> 转换为 <see langword="Double" /> 值是必需的，因为不同的区域性以不同的方式表示 1000。 默认联编程序不进行此类字符串强制。</param>
      <param name="names">参数名（如果匹配时要考虑参数名）或 <see langword="null" />（如果要将变量视为纯位置）。 例如，如果没有按位置顺序提供变量，则必须使用参数名。</param>
      <param name="state">方法返回之后，<paramref name="state" /> 包含一个联编程序提供的对象，用于跟踪参数的重新排序。 联编程序创建此对象，并且联编程序是此对象的唯一使用者。 如果在返回 <see langword="null" /> 时 <paramref name="state" /> 不为 <see langword="BindToMethod" />，若要将 <paramref name="state" /> 还原为其原始顺序，您必须将 <paramref name="args" /> 传递给 <see cref="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)" /> 方法，以便可以检索 <see langword="ref" /> 参数（在 Visual Basic 中为 <see langword="ByRef" />）的值。</param>
      <returns>匹配的方法。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">对于默认联编程序，<paramref name="match" /> 包含多个与 <paramref name="args" /> 良好匹配且匹配程序相同的方法。 例如，<paramref name="args" /> 包含一个实现 <c>IMyClass</c> 接口的 <c>MyClass</c> 对象，并且 <paramref name="match" /> 包含一个采用 <c>MyClass</c> 的方法和一个采用 <c>IMyClass</c> 的方法。</exception>
      <exception cref="T:System.MissingMethodException">对于默认联编程序，<paramref name="match" /> 不包含可以接受 <paramref name="args" /> 中提供的参数的任何方法。</exception>
      <exception cref="T:System.ArgumentException">对于默认联编程序，<paramref name="match" /> 为 <see langword="null" /> 或一个空数组。</exception>
    </member>
    <member name="M:System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)">
      <summary>将给定 <see langword="Object" /> 的类型更改为给定 <see langword="Type" />。</summary>
      <param name="value">要更改为新 <see langword="Type" /> 的对象。</param>
      <param name="type">
        <paramref name="value" /> 将变成的新 <see langword="Type" />。</param>
      <param name="culture">一个 <see cref="T:System.Globalization.CultureInfo" /> 实例，用于控制数据类型的强制转换。 如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。  
注意   例如，此参数对于将表示 1000 的 <see langword="String" /> 转换为 <see langword="Double" /> 值是必需的，因为不同的区域性表示 1000 的形式不同。</param>
      <returns>一个包含作为新类型的给定值的对象。</returns>
    </member>
    <member name="M:System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)">
      <summary>从 <see cref="M:System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)" /> 返回后，将 <paramref name="args" /> 参数还原为从 <see langword="BindToMethod" /> 传入时的状态。</summary>
      <param name="args">传入的实参。 参数的类型和值都可更改。</param>
      <param name="state">联编程序提供的对象，用于跟踪参数的重新排序。</param>
    </member>
    <member name="M:System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])">
      <summary>基于参数类型，从给定的方法集中选择一个方法。</summary>
      <param name="bindingAttr">
        <see cref="T:System.Reflection.BindingFlags" /> 值的按位组合。</param>
      <param name="match">用于匹配的候选方法集。 例如，当 <see cref="T:System.Reflection.Binder" /> 使用 <see cref="Overload:System.Type.InvokeMember" /> 对象时，此参数将指定反射已确定为可能匹配项的方法集，通常是因为它们有正确的成员名称。 由 <see cref="P:System.Type.DefaultBinder" /> 提供的默认实现会更改此数组的顺序。</param>
      <param name="types">用于定位匹配方法的参数类型。</param>
      <param name="modifiers">使绑定能够处理在其中修改了类型的参数签名的参数修饰符数组。</param>
      <returns>如果找到，则为匹配的方法；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">对于默认联编程序，<paramref name="match" /> 包含多个与由 <paramref name="types" /> 描述的参数类型良好匹配且匹配程序相同的方法。 例如，<paramref name="types" /> 中的数组包含一个用于 <c>MyClass</c> 的 <see cref="T:System.Type" /> 对象，并且 <paramref name="match" /> 中的数组包含一个采用 <c>MyClass</c> 的基类的方法和一个采用 <c>MyClass</c> 实现的接口的方法。</exception>
      <exception cref="T:System.ArgumentException">对于默认联编程序，<paramref name="match" /> 为 <see langword="null" /> 或一个空数组。  
或 
<paramref name="types" /> 的元素从 <see cref="T:System.Type" /> 派生，但并不属于类型 <see langword="RuntimeType" />。</exception>
    </member>
    <member name="M:System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>基于指定的判据，从给定的属性集中选择一个属性。</summary>
      <param name="bindingAttr">
        <see cref="T:System.Reflection.BindingFlags" /> 值的按位组合。</param>
      <param name="match">用于匹配的候选属性集。 例如，当 <see cref="T:System.Reflection.Binder" /> 使用 <see cref="Overload:System.Type.InvokeMember" /> 对象时，此参数将指定反射已确定为可能匹配项的属性集，通常是因为它们有正确的成员名称。 由 <see cref="P:System.Type.DefaultBinder" /> 提供的默认实现会更改此数组的顺序。</param>
      <param name="returnType">匹配属性必须具有的返回值。</param>
      <param name="indexes">所搜索的属性的索引类型。 用于索引属性，如类的索引器。</param>
      <param name="modifiers">使绑定能够处理在其中修改了类型的参数签名的参数修饰符数组。</param>
      <returns>匹配的属性。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">对于默认联编程序，<paramref name="match" /> 包含多个与 <paramref name="returnType" /> 和 <paramref name="indexes" /> 良好匹配且匹配程序相同的属性。</exception>
      <exception cref="T:System.ArgumentException">对于默认联编程序，<paramref name="match" /> 为 <see langword="null" /> 或一个空数组。</exception>
    </member>
    <member name="T:System.Reflection.BindingFlags">
      <summary>指定控制绑定以及通过反射执行成员和类型搜索的方式的标记。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.CreateInstance">
      <summary>指定反射应创建指定类型的实例。 调用与给定参数匹配的构造函数。 忽略提供的成员名称。 如果未指定查找的类型，则应用“（实例 | 公共）”。 不能调用类型初始值设定项。  
此标志会传递给 <see langword="InvokeMember" /> 方法以调用构造函数。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.DeclaredOnly">
      <summary>指定只应考虑在所提供类型的层次结构级别上声明的成员。 不考虑继承的成员。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Default">
      <summary>指定未定义任何绑定标志。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.DoNotWrapExceptions" />
    <member name="F:System.Reflection.BindingFlags.ExactBinding">
      <summary>指定提供的参数的类型必须与对应形参的类型完全匹配。 如果调用方提供非 null <see langword="Binder" /> 对象，则反射会引发异常，因为这意味着调用方在提供将选取适当方法的 <see langword="BindToXXX" /> 实现。 当自定义绑定器可实现此标志的语义时，默认绑定器会忽略此标志。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.FlattenHierarchy">
      <summary>指定应返回层次结构往上的公共成员和受保护静态成员。 不返回继承类中的私有静态成员。 静态成员包括字段、方法、事件和属性。 不支持嵌套类型。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.GetField">
      <summary>指定应返回指定字段的值。  
此标志会传递给 <see langword="InvokeMember" /> 方法以获取字段值。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.GetProperty">
      <summary>指定应返回指定属性的值。  
此标志会传递给 <see langword="InvokeMember" /> 方法以调用属性 getter。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.IgnoreCase">
      <summary>指定在绑定时不应考虑成员名称的大小写。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.IgnoreReturn">
      <summary>在 COM 互操作中用于指定可以忽略成员的返回值。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Instance">
      <summary>指定实例成员要包括在搜索中。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.InvokeMethod">
      <summary>指定要调用的方法。 这不必是构造函数或类型初始值设定项。  
此标志会传递给 <see langword="InvokeMember" /> 方法以调用方法。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.NonPublic">
      <summary>指定非公共成员要包括在搜索中。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.OptionalParamBinding">
      <summary>返回其参数计数与提供的参数数量匹配的成员集。 此绑定标志用于参数具有默认值的方法和使用变量参数 (varargs) 的方法。 此标志只应与 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 结合使用。使用默认值的参数仅在省略了尾随参数的调用中使用。 它们必须是位于最后面的参数。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Public">
      <summary>指定公共成员要包括在搜索中。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.PutDispProperty">
      <summary>指定应调用 COM 对象上的 <see langword="PROPPUT" /> 成员。 <see langword="PROPPUT" /> 指定使用值的属性设置函数。 如果属性同时具有 <see langword="PROPPUT" /> 和 <see langword="PROPPUTREF" /> 并且你需要区分调用哪一个，请使用 <see langword="PutDispProperty" />。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.PutRefDispProperty">
      <summary>指定应调用 COM 对象上的 <see langword="PROPPUTREF" /> 成员。 <see langword="PROPPUTREF" /> 指定使用引用而不是值的属性设置函数。 如果属性同时具有 <see langword="PROPPUT" /> 和 <see langword="PROPPUTREF" /> 并且你需要区分调用哪一个，请使用 <see langword="PutRefDispProperty" />。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.SetField">
      <summary>指定应设置指定字段的值。  
此标志会传递给 <see langword="InvokeMember" /> 方法以设置字段值。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.SetProperty">
      <summary>指定应设置指定属性的值。 对于 COM 属性，指定此绑定标志等效于指定 <see langword="PutDispProperty" /> 和 <see langword="PutRefDispProperty" />。  
此标志会传递给 <see langword="InvokeMember" /> 方法以调用属性 setter。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.Static">
      <summary>指定静态成员要包括在搜索中。</summary>
    </member>
    <member name="F:System.Reflection.BindingFlags.SuppressChangeType">
      <summary>未实现。</summary>
    </member>
    <member name="T:System.Reflection.CallingConventions">
      <summary>定义方法的有效调用约定。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.Any">
      <summary>指定可以使用 <see langword="Standard" /> 调用约定或 <see langword="VarArgs" /> 调用约定。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.ExplicitThis">
      <summary>指定该签名是函数指针签名，它表示对实例或虚方法（不是静态方法）的调用。 如果设置了 <see langword="ExplicitThis" />，则还须设置 <see langword="HasThis" />。 传递到被调用方法的第一个参数仍然是 <see langword="this" /> 指针，但第一个参数的类型现在未知。 因此，应将描述 <see langword="this" /> 指针的类型（或类）的标记显式存储到其元数据签名中。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.HasThis">
      <summary>指定一个实例或虚方法（不是静态方法）。 运行时，向被调用方法传递一个指向目标对象的指针作为此方法的第一个参数（<see langword="this" /> 指针）。 存储在元数据中的签名不包括此第一个参数的类型，因为此方法是已知的，并且其所有者类能够从元数据中发现。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.Standard">
      <summary>指定公共语言运行时确定的默认调用约定。 对静态方法使用此调用约定。 对实例或虚方法使用 <see langword="HasThis" />。</summary>
    </member>
    <member name="F:System.Reflection.CallingConventions.VarArgs">
      <summary>指定包含变量参数的方法的调用约定。</summary>
    </member>
    <member name="T:System.Reflection.ConstructorInfo">
      <summary>发现类构造函数的属性并提供对构造函数元数据的访问权。</summary>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.ConstructorInfo" /> 类的新实例。</summary>
    </member>
    <member name="F:System.Reflection.ConstructorInfo.ConstructorName">
      <summary>表示存储在元数据中的类构造函数方法的名称。 该名称始终为“.ctor”。 此字段为只读。</summary>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj">与此实例进行比较的对象，或为 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.Invoke(System.Object[])">
      <summary>调用由具有指定参数的实例反映的构造函数，为不常用的参数提供默认值。</summary>
      <param name="parameters">一个值的数组，其与此构造函数的参数的数量、顺序和类型（在默认绑定的约束下）相匹配。 如果此构造函数不采用参数，则使用具有零个元素或 <see langword="null" /> 的数组，如 Object[] parameters = new Object[0] 中所示。 此数组中未使用值显式初始化的任何对象都将包含该对象类型的默认值。 对于引用类型元素，此值为 <see langword="null" />。 对于值类型元素，此值为 0、0.0 或 <see langword="false" />，具体取决于特定的元素类型。</param>
      <returns>与构造函数关联的类的实例。</returns>
      <exception cref="T:System.MemberAccessException">此类为抽象类。  
 或  
 构造函数是一个类初始值设定项。</exception>
      <exception cref="T:System.MethodAccessException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.MemberAccessException" />。  


            

 构造函数专用或受保护，且调用方缺少 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 数组不包含与此构造函数接受的类型匹配的值。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">调用的构造函数引发异常。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">传递的参数数量不正确。</exception>
      <exception cref="T:System.NotSupportedException">不可创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所需的代码访问权限。</exception>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>在派生类中实现时，在指定 <see langword="Binder" /> 的约束下调用具有指定参数的此 <see langword="ConstructorInfo" /> 所反映的构造函数。</summary>
      <param name="invokeAttr">指定绑定类型的 <see langword="BindingFlags" /> 值之一。</param>
      <param name="binder">一个 <see langword="Binder" />，它定义一组属性并通过反射来启用绑定、自变量类型强制转换和成员调用。 如果 <paramref name="binder" /> 为 <see langword="null" />，则使用 <see langword="Binder.DefaultBinding" />。</param>
      <param name="parameters">一组 <see langword="Object" /> 类型，该类型用于在 <paramref name="binder" /> 的约束下匹配此构造函数的参数的个数、顺序和类型。 如果此构造函数不需要参数，则像 Object[] parameters = new Object[0] 中那样传递一个包含零元素的数组。 此数组中未使用值显式初始化的任何对象都将包含该对象类型的默认值。 对于引用类型元素，此值为 <see langword="null" />。 对于值类型元素，此值为 0、0.0 或 <see langword="false" />，具体取决于特定的元素类型。</param>
      <param name="culture">用于控制类型强制转换的 <see cref="T:System.Globalization.CultureInfo" />。 如果这是 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <returns>与构造函数关联的类的实例。</returns>
      <exception cref="T:System.ArgumentException">在 <paramref name="binder" /> 的约束下，<paramref name="parameters" /> 数组不包含与此构造函数所接受的类型相匹配的值。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">调用的构造函数引发异常。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">传递的参数数量不正确。</exception>
      <exception cref="T:System.NotSupportedException">不可创建 <see cref="T:System.TypedReference" />、<see cref="T:System.ArgIterator" /> 和 <see cref="T:System.RuntimeArgumentHandle" /> 类型。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所需的代码访问权限。</exception>
      <exception cref="T:System.MemberAccessException">此类为抽象类。  

或 -  

 构造函数是一个类初始值设定项。</exception>
      <exception cref="T:System.MethodAccessException">构造函数专用或受保护，且调用方缺少 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess" />。</exception>
    </member>
    <member name="P:System.Reflection.ConstructorInfo.MemberType">
      <summary>获取 <see cref="T:System.Reflection.MemberTypes" /> 值，该值指示此成员是构造函数。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberTypes" /> 值，指示此成员是构造函数。</returns>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.op_Equality(System.Reflection.ConstructorInfo,System.Reflection.ConstructorInfo)">
      <summary>指示两个 <see cref="T:System.Reflection.ConstructorInfo" /> 对象是否相等。</summary>
      <param name="left">要比较的第一个 <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <param name="right">要比较的第二个 <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <returns>如果 <paramref name="left" /> 等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.ConstructorInfo.op_Inequality(System.Reflection.ConstructorInfo,System.Reflection.ConstructorInfo)">
      <summary>指示两个 <see cref="T:System.Reflection.ConstructorInfo" /> 对象是否不相等。</summary>
      <param name="left">要比较的第一个 <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <param name="right">要比较的第二个 <see cref="T:System.Reflection.ConstructorInfo" />。</param>
      <returns>如果 <paramref name="left" /> 不等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.Reflection.ConstructorInfo.TypeConstructorName">
      <summary>表示存储于元数据中的类型构造函数方法的名称。 该名称始终为“.cctor”。 此属性是只读的。</summary>
    </member>
    <member name="T:System.Reflection.CustomAttributeData">
      <summary>提供对加载到仅反射上下文的程序集、模块、类型、成员和参数的自定义属性数据的访问权限。</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.CustomAttributeData" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Reflection.CustomAttributeData.AttributeType">
      <summary>键入该特性的类型。</summary>
      <returns>属性的类型。</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeData.Constructor">
      <summary>获取一个 <see cref="T:System.Reflection.ConstructorInfo" /> 对象，表示应已初始化自定义属性的构造函数。</summary>
      <returns>一个对象，表示应已初始化由 <see cref="T:System.Reflection.CustomAttributeData" /> 类的当前实例表示的自定义属性的构造函数。</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeData.ConstructorArguments">
      <summary>获取为由 <see cref="T:System.Reflection.CustomAttributeData" /> 对象表示的特性实例指定的位置参数列表。</summary>
      <returns>一个结构的集合，表示为自定义特性实例指定的位置参数。</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj">与此实例进行比较的对象，或为 <see langword="null" />。</param>
      <returns>如果 <paramref name="obj" /> 等于当前的实例，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)">
      <summary>返回 <see cref="T:System.Reflection.CustomAttributeData" /> 对象列表，这些对象表示已应用到目标程序集的特性相关数据。</summary>
      <param name="target">要检索其自定义特性数据的程序集。</param>
      <returns>对象的列表，表示已应用到目标程序集的特性相关数据。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)">
      <summary>返回 <see cref="T:System.Reflection.CustomAttributeData" /> 对象列表，这些对象表示已应用到目标成员的特性相关数据。</summary>
      <param name="target">要检索其特性数据的成员。</param>
      <returns>对象的列表，表示已应用到目标成员的特性相关数据。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)">
      <summary>返回 <see cref="T:System.Reflection.CustomAttributeData" /> 对象列表，这些对象表示已应用到目标模块的特性相关数据。</summary>
      <param name="target">要检索其自定义特性数据的模块。</param>
      <returns>对象的列表，表示已应用到目标模块的特性相关数据。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)">
      <summary>返回 <see cref="T:System.Reflection.CustomAttributeData" /> 对象列表，这些对象表示已应用到目标参数的特性相关数据。</summary>
      <param name="target">要检索其特性数据的参数。</param>
      <returns>对象的列表，表示已应用到目标参数的特性相关数据。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前 <see cref="T:System.Object" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeData.NamedArguments">
      <summary>获取为由 <see cref="T:System.Reflection.CustomAttributeData" /> 对象表示的特性实例指定的命名参数列表。</summary>
      <returns>一个结构的集合，表示为自定义特性实例指定的命名参数。</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeData.ToString">
      <summary>返回自定义特性的字符串表示形式。</summary>
      <returns>一个表示自定义特性的字符串值。</returns>
    </member>
    <member name="T:System.Reflection.CustomAttributeExtensions">
      <summary>包含检索自定义特性的静态方法。</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)">
      <summary>检索应用于指定程序集的指定类型的自定义特性。</summary>
      <param name="element">要检查的程序集。</param>
      <param name="attributeType">要搜索的属性的类型。</param>
      <returns>与 <paramref name="attributeType" /> 匹配的自定义特性，如果未找到此类特性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)">
      <summary>检索应用于指定成员的指定类型的自定义特性。</summary>
      <param name="element">要检查的成员。</param>
      <param name="attributeType">要搜索的属性的类型。</param>
      <returns>与 <paramref name="attributeType" /> 匹配的自定义特性，如果未找到此类特性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>检索应用于指定成员的指定类型的自定义特性，并可选择检查该成员的上级。</summary>
      <param name="element">要检查的成员。</param>
      <param name="attributeType">要搜索的属性的类型。</param>
      <param name="inherit">如果检查 <paramref name="element" /> 的上级，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>与 <paramref name="attributeType" /> 匹配的自定义特性，如果未找到此类特性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module,System.Type)">
      <summary>检索应用于指定模块的指定类型的自定义特性。</summary>
      <param name="element">要检查的模块。</param>
      <param name="attributeType">要搜索的属性的类型。</param>
      <returns>与 <paramref name="attributeType" /> 匹配的自定义特性，如果未找到此类特性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)">
      <summary>检索应用于指定参数的指定类型的自定义特性。</summary>
      <param name="element">要检查的参数。</param>
      <param name="attributeType">要搜索的属性的类型。</param>
      <returns>与 <paramref name="attributeType" /> 匹配的自定义特性，如果未找到此类特性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>检索应用于指定参数的指定类型的自定义特性，并可选择检查该参数的上级。</summary>
      <param name="element">要检查的参数。</param>
      <param name="attributeType">要搜索的属性的类型。</param>
      <param name="inherit">如果检查 <paramref name="element" /> 的上级，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>匹配 <paramref name="attributeType" /> 的自定义特性，如果未找到此类特性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Assembly)">
      <summary>检索应用于指定程序集的指定类型的自定义特性。</summary>
      <param name="element">要检查的程序集。</param>
      <typeparam name="T">要搜索的属性的类型。</typeparam>
      <returns>与 <paramref name="T" /> 匹配的自定义特性，如果未找到此类特性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)">
      <summary>检索应用于指定成员的指定类型的自定义特性。</summary>
      <param name="element">要检查的成员。</param>
      <typeparam name="T">要搜索的属性的类型。</typeparam>
      <returns>与 <paramref name="T" /> 匹配的自定义特性，如果未找到此类特性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
      <summary>检索应用于指定成员的指定类型的自定义特性，并可选择检查该成员的上级。</summary>
      <param name="element">要检查的成员。</param>
      <param name="inherit">如果检查 <paramref name="element" /> 的上级，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <typeparam name="T">要搜索的属性的类型。</typeparam>
      <returns>与 <paramref name="T" /> 匹配的自定义特性，如果未找到此类特性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Module)">
      <summary>检索应用于指定模块的指定类型的自定义特性。</summary>
      <param name="element">要检查的模块。</param>
      <typeparam name="T">要搜索的属性的类型。</typeparam>
      <returns>与 <paramref name="T" /> 匹配的自定义特性，如果未找到此类特性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo)">
      <summary>检索应用于指定参数的指定类型的自定义特性。</summary>
      <param name="element">要检查的参数。</param>
      <typeparam name="T">要搜索的属性的类型。</typeparam>
      <returns>与 <paramref name="T" /> 匹配的自定义特性，如果未找到此类特性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.ParameterInfo,System.Boolean)">
      <summary>检索应用于指定参数的指定类型的自定义特性，并可选择检查该参数的上级。</summary>
      <param name="element">要检查的参数。</param>
      <param name="inherit">如果检查 <paramref name="element" /> 的上级，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <typeparam name="T">要搜索的属性的类型。</typeparam>
      <returns>与 <paramref name="T" /> 匹配的自定义特性，如果未找到此类特性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个请求的属性。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)">
      <summary>检索应用于指定程序集的自定义特性集合。</summary>
      <param name="element">要检查的程序集。</param>
      <returns>将应用于 <paramref name="element" /> 的自定义特性的集合，如果此类特性不存在，则为空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
      <summary>检索应用于指定程序集的指定类型的自定义特性集合</summary>
      <param name="element">要检查的程序集。</param>
      <param name="attributeType">要搜索的属性的类型。</param>
      <returns>将应用于与 <paramref name="element" /> 并与 <paramref name="attributeType" /> 匹配的自定义特性的集合，如果此类特性不存在，则为空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)">
      <summary>检索应用于指定成员的自定义特性集合。</summary>
      <param name="element">要检查的成员。</param>
      <returns>将应用于 <paramref name="element" /> 的自定义特性的集合，如果此类特性不存在，则为空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
      <summary>检索应用于指定成员的自定义特性集合，并可选择检查该成员的上级。</summary>
      <param name="element">要检查的成员。</param>
      <param name="inherit">如果检查 <paramref name="element" /> 的上级，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>将应用于与指定的条件匹配的 <paramref name="element" /> 的自定义特性的集合，如果此类特性不存在，则为空集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)">
      <summary>检索应用于指定成员的指定类型的自定义特性集合。</summary>
      <param name="element">要检查的成员。</param>
      <param name="attributeType">要搜索的属性的类型。</param>
      <returns>将应用于与 <paramref name="element" /> 并与 <paramref name="attributeType" /> 匹配的自定义特性的集合，如果此类特性不存在，则为空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>检索应用于指定成员的指定类型的自定义特性集合，并可选择检查该成员的上级。</summary>
      <param name="element">要检查的成员。</param>
      <param name="attributeType">要搜索的属性的类型。</param>
      <param name="inherit">如果检查 <paramref name="element" /> 的上级，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>将应用于与 <paramref name="element" /> 并与 <paramref name="attributeType" /> 匹配的自定义特性的集合，如果此类特性不存在，则为空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)">
      <summary>检索应用于指定模块的自定义特性集合。</summary>
      <param name="element">要检查的模块。</param>
      <returns>将应用于 <paramref name="element" /> 的自定义特性的集合，如果此类特性不存在，则为空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module,System.Type)">
      <summary>检索应用于指定模块的指定类型的自定义特性集合。</summary>
      <param name="element">要检查的模块。</param>
      <param name="attributeType">要搜索的属性的类型。</param>
      <returns>将应用于与 <paramref name="element" /> 并与 <paramref name="attributeType" /> 匹配的自定义特性的集合，如果此类特性不存在，则为空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo)">
      <summary>检索应用于指定参数的自定义特性的集合。</summary>
      <param name="element">要检查的参数。</param>
      <returns>将应用于 <paramref name="element" /> 的自定义特性的集合，如果此类特性不存在，则为空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)">
      <summary>检索应用于指定参数的自定义特性集合，并可选择检查该参数的上级。</summary>
      <param name="element">要检查的参数。</param>
      <param name="inherit">如果检查 <paramref name="element" /> 的上级，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>将应用于 <paramref name="element" /> 的自定义特性的集合，如果此类特性不存在，则为空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
      <summary>检索应用于指定参数的指定类型的自定义特性集合。</summary>
      <param name="element">要检查的参数。</param>
      <param name="attributeType">要搜索的属性的类型。</param>
      <returns>将应用于与 <paramref name="element" /> 并与 <paramref name="attributeType" /> 匹配的自定义特性的集合，如果此类特性不存在，则为空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>检索应用于指定参数的指定类型的自定义特性集合，并可选择检查该参数的上级。</summary>
      <param name="element">要检查的参数。</param>
      <param name="attributeType">要搜索的属性的类型。</param>
      <param name="inherit">如果检查 <paramref name="element" /> 的上级，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>将应用于与 <paramref name="element" /> 并与 <paramref name="attributeType" /> 匹配的自定义特性的集合，如果此类特性不存在，则为空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Assembly)">
      <summary>检索应用于指定程序集的指定类型的自定义特性集合</summary>
      <param name="element">要检查的程序集。</param>
      <typeparam name="T">要搜索的属性的类型。</typeparam>
      <returns>将应用于与 <paramref name="element" /> 并与 <paramref name="T" /> 匹配的自定义特性的集合，如果此类特性不存在，则为空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)">
      <summary>检索应用于指定成员的指定类型的自定义特性集合。</summary>
      <param name="element">要检查的成员。</param>
      <typeparam name="T">要搜索的属性的类型。</typeparam>
      <returns>将应用于与 <paramref name="element" /> 并与 <paramref name="T" /> 匹配的自定义特性的集合，如果此类特性不存在，则为空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
      <summary>检索应用于指定成员的指定类型的自定义特性集合，并可选择检查该成员的上级。</summary>
      <param name="element">要检查的成员。</param>
      <param name="inherit">如果检查 <paramref name="element" /> 的上级，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <typeparam name="T">要搜索的属性的类型。</typeparam>
      <returns>将应用于与 <paramref name="element" /> 并与 <paramref name="T" /> 匹配的自定义特性的集合，如果此类特性不存在，则为空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Module)">
      <summary>检索应用于指定模块的指定类型的自定义特性集合。</summary>
      <param name="element">要检查的模块。</param>
      <typeparam name="T">要搜索的属性的类型。</typeparam>
      <returns>将应用于与 <paramref name="element" /> 并与 <paramref name="T" /> 匹配的自定义特性的集合，如果此类特性不存在，则为空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo)">
      <summary>检索应用于指定参数的指定类型的自定义特性集合。</summary>
      <param name="element">要检查的参数。</param>
      <typeparam name="T">要搜索的属性的类型。</typeparam>
      <returns>将应用于与 <paramref name="element" /> 并与 <paramref name="T" /> 匹配的自定义特性的集合，如果此类特性不存在，则为空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.ParameterInfo,System.Boolean)">
      <summary>检索应用于指定参数的指定类型的自定义特性集合，并可选择检查该参数的上级。</summary>
      <param name="element">要检查的参数。</param>
      <param name="inherit">如果检查 <paramref name="element" /> 的上级，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <typeparam name="T">要搜索的属性的类型。</typeparam>
      <returns>将应用于与 <paramref name="element" /> 并与 <paramref name="T" /> 匹配的自定义特性的集合，如果此类特性不存在，则为空集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly,System.Type)">
      <summary>确定是否将指定类型的任何自定义属性应用于指定的程序集。</summary>
      <param name="element">要检查的程序集。</param>
      <param name="attributeType">要搜索的特性类型。</param>
      <returns>如果将指定类型的特性应用于 <paramref name="element" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)">
      <summary>确定是否将指定类型的任何自定义属性应用于指定的成员。</summary>
      <param name="element">要检查的成员。</param>
      <param name="attributeType">要搜索的属性的类型。</param>
      <returns>如果将指定类型的特性应用于 <paramref name="element" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)">
      <summary>指示一个指定类型的自定义特性是否应用于一个指定的数字，并选择性地应用于其的上级。</summary>
      <param name="element">要检查的成员。</param>
      <param name="attributeType">要搜索的特性类型。</param>
      <param name="inherit">如果检查 <paramref name="element" /> 的上级，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>如果将指定类型的特性应用于 <paramref name="element" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="element" /> 不是构造函数、方法、属性、事件、类型或字段。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module,System.Type)">
      <summary>确定是否将指定类型的任何自定义属性应用于指定的模块。</summary>
      <param name="element">要检查的模块。</param>
      <param name="attributeType">要搜索的属性的类型。</param>
      <returns>如果将指定类型的特性应用于 <paramref name="element" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type)">
      <summary>确定是否将指定类型的任何自定义属性应用于指定的参数。</summary>
      <param name="element">要检查的参数。</param>
      <param name="attributeType">要搜索的属性的类型。</param>
      <returns>如果将指定类型的特性应用于 <paramref name="element" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
      <summary>指示一个指定类型的自定义特性是否应用于一个指定的参数，并选择性地应用于其的上级。</summary>
      <param name="element">要检查的参数。</param>
      <param name="attributeType">要搜索的属性的类型。</param>
      <param name="inherit">如果检查 <paramref name="element" /> 的上级，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>如果将指定类型的特性应用于 <paramref name="element" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 或 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是从 <see cref="T:System.Attribute" /> 派生的。</exception>
    </member>
    <member name="T:System.Reflection.CustomAttributeFormatException">
      <summary>当自定义特性的二进制格式无效时引发的异常。</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.Reflection.CustomAttributeFormatException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用指定的序列化和上下文信息初始化 <see cref="T:System.Reflection.CustomAttributeFormatException" /> 类的新实例。</summary>
      <param name="info">用于序列化或反序列化自定义属性的数据。</param>
      <param name="context">自定义属性的源和目标。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see cref="T:System.Reflection.CustomAttributeFormatException" /> 类的新实例。</summary>
      <param name="message">指示引发异常的原因的消息。</param>
    </member>
    <member name="M:System.Reflection.CustomAttributeFormatException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Reflection.CustomAttributeFormatException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Reflection.CustomAttributeNamedArgument">
      <summary>表示仅反射上下文中的自定义属性的命名自变量。</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Object)">
      <summary>初始化 <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> 类（它表示自定义属性的指定字段或属性）的新实例，并指定字段或属性的值。</summary>
      <param name="memberInfo">自定义属性的字段或属性。 新的 <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> 对象表示此成员及其值。</param>
      <param name="value">自定义属性的字段或属性的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="memberInfo" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="memberInfo" /> 不是自定义属性的字段或属性。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.#ctor(System.Reflection.MemberInfo,System.Reflection.CustomAttributeTypedArgument)">
      <summary>初始化 <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> 类（它表示自定义属性的指定字段或属性）的新实例，并指定描述字段或属性的类型和值的 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 对象。</summary>
      <param name="memberInfo">自定义属性的字段或属性。 新的 <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> 对象表示此成员及其值。</param>
      <param name="typedArgument">一个描述字段或属性的类型和值的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="memberInfo" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj">与此实例进行比较的对象，或为 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeNamedArgument.IsField">
      <summary>获取一个值，该值指示指定参数是否是一个字段。</summary>
      <returns>如果命名参数为字段，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeNamedArgument.MemberInfo">
      <summary>获取将用于设置指定参数的特性成员。</summary>
      <returns>将用于设置命名参数的特性成员。</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeNamedArgument.MemberName">
      <summary>获取将用于设置指定参数的特性成员名称。</summary>
      <returns>用于设置命名参数的特性成员的名称。</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.op_Equality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)">
      <summary>测试两个 <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> 结构是否相等。</summary>
      <param name="left">相等运算符左侧的结构。</param>
      <param name="right">相等运算符右侧的结构。</param>
      <returns>如果两个 <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> 结构相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.op_Inequality(System.Reflection.CustomAttributeNamedArgument,System.Reflection.CustomAttributeNamedArgument)">
      <summary>测试两个 <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> 结构是否不同。</summary>
      <param name="left">不等运算符左侧的结构。</param>
      <param name="right">不等运算符右侧的结构。</param>
      <returns>如果两个 <see cref="T:System.Reflection.CustomAttributeNamedArgument" /> 结构不同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeNamedArgument.ToString">
      <summary>返回由参数名称、等号和的字符串表示的参数值组成的字符串。</summary>
      <returns>由参数名称、等号和的字符串表示的参数值组成的字符串。</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeNamedArgument.TypedValue">
      <summary>获取一个 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 结构，该结构可用于获取当前指定参数的类型和值。</summary>
      <returns>一个结构，可用于获取当前命名参数的类型和值。</returns>
    </member>
    <member name="T:System.Reflection.CustomAttributeTypedArgument">
      <summary>表示只反射上下文中的自定义特性的参数，或数组参数的元素。</summary>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Object)">
      <summary>使用指定的值初始化 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 类的新实例。</summary>
      <param name="value">自定义特性参数的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.#ctor(System.Type,System.Object)">
      <summary>用指定的类型和值初始化 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 类的新实例。</summary>
      <param name="argumentType">自定义特性参数的类型。</param>
      <param name="value">自定义特性参数的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argumentType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Reflection.CustomAttributeTypedArgument.ArgumentType">
      <summary>获取参数或数组参数元素的类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象，表示参数或数组元素的类型。</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.Equals(System.Object)">
      <summary>指示此实例与指定对象是否相等。</summary>
      <param name="obj">要比较的另一个对象。</param>
      <returns>如果 <see langword="true" /> 和该实例具有相同的类型并表示相同的值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>一个 32 位带符号整数，它是此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.op_Equality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)">
      <summary>测试两个 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 结构是否相等。</summary>
      <param name="left">相等运算符左侧的 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 结构。</param>
      <param name="right">相等运算符右侧的 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 结构。</param>
      <returns>如果两个 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 结构相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.op_Inequality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)">
      <summary>测试两个 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 结构是否不同。</summary>
      <param name="left">不等运算符左侧的 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 结构。</param>
      <param name="right">不等运算符右侧的 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 结构。</param>
      <returns>如果两个 <see cref="T:System.Reflection.CustomAttributeTypedArgument" /> 结构不同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.CustomAttributeTypedArgument.ToString">
      <summary>返回由参数名称、等号和字符串表示的参数值组成的字符串。</summary>
      <returns>由参数名称、等号和字符串表示的参数值组成的字符串。</returns>
    </member>
    <member name="P:System.Reflection.CustomAttributeTypedArgument.Value">
      <summary>获取简单参数或数组参数的元素的参数值；获取数组参数的值的集合。</summary>
      <returns>一个表示参数或元素的值的对象，或表示数组类型参数的值的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 对象的一个泛型 <see cref="T:System.Reflection.CustomAttributeTypedArgument" />。</returns>
    </member>
    <member name="T:System.Reflection.DefaultMemberAttribute">
      <summary>定义某类型的成员，该成员是 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 使用的默认成员。</summary>
    </member>
    <member name="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.DefaultMemberAttribute" /> 类的新实例。</summary>
      <param name="memberName">包含要调用的成员名称的 <see langword="String" />。 这可能是一个构造函数、方法、属性或字段。 在调用成员时必须指定合适的调用属性。 通过传递一个空 <see langword="String" /> 作为成员名称，可以指定类的默认成员。  
类型的默认成员由 <see langword="DefaultMemberAttribute" /> 自定义属性标记，或按通常的方法在 COM 中标记。</param>
    </member>
    <member name="P:System.Reflection.DefaultMemberAttribute.MemberName">
      <summary>从属性中获取名称。</summary>
      <returns>表示成员名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.EventAttributes">
      <summary>指定事件的属性。</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.None">
      <summary>指定该事件不具有属性。</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.ReservedMask">
      <summary>指定仅供公共语言运行时使用的保留标志。</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.RTSpecialName">
      <summary>指定公共语言运行时应检查名称编码。</summary>
    </member>
    <member name="F:System.Reflection.EventAttributes.SpecialName">
      <summary>指定事件特殊，具体之处由名称描述。</summary>
    </member>
    <member name="T:System.Reflection.EventInfo">
      <summary>发现事件的属性并提供对事件元数据的访问权。</summary>
    </member>
    <member name="M:System.Reflection.EventInfo.#ctor">
      <summary>初始化 <see langword="EventInfo" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>将事件处理程序添加到事件源。</summary>
      <param name="target">事件源。</param>
      <param name="handler">封装当目标引发事件时要调用的方法。</param>
      <exception cref="T:System.InvalidOperationException">该事件没有公共 <see langword="add" /> 访问器。</exception>
      <exception cref="T:System.ArgumentException">无法使用传入的处理程序。</exception>
      <exception cref="T:System.MethodAccessException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.MemberAccessException" />。  


            

 调用方没有对成员的访问权限。</exception>
      <exception cref="T:System.Reflection.TargetException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获 <see cref="T:System.Exception" />。  


            

 <paramref name="target" /> 参数为 <see langword="null" />，并且此事件不是静态事件。  
或 
未在目标上声明 <see cref="T:System.Reflection.EventInfo" />。</exception>
    </member>
    <member name="P:System.Reflection.EventInfo.AddMethod">
      <summary>获取事件的 <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> 方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象，包括非公共方法。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 方法的 <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> 对象。</returns>
    </member>
    <member name="P:System.Reflection.EventInfo.Attributes">
      <summary>获取此事件的属性。</summary>
      <returns>此事件的只读特性。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj">与此实例进行比较的对象，或为 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.EventInfo.EventHandlerType">
      <summary>获取与此事件关联的基础事件处理程序委托的 <see langword="Type" /> 对象。</summary>
      <returns>表示委托事件处理程序的只读 <see langword="Type" /> 对象。</returns>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetAddMethod">
      <summary>返回用于向事件源添加事件处理程序委托的方法。</summary>
      <returns>一个 <see cref="T:System.Reflection.MethodInfo" /> 对象，表示用于向事件源添加事件处理程序委托的方法。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetAddMethod(System.Boolean)">
      <summary>在派生类中重写时，为事件的 <see cref="M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)" /> 方法检索 <see langword="MethodInfo" /> 对象，指定是否返回非公共方法。</summary>
      <param name="nonPublic">如果可以返回非公共方法，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>一个 <see cref="T:System.Reflection.MethodInfo" /> 对象，表示用于向事件源添加事件处理程序委托的方法。</returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> 为 <see langword="true" />，用于添加事件处理程序委托的方法为非公共方法，且调用方没有权限反映非公共方法。</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetOtherMethods">
      <summary>返回在元数据中使用 <see langword=".other" /> 指令与事件相关联的公共方法。</summary>
      <returns>一个数组，表示在元数据中通过使用 <see langword=".other" /> 指令与事件相关联的公共方法。 如果没有此类公共方法，则返回空数组。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetOtherMethods(System.Boolean)">
      <summary>返回在元数据中使用 <see langword=".other" /> 指令与事件相关联的方法，指定是否包括非公共方法。</summary>
      <param name="nonPublic">如果包括非公共方法，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>一个数组，表示在元数据中通过使用 <see langword=".other" /> 指令与事件相关联的方法。 如果没有与该规范匹配的方法，则返回空数组。</returns>
      <exception cref="T:System.NotImplementedException">未实现此方法。</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRaiseMethod">
      <summary>返回引发事件时所调用的方法。</summary>
      <returns>引发事件时所调用的方法。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)">
      <summary>在派生类中重写时，返回引发事件时调用的方法，指定是否返回非公共方法。</summary>
      <param name="nonPublic">如果可以返回非公共方法，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>引发事件时调用的 <see langword="MethodInfo" /> 对象。</returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> 为 <see langword="true" />，用于添加事件处理程序委托的方法为非公共方法，且调用方没有权限反映非公共方法。</exception>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRemoveMethod">
      <summary>返回用于从事件源删除事件处理程序委托的方法。</summary>
      <returns>一个 <see cref="T:System.Reflection.MethodInfo" /> 对象，表示用于从事件源删除事件处理程序委托的方法。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)">
      <summary>在派生类中重写时，检索用于删除事件方法的 <see langword="MethodInfo" /> 对象，指定是否返回非公共方法。</summary>
      <param name="nonPublic">如果可以返回非公共方法，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>一个 <see cref="T:System.Reflection.MethodInfo" /> 对象，表示用于从事件源删除事件处理程序委托的方法。</returns>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> 为 <see langword="true" />，用于添加事件处理程序委托的方法为非公共方法，且调用方没有权限反映非公共方法。</exception>
    </member>
    <member name="P:System.Reflection.EventInfo.IsMulticast">
      <summary>获取一个值，该值指示事件是否为多播。</summary>
      <returns>如果委托是多播委托的实例，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="P:System.Reflection.EventInfo.IsSpecialName">
      <summary>获取一个值，该值指示 <see langword="EventInfo" /> 是否具有一个有特殊意义的名称。</summary>
      <returns>如果此事件具有一个特殊名称，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.EventInfo.MemberType">
      <summary>获取 <see cref="T:System.Reflection.MemberTypes" /> 值，指示此成员为一个事件。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberTypes" /> 值，指示此成员为一个事件。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.op_Equality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
      <summary>指示两个 <see cref="T:System.Reflection.EventInfo" /> 对象是否相等。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <see langword="true" /> 等于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.op_Inequality(System.Reflection.EventInfo,System.Reflection.EventInfo)">
      <summary>指示两个 <see cref="T:System.Reflection.EventInfo" /> 对象是否不相等。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <see langword="true" /> 不等于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.EventInfo.RaiseMethod">
      <summary>获取引发该事件时所调用的方法，包括非公共方法。</summary>
      <returns>引发事件时所调用的方法。</returns>
    </member>
    <member name="M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>从事件源中删除事件处理程序。</summary>
      <param name="target">事件源。</param>
      <param name="handler">要从目标引发的事件解除关联的委托。</param>
      <exception cref="T:System.InvalidOperationException">该事件没有公共 <see langword="remove" /> 访问器。</exception>
      <exception cref="T:System.ArgumentException">无法使用传入的处理程序。</exception>
      <exception cref="T:System.Reflection.TargetException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获 <see cref="T:System.Exception" />。  


            

 <paramref name="target" /> 参数为 <see langword="null" />，并且此事件不是静态事件。  
或 
未在目标上声明 <see cref="T:System.Reflection.EventInfo" />。</exception>
      <exception cref="T:System.MethodAccessException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.MemberAccessException" />。  


            

 调用方没有对成员的访问权限。</exception>
    </member>
    <member name="P:System.Reflection.EventInfo.RemoveMethod">
      <summary>获取用于删除事件方法的 <see langword="MethodInfo" /> 对象，包括非公共方法。</summary>
      <returns>用于移除该事件方法的 <see langword="MethodInfo" /> 对象。</returns>
    </member>
    <member name="T:System.Reflection.ExceptionHandlingClause">
      <summary>表示结构化异常处理块中的子句。</summary>
    </member>
    <member name="M:System.Reflection.ExceptionHandlingClause.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.ExceptionHandlingClause" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.CatchType">
      <summary>获取由此子句处理的异常类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象，表示由此子句处理的异常类型，如果 <see cref="P:System.Reflection.ExceptionHandlingClause.Flags" /> 属性为 <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" /> 或 <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Finally" />，则为 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException">不能将属性用于对象的当前状态。</exception>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.FilterOffset">
      <summary>获取用户提供的筛选代码在方法体内的偏移量（以字节为单位）。</summary>
      <returns>用户提供的筛选代码在方法体内的偏移量（以字节为单位）。 如果 <see cref="P:System.Reflection.ExceptionHandlingClause.Flags" /> 属性具有 <see cref="F:System.Reflection.ExceptionHandlingClauseOptions.Filter" /> 之外的任何值，则此属性的值没有任何意义。</returns>
      <exception cref="T:System.InvalidOperationException">由于异常处理子句不是一个筛选器，因此无法获取偏移量。</exception>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.Flags">
      <summary>获取一个值，该值指示此异常处理子句是 finally 子句、类型筛选的子句还是用户筛选的子句。</summary>
      <returns>一个 <see cref="T:System.Reflection.ExceptionHandlingClauseOptions" /> 值，它指示此子句执行何种操作。</returns>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.HandlerLength">
      <summary>获取此异常处理子句的主体的长度（以字节为单位）。</summary>
      <returns>一个整数，表示形成此异常处理子句主体的 MSIL 的长度（以字节为单位）。</returns>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.HandlerOffset">
      <summary>获取此异常处理子句在方法体内的偏移量（以字节为单位）。</summary>
      <returns>一个整数，表示此异常处理子句在方法体内的偏移量（以字节为单位）。</returns>
    </member>
    <member name="M:System.Reflection.ExceptionHandlingClause.ToString">
      <summary>异常处理子句的字符串表示形式。</summary>
      <returns>一个字符串，列出筛选器子句类型的相应属性值。</returns>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.TryLength">
      <summary>包括此异常处理子句的 try 块的总长度（以字节为单位）。</summary>
      <returns>包括此异常处理子句的 try 块的总长度（以字节为单位）。</returns>
    </member>
    <member name="P:System.Reflection.ExceptionHandlingClause.TryOffset">
      <summary>包括此异常处理子句的 try 块在方法内的偏移量（以字节为单位）。</summary>
      <returns>一个整数，表示包括此异常处理子句的 try 块在方法内的偏移量（以字节为单位）。</returns>
    </member>
    <member name="T:System.Reflection.ExceptionHandlingClauseOptions">
      <summary>标识异常处理子句的种类。</summary>
    </member>
    <member name="F:System.Reflection.ExceptionHandlingClauseOptions.Clause">
      <summary>该子句接受从指定类型派生的所有异常。</summary>
    </member>
    <member name="F:System.Reflection.ExceptionHandlingClauseOptions.Fault">
      <summary>该子句在发生异常时执行，而不是在正常控制流完成之后执行。</summary>
    </member>
    <member name="F:System.Reflection.ExceptionHandlingClauseOptions.Filter">
      <summary>该子句包含用户指定的指令，这些指令确定是否应忽略异常（即是否应继续正常执行），由关联的处理程序处理异常，还是应将异常传递给下一个子句。</summary>
    </member>
    <member name="F:System.Reflection.ExceptionHandlingClauseOptions.Finally">
      <summary>try 块在任何时候退出时，该子句都会执行，无论是通过正常控制流还是因为未经处理的异常。</summary>
    </member>
    <member name="T:System.Reflection.FieldAttributes">
      <summary>指定描述字段特性的标志。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Assembly">
      <summary>指定该字段可由整个程序集访问。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FamANDAssem">
      <summary>指定该字段只能由此程序集中的子类型访问。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Family">
      <summary>指定该字段只能由类型和子类型访问。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FamORAssem">
      <summary>指定该字段可由任意位置的子类型访问，也可由整个程序集访问。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.FieldAccessMask">
      <summary>指定给定字段的访问级别。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasDefault">
      <summary>指定该字段具有默认值。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasFieldMarshal">
      <summary>指定该字段包含封送处理信息。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.HasFieldRVA">
      <summary>指定该字段具有相对虚拟地址 (RVA)。 RVA 是方法体在当前图像中的位置，它是相对于它所在的图像文件的开始的地址。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.InitOnly">
      <summary>指明该字段只能初始化，只可在构造函数的函数体中设置。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Literal">
      <summary>指定该字段的值是一个编译时（静态或早期绑定）常数。 设置它的任何试图将引出 <see cref="T:System.FieldAccessException" />。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.NotSerialized">
      <summary>指定扩展类型时不必序列化该字段。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.PinvokeImpl">
      <summary>留待将来使用。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Private">
      <summary>指定该字段只能由父类型访问。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.PrivateScope">
      <summary>指定该字段不能被引用。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Public">
      <summary>指定该字段可由任何可看见此范围的成员访问。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.ReservedMask">
      <summary>保留。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.RTSpecialName">
      <summary>指定公共语言运行时（元数据内部 API）应检查名称编码。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.SpecialName">
      <summary>指定一个特殊方法，并用名称说明该方法的特殊性。</summary>
    </member>
    <member name="F:System.Reflection.FieldAttributes.Static">
      <summary>指定该字段表示已定义的类型，否则为每实例方式。</summary>
    </member>
    <member name="T:System.Reflection.FieldInfo">
      <summary>发现字段的属性并提供对字段元数据的访问权限。</summary>
    </member>
    <member name="M:System.Reflection.FieldInfo.#ctor">
      <summary>初始化 <see langword="FieldInfo" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Reflection.FieldInfo.Attributes">
      <summary>获取与此字段关联的特性。</summary>
      <returns>此字段的 <see langword="FieldAttributes" />。</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj">与此实例进行比较的对象，或为 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.FieldHandle">
      <summary>获取 <see langword="RuntimeFieldHandle" />，它是字段的内部元数据表示形式的句柄。</summary>
      <returns>某个字段的内部元数据表示形式的句柄。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.FieldType">
      <summary>获取此字段对象的类型。</summary>
      <returns>此字段对象的类型。</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)">
      <summary>获取由指定句柄表示的字段的 <see cref="T:System.Reflection.FieldInfo" />。</summary>
      <param name="handle">
        <see cref="T:System.RuntimeFieldHandle" /> 结构，它包含字段的内部元数据表示形式的句柄。</param>
      <returns>
        <see cref="T:System.Reflection.FieldInfo" /> 对象，表示由 <paramref name="handle" /> 指定的字段。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> 无效。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
      <summary>获取由指定句柄表示的指定泛型类型字段的 <see cref="T:System.Reflection.FieldInfo" />。</summary>
      <param name="handle">
        <see cref="T:System.RuntimeFieldHandle" /> 结构，它包含字段的内部元数据表示形式的句柄。</param>
      <param name="declaringType">
        <see cref="T:System.RuntimeTypeHandle" /> 结构，它包含定义该字段的泛型类型的句柄。</param>
      <returns>
        <see cref="T:System.Reflection.FieldInfo" /> 对象，表示由 <paramref name="handle" /> 指定的字段，该字段的类型为 <paramref name="declaringType" /> 指定的泛型类型。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> 无效。  
或 
 <paramref name="declaringType" /> 与 <paramref name="handle" /> 不兼容。 例如，<paramref name="declaringType" /> 是泛型类型定义的运行时类型句柄，且 <paramref name="handle" /> 来自于构造类型。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetOptionalCustomModifiers">
      <summary>获取一个类型数组，这些类型标识字段的可选自定义修饰符。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象的数组，这些对象标识当前字段的可选自定义修饰符（例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />）。</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetRawConstantValue">
      <summary>由编译器返回与字段关联的文本值。</summary>
      <returns>一个 <see cref="T:System.Object" />，它包含与此字段关联的文本值。 如果文本值是一个元素值为零的类类型，则返回值为 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException">非托管元数据中的常数表不包含当前字段的常数值。</exception>
      <exception cref="T:System.FormatException">值的类型不是公共语言规范 (CLS) 许可的类型。 请参阅“ECMA 分区 II 规范元数据逻辑格式：其他结构、签名中使用的元素类型”。</exception>
      <exception cref="T:System.NotSupportedException">未设置该字段的常数值。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetRequiredCustomModifiers">
      <summary>获取一个类型数组，这些类型标识属性所需的自定义修饰符。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象的数组，这些对象标识当前属性所必需的自定义修饰符（例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />）。</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetValue(System.Object)">
      <summary>当在派生类中重写时，返回给定对象支持的字段的值。</summary>
      <param name="obj">将返回其字段值的对象。</param>
      <returns>一个对象，包含此实例反映的字段的值。</returns>
      <exception cref="T:System.Reflection.TargetException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获 <see cref="T:System.Exception" />。  


            

 该字段是非静态的，并且 <paramref name="obj" /> 是 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">字段被标记为文本，但该字段不具有一个可被接受的文本类型。</exception>
      <exception cref="T:System.FieldAccessException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.MemberAccessException" />。  


            

 调用方没有权限来访问此字段。</exception>
      <exception cref="T:System.ArgumentException">该方法既不由 <paramref name="obj" /> 的类声明也不由其继承。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.GetValueDirect(System.TypedReference)">
      <summary>返回给定对象所支持的字段的值。</summary>
      <param name="obj">
        <see cref="T:System.TypedReference" /> 结构，封装指向某个位置的托管指针和可能存储在该位置的类型的运行时表示形式。</param>
      <returns>包含字段值的 <see langword="Object" />。</returns>
      <exception cref="T:System.NotSupportedException">调用方需要公共语言规范 (CLS) 的替代项，但改为调用此方法。</exception>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsAssembly">
      <summary>获取一个值，该值指示此字段的潜在可见性是否由 <see cref="F:System.Reflection.FieldAttributes.Assembly" /> 描述；也就是说，此字段只对同一程序集中的其他类型可见，而对该程序集以外的派生类型则不可见。</summary>
      <returns>如果此字段的可见性由 <see cref="F:System.Reflection.FieldAttributes.Assembly" /> 准确描述，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamily">
      <summary>获取一个值，该值指示此字段的可见性是否由 <see cref="F:System.Reflection.FieldAttributes.Family" /> 描述；也就是说，此字段仅在其类和派生类内可见。</summary>
      <returns>如果对此字段的访问由 <see cref="F:System.Reflection.FieldAttributes.Family" /> 准确描述，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamilyAndAssembly">
      <summary>获取一个值，该值指示此字段的可见性是否由 <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /> 描述；也就是说，可从派生类访问此字段，但仅当这些派生类在同一程序集中时。</summary>
      <returns>如果对此字段的访问由 <see cref="F:System.Reflection.FieldAttributes.FamANDAssem" /> 准确描述，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsFamilyOrAssembly">
      <summary>获取一个值，该值指示此字段的潜在可见性是否由 <see cref="F:System.Reflection.FieldAttributes.FamORAssem" /> 描述；也就是说，可通过派生类（无论其位置如何）和同一程序集中的类访问此字段。</summary>
      <returns>如果对此字段的访问由 <see cref="F:System.Reflection.FieldAttributes.FamORAssem" /> 准确描述，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsInitOnly">
      <summary>获取一个值，通过该值指示此字段是否只能在构造函数的主体中设置。</summary>
      <returns>如果字段设置了 <see langword="true" /> 属性，则为 <see langword="InitOnly" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsLiteral">
      <summary>获取一个值，通过该值指示该值是否在编译时写入并且不能更改。</summary>
      <returns>如果字段设置了 <see langword="true" /> 属性，则为 <see langword="Literal" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsNotSerialized">
      <summary>获取一个值，通过该值指示此字段是否有 <see langword="NotSerialized" /> 特性。</summary>
      <returns>如果字段设置了 <see langword="true" /> 属性，则为 <see langword="NotSerialized" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPinvokeImpl">
      <summary>获取一个值，该值指示是否已在 <see cref="T:System.Reflection.FieldAttributes" /> 中设置相应的 <see langword="PinvokeImpl" /> 特性。</summary>
      <returns>如果在 <see cref="T:System.Reflection.FieldAttributes" /> 中设置了 <see langword="true" /> 特性，则为 <see langword="PinvokeImpl" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPrivate">
      <summary>获取一个值，通过该值指示此字段是否为私有字段。</summary>
      <returns>如果此字段为私有字段，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsPublic">
      <summary>获取一个值，通过该值指示此字段是否为公共字段。</summary>
      <returns>如果此字段为公共字段，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsSecurityCritical">
      <summary>获取一个值，该值指示当前字段在当前信任级别上是安全关键的还是安全可靠关键的。</summary>
      <returns>如果当前字段在当前信任级别上是安全关键的或安全可靠关键的，则为 <see langword="true" />；如果它是透明的，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsSecuritySafeCritical">
      <summary>获取一个值，该值指示当前字段在当前信任级别上是否是安全可靠关键的。</summary>
      <returns>如果当前字段在当前信任级别上是安全可靠关键的，则为 <see langword="true" />；如果它是安全关键的或透明的，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsSecurityTransparent">
      <summary>获取一个值，该值指示当前字段在当前信任级别上是否是透明的。</summary>
      <returns>如果该字段在当前信任级别上是安全透明的，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsSpecialName">
      <summary>获取一个值，该值指示是否已在 <see cref="T:System.Reflection.FieldAttributes" /> 枚举数中设置相应的 <see langword="SpecialName" /> 特性。</summary>
      <returns>如果在 <see cref="T:System.Reflection.FieldAttributes" /> 中设置了 <see langword="true" /> 特性，则为 <see langword="SpecialName" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.IsStatic">
      <summary>获取一个值，通过该值指示此字段是否为静态字段。</summary>
      <returns>如果此字段为静态字段，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.FieldInfo.MemberType">
      <summary>获取 <see cref="T:System.Reflection.MemberTypes" /> 值，该值指示此成员是字段。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberTypes" /> 值指示此成员是字段。</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.op_Equality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
      <summary>指示两个 <see cref="T:System.Reflection.FieldInfo" /> 对象是否相等。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <see langword="true" /> 等于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.op_Inequality(System.Reflection.FieldInfo,System.Reflection.FieldInfo)">
      <summary>指示两个 <see cref="T:System.Reflection.FieldInfo" /> 对象是否不相等。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <see langword="true" /> 不等于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)">
      <summary>设置给定对象支持的字段的值。</summary>
      <param name="obj">将设置其字段值的对象。</param>
      <param name="value">要分配给字段的值。</param>
      <exception cref="T:System.FieldAccessException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.MemberAccessException" />。  


            

 调用方没有权限来访问此字段。</exception>
      <exception cref="T:System.Reflection.TargetException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获 <see cref="T:System.Exception" />。  


            

 <paramref name="obj" /> 参数是 <see langword="null" /> 且该字段为实例字段。</exception>
      <exception cref="T:System.ArgumentException">对象上不存在该字段。  
或 
<paramref name="value" /> 参数不能转换且不能存储在字段中。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>在派生类中被重写时，设置给定对象支持的字段的值。</summary>
      <param name="obj">将设置其字段值的对象。</param>
      <param name="value">要分配给字段的值。</param>
      <param name="invokeAttr">指定所需的绑定类型（例如，<see langword="Binder.CreateInstance" /> 或 <see langword="Binder.ExactBinding" />）的 <see langword="Binder" /> 的字段。</param>
      <param name="binder">启用绑定、 强制自变量类型和成员通过反射调用的属性集。 如果 <paramref name="binder" /> 为 <see langword="null" />，则使用 <see langword="Binder.DefaultBinding" />。</param>
      <param name="culture">特定区域性的软件首选项。</param>
      <exception cref="T:System.FieldAccessException">调用方没有权限来访问此字段。</exception>
      <exception cref="T:System.Reflection.TargetException">
        <paramref name="obj" /> 参数是 <see langword="null" /> 且该字段为实例字段。</exception>
      <exception cref="T:System.ArgumentException">对象上不存在该字段。  
或 
<paramref name="value" /> 参数不能转换且不能存储在字段中。</exception>
    </member>
    <member name="M:System.Reflection.FieldInfo.SetValueDirect(System.TypedReference,System.Object)">
      <summary>设置给定对象支持的字段的值。</summary>
      <param name="obj">一个 <see cref="T:System.TypedReference" /> 结构，该结构封装指向某位置的托管指针以及该位置可存储的类型的运行时表示形式。</param>
      <param name="value">要分配给字段的值。</param>
      <exception cref="T:System.NotSupportedException">调用方需要公共语言规范 (CLS) 的替代项，但改为调用此方法。</exception>
    </member>
    <member name="T:System.Reflection.GenericParameterAttributes">
      <summary>描述对泛型类型或方法的泛型类型参数的约束。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.Contravariant">
      <summary>该泛型类型参数是逆变。 逆变类型参数可作为方法签名中的参数类型出现。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.Covariant">
      <summary>该泛型类型参数是协变。 协变类型参数可作为方法的结果类型、只读字段的类型、声明的基类型或实现的接口出现。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint">
      <summary>仅当一个类型具有无参数的构造函数时，才能替代泛型类型参数。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.None">
      <summary>无特殊标志。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint">
      <summary>仅当一个类型是值类型且不可为 null 时，才能替代泛型类型参数。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint">
      <summary>仅当一个类型是引用类型时，才能替代泛型类型参数。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.SpecialConstraintMask">
      <summary>选择所有特殊约束标志的组合。 此值是使用逻辑“OR”合并后列标志得出的结果：<see cref="F:System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint" />、<see cref="F:System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint" /> 和 <see cref="F:System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint" />。</summary>
    </member>
    <member name="F:System.Reflection.GenericParameterAttributes.VarianceMask">
      <summary>选择所有方差标志的组合。 此值是使用逻辑“OR”合并后列标志得出的结果：<see cref="F:System.Reflection.GenericParameterAttributes.Contravariant" /> 和 <see cref="F:System.Reflection.GenericParameterAttributes.Covariant" />。</summary>
    </member>
    <member name="T:System.Reflection.ICustomAttributeProvider">
      <summary>为支持自定义属性的反映对象提供自定义属性。</summary>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)">
      <summary>返回在该成员上定义的所有自定义特性的数组（已命名的特性除外），如果没有自定义特性，则返回空数组。</summary>
      <param name="inherit">为 <see langword="true" /> 时，查找继承的自定义特性的层次结构链。</param>
      <returns>表示自定义特性的对象数组或空数组。</returns>
      <exception cref="T:System.TypeLoadException">无法加载自定义特性类型。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">此成员上定义了多个 <paramref name="attributeType" /> 类型的特性。</exception>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>返回在该成员上定义、由类型标识的自定义属性数组，如果没有该类型的自定义属性，则返回空数组。</summary>
      <param name="attributeType">自定义属性的类型。</param>
      <param name="inherit">为 <see langword="true" /> 时，查找继承的自定义特性的层次结构链。</param>
      <returns>表示自定义特性的对象数组或空数组。</returns>
      <exception cref="T:System.TypeLoadException">无法加载自定义特性类型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)">
      <summary>指示是否在该成员上定义了一个或多个 <paramref name="attributeType" /> 实例。</summary>
      <param name="attributeType">自定义属性的类型。</param>
      <param name="inherit">为 <see langword="true" /> 时，查找继承的自定义特性的层次结构链。</param>
      <returns>如果在该成员上定义 <paramref name="attributeType" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Reflection.ImageFileMachine">
      <summary>标识可执行文件的目标平台。</summary>
    </member>
    <member name="F:System.Reflection.ImageFileMachine.AMD64">
      <summary>针对 64 位 AMD 处理器。</summary>
    </member>
    <member name="F:System.Reflection.ImageFileMachine.ARM">
      <summary>针对 ARM 处理器。</summary>
    </member>
    <member name="F:System.Reflection.ImageFileMachine.I386">
      <summary>针对 32 位 Intel 处理器。</summary>
    </member>
    <member name="F:System.Reflection.ImageFileMachine.IA64">
      <summary>针对 64 位 Intel 处理器。</summary>
    </member>
    <member name="T:System.Reflection.InterfaceMapping">
      <summary>将某个接口的映射检索到实现该接口的类上的实际方法中。</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.InterfaceMethods">
      <summary>显示在接口上定义的方法。</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.InterfaceType">
      <summary>显示表示接口的类型。</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.TargetMethods">
      <summary>显示实现接口的方法。</summary>
    </member>
    <member name="F:System.Reflection.InterfaceMapping.TargetType">
      <summary>表示用于创建接口映射的类型。</summary>
    </member>
    <member name="T:System.Reflection.IntrospectionExtensions">
      <summary>包含转换的 <see cref="T:System.Type" /> 对象的方法。</summary>
    </member>
    <member name="M:System.Reflection.IntrospectionExtensions.GetTypeInfo(System.Type)">
      <summary>返回指定类型的 <see cref="T:System.Reflection.TypeInfo" /> 表示形式。</summary>
      <param name="type">要转换的类型。</param>
      <returns>被转换的对象。</returns>
    </member>
    <member name="T:System.Reflection.InvalidFilterCriteriaException">
      <summary>当筛选条件对正使用的筛选器类型无效时，在 <see cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" /> 中引发的异常。</summary>
    </member>
    <member name="M:System.Reflection.InvalidFilterCriteriaException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.Reflection.InvalidFilterCriteriaException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Reflection.InvalidFilterCriteriaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用指定的序列化和上下文信息初始化 <see cref="T:System.Reflection.InvalidFilterCriteriaException" /> 类的新实例。</summary>
      <param name="info">
        <see langword="SerializationInfo" /> 对象，包含序列化此实例所需的信息。</param>
      <param name="context">
        <see langword="StreamingContext" /> 对象，包含与此实例关联的序列化流的源和目标。</param>
    </member>
    <member name="M:System.Reflection.InvalidFilterCriteriaException.#ctor(System.String)">
      <summary>使用给定的 HRESULT 和消息字符串初始化 <see cref="T:System.Reflection.InvalidFilterCriteriaException" /> 类的新实例。</summary>
      <param name="message">异常消息文本。</param>
    </member>
    <member name="M:System.Reflection.InvalidFilterCriteriaException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Reflection.InvalidFilterCriteriaException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Reflection.IReflect">
      <summary>与 IDispatch 接口进行互操作。</summary>
    </member>
    <member name="M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>返回与指定字段和绑定标志对应的 <see cref="T:System.Reflection.FieldInfo" /> 对象。</summary>
      <param name="name">要查找的字段的名称。</param>
      <param name="bindingAttr">用于控制搜索的绑定属性。</param>
      <returns>
        <see cref="T:System.Reflection.FieldInfo" /> 对象，包含命名对象的符合 <paramref name="bindingAttr" /> 中指定的搜索约束的字段信息。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">该对象实现同名的多个字段。</exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)">
      <summary>返回与当前类的所有字段对应的 <see cref="T:System.Reflection.FieldInfo" /> 对象的数组。</summary>
      <param name="bindingAttr">用于控制搜索的绑定属性。</param>
      <returns>
        <see cref="T:System.Reflection.FieldInfo" /> 对象的数组，包含此反射对象的符合 <paramref name="bindingAttr" /> 中指定的搜索约束的所有字段信息。</returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>检索与所有公共成员对应或者与匹配指定名称的所有成员对应的 <see cref="T:System.Reflection.MemberInfo" /> 对象的数组。</summary>
      <param name="name">要查找的成员的名称。</param>
      <param name="bindingAttr">用于控制搜索的绑定属性。</param>
      <returns>与 <paramref name="name" /> 参数匹配的 <see cref="T:System.Reflection.MemberInfo" /> 对象的数组。</returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)">
      <summary>检索与所有公共成员或当前类的所有成员对应的 <see cref="T:System.Reflection.MemberInfo" /> 对象的数组。</summary>
      <param name="bindingAttr">用于控制搜索的绑定属性。</param>
      <returns>包含此反射对象的所有成员信息的 <see cref="T:System.Reflection.MemberInfo" /> 对象数组。</returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>在指定的搜索约束下检索与指定方法对应的 <see cref="T:System.Reflection.MethodInfo" /> 对象。</summary>
      <param name="name">要查找的成员的名称。</param>
      <param name="bindingAttr">用于控制搜索的绑定属性。</param>
      <returns>包含方法信息的 <see cref="T:System.Reflection.MethodInfo" /> 对象，匹配基于方法名和 <paramref name="bindingAttr" /> 中指定的搜索约束。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">该对象实现同名的多个方法。</exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>检索与指定方法对应的 <see cref="T:System.Reflection.MethodInfo" /> 对象，使用 <see cref="T:System.Type" /> 数组从重载方法中进行选择。</summary>
      <param name="name">要查找的成员的名称。</param>
      <param name="bindingAttr">用于控制搜索的绑定属性。</param>
      <param name="binder">一个实现 <see cref="T:System.Reflection.Binder" /> 的对象，包含与此方法相关的属性。</param>
      <param name="types">用于从重载方法中进行选择的数组。</param>
      <param name="modifiers">参数修饰符的数组，用于使绑定可与在其中修改了类型的参数签名一起使用。</param>
      <returns>匹配所有指定参数的请求的方法。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">该对象实现同名的多个方法。</exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)">
      <summary>检索与所有公共方法或当前类的所有方法相关的 <see cref="T:System.Reflection.MethodInfo" /> 对象的数组。</summary>
      <param name="bindingAttr">用于控制搜索的绑定属性。</param>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> 对象的数组，包含为此反射对象定义的符合 <paramref name="bindingAttr" /> 中指定的搜索约束的所有方法。</returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)">
      <summary>检索与所有公共属性或当前类的所有属性对应的 <see cref="T:System.Reflection.PropertyInfo" /> 对象的数组。</summary>
      <param name="bindingAttr">用于控制搜索的绑定属性。</param>
      <returns>在反射对象上定义的所有属性的 <see cref="T:System.Reflection.PropertyInfo" /> 对象数组。</returns>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>在指定搜索约束下检索与指定属性对应的 <see cref="T:System.Reflection.PropertyInfo" /> 对象。</summary>
      <param name="name">要查找的属性的名称。</param>
      <param name="bindingAttr">用于控制搜索的绑定属性。</param>
      <returns>找到的与 <paramref name="bindingAttr" /> 中指定的搜索约束相符的属性的 <see cref="T:System.Reflection.PropertyInfo" /> 对象；如果没有找到此属性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">该对象实现同名的多个字段。</exception>
    </member>
    <member name="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>在指定的搜索约束下检索与指定属性对应的 <see cref="T:System.Reflection.PropertyInfo" /> 对象。</summary>
      <param name="name">要查找的成员的名称。</param>
      <param name="bindingAttr">用于控制搜索的绑定属性。</param>
      <param name="binder">一个实现 <see cref="T:System.Reflection.Binder" /> 的对象，包含与此方法相关的属性。</param>
      <param name="returnType">属性的类型。</param>
      <param name="types">用于从同名的重载方法中进行选择的数组。</param>
      <param name="modifiers">用于选择参数修饰符的数组。</param>
      <returns>如果在此反射对象中找到了具有指定名称的属性，则为所找到的属性的 <see cref="T:System.Reflection.PropertyInfo" /> 对象；如果没有找到此属性，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>调用指定的成员。</summary>
      <param name="name">要查找的成员的名称。</param>
      <param name="invokeAttr">
        <see cref="T:System.Reflection.BindingFlags" /> 调用特性之一。 <paramref name="invokeAttr" /> 参数可以是构造函数、方法、属性或字段。 必须指定合适的调用属性。 通过将空字符串 ("") 作为成员的名称传递来调用类的默认成员。</param>
      <param name="binder">
        <see cref="T:System.Reflection.BindingFlags" /> 位标志之一。 实现 <see cref="T:System.Reflection.Binder" />，包含与此方法相关的属性。</param>
      <param name="target">对其调用指定成员的对象。 对于静态成员，此参数被忽略。</param>
      <param name="args">包含要调用的成员的参数数目、顺序和类型的对象数组。 如果没有参数，则这是一个空数组。</param>
      <param name="modifiers">一个 <see cref="T:System.Reflection.ParameterModifier" /> 对象数组。 此数组与表示元数据中被调用成员的参数属性的 <paramref name="args" /> 参数具有相同的长度。 参数可以有下列属性：<see langword="pdIn" />、<see langword="pdOut" />、<see langword="pdRetval" />、<see langword="pdOptional" /> 和 <see langword="pdHasDefault" />。 这些属性分别表示 [In]、[Out]、[retval]、[optional] 和默认参数。 这些属性由不同的互操作性服务使用。</param>
      <param name="culture">用于控制类型强制的 <see cref="T:System.Globalization.CultureInfo" /> 的实例。 例如，<paramref name="culture" /> 将表示 1000 的 <see langword="String" /> 转换为 <see langword="Double" /> 值，因为不同的区域性以不同的方式表示 1000。 如果此参数为 <see langword="null" />，则使用当前线程的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="namedParameters">参数的 <see langword="String" /> 数组。</param>
      <returns>指定的成员。</returns>
      <exception cref="T:System.ArgumentException">为字段 <see langword="set" /> 指定了多个参数。</exception>
      <exception cref="T:System.MissingFieldException">找不到此字段或属性。</exception>
      <exception cref="T:System.MissingMethodException">找不到此方法。</exception>
      <exception cref="T:System.Security.SecurityException">在没有所需 <see cref="T:System.Security.Permissions.ReflectionPermission" /> 的情况下调用私有成员。</exception>
    </member>
    <member name="P:System.Reflection.IReflect.UnderlyingSystemType">
      <summary>获取表示 <see cref="T:System.Reflection.IReflect" /> 对象的基础类型。</summary>
      <returns>表示 <see cref="T:System.Reflection.IReflect" /> 对象的基础类型。</returns>
    </member>
    <member name="T:System.Reflection.IReflectableType">
      <summary>表示可在其上发射的类型。</summary>
    </member>
    <member name="M:System.Reflection.IReflectableType.GetTypeInfo">
      <summary>检索表示此类型的对象。</summary>
      <returns>一个表示此类型的对象。</returns>
    </member>
    <member name="T:System.Reflection.LocalVariableInfo">
      <summary>发现局部变量的属性并提供对局部变量元数据的访问。</summary>
    </member>
    <member name="M:System.Reflection.LocalVariableInfo.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.LocalVariableInfo" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Reflection.LocalVariableInfo.IsPinned">
      <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示由局部变量引用的对象是否被固定在内存中。</summary>
      <returns>如果由变量引用的对象被固定在内存中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.LocalVariableInfo.LocalIndex">
      <summary>获取方法体内局部变量的索引。</summary>
      <returns>一个整数值，表示方法体内局部变量的声明顺序。</returns>
    </member>
    <member name="P:System.Reflection.LocalVariableInfo.LocalType">
      <summary>获取局部变量的类型。</summary>
      <returns>局部变量的类型。</returns>
    </member>
    <member name="M:System.Reflection.LocalVariableInfo.ToString">
      <summary>返回一个描述局部变量的用户可读的字符串。</summary>
      <returns>一个字符串，显示有关局部变量的信息，包括类型名称、索引和固定状态。</returns>
    </member>
    <member name="T:System.Reflection.ManifestResourceInfo">
      <summary>提供对清单资源的访问，这些资源是描述应用程序依赖项的 XML 文件。</summary>
    </member>
    <member name="M:System.Reflection.ManifestResourceInfo.#ctor(System.Reflection.Assembly,System.String,System.Reflection.ResourceLocation)">
      <summary>为由指定的程序集和文件包含且具有指定位置的资源初始化 <see cref="T:System.Reflection.ManifestResourceInfo" /> 类的新实例。</summary>
      <param name="containingAssembly">包含清单资源的程序集。</param>
      <param name="containingFileName">包含清单资源的文件名（如果该文件与清单文件不同）。</param>
      <param name="resourceLocation">一个枚举值的按位组合，提供有关清单资源位置的信息。</param>
    </member>
    <member name="P:System.Reflection.ManifestResourceInfo.FileName">
      <summary>获取包含清单资源的文件名（如果该文件与清单文件不同）。</summary>
      <returns>清单资源的文件名。</returns>
    </member>
    <member name="P:System.Reflection.ManifestResourceInfo.ReferencedAssembly">
      <summary>获取包含清单资源的程序集。</summary>
      <returns>包含清单资源的程序集。</returns>
    </member>
    <member name="P:System.Reflection.ManifestResourceInfo.ResourceLocation">
      <summary>获取清单资源的位置。</summary>
      <returns>指示清单资源位置的 <see cref="T:System.Reflection.ResourceLocation" /> 标志的按位组合。</returns>
    </member>
    <member name="T:System.Reflection.MemberFilter">
      <summary>表示用于筛选以 <see cref="T:System.Reflection.MemberInfo" /> 对象数组表示的成员列表的委托。</summary>
      <param name="m">对其应用筛选器的 <see cref="T:System.Reflection.MemberInfo" /> 对象。</param>
      <param name="filterCriteria">用于筛选列表的任意对象。</param>
      <returns>若要在筛选后的列表中包括成员则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Reflection.MemberInfo">
      <summary>获取有关成员属性的信息并提供对成员元数据的访问权限。</summary>
    </member>
    <member name="M:System.Reflection.MemberInfo.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.MemberInfo" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Reflection.MemberInfo.CustomAttributes">
      <summary>获取包含此成员自定义属性的集合。</summary>
      <returns>包含此成员的自定义特性的集合。</returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.DeclaringType">
      <summary>获取声明该成员的类。</summary>
      <returns>声明该成员的类的 <see langword="Type" /> 对象。</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj">与此实例进行比较的对象，或为 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)">
      <summary>在派生类中重写时，返回应用于此成员的所有自定义属性的数组。</summary>
      <param name="inherit">如果要搜索此成员的继承链以查找属性，则为 <see langword="true" />；否则为 <see langword="false" />。 会忽略属性和事件的此参数。</param>
      <returns>一个包含应用于此成员的所有自定义属性的数组，或者在未定义任何特性时为包含零个元素的数组。</returns>
      <exception cref="T:System.InvalidOperationException">此成员属于加载到仅反射的上下文的类型。 请参阅操作方法：将程序集加载到仅反射上下文中。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>在派生类中重写时，返回应用于此成员并由 <see cref="T:System.Type" /> 标识的自定义属性的数组。</summary>
      <param name="attributeType">要搜索的属性的类型。 仅返回可分配给此类型的属性。</param>
      <param name="inherit">如果要搜索此成员的继承链以查找属性，则为 <see langword="true" />；否则为 <see langword="false" />。 会忽略属性和事件的此参数。</param>
      <returns>应用于此成员的自定义属性的数组，如果未应用可分配给 <paramref name="attributeType" /> 的属性，则为含零元素的数组。</returns>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">此成员属于加载到仅反射的上下文的类型。 请参阅操作方法：将程序集加载到仅反射上下文中。</exception>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetCustomAttributesData">
      <summary>返回 <see cref="T:System.Reflection.CustomAttributeData" /> 对象列表，这些对象表示已应用到目标成员的特性相关数据。</summary>
      <returns>
        <see cref="T:System.Reflection.CustomAttributeData" /> 对象的泛型列表，表示有关已应用于目标成员的特性的数据。</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.HasSameMetadataDefinitionAs(System.Reflection.MemberInfo)">
      <param name="other" />
    </member>
    <member name="P:System.Reflection.MemberInfo.IsCollectible">
      <summary>获取一个值，该值指示此 <see cref="T:System.Reflection.MemberInfo" /> 对象是否是包含在可回收的 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" /> 中的程序集的一部分。</summary>
      <returns>
        <see langword="true" /> 如果<see cref="T:System.Reflection.MemberInfo" />保存在可回收程序集加载上下文中的程序集的一部分; 否则为<see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)">
      <summary>在派生类中重写时，指示是否将指定类型或其派生类型的一个或多个特性应用于此成员。</summary>
      <param name="attributeType">要搜索的自定义属性的类型。 该搜索包括派生类型。</param>
      <param name="inherit">如果要搜索此成员的继承链以查找属性，则为 <see langword="true" />；否则为 <see langword="false" />。 会忽略属性和事件的此参数。</param>
      <returns>如果将 <paramref name="attributeType" /> 或其任何派生类型的一个或多个实例应用于此成员，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.MemberType">
      <summary>在派生类中重写时，获取 <see cref="T:System.Reflection.MemberTypes" /> 值，该值指示成员类型 - 方法、构造函数、事件等。</summary>
      <returns>指示成员类型的 <see cref="T:System.Reflection.MemberTypes" /> 值。</returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.MetadataToken">
      <summary>获取一个值，该值标识元数据元素。</summary>
      <returns>结合 <see cref="P:System.Reflection.MemberInfo.Module" />，该值能够唯一标识元数据元素。</returns>
      <exception cref="T:System.InvalidOperationException">当前 <see cref="T:System.Reflection.MemberInfo" /> 表示数组方法（如 <see langword="Address" />），针对元素类型是尚未完成的动态类型的数组类型。 若要在这种情况下获取元数据标记，将 <see cref="T:System.Reflection.MemberInfo" /> 对象传递给 <see cref="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)" /> 方法；或使用 <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /> 方法直接获取标记，而不是首先使用 <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /> 方法获取 <see cref="T:System.Reflection.MethodInfo" />。</exception>
    </member>
    <member name="P:System.Reflection.MemberInfo.Module">
      <summary>获取一个模块，在该模块中已经定义一个类型，该类型用于声明由当前 <see cref="T:System.Reflection.MemberInfo" /> 表示的成员。</summary>
      <returns>
        <see cref="T:System.Reflection.Module" />，在其中已经定义一个类型，该类型用于声明由当前 <see cref="T:System.Reflection.MemberInfo" /> 表示的成员。</returns>
      <exception cref="T:System.NotImplementedException">未实现此方法。</exception>
    </member>
    <member name="P:System.Reflection.MemberInfo.Name">
      <summary>获取当前成员的名称。</summary>
      <returns>包含此成员名称的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
      <summary>指示两个 <see cref="T:System.Reflection.MemberInfo" /> 对象是否相等。</summary>
      <param name="left">要与 <paramref name="right" /> 进行比较的 <see cref="T:System.Reflection.MemberInfo" />。</param>
      <param name="right">要与 <paramref name="left" /> 进行比较的 <see cref="T:System.Reflection.MemberInfo" />。</param>
      <returns>如果 <paramref name="left" /> 等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)">
      <summary>指示两个 <see cref="T:System.Reflection.MemberInfo" /> 对象是否不相等。</summary>
      <param name="left">要与 <paramref name="right" /> 进行比较的 <see cref="T:System.Reflection.MemberInfo" />。</param>
      <param name="right">要与 <paramref name="left" /> 进行比较的 <see cref="T:System.Reflection.MemberInfo" />。</param>
      <returns>如果 <paramref name="left" /> 不等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MemberInfo.ReflectedType">
      <summary>获取用于获取 <see langword="MemberInfo" /> 的此实例的类对象。</summary>
      <returns>
        <see langword="Type" /> 对象，通过它获取了此 <see langword="MemberInfo" /> 对象。</returns>
    </member>
    <member name="T:System.Reflection.MemberTypes">
      <summary>标记被定义为 <see cref="T:System.Reflection.MemberInfo" /> 的派生类的每种成员类型。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.All">
      <summary>指定所有成员类型。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Constructor">
      <summary>指定该成员是构造函数</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Custom">
      <summary>指定该成员是自定义成员类型。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Event">
      <summary>指定该成员是事件。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Field">
      <summary>指定该成员是字段。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Method">
      <summary>指定该成员是方法。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.NestedType">
      <summary>指定该成员是嵌套类型。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.Property">
      <summary>指定该成员是属性。</summary>
    </member>
    <member name="F:System.Reflection.MemberTypes.TypeInfo">
      <summary>指定该成员是类型。</summary>
    </member>
    <member name="T:System.Reflection.MethodAttributes">
      <summary>指定方法属性的标志。 这些标志在 corhdr.h 文件中定义。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Abstract">
      <summary>指示此类不提供此方法的实现。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Assembly">
      <summary>指示此方法可由该程序集的任何类访问。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.CheckAccessOnOverride">
      <summary>指示仅当此方法可访问时，才可以对其进行重写。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.FamANDAssem">
      <summary>指示此方法只能由该类型和它在此程序集中的派生类型的成员访问。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Family">
      <summary>指示此方法只可由该类及其派生类的成员访问。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.FamORAssem">
      <summary>指示此方法可由任意位置的派生类访问，也可由程序集中的任何类访问。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Final">
      <summary>指示无法重写此方法。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.HasSecurity">
      <summary>指示此方法具有关联的安全性。 保留此标志仅供运行时使用。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.HideBySig">
      <summary>指示此方法按名称和签名隐藏，否则只按名称隐藏。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.MemberAccessMask">
      <summary>检索可访问性信息。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.NewSlot">
      <summary>指示此方法总是获取 vtable 中的新槽。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.PinvokeImpl">
      <summary>指示此方法的实现通过 PInvoke（平台调用服务）转发。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Private">
      <summary>指示此方法只能由当前类访问。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.PrivateScope">
      <summary>指示该成员不能被引用。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Public">
      <summary>指示此方法可由任何包括该对象的对象访问。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.RequireSecObject">
      <summary>指示此方法调用另一个包含安全性代码的方法。 保留此标志仅供运行时使用。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.ReservedMask">
      <summary>指示仅供运行时使用的保留标志。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.ReuseSlot">
      <summary>指示此方法将重复使用 vtable 中的现有槽。 这是默认行为。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.RTSpecialName">
      <summary>指示公共语言运行时检查名称编码。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.SpecialName">
      <summary>指示此方法是特殊的。 名称描述此方法的特殊性。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Static">
      <summary>指示在类型上定义此方法，否则基于每个实例定义此方法。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.UnmanagedExport">
      <summary>指示此托管方法由 thunk 导出为非托管代码。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.Virtual">
      <summary>指示此方法为虚方法。</summary>
    </member>
    <member name="F:System.Reflection.MethodAttributes.VtableLayoutMask">
      <summary>检索 vtable 属性。</summary>
    </member>
    <member name="T:System.Reflection.MethodBase">
      <summary>提供有关方法和构造函数的信息。</summary>
    </member>
    <member name="M:System.Reflection.MethodBase.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.MethodBase" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Reflection.MethodBase.Attributes">
      <summary>获取与此方法关联的属性。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodAttributes" /> 值之一。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.CallingConvention">
      <summary>获取一个值，该值指示此方法的调用约定。</summary>
      <returns>此方法的 <see cref="T:System.Reflection.CallingConventions" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.ContainsGenericParameters">
      <summary>获取一个值，该值指示泛型方法是否包含未赋值的泛型类型参数。</summary>
      <returns>如果当前 <see cref="T:System.Reflection.MethodBase" /> 对象表示的泛型方法包含未赋值的泛型类型参数，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj">与此实例进行比较的对象，或为 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.GetCurrentMethod">
      <summary>返回表示当前的执行方法的 <see langword="MethodBase" /> 对象。</summary>
      <returns>
        <see cref="M:System.Reflection.MethodBase.GetCurrentMethod" /> 是一个静态方法，从一个执行方法中调用，且会返回有关该方法的信息。  
表示当前的执行方法的 <see langword="MethodBase" /> 对象。</returns>
      <exception cref="T:System.Reflection.TargetException">使用晚期绑定机制调用了此成员。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetGenericArguments">
      <summary>返回 <see cref="T:System.Type" /> 对象的数组，这些对象表示泛型方法的类型实参或泛型方法定义的类型形参。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象的数组，这些对象表示泛型方法的类型变量或泛型方法定义的类型参数。 如果当前方法不是泛型方法，则返回空数组。</returns>
      <exception cref="T:System.NotSupportedException">当前对象是 <see cref="T:System.Reflection.ConstructorInfo" />。 .NET Framework 2.0 版不支持泛型构造函数。 如果派生类未重写此方法，此异常即为默认行为。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodBody">
      <summary>在派生类中重写后，获取 <see cref="T:System.Reflection.MethodBody" /> 对象，该对象提供对 MSIL 流、局部变量和当前方法的异常的访问。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodBody" /> 对象，提供对 MSIL 流、局部变量和当前方法的异常的访问。</returns>
      <exception cref="T:System.InvalidOperationException">除非在派生类中重写，否则此方法无效。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)">
      <summary>通过使用方法的内部元数据表示形式（句柄）获取方法信息。</summary>
      <param name="handle">方法的句柄。</param>
      <returns>
        <see langword="MethodBase" />，包含方法的有关信息。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> 无效。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
      <summary>以指定泛型类型，获取指定句柄所表示的构造函数或方法的 <see cref="T:System.Reflection.MethodBase" /> 对象。</summary>
      <param name="handle">构造函数或方法的内部元数据表示形式的句柄。</param>
      <param name="declaringType">定义构造函数或方法的泛型类型的句柄。</param>
      <returns>
        <see cref="T:System.Reflection.MethodBase" /> 对象，表示由 <paramref name="handle" /> 指定的方法或构造函数，为由 <paramref name="declaringType" /> 指定的泛型类型。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> 无效。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.GetMethodImplementationFlags">
      <summary>在派生的类中重写时，返回 <see cref="T:System.Reflection.MethodImplAttributes" /> 标志。</summary>
      <returns>
        <see langword="MethodImplAttributes" /> 标志。</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.GetParameters">
      <summary>当在派生类中重写时，获取指定的方法或构造函数的参数。</summary>
      <returns>
        <see langword="ParameterInfo" /> 类型的数组，包含与此 <see langword="MethodBase" /> 实例所反射的方法（或构造函数）的签名匹配的信息。</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])">
      <summary>使用指定参数调用由当前实例表示的方法或构造函数。</summary>
      <param name="obj">在其上调用方法或构造函数的对象。 如果方法是静态的，则忽略此参数。 如果构造函数是静态的，则此参数必须是 <see langword="null" /> 或定义构造函数的类的实例。</param>
      <param name="parameters">调用方法或构造函数的参数列表。 此对象数组在数量、顺序和类型方面与要调用的方法或构造函数的参数相同。 如果不存在任何参数，则 <paramref name="parameters" /> 应为 <see langword="null" />。  
如果由此实例表示的方法或构造函数采用了 <see langword="ref" /> 参数（在 Visual Basic 中为 <see langword="ByRef" />），那么此参数不需要特殊属性来通过此函数调用此方法或构造函数。 此数组中未使用值显式初始化的任何对象都将包含该对象类型的默认值。 对于引用类型元素，此值为 <see langword="null" />。 对于值类型元素，此值为 0、0.0 或 <see langword="false" />，具体取决于特定的元素类型。</param>
      <returns>一个包含已调用方法的返回值或包含已调用构造函数的 <see langword="null" /> 的对象。</returns>
      <exception cref="T:System.Reflection.TargetException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获 <see cref="T:System.Exception" />。  


            

 <paramref name="obj" /> 参数为 <see langword="null" />，且此方法不是静态方法。  
或 
该方法不由 <paramref name="obj" /> 的类声明或继承。  
或 
调用静态构造函数，<paramref name="obj" /> 既不是 <see langword="null" />，也不是声明构造函数的类的实例。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 数组的元素与此实例反映的方法或构造函数的签名不匹配。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">调用的方法或构造函数引发异常。  
或 
当前实例是包含无法验证的代码的 <see cref="T:System.Reflection.Emit.DynamicMethod" />。 请参阅“验证”部分中的 <see cref="T:System.Reflection.Emit.DynamicMethod" /> 注释。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="parameters" /> 数组的参数数量不正确。</exception>
      <exception cref="T:System.MethodAccessException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.MemberAccessException" />。  


            

 调用方没有执行由当前实例表示的方法或构造函数的权限。</exception>
      <exception cref="T:System.InvalidOperationException">声明该方法的类型为开放式泛型类型。 也就是说，<see cref="P:System.Type.ContainsGenericParameters" /> 属性为声明类型返回 <see langword="true" />。</exception>
      <exception cref="T:System.NotSupportedException">当前实例为 <see cref="T:System.Reflection.Emit.MethodBuilder" />。</exception>
    </member>
    <member name="M:System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>当在派生类中重写时，调用具有给定参数的反射的方法或构造函数。</summary>
      <param name="obj">在其上调用方法或构造函数的对象。 如果方法是静态的，则忽略此参数。 如果构造函数是静态的，则此参数必须是 <see langword="null" /> 或定义构造函数的类的实例。</param>
      <param name="invokeAttr">位屏蔽，它是 <see cref="T:System.Reflection.BindingFlags" /> 的 0 个或多个位标志的组合。 如果 <paramref name="binder" /> 为 <see langword="null" />，则此参数赋值为 <see cref="F:System.Reflection.BindingFlags.Default" />；因此，传入的任何值都被忽略。</param>
      <param name="binder">一个对象，它启用绑定、对参数类型的强制、对成员的调用，以及通过反射对 <see langword="MemberInfo" /> 对象的检索。 如果 <paramref name="binder" /> 为 <see langword="null" />，则使用默认联编程序。</param>
      <param name="parameters">调用方法或构造函数的参数列表。 此对象数组在数量、顺序和类型方面与要调用的方法或构造函数的参数相同。 如果没有参数，则此应为 <see langword="null" />。  
如果此实例表示的方法或构造函数采用 ByRef 参数，那么使用此函数调用该方法或构造函数时，对于该参数不需要特殊的特性。 此数组中未使用值显式初始化的任何对象都将包含该对象类型的默认值。 对于引用类型元素，此值为 <see langword="null" />。 对于值类型元素，此值为 0、0.0 或 <see langword="false" />，具体取决于特定的元素类型。</param>
      <param name="culture">用于控制类型强制的 <see langword="CultureInfo" /> 的实例。 如果这是 <see langword="null" />，则使用当前线程的 <see langword="CultureInfo" /> 。 （例如，这对于将表示 1000 的 <see langword="String" /> 转换为 <see langword="Double" /> 值是必需的，因为不同的区域性以不同的方式表示 1000。）</param>
      <returns>
        <see langword="Object" />，包含被调用方法的返回值；如果调用的是构造函数，则为 <see langword="null" />；如果方法的返回类型是 <see langword="null" />，则为 <see langword="void" />。 在调用方法或构造函数之前，<see langword="Invoke" /> 检查用户是否有访问权限并验证参数是否有效。</returns>
      <exception cref="T:System.Reflection.TargetException">
        <paramref name="obj" /> 参数为 <see langword="null" />，且此方法不是静态方法。  
或 
该方法不由 <paramref name="obj" /> 的类声明或继承。  
或 
调用静态构造函数，<paramref name="obj" /> 既不是 <see langword="null" />，也不是声明构造函数的类的实例。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 参数的类型与此实例所反射的方法或构造函数的签名不匹配。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="parameters" /> 数组的参数数量不正确。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">调用的方法或构造函数引发异常。</exception>
      <exception cref="T:System.MethodAccessException">调用方没有执行由当前实例表示的方法或构造函数的权限。</exception>
      <exception cref="T:System.InvalidOperationException">声明该方法的类型为开放式泛型类型。 也就是说，<see cref="P:System.Type.ContainsGenericParameters" /> 属性为声明类型返回 <see langword="true" />。</exception>
    </member>
    <member name="P:System.Reflection.MethodBase.IsAbstract">
      <summary>获取一个值，该值指示此方法是否为抽象方法。</summary>
      <returns>如果该方法是抽象的，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsAssembly">
      <summary>获取一个值，该值指示此方法或构造函数的潜在可见性是否由 <see cref="F:System.Reflection.MethodAttributes.Assembly" /> 描述；也就是说，此方法或构造函数只对同一程序集中的其他类型可见，而对该程序集以外的派生类型则不可见。</summary>
      <returns>如果此方法或构造函数的可见性由 <see cref="F:System.Reflection.MethodAttributes.Assembly" /> 准确描述，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsConstructedGenericMethod" />
    <member name="P:System.Reflection.MethodBase.IsConstructor">
      <summary>获取一个值，该值指示此方法是否为构造函数。</summary>
      <returns>如果此方法是 <see cref="T:System.Reflection.ConstructorInfo" /> 对象（参见"备注"中有关 <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> 对象的说明）所表示的构造函数，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamily">
      <summary>获取一个值，该值指示此方法或构造函数的可见性是否由 <see cref="F:System.Reflection.MethodAttributes.Family" /> 描述；也就是说，此方法或构造函数仅在其类和派生类内可见。</summary>
      <returns>如果对此方法或构造函数的访问由 <see cref="F:System.Reflection.MethodAttributes.Family" /> 准确描述，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamilyAndAssembly">
      <summary>获取一个值，该值指示此方法或构造函数的可见性是否由 <see cref="F:System.Reflection.MethodAttributes.FamANDAssem" /> 描述；也就是说，此方法或构造函数可由派生类调用，但仅当这些派生类在同一程序集中时。</summary>
      <returns>如果对此方法或构造函数的访问由 <see cref="F:System.Reflection.MethodAttributes.FamANDAssem" /> 准确描述，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFamilyOrAssembly">
      <summary>获取一个值，该值指示此方法或构造函数的潜在可见性是否由 <see cref="F:System.Reflection.MethodAttributes.FamORAssem" /> 描述；也就是说，此方法或构造函数可由派生类（无论其位置如何）和同一程序集中的类调用。</summary>
      <returns>如果对此方法或构造函数的访问由 <see cref="F:System.Reflection.MethodAttributes.FamORAssem" /> 准确描述，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsFinal">
      <summary>获取一个值，该值指示此方法是否为 <see langword="final" />。</summary>
      <returns>如果方法为 <see langword="final" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsGenericMethod">
      <summary>获取一个值，该值指示方法是否为泛型方法。</summary>
      <returns>如果当前 <see cref="T:System.Reflection.MethodBase" /> 表示泛型方法，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsGenericMethodDefinition">
      <summary>获取一个值，该值指示方法是否为泛型方法定义。</summary>
      <returns>如果当前 <see cref="T:System.Reflection.MethodBase" /> 对象表示泛型方法的定义，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsHideBySig">
      <summary>获取一个值，该值指示是否只有一个签名完全相同的同一种类的成员在派生类中是隐藏的。</summary>
      <returns>如果此成员被签名隐藏，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsPrivate">
      <summary>获取一个值，该值指示此成员是否是私有的。</summary>
      <returns>如果对此方法的访问只限于该类本身的其他成员，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsPublic">
      <summary>获取一个值，该值指示这是否是一个公共方法。</summary>
      <returns>如果此方法是公共的，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsSecurityCritical">
      <summary>获取一个值，该值指示当前方法或构造函数在当前信任级别上是安全关键的还是安全可靠关键的，因此可以执行关键操作。</summary>
      <returns>如果当前方法或构造函数在当前信任级别上是安全关键的或安全可靠关键的，则为 <see langword="true" />；如果它是透明的，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsSecuritySafeCritical">
      <summary>获取一个值，该值指示当前方法或构造函数在当前信任级别上是安全可靠关键的；即它是否可以执行关键操作并可以由透明代码访问。</summary>
      <returns>如果方法或构造函数在当前信任级别上是安全可靠关键的，则为 <see langword="true" />；如果它是安全关键的或透明的，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsSecurityTransparent">
      <summary>获取一个值，该值指示当前方法或构造函数在当前信任级别上是透明的，因此无法执行关键操作。</summary>
      <returns>如果方法或构造函数在当前信任级别上是安全透明的，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsSpecialName">
      <summary>获取一个值，该值指示此方法是否具有特殊名称。</summary>
      <returns>如果此方法具有特殊名称，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsStatic">
      <summary>获取一个值，该值指示方法是否为 <see langword="static" />。</summary>
      <returns>如果方法为 <see langword="static" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.IsVirtual">
      <summary>获取一个值，该值指示方法是否为 <see langword="virtual" />。</summary>
      <returns>如果方法为 <see langword="virtual" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.MethodHandle">
      <summary>获取方法的内部元数据表示形式的句柄。</summary>
      <returns>一个 <see cref="T:System.RuntimeMethodHandle" /> 对象。</returns>
    </member>
    <member name="P:System.Reflection.MethodBase.MethodImplementationFlags">
      <summary>获取指定方法实现特性的 <see cref="T:System.Reflection.MethodImplAttributes" /> 标志。</summary>
      <returns>方法实现标志。</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.op_Equality(System.Reflection.MethodBase,System.Reflection.MethodBase)">
      <summary>指示两个 <see cref="T:System.Reflection.MethodBase" /> 对象是否相等。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <see langword="true" /> 等于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.MethodBase.op_Inequality(System.Reflection.MethodBase,System.Reflection.MethodBase)">
      <summary>指示两个 <see cref="T:System.Reflection.MethodBase" /> 对象是否不相等。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <see langword="true" /> 不等于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Reflection.MethodBody">
      <summary>提供对方法体的元数据和 MSIL 的访问权限。</summary>
    </member>
    <member name="M:System.Reflection.MethodBody.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.MethodBody" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Reflection.MethodBody.ExceptionHandlingClauses">
      <summary>获取在方法主体中包含所有异常处理的子句的列表。</summary>
      <returns>
        <see cref="T:System.Reflection.ExceptionHandlingClause" /> 对象的 <see cref="T:System.Collections.Generic.IList`1" /> 表示方法主体中异常处理的子句。</returns>
    </member>
    <member name="M:System.Reflection.MethodBody.GetILAsByteArray">
      <summary>以字节数组的形式返回用于方法体的 MSIL。</summary>
      <returns>类型 <see cref="T:System.Byte" /> 的数组包含用于方法体的 MSIL。</returns>
    </member>
    <member name="P:System.Reflection.MethodBody.InitLocals">
      <summary>获取一个值，该值指示方法体中的局部变量是否初始化为相应类型的默认值。</summary>
      <returns>如果方法体包含用于将局部变量初始化为 <see langword="true" />（对于引用类型）或者零初始值（对于值类型）的代码，则为 <see langword="null" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodBody.LocalSignatureMetadataToken">
      <summary>获取签名的元数据标记，该签名描述元数据中的方法的局部变量。</summary>
      <returns>表示元数据标记的整数。</returns>
    </member>
    <member name="P:System.Reflection.MethodBody.LocalVariables">
      <summary>获取方法体中声明的局部变量的列表。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" /> 对象的一个 <see cref="T:System.Reflection.LocalVariableInfo" />，这些对象描述在方法体中声明的局部变量。</returns>
    </member>
    <member name="P:System.Reflection.MethodBody.MaxStackSize">
      <summary>执行方法时，获取操作堆栈上的项的最大数目。</summary>
      <returns>执行方法时操作数堆栈上的项的最大数目。</returns>
    </member>
    <member name="T:System.Reflection.MethodImplAttributes">
      <summary>指定方法实现的属性的标志。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.AggressiveInlining">
      <summary>指定方法应尽可能内联。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.AggressiveOptimization">
      <summary>指定应尽可能优化的方法。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.CodeTypeMask">
      <summary>指定有关代码类型的标志。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.ForwardRef">
      <summary>指定方法是未定义的。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.IL">
      <summary>指定方法实现位于 Microsoft 中间语言 (MSIL) 中。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.InternalCall">
      <summary>指定内部调用。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Managed">
      <summary>指定方法在托管代码中实现。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.ManagedMask">
      <summary>指定方法是在托管代码还是非托管代码中实现。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.MaxMethodImplVal">
      <summary>指定范围检查值。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Native">
      <summary>指定方法实现为本机。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.NoInlining">
      <summary>指定方法不能内联。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.NoOptimization">
      <summary>指定在调试可能的代码生成问题时，方法不由实时 (JIT) 编译器或本机代码生成优化（请参阅 Ngen.exe）。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.OPTIL">
      <summary>指定方法实现位于优化中间语言 (OPTIL) 中。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.PreserveSig">
      <summary>指定方法签名是完全按照声明导出的。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Runtime">
      <summary>指定方法实现由运行时提供。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Synchronized">
      <summary>指定方法是通过正文的单线程方法。 静态方法（在 Visual Basic 中为<see langword="Shared" /> ）在类型上锁定，而实例方法在实例上锁定。 为此，也可以使用 C# lock 语句 或 Visual Basic SyncLock 语句。</summary>
    </member>
    <member name="F:System.Reflection.MethodImplAttributes.Unmanaged">
      <summary>指定方法在非托管代码中实现。</summary>
    </member>
    <member name="T:System.Reflection.MethodInfo">
      <summary>发现方法的属性并提供对方法元数据的访问。</summary>
    </member>
    <member name="M:System.Reflection.MethodInfo.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.MethodInfo" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Reflection.MethodInfo.CreateDelegate(System.Type)">
      <summary>从此方法创建指定类型的委托。</summary>
      <param name="delegateType">要创建的委托的类型。</param>
      <returns>此方法的委托。</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)">
      <summary>从此方法创建具有指定目标的指定类型的委托。</summary>
      <param name="delegateType">要创建的委托的类型。</param>
      <param name="target">代理以该对象为目标。</param>
      <returns>此方法的委托。</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj">与此实例进行比较的对象，或为 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetBaseDefinition">
      <summary>当在派生类中被重写时，为直接或间接的基类（用该实例表示的方法首先在此类中声明）上的方法返回 <see cref="T:System.Reflection.MethodInfo" /> 对象。</summary>
      <returns>表示此方法第一个实现的 <see cref="T:System.Reflection.MethodInfo" /> 对象。</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetGenericArguments">
      <summary>返回 <see cref="T:System.Type" /> 对象的数组，这些对象表示泛型方法的类型实参或泛型方法定义的类型形参。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象的数组，这些对象表示泛型方法的类型变量或泛型方法定义的类型参数。 如果当前方法不是泛型方法，则返回空数组。</returns>
      <exception cref="T:System.NotSupportedException">不支持此方法。</exception>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetGenericMethodDefinition">
      <summary>返回一个 <see cref="T:System.Reflection.MethodInfo" /> 对象，该对象表示可从其构造当前方法的泛型方法定义。</summary>
      <returns>一个 <see cref="T:System.Reflection.MethodInfo" /> 对象，表示可从其构造当前方法的泛型方法定义。</returns>
      <exception cref="T:System.InvalidOperationException">当前方法不是泛型方法。 也就是说，<see cref="P:System.Reflection.MethodBase.IsGenericMethod" /> 返回 <see langword="false" />。</exception>
      <exception cref="T:System.NotSupportedException">不支持此方法。</exception>
    </member>
    <member name="M:System.Reflection.MethodInfo.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])">
      <summary>用类型数组的元素替代当前泛型方法定义的类型参数，并返回表示结果构造方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象。</summary>
      <param name="typeArguments">要替换当前泛型方法定义的类型参数的类型数组。</param>
      <returns>一个 <see cref="T:System.Reflection.MethodInfo" /> 对象，表示通过将当前泛型方法定义的类型参数替换为 <paramref name="typeArguments" /> 的元素生成的构造方法。</returns>
      <exception cref="T:System.InvalidOperationException">当前 <see cref="T:System.Reflection.MethodInfo" /> 不表示一个泛型方法定义。 也就是说，<see cref="P:System.Reflection.MethodBase.IsGenericMethodDefinition" /> 返回 <see langword="false" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> 为 <see langword="null" />。  
或 
<paramref name="typeArguments" /> 的任意元素为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArguments" /> 中的元素数与当前泛型方法定义的类型参数的数目不同。  
或 
<paramref name="typeArguments" /> 的元素不满足当前泛型方法定义的相应类型参数所指定的约束。</exception>
      <exception cref="T:System.NotSupportedException">不支持此方法。</exception>
    </member>
    <member name="P:System.Reflection.MethodInfo.MemberType">
      <summary>获取一个 <see cref="T:System.Reflection.MemberTypes" /> 值，该值指示此成员是方法。</summary>
      <returns>一个 <see cref="T:System.Reflection.MemberTypes" /> 值，指示此成员是方法。</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.op_Equality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary>指示两个 <see cref="T:System.Reflection.MethodInfo" /> 对象是否相等。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <see langword="true" /> 等于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.MethodInfo.op_Inequality(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary>指示两个 <see cref="T:System.Reflection.MethodInfo" /> 对象是否不相等。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <see langword="true" /> 不等于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnParameter">
      <summary>获取一个 <see cref="T:System.Reflection.ParameterInfo" /> 对象，该对象包含有关方法的返回类型的信息（例如返回类型是否具有自定义修饰符）。</summary>
      <returns>一个 <see cref="T:System.Reflection.ParameterInfo" /> 对象，包含有关返回类型的信息。</returns>
      <exception cref="T:System.NotImplementedException">未实现此方法。</exception>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnType">
      <summary>获取此方法的返回类型。</summary>
      <returns>此方法的返回类型。</returns>
    </member>
    <member name="P:System.Reflection.MethodInfo.ReturnTypeCustomAttributes">
      <summary>获取返回类型的自定义属性。</summary>
      <returns>表示返回类型自定义属性的 <see langword="ICustomAttributeProvider" /> 对象。</returns>
    </member>
    <member name="T:System.Reflection.Missing">
      <summary>表示缺少的 <see cref="T:System.Object" />。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Reflection.Missing.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用重新创建 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象的唯一实例所需的逻辑上下文信息设置 <see cref="T:System.Reflection.Missing" /> 对象。</summary>
      <param name="info">要用序列化信息填充的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，表示序列化的目标上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="F:System.Reflection.Missing.Value">
      <summary>表示 <see cref="T:System.Reflection.Missing" /> 类的唯一实例。</summary>
    </member>
    <member name="T:System.Reflection.Module">
      <summary>在模块上执行反射。</summary>
    </member>
    <member name="M:System.Reflection.Module.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.Module" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Reflection.Module.Assembly">
      <summary>为此 <see cref="T:System.Reflection.Module" /> 实例获取适当的 <see cref="T:System.Reflection.Assembly" />。</summary>
      <returns>
        <see langword="Assembly" /> 对象。</returns>
    </member>
    <member name="P:System.Reflection.Module.CustomAttributes">
      <summary>获取包含此模型自定义属性的集合。</summary>
      <returns>包含此模块的自定义特性的集合。</returns>
    </member>
    <member name="M:System.Reflection.Module.Equals(System.Object)">
      <summary>确定此模块和指定的对象是否相等。</summary>
      <param name="o">与该实例进行比较的对象。</param>
      <returns>如果 <see langword="true" /> 与此实例相等，则为 <paramref name="o" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.Reflection.Module.FilterTypeName">
      <summary>一个 <see langword="TypeFilter" /> 对象，该对象根据名称筛选在此模块中定义的类型列表。 此字段区分大小写且为只读。</summary>
    </member>
    <member name="F:System.Reflection.Module.FilterTypeNameIgnoreCase">
      <summary>一个 <see langword="TypeFilter" /> 对象，该对象根据名称筛选在此模块中定义的类型列表。 此字段不区分大小写且为只读。</summary>
    </member>
    <member name="M:System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)">
      <summary>返回给定筛选器和筛选条件接受的类数组。</summary>
      <param name="filter">用于筛选类的委托。</param>
      <param name="filterCriteria">用于筛选类的对象。</param>
      <returns>类型 <see langword="Type" /> 的数组，包含已被筛选器接受的类。</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">无法加载模块中的一个或多个类。</exception>
    </member>
    <member name="P:System.Reflection.Module.FullyQualifiedName">
      <summary>获取表示此模块的完全限定名和路径的字符串。</summary>
      <returns>完全限定的模块名。</returns>
      <exception cref="T:System.Security.SecurityException">调用方没有所需的权限。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetCustomAttributes(System.Boolean)">
      <summary>返回所有自定义属性。</summary>
      <param name="inherit">对于该类型的对象，将忽略此参数。</param>
      <returns>包含所有自定义属性的 <see langword="Object" /> 类型的数组。</returns>
    </member>
    <member name="M:System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>获取指定类型的自定义属性。</summary>
      <param name="attributeType">要获取的特性的类型。</param>
      <param name="inherit">对于该类型的对象，将忽略此参数。</param>
      <returns>
        <see langword="Object" /> 类型的数组，包含指定类型的所有自定义属性。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是由运行时提供的 <see cref="T:System.Type" /> 对象。 例如，<paramref name="attributeType" /> 是一个 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 对象。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetCustomAttributesData">
      <summary>返回当前模块的 <see cref="T:System.Reflection.CustomAttributeData" /> 对象列表，这些对象可以在只反射上下文中使用。</summary>
      <returns>
        <see cref="T:System.Reflection.CustomAttributeData" /> 对象的泛型列表，表示已应用到当前模块的特性的相关数据。</returns>
    </member>
    <member name="M:System.Reflection.Module.GetField(System.String)">
      <summary>返回具有指定名称的方法。</summary>
      <param name="name">字段名。</param>
      <returns>具有指定名称的 <see langword="FieldInfo" /> 对象，如果该字段不存在则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>返回具有指定名称和绑定特性的字段。</summary>
      <param name="name">字段名。</param>
      <param name="bindingAttr">用来控制搜索的其中一个 <see langword="BindingFlags" /> 位标志。</param>
      <returns>具有指定名称和绑定特性的 <see langword="FieldInfo" /> 对象，如果该字段不存在则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetFields">
      <summary>返回在模块上定义的全局字段。</summary>
      <returns>表示在模块上定义的全局字段的 <see cref="T:System.Reflection.FieldInfo" /> 对象数组；如果没有全局字段，则返回空数组。</returns>
    </member>
    <member name="M:System.Reflection.Module.GetFields(System.Reflection.BindingFlags)">
      <summary>返回在与指定绑定标志匹配的模块上定义的全局字段。</summary>
      <param name="bindingFlags">用于限制搜索的 <see cref="T:System.Reflection.BindingFlags" /> 值的按位组合。</param>
      <returns>类型 <see cref="T:System.Reflection.FieldInfo" /> 的数组，表示在与指定的绑定标志匹配的模块上定义的全局字段；如果没有全局字段匹配绑定标志，则返回空数组。</returns>
    </member>
    <member name="M:System.Reflection.Module.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.Module.GetMethod(System.String)">
      <summary>返回具有指定名称的方法。</summary>
      <param name="name">方法名。</param>
      <returns>具有指定名称的 <see langword="MethodInfo" /> 对象，如果该方法不存在则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>返回具有指定名称、绑定信息、调用约定和参数类型及修饰符的方法。</summary>
      <param name="name">方法名。</param>
      <param name="bindingAttr">用来控制搜索的其中一个 <see langword="BindingFlags" /> 位标志。</param>
      <param name="binder">一个实现 <see langword="Binder" /> 的对象，包含与此方法相关的属性。</param>
      <param name="callConvention">方法的调用约定。</param>
      <param name="types">要搜索的参数类型。</param>
      <param name="modifiers">参数修饰符的数组，用于使绑定可与在其中修改了类型的参数签名一起使用。</param>
      <returns>一个符合指定条件的 <see langword="MethodInfo" /> 对象，如果方法不存在则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />，<paramref name="types" /> 为 <see langword="null" />，或 <paramref name="types" /> (i) 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethod(System.String,System.Type[])">
      <summary>返回具有指定名称和参数类型的方法。</summary>
      <param name="name">方法名。</param>
      <param name="types">要搜索的参数类型。</param>
      <returns>一个符合指定条件的 <see langword="MethodInfo" /> 对象，如果方法不存在则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />，<paramref name="types" /> 为 <see langword="null" />，或 <paramref name="types" /> (i) 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>返回符合指定条件的方法实现。</summary>
      <param name="name">方法名。</param>
      <param name="bindingAttr">用来控制搜索的其中一个 <see langword="BindingFlags" /> 位标志。</param>
      <param name="binder">一个实现 <see langword="Binder" /> 的对象，包含与此方法相关的属性。</param>
      <param name="callConvention">方法的调用约定。</param>
      <param name="types">要搜索的参数类型。</param>
      <param name="modifiers">参数修饰符的数组，用于使绑定可与在其中修改了类型的参数签名一起使用。</param>
      <returns>包含指定的实现信息的 <see langword="MethodInfo" /> 对象；如果该方法不存在，则为 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">
        <paramref name="types" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetMethods">
      <summary>返回在模块中定义的全局方法。</summary>
      <returns>一个表示模块中定义的所有全局方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象数组；如果没有全局方法，则返回空数组。</returns>
    </member>
    <member name="M:System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)">
      <summary>返回在与指定的绑定标志匹配的模块上定义的全局方法。</summary>
      <param name="bindingFlags">用于限制搜索的 <see cref="T:System.Reflection.BindingFlags" /> 值的按位组合。</param>
      <returns>类型 <see cref="T:System.Reflection.MethodInfo" /> 的数组，表示在与指定的绑定标志匹配的模块上定义的全局方法；如果没有全局方法匹配绑定标志，则返回空数组。</returns>
    </member>
    <member name="M:System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>提供序列化对象的 <see cref="T:System.Runtime.Serialization.ISerializable" /> 实现。</summary>
      <param name="info">序列化或反序列化对象所需的信息和数据。</param>
      <param name="context">序列化的上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)">
      <summary>获取一对值，这一对值指示某个模块中代码的性质和该模块的目标平台。</summary>
      <param name="peKind">当此方法返回时，为 <see cref="T:System.Reflection.PortableExecutableKinds" /> 值的组合，用于指示模块中代码的性质。</param>
      <param name="machine">当此方法返回时，为 <see cref="T:System.Reflection.ImageFileMachine" /> 值中的一个，用于指示模块的目标平台。</param>
    </member>
    <member name="M:System.Reflection.Module.GetType(System.String)">
      <summary>返回指定的类型，执行区分大小写的搜索。</summary>
      <param name="className">要查找的类型的名称。 名称必须用命名空间加以完全限定。</param>
      <returns>表示给定类型的 <see langword="Type" /> 对象（如果类型位于此模块中）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">调用类初始值设定项，并且引发异常。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" /> 是一个长度为零的字符串。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="className" /> 所需的从属程序集无法找到。</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="className" /> 所需的从属程序集已找到，但无法加载。  
或 
当前程序集被加载到仅反射上下文中，并且 <paramref name="className" /> 所需的从属程序集未预先加载。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="className" /> 需要一个从属程序集，但该文件不是有效的程序集。  
或 
 <paramref name="className" /> 需要一个从属程序集，该程序集已针对比当前加载的版本更高的运行时版本进行了编译。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetType(System.String,System.Boolean)">
      <summary>返回指定的类型，通过指定的区分大小写搜索模块。</summary>
      <param name="className">要查找的类型的名称。 名称必须用命名空间加以完全限定。</param>
      <param name="ignoreCase">对于不区分大小写的搜索，为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>表示给定类型的 <see langword="Type" /> 对象（如果类型位于此模块中）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">调用类初始值设定项，并且引发异常。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" /> 是一个长度为零的字符串。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="className" /> 所需的从属程序集无法找到。</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="className" /> 所需的从属程序集已找到，但无法加载。  
或 
当前程序集被加载到仅反射上下文中，并且 <paramref name="className" /> 所需的从属程序集未预先加载。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="className" /> 需要一个从属程序集，但该文件不是有效的程序集。  
或 
 <paramref name="className" /> 需要一个从属程序集，该程序集已针对比当前加载的版本更高的运行时版本进行了编译。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>返回指定的类型，指定是否对该模块进行区分大小写的搜索；如果找不到该类型，则指定是否引发异常。</summary>
      <param name="className">要查找的类型的名称。 名称必须用命名空间加以完全限定。</param>
      <param name="throwOnError">如果为 <see langword="true" />，则在找不到该类型时引发异常；如果为 <see langword="false" />，则返回 <see langword="null" />。</param>
      <param name="ignoreCase">对于不区分大小写的搜索，为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>如果已在此模块中声明指定类型，则为一个表示指定类型的 <see cref="T:System.Type" /> 对象；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">调用类初始值设定项，并且引发异常。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" /> 是一个长度为零的字符串。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> 为 <see langword="true" />，且找不到此类型。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="className" /> 所需的从属程序集无法找到。</exception>
      <exception cref="T:System.IO.FileLoadException">
        <paramref name="className" /> 所需的从属程序集已找到，但无法加载。  

或 - 
当前程序集被加载到仅反射上下文中，并且 <paramref name="className" /> 所需的从属程序集未预先加载。</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="className" /> 需要一个从属程序集，但该文件不是有效的程序集。  

或 - 
<paramref name="className" /> 需要一个从属程序集，该程序集已针对比当前加载的版本更高的运行时版本进行了编译。</exception>
    </member>
    <member name="M:System.Reflection.Module.GetTypes">
      <summary>返回在此模块中定义的所有类型。</summary>
      <returns>一组 <see langword="Type" /> 类型，其中包含在此实例反映的模块中定义的类型。</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">无法加载模块中的一个或多个类。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.Reflection.Module.IsDefined(System.Type,System.Boolean)">
      <summary>返回一个值，该值指示是否已将指定的特性类型应用于此模块。</summary>
      <param name="attributeType">要测试的自定义属性的类型。</param>
      <param name="inherit">对于该类型的对象，将忽略此参数。</param>
      <returns>如果一个或多个 <paramref name="attributeType" /> 实例已应用于此模块，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是由运行时提供的 <see cref="T:System.Type" /> 对象。 例如，<paramref name="attributeType" /> 是一个 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 对象。</exception>
    </member>
    <member name="M:System.Reflection.Module.IsResource">
      <summary>获取一个值，该值指示此对象是否是资源。</summary>
      <returns>如果此对象是资源，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Module.MDStreamVersion">
      <summary>获取元数据流版本。</summary>
      <returns>表示元数据流版本的 32 位整数。 高序位的两个字节表示主版本号，低序位的两个字节表示次版本号。</returns>
    </member>
    <member name="P:System.Reflection.Module.MetadataToken">
      <summary>获取一个令牌，该令牌用于标识元数据中的模块。</summary>
      <returns>一个整数标记，用于标识元数据中的当前模块。</returns>
    </member>
    <member name="P:System.Reflection.Module.ModuleHandle">
      <summary>获取模块的图柄。</summary>
      <returns>当前模块的 <see cref="T:System.ModuleHandle" /> 结构。</returns>
    </member>
    <member name="P:System.Reflection.Module.ModuleVersionId">
      <summary>获取可用于区分模块的两个版本的全局唯一标识符 (UUID)。</summary>
      <returns>可用于区分模块的两个版本的 <see cref="T:System.Guid" />。</returns>
    </member>
    <member name="P:System.Reflection.Module.Name">
      <summary>获取 <see langword="String" />，它表示移除了路径的模块名。</summary>
      <returns>不带路径的模块名。</returns>
    </member>
    <member name="M:System.Reflection.Module.op_Equality(System.Reflection.Module,System.Reflection.Module)">
      <summary>指示两个 <see cref="T:System.Reflection.Module" /> 对象是否相等。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <see langword="true" /> 等于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Module.op_Inequality(System.Reflection.Module,System.Reflection.Module)">
      <summary>指示两个 <see cref="T:System.Reflection.Module" /> 对象是否不相等。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <see langword="true" /> 不等于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Module.ResolveField(System.Int32)">
      <summary>返回由指定的元数据令牌标识的字段。</summary>
      <param name="metadataToken">一个元数据令牌，用于标识模块中的一个字段。</param>
      <returns>一个 <see cref="T:System.Reflection.FieldInfo" /> 对象，表示由指定元数据令牌标识的字段。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 不是当前模块范围内的字段的令牌。  
或 
 <paramref name="metadataToken" /> 标识一个字段，该字段的父级 <see langword="TypeSpec" /> 具有一个包含元素类型 <see langword="var" />（泛型类型的类型参数）或 <see langword="mvar" />（泛型方法的类型参数）的签名。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 不是当前模块范围内的有效令牌。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveField(System.Int32,System.Type[],System.Type[])">
      <summary>在由指定的泛型类型参数定义的上下文中，返回由指定的元数据令牌标识的字段。</summary>
      <param name="metadataToken">一个元数据令牌，用于标识模块中的一个字段。</param>
      <param name="genericTypeArguments">一个 <see cref="T:System.Type" /> 对象的数组，表示以下类型的泛型类型参数，在该类型中，令牌在范围内；如果该类型不是泛型类型，则为 <see langword="null" />。</param>
      <param name="genericMethodArguments">一个 <see cref="T:System.Type" /> 对象的数组，表示以下方法的泛型类型参数，在该方法中，令牌在范围内；如果该方法不是泛型方法，则为 <see langword="null" />。</param>
      <returns>一个 <see cref="T:System.Reflection.FieldInfo" /> 对象，表示由指定元数据令牌标识的字段。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 不是当前模块范围内的字段的令牌。  
或 
 <paramref name="metadataToken" /> 标识一个字段，该字段的父级 <see langword="TypeSpec" /> 具有一个包含元素类型 <see langword="var" />（泛型类型的类型参数）或 <see langword="mvar" />（泛型方法的类型参数）的签名，并且没有为 <paramref name="genericTypeArguments" /> 和（或）<paramref name="genericMethodArguments" /> 提供必要的泛型类型参数。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 不是当前模块范围内的有效令牌。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveMember(System.Int32)">
      <summary>返回由指定的元数据令牌标识的类型或成员。</summary>
      <param name="metadataToken">一个元数据令牌，用于标识模块中的类型或成员。</param>
      <returns>一个 <see cref="T:System.Reflection.MemberInfo" /> 对象，表示由指定的元数据令牌标识的类型或成员。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 不是当前模块范围内的类型或成员的令牌。  

或 - 
<paramref name="metadataToken" /> 是一个 <see langword="MethodSpec" /> 或 <see langword="TypeSpec" />，其签名包含元素类型 <see langword="var" />（泛型类型的类型参数）或 <see langword="mvar" />（泛型方法的类型参数）。  

或 
 <paramref name="metadataToken" /> 标识一个属性或事件。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 不是当前模块范围内的有效令牌。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveMember(System.Int32,System.Type[],System.Type[])">
      <summary>在由指定的泛型类型参数定义的上下文中，返回由指定的元数据令牌标识的类型或成员。</summary>
      <param name="metadataToken">一个元数据令牌，用于标识模块中的类型或成员。</param>
      <param name="genericTypeArguments">一个 <see cref="T:System.Type" /> 对象的数组，表示以下类型的泛型类型参数，在该类型中，令牌在范围内；如果该类型不是泛型类型，则为 <see langword="null" />。</param>
      <param name="genericMethodArguments">一个 <see cref="T:System.Type" /> 对象的数组，表示以下方法的泛型类型参数，在该方法中，令牌在范围内；如果该方法不是泛型方法，则为 <see langword="null" />。</param>
      <returns>一个 <see cref="T:System.Reflection.MemberInfo" /> 对象，表示由指定的元数据令牌标识的类型或成员。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 不是当前模块范围内的类型或成员的令牌。  
或 
 <paramref name="metadataToken" /> 是一个 <see langword="MethodSpec" /> 或 <see langword="TypeSpec" />，其签名包含元素类型 <see langword="var" />（泛型类型的类型参数）或 <see langword="mvar" />（泛型方法的类型参数），并且没有为 <paramref name="genericTypeArguments" /> 和（或）<paramref name="genericMethodArguments" /> 提供必要的泛型类型参数。  

或 - 
<paramref name="metadataToken" /> 标识一个属性或事件。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 不是当前模块范围内的有效令牌。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveMethod(System.Int32)">
      <summary>返回由指定的元数据令牌标识的方法或构造函数。</summary>
      <param name="metadataToken">一个元数据令牌，用于标识模块中的方法或构造函数。</param>
      <returns>一个 <see cref="T:System.Reflection.MethodBase" /> 对象，表示由指定的元数据令牌标识的方法或构造函数。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 不是当前模块范围内的方法或构造函数的令牌。  

或 - 
<paramref name="metadataToken" /> 是一个 <see langword="MethodSpec" />，其签名包含元素类型 <see langword="var" />（泛型类型的类型参数）或 <see langword="mvar" />（泛型方法的类型参数）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 不是当前模块范围内的有效令牌。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])">
      <summary>在由指定的泛型类型参数定义的上下文中，返回由指定的元数据令牌标识的方法或构造函数。</summary>
      <param name="metadataToken">一个元数据令牌，用于标识模块中的方法或构造函数。</param>
      <param name="genericTypeArguments">一个 <see cref="T:System.Type" /> 对象的数组，表示以下类型的泛型类型参数，在该类型中，令牌在范围内；如果该类型不是泛型类型，则为 <see langword="null" />。</param>
      <param name="genericMethodArguments">一个 <see cref="T:System.Type" /> 对象的数组，表示以下方法的泛型类型参数，在该方法中，令牌在范围内；如果该方法不是泛型方法，则为 <see langword="null" />。</param>
      <returns>一个 <see cref="T:System.Reflection.MethodBase" /> 对象，表示由指定的元数据令牌标识的方法。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 不是当前模块范围内的方法或构造函数的令牌。  
或 
 <paramref name="metadataToken" /> 是一个 <see langword="MethodSpec" />，其签名包含元素类型 <see langword="var" />（泛型类型的类型参数）或 <see langword="mvar" />（泛型方法的类型参数），并且没有为 <paramref name="genericTypeArguments" /> 和（或）<paramref name="genericMethodArguments" /> 提供必要的泛型类型参数。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 不是当前模块范围内的有效令牌。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveSignature(System.Int32)">
      <summary>返回由元数据令牌标识的签名 Blob。</summary>
      <param name="metadataToken">一个元数据令牌，用于标识模块中的一个签名。</param>
      <returns>一个字节数组，表示签名 Blob。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 不是当前模块范围内的有效 <see langword="MemberRef" />、<see langword="MethodDef" />、<see langword="TypeSpec" />、签名或 <see langword="FieldDef" /> 令牌。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 不是当前模块范围内的有效令牌。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveString(System.Int32)">
      <summary>返回由指定元数据令牌标识的字符串。</summary>
      <param name="metadataToken">一个元数据令牌，用于标识模块的字符串堆中的一个字符串。</param>
      <returns>一个 <see cref="T:System.String" />，包含来自元数据字符串堆的一个字符串值。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 不是当前模块范围内的字符串的令牌。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 不是当前模块范围内的有效令牌。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveType(System.Int32)">
      <summary>返回由指定的元数据令牌标识的类型。</summary>
      <param name="metadataToken">一个元数据令牌，用于标识模块中的一个类型。</param>
      <returns>一个 <see cref="T:System.Type" /> 对象，表示由指定的元数据令牌标识的类型。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 不是当前模块范围内的类型的令牌。  
或 
 <paramref name="metadataToken" /> 是一个 <see langword="TypeSpec" />，其签名包含元素类型 <see langword="var" />（泛型类型的类型参数）或 <see langword="mvar" />（泛型方法的类型参数）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 不是当前模块范围内的有效令牌。</exception>
    </member>
    <member name="M:System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])">
      <summary>在由指定的泛型类型参数定义的上下文中，返回由指定的元数据令牌标识的类型。</summary>
      <param name="metadataToken">一个元数据令牌，用于标识模块中的一个类型。</param>
      <param name="genericTypeArguments">一个 <see cref="T:System.Type" /> 对象的数组，表示以下类型的泛型类型参数，在该类型中，令牌在范围内；如果该类型不是泛型类型，则为 <see langword="null" />。</param>
      <param name="genericMethodArguments">一个 <see cref="T:System.Type" /> 对象的数组，表示以下方法的泛型类型参数，在该方法中，令牌在范围内；如果该方法不是泛型方法，则为 <see langword="null" />。</param>
      <returns>一个 <see cref="T:System.Type" /> 对象，表示由指定的元数据令牌标识的类型。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 不是当前模块范围内的类型的令牌。  

或 - 
<paramref name="metadataToken" /> 是一个 <see langword="TypeSpec" />，其签名包含元素类型 <see langword="var" />（泛型类型的类型参数）或 <see langword="mvar" />（泛型方法的类型参数），并且没有为 <paramref name="genericTypeArguments" /> 和（或）<paramref name="genericMethodArguments" /> 提供必要的泛型类型参数。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 不是当前模块范围内的有效令牌。</exception>
    </member>
    <member name="P:System.Reflection.Module.ScopeName">
      <summary>获取表示模块名的字符串。</summary>
      <returns>模块名。</returns>
    </member>
    <member name="M:System.Reflection.Module.ToString">
      <summary>返回模块的名称。</summary>
      <returns>表示此模块的名称的 <see langword="String" />。</returns>
    </member>
    <member name="T:System.Reflection.ModuleResolveEventHandler">
      <summary>表示将要处理 <see cref="T:System.Reflection.Assembly" /> 的 <see cref="E:System.Reflection.Assembly.ModuleResolve" /> 事件的方法。</summary>
      <param name="sender">曾作为事件源的程序集。</param>
      <param name="e">由描述事件的对象提供的参数。</param>
      <returns>满足请求的模块。</returns>
    </member>
    <member name="T:System.Reflection.ObfuscateAssemblyAttribute">
      <summary>指示模糊处理工具对适当的程序集类型使用其标准模糊处理规则。</summary>
    </member>
    <member name="M:System.Reflection.ObfuscateAssemblyAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Reflection.ObfuscateAssemblyAttribute" /> 类的新实例，指定要模糊处理的程序集是公共的还是私有的。</summary>
      <param name="assemblyIsPrivate">如果程序集在某个应用程序范围内使用，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="P:System.Reflection.ObfuscateAssemblyAttribute.AssemblyIsPrivate">
      <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示程序集是否标记为私有。</summary>
      <returns>如果程序集标记为私有，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.ObfuscateAssemblyAttribute.StripAfterObfuscation">
      <summary>获取或设置一个 <see cref="T:System.Boolean" /> 值，该值指示模糊处理工具是否应在处理后移除该特性。</summary>
      <returns>如果模糊处理工具应在处理后移除该特性，则为 <see langword="true" />；否则为 <see langword="false" />。 此属性的默认值为 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Reflection.ObfuscationAttribute">
      <summary>指示模糊处理工具对程序集、类型或成员采取指定的操作。</summary>
    </member>
    <member name="M:System.Reflection.ObfuscationAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.ObfuscationAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Reflection.ObfuscationAttribute.ApplyToMembers">
      <summary>获取或设置一个 <see cref="T:System.Boolean" /> 值，该值指示某一类型的特性是否应用到该类型的成员。</summary>
      <returns>如果该特性要应用到类型的成员，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Reflection.ObfuscationAttribute.Exclude">
      <summary>获取或设置一个 <see cref="T:System.Boolean" /> 值，该值指示模糊处理工具是否应将类型或成员从模糊处理中排除。</summary>
      <returns>如果应用该特性的类型或成员应从模糊处理中排除，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Reflection.ObfuscationAttribute.Feature">
      <summary>获取或设置一个字符串值，该字符串值可由模糊处理工具识别并指定处理选项。</summary>
      <returns>一个字符串值，可由模糊处理工具识别并指定处理选项。 默认为“all”。</returns>
    </member>
    <member name="P:System.Reflection.ObfuscationAttribute.StripAfterObfuscation">
      <summary>获取或设置一个 <see cref="T:System.Boolean" /> 值，该值指示模糊处理工具是否应在处理后移除此特性。</summary>
      <returns>如果模糊处理工具应在处理后移除该特性，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Reflection.ParameterAttributes">
      <summary>定义可以与参数相关联的属性。 这些属性在 CorHdr.h 中进行定义。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.HasDefault">
      <summary>指定参数具有默认值。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.HasFieldMarshal">
      <summary>指定该参数具有字段封送处理信息。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.In">
      <summary>指定该参数是一个输入参数。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Lcid">
      <summary>指定该参数是一个区域设置标识符 (lcid)。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.None">
      <summary>指定不存在参数属性。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Optional">
      <summary>指定参数为可选。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Out">
      <summary>指定该参数是一个输出参数。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Reserved3">
      <summary>保留。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Reserved4">
      <summary>保留。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.ReservedMask">
      <summary>指定该参数是保留的。</summary>
    </member>
    <member name="F:System.Reflection.ParameterAttributes.Retval">
      <summary>指定该参数是一个返回值。</summary>
    </member>
    <member name="T:System.Reflection.ParameterInfo">
      <summary>发现参数属性并提供对参数元数据的访问。</summary>
    </member>
    <member name="M:System.Reflection.ParameterInfo.#ctor">
      <summary>初始化 <see langword="ParameterInfo" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Attributes">
      <summary>获取此参数的属性。</summary>
      <returns>表示该参数的特性的 <see langword="ParameterAttributes" /> 对象。</returns>
    </member>
    <member name="F:System.Reflection.ParameterInfo.AttrsImpl">
      <summary>参数的属性。</summary>
    </member>
    <member name="F:System.Reflection.ParameterInfo.ClassImpl">
      <summary>参数的 <see langword="Type" />。</summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.CustomAttributes">
      <summary>获取包含此参数自定义属性的集合。</summary>
      <returns>包含此参数自定义特性的集合。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.DefaultValue">
      <summary>获取一个指示默认值的值（如果参数具有默认值）。</summary>
      <returns>参数的默认值，或 <see cref="F:System.DBNull.Value" />（如果参数没有默认值）。</returns>
    </member>
    <member name="F:System.Reflection.ParameterInfo.DefaultValueImpl">
      <summary>参数的默认值。</summary>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Boolean)">
      <summary>获取此参数上定义的所有自定义属性。</summary>
      <param name="inherit">对于该类型的对象，将忽略此参数。</param>
      <returns>包含应用于此参数的所有自定义属性的数组。</returns>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>获取应用于此参数的指定类型或其派生类型的自定义属性。</summary>
      <param name="attributeType">由类型标识的自定义属性。</param>
      <param name="inherit">对于该类型的对象，将忽略此参数。</param>
      <returns>一个数组，该数组包含指定类型或其派生类型的自定义属性。</returns>
      <exception cref="T:System.ArgumentException">该类型必须是由基础运行时系统提供的类型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetCustomAttributesData">
      <summary>返回当前参数的 <see cref="T:System.Reflection.CustomAttributeData" /> 对象列表，这些对象可以在仅反射上下文中使用。</summary>
      <returns>
        <see cref="T:System.Reflection.CustomAttributeData" /> 对象的泛型列表，表示有关已应用于当前参数的特性的数据。</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers">
      <summary>获取参数可选的自定义修饰符。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象的数组，这些对象标识当前参数的可选自定义修饰符（例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />）。</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetRealObject(System.Runtime.Serialization.StreamingContext)">
      <summary>返回应进行反序列化的实际对象，而不是序列化流指定的对象。</summary>
      <param name="context">从中对当前对象进行反序列化的序列化流。</param>
      <returns>放入图中的实际对象。</returns>
      <exception cref="T:System.Runtime.Serialization.SerializationException">参数在其关联成员的参数列表中的位置对于该成员的类型无效。</exception>
    </member>
    <member name="M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers">
      <summary>获取参数所必需的自定义修饰符。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象的数组，这些对象标识当前参数所必需的自定义修饰符，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.HasDefaultValue">
      <summary>获取一个值，指示此参数是否有默认值。</summary>
      <returns>如果此参数有一默认值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.IsDefined(System.Type,System.Boolean)">
      <summary>确定指定类型或其派生类型的自定义属性是否应用于此参数。</summary>
      <param name="attributeType">要搜索的 <see langword="Type" /> 对象。</param>
      <param name="inherit">对于该类型的对象，将忽略此参数。</param>
      <returns>如果将 <paramref name="attributeType" /> 或其派生类型的一个或多个实例应用于此参数，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是一个由公共语言运行时提供的 <see cref="T:System.Type" /> 对象。</exception>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsIn">
      <summary>获取一个值，通过该值指示这是否为输入参数。</summary>
      <returns>如果此参数是输入参数，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsLcid">
      <summary>获取一个值，通过该值指示该参数是否为区域设置标识符 (lcid)。</summary>
      <returns>如果此参数是区域设置标识符，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsOptional">
      <summary>获取一个值，通过该值指示该参数是否可选。</summary>
      <returns>如果此参数是可选的，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsOut">
      <summary>获取一个值，通过该值指示这是否为输出参数。</summary>
      <returns>如果此参数是输出参数，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.IsRetval">
      <summary>获取一个值，通过该值指示这是否为 <see langword="Retval" /> 参数。</summary>
      <returns>如果此参数是 <see langword="true" />，则为 <see langword="Retval" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Member">
      <summary>获取一个值，通过该值指示实现此参数的成员。</summary>
      <returns>植入由此 <see cref="T:System.Reflection.ParameterInfo" /> 表示的参数的成员。</returns>
    </member>
    <member name="F:System.Reflection.ParameterInfo.MemberImpl">
      <summary>在其中实现该字段的成员。</summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.MetadataToken">
      <summary>获取在元数据中标识此参数的值。</summary>
      <returns>与模块一起使用的值，可在元数据中唯一标识此参数。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Name">
      <summary>获取参数名。</summary>
      <returns>此参数的简单名称。</returns>
    </member>
    <member name="F:System.Reflection.ParameterInfo.NameImpl">
      <summary>参数的名称。</summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.ParameterType">
      <summary>获取该参数的 <see langword="Type" />。</summary>
      <returns>表示该参数 <see langword="Type" /> 的 <see langword="Type" /> 对象。</returns>
    </member>
    <member name="P:System.Reflection.ParameterInfo.Position">
      <summary>获取参数在形参表中的位置（从零开始）。</summary>
      <returns>表示该参数在参数列表中所占位置的整数。</returns>
    </member>
    <member name="F:System.Reflection.ParameterInfo.PositionImpl">
      <summary>参数列表中参数从零开始的位置。</summary>
    </member>
    <member name="P:System.Reflection.ParameterInfo.RawDefaultValue">
      <summary>获取一个指示默认值的值（如果参数具有默认值）。</summary>
      <returns>参数的默认值，或 <see cref="F:System.DBNull.Value" />（如果参数没有默认值）。</returns>
    </member>
    <member name="M:System.Reflection.ParameterInfo.ToString">
      <summary>获取表示为字符串的参数类型和名称。</summary>
      <returns>包含参数的类型和名称的字符串。</returns>
    </member>
    <member name="T:System.Reflection.ParameterModifier">
      <summary>将修饰符附加到参数，以便绑定可与在其中修改了类型的参数签名一起使用。</summary>
    </member>
    <member name="M:System.Reflection.ParameterModifier.#ctor(System.Int32)">
      <summary>初始化表示指定参数数量的 <see cref="T:System.Reflection.ParameterModifier" /> 结构的新实例。</summary>
      <param name="parameterCount">参数的数量。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterCount" /> 为负数。</exception>
    </member>
    <member name="P:System.Reflection.ParameterModifier.Item(System.Int32)">
      <summary>获取或设置一个值，该值指定当前 <see cref="T:System.Reflection.ParameterModifier" /> 是否修改位于指定索引位置的参数。</summary>
      <param name="index">正在检查或设置其修改状态的参数的索引位置。</param>
      <returns>如果该 <see cref="T:System.Reflection.ParameterModifier" /> 会修改此索引位置处的参数，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Reflection.Pointer">
      <summary>为指针提供包装类。</summary>
    </member>
    <member name="M:System.Reflection.Pointer.Box(System.Void*,System.Type)">
      <summary>将提供的非托管内存指针和与该指针关联的类型装箱到托管 <see cref="T:System.Reflection.Pointer" /> 包装对象中。 该值和类型被保存以便可以在调用过程中从本机代码访问它们。</summary>
      <param name="ptr">提供的非托管内存指针。</param>
      <param name="type">与 <paramref name="ptr" /> 参数关联的类型。</param>
      <returns>指针对象。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是指针。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Pointer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用文件名、合成日志和其他异常信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Reflection.Pointer.Unbox(System.Object)">
      <summary>返回存储指针。</summary>
      <param name="ptr">存储指针。</param>
      <returns>此方法返回 void。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> 不是指针。</exception>
    </member>
    <member name="T:System.Reflection.PortableExecutableKinds">
      <summary>标识可执行文件中代码的特性。</summary>
    </member>
    <member name="F:System.Reflection.PortableExecutableKinds.ILOnly">
      <summary>该可执行文件仅包含 Microsoft 中间语言 (MSIL)，因此不特定于 32 位或 64 位平台。</summary>
    </member>
    <member name="F:System.Reflection.PortableExecutableKinds.NotAPortableExecutableImage">
      <summary>该文件不是可移植的可执行 (PE) 文件格式。</summary>
    </member>
    <member name="F:System.Reflection.PortableExecutableKinds.PE32Plus">
      <summary>该可执行文件需要 64 位平台。</summary>
    </member>
    <member name="F:System.Reflection.PortableExecutableKinds.Preferred32Bit">
      <summary>该可执行文件与平台无光，但应尽可能在 32 位平台上运行。</summary>
    </member>
    <member name="F:System.Reflection.PortableExecutableKinds.Required32Bit">
      <summary>该可执行文件可在 32 位平台上运行，或在 64 位平台上的 32 位 Windows on Windows (WOW) 环境中运行。</summary>
    </member>
    <member name="F:System.Reflection.PortableExecutableKinds.Unmanaged32Bit">
      <summary>该可执行文件包含纯非托管代码。</summary>
    </member>
    <member name="T:System.Reflection.ProcessorArchitecture">
      <summary>标识可执行文件的目标平台的处理器和每字位数。</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.Amd64">
      <summary>基于 x64 体系结构 的 64 位处理器。</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.Arm">
      <summary>ARM 处理器。</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.IA64">
      <summary>仅限 64 位 Intel Itanium 处理器。</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.MSIL">
      <summary>不特定于处理器和每字位数。</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.None">
      <summary>处理器和每字位数的未知或未指定的组合。</summary>
    </member>
    <member name="F:System.Reflection.ProcessorArchitecture.X86">
      <summary>32 位 Intel 处理器，位于本机上或位于 64 位平台 (WOW64) 的 Windows on Windows 环境中。</summary>
    </member>
    <member name="T:System.Reflection.PropertyAttributes">
      <summary>定义可能与属性 (Property) 关联的属性 (Attribute)。 这些特性值定义在 corhdr.h 中。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.HasDefault">
      <summary>指定属性具有默认值。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.None">
      <summary>指定没有与属性关联的特性。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.Reserved2">
      <summary>保留。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.Reserved3">
      <summary>保留。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.Reserved4">
      <summary>保留。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.ReservedMask">
      <summary>指定一个仅供运行时使用的保留标志。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.RTSpecialName">
      <summary>指定由元数据内部 API 检查名称编码。</summary>
    </member>
    <member name="F:System.Reflection.PropertyAttributes.SpecialName">
      <summary>指定属性是特殊的，并用名称描述属性的特殊性。</summary>
    </member>
    <member name="T:System.Reflection.PropertyInfo">
      <summary>发现属性 (Property) 的属性 (Attribute) 并提供对属性 (Property) 元数据的访问。</summary>
    </member>
    <member name="M:System.Reflection.PropertyInfo.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.PropertyInfo" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Reflection.PropertyInfo.Attributes">
      <summary>获取此属性 (Property) 的属性 (Attribute)。</summary>
      <returns>此属性的特性。</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.CanRead">
      <summary>获取一个值，该值指示此属性是否可读。</summary>
      <returns>如果此属性可读，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.CanWrite">
      <summary>获取一个值，该值指示此属性是否可写。</summary>
      <returns>如果此属性可写，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj">与此实例进行比较的对象，或为 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetAccessors">
      <summary>返回一个数组，其元素反射了由当前实例反射的属性的公共 <see langword="get" /> 和 <see langword="set" /> 访问器。</summary>
      <returns>如果找到访问器，此方法将返回一个 <see cref="T:System.Reflection.MethodInfo" /> 对象的数组，这些对象反射了由当前实例反射的属性的公共 <see langword="get" /> 和 <see langword="set" /> 访问器；如果没有找到，此方法将返回包含零 (0) 个元素的数组。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetAccessors(System.Boolean)">
      <summary>返回一个数组，其元素反射了当前实例反射的属性的公共及非公共（如果指定）<see langword="get" /> 和 <see langword="set" /> 取值函数。</summary>
      <param name="nonPublic">指示是否应在返回的数组中返回非公共方法。 如果要包括非公共方法，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>一个数组，其元素反射了当前实例反射的属性的 <see langword="get" /> 和 <see langword="set" /> 取值函数。 如果 <paramref name="nonPublic" /> 为 <see langword="true" />，则此数组包含公共及非公共 <see langword="get" /> 和 <see langword="set" /> 取值函数。 如果 <paramref name="nonPublic" /> 为 <see langword="false" />，则此数组仅包含公共 <see langword="get" /> 和 <see langword="set" /> 取值函数。 如果没有找到具有指定可见性的访问器，则此方法将返回包含零 (0) 个元素的数组。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetConstantValue">
      <summary>由编译器返回与属性关联的文本值。</summary>
      <returns>一个 <see cref="T:System.Object" />，它包含与此属性关联的文本值。 如果文本值是一个元素值为零的类类型，则返回值为 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException">非托管元数据中的常数表不包含当前属性的常数值。</exception>
      <exception cref="T:System.FormatException">值的类型不是公共语言规范 (CLS) 许可的类型。 请参见“ECMA Partition II”（ECMA 第二部分）规范中的“Metadata”（元数据）。</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetGetMethod">
      <summary>返回此属性的公共 <see langword="get" /> 访问器。</summary>
      <returns>
        <see langword="MethodInfo" /> 对象，表示此属性的公共 <see langword="get" /> 访问器；如果 <see langword="null" /> 访问器是非公共的或不存在，则为 <see langword="get" />。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetGetMethod(System.Boolean)">
      <summary>当在派生类中重写时，返回此属性的公共或非公共 <see langword="get" /> 访问器。</summary>
      <param name="nonPublic">指示是否应返回非公共 <see langword="get" /> 取值函数。 如果要返回非公共取值函数，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>如果 <see langword="MethodInfo" /> 为 <see langword="get" />，则返回表示该属性的 <paramref name="nonPublic" /> 访问器的 <see langword="true" /> 对象。 如果 <see langword="null" /> 为 <paramref name="nonPublic" /> 且 <see langword="false" /> 访问器是非公共的，或如果 <see langword="get" /> 为 <paramref name="nonPublic" /> 但不存在 <see langword="true" /> 访问器，则返回 <see langword="get" />。</returns>
      <exception cref="T:System.Security.SecurityException">所请求的方法为非公共且调用方没有 <see cref="T:System.Security.Permissions.ReflectionPermission" /> 来反射此非公共方法。</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetIndexParameters">
      <summary>当在派生类中重写时，返回此属性的所有索引参数的数组。</summary>
      <returns>
        <see langword="ParameterInfo" /> 类型的数组，它包含索引的参数。 如果未为该属性编制索引，则数组包含 0（零）个元素。</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.GetMethod">
      <summary>获取此属性的 <see langword="get" /> 访问器。</summary>
      <returns>此属性的 <see langword="get" /> 访问器。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetOptionalCustomModifiers">
      <summary>返回一个类型数组，其中的类型表示属性的可选自定义修饰符。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象的数组，这些对象标识当前属性的可选自定义修饰符（例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />）。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetRawConstantValue">
      <summary>由编译器返回与属性关联的文本值。</summary>
      <returns>一个 <see cref="T:System.Object" />，它包含与此属性关联的文本值。 如果文本值是一个元素值为零的类类型，则返回值为 <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException">非托管元数据中的常数表不包含当前属性的常数值。</exception>
      <exception cref="T:System.FormatException">值的类型不是公共语言规范 (CLS) 许可的类型。 请参阅“ECMA 分区 II 规范，元数据逻辑格式：其他结构、签名中使用的元素类型”。</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetRequiredCustomModifiers">
      <summary>返回一个类型数组，其中的类型表示属性所必需的自定义修饰符。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象的数组，这些对象标识当前属性所必需的自定义修饰符（例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsImplicitlyDereferenced" />）。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetSetMethod">
      <summary>返回此属性的公共 <see langword="set" /> 访问器。</summary>
      <returns>如果 <see langword="MethodInfo" /> 访问器是公共的，则为表示此属性的 <see langword="Set" /> 方法的 <see langword="set" /> 对象；如果 <see langword="null" /> 访问器是非公共的，则为 <see langword="set" />。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetSetMethod(System.Boolean)">
      <summary>当在派生类中重写时，返回此属性的 <see langword="set" /> 访问器。</summary>
      <param name="nonPublic">指示如果取值函数为非公共，是否应将其返回。 如果要返回非公共取值函数，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>此属性的 <see langword="Set" /> 方法或 <see langword="null" />，如下表所示。  
  值 
  条件 
  此属性的 <see langword="Set" /> 方法。  

  <see langword="set" /> 访问器是公共的。  

- 或 - 
 <paramref name="nonPublic" /> 为 <see langword="true" /> 且 <see langword="set" /> 访问器是非公共的。  

 <see langword="null" /><paramref name="nonPublic" /> 为 <see langword="true" />，但属性为只读。  

- 或 - 
 <paramref name="nonPublic" /> 为 <see langword="false" /> 且 <see langword="set" /> 访问器是非公共的。  

- 或 - 
不存在 <see langword="set" /> 访问器。</returns>
      <exception cref="T:System.Security.SecurityException">所请求的方法为非公共且调用方没有 <see cref="T:System.Security.Permissions.ReflectionPermission" /> 来反射此非公共方法。</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object)">
      <summary>返回指定对象的属性值。</summary>
      <param name="obj">将返回其属性值的对象。</param>
      <returns>指定对象的属性值。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])">
      <summary>用索引化属性的可选索引值返回指定对象的该属性值。</summary>
      <param name="obj">将返回其属性值的对象。</param>
      <param name="index">索引化属性的可选索引值。 索引化属性的索引从零开始。 对于非索引化属性，该值应为 <see langword="null" />。</param>
      <returns>指定对象的属性值。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 数组不包含所需的参数类型。  

或 - 
找不到该属性的 <see langword="get" /> 取值函数。</exception>
      <exception cref="T:System.Reflection.TargetException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获 <see cref="T:System.Exception" />。  


            

 该对象与目标类型不匹配，或者某属性是实例属性但 <paramref name="obj" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="index" /> 中的参数数量与索引属性采用的参数数量不匹配。</exception>
      <exception cref="T:System.MethodAccessException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.MemberAccessException" />。  


            

 试图非法访问类中的私有或受保护方法。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">检索属性值时出错。 例如，为一个索引属性指定的索引值超出范围。 <see cref="P:System.Exception.InnerException" /> 属性指示出错的原因。</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>当在派生类中重写时，将返回具有指定绑定、索引和区域性特定信息的指定对象的属性值。</summary>
      <param name="obj">将返回其属性值的对象。</param>
      <param name="invokeAttr">以下指定该调用特性的枚举成员的按位组合: <see langword="InvokeMethod" />、 <see langword="CreateInstance" />、 <see langword="Static" />、 <see langword="GetField" />、 <see langword="SetField" />、 <see langword="GetProperty" />和 <see langword="SetProperty" />。 必须指定合适的调用属性。 例如，为了调用静态成员，设置 <see langword="Static" /> 标志。</param>
      <param name="binder">一个对象，它启用绑定、对参数类型的强制、对成员的调用，以及通过反射对 <see cref="T:System.Reflection.MemberInfo" /> 对象的检索。 如果 <paramref name="binder" /> 为 <see langword="null" />，则使用默认联编程序。</param>
      <param name="index">索引化属性的可选索引值。 对于非索引化属性，该值应为 <see langword="null" />。</param>
      <param name="culture">要为其本地化资源的区域性。 请注意，如果没有为此区域性本地化该资源，则在搜索匹配项的过程中将继续调用 <see cref="P:System.Globalization.CultureInfo.Parent" /> 属性。 如果该值为 <see langword="null" />，则从 <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> 属性获取区域性的特定信息。</param>
      <returns>指定对象的属性值。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 数组不包含所需的参数类型。  
或 
找不到该属性的 <see langword="get" /> 取值函数。</exception>
      <exception cref="T:System.Reflection.TargetException">该对象与目标类型不匹配，或者某属性是实例属性但 <paramref name="obj" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="index" /> 中的参数数量与索引属性采用的参数数量不匹配。</exception>
      <exception cref="T:System.MethodAccessException">试图非法访问类中的私有或受保护方法。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">检索属性值时出错。 例如，为一个索引属性指定的索引值超出范围。 <see cref="P:System.Exception.InnerException" /> 属性指示出错的原因。</exception>
    </member>
    <member name="P:System.Reflection.PropertyInfo.IsSpecialName">
      <summary>获取一个值，该值指示此属性是否是特殊名称。</summary>
      <returns>如果此属性是特殊名称，则为<see langword="true" /> ；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.MemberType">
      <summary>获取一个 <see cref="T:System.Reflection.MemberTypes" /> 值，该值指示此成员是属性。</summary>
      <returns>指示此成员是属性的一个 <see cref="T:System.Reflection.MemberTypes" /> 值。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.op_Equality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
      <summary>指示两个 <see cref="T:System.Reflection.PropertyInfo" /> 对象是否相等。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <see langword="true" /> 等于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.op_Inequality(System.Reflection.PropertyInfo,System.Reflection.PropertyInfo)">
      <summary>指示两个 <see cref="T:System.Reflection.PropertyInfo" /> 对象是否不相等。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <see langword="true" /> 不等于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.PropertyType">
      <summary>获取此属性的类型。</summary>
      <returns>此属性的类型。</returns>
    </member>
    <member name="P:System.Reflection.PropertyInfo.SetMethod">
      <summary>获取此属性的 <see langword="set" /> 访问器。</summary>
      <returns>此属性的 <see langword="set" /> 读取器，如果属性是只读的，则为 <see langword="null" /> 。</returns>
    </member>
    <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)">
      <summary>设置指定对象的属性值。</summary>
      <param name="obj">将设置其属性值的对象。</param>
      <param name="value">新的属性值。</param>
      <exception cref="T:System.ArgumentException">找不到该属性的 <see langword="set" /> 取值函数。  
或 
 <paramref name="value" /> 无法转换为 <see cref="P:System.Reflection.PropertyInfo.PropertyType" />的类型。</exception>
      <exception cref="T:System.Reflection.TargetException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获 <see cref="T:System.Exception" />。  


            

 <paramref name="obj" /> 的类型与目标类型不匹配，或属性是实例属性，但 <paramref name="obj" /> 是 <see langword="null" />。</exception>
      <exception cref="T:System.MethodAccessException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.MemberAccessException" />。  


            

 试图非法访问类中的私有或受保护方法。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">设置属性值时出错。 <see cref="P:System.Exception.InnerException" /> 属性指示出错的原因。</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])">
      <summary>用索引化属性的可选索引值设置指定对象的该属性值。</summary>
      <param name="obj">将设置其属性值的对象。</param>
      <param name="value">新的属性值。</param>
      <param name="index">索引化属性的可选索引值。 对于非索引化属性，该值应为 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 数组不包含所需的参数类型。  
或 
找不到该属性的 <see langword="set" /> 取值函数。  
或 
 <paramref name="value" /> 无法转换为 <see cref="P:System.Reflection.PropertyInfo.PropertyType" />的类型。</exception>
      <exception cref="T:System.Reflection.TargetException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获 <see cref="T:System.Exception" />。  


            

 该对象与目标类型不匹配，或者某属性是实例属性但 <paramref name="obj" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="index" /> 中的参数数量与索引属性采用的参数数量不匹配。</exception>
      <exception cref="T:System.MethodAccessException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.MemberAccessException" />。  


            

 试图非法访问类中的私有或受保护方法。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">设置属性值时出错。 例如，为一个索引属性指定的索引值超出范围。 <see cref="P:System.Exception.InnerException" /> 属性指示出错的原因。</exception>
    </member>
    <member name="M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>当在派生类中重写时，为具有指定绑定、索引和区域性特定信息的指定对象设置属性值。</summary>
      <param name="obj">将设置其属性值的对象。</param>
      <param name="value">新的属性值。</param>
      <param name="invokeAttr">以下指定该调用特性的枚举成员的按位组合：<see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="Static" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" />。 必须指定合适的调用属性。 例如，为了调用静态成员，设置 <see langword="Static" /> 标志。</param>
      <param name="binder">一个对象，它启用绑定、对参数类型的强制、对成员的调用，以及通过反射对 <see cref="T:System.Reflection.MemberInfo" /> 对象的检索。 如果 <paramref name="binder" /> 为 <see langword="null" />，则使用默认联编程序。</param>
      <param name="index">索引化属性的可选索引值。 对于非索引化属性，该值应为 <see langword="null" />。</param>
      <param name="culture">要为其本地化资源的区域性。 请注意，如果没有为此区域性本地化该资源，则在搜索匹配项的过程中将继续调用 <see cref="P:System.Globalization.CultureInfo.Parent" /> 属性。 如果该值为 <see langword="null" />，则从 <see cref="P:System.Globalization.CultureInfo.CurrentUICulture" /> 属性获取区域性的特定信息。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 数组不包含所需的参数类型。  
或 
找不到该属性的 <see langword="set" /> 取值函数。  

或 - 
<paramref name="value" /> 无法转换为 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 的类型。</exception>
      <exception cref="T:System.Reflection.TargetException">该对象与目标类型不匹配，或者某属性是实例属性但 <paramref name="obj" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="index" /> 中的参数数量与索引属性采用的参数数量不匹配。</exception>
      <exception cref="T:System.MethodAccessException">试图非法访问类中的私有或受保护方法。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">设置属性值时出错。 例如，为一个索引属性指定的索引值超出范围。 <see cref="P:System.Exception.InnerException" /> 属性指示出错的原因。</exception>
    </member>
    <member name="T:System.Reflection.ReflectionContext">
      <summary>表示可提供反射对象的上下文。</summary>
    </member>
    <member name="M:System.Reflection.ReflectionContext.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.ReflectionContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Reflection.ReflectionContext.GetTypeForObject(System.Object)">
      <summary>获取本反射上下文中特定对象的类的表示形式。</summary>
      <param name="value">要表示的对象。</param>
      <returns>一个对象，表示指定对象的类型。</returns>
    </member>
    <member name="M:System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)">
      <summary>在此反射上下文中，获取由另一反射上下文对象表示的程序集表示形式。</summary>
      <param name="assembly">要在此上下文中进行表示的程序集的外部表现形式。</param>
      <returns>此反射上下文中该程序集的表现形式。</returns>
    </member>
    <member name="M:System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)">
      <summary>让此反射上下文中某种类型的表现形式由另一反射上下文中的对象表示。</summary>
      <param name="type">要在此上下文中表示的类型的外部表现形式。</param>
      <returns>此反射上下文中类型的表现形式。</returns>
    </member>
    <member name="T:System.Reflection.ReflectionTypeLoadException">
      <summary>当模块中有任何类无法加载时由 <see cref="M:System.Reflection.Module.GetTypes" /> 方法引发的异常。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[])">
      <summary>用给定类及其关联的异常初始化 <see cref="T:System.Reflection.ReflectionTypeLoadException" /> 类的新实例。</summary>
      <param name="classes">
        <see langword="Type" /> 类型的数组，其中包含在模块中定义并加载的类。 该数组可以包含空引用（在 Visual Basic 中为 <see langword="Nothing" />）值。</param>
      <param name="exceptions">
        <see langword="Exception" /> 类型的数组，其中包含由类加载程序引发的异常。 <paramref name="classes" /> 数组中的空引用（在 Visual Basic 中为 <see langword="Nothing" />）值与此 <paramref name="exceptions" /> 数组中的异常保持对应。</param>
    </member>
    <member name="M:System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[],System.String)">
      <summary>用给定类、与此类关联的异常以及异常说明初始化 <see cref="T:System.Reflection.ReflectionTypeLoadException" /> 类的新实例。</summary>
      <param name="classes">
        <see langword="Type" /> 类型的数组，其中包含在模块中定义并加载的类。 该数组可以包含空引用（在 Visual Basic 中为 <see langword="Nothing" />）值。</param>
      <param name="exceptions">
        <see langword="Exception" /> 类型的数组，其中包含由类加载程序引发的异常。 <paramref name="classes" /> 数组中的空引用（在 Visual Basic 中为 <see langword="Nothing" />）值与此 <paramref name="exceptions" /> 数组中的异常保持对应。</param>
      <param name="message">描述此异常的引发原因的 <see langword="String" />。</param>
    </member>
    <member name="M:System.Reflection.ReflectionTypeLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>提供序列化对象的 <see cref="T:System.Runtime.Serialization.ISerializable" /> 实现。</summary>
      <param name="info">序列化或反序列化对象所需的信息和数据。</param>
      <param name="context">序列化的上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <see langword="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions">
      <summary>获取由类加载程序引发的一系列异常。</summary>
      <returns>一组包含由类加载程序引发的异常 <see langword="Exception" /> 类型。 此实例的 <see cref="P:System.Reflection.ReflectionTypeLoadException.Types" /> 数组中的 null 值吻合此数组中的异常。</returns>
    </member>
    <member name="P:System.Reflection.ReflectionTypeLoadException.Message">
      <summary>获取此异常的错误消息。</summary>
      <returns>包含此异常的错误消息的字符串。</returns>
    </member>
    <member name="M:System.Reflection.ReflectionTypeLoadException.ToString">
      <summary>返回此异常的完全限定名和所有加载程序异常的消息。</summary>
      <returns>一个字符串，其中包含此异常的完全限定名和其加载程序异常的异常消息。</returns>
    </member>
    <member name="P:System.Reflection.ReflectionTypeLoadException.Types">
      <summary>获取模块中定义并加载的类的数组。</summary>
      <returns>
        <see langword="Type" /> 类型的数组，其中包含在模块中定义并加载的类。 该数组可以包含一些 <see langword="null" /> 值。</returns>
    </member>
    <member name="T:System.Reflection.ResourceAttributes">
      <summary>指定清单资源的属性。</summary>
    </member>
    <member name="F:System.Reflection.ResourceAttributes.Private">
      <summary>用于检索私有清单资源的掩码。</summary>
    </member>
    <member name="F:System.Reflection.ResourceAttributes.Public">
      <summary>用于检索公共清单资源的掩码。</summary>
    </member>
    <member name="T:System.Reflection.ResourceLocation">
      <summary>指定资源位置。</summary>
    </member>
    <member name="F:System.Reflection.ResourceLocation.ContainedInAnotherAssembly">
      <summary>指定资源包含在另一个程序集中。</summary>
    </member>
    <member name="F:System.Reflection.ResourceLocation.ContainedInManifestFile">
      <summary>指定资源包含在清单文件中。</summary>
    </member>
    <member name="F:System.Reflection.ResourceLocation.Embedded">
      <summary>指定嵌入（即非链接）资源。</summary>
    </member>
    <member name="T:System.Reflection.RuntimeReflectionExtensions">
      <summary>提供检索有关运行时类型的信息的方法。</summary>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)">
      <summary>获取指示指定委托表示的方法的对象。</summary>
      <param name="del">要检查的委托。</param>
      <returns>表示该方法的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="del" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.MemberAccessException">调用方不能访问由委托表示的方法（例如，在方法为私有方法的情况下）。</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)">
      <summary>检索表示在此方法最先声明的直接或间接类上的指定方法的对象。</summary>
      <param name="method">关于检索信息的方法。</param>
      <returns>表示在基类中指定的方法的初始声明的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvent(System.Type,System.String)">
      <summary>检索一个表示指定事件的对象。</summary>
      <param name="type">包含该事件的类型。</param>
      <param name="name">事件的名称。</param>
      <returns>表示指定事件的对象，若未找到该事件则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。
或
<paramref name="name" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvents(System.Type)">
      <summary>检索表示指定类型定义的所有事件的集合。</summary>
      <param name="type">包含该事件的类型。</param>
      <returns>指定类型的事件集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeField(System.Type,System.String)">
      <summary>检索表示指定字段的对象。</summary>
      <param name="type">包含字段的类型。</param>
      <param name="name">字段的名称。</param>
      <returns>表示指定字段的对象，若未找到该字段则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。
或
<paramref name="name" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeFields(System.Type)">
      <summary>检索表示指定类型定义的所有字段的集合。</summary>
      <param name="type">包含字段的类型。</param>
      <returns>指定类型的字段集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)">
      <summary>返回指定类型和指定接口的接口映射。</summary>
      <param name="typeInfo">要检索其映射的类型。</param>
      <param name="interfaceType">要检索其映射的接口。</param>
      <returns>表示指定接口和类型的接口映射的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeInfo" /> 为 <see langword="null" />。
或
<paramref name="interfaceType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeInfo" /> 未实现 <paramref name="interfaceType" />。
或
<paramref name="interfaceType" /> 不引用接口。
或
<paramref name="typeInfo" /> 或 <paramref name="interfaceType" /> 为开放式泛型类型。
或
<paramref name="interfaceType" /> 是一个泛型接口，而 <paramref name="typeInfo" /> 是一个数组类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="typeInfo" /> 表示泛型类型参数。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="typeInfo" /> 是尚未调用其 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法的 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 接口。

或 -

基类不支持调用的方法。 派生类必须提供一个实现。</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethod(System.Type,System.String,System.Type[])">
      <summary>检索表示指定方法的对象。</summary>
      <param name="type">包含方法的类型。</param>
      <param name="name">方法的名称。</param>
      <param name="parameters">包含方法的参数的数组。</param>
      <returns>表示指定方法的对象，若未找到该方法则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。

或 -

<paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到了多个具有指定名称的方法。</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethods(System.Type)">
      <summary>检索表示指定类型定义的所有方法的集合。</summary>
      <param name="type">包含方法的类型。</param>
      <returns>指定类型的方法集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperties(System.Type)">
      <summary>检索表示指定类型定义的所有属性的集合。</summary>
      <param name="type">包含属性的类型。</param>
      <returns>指定类型的属性集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperty(System.Type,System.String)">
      <summary>检索表示指定属性的对象。</summary>
      <param name="type">包含该属性的类型。</param>
      <param name="name">属性的名称。</param>
      <returns>表示指定属性的对象，若未找到该属性则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。

或 -

<paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是 <see langword="RuntimeType" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">已找到名称所请求名称一致的多个属性。</exception>
    </member>
    <member name="T:System.Reflection.StrongNameKeyPair">
      <summary>封装对公钥或私钥对的访问，该公钥或私钥对用于为强名称程序集创建签名。</summary>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.#ctor(System.Byte[])">
      <summary>初始化 <see cref="T:System.Reflection.StrongNameKeyPair" /> 类的新实例，同时从 <see langword="byte" /> 数组生成密钥对。</summary>
      <param name="keyPairArray">包含密钥对的 <see langword="byte" /> 类型数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyPairArray" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.#ctor(System.IO.FileStream)">
      <summary>初始化 <see cref="T:System.Reflection.StrongNameKeyPair" /> 类的新实例，同时从 <see langword="FileStream" /> 生成密钥对。</summary>
      <param name="keyPairFile">包含密钥对的 <see langword="FileStream" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyPairFile" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Reflection.StrongNameKeyPair" /> 类的新实例，从序列化数据生成密钥对。</summary>
      <param name="info">保留序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">一个包含有关源或目标的上下文信息的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。</param>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Reflection.StrongNameKeyPair" /> 类的新实例，同时从 <see langword="String" /> 生成密钥对。</summary>
      <param name="keyPairContainer">包含密钥对的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyPairContainer" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="P:System.Reflection.StrongNameKeyPair.PublicKey">
      <summary>获取密钥对的公钥或公钥标记的公共部分。</summary>
      <returns>一个 <see langword="byte" /> 类型的数组，其中包含密钥对的公钥或公钥标记。</returns>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>在整个对象图形已经反序列化时运行。</summary>
      <param name="sender">启动回调的对象。</param>
    </member>
    <member name="M:System.Reflection.StrongNameKeyPair.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用重新实例化当前 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象所需的所有数据设置 <see cref="T:System.Reflection.StrongNameKeyPair" /> 对象。</summary>
      <param name="info">用序列化信息填充的对象。</param>
      <param name="context">序列化的目标上下文。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Reflection.TargetException">
      <summary>表示尝试调用无效目标时引发的异常。</summary>
    </member>
    <member name="M:System.Reflection.TargetException.#ctor">
      <summary>使用空消息和异常的根本原因初始化 <see cref="T:System.Reflection.TargetException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Reflection.TargetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用指定的序列化和上下文信息初始化 <see cref="T:System.Reflection.TargetException" /> 类的新实例。</summary>
      <param name="info">用于串行化或反序列化对象的数据。</param>
      <param name="context">对象的源和目标。</param>
    </member>
    <member name="M:System.Reflection.TargetException.#ctor(System.String)">
      <summary>使用给定消息和根源异常初始化 <see cref="T:System.Reflection.TargetException" /> 类的新实例。</summary>
      <param name="message">描述异常发生原因的 <see langword="String" />。</param>
    </member>
    <member name="M:System.Reflection.TargetException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Reflection.TargetException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Reflection.TargetInvocationException">
      <summary>由通过反射调用的方法引发的异常。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Reflection.TargetInvocationException.#ctor(System.Exception)">
      <summary>用对作为此异常原因的内部异常的引用初始化 <see cref="T:System.Reflection.TargetInvocationException" /> 类的新实例。</summary>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="M:System.Reflection.TargetInvocationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Reflection.TargetInvocationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Reflection.TargetParameterCountException">
      <summary>当调用的参数数目与预期的数目不匹配时引发的异常。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor">
      <summary>用空消息字符串和异常的根源初始化 <see cref="T:System.Reflection.TargetParameterCountException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor(System.String)">
      <summary>用设置为给定消息的消息字符串和根源异常初始化 <see cref="T:System.Reflection.TargetParameterCountException" /> 类的新实例。</summary>
      <param name="message">描述此异常的引发原因的 <see langword="String" />。</param>
    </member>
    <member name="M:System.Reflection.TargetParameterCountException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Reflection.TargetParameterCountException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Reflection.TypeAttributes">
      <summary>指定类型属性。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Abstract">
      <summary>指定该类型为抽象类型。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AnsiClass">
      <summary>LPTSTR 被解释为 ANSI。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AutoClass">
      <summary>LPTSTR 自动被解释。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.AutoLayout">
      <summary>指定类字段由公共语言运行时自动布局。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.BeforeFieldInit">
      <summary>指定调用此类型的静态方法并不强制系统初始化此类型。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Class">
      <summary>指定该类型为一个类。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ClassSemanticsMask">
      <summary>指定类语义信息；当前类与上下文相关（否则是灵活的）。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.CustomFormatClass">
      <summary>LPSTR 由一些特定于实现的方式解释，这些方式有可能引发 <see cref="T:System.NotSupportedException" />。 不用于 Microsoft .NET Framework 的实现。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.CustomFormatMask">
      <summary>用于检索本机互操作的非标准编码信息。 未指定这些 2 位值的含义。 不用于 Microsoft .NET Framework 的实现。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ExplicitLayout">
      <summary>指定类字段按指定的偏移量布局。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.HasSecurity">
      <summary>类型具有与之关联的安全性。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Import">
      <summary>指定此类或接口从另一个模块导入。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Interface">
      <summary>指定该类型为一个接口。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.LayoutMask">
      <summary>指定类布局信息。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedAssembly">
      <summary>指定此类是用程序集可见性嵌套的，因此只能由其程序集内的方法访问。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamANDAssem">
      <summary>指定此类是用程序集和族可见性嵌套的，因此只能由其族和程序集的交集中的方法访问。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamily">
      <summary>指定此类是用族可见性嵌套的，因此只能由它自己的类型和任何派生类型中的方法访问。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedFamORAssem">
      <summary>指定此类是用族或程序集可见性嵌套的，因此只能由其族和程序集的并集中的方法访问。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedPrivate">
      <summary>指定此类是用私有可见性嵌套的。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NestedPublic">
      <summary>指定此类是用公共可见性嵌套的。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.NotPublic">
      <summary>指定此类不是公共的。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Public">
      <summary>指定此类是公共的。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.ReservedMask">
      <summary>保留供运行时使用的属性。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.RTSpecialName">
      <summary>运行时应检查名称编码。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Sealed">
      <summary>指定此类是具体的，无法扩展。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.SequentialLayout">
      <summary>指定类字段按字段发出到元数据的顺序依次布局。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.Serializable">
      <summary>指定此类可以序列化。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.SpecialName">
      <summary>指定此类特殊，具体由名称表示。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.StringFormatMask">
      <summary>用于检索本机互操作性的字符串信息。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.UnicodeClass">
      <summary>LPTSTR 被解释为 UNICODE。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.VisibilityMask">
      <summary>指定类型可见性信息。</summary>
    </member>
    <member name="F:System.Reflection.TypeAttributes.WindowsRuntime">
      <summary>指定 Windows 运行时 类型。</summary>
    </member>
    <member name="T:System.Reflection.TypeDelegator">
      <summary>包装 <see cref="T:System.Type" /> 对象并将所有方法委托给该 <see langword="Type" />。</summary>
    </member>
    <member name="M:System.Reflection.TypeDelegator.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.Reflection.TypeDelegator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Reflection.TypeDelegator.#ctor(System.Type)">
      <summary>在指定封装实例的情况下，初始化 <see cref="T:System.Reflection.TypeDelegator" /> 类的新实例。</summary>
      <param name="delegatingType">
        <see cref="T:System.Type" /> 类的实例，它封装对对象方法的调用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegatingType" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Assembly">
      <summary>获取已实现类型的程序集。</summary>
      <returns>表示已实现类型的程序集的 <see cref="T:System.Reflection.Assembly" /> 对象。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.AssemblyQualifiedName">
      <summary>获取程序集的完全限定名。</summary>
      <returns>包含程序集的完全限定名的 <see langword="String" />。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.BaseType">
      <summary>获取当前类型的基类型。</summary>
      <returns>类型的基类型。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.FullName">
      <summary>获取已实现类型的完全限定名。</summary>
      <returns>包含类型的完全限定名的 <see langword="String" />。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetAttributeFlagsImpl">
      <summary>获取分配给 <see langword="TypeDelegator" /> 的属性。</summary>
      <returns>表示实现属性标志的 <see langword="TypeAttributes" /> 对象。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>获取实现 <see langword="TypeDelegator" /> 的构造函数。</summary>
      <param name="bindingAttr">影响执行搜索的方式的位掩码。 该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志的组合。</param>
      <param name="binder">一个对象，它使用反射启用绑定、参数类型的强制、成员的调用和 <see langword="MemberInfo" /> 对象的检索。 如果 <paramref name="binder" /> 为 <see langword="null" />，则使用默认联编程序。</param>
      <param name="callConvention">调用约定。</param>
      <param name="types">
        <see langword="Type" /> 类型的数组，包含参数数量、顺序和类型的列表。 类型不能为 <see langword="null" />；使用相应的 <see langword="GetMethod" /> 方法或空数组搜索不带参数的方法。</param>
      <param name="modifiers">
        <see langword="ParameterModifier" /> 类型的数组，它与 <paramref name="types" /> 数组的长度相同，后者的元素表示与要获取的方法的参数关联的属性。</param>
      <returns>此方法的匹配指定判据的 <see langword="ConstructorInfo" /> 对象；如果无法找到匹配项，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)">
      <summary>返回 <see cref="T:System.Reflection.ConstructorInfo" /> 对象的数组，这些对象表示为当前 <see cref="T:System.Reflection.TypeDelegator" /> 包装的类型定义的构造函数。</summary>
      <param name="bindingAttr">影响执行搜索的方式的位掩码。 该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志的组合。</param>
      <returns>
        <see langword="ConstructorInfo" /> 类型的数组，包含为此类定义的指定的构造函数。 如果未定义任何构造函数，则返回一个空数组。 根据指定参数的值，只返回公共构造函数或同时返回公共和非公共构造函数。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)">
      <summary>返回为此类型定义的所有自定义属性，并指定是否搜索此类型的继承链。</summary>
      <param name="inherit">指定是否搜索此类型的继承链以查找这些属性。</param>
      <returns>一个包含为此类型定义的所有自定义属性的对象数组。</returns>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>返回由类型标识的自定义属性数组。</summary>
      <param name="attributeType">由类型标识的自定义属性数组。</param>
      <param name="inherit">指定是否搜索此类型的继承链以查找这些属性。</param>
      <returns>一个对象数组，包含此类型中定义的与 <paramref name="attributeType" /> 参数匹配的自定义属性，并指定是否搜索此类型的继承链；如果在此类型上未定义自定义属性，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.TypeLoadException">无法加载自定义属性类型。</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetElementType">
      <summary>返回由当前数组、指针或 ByRef 包含或引用的对象的 <see cref="T:System.Type" />。</summary>
      <returns>由当前数组、指针或 <see langword="ByRef" /> 包含或引用的对象的 <see cref="T:System.Type" />；如果当前 <see cref="T:System.Type" /> 不是数组、指针或 <see langword="null" />，则为 <see langword="ByRef" />。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>返回指定事件。</summary>
      <param name="name">要获取的事件的名称。</param>
      <param name="bindingAttr">影响执行搜索的方式的位掩码。 该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志的组合。</param>
      <returns>
        <see cref="T:System.Reflection.EventInfo" /> 对象，表示由此类型声明或继承的具有指定名称的事件。 如果未找到此类事件，则此方法返回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetEvents">
      <summary>返回 <see cref="T:System.Reflection.EventInfo" /> 对象的数组，这些对象表示由当前 <see langword="TypeDelegator" /> 声明或继承的所有公共事件。</summary>
      <returns>一个数组，其中包含当前类型声明或继承的所有事件。 如果没有事件，则返回空数组。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)">
      <summary>返回 <paramref name="bindingAttr" /> 中指定的由当前 <see langword="TypeDelegator" /> 声明或继承的事件。</summary>
      <param name="bindingAttr">影响执行搜索的方式的位掩码。 该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志的组合。</param>
      <returns>
        <see langword="EventInfo" /> 类型的数组，包含 <paramref name="bindingAttr" /> 中指定的事件。 如果没有事件，则返回空数组。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>返回 <see cref="T:System.Reflection.FieldInfo" /> 对象，该对象表示具有指定名称的字段。</summary>
      <param name="name">要查找的字段的名称。</param>
      <param name="bindingAttr">影响执行搜索的方式的位掩码。 该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志的组合。</param>
      <returns>
        <see langword="FieldInfo" /> 对象，表示由此 <see langword="TypeDelegator" /> 声明或继承的具有指定名称的字段。 如果未找到这样的字段，则返回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)">
      <summary>返回 <see cref="T:System.Reflection.FieldInfo" /> 对象的数组，这些对象表示为当前 <see cref="T:System.Reflection.TypeDelegator" /> 包装的类型定义的数据字段。</summary>
      <param name="bindingAttr">影响执行搜索的方式的位掩码。 该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志的组合。</param>
      <returns>
        <see langword="FieldInfo" /> 类型的数组，包含由当前 <see langword="TypeDelegator" /> 声明或继承的字段。 如果没有匹配的字段，则返回空数组。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)">
      <summary>返回由当前 <see cref="T:System.Reflection.TypeDelegator" /> 包装的类型实现的指定接口。</summary>
      <param name="name">由当前类实现的接口的完全限定名。</param>
      <param name="ignoreCase">如果忽略大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>
        <see langword="Type" /> 对象，表示由当前类（直接或间接）实现的具有匹配指定名称的完全限定名的接口。 如果未找到匹配名称的接口，则返回 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)">
      <summary>返回指定接口类型的接口映射。</summary>
      <param name="interfaceType">要检索其映射的接口的 <see cref="T:System.Type" />。</param>
      <returns>表示 <paramref name="interfaceType" /> 的接口映射的 <see cref="T:System.Reflection.InterfaceMapping" /> 对象。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetInterfaces">
      <summary>返回在当前类及其基类上实现的所有接口。</summary>
      <returns>
        <see langword="Type" /> 类型的数组，包含在当前类及其基类上实现的所有接口。 如果未定义任何内容，则返回一个空数组。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>返回由给定的 <paramref name="name" />、<paramref name="type" /> 和 <paramref name="bindingAttr" /> 指定的成员（属性、方法、构造函数、字段、事件和嵌套类型）。</summary>
      <param name="name">要获取的成员名称。</param>
      <param name="type">影响执行搜索的方式的位掩码。 该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志的组合。</param>
      <param name="bindingAttr">要获取的成员类型。</param>
      <returns>
        <see langword="MemberInfo" /> 类型的数组，包含当前类及其基类的符合指定条件的所有成员。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)">
      <summary>返回由 <paramref name="bindingAttr" /> 指定的成员。</summary>
      <param name="bindingAttr">影响执行搜索的方式的位掩码。 该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志的组合。</param>
      <returns>
        <see langword="MemberInfo" /> 类型的数组，包含当前类及其基类的符合 <paramref name="bindingAttr" /> 筛选器的所有成员。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>用指定的绑定约束和指定的调用约定，搜索参数与指定的参数类型及修饰符相匹配的指定方法。</summary>
      <param name="name">方法名。</param>
      <param name="bindingAttr">影响执行搜索的方式的位掩码。 该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志的组合。</param>
      <param name="binder">一个对象，它使用反射启用绑定、参数类型的强制、成员的调用和 <see langword="MemberInfo" /> 对象的检索。 如果 <paramref name="binder" /> 为 <see langword="null" />，则使用默认联编程序。</param>
      <param name="callConvention">调用约定。</param>
      <param name="types">
        <see langword="Type" /> 类型的数组，包含参数数量、顺序和类型的列表。 类型不能为 <see langword="null" />；使用相应的 <see langword="GetMethod" /> 方法或空数组搜索不带参数的方法。</param>
      <param name="modifiers">
        <see langword="ParameterModifier" /> 类型的数组，它与 <paramref name="types" /> 数组的长度相同，后者的元素表示与要获取的方法的参数关联的属性。</param>
      <returns>匹配指定条件的实现方法的 <see langword="MethodInfoInfo" /> 对象；如果无法找到匹配项，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)">
      <summary>返回 <see cref="T:System.Reflection.MethodInfo" /> 对象的数组，这些对象表示由当前 <see cref="T:System.Reflection.TypeDelegator" /> 包装的类型的指定方法。</summary>
      <param name="bindingAttr">影响执行搜索的方式的位掩码。 该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志的组合。</param>
      <returns>
        <see langword="MethodInfo" /> 对象的数组，表示在此 <see langword="TypeDelegator" /> 上定义的方法。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>返回由 <paramref name="name" /> 指定的嵌套类型，并且该嵌套类型是在 <paramref name="bindingAttr" /> 中指定的、由当前 <see cref="T:System.Reflection.TypeDelegator" /> 表示的类型来声明或继承。</summary>
      <param name="name">嵌套类型的名称。</param>
      <param name="bindingAttr">影响执行搜索的方式的位掩码。 该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志的组合。</param>
      <returns>表示嵌套类型的 <see langword="Type" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>返回嵌套类型，这些嵌套类型是在 <paramref name="bindingAttr" /> 中指定的，并且由当前 <see cref="T:System.Reflection.TypeDelegator" /> 包装的类型来声明或继承。</summary>
      <param name="bindingAttr">影响执行搜索的方式的位掩码。 该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志的组合。</param>
      <returns>包含嵌套类型的 <see langword="Type" /> 类型数组。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)">
      <summary>返回 <see cref="T:System.Reflection.PropertyInfo" /> 对象的数组，这些对象表示由当前 <see cref="T:System.Reflection.TypeDelegator" /> 包装的类型的属性。</summary>
      <param name="bindingAttr">影响执行搜索的方式的位掩码。 该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志的组合。</param>
      <returns>
        <see langword="PropertyInfo" /> 对象的数组，表示在此 <see langword="TypeDelegator" /> 上定义的属性。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>当在派生类中重写时，使用指定的绑定约束搜索其参数与指定的参数类型和修饰符匹配的指定属性。</summary>
      <param name="name">要获取的属性。</param>
      <param name="bindingAttr">影响执行搜索的方式的位掩码。 该值是零个或多个来自 <see cref="T:System.Reflection.BindingFlags" /> 的位标志的组合。</param>
      <param name="binder">一个对象，它启用绑定、对参数类型的强制、对成员的调用，以及通过反射对 <see langword="MemberInfo" /> 对象的检索。 如果 <paramref name="binder" /> 为 <see langword="null" />，则使用默认联编程序。 请参阅 <see cref="T:System.Reflection.Binder" />。</param>
      <param name="returnType">属性的返回类型。</param>
      <param name="types">参数类型的列表。 此列表表示参数的数目、顺序和类型。 类型不能为 null；使用相应的 <see langword="GetMethod" /> 方法或空数组搜索不带参数的方法。</param>
      <param name="modifiers">长度与 types 相同的数组，其元素表示与要获取的方法参数关联的属性。</param>
      <returns>此属性的匹配指定条件的 <see cref="T:System.Reflection.PropertyInfo" /> 对象；如果无法找到匹配，则为 null。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.GUID">
      <summary>获取已实现类型的 GUID（全局唯一标识符）。</summary>
      <returns>一个 GUID。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.HasElementTypeImpl">
      <summary>获取一个值，该值指示当前 <see cref="T:System.Type" /> 是否包含或引用其他类型，即当前 <see cref="T:System.Type" /> 是数组、指针还是 ByRef。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是数组、指针或 ByRef，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>调用指定的成员。 在指定的活页夹和调用属性的约束下，要调用的方法必须为可访问，并且提供与指定的自变量列表最具体的匹配。</summary>
      <param name="name">要调用的成员的名称。 这可能是一个构造函数、方法、属性或字段。 如果传递了空字符串 ("")，则调用默认成员。</param>
      <param name="invokeAttr">调用属性。 这必须是下列之一：<see cref="T:System.Reflection.BindingFlags" />、<see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="Static" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" />。 必须指定合适的调用属性。 如果要调用静态成员，则必须设置 <see langword="Static" /> 标志。</param>
      <param name="binder">一个对象，它启用绑定、对参数类型的强制、对成员的调用，以及通过反射对 <see langword="MemberInfo" /> 对象的检索。 如果 <paramref name="binder" /> 为 <see langword="null" />，则使用默认联编程序。 请参阅 <see cref="T:System.Reflection.Binder" />。</param>
      <param name="target">对其调用指定成员的对象。</param>
      <param name="args">
        <see langword="Object" /> 类型的数组，包含要调用的成员参数的数目、顺序和类型。 如果 <paramref name="args" /> 包含未初始化的 <see langword="Object" />，则它被视为空，用默认联编程序可将它扩展为 0、0.0 或一个字符串。</param>
      <param name="modifiers">
        <see langword="ParameterModifier" /> 类型的数组，其长度与 <paramref name="args" /> 相同，其元素表示与要调用的成员参数关联的属性。 参数在成员的签名中有与其关联的属性。 对于 ByRef，请使用 <see langword="ParameterModifier.ByRef" />；对于空，请使用 <see langword="ParameterModifier.None" />。 默认联编程序执行与这些内容的精确匹配。 <see langword="In" /> 和 <see langword="InOut" /> 这样的属性不用于绑定，可以使用 <see langword="ParameterInfo" /> 查看它们。</param>
      <param name="culture">用于控制类型强制的 <see langword="CultureInfo" /> 的实例。 类型强制在某些情况下是必要的，例如将表示 1000 的字符串转换为 <see langword="Double" /> 值，因为不同的区域性表示 1000 的方式不同。 如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前线程的 <see langword="CultureInfo" /> 的 <see langword="CultureInfo" />。</param>
      <param name="namedParameters">
        <see langword="String" /> 类型的数组，包含与 <paramref name="args" /> 数组匹配的参数名（从元素零开始）。 数组中不能有空缺。 如果 <paramref name="args" />. <see langword="Length" /> 大于 <paramref name="namedParameters" />。 <see langword="Length" />，则按顺序填充剩余的参数。</param>
      <returns>表示被调用成员的返回值的 <see langword="Object" />。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsArrayImpl">
      <summary>返回一个值，该值指示 <see cref="T:System.Type" /> 是否为数组。</summary>
      <returns>如果 <see langword="true" /> 是数组，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsAssignableFrom(System.Reflection.TypeInfo)">
      <summary>返回一个值，该值指示指定类型是否可分配给此类型。</summary>
      <param name="typeInfo">要检查的类型。</param>
      <returns>如果可以将指定类型分配给此类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsByRefImpl">
      <summary>返回指示 <see cref="T:System.Type" /> 是否由引用传递的值。</summary>
      <returns>如果 <see cref="T:System.Type" /> 按引用传递，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.IsByRefLike" />
    <member name="P:System.Reflection.TypeDelegator.IsCollectible">
      <summary>获取此对象的 <see cref="F:System.Reflection.TypeDelegator.typeImpl" /> 的 <see cref="P:System.Reflection.MemberInfo.IsCollectible" /> 值，该值指示此对象（为一个 <see cref="T:System.Reflection.MemberInfo" /> 实现）是否是可回收 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" /> 中保存的程序集的一部分。</summary>
      <returns>
        <see langword="true" />如果此对象是一个<see cref="T:System.Reflection.MemberInfo" />实现, 则它是保存在可回收程序集加载上下文中的程序集的一部分; <see langword="false" />否则为。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsCOMObjectImpl">
      <summary>返回一个值，该值指示 <see cref="T:System.Type" /> 是否为 COM 对象。</summary>
      <returns>如果 <see langword="true" /> 为 COM 对象，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.IsConstructedGenericType">
      <summary>获取指示此对象是否表示构造的泛型类型的值。</summary>
      <returns>如果此对象表示构造泛型类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)">
      <summary>指示是否定义由 <paramref name="attributeType" /> 标识的自定义属性。</summary>
      <param name="attributeType">指定是否搜索此类型的继承链以查找这些属性。</param>
      <param name="inherit">由类型标识的自定义属性数组。</param>
      <returns>如果定义由 <paramref name="attributeType" /> 标识的自定义属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">无法加载自定义特性类型。</exception>
    </member>
    <member name="P:System.Reflection.TypeDelegator.IsGenericMethodParameter" />
    <member name="P:System.Reflection.TypeDelegator.IsGenericTypeParameter" />
    <member name="M:System.Reflection.TypeDelegator.IsPointerImpl">
      <summary>返回一个值，该值指示 <see cref="T:System.Type" /> 是否为指针。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是指针，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.TypeDelegator.IsPrimitiveImpl">
      <summary>返回一个值，该值指示 <see cref="T:System.Type" /> 是否为基元类型之一。</summary>
      <returns>如果 <see langword="true" /> 为基元类型之一，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.IsSZArray" />
    <member name="P:System.Reflection.TypeDelegator.IsTypeDefinition" />
    <member name="M:System.Reflection.TypeDelegator.IsValueTypeImpl">
      <summary>返回一个值，该值指示此类型是否为值类型（即不是类或接口）。</summary>
      <returns>如果该类型是值类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.IsVariableBoundArray" />
    <member name="P:System.Reflection.TypeDelegator.MetadataToken">
      <summary>获取一个标识元数据中的此实体的值。</summary>
      <returns>一个值，与模块一起来唯一标识元数据中的此实体。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Module">
      <summary>获取包含已实现类型的模块。</summary>
      <returns>表示已实现类型的模块的 <see cref="T:System.Reflection.Module" /> 对象。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Name">
      <summary>获取移除了路径的已实现类型的名称。</summary>
      <returns>包含类型的非限定名的 <see langword="String" />。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.Namespace">
      <summary>获取已实现类型的命名空间。</summary>
      <returns>包含类型的命名空间的 <see langword="String" />。</returns>
    </member>
    <member name="P:System.Reflection.TypeDelegator.TypeHandle">
      <summary>获取已实现类型的内部元数据表示形式的句柄。</summary>
      <returns>一个 <see langword="RuntimeTypeHandle" /> 对象。</returns>
    </member>
    <member name="F:System.Reflection.TypeDelegator.typeImpl">
      <summary>一个指示类型信息的值。</summary>
    </member>
    <member name="P:System.Reflection.TypeDelegator.UnderlyingSystemType">
      <summary>获取表示已实现类型的基础 <see cref="T:System.Type" />。</summary>
      <returns>基础类型。</returns>
    </member>
    <member name="T:System.Reflection.TypeFilter">
      <summary>筛选 <see cref="T:System.Type" /> 对象数组中表示的类。</summary>
      <param name="m">对其应用筛选器的 <see langword="Type" /> 对象。</param>
      <param name="filterCriteria">用于筛选列表的任意对象。</param>
      <returns>若要在筛选后的列表中包括 <see cref="T:System.Type" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Reflection.TypeInfo">
      <summary>表示类类型、接口类型、数组类型、值类型、枚举类型、类型参数、泛型类型定义，以及开放或封闭构造的泛型类型的类型声明。</summary>
    </member>
    <member name="M:System.Reflection.TypeInfo.#ctor">
      <summary>初始化 <see cref="T:System.Reflection.TypeInfo" /> 实例。</summary>
    </member>
    <member name="M:System.Reflection.TypeInfo.AsType">
      <summary>返回 <see cref="T:System.Type" /> 对象形式的当前类型。</summary>
      <returns>当前类型。</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredConstructors">
      <summary>获取由当前类型声明的构造函数的集合。</summary>
      <returns>由当前类型声明的构造函数的集合。</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredEvents">
      <summary>获取由当前类型定义的事件的集合。</summary>
      <returns>由当前类型定义的事件的集合。</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredFields">
      <summary>获取由当前类型定义的字段的集合。</summary>
      <returns>由当前类型定义的字段的集合。</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredMembers">
      <summary>获取由当前类型定义的成员的集合。</summary>
      <returns>由当前类型定义的成员的集合。</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredMethods">
      <summary>获取由当前类型定义的方法的集合。</summary>
      <returns>由当前类型定义的方法的集合。</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredNestedTypes">
      <summary>获取由当前类型定义的嵌套类型的集合。</summary>
      <returns>由当前类型定义的嵌套类型的集合。</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.DeclaredProperties">
      <summary>获取由当前类型定义的属性的集合。</summary>
      <returns>由当前类型定义的属性的集合。</returns>
    </member>
    <member name="P:System.Reflection.TypeInfo.GenericTypeParameters">
      <summary>获取当前实例泛型类型参数的数组。</summary>
      <returns>包含当前实例的泛型类型参数的数组，如果当前实例没有任何泛型类型参数，则为 <see cref="P:System.Array.Length" /> 为零的数组。</returns>
    </member>
    <member name="M:System.Reflection.TypeInfo.GetDeclaredEvent(System.String)">
      <summary>返回表示由当前类型声明的指定公共事件的对象。</summary>
      <param name="name">事件的名称。</param>
      <returns>如果找到对象，则为表示指定的事件的对象；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.TypeInfo.GetDeclaredField(System.String)">
      <summary>返回表示由当前类型声明的指定公共字段的对象。</summary>
      <param name="name">字段的名称。</param>
      <returns>如果找到对象，则为表示指定的字段的对象；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.TypeInfo.GetDeclaredMethod(System.String)">
      <summary>返回表示由当前类型声明的指定公共方法的对象。</summary>
      <param name="name">方法的名称。</param>
      <returns>如果找到对象，则为表示指定的方法的对象；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.TypeInfo.GetDeclaredMethods(System.String)">
      <summary>返回包含所有与指定名称相匹配在当前类型声明的公共方法的集合。</summary>
      <param name="name">要搜索的方法名称。</param>
      <returns>包含匹配 <paramref name="name" />的方法的集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)">
      <summary>返回表示由当前类型声明的指定公共嵌套类型的对象。</summary>
      <param name="name">嵌套类型的名称。</param>
      <returns>如果找到对象，则为表示指定的嵌套类型的对象；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.TypeInfo.GetDeclaredProperty(System.String)">
      <summary>返回表示由当前类型声明的指定公共属性的对象。</summary>
      <param name="name">属性的名称。</param>
      <returns>如果找到对象，则为表示指定的属性的对象；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Reflection.TypeInfo.ImplementedInterfaces">
      <summary>获取当前类型实现的接口的集合。</summary>
      <returns>由当前类型实现的接口的集合。</returns>
    </member>
    <member name="M:System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)">
      <summary>返回一个值，该值指示指定类型是否可分配给当前的类型。</summary>
      <param name="typeInfo">要检查的类型。</param>
      <returns>如果可以将指定类型分配给此类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo">
      <summary>返回当前类型为 <see cref="T:System.Reflection.TypeInfo" /> 对象的表示形式。</summary>
      <returns>当前类型的引用。</returns>
    </member>
    <member name="T:System.ResolveEventArgs">
      <summary>为加载程序解析事件（如 <see cref="E:System.AppDomain.TypeResolve" />、<see cref="E:System.AppDomain.ResourceResolve" />、<see cref="E:System.AppDomain.ReflectionOnlyAssemblyResolve" /> 和 <see cref="E:System.AppDomain.AssemblyResolve" /> 事件）提供数据。</summary>
    </member>
    <member name="M:System.ResolveEventArgs.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ResolveEventArgs" /> 类的新实例，同时指定要解析的项的名称。</summary>
      <param name="name">要解析的项的名称。</param>
    </member>
    <member name="M:System.ResolveEventArgs.#ctor(System.String,System.Reflection.Assembly)">
      <summary>初始化 <see cref="T:System.ResolveEventArgs" /> 类的新实例，同时指定要解析的项的名称以及正在解析其依赖项的程序集。</summary>
      <param name="name">要解析的项的名称。</param>
      <param name="requestingAssembly">正在解析其依赖项的程序集。</param>
    </member>
    <member name="P:System.ResolveEventArgs.Name">
      <summary>获取要解析的项的名称。</summary>
      <returns>要解析的项的名称。</returns>
    </member>
    <member name="P:System.ResolveEventArgs.RequestingAssembly">
      <summary>获取正在解析其依赖项的程序集。</summary>
      <returns>请求了 <see cref="P:System.ResolveEventArgs.Name" /> 属性指定的项的程序集。</returns>
    </member>
    <member name="T:System.Runtime.AmbiguousImplementationException">
      <summary>当多个不兼容的接口方法替代另一个方法时引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.AmbiguousImplementationException.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.AmbiguousImplementationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.AmbiguousImplementationException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.Runtime.AmbiguousImplementationException" /> 类的新实例。</summary>
      <param name="message">本地化的错误消息字符串。</param>
    </member>
    <member name="M:System.Runtime.AmbiguousImplementationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.AmbiguousImplementationException" /> 类的新实例。</summary>
      <param name="message">描述错误的字符串。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="T:System.Runtime.AssemblyTargetedPatchBandAttribute">
      <summary>为 .NET Framework 的目标修补指定修补程序带区信息。</summary>
    </member>
    <member name="M:System.Runtime.AssemblyTargetedPatchBandAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Runtime.AssemblyTargetedPatchBandAttribute" /> 类的新实例。</summary>
      <param name="targetedPatchBand">修补程序带区。</param>
    </member>
    <member name="P:System.Runtime.AssemblyTargetedPatchBandAttribute.TargetedPatchBand">
      <summary>获取修补程序带区。</summary>
      <returns>修补程序带区信息。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute">
      <summary>指定访问属性化字段的属性的名称。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.#ctor(System.String)">
      <summary>使用用于访问属性化字段的属性的名称初始化 <see langword="AccessedThroughPropertyAttribute" /> 类的新实例。</summary>
      <param name="propertyName">用于访问属性化字段的属性的名称。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.AccessedThroughPropertyAttribute.PropertyName">
      <summary>获取用于访问属性化字段的属性的名称。</summary>
      <returns>用于访问属性化字段的属性的名称。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncIteratorStateMachineAttribute">
      <summary>指示方法是否为异步迭代器。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorStateMachineAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.AsyncIteratorStateMachineAttribute" /> 类的新实例。</summary>
      <param name="stateMachineType">用于实现状态机方法的基础状态机类型的类型对象。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute">
      <summary>指示在用作异步方法的返回类型时，应由语言编译器用于生成属性类型的异步方法生成器类型。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute" /> 类的新实例。</summary>
      <param name="builderType">关联生成器的类型。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncMethodBuilderAttribute.BuilderType">
      <summary>获取关联生成器的类型。</summary>
      <returns>关联生成器的类型。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncStateMachineAttribute">
      <summary>指示是否使用 Async 或 async 修饰符标记方法。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncStateMachineAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.AsyncStateMachineAttribute" /> 类的新实例。</summary>
      <param name="stateMachineType">用于实现状态机方法的基础状态机类型的类型对象。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder">
      <summary>表示返回 <see cref="T:System.Threading.Tasks.ValueTask" /> 的异步方法生成器。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>指定的 Awaiter 完成时，安排状态机以继续下一操作。</summary>
      <param name="awaiter">Awaiter。</param>
      <param name="stateMachine">状态机。</param>
      <typeparam name="TAwaiter">Awaiter 的类型。</typeparam>
      <typeparam name="TStateMachine">状态机的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>指定的 Awaiter 完成时，安排状态机以继续下一操作。</summary>
      <param name="awaiter">Awaiter。</param>
      <param name="stateMachine">状态机。</param>
      <typeparam name="TAwaiter">Awaiter 的类型。</typeparam>
      <typeparam name="TStateMachine">状态机的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.Create">
      <summary>创建 <see cref="T:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder" /> 结构的实例。</summary>
      <returns>已初始化的实例。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.SetException(System.Exception)">
      <summary>标记此任务为失败并将指定的异常绑定到此任务。</summary>
      <param name="exception">要绑定到该任务的异常。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.SetResult">
      <summary>将该任务标记为已成功完成。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>将生成器与指定的状态机相关联。</summary>
      <param name="stateMachine">要与生成器关联的状态机实例。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.Start``1(``0@)">
      <summary>开始运行具有关联状态机的生成器。</summary>
      <param name="stateMachine">由引用传递的状态机实例。</param>
      <typeparam name="TStateMachine">状态机的类型。</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder.Task">
      <summary>获取此生成器的任务。</summary>
      <returns>此生成器的任务。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1">
      <summary>表示返回 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 的异步方法生成器。</summary>
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
      <summary>指定的 Awaiter 完成时，安排状态机以继续下一操作。</summary>
      <param name="awaiter">Awaiter。</param>
      <param name="stateMachine">状态机。</param>
      <typeparam name="TAwaiter">Awaiter 的类型。</typeparam>
      <typeparam name="TStateMachine">状态机的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>指定的 Awaiter 完成时，安排状态机以继续下一操作。</summary>
      <param name="awaiter">Awaiter。</param>
      <param name="stateMachine">状态机。</param>
      <typeparam name="TAwaiter">Awaiter 的类型。</typeparam>
      <typeparam name="TStateMachine">状态机的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.Create">
      <summary>创建 <see cref="T:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1" /> 结构的实例。</summary>
      <returns>已初始化的实例。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetException(System.Exception)">
      <summary>标记此任务为失败并将指定的异常绑定到此任务。</summary>
      <param name="exception">要绑定到该任务的异常。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetResult(`0)">
      <summary>将该任务标记为已成功完成。</summary>
      <param name="result">用来完成任务的结果。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>将生成器与指定的状态机相关联。</summary>
      <param name="stateMachine">要与生成器关联的状态机实例。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.Start``1(``0@)">
      <summary>开始运行具有关联状态机的生成器。</summary>
      <param name="stateMachine">由引用传递的状态机实例。</param>
      <typeparam name="TStateMachine">状态机的类型。</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.Task">
      <summary>获取此生成器的任务。</summary>
      <returns>此生成器的任务。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
      <summary>允许捕获传递给方法的表达式。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute" /> 类的新实例。</summary>
      <param name="parameterName">目标参数的名称。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
      <summary>获取 CallerArgumentExpression 的目标参数名称</summary>
      <returns>CallerArgumentExpression 的目标参数的名称</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerFilePathAttribute">
      <summary>允许获取包含调用方的源文件的完整路径。 这是编译时的文件路径。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerFilePathAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallerFilePathAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerLineNumberAttribute">
      <summary>允许获取源文件中调用方法的行号。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerLineNumberAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallerLineNumberAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CallerMemberNameAttribute">
      <summary>允许您获取该方法的调用者方法或属性名称。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CallerMemberNameAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilationRelaxations">
      <summary>指定一些参数，这些参数控制由公共语言运行时的实时 (JIT) 编译器生成的代码的严格性。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.CompilationRelaxations.NoStringInterning">
      <summary>将程序集标记为不需要字符串暂留。 在应用程序域中，常用语言运行时会为每个唯一字符串字面量创建一个字符串对象，而不是创建多个副本。 此行为名为字符串暂存，它在内部要求构建会占用内存资源的辅助表。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute">
      <summary>控制由公共语言运行时的实时 (JIT) 编译器生成的代码的严谨性。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Int32)">
      <summary>使用指定的编译松弛法初始化 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute" /> 类的新实例。</summary>
      <param name="relaxations">编译松弛法。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.#ctor(System.Runtime.CompilerServices.CompilationRelaxations)">
      <summary>使用指定的 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> 值初始化 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxationsAttribute" /> 类的新实例。</summary>
      <param name="relaxations">
        <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> 值之一。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations">
      <summary>获取构造当前对象时指定的编译松弛法。</summary>
      <returns>构造当前对象时指定的编译松弛法。  
将 <see cref="T:System.Runtime.CompilerServices.CompilationRelaxations" /> 枚举与 <see cref="P:System.Runtime.CompilerServices.CompilationRelaxationsAttribute.CompilationRelaxations" /> 属性一起使用。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute">
      <summary>区分编译器生成元素和用户生成的元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilerGeneratedAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CompilerGeneratedAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.CompilerGlobalScopeAttribute">
      <summary>指示某类应被视为具有全局范围。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CompilerGlobalScopeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CompilerGlobalScopeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2">
      <summary>使编译器可以将对象字段动态附加到托管对象。</summary>
      <typeparam name="TKey">字段所附加到的引用类型。</typeparam>
      <typeparam name="TValue">字段的类型。 此类型必须是引用类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)">
      <summary>将键添加到表中。</summary>
      <param name="key">要添加的键。 <paramref name="key" /> 表示该属性附加到的对象。</param>
      <param name="value">该键的属性值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 已存在。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.AddOrUpdate(`0,`1)">
      <summary>如果键不存在，则添加键和值，或如果其不存在，则更新现有键的值。</summary>
      <param name="key">要添加或更新的键。 可能不为 <see langword="null" />。</param>
      <param name="value">要与 <paramref name="key" /> 关联的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Clear">
      <summary>清除所有键/值对。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback">
      <summary>表示一种方法，用于创建作为键/值对的一部分添加到 <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2" /> 对象的非默认值。</summary>
      <param name="key">属于要创建的值的键。</param>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
      <returns>一个引用类型的实例，该类型表示要附加到指定键的值。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)">
      <summary>以原子方式在表中搜索指定键，并返回对应的值。 如果表中不存在该键，此方法将调用表示表值的类的无参数构造函数，以创建绑定到指定键的值。</summary>
      <param name="key">要搜索的键。 <paramref name="key" /> 表示该属性附加到的对象。</param>
      <returns>如果表中已存在 <paramref name="key" />，则为对应于 <paramref name="key" /> 的值；否则为 <paramref name="TValue" /> 范型类型参数定义的类的无参数构造函数创建的新值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.MissingMethodException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.MissingMemberException" />。  


            

 表示表中值的类未定义无参数构造函数。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)">
      <summary>以原子方式在表中搜索指定键，并返回对应的值。 如果表中不存在该键，此方法将调用一个回调方法来创建绑定到指定键的值。</summary>
      <param name="key">要搜索的键。 <paramref name="key" /> 表示该属性附加到的对象。</param>
      <param name="createValueCallback">可以为给定 <paramref name="key" /> 创建值的方法的委托。 它只有一个 <c>TKey</c> 类型的参数，并返回一个 <c>TValue</c> 类型的值。</param>
      <returns>如果表中已存在 <paramref name="key" />，则为附加到 <paramref name="key" /> 的值；否则为 <paramref name="createValueCallback" /> 委托返回的新值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="createValueCallback" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)">
      <summary>从表中移除某个键及其值。</summary>
      <param name="key">要移除的键。</param>
      <returns>如果找到并移除该键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#IEnumerable#GetEnumerator" />
    <member name="M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)">
      <summary>获取指定键的值。</summary>
      <param name="key">一个键，表示具有所附加的属性的对象。</param>
      <param name="value">此方法返回时，将包含所附加的属性值。 如果找不到 <paramref name="key" />，则 <paramref name="value" /> 包含默认值。</param>
      <returns>如果找到 <see langword="true" />，则为 <paramref name="key" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable">
      <summary>提供用于启用任务上的已配置等待的可等待对象。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter">
      <summary>提供可等待 (<see cref="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable" />) 对象的 Awaiter。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult">
      <summary>结束对已完成任务的等待。</summary>
      <exception cref="T:System.NullReferenceException">awaiter 未正确地初始化。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">已取消任务。</exception>
      <exception cref="T:System.Exception">该任务在出错状态下完成。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.IsCompleted">
      <summary>获取指定长期任务是否复杂的值。</summary>
      <returns>如果已成功完成等待任务，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.NullReferenceException">awaiter 未正确地初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.OnCompleted(System.Action)">
      <summary>为与此 awaiter 关联的任务计划延续操作。</summary>
      <param name="continuation">在等待操作完成时要调用的操作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.NullReferenceException">awaiter 未正确地初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>为与此 awaiter 关联的任务计划延续操作。</summary>
      <param name="continuation">在等待操作完成时要调用的操作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.NullReferenceException">awaiter 未正确地初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable.GetAwaiter">
      <summary>返回此可等待对象的 Awaiter。</summary>
      <returns>Awaiter。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1">
      <summary>提供用于启用任务上的已配置等待的可等待对象。</summary>
      <typeparam name="TResult">此 <see cref="T:System.Threading.Tasks.Task`1" /> 生成的结果的类型。</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter">
      <summary>提供可等待对象 (<see cref="T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1" />) 的 Awaiter。</summary>
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult">
      <summary>结束对已完成任务的等待。</summary>
      <returns>已完成任务的结果。</returns>
      <exception cref="T:System.NullReferenceException">awaiter 未正确地初始化。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">已取消任务。</exception>
      <exception cref="T:System.Exception">该任务在出错状态下完成。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.IsCompleted">
      <summary>获取一个值，该值指定等待中的任务是否已完成。</summary>
      <returns>如果已成功完成等待任务，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.NullReferenceException">awaiter 未正确地初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.OnCompleted(System.Action)">
      <summary>为与此 awaiter 关联的任务计划延续操作。</summary>
      <param name="continuation">在等待操作完成时要调用的操作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.NullReferenceException">awaiter 未正确地初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>为与此 awaiter 关联的任务计划延续操作。</summary>
      <param name="continuation">在等待操作完成时要调用的操作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.NullReferenceException">awaiter 未正确地初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.GetAwaiter">
      <summary>返回此可等待对象的 Awaiter。</summary>
      <returns>Awaiter。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable">
      <summary>提供用于启用 <see cref="T:System.Threading.Tasks.ValueTask" /> 上的已配置等待的可等待类型。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter">
      <summary>为 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable" /> 提供一个 awaiter。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.GetResult">
      <summary>获取 ValueTask 的结果。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.IsCompleted">
      <summary>获得指示 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable" /> 是否已完成的值。</summary>
      <returns>
        <see langword="true" />如果已完成, <see langword="false" />则为; 否则为。 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable" /></returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.OnCompleted(System.Action)">
      <summary>为 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable" /> 计划延续操作。</summary>
      <param name="continuation">
        <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable" /> 的延续操作。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.ConfiguredValueTaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>为 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable" /> 计划延续操作。</summary>
      <param name="continuation">
        <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable" /> 的延续操作。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable.GetAwaiter">
      <summary>返回此 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable" /> 实例的 awaiter。</summary>
      <returns>返回此实例的 awaiter。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1">
      <summary>提供用于启用 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 上的已配置等待的可等待类型。</summary>
      <typeparam name="TResult">生成的结果的类型。</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter">
      <summary>为 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" /> 提供一个 awaiter。</summary>
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.GetResult">
      <summary>获取 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 的结果。</summary>
      <returns>
        <see cref="T:System.Threading.Tasks.ValueTask`1" /> 的结果。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.IsCompleted">
      <summary>获得指示 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" /> 是否已完成的值。</summary>
      <returns>
        <see langword="true" />如果已完成, <see langword="false" />则为; 否则为。 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" /></returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.OnCompleted(System.Action)">
      <summary>为 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" /> 计划延续操作。</summary>
      <param name="continuation">
        <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" /> 的延续操作。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.ConfiguredValueTaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>为 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" /> 计划延续操作。</summary>
      <param name="continuation">
        <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" /> 的延续操作。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1.GetAwaiter">
      <summary>返回此 <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" /> 实例的 awaiter。</summary>
      <returns>返回此实例的 awaiter。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.CustomConstantAttribute">
      <summary>定义一个编译器可以为字段或方法参数永久保存的常数值。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.CustomConstantAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.CustomConstantAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.CustomConstantAttribute.Value">
      <summary>获取该属性存储的常数值。</summary>
      <returns>该属性存储的常数值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DateTimeConstantAttribute">
      <summary>为字段或参数永久保存一个 8 字节的 <see cref="T:System.DateTime" /> 常数。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DateTimeConstantAttribute.#ctor(System.Int64)">
      <summary>用表示此实例日期和时间的以 100 毫微秒为单位的数字初始化 <see langword="DateTimeConstantAttribute" /> 类的新实例。</summary>
      <param name="ticks">表示此实例日期和时间的以 100 毫微秒为单位的数字。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DateTimeConstantAttribute.Value">
      <summary>获取表示此实例日期和时间的以 100 毫微秒为单位的数字。</summary>
      <returns>表示此实例日期和时间的以 100 毫微秒为单位的数字。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DecimalConstantAttribute">
      <summary>在元数据中存储 <see cref="T:System.Decimal" /> 常数的值。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.Int32,System.Int32,System.Int32)">
      <summary>使用指定的有符号整数值初始化 <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> 类的新实例。</summary>
      <param name="scale">刻度因子（10 的幂），指示小数点右边的数字位数。 有效值为从 0 到 28（含）。</param>
      <param name="sign">值 0 指示正值，值 1 指示负值。</param>
      <param name="hi">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的高 32 位。</param>
      <param name="mid">96 位<see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的中间 32 位。</param>
      <param name="low">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的低 32 位。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.DecimalConstantAttribute.#ctor(System.Byte,System.Byte,System.UInt32,System.UInt32,System.UInt32)">
      <summary>使用指定的无符号整数值初始化 <see cref="T:System.Runtime.CompilerServices.DecimalConstantAttribute" /> 类的新实例。</summary>
      <param name="scale">刻度因子（10 的幂），指示小数点右边的数字位数。 有效值为从 0 到 28（含）。</param>
      <param name="sign">值 0 指示正值，值 1 指示负值。</param>
      <param name="hi">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的高 32 位。</param>
      <param name="mid">96 位<see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的中间 32 位。</param>
      <param name="low">96 位 <see cref="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value" /> 的低 32 位。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scale" /> &gt; 28。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.DecimalConstantAttribute.Value">
      <summary>获取存储在此特性中的十进制常数。</summary>
      <returns>存储在此属性中的十进制常数。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DefaultDependencyAttribute">
      <summary>向公共语言运行时 (CLR) 提供提示，指示加载依赖项的可能性。 此类用在依赖程序集中，用于指示当父级未指定 <see cref="T:System.Runtime.CompilerServices.DependencyAttribute" /> 特性时应使用的提示。  此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DefaultDependencyAttribute.#ctor(System.Runtime.CompilerServices.LoadHint)">
      <summary>用指定的 <see cref="T:System.Runtime.CompilerServices.DefaultDependencyAttribute" /> 绑定初始化 <see cref="T:System.Runtime.CompilerServices.LoadHint" /> 类的新实例。</summary>
      <param name="loadHintArgument">
        <see cref="T:System.Runtime.CompilerServices.LoadHint" /> 值之一，它指示默认绑定首选项。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DefaultDependencyAttribute.LoadHint">
      <summary>获取 <see cref="T:System.Runtime.CompilerServices.LoadHint" /> 值，该值指示程序集何时加载依赖项。</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.LoadHint" /> 值之一。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DependencyAttribute">
      <summary>指示引用程序集将在何时加载依赖项。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DependencyAttribute.#ctor(System.String,System.Runtime.CompilerServices.LoadHint)">
      <summary>使用指定的 <see cref="T:System.Runtime.CompilerServices.LoadHint" /> 值初始化 <see cref="T:System.Runtime.CompilerServices.DependencyAttribute" /> 类的新实例。</summary>
      <param name="dependentAssemblyArgument">要绑定到的依赖程序集。</param>
      <param name="loadHintArgument">
        <see cref="T:System.Runtime.CompilerServices.LoadHint" /> 值之一。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.DependencyAttribute.DependentAssembly">
      <summary>获取依赖程序集的值。</summary>
      <returns>依赖程序集的名称。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.DependencyAttribute.LoadHint">
      <summary>获取 <see cref="T:System.Runtime.CompilerServices.LoadHint" /> 值，该值指示程序集将在何时加载依赖项。</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.LoadHint" /> 值之一。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.DisablePrivateReflectionAttribute">
      <summary>指示程序集的类型中所含的任何私有成员均不可用于映射。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DisablePrivateReflectionAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.DisablePrivateReflectionAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.DiscardableAttribute">
      <summary>将类型定义标记为可放弃。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.DiscardableAttribute.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Runtime.CompilerServices.DiscardableAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.EnumeratorCancellationAttribute">
      <summary>允许采用异步枚举方法的用户标记应从 <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> 接收取消令牌值的参数。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.EnumeratorCancellationAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.EnumeratorCancellationAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
      <summary>指示某个方法为扩展方法，或某个类或程序集包含扩展方法。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ExtensionAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.ExtensionAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute">
      <summary>在静态值类型字段的整个生存期内固定其地址。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.FixedAddressValueTypeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.FixedBufferAttribute">
      <summary>指示应将字段视为包含固定数量的指定基元类型元素。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FixedBufferAttribute.#ctor(System.Type,System.Int32)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.FixedBufferAttribute" /> 类的新实例。</summary>
      <param name="elementType">缓冲区中包含的元素的类型。</param>
      <param name="length">缓冲区中元素的数目。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.ElementType">
      <summary>获取固定缓冲区中包含的元素的类型。</summary>
      <returns>元素的类型。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.FixedBufferAttribute.Length">
      <summary>获取固定缓冲区中元素的数目。</summary>
      <returns>固定缓冲区中元素的数目。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.FormattableStringFactory">
      <summary>提供一个静态方法，用于从复合格式字符串及其参数创建 <see cref="T:System.FormattableString" /> 对象。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.FormattableStringFactory.Create(System.String,System.Object[])">
      <summary>从复合格式字符串及其参数创建 <see cref="T:System.FormattableString" /> 实例。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="arguments">要在结果字符串中插入其字符串表示形式的自变量。</param>
      <returns>表示复合格式字符串及其自变量的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。  

或 - 
<paramref name="arguments" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.IAsyncStateMachine">
      <summary>表示为异步方法生成的状态机。 此类别仅供编译器使用。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IAsyncStateMachine.MoveNext">
      <summary>移动此状态机至其下一个状态。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IAsyncStateMachine.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>使用堆分配的副本配置该状态机。</summary>
      <param name="stateMachine">堆分配的副本。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.ICriticalNotifyCompletion">
      <summary>表示等候程序，其计划等待操作完成时的后续部分。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ICriticalNotifyCompletion.UnsafeOnCompleted(System.Action)">
      <summary>计划实例完成时调用的延续操作。</summary>
      <param name="continuation">要在操作完成时调用的操作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 参数是 null（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.IndexerNameAttribute">
      <summary>指示使索引器在不直接支持索引器的编程语言中已知的名称。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.IndexerNameAttribute" /> 类的新实例。</summary>
      <param name="indexerName">显示给其他语言的索引器名称。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.INotifyCompletion">
      <summary>表示操作，其计划等待操作完成时的后续部分。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.INotifyCompletion.OnCompleted(System.Action)">
      <summary>计划实例完成时调用的延续操作。</summary>
      <param name="continuation">要在操作完成时调用的操作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 参数是 null（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute">
      <summary>指定通常仅在当前程序集中可见的类型对指定程序集可见。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)">
      <summary>用指定的友元程序集的名称初始化 <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> 类的新实例。</summary>
      <param name="assemblyName">友元程序集的名称。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible">
      <summary>不实现此属性。</summary>
      <returns>此属性不返回值。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName">
      <summary>获取友元程序集的名称，采用 <see langword="internal" /> 关键字标记的所有类型和类型成员对该程序集均为可见。</summary>
      <returns>一个表示友元程序集名称的字符串。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsByRefLikeAttribute">
      <summary>指示结构类似 byref。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IsByRefLikeAttribute.#ctor">
      <summary>创建 <see cref="T:System.Runtime.CompilerServices.IsByRefLikeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsConst">
      <summary>指示修饰的类型有一个 <see langword="const" /> 修饰符。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsReadOnlyAttribute">
      <summary>将程序元素标记为只读。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IsReadOnlyAttribute.#ctor">
      <summary>创建 <see cref="T:System.Runtime.CompilerServices.IsReadOnlyAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IStrongBox">
      <summary>定义一个用于访问某个对象引用的值的属性。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IStrongBox.Value">
      <summary>获取或设置某个对象引用的值。</summary>
      <returns>该对象引用的值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IsVolatile">
      <summary>将字段标记为易失。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.IteratorStateMachineAttribute">
      <summary>指示是否使用 <see langword="Iterator" /> 修饰符标记 Visual Basic 中的方法。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IteratorStateMachineAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.IteratorStateMachineAttribute" /> 类的新实例。</summary>
      <param name="stateMachineType">用于实现状态机方法的基础状态机类型的类型对象。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.ITuple">
      <summary>定义通用元组实现，它允许在不知道基础元组类型的情况下访问元组实例。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.ITuple.Item(System.Int32)">
      <summary>返回指定 <see langword="Tuple" /> 元素的值。</summary>
      <param name="index">指定 <see langword="Tuple" /> 元素的索引。 <paramref name="index" /> 的范围可以介于 0（表示 <see langword="Tuple" /> 的 <see langword="Item1" />）到 <see langword="Tuple" /> 中的元素数减去一之间。</param>
      <returns>指定 <see langword="Tuple" /> 元素的值。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.ITuple.Length">
      <summary>获取此 <see langword="Tuple" /> 实例中的元素数。</summary>
      <returns>此 <see langword="Tuple" /> 实例中的元素数。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.LoadHint">
      <summary>指定依赖程序集的首选默认绑定。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.LoadHint.Always">
      <summary>总是加载依赖项。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.LoadHint.Default">
      <summary>未指定首选项。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.LoadHint.Sometimes">
      <summary>有时加载依赖项。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodCodeType">
      <summary>定义如何实现方法。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.IL">
      <summary>指定方法实现位于 Microsoft 中间语言 (MSIL) 中。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.Native">
      <summary>指定此方法是用本机代码实现的。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.OPTIL">
      <summary>指定此方法实现是用优化中间语言 (OPTIL) 编写的。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodCodeType.Runtime">
      <summary>指定方法实现由运行时提供。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplAttribute">
      <summary>指定如何实现方法的详细信息。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.MethodImplAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Int16)">
      <summary>使用指定的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值初始化 <see cref="T:System.Runtime.CompilerServices.MethodImplAttribute" /> 类的新实例。</summary>
      <param name="value">一个位屏蔽，表示所需的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值，该值指定属性化方法的属性。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Runtime.CompilerServices.MethodImplOptions)">
      <summary>使用指定的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值初始化 <see cref="T:System.Runtime.CompilerServices.MethodImplAttribute" /> 类的新实例。</summary>
      <param name="methodImplOptions">一个 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值，该值指定属性化方法的属性。</param>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplAttribute.MethodCodeType">
      <summary>一个 <see cref="T:System.Runtime.CompilerServices.MethodCodeType" /> 值，指示为此方法提供了哪种类型的实现。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.MethodImplAttribute.Value">
      <summary>获取描述属性化方法的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值。</summary>
      <returns>描述特性化方法的 <see cref="T:System.Runtime.CompilerServices.MethodImplOptions" /> 值。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.MethodImplOptions">
      <summary>定义如何实现方法的详细信息。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining">
      <summary>如可能应将该方法进行内联。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.AggressiveOptimization">
      <summary>此方法包含一个热路径，且应进行优化。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.ForwardRef">
      <summary>已声明该方法，但在其他位置提供实现。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.InternalCall">
      <summary>该调用为内部调用，也就是说它调用了在公共语言运行时中实现的方法。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoInlining">
      <summary>该方法不能为内联方法。 内联是一种优化方式，通过该方式将方法调用替换为方法体。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoOptimization">
      <summary>调试可能的代码生成问题时，该方法不由实时 (JIT) 编译器或本机代码生成优化（请参阅 Ngen.exe）。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.PreserveSig">
      <summary>完全按照声明导出方法签名。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Synchronized">
      <summary>该方法一次性只能在一个线程上执行。 静态方法在类型上锁定，而实例方法在实例上锁定。 只有一个线程可在任意实例函数中执行，且只有一个线程可在任意类的静态函数中执行。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Unmanaged">
      <summary>此方法在非托管的代码中实现。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute">
      <summary>将程序集标识为包含元数据但不包含可执行代码的引用程序集。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor(System.String)">
      <summary>使用指定的说明初始化 <see cref="T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute" /> 类的新实例。</summary>
      <param name="description">引用程序集的说明。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.Description">
      <summary>获取引用程序集的说明。</summary>
      <returns>引用程序集的说明。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute">
      <summary>指定是否使用 <see cref="T:System.Exception" /> 对象包装不是从 <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> 类派生的异常。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows">
      <summary>获取或设置一个值，该值指示是否使用 <see cref="T:System.Exception" /> 对象包装不是从 <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> 类派生的异常。</summary>
      <returns>如果不是从 <see cref="T:System.Exception" /> 类派生的异常应包装在 <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> 对象中，则返回 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeFeature">
      <summary>一个类，其静态 <see cref="M:System.Runtime.CompilerServices.RuntimeFeature.IsSupported(System.String)" /> 方法检查公共语言运行时是否支持指定功能。</summary>
    </member>
    <member name="F:System.Runtime.CompilerServices.RuntimeFeature.DefaultImplementationsOfInterfaces">
      <summary>表示此版本的运行时支持默认接口方法实现。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeFeature.IsDynamicCodeCompiled">
      <summary>获取一个值，它指示运行时是否编译动态代码。</summary>
      <returns>
        <see langword="true" />如果运行时编译动态代码, 则为;<see langword="false" />如果不编译动态代码或不知道此属性, 则为。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeFeature.IsDynamicCodeSupported">
      <summary>获取一个值，该值确定运行时是否支持动态代码。</summary>
      <returns>
        <see langword="true" />如果运行时支持动态代码, 则为; 否则为。<see langword="false" />如果不支持动态代码或不知道此属性, 则为。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeFeature.IsSupported(System.String)">
      <summary>确定公共语言运行时是否支持指定功能。</summary>
      <param name="feature">功能的名称。</param>
      <returns>如果支持 <paramref name="feature" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.RuntimeFeature.PortablePdb">
      <summary>获取可移植 PDB 功能的名称。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers">
      <summary>提供一组为编译器提供支持的静态方法和属性。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers.CleanupCode">
      <summary>表示在发生异常时要运行的方法。</summary>
      <param name="userData">要传递给委托的数据。</param>
      <param name="exceptionThrown">
        <see langword="true" /> 表示引发了异常；如果未引发异常，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.EnsureSufficientExecutionStack">
      <summary>确保剩余的堆栈控件足够大，可以执行一般的 .NET Framework 函数。</summary>
      <exception cref="T:System.InsufficientExecutionStackException">可用堆栈空间不足，无法执行一般的 .NET Framework 函数。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.Equals(System.Object,System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 实例是否可视为相等的实例。</summary>
      <param name="o1">要比较的第一个对象。</param>
      <param name="o2">要比较的第二个对象。</param>
      <returns>如果 <paramref name="o1" /> 参数与 <paramref name="o2" /> 参数是同一个实例，或二者均为 <see langword="null" />，或<c>o1.Equals(o2)</c> 返回 <see langword="true" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.ExecuteCodeWithGuaranteedCleanup(System.Runtime.CompilerServices.RuntimeHelpers.TryCode,System.Runtime.CompilerServices.RuntimeHelpers.CleanupCode,System.Object)">
      <summary>使用一个 <see cref="T:System.Delegate" /> 在异常情况下执行附加代码时，使用另一个 <see cref="T:System.Delegate" /> 执行代码。</summary>
      <param name="code">要尝试的代码的委托。</param>
      <param name="backoutCode">异常发生时要运行的代码的委托。</param>
      <param name="userData">要传递给 <paramref name="code" /> 和 <paramref name="backoutCode" /> 的数据。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)">
      <summary>用作特定对象的哈希函数，适合在使用哈希代码的算法和数据结构（如哈希表）中使用。</summary>
      <param name="o">要检索其哈希代码的对象。</param>
      <returns>
        <paramref name="o" /> 参数标识的对象的哈希代码。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetObjectValue(System.Object)">
      <summary>将值类型装箱。</summary>
      <param name="obj">要装箱的值类型。</param>
      <returns>如果 <paramref name="obj" /> 是一个值类，则返回其装箱的副本；否则返回 <paramref name="obj" /> 本身。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetSubArray``1(``0[],System.Range)">
      <summary>使用指定范围对指定数组进行切片。</summary>
      <param name="array">要切片的数组。</param>
      <param name="range">用于确定要包含在切片中的 <paramref name="array" /> 部分的对象。</param>
      <typeparam name="T">数组中元素的类型。</typeparam>
      <returns>由 <paramref name="range" /> 定义的子数组。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetUninitializedObject(System.Type)">
      <param name="type" />
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray(System.Array,System.RuntimeFieldHandle)">
      <summary>提供初始化来自存储在模块中的数据的数组的快速方法。</summary>
      <param name="array">要初始化的数组。</param>
      <param name="fldHandle">指定用于初始化数组的数据位置的字段句柄。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.IsReferenceOrContainsReferences``1">
      <summary>返回一个值，其表示指定的类型是引用类型还是包含引用的值类型。</summary>
      <typeparam name="T">类型。</typeparam>
      <returns>如果给定类型是引用类型或包含引用的值类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeHelpers.OffsetToStringData">
      <summary>获取给定字符串中数据的偏移量（以字节为单位）。</summary>
      <returns>字节偏移量，从 <see cref="T:System.String" /> 对象的起始位置到字符串中的第一个字符。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions">
      <summary>将代码体指定为受约束的执行区域 (CER)。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegionsNoOP">
      <summary>将代码体指定为受约束的执行区域 (CER)，无需执行任何探测。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareContractedDelegate(System.Delegate)">
      <summary>提供应用程序用来动态准备 <see cref="T:System.AppDomain" /> 事件委托的方法。</summary>
      <param name="d">要准备的事件委托。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareDelegate(System.Delegate)">
      <summary>指示应准备指定委托以包含在受约束的执行区域 (CER) 中。</summary>
      <param name="d">要准备的委托类型。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod(System.RuntimeMethodHandle)">
      <summary>准备一个要包含在受约束的执行区域 (CER) 中的方法。</summary>
      <param name="method">要准备的方法的句柄。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod(System.RuntimeMethodHandle,System.RuntimeTypeHandle[])">
      <summary>准备一个要包含在受约束的执行区域 (CER) 中的具有指定实例化的方法。</summary>
      <param name="method">要准备的方法的句柄。</param>
      <param name="instantiation">要传递给该方法的实例化。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.ProbeForSufficientStack">
      <summary>探测某个数量的堆栈空间，以确保不会在后续的代码块内发生堆栈溢出（假设用户的代码仅使用有限适中的堆栈空间）。 建议使用受约束的执行区域 (CER)，而不使用此方法。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(System.RuntimeTypeHandle)">
      <summary>确保已运行指定类型的类型初始值设定项（也称为静态构造函数）。</summary>
      <param name="type">类型句柄，用于指定应为其运行类型初始值设定项的类型。</param>
      <exception cref="T:System.TypeInitializationException">类型初始值设定项引发异常。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.RunModuleConstructor(System.ModuleHandle)">
      <summary>运行指定的模块构造函数方法。</summary>
      <param name="module">一个用于指定要运行的模块构造函数方法的句柄。</param>
      <exception cref="T:System.TypeInitializationException">模块构造函数引发了一个异常。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.RuntimeHelpers.TryCode">
      <summary>表示应该在 try 块中运行的代码的委托。</summary>
      <param name="userData">要传递给委托的数据。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.TryEnsureSufficientExecutionStack" />
    <member name="T:System.Runtime.CompilerServices.RuntimeWrappedException">
      <summary>包装不是从 <see cref="T:System.Exception" /> 类派生的异常。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeWrappedException.#ctor(System.Object)">
      <param name="thrownObject" />
    </member>
    <member name="M:System.Runtime.CompilerServices.RuntimeWrappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用有关异常的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">存放有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException">
      <summary>获取由 <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> 对象包装的对象。</summary>
      <returns>由 <see cref="T:System.Runtime.CompilerServices.RuntimeWrappedException" /> 对象包装的对象。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.SpecialNameAttribute">
      <summary>指示类型或成员由运行时或工具以一种特殊的方式进行处理。  此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.SpecialNameAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.SpecialNameAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.StateMachineAttribute">
      <summary>允许确定方法是否是状态机方法。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StateMachineAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.StateMachineAttribute" /> 类的新实例。</summary>
      <param name="stateMachineType">这用于执行状态计算机方法生成的编译器基础状态的计算机的类型对象。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.StateMachineAttribute.StateMachineType">
      <summary>返回编译器生成的实现状态机方法的基础状态机类型的类型对象。</summary>
      <returns>获取这用于执行状态计算机方法生成的编译器基础状态的计算机的类型对象。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.StringFreezingAttribute">
      <summary>已否决。 在使用 Ngen.exe (Native Image Generator) 创建本机映像时冻结字符串。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StringFreezingAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.StringFreezingAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.StrongBox`1">
      <summary>保存对某个值的引用。</summary>
      <typeparam name="T">
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 引用的值的类型。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor">
      <summary>初始化一个在引用调用中使用时可以接收值的新 StrongBox。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.StrongBox`1.#ctor(`0)">
      <summary>使用提供的值初始化 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 类的一个新实例。</summary>
      <param name="value">
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 将引用的值。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.StrongBox`1.System#Runtime#CompilerServices#IStrongBox#Value">
      <summary>获取或设置 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 引用的值。</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 引用的值。</returns>
    </member>
    <member name="F:System.Runtime.CompilerServices.StrongBox`1.Value">
      <summary>表示 <see cref="T:System.Runtime.CompilerServices.StrongBox`1" /> 引用的值。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.SuppressIldasmAttribute">
      <summary>防止 Ildasm.exe（IL 反汇编程序）反汇编程序集。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.SuppressIldasmAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.SuppressIldasmAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.TaskAwaiter">
      <summary>提供等待异步任务完成的对象。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter.GetResult">
      <summary>结束异步任务完成的等待。</summary>
      <exception cref="T:System.NullReferenceException">
        <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> 对象未正确初始化。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">已取消任务。</exception>
      <exception cref="T:System.Exception">在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态中完成的任务。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TaskAwaiter.IsCompleted">
      <summary>获取一个值，该值指示异步任务是否已完成。</summary>
      <returns>如果该任务已完成，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.NullReferenceException">
        <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> 对象未正确初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter.OnCompleted(System.Action)">
      <summary>将操作设置为当 <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> 对象停止等待异步任务完成时执行。</summary>
      <param name="continuation">在等待操作完成时要执行的操作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NullReferenceException">
        <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> 对象未正确初始化。</exception>
      <exception cref="T:System.InvalidOperationException">awaiter 未正确地初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>计划与此 awaiter 相关异步任务的延续操作。</summary>
      <param name="continuation">在等待操作完成时要调用的操作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">awaiter 未正确地初始化。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.TaskAwaiter`1">
      <summary>表示等待完成的异步任务的对象，并提供结果的参数。</summary>
      <typeparam name="TResult">任务的结果。</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter`1.GetResult">
      <summary>结束异步任务完成的等待。</summary>
      <returns>已完成任务的结果。</returns>
      <exception cref="T:System.NullReferenceException">
        <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" /> 对象未正确初始化。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">已取消任务。</exception>
      <exception cref="T:System.Exception">在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态中完成的任务。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TaskAwaiter`1.IsCompleted">
      <summary>获取一个值，该值指示异步任务是否已完成。</summary>
      <returns>如果该任务已完成，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.NullReferenceException">
        <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" /> 对象未正确初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter`1.OnCompleted(System.Action)">
      <summary>将操作设置为当 <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" /> 对象停止等待异步任务完成时执行。</summary>
      <param name="continuation">在等待操作完成时要执行的操作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NullReferenceException">
        <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" /> 对象未正确初始化。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.TaskAwaiter`1.UnsafeOnCompleted(System.Action)">
      <summary>计划与此 awaiter 相关异步任务的延续操作。</summary>
      <param name="continuation">在等待操作完成时要调用的操作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NullReferenceException">awaiter 未正确地初始化。</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.TupleElementNamesAttribute">
      <summary>指示应将所使用的成员上的值元组视为具有元素名称的元组。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TupleElementNamesAttribute.#ctor(System.String[])">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.TupleElementNamesAttribute" /> 类的新实例。</summary>
      <param name="transformNames">一个字符串数组，该数组指示在类型构造的深度优先前序遍历中，哪个值元组事件应具有元素名称。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.TupleElementNamesAttribute.TransformNames">
      <summary>指示在类型构造的深度优先前序遍历中，哪个值元组元素应具有元素名称。</summary>
      <returns>一个数组，该数组指示哪些值元组元素应具有元素名称。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute">
      <summary>指定另一个程序集中的源 <see cref="T:System.Type" />。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedFromAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.TypeForwardedFromAttribute" /> 类的新实例。</summary>
      <param name="assemblyFullName">另一个程序集中的源 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyFullName" /> 为 <see langword="null" /> 或空。</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedFromAttribute.AssemblyFullName">
      <summary>获取源类型的程序集限定名称。</summary>
      <returns>源类型的程序集限定名称。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.TypeForwardedToAttribute">
      <summary>指定另一个程序集中的目标 <see cref="T:System.Type" />。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.TypeForwardedToAttribute.#ctor(System.Type)">
      <summary>初始化指定目标 <see cref="T:System.Runtime.CompilerServices.TypeForwardedToAttribute" /> 的 <see cref="T:System.Type" /> 类的新实例。</summary>
      <param name="destination">另一个程序集中的目标 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Runtime.CompilerServices.TypeForwardedToAttribute.Destination">
      <summary>获取另一个程序集中的目标 <see cref="T:System.Type" />。</summary>
      <returns>另一个程序集中的目标 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute">
      <summary>指定某个类型包含可能溢出的非托管数组。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.UnsafeValueTypeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.CompilerServices.UnsafeValueTypeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ValueTaskAwaiter">
      <summary>为 <see cref="T:System.Threading.Tasks.ValueTask" /> 提供一个 awaiter。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter.GetResult">
      <summary>获取 ValueTask 的结果。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.ValueTaskAwaiter.IsCompleted">
      <summary>获得指示 <see cref="T:System.Threading.Tasks.ValueTask" /> 是否已完成的值。</summary>
      <returns>
        <see langword="true" />如果 ValueTask 已完成, 则为;否则为<see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter.OnCompleted(System.Action)">
      <summary>为此 <see cref="T:System.Threading.Tasks.ValueTask" /> 计划延续操作。</summary>
      <param name="continuation">此 <see cref="T:System.Threading.Tasks.ValueTask" /> 的延续操作。</param>
    </member>
    <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>为此 ValueTask 计划延续操作。</summary>
      <param name="continuation" />
    </member>
    <member name="T:System.Runtime.CompilerServices.ValueTaskAwaiter`1">
      <summary>为 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 提供一个 awaiter。</summary>
      <typeparam name="TResult" />
    </member>
    <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter`1.GetResult">
      <summary>获取 ValueTask 的结果。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.ValueTaskAwaiter`1.IsCompleted">
      <summary>获得指示 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 是否已完成的值。</summary>
      <returns>
        <see langword="true" />如果已完成, <see langword="false" />则为; 否则为。 <see cref="T:System.Threading.Tasks.ValueTask`1" /></returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter`1.OnCompleted(System.Action)">
      <summary>为此 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 计划延续操作。</summary>
      <param name="continuation" />
    </member>
    <member name="M:System.Runtime.CompilerServices.ValueTaskAwaiter`1.UnsafeOnCompleted(System.Action)">
      <summary>为此 ValueTask 计划延续操作。</summary>
      <param name="continuation">此 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 的延续操作。</param>
    </member>
    <member name="T:System.Runtime.CompilerServices.YieldAwaitable">
      <summary>提供上下文，用于在异步切换到目标环境时等待。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.YieldAwaitable.GetAwaiter">
      <summary>为此类的实例检索 <see cref="T:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter" /> 对象。</summary>
      <returns>用于监视异步操作是否完成的对象。</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter">
      <summary>提供用于切换到目标环境的 awaiter。</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.GetResult">
      <summary>结束等待操作。</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.IsCompleted">
      <summary>获取一个值，该值指示是否需要一个 yield。</summary>
      <returns>始终 <see langword="false" />，指示 yield 始终是 <see cref="T:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter" /> 所必需的。</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.OnCompleted(System.Action)">
      <summary>设置延续以调用。</summary>
      <param name="continuation">要异步调用的调用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.YieldAwaitable.YieldAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>发送 <paramref name="continuation" /> 回到当前上下文。</summary>
      <param name="continuation">要异步调用的调用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.Cer">
      <summary>在受约束的执行区域内调用时指定方法的行为。</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Cer.MayFail">
      <summary>在遇到异常情况时，此方法可能会失败。 在这种情况下，此方法将向调用方法报告它是否成功。 该方法的方法体周围必须有 CER 以确保它可以报告返回值。</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Cer.None">
      <summary>方法、类型或程序集没有 CER 的概念。 它不利用 CER 保证。</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Cer.Success">
      <summary>在遇到异常情况时，保证此方法获得成功。 应始终在调用的方法周围构造 CER，即使是在非 CER 区域内调用该方法。 如果方法完成了其任务，则该方法成功。 例如，用 ReliabilityContractAttribute(Cer.Success)<c></c> 标记 <see cref="P:System.Collections.ArrayList.Count" /> 意味着当它在 CER 下运行时，它始终返回 <see cref="T:System.Collections.ArrayList" /> 中的元素的数目计数，并且它永远不能将内部的字段保留为不确定状态。</summary>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.Consistency">
      <summary>指定可靠性协定。</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Consistency.MayCorruptAppDomain">
      <summary>在遇到异常情况时，公共语言运行时 (CLR) 对当前应用程序域中的状态一致性不做任何保证。</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Consistency.MayCorruptInstance">
      <summary>在遇到异常情况时，此方法保证将状态损坏限制到当前实例。</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Consistency.MayCorruptProcess">
      <summary>在遇到异常情况时，CLR 对状态一致性不做任何保证；即这种情况可能损坏进程。</summary>
    </member>
    <member name="F:System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState">
      <summary>在遇到异常情况时，此方法保证不损坏状态。 （不保证此方法永远不会失效；但确实可以保证此类故障将永远不损坏状态。）</summary>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
      <summary>确保派生类中的所有终止代码均标记为关键。</summary>
    </member>
    <member name="M:System.Runtime.ConstrainedExecution.CriticalFinalizerObject.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.ConstrainedExecution.CriticalFinalizerObject.Finalize">
      <summary>释放由 <see cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" /> 类使用的所有资源。</summary>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute">
      <summary>指示本机图像生成服务准备一个要包含在受约束的执行区域 (CER) 中的方法。</summary>
    </member>
    <member name="M:System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
      <summary>定义某些代码的作者和依赖于这些代码的开发人员之间的可靠性协定。</summary>
    </member>
    <member name="M:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.#ctor(System.Runtime.ConstrainedExecution.Consistency,System.Runtime.ConstrainedExecution.Cer)">
      <summary>使用指定 <see cref="T:System.Runtime.ConstrainedExecution.Consistency" /> 保证和 <see cref="T:System.Runtime.ConstrainedExecution.Cer" /> 值初始化 <see cref="T:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute" /> 类的新实例。</summary>
      <param name="consistencyGuarantee">
        <see cref="T:System.Runtime.ConstrainedExecution.Consistency" /> 值之一。</param>
      <param name="cer">
        <see cref="T:System.Runtime.ConstrainedExecution.Cer" /> 值之一。</param>
    </member>
    <member name="P:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.Cer">
      <summary>获取确定在受约束的执行区域 (CER) 下调用时方法、类型或程序集的行为的值。</summary>
      <returns>
        <see cref="T:System.Runtime.ConstrainedExecution.Cer" /> 值之一。</returns>
    </member>
    <member name="P:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.ConsistencyGuarantee">
      <summary>获取 <see cref="T:System.Runtime.ConstrainedExecution.Consistency" /> 可靠性协定的值。</summary>
      <returns>
        <see cref="T:System.Runtime.ConstrainedExecution.Consistency" /> 值之一。</returns>
    </member>
    <member name="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo">
      <summary>表示异常，其状态在特定代码点捕获。</summary>
    </member>
    <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Capture(System.Exception)">
      <summary>创建 <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" /> 对象，此对象在代码当前点表示指定异常。</summary>
      <param name="source">由一个返回的对象表示且状态被捕获的异常。</param>
      <returns>表示代码中当前点的指定异常的对象。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Runtime.ExceptionServices.ExceptionDispatchInfo.SourceException">
      <summary>获取被当前实例表示的异常。</summary>
      <returns>被当前实例表示的异常。</returns>
    </member>
    <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw">
      <summary>恢复捕获异常时保存的状态后，引发由当前 <see cref="T:System.Runtime.ExceptionServices.ExceptionDispatchInfo" /> 对象表示的异常。</summary>
    </member>
    <member name="M:System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw(System.Exception)">
      <param name="source" />
    </member>
    <member name="T:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs">
      <summary>在公共语言运行时开始搜索事件处理程序之前，为托管异常首次出现时引发的通知事件提供数据。</summary>
    </member>
    <member name="M:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs.#ctor(System.Exception)">
      <summary>使用指定的异常初始化 <see cref="T:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs" /> 类的新实例。</summary>
      <param name="exception">刚才由托管代码引发的异常，该异常将由 <see cref="E:System.AppDomain.UnhandledException" /> 事件检查。</param>
    </member>
    <member name="P:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs.Exception">
      <summary>与托管代码中引发的异常对应的托管异常对象。</summary>
      <returns>新引发的异常。</returns>
    </member>
    <member name="T:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute">
      <summary>启用托管代码以处理用于指示损坏的进程状态的异常。</summary>
    </member>
    <member name="M:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.GCLargeObjectHeapCompactionMode">
      <summary>指示下一个阻塞垃圾回收是否压缩大型对象堆 (LOH)。</summary>
    </member>
    <member name="F:System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce">
      <summary>下一次阻止第 2 代垃圾回收期间将压缩大型对象堆 (LOH)。</summary>
    </member>
    <member name="F:System.Runtime.GCLargeObjectHeapCompactionMode.Default">
      <summary>不压缩大型对象堆 (LOH)。</summary>
    </member>
    <member name="T:System.Runtime.GCLatencyMode">
      <summary>调整垃圾收集器侵入应用程序的时间。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.Batch">
      <summary>在批调用中禁用垃圾回收并发，并回收对象。 这是最高级别的侵入模式。 此模式专用于最大吞吐量（但以牺牲响应性为代价）。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.Interactive">
      <summary>在应用程序运行时启用垃圾回收并发，并回收对象。 这是工作站上垃圾回收的默认模式，并且较少受侵入 <see cref="F:System.Runtime.GCLatencyMode.Batch" />。 它可以平衡响应性和吞吐量。 此模式等同于在并发的工作站上执行垃圾回收。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.LowLatency">
      <summary>启用回收对象时比较保守的垃圾回收。 仅在系统遇到内存压力时才发生完全回收，而通常情况下发生 0 代和 1 代回收。 此模式不可用于服务器垃圾回收器。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.NoGCRegion">
      <summary>指示当应用正在执行关键路径时挂起垃圾回收。  
 <see cref="F:System.Runtime.GCLatencyMode.NoGCRegion" /> 是一个只读值；也就是说，不能将 <see cref="F:System.Runtime.GCLatencyMode.NoGCRegion" /> 值分配给 <see cref="P:System.Runtime.GCSettings.LatencyMode" /> 属性。 通过调用 <see cref="Overload:System.GC.TryStartNoGCRegion" /> 方法指定无 GC 区域延迟模式，并通过调用 <see cref="M:System.GC.EndNoGCRegion" /> 方法终止该模式。</summary>
    </member>
    <member name="F:System.Runtime.GCLatencyMode.SustainedLowLatency">
      <summary>启用尝试减少延长时期的延迟的垃圾回收。 回收器尝试只执行生成 0、生成 1，以及并发只生成 2 个集合。 如果系统处于内存压力之下，则完整的阻塞集合还是会出现。</summary>
    </member>
    <member name="T:System.Runtime.GCSettings">
      <summary>指定当前进程的垃圾回收设置。</summary>
    </member>
    <member name="P:System.Runtime.GCSettings.IsServerGC">
      <summary>获取一个值，该值指示是否启用了服务器垃圾回收。</summary>
      <returns>如果启用了服务器垃圾回收，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.GCSettings.LargeObjectHeapCompactionMode">
      <summary>获取或设置指示完全阻止垃圾回收是否压缩大型对象堆 (LOH) 的值。</summary>
      <returns>指示完全阻塞垃圾回收是否压缩 LOH 的枚举值之一。</returns>
    </member>
    <member name="P:System.Runtime.GCSettings.LatencyMode">
      <summary>获取或设置垃圾收集的当前滞后时间模式。</summary>
      <returns>指定滞后时间模式的枚举值之一。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Runtime.GCSettings.LatencyMode" /> 属性被设置为无效值。  

或 - 
不能将 <see cref="P:System.Runtime.GCSettings.LatencyMode" /> 属性设置为 <see cref="F:System.Runtime.GCLatencyMode.NoGCRegion" />。</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.CharSet">
      <summary>规定封送字符串应使用何种字符集。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Ansi">
      <summary>将字符串封送为多字节字符串：对于 Windows 是系统默认的 Windows (ANSI) 代码页，对于 Unix 是 UTF-8。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Auto">
      <summary>针对目标操作系统适当地自动封送字符串。 有关详细信息，请参阅字符集和封送处理。 尽管公共语言运行时默认值为 <see cref="F:System.Runtime.InteropServices.CharSet.Auto" />，但语言可替代此默认值。 例如，默认情况下，C# 和 Visual Basic 将所有方法和类型都标记为 <see cref="F:System.Runtime.InteropServices.CharSet.Ansi" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.None">
      <summary>此值已过时，它与 <see cref="F:System.Runtime.InteropServices.CharSet.Ansi" /> 具有相同的行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CharSet.Unicode">
      <summary>以 Unicode 2 字节字符的字符串的形式封送字符串。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComVisibleAttribute">
      <summary>控制程序集中单独托管类型或成员，或所有类型对 COM 的访问性。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see langword="ComVisibleAttribute" /> 类的新实例。</summary>
      <param name="visibility">
        <see langword="true" /> 指示该类型对 COM 可见；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComVisibleAttribute.Value">
      <summary>获取一个值，该值指示 COM 类型是否可见。</summary>
      <returns>如果该类型可见，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CriticalHandle">
      <summary>表示句柄资源的包装类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.#ctor(System.IntPtr)">
      <summary>用指定的无效句柄值初始化 <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> 类的新实例。</summary>
      <param name="invalidHandleValue">无效句柄的值（通常为 0 或 -1）。</param>
      <exception cref="T:System.TypeLoadException">派生类驻留在不具备非托管代码访问权限的程序集中。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Close">
      <summary>标记句柄，以便释放资源。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Dispose">
      <summary>释放由 <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:System.Runtime.InteropServices.CriticalHandle" /> 类所使用的非托管资源，并指定是否执行常规释放 (Dispose) 操作。</summary>
      <param name="disposing">如进行常规释放操作，则为 <see langword="true" />；如终结句柄，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.Finalize">
      <summary>释放与句柄关联的所有资源。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CriticalHandle.handle">
      <summary>指定要包装的句柄。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.CriticalHandle.IsClosed">
      <summary>获取一个值，该值指示句柄是否已关闭。</summary>
      <returns>如果句柄已关闭，则为<see langword="true" /> ；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.CriticalHandle.IsInvalid">
      <summary>在派生类中重写后，获取一个值，该值指示句柄值是否无效。</summary>
      <returns>如果句柄有效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.ReleaseHandle">
      <summary>如果在派生类中重写，执行释放句柄所需的代码。</summary>
      <returns>如果句柄释放成功，则为 <see langword="true" />；如果出现灾难性故障，则为 <see langword="false" />。 在这种情况下，它会生成 releaseHandleFailed 托管调试助手。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.SetHandle(System.IntPtr)">
      <summary>将句柄设置为预先存在的指定句柄。</summary>
      <param name="handle">要使用的预先存在的句柄。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CriticalHandle.SetHandleAsInvalid">
      <summary>将句柄标记为无效。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ExternalException">
      <summary>所有 COM 互操作 异常和结构化异常处理 (SEH) 异常的异常基类型。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor">
      <summary>使用默认属性初始化 <see langword="ExternalException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从序列化数据初始化 <see langword="ExternalException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see langword="ExternalException" /> 类的新实例。</summary>
      <param name="message">指定异常原因的错误信息。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.InteropServices.ExternalException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.#ctor(System.String,System.Int32)">
      <summary>使用指定错误信息和错误的 HRESULT 初始化 <see langword="ExternalException" /> 类的新实例。</summary>
      <param name="message">指定异常原因的错误信息。</param>
      <param name="errorCode">错误的 HRESULT。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ExternalException.ErrorCode">
      <summary>获取错误的 <see langword="HRESULT" />。</summary>
      <returns>错误的 <see langword="HRESULT" /> 。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ExternalException.ToString">
      <summary>返回一个字符串，该字符串包含错误的 HRESULT。</summary>
      <returns>表示 HRESULT 的字符串。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.FieldOffsetAttribute">
      <summary>指示字段在类或结构的非托管表示形式内的物理位置。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.FieldOffsetAttribute.#ctor(System.Int32)">
      <summary>使用字段开始的结构中的偏移量初始化 <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" /> 类的新实例。</summary>
      <param name="offset">从结构开始处到字段开始处的偏移量（以字节为单位）。</param>
    </member>
    <member name="P:System.Runtime.InteropServices.FieldOffsetAttribute.Value">
      <summary>获取从结构开始到字段开始的偏移量。</summary>
      <returns>从结构开始到字段开始的偏移量。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GCHandle">
      <summary>提供用于从非托管内存访问托管对象的方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject">
      <summary>在 <see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /> 句柄中检索对象的地址。</summary>
      <returns>
        <see cref="T:System.IntPtr" /> 形式的固定对象的地址。</returns>
      <exception cref="T:System.InvalidOperationException">该句柄是 <see cref="F:System.Runtime.InteropServices.GCHandleType.Pinned" /> 以外的任何类型。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)">
      <summary>为指定的对象分配 <see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" /> 句柄。</summary>
      <param name="value">使用 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 的对象。</param>
      <returns>一个新的 <see cref="T:System.Runtime.InteropServices.GCHandle" />，它保护对象不被垃圾回收。 当不再需要 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 时，必须通过 <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> 将其释放。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)">
      <summary>为指定的对象分配指定类型的句柄。</summary>
      <param name="value">使用 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 的对象。</param>
      <param name="type">
        <see cref="T:System.Runtime.InteropServices.GCHandleType" /> 值之一，指示要创建的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 的类型。</param>
      <returns>指定的类型的新 <see cref="T:System.Runtime.InteropServices.GCHandle" />。 当不再需要 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 时，必须通过 <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> 将其释放。</returns>
      <exception cref="T:System.ArgumentException">具有非基元（非直接复制到本机结构中的）成员的实例不能被固定。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象是否等同于当前的 <see cref="T:System.Runtime.InteropServices.GCHandle" />。</summary>
      <param name="o">要与当前 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象进行比较的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。</param>
      <returns>如果指定的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象等于当前的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.Free">
      <summary>释放 <see cref="T:System.Runtime.InteropServices.GCHandle" />。</summary>
      <exception cref="T:System.InvalidOperationException">该句柄已被释放或从未初始化。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)">
      <summary>返回从某个托管对象的句柄创建的新 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。</summary>
      <param name="value">某个托管对象的 <see cref="T:System.IntPtr" /> 句柄，将从该句柄创建 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。</param>
      <returns>对应于值参数的新的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 参数的值为 <see cref="F:System.IntPtr.Zero" />。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.GetHashCode">
      <summary>返回当前 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象的标识符。</summary>
      <returns>当前 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象的标识符。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.GCHandle.IsAllocated">
      <summary>获取一个值，该值指示是否分配了句柄。</summary>
      <returns>如果分配了句柄，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象是否相等。</summary>
      <param name="a">要与 <paramref name="b" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。</param>
      <param name="b">要与 <paramref name="a" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。</param>
      <returns>如果 <paramref name="a" /> 和 <paramref name="b" /> 参数相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle">
      <summary>
        <see cref="T:System.Runtime.InteropServices.GCHandle" /> 以内部整数表示形式存储。</summary>
      <param name="value">一个 <see cref="T:System.IntPtr" />，它指示需要该转换的句柄。</param>
      <returns>使用内部整数表示形式的已存储 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr">
      <summary>
        <see cref="T:System.Runtime.InteropServices.GCHandle" /> 以内部整数表示形式存储。</summary>
      <param name="value">需要该整数的 <see cref="T:System.Runtime.InteropServices.GCHandle" />。</param>
      <returns>整数值。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象是否不相等。</summary>
      <param name="a">要与 <paramref name="b" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。</param>
      <param name="b">要与 <paramref name="a" /> 参数进行比较的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。</param>
      <returns>如果 <paramref name="a" /> 和 <paramref name="b" /> 参数相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.GCHandle.Target">
      <summary>获取或设置该句柄表示的对象。</summary>
      <returns>该句柄表示的对象。</returns>
      <exception cref="T:System.InvalidOperationException">该句柄被释放，或从未初始化。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)">
      <summary>返回 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象的内部整数表示形式。</summary>
      <param name="value">要从中检索内部整数表示形式的 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象。</param>
      <returns>表示 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 对象的 <see cref="T:System.IntPtr" /> 对象。</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GCHandleType">
      <summary>表示 <see cref="T:System.Runtime.InteropServices.GCHandle" /> 类可以分配的句柄的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Normal">
      <summary>此句柄类型表示不透明句柄，这意味着无法通过此句柄解析固定对象的地址。 可以使用此类型跟踪对象，并防止它被垃圾回收器回收。 当非托管客户端持有对托管对象的唯一引用（从垃圾回收器检测不到该引用）时，此枚举成员很有用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Pinned">
      <summary>此句柄类型类似于 <see cref="F:System.Runtime.InteropServices.GCHandleType.Normal" />，但允许使用固定对象的地址。 这将防止垃圾回收器移动对象，因此将降低垃圾回收器的效率。 使用 <see cref="M:System.Runtime.InteropServices.GCHandle.Free" /> 方法可尽快释放已分配的句柄。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.Weak">
      <summary>此句柄类型用于跟踪对象，但允许回收该对象。 当回收某个对象时，<see cref="T:System.Runtime.InteropServices.GCHandle" /> 的内容归零。 在终结器运行之前，<see langword="Weak" /> 引用归零，因此即使终结器使该对象复活，<see langword="Weak" /> 引用仍然是归零的。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.GCHandleType.WeakTrackResurrection">
      <summary>该句柄类型类似于 <see cref="F:System.Runtime.InteropServices.GCHandleType.Weak" />，但如果对象在终结过程中复活，此句柄不归零。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.InAttribute">
      <summary>指示应将数据从调用方封送到被调用方，而不返回到调用方。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.InAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.LayoutKind">
      <summary>控制当导出到非托管代码时对象的布局。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Auto">
      <summary>运行库自动为非托管内存中的对象的成员选择适当的布局。 使用此枚举成员定义的对象不能在托管代码的外部公开。 尝试这样做将引发异常。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Explicit">
      <summary>在未管理内存中的每一个对象成员的精确位置是被显式控制的，服从于 <see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" /> 字段的设置。 每个成员必须使用 <see cref="T:System.Runtime.InteropServices.FieldOffsetAttribute" /> 指示该字段在类型中的位置。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.LayoutKind.Sequential">
      <summary>对象的成员按照它们在被导出到非托管内存时出现的顺序依次布局。 这些成员根据在 <see cref="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" /> 中指定的封装进行布局，并且可以是不连续的。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.OutAttribute">
      <summary>指示应将数据从被调用方封送回调用方。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OutAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.OutAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeHandle">
      <summary>表示操作系统句柄的包装类。 必须继承此类。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>用指定的无效句柄值初始化 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 类的新实例。</summary>
      <param name="invalidHandleValue">无效句柄的值（通常为 0 或 -1）。  <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> 的实现应对此值返回 <see langword="true" />。</param>
      <param name="ownsHandle">在终止阶段使 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 可靠地释放句柄，则为 <see langword="true" />；否则为 <see langword="false" />（不建议使用）。</param>
      <exception cref="T:System.TypeLoadException">派生类驻留在不具备非托管代码访问权限的程序集中。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Close">
      <summary>标记句柄，以便释放资源。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)">
      <summary>手动递增 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 实例中的引用计数器。</summary>
      <param name="success">如果成功递增引用计数器，则为<see langword="true" /> ；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle">
      <summary>返回 <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> 字段的值。</summary>
      <returns>
        <see langword="IntPtr" />，表示 <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> 字段的值。 如果句柄已使用 <see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" /> 标记为无效，此方法仍返回原来的句柄值，该值可能已失效。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease">
      <summary>手动递减 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 实例中的引用计数器。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Dispose">
      <summary>释放 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 类使用的所有资源。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:System.Runtime.InteropServices.SafeHandle" /> 类所使用的非托管资源，并指定是否执行常规释放 (Dispose) 操作。</summary>
      <param name="disposing">如进行常规释放操作，则为 <see langword="true" />；如终结句柄，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.Finalize">
      <summary>释放与句柄关联的所有资源。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.SafeHandle.handle">
      <summary>指定要包装的句柄。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeHandle.IsClosed">
      <summary>获取一个值，该值指示句柄是否已关闭。</summary>
      <returns>如果句柄已关闭，则为<see langword="true" /> ；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.SafeHandle.IsInvalid">
      <summary>在派生类中重写后，获取一个值，该值指示句柄值是否无效。</summary>
      <returns>如果句柄值无效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle">
      <summary>如果在派生类中重写，执行释放句柄所需的代码。</summary>
      <returns>如果句柄释放成功，则为 <see langword="true" />；如果出现灾难性故障，则为 <see langword="false" />。 在这种情况下，它会生成 releaseHandleFailed 托管调试助手。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)">
      <summary>将句柄设置为预先存在的指定句柄。</summary>
      <param name="handle">要使用的预先存在的句柄。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid">
      <summary>将句柄标记为不再使用。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.StructLayoutAttribute">
      <summary>允许你控制内存中类或结构的数据字段的物理布局。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 枚举成员初始化 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 类的新实例。</summary>
      <param name="layoutKind">表示一个 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 值的 16 位整数，指定应如何排列类或结构。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)">
      <summary>使用指定的 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 枚举成员初始化 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 类的新实例。</summary>
      <param name="layoutKind">一个枚举值，指定应如何排列类或结构。</param>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet">
      <summary>指示在默认情况下是否应将类中的字符串数据字段作为 <see langword="LPWSTR" /> 或 <see langword="LPSTR" /> 进行封送处理。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack">
      <summary>控制类或结构的数据字段在内存中的对齐方式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Size">
      <summary>指示类或结构的绝对大小。</summary>
    </member>
    <member name="P:System.Runtime.InteropServices.StructLayoutAttribute.Value">
      <summary>获取 <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 值，该值指定如何排列类或结构。</summary>
      <returns>枚举值之一，指定如何排列类或结构。</returns>
    </member>
    <member name="T:System.Runtime.MemoryFailPoint">
      <summary>执行一个操作之前检查是否有足够的内存资源。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.MemoryFailPoint.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Runtime.MemoryFailPoint" /> 类的新实例，指定成功执行所需的内存量。</summary>
      <param name="sizeInMegabytes">需要的内存大小（以兆字节为单位）。 这必须是一正值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的内存大小为负数。</exception>
      <exception cref="T:System.InsufficientMemoryException">没有足够的内存来开始执行由门保护的代码。</exception>
    </member>
    <member name="M:System.Runtime.MemoryFailPoint.Dispose">
      <summary>释放由 <see cref="T:System.Runtime.MemoryFailPoint" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Runtime.MemoryFailPoint.Finalize">
      <summary>确保垃圾回收器回收 <see cref="T:System.Runtime.MemoryFailPoint" /> 对象时释放资源并执行其他清理操作。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.ObjectHandle">
      <summary>包装按值封送对象引用，从而使它们可以通过间接寻址返回。</summary>
    </member>
    <member name="M:System.Runtime.Remoting.ObjectHandle.#ctor(System.Object)">
      <summary>初始化 <see cref="T:System.Runtime.Remoting.ObjectHandle" /> 类的实例，包装给定对象 <paramref name="o" />。</summary>
      <param name="o">由新的 <see cref="T:System.Runtime.Remoting.ObjectHandle" /> 包装的对象。</param>
    </member>
    <member name="M:System.Runtime.Remoting.ObjectHandle.Unwrap">
      <summary>返回被包装的对象。</summary>
      <returns>被包装的对象。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.IDeserializationCallback">
      <summary>指示在完成整个对象图形的反序列化时通知类。 注意当用 XmlSerializer (System.Xml.Serialization.XmlSerializer) 反序列化时，不调用此接口。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)">
      <summary>在整个对象图形已经反序列化时运行。</summary>
      <param name="sender">启动回调的对象。 当前未实现该参数的功能。</param>
    </member>
    <member name="T:System.Runtime.Serialization.IFormatterConverter">
      <summary>提供 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 的实例与格式化程序所提供的、最适用于分析 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 中的数据的类之间的连接。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.Convert(System.Object,System.Type)">
      <summary>将值转换为给定的 <see cref="T:System.Type" />。</summary>
      <param name="value">要转换的对象。</param>
      <param name="type">
        <paramref name="value" /> 将转换成的 <see cref="T:System.Type" />。</param>
      <returns>转换后的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.Convert(System.Object,System.TypeCode)">
      <summary>将值转换为给定的 <see cref="T:System.TypeCode" />。</summary>
      <param name="value">要转换的对象。</param>
      <param name="typeCode">
        <paramref name="value" /> 将转换成的 <see cref="T:System.TypeCode" />。</param>
      <returns>转换后的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToBoolean(System.Object)">
      <summary>将一个值转换为 <see cref="T:System.Boolean" />。</summary>
      <param name="value">要转换的对象。</param>
      <returns>转换后的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToByte(System.Object)">
      <summary>将值转换为 8 位无符号整数。</summary>
      <param name="value">要转换的对象。</param>
      <returns>转换后的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToChar(System.Object)">
      <summary>将值转换为 Unicode 字符。</summary>
      <param name="value">要转换的对象。</param>
      <returns>转换后的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToDateTime(System.Object)">
      <summary>将一个值转换为 <see cref="T:System.DateTime" />。</summary>
      <param name="value">要转换的对象。</param>
      <returns>转换后的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToDecimal(System.Object)">
      <summary>将一个值转换为 <see cref="T:System.Decimal" />。</summary>
      <param name="value">要转换的对象。</param>
      <returns>转换后的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToDouble(System.Object)">
      <summary>将值转换为双精度浮点数字。</summary>
      <param name="value">要转换的对象。</param>
      <returns>转换后的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToInt16(System.Object)">
      <summary>将值转换为 16 位带符号整数。</summary>
      <param name="value">要转换的对象。</param>
      <returns>转换后的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToInt32(System.Object)">
      <summary>将值转换为 32 位带符号整数。</summary>
      <param name="value">要转换的对象。</param>
      <returns>转换后的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToInt64(System.Object)">
      <summary>将值转换为 64 位带符号整数。</summary>
      <param name="value">要转换的对象。</param>
      <returns>转换后的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToSByte(System.Object)">
      <summary>将一个值转换为 <see cref="T:System.SByte" />。</summary>
      <param name="value">要转换的对象。</param>
      <returns>转换后的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToSingle(System.Object)">
      <summary>将值转换为单精度浮点数字。</summary>
      <param name="value">要转换的对象。</param>
      <returns>转换后的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToString(System.Object)">
      <summary>将一个值转换为 <see cref="T:System.String" />。</summary>
      <param name="value">要转换的对象。</param>
      <returns>转换后的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToUInt16(System.Object)">
      <summary>将值转换为 16 位无符号整数。</summary>
      <param name="value">要转换的对象。</param>
      <returns>转换后的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToUInt32(System.Object)">
      <summary>将值转换为 32 位无符号整数。</summary>
      <param name="value">要转换的对象。</param>
      <returns>转换后的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.IFormatterConverter.ToUInt64(System.Object)">
      <summary>将值转换为 64 位无符号整数。</summary>
      <param name="value">要转换的对象。</param>
      <returns>转换后的 <paramref name="value" />。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.IObjectReference">
      <summary>指示当前接口实施者是对另一个对象的引用。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext)">
      <summary>返回应进行反序列化的真实对象（而不是序列化流指定的对象）。</summary>
      <param name="context">当前对象从其中进行反序列化的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
      <returns>放入图中的实际对象。</returns>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。 无法对中等信任的服务器进行调用。</exception>
    </member>
    <member name="T:System.Runtime.Serialization.ISafeSerializationData">
      <summary>启用安全透明的代码中的自定义异常数据的序列化。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization(System.Object)">
      <summary>方法在取消序列化实例之前被调用。</summary>
      <param name="deserialized">包含实例状态的对象。</param>
    </member>
    <member name="T:System.Runtime.Serialization.ISerializable">
      <summary>允许对象控制其自己的序列化和反序列化过程。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext" />）。</param>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="T:System.Runtime.Serialization.OnDeserializedAttribute">
      <summary>如果将对象图中的对象应用于某方法，则应指定在反序列化该对象图后立即调用该方法。 相对于关系图中的其他对象，该反序列化的顺序是不确定的。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnDeserializedAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.OnDeserializedAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnDeserializingAttribute">
      <summary>当应用于方法时，指定在反序列化对象关系图中的对象期间调用该方法。 相对于关系图中的其他对象，该反序列化的顺序是不确定的。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnDeserializingAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.OnDeserializingAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnSerializedAttribute">
      <summary>当应用于方法时，指定在序列化对象关系图中的对象之后调用该方法。 相对于关系图中的其他对象，序列化的顺序是不确定的。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnSerializedAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.OnSerializedAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.Serialization.OnSerializingAttribute">
      <summary>当应用于方法时，指定在序列化对象关系图中的对象期间调用该方法。 相对于关系图中的其他对象，序列化的顺序是不确定的。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OnSerializingAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.OnSerializingAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Runtime.Serialization.OptionalFieldAttribute">
      <summary>指定序列化流中可以缺少一个字段，这样 <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" /> 和 <see cref="T:System.Runtime.Serialization.Formatters.Soap.SoapFormatter" /> 就不会引发异常。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.OptionalFieldAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.OptionalFieldAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.OptionalFieldAttribute.VersionAdded">
      <summary>获取或设置一个版本号，以指示添加可选字段的时间。</summary>
      <returns>
        <see cref="T:System.Runtime.Serialization.OptionalFieldAttribute" /> 的版本。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.SafeSerializationEventArgs">
      <summary>为 <see cref="E:System.Exception.SerializeObjectState" /> 事件提供数据。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SafeSerializationEventArgs.AddSerializedState(System.Runtime.Serialization.ISafeSerializationData)">
      <summary>存储异常的状态。</summary>
      <param name="serializedState">与此实例序列化的状态对象。</param>
    </member>
    <member name="P:System.Runtime.Serialization.SafeSerializationEventArgs.StreamingContext">
      <summary>获取或设置一个对象，该对象描述序列化流的源和目标。</summary>
      <returns>一个对象，该对象描述序列化流的源和目标。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.SerializationEntry">
      <summary>包含序列化对象的 <see cref="T:System.Type" /> 值以及名称。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationEntry.Name">
      <summary>获取对象的名称。</summary>
      <returns>对象的名称。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationEntry.ObjectType">
      <summary>获取对象的 <see cref="T:System.Type" />。</summary>
      <returns>对象的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationEntry.Value">
      <summary>获取对象中包含的值。</summary>
      <returns>对象中包含的值。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.SerializationException">
      <summary>在序列化或反序列化期间出错时所引发的异常。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.Runtime.Serialization.SerializationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Runtime.Serialization.SerializationException" /> 类的新实例。</summary>
      <param name="info">以名称/值形式保存已序列化对象数据的序列化信息对象。</param>
      <param name="context">有关异常的源或目标的上下文信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor(System.String)">
      <summary>用指定的消息初始化 <see cref="T:System.Runtime.Serialization.SerializationException" /> 类的新实例。</summary>
      <param name="message">指出发生异常的原因。</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Runtime.Serialization.SerializationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Runtime.Serialization.SerializationInfo">
      <summary>存储对对象进行序列化或反序列化所需的全部数据。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.#ctor(System.Type,System.Runtime.Serialization.IFormatterConverter)">
      <summary>创建 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类的新实例。</summary>
      <param name="type">要序列化的对象的 <see cref="T:System.Type" />。</param>
      <param name="converter">在反序列化过程中使用的 <see cref="T:System.Runtime.Serialization.IFormatterConverter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="converter" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.#ctor(System.Type,System.Runtime.Serialization.IFormatterConverter,System.Boolean)">
      <summary>初始化 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类的新实例。</summary>
      <param name="type">要序列化的对象的 <see cref="T:System.Type" />。</param>
      <param name="converter">在反序列化过程中使用的 <see cref="T:System.Runtime.Serialization.IFormatterConverter" />。</param>
      <param name="requireSameTokenInPartialTrust">指示对象是否需要部分信任的同一标记。</param>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Boolean)">
      <summary>向 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储中添加一个布尔值。</summary>
      <param name="name">要与值关联的名称，因此它可在以后被反序列化。</param>
      <param name="value">要序列化的布尔值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">已有值与 <paramref name="name" /> 相关联。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Byte)">
      <summary>向 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储添加一个 8 位无符号整数值。</summary>
      <param name="name">要与值关联的名称，因此它可在以后被反序列化。</param>
      <param name="value">要序列化的字节值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">已有值与 <paramref name="name" /> 相关联。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Char)">
      <summary>向 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储添加一个 Unicode 字符值。</summary>
      <param name="name">要与值关联的名称，因此它可在以后被反序列化。</param>
      <param name="value">要序列化的字符值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">已有值与 <paramref name="name" /> 相关联。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.DateTime)">
      <summary>向 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储添加一个 <see cref="T:System.DateTime" /> 值。</summary>
      <param name="name">要与值关联的名称，因此它可在以后被反序列化。</param>
      <param name="value">要序列化的 <see cref="T:System.DateTime" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">已有值与 <paramref name="name" /> 相关联。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Decimal)">
      <summary>向 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储添加一个十进制值。</summary>
      <param name="name">要与值关联的名称，因此它可在以后被反序列化。</param>
      <param name="value">要序列化的十进制值。</param>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="name" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">如果已有值与 <paramref name="name" /> 相关联。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Double)">
      <summary>向 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储添加一个双精度浮点值。</summary>
      <param name="name">要与值关联的名称，因此它可在以后被反序列化。</param>
      <param name="value">要序列化的 Double 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">已有值与 <paramref name="name" /> 相关联。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int16)">
      <summary>向 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储添加一个 16 位带符号整数值。</summary>
      <param name="name">要与值关联的名称，因此它可在以后被反序列化。</param>
      <param name="value">要序列化的 <see langword="Int16" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">已有值与 <paramref name="name" /> 相关联。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int32)">
      <summary>向 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储添加一个 32 位带符号整数值。</summary>
      <param name="name">要与值关联的名称，因此它可在以后被反序列化。</param>
      <param name="value">要序列化的 <see langword="Int32" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">已有值与 <paramref name="name" /> 相关联。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int64)">
      <summary>向 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储添加一个 64 位带符号整数值。</summary>
      <param name="name">要与值关联的名称，因此它可在以后被反序列化。</param>
      <param name="value">要序列化的 Int64 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">已有值与 <paramref name="name" /> 相关联。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object)">
      <summary>将指定的对象添加到与指定的名称关联的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储。</summary>
      <param name="name">要与值关联的名称，因此它可在以后被反序列化。</param>
      <param name="value">要串行化的值。 会自动串行化此对象的所有子级。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">已有值与 <paramref name="name" /> 相关联。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object,System.Type)">
      <summary>将一个值添加到 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储中，其中 <paramref name="value" /> 与 <paramref name="name" /> 相关联，并串行化为 <see cref="T:System.Type" /><paramref name="type" />。</summary>
      <param name="name">要与值关联的名称，因此它可在以后被反序列化。</param>
      <param name="value">要串行化的值。 会自动串行化此对象的所有子级。</param>
      <param name="type">要与当前对象相关联的 <see cref="T:System.Type" />。 此参数必须始终是该对象本身的类型或其中一个基类的类型。</param>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="name" /> 或 <paramref name="type" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">已有值与 <paramref name="name" /> 相关联。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.SByte)">
      <summary>向 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储添加一个 8 位带符号整数值。</summary>
      <param name="name">要与值关联的名称，因此它可在以后被反序列化。</param>
      <param name="value">要序列化的 <see langword="Sbyte" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">已有值与 <paramref name="name" /> 相关联。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Single)">
      <summary>向 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储添加一个单精度浮点值。</summary>
      <param name="name">要与值关联的名称，因此它可在以后被反序列化。</param>
      <param name="value">要序列化的 Single 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">已有值与 <paramref name="name" /> 相关联。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt16)">
      <summary>向 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储添加一个 16 位无符号整数值。</summary>
      <param name="name">要与值关联的名称，因此它可在以后被反序列化。</param>
      <param name="value">要序列化的 <see langword="UInt16" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">已有值与 <paramref name="name" /> 相关联。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt32)">
      <summary>向 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储添加一个 32 位无符号整数值。</summary>
      <param name="name">要与值关联的名称，因此它可在以后被反序列化。</param>
      <param name="value">要序列化的 <see langword="UInt32" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">已有值与 <paramref name="name" /> 相关联。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt64)">
      <summary>向 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储添加一个 64 位无符号整数值。</summary>
      <param name="name">要与值关联的名称，因此它可在以后被反序列化。</param>
      <param name="value">要序列化的 <see langword="UInt64" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">已有值与 <paramref name="name" /> 相关联。</exception>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfo.AssemblyName">
      <summary>仅在序列化期间获取或设置要序列化的类型的程序集名称。</summary>
      <returns>要序列化的类型的程序集的全名。</returns>
      <exception cref="T:System.ArgumentNullException">该属性的值设置为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfo.FullTypeName">
      <summary>获取或设置要序列化的 <see cref="T:System.Type" /> 的全名。</summary>
      <returns>要序列化的类型的全名。</returns>
      <exception cref="T:System.ArgumentNullException">此属性的值设置为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetBoolean(System.String)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储中检索一个布尔值。</summary>
      <param name="name">与要检索的值关联的名称。</param>
      <returns>与 <paramref name="name" /> 关联的布尔值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">与 <paramref name="name" /> 关联的值不能转换为布尔值。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">当前实例中没有找到具有指定名称的元素。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetByte(System.String)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储中检索一个 8 位无符号整数值。</summary>
      <param name="name">与要检索的值关联的名称。</param>
      <returns>与 <paramref name="name" /> 关联的 8 位无符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">与 <paramref name="name" /> 关联的值不能转换为 8 位无符号整数。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">当前实例中没有找到具有指定名称的元素。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetChar(System.String)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储中检索一个 Unicode 字符值。</summary>
      <param name="name">与要检索的值关联的名称。</param>
      <returns>与 <paramref name="name" /> 关联的 Unicode 字符。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">与 <paramref name="name" /> 关联的值不能转换为 Unicode 字符。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">当前实例中没有找到具有指定名称的元素。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetDateTime(System.String)">
      <summary>从 <see cref="T:System.DateTime" /> 存储中检索一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 值。</summary>
      <param name="name">与要检索的值关联的名称。</param>
      <returns>与 <paramref name="name" /> 关联的 <see cref="T:System.DateTime" /> 值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">与 <paramref name="name" /> 关联的值不能转换为 <see cref="T:System.DateTime" /> 值。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">当前实例中没有找到具有指定名称的元素。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetDecimal(System.String)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储中检索一个十进制值。</summary>
      <param name="name">与要检索的值关联的名称。</param>
      <returns>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 中的十进制值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">与 <paramref name="name" /> 关联的值不能转换为十进制值。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">当前实例中没有找到具有指定名称的元素。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetDouble(System.String)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储中检索一个双精度浮点值。</summary>
      <param name="name">与要检索的值关联的名称。</param>
      <returns>与 <paramref name="name" /> 关联的双精度浮点值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">与 <paramref name="name" /> 关联的值不能转换为双精度浮点值。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">当前实例中没有找到具有指定名称的元素。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetEnumerator">
      <summary>返回一个 <see cref="T:System.Runtime.Serialization.SerializationInfoEnumerator" />，用于循环访问 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储中的名称/值对。</summary>
      <returns>一个 <see cref="T:System.Runtime.Serialization.SerializationInfoEnumerator" />，用于分析 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储中的名称/值对。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetInt16(System.String)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储中检索一个 16 位带符号整数值。</summary>
      <param name="name">与要检索的值关联的名称。</param>
      <returns>与 <paramref name="name" /> 关联的 16 位带符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">与 <paramref name="name" /> 关联的值不能转换为 16 位带符号整数。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">当前实例中没有找到具有指定名称的元素。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetInt32(System.String)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储中检索一个 32 位带符号整数值。</summary>
      <param name="name">要检索的值的名称。</param>
      <returns>与 <paramref name="name" /> 关联的 32 位带符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">与 <paramref name="name" /> 关联的值不能转换为 32 位带符号整数。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">当前实例中没有找到具有指定名称的元素。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetInt64(System.String)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储中检索一个 64 位带符号整数值。</summary>
      <param name="name">与要检索的值关联的名称。</param>
      <returns>与 <paramref name="name" /> 关联的 64 位带符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">与 <paramref name="name" /> 关联的值不能转换为 64 位带符号整数。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">当前实例中没有找到具有指定名称的元素。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetSByte(System.String)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储中检索一个 8 位带符号整数值。</summary>
      <param name="name">与要检索的值关联的名称。</param>
      <returns>与 <paramref name="name" /> 关联的 8 位带符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">与 <paramref name="name" /> 关联的值不能转换为 8 位带符号整数。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">当前实例中没有找到具有指定名称的元素。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetSingle(System.String)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储中检索一个单精度浮点值。</summary>
      <param name="name">要检索的值的名称。</param>
      <returns>与 <paramref name="name" /> 关联的单精度浮点值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">与 <paramref name="name" /> 关联的值不能转换为单精度浮点值。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">当前实例中没有找到具有指定名称的元素。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetString(System.String)">
      <summary>从 <see cref="T:System.String" /> 存储中检索一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 值。</summary>
      <param name="name">与要检索的值关联的名称。</param>
      <returns>与 <see cref="T:System.String" /> 关联的 <paramref name="name" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">与 <paramref name="name" /> 关联的值不能转换为 <see cref="T:System.String" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">当前实例中没有找到具有指定名称的元素。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetUInt16(System.String)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储中检索一个 16 位无符号整数值。</summary>
      <param name="name">与要检索的值关联的名称。</param>
      <returns>与 <paramref name="name" /> 关联的 16 位无符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">与 <paramref name="name" /> 关联的值不能转换为 16 位无符号整数。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">当前实例中没有找到具有指定名称的元素。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetUInt32(System.String)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储中检索一个 32 位无符号整数值。</summary>
      <param name="name">与要检索的值关联的名称。</param>
      <returns>与 <paramref name="name" /> 关联的 32 位无符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">与 <paramref name="name" /> 关联的值不能转换为 32 位无符号整数。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">当前实例中没有找到具有指定名称的元素。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetUInt64(System.String)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储中检索一个 64 位无符号整数值。</summary>
      <param name="name">与要检索的值关联的名称。</param>
      <returns>与 <paramref name="name" /> 关联的 64 位无符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">与 <paramref name="name" /> 关联的值不能转换为 64 位无符号整数。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">当前实例中没有找到具有指定名称的元素。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.GetValue(System.String,System.Type)">
      <summary>从 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储中检索一个值。</summary>
      <param name="name">与要检索的值关联的名称。</param>
      <param name="type">要检索的值的 <see cref="T:System.Type" />。 如果存储的值不能转换为此类型，则系统会引发 <see cref="T:System.InvalidCastException" />。</param>
      <returns>与 <paramref name="name" /> 关联的已指定 <see cref="T:System.Type" /> 的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="type" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">与 <paramref name="name" /> 关联的值不能转换为 <paramref name="type" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">当前实例中没有找到具有指定名称的元素。</exception>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfo.IsAssemblyNameSetExplicit">
      <summary>获取是否已显式设置程序集名称。</summary>
      <returns>
        <see langword="true" />如果已显式设置程序集名称, 则为; 否则为。否则为<see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfo.IsFullTypeNameSetExplicit">
      <summary>获取是否已显式设置完整类型名称。</summary>
      <returns>
        <see langword="true" />如果已显式设置完整类型名称, 则为; 否则为。否则为<see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfo.MemberCount">
      <summary>获取已添加到 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储中的成员数目。</summary>
      <returns>已添加到当前 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 中的成员的数目。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfo.ObjectType">
      <summary>返回要串行化的对象的类型。</summary>
      <returns>序列化的对象的类型。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfo.SetType(System.Type)">
      <summary>设置要序列化的对象的 <see cref="T:System.Type" />。</summary>
      <param name="type">要序列化的对象的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Runtime.Serialization.SerializationInfoEnumerator">
      <summary>提供适用于格式化程序的机制，用于分析 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 中的数据。 此类不能被继承。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfoEnumerator.Current">
      <summary>获取当前所检查的项。</summary>
      <returns>当前所检查的项。</returns>
      <exception cref="T:System.InvalidOperationException">枚举器还未开始枚举项或已到达枚举的结尾。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfoEnumerator.MoveNext">
      <summary>将枚举器更新到下一项。</summary>
      <returns>如果找到新的元素，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfoEnumerator.Name">
      <summary>获取当前所检查的项的名称。</summary>
      <returns>项名称。</returns>
      <exception cref="T:System.InvalidOperationException">枚举器还未开始枚举项或已到达枚举的结尾。</exception>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfoEnumerator.ObjectType">
      <summary>获取当前所检查的项的类型。</summary>
      <returns>当前所检查的项的类型。</returns>
      <exception cref="T:System.InvalidOperationException">枚举器还未开始枚举项或已到达枚举的结尾。</exception>
    </member>
    <member name="M:System.Runtime.Serialization.SerializationInfoEnumerator.Reset">
      <summary>将枚举器重置为第一项。</summary>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfoEnumerator.System#Collections#IEnumerator#Current">
      <summary>获取集合中的当前项。</summary>
      <returns>一个 <see cref="T:System.Runtime.Serialization.SerializationEntry" />，包含当前的序列化数据。</returns>
      <exception cref="T:System.InvalidOperationException">该枚举尚未启动或者已经终止。</exception>
    </member>
    <member name="P:System.Runtime.Serialization.SerializationInfoEnumerator.Value">
      <summary>获取当前所检查的项的值。</summary>
      <returns>当前所检查的项的值。</returns>
      <exception cref="T:System.InvalidOperationException">枚举器还未开始枚举项或已到达枚举的结尾。</exception>
    </member>
    <member name="T:System.Runtime.Serialization.StreamingContext">
      <summary>描述给定的序列化流的源和目标，并提供一个由调用方定义的附加上下文。</summary>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.#ctor(System.Runtime.Serialization.StreamingContextStates)">
      <summary>使用给定的上下文状态初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的新实例。</summary>
      <param name="state">指定此 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 的源或目标上下文的 <see cref="T:System.Runtime.Serialization.StreamingContextStates" /> 值的按位组合。</param>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.#ctor(System.Runtime.Serialization.StreamingContextStates,System.Object)">
      <summary>使用给定的上下文状态以及一些附加信息来初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的新实例。</summary>
      <param name="state">指定此 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 的源或目标上下文的 <see cref="T:System.Runtime.Serialization.StreamingContextStates" /> 值的按位组合。</param>
      <param name="additional">任何与 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 关联的附加信息。 此信息对所有实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 或任何序列化代理项的对象均可用。 大多数用户无需设置此参数。</param>
    </member>
    <member name="P:System.Runtime.Serialization.StreamingContext.Context">
      <summary>获取指定为附加上下文的一部分的上下文。</summary>
      <returns>指定为附加上下文一部分的上下文。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.Equals(System.Object)">
      <summary>确定两个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 实例是否包含相同值。</summary>
      <param name="obj">要与当前实例进行比较的对象。</param>
      <returns>如果指定对象为 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 的实例并且等于当前实例的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Runtime.Serialization.StreamingContext.GetHashCode">
      <summary>返回此对象的哈希代码。</summary>
      <returns>
        <see cref="T:System.Runtime.Serialization.StreamingContextStates" /> 值包含该 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 的序列化的源或目标。</returns>
    </member>
    <member name="P:System.Runtime.Serialization.StreamingContext.State">
      <summary>获取传输数据的源或目标。</summary>
      <returns>在序列化过程中为传输数据的目标。 在反序列化过程中为数据的源。</returns>
    </member>
    <member name="T:System.Runtime.Serialization.StreamingContextStates">
      <summary>定义指定序列化期间流的源或目标上下文的一组标志。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.All">
      <summary>将序列化数据指定为可以传输到任何其他上下文或从任何其他上下文接收。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.Clone">
      <summary>将对象图指定为正在克隆。 用户可以假定克隆的图形将继续存在于同一进程中，并且可以安全访问句柄或对非托管资源的其他引用。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.CrossAppDomain">
      <summary>将源或目标上下文指定为不同的 AppDomain。 （有关 AppDomain 的说明，请参阅应用程序域）。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.CrossMachine">
      <summary>将源或目标上下文指定为不同的计算机。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.CrossProcess">
      <summary>将源或目标上下文指定为同一计算机上的不同进程。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.File">
      <summary>将源或目标上下文指定为文件。 用户可以假设文件将比创建它们的进程持续更长时间，并且不会用使反序列化需要访问来自当前进程的任何数据的方式来序列化对象。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.Other">
      <summary>将序列化上下文指定为未知。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.Persistence">
      <summary>将源或目标上下文指定为持久化存储，其中可包括数据库、文件或其他后备存储。 用户可以假设持久化数据将比创建数据的进程持续更长时间，并且不会序列化对象以使反序列化需要访问来自当前进程的任何数据。</summary>
    </member>
    <member name="F:System.Runtime.Serialization.StreamingContextStates.Remoting">
      <summary>指定将数据远程连接到未知位置中的上下文。 用户无法假定这是否在同一台计算机上。</summary>
    </member>
    <member name="T:System.Runtime.TargetedPatchingOptOutAttribute">
      <summary>指示此特性应用于的 .NET Framework 类库方法不可能受服务版本的影响，因此它可以在本机映像生成器 (NGen) 格式的映像间内联。</summary>
    </member>
    <member name="M:System.Runtime.TargetedPatchingOptOutAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Runtime.TargetedPatchingOptOutAttribute" /> 类的新实例。</summary>
      <param name="reason">
        <see cref="T:System.Runtime.TargetedPatchingOptOutAttribute" /> 特性应用于的方法被认为可以在本机映像生成器 (NGen) 格式的映像间内联的原因。</param>
    </member>
    <member name="P:System.Runtime.TargetedPatchingOptOutAttribute.Reason">
      <summary>获取此特性应用于的方法被认为可以在本机映像生成器 (NGen) 格式的映像间内联的原因。</summary>
      <returns>此方法被认为可以在 NGen 格式的映像间内联的原因。</returns>
    </member>
    <member name="T:System.Runtime.Versioning.TargetFrameworkAttribute">
      <summary>标识某个特定程序集编译时针对 .NET Framework 的版本。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.TargetFrameworkAttribute.#ctor(System.String)">
      <summary>通过指定一个程序集在生成时针对的 .NET Framework 版本，初始化 <see cref="T:System.Runtime.Versioning.TargetFrameworkAttribute" /> 类的实例。</summary>
      <param name="frameworkName">生成该程序集时针对的 .NET Framework 的版本。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frameworkName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkDisplayName">
      <summary>获取生成某个程序集时针对的 .NET Framework 版本的显示名称。</summary>
      <returns>.NET Framework 版本的显示名称。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.TargetFrameworkAttribute.FrameworkName">
      <summary>获取编译某个特定程序集时针对的 .NET Framework 版本的名称。</summary>
      <returns>编译该程序集时针对的 .NET Framework 版本的名称。</returns>
    </member>
    <member name="T:System.RuntimeArgumentHandle">
      <summary>引用变长参数列表。</summary>
    </member>
    <member name="T:System.RuntimeFieldHandle">
      <summary>使用内部元数据标记表示一个字段。</summary>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.Object)">
      <summary>指示当前实例是否等于指定的对象。</summary>
      <param name="obj">要与当前类型进行比较的对象。</param>
      <returns>如果 <paramref name="obj" /> 为 <see cref="T:System.RuntimeFieldHandle" /> 且与当前实例的值相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.RuntimeFieldHandle.Equals(System.RuntimeFieldHandle)">
      <summary>指示当前实例是否等于指定的 <see cref="T:System.RuntimeFieldHandle" />。</summary>
      <param name="handle">要与当前实例进行比较的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <returns>如果 <paramref name="handle" /> 的值等于当前实例的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.RuntimeFieldHandle.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>一个 32 位带符号整数，它是此实例的哈希代码。</returns>
    </member>
    <member name="M:System.RuntimeFieldHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用反序列化当前实例所表示的字段所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">要用序列化信息填充的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">（保留）存储和检索序列化数据的地方。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">当前实例的 <see cref="P:System.RuntimeFieldHandle.Value" /> 属性不是有效句柄。</exception>
    </member>
    <member name="M:System.RuntimeFieldHandle.op_Equality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)">
      <summary>指示两个 <see cref="T:System.RuntimeFieldHandle" /> 结构是否相等。</summary>
      <param name="left">要与 <paramref name="right" /> 进行比较的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <param name="right">要与 <paramref name="left" /> 进行比较的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <returns>如果 <see langword="true" /> 等于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.RuntimeFieldHandle.op_Inequality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)">
      <summary>指示两个 <see cref="T:System.RuntimeFieldHandle" /> 结构是否不相等。</summary>
      <param name="left">要与 <paramref name="right" /> 进行比较的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <param name="right">要与 <paramref name="left" /> 进行比较的 <see cref="T:System.RuntimeFieldHandle" />。</param>
      <returns>如果 <see langword="true" /> 不等于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.RuntimeFieldHandle.Value">
      <summary>获取当前实例所表示的字段的句柄。</summary>
      <returns>
        <see cref="T:System.IntPtr" />，包含当前实例所表示的字段的句柄。</returns>
    </member>
    <member name="T:System.RuntimeMethodHandle">
      <summary>
        <see cref="T:System.RuntimeMethodHandle" /> 是方法的内部元数据表示形式的句柄。</summary>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.Object)">
      <summary>指示此实例是否与指定对象相等。</summary>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.Object" />。</param>
      <returns>如果 <paramref name="obj" /> 为 <see cref="T:System.RuntimeMethodHandle" /> 且与此实例的值相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.RuntimeMethodHandle.Equals(System.RuntimeMethodHandle)">
      <summary>指示此实例是否与指定的 <see cref="T:System.RuntimeMethodHandle" /> 相等。</summary>
      <param name="handle">要与此实例进行比较的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <returns>如果 <paramref name="handle" /> 等于此实例的值，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetFunctionPointer">
      <summary>获取指向此实例所表示方法的指针。</summary>
      <returns>指向此实例所表示方法的指针。</returns>
      <exception cref="T:System.Security.SecurityException">调用方不具有执行此操作所需的权限。</exception>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.RuntimeMethodHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用反序列化此实例所表示的字段所必需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">要用序列化信息填充的对象。</param>
      <param name="context">（保留）存储和检索序列化数据的地方。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="P:System.RuntimeMethodHandle.Value" /> 无效。</exception>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Equality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>指示两个 <see cref="T:System.RuntimeMethodHandle" /> 实例是否相等。</summary>
      <param name="left">要与 <paramref name="right" /> 进行比较的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <param name="right">要与 <paramref name="left" /> 进行比较的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <returns>如果 <paramref name="left" /> 的值等于 <paramref name="right" /> 的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.RuntimeMethodHandle.op_Inequality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)">
      <summary>指示两个 <see cref="T:System.RuntimeMethodHandle" /> 实例是否不相等。</summary>
      <param name="left">要与 <paramref name="right" /> 进行比较的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <param name="right">要与 <paramref name="left" /> 进行比较的 <see cref="T:System.RuntimeMethodHandle" />。</param>
      <returns>如果 <paramref name="left" /> 的值与 <paramref name="right" /> 的值不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.RuntimeMethodHandle.Value">
      <summary>获得此实例的值。</summary>
      <returns>
        <see cref="T:System.RuntimeMethodHandle" />，它是方法的内部元数据表示形式。</returns>
    </member>
    <member name="T:System.RuntimeTypeHandle">
      <summary>表示使用内部元数据标记的类型。</summary>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.Object)">
      <summary>指示指定的对象是否等于当前的 <see cref="T:System.RuntimeTypeHandle" /> 结构。</summary>
      <param name="obj">要与当前实例进行比较的对象。</param>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.RuntimeTypeHandle" /> 结构并且与此实例的值相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.Equals(System.RuntimeTypeHandle)">
      <summary>指示指定的 <see cref="T:System.RuntimeTypeHandle" /> 结构是否等于当前的 <see cref="T:System.RuntimeTypeHandle" /> 结构。</summary>
      <param name="handle">要与当前实例进行比较的 <see cref="T:System.RuntimeTypeHandle" /> 结构。</param>
      <returns>如果 <paramref name="handle" /> 的值等于此实例的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.GetHashCode">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.GetModuleHandle">
      <summary>获取包含当前实例所表示类型的模块的句柄。</summary>
      <returns>
        <see cref="T:System.ModuleHandle" /> 结构，表示包含当前实例所表示类型的模块的句柄。</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用反序列化当前实例表示的类型所必需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">用序列化信息填充的对象。</param>
      <param name="context">（保留）存储和检索序列化数据的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="P:System.RuntimeTypeHandle.Value" /> 无效。</exception>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Equality(System.Object,System.RuntimeTypeHandle)">
      <summary>指示某个对象与 <see cref="T:System.RuntimeTypeHandle" /> 结构是否相等。</summary>
      <param name="left">要与 <paramref name="right" /> 比较的对象。</param>
      <param name="right">要与 <paramref name="left" /> 比较的 <see cref="T:System.RuntimeTypeHandle" /> 结构。</param>
      <returns>如果 <paramref name="left" /> 是 <see cref="T:System.RuntimeTypeHandle" /> 结构并且与 <paramref name="right" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Equality(System.RuntimeTypeHandle,System.Object)">
      <summary>指示 <see cref="T:System.RuntimeTypeHandle" /> 结构与某个对象是否相等。</summary>
      <param name="left">要与 <paramref name="right" /> 比较的 <see cref="T:System.RuntimeTypeHandle" /> 结构。</param>
      <param name="right">要与 <paramref name="left" /> 比较的对象。</param>
      <returns>如果 <paramref name="right" /> 是 <see cref="T:System.RuntimeTypeHandle" /> 并且与 <paramref name="left" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Inequality(System.Object,System.RuntimeTypeHandle)">
      <summary>指示某个对象与 <see cref="T:System.RuntimeTypeHandle" /> 结构是否不相等。</summary>
      <param name="left">要与 <paramref name="right" /> 比较的对象。</param>
      <param name="right">要与 <paramref name="left" /> 比较的 <see cref="T:System.RuntimeTypeHandle" /> 结构。</param>
      <returns>如果 <paramref name="left" /> 是 <see cref="T:System.RuntimeTypeHandle" /> 并且与 <paramref name="right" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.RuntimeTypeHandle.op_Inequality(System.RuntimeTypeHandle,System.Object)">
      <summary>指示 <see cref="T:System.RuntimeTypeHandle" /> 结构与某个对象是否不相等。</summary>
      <param name="left">要与 <paramref name="right" /> 比较的 <see cref="T:System.RuntimeTypeHandle" /> 结构。</param>
      <param name="right">要与 <paramref name="left" /> 比较的对象。</param>
      <returns>如果 <paramref name="right" /> 是 <see cref="T:System.RuntimeTypeHandle" /> 结构并且它与 <paramref name="left" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.RuntimeTypeHandle.Value">
      <summary>获取此实例所表示的类型的句柄。</summary>
      <returns>此实例所表示的类型的句柄。</returns>
    </member>
    <member name="T:System.SByte">
      <summary>表示 8 位有符号整数。</summary>
    </member>
    <member name="M:System.SByte.CompareTo(System.Object)">
      <summary>将此实例与指定对象进行比较并返回一个对二者的相对值的指示。</summary>
      <param name="obj">要比较的对象，或为 <see langword="null" />。</param>
      <returns>一个带符号数字，指示此实例和 <paramref name="obj" /> 的相对值。  
  返回值 
  说明 
  小于零 
  此实例小于 <paramref name="obj" />。  

  零 
  此实例等于 <paramref name="obj" />。  

  大于零 
  此实例大于 <paramref name="obj" />。  

或 
 <paramref name="obj" /> 为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.SByte" />。</exception>
    </member>
    <member name="M:System.SByte.CompareTo(System.SByte)">
      <summary>将此实例与指定的 8 位有符号整数进行比较并返回对其相对值的指示。</summary>
      <param name="value">要比较的 8 位有符号整数。</param>
      <returns>一个有符号的整数，它指示此实例和 <paramref name="value" /> 的相对顺序。  
  返回值 
  说明 
  小于零 
  此实例小于 <paramref name="value" />。  

  零 
  此实例等于 <paramref name="value" />。  

  大于零 
  此实例大于 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.SByte.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="obj">与此实例进行比较的对象。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.SByte" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.SByte.Equals(System.SByte)">
      <summary>返回一个值，该值指示此实例是否等于指定的 <see cref="T:System.SByte" /> 值。</summary>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.SByte" /> 值。</param>
      <returns>如果 <see langword="true" /> 的值与此实例相同，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.SByte.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.SByte.GetTypeCode">
      <summary>返回值类型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.SByte" />。</summary>
      <returns>枚举常数 <see cref="F:System.TypeCode.SByte" />。</returns>
    </member>
    <member name="F:System.SByte.MaxValue">
      <summary>表示 <see cref="T:System.SByte" />的最大可能值。 此字段为常数。</summary>
    </member>
    <member name="F:System.SByte.MinValue">
      <summary>表示 <see cref="T:System.SByte" /> 的最小可能值。 此字段为常数。</summary>
    </member>
    <member name="M:System.SByte.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.SByte.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 8 位有符号整数。</summary>
      <param name="s">表示要转换的数字的字符串。 该字符串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 样式来进行解释。</param>
      <returns>与 <paramref name="s" /> 参数中包含的数字等效的 8 位有符号整数。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不是由一个可选符号后跟一系列数字 (0-9) 组成的。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 8 位有符号整数。</summary>
      <param name="s">包含要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 8 位有符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。  

或 - 
<paramref name="s" /> 包含非零的小数位。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
或 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 8 位有符号数值。</summary>
      <param name="s">包含要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。 如果 <paramref name="provider" /> 为 <see langword="null" />，则使用当前区域性。</param>
      <returns>与 <paramref name="s" /> 参数中指定的数字等效的 8 位有符号字节值。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
或 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 的组合。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。  
或 
 <paramref name="s" /> 包含非零的小数位。</exception>
    </member>
    <member name="M:System.SByte.Parse(System.String,System.IFormatProvider)">
      <summary>将指定的区域性特定格式的数字的字符串表示形式转换为它的等效 8 位有符号整数。</summary>
      <param name="s">表示要转换的数字的字符串。 该字符串使用 <see cref="F:System.Globalization.NumberStyles.Integer" /> 样式来进行解释。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。 如果 <paramref name="provider" /> 为 <see langword="null" />，则使用当前区域性。</param>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 8 位有符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">未使用此参数。</param>
      <returns>如果当前实例的值不为零，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">未使用此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Byte" />。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。 尝试这样做会引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>无。 不支持此转换。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">未使用此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Decimal" />。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int16" />。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，未更改。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Single" />。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">此 <see cref="T:System.Type" /> 值要转换为的 <see cref="T:System.SByte" />。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 实现，提供有关返回值的格式的信息。</param>
      <returns>转换为 <paramref name="type" /> 类型对象的当前实例的值。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt16" />。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt32" />。</returns>
    </member>
    <member name="M:System.SByte.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt64" />。</returns>
    </member>
    <member name="M:System.SByte.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由减号（如果值为负）和没有前导零的从 0 到 9 的数字序列组成。</returns>
    </member>
    <member name="M:System.SByte.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</returns>
    </member>
    <member name="M:System.SByte.ToString(System.String)">
      <summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="format">标准或自定义的数值格式字符串。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。</exception>
    </member>
    <member name="M:System.SByte.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="format">标准或自定义的数值格式字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。</exception>
    </member>
    <member name="M:System.SByte.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.SByte.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.SByte.TryParse(System.ReadOnlySpan{System.Char},System.SByte@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.SByte@)">
      <summary>尝试将指定样式和区域性特定格式的数字的字符串表示形式转换为其 <see cref="T:System.SByte" /> 等效项，并返回一个指示转换是否成功的值。</summary>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所包含数字等效的 8 位有符号整数值；如果转换失败，则为零。 如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、格式不符合 <paramref name="style" />，或者表示的数字小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" />，则转换失败。 此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  

或 - 
<paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
    </member>
    <member name="M:System.SByte.TryParse(System.String,System.SByte@)">
      <summary>尝试将数字的字符串表示形式转换为它的等效 <see cref="T:System.SByte" />，并返回一个指示转换是否成功的值。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所含数字等效的 8 位有符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、格式不正确，或者表示的数字小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" />，则转换失败。 此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.AllowPartiallyTrustedCallersAttribute">
      <summary>允许由部分信任的代码调用程序集。 如果没有此声明，则只有完全信任的调用方才可以使用此程序集。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.AllowPartiallyTrustedCallersAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Security.AllowPartiallyTrustedCallersAttribute.PartialTrustVisibilityLevel">
      <summary>获取或设置用 <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> (APTCA) 特性标记的代码的默认部分信任可见性。</summary>
      <returns>枚举值之一。 默认值为 <see cref="F:System.Security.PartialTrustVisibilityLevel.VisibleToAllHosts" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.CryptographicException">
      <summary>当加密操作中出现错误时引发的异常。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.Security.Cryptography.CryptographicException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.Int32)">
      <summary>用指定的 <see langword="HRESULT" /> 错误代码初始化 <see cref="T:System.Security.Cryptography.CryptographicException" /> 类的新实例。</summary>
      <param name="hr">
        <see langword="HRESULT" /> 错误代码。</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Security.Cryptography.CryptographicException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.Security.Cryptography.CryptographicException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Security.Cryptography.CryptographicException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String,System.String)">
      <summary>以指定格式使用指定的错误消息来初始化 <see cref="T:System.Security.Cryptography.CryptographicException" /> 类的新实例。</summary>
      <param name="format">用于输出错误信息的格式。</param>
      <param name="insert">解释异常原因的错误消息。</param>
    </member>
    <member name="T:System.Security.PartialTrustVisibilityLevel">
      <summary>指定用 <see cref="T:System.Security.AllowPartiallyTrustedCallersAttribute" /> (APTCA) 特性标记的代码的默认部分信任可见性。</summary>
    </member>
    <member name="F:System.Security.PartialTrustVisibilityLevel.NotVisibleByDefault">
      <summary>已为部分信任审核该程序集，但是它在所有主机中对部分信任的代码均不可见。 若要使程序集对部分信任的代码可见，请将该程序集添加到 <see cref="P:System.AppDomainSetup.PartialTrustVisibleAssemblies" /> 属性。</summary>
    </member>
    <member name="F:System.Security.PartialTrustVisibilityLevel.VisibleToAllHosts">
      <summary>程序集始终可以由部分信任的代码调用。</summary>
    </member>
    <member name="T:System.Security.SecurityCriticalAttribute">
      <summary>指定代码或程序集执行安全性关键型操作。</summary>
    </member>
    <member name="M:System.Security.SecurityCriticalAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.SecurityCriticalAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.SecurityCriticalAttribute.#ctor(System.Security.SecurityCriticalScope)">
      <summary>用指定范围初始化 <see cref="T:System.Security.SecurityCriticalAttribute" /> 类的新实例。</summary>
      <param name="scope">用于指定特性范围的枚举值之一。</param>
    </member>
    <member name="P:System.Security.SecurityCriticalAttribute.Scope">
      <summary>获取特性的范围。</summary>
      <returns>用于指定特性范围的枚举值之一。 默认为 <see cref="F:System.Security.SecurityCriticalScope.Explicit" />，指示特性仅适用于直接目标。</returns>
    </member>
    <member name="T:System.Security.SecurityCriticalScope">
      <summary>指定 <see cref="T:System.Security.SecurityCriticalAttribute" /> 的范围。</summary>
    </member>
    <member name="F:System.Security.SecurityCriticalScope.Everything">
      <summary>该特性应用于其后的所有代码。</summary>
    </member>
    <member name="F:System.Security.SecurityCriticalScope.Explicit">
      <summary>该特性仅应用于直接目标。</summary>
    </member>
    <member name="T:System.Security.SecurityException">
      <summary>检测到安全性错误时引发的异常。</summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.Security.SecurityException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Security.SecurityException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.Security.SecurityException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Security.SecurityException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String,System.Type)">
      <summary>用指定的错误消息和导致引发异常的权限类型初始化 <see cref="T:System.Security.SecurityException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="type">导致引发异常的权限类型。</param>
    </member>
    <member name="M:System.Security.SecurityException.#ctor(System.String,System.Type,System.String)">
      <summary>用指定的错误消息、引发异常的权限类型和权限状态来初始化 <see cref="T:System.Security.SecurityException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="type">导致引发异常的权限类型。</param>
      <param name="state">导致引发异常的权限状态。</param>
    </member>
    <member name="P:System.Security.SecurityException.Demanded">
      <summary>获取或设置失败的要求的安全权限、权限集或权限集集合。</summary>
      <returns>权限、权限集或权限集集合对象。</returns>
    </member>
    <member name="P:System.Security.SecurityException.DenySetInstance">
      <summary>获取或设置导致要求失败的被拒绝的安全权限、权限集或权限集集合。</summary>
      <returns>权限、权限集或权限集集合对象。</returns>
    </member>
    <member name="P:System.Security.SecurityException.FailedAssemblyInfo">
      <summary>获取或设置有关失败的程序集的信息。</summary>
      <returns>一个 <see cref="T:System.Reflection.AssemblyName" />，用于标识失败的程序集。</returns>
    </member>
    <member name="M:System.Security.SecurityException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>通过有关 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 的信息设置 <see cref="T:System.Security.SecurityException" />。</summary>
      <param name="info">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.SecurityException.GrantedSet">
      <summary>获取或设置导致 <see cref="T:System.Security.SecurityException" /> 的程序集的被授予的权限集。</summary>
      <returns>程序集的被授予的权限集的 XML 表示形式。</returns>
    </member>
    <member name="P:System.Security.SecurityException.Method">
      <summary>获取或设置关于与异常关联的方法的信息。</summary>
      <returns>一个描述方法的 <see cref="T:System.Reflection.MethodInfo" /> 对象。</returns>
    </member>
    <member name="P:System.Security.SecurityException.PermissionState">
      <summary>获取或设置引发异常的权限的状态。</summary>
      <returns>在引发异常时权限的状态。</returns>
    </member>
    <member name="P:System.Security.SecurityException.PermissionType">
      <summary>获取或设置失败权限的类型。</summary>
      <returns>失败权限的类型。</returns>
    </member>
    <member name="P:System.Security.SecurityException.PermitOnlySetInstance">
      <summary>获取或设置导致安全检查失败的唯一允许堆栈帧的一部分权限、权限集或权限集集合。</summary>
      <returns>权限、权限集或权限集集合对象。</returns>
    </member>
    <member name="P:System.Security.SecurityException.RefusedSet">
      <summary>获取或设置导致 <see cref="T:System.Security.SecurityException" /> 的程序集的被拒绝的权限集。</summary>
      <returns>程序集的被拒绝的权限集的 XML 表示形式。</returns>
    </member>
    <member name="M:System.Security.SecurityException.ToString">
      <summary>返回当前 <see cref="T:System.Security.SecurityException" /> 的表示形式。</summary>
      <returns>当前 <see cref="T:System.Security.SecurityException" /> 的字符串表示形式。</returns>
    </member>
    <member name="P:System.Security.SecurityException.Url">
      <summary>获取或设置导致异常的程序集的 URL。</summary>
      <returns>一个标识程序集位置的 URL。</returns>
    </member>
    <member name="T:System.Security.SecurityRulesAttribute">
      <summary>指示公共语言运行时应该对程序集强制的一组安全规则。</summary>
    </member>
    <member name="M:System.Security.SecurityRulesAttribute.#ctor(System.Security.SecurityRuleSet)">
      <summary>使用指定的规则集值初始化 <see cref="T:System.Security.SecurityRulesAttribute" /> 类的新实例。</summary>
      <param name="ruleSet">用于指定透明规则集的枚举值之一。</param>
    </member>
    <member name="P:System.Security.SecurityRulesAttribute.RuleSet">
      <summary>获取要应用的规则集。</summary>
      <returns>用于指定要应用的透明规则的枚举值之一。</returns>
    </member>
    <member name="P:System.Security.SecurityRulesAttribute.SkipVerificationInFullTrust">
      <summary>确定完全信任的透明代码是否应该跳过 Microsoft 中间语言 (MSIL) 验证。</summary>
      <returns>如果应该跳过 MSIL 验证，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.SecurityRuleSet">
      <summary>标识公共语言运行时应该对程序集强制的一组安全规则。</summary>
    </member>
    <member name="F:System.Security.SecurityRuleSet.Level1">
      <summary>指示运行时将强制 1 级（.NET Framework 2.0 版）透明规则。</summary>
    </member>
    <member name="F:System.Security.SecurityRuleSet.Level2">
      <summary>指示运行时将强制 2 级透明规则。</summary>
    </member>
    <member name="F:System.Security.SecurityRuleSet.None">
      <summary>不受支持。 使用此值会导致引发 <see cref="T:System.IO.FileLoadException" />。</summary>
    </member>
    <member name="T:System.Security.SecuritySafeCriticalAttribute">
      <summary>将类型或成员标识为安全关键并且可供透明代码安全访问。</summary>
    </member>
    <member name="M:System.Security.SecuritySafeCriticalAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.SecuritySafeCriticalAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Security.SecurityTransparentAttribute">
      <summary>指定程序集无法引起特权提升。</summary>
    </member>
    <member name="M:System.Security.SecurityTransparentAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.SecurityTransparentAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Security.SecurityTreatAsSafeAttribute">
      <summary>标识哪些非公共 <see cref="T:System.Security.SecurityCriticalAttribute" /> 成员可由程序集中的透明代码访问。</summary>
    </member>
    <member name="M:System.Security.SecurityTreatAsSafeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.SecurityTreatAsSafeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Security.SuppressUnmanagedCodeSecurityAttribute">
      <summary>允许托管代码不经过堆栈步即调入非托管代码。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.SuppressUnmanagedCodeSecurityAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.SuppressUnmanagedCodeSecurityAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Security.UnverifiableCodeAttribute">
      <summary>标记包含无法验证的代码的模块。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.UnverifiableCodeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Security.UnverifiableCodeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Security.VerificationException">
      <summary>在以下情况引发的异常：安全策略要求代码为类型安全的代码，并且验证过程无法验证该代码是否为类型安全的代码。</summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.Security.VerificationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Security.VerificationException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String)">
      <summary>用说明性消息初始化 <see cref="T:System.Security.VerificationException" /> 类的新实例。</summary>
      <param name="message">一条指示异常发生原因的消息。</param>
    </member>
    <member name="M:System.Security.VerificationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Security.VerificationException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.SerializableAttribute">
      <summary>指示一个类可以序列化。 此类不能被继承。</summary>
    </member>
    <member name="M:System.SerializableAttribute.#ctor">
      <summary>初始化 <see cref="T:System.SerializableAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Single">
      <summary>表示一个单精度浮点数。</summary>
    </member>
    <member name="M:System.Single.CompareTo(System.Object)">
      <summary>将此实例与指定对象进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定对象的值。</summary>
      <param name="value">要比较的对象，或为 <see langword="null" />。</param>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。  
  返回值 
  说明 
  小于零 
  此实例小于 <paramref name="value" />。  

或 
此实例不是数字 (<see cref="F:System.Single.NaN" />) 而 <paramref name="value" /> 是数字。  

  零 
  此实例等于 <paramref name="value" />。  

或 
此实例和值都不是数字 (<see cref="F:System.Single.NaN" />)、<see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />。  

  大于零 
  此实例大于 <paramref name="value" />。  

或 
此实例是数字而 <paramref name="value" /> 不是数字 (<see cref="F:System.Single.NaN" />)。  

或 
 <paramref name="value" /> 为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Single" />。</exception>
    </member>
    <member name="M:System.Single.CompareTo(System.Single)">
      <summary>将此实例与指定的单精度浮点数进行比较，并返回一个整数，该整数指示此实例的值是小于、等于还是大于指定单精度浮点数的值。</summary>
      <param name="value">要比较的单精度浮点数。</param>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。  
  返回值 
  说明 
  小于零 
  此实例小于 <paramref name="value" />。  

或 
此实例不是数字 (<see cref="F:System.Single.NaN" />) 而 <paramref name="value" /> 是数字。  

  零 
  此实例等于 <paramref name="value" />。  

或 
此实例和 <paramref name="value" /> 都不是数字 (<see cref="F:System.Single.NaN" />)、<see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />。  

  大于零 
  此实例大于 <paramref name="value" />。  

或 
此实例是数字而 <paramref name="value" /> 不是数字 (<see cref="F:System.Single.NaN" />)。</returns>
    </member>
    <member name="F:System.Single.Epsilon">
      <summary>表示大于零的最小正 <see cref="T:System.Single" /> 值。 此字段为常数。</summary>
    </member>
    <member name="M:System.Single.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="obj">与此实例进行比较的对象。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.Single" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.Equals(System.Single)">
      <summary>返回一个值，该值指示此实例和指定的 <see cref="T:System.Single" /> 对象是否表示相同的值。</summary>
      <param name="obj">与此实例进行比较的对象。</param>
      <returns>如果 <see langword="true" /> 与此实例相等，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Single.GetTypeCode">
      <summary>返回值类型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.Single" />。</summary>
      <returns>枚举常数 <see cref="F:System.TypeCode.Single" />。</returns>
    </member>
    <member name="M:System.Single.IsFinite(System.Single)">
      <summary>确定指定值是否为有限（零、次正规数或正规数）。</summary>
      <param name="f">单精度浮点数。</param>
      <returns>如果指定值是有限的（零、次正规数或正规数），则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.IsInfinity(System.Single)">
      <summary>返回一个值，该值指示指定数字是计算为负无穷大还是正无穷大。</summary>
      <param name="f">单精度浮点数。</param>
      <returns>如果 <paramref name="f" /> 的计算结果为 <see cref="F:System.Single.PositiveInfinity" /> 或 <see cref="F:System.Single.NegativeInfinity" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.IsNaN(System.Single)">
      <summary>返回一个值，该值指示指定的值是否不为数字 (<see cref="F:System.Single.NaN" />)。</summary>
      <param name="f">单精度浮点数。</param>
      <returns>如果 <paramref name="f" /> 计算为非数字 (<see cref="F:System.Single.NaN" />)，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.IsNegative(System.Single)">
      <summary>确定指定值是否为负值。</summary>
      <param name="f">单精度浮点数。</param>
      <returns>如果为负值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.IsNegativeInfinity(System.Single)">
      <summary>返回一个值，通过该值指示指定数字是否计算为负无穷大。</summary>
      <param name="f">单精度浮点数。</param>
      <returns>如果 <paramref name="f" /> 的计算结果为 <see cref="F:System.Single.NegativeInfinity" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.IsNormal(System.Single)">
      <summary>确定指定值是否为正规数。</summary>
      <param name="f">单精度浮点数。</param>
      <returns>如果 <paramref name="f" /> 为正规数，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.IsPositiveInfinity(System.Single)">
      <summary>返回一个值，通过该值指示指定数字是否计算为正无穷大。</summary>
      <param name="f">单精度浮点数。</param>
      <returns>如果 <paramref name="f" /> 的计算结果为 <see cref="F:System.Single.PositiveInfinity" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.IsSubnormal(System.Single)">
      <summary>确定指定值是否是次正规数。</summary>
      <param name="f">单精度浮点数。</param>
      <returns>如果 <paramref name="f" /> 是次正规数，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.Single.MaxValue">
      <summary>表示 <see cref="T:System.Single" /> 的最大可能值。 此字段为常数。</summary>
    </member>
    <member name="F:System.Single.MinValue">
      <summary>表示 <see cref="T:System.Single" /> 的最小可能值。 此字段为常数。</summary>
    </member>
    <member name="F:System.Single.NaN">
      <summary>表示非数字 (<see langword="NaN" />)。 此字段为常数。</summary>
    </member>
    <member name="F:System.Single.NegativeInfinity">
      <summary>表示负无穷。 此字段为常数。</summary>
    </member>
    <member name="M:System.Single.op_Equality(System.Single,System.Single)">
      <summary>返回一个值，该值指示两个指定的 <see cref="T:System.Single" /> 值是否相等。</summary>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.op_GreaterThan(System.Single,System.Single)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Single" /> 值是否大于另一个指定的 <see cref="T:System.Single" /> 值。</summary>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
      <returns>如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.op_GreaterThanOrEqual(System.Single,System.Single)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Single" /> 值是否大于或等于另一个指定的 <see cref="T:System.Single" /> 值。</summary>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
      <returns>如果 <paramref name="left" /> 大于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.op_Inequality(System.Single,System.Single)">
      <summary>返回一个值，该值指示两个指定的 <see cref="T:System.Single" /> 值是否不相等。</summary>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.op_LessThan(System.Single,System.Single)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Single" /> 值是否小于另一个指定的 <see cref="T:System.Single" /> 值。</summary>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
      <returns>如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.op_LessThanOrEqual(System.Single,System.Single)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Single" /> 值是否小于或等于另一个指定的 <see cref="T:System.Single" /> 值。</summary>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
      <returns>如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.Single.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效单精度浮点数。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <returns>与 <paramref name="s" /> 中指定的数值或符号等效的单精度浮点数字。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不表示具有有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将具有指定样式的数字的字符串表示形式转换为它的等效单精度浮点数。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float" /> 与 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的组合。</param>
      <returns>与在 <paramref name="s" /> 中指定的数值或符号等效的单精度浮点数字。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不是一个具有有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" /> 的数字。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
或 
 <paramref name="style" /> 包括 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
    </member>
    <member name="M:System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将具有指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效单精度浮点数。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float" /> 与 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的组合。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <returns>与 <paramref name="s" /> 中指定的数值或符号等效的单精度浮点数字。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不表示一个数值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
或 
 <paramref name="style" /> 是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.Single.Parse(System.String,System.IFormatProvider)">
      <summary>将具有指定区域性特定格式的数字的字符串表示形式转换为它的等效单精度浮点数。</summary>
      <param name="s">包含要转换的数字的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <returns>与 <paramref name="s" /> 中指定的数值或符号等效的单精度浮点数字。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 不表示具有有效格式的数字。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" /> 的数字。</exception>
    </member>
    <member name="F:System.Single.PositiveInfinity">
      <summary>表示正无穷。 此字段为常数。</summary>
    </member>
    <member name="M:System.Single.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>如果当前实例的值不为零，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Byte" />。</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Decimal" />。</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int16" />。</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.SByte" />。</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，未更改。</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">此 <see cref="T:System.Single" /> 值要转换为的类型。</param>
      <param name="provider">提供有关返回值格式信息的对象。</param>
      <returns>当前实例的值，已转换为 <paramref name="type" />。</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt16" />。</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt32" />。</returns>
    </member>
    <member name="M:System.Single.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt64" />。</returns>
    </member>
    <member name="M:System.Single.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式。</returns>
    </member>
    <member name="M:System.Single.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="provider" /> 指定。</returns>
    </member>
    <member name="M:System.Single.ToString(System.String)">
      <summary>使用指定的格式，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="format">一个数值格式字符串。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。</exception>
    </member>
    <member name="M:System.Single.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="format">一个数值格式字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
    </member>
    <member name="M:System.Single.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.Single.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.Single.TryParse(System.ReadOnlySpan{System.Char},System.Single@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)">
      <summary>将具有指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效单精度浮点数。 一个指示转换是否成功的返回值。</summary>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。 一个用来指定的典型值为 <see cref="F:System.Globalization.NumberStyles.Float" /> 与 <see cref="F:System.Globalization.NumberStyles.AllowThousands" /> 的组合。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 所包含的数值或符号等效的单精度浮点数字；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、格式不符合 <paramref name="style" />、表示的数字小于<see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" />，或者 <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 枚举的常数的有效组合，则转换失败。 此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
或 
 <paramref name="style" /> 是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 值。</exception>
    </member>
    <member name="M:System.Single.TryParse(System.String,System.Single@)">
      <summary>将数字的字符串表示形式转换为它的等效单精度浮点数。 一个指示转换是否成功的返回值。</summary>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 所包含的数值或符号等效的单精度浮点数字；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是有效格式的数字，或者表示的数字小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" />，则转换失败。 此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Span`1">
      <summary>提供任意内存的连续区域的类型和内存安全表示。</summary>
      <typeparam name="T">中项的类型<see cref="T:System.Span`1" />。</typeparam>
    </member>
    <member name="M:System.Span`1.#ctor(`0[])">
      <summary>在整个指定数组上创建新的 <see cref="T:System.Span`1" /> 对象。</summary>
      <param name="array">用来从中创建 <see cref="T:System.Span`1" /> 对象的数组。</param>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="T" /> 为引用类型，并且 <paramref name="array" /> 不是 <paramref name="T" /> 类型的数组。</exception>
    </member>
    <member name="M:System.Span`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>从指定索引开始，创建包含数组的指定元素数的新 <see cref="T:System.Span`1" /> 对象。</summary>
      <param name="array">源数组。</param>
      <param name="start">要包括在新的 <see cref="T:System.Span`1" /> 内的第一个元素的索引。</param>
      <param name="length">要包括在新的 <see cref="T:System.Span`1" /> 中的元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="array" /> 是 <see langword="null" />，但 <paramref name="start" /> 或 <paramref name="length" /> 不为零。
或
<paramref name="start" /> 在数组的界限外。
或
<paramref name="start" /> 和 <paramref name="length" /> 超过数组中的元素数。</exception>
      <exception cref="T:System.ArrayTypeMismatchException">
        <paramref name="T" /> 为引用类型，并且 <paramref name="array" /> 不是 <paramref name="T" /> 类型的数组。</exception>
    </member>
    <member name="M:System.Span`1.#ctor(System.Void*,System.Int32)">
      <summary>从指定的内存地址开始，从指定 <typeparamref name="T" /> 元素数创建新的 <see cref="T:System.Span`1" /> 对象。</summary>
      <param name="pointer">指向内存中指定 <typeparamref name="T" /> 元素数的起始地址的指针。</param>
      <param name="length">要包含在 <see cref="T:System.Span`1" /> 中的 <typeparamref name="T" /> 元素数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> 是引用类型或包含指针，因此不能存储在非管理的内存中。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> 为负数。</exception>
    </member>
    <member name="M:System.Span`1.Clear">
      <summary>清除此 <see cref="T:System.Span`1" /> 对象的内容。</summary>
    </member>
    <member name="M:System.Span`1.CopyTo(System.Span{`0})">
      <summary>将此 <see cref="T:System.Span`1" /> 的内容复制到目标 <see cref="T:System.Span`1" />。</summary>
      <param name="destination">目标 <see cref="T:System.Span`1" /> 对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 短于源 <see cref="T:System.Span`1" />。</exception>
    </member>
    <member name="P:System.Span`1.Empty">
      <summary>返回空的 <see cref="T:System.Span`1" /> 对象。</summary>
      <returns>一个空 <see cref="T:System.Span`1" /> 对象。</returns>
    </member>
    <member name="T:System.Span`1.Enumerator">
      <summary>为 <see cref="T:System.Span`1" /> 的元素提供枚举器。</summary>
      <typeparam name="T" />
    </member>
    <member name="P:System.Span`1.Enumerator.Current">
      <summary>获取对枚举器当前位置的项目的引用。</summary>
      <returns>
        <see cref="T:System.Span`1" /> 中位于该枚举数当前位置的元素。</returns>
    </member>
    <member name="M:System.Span`1.Enumerator.MoveNext">
      <summary>将枚举器推进到 <see cref="T:System.Span`1" /> 的下一项。</summary>
      <returns>如果枚举器成功推进到下一项，则为 <see langword="true" />；如果已通过范围的末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Span`1.Equals(System.Object)">
      <summary>不支持对此方法的调用。</summary>
      <param name="obj">不支持。</param>
      <returns>不支持对此方法的调用。</returns>
      <exception cref="T:System.NotSupportedException">不支持对此方法的调用。</exception>
    </member>
    <member name="M:System.Span`1.Fill(`0)">
      <summary>用指定的值填充此范围的元素。</summary>
      <param name="value">要分配给范围的每个元素的值。</param>
    </member>
    <member name="M:System.Span`1.GetEnumerator">
      <summary>返回用于此 <see cref="T:System.Span`1" /> 的枚举器。</summary>
      <returns>用于此范围的枚举器。</returns>
    </member>
    <member name="M:System.Span`1.GetHashCode">
      <summary>引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>调用此方法始终引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">不支持对此方法的调用。</exception>
    </member>
    <member name="M:System.Span`1.GetPinnableReference">
      <summary>返回对索引为零处 <see cref="T:System.Span`1" /> 元素的引用。</summary>
      <returns>返回对索引为零处 <see cref="T:System.Span`1" /> 元素的引用，或 <see langword="null" />，如果 <see cref="P:System.Span`1.IsEmpty" /> 为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Span`1.IsEmpty">
      <summary>返回一个值，该值指示当前的 <see cref="T:System.Span`1" /> 是否为空。</summary>
      <returns>
        <see langword="true" />如果当前范围为空, 则为; 否则为。否则为<see langword="false" />。</returns>
    </member>
    <member name="P:System.Span`1.Item(System.Int32)">
      <summary>获取指定基于零的索引处的元素。</summary>
      <param name="index">元素的索引（索引从零开始）。</param>
      <returns>指定索引处的元素。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于零，或者大于或等于 <see cref="P:System.Span`1.Length" />。</exception>
    </member>
    <member name="P:System.Span`1.Length">
      <summary>返回当前范围的长度。</summary>
      <returns>当前跨度的长度。</returns>
    </member>
    <member name="M:System.Span`1.op_Equality(System.Span{`0},System.Span{`0})">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Span`1" /> 对象是否相等。</summary>
      <param name="left">要比较的第一个范围。</param>
      <param name="right">要比较的第二个范围。</param>
      <returns>如果两个 <see cref="T:System.Span`1" /> 对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Span`1.op_Implicit(System.ArraySegment{`0})~System.Span{`0}">
      <summary>定义 <see cref="T:System.ArraySegment`1" /> 到 <see cref="T:System.Span`1" /> 的隐式转换。</summary>
      <param name="segment">要转换为 <see cref="T:System.Span`1" /> 的数组段。</param>
      <returns>与数组段相对应的范围。</returns>
    </member>
    <member name="M:System.Span`1.op_Implicit(System.Span{`0})~System.ReadOnlySpan{`0}">
      <summary>定义 <see cref="T:System.Span`1" /> 到 <see cref="T:System.ReadOnlySpan`1" /> 的隐式转换。</summary>
      <param name="span">要转换为 <see cref="T:System.ReadOnlySpan`1" /> 的对象。</param>
      <returns>与当前实例对应的只读范围。</returns>
    </member>
    <member name="M:System.Span`1.op_Implicit(T[])~System.Span{`0}">
      <summary>定义数组到 <see cref="T:System.Span`1" /> 的隐式转换。</summary>
      <param name="array">要转换为 <see cref="T:System.Span`1" /> 的数组。</param>
      <returns>与 <paramref name="array" /> 对应的范围。</returns>
    </member>
    <member name="M:System.Span`1.op_Inequality(System.Span{`0},System.Span{`0})">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Span`1" /> 对象是否不相等。</summary>
      <param name="left">要比较的第一个范围。</param>
      <param name="right">要比较的第二个范围。</param>
      <returns>如果两个 <see cref="T:System.Span`1" /> 对象不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Span`1.Slice(System.Int32)">
      <summary>从指定索引处开始的当前范围外形成切片。</summary>
      <param name="start">开始切片处的索引。</param>
      <returns>由当前范围（从 <paramref name="start" /> 到范围末尾）的所有元素组成的范围。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" /> 小于零或大于 <see cref="P:System.Span`1.Length" />。</exception>
    </member>
    <member name="M:System.Span`1.Slice(System.Int32,System.Int32)">
      <summary>从指定长度的指定索引处开始，在当前范围外形成切片。</summary>
      <param name="start">开始切片处的索引。</param>
      <param name="length">切片所需的长度。</param>
      <returns>由当前范围（从 <paramref name="start" /> 开始）中 <paramref name="length" /> 元素组成的范围。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" /> 或 <paramref name="start" /> + <paramref name="length" /> 小于零或大于 <see cref="P:System.Span`1.Length" />。</exception>
    </member>
    <member name="M:System.Span`1.ToArray">
      <summary>将此范围的内容复制到新数组中。</summary>
      <returns>包含当前范围中数据的数组。</returns>
    </member>
    <member name="M:System.Span`1.ToString">
      <summary>返回此 <see cref="T:System.Span`1" /> 对象的字符串表示形式。</summary>
      <returns>此 <see cref="T:System.Span`1" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="M:System.Span`1.TryCopyTo(System.Span{`0})">
      <summary>尝试将当前 <see cref="T:System.Span`1" /> 复制到目标 <see cref="T:System.Span`1" />，并返回一个指示复制操作是否成功的值。</summary>
      <param name="destination">复制操作的目标。</param>
      <returns>如果复制操作已成功，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.StackOverflowException">
      <summary>因包含的嵌套方法调用过多而导致执行堆栈溢出时引发的异常。 此类不能被继承。</summary>
    </member>
    <member name="M:System.StackOverflowException.#ctor">
      <summary>初始化 <see cref="T:System.StackOverflowException" /> 类的新实例，将新实例的 <see cref="P:System.Exception.Message" /> 属性设置为系统提供的描述错误的消息，如“所请求的操作导致堆栈溢出”。 此消息将当前系统区域性考虑在内。</summary>
    </member>
    <member name="M:System.StackOverflowException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.StackOverflowException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。 message 的内容被设计为人可理解的形式。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.StackOverflowException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.StackOverflowException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="T:System.STAThreadAttribute">
      <summary>指示应用程序的 COM 线程模型是单线程单元 (STA)。</summary>
    </member>
    <member name="M:System.STAThreadAttribute.#ctor">
      <summary>初始化 <see cref="T:System.STAThreadAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.String">
      <summary>将文本表示为 UTF-16 代码单元的序列。</summary>
    </member>
    <member name="M:System.String.#ctor(System.Char*)">
      <summary>将 <see cref="T:System.String" /> 类的新实例初始化为由指向 Unicode 字符数组的指定指针指示的值。</summary>
      <param name="value">指向以 null 终止的 Unicode 字符数组的指针。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">当前进程不具有对所有通过地址访问的字符的读取访问权限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 指定的数组包含无效的 Unicode 字符，或 <paramref name="value" /> 指定的地址小于 64000。</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char*,System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.String" /> 类的新实例初始化为由指向 Unicode 字符数组的指定指针指示的值、该数组内的起始字符位置和一个长度指示的值。</summary>
      <param name="value">指向 Unicode 字符数组的指针。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <param name="length">要使用的 <paramref name="value" /> 内的字符数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小于零，<paramref name="value" /> + <paramref name="startIndex" /> 导致指针溢出，或者当前进程不具有对所有寻址字符的读取访问权限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 指定的数组包含无效的 Unicode 字符，或 <paramref name="value" /> + <paramref name="startIndex" /> 指定的地址小于 64000。</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char,System.Int32)">
      <summary>将 <see cref="T:System.String" /> 类的新实例初始化为由重复指定次数的指定 Unicode 字符指示的值。</summary>
      <param name="c">一个 Unicode 字符。</param>
      <param name="count">
        <paramref name="c" /> 出现的次数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于零。</exception>
    </member>
    <member name="M:System.String.#ctor(System.Char[])">
      <summary>将 <see cref="T:System.String" /> 类的新实例初始化为由 Unicode 字符数组指示的值。</summary>
      <param name="value">Unicode 字符的数组。</param>
    </member>
    <member name="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.String" /> 类的新实例初始化为由 Unicode 字符数组、该数组内的起始字符位置和一个长度指示的值。</summary>
      <param name="value">Unicode 字符的数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <param name="length">要使用的 <paramref name="value" /> 内的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小于零。  
或 
<paramref name="startIndex" /> 与 <paramref name="length" /> 的和大于 <paramref name="value" /> 中的元素数。</exception>
    </member>
    <member name="M:System.String.#ctor(System.ReadOnlySpan{System.Char})">
      <param name="value" />
    </member>
    <member name="M:System.String.#ctor(System.SByte*)">
      <summary>将 <see cref="T:System.String" /> 类的新实例初始化为由指向 8 位有符号整数数组的指针指示的值。</summary>
      <param name="value">一个指针，指向以 null 结尾的 8 位带符号整数数组。 使用当前系统代码页编码（即由 <see cref="P:System.Text.Encoding.Default" /> 指定的编码）来解释整数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">如果 <paramref name="value" /> 采用 ANSI 进行编码，那么无法使用 <paramref name="value" /> 初始化 <see cref="T:System.String" /> 的新实例。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">要初始化的新字符串的长度（该长度由 <paramref name="value" /> 的 null 终止字符确定）太大，无法分配。</exception>
      <exception cref="T:System.AccessViolationException">
        <paramref name="value" /> 指定的地址无效。</exception>
    </member>
    <member name="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.String" /> 类的新实例初始化为由指向 8 位有符号整数数组的指定指针、该数组内的起始位置和一个长度指示的值。</summary>
      <param name="value">指向 8 位带符号整数数组的指针。 使用当前系统代码页编码（即由 <see cref="P:System.Text.Encoding.Default" /> 指定的编码）来解释整数。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <param name="length">要使用的 <paramref name="value" /> 内的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小于零。  
或 
由 <paramref name="value" /> + <paramref name="startIndex" /> 指定的地址对于当前平台而言太大；也就是说，此地址计算溢出。  
或 
要初始化的新字符串的长度太大，无法分配。</exception>
      <exception cref="T:System.ArgumentException">由 <paramref name="value" /> + <paramref name="startIndex" /> 指定的地址小于 64K。  
或 
如果 <paramref name="value" /> 采用 ANSI 进行编码，那么无法使用 <paramref name="value" /> 初始化 <see cref="T:System.String" /> 的新实例。</exception>
      <exception cref="T:System.AccessViolationException">
        <paramref name="value" />、<paramref name="startIndex" /> 和 <paramref name="length" /> 共同指定的地址无效。</exception>
    </member>
    <member name="M:System.String.#ctor(System.SByte*,System.Int32,System.Int32,System.Text.Encoding)">
      <summary>将 <see cref="T:System.String" /> 的新实例初始化为由指向 8 位有符号整数数组的指定指针、该数组内的起始位置、长度以及 <see cref="T:System.Text.Encoding" /> 对象指示的值。</summary>
      <param name="value">指向 8 位带符号整数数组的指针。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始位置。</param>
      <param name="length">要使用的 <paramref name="value" /> 内的字符数。</param>
      <param name="enc">一个对象，用于指定如何对 <paramref name="value" /> 所引用的数组进行编码。 如果 <paramref name="enc" /> 为 <see langword="null" />，则假定以 ANSI 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小于零。  
或 
由 <paramref name="value" /> + <paramref name="startIndex" /> 指定的地址对于当前平台而言太大；也就是说，此地址计算溢出。  
或 
要初始化的新字符串的长度太大，无法分配。</exception>
      <exception cref="T:System.ArgumentException">由 <paramref name="value" /> + <paramref name="startIndex" /> 指定的地址小于 64K。  
或 
如果 <paramref name="value" /> 按照指定的 <paramref name="enc" /> 进行编码，那么无法使用 <paramref name="value" /> 初始化 <see cref="T:System.String" /> 的新实例。</exception>
      <exception cref="T:System.AccessViolationException">
        <paramref name="value" />、<paramref name="startIndex" /> 和 <paramref name="length" /> 共同指定的地址无效。</exception>
    </member>
    <member name="P:System.String.Chars(System.Int32)">
      <summary>获取当前 <see cref="T:System.Char" /> 对象中位于指定位置的 <see cref="T:System.String" /> 对象。</summary>
      <param name="index">当前的字符串中的位置。</param>
      <returns>位于 <paramref name="index" /> 位置的对象。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 大于或等于此对象的长度或小于零。</exception>
    </member>
    <member name="M:System.String.Clone">
      <summary>返回对此 <see cref="T:System.String" />实例的引用。</summary>
      <returns>此 <see cref="T:System.String" /> 实例。</returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>比较两个指定的 <see cref="T:System.String" /> 对象的子字符串，并返回一个指示二者在排序顺序中的相对位置的整数。</summary>
      <param name="strA">要在比较中使用的第一个字符串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字符串的位置。</param>
      <param name="strB">要在比较中使用的第二个字符串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字符串的位置。</param>
      <param name="length">要比较的子字符串中字符的最大数量。</param>
      <returns>一个 32 位有符号整数，指示两个比较数之间的词法关系。  
  值 
  条件 
  小于零 
  <paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之前。  

  零 
  子字符串在排序顺序中出现的位置相同或 <paramref name="length" /> 为零。  

  大于零 
  <paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之后。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> 大于 <paramref name="strA" />.<see cref="P:System.String.Length" />。  
或 
 <paramref name="indexB" /> 大于 <paramref name="strB" />.<see cref="P:System.String.Length" />。  

或 - 
<paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 为负数。  

或 
<paramref name="indexA" /> 或 <paramref name="indexB" /> 为 <see langword="null" />，并且 <paramref name="length" /> 大于零。</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean)">
      <summary>比较两个指定的 <see cref="T:System.String" /> 对象的子字符串（忽略或考虑其大小写），并返回一个整数，指示二者在排序顺序中的相对位置。</summary>
      <param name="strA">要在比较中使用的第一个字符串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字符串的位置。</param>
      <param name="strB">要在比较中使用的第二个字符串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字符串的位置。</param>
      <param name="length">要比较的子字符串中字符的最大数量。</param>
      <param name="ignoreCase">若要在比较过程中忽略大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>一个 32 位带符号整数，指示两个比较数之间的词法关系。  
  值 
  条件 
  小于零 
  <paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之前。  

  零 
  子字符串在排序顺序中出现的位置相同或 <paramref name="length" /> 为零。  

  大于零 
  <paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之后。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> 大于 <paramref name="strA" />.<see cref="P:System.String.Length" />。  

或 - 
<paramref name="indexB" /> 大于 <paramref name="strB" />.<see cref="P:System.String.Length" />。  

或 - 
<paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 为负数。  


或 
<paramref name="indexA" /> 或 <paramref name="indexB" /> 为 <see langword="null" />，并且 <paramref name="length" /> 大于零。</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
      <summary>比较两个指定的 <see cref="T:System.String" /> 对象（其中忽略或考虑其大小写，并使用区域性特定的信息干预比较），并返回一个整数，指示二者在排序顺序中的相对位置。</summary>
      <param name="strA">要在比较中使用的第一个字符串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字符串的位置。</param>
      <param name="strB">要在比较中使用的第二个字符串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字符串的位置。</param>
      <param name="length">要比较的子字符串中字符的最大数量。</param>
      <param name="ignoreCase">若要在比较过程中忽略大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="culture">一个对象，提供区域性特定的比较信息。</param>
      <returns>一个整数，指示两个比较字之间的词法关系。  
  值 
  条件 
  小于零 
  <paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之前。  

  零 
  子字符串在排序顺序中出现的位置相同或 <paramref name="length" /> 为零。  

  大于零 
  <paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之后。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> 大于 <paramref name="strA" />.<see cref="P:System.String.Length" />。  
或 
 <paramref name="indexB" /> 大于 <paramref name="strB" />.<see cref="P:System.String.Length" />。  

或 - 
<paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 为负数。  

或 
<paramref name="strA" /> 或 <paramref name="strB" /> 为 <see langword="null" />，并且 <paramref name="length" /> 大于零。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
      <summary>对两个指定 <see cref="T:System.String" /> 对象的子字符串进行比较，使用指定的比较选项和区域性特定的信息来影响比较，并返回一个整数，该整数指示这两个子字符串在排序顺序中的关系。</summary>
      <param name="strA">要在比较中使用的第一个字符串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字符串开始的位置。</param>
      <param name="strB">要在比较中使用的第二个字符串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字符串开始的位置。</param>
      <param name="length">要比较的子字符串中字符的最大数量。</param>
      <param name="culture">一个对象，提供区域性特定的比较信息。</param>
      <param name="options">要在执行比较时使用的选项（如忽略大小写或符号）。</param>
      <returns>一个整数，该整数用于指示两个子字符串之间的词法关系，如下表所示。  
  值 
  条件 
  小于零 
  <paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之前。  

  零 
  子字符串在排序顺序中出现的位置相同或 <paramref name="length" /> 为零。  

  大于零 
  <paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之后。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> 大于 <paramref name="strA" /><see langword=".Length" />。  
或 
 <paramref name="indexB" /> 大于 <paramref name="strB" /><see langword=".Length" />。  
或 
 <paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 为负数。  

或 - 
<paramref name="strA" /> 或 <paramref name="strB" /> 为 <see langword="null" />，并且 <paramref name="length" /> 大于零。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>使用指定的规则比较两个指定的 <see cref="T:System.String" /> 对象的子字符串，并返回一个整数，指示二者在排序顺序中的相对位置。</summary>
      <param name="strA">要在比较中使用的第一个字符串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字符串的位置。</param>
      <param name="strB">要在比较中使用的第二个字符串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字符串的位置。</param>
      <param name="length">要比较的子字符串中字符的最大数量。</param>
      <param name="comparisonType">一个枚举值，用于指定比较中要使用的规则。</param>
      <returns>一个 32 位带符号整数，指示两个比较数之间的词法关系。  
  值 
  条件 
  小于零 
  <paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之前。  

  零 
  子字符串在排序顺序中出现的位置相同，或 <paramref name="length" /> 参数为零。  

  大于零 
  <paramref name="strA" /> 中的子字符串在排序顺序中位于 <paramref name="strB" /> 中的子字符串之后。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="indexA" /> 大于 <paramref name="strA" />.<see cref="P:System.String.Length" />。  

或 - 
<paramref name="indexB" /> 大于 <paramref name="strB" />.<see cref="P:System.String.Length" />。  

或 
 <paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 为负数。  

或 - 
<paramref name="indexA" /> 或 <paramref name="indexB" /> 为 <see langword="null" />，并且 <paramref name="length" /> 大于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.String)">
      <summary>比较两个指定的 <see cref="T:System.String" /> 对象，并返回一个指示二者在排序顺序中的相对位置的整数。</summary>
      <param name="strA">要比较的第一个字符串。</param>
      <param name="strB">要比较的第二个字符串。</param>
      <returns>一个 32 位带符号整数，指示两个比较数之间的词法关系。  
  值 
  条件 
  小于零 
 <paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之前。  

  零 
 <paramref name="strA" /> 与 <paramref name="strB" /> 在排序顺序中出现的位置相同。  

  大于零 
 <paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之后。</returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Boolean)">
      <summary>比较两个指定的 <see cref="T:System.String" /> 对象（其中忽略或考虑其大小写），并返回一个整数，指示二者在排序顺序中的相对位置。</summary>
      <param name="strA">要比较的第一个字符串。</param>
      <param name="strB">要比较的第二个字符串。</param>
      <param name="ignoreCase">若要在比较过程中忽略大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>一个 32 位带符号整数，指示两个比较数之间的词法关系。  
  值 
  条件 
  小于零 
 <paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之前。  

  零 
 <paramref name="strA" /> 与 <paramref name="strB" /> 在排序顺序中出现的位置相同。  

  大于零 
 <paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之后。</returns>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>比较两个指定的 <see cref="T:System.String" /> 对象（其中忽略或考虑其大小写，并使用区域性特定的信息干预比较），并返回一个整数，指示二者在排序顺序中的相对位置。</summary>
      <param name="strA">要比较的第一个字符串。</param>
      <param name="strB">要比较的第二个字符串。</param>
      <param name="ignoreCase">若要在比较过程中忽略大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="culture">一个对象，提供区域性特定的比较信息。</param>
      <returns>一个 32 位带符号整数，指示两个比较数之间的词法关系。  
  值 
  条件 
  小于零 
 <paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之前。  

  零 
 <paramref name="strA" /> 与 <paramref name="strB" /> 在排序顺序中出现的位置相同。  

  大于零 
 <paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之后。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.Globalization.CultureInfo,System.Globalization.CompareOptions)">
      <summary>对两个指定的 <see cref="T:System.String" /> 对象进行比较，使用指定的比较选项和区域性特定的信息来影响比较，并返回一个整数，该整数指示这两个字符串在排序顺序中的关系。</summary>
      <param name="strA">要比较的第一个字符串。</param>
      <param name="strB">要比较的第二个字符串。</param>
      <param name="culture">提供区域性特定的比较信息的区域性。</param>
      <param name="options">要在执行比较时使用的选项（如忽略大小写或符号）。</param>
      <returns>一个 32 位带符号整数，该整数指示 <paramref name="strA" /> 与 <paramref name="strB" /> 之间的词法关系，如下表所示 
  值 
  条件 
  小于零 
 <paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之前。  
  零 
 <paramref name="strA" /> 与 <paramref name="strB" /> 在排序顺序中出现的位置相同。  
  大于零 
 <paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之后。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是 <see cref="T:System.Globalization.CompareOptions" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.Compare(System.String,System.String,System.StringComparison)">
      <summary>使用指定的规则比较两个指定的 <see cref="T:System.String" /> 对象，并返回一个整数，指示二者在排序顺序中的相对位置。</summary>
      <param name="strA">要比较的第一个字符串。</param>
      <param name="strB">要比较的第二个字符串。</param>
      <param name="comparisonType">一个枚举值，用于指定比较中要使用的规则。</param>
      <returns>一个 32 位带符号整数，指示两个比较数之间的词法关系。  
  值 
  条件 
  小于零 
 <paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之前。  

  零 
 <paramref name="strA" /> 与 <paramref name="strB" /> 在排序顺序中的位置相同。  

  大于零 
 <paramref name="strA" /> 在排序顺序中位于 <paramref name="strB" /> 之后。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</exception>
      <exception cref="T:System.NotSupportedException">不支持 <see cref="T:System.StringComparison" />。</exception>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>通过计算每个子字符串中相应 <see cref="T:System.String" /> 对象的数值来比较两个指定的 <see cref="T:System.Char" /> 对象的子字符串。</summary>
      <param name="strA">要在比较中使用的第一个字符串。</param>
      <param name="indexA">
        <paramref name="strA" /> 中子字符串的起始索引。</param>
      <param name="strB">要在比较中使用的第二个字符串。</param>
      <param name="indexB">
        <paramref name="strB" /> 中子字符串的起始索引。</param>
      <param name="length">要比较的子字符串中字符的最大数量。</param>
      <returns>一个 32 位带符号整数，指示两个比较数之间的词法关系。  
  值 
  条件 
  小于零 
  <paramref name="strA" /> 中的子字符串小于 <paramref name="strB" /> 中的子字符串。  

  零 
  子字符串相等，或者 <paramref name="length" /> 为零。  

  大于零 
  <paramref name="strA" /> 中的子字符串大于 <paramref name="strB" /> 中的子字符串。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="strA" /> 不为 <see langword="null" />，且 <paramref name="indexA" /> 大于 <paramref name="strA" />.<see cref="P:System.String.Length" />。  
或 
 <paramref name="strB" /> 不为 <see langword="null" /> ，且 <paramref name="indexB" /> 大于 <paramref name="strB" />.<see cref="P:System.String.Length" />。  
或 
 <paramref name="indexA" />、<paramref name="indexB" /> 或 <paramref name="length" /> 为负数。</exception>
    </member>
    <member name="M:System.String.CompareOrdinal(System.String,System.String)">
      <summary>通过计算每个字符串中相应 <see cref="T:System.String" /> 对象的数值来比较两个指定的 <see cref="T:System.Char" /> 对象。</summary>
      <param name="strA">要比较的第一个字符串。</param>
      <param name="strB">要比较的第二个字符串。</param>
      <returns>一个整数，指示两个比较字之间的词法关系。  
  值 
  条件 
  小于零 
 <paramref name="strA" /> 小于 <paramref name="strB" />。  

  零 
 <paramref name="strA" /> 与 <paramref name="strB" /> 相等。  

  大于零 
 <paramref name="strA" /> 大于 <paramref name="strB" />。</returns>
    </member>
    <member name="M:System.String.CompareTo(System.Object)">
      <summary>将此实例与指定的 <see cref="T:System.Object" /> 进行比较，并指示此实例在排序顺序中是位于指定的 <see cref="T:System.Object" /> 之前、之后还是与其出现在同一位置。</summary>
      <param name="value">一个对象，其计算结果为 <see cref="T:System.String" />。</param>
      <returns>一个 32 位带符号整数，该整数指示此实例在排序顺序中是位于 <paramref name="value" /> 参数之前、之后还是与其出现在同一位置。  
  值 
  条件 
  小于零 
  此实例位于 <paramref name="value" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="value" /> 相同。  

  大于零 
  此实例位于 <paramref name="value" /> 之后。  

- 或 - 
 <paramref name="value" /> 为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.String" />。</exception>
    </member>
    <member name="M:System.String.CompareTo(System.String)">
      <summary>将此实例与指定的 <see cref="T:System.String" /> 对象进行比较，并指示此实例在排序顺序中是位于指定的字符串之前、之后还是与其出现在同一位置。</summary>
      <param name="strB">要与此实例进行比较的字符串。</param>
      <returns>一个 32 位带符号整数，该整数指示此实例在排序顺序中是位于 <paramref name="strB" /> 参数之前、之后还是与其出现在同一位置。  
  值 
  条件 
  小于零 
  此实例位于 <paramref name="strB" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="strB" /> 相同。  

  大于零 
  此实例位于 <paramref name="strB" /> 之后。  

- 或 - 
 <paramref name="strB" /> 为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})">
      <summary>串联类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.String" /> 构造集合的成员。</summary>
      <param name="values">一个集合对象，该对象实现 <see cref="T:System.Collections.Generic.IEnumerable`1" />，且其泛型类型参数为 <see cref="T:System.String" />。</param>
      <returns>
        <paramref name="values" /> 中的串联字符串；如果 <paramref name="values" /> 为空 <see langword="IEnumerable(Of String)" />，则为 <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.Concat(System.Object)">
      <summary>创建指定对象的字符串表示形式。</summary>
      <param name="arg0">要表示的对象，或 <see langword="null" />。</param>
      <returns>
        <paramref name="arg0" /> 的值的字符串表示形式，如果 <see cref="F:System.String.Empty" /> 为 <paramref name="arg0" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object)">
      <summary>连接两个指定对象的字符串表示形式。</summary>
      <param name="arg0">要连接的第一个对象。</param>
      <param name="arg1">要连接的第二个对象。</param>
      <returns>
        <paramref name="arg0" /> 和 <paramref name="arg1" /> 的值的串联字符串表示形式。</returns>
    </member>
    <member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
      <summary>连接三个指定对象的字符串表示形式。</summary>
      <param name="arg0">要连接的第一个对象。</param>
      <param name="arg1">要连接的第二个对象。</param>
      <param name="arg2">要连接的第三个对象。</param>
      <returns>
        <paramref name="arg0" />、<paramref name="arg1" /> 和 <paramref name="arg2" /> 的值的串联字符串表示形式。</returns>
    </member>
    <member name="M:System.String.Concat(System.Object[])">
      <summary>连接指定 <see cref="T:System.Object" /> 数组中的元素的字符串表示形式。</summary>
      <param name="args">一个对象数组，其中包含要连接的元素。</param>
      <returns>
        <paramref name="args" /> 中元素的值的串联字符串表示形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="args" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.OutOfMemoryException">内存不足。</exception>
    </member>
    <member name="M:System.String.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>连接两个指定的只读字符范围的字符串表示形式。</summary>
      <param name="str0">要连接的第一个只读字符范围。</param>
      <param name="str1">要连接的第二个只读字符范围。</param>
      <returns>
        <paramref name="str0" /> 和 <paramref name="str1" /> 的值的串联字符串表示形式。</returns>
    </member>
    <member name="M:System.String.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>连接三个指定的只读字符范围的字符串表示形式。</summary>
      <param name="str0">要连接的第一个只读字符范围。</param>
      <param name="str1">要连接的第二个只读字符范围。</param>
      <param name="str2">要连接的第三个只读字符范围。</param>
      <returns>
        <paramref name="str0" />、<paramref name="str1" /> 和 <paramref name="str2" /> 的值的已连接字符串表示形式。</returns>
    </member>
    <member name="M:System.String.Concat(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>连接四个指定的只读字符范围的字符串表示形式。</summary>
      <param name="str0">要连接的第一个只读字符范围。</param>
      <param name="str1">要连接的第二个只读字符范围。</param>
      <param name="str2">要连接的第三个只读字符范围。</param>
      <param name="str3">要连接的第四个只读字符范围。</param>
      <returns>
        <paramref name="str0" />、<paramref name="str1" />、<paramref name="str2" /> 和 <paramref name="str3" /> 的值的已连接字符串表示形式。</returns>
    </member>
    <member name="M:System.String.Concat(System.String,System.String)">
      <summary>连接 <see cref="T:System.String" /> 的两个指定实例。</summary>
      <param name="str0">要串联的第一个字符串。</param>
      <param name="str1">要串联的第二个字符串。</param>
      <returns>
        <paramref name="str0" /> 和 <paramref name="str1" /> 的串联。</returns>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String)">
      <summary>连接 <see cref="T:System.String" /> 的三个指定实例。</summary>
      <param name="str0">要串联的第一个字符串。</param>
      <param name="str1">要串联的第二个字符串。</param>
      <param name="str2">要比较的第三个字符串。</param>
      <returns>
        <paramref name="str0" />、<paramref name="str1" /> 和 <paramref name="str2" /> 的串联。</returns>
    </member>
    <member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
      <summary>连接 <see cref="T:System.String" /> 的四个指定实例。</summary>
      <param name="str0">要串联的第一个字符串。</param>
      <param name="str1">要串联的第二个字符串。</param>
      <param name="str2">要比较的第三个字符串。</param>
      <param name="str3">要比较的第四个字符串。</param>
      <returns>
        <paramref name="str0" />、<paramref name="str1" />、<paramref name="str2" /> 和 <paramref name="str3" /> 的串联。</returns>
    </member>
    <member name="M:System.String.Concat(System.String[])">
      <summary>连接指定的 <see cref="T:System.String" /> 数组的元素。</summary>
      <param name="values">字符串实例的数组。</param>
      <returns>
        <paramref name="values" /> 的串联元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.OutOfMemoryException">内存不足。</exception>
    </member>
    <member name="M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>串联 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 实现的成员。</summary>
      <param name="values">一个实现 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 接口的集合对象。</param>
      <typeparam name="T">
        <paramref name="values" /> 成员的类型。</typeparam>
      <returns>
        <paramref name="values" /> 中的串联成员。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.Contains(System.Char)">
      <summary>返回一个值，该值指示指定的字符是否出现在此字符串中。</summary>
      <param name="value">要查找的字符。</param>
      <returns>如果 <paramref name="value" /> 参数在此字符串中出现，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.String.Contains(System.Char,System.StringComparison)">
      <summary>使用指定的比较规则返回一个值，该值指示指定的字符是否出现在此字符串中。</summary>
      <param name="value">要查找的字符。</param>
      <param name="comparisonType">一个枚举值，用于指定比较中要使用的规则。</param>
      <returns>如果 <paramref name="value" /> 参数在此字符串中出现，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.String.Contains(System.String)">
      <summary>返回一个值，该值指示指定的子串是否出现在此字符串中。</summary>
      <param name="value">要搜寻的字符串。</param>
      <returns>如果 <see langword="true" /> 参数出现在此字符串中，或者 <paramref name="value" /> 为空字符串 ("")，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.Contains(System.String,System.StringComparison)">
      <summary>使用指定的比较规则返回一个值，该值指示指定的字符串是否出现在此字符串中。</summary>
      <param name="value">要搜寻的字符串。</param>
      <param name="comparisonType">一个枚举值，用于指定比较中要使用的规则。</param>
      <returns>如果 <see langword="true" /> 参数出现在此字符串中，或者 <paramref name="value" /> 为空字符串 ("")，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.String.Copy(System.String)">
      <summary>创建一个与指定的 <see cref="T:System.String" /> 具有相同值的 <see cref="T:System.String" /> 的新实例。</summary>
      <param name="str">要复制的字符串。</param>
      <returns>值与 <paramref name="str" /> 相同的新字符串。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>将指定数目的字符从此实例中的指定位置复制到 Unicode 字符数组中的指定位置。</summary>
      <param name="sourceIndex">要复制的此实例中第一个字符的索引。</param>
      <param name="destination">此实例中的字符所复制到的 Unicode 字符数组。</param>
      <param name="destinationIndex">
        <paramref name="destination" /> 中的索引，在此处开始复制操作。</param>
      <param name="count">此实例中要复制到 <paramref name="destination" /> 的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" />、<paramref name="destinationIndex" /> 或 <paramref name="count" /> 为负 

或 - 
<paramref name="sourceIndex" /> 不标识当前实例中的位置。  

或 
 <paramref name="destinationIndex" /> 不标识 <paramref name="destination" /> 数组中的有效索引。  
或 
 <paramref name="count" /> 大于从 <paramref name="sourceIndex" /> 到此实例末尾的子字符串的长度 

或 - 
<paramref name="count" /> 大于从 <paramref name="destinationIndex" /> 到 <paramref name="destination" /> 数组末尾的子数组的长度。</exception>
    </member>
    <member name="M:System.String.Create``1(System.Int32,``0,System.Buffers.SpanAction{System.Char,``0})">
      <param name="length" />
      <param name="state" />
      <param name="action" />
      <typeparam name="TState" />
    </member>
    <member name="F:System.String.Empty">
      <summary>表示空字符串。 此字段为只读。</summary>
    </member>
    <member name="M:System.String.EndsWith(System.Char)">
      <param name="value" />
    </member>
    <member name="M:System.String.EndsWith(System.String)">
      <summary>确定此字符串实例的结尾是否与指定的字符串匹配。</summary>
      <param name="value">要与此实例末尾的子字符串进行比较的字符串。</param>
      <returns>如果 <see langword="true" /> 与此实例的末尾匹配，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.EndsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>确定在使用指定的区域性进行比较时此字符串实例的结尾是否与指定的字符串匹配。</summary>
      <param name="value">要与此实例末尾的子字符串进行比较的字符串。</param>
      <param name="ignoreCase">若要在比较过程中忽略大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="culture">确定如何对此实例与 <paramref name="value" /> 进行比较的区域性信息。 如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前区域性。</param>
      <returns>如果 <see langword="true" /> 参数与此字符串的末尾匹配，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.EndsWith(System.String,System.StringComparison)">
      <summary>确定使用指定的比较选项进行比较时此字符串实例的结尾是否与指定的字符串匹配。</summary>
      <param name="value">要与此实例末尾的子字符串进行比较的字符串。</param>
      <param name="comparisonType">枚举值之一，用于确定如何比较此字符串与 <paramref name="value" />。</param>
      <returns>如果 <see langword="true" /> 参数与此字符串的末尾匹配，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.EnumerateRunes">
      <summary>从此字符串返回 <see cref="T:System.Text.Rune" /> 的枚举。</summary>
      <returns>一个字符串 Rune 枚举器。</returns>
    </member>
    <member name="M:System.String.Equals(System.Object)">
      <summary>确定此实例是否与指定的对象（也必须是 <see cref="T:System.String" /> 对象）具有相同的值。</summary>
      <param name="obj">要与此实例进行比较的字符串。</param>
      <returns>如果 <see langword="true" /> 是一个 <paramref name="obj" /> 且其值与此实例相等，则为 <see cref="T:System.String" />；否则为 <see langword="false" />。  如果 <paramref name="obj" /> 为 <see langword="null" />，则此方法返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.String.Equals(System.String)">
      <summary>确定此实例是否与另一个指定的 <see cref="T:System.String" /> 对象具有相同的值。</summary>
      <param name="value">要与此实例进行比较的字符串。</param>
      <returns>如果 <see langword="true" /> 参数的值与此实例的值相同，则为 <paramref name="value" />；否则为 <see langword="false" />。 如果 <paramref name="value" /> 为 <see langword="null" />，则此方法返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.String.Equals(System.String,System.String)">
      <summary>确定两个指定的 <see cref="T:System.String" /> 对象是否具有相同的值。</summary>
      <param name="a">要比较的第一个字符串，或 <see langword="null" />。</param>
      <param name="b">要比较的第二个字符串，或 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 的值与 <paramref name="a" /> 的值相同，则为 <paramref name="b" />；否则为 <see langword="false" />。 如果 <paramref name="a" /> 和 <paramref name="b" /> 均为 <see langword="null" />，此方法将返回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.String.Equals(System.String,System.String,System.StringComparison)">
      <summary>确定两个指定的 <see cref="T:System.String" /> 对象是否具有相同的值。 参数指定区域性、大小写以及比较所用的排序规则。</summary>
      <param name="a">要比较的第一个字符串，或 <see langword="null" />。</param>
      <param name="b">要比较的第二个字符串，或 <see langword="null" />。</param>
      <param name="comparisonType">枚举值之一，用于指定比较的规则。</param>
      <returns>如果 <see langword="true" /> 参数的值与 <paramref name="a" /> 参数的值相同，则为 <paramref name="b" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.Equals(System.String,System.StringComparison)">
      <summary>确定此字符串是否与另一个指定的 <see cref="T:System.String" /> 对象具有相同的值。 参数指定区域性、大小写以及比较所用的排序规则。</summary>
      <param name="value">要与此实例进行比较的字符串。</param>
      <param name="comparisonType">枚举值之一，用于指定如何比较字符串。</param>
      <returns>如果 <see langword="true" /> 参数的值与此字符串相同，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object)">
      <summary>将指定字符串中的一个或多个格式项替换为对应对象的字符串表示形式。 参数提供区域性特定的格式设置信息。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要设置格式的对象。</param>
      <returns>
        <paramref name="format" /> 的副本，其中的一个或多个格式项已替换为 <paramref name="arg0" /> 的字符串表示形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。  
或 
格式项的索引不为零。</exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)">
      <summary>将字符串中的格式项替换为两个指定对象的字符串表示形式。 参数提供区域性特定的格式设置信息。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要设置格式的第一个对象。</param>
      <param name="arg1">要设置格式的第二个对象。</param>
      <returns>
        <paramref name="format" /> 的副本，其中的格式项替换为 <paramref name="arg0" /> 和 <paramref name="arg1" /> 的字符串表示形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。  

或 - 
格式项的索引不为零或一。</exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
      <summary>将字符串中的格式项替换为三个指定对象的字符串表示形式。 参数提供区域性特定的格式设置信息。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要设置格式的第一个对象。</param>
      <param name="arg1">要设置格式的第二个对象。</param>
      <param name="arg2">要设置格式的第三个对象。</param>
      <returns>
        <paramref name="format" /> 的副本，其中的格式项已替换为 <paramref name="arg0" />、<paramref name="arg1" /> 和 <paramref name="arg2" /> 的字符串表示形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。  
或 
格式项的索引小于零，或者大于二。</exception>
    </member>
    <member name="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])">
      <summary>将字符串中的格式项替换为指定数组中相应对象的字符串表示形式。 参数提供区域性特定的格式设置信息。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="format">复合格式字符串。</param>
      <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
      <returns>
        <paramref name="format" /> 的副本，其中格式项已替换为 <paramref name="args" /> 中相应对象的字符串表示形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 或 <paramref name="args" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。  
或 
格式项的索引小于零，或者大于或等于 <paramref name="args" /> 数组的长度。</exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object)">
      <summary>将字符串中的一个或多个格式项替换为指定对象的字符串表示形式。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要设置格式的对象。</param>
      <returns>
        <paramref name="format" /> 的副本，其中的任何格式项均替换为 <paramref name="arg0" /> 的字符串表示形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 中的格式项无效。  
或 
格式项的索引不为零。</exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object)">
      <summary>将字符串中的格式项替换为两个指定对象的字符串表示形式。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要设置格式的第一个对象。</param>
      <param name="arg1">要设置格式的第二个对象。</param>
      <returns>
        <paramref name="format" /> 的副本，其中的格式项替换为 <paramref name="arg0" /> 和 <paramref name="arg1" /> 的字符串表示形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。  
或 
格式项的索引不为零或一。</exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object,System.Object,System.Object)">
      <summary>将字符串中的格式项替换为三个指定对象的字符串表示形式。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要设置格式的第一个对象。</param>
      <param name="arg1">要设置格式的第二个对象。</param>
      <param name="arg2">要设置格式的第三个对象。</param>
      <returns>
        <paramref name="format" /> 的副本，其中的格式项已替换为 <paramref name="arg0" />、<paramref name="arg1" /> 和 <paramref name="arg2" /> 的字符串表示形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。  
或 
格式项的索引小于零，或者大于二。</exception>
    </member>
    <member name="M:System.String.Format(System.String,System.Object[])">
      <summary>将指定字符串中的格式项替换为指定数组中相应对象的字符串表示形式。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
      <returns>
        <paramref name="format" /> 的副本，其中格式项已替换为 <paramref name="args" /> 中相应对象的字符串表示形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 或 <paramref name="args" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。  

或 - 
格式项的索引小于零，或者大于或等于 <paramref name="args" /> 数组的长度。</exception>
    </member>
    <member name="M:System.String.GetEnumerator">
      <summary>检索一个可以循环访问此字符串中的每个字符的对象。</summary>
      <returns>枚举器对象。</returns>
    </member>
    <member name="M:System.String.GetHashCode">
      <summary>返回该字符串的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.String.GetHashCode(System.ReadOnlySpan{System.Char})">
      <summary>返回所提供的只读字符范围的哈希代码。</summary>
      <param name="value">一个只读字符范围。</param>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.String.GetHashCode(System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary>使用指定的规则返回所提供的只读字符范围的哈希代码。</summary>
      <param name="value">一个只读字符范围。</param>
      <param name="comparisonType">一个枚举值，用于指定比较中要使用的规则。</param>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.String.GetHashCode(System.StringComparison)">
      <summary>使用指定的规则返回此字符串的哈希代码。</summary>
      <param name="comparisonType">一个枚举值，用于指定比较中要使用的规则。</param>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.String.GetPinnableReference">
      <summary>返回对索引 0 处字符串的元素的引用。</summary>
      <returns>一个字符，表示对索引 0 处字符串的元素的引用。</returns>
      <exception cref="T:System.NullReferenceException">字符串为 NULL。</exception>
    </member>
    <member name="M:System.String.GetTypeCode">
      <summary>返回类 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.String" />。</summary>
      <returns>枚举常数 <see cref="F:System.TypeCode.String" />。</returns>
    </member>
    <member name="M:System.String.IndexOf(System.Char)">
      <summary>报告指定 Unicode 字符在此字符串中的第一个匹配项的从零开始的索引。</summary>
      <param name="value">要查找的 Unicode 字符。</param>
      <returns>如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到，则为 -1。</returns>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32)">
      <summary>报告指定 Unicode 字符在此字符串中的第一个匹配项的从零开始的索引。 该搜索从指定字符位置开始。</summary>
      <param name="value">要查找的 Unicode 字符。</param>
      <param name="startIndex">搜索起始位置。</param>
      <returns>如果找到该字符，则为从字符串的起始位置开始的 <paramref name="value" /> 从零开始的索引位置；否则为 -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于 0（零）或大于此字符串的长度。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
      <summary>报告指定字符在此实例中的第一个匹配项的从零开始的索引。 搜索从指定字符位置开始，并检查指定数量的字符位置。</summary>
      <param name="value">要查找的 Unicode 字符。</param>
      <param name="startIndex">搜索起始位置。</param>
      <param name="count">要检查的字符位置数。</param>
      <returns>如果找到该字符，则为从字符串的起始位置开始的 <paramref name="value" /> 从零开始的索引位置；否则为 -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 或 <paramref name="startIndex" /> 为负数。  

或 - 
<paramref name="startIndex" /> 大于此字符串的长度。  

或 - 
<paramref name="count" /> 大于此字符串的长度减 <paramref name="startIndex" />。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.Char,System.StringComparison)">
      <summary>报告指定 Unicode 字符在此字符串中的第一个匹配项的从零开始的索引。 一个参数指定要用于指定字符的搜索类型。</summary>
      <param name="value">要查找的字符。</param>
      <param name="comparisonType">指定搜索规则的枚举值。</param>
      <returns>如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到，则为 -1。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String)">
      <summary>报告指定字符串在此实例中的第一个匹配项的从零开始的索引。</summary>
      <param name="value">要搜寻的字符串。</param>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到该字符串，则为 -1。 如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 0。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32)">
      <summary>报告指定字符串在此实例中的第一个匹配项的从零开始的索引。 该搜索从指定字符位置开始。</summary>
      <param name="value">要搜寻的字符串。</param>
      <param name="startIndex">搜索起始位置。</param>
      <returns>如果找到该字符串，则为从当前实例的起始位置开始的从零开始的 <paramref name="value" /> 的索引位置；否则为 -1。 如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于 0（零）或大于此字符串的长度。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32)">
      <summary>报告指定字符串在此实例中的第一个匹配项的从零开始的索引。 搜索从指定字符位置开始，并检查指定数量的字符位置。</summary>
      <param name="value">要搜寻的字符串。</param>
      <param name="startIndex">搜索起始位置。</param>
      <param name="count">要检查的字符位置数。</param>
      <returns>如果找到该字符串，则为从当前实例的起始位置开始的从零开始的 <paramref name="value" /> 的索引位置；否则为 -1。 如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 或 <paramref name="startIndex" /> 为负数。  
或 
 <paramref name="startIndex" /> 大于此字符串的长度。  

或 - 
<paramref name="count" /> 大于此字符串的长度减 <paramref name="startIndex" />。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>报告指定的字符串在当前 <see cref="T:System.String" /> 对象中的第一个匹配项的从零开始的索引。 参数指定当前字符串中的起始搜索位置、要搜索的当前字符串中的字符数量，以及要用于指定字符串的搜索类型。</summary>
      <param name="value">要搜寻的字符串。</param>
      <param name="startIndex">搜索起始位置。</param>
      <param name="count">要检查的字符位置数。</param>
      <param name="comparisonType">指定搜索规则的枚举值之一。</param>
      <returns>如果找到该字符串，则为从当前实例的起始位置开始的从零开始的 <paramref name="value" /> 参数索引位置；否则为 -1。 如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 或 <paramref name="startIndex" /> 为负数。  
或 
 <paramref name="startIndex" /> 大于此实例的长度。  
或 
 <paramref name="count" /> 大于此字符串的长度减 <paramref name="startIndex" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>报告指定的字符串在当前 <see cref="T:System.String" /> 对象中的第一个匹配项的从零开始的索引。 参数指定当前字符串中的起始搜索位置以及用于指定字符串的搜索类型。</summary>
      <param name="value">要搜寻的字符串。</param>
      <param name="startIndex">搜索起始位置。</param>
      <param name="comparisonType">指定搜索规则的枚举值之一。</param>
      <returns>如果找到该字符串，则为从当前实例的起始位置开始的从零开始的 <paramref name="value" /> 参数索引位置；否则为 -1。 如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于 0（零）或大于此字符串的长度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.IndexOf(System.String,System.StringComparison)">
      <summary>报告指定的字符串在当前 <see cref="T:System.String" /> 对象中的第一个匹配项的从零开始的索引。 一个参数指定要用于指定字符串的搜索类型。</summary>
      <param name="value">要搜寻的字符串。</param>
      <param name="comparisonType">指定搜索规则的枚举值之一。</param>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 参数的索引位置；如果未找到该字符串，则为 -1。 如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 0。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[])">
      <summary>报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的从零开始的索引。</summary>
      <param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。</param>
      <returns>在此实例中第一次找到 <paramref name="anyOf" /> 中的任意字符的索引位置（从零开始）；如果未找到 <paramref name="anyOf" /> 中的字符，则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32)">
      <summary>报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的从零开始的索引。 该搜索从指定字符位置开始。</summary>
      <param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。</param>
      <param name="startIndex">搜索起始位置。</param>
      <returns>在此实例中第一次找到 <paramref name="anyOf" /> 中的任意字符的索引位置（从零开始）；如果未找到 <paramref name="anyOf" /> 中的字符，则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 为负数。  

或 - 
<paramref name="startIndex" /> 大于此实例中的字符数。</exception>
    </member>
    <member name="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>报告指定 Unicode 字符数组中的任意字符在此实例中第一个匹配项的从零开始的索引。 搜索从指定字符位置开始，并检查指定数量的字符位置。</summary>
      <param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。</param>
      <param name="startIndex">搜索起始位置。</param>
      <param name="count">要检查的字符位置数。</param>
      <returns>在此实例中第一次找到 <paramref name="anyOf" /> 中的任意字符的索引位置（从零开始）；如果未找到 <paramref name="anyOf" /> 中的字符，则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 或 <paramref name="startIndex" /> 为负数。  

或 - 
<paramref name="count" /> + <paramref name="startIndex" /> 大于此实例中的字符数。</exception>
    </member>
    <member name="M:System.String.Insert(System.Int32,System.String)">
      <summary>返回一个新的字符串，在此实例中的指定的索引位置插入指定的字符串。</summary>
      <param name="startIndex">插入的从零开始的索引位置。</param>
      <param name="value">要插入的字符串。</param>
      <returns>与此实例等效的一个新字符串，但在该字符串的 <paramref name="value" /> 位置处插入了 <paramref name="startIndex" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 为负数或大于此实例的长度。</exception>
    </member>
    <member name="M:System.String.Intern(System.String)">
      <summary>检索系统对指定 <see cref="T:System.String" /> 的引用。</summary>
      <param name="str">要在暂存池中搜索的字符串。</param>
      <returns>如果暂存了 <paramref name="str" />，则返回系统对其的引用；否则返回对值为 <paramref name="str" /> 的字符串的新引用。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.IsInterned(System.String)">
      <summary>检索对指定 <see cref="T:System.String" /> 的引用。</summary>
      <param name="str">要在暂存池中搜索的字符串。</param>
      <returns>如果 <paramref name="str" /> 在公共语言运行时的暂存池中，则返回对它的引用；否则返回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.IsNormalized">
      <summary>指示此字符串是否符合 Unicode 范式 C。</summary>
      <returns>如果此字符串符合范式 C，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">当前实例包含无效的 Unicode 字符。</exception>
    </member>
    <member name="M:System.String.IsNormalized(System.Text.NormalizationForm)">
      <summary>指示此字符串是否符合指定的 Unicode 范式。</summary>
      <param name="normalizationForm">一个 Unicode 范式。</param>
      <returns>如果此字符串符合由 <see langword="true" /> 参数指定的范式，则为 <paramref name="normalizationForm" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">当前实例包含无效的 Unicode 字符。</exception>
    </member>
    <member name="M:System.String.IsNullOrEmpty(System.String)">
      <summary>指示指定的字符串是 <see langword="null" /> 还是空字符串 ("")。</summary>
      <param name="value">要测试的字符串。</param>
      <returns>如果 <see langword="true" /> 参数为 <paramref name="value" /> 或空字符串 ("")，则为 <see langword="null" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.String.IsNullOrWhiteSpace(System.String)">
      <summary>指示指定的字符串是 <see langword="null" />、空还是仅由空白字符组成。</summary>
      <param name="value">要测试的字符串。</param>
      <returns>如果 <see langword="true" /> 参数为 <paramref name="value" /> 或 <see langword="null" />，或者如果 <see cref="F:System.String.Empty" /> 仅由空白字符组成，则为 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.String.Join(System.Char,System.Object[])">
      <param name="separator" />
      <param name="values" />
    </member>
    <member name="M:System.String.Join(System.Char,System.String[])">
      <param name="separator" />
      <param name="value" />
    </member>
    <member name="M:System.String.Join(System.Char,System.String[],System.Int32,System.Int32)">
      <param name="separator" />
      <param name="value" />
      <param name="startIndex" />
      <param name="count" />
    </member>
    <member name="M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>串联类型为 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 的 <see cref="T:System.String" /> 构造集合的成员，其中在每个成员之间使用指定的分隔符。</summary>
      <param name="separator">要用作分隔符的字符串。<paramref name="separator" /> 包括在返回的字符串中（只有在 <paramref name="values" /> 具有多个元素时）。</param>
      <param name="values">一个包含要串联的字符串的集合。</param>
      <returns>一个由 <paramref name="values" /> 的成员组成的字符串，这些成员以 <paramref name="separator" /> 字符串分隔。 如果 <paramref name="values" /> 没有成员，则该方法返回 <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.Join(System.String,System.Object[])">
      <summary>串联对象数组的各个元素，其中在每个元素之间使用指定的分隔符。</summary>
      <param name="separator">要用作分隔符的字符串。 只有在 <paramref name="separator" /> 具有多个元素时，<paramref name="values" /> 才包括在返回的字符串中。</param>
      <param name="values">一个数组，其中包含要连接的元素。</param>
      <returns>一个由 <paramref name="values" /> 的元素组成的字符串，这些元素以 <paramref name="separator" /> 字符串分隔。 如果 <paramref name="values" /> 为空数组，该方法将返回 <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.Join(System.String,System.String[])">
      <summary>串联字符串数组的所有元素，其中在每个元素之间使用指定的分隔符。</summary>
      <param name="separator">要用作分隔符的字符串。 只有在 <paramref name="separator" /> 具有多个元素时，<paramref name="value" /> 才包括在返回的字符串中。</param>
      <param name="value">一个数组，其中包含要连接的元素。</param>
      <returns>一个由 <paramref name="value" /> 中的元素组成的字符串，这些元素以 <paramref name="separator" /> 字符串分隔。 如果 <paramref name="value" /> 为空数组，该方法将返回 <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
      <summary>串联字符串数组的指定元素，其中在每个元素之间使用指定的分隔符。</summary>
      <param name="separator">要用作分隔符的字符串。 只有在 <paramref name="separator" /> 具有多个元素时，<paramref name="value" /> 才包括在返回的字符串中。</param>
      <param name="value">一个数组，其中包含要连接的元素。</param>
      <param name="startIndex">
        <paramref name="value" /> 中要使用的第一个元素。</param>
      <param name="count">要使用的 <paramref name="value" /> 的元素数。</param>
      <returns>由 <paramref name="value" /> 中的字符串组成的字符串，这些字符串以 <paramref name="separator" /> 字符串分隔。  
或 
 如果 <see cref="F:System.String.Empty" /> 为零，<paramref name="count" /> 没有元素，或 <paramref name="value" /> 以及 <paramref name="separator" /> 的全部元素均为 <paramref name="value" />，则为 <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="count" /> 小于 0。  
或 
 <paramref name="startIndex" /> 加上 <paramref name="count" /> 大于 <paramref name="value" />中的元素数。</exception>
      <exception cref="T:System.OutOfMemoryException">内存不足。</exception>
    </member>
    <member name="M:System.String.Join``1(System.Char,System.Collections.Generic.IEnumerable{``0})">
      <param name="separator" />
      <param name="values" />
      <typeparam name="T" />
    </member>
    <member name="M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})">
      <summary>串联集合的成员，其中在每个成员之间使用指定的分隔符。</summary>
      <param name="separator">要用作分隔符的字符串。<paramref name="separator" /> 包括在返回的字符串中（只有在 <paramref name="values" /> 具有多个元素时）。</param>
      <param name="values">一个包含要串联的对象的集合。</param>
      <typeparam name="T">
        <paramref name="values" /> 成员的类型。</typeparam>
      <returns>一个由 <paramref name="values" /> 的成员组成的字符串，这些成员以 <paramref name="separator" /> 字符串分隔。 如果 <paramref name="values" /> 没有成员，则该方法返回 <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char)">
      <summary>报告指定 Unicode 字符在此实例中的最后一个匹配项的从零开始的索引的位置。</summary>
      <param name="value">要查找的 Unicode 字符。</param>
      <returns>如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到，则为 -1。</returns>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32)">
      <summary>报告指定 Unicode 字符在此实例中的最后一个匹配项的从零开始的索引的位置。 在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。</summary>
      <param name="value">要查找的 Unicode 字符。</param>
      <param name="startIndex">搜索的起始位置。 从 <paramref name="startIndex" /> 此实例的开头开始搜索。</param>
      <returns>如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到该字符或当前实例等于 <see cref="F:System.String.Empty" />，则为 -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 小于零或大于等于当前实例的长度。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
      <summary>报告指定的 Unicode 字符在此实例内的子字符串中的最后一个匹配项的从零开始的索引的位置。 搜索在指定字符位置的数目的字符串开始时，开始指定字符和其后面的位置。</summary>
      <param name="value">要查找的 Unicode 字符。</param>
      <param name="startIndex">搜索的起始位置。 从 <paramref name="startIndex" /> 此实例的开头开始搜索。</param>
      <param name="count">要检查的字符位置数。</param>
      <returns>如果找到该字符，则为 <paramref name="value" /> 的从零开始的索引位置；如果未找到该字符或当前实例等于 <see cref="F:System.String.Empty" />，则为 -1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 小于零或大于等于当前实例的长度。  
或 
当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> - <paramref name="count" /> + 1 小于零。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String)">
      <summary>报告指定字符串在此实例中的最后一个匹配项的从零开始的索引的位置。</summary>
      <param name="value">要搜寻的字符串。</param>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 的从零开始的起始索引位置；如果未找到该字符串，则为 -1。 如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为此实例中的最后一个索引位置。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32)">
      <summary>报告指定字符串在此实例中的最后一个匹配项的从零开始的索引的位置。 在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。</summary>
      <param name="value">要搜寻的字符串。</param>
      <param name="startIndex">搜索起始位置。 从 <paramref name="startIndex" /> 此实例的开头开始搜索。</param>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 的从零开始的起始索引位置；如果未找到该字符串或当前实例等于 <see cref="F:System.String.Empty" />，则为 -1。 如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" /> 和此实例中的最后一个索引位置中的较小者。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 小于零或大于当前实例的长度。  
或 
当前实例等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 小于-1 或大于零。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)">
      <summary>报告指定字符串在此实例中的最后一个匹配项的从零开始的索引的位置。 搜索在指定字符位置的数目的字符串开始时，开始指定字符和其后面的位置。</summary>
      <param name="value">要搜寻的字符串。</param>
      <param name="startIndex">搜索起始位置。 从 <paramref name="startIndex" /> 此实例的开头开始搜索。</param>
      <param name="count">要检查的字符位置数。</param>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 的从零开始的起始索引位置；如果未找到该字符串或当前实例等于 <see cref="F:System.String.Empty" />，则为 -1。 如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" /> 和此实例中的最后一个索引位置中的较小者。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 为负数。  

或 - 
当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 为负数。  

或 
当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 大于此实例的长度。  
或 
当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> - <paramref name="count" /> + 1 指定不在此实例内的位置。  

或 - 
当前实例等于 <see cref="F:System.String.Empty" /> 并且 <paramref name="start" /> 小于 -1 或大于零。  

或 
当前实例等于 <see cref="F:System.String.Empty" /> 并且 <paramref name="count" /> 大于 1。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)">
      <summary>报告指定字符串在此实例中的最后一个匹配项的从零开始的索引的位置。 搜索在所指定的字符位置的数目的字符串开始时，开始指定字符和其后面的位置。 一个参数指定要执行搜索指定字符串的比较类型。</summary>
      <param name="value">要搜寻的字符串。</param>
      <param name="startIndex">搜索起始位置。 从 <paramref name="startIndex" /> 此实例的开头开始搜索。</param>
      <param name="count">要检查的字符位置数。</param>
      <param name="comparisonType">指定搜索规则的枚举值之一。</param>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 参数的从零开始的起始索引位置；如果未找到该字符串或当前实例等于 <see cref="F:System.String.Empty" />，则为 -1。 如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" /> 和此实例中的最后一个索引位置中的较小者。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 为负数。  

或 - 
当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 为负数。  

或 - 
当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 大于此实例的长度。  


或 
当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> + 1 - <paramref name="count" /> 指定不在此实例内的位置。  
或 
当前实例等于 <see cref="F:System.String.Empty" /> 并且 <paramref name="start" /> 小于 -1 或大于零。  
或 
当前实例等于 <see cref="F:System.String.Empty" /> 并且 <paramref name="count" /> 大于 1。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)">
      <summary>报告指定字符串在当前 <see cref="T:System.String" /> 对象中最后一个匹配项的从零开始的索引。 在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。 一个参数指定要执行搜索指定字符串的比较类型。</summary>
      <param name="value">要搜寻的字符串。</param>
      <param name="startIndex">搜索起始位置。 从 <paramref name="startIndex" /> 此实例的开头开始搜索。</param>
      <param name="comparisonType">指定搜索规则的枚举值之一。</param>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 参数的从零开始的起始索引位置；如果未找到该字符串或当前实例等于 <see cref="F:System.String.Empty" />，则为 -1。 如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为 <paramref name="startIndex" /> 和此实例中的最后一个索引位置中的较小者。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 小于零或大于当前实例的长度。  
或 
当前实例等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 小于-1 或大于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.LastIndexOf(System.String,System.StringComparison)">
      <summary>报告指定字符串在当前 <see cref="T:System.String" /> 对象中最后一个匹配项的从零开始的索引。 一个参数指定要用于指定字符串的搜索类型。</summary>
      <param name="value">要搜寻的字符串。</param>
      <param name="comparisonType">指定搜索规则的枚举值之一。</param>
      <returns>如果找到该字符串，则为 <paramref name="value" /> 参数的从零开始的起始索引位置；如果未找到该字符串，则为 -1。 如果 <paramref name="value" /> 为 <see cref="F:System.String.Empty" />，则返回值为此实例中的最后一个索引位置。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[])">
      <summary>报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的从零开始的索引的位置。</summary>
      <param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。</param>
      <returns>最后一次在此实例中找到 <paramref name="anyOf" /> 中的任意字符的索引位置；如果未找到 <paramref name="anyOf" /> 中的字符，则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
      <summary>报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的从零开始的索引的位置。 在指定的字符位置开始和在向后的右边该字符串的开头处理的搜索。</summary>
      <param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。</param>
      <param name="startIndex">搜索起始位置。 从 <paramref name="startIndex" /> 此实例的开头开始搜索。</param>
      <returns>最后一次在此实例中找到 <paramref name="anyOf" /> 中的任意字符的索引位置；如果未找到 <paramref name="anyOf" /> 中的字符或者当前实例等于<see cref="F:System.String.Empty" />，则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 指定不在此实例内的位置。</exception>
    </member>
    <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
      <summary>报告在 Unicode 数组中指定的一个或多个字符在此实例中的最后一个匹配项的从零开始的索引的位置。 搜索在指定字符位置的数目的字符串开始时，开始指定字符和其后面的位置。</summary>
      <param name="anyOf">Unicode 字符数组，包含一个或多个要查找的字符。</param>
      <param name="startIndex">搜索起始位置。 从 <paramref name="startIndex" /> 此实例的开头开始搜索。</param>
      <param name="count">要检查的字符位置数。</param>
      <returns>最后一次在此实例中找到 <paramref name="anyOf" /> 中的任意字符的索引位置；如果未找到 <paramref name="anyOf" /> 中的字符或者当前实例等于<see cref="F:System.String.Empty" />，则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="anyOf" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="count" /> 或 <paramref name="startIndex" /> 为负数。  
或 
当前实例不等于 <see cref="F:System.String.Empty" />，并且 <paramref name="startIndex" /> 减去 <paramref name="count" /> 再加 1 小于零。</exception>
    </member>
    <member name="P:System.String.Length">
      <summary>获取当前 <see cref="T:System.String" /> 对象中的字符数。</summary>
      <returns>当前字符串中字符的数量。</returns>
    </member>
    <member name="M:System.String.Normalize">
      <summary>返回一个新字符串，其文本值与此字符串相同，但其二进制表示形式符合 Unicode 范式 C。</summary>
      <returns>一个新的规范化字符串，其文本值与此字符串相同，但其二进制表示形式符合范式 C。</returns>
      <exception cref="T:System.ArgumentException">当前实例包含无效的 Unicode 字符。</exception>
    </member>
    <member name="M:System.String.Normalize(System.Text.NormalizationForm)">
      <summary>返回一个新字符串，其文本值与此字符串相同，但其二进制表示形式符合指定的 Unicode 范式。</summary>
      <param name="normalizationForm">一个 Unicode 范式。</param>
      <returns>一个新字符串，其文本值与此字符串相同，但其二进制表示形式符合由 <paramref name="normalizationForm" /> 参数指定的范式。</returns>
      <exception cref="T:System.ArgumentException">当前实例包含无效的 Unicode 字符。</exception>
    </member>
    <member name="M:System.String.op_Equality(System.String,System.String)">
      <summary>确定两个指定的字符串是否具有相同的值。</summary>
      <param name="a">要比较的第一个字符串，或 <see langword="null" />。</param>
      <param name="b">要比较的第二个字符串，或 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 的值与 <paramref name="a" /> 的值相同，则为 <paramref name="b" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.String.op_Implicit(System.String)~System.ReadOnlySpan{System.Char}">
      <param name="value" />
    </member>
    <member name="M:System.String.op_Inequality(System.String,System.String)">
      <summary>确定两个指定的字符串是否具有不同的值。</summary>
      <param name="a">要比较的第一个字符串，或 <see langword="null" />。</param>
      <param name="b">要比较的第二个字符串，或 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 的值与 <paramref name="a" /> 的值不同，则为 <paramref name="b" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.String.PadLeft(System.Int32)">
      <summary>返回一个新字符串，该字符串通过在此实例中的字符左侧填充空格来达到指定的总长度，从而实现右对齐。</summary>
      <param name="totalWidth">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</param>
      <returns>与此实例等效的一个新字符串，但该字符串为右对齐，因此，在左侧填充所需任意数量的空格，使长度达到 <paramref name="totalWidth" />。 但是，如果 <paramref name="totalWidth" /> 小于此实例的长度，则此方法返回对现有实例的引用。 如果 <paramref name="totalWidth" /> 等于此实例的长度，则此方法返回与此实例相同的新字符串。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> 小于零。</exception>
    </member>
    <member name="M:System.String.PadLeft(System.Int32,System.Char)">
      <summary>返回一个新字符串，该字符串通过在此实例中的字符左侧填充指定的 Unicode 字符来达到指定的总长度，从而使这些字符右对齐。</summary>
      <param name="totalWidth">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</param>
      <param name="paddingChar">Unicode 填充字符。</param>
      <returns>与此实例等效的一个新字符串，但该字符串为右对齐，因此，在左侧填充所需任意数量的 <paramref name="paddingChar" /> 字符，使长度达到 <paramref name="totalWidth" />。 但是，如果 <paramref name="totalWidth" /> 小于此实例的长度，则此方法返回对现有实例的引用。 如果 <paramref name="totalWidth" /> 等于此实例的长度，则此方法返回与此实例相同的新字符串。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> 小于零。</exception>
    </member>
    <member name="M:System.String.PadRight(System.Int32)">
      <summary>返回一个新字符串，该字符串通过在此字符串中的字符右侧填充空格来达到指定的总长度，从而使这些字符左对齐。</summary>
      <param name="totalWidth">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</param>
      <returns>与此实例等效的一个新字符串，但该字符串为左对齐，因此，在右侧填充所需任意数量的空格，使长度达到 <paramref name="totalWidth" />。 但是，如果 <paramref name="totalWidth" /> 小于此实例的长度，则此方法返回对现有实例的引用。 如果 <paramref name="totalWidth" /> 等于此实例的长度，则此方法返回与此实例相同的新字符串。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> 小于零。</exception>
    </member>
    <member name="M:System.String.PadRight(System.Int32,System.Char)">
      <summary>返回一个新字符串，该字符串通过在此字符串中的字符右侧填充指定的 Unicode 字符来达到指定的总长度，从而使这些字符左对齐。</summary>
      <param name="totalWidth">结果字符串中的字符数，等于原始字符数加上任何其他填充字符。</param>
      <param name="paddingChar">Unicode 填充字符。</param>
      <returns>与此实例等效的一个新字符串，但该字符串为左对齐，因此，在右侧填充所需任意数量的 <paramref name="paddingChar" /> 字符，使长度达到 <paramref name="totalWidth" />。 但是，如果 <paramref name="totalWidth" /> 小于此实例的长度，则此方法返回对现有实例的引用。 如果 <paramref name="totalWidth" /> 等于此实例的长度，则此方法返回与此实例相同的新字符串。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="totalWidth" /> 小于零。</exception>
    </member>
    <member name="M:System.String.Remove(System.Int32)">
      <summary>返回当前实例中从指定位置到最后位置的所有以删除的字符的新字符串。</summary>
      <param name="startIndex">开始删除字符的从零开始的位置。</param>
      <returns>一个新字符串，除所删除的字符之外，该字符串与此字符串等效。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零。  
或 
 <paramref name="startIndex" /> 指定不在此字符串中的位置。</exception>
    </member>
    <member name="M:System.String.Remove(System.Int32,System.Int32)">
      <summary>返回指定数量字符在当前这个实例起始点在已删除的指定的位置的新字符串。</summary>
      <param name="startIndex">开始删除字符的从零开始的位置。</param>
      <param name="count">要删除的字符数。</param>
      <returns>一个新字符串，除所删除的字符之外，该字符串与此实例等效。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="count" /> 小于零。  
或 
 <paramref name="startIndex" /> 加 <paramref name="count" /> 指定此实例之外的位置。</exception>
    </member>
    <member name="M:System.String.Replace(System.Char,System.Char)">
      <summary>返回一个新字符串，其中此实例中出现的所有指定 Unicode 字符都替换为另一个指定的 Unicode 字符。</summary>
      <param name="oldChar">要替换的 Unicode 字符。</param>
      <param name="newChar">要替换出现的所有 <paramref name="oldChar" /> 的 Unicode 字符。</param>
      <returns>等效于此实例（除了 <paramref name="oldChar" /> 的所有实例都已替换为 <paramref name="newChar" /> 外）的字符串。 如果在当前实例中找不到 <paramref name="oldChar" />，此方法返回未更改的当前实例。</returns>
    </member>
    <member name="M:System.String.Replace(System.String,System.String)">
      <summary>返回一个新字符串，其中当前实例中出现的所有指定字符串都替换为另一个指定的字符串。</summary>
      <param name="oldValue">要替换的字符串。</param>
      <param name="newValue">要替换 <paramref name="oldValue" /> 的所有匹配项的字符串。</param>
      <returns>等效于当前字符串（除了 <paramref name="oldValue" /> 的所有实例都已替换为 <paramref name="newValue" /> 外）的字符串。 如果在当前实例中找不到 <paramref name="oldValue" />，此方法返回未更改的当前实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> 为空字符串 ("")。</exception>
    </member>
    <member name="M:System.String.Replace(System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
      <param name="oldValue" />
      <param name="newValue" />
      <param name="ignoreCase" />
      <param name="culture" />
    </member>
    <member name="M:System.String.Replace(System.String,System.String,System.StringComparison)">
      <param name="oldValue" />
      <param name="newValue" />
      <param name="comparisonType" />
    </member>
    <member name="M:System.String.Split(System.Char,System.Int32,System.StringSplitOptions)">
      <param name="separator" />
      <param name="count" />
      <param name="options" />
    </member>
    <member name="M:System.String.Split(System.Char,System.StringSplitOptions)">
      <param name="separator" />
      <param name="options" />
    </member>
    <member name="M:System.String.Split(System.Char[])">
      <summary>基于数组中的字符将字符串拆分为多个子字符串。</summary>
      <param name="separator">分隔此字符串中子字符串的字符数组、不包含分隔符的空数组或 <see langword="null" />。</param>
      <returns>一个数组，其元素包含此实例中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符分隔。 有关详细信息，请参阅“备注”部分。</returns>
    </member>
    <member name="M:System.String.Split(System.Char[],System.Int32)">
      <summary>基于数组中的字符将一个字符串拆分成最大数量的子字符串。 也可指定要返回的子字符串的最大数量。</summary>
      <param name="separator">分隔此字符串中子字符串的字符数组、不包含分隔符的空数组或 <see langword="null" />。</param>
      <param name="count">要返回的子字符串的最大数量。</param>
      <returns>一个数组，其元素包含此实例中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符分隔。 有关详细信息，请参阅“备注”部分。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 为负数。</exception>
    </member>
    <member name="M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)">
      <summary>基于数组中的字符将一个字符串拆分成最大数量的子字符串。</summary>
      <param name="separator">分隔此字符串中子字符串的字符数组、不包含分隔符的空数组或 <see langword="null" />。</param>
      <param name="count">要返回的子字符串的最大数量。</param>
      <param name="options">要省略返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />；要包含返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.None" />。</param>
      <returns>一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符分隔。 有关详细信息，请参阅“备注”部分。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是 <see cref="T:System.StringSplitOptions" /> 值之一。</exception>
    </member>
    <member name="M:System.String.Split(System.Char[],System.StringSplitOptions)">
      <summary>基于数组中的字符将字符串拆分为多个子字符串。 可以指定子字符串是否包含空数组元素。</summary>
      <param name="separator">分隔此字符串中子字符串的字符数组、不包含分隔符的空数组或 <see langword="null" />。</param>
      <param name="options">要省略返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />；要包含返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.None" />。</param>
      <returns>一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符分隔。 有关详细信息，请参阅“备注”部分。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是 <see cref="T:System.StringSplitOptions" /> 值之一。</exception>
    </member>
    <member name="M:System.String.Split(System.String,System.Int32,System.StringSplitOptions)">
      <param name="separator" />
      <param name="count" />
      <param name="options" />
    </member>
    <member name="M:System.String.Split(System.String,System.StringSplitOptions)">
      <param name="separator" />
      <param name="options" />
    </member>
    <member name="M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)">
      <summary>基于数组中的字符串将一个字符串拆分成最大数量的子字符串。 可以指定子字符串是否包含空数组元素。</summary>
      <param name="separator">分隔此字符串中子字符串的字符串数组、不包含分隔符的空数组或 <see langword="null" />。</param>
      <param name="count">要返回的子字符串的最大数量。</param>
      <param name="options">要省略返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />；要包含返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.None" />。</param>
      <returns>一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符串分隔。 有关详细信息，请参阅“备注”部分。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 为负数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是 <see cref="T:System.StringSplitOptions" /> 值之一。</exception>
    </member>
    <member name="M:System.String.Split(System.String[],System.StringSplitOptions)">
      <summary>基于数组中的字符串将字符串拆分为多个子字符串。 可以指定子字符串是否包含空数组元素。</summary>
      <param name="separator">分隔此字符串中子字符串的字符串数组、不包含分隔符的空数组或 <see langword="null" />。</param>
      <param name="options">要省略返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.RemoveEmptyEntries" />；要包含返回的数组中的空数组元素，则为 <see cref="F:System.StringSplitOptions.None" />。</param>
      <returns>一个数组，其元素包含此字符串中的子字符串，这些子字符串由 <paramref name="separator" /> 中的一个或多个字符串分隔。 有关详细信息，请参阅“备注”部分。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> 不是 <see cref="T:System.StringSplitOptions" /> 值之一。</exception>
    </member>
    <member name="M:System.String.StartsWith(System.Char)">
      <param name="value" />
    </member>
    <member name="M:System.String.StartsWith(System.String)">
      <summary>确定此字符串实例的开头是否与指定的字符串匹配。</summary>
      <param name="value">要比较的字符串。</param>
      <returns>如果 <see langword="true" /> 与此字符串的开头匹配，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.StartsWith(System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>确定在使用指定的区域性进行比较时此字符串实例的开头是否与指定的字符串匹配。</summary>
      <param name="value">要比较的字符串。</param>
      <param name="ignoreCase">若要在比较过程中忽略大小写，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="culture">确定如何对此字符串与 <paramref name="value" /> 进行比较的区域性信息。 如果 <paramref name="culture" /> 为 <see langword="null" />，则使用当前区域性。</param>
      <returns>如果 <see langword="true" /> 参数与此字符串的开头匹配，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.StartsWith(System.String,System.StringComparison)">
      <summary>确定在使用指定的比较选项进行比较时此字符串实例的开头是否与指定的字符串匹配。</summary>
      <param name="value">要比较的字符串。</param>
      <param name="comparisonType">枚举值之一，用于确定如何比较此字符串与 <paramref name="value" />。</param>
      <returns>如果此实例以 <see langword="true" /> 开头，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.String.Substring(System.Int32)">
      <summary>从此实例检索子字符串。 子字符串在指定的字符位置开始并一直到该字符串的末尾。</summary>
      <param name="startIndex">此实例中子字符串的起始字符位置（从零开始）。</param>
      <returns>与此实例中在 <paramref name="startIndex" /> 处开头的子字符串等效的一个字符串；如果 <see cref="F:System.String.Empty" /> 等于此实例的长度，则为 <paramref name="startIndex" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 小于零或大于此实例的长度。</exception>
    </member>
    <member name="M:System.String.Substring(System.Int32,System.Int32)">
      <summary>从此实例检索子字符串。 子字符串从指定的字符位置开始且具有指定的长度。</summary>
      <param name="startIndex">此实例中子字符串的起始字符位置（从零开始）。</param>
      <param name="length">子字符串中的字符数。</param>
      <returns>与此实例中在 <paramref name="length" /> 处开头、长度为 <paramref name="startIndex" /> 的子字符串等效的一个字符串；如果 <see cref="F:System.String.Empty" /> 等于此实例的长度且 <paramref name="startIndex" /> 为零，则为 <paramref name="length" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 加 <paramref name="length" /> 指示不在此实例内的位置。  
或 
 <paramref name="startIndex" /> 或 <paramref name="length" /> 小于零。</exception>
    </member>
    <member name="M:System.String.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问当前 <see cref="T:System.String" /> 对象的枚举数。</summary>
      <returns>一个枚举器，可用于循环访问当前的字符串。</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>如果当前字符串的值为 <see langword="true" />，则为 <see cref="F:System.Boolean.TrueString" />；如果当前字符串的值为 <see langword="false" />，则为 <see cref="F:System.Boolean.FalseString" />。</returns>
      <exception cref="T:System.FormatException">当前字符串的值不为 <see cref="F:System.Boolean.TrueString" /> 或 <see cref="F:System.Boolean.FalseString" />。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
      <exception cref="T:System.FormatException">无法分析当前 <see cref="T:System.String" /> 对象的值。</exception>
      <exception cref="T:System.OverflowException">当前 <see cref="T:System.String" /> 对象的值是一个大于 <see cref="F:System.Byte.MaxValue" /> 或小于 <see cref="F:System.Byte.MinValue" /> 的数字。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
      <returns>当前 <see cref="T:System.String" /> 对象中索引 0 处的字符。</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDateTime(System.IFormatProvider)" />。</summary>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
      <exception cref="T:System.FormatException">无法分析当前 <see cref="T:System.String" /> 对象的值。</exception>
      <exception cref="T:System.OverflowException">当前 <see cref="T:System.String" /> 对象的值是一个小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
      <exception cref="T:System.FormatException">无法分析当前 <see cref="T:System.String" /> 对象的值。</exception>
      <exception cref="T:System.OverflowException">当前 <see cref="T:System.String" /> 对象的值是一个小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
      <exception cref="T:System.FormatException">无法分析当前 <see cref="T:System.String" /> 对象的值。</exception>
      <exception cref="T:System.OverflowException">当前 <see cref="T:System.String" /> 对象的值是一个大于 <see cref="F:System.Int16.MaxValue" /> 或小于 <see cref="F:System.Int16.MinValue" /> 的数字。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
      <exception cref="T:System.FormatException">无法分析当前 <see cref="T:System.String" /> 对象的值。</exception>
      <exception cref="T:System.OverflowException">当前 <see cref="T:System.String" /> 对象的值是一个大于 <see cref="F:System.SByte.MaxValue" /> 或小于 <see cref="F:System.SByte.MinValue" /> 的数字。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
    </member>
    <member name="M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">返回对象的类型。</param>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException">当前 <see cref="T:System.String" /> 对象的值不能转换为 <paramref name="type" /> 参数指定的类型。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
      <exception cref="T:System.FormatException">无法分析当前 <see cref="T:System.String" /> 对象的值。</exception>
      <exception cref="T:System.OverflowException">当前 <see cref="T:System.String" /> 对象的值是一个大于 <see cref="F:System.UInt16.MaxValue" /> 或小于 <see cref="F:System.UInt16.MinValue" /> 的数字。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
      <exception cref="T:System.FormatException">无法分析当前 <see cref="T:System.String" /> 对象的值。</exception>
      <exception cref="T:System.OverflowException">当前 <see cref="T:System.String" /> 对象的值是一个大于 <see cref="F:System.UInt32.MaxValue" /> 或小于 <see cref="F:System.UInt32.MinValue" /> 的数字。</exception>
    </member>
    <member name="M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">一个对象，提供区域性特定的格式设置信息。</param>
      <returns>当前 <see cref="T:System.String" /> 对象的转换值。</returns>
    </member>
    <member name="M:System.String.ToCharArray">
      <summary>将此实例中的字符复制到 Unicode 字符数组。</summary>
      <returns>元素为此实例的各字符的 Unicode 字符数组。 如果此实例是空字符串，则返回的数组为空且长度为零。</returns>
    </member>
    <member name="M:System.String.ToCharArray(System.Int32,System.Int32)">
      <summary>将此实例中的指定子字符串内的字符复制到 Unicode 字符数组。</summary>
      <param name="startIndex">此实例内子字符串的起始位置。</param>
      <param name="length">此实例内子字符串的长度。</param>
      <returns>元素为此实例中从字符位置 <paramref name="length" /> 开始的 <paramref name="startIndex" /> 字符数的 Unicode 字符数组。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小于零。  
或 
 <paramref name="startIndex" /> 加 <paramref name="length" /> 大于此实例的长度。</exception>
    </member>
    <member name="M:System.String.ToLower">
      <summary>返回此字符串转换为小写形式的副本。</summary>
      <returns>一个小写字符串。</returns>
    </member>
    <member name="M:System.String.ToLower(System.Globalization.CultureInfo)">
      <summary>根据指定区域性的大小写规则返回此字符串转换为小写形式的副本。</summary>
      <param name="culture">一个对象，用于提供区域性特定的大小写规则。</param>
      <returns>当前字符串的等效小写形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.ToLowerInvariant">
      <summary>返回此 <see cref="T:System.String" /> 对象的转换为小写形式的副本，返回时使用固定区域性的大小写规则。</summary>
      <returns>当前字符串的等效小写形式。</returns>
    </member>
    <member name="M:System.String.ToString">
      <summary>返回 <see cref="T:System.String" /> 的此实例；不执行实际转换。</summary>
      <returns>当前的字符串。</returns>
    </member>
    <member name="M:System.String.ToString(System.IFormatProvider)">
      <summary>返回 <see cref="T:System.String" /> 的此实例；不执行实际转换。</summary>
      <param name="provider">（保留）一个对象，用于提供区域性特定的格式设置信息。</param>
      <returns>当前的字符串。</returns>
    </member>
    <member name="M:System.String.ToUpper">
      <summary>返回此字符串转换为大写形式的副本。</summary>
      <returns>当前字符串的大写形式。</returns>
    </member>
    <member name="M:System.String.ToUpper(System.Globalization.CultureInfo)">
      <summary>根据指定区域性的大小写规则返回此字符串转换为大写形式的副本。</summary>
      <param name="culture">一个对象，用于提供区域性特定的大小写规则。</param>
      <returns>当前字符串的大写形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.String.ToUpperInvariant">
      <summary>返回此 <see cref="T:System.String" /> 对象的转换为大写形式的副本，返回时使用固定区域性的大小写规则。</summary>
      <returns>当前字符串的大写形式。</returns>
    </member>
    <member name="M:System.String.Trim">
      <summary>从当前 <see cref="T:System.String" /> 对象移除所有前导空白字符和尾部空白字符。</summary>
      <returns>从当前字符串的开头和结尾删除所有空白字符后剩余的字符串。 如果从当前实例无法删除字符，此方法返回未更改的当前实例。</returns>
    </member>
    <member name="M:System.String.Trim(System.Char)">
      <param name="trimChar" />
    </member>
    <member name="M:System.String.Trim(System.Char[])">
      <summary>从当前 <see cref="T:System.String" /> 对象移除数组中指定的一组字符的所有前导匹配项和尾部匹配项。</summary>
      <param name="trimChars">要删除的 Unicode 字符的数组，或 <see langword="null" />。</param>
      <returns>从当前字符串的开头移除所出现的所有 <paramref name="trimChars" /> 参数中的字符后剩余的字符串。 如果 <paramref name="trimChars" /> 为 <see langword="null" /> 或空数组，则改为移除空白字符。 如果从当前实例无法删除字符，此方法返回未更改的当前实例。</returns>
    </member>
    <member name="M:System.String.TrimEnd" />
    <member name="M:System.String.TrimEnd(System.Char)">
      <param name="trimChar" />
    </member>
    <member name="M:System.String.TrimEnd(System.Char[])">
      <summary>从当前 <see cref="T:System.String" /> 对象移除数组中指定的一组字符的所有尾部匹配项。</summary>
      <param name="trimChars">要删除的 Unicode 字符的数组，或 <see langword="null" />。</param>
      <returns>从当前字符串的开头移除所出现的所有 <paramref name="trimChars" /> 参数中的字符后剩余的字符串。 如果 <paramref name="trimChars" /> 为 <see langword="null" /> 或空数组，则改为删除 Unicode 空白字符。 如果从当前实例无法删除字符，此方法返回未更改的当前实例。</returns>
    </member>
    <member name="M:System.String.TrimStart" />
    <member name="M:System.String.TrimStart(System.Char)">
      <param name="trimChar" />
    </member>
    <member name="M:System.String.TrimStart(System.Char[])">
      <summary>从当前 <see cref="T:System.String" /> 对象移除数组中指定的一组字符的所有前导匹配项。</summary>
      <param name="trimChars">要删除的 Unicode 字符的数组，或 <see langword="null" />。</param>
      <returns>从当前字符串的开头移除所出现的所有 <paramref name="trimChars" /> 参数中的字符后剩余的字符串。 如果 <paramref name="trimChars" /> 为 <see langword="null" /> 或空数组，则改为移除空白字符。</returns>
    </member>
    <member name="T:System.StringComparison">
      <summary>指定供 <see cref="M:System.String.Compare(System.String,System.String)" /> 和 <see cref="M:System.String.Equals(System.Object)" /> 方法的特定重载使用的区域性、大小写和排序规则。</summary>
    </member>
    <member name="F:System.StringComparison.CurrentCulture">
      <summary>使用区分区域性的排序规则和当前区域性比较字符串。</summary>
    </member>
    <member name="F:System.StringComparison.CurrentCultureIgnoreCase">
      <summary>通过使用区分区域性的排序规则、当前区域性，并忽略所比较的字符串的大小写，来比较字符串。</summary>
    </member>
    <member name="F:System.StringComparison.InvariantCulture">
      <summary>使用区分区域性的排序规则和固定区域性比较字符串。</summary>
    </member>
    <member name="F:System.StringComparison.InvariantCultureIgnoreCase">
      <summary>通过使用区分区域性的排序规则、固定区域性，并忽略所比较的字符串的大小写，来比较字符串。</summary>
    </member>
    <member name="F:System.StringComparison.Ordinal">
      <summary>使用序号（二进制）排序规则比较字符串。</summary>
    </member>
    <member name="F:System.StringComparison.OrdinalIgnoreCase">
      <summary>通过使用序号（二进制）区分区域性的排序规则并忽略所比较的字符串的大小写，来比较字符串。</summary>
    </member>
    <member name="T:System.StringSplitOptions">
      <summary>指定适用的 <see cref="Overload:System.String.Split" /> 方法重载包含还是省略返回值中的空子字符串。</summary>
    </member>
    <member name="F:System.StringSplitOptions.None">
      <summary>返回值包括含有空字符串的数组元素</summary>
    </member>
    <member name="F:System.StringSplitOptions.RemoveEmptyEntries">
      <summary>返回值不包括含有空字符串的数组元素</summary>
    </member>
    <member name="T:System.SystemException">
      <summary>用作系统异常命名空间的基类。</summary>
    </member>
    <member name="M:System.SystemException.#ctor">
      <summary>初始化 <see cref="T:System.SystemException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.SystemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.SystemException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.SystemException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.SystemException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.SystemException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.SystemException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="T:System.Text.Decoder">
      <summary>将一个编码字节序列转换为一组字符。</summary>
    </member>
    <member name="M:System.Text.Decoder.#ctor">
      <summary>初始化 <see cref="T:System.Text.Decoder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>将编码字节的缓冲区转换为 UTF-16 编码字符，并将结果存储在另一个缓冲区中。</summary>
      <param name="bytes">包含要转换的字节序列的缓冲区的地址。</param>
      <param name="byteCount">
        <paramref name="bytes" /> 中要转换的字节数。</param>
      <param name="chars">用于存储已转换的字符的缓冲区的地址。</param>
      <param name="charCount">要在转换中使用的 <paramref name="chars" /> 中的最大字符数。</param>
      <param name="flush">如果没有更多的数据要进行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="bytesUsed">当此方法返回时，包含由转换生成的字节数。 此参数未经初始化即被传递。</param>
      <param name="charsUsed">当此方法返回时，包含来自在转换中使用的 <paramref name="chars" /> 的字符数。 此参数未经初始化即被传递。</param>
      <param name="completed">当此方法返回时，如果转换了所有由 <paramref name="byteCount" /> 指定的字符，则包含 <see langword="true" />；否则包含 <see langword="false" />。 此参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 或 <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> 或 <paramref name="byteCount" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">输出缓冲区太小，无法包含任何已转换的输出。 输出缓冲区应大于或等于由 <see cref="Overload:System.Text.Decoder.GetCharCount" /> 方法指示的大小。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生了回退（有关更完整的说明，请参阅 .NET Framework 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Decoder.Fallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>将编码字节的数组转换为 UTF-16 编码字符，并将结果存储在字符数组中。</summary>
      <param name="bytes">要转换的字节数组。</param>
      <param name="byteIndex">要转换的 <paramref name="bytes" /> 的第一个元素。</param>
      <param name="byteCount">要转换的 <paramref name="bytes" /> 的元素数。</param>
      <param name="chars">用于存储转换后的字符的数组。</param>
      <param name="charIndex">存储数据的 <paramref name="chars" /> 的第一个元素。</param>
      <param name="charCount">要在转换中使用的 <paramref name="chars" /> 的元素的最大数量。</param>
      <param name="flush">如果没有更多的数据要进行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="bytesUsed">当此方法返回时，包含在转换中使用的字节数。 此参数未经初始化即被传递。</param>
      <param name="charsUsed">当此方法返回时，包含由转换生成的 <paramref name="chars" /> 中的字符数。 此参数未经初始化即被传递。</param>
      <param name="completed">当此方法返回时，如果转换了所有由 <paramref name="byteCount" /> 指定的字符，则包含 <see langword="true" />；否则包含 <see langword="false" />。 此参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 或 <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、 <paramref name="charCount" />、 <paramref name="byteIndex" />或 <paramref name="byteCount" /> 小于零。  

或 - 
<paramref name="chars" /> - <paramref name="charIndex" /> 的长度小于 <paramref name="charCount" />。  

或 
<paramref name="bytes" /> - <paramref name="byteIndex" /> 的长度小于 <paramref name="byteCount" />。</exception>
      <exception cref="T:System.ArgumentException">输出缓冲区太小，无法包含任何已转换的输出。 输出缓冲区应大于或等于由 <see cref="Overload:System.Text.Decoder.GetCharCount" /> 方法指示的大小。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生了回退（有关更完整的说明，请参阅 .NET Framework 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Decoder.Fallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Decoder.Convert(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <param name="bytes" />
      <param name="chars" />
      <param name="flush" />
      <param name="bytesUsed" />
      <param name="charsUsed" />
      <param name="completed" />
    </member>
    <member name="P:System.Text.Decoder.Fallback">
      <summary>获取或设置当前 <see cref="T:System.Text.DecoderFallback" /> 对象的 <see cref="T:System.Text.Decoder" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Text.DecoderFallback" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">设置操作中的值为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentException">无法在设置操作中赋新值，这是因为当前 <see cref="T:System.Text.DecoderFallbackBuffer" /> 对象含有尚未解码的数据。</exception>
    </member>
    <member name="P:System.Text.Decoder.FallbackBuffer">
      <summary>获取与当前 <see cref="T:System.Text.DecoderFallbackBuffer" /> 对象关联的 <see cref="T:System.Text.Decoder" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Text.DecoderFallbackBuffer" /> 对象。</returns>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)">
      <summary>在派生类中重写时，计算对字节序列（从指定的字节指针开始）进行解码所产生的字符数。 一个参数，该参数指示是否在计算后清除解码器的内部状态。</summary>
      <param name="bytes">指向第一个要解码的字节的指针。</param>
      <param name="count">要解码的字节数。</param>
      <param name="flush">若要在计算后模拟清除解码器的内部状态，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>对指定的字节序列和内部缓冲区中任何字节进行解码所产生的字符数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 <see langword="null" />（在 Visual Basic .NET 中为 <see langword="Nothing" />）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生了回退（有关更完整的说明，请参阅 .NET Framework 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Decoder.Fallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>在派生类中重写时，计算对字节序列（从指定字节数组开始）进行解码所产生的字符数。</summary>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <param name="index">第一个要解码的字节的索引。</param>
      <param name="count">要解码的字节数。</param>
      <returns>对指定的字节序列和内部缓冲区中任何字节进行解码所产生的字符数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。  
或 
 <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生了回退（有关更完整的说明，请参阅 .NET Framework 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Decoder.Fallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>在派生类中重写时，计算对字节序列（从指定字节数组开始）进行解码所产生的字符数。 一个参数，该参数指示是否在计算后清除解码器的内部状态。</summary>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <param name="index">第一个要解码的字节的索引。</param>
      <param name="count">要解码的字节数。</param>
      <param name="flush">若要在计算后模拟清除解码器的内部状态，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>对指定的字节序列和内部缓冲区中任何字节进行解码所产生的字符数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。  
或 
 <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生了回退（有关更完整的说明，请参阅 .NET Framework 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Decoder.Fallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Decoder.GetCharCount(System.ReadOnlySpan{System.Byte},System.Boolean)">
      <param name="bytes" />
      <param name="flush" />
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)">
      <summary>在派生类中重写时，将字节序列（从指定的字节指针处开始）和任何内部缓冲区中的字节解码为从指定字符指针开始存储的一组字符。 一个参数，指示转换后是否要清除解码器的内部状态。</summary>
      <param name="bytes">指向第一个要解码的字节的指针。</param>
      <param name="byteCount">要解码的字节数。</param>
      <param name="chars">一个指针，指向开始写入所产生的字符集的位置。</param>
      <param name="charCount">要写入的最大字符数。</param>
      <param name="flush">如果要在转换后清除解码器的内部状态，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
      <returns>在由 <paramref name="chars" /> 参数指示的位置处写入的实际字符数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。  
或 
 <paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> 或 <paramref name="charCount" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="charCount" /> 少于所产生的字符数。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生了回退（有关更完整的说明，请参阅 .NET Framework 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Decoder.Fallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>在派生类中重写时，将指定字节数组的字节序列和内部缓冲区中的任何字节解码到指定的字符数组。</summary>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <param name="byteIndex">第一个要解码的字节的索引。</param>
      <param name="byteCount">要解码的字节数。</param>
      <param name="chars">要用于包含所产生的字符集的字符数组。</param>
      <param name="charIndex">开始写入所产生的字符集的索引位置。</param>
      <returns>写入 <paramref name="chars" /> 的实际字符数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。  

或 - 
<paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小于零。  
或 
 <paramref name="byteindex" /> 和 <paramref name="byteCount" /> 不表示 <paramref name="bytes" />中的有效范围。  

或 - 
<paramref name="charIndex" /> 不是 <paramref name="chars" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="chars" /> 中从 <paramref name="charIndex" /> 到数组结尾没有足够容量来容纳所产生的字符。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生了回退（有关更完整的说明，请参阅 .NET Framework 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Decoder.Fallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)">
      <summary>在派生类中重写时，将指定字节数组的字节序列和内部缓冲区中的任何字节解码到指定的字符数组。 一个参数，指示转换后是否要清除解码器的内部状态。</summary>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <param name="byteIndex">第一个要解码的字节的索引。</param>
      <param name="byteCount">要解码的字节数。</param>
      <param name="chars">要用于包含所产生的字符集的字符数组。</param>
      <param name="charIndex">开始写入所产生的字符集的索引位置。</param>
      <param name="flush">如果要在转换后清除解码器的内部状态，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
      <returns>写入 <paramref name="chars" /> 参数的实际字符数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。  
或 
 <paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小于零。  
或 
 <paramref name="byteindex" /> 和 <paramref name="byteCount" /> 不表示 <paramref name="bytes" />中的有效范围。  
或 
 <paramref name="charIndex" /> 不是 <paramref name="chars" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="chars" /> 中从 <paramref name="charIndex" /> 到数组结尾没有足够容量来容纳所产生的字符。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生了回退（有关更完整的说明，请参阅 .NET Framework 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Decoder.Fallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Decoder.GetChars(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Boolean)">
      <param name="bytes" />
      <param name="chars" />
      <param name="flush" />
    </member>
    <member name="M:System.Text.Decoder.Reset">
      <summary>在派生类中重写时，将解码器设置回它的初始状态。</summary>
    </member>
    <member name="T:System.Text.DecoderExceptionFallback">
      <summary>为不能转换为输入字符的已编码输入字节序列提供失败处理机制（称为“回退”）。 回退引发异常，而不是解码输入字节序列。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Text.DecoderExceptionFallback.#ctor">
      <summary>初始化 <see cref="T:System.Text.DecoderExceptionFallback" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.DecoderExceptionFallback.CreateFallbackBuffer">
      <summary>返回解码器回退缓冲区，如果无法将字节序列转换为字符，则该缓冲区将引发异常。</summary>
      <returns>当无法解码字节序列时，解码器回退缓冲区会引发异常。</returns>
    </member>
    <member name="M:System.Text.DecoderExceptionFallback.Equals(System.Object)">
      <summary>指示当前 <see cref="T:System.Text.DecoderExceptionFallback" /> 对象与指定对象是否相等。</summary>
      <param name="value">从 <see cref="T:System.Text.DecoderExceptionFallback" /> 类派生的对象。</param>
      <returns>如果 <paramref name="value" /> 不为 <see langword="true" /> 且是一个 <see cref="T:System.Text.DecoderExceptionFallback" /> 对象，则为 <see langword="null" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.DecoderExceptionFallback.GetHashCode">
      <summary>检索此实例的哈希代码。</summary>
      <returns>返回值始终是相同的任意值，没有特别的意义。</returns>
    </member>
    <member name="P:System.Text.DecoderExceptionFallback.MaxCharCount">
      <summary>获取此实例可以返回的最大字符数。</summary>
      <returns>返回值始终为零。</returns>
    </member>
    <member name="T:System.Text.DecoderExceptionFallbackBuffer">
      <summary>当编码的输入字节序列无法转换为解码的输出字符时引发 <see cref="T:System.Text.DecoderFallbackException" />。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Text.DecoderExceptionFallbackBuffer.#ctor">
      <summary>初始化 <see cref="T:System.Text.DecoderExceptionFallbackBuffer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.DecoderExceptionFallbackBuffer.Fallback(System.Byte[],System.Int32)">
      <summary>当无法对输入字节序列解码时引发 <see cref="T:System.Text.DecoderFallbackException" />。 不使用名义返回值。</summary>
      <param name="bytesUnknown">字节的输入数组。</param>
      <param name="index">输入中字节的索引位置。</param>
      <returns>无。 不返回值，因为 <see cref="M:System.Text.DecoderExceptionFallbackBuffer.Fallback(System.Byte[],System.Int32)" /> 方法始终引发异常。  
名义返回值为 <see langword="true" />。 即使返回值是不变的，也仍会定义一个返回值，原因是此方法会实现一个抽象方法。</returns>
      <exception cref="T:System.Text.DecoderFallbackException">此方法总是引发一个异常，该异常报告无法解码的输入字节的值和索引位置。</exception>
    </member>
    <member name="M:System.Text.DecoderExceptionFallbackBuffer.GetNextChar">
      <summary>检索异常数据缓冲区中的下一个字符。</summary>
      <returns>返回值始终为 Unicode 字符 NULL (U+0000)。  
 即使返回值是不变的，也仍会定义一个返回值，原因是此方法会实现一个抽象方法。</returns>
    </member>
    <member name="M:System.Text.DecoderExceptionFallbackBuffer.MovePrevious">
      <summary>导致对 <see cref="M:System.Text.DecoderExceptionFallbackBuffer.GetNextChar" /> 的下一个调用访问当前位置之前的异常数据缓冲区字符位置。</summary>
      <returns>返回值始终为 <see langword="false" />。  
即使返回值是不变的，也仍会定义一个返回值，原因是此方法会实现一个抽象方法。</returns>
    </member>
    <member name="P:System.Text.DecoderExceptionFallbackBuffer.Remaining">
      <summary>获取当前 <see cref="T:System.Text.DecoderExceptionFallbackBuffer" /> 对象中待处理的字符数。</summary>
      <returns>返回值始终为零。  
 即使返回值是不变的，也仍会定义一个返回值，原因是此方法会实现一个抽象方法。</returns>
    </member>
    <member name="T:System.Text.DecoderFallback">
      <summary>为不能转换为输出字符的已编码输入字节序列提供失败处理机制（称为“回退”）。</summary>
    </member>
    <member name="M:System.Text.DecoderFallback.#ctor">
      <summary>初始化 <see cref="T:System.Text.DecoderFallback" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.DecoderFallback.CreateFallbackBuffer">
      <summary>在派生类中重写时，将初始化 <see cref="T:System.Text.DecoderFallbackBuffer" /> 类的新实例。</summary>
      <returns>提供解码器回退缓冲区的对象。</returns>
    </member>
    <member name="P:System.Text.DecoderFallback.ExceptionFallback">
      <summary>获取无法解码输入字节序列时引发异常的对象。</summary>
      <returns>从 <see cref="T:System.Text.DecoderFallback" /> 类派生的类型。 默认值为 <see cref="T:System.Text.DecoderExceptionFallback" /> 对象。</returns>
    </member>
    <member name="P:System.Text.DecoderFallback.MaxCharCount">
      <summary>当用派生类重写时，获取当前 <see cref="T:System.Text.DecoderFallback" /> 对象能返回的最大字符数。</summary>
      <returns>当前 <see cref="T:System.Text.DecoderFallback" /> 对象能返回的最大字符数。</returns>
    </member>
    <member name="P:System.Text.DecoderFallback.ReplacementFallback">
      <summary>获取输出替代字符串的对象，以替代无法解码的输入字节序列。</summary>
      <returns>从 <see cref="T:System.Text.DecoderFallback" /> 类派生的类型。 默认值是发出问号字符（“?”和 U+003F）来替代未知字节序列的 <see cref="T:System.Text.DecoderReplacementFallback" /> 对象。</returns>
    </member>
    <member name="T:System.Text.DecoderFallbackBuffer">
      <summary>提供一个允许回退处理程序在无法解码输入的字节序列时返回备用字符串到解码器的缓冲区。</summary>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.#ctor">
      <summary>初始化 <see cref="T:System.Text.DecoderFallbackBuffer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.Fallback(System.Byte[],System.Int32)">
      <summary>在派生类中被重写时，准备回退缓冲区以便对指定输入字节序列进行处理。</summary>
      <param name="bytesUnknown">字节的输入数组。</param>
      <param name="index">
        <paramref name="bytesUnknown" /> 中字节的索引位置。</param>
      <returns>如果回退缓冲区能处理 <paramref name="bytesUnknown" /> 则为 <see langword="true" />；如果回退缓冲区忽略 <paramref name="bytesUnknown" />，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.GetNextChar">
      <summary>在派生类中重写后，此方法检索回退缓冲区中的下一个字符。</summary>
      <returns>回退缓冲区中的下一个字符。</returns>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.MovePrevious">
      <summary>在派生类中重写后，此方法将使对 <see cref="M:System.Text.DecoderFallbackBuffer.GetNextChar" /> 方法的下一次调用访问当前字符位置之前的数据缓冲区字符位置。</summary>
      <returns>如果 <see cref="M:System.Text.DecoderFallbackBuffer.MovePrevious" /> 操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.DecoderFallbackBuffer.Remaining">
      <summary>在派生类中重写后，此属性获取当前 <see cref="T:System.Text.DecoderFallbackBuffer" /> 对象中要处理的剩余字符数。</summary>
      <returns>尚未处理的当前回退缓冲区中的字符数。</returns>
    </member>
    <member name="M:System.Text.DecoderFallbackBuffer.Reset">
      <summary>初始化所有与此回退缓冲区相关的数据和状态信息。</summary>
    </member>
    <member name="T:System.Text.DecoderFallbackException">
      <summary>解码器回退操作失败时引发的异常。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor">
      <summary>初始化 <see cref="T:System.Text.DecoderFallbackException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Text.DecoderFallbackException" /> 类的新实例。 一个参数指定错误信息。</summary>
      <param name="message">错误信息。</param>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>初始化 <see cref="T:System.Text.DecoderFallbackException" /> 类的新实例。 参数指定错误信息、被解码的字节数组和无法被解码的字节的索引。</summary>
      <param name="message">错误信息。</param>
      <param name="bytesUnknown">输入字节数组。</param>
      <param name="index">无法解码的字节在 <paramref name="bytesUnknown" /> 中的索引位置。</param>
    </member>
    <member name="M:System.Text.DecoderFallbackException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Text.DecoderFallbackException" /> 类的新实例。 参数指定错误信息和导致此异常的内部异常。</summary>
      <param name="message">错误信息。</param>
      <param name="innerException">导致此异常的异常。</param>
    </member>
    <member name="P:System.Text.DecoderFallbackException.BytesUnknown">
      <summary>获取导致异常的输入字节序列。</summary>
      <returns>无法解码的输入字节数组。</returns>
    </member>
    <member name="P:System.Text.DecoderFallbackException.Index">
      <summary>获取导致异常的字节在输入字节序列中的索引位置。</summary>
      <returns>无法解码的字节在输入字节数组中的索引位置。 索引位置是从零开始的。</returns>
    </member>
    <member name="T:System.Text.DecoderReplacementFallback">
      <summary>为不能转换为输出字符的已编码输入字节序列提供失败处理机制（称为“回退”）。 回退发出用户指定的替换字符串，而不是已解码的输入字节序列。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.#ctor">
      <summary>初始化 <see cref="T:System.Text.DecoderReplacementFallback" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.#ctor(System.String)">
      <summary>使用指定的替换字符串初始化 <see cref="T:System.Text.DecoderReplacementFallback" /> 类的新实例。</summary>
      <param name="replacement">在解码操作中发出的、用以替换无法解码的输入字节序列的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="replacement" /> 包含无效的代理项对。 也就是说，代理项对不是由一个高代理项组件后面跟着一个低代理项组件组成。</exception>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.CreateFallbackBuffer">
      <summary>创建一个 <see cref="T:System.Text.DecoderFallbackBuffer" /> 对象，该对象是用此 <see cref="T:System.Text.DecoderReplacementFallback" /> 对象的替换字符串初始化的。</summary>
      <returns>一个 <see cref="T:System.Text.DecoderFallbackBuffer" /> 对象，它指定要使用的字符串而不是原始解码操作输入。</returns>
    </member>
    <member name="P:System.Text.DecoderReplacementFallback.DefaultString">
      <summary>获取作为此 <see cref="T:System.Text.DecoderReplacementFallback" /> 对象的值的替换字符串。</summary>
      <returns>发出的用以替换无法解码的输入字节序列的替代字符串。</returns>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.Equals(System.Object)">
      <summary>指示指定对象的值是否与等于此 <see cref="T:System.Text.DecoderReplacementFallback" /> 对象的值。</summary>
      <param name="value">一个 <see cref="T:System.Text.DecoderReplacementFallback" /> 对象。</param>
      <returns>如果 <paramref name="value" /> 是 <see cref="T:System.Text.DecoderReplacementFallback" /> 对象，而该对象的 <see cref="P:System.Text.DecoderReplacementFallback.DefaultString" /> 属性等于当前 <see cref="P:System.Text.DecoderReplacementFallback.DefaultString" /> 对象的 <see cref="T:System.Text.DecoderReplacementFallback" /> 属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.DecoderReplacementFallback.GetHashCode">
      <summary>检索此 <see cref="T:System.Text.DecoderReplacementFallback" /> 对象的值的哈希代码。</summary>
      <returns>此对象的值的哈希代码。</returns>
    </member>
    <member name="P:System.Text.DecoderReplacementFallback.MaxCharCount">
      <summary>获取此 <see cref="T:System.Text.DecoderReplacementFallback" /> 对象的替换字符串中的字符数。</summary>
      <returns>发出的用以替换无法解码的字节序列的字符串中的字符数，也就是说，由 <see cref="P:System.Text.DecoderReplacementFallback.DefaultString" /> 属性返回的字符串长度。</returns>
    </member>
    <member name="T:System.Text.DecoderReplacementFallbackBuffer">
      <summary>表示无法对原始输入字节序列解码时发出的替代输出字符串。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Text.DecoderReplacementFallbackBuffer.#ctor(System.Text.DecoderReplacementFallback)">
      <summary>使用 <see cref="T:System.Text.DecoderReplacementFallbackBuffer" /> 对象的值初始化 <see cref="T:System.Text.DecoderReplacementFallback" /> 类的新实例。</summary>
      <param name="fallback">含有替换字符串的 <see cref="T:System.Text.DecoderReplacementFallback" /> 对象。</param>
    </member>
    <member name="M:System.Text.DecoderReplacementFallbackBuffer.Fallback(System.Byte[],System.Int32)">
      <summary>准备好替换回退缓冲区，以使用当前替换字符串。</summary>
      <param name="bytesUnknown">一个输入字节序列。 除非引发了异常，否则将忽略此参数。</param>
      <param name="index">
        <paramref name="bytesUnknown" /> 中字节的索引位置。 在该操作中会忽略此参数。</param>
      <returns>如果替换字符串非空，则为 <see langword="true" />；如果替换字符串为空，则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">在 <see cref="M:System.Text.DecoderReplacementFallbackBuffer.GetNextChar" /> 方法读取了替换回退缓冲区中的所有字符之前，此方法会被再次调用。</exception>
    </member>
    <member name="M:System.Text.DecoderReplacementFallbackBuffer.GetNextChar">
      <summary>检索替换回退缓冲区中的下一个字符。</summary>
      <returns>替换回退缓冲区中的下一个字符。</returns>
    </member>
    <member name="M:System.Text.DecoderReplacementFallbackBuffer.MovePrevious">
      <summary>导致下一个 <see cref="M:System.Text.DecoderReplacementFallbackBuffer.GetNextChar" /> 调用访问替换回退缓冲区中当前字符位置之前的字符位置。</summary>
      <returns>如果 <see cref="M:System.Text.DecoderReplacementFallbackBuffer.MovePrevious" /> 操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.DecoderReplacementFallbackBuffer.Remaining">
      <summary>获取待处理的替换回退缓冲区中的字符数。</summary>
      <returns>尚未处理的替换回退缓冲区中的字符数。</returns>
    </member>
    <member name="M:System.Text.DecoderReplacementFallbackBuffer.Reset">
      <summary>初始化 <see cref="T:System.Text.DecoderReplacementFallbackBuffer" /> 对象中的所有内部状态信息和数据。</summary>
    </member>
    <member name="T:System.Text.Encoder">
      <summary>将一组字符转换为一个字节序列。</summary>
    </member>
    <member name="M:System.Text.Encoder.#ctor">
      <summary>初始化 <see cref="T:System.Text.Encoder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>将 Unicode 字符的缓冲区转换为编码的字节序列，并将结果存储在另一个缓冲区中。</summary>
      <param name="chars">要转换的 UTF-16 编码字符的字符串的地址。</param>
      <param name="charCount">要转换的 <paramref name="chars" /> 中的字符数。</param>
      <param name="bytes">用于存储已转换字节的缓冲区的地址。</param>
      <param name="byteCount">要在转换中使用的 <paramref name="bytes" /> 中的最大字节数。</param>
      <param name="flush">如果没有更多的数据要进行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="charsUsed">当此方法返回时，包含来自在转换中使用的 <paramref name="chars" /> 的字符数。 此参数未经初始化即被传递。</param>
      <param name="bytesUsed">当此方法返回时，包含在转换中使用的字节数。 此参数未经初始化即被传递。</param>
      <param name="completed">当此方法返回时，如果转换了所有由 <paramref name="charCount" /> 指定的字符，则包含 <see langword="true" />；否则包含 <see langword="false" />。 此参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 或 <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> 或 <paramref name="byteCount" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">输出缓冲区太小，无法包含任何已转换的输出。 输出缓冲区应大于或等于由 <see cref="Overload:System.Text.Encoder.GetByteCount" /> 方法指示的大小。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生了回退（有关更完整的说明，请参阅 .NET Framework 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoder.Fallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <summary>将 Unicode 字符的数组转换为编码字节序列，并将结果存储在字节数组中。</summary>
      <param name="chars">要转换的字符数组。</param>
      <param name="charIndex">要转换的 <paramref name="chars" /> 的第一个元素。</param>
      <param name="charCount">要转换的 <paramref name="chars" /> 的元素数。</param>
      <param name="bytes">存储已转换的字节的数组。</param>
      <param name="byteIndex">存储数据的 <paramref name="bytes" /> 的第一个元素。</param>
      <param name="byteCount">要在转换中使用的 <paramref name="bytes" /> 的元素的最大数量。</param>
      <param name="flush">如果没有更多的数据要进行转换，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <param name="charsUsed">当此方法返回时，包含来自在转换中使用的 <paramref name="chars" /> 的字符数。 此参数未经初始化即被传递。</param>
      <param name="bytesUsed">当此方法返回时，包含由转换生成的字节数。 此参数未经初始化即被传递。</param>
      <param name="completed">当此方法返回时，如果转换了所有由 <paramref name="charCount" /> 指定的字符，则包含 <see langword="true" />；否则包含 <see langword="false" />。 此参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 或 <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、 <paramref name="charCount" />、 <paramref name="byteIndex" />或 <paramref name="byteCount" /> 小于零。  
或 
<paramref name="chars" /> - <paramref name="charIndex" /> 的长度小于 <paramref name="charCount" />。  
或 
<paramref name="bytes" /> - <paramref name="byteIndex" /> 的长度小于 <paramref name="byteCount" />。</exception>
      <exception cref="T:System.ArgumentException">输出缓冲区太小，无法包含任何已转换的输出。 输出缓冲区应大于或等于由 <see cref="Overload:System.Text.Encoder.GetByteCount" /> 方法指示的大小。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生了回退（有关更完整的说明，请参阅 .NET Framework 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoder.Fallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoder.Convert(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Boolean,System.Int32@,System.Int32@,System.Boolean@)">
      <param name="chars" />
      <param name="bytes" />
      <param name="flush" />
      <param name="charsUsed" />
      <param name="bytesUsed" />
      <param name="completed" />
    </member>
    <member name="P:System.Text.Encoder.Fallback">
      <summary>获取或设置当前 <see cref="T:System.Text.EncoderFallback" /> 对象的 <see cref="T:System.Text.Encoder" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Text.EncoderFallback" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">设置操作中的值为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentException">无法在设置操作中赋新值，这是因为当前 <see cref="T:System.Text.EncoderFallbackBuffer" /> 对象含有尚未编码的数据。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生了回退（有关更完整的说明，请参阅 .NET Framework 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoder.Fallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="P:System.Text.Encoder.FallbackBuffer">
      <summary>获取与当前 <see cref="T:System.Text.EncoderFallbackBuffer" /> 对象关联的 <see cref="T:System.Text.Encoder" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Text.EncoderFallbackBuffer" /> 对象。</returns>
    </member>
    <member name="M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)">
      <summary>在派生类中重写时，计算对一组字符（从指定的字符指针处开始）进行编码所产生的字节数。 一个参数指示计算后是否要清除编码器的内部状态。</summary>
      <param name="chars">指向第一个要编码的字符的指针。</param>
      <param name="count">要编码的字符的数目。</param>
      <param name="flush">若要在计算后模拟清除解码器的内部状态，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>通过对指定字符和内部缓冲区中的所有字符进行编码而产生的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 <see langword="null" />（在 Visual Basic .NET 中为 <see langword="Nothing" />）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生了回退（有关更完整的说明，请参阅 .NET Framework 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoder.Fallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)">
      <summary>在派生类中重写时，计算对指定字符数组中的一组字符进行编码所产生的字节数。 一个参数指示计算后是否要清除编码器的内部状态。</summary>
      <param name="chars">包含要编码的字符集的字符数组。</param>
      <param name="index">第一个要编码的字符的索引。</param>
      <param name="count">要编码的字符的数目。</param>
      <param name="flush">若要在计算后模拟清除解码器的内部状态，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>通过对指定字符和内部缓冲区中的所有字符进行编码而产生的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。  
或 
 <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="chars" /> 中的有效范围。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生了回退（有关更完整的说明，请参阅 .NET Framework 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoder.Fallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoder.GetByteCount(System.ReadOnlySpan{System.Char},System.Boolean)">
      <param name="chars" />
      <param name="flush" />
    </member>
    <member name="M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)">
      <summary>在派生类中重写时，将一组字符（从指定的字符指针处开始）和内部缓冲区中的任何字符编码为从指定字节指针开始存储的字节序列。 一个参数指示转换后是否清除编码器的内部状态。</summary>
      <param name="chars">指向第一个要编码的字符的指针。</param>
      <param name="charCount">要编码的字符的数目。</param>
      <param name="bytes">一个指针，指向开始写入所产生的字节序列的位置。</param>
      <param name="byteCount">最多写入的字节数。</param>
      <param name="flush">如果要在转换后清除编码器的内部状态，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>在由 <paramref name="bytes" /> 参数指示的位置处写入的实际字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。  
或 
 <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> 或 <paramref name="byteCount" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="byteCount" /> 少于所产生的字节数。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生了回退（有关更完整的说明，请参阅 .NET Framework 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoder.Fallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)">
      <summary>在派生类中重写时，将指定字符数组中的一组字符和内部缓冲区中的任何字符编码到指定的字节数组中。 一个参数指示转换后是否清除编码器的内部状态。</summary>
      <param name="chars">包含要编码的字符集的字符数组。</param>
      <param name="charIndex">第一个要编码的字符的索引。</param>
      <param name="charCount">要编码的字符的数目。</param>
      <param name="bytes">要包含所产生的字节序列的字节数组。</param>
      <param name="byteIndex">要开始写入所产生的字节序列的索引位置。</param>
      <param name="flush">如果要在转换后清除编码器的内部状态，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>写入 <paramref name="bytes" /> 的实际字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 <see langword="null" /> (<see langword="Nothing" />)。  
或 
 <paramref name="bytes" /> 为 <see langword="null" /> (<see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。  
或 
 <paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" />中的有效范围。  
或 
 <paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生了回退（有关更完整的说明，请参阅 .NET Framework 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoder.Fallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoder.GetBytes(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Boolean)">
      <param name="chars" />
      <param name="bytes" />
      <param name="flush" />
    </member>
    <member name="M:System.Text.Encoder.Reset">
      <summary>在派生类中重写时，将编码器设置回它的初始状态。</summary>
    </member>
    <member name="T:System.Text.EncoderExceptionFallback">
      <summary>为不能转换为输出字节序列的输入字符提供一个称为“回退”的失败处理机制。 如果输入字符无法转换为输出字节序列，则回退会引发异常。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Text.EncoderExceptionFallback.#ctor">
      <summary>初始化 <see cref="T:System.Text.EncoderExceptionFallback" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.EncoderExceptionFallback.CreateFallbackBuffer">
      <summary>返回编码器回退缓冲区，如果无法将字符序列转换为字节序列，则该缓冲区引发异常。</summary>
      <returns>当无法编码字符序列时，解码器回退缓冲区引发异常。</returns>
    </member>
    <member name="M:System.Text.EncoderExceptionFallback.Equals(System.Object)">
      <summary>指示当前 <see cref="T:System.Text.EncoderExceptionFallback" /> 对象与指定对象是否相等。</summary>
      <param name="value">从 <see cref="T:System.Text.EncoderExceptionFallback" /> 类派生的对象。</param>
      <returns>如果 <paramref name="value" /> 不为 <see langword="true" />（在 Visual Basic .NET 中为 <see langword="null" />），并且是 <see cref="T:System.Text.EncoderExceptionFallback" /> 对象，则为 <see langword="Nothing" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.EncoderExceptionFallback.GetHashCode">
      <summary>检索此实例的哈希代码。</summary>
      <returns>返回值始终是相同的任意值，没有特别的意义。</returns>
    </member>
    <member name="P:System.Text.EncoderExceptionFallback.MaxCharCount">
      <summary>获取此实例可以返回的最大字符数。</summary>
      <returns>返回值始终为零。</returns>
    </member>
    <member name="T:System.Text.EncoderExceptionFallbackBuffer">
      <summary>当输入字符无法转换为编码的输出字节序列时引发 <see cref="T:System.Text.EncoderFallbackException" />。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Text.EncoderExceptionFallbackBuffer.#ctor">
      <summary>初始化 <see cref="T:System.Text.EncoderExceptionFallbackBuffer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
      <summary>因为无法对输入字符进行编码而引发异常。 参数指定输入中代理项对的值和索引位置，未使用名义返回值。</summary>
      <param name="charUnknownHigh">输入对的高代理项。</param>
      <param name="charUnknownLow">输入对的低代理项。</param>
      <param name="index">该代理项对在输入缓冲区中的索引位置。</param>
      <returns>无。 不返回值，因为 <see cref="M:System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)" /> 方法始终引发异常。</returns>
      <exception cref="T:System.Text.EncoderFallbackException">无法对由 <paramref name="charUnknownHigh" /> 和 <paramref name="charUnknownLow" /> 表示的字符进行编码。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charUnknownHigh" /> 或 <paramref name="charUnknownLow" /> 是无效的。 <paramref name="charUnknownHigh" /> 不介于 U+D800 和 U+DBFF 之间（包括这两者），或者 <paramref name="charUnknownLow" /> 不介于 U+DC00 和 U+DFFF 之间（包括这两者）。</exception>
    </member>
    <member name="M:System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Int32)">
      <summary>因为无法对输入字符进行编码而引发异常。 参数指定无法转换的字符的值和索引位置。</summary>
      <param name="charUnknown">一个输入字符。</param>
      <param name="index">该字符在输入缓冲区中的索引位置。</param>
      <returns>无。 不返回值，因为 <see cref="M:System.Text.EncoderExceptionFallbackBuffer.Fallback(System.Char,System.Int32)" /> 方法始终引发异常。</returns>
      <exception cref="T:System.Text.EncoderFallbackException">无法对 <paramref name="charUnknown" /> 进行编码。 此方法始终引发异常，该异常报告 <paramref name="charUnknown" /> 和 <paramref name="index" /> 参数的值。</exception>
    </member>
    <member name="M:System.Text.EncoderExceptionFallbackBuffer.GetNextChar">
      <summary>检索异常回退缓冲区中的下一个字符。</summary>
      <returns>返回值始终为 Unicode 字符 NULL (U+0000)。  
 即使返回值是不变的，也仍会定义一个返回值，原因是此方法会实现一个抽象方法。</returns>
    </member>
    <member name="M:System.Text.EncoderExceptionFallbackBuffer.MovePrevious">
      <summary>导致下一个 <see cref="M:System.Text.EncoderExceptionFallbackBuffer.GetNextChar" /> 方法调用访问当前位置之前的异常数据缓冲区字符位置。</summary>
      <returns>返回值始终为 <see langword="false" />。  
即使返回值是不变的，也仍会定义一个返回值，原因是此方法会实现一个抽象方法。</returns>
    </member>
    <member name="P:System.Text.EncoderExceptionFallbackBuffer.Remaining">
      <summary>获取当前 <see cref="T:System.Text.EncoderExceptionFallbackBuffer" /> 对象中待处理的字符数。</summary>
      <returns>返回值始终为零。  
 即使返回值是不变的，也仍会定义一个返回值，原因是此方法会实现一个抽象方法。</returns>
    </member>
    <member name="T:System.Text.EncoderFallback">
      <summary>为不能转换为已编码输出字节序列的输入字符提供称为“回退”的失败处理机制。</summary>
    </member>
    <member name="M:System.Text.EncoderFallback.#ctor">
      <summary>初始化 <see cref="T:System.Text.EncoderFallback" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.EncoderFallback.CreateFallbackBuffer">
      <summary>在派生类中重写时，将初始化 <see cref="T:System.Text.EncoderFallbackBuffer" /> 类的新实例。</summary>
      <returns>提供编码器回退缓冲区的对象。</returns>
    </member>
    <member name="P:System.Text.EncoderFallback.ExceptionFallback">
      <summary>获取一个对象，在无法对输入字符进行编码时，该对象将引发异常。</summary>
      <returns>从 <see cref="T:System.Text.EncoderFallback" /> 类派生的类型。 默认值为 <see cref="T:System.Text.EncoderExceptionFallback" /> 对象。</returns>
    </member>
    <member name="P:System.Text.EncoderFallback.MaxCharCount">
      <summary>当用派生类重写时，获取当前 <see cref="T:System.Text.EncoderFallback" /> 对象能返回的最大字符数。</summary>
      <returns>当前 <see cref="T:System.Text.EncoderFallback" /> 对象能返回的最大字符数。</returns>
    </member>
    <member name="P:System.Text.EncoderFallback.ReplacementFallback">
      <summary>获取一个对象，该对象会输出一个替代字符串来代替无法编码的输入字符。</summary>
      <returns>从 <see cref="T:System.Text.EncoderFallback" /> 类派生的类型。 默认值是 <see cref="T:System.Text.EncoderReplacementFallback" /> 对象，该对象将未知输入字符替换为问号字符（“?”，U+003F）。</returns>
    </member>
    <member name="T:System.Text.EncoderFallbackBuffer">
      <summary>提供一个允许回退处理程序在无法编码输入的字符时返回备用字符串到编码器的缓冲区。</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.#ctor">
      <summary>初始化 <see cref="T:System.Text.EncoderFallbackBuffer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
      <summary>在派生类中重写后，此方法对回退缓冲区进行准备，以处理指定的代理项对。</summary>
      <param name="charUnknownHigh">输入对的高代理项。</param>
      <param name="charUnknownLow">输入对的低代理项。</param>
      <param name="index">该代理项对在输入缓冲区中的索引位置。</param>
      <returns>如果回退缓冲区可以处理 <paramref name="charUnknownHigh" /> 和 <paramref name="charUnknownLow" />，则为 <see langword="true" />；如果回退缓冲区忽略代理项对，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.Fallback(System.Char,System.Int32)">
      <summary>在派生类中重写后，此方法对回退缓冲区进行准备，以处理指定的输入字符。</summary>
      <param name="charUnknown">一个输入字符。</param>
      <param name="index">该字符在输入缓冲区中的索引位置。</param>
      <returns>如果回退缓冲区能处理 <paramref name="charUnknown" /> 则为 <see langword="true" />；如果回退缓冲区忽略 <paramref name="charUnknown" />，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.GetNextChar">
      <summary>在派生类中重写后，此方法检索回退缓冲区中的下一个字符。</summary>
      <returns>回退缓冲区中的下一个字符。</returns>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.MovePrevious">
      <summary>在派生类中重写后，此方法将使对 <see cref="M:System.Text.EncoderFallbackBuffer.GetNextChar" /> 方法的下一次调用访问当前字符位置之前的数据缓冲区字符位置。</summary>
      <returns>如果 <see cref="M:System.Text.EncoderFallbackBuffer.MovePrevious" /> 操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackBuffer.Remaining">
      <summary>在派生类中重写后，此属性获取当前 <see cref="T:System.Text.EncoderFallbackBuffer" /> 对象中要处理的剩余字符数。</summary>
      <returns>尚未处理的当前回退缓冲区中的字符数。</returns>
    </member>
    <member name="M:System.Text.EncoderFallbackBuffer.Reset">
      <summary>初始化所有与此回退缓冲区相关的数据和状态信息。</summary>
    </member>
    <member name="T:System.Text.EncoderFallbackException">
      <summary>编码器回退操作失败时引发的异常。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor">
      <summary>初始化 <see cref="T:System.Text.EncoderFallbackException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Text.EncoderFallbackException" /> 类的新实例。 一个参数指定错误信息。</summary>
      <param name="message">错误信息。</param>
    </member>
    <member name="M:System.Text.EncoderFallbackException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Text.EncoderFallbackException" /> 类的新实例。 参数指定错误信息和导致此异常的内部异常。</summary>
      <param name="message">错误信息。</param>
      <param name="innerException">导致此异常的异常。</param>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknown">
      <summary>获取导致异常的输入字符。</summary>
      <returns>无法编码的字符。</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknownHigh">
      <summary>获取导致异常的代理项对的高组件字符。</summary>
      <returns>无法编码的代理项对的高组件字符。</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackException.CharUnknownLow">
      <summary>获取导致异常的代理项对的低组件字符。</summary>
      <returns>无法编码的代理项对的低组件字符。</returns>
    </member>
    <member name="P:System.Text.EncoderFallbackException.Index">
      <summary>获取导致异常的字符在输入缓冲区中的索引位置。</summary>
      <returns>无法编码的字符在输入缓冲区中的索引位置。</returns>
    </member>
    <member name="M:System.Text.EncoderFallbackException.IsUnknownSurrogate">
      <summary>指示导致异常的输入是否为代理项对。</summary>
      <returns>如果输入是代理项对，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Text.EncoderReplacementFallback">
      <summary>为不能转换为输出字节序列的输入字符提供一个称为“回退”的失败处理机制。 此回退机制使用由用户指定的替换字符串来代替原始的输入字符。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.#ctor">
      <summary>初始化 <see cref="T:System.Text.EncoderReplacementFallback" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.#ctor(System.String)">
      <summary>使用指定的替换字符串初始化 <see cref="T:System.Text.EncoderReplacementFallback" /> 类的新实例。</summary>
      <param name="replacement">编码操作中转换的、用以替代无法编码的输入字符的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="replacement" /> 包含无效的代理项对。 也就是说，代理项不是由一个高代理项组件后面跟着一个低代理项组件组成。</exception>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.CreateFallbackBuffer">
      <summary>创建一个 <see cref="T:System.Text.EncoderFallbackBuffer" /> 对象，该对象是用此 <see cref="T:System.Text.EncoderReplacementFallback" /> 对象的替换字符串初始化的。</summary>
      <returns>一个 <see cref="T:System.Text.EncoderFallbackBuffer" /> 对象，它与此 <see cref="T:System.Text.EncoderReplacementFallback" /> 对象相等。</returns>
    </member>
    <member name="P:System.Text.EncoderReplacementFallback.DefaultString">
      <summary>获取作为此 <see cref="T:System.Text.EncoderReplacementFallback" /> 对象的值的替换字符串。</summary>
      <returns>一个用于替换无法编码的输入字符的替代字符串。</returns>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.Equals(System.Object)">
      <summary>指示指定对象的值是否与等于此 <see cref="T:System.Text.EncoderReplacementFallback" /> 对象的值。</summary>
      <param name="value">一个 <see cref="T:System.Text.EncoderReplacementFallback" /> 对象。</param>
      <returns>如果 <paramref name="value" /> 参数指定一个 <see cref="T:System.Text.EncoderReplacementFallback" /> 对象，并且该对象的替换字符串与此 <see cref="T:System.Text.EncoderReplacementFallback" /> 对象的替换字符串相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.EncoderReplacementFallback.GetHashCode">
      <summary>检索此 <see cref="T:System.Text.EncoderReplacementFallback" /> 对象的值的哈希代码。</summary>
      <returns>此对象的值的哈希代码。</returns>
    </member>
    <member name="P:System.Text.EncoderReplacementFallback.MaxCharCount">
      <summary>获取此 <see cref="T:System.Text.EncoderReplacementFallback" /> 对象的替换字符串中的字符数。</summary>
      <returns>用于替换无法编码的输入字符的字符串中的字符数。</returns>
    </member>
    <member name="T:System.Text.EncoderReplacementFallbackBuffer">
      <summary>表示无法对原始输入字符进行编码时使用的替代输入字符串。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Text.EncoderReplacementFallbackBuffer.#ctor(System.Text.EncoderReplacementFallback)">
      <summary>使用 <see cref="T:System.Text.EncoderReplacementFallbackBuffer" /> 对象的值初始化 <see cref="T:System.Text.EncoderReplacementFallback" /> 类的新实例。</summary>
      <param name="fallback">一个 <see cref="T:System.Text.EncoderReplacementFallback" /> 对象。</param>
    </member>
    <member name="M:System.Text.EncoderReplacementFallbackBuffer.Fallback(System.Char,System.Char,System.Int32)">
      <summary>指示当无法对输入代理项对进行编码时是否可以使用替换字符串，或者是否可以忽略代理项对。 参数指定代理项对及其在输入中的索引位置。</summary>
      <param name="charUnknownHigh">输入对的高代理项。</param>
      <param name="charUnknownLow">输入对的低代理项。</param>
      <param name="index">该代理项对在输入缓冲区中的索引位置。</param>
      <returns>如果替换字符串非空，则为 <see langword="true" />；如果替换字符串为空，则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">此方法会在 <see cref="M:System.Text.EncoderReplacementFallbackBuffer.GetNextChar" /> 方法读取了所有替换字符串字符之前被再次调用。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charUnknownHigh" /> 的数值小于 U+D800 或小于 U+D800。  
或 
<paramref name="charUnknownLow" /> 的数值小于 U+DC00 或大于 U+DC00。</exception>
    </member>
    <member name="M:System.Text.EncoderReplacementFallbackBuffer.Fallback(System.Char,System.Int32)">
      <summary>准备好替换回退缓冲区，以使用当前替换字符串。</summary>
      <param name="charUnknown">一个输入字符。 除非引发了异常，否则在该操作中会忽略此参数。</param>
      <param name="index">该字符在输入缓冲区中的索引位置。 在该操作中会忽略此参数。</param>
      <returns>如果替换字符串非空，则为 <see langword="true" />；如果替换字符串为空，则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">在 <see cref="M:System.Text.EncoderReplacementFallbackBuffer.GetNextChar" /> 方法读取了替换回退缓冲区中的所有字符之前，此方法会被再次调用。</exception>
    </member>
    <member name="M:System.Text.EncoderReplacementFallbackBuffer.GetNextChar">
      <summary>检索替换回退缓冲区中的下一个字符。</summary>
      <returns>应用程序可对其进行编码的替换回退缓冲区中的下一个 Unicode 字符。</returns>
    </member>
    <member name="M:System.Text.EncoderReplacementFallbackBuffer.MovePrevious">
      <summary>导致下一个 <see cref="M:System.Text.EncoderReplacementFallbackBuffer.GetNextChar" /> 方法调用访问当前字符位置之前的替换回退缓冲区中的字符位置。</summary>
      <returns>如果 <see cref="M:System.Text.EncoderReplacementFallbackBuffer.MovePrevious" /> 操作成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.EncoderReplacementFallbackBuffer.Remaining">
      <summary>获取待处理的替换回退缓冲区中的字符数。</summary>
      <returns>尚未处理的替换回退缓冲区中的字符数。</returns>
    </member>
    <member name="M:System.Text.EncoderReplacementFallbackBuffer.Reset">
      <summary>初始化 <see cref="T:System.Text.EncoderReplacementFallbackBuffer" /> 的此实例中的所有内部状态信息和数据。</summary>
    </member>
    <member name="T:System.Text.Encoding">
      <summary>表示字符编码。</summary>
    </member>
    <member name="M:System.Text.Encoding.#ctor">
      <summary>初始化 <see cref="T:System.Text.Encoding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.Encoding.#ctor(System.Int32)">
      <summary>初始化对应于指定代码页的 <see cref="T:System.Text.Encoding" /> 类的新实例。</summary>
      <param name="codePage">首选编码的代码页标识符。  
 或  
 0，使用默认编码。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codePage" /> 小于零。</exception>
    </member>
    <member name="M:System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
      <summary>使用指定编码器和解码器回退策略初始化对应于指定代码页的 <see cref="T:System.Text.Encoding" /> 类的新实例。</summary>
      <param name="codePage">编码的代码页标识符。</param>
      <param name="encoderFallback">一个对象，在无法用当前编码对字符进行编码时，该对象可用来提供错误处理过程。</param>
      <param name="decoderFallback">一个对象，在无法用当前编码对字节序列进行解码时，该对象可用来提供错误处理过程。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codePage" /> 小于零。</exception>
    </member>
    <member name="P:System.Text.Encoding.ASCII">
      <summary>获取 ASCII（7 位）字符集的编码。</summary>
      <returns>ASCII（7 位）字符集的编码。</returns>
    </member>
    <member name="P:System.Text.Encoding.BigEndianUnicode">
      <summary>获取使用 Big Endian 字节顺序的 UTF-16 格式的编码。</summary>
      <returns>使用 Big Endian 字节顺序的 UTF-16 格式的编码对象。</returns>
    </member>
    <member name="P:System.Text.Encoding.BodyName">
      <summary>在派生类中重写时，获取可与邮件代理正文标记一起使用的当前编码的名称。</summary>
      <returns>可与邮件代理正文标记一起使用的当前 <see cref="T:System.Text.Encoding" /> 的名称。  
或 
如果当前 <see cref="T:System.Text.Encoding" /> 无法使用，则为空字符串 ("")。</returns>
    </member>
    <member name="M:System.Text.Encoding.Clone">
      <summary>当在派生类中重写时，创建当前 <see cref="T:System.Text.Encoding" /> 对象的一个卷影副本。</summary>
      <returns>当前 <see cref="T:System.Text.Encoding" /> 对象的副本。</returns>
    </member>
    <member name="P:System.Text.Encoding.CodePage">
      <summary>在派生类中重写时，获取当前 <see cref="T:System.Text.Encoding" /> 的代码页标识符。</summary>
      <returns>当前 <see cref="T:System.Text.Encoding" /> 的代码页标识符。</returns>
    </member>
    <member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
      <summary>将整个字节数组从一种编码转换为另一种编码。</summary>
      <param name="srcEncoding">
        <paramref name="bytes" /> 的编码格式。</param>
      <param name="dstEncoding">目标编码格式。</param>
      <param name="bytes">要转换的字节。</param>
      <returns>
        <see cref="T:System.Byte" /> 类型的数组，其中包含将 <paramref name="bytes" /> 从 <paramref name="srcEncoding" /> 转换为 <paramref name="dstEncoding" /> 的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="srcEncoding" /> 为 <see langword="null" />。  

或 - 
<paramref name="dstEncoding" /> 为 <see langword="null" />。  

或 - 
<paramref name="bytes" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 srcEncoding. 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 dstEncoding. 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
      <summary>将字节数组内某个范围的字节从一种编码转换为另一种编码。</summary>
      <param name="srcEncoding">源数组 <paramref name="bytes" /> 的编码。</param>
      <param name="dstEncoding">输出数组的编码。</param>
      <param name="bytes">要转换的字节数组。</param>
      <param name="index">要转换的 <paramref name="bytes" /> 中第一个元素的索引。</param>
      <param name="count">要转换的字节数。</param>
      <returns>一个 <see cref="T:System.Byte" /> 类型的数组，其中包含将 <paramref name="bytes" /> 中某个范围的字节从 <paramref name="srcEncoding" /> 转换为 <paramref name="dstEncoding" /> 的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="srcEncoding" /> 为 <see langword="null" />。  

或 - 
<paramref name="dstEncoding" /> 为 <see langword="null" />。  

或 
 <paramref name="bytes" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 和 <paramref name="count" /> 不指定字节数组中的有效范围。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 srcEncoding. 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 dstEncoding. 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="P:System.Text.Encoding.DecoderFallback">
      <summary>获取或设置当前 <see cref="T:System.Text.DecoderFallback" /> 对象的 <see cref="T:System.Text.Encoding" /> 对象。</summary>
      <returns>当前 <see cref="T:System.Text.Encoding" /> 对象的解码器回退对象。</returns>
      <exception cref="T:System.ArgumentNullException">设置操作中的值为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">由于当前 <see cref="T:System.Text.Encoding" /> 对象为只读，所以无法在设置操作中赋值。</exception>
    </member>
    <member name="P:System.Text.Encoding.Default">
      <summary>获取此 .NET 实现的默认编码。</summary>
      <returns>此 .NET 实现的默认编码。</returns>
    </member>
    <member name="P:System.Text.Encoding.EncoderFallback">
      <summary>获取或设置当前 <see cref="T:System.Text.EncoderFallback" /> 对象的 <see cref="T:System.Text.Encoding" /> 对象。</summary>
      <returns>当前 <see cref="T:System.Text.Encoding" /> 对象的编码器回退对象。</returns>
      <exception cref="T:System.ArgumentNullException">设置操作中的值为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">由于当前 <see cref="T:System.Text.Encoding" /> 对象为只读，所以无法在设置操作中赋值。</exception>
    </member>
    <member name="P:System.Text.Encoding.EncodingName">
      <summary>在派生类中重写时，获取当前编码的用户可读说明。</summary>
      <returns>当前 <see cref="T:System.Text.Encoding" /> 的用户可读说明。</returns>
    </member>
    <member name="M:System.Text.Encoding.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否等同于当前实例。</summary>
      <param name="value">与当前实例进行比较的 <see cref="T:System.Object" />。</param>
      <returns>如果 <paramref name="value" /> 是 <see cref="T:System.Text.Encoding" /> 的一个实例并且等于当前实例，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)">
      <summary>在派生类中重写时，计算对一组字符（从指定的字符指针处开始）进行编码所产生的字节数。</summary>
      <param name="chars">指向第一个要编码的字符的指针。</param>
      <param name="count">要编码的字符的数目。</param>
      <returns>对指定字符进行编码后生成的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char[])">
      <summary>在派生类中重写时，计算对指定字符数组中的所有字符进行编码所产生的字节数。</summary>
      <param name="chars">包含要编码的字符的字符数组。</param>
      <returns>对指定字符数组中的所有字符进行编码后产生的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
      <summary>在派生类中重写时，计算对指定字符数组中的一组字符进行编码所产生的字节数。</summary>
      <param name="chars">包含要编码的字符集的字符数组。</param>
      <param name="index">第一个要编码的字符的索引。</param>
      <param name="count">要编码的字符的数目。</param>
      <returns>对指定字符进行编码后生成的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。  
或 
 <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="chars" /> 中的有效范围。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.ReadOnlySpan{System.Char})">
      <param name="chars" />
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.String)">
      <summary>在派生类中重写时，计算对指定字符串中的字符进行编码所产生的字节数。</summary>
      <param name="s">包含要编码的字符集的字符串。</param>
      <returns>对指定字符进行编码后生成的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetByteCount(System.String,System.Int32,System.Int32)">
      <param name="s" />
      <param name="index" />
      <param name="count" />
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)">
      <summary>在派生类中重写时，将一组字符（从指定的字符指针开始）编码为一个字节序列，并从指定的字节指针开始存储该字节序列。</summary>
      <param name="chars">指向第一个要编码的字符的指针。</param>
      <param name="charCount">要编码的字符的数目。</param>
      <param name="bytes">一个指针，指向开始写入所产生的字节序列的位置。</param>
      <param name="byteCount">最多写入的字节数。</param>
      <returns>在由 <paramref name="bytes" /> 参数指示的位置处写入的实际字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 <see langword="null" />。  
或 
 <paramref name="bytes" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> 或 <paramref name="byteCount" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="byteCount" /> 少于所产生的字节数。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[])">
      <summary>在派生类中重写时，将指定字符数组中的所有字符编码为一个字节序列。</summary>
      <param name="chars">包含要编码的字符的字符数组。</param>
      <returns>一个字节数组，包含对指定的字符集进行编码的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
      <summary>在派生类中重写时，将指定字符数组中的一组字符编码为一个字节序列。</summary>
      <param name="chars">包含要编码的字符集的字符数组。</param>
      <param name="index">第一个要编码的字符的索引。</param>
      <param name="count">要编码的字符的数目。</param>
      <returns>一个字节数组，包含对指定的字符集进行编码的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。  
或 
 <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="chars" /> 中的有效范围。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>在派生类中重写时，将指定字符数组中的一组字符编码为指定的字节数组。</summary>
      <param name="chars">包含要编码的字符集的字符数组。</param>
      <param name="charIndex">第一个要编码的字符的索引。</param>
      <param name="charCount">要编码的字符的数目。</param>
      <param name="bytes">要包含所产生的字节序列的字节数组。</param>
      <param name="byteIndex">要开始写入所产生的字节序列的索引位置。</param>
      <returns>写入 <paramref name="bytes" /> 的实际字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> 为 <see langword="null" />。  
或 
 <paramref name="bytes" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。  

或 - 
<paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" />中的有效范围。  

或 
 <paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.ReadOnlySpan{System.Char},System.Span{System.Byte})">
      <param name="chars" />
      <param name="bytes" />
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.String)">
      <summary>在派生类中重写时，将指定字符串中的所有字符编码为一个字节序列。</summary>
      <param name="s">包含要编码的字符的字符串。</param>
      <returns>一个字节数组，包含对指定的字符集进行编码的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32)">
      <param name="s" />
      <param name="index" />
      <param name="count" />
    </member>
    <member name="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>在派生类中重写时，将指定字符串中的一组字符编码为指定的字节数组。</summary>
      <param name="s">包含要编码的字符集的字符串。</param>
      <param name="charIndex">第一个要编码的字符的索引。</param>
      <param name="charCount">要编码的字符的数目。</param>
      <param name="bytes">要包含所产生的字节序列的字节数组。</param>
      <param name="byteIndex">要开始写入所产生的字节序列的索引位置。</param>
      <returns>写入 <paramref name="bytes" /> 的实际字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。  
或 
 <paramref name="bytes" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charIndex" />、<paramref name="charCount" /> 或 <paramref name="byteIndex" /> 小于零。  

或 - 
<paramref name="charIndex" /> 和 <paramref name="charCount" /> 不表示 <paramref name="chars" />中的有效范围。  

或 - 
<paramref name="byteIndex" /> 不是 <paramref name="bytes" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" /> 中从 <paramref name="byteIndex" /> 到数组结尾没有足够的容量来容纳所产生的字节。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)">
      <summary>在派生类中重写时，计算对字节序列（从指定的字节指针开始）进行解码所产生的字符数。</summary>
      <param name="bytes">指向第一个要解码的字节的指针。</param>
      <param name="count">要解码的字节数。</param>
      <returns>对指定字节序列进行解码所产生的字符数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte[])">
      <summary>在派生类中重写时，计算对指定字节数组中的所有字节进行解码所产生的字符数。</summary>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <returns>对指定字节序列进行解码所产生的字符数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
      <summary>在派生类中重写时，计算对字节序列（从指定字节数组开始）进行解码所产生的字符数。</summary>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <param name="index">第一个要解码的字节的索引。</param>
      <param name="count">要解码的字节数。</param>
      <returns>对指定字节序列进行解码所产生的字符数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。  

或 - 
<paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetCharCount(System.ReadOnlySpan{System.Byte})">
      <param name="bytes" />
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)">
      <summary>在派生类中重写时，将一个字节序列（从指定的字节指针开始）解码为一组字符，并从指定的字符指针开始存储该组字符。</summary>
      <param name="bytes">指向第一个要解码的字节的指针。</param>
      <param name="byteCount">要解码的字节数。</param>
      <param name="chars">一个指针，指向开始写入所产生的字符集的位置。</param>
      <param name="charCount">要写入的最大字符数。</param>
      <returns>在由 <paramref name="chars" /> 参数指示的位置处写入的实际字符数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 <see langword="null" />。  
或 
 <paramref name="chars" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> 或 <paramref name="charCount" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="charCount" /> 少于所产生的字符数。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[])">
      <summary>在派生类中重写时，将指定字节数组中的所有字节解码为一组字符。</summary>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <returns>一个字节数组，包含对指定的字节序列进行解码的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
      <summary>在派生类中重写时，将指定字节数组中的一个字节序列解码为一组字符。</summary>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <param name="index">第一个要解码的字节的索引。</param>
      <param name="count">要解码的字节数。</param>
      <returns>一个字节数组，包含对指定的字节序列进行解码的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。  
或 
 <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
      <summary>在派生类中重写时，将指定字节数组中的字节序列解码为指定的字符数组。</summary>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <param name="byteIndex">第一个要解码的字节的索引。</param>
      <param name="byteCount">要解码的字节数。</param>
      <param name="chars">要用于包含所产生的字符集的字符数组。</param>
      <param name="charIndex">开始写入所产生的字符集的索引位置。</param>
      <returns>写入 <paramref name="chars" /> 的实际字符数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 <see langword="null" />。  
或 
 <paramref name="chars" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteIndex" />、<paramref name="byteCount" /> 或 <paramref name="charIndex" /> 小于零。  
或 
 <paramref name="byteindex" /> 和 <paramref name="byteCount" /> 不表示 <paramref name="bytes" />中的有效范围。  
或 
 <paramref name="charIndex" /> 不是 <paramref name="chars" /> 中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="chars" /> 中从 <paramref name="charIndex" /> 到数组结尾没有足够容量来容纳所产生的字符。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetChars(System.ReadOnlySpan{System.Byte},System.Span{System.Char})">
      <param name="bytes" />
      <param name="chars" />
    </member>
    <member name="M:System.Text.Encoding.GetDecoder">
      <summary>在派生类中重写时，获取一个解码器，该解码器将已编码的字节序列转换为字符序列。</summary>
      <returns>一个 <see cref="T:System.Text.Decoder" />，它将已编码的字节序列转换为字符序列。</returns>
    </member>
    <member name="M:System.Text.Encoding.GetEncoder">
      <summary>在派生类中重写时，获取一个解码器，该解码器将 Unicode 字符序列转换为已编码的字节序列。</summary>
      <returns>一个 <see cref="T:System.Text.Encoder" />，它将 Unicode 字符序列转换为已编码的字节序列。</returns>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.Int32)">
      <summary>返回与指定代码页标识符关联的编码。</summary>
      <param name="codepage">首选编码的代码页标识符。 可能值均在 <see cref="T:System.Text.Encoding" /> 类主题中出现的表的“代码页”一列中列出。  
或 
0（零），使用默认编码。</param>
      <returns>与指定代码页关联的编码。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codepage" /> 小于零或大于 65535。</exception>
      <exception cref="T:System.ArgumentException">基础平台不支持 <paramref name="codepage" />。</exception>
      <exception cref="T:System.NotSupportedException">基础平台不支持 <paramref name="codepage" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
      <summary>返回与指定代码页标识符关联的编码。 参数指定一个错误处理程序，用于处理无法编码的字符和无法解码的字节序列。</summary>
      <param name="codepage">首选编码的代码页标识符。 可能值均在 <see cref="T:System.Text.Encoding" /> 类主题中出现的表的“代码页”一列中列出。  

或 - 
0（零），使用默认编码。</param>
      <param name="encoderFallback">一个对象，在无法用当前编码对字符进行编码时，该对象可用来提供错误处理过程。</param>
      <param name="decoderFallback">一个对象，在无法用当前编码对字节序列进行解码时，该对象可用来提供错误处理过程。</param>
      <returns>与指定代码页关联的编码。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codepage" /> 小于零或大于 65535。</exception>
      <exception cref="T:System.ArgumentException">基础平台不支持 <paramref name="codepage" />。</exception>
      <exception cref="T:System.NotSupportedException">基础平台不支持 <paramref name="codepage" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.String)">
      <summary>返回与指定代码页名称关联的编码。</summary>
      <param name="name">首选编码的代码页名称。 <see cref="P:System.Text.Encoding.WebName" /> 属性返回的所有值均有效。 可能值均在 <see cref="T:System.Text.Encoding" /> 类主题中出现的表的“名称”一列中列出。</param>
      <returns>与指定代码页关联的编码。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是有效的代码页名称。  
或 
基础平台不支持 <paramref name="name" /> 所指示的代码页。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
      <summary>返回与指定代码页名称关联的编码。 参数指定一个错误处理程序，用于处理无法编码的字符和无法解码的字节序列。</summary>
      <param name="name">首选编码的代码页名称。 <see cref="P:System.Text.Encoding.WebName" /> 属性返回的所有值均有效。 可能值均在 <see cref="T:System.Text.Encoding" /> 类主题中出现的表的“名称”一列中列出。</param>
      <param name="encoderFallback">一个对象，在无法用当前编码对字符进行编码时，该对象可用来提供错误处理过程。</param>
      <param name="decoderFallback">一个对象，在无法用当前编码对字节序列进行解码时，该对象可用来提供错误处理过程。</param>
      <returns>与指定代码页关联的编码。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是有效的代码页名称。  
或 
基础平台不支持 <paramref name="name" /> 所指示的代码页。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetEncodings">
      <summary>返回包含所有编码的数组。</summary>
      <returns>包含所有编码的数组。</returns>
    </member>
    <member name="M:System.Text.Encoding.GetHashCode">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>当前实例的哈希代码。</returns>
    </member>
    <member name="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
      <summary>在派生类中重写时，计算对指定数目的字符进行编码所产生的最大字节数。</summary>
      <param name="charCount">要编码的字符的数目。</param>
      <returns>对指定数目的字符进行编码所产生的最大字节数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> 小于零。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoding.EncoderFallback" /> 设置为 <see cref="T:System.Text.EncoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
      <summary>在派生类中重写时，计算对指定数目的字节进行解码时所产生的最大字符数。</summary>
      <param name="byteCount">要解码的字节数。</param>
      <returns>对指定数目的字节进行解码时所产生的最大字符数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> 小于零。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetPreamble">
      <summary>在派生类中重写时，返回指定所用编码的字节序列。</summary>
      <returns>一个字节数组，包含指定所用编码的字节序列。  
 或  
 长度为零的字节数组（如果不需要前导码）。</returns>
    </member>
    <member name="M:System.Text.Encoding.GetString(System.Byte*,System.Int32)">
      <summary>在派生类中重写时，将在指定地址开始的指定字节数解码为字符串。</summary>
      <param name="bytes">指向字节数组的指针。</param>
      <param name="byteCount">要解码的字节数。</param>
      <returns>包含指定字节序列解码结果的字符串。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 null 指针。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="byteCount" /> 小于零。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetString(System.Byte[])">
      <summary>在派生类中重写时，将指定字节数组中的所有字节解码为一个字符串。</summary>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <returns>包含指定字节序列解码结果的字符串。</returns>
      <exception cref="T:System.ArgumentException">字节数组中包含无效的 Unicode 码位。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
      <summary>在派生类中重写时，将指定字节数组中的一个字节序列解码为一个字符串。</summary>
      <param name="bytes">包含要解码的字节序列的字节数组。</param>
      <param name="index">第一个要解码的字节的索引。</param>
      <param name="count">要解码的字节数。</param>
      <returns>包含指定字节序列解码结果的字符串。</returns>
      <exception cref="T:System.ArgumentException">字节数组中包含无效的 Unicode 码位。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 或 <paramref name="count" /> 小于零。  
或 
 <paramref name="index" /> 和 <paramref name="count" /> 不表示 <paramref name="bytes" /> 中的有效范围。</exception>
      <exception cref="T:System.Text.DecoderFallbackException">发生了回退（如需完整说明，请参阅 .NET 中的字符编码） 
－和－ 
 将 <see cref="P:System.Text.Encoding.DecoderFallback" /> 设置为 <see cref="T:System.Text.DecoderExceptionFallback" />。</exception>
    </member>
    <member name="M:System.Text.Encoding.GetString(System.ReadOnlySpan{System.Byte})">
      <param name="bytes" />
    </member>
    <member name="P:System.Text.Encoding.HeaderName">
      <summary>在派生类中重写时，获取可与邮件代理头标记一起使用的当前编码的名称。</summary>
      <returns>与邮件代理头标记一起使用的当前 <see cref="T:System.Text.Encoding" /> 的名称。  

或 - 
如果当前 <see cref="T:System.Text.Encoding" /> 无法使用，则为空字符串 ("")。</returns>
    </member>
    <member name="M:System.Text.Encoding.IsAlwaysNormalized">
      <summary>使用默认范式获取一个值，该值指示当前编码是否始终被规范化。</summary>
      <returns>如果当前 <see cref="T:System.Text.Encoding" /> 始终被规范化，则为 <see langword="true" />；否则，为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)">
      <summary>在派生类中重写时，使用指定范式获取一个值，该值指示当前编码是否始终被规范化。</summary>
      <param name="form">
        <see cref="T:System.Text.NormalizationForm" /> 值之一。</param>
      <returns>如果始终使用指定的 <see langword="true" /> 值规范化当前 <see cref="T:System.Text.Encoding" /> 对象，则为 <see cref="T:System.Text.NormalizationForm" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.Encoding.IsBrowserDisplay">
      <summary>在派生类中重写时，获取一个值，该值指示浏览器客户端是否可以使用当前的编码显示内容。</summary>
      <returns>如果浏览器客户端可以使用当前的 <see cref="T:System.Text.Encoding" /> 显示内容，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.Encoding.IsBrowserSave">
      <summary>在派生类中重写时，获取一个值，该值指示浏览器客户端是否可以使用当前的编码保存内容。</summary>
      <returns>如果浏览器客户端可以使用当前的 <see cref="T:System.Text.Encoding" /> 保存内容，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.Encoding.IsMailNewsDisplay">
      <summary>在派生类中重写时，获取一个值，该值指示邮件和新闻客户端是否可以使用当前的编码显示内容。</summary>
      <returns>如果邮件和新闻客户端可以使用当前的 <see cref="T:System.Text.Encoding" /> 显示内容，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.Encoding.IsMailNewsSave">
      <summary>在派生类中重写时，获取一个值，该值指示邮件和新闻客户端是否可以使用当前的编码保存内容。</summary>
      <returns>如果邮件和新闻客户端可以使用当前 <see langword="true" /> 保存内容，则为 <see cref="T:System.Text.Encoding" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.Encoding.IsReadOnly">
      <summary>在派生类中重写时，获取一个值，该值指示当前的编码是否为只读。</summary>
      <returns>如果当前 <see langword="true" /> 为只读，则为 <see cref="T:System.Text.Encoding" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Text.Encoding.IsSingleByte">
      <summary>在派生类中重写时，获取一个值，该值指示当前的编码是否使用单字节码位。</summary>
      <returns>如果当前 <see langword="true" /> 使用单字节码位，则为 <see cref="T:System.Text.Encoding" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.Encoding.Preamble" />
    <member name="M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)">
      <summary>注册编码提供程序。</summary>
      <param name="provider">提供对其他字符编码的访问权限的 <see cref="T:System.Text.EncodingProvider" /> 的子类。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Text.Encoding.Unicode">
      <summary>获取使用 Little-Endian 字节顺序的 UTF-16 格式的编码。</summary>
      <returns>使用 Little-Endian 字节顺序的 UTF-16 格式的编码。</returns>
    </member>
    <member name="P:System.Text.Encoding.UTF32">
      <summary>获取使用 Little-Endian 字节顺序的 UTF-32 格式的编码。</summary>
      <returns>使用 Little-Endian 字节顺序的 UTF-32 格式的编码对象。</returns>
    </member>
    <member name="P:System.Text.Encoding.UTF7">
      <summary>获取 UTF-7 格式的编码。</summary>
      <returns>UTF-7 格式的编码。</returns>
    </member>
    <member name="P:System.Text.Encoding.UTF8">
      <summary>获取 UTF-8 格式的编码。</summary>
      <returns>UTF-8 格式的编码。</returns>
    </member>
    <member name="P:System.Text.Encoding.WebName">
      <summary>在派生类中重写时，获取在 Internet 编号分配管理机构 (IANA) 注册的当前编码的名称。</summary>
      <returns>当前 <see cref="T:System.Text.Encoding" /> 的 IANA 名称。</returns>
    </member>
    <member name="P:System.Text.Encoding.WindowsCodePage">
      <summary>在派生类中重写时，获取与当前编码最紧密对应的 Windows 操作系统代码页。</summary>
      <returns>与当前 <see cref="T:System.Text.Encoding" /> 最紧密对应的 Windows 操作系统代码页。</returns>
    </member>
    <member name="T:System.Text.EncodingInfo">
      <summary>提供有关编码的基本信息。</summary>
    </member>
    <member name="P:System.Text.EncodingInfo.CodePage">
      <summary>获取编码的代码页标识符。</summary>
      <returns>编码的代码页标识符。</returns>
    </member>
    <member name="P:System.Text.EncodingInfo.DisplayName">
      <summary>获取编码的可读说明。</summary>
      <returns>编码的可读说明。</returns>
    </member>
    <member name="M:System.Text.EncodingInfo.Equals(System.Object)">
      <summary>获取一个值，该值指示指定的对象是否等于当前的 <see cref="T:System.Text.EncodingInfo" /> 对象。</summary>
      <param name="value">要与当前 <see cref="T:System.Text.EncodingInfo" /> 对象进行比较的对象。</param>
      <returns>如果 <paramref name="value" /> 是 <see cref="T:System.Text.EncodingInfo" /> 对象且等于当前 <see cref="T:System.Text.EncodingInfo" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.EncodingInfo.GetEncoding">
      <summary>返回与当前 <see cref="T:System.Text.Encoding" /> 对象相对应的 <see cref="T:System.Text.EncodingInfo" /> 对象。</summary>
      <returns>与当前 <see cref="T:System.Text.Encoding" /> 对象相对应的 <see cref="T:System.Text.EncodingInfo" /> 对象。</returns>
    </member>
    <member name="M:System.Text.EncodingInfo.GetHashCode">
      <summary>返回当前 <see cref="T:System.Text.EncodingInfo" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Text.EncodingInfo.Name">
      <summary>获取在 Internet 编号分配管理机构 (IANA) 注册的编码的名称。</summary>
      <returns>编码的 IANA 名称。</returns>
    </member>
    <member name="T:System.Text.EncodingProvider">
      <summary>提供编码提供程序的基类，后者提供在特定平台上不可用的编码。</summary>
    </member>
    <member name="M:System.Text.EncodingProvider.#ctor">
      <summary>初始化 <see cref="T:System.Text.EncodingProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.EncodingProvider.GetEncoding(System.Int32)">
      <summary>返回与指定代码页标识符关联的编码。</summary>
      <param name="codepage">所请求编码的代码页标识符。</param>
      <returns>与指定代码页关联的编码，如果此 <see cref="T:System.Text.EncodingProvider" /> 无法返回对应于 <paramref name="codepage" /> 的有效编码，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Text.EncodingProvider.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)">
      <summary>返回与指定代码页标识符关联的编码。 参数指定一个错误处理程序，用于处理无法编码的字符和无法解码的字节序列。</summary>
      <param name="codepage">所请求编码的代码页标识符。</param>
      <param name="encoderFallback">一个对象，在无法用此编码对字符进行编码时，该对象可用来提供错误处理过程。</param>
      <param name="decoderFallback">一个对象，在无法用此编码对字节序列进行解码时，该对象可用来提供错误处理过程。</param>
      <returns>与指定代码页关联的编码，如果此 <see cref="T:System.Text.EncodingProvider" /> 无法返回对应于 <paramref name="codepage" /> 的有效编码，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Text.EncodingProvider.GetEncoding(System.String)">
      <summary>返回具有指定名称的编码。</summary>
      <param name="name">所请求编码的名称。</param>
      <returns>与指定名称关联的编码，如果此 <see cref="T:System.Text.EncodingProvider" /> 无法返回对应于 <paramref name="name" /> 的有效编码，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Text.EncodingProvider.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)">
      <summary>返回与指定名称关联的编码。 参数指定一个错误处理程序，用于处理无法编码的字符和无法解码的字节序列。</summary>
      <param name="name">首选编码的名称。</param>
      <param name="encoderFallback">一个对象，在无法用此编码对字符进行编码时，该对象可用来提供错误处理过程。</param>
      <param name="decoderFallback">一个对象，在无法用当前编码对字节序列进行解码时，该对象可用来提供错误处理过程。</param>
      <returns>与指定名称关联的编码，如果此 <see cref="T:System.Text.EncodingProvider" /> 无法返回对应于 <paramref name="name" /> 的有效编码，则为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Text.NormalizationForm">
      <summary>定义要执行的规范化的类型。</summary>
    </member>
    <member name="F:System.Text.NormalizationForm.FormC">
      <summary>指示 Unicode 字符串使用完全标准分解进行规范化，然后将序列替换为其主复合（如果可能）。</summary>
    </member>
    <member name="F:System.Text.NormalizationForm.FormD">
      <summary>指示 Unicode 字符串使用完全标准分解进行规范化。</summary>
    </member>
    <member name="F:System.Text.NormalizationForm.FormKC">
      <summary>指示 Unicode 字符串使用完全兼容分解进行规范化，然后将序列替换为其主复合（如果可能）。</summary>
    </member>
    <member name="F:System.Text.NormalizationForm.FormKD">
      <summary>指示 Unicode 字符串使用完全兼容分解进行规范化。</summary>
    </member>
    <member name="T:System.Text.Rune">
      <summary>表示 Unicode 标量值（[ U+0000..U+D7FF ]，含首尾值；或 [ U+E000..U+10FFFF ]，含首尾值）。</summary>
    </member>
    <member name="M:System.Text.Rune.#ctor(System.Char)">
      <summary>从提供的 UTF-16 代码单元中创建 <see cref="T:System.Text.Rune" />。</summary>
      <param name="ch">UTF-16 代码单元。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ch" /> 表示 UTF-16 代理项码位（U+D800..U+DFFF，含首尾值）。</exception>
    </member>
    <member name="M:System.Text.Rune.#ctor(System.Char,System.Char)">
      <summary>从提供的 UTF-16 代理项对中创建 <see cref="T:System.Text.Rune" />。</summary>
      <param name="highSurrogate">代理项对的高代理项。</param>
      <param name="lowSurrogate">代理项对的低代理项。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="highSurrogate" /> 不表示 UTF-16 高代理项码位。
或
<paramref name="lowSurrogate" /> 不表示 UTF-16 低代理项码位。</exception>
    </member>
    <member name="M:System.Text.Rune.#ctor(System.Int32)">
      <summary>从表示 Unicode 标量值的指定 32 位整数中创建 <see cref="T:System.Text.Rune" />。</summary>
      <param name="value">一个 Unicode 标量值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 不表示 Unicode 标量值。</exception>
    </member>
    <member name="M:System.Text.Rune.#ctor(System.UInt32)">
      <summary>从表示 Unicode 标量值的指定 32 位无符号整数中创建 <see cref="T:System.Text.Rune" />。</summary>
      <param name="value">一个 Unicode 标量值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 不表示 Unicode 标量值。</exception>
    </member>
    <member name="M:System.Text.Rune.CompareTo(System.Text.Rune)">
      <summary>将当前实例与指定的 <see cref="T:System.Text.Rune" /> 实例进行比较。</summary>
      <param name="other">要与当前实例进行比较的实例。</param>
      <returns>一个带符号整数，指示此实例在排序顺序中相对于 <paramref name="other" /> 的位置： - 小于零：此实例位于 <paramref name="other" /> 之前。 
- 零：此实例在排序顺序中的位置与 <paramref name="other" /> 相同。
- 大于零：此实例位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="M:System.Text.Rune.DecodeFromUtf16(System.ReadOnlySpan{System.Char},System.Text.Rune@,System.Int32@)">
      <summary>在提供的 UTF-16 源缓冲区开始处解码 <see cref="T:System.Text.Rune" />。</summary>
      <param name="source">只读 UTF-16 字符范围。</param>
      <param name="result">此方法返回时，已解码的 rune。</param>
      <param name="charsConsumed">此方法返回时，为创建 rune 而读取的字符数。</param>
      <returns>如果源缓冲区以有效的 UTF-16 编码标量值开头，则 <see cref="F:System.Buffers.OperationStatus.Done" />。 然后 <paramref name="result" /> 包含解码的 <see cref="T:System.Text.Rune" />，<paramref name="charsConsumed" /> 包含用于在输入缓冲区中解码 <see cref="T:System.Text.Rune" /> 的 <see cref="T:System.Char" /> 值的数目。
如果源缓冲区为空，或仅包含独立的 UTF-16 高代理项字符，则 <see cref="F:System.Buffers.OperationStatus.NeedMoreData" />。 然后 <paramref name="result" /> 包含 <see cref="P:System.Text.Rune.ReplacementChar" />，<paramref name="charsConsumed" /> 包含输入缓冲区的长度。
如果源缓冲区以格式错误的 UTF-16 编码标量值开头，则 <see cref="F:System.Buffers.OperationStatus.InvalidData" />。 然后 <paramref name="result" /> 包含 <see cref="P:System.Text.Rune.ReplacementChar" />，<paramref name="charsConsumed" /> 包含用于解码格式错误的序列的 <see cref="T:System.Char" /> 值的数目。</returns>
    </member>
    <member name="M:System.Text.Rune.DecodeFromUtf8(System.ReadOnlySpan{System.Byte},System.Text.Rune@,System.Int32@)">
      <summary>在提供的 UTF-8 源缓冲区开始处解码 <see cref="T:System.Text.Rune" />。</summary>
      <param name="source">只读 UTF-8 编码字节范围。</param>
      <param name="result">此方法返回时，已解码的 rune。</param>
      <param name="bytesConsumed">此方法返回时，为创建 rune 而读取的字节数。</param>
      <returns>如果源缓冲区以有效的 UTF-8 编码标量值开头，则 <see cref="F:System.Buffers.OperationStatus.Done" />。 然后 <paramref name="result" /> 包含解码的 <see cref="T:System.Text.Rune" />，<paramref name="bytesConsumed" /> 包含用于在输入缓冲区中解码 <see cref="T:System.Text.Rune" /> 的 <see cref="T:System.Byte" /> 值的数目。
如果源缓冲区为空，或仅包含独立的 UTF-8 高代理项字符，则 <see cref="F:System.Buffers.OperationStatus.NeedMoreData" />。 然后 <paramref name="result" /> 包含 <see cref="P:System.Text.Rune.ReplacementChar" />，<paramref name="bytesConsumed" /> 包含输入缓冲区的长度。
如果源缓冲区以格式错误的 UTF-8 编码标量值开头，则 <see cref="F:System.Buffers.OperationStatus.InvalidData" />。 然后 <paramref name="result" /> 包含 <see cref="P:System.Text.Rune.ReplacementChar" />，<paramref name="bytesConsumed" /> 包含用于在输入缓冲区解码格式错误的序列的 <see cref="T:System.Byte" /> 值的数目。</returns>
    </member>
    <member name="M:System.Text.Rune.DecodeLastFromUtf16(System.ReadOnlySpan{System.Char},System.Text.Rune@,System.Int32@)">
      <summary>在提供的 UTF-16 源缓冲区结尾处解码 <see cref="T:System.Text.Rune" />。</summary>
      <param name="source">只读 UTF-16 编码字符范围。</param>
      <param name="result">此方法返回时，已解码的 rune。</param>
      <param name="charsConsumed">此方法返回时，为创建 rune 而读取的字节数。</param>
      <returns>如果源缓冲区以有效的 UTF-16 编码标量值开头，则 <see cref="F:System.Buffers.OperationStatus.Done" />。 然后 <paramref name="result" /> 包含解码的 <see cref="T:System.Text.Rune" />，<paramref name="charsConsumed" /> 包含用于在输入缓冲区中解码 <see cref="T:System.Text.Rune" /> 的 <see cref="T:System.Char" /> 值的数目。
如果源缓冲区为空，或仅包含独立的 UTF-16 高代理项字符，则 <see cref="F:System.Buffers.OperationStatus.NeedMoreData" />。 然后 <paramref name="result" /> 包含 <see cref="P:System.Text.Rune.ReplacementChar" />，<paramref name="charsConsumed" /> 包含输入缓冲区的长度。
如果源缓冲区以格式错误的 UTF-16 编码标量值开头，则 <see cref="F:System.Buffers.OperationStatus.InvalidData" />。 然后 <paramref name="result" /> 包含 <see cref="P:System.Text.Rune.ReplacementChar" />，<paramref name="charsConsumed" /> 包含用于解码格式错误的序列的 <see cref="T:System.Char" /> 值的数目。</returns>
    </member>
    <member name="M:System.Text.Rune.DecodeLastFromUtf8(System.ReadOnlySpan{System.Byte},System.Text.Rune@,System.Int32@)">
      <summary>在提供的 UTF-8 源缓冲区结尾处解码 <see cref="T:System.Text.Rune" />。</summary>
      <param name="source">只读 UTF-8 编码字节范围。</param>
      <param name="value">此方法返回时，已解码的 rune。</param>
      <param name="bytesConsumed">此方法返回时，为创建 rune 而读取的字节数。</param>
      <returns>如果源缓冲区以有效的 UTF-8 编码标量值结尾，则 <see cref="F:System.Buffers.OperationStatus.Done" />。 然后 <paramref name="result" /> 包含解码的 <see cref="T:System.Text.Rune" />，<paramref name="bytesConsumed" /> 包含用于在输入缓冲区中解码 <see cref="T:System.Text.Rune" /> 的 <see cref="T:System.Byte" /> 值的数目。
如果源缓冲区为空，或仅包含独立的 UTF-8 高代理项字符，则 <see cref="F:System.Buffers.OperationStatus.NeedMoreData" />。 然后 <paramref name="result" /> 包含 <see cref="P:System.Text.Rune.ReplacementChar" />，<paramref name="bytesConsumed" /> 包含输入缓冲区的长度。
如果源缓冲区以格式错误的 UTF-8 编码标量值结尾，则 <see cref="F:System.Buffers.OperationStatus.InvalidData" />。 然后 <paramref name="result" /> 包含 <see cref="P:System.Text.Rune.ReplacementChar" />，<paramref name="bytesConsumed" /> 包含用于在输入缓冲区解码格式错误的序列的 <see cref="T:System.Byte" /> 值的数目。</returns>
    </member>
    <member name="M:System.Text.Rune.EncodeToUtf16(System.Span{System.Char})">
      <summary>将此 <see cref="T:System.Text.Rune" /> 解码为 UTF-16 目标缓冲区。</summary>
      <param name="destination">将此值作为 UTF-16 写入到的缓冲区。</param>
      <returns>写入到 <paramref name="destination" /> 的 <see cref="T:System.Char" /> 值的数目。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 的大小不足以保存输出。</exception>
    </member>
    <member name="M:System.Text.Rune.EncodeToUtf8(System.Span{System.Byte})">
      <summary>将此 <see cref="T:System.Text.Rune" /> 解码为 UTF-8 目标缓冲区。</summary>
      <param name="destination">将此值作为 UTF-8 写入到的缓冲区。</param>
      <returns>写入到 <paramref name="destination" /> 的 <see cref="T:System.Byte" /> 值的数目。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 的大小不足以保存输出。</exception>
    </member>
    <member name="M:System.Text.Rune.Equals(System.Object)">
      <summary>返回一个指示当前实例是否与指定对象相等的值。</summary>
      <param name="obj">要与当前实例进行比较的对象。</param>
      <returns>如果 <paramref name="obj" /> 为 <see cref="T:System.Text.Rune" /> 类型，并且等于当前的实例，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.Equals(System.Text.Rune)">
      <summary>返回一个值，该值指示当前实例是否与指定的 rune 相等。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <returns>如果当前实例与 <paramref name="other" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Text.Rune.GetNumericValue(System.Text.Rune)">
      <summary>获取与指定 rune 关联的数值。</summary>
      <param name="value">要获取其数值的 rune。</param>
      <returns>与 <paramref name="value" /> 关联的数值；如果 <paramref name="value" /> 不表示数字字符，则为 -1。</returns>
    </member>
    <member name="M:System.Text.Rune.GetRuneAt(System.String,System.Int32)">
      <summary>获取在字符串中指定位置开始的 <see cref="T:System.Text.Rune" />。</summary>
      <param name="input">从中创建 rune 的字符串。</param>
      <param name="index">在 <paramref name="input" /> 中创建 rune 的起始位置。</param>
      <returns>从 <paramref name="input" /> 中的指定 <paramref name="index" /> 处获取的 rune。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 不引用 <paramref name="input" /> 中有效标量值的开头。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了 <paramref name="input" /> 的范围。</exception>
    </member>
    <member name="M:System.Text.Rune.GetUnicodeCategory(System.Text.Rune)">
      <summary>获取与指定 rune 关联的 Unicode 类别。</summary>
      <param name="value">要获取其 Unicode 类别的 rune。</param>
      <returns>与 <paramref name="value" /> 关联的 Unicode 类别。</returns>
    </member>
    <member name="P:System.Text.Rune.IsAscii">
      <summary>获取一个值，该值指示与此 <see cref="T:System.Text.Rune" /> 关联的标量值是否在 ASCII 编码范围内。</summary>
      <returns>
        <see langword="true" />如果关联的标量值在 ASCII 编码范围 ([U + 0000.. U + 007F]) 内, 因而由单个 UTF-8 代码单元表示, 则为;否则为<see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.Rune.IsBmp">
      <summary>获取一个值，该值指示与此 <see cref="T:System.Text.Rune" /> 关联的标量值是否在 BMP 编码范围内。</summary>
      <returns>
        <see langword="true" />如果关联的标量值在 BMP 编码范围 ([U + 0000. U + FFFF]) 内, 因此由单个 UTF-16 代码单元表示;否则为<see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsControl(System.Text.Rune)">
      <summary>返回一个值，该值指示指定的 rune 是否属于控制字符类别。</summary>
      <param name="value">要计算的 rune。</param>
      <returns>如果 <see langword="true" /> 是控制字符，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsDigit(System.Text.Rune)">
      <summary>返回一个值，该值指示指定的 rune 是否属于十进制数字类别。</summary>
      <param name="value">要计算的 rune。</param>
      <returns>如果 <see langword="true" /> 是十进制数，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsLetter(System.Text.Rune)">
      <summary>返回一个值，该值指示指定的 rune 是否属于字母类别。</summary>
      <param name="value">要计算的 rune。</param>
      <returns>如果 <see langword="true" /> 是一个字母，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsLetterOrDigit(System.Text.Rune)">
      <summary>返回一个值，该值指示指定的 rune 属于字母类别还是十进制数字类别。</summary>
      <param name="value">要计算的 rune。</param>
      <returns>如果 <see langword="true" /> 是字母或十进制数，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsLower(System.Text.Rune)">
      <summary>返回一个值，该值指示指定的 rune 是否属于小写字母类别。</summary>
      <param name="value">要计算的 rune。</param>
      <returns>如果 <see langword="true" /> 是一个小写字母，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsNumber(System.Text.Rune)">
      <summary>返回一个值，该值指示指定的 rune 是否属于数字类别。</summary>
      <param name="value">要计算的 rune。</param>
      <returns>如果 <see langword="true" /> 是一个数字，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsPunctuation(System.Text.Rune)">
      <summary>返回一个值，该值指示指定的 rune 是否属于标点符号类别。</summary>
      <param name="value">要计算的 rune。</param>
      <returns>如果 <see langword="true" /> 是一个标点符号，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsSeparator(System.Text.Rune)">
      <summary>返回一个值，该值指示指定的 rune 是否属于分隔符类别。</summary>
      <param name="value">要计算的 rune。</param>
      <returns>如果 <see langword="true" /> 是分隔符，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsSymbol(System.Text.Rune)">
      <summary>返回一个值，该值指示指定的 rune 是否属于符号字符类别。</summary>
      <param name="value">要计算的 rune。</param>
      <returns>如果 <see langword="true" /> 是符号字符，则为 <paramref name="value" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsUpper(System.Text.Rune)">
      <summary>返回一个值，该值指示指定的 rune 是否属于大写字母类别。</summary>
      <param name="value">要计算的 rune。</param>
      <returns>如果 <paramref name="value" /> 是一个大写字母，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsValid(System.Int32)">
      <summary>返回一个值，该值指示 32 位带符号整数是否表示有效的 Unicode 标量值；即它在 [ U+0000..U+D7FF ]（含首尾值）或 [ U+E000..U+10FFFF ]（含首尾值）范围内。</summary>
      <param name="value">Unicode 标量值。</param>
      <returns>如果 <paramref name="value" /> 是有效的 Unicode 标量值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsValid(System.UInt32)">
      <summary>返回一个值，该值指示 32 位无符号整数是否表示有效的 Unicode 标量值；即它在 [ U+0000..U+D7FF ]（含首尾值）或 [ U+E000..U+10FFFF ]（含首尾值）范围内。</summary>
      <param name="value">Unicode 标量值。</param>
      <returns>如果 <paramref name="value" /> 是有效的 Unicode 标量值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.IsWhiteSpace(System.Text.Rune)">
      <summary>返回一个值，该值指示指定的 rune 是否属于空格字符类别。</summary>
      <param name="value">要计算的 rune。</param>
      <returns>如果 <paramref name="value" /> 是一个空格字符，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.op_Equality(System.Text.Rune,System.Text.Rune)">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Text.Rune" /> 实例是否相等。</summary>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.op_Explicit(System.Char)~System.Text.Rune">
      <summary>定义从 16 位 Unicode 字符到 <see cref="T:System.Text.Rune" /> 的显式转换。</summary>
      <param name="ch">要转换的 16 位 Unicode 字符。</param>
      <returns>32 位 Unicode 字符形式的 <paramref name="ch" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ch" /> 是表示代理码位的 Unicode 标量。</exception>
    </member>
    <member name="M:System.Text.Rune.op_Explicit(System.Int32)~System.Text.Rune">
      <summary>定义从 32 位带符号整数到 <see cref="T:System.Text.Rune" /> 的显式转换。</summary>
      <param name="value">要转换的 32 位带符号整数。</param>
      <returns>32 位 Unicode 字符形式的 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 是无效的 Unicode 标量。</exception>
    </member>
    <member name="M:System.Text.Rune.op_Explicit(System.UInt32)~System.Text.Rune">
      <summary>定义从 32 位无符号整数到 <see cref="T:System.Text.Rune" /> 的显式转换。</summary>
      <param name="value">要转换的 32 位带符号整数。</param>
      <returns>32 位 Unicode 字符形式的 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> 是无效的 Unicode 标量。</exception>
    </member>
    <member name="M:System.Text.Rune.op_GreaterThan(System.Text.Rune,System.Text.Rune)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Text.Rune" /> 是否大于另一个指定的 <see cref="T:System.Text.Rune" />。</summary>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
      <returns>如果 <see langword="true" /> 大于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.op_GreaterThanOrEqual(System.Text.Rune,System.Text.Rune)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Text.Rune" /> 是否大于等于另一个指定的 <see cref="T:System.Text.Rune" />。</summary>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
      <returns>如果 <paramref name="left" /> 大于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.op_Inequality(System.Text.Rune,System.Text.Rune)">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Text.Rune" /> 实例是否具有不同的值。</summary>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.op_LessThan(System.Text.Rune,System.Text.Rune)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Text.Rune" /> 是否小于另一个指定的 <see cref="T:System.Text.Rune" />。</summary>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
      <returns>如果 <paramref name="left" /> 小于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.op_LessThanOrEqual(System.Text.Rune,System.Text.Rune)">
      <summary>返回一个值，该值指示指定的 <see cref="T:System.Text.Rune" /> 是小于还是等于另一个指定的 <see cref="T:System.Text.Rune" />。</summary>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
      <returns>如果 <paramref name="left" /> 小于等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.Rune.Plane">
      <summary>获取包含此标量的 Unicode 平面（0 至 16，含 0 和 16）。</summary>
      <returns>包含此标量的 Unicode 平面 (0 到 16, 含)。</returns>
    </member>
    <member name="P:System.Text.Rune.ReplacementChar">
      <summary>获取表示 Unicode 替换字符 U+FFFD 的 <see cref="T:System.Text.Rune" /> 实例。</summary>
      <returns>一个 <see cref="T:System.Text.Rune" /> 实例，表示 Unicode 替换字符 U+FFFD。</returns>
    </member>
    <member name="M:System.Text.Rune.ToLower(System.Text.Rune,System.Globalization.CultureInfo)">
      <summary>根据指定区域性的大小写规则返回指定 <see cref="T:System.Text.Rune" /> 转换为小写形式的副本。</summary>
      <param name="value">要转换的 32 位 Unicode 字符。</param>
      <param name="culture">一个对象，用于提供区域性特定的大小写规则。</param>
      <returns>
        <paramref name="value" /> 的小写等效形式。</returns>
    </member>
    <member name="M:System.Text.Rune.ToLowerInvariant(System.Text.Rune)">
      <summary>根据固定区域性的大小写规则返回指定 <see cref="T:System.Text.Rune" /> 转换为小写形式的副本。</summary>
      <param name="value">要转换的 32 位 Unicode 字符。</param>
      <returns>
        <paramref name="value" /> 的小写等效形式。</returns>
    </member>
    <member name="M:System.Text.Rune.ToString">
      <summary>返回此 <see cref="T:System.Text.Rune" /> 实例的字符串表示形式。</summary>
      <returns>此 rune 的字符串表示形式。</returns>
    </member>
    <member name="M:System.Text.Rune.ToUpper(System.Text.Rune,System.Globalization.CultureInfo)">
      <summary>根据指定区域性的大小写规则返回指定 <see cref="T:System.Text.Rune" /> 转换为大写形式的副本。</summary>
      <param name="value">要转换的 32 位 Unicode 字符。</param>
      <param name="culture">一个对象，用于提供区域性特定的大小写规则。</param>
      <returns>
        <paramref name="value" /> 的大写等效形式。</returns>
    </member>
    <member name="M:System.Text.Rune.ToUpperInvariant(System.Text.Rune)">
      <summary>根据固定区域性的大小写规则返回指定 <see cref="T:System.Text.Rune" /> 转换为大写形式的副本。</summary>
      <param name="value">要转换的 32 位 Unicode 字符。</param>
      <returns>
        <paramref name="value" /> 的大写等效形式。</returns>
    </member>
    <member name="M:System.Text.Rune.TryCreate(System.Char,System.Char,System.Text.Rune@)">
      <summary>尝试从指定的 UTF-16 代理项对中创建 <see cref="T:System.Text.Rune" />，并返回指示操作是否成功的值。</summary>
      <param name="highSurrogate">代理项对的高代理项。</param>
      <param name="lowSurrogate">代理项对的低代理项。</param>
      <param name="result">对应于指定的代理项对的 rune。</param>
      <returns>如果操作成功，则为 <see langword="true" />；如果输入值不表示格式标准的 UTF-16 代理项对，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.TryCreate(System.Char,System.Text.Rune@)">
      <summary>尝试从指定的字符中创建 <see cref="T:System.Text.Rune" />，并返回指示操作是否成功的值。</summary>
      <param name="ch">从中创建 rune 的字符。</param>
      <param name="result">此方法返回时，对应于 <paramref name="ch" /> 的 rune。</param>
      <returns>如果此方法成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.TryCreate(System.Int32,System.Text.Rune@)">
      <summary>尝试从表示 Unicode 标量值的指定带符号整数中创建 <see cref="T:System.Text.Rune" />。</summary>
      <param name="value">Unicode 标量值。</param>
      <param name="result">此方法返回时，对应于 <paramref name="value" /> 的 rune。</param>
      <returns>如果此方法成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.TryCreate(System.UInt32,System.Text.Rune@)">
      <summary>尝试从表示 Unicode 标量值的指定 32 位无符号整数中创建 <see cref="T:System.Text.Rune" />。</summary>
      <param name="value">Unicode 标量值。</param>
      <param name="result">此方法返回时，对应于 <paramref name="value" /> 的 rune。</param>
      <returns>如果此方法成功，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.TryEncodeToUtf16(System.Span{System.Char},System.Int32@)">
      <summary>将此 <see cref="T:System.Text.Rune" /> 解码为 UTF-16 编码目标缓冲区。</summary>
      <param name="destination">将此值作为 UTF-16 编码值写入到的缓冲区。</param>
      <param name="charsWritten">写入 <paramref name="destination" /> 的 <see cref="T:System.Char" /> 值的数目，或者如果目标缓冲区大小不足以包含输出，则为 0。</param>
      <returns>如果该值已写入缓冲区，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.TryEncodeToUtf8(System.Span{System.Byte},System.Int32@)">
      <summary>将此 <see cref="T:System.Text.Rune" /> 解码为 UTF-8 编码目标缓冲区。</summary>
      <param name="destination">UTF-8 编码值写入到的缓冲区。</param>
      <param name="bytesWritten">写入 <paramref name="destination" /> 的 <see cref="T:System.Byte" /> 值的数目，或者如果目标缓冲区大小不足以包含输出，则为 0。</param>
      <returns>如果该值已写入缓冲区，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Rune.TryGetRuneAt(System.String,System.Int32,System.Text.Rune@)">
      <summary>尝试获取在字符串的指定位置处开始的 <see cref="T:System.Text.Rune" />，并返回指示操作是否成功的值。</summary>
      <param name="input">从中提取 rune 的字符串。</param>
      <param name="index">从中提取 rune 的从零开始的索引。</param>
      <param name="value">此方法返回时，已解码的 rune。</param>
      <returns>如果成功从指定索引中提取标量值，则为 <see langword="true" />；如果某值由于无效数据而无法进行提取，则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了 <paramref name="input" /> 的范围。</exception>
    </member>
    <member name="P:System.Text.Rune.Utf16SequenceLength">
      <summary>获取表示此标量值所需的 UTF-16 序列的代码单元 (<see cref="T:System.Char" />) 中的长度。</summary>
      <returns>表示此标量值所需<see cref="T:System.Char" />的 utf-16 序列的长度 (以代码单位为单位)。</returns>
    </member>
    <member name="P:System.Text.Rune.Utf8SequenceLength">
      <summary>获取表示此标量值所需的 UTF-8 序列的代码单元中的长度。</summary>
      <returns>表示此标量值所需的 UTF-8 序列的长度 (以代码单位表示)。</returns>
    </member>
    <member name="P:System.Text.Rune.Value">
      <summary>获取整数形式的 Unicode 标量值。</summary>
      <returns>整数形式的 Unicode 标量值。</returns>
    </member>
    <member name="T:System.Text.StringBuilder">
      <summary>表示可变字符字符串。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor">
      <summary>初始化 <see cref="T:System.Text.StringBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32)">
      <summary>使用指定的容量初始化 <see cref="T:System.Text.StringBuilder" /> 类的新实例。</summary>
      <param name="capacity">此实例的建议起始大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Text.StringBuilder" /> 类的新实例，该类起始于指定容量并且可增长到指定的最大容量。</summary>
      <param name="capacity">
        <see cref="T:System.Text.StringBuilder" /> 的建议起始大小。</param>
      <param name="maxCapacity">当前字符串可包含的最大字符数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxCapacity" /> 小于一，<paramref name="capacity" /> 小于零，或 <paramref name="capacity" /> 大于 <paramref name="maxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Text.StringBuilder" /> 类的新实例。</summary>
      <param name="value">用于初始化实例值的字符串。 如果 <paramref name="value" /> 为 <see langword="null" />，则新的 <see cref="T:System.Text.StringBuilder" /> 将包含空字符串（即包含 <see cref="F:System.String.Empty" />）。</param>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32)">
      <summary>使用指定的字符串和容量初始化 <see cref="T:System.Text.StringBuilder" /> 类的新实例。</summary>
      <param name="value">用于初始化实例值的字符串。 如果 <paramref name="value" /> 为 <see langword="null" />，则新的 <see cref="T:System.Text.StringBuilder" /> 将包含空字符串（即包含 <see cref="F:System.String.Empty" />）。</param>
      <param name="capacity">
        <see cref="T:System.Text.StringBuilder" /> 的建议起始大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>从指定的子字符串和容量初始化 <see cref="T:System.Text.StringBuilder" /> 类的新实例。</summary>
      <param name="value">字符串包含用于初始化此实例值的子字符串。 如果 <paramref name="value" /> 为 <see langword="null" />，则新的 <see cref="T:System.Text.StringBuilder" /> 将包含空字符串（即包含 <see cref="F:System.String.Empty" />）。</param>
      <param name="startIndex">
        <paramref name="value" /> 中子字符串开始的位置。</param>
      <param name="length">子字符串中的字符数。</param>
      <param name="capacity">
        <see cref="T:System.Text.StringBuilder" /> 的建议起始大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。  
或 
 <paramref name="startIndex" /> 加 <paramref name="length" /> 不是 <paramref name="value" /> 中的位置。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Boolean)">
      <summary>向此实例追加指定的布尔值的字符串表示形式。</summary>
      <param name="value">要追加的布尔值。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Byte)">
      <summary>向此实例追加指定的 8 位无符号整数的字符串表示形式。</summary>
      <param name="value">要追加的值。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char)">
      <summary>将指定的 <see cref="T:System.Char" /> 对象的字符串表示形式追加到此实例。</summary>
      <param name="value">要追加的 UTF 16 编码的代码单元。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char*,System.Int32)">
      <summary>将从指定地址开始的 Unicode 字符数组追加到此实例。</summary>
      <param name="value">指向字符数组的指针。</param>
      <param name="valueCount">数组中的字符数。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="valueCount" /> 小于零。  

或 - 
增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> 为 null 指针。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char,System.Int32)">
      <summary>向此实例追加 Unicode 字符的字符串表示形式指定数目的副本。</summary>
      <param name="value">要追加的字符。</param>
      <param name="repeatCount">要追加 <paramref name="value" /> 的次数。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="repeatCount" /> 小于零。  
或 
增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
      <exception cref="T:System.OutOfMemoryException">内存不足。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[])">
      <summary>向此实例追加指定数组中的 Unicode 字符的字符串表示形式。</summary>
      <param name="value">要追加的字符数组。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)">
      <summary>向此实例追加指定的 Unicode 字符子数组的字符串表示形式。</summary>
      <param name="value">字符数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 中的起始位置。</param>
      <param name="charCount">要追加的字符数。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />，且 <paramref name="startIndex" /> 和 <paramref name="charCount" /> 不为零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="charCount" /> 小于零。  
或 
 <paramref name="startIndex" /> 小于零。  
或 
 <paramref name="startIndex" /> + <paramref name="charCount" /> 大于 <paramref name="value" /> 的长度。  
或 
增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Decimal)">
      <summary>向此实例追加指定的十进制数的字符串表示形式。</summary>
      <param name="value">要追加的值。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Double)">
      <summary>向此实例追加指定的双精度浮点数的字符串表示形式。</summary>
      <param name="value">要追加的值。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int16)">
      <summary>向此实例追加指定的 16 位有符号整数的字符串表示形式。</summary>
      <param name="value">要追加的值。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int32)">
      <summary>向此实例追加指定的 32 位有符号整数的字符串表示形式。</summary>
      <param name="value">要追加的值。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Int64)">
      <summary>向此实例追加指定的 64 位有符号整数的字符串表示形式。</summary>
      <param name="value">要追加的值。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Object)">
      <summary>向此实例追加指定对象的字符串表示形式。</summary>
      <param name="value">要追加的对象。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.ReadOnlyMemory{System.Char})">
      <summary>向此实例追加指定的只读字符内存区域的字符串表示形式。</summary>
      <param name="value">要追加的只读字符内存区域。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.ReadOnlySpan{System.Char})">
      <summary>向此实例追加指定的只读字符范围的字符串表示形式。</summary>
      <param name="value">要追加的只读字符范围。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.SByte)">
      <summary>向此实例追加指定的 8 位有符号整数的字符串表示形式。</summary>
      <param name="value">要追加的值。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Single)">
      <summary>向此实例追加指定的单精度浮点数的字符串表示形式。</summary>
      <param name="value">要追加的值。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String)">
      <summary>向此实例追加指定字符串的副本。</summary>
      <param name="value">要追加的字符串。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)">
      <summary>向此实例追加指定子字符串的副本。</summary>
      <param name="value">包含要追加的子字符串的字符串。</param>
      <param name="startIndex">
        <paramref name="value" /> 中子字符串开始的位置。</param>
      <param name="count">要追加的 <paramref name="value" /> 中的字符数。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />，且 <paramref name="startIndex" /> 和 <paramref name="count" /> 不为零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于零。  
或 
 <paramref name="startIndex" /> 小于零。  

或 - 
<paramref name="startIndex" /> + <paramref name="count" /> 大于 <paramref name="value" /> 的长度。  

或 - 
增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Text.StringBuilder)">
      <summary>向此实例追加指定的字符串生成器的字符串表示形式。</summary>
      <param name="value">要追加的字符串生成器。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.Text.StringBuilder,System.Int32,System.Int32)">
      <summary>向此实例追加指定字符串生成器中的子字符串副本。</summary>
      <param name="value">包含要追加的子字符串的字符串生成器。</param>
      <param name="startIndex">
        <paramref name="value" /> 中子字符串开始的位置。</param>
      <param name="count">要追加的 <paramref name="value" /> 中的字符数。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt16)">
      <summary>向此实例追加指定的 16 位无符号整数的字符串表示形式。</summary>
      <param name="value">要追加的值。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt32)">
      <summary>向此实例追加指定的 32 位无符号整数的字符串表示形式。</summary>
      <param name="value">要追加的值。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Append(System.UInt64)">
      <summary>向此实例追加指定的 64 位无符号整数的字符串表示形式。</summary>
      <param name="value">要追加的值。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)">
      <summary>向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。 每个格式项都使用指定的格式提供程序替换为单个参数的字符串表示形式。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要设置格式的对象。</param>
      <returns>完成追加操作后对此实例的引用。 完成追加操作后，此实例包含执行该操作之前已存在的任何数据，并且有一个 <paramref name="format" /> 的副本作为后缀，其中任何格式规范都由 <paramref name="arg0" /> 的字符串表示形式替换。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。  
或 
格式项的索引小于 0（零），或者大于等于一 (1)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">扩展的字符串的长度将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)">
      <summary>向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。 每个格式项都使用指定的格式提供程序替换为两个参数中任一个的字符串表示形式。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要设置格式的第一个对象。</param>
      <param name="arg1">要设置格式的第二个对象。</param>
      <returns>完成追加操作后对此实例的引用。 完成追加操作后，此实例包含执行该操作之前已存在的任何数据，并且有一个 <paramref name="format" /> 的副本作为后缀，其中任何格式规范都由相应对象参数的字符串表示形式替换。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。  
或 
格式项的索引小于 0（零）或者大于或等于 2。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">扩展的字符串的长度将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)">
      <summary>向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。 每个格式项都使用指定的格式提供程序替换为三个参数中任一个的字符串表示形式。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要设置格式的第一个对象。</param>
      <param name="arg1">要设置格式的第二个对象。</param>
      <param name="arg2">要设置格式的第三个对象。</param>
      <returns>完成追加操作后对此实例的引用。 完成追加操作后，此实例包含执行该操作之前已存在的任何数据，并且有一个 <paramref name="format" /> 的副本作为后缀，其中任何格式规范都由相应对象参数的字符串表示形式替换。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。  
或 
格式项的索引小于 0（零）或者大于或等于 3。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">扩展的字符串的长度将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])">
      <summary>向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。 每个格式项都使用指定的格式提供程序由参数数组中相应参数的字符串表示形式替换。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="format">复合格式字符串。</param>
      <param name="args">要设置其格式的对象的数组。</param>
      <returns>完成追加操作后对此实例的引用。 完成追加操作后，此实例包含执行该操作之前已存在的任何数据，并且有一个 <paramref name="format" /> 的副本作为后缀，其中任何格式规范都由相应对象参数的字符串表示形式替换。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。  
或 
格式项的索引小于 0（零），或者大于或等于 <paramref name="args" /> 数组的长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">扩展的字符串的长度将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)">
      <summary>向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。 每个格式项都替换为一个参数的字符串表示形式。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要设置格式的对象。</param>
      <returns>对追加了 <paramref name="format" /> 的此实例的引用。 <paramref name="format" /> 中的每个格式项都替换为 <paramref name="arg0" /> 的字符串表示形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。  
或 
格式项的索引小于 0（零），或者大于或等于 1。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">扩展的字符串的长度将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)">
      <summary>向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。 每个格式项都替换为这两个参数中任意一个参数的字符串表示形式。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要设置格式的第一个对象。</param>
      <param name="arg1">要设置格式的第二个对象。</param>
      <returns>对追加了 <paramref name="format" /> 的此实例的引用。 <paramref name="format" /> 中的每个格式项都由相应的对象参数的字符串表示形式替换。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。  
或 
格式项的索引小于 0（零），或者大于等于 2。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">扩展的字符串的长度将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)">
      <summary>向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。 每个格式项都替换为这三个参数中任意一个参数的字符串表示形式。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="arg0">要设置格式的第一个对象。</param>
      <param name="arg1">要设置格式的第二个对象。</param>
      <param name="arg2">要设置格式的第三个对象。</param>
      <returns>对追加了 <paramref name="format" /> 的此实例的引用。 <paramref name="format" /> 中的每个格式项都由相应的对象参数的字符串表示形式替换。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。  

或 - 
格式项的索引小于 0（零）或者大于或等于 3。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">扩展的字符串的长度将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])">
      <summary>向此实例追加通过处理复合格式字符串（包含零个或更多格式项）而返回的字符串。 每个格式项都由参数数组中相应参数的字符串表示形式替换。</summary>
      <param name="format">复合格式字符串。</param>
      <param name="args">要设置其格式的对象的数组。</param>
      <returns>对追加了 <paramref name="format" /> 的此实例的引用。 <paramref name="format" /> 中的每个格式项都由相应的对象参数的字符串表示形式替换。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 或 <paramref name="args" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。  

或 - 
格式项的索引小于 0（零），或者大于或等于 <paramref name="args" /> 数组的长度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">扩展的字符串的长度将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendJoin(System.Char,System.Object[])">
      <param name="separator" />
      <param name="values" />
    </member>
    <member name="M:System.Text.StringBuilder.AppendJoin(System.Char,System.String[])">
      <param name="separator" />
      <param name="values" />
    </member>
    <member name="M:System.Text.StringBuilder.AppendJoin(System.String,System.Object[])">
      <param name="separator" />
      <param name="values" />
    </member>
    <member name="M:System.Text.StringBuilder.AppendJoin(System.String,System.String[])">
      <param name="separator" />
      <param name="values" />
    </member>
    <member name="M:System.Text.StringBuilder.AppendJoin``1(System.Char,System.Collections.Generic.IEnumerable{``0})">
      <param name="separator" />
      <param name="values" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Text.StringBuilder.AppendJoin``1(System.String,System.Collections.Generic.IEnumerable{``0})">
      <param name="separator" />
      <param name="values" />
      <typeparam name="T" />
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine">
      <summary>将默认的行终止符追加到当前 <see cref="T:System.Text.StringBuilder" /> 对象的末尾。</summary>
      <returns>完成追加操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.AppendLine(System.String)">
      <summary>将后面跟有默认行终止符的指定字符串的副本追加到当前 <see cref="T:System.Text.StringBuilder" /> 对象的末尾。</summary>
      <param name="value">要追加的字符串。</param>
      <returns>完成追加操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="P:System.Text.StringBuilder.Capacity">
      <summary>获取或设置可包含在当前实例所分配的内存中的最大字符数。</summary>
      <returns>可包含在当前实例所分配的内存中的最大字符数。 其值可以从 <see cref="P:System.Text.StringBuilder.Length" /> 到 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">为集运算指定的值小于此实例的当前长度。  
 或  
 为集运算指定的值大于最大容量。</exception>
    </member>
    <member name="P:System.Text.StringBuilder.Chars(System.Int32)">
      <summary>获取或设置此实例中指定字符位置处的字符。</summary>
      <param name="index">字符的位置。</param>
      <returns>
        <paramref name="index" /> 位置处的 Unicode 字符。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置字符时，<paramref name="index" /> 在此实例的范围之外。</exception>
      <exception cref="T:System.IndexOutOfRangeException">获取字符时，<paramref name="index" /> 在此实例的范围之外。</exception>
    </member>
    <member name="T:System.Text.StringBuilder.ChunkEnumerator">
      <summary>支持对 <see cref="T:System.Text.StringBuilder" /> 实例的区块进行简单迭代。</summary>
    </member>
    <member name="P:System.Text.StringBuilder.ChunkEnumerator.Current">
      <summary>获取集合的区块和当前位置。</summary>
      <returns>集合当前位置的块区。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.ChunkEnumerator.GetEnumerator">
      <summary>提供以 <see cref="T:System.Collections.IEnumerator" /> 形式返回 <see langword="this" /> 的 <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> 实现。</summary>
      <returns>可用于循环访问区块的枚举器对象。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.ChunkEnumerator.MoveNext">
      <summary>使枚举数前进到集合中的下一区块。</summary>
      <returns>如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Clear">
      <summary>从当前 <see cref="T:System.Text.StringBuilder" /> 实例中移除所有字符。</summary>
      <returns>其 <see cref="P:System.Text.StringBuilder.Length" /> 为 0（零）的对象。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>将此实例的指定段中的字符复制到目标 <see cref="T:System.Char" /> 数组的指定段中。</summary>
      <param name="sourceIndex">此实例中开始复制字符的位置。 索引是从零开始的。</param>
      <param name="destination">将从中复制字符的数组。</param>
      <param name="destinationIndex">
        <paramref name="destination" /> 中将从其开始复制字符的起始位置。 索引是从零开始的。</param>
      <param name="count">要复制的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceIndex" />、<paramref name="destinationIndex" /> 或 <paramref name="count" /> 小于零。  
或 
 <paramref name="sourceIndex" /> 大于此实例的长度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceIndex" /> + <paramref name="count" /> 大于此实例的长度。  
或 
 <paramref name="destinationIndex" /> + <paramref name="count" /> 大于 <paramref name="destination" /> 的长度。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.CopyTo(System.Int32,System.Span{System.Char},System.Int32)">
      <param name="sourceIndex" />
      <param name="destination" />
      <param name="count" />
    </member>
    <member name="M:System.Text.StringBuilder.EnsureCapacity(System.Int32)">
      <summary>确保 <see cref="T:System.Text.StringBuilder" /> 的此实例的容量至少是指定值。</summary>
      <param name="capacity">要确保的最小容量。</param>
      <returns>此实例的新容量。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。  
或 
增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Equals(System.ReadOnlySpan{System.Char})">
      <summary>返回一个值，该值指示此实例中的字符是否等于指定的只读字符范围中的字符。</summary>
      <param name="span">与当前实例进行比较的字符范围。</param>
      <returns>如果此实例中的字符与 <paramref name="span" /> 相同，为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Equals(System.Text.StringBuilder)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="sb">与此实例进行比较的对象，或为 <see langword="null" />。</param>
      <returns>如果此实例和 <paramref name="sb" /> 具有相等的字符串、<see cref="P:System.Text.StringBuilder.Capacity" /> 和 <see cref="P:System.Text.StringBuilder.MaxCapacity" /> 值，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.GetChunks">
      <summary>返回一个对象，该对象可用于循环访问从此 <see cref="T:System.Text.StringBuilder" /> 实例创建的 <see langword="ReadOnlyMemory&lt;Char&gt;" /> 中表示的字符区块。</summary>
      <returns>
        <see langword="ReadOnlyMemory&lt;Char&gt;" /> 中区块的枚举器。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Boolean)">
      <summary>将布尔值的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Byte)">
      <summary>将指定的 8 位无符号整数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char)">
      <summary>将指定的 Unicode 字符的字符串表示形式插入到此实例中的指定位置。</summary>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。  
或 
增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[])">
      <summary>将指定的 Unicode 字符数组的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的字符数组。</param>
      <returns>完成插入操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。  
或 
增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)">
      <summary>将指定的 Unicode 字符子数组的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">字符数组。</param>
      <param name="startIndex">
        <paramref name="value" /> 内的起始索引。</param>
      <param name="charCount">要插入的字符数。</param>
      <returns>完成插入操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />，且 <paramref name="startIndex" /> 和 <paramref name="charCount" /> 不为零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />、<paramref name="startIndex" /> 或 <paramref name="charCount" /> 小于零。  
或 
 <paramref name="index" /> 大于此实例的长度。  
或 
 <paramref name="startIndex" /> 加 <paramref name="charCount" /> 不是 <paramref name="value" /> 中的位置。  

或 - 
增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Decimal)">
      <summary>将十进制数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Double)">
      <summary>将双精度浮点数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int16)">
      <summary>将指定的 16 位带符号整数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int32)">
      <summary>将指定的 32 位带符号整数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int64)">
      <summary>将 64 位带符号整数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Object)">
      <summary>将对象的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的对象，或 <see langword="null" />。</param>
      <returns>完成插入操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.ReadOnlySpan{System.Char})">
      <param name="index" />
      <param name="value" />
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.SByte)">
      <summary>将指定的 8 位带符号整数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Single)">
      <summary>将单精度浮点数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String)">
      <summary>将字符串插入到此实例中的指定字符位置。</summary>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的字符串。</param>
      <returns>完成插入操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的当前长度。  
或 
此 <see cref="T:System.Text.StringBuilder" /> 对象的当前长度加上 <paramref name="value" /> 的长度超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)">
      <summary>将指定字符串的一个或更多副本插入到此实例中的指定字符位置。</summary>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的字符串。</param>
      <param name="count">要插入 <paramref name="value" /> 的次数。</param>
      <returns>完成插入后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的当前长度。  
或 
 <paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.OutOfMemoryException">此 <see cref="T:System.Text.StringBuilder" /> 对象的当前长度加上 <paramref name="value" /> 的长度乘以 <paramref name="count" />，超过了 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt16)">
      <summary>将 16 位无符号整数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt32)">
      <summary>将 32 位无符号整数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt64)">
      <summary>将 64 位无符号整数的字符串表示形式插入到此实例中的指定字符位置。</summary>
      <param name="index">此实例中开始插入的位置。</param>
      <param name="value">要插入的值。</param>
      <returns>完成插入操作后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零或大于此实例的长度。</exception>
      <exception cref="T:System.OutOfMemoryException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="P:System.Text.StringBuilder.Length">
      <summary>获取或设置当前 <see cref="T:System.Text.StringBuilder" /> 对象的长度。</summary>
      <returns>此实例的长度。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">为集运算指定的值小于零或大于 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="P:System.Text.StringBuilder.MaxCapacity">
      <summary>获取此实例的最大容量。</summary>
      <returns>此实例可容纳的最大字符数。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)">
      <summary>将指定范围的字符从此实例中移除。</summary>
      <param name="startIndex">此实例中开始移除操作的从零开始的位置。</param>
      <param name="length">要删除的字符数。</param>
      <returns>切除操作完成后对此实例的引用。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">如果 <paramref name="startIndex" /> 或 <paramref name="length" /> 小于零，或者 <paramref name="startIndex" /> + <paramref name="length" /> 大于此实例的长度。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char)">
      <summary>将此实例中出现的所有指定字符替换为其他指定字符。</summary>
      <param name="oldChar">要替换的字符。</param>
      <param name="newChar">替换 <paramref name="oldChar" /> 的字符。</param>
      <returns>对此实例的引用，其中 <paramref name="oldChar" /> 被 <paramref name="newChar" /> 替换。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)">
      <summary>将此实例的子字符串中出现的所有指定字符替换为其他指定字符。</summary>
      <param name="oldChar">要替换的字符。</param>
      <param name="newChar">替换 <paramref name="oldChar" /> 的字符。</param>
      <param name="startIndex">此实例中子字符串开始的位置。</param>
      <param name="count">子字符串的长度。</param>
      <returns>对此实例的引用，其中从 <paramref name="startIndex" /> 到 <paramref name="startIndex" /> + <paramref name="count" /> -1 范围内的 <paramref name="oldChar" /> 被 <paramref name="newChar" /> 替换。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> + <paramref name="count" /> 大于此实例的值的长度。  

或 - 
<paramref name="startIndex" /> 或 <paramref name="count" /> 小于零。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String)">
      <summary>将此实例中出现的所有指定字符串的替换为其他指定字符串。</summary>
      <param name="oldValue">要替换的字符串。</param>
      <param name="newValue">替换 <paramref name="oldValue" /> 的字符串或 <see langword="null" />。</param>
      <returns>对此实例的引用，其中 <paramref name="oldValue" /> 的所有实例被 <paramref name="newValue" /> 替换。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> 的长度为零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>将此实例的子字符串中出现的所有指定字符串替换为其他指定字符串。</summary>
      <param name="oldValue">要替换的字符串。</param>
      <param name="newValue">替换 <paramref name="oldValue" /> 的字符串或 <see langword="null" />。</param>
      <param name="startIndex">此实例中子字符串开始的位置。</param>
      <param name="count">子字符串的长度。</param>
      <returns>对此实例的引用，其中从 <paramref name="startIndex" /> 到 <paramref name="startIndex" /> + <paramref name="count" /> - 1 的范围内 <paramref name="oldValue" /> 的所有实例被 <paramref name="newValue" /> 替换。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldValue" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> 的长度为零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="count" /> 小于零。  

或 - 
<paramref name="startIndex" /> 加 <paramref name="count" /> 指示一个不在此实例内的字符位置。  

或 
增大此实例的值将超过 <see cref="P:System.Text.StringBuilder.MaxCapacity" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象来反序列化当前 <see cref="T:System.Text.StringBuilder" /> 对象。</summary>
      <param name="info">要用序列化信息填充的对象。</param>
      <param name="context">存储和检索序列化数据的位置。 留待将来使用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.StringBuilder.ToString">
      <summary>将此实例的值转换为 <see cref="T:System.String" />。</summary>
      <returns>其值与此实例相同的字符串。</returns>
    </member>
    <member name="M:System.Text.StringBuilder.ToString(System.Int32,System.Int32)">
      <summary>将此实例中子字符串的值转换为 <see cref="T:System.String" />。</summary>
      <param name="startIndex">此实例内子字符串的起始位置。</param>
      <param name="length">子字符串的长度。</param>
      <returns>一个字符串，其值与此实例的指定子字符串相同。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> 或 <paramref name="length" /> 小于零。  

或 - 
<paramref name="startIndex" /> 和 <paramref name="length" /> 之和大于当前实例的长度。</exception>
    </member>
    <member name="T:System.Text.StringRuneEnumerator">
      <summary>为由字符串表示的 <see cref="T:System.Text.Rune" /> 值提供枚举器。</summary>
    </member>
    <member name="P:System.Text.StringRuneEnumerator.Current">
      <summary>获取枚举数当前位置的 <see cref="T:System.Text.Rune" />。</summary>
      <returns>
        <see cref="T:System.Text.Rune" />位于枚举数当前位置的。</returns>
    </member>
    <member name="M:System.Text.StringRuneEnumerator.GetEnumerator">
      <summary>返回当前枚举器实例。</summary>
      <returns>当前枚举器实例。</returns>
    </member>
    <member name="M:System.Text.StringRuneEnumerator.MoveNext">
      <summary>将枚举器推进到字符串的下一个 <see cref="T:System.Text.Rune" />。</summary>
      <returns>如果枚举器成功推进到下一项，则为 <see langword="true" />；如果已到达字符串的末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.StringRuneEnumerator.System#Collections#Generic#IEnumerable{System#Text#Rune}#GetEnumerator">
      <summary>返回当前枚举器实例。</summary>
      <returns>当前枚举器实例。</returns>
    </member>
    <member name="M:System.Text.StringRuneEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回当前枚举器实例。</summary>
      <returns>当前枚举器实例。</returns>
    </member>
    <member name="P:System.Text.StringRuneEnumerator.System#Collections#IEnumerator#Current">
      <summary>获取枚举数当前位置的 <see cref="T:System.Text.Rune" />。</summary>
      <returns>
        <see cref="T:System.Text.Rune" />位于枚举数当前位置的。</returns>
    </member>
    <member name="M:System.Text.StringRuneEnumerator.System#Collections#IEnumerator#Reset">
      <summary>将当前 <see cref="T:System.Text.StringRuneEnumerator" /> 实例重置为字符串的开头。</summary>
    </member>
    <member name="M:System.Text.StringRuneEnumerator.System#IDisposable#Dispose">
      <summary>释放由当前 <see cref="T:System.Text.StringRuneEnumerator" /> 实例使用的所有资源。</summary>
    </member>
    <member name="T:System.Text.Unicode.Utf8">
      <summary>提供用于将分块数据在 UTF-8 和 UTF-16 编码之间转换的静态方法。</summary>
    </member>
    <member name="M:System.Text.Unicode.Utf8.FromUtf16(System.ReadOnlySpan{System.Char},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean,System.Boolean)">
      <summary>将 UTF-16 字符范围转换为 UTF-8 编码字节范围。</summary>
      <param name="source">UTF-16 编码只读字符范围。</param>
      <param name="destination">UTF-8 编码字节范围。</param>
      <param name="charsRead">方法返回时，从 <paramref name="source" /> 中读取的字符数。</param>
      <param name="bytesWritten">方法返回时，写入 <paramref name="destination" /> 的字符数。</param>
      <param name="replaceInvalidSequences">若要将 <paramref name="source" /> 中的无效 UTF-16 序列替换为 U+FFFD，则为 <see langword="true" />；若要返回 <see cref="F:System.Buffers.OperationStatus.InvalidData" />（如果在 <paramref name="source" /> 中发现了无效字符），则为 <see langword="false" />。</param>
      <param name="isFinalBlock">如果方法不应返回 <see cref="F:System.Buffers.OperationStatus.InvalidData" />，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>一个指示转换状态的值。</returns>
    </member>
    <member name="M:System.Text.Unicode.Utf8.ToUtf16(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Int32@,System.Int32@,System.Boolean,System.Boolean)">
      <summary>将 UTF-8 编码只读字节范围转换为 UTF-16 编码字符范围。</summary>
      <param name="source">UTF-8 编码只读字符范围。</param>
      <param name="destination">UTF-8 编码字节范围。</param>
      <param name="bytesRead">方法返回时，从 <paramref name="source" /> 中读取的字节数。</param>
      <param name="charsWritten">方法返回时，写入 <paramref name="destination" /> 的字符数。</param>
      <param name="replaceInvalidSequences">若要将 <paramref name="source" /> 中的无效 UTF-8 序列替换为 U+FFFD，则为 <see langword="true" />；若要返回 <see cref="F:System.Buffers.OperationStatus.InvalidData" />（如果在 <paramref name="source" /> 中发现了无效字符），则为 <see langword="false" />。</param>
      <param name="isFinalBlock">如果方法不应返回 <see cref="F:System.Buffers.OperationStatus.InvalidData" />，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>一个指示转换状态的值。</returns>
    </member>
    <member name="T:System.Threading.CancellationToken">
      <summary>传播有关应取消操作的通知。</summary>
    </member>
    <member name="M:System.Threading.CancellationToken.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <param name="canceled">标记的已取消状态。</param>
    </member>
    <member name="P:System.Threading.CancellationToken.CanBeCanceled">
      <summary>获取此标记是否能处于已取消状态。</summary>
      <returns>如果此令牌能够处于已取消状态，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.CancellationToken.Equals(System.Object)">
      <summary>确定当前的 <see cref="T:System.Threading.CancellationToken" /> 实例是否等于指定的 <see cref="T:System.Object" />。</summary>
      <param name="other">要与此实例进行比较的其他对象。</param>
      <returns>如果 <paramref name="other" /> 是 <see cref="T:System.Threading.CancellationToken" /> 且这两个实例相等，则为 <see langword="true" />；否则为 <see langword="false" />。 有关详细信息，请参阅备注部分。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放关联的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)">
      <summary>确定当前的 <see cref="T:System.Threading.CancellationToken" /> 实例是否等于指定的标记。</summary>
      <param name="other">要与此实例进行比较的其他 <see cref="T:System.Threading.CancellationToken" />。</param>
      <returns>如果实例相等，则为 <see langword="true" />；否则为 <see langword="false" />。 有关详细信息，请参阅备注部分。</returns>
    </member>
    <member name="M:System.Threading.CancellationToken.GetHashCode">
      <summary>作为 <see cref="T:System.Threading.CancellationToken" /> 的哈希函数。</summary>
      <returns>当前 <see cref="T:System.Threading.CancellationToken" /> 实例的哈希代码。</returns>
    </member>
    <member name="P:System.Threading.CancellationToken.IsCancellationRequested">
      <summary>获取是否已请求取消此标记。</summary>
      <returns>如果此令牌已请求取消，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.CancellationToken.None">
      <summary>返回一个空 <see cref="T:System.Threading.CancellationToken" /> 值。</summary>
      <returns>一个空取消标记。</returns>
    </member>
    <member name="M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>确定两个 <see cref="T:System.Threading.CancellationToken" /> 实例是否相等。</summary>
      <param name="left">第一个实例。</param>
      <param name="right">第二个实例。</param>
      <returns>如果实例相等，则为 <see langword="true" />；否则为 <see langword="false" />。有关详细信息，请参阅备注部分。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放关联的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>确定两个 <see cref="T:System.Threading.CancellationToken" /> 实例是否不相等。</summary>
      <param name="left">第一个实例。</param>
      <param name="right">第二个实例。</param>
      <returns>如果实例不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放关联的 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action)">
      <summary>注册一个将在取消此 <see cref="T:System.Threading.CancellationToken" /> 时调用的委托。</summary>
      <param name="callback">要在取消 <see cref="T:System.Threading.CancellationToken" /> 时执行的委托。</param>
      <returns>可用于注销回调的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例。</returns>
      <exception cref="T:System.ObjectDisposedException">关联 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 为 null。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)">
      <summary>注册一个将在取消此 <see cref="T:System.Threading.CancellationToken" /> 时调用的委托。</summary>
      <param name="callback">要在取消 <see cref="T:System.Threading.CancellationToken" /> 时执行的委托。</param>
      <param name="useSynchronizationContext">一个值，该值指示是否捕获当前 <see cref="T:System.Threading.SynchronizationContext" /> 并在调用 <paramref name="callback" /> 时使用。</param>
      <returns>可用于注销回调的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例。</returns>
      <exception cref="T:System.ObjectDisposedException">关联 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 为 null。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)">
      <summary>注册一个将在取消此 <see cref="T:System.Threading.CancellationToken" /> 时调用的委托。</summary>
      <param name="callback">要在取消 <see cref="T:System.Threading.CancellationToken" /> 时执行的委托。</param>
      <param name="state">要在调用委托时传递给 <paramref name="callback" /> 的状态。 这可能为 null。</param>
      <returns>可用于注销回调的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例。</returns>
      <exception cref="T:System.ObjectDisposedException">关联 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 为 null。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)">
      <summary>注册一个将在取消此 <see cref="T:System.Threading.CancellationToken" /> 时调用的委托。</summary>
      <param name="callback">要在取消 <see cref="T:System.Threading.CancellationToken" /> 时执行的委托。</param>
      <param name="state">要在调用委托时传递给 <paramref name="callback" /> 的状态。 这可能为 null。</param>
      <param name="useSynchronizationContext">一个布尔值，该值指示是否捕获当前 <see cref="T:System.Threading.SynchronizationContext" /> 并在调用 <paramref name="callback" /> 时使用它。</param>
      <returns>可用于注销回调的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例。</returns>
      <exception cref="T:System.ObjectDisposedException">关联 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 为 null。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.ThrowIfCancellationRequested">
      <summary>如果已请求取消此标记，则引发 <see cref="T:System.OperationCanceledException" />。</summary>
      <exception cref="T:System.OperationCanceledException">已请求取消此标记。</exception>
      <exception cref="T:System.ObjectDisposedException">关联 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.CancellationToken.UnsafeRegister(System.Action{System.Object},System.Object)">
      <summary>注册一个在取消此 <see cref="T:System.Threading.CancellationToken" /> 时调用的委托。</summary>
      <param name="callback">要在取消 <see cref="T:System.Threading.CancellationToken" /> 时执行的委托。</param>
      <param name="state">要在调用委托时传递给 <paramref name="callback" /> 的状态。  这可能是 <see langword="null" />。</param>
      <returns>可用于注销回调的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> 为 null。</exception>
    </member>
    <member name="P:System.Threading.CancellationToken.WaitHandle">
      <summary>获取在取消标记时收到信号的 <see cref="T:System.Threading.WaitHandle" />。</summary>
      <returns>在取消标记时收到信号的 <see cref="T:System.Threading.WaitHandle" />。</returns>
      <exception cref="T:System.ObjectDisposedException">关联 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
    </member>
    <member name="T:System.Threading.CancellationTokenRegistration">
      <summary>表示已向 <see cref="T:System.Threading.CancellationToken" /> 注册的回调委托。</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Dispose">
      <summary>释放 <see cref="T:System.Threading.CancellationTokenRegistration" /> 类的当前实例所使用的所有资源。</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.DisposeAsync">
      <summary>释放注册并从关联的 <see cref="T:System.Threading.CancellationToken" /> 注销目标回调。</summary>
      <returns>一个表示异步释放操作的任务。</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Equals(System.Object)">
      <summary>确定当前的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例是否等于指定的 <see cref="T:System.Threading.CancellationTokenRegistration" />。</summary>
      <param name="obj">要与此实例进行比较的其他对象。</param>
      <returns>如果此实例和 <paramref name="obj" /> 相等，则为 true。 否则为 false。  
如果两个 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例均引用对相同 <see cref="T:System.Threading.CancellationToken" /> Register 方法的单一调用的输出，则这两个实例相等。</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Equals(System.Threading.CancellationTokenRegistration)">
      <summary>确定当前的 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例是否等于指定的 <see cref="T:System.Threading.CancellationTokenRegistration" />。</summary>
      <param name="other">要与此实例进行比较的其他 <see cref="T:System.Threading.CancellationTokenRegistration" />。</param>
      <returns>如果此实例和 <paramref name="other" /> 相等，则为 true。 否则为 false。  
如果两个 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例均引用对相同 <see cref="T:System.Threading.CancellationToken" /> Register 方法的单一调用的输出，则这两个实例相等。</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.GetHashCode">
      <summary>作为 <see cref="T:System.Threading.CancellationTokenRegistration" /> 的哈希函数。</summary>
      <returns>当前 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例的哈希代码。</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.op_Equality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)">
      <summary>确定两个 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例是否相等。</summary>
      <param name="left">第一个实例。</param>
      <param name="right">第二个实例。</param>
      <returns>如果两个实例相等，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.op_Inequality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)">
      <summary>确定两个 <see cref="T:System.Threading.CancellationTokenRegistration" /> 实例是否不相等。</summary>
      <param name="left">第一个实例。</param>
      <param name="right">第二个实例。</param>
      <returns>如果两个实例不相等，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Threading.CancellationTokenRegistration.Token">
      <summary>获取与此注册关联的 <see cref="T:System.Threading.CancellationToken" />。  如果注册未与令牌关联（例如在释放注册后），这将返回默认令牌。</summary>
      <returns>与此注册关联的取消标记, 如果注册不与令牌关联 (例如, 在释放注册后), 则为默认令牌。</returns>
    </member>
    <member name="M:System.Threading.CancellationTokenRegistration.Unregister">
      <summary>释放注册并从关联的 <see cref="T:System.Threading.CancellationToken" /> 注销目标回调。</summary>
      <returns>如果该方法成功，则返回 <see langword="true" />；否则，返回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.LazyThreadSafetyMode">
      <summary>指定 <see cref="T:System.Lazy`1" /> 实例如何同步多个线程间的访问。</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication">
      <summary>使用锁来确保只有一个线程可以在线程安全的方式下初始化 <see cref="T:System.Lazy`1" /> 实例。 如果初始化方法（如果没有初始化方法，则为无参数构造函数）在内部使用锁，则可能会发生死锁。 如果使用指定初始化方法（<paramref name="valueFactory" /> 参数）的 <see cref="T:System.Lazy`1" /> 构造函数，并且如果此初始化方法在你首次调用 <see cref="P:System.Lazy`1.Value" /> 属性时引发异常（或无法处理异常），则会缓存该异常并在随后调用 <see cref="P:System.Lazy`1.Value" /> 属性时再次引发该异常。 如果使用不指定初始化方法的 <see cref="T:System.Lazy`1" /> 构造函数，则不会缓存 <paramref name="T" /> 无参数构造函数引发的异常。 在此情况下，对 <see cref="P:System.Lazy`1.Value" /> 属性进行后续调用可成功初始化 <see cref="T:System.Lazy`1" /> 实例。 如果初始化方法递归访问 <see cref="T:System.Lazy`1" /> 实例的 <see cref="P:System.Lazy`1.Value" /> 属性，则引发 <see cref="T:System.InvalidOperationException" />。</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.None">
      <summary>
        <see cref="T:System.Lazy`1" /> 实例不是线程安全的；如果从多个线程访问该实例，则其行为不确定。 仅应在高性能至关重要并且保证决不会从多个线程初始化 <see cref="T:System.Lazy`1" /> 实例时才使用该模式。 如果使用指定初始化方法（<paramref name="valueFactory" /> 参数）的 <see cref="T:System.Lazy`1" /> 构造函数，并且如果此初始化方法在你首次调用 <see cref="P:System.Lazy`1.Value" /> 属性时引发异常（或无法处理异常），则会缓存该异常并在随后调用 <see cref="P:System.Lazy`1.Value" /> 属性时再次引发该异常。 如果使用不指定初始化方法的 <see cref="T:System.Lazy`1" /> 构造函数，则不会缓存 <paramref name="T" /> 无参数构造函数引发的异常。 在此情况下，对 <see cref="P:System.Lazy`1.Value" /> 属性进行后续调用可成功初始化 <see cref="T:System.Lazy`1" /> 实例。 如果初始化方法递归访问 <see cref="T:System.Lazy`1" /> 实例的 <see cref="P:System.Lazy`1.Value" /> 属性，则引发 <see cref="T:System.InvalidOperationException" />。</summary>
    </member>
    <member name="F:System.Threading.LazyThreadSafetyMode.PublicationOnly">
      <summary>当多个线程尝试同时初始化一个 <see cref="T:System.Lazy`1" /> 实例时，允许所有线程都运行初始化方法（如果没有初始化方法，则运行无参数构造函数）。 完成初始化的第一个线程设置 <see cref="T:System.Lazy`1" /> 实例的值。 该值将返回给同时运行初始化方法的其他所有线程，除非初始化方法对这些线程引发异常。 争用线程创建的任何 <paramref name="T" /> 实例都将被放弃。 如果初始化方法对任何线程引发异常，则该异常会从该线程上的 <see cref="P:System.Lazy`1.Value" /> 属性传播出去。 不缓存该异常。 <see cref="P:System.Lazy`1.IsValueCreated" /> 属性的值仍然为 <see langword="false" />，并且随后通过其中引发异常的线程或通过其他线程对 <see cref="P:System.Lazy`1.Value" /> 属性的调用会导致初始化方法再次运行。 如果初始化方法递归访问 <see cref="P:System.Lazy`1.Value" /> 实例的 <see cref="T:System.Lazy`1" /> 属性，则不会引发异常。</summary>
    </member>
    <member name="T:System.Threading.Tasks.Sources.IValueTaskSource">
      <summary>表示一个可由 <see cref="T:System.Threading.Tasks.ValueTask" /> 包装的对象。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Sources.IValueTaskSource.GetResult(System.Int16)">
      <summary>获取 <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource" /> 的结果。</summary>
      <param name="token">一个曾提供给 <see cref="T:System.Threading.Tasks.ValueTask" /> 构造函数的不透明值。</param>
    </member>
    <member name="M:System.Threading.Tasks.Sources.IValueTaskSource.GetStatus(System.Int16)">
      <summary>获取当前操作的状态。</summary>
      <param name="token">曾提供给 <see cref="T:System.Threading.Tasks.ValueTask" /> 构造函数的不透明值。</param>
      <returns>当前操作的状态。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Sources.IValueTaskSource.OnCompleted(System.Action{System.Object},System.Object,System.Int16,System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags)">
      <summary>为此 <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource" /> 计划延续操作。</summary>
      <param name="continuation">要在操作完成后调用的延续。</param>
      <param name="state">要在被调用时传递给 <paramref name="continuation" /> 的状态对象。</param>
      <param name="token">一个曾提供给 <see cref="T:System.Threading.Tasks.ValueTask" /> 构造函数的不透明值。</param>
      <param name="flags">描述延续行为的标志。</param>
    </member>
    <member name="T:System.Threading.Tasks.Sources.IValueTaskSource`1">
      <summary>表示一个可由 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 包装的对象。</summary>
      <typeparam name="TResult">的结果<see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" />生成的结果的类型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Sources.IValueTaskSource`1.GetResult(System.Int16)">
      <summary>获取 <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" /> 的结果。</summary>
      <param name="token">一个曾提供给 <see cref="T:System.Threading.Tasks.ValueTask" /> 构造函数的不透明值。</param>
      <returns>
        <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" /> 的结果。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Sources.IValueTaskSource`1.GetStatus(System.Int16)">
      <summary>获取当前操作的状态。</summary>
      <param name="token">曾提供给 <see cref="T:System.Threading.Tasks.ValueTask" /> 构造函数的不透明值。</param>
      <returns>一个值，该值指示当前操作的状态。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Sources.IValueTaskSource`1.OnCompleted(System.Action{System.Object},System.Object,System.Int16,System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags)">
      <summary>为此 <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" /> 计划延续操作。</summary>
      <param name="continuation">要在操作完成后调用的延续。</param>
      <param name="state">要在被调用时传递给 <paramref name="continuation" /> 的状态对象。</param>
      <param name="token">一个曾提供给 <see cref="T:System.Threading.Tasks.ValueTask" /> 构造函数的不透明值。</param>
      <param name="flags">描述延续行为的标志。</param>
    </member>
    <member name="T:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1">
      <summary>提供用于实现手动重置 <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource" /> 或 <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" /> 的核心逻辑。</summary>
      <typeparam name="TResult">此手动重置<see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" />的结果类型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.GetResult(System.Int16)">
      <summary>返回操作的结果。</summary>
      <param name="token">一个曾提供给 <see cref="T:System.Threading.Tasks.ValueTask" /> 构造函数的不透明值。</param>
      <returns>操作的结果。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.GetStatus(System.Int16)">
      <summary>获取操作状态。</summary>
      <param name="token">一个曾提供给 <see cref="T:System.Threading.Tasks.ValueTask" /> 构造函数的不透明值。</param>
      <returns>一个值，该值指示操作的状态。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.OnCompleted(System.Action{System.Object},System.Object,System.Int16,System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags)">
      <summary>为此操作计划延续操作。</summary>
      <param name="continuation">要在操作完成后调用的延续。</param>
      <param name="state">要在被调用时传递给 <paramref name="continuation" /> 的状态对象。</param>
      <param name="token">一个曾提供给 <see cref="T:System.Threading.Tasks.ValueTask" /> 构造函数的不透明值。</param>
      <param name="flags">描述延续行为的标志。</param>
    </member>
    <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.Reset">
      <summary>重置以准备下一个操作。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.RunContinuationsAsynchronously">
      <summary>获取或设置是否强制延续以异步方式运行。</summary>
      <returns>
        <see langword="true" />若要强制运行时异步运行, 则为;否则为<see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.SetException(System.Exception)">
      <summary>完成但有错误。</summary>
      <param name="error">异常。</param>
    </member>
    <member name="M:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.SetResult(`0)">
      <summary>完成并返回成功结果。</summary>
      <param name="result">结果。</param>
    </member>
    <member name="P:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1.Version">
      <summary>获取操作版本。</summary>
      <returns>操作版本。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags">
      <summary>提供从 <see cref="T:System.Threading.Tasks.ValueTask" /> 和 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 传递到 <see langword="OnCompleted" /> 方法的标志，以控制延续行为。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags.FlowExecutionContext">
      <summary>
        <see langword="OnCompleted" /> 应捕获当前 <see cref="T:System.Threading.ExecutionContext" /> 并用它来运行延续。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags.None">
      <summary>对延续的调用方式内有任何要求。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags.UseSchedulingContext">
      <summary>
        <see langword="OnCompleted" /> 应该捕获当前调度上下文（<see cref="T:System.Threading.SynchronizationContext" />），并在将延续加入执行队列时使用。  如果未设置此标志，实现可以选择执行任意位置的延续。</summary>
    </member>
    <member name="T:System.Threading.Tasks.Sources.ValueTaskSourceStatus">
      <summary>指示 <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource" /> 或 <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" /> 的状态。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Sources.ValueTaskSourceStatus.Canceled">
      <summary>操作因取消操作而完成。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Sources.ValueTaskSourceStatus.Faulted">
      <summary>操作已完成但有错误。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Sources.ValueTaskSourceStatus.Pending">
      <summary>操作尚未完成。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Sources.ValueTaskSourceStatus.Succeeded">
      <summary>操作已成功完成。</summary>
    </member>
    <member name="T:System.Threading.Tasks.Task">
      <summary>表示一个异步操作。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action)">
      <summary>使用指定的操作初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">表示要在任务中执行的代码的委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)">
      <summary>使用指定的操作和 <see cref="T:System.Threading.Tasks.Task" /> 初始化新的 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <param name="action">表示要在任务中执行的代码的委托。</param>
      <param name="cancellationToken">新任务将观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的操作和创建选项初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">表示要在任务中执行的代码的委托。</param>
      <param name="cancellationToken">新任务将观察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="creationOptions">用于自定义任务的行为的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <exception cref="T:System.ObjectDisposedException">创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的操作和创建选项初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">表示要在任务中执行的代码的委托。</param>
      <param name="creationOptions">用于自定义任务的行为的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)">
      <summary>使用指定的操作和状态初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">表示要在任务中执行的代码的委托。</param>
      <param name="state">一个表示由该操作使用的数据的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>使用指定的操作、状态和选项初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">表示要在任务中执行的代码的委托。</param>
      <param name="state">一个表示由该操作使用的数据的对象。</param>
      <param name="cancellationToken">新任务将观察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的操作、状态和选项初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">表示要在任务中执行的代码的委托。</param>
      <param name="state">一个表示由该操作使用的数据的对象。</param>
      <param name="cancellationToken">新任务将观察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="creationOptions">用于自定义任务的行为的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <exception cref="T:System.ObjectDisposedException">创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的操作、状态和选项初始化新的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">表示要在任务中执行的代码的委托。</param>
      <param name="state">一个表示由该操作使用的数据的对象。</param>
      <param name="creationOptions">用于自定义任务的行为的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 指定无效值。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.AsyncState">
      <summary>获取在创建 <see cref="T:System.Threading.Tasks.Task" /> 时提供的状态对象，如果未提供，则为 null。</summary>
      <returns>一个 <see cref="T:System.Object" />，表示在创建任务时传递给该任务的状态数据。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.CompletedTask">
      <summary>获取一个已成功完成的任务。</summary>
      <returns>已成功完成的任务。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)">
      <summary>配置用于等待此 <see cref="T:System.Threading.Tasks.Task" />的 awaiter。</summary>
      <param name="continueOnCapturedContext">尝试将延续任务封送回原始上下文，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>用于的等待此任务的对象。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时接收调用方提供的状态信息并执行的延续任务。</summary>
      <param name="continuationAction">在任务完成时要运行的操作。 运行时，委托作为一个自变量传递给完成的任务和调用方提供的状态对象。</param>
      <param name="state">一个表示由该延续操作使用的数据的对象。</param>
      <returns>一个新的延续任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时接收调用方提供的状态信息和取消标记，并以异步方式执行的延续任务。</summary>
      <param name="continuationAction">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的操作。 运行时，将传递委托，如完成的任务一样，调用方提供的状态对象（如参数）。</param>
      <param name="state">一个表示由该延续操作使用的数据的对象。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时接收调用方提供的状态信息和取消标记并执行的延续任务。 延续任务根据一组指定的条件执行，并使用指定的计划程序。</summary>
      <param name="continuationAction">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的操作。 运行时，委托将作为一个自变量传递给完成的任务和调用方提供的状态对象。</param>
      <param name="state">一个表示由该延续操作使用的数据的对象。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">用于设置计划延续任务的时间以及延续任务的工作方式的选项。 这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</param>
      <param name="scheduler">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</exception>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时接收调用方提供的状态信息并执行的延续任务。 延续任务根据一组指定的条件执行。</summary>
      <param name="continuationAction">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的操作。 运行时，委托将作为一个自变量传递给完成的任务和调用方提供的状态对象。</param>
      <param name="state">一个表示由该延续操作使用的数据的对象。</param>
      <param name="continuationOptions">用于设置计划延续任务的时间以及延续任务的工作方式的选项。 这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</param>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时接收调用方提供的状态信息并以异步方式执行的延续任务。 延续任务使用指定计划程序。</summary>
      <param name="continuationAction">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的操作。  运行时，委托将作为一个自变量传递给完成的任务和调用方提供的状态对象。</param>
      <param name="state">一个表示由该延续操作使用的数据的对象。</param>
      <param name="scheduler">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时异步执行的延续任务。</summary>
      <param name="continuationAction">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的操作。 在运行时，委托将作为一个自变量传递给完成的任务。</param>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时可接收取消标记并以异步方式执行的延续任务。</summary>
      <param name="continuationAction">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的操作。 在运行时，委托将作为一个自变量传递给完成的任务。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">创建了该标记的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个在目标任务完成时按照指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 执行的延续任务。 延续任务会收到一个取消标记，并使用指定的计划程序。</summary>
      <param name="continuationAction">根据在 <paramref name="continuationOptions" /> 中指定的条件运行的操作。 在运行时，委托将作为一个自变量传递给完成的任务。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="continuationOptions">用于设置计划延续任务的时间以及延续任务的工作方式的选项。 这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</param>
      <param name="scheduler">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">创建了该标记的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 null。  
或 
<paramref name="scheduler" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个在目标任务完成时按照指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 执行的延续任务。</summary>
      <param name="continuationAction">根据在 <paramref name="continuationOptions" /> 中指定的条件运行的操作。 在运行时，委托将作为一个自变量传递给完成的任务。</param>
      <param name="continuationOptions">用于设置计划延续任务的时间以及延续任务的工作方式的选项。 这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</param>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时异步执行的延续任务。 延续任务使用指定计划程序。</summary>
      <param name="continuationAction">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的操作。 在运行时，委托将作为一个自变量传递给完成的任务。</param>
      <param name="scheduler">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 <see langword="null" />。  
或 
<paramref name="scheduler" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时异步执行并返回一个值的延续任务。</summary>
      <param name="continuationFunction">在 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时要运行的函数。 在运行时，委托将作为一个自变量传递给完成的任务。</param>
      <typeparam name="TResult">延续任务生成的结果的类型。</typeparam>
      <returns>一个新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时异步执行并返回一个值的延续任务。 延续任务收到取消标记。</summary>
      <param name="continuationFunction">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的函数。 在运行时，委托将作为一个自变量传递给完成的任务。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <typeparam name="TResult">延续任务生成的结果的类型。</typeparam>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task" />。  
或 
创建了该标记的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个按照指定延续任务选项执行并返回一个值的延续任务。 延续任务被传入一个取消标记，并使用指定的计划程序。</summary>
      <param name="continuationFunction">根据指定 <c>continuationOptions.</c> 运行的函数。 在运行时，委托将作为一个自变量传递给完成的任务。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="continuationOptions">用于设置计划延续任务的时间以及延续任务的工作方式的选项。 这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</param>
      <param name="scheduler">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TResult">延续任务生成的结果的类型。</typeparam>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task" />。  

或 - 
创建了该标记的 <see cref="T:System.Threading.CancellationTokenSource" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 null。  

或 - 
<paramref name="scheduler" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个按照指定延续任务选项执行并返回一个值的延续任务。</summary>
      <param name="continuationFunction">根据 <paramref name="continuationOptions" /> 中指定的条件运行函数。 在运行时，委托将作为一个自变量传递给完成的任务。</param>
      <param name="continuationOptions">用于设置计划延续任务的时间以及延续任务的工作方式的选项。 这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</param>
      <typeparam name="TResult">延续任务生成的结果的类型。</typeparam>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时异步执行并返回一个值的延续任务。 延续任务使用指定计划程序。</summary>
      <param name="continuationFunction">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的函数。 在运行时，委托将作为一个自变量传递给完成的任务。</param>
      <param name="scheduler">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TResult">延续任务生成的结果的类型。</typeparam>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 null。  

或 - 
<paramref name="scheduler" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成并返回一个值时接收调用方提供的状态信息并以异步方式执行的延续任务。</summary>
      <param name="continuationFunction">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的函数。 运行时，将传递委托，如完成的任务一样，调用方提供的状态对象（如参数）。</param>
      <param name="state">一个表示由该延续功能使用的数据的对象。</param>
      <typeparam name="TResult">延续任务生成的结果的类型。</typeparam>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时异步执行并返回一个值的延续任务。 延续任务接收调用方提供的状态信息和取消标记。</summary>
      <param name="continuationFunction">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的函数。 运行时，委托将作为一个自变量传递给完成的任务和调用方提供的状态对象。</param>
      <param name="state">一个表示由该延续功能使用的数据的对象。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TResult">延续任务生成的结果的类型。</typeparam>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成并返回一个值时根据指定的任务延续选项执行的延续任务。 延续任务接收调用方提供的状态信息和取消标记，并使用指定的计划程序。</summary>
      <param name="continuationFunction">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的函数。 运行时，委托将作为一个自变量传递给完成的任务和调用方提供的状态对象。</param>
      <param name="state">一个表示由该延续功能使用的数据的对象。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">用于设置计划延续任务的时间以及延续任务的工作方式的选项。 这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</param>
      <param name="scheduler">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TResult">延续任务生成的结果的类型。</typeparam>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</exception>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时根据指定的任务延续选项执行的延续任务。 延续任务接收调用方提供的状态信息。</summary>
      <param name="continuationFunction">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的函数。 运行时，委托将作为一个自变量传递给完成的任务和调用方提供的状态对象。</param>
      <param name="state">一个表示由该延续功能使用的数据的对象。</param>
      <param name="continuationOptions">用于设置计划延续任务的时间以及延续任务的工作方式的选项。 这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</param>
      <typeparam name="TResult">延续任务生成的结果的类型。</typeparam>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task" /> 完成时异步执行的延续任务。 延续任务接收调用方提供的状态信息，并使用指定的计划程序。</summary>
      <param name="continuationFunction">在 <see cref="T:System.Threading.Tasks.Task" /> 完成时要运行的函数。  运行时，委托将作为一个自变量传递给完成的任务和调用方提供的状态对象。</param>
      <param name="state">一个表示由该延续功能使用的数据的对象。</param>
      <param name="scheduler">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TResult">延续任务生成的结果的类型。</typeparam>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.CreationOptions">
      <summary>获取用于创建此任务的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</summary>
      <returns>用于创建此任务的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.CurrentId">
      <summary>返回当前正在执行 <see cref="T:System.Threading.Tasks.Task" /> 的 ID。</summary>
      <returns>系统分配给当前正在执行的任务的一个整数。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.Delay(System.Int32)">
      <summary>创建一个在指定的毫秒数后完成的任务。</summary>
      <param name="millisecondsDelay">在完成返回的任务前要等待的毫秒数；如果无限期等待，则为 -1。</param>
      <returns>表示时间延迟的任务。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsDelay" /> 参数小于 -1。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)">
      <summary>创建一个在指定的毫秒数后完成的可取消任务。</summary>
      <param name="millisecondsDelay">在完成返回的任务前要等待的毫秒数；如果无限期等待，则为 -1。</param>
      <param name="cancellationToken">等待任务完成期间要观察的取消标记。</param>
      <returns>表示时间延迟的任务。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsDelay" /> 参数小于 -1。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">该任务已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">提供的 <paramref name="cancellationToken" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)">
      <summary>创建一个在指定的时间间隔后完成的任务。</summary>
      <param name="delay">在完成返回的任务前等待的时间跨度；如果无限期等待，则为 <see langword="TimeSpan.FromMilliseconds(-1)" />。</param>
      <returns>表示时间延迟的任务。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delay" /> 表示除 <see langword="TimeSpan.FromMilliseconds(-1)" /> 以外的负时间间隔。  
或 
<paramref name="delay" /> 参数的 <see cref="P:System.TimeSpan.TotalMilliseconds" /> 属性大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>创建一个在指定的时间间隔后完成的可取消任务。</summary>
      <param name="delay">在完成返回的任务前等待的时间跨度；如果无限期等待，则为 <see langword="TimeSpan.FromMilliseconds(-1)" />。</param>
      <param name="cancellationToken">等待任务完成期间要观察的取消标记。</param>
      <returns>表示时间延迟的任务。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delay" /> 表示除 <see langword="TimeSpan.FromMilliseconds(-1)" /> 以外的负时间间隔。  
或 
<paramref name="delay" /> 参数的 <see cref="P:System.TimeSpan.TotalMilliseconds" /> 属性大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">该任务已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">提供的 <paramref name="cancellationToken" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Dispose">
      <summary>释放 <see cref="T:System.Threading.Tasks.Task" /> 类的当前实例所使用的所有资源。</summary>
      <exception cref="T:System.InvalidOperationException">任务的最终状态不是一下值之一：<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 或 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Dispose(System.Boolean)">
      <summary>释放 <see cref="T:System.Threading.Tasks.Task" />，同时释放其所有非托管资源。</summary>
      <param name="disposing">一个布尔值，该值指示是否由于调用 <see cref="M:System.Threading.Tasks.Task.Dispose" /> 的原因而调用此方法。</param>
      <exception cref="T:System.InvalidOperationException">任务的最终状态不是一下值之一：<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />、<see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 或 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.Exception">
      <summary>获取导致 <see cref="T:System.AggregateException" /> 提前结束的 <see cref="T:System.Threading.Tasks.Task" />。 如果 <see cref="T:System.Threading.Tasks.Task" /> 成功完成或尚未引发任何异常，这将返回 <see langword="null" />。</summary>
      <returns>导致 <see cref="T:System.AggregateException" /> 提前结束的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.Factory">
      <summary>提供对用于创建和配置 <see cref="T:System.Threading.Tasks.Task" /> 和 <see cref="T:System.Threading.Tasks.Task`1" /> 实例的工厂方法的访问。</summary>
      <returns>一个工厂对象，可创建多种 <see cref="T:System.Threading.Tasks.Task" /> 和 <see cref="T:System.Threading.Tasks.Task`1" /> 对象。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)">
      <summary>创建 <see cref="T:System.Threading.Tasks.Task" />，它因指定的取消标记进行的取消操作而完成。</summary>
      <param name="cancellationToken">完成任务的取消标记。</param>
      <returns>取消的任务。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">尚未对 <paramref name="cancellationToken" /> 请求取消；其 <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> 属性为 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)">
      <summary>创建 <see cref="T:System.Threading.Tasks.Task`1" />，它因指定的取消标记进行的取消操作而完成。</summary>
      <param name="cancellationToken">完成任务的取消标记。</param>
      <typeparam name="TResult">任务返回的结果的类型。</typeparam>
      <returns>取消的任务。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">尚未对 <paramref name="cancellationToken" /> 请求取消；其 <see cref="P:System.Threading.CancellationToken.IsCancellationRequested" /> 属性为 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromException(System.Exception)">
      <summary>创建 <see cref="T:System.Threading.Tasks.Task" />，它在完成后出现指定的异常。</summary>
      <param name="exception">完成任务的异常。</param>
      <returns>出错的任务。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromException``1(System.Exception)">
      <summary>创建 <see cref="T:System.Threading.Tasks.Task`1" />，它在完成后出现指定的异常。</summary>
      <param name="exception">完成任务的异常。</param>
      <typeparam name="TResult">任务返回的结果的类型。</typeparam>
      <returns>出错的任务。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.FromResult``1(``0)">
      <summary>创建指定结果的、成功完成的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="result">存储入已完成任务的结果。</param>
      <typeparam name="TResult">任务返回的结果的类型。</typeparam>
      <returns>已成功完成的任务。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.GetAwaiter">
      <summary>获取用于等待此 <see cref="T:System.Threading.Tasks.Task" /> 的等待者。</summary>
      <returns>一个 awaiter 实例。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.Id">
      <summary>获取此 <see cref="T:System.Threading.Tasks.Task" /> 实例的 ID。</summary>
      <returns>系统分配到此 <see cref="T:System.Threading.Tasks.Task" /> 实例的标识符。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.IsCanceled">
      <summary>获取此 <see cref="T:System.Threading.Tasks.Task" /> 实例是否由于被取消的原因而已完成执行。</summary>
      <returns>如果任务由于被取消而完成，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.IsCompleted">
      <summary>获取一个值，它表示是否已完成任务。</summary>
      <returns>
        <see langword="true" />如果任务已完成 (即, 任务处于以下三个最终状态之一<see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />:、 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />或<see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />), <see langword="false" />则为; 否则为。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.IsCompletedSuccessfully" />
    <member name="P:System.Threading.Tasks.Task.IsFaulted">
      <summary>获取 <see cref="T:System.Threading.Tasks.Task" /> 是否由于未经处理异常的原因而完成。</summary>
      <returns>如果任务引发了未经处理的异常，则为<see langword="true" /> ；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run(System.Action)">
      <summary>将在线程池上运行的指定工作排队，并返回代表该工作的 <see cref="T:System.Threading.Tasks.Task" /> 对象。</summary>
      <param name="action">以异步方式执行的工作量。</param>
      <returns>表示在线程池执行的队列的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 参数是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)">
      <summary>将在线程池上运行的指定工作排队，并返回代表该工作的 <see cref="T:System.Threading.Tasks.Task" /> 对象。 可使用取消标记来取消工作。</summary>
      <param name="action">以异步方式执行的工作量。</param>
      <param name="cancellationToken">可用于取消工作的取消标记</param>
      <returns>一个任务，它表示在线程池中排队执行的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 参数是 <see langword="null" />。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">该任务已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">与 <paramref name="cancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})">
      <summary>将在线程池上运行的指定工作排队，并返回 <paramref name="function" /> 所返回的任务的代理项。</summary>
      <param name="function">以异步方式执行的工作量。</param>
      <returns>表示由 <paramref name="function" /> 返回的任务的代理的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>将在线程池上运行的指定工作排队，并返回 <paramref name="function" /> 所返回的任务的代理项。</summary>
      <param name="function">以异步方式执行的工作。</param>
      <param name="cancellationToken">应用于取消工作的取消标记。</param>
      <returns>表示由 <paramref name="function" /> 返回的任务的代理的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数是 <see langword="null" />。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">该任务已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">与 <paramref name="cancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{``0})">
      <summary>将在线程池上运行的指定工作排队，并返回代表该工作的 <see cref="T:System.Threading.Tasks.Task`1" /> 对象。</summary>
      <param name="function">以异步方式执行的工作。</param>
      <typeparam name="TResult">任务的返回类型。</typeparam>
      <returns>表示在线程池中排队执行的工作的任务对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)">
      <summary>将在线程池上运行的指定工作排队，并返回代表该工作的 <see langword="Task(TResult)" /> 对象。 可使用取消标记来取消工作。</summary>
      <param name="function">以异步方式执行的工作量。</param>
      <param name="cancellationToken">应用以取消工作的取消标记</param>
      <typeparam name="TResult">任务的结果类型。</typeparam>
      <returns>一个 <see langword="Task(TResult)" />，它表示在线程池中排队等待执行的工作。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">该任务已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">与 <paramref name="cancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
      <summary>将指定的工作排成队列在线程池上运行，并返回由 <paramref name="function" /> 返回的 <see langword="Task(TResult)" /> 的代理。</summary>
      <param name="function">以异步方式执行的工作量。</param>
      <typeparam name="TResult">代理任务返回的结果的类型。</typeparam>
      <returns>表示由 <see langword="Task(TResult)" /> 返回的 <see langword="Task(TResult)" /> 的代理的 <paramref name="function" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>将指定的工作排成队列在线程池上运行，并返回由 <paramref name="function" /> 返回的 <see langword="Task(TResult)" /> 的代理。</summary>
      <param name="function">以异步方式执行的工作量。</param>
      <param name="cancellationToken">应用以取消工作的取消标记</param>
      <typeparam name="TResult">代理任务返回的结果的类型。</typeparam>
      <returns>表示由 <see langword="Task(TResult)" /> 返回的 <see langword="Task(TResult)" /> 的代理的 <paramref name="function" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数是 <see langword="null" />。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">该任务已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">与 <paramref name="cancellationToken" /> 关联的 <see cref="T:System.Threading.CancellationTokenSource" /> 已释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.RunSynchronously">
      <summary>对当前的 <see cref="T:System.Threading.Tasks.Task" /> 同步运行 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</summary>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task" /> 实例。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Threading.Tasks.Task" /> 并非要启动的有效状态。 它可能已启动、执行或取消，或者它可能是以不支持直接计划的方式创建的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)">
      <summary>对提供的 <see cref="T:System.Threading.Tasks.Task" /> 同步运行 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</summary>
      <param name="scheduler">尝试对其以内联方式运行此任务的计划程序。</param>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task" /> 实例。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Threading.Tasks.Task" /> 并非要启动的有效状态。 它可能已启动、执行或取消，或者它可能是以不支持直接计划的方式创建的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Start">
      <summary>启动 <see cref="T:System.Threading.Tasks.Task" />，并将它安排到当前的 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 中执行。</summary>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task" /> 实例。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Threading.Tasks.Task" /> 并非要启动的有效状态。 它可能已启动、执行或取消，或者它可能是以不支持直接计划的方式创建的。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)">
      <summary>启动 <see cref="T:System.Threading.Tasks.Task" />，并将它安排到指定的 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 中执行。</summary>
      <param name="scheduler">要与之关联并执行此任务的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Threading.Tasks.Task" /> 并非要启动的有效状态。 它可能已启动、执行或取消，或者它可能是以不支持直接计划的方式创建的。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task" /> 实例。</exception>
      <exception cref="T:System.Threading.Tasks.TaskSchedulerException">计划程序无法将此任务排入队列。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.Status">
      <summary>获取此任务的 <see cref="T:System.Threading.Tasks.TaskStatus" />。</summary>
      <returns>此任务实例的当前 <see cref="T:System.Threading.Tasks.TaskStatus" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle">
      <summary>获取可用于等待任务完成的 <see cref="T:System.Threading.WaitHandle" />。</summary>
      <returns>可用于等待任务完成的 <see cref="T:System.Threading.WaitHandle" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously">
      <summary>获取操作是否已同步完成的指示。</summary>
      <returns>如果操作同步完成，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait">
      <summary>等待 <see cref="T:System.Threading.Tasks.Task" /> 完成执行过程。</summary>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</exception>
      <exception cref="T:System.AggregateException">已取消任务。 <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 对象。  

或 - 
执行任务期间引发了一个异常。 <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含一个或多个异常的相关信息。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.Int32)">
      <summary>等待 <see cref="T:System.Threading.Tasks.Task" /> 在指定的毫秒数内完成执行。</summary>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <returns>如果在分配的时间内 <see langword="true" /> 完成执行，则为 <see cref="T:System.Threading.Tasks.Task" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.AggregateException">已取消任务。 <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 对象。  
或 
执行任务期间引发了一个异常。 <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含一个或多个异常的相关信息。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)">
      <summary>等待 <see cref="T:System.Threading.Tasks.Task" /> 完成执行过程。 如果在任务完成之前超时间隔结束或取消标记已取消，等待将终止。</summary>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="cancellationToken">等待任务完成期间要观察的取消标记。</param>
      <returns>如果在分配的时间内 <see langword="true" /> 完成执行，则为 <see cref="T:System.Threading.Tasks.Task" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.OperationCanceledException">已取消 <paramref name="cancellationToken" />。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.AggregateException">已取消任务。 <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 对象。  
或 
执行任务期间引发了一个异常。 <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含一个或多个异常的相关信息。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)">
      <summary>等待 <see cref="T:System.Threading.Tasks.Task" /> 完成执行过程。 如果在任务完成之前取消标记已取消，等待将终止。</summary>
      <param name="cancellationToken">等待任务完成期间要观察的取消标记。</param>
      <exception cref="T:System.OperationCanceledException">已取消 <paramref name="cancellationToken" />。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放该任务。</exception>
      <exception cref="T:System.AggregateException">已取消任务。 <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 对象。  
或 
执行任务期间引发了一个异常。 <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含一个或多个异常的相关信息。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Wait(System.TimeSpan)">
      <summary>等待 <see cref="T:System.Threading.Tasks.Task" /> 在指定的时间间隔内完成执行。</summary>
      <param name="timeout">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <returns>如果在分配的时间内 <see langword="true" /> 完成执行，则为 <see cref="T:System.Threading.Tasks.Task" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。 

或 - 
<paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.AggregateException">已取消任务。 <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 对象。  
或 
执行任务期间引发了一个异常。 <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含一个或多个异常的相关信息。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])">
      <summary>等待提供的所有 <see cref="T:System.Threading.Tasks.Task" /> 对象完成执行过程。</summary>
      <param name="tasks">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</param>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 中的一个或多个 <see cref="T:System.Threading.Tasks.Task" /> 对象已释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 参数包含一个 null 元素。</exception>
      <exception cref="T:System.AggregateException">至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例已取消。 如果任务取消，则 <see cref="T:System.AggregateException" /> 异常在其 <see cref="P:System.AggregateException.InnerExceptions" /> 集合中包含 <see cref="T:System.OperationCanceledException" /> 异常。  
或 
在至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例的执行过程中引发了异常。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)">
      <summary>等待所有提供的 <see cref="T:System.Threading.Tasks.Task" /> 在指定的毫秒数内完成执行。</summary>
      <param name="tasks">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <returns>如果在分配的时间内所有 <see langword="true" /> 实例都已完成执行，则为 <see cref="T:System.Threading.Tasks.Task" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 中的一个或多个 <see cref="T:System.Threading.Tasks.Task" /> 对象已释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.AggregateException">至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例已取消。 如果任务已取消，则 <see cref="T:System.AggregateException" /> 在其 <see cref="P:System.AggregateException.InnerExceptions" /> 集合中包含 <see cref="T:System.OperationCanceledException" />。  
或 
在至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例的执行过程中引发了异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 参数包含一个 null 元素。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
      <summary>等待提供的所有 <see cref="T:System.Threading.Tasks.Task" /> 对象在指定的毫秒数内完成执行，或等到取消等待。</summary>
      <param name="tasks">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <returns>如果在分配的时间内所有 <see langword="true" /> 实例都已完成执行，则为 <see cref="T:System.Threading.Tasks.Task" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 中的一个或多个 <see cref="T:System.Threading.Tasks.Task" /> 对象已释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.AggregateException">至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例已取消。 如果任务已取消，则 <see cref="T:System.AggregateException" /> 在其 <see cref="P:System.AggregateException.InnerExceptions" /> 集合中包含 <see cref="T:System.OperationCanceledException" />。  
或 
在至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例的执行过程中引发了异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 参数包含一个 null 元素。</exception>
      <exception cref="T:System.OperationCanceledException">已取消 <paramref name="cancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
      <summary>等待提供的所有 <see cref="T:System.Threading.Tasks.Task" /> 对象完成执行过程（除非取消等待）。</summary>
      <param name="tasks">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">已取消 <paramref name="cancellationToken" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.AggregateException">至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例已取消。 如果任务已取消，则 <see cref="T:System.AggregateException" /> 在其 <see cref="P:System.AggregateException.InnerExceptions" /> 集合中包含 <see cref="T:System.OperationCanceledException" />。  

或 - 
在至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例的执行过程中引发了异常。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 参数包含一个 null 元素。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 中的一个或多个 <see cref="T:System.Threading.Tasks.Task" /> 对象已释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)">
      <summary>等待所有提供的可取消 <see cref="T:System.Threading.Tasks.Task" /> 对象在指定的时间间隔内完成执行。</summary>
      <param name="tasks">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</param>
      <param name="timeout">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <returns>如果在分配的时间内所有 <see langword="true" /> 实例都已完成执行，则为 <see cref="T:System.Threading.Tasks.Task" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 中的一个或多个 <see cref="T:System.Threading.Tasks.Task" /> 对象已释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.AggregateException">至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例已取消。 如果任务已取消，则 <see cref="T:System.AggregateException" /> 在其 <see cref="P:System.AggregateException.InnerExceptions" /> 集合中包含 <see cref="T:System.OperationCanceledException" />。  

或 - 
在至少一个 <see cref="T:System.Threading.Tasks.Task" /> 实例的执行过程中引发了异常。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。 

或 - 
<paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 参数包含一个 null 元素。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])">
      <summary>等待提供的任一 <see cref="T:System.Threading.Tasks.Task" /> 对象完成执行过程。</summary>
      <param name="tasks">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</param>
      <returns>
        <paramref name="tasks" /> 数组中已完成的 <see cref="T:System.Threading.Tasks.Task" /> 对象的所有。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 参数包含一个 null 元素。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)">
      <summary>等待任何提供的 <see cref="T:System.Threading.Tasks.Task" /> 对象在指定的毫秒数内完成执行。</summary>
      <param name="tasks">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <returns>已完成的任务在 <paramref name="tasks" /> 数组参数中的索引，如果发生超时，则为 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 参数包含一个 null 元素。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)">
      <summary>等待提供的任何 <see cref="T:System.Threading.Tasks.Task" /> 对象在指定的毫秒数内完成执行，或等到取消标记取消。</summary>
      <param name="tasks">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <returns>已完成的任务在 <paramref name="tasks" /> 数组参数中的索引，如果发生超时，则为 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 参数包含一个 null 元素。</exception>
      <exception cref="T:System.OperationCanceledException">已取消 <paramref name="cancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)">
      <summary>等待提供的任何 <see cref="T:System.Threading.Tasks.Task" /> 对象完成执行过程（除非取消等待）。</summary>
      <param name="tasks">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</param>
      <param name="cancellationToken">等待任务完成期间要观察的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <returns>已完成的任务在 <paramref name="tasks" /> 数组参数中的索引。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 参数包含一个 null 元素。</exception>
      <exception cref="T:System.OperationCanceledException">已取消 <paramref name="cancellationToken" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)">
      <summary>等待任何提供的 <see cref="T:System.Threading.Tasks.Task" /> 对象在指定的时间间隔内完成执行。</summary>
      <param name="tasks">要等待的 <see cref="T:System.Threading.Tasks.Task" /> 实例的数组。</param>
      <param name="timeout">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <returns>已完成的任务在 <paramref name="tasks" /> 数组参数中的索引，如果发生超时，则为 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 参数的 <see cref="P:System.TimeSpan.TotalMilliseconds" /> 属性是一个非 -1 的负数，而 -1 表示无限期超时。 
或 
<paramref name="timeout" /> 参数的 <see cref="P:System.TimeSpan.TotalMilliseconds" /> 属性大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 参数包含一个 null 元素。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
      <summary>创建一个任务，该任务将在可枚举集合中的所有 <see cref="T:System.Threading.Tasks.Task" /> 对象都已完成时完成。</summary>
      <param name="tasks">等待完成的任务。</param>
      <returns>表示所有提供的任务的完成情况的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 收集包含 <see langword="null" /> 任务。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])">
      <summary>创建一个任务，该任务将在数组中的所有 <see cref="T:System.Threading.Tasks.Task" /> 对象都已完成时完成。</summary>
      <param name="tasks">等待完成的任务。</param>
      <returns>表示所有提供的任务的完成情况的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 <see langword="null" /> 任务。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
      <summary>创建一个任务，该任务将在可枚举集合中的所有 <see cref="T:System.Threading.Tasks.Task`1" /> 对象都已完成时完成。</summary>
      <param name="tasks">等待完成的任务。</param>
      <typeparam name="TResult">已完成任务的类型。</typeparam>
      <returns>表示所有提供的任务的完成情况的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 收集包含 <see langword="null" /> 任务。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])">
      <summary>创建一个任务，该任务将在数组中的所有 <see cref="T:System.Threading.Tasks.Task`1" /> 对象都已完成时完成。</summary>
      <param name="tasks">等待完成的任务。</param>
      <typeparam name="TResult">已完成任务的类型。</typeparam>
      <returns>表示所有提供的任务的完成情况的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 <see langword="null" /> 任务。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
      <summary>任何提供的任务已完成时，创建将完成的任务。</summary>
      <param name="tasks">等待完成的任务。</param>
      <returns>表示提供的任务之一已完成的任务。  返回任务的结果是完成的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含了 null 任务，或为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])">
      <summary>任何提供的任务已完成时，创建将完成的任务。</summary>
      <param name="tasks">等待完成的任务。</param>
      <returns>表示提供的任务之一已完成的任务。  返回任务的结果是完成的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含了 null 任务，或为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
      <summary>任何提供的任务已完成时，创建将完成的任务。</summary>
      <param name="tasks">等待完成的任务。</param>
      <typeparam name="TResult">已完成任务的类型。</typeparam>
      <returns>表示提供的任务之一已完成的任务。  返回任务的结果是完成的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含了 null 任务，或为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])">
      <summary>任何提供的任务已完成时，创建将完成的任务。</summary>
      <param name="tasks">等待完成的任务。</param>
      <typeparam name="TResult">已完成任务的类型。</typeparam>
      <returns>表示提供的任务之一已完成的任务。  返回任务的结果是完成的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含了 null 任务，或为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task.Yield">
      <summary>创建异步产生当前上下文的等待任务。</summary>
      <returns>等待时，上下文将异步转换回等待时的当前上下文。 如果当前 <see cref="T:System.Threading.SynchronizationContext" /> 不为 null，则将其视为当前上下文。 否则，与当前执行任务关联的任务计划程序将视为当前上下文。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Task`1">
      <summary>表示一个可以返回值的异步操作。</summary>
      <typeparam name="TResult">此 <see cref="T:System.Threading.Tasks.Task`1" /> 生成的结果的类型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0})">
      <summary>使用指定的函数初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">表示要在任务中执行的代码的委托。 在完成此函数后，该任务的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将设置为返回此函数的结果值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken)">
      <summary>使用指定的函数初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">表示要在任务中执行的代码的委托。 在完成此函数后，该任务的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将设置为返回此函数的结果值。</param>
      <param name="cancellationToken">将指派给此任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的函数和创建选项初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">表示要在任务中执行的代码的委托。 在完成此函数后，该任务的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将设置为返回此函数的结果值。</param>
      <param name="cancellationToken">将指派给新任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="creationOptions">用于自定义任务的行为的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <exception cref="T:System.ObjectDisposedException">创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 指定无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的函数和创建选项初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">表示要在任务中执行的代码的委托。 在完成此函数后，该任务的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将设置为返回此函数的结果值。</param>
      <param name="creationOptions">用于自定义任务的行为的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 指定无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)">
      <summary>使用指定的函数和状态初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">表示要在任务中执行的代码的委托。 在完成此函数后，该任务的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将设置为返回此函数的结果值。</param>
      <param name="state">一个表示由该操作使用的数据的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
      <summary>使用指定的操作、状态和选项初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">表示要在任务中执行的代码的委托。 在完成此函数后，该任务的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将设置为返回此函数的结果值。</param>
      <param name="state">一个表示将由此函数使用的数据的对象。</param>
      <param name="cancellationToken">将指派给新任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ObjectDisposedException">创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的操作、状态和选项初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">表示要在任务中执行的代码的委托。 在完成此函数后，该任务的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将设置为返回此函数的结果值。</param>
      <param name="state">一个表示将由此函数使用的数据的对象。</param>
      <param name="cancellationToken">将指派给新任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="creationOptions">用于自定义任务的行为的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <exception cref="T:System.ObjectDisposedException">创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 指定无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>使用指定的操作、状态和选项初始化新的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">表示要在任务中执行的代码的委托。 在完成此函数后，该任务的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将设置为返回此函数的结果值。</param>
      <param name="state">一个表示将由此函数使用的数据的对象。</param>
      <param name="creationOptions">用于自定义任务的行为的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 指定无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)">
      <summary>配置用于等待此 <see cref="T:System.Threading.Tasks.Task`1" />的 awaiter。</summary>
      <param name="continueOnCapturedContext">试图继续回夺取的原始上下文，则为 true；否则为 false。</param>
      <returns>用于的等待此任务的对象。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)">
      <summary>创建一个传递有状态信息并在目标 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时执行的延续。</summary>
      <param name="continuationAction">在 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时要运行的操作。 运行时，委托作为一个自变量传递给完成的任务和调用方提供的状态对象。</param>
      <param name="state">一个表示由该延续操作使用的数据的对象。</param>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时执行的延续任务。</summary>
      <param name="continuationAction">在 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时要运行的操作。 运行时，委托将作为一个自变量传递给完成的任务和调用方提供的状态对象。</param>
      <param name="state">一个表示由该延续操作使用的数据的对象。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时执行的延续任务。</summary>
      <param name="continuationAction">在 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时要运行的操作。 运行时，委托将作为一个自变量传递给完成的任务和调用方提供的状态对象。</param>
      <param name="state">一个表示由该延续操作使用的数据的对象。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">用于设置计划延续任务的时间以及延续任务的工作方式的选项。 这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</param>
      <param name="scheduler">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</exception>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时执行的延续任务。</summary>
      <param name="continuationAction">在 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时要运行的操作。 运行时，委托将作为一个自变量传递给完成的任务和调用方提供的状态对象。</param>
      <param name="state">一个表示由该延续操作使用的数据的对象。</param>
      <param name="continuationOptions">用于设置计划延续任务的时间以及延续任务的工作方式的选项。 这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</param>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时执行的延续任务。</summary>
      <param name="continuationAction">在 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时要运行的操作。 运行时，将传递委托，如完成的任务一样，调用方提供的状态对象（如参数）。</param>
      <param name="state">一个表示由该延续操作使用的数据的对象。</param>
      <param name="scheduler">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})">
      <summary>创建一个在目标任务完成时异步执行的延续任务。</summary>
      <param name="continuationAction">在 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时要运行的操作。 在运行时，委托将作为一个自变量传递给完成的任务。</param>
      <returns>一个新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task`1" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时异步执行的可取消延续任务。</summary>
      <param name="continuationAction">在 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时要运行的操作。 在运行时，委托作为一个参数传递给完成的任务。</param>
      <param name="cancellationToken">传递给新的延续任务的取消标记。</param>
      <returns>一个新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task`1" />。  

或 - 
创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建根据 <paramref name="continuationOptions" /> 中指定的条件加以执行的延续任务。</summary>
      <param name="continuationAction">根据在 <paramref name="continuationOptions" /> 中指定的条件运行的操作。 在运行时，委托将作为一个自变量传递给完成的任务。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">用于设置计划延续任务的时间以及延续任务的工作方式的选项。 这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</param>
      <param name="scheduler">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task`1" />。  
或 
创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 <see langword="null" />。  
或 
<paramref name="scheduler" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建根据 <paramref name="continuationOptions" /> 中指定的条件加以执行的延续任务。</summary>
      <param name="continuationAction">在 <paramref name="continuationOptions" /> 中指定的条件的操作。 在运行时，委托将作为一个自变量传递给完成的任务。</param>
      <param name="continuationOptions">用于设置计划延续任务的时间以及延续任务的工作方式的选项。 这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</param>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task`1" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时异步执行的延续任务。</summary>
      <param name="continuationAction">在 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时要运行的操作。 在运行时，委托将作为一个自变量传递给完成的任务。</param>
      <param name="scheduler">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task`1" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationAction" /> 参数为 <see langword="null" />。  
或 
<paramref name="scheduler" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时异步执行的延续任务。</summary>
      <param name="continuationFunction">在 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时要运行的函数。 在运行时，委托将作为一个自变量传递给完成的任务。</param>
      <typeparam name="TNewResult">延续任务生成的结果的类型。</typeparam>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task`1" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时异步执行的延续任务。</summary>
      <param name="continuationFunction">在 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时要运行的函数。 在运行时，委托将作为一个自变量传递给完成的任务。</param>
      <param name="cancellationToken">将指派给新任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TNewResult">延续任务生成的结果的类型。</typeparam>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task`1" />。  
或 
创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建根据 <paramref name="continuationOptions" /> 中指定的条件加以执行的延续任务。</summary>
      <param name="continuationFunction">根据 <paramref name="continuationOptions" /> 中指定的条件运行函数。  
在运行时，委托将作为一个参数传递给此完成的任务。</param>
      <param name="cancellationToken">将指派给新任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">用于设置计划延续任务的时间以及延续任务的工作方式的选项。 这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</param>
      <param name="scheduler">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TNewResult">延续任务生成的结果的类型。</typeparam>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task`1" />。  
或 
创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 <see langword="null" />。  

或 - 
<paramref name="scheduler" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建根据 <paramref name="continuationOptions" /> 中指定的条件加以执行的延续任务。</summary>
      <param name="continuationFunction">根据 <paramref name="continuationOptions" /> 中指定的条件运行函数。  
在运行时，委托将作为一个自变量传递给完成的任务。</param>
      <param name="continuationOptions">用于设置计划延续任务的时间以及延续任务的工作方式的选项。 这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</param>
      <typeparam name="TNewResult">延续任务生成的结果的类型。</typeparam>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task`1" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时异步执行的延续任务。</summary>
      <param name="continuationFunction">在 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时要运行的函数。 在运行时，委托将作为一个自变量传递给完成的任务。</param>
      <param name="scheduler">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TNewResult">延续任务生成的结果的类型。</typeparam>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Threading.Tasks.Task`1" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 <see langword="null" />。  

或 - 
<paramref name="scheduler" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时执行的延续任务。</summary>
      <param name="continuationFunction">在 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时要运行的函数。 运行时，将传递委托，如完成的任务一样，调用方提供的状态对象（如参数）。</param>
      <param name="state">一个表示由该延续功能使用的数据的对象。</param>
      <typeparam name="TNewResult">延续任务生成的结果的类型。</typeparam>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时执行的延续任务。</summary>
      <param name="continuationFunction">在 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时要运行的函数。 运行时，将传递委托，如完成的任务一样，调用方提供的状态对象（如参数）。</param>
      <param name="state">一个表示由该延续功能使用的数据的对象。</param>
      <param name="cancellationToken">将指派给新任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TNewResult">延续任务生成的结果的类型。</typeparam>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时执行的延续任务。</summary>
      <param name="continuationFunction">在 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时要运行的函数。 运行时，委托将作为一个自变量传递给完成的任务和调用方提供的状态对象。</param>
      <param name="state">一个表示由该延续功能使用的数据的对象。</param>
      <param name="cancellationToken">将指派给新任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">用于设置计划延续任务的时间以及延续任务的工作方式的选项。 这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</param>
      <param name="scheduler">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TNewResult">延续任务生成的结果的类型。</typeparam>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</exception>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时执行的延续任务。</summary>
      <param name="continuationFunction">在 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时要运行的函数。 运行时，委托将作为一个自变量传递给完成的任务和调用方提供的状态对象。</param>
      <param name="state">一个表示由该延续功能使用的数据的对象。</param>
      <param name="continuationOptions">用于设置计划延续任务的时间以及延续任务的工作方式的选项。 这包括条件（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" />）和执行选项（如 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />）。</param>
      <typeparam name="TNewResult">延续任务生成的结果的类型。</typeparam>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuationFunction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数为 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 指定无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个在目标 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时执行的延续任务。</summary>
      <param name="continuationFunction">在 <see cref="T:System.Threading.Tasks.Task`1" /> 完成时要运行的函数。 运行时，将传递委托，如完成的任务一样，调用方提供的状态对象（如参数）。</param>
      <param name="state">一个表示由该延续功能使用的数据的对象。</param>
      <param name="scheduler">要与延续任务关联并用于其执行过程的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TNewResult">延续任务生成的结果的类型。</typeparam>
      <returns>一个新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scheduler" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Task`1.Factory">
      <summary>提供对用于创建和配置 <see cref="T:System.Threading.Tasks.Task`1" /> 实例的工厂方法的访问。</summary>
      <returns>一个工厂对象，可创建多种 <see cref="T:System.Threading.Tasks.Task`1" /> 对象。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Task`1.GetAwaiter">
      <summary>获取用于等待此 <see cref="T:System.Threading.Tasks.Task`1" /> 的等待者。</summary>
      <returns>一个 awaiter 实例。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Task`1.Result">
      <summary>获取此 <see cref="T:System.Threading.Tasks.Task`1" /> 的结果值。</summary>
      <returns>此<see cref="T:System.Threading.Tasks.Task`1" />的结果值, 其类型与任务的类型参数相同。</returns>
      <exception cref="T:System.AggregateException">已取消任务。 <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含 <see cref="T:System.Threading.Tasks.TaskCanceledException" /> 对象。  
或 
执行任务期间引发了一个异常。 <see cref="P:System.AggregateException.InnerExceptions" /> 集合包含一个或多个异常的相关信息。</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskContinuationOptions">
      <summary>为通过使用 <see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)" /> 或 <see cref="M:System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)" /> 方法创建的任务指定行为。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent">
      <summary>如果延续为子任务，则指定将延续附加到任务层次结构中的父级。 只有当延续前面的任务也是子任务时，延续才可以是子任务。 默认情况下，子任务（即由外部任务创建的内部任务）将独立于其父任务执行。 可以使用 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent" /> 选项以便将父任务和子任务同步。  
请注意，如果使用 <see cref="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach" /> 选项配置父任务，则子任务中的 <see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /> 选项不起作用，并且子任务将作为分离的子任务执行。  
有关详细信息，请参阅附加和分离的子任务。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.DenyChildAttach">
      <summary>指定任何使用 <see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /> 选项创建，并尝试作为附加的子任务执行的子任务（即，由此延续创建的任何嵌套内部任务）都无法附加到父任务，会改成作为分离的子任务执行。 有关更多信息，请参见 Attached and Detached Child Tasks。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously">
      <summary>指定应同步执行延续任务。 指定此选项后，延续任务在导致前面的任务转换为其最终状态的相同线程上运行。 如果在创建延续任务时已经完成前面的任务，则延续任务将在创建此延续任务的线程上运行。 如果前面任务的 <see cref="T:System.Threading.CancellationTokenSource" /> 已在一个 <see langword="finally" />（在 Visual Basic 中为 <see langword="Finally" />）块中释放，则使用此选项的延续任务将在该 <see langword="finally" /> 块中运行。 只应同步执行运行时间非常短的延续任务。  
由于任务以同步方式执行，因此无需调用诸如 <see cref="M:System.Threading.Tasks.Task.Wait" /> 的方法来确保调用线程等待任务完成。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.HideScheduler">
      <summary>指定由延续通过调用方法（如 <see cref="M:System.Threading.Tasks.Task.Run(System.Action)" /> 或 <see cref="M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})" />）创建的任务将默认计划程序 (<see cref="P:System.Threading.Tasks.TaskScheduler.Default" />) 视为当前的计划程序，而不是正在运行该延续的计划程序。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.LazyCancellation">
      <summary>在延续取消的情况下，防止延续的完成直到完成先前的任务。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.LongRunning">
      <summary>指定延续将是长期运行的、粗粒度的操作。 它会向 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 提示，过度订阅可能是合理的。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.None">
      <summary>如果未指定延续选项，应在执行延续任务时使用指定的默认行为。 延续任务在前面的任务完成后以异步方式运行，与前面任务最终的 <see cref="P:System.Threading.Tasks.Task.Status" /> 属性值无关。 如果延续为子任务，则会将其创建为分离的嵌套任务。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnCanceled">
      <summary>指定不应在延续任务前面的任务已取消的情况下安排延续任务。 如果前面任务完成的 <see cref="P:System.Threading.Tasks.Task.Status" /> 属性是 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />，则前面的任务会取消。 此选项对多任务延续无效。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnFaulted">
      <summary>指定不应在延续任务前面的任务引发了未处理异常的情况下安排延续任务。 如果前面任务完成的 <see cref="P:System.Threading.Tasks.Task.Status" /> 属性是 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />，则前面的任务会引发未处理的异常。 此选项对多任务延续无效。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.NotOnRanToCompletion">
      <summary>指定不应在延续任务前面的任务已完成运行的情况下安排延续任务。 如果前面任务完成的 <see cref="P:System.Threading.Tasks.Task.Status" /> 属性是 <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />，则前面的任务会运行直至完成。 此选项对多任务延续无效。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled">
      <summary>指定只应在延续前面的任务已取消的情况下安排延续任务。  如果前面任务完成的 <see cref="P:System.Threading.Tasks.Task.Status" /> 属性是 <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />，则前面的任务会取消。 此选项对多任务延续无效。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted">
      <summary>指定只有在延续任务前面的任务引发了未处理异常的情况下才应安排延续任务。 如果前面任务完成的 <see cref="P:System.Threading.Tasks.Task.Status" /> 属性是 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />，则前面的任务会引发未处理的异常。  
<see cref="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnFaulted" /> 选项可保证前面任务中的 <see cref="P:System.Threading.Tasks.Task.Exception" /> 属性不是 <see langword="null" />。 你可以使用该属性来捕获异常，并确定导致任务出错的异常。 如果你不访问 <see cref="P:System.Threading.Tasks.Task.Exception" /> 属性，则不会处理异常。 此外，如果尝试访问已取消或出错的任务的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性，则会引发一个新异常。  
此选项对多任务延续无效。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.OnlyOnRanToCompletion">
      <summary>指定只应在延续任务前面的任务已完成运行的情况下才安排延续任务。 如果前面任务完成的 <see cref="P:System.Threading.Tasks.Task.Status" /> 属性是 <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />，则前面的任务会运行直至完成。 此选项对多任务延续无效。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.PreferFairness">
      <summary>提示 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 按任务计划的顺序安排任务，因此较早安排的任务将更可能较早运行，而较晚安排运行的任务将更可能较晚运行。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskContinuationOptions.RunContinuationsAsynchronously">
      <summary>指定应异步运行延续任务。  此选项优先于 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" />。</summary>
    </member>
    <member name="T:System.Threading.Tasks.TaskCreationOptions">
      <summary>指定可控制任务的创建和执行的可选行为的标志。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent">
      <summary>指定将任务附加到任务层次结构中的某个父级。 默认情况下，子任务（即由外部任务创建的内部任务）将独立于其父任务执行。 可以使用 <see cref="F:System.Threading.Tasks.TaskContinuationOptions.AttachedToParent" /> 选项以便将父任务和子任务同步。  
请注意，如果使用 <see cref="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach" /> 选项配置父任务，则子任务中的 <see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /> 选项不起作用，并且子任务将作为分离的子任务执行。  
有关详细信息，请参阅附加和分离的子任务。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.DenyChildAttach">
      <summary>指定任何尝试作为附加的子任务执行（即，使用 <see cref="F:System.Threading.Tasks.TaskCreationOptions.AttachedToParent" /> 选项创建）的子任务都无法附加到父任务，会改成作为分离的子任务执行。 有关详细信息，请参阅 附加和分离的子任务。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.HideScheduler">
      <summary>防止环境计划程序被视为已创建任务的当前计划程序。 这意味着像 StartNew 或 ContinueWith 创建任务的执行操作将被视为 <see cref="P:System.Threading.Tasks.TaskScheduler.Default" /> 当前计划程序。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.LongRunning">
      <summary>指定任务将是长时间运行的、粗粒度的操作，涉及比细化的系统更少、更大的组件。 它会向 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 提示，过度订阅可能是合理的。 可以通过过度订阅创建比可用硬件线程数更多的线程。 它还将提示任务计划程序：该任务需要附加线程，以使任务不阻塞本地线程池队列中其他线程或工作项的向前推动。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.None">
      <summary>指定应使用默认行为。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.PreferFairness">
      <summary>提示 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 以一种尽可能公平的方式安排任务，这意味着较早安排的任务将更可能较早运行，而较晚安排运行的任务将更可能较晚运行。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskCreationOptions.RunContinuationsAsynchronously">
      <summary>强制异步执行添加到当前任务的延续任务。  
请注意，<see cref="F:System.Threading.Tasks.TaskCreationOptions.RunContinuationsAsynchronously" /> 成员在以 .NET Framework 4.6 开头的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 枚举中可用。</summary>
    </member>
    <member name="T:System.Threading.Tasks.TaskFactory">
      <summary>提供对创建和计划 <see cref="T:System.Threading.Tasks.Task" /> 对象的支持。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor">
      <summary>使用默认配置初始化 <see cref="T:System.Threading.Tasks.TaskFactory" /> 实例。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)">
      <summary>使用指定配置初始化 <see cref="T:System.Threading.Tasks.TaskFactory" /> 实例。</summary>
      <param name="cancellationToken">将指派给由此 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> 创建的任务的 <see cref="T:System.Threading.Tasks.TaskFactory" />，除非在调用工厂方法时显式指定另一个 CancellationToken。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>使用指定配置初始化 <see cref="T:System.Threading.Tasks.TaskFactory" /> 实例。</summary>
      <param name="cancellationToken">默认情况下将指派给由此 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> 创建的任务的 <see cref="T:System.Threading.Tasks.TaskFactory" />，除非在调用工厂方法时显式指定另一个 CancellationToken。</param>
      <param name="creationOptions">在使用此 TaskFactory 创建任务时要使用的默认 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <param name="continuationOptions">在使用此 TaskFactory 创建延续任务时要使用的默认 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />。</param>
      <param name="scheduler">要用于计划使用此 TaskFactory 创建的任何任务的默认 <see cref="T:System.Threading.Tasks.TaskScheduler" />。 一个 null 值，该值指示应使用 TaskScheduler.Current。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值无效。 有关详细信息，请参阅 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注。  
或 
<paramref name="continuationOptions" /> 参数指定的值无效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>使用指定配置初始化 <see cref="T:System.Threading.Tasks.TaskFactory" /> 实例。</summary>
      <param name="creationOptions">在使用此 TaskFactory 创建任务时要使用的默认 <see cref="T:System.Threading.Tasks.TaskCreationOptions" />。</param>
      <param name="continuationOptions">在使用此 TaskFactory 创建延续任务时要使用的默认 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值无效。 有关详细信息，请参阅 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注。  
或 
<paramref name="continuationOptions" /> 参数指定的值无效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>使用指定配置初始化 <see cref="T:System.Threading.Tasks.TaskFactory" /> 实例。</summary>
      <param name="scheduler">要用于计划使用此 TaskFactory 创建的任何任务的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。 一个 null 值，该值指示应使用当前的 TaskScheduler。</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.CancellationToken">
      <summary>获取此任务工厂的默认取消标记。</summary>
      <returns>此任务工厂的默认任务取消标记。</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.ContinuationOptions">
      <summary>获取此任务工厂的默认任务继续选项。</summary>
      <returns>此任务工厂的默认任务继续选项。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})">
      <summary>创建一个延续任务，该任务在一组指定的任务完成后开始。</summary>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的所有任务完成时要执行的操作委托。</param>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的一个元素已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  

或 - 
<paramref name="continuationAction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组为空或包含 null 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)">
      <summary>创建一个延续任务，该任务在一组指定的任务完成后开始。</summary>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的所有任务完成时要执行的操作委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的取消标记。</param>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的一个元素已被释放。  

或 - 
创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  
或 
<paramref name="continuationAction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组为空或包含 null 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个延续任务，该任务在一组指定的任务完成后开始。</summary>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的所有任务完成时要执行的操作委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的取消标记。</param>
      <param name="continuationOptions">枚举值的按位组合，这些枚举值控制新的延续任务的行为。</param>
      <param name="scheduler">用于计划新的延续任务的对象。</param>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  
或 
<paramref name="continuationAction" /> 参数为 <see langword="null" />。  
或 
<paramref name="scheduler" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组为空或包含 null 值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定了一个无效的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值。</exception>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个延续任务，该任务在一组指定的任务完成后开始。</summary>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的所有任务完成时要执行的操作委托。</param>
      <param name="continuationOptions">枚举值的按位组合，这些枚举值控制新的延续任务的行为。 NotOn* 和 OnlyOn* 成员不受支持。</param>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的一个元素已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  

或 - 
<paramref name="continuationAction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数指定的值无效。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组为空或包含 null 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})">
      <summary>创建一个延续任务，该任务在一组指定的任务完成后开始。</summary>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的任务关联的结果的类型。</typeparam>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的一个元素已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  
或 
<paramref name="continuationFunction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组为空或包含 null 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)">
      <summary>创建一个延续任务，该任务在一组指定的任务完成后开始。</summary>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的取消标记。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的任务关联的结果的类型。</typeparam>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的一个元素已被释放。  
或 
创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  
或 
<paramref name="continuationFunction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组为空或包含 null 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个延续任务，该任务在一组指定的任务完成后开始。</summary>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的取消标记。</param>
      <param name="continuationOptions">枚举值的按位组合，这些枚举值控制新的延续任务的行为。 NotOn* 和 OnlyOn* 成员不受支持。</param>
      <param name="scheduler">用于计划新的延续任务的对象。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的任务关联的结果的类型。</typeparam>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  
或 
<paramref name="continuationFunction" /> 参数为 <see langword="null" />。  

或 - 
<paramref name="scheduler" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组为空或包含 null 值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定了一个无效的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值。</exception>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个延续任务，该任务在一组指定的任务完成后开始。</summary>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <param name="continuationOptions">枚举值的按位组合，这些枚举值控制新的延续任务的行为。 NotOn* 和 OnlyOn* 成员不受支持。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的任务关联的结果的类型。</typeparam>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的一个元素已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  
或 
<paramref name="continuationFunction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数指定的值无效。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组为空或包含 null 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})">
      <summary>创建一个延续任务，该任务在一组指定的任务完成后开始。</summary>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的所有任务完成时要执行的操作委托。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的一个元素已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  

或 - 
<paramref name="continuationAction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组为空或包含 null 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)">
      <summary>创建一个延续任务，该任务在一组指定的任务完成后开始。</summary>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的所有任务完成时要执行的操作委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的取消标记。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的一个元素已被释放。  
或 
创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  
或 
<paramref name="continuationAction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组为空或包含 null 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个延续任务，该任务在一组指定的任务完成后开始。</summary>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的所有任务完成时要执行的操作委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的取消标记。</param>
      <param name="continuationOptions">枚举值的按位组合，这些枚举值控制新的延续任务的行为。 NotOn* 和 OnlyOn* 成员不受支持。</param>
      <param name="scheduler">用于计划新的延续任务的对象。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  

或 - 
<paramref name="continuationAction" /> 参数为 <see langword="null" />。  

或 
<paramref name="scheduler" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组为空或包含 null 值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定了一个无效的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值。</exception>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个延续任务，该任务在一组指定的任务完成后开始。</summary>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的所有任务完成时要执行的操作委托。</param>
      <param name="continuationOptions">枚举值的按位组合，这些枚举值控制新的延续任务的行为。 NotOn* 和 OnlyOn* 成员不受支持。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的一个元素已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  

或 - 
<paramref name="continuationAction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数指定的值无效。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组为空或包含 null 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})">
      <summary>创建一个延续任务，该任务在一组指定的任务完成后开始。</summary>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的任务关联的结果的类型。</typeparam>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的一个元素已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  
或 
<paramref name="continuationFunction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组为空或包含 null 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)">
      <summary>创建一个延续任务，该任务在一组指定的任务完成后开始。</summary>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的取消标记。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的任务关联的结果的类型。</typeparam>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的一个元素已被释放。  

或 - 
创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  
或 
<paramref name="continuationFunction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组为空或包含 null 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个延续任务，该任务在一组指定的任务完成后开始。</summary>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的取消标记。</param>
      <param name="continuationOptions">枚举值的按位组合，这些枚举值控制新的延续任务的行为。 NotOn* 和 OnlyOn* 成员不受支持。</param>
      <param name="scheduler">用于计划新的延续任务的对象。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的任务关联的结果的类型。</typeparam>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  
或 
<paramref name="continuationFunction" /> 参数为 <see langword="null" />。  
或 
<paramref name="scheduler" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组为空或包含 null 值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数指定的值无效。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的一个元素已被释放。  
或 
创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个延续任务，该任务在一组指定的任务完成后开始。</summary>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <param name="continuationOptions">枚举值的按位组合，这些枚举值控制新的延续任务的行为。 NotOn* 和 OnlyOn* 成员不受支持。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的任务关联的结果的类型。</typeparam>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <paramref name="tasks" /> 数组中的一个元素已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  
或 
<paramref name="continuationFunction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数指定的值无效。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组为空或包含 null 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的一个任务完成时要执行的操作委托。</param>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  
或 
<paramref name="continuationAction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 <see langword="null" /> 值。  
或 
<paramref name="tasks" /> 数组为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的一个任务完成时要执行的操作委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。  

或 - 
<paramref name="cancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  
或 
<paramref name="continuationAction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 <see langword="null" /> 值。  

或 - 
<paramref name="tasks" /> 数组为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的一个任务完成时要执行的操作委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，用于控制所创建的延续 <see cref="T:System.Threading.Tasks.Task" /> 的行为。</param>
      <param name="scheduler">用于计划所创建的延续 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 的 <see cref="T:System.Threading.Tasks.Task" />。</param>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  

或 - 
<paramref name="continuationAction" /> 为 <see langword="null" />。  

或 
<paramref name="scheduler" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 <see langword="null" /> 值。  
或 
<paramref name="tasks" /> 数组为空。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定了无效的 TaskContinuationOptions 值。</exception>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的一个任务完成时要执行的操作委托。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，用于控制所创建的延续 <see cref="T:System.Threading.Tasks.Task" /> 的行为。</param>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  
或 
 <paramref name="continuationAction" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定了无效的 TaskContinuationOptions 值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 <see langword="null" /> 值。  

或 - 
<paramref name="tasks" /> 数组为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task`1" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 关联的结果的类型。</typeparam>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  
或 
 <paramref name="continuationFunction" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值。  
或 
<paramref name="tasks" /> 数组为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task`1" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 关联的结果的类型。</typeparam>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。  
或 
提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  
或 
 <paramref name="continuationFunction" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 <see langword="null" /> 值。  
或 
<paramref name="tasks" /> 数组为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task`1" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，用于控制所创建的延续 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <param name="scheduler">用于计划所创建的延续 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 的 <see cref="T:System.Threading.Tasks.Task`1" />。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 关联的结果的类型。</typeparam>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  

或 - 
<paramref name="continuationFunction" /> 为 <see langword="null" />。  

或 
 <paramref name="scheduler" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 <see langword="null" /> 值。  
或 
<paramref name="tasks" /> 数组为空。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定了无效的 TaskContinuationOptions 值。</exception>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task`1" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，用于控制所创建的延续 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 关联的结果的类型。</typeparam>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  
或 
<paramref name="continuationFunction" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定了无效的 TaskContinuationOptions 值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 <see langword="null" /> 值。  
或 
<paramref name="tasks" /> 数组为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的一个任务完成时要执行的操作委托。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  
或 
 <paramref name="continuationAction" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 <see langword="null" /> 值。  
或 
<paramref name="tasks" /> 数组为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的一个任务完成时要执行的操作委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。  
或 
提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  
或 
 <paramref name="continuationAction" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值。  

或 - 
<paramref name="tasks" /> 数组为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的一个任务完成时要执行的操作委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，用于控制所创建的延续 <see cref="T:System.Threading.Tasks.Task" /> 的行为。</param>
      <param name="scheduler">用于计划所创建的延续 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 的 <see cref="T:System.Threading.Tasks.Task`1" />。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  
或 
 <paramref name="continuationAction" /> 为 <see langword="null" />。  

或 - 
paramref name="scheduler" /&gt; 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 <see langword="null" /> 值。  
或 
<paramref name="tasks" /> 数组为空。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定了一个无效的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值。</exception>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationAction">在 <paramref name="tasks" /> 数组中的一个任务完成时要执行的操作委托。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，用于控制所创建的延续 <see cref="T:System.Threading.Tasks.Task" /> 的行为。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  
或 
 <paramref name="continuationAction" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定了无效的 TaskContinuationOptions 值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值。  
或 
<paramref name="tasks" /> 数组为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task`1" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 关联的结果的类型。</typeparam>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  

或 - 
<paramref name="continuationFunction" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值。  

或 - 
<paramref name="tasks" /> 数组为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task`1" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 关联的结果的类型。</typeparam>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。  
或 
提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  
或 
<paramref name="continuationFunction" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 <see langword="null" /> 值。  
或 
<paramref name="tasks" /> 数组为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task`1" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，用于控制所创建的延续 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <param name="scheduler">用于计划所创建的延续 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 的 <see cref="T:System.Threading.Tasks.Task`1" />。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 关联的结果的类型。</typeparam>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  
或 
<paramref name="continuationFunction" /> 为 <see langword="null" />。  

或 - 
<paramref name="scheduler" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值。  
或 
<paramref name="tasks" /> 数组为空。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定了无效的 TaskContinuationOptions 值。</exception>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个延续 <see cref="T:System.Threading.Tasks.Task`1" />，它将在提供的组中的任何任务完成后马上开始。</summary>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <param name="continuationOptions">
        <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值，用于控制所创建的延续 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <typeparam name="TResult">由 <paramref name="continuationFunction" /> 委托返回并与创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 关联的结果的类型。</typeparam>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  

或 - 
<paramref name="continuationFunction" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定了无效的 TaskContinuationOptions 值。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值。  
或 
<paramref name="tasks" /> 数组为空。</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.CreationOptions">
      <summary>获取此任务工厂的默认任务创建选项。</summary>
      <returns>此任务工厂的默认任务创建选项。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 为 <see langword="null" />。  
或 
<paramref name="endMethod" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task" /> 的行为。</param>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 为 <see langword="null" />。  
或 
 <paramref name="endMethod" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定了无效的 TaskCreationOptions 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task" />，它在指定的 <see cref="T:System.IAsyncResult" /> 完成时执行一个结束方法操作。</summary>
      <param name="asyncResult">IAsyncResult，完成它时将触发对 <paramref name="endMethod" /> 的处理。</param>
      <param name="endMethod">用于处理完成的 <paramref name="asyncResult" /> 的操作委托。</param>
      <returns>表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 <see langword="null" />。  
或 
<paramref name="endMethod" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task" />，它在指定的 <see cref="T:System.IAsyncResult" /> 完成时执行一个结束方法操作。</summary>
      <param name="asyncResult">IAsyncResult，完成它时将触发对 <paramref name="endMethod" /> 的处理。</param>
      <param name="endMethod">用于处理完成的 <paramref name="asyncResult" /> 的操作委托。</param>
      <param name="creationOptions">TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task" /> 的行为。</param>
      <returns>表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 <see langword="null" />。  
或 
 <paramref name="endMethod" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">paramref name="creationOptions" /&gt; 指定了无效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task" />，它在指定的 <see cref="T:System.IAsyncResult" /> 完成时执行一个结束方法操作。</summary>
      <param name="asyncResult">IAsyncResult，完成它时将触发对 <paramref name="endMethod" /> 的处理。</param>
      <param name="endMethod">用于处理完成的 <paramref name="asyncResult" /> 的操作委托。</param>
      <param name="creationOptions">TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task" /> 的行为。</param>
      <param name="scheduler">用于计划将执行结束方法的任务的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 <see langword="null" />。  
或 
<paramref name="endMethod" /> 为 <see langword="null" />。  
或 
<paramref name="scheduler" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定了一个无效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 为 <see langword="null" />。  
或 
<paramref name="endMethod" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task" /> 的行为。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 为 <see langword="null" />。  
或 
<paramref name="endMethod" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定了一个无效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task`1" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 为 <see langword="null" />。  
或 
 <paramref name="endMethod" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task`1" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 为 <see langword="null" />。  

或 - 
<paramref name="endMethod" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定了一个无效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task`1" />，它在指定的 <see cref="T:System.IAsyncResult" /> 完成时执行一个结束方法函数。</summary>
      <param name="asyncResult">IAsyncResult，完成它时将触发对 <paramref name="endMethod" /> 的处理。</param>
      <param name="endMethod">用于处理完成的 <paramref name="asyncResult" /> 的函数委托。</param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <returns>表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 <see langword="null" />。  
或 
 <paramref name="endMethod" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task`1" />，它在指定的 <see cref="T:System.IAsyncResult" /> 完成时执行一个结束方法函数。</summary>
      <param name="asyncResult">IAsyncResult，完成它时将触发对 <paramref name="endMethod" /> 的处理。</param>
      <param name="endMethod">用于处理完成的 <paramref name="asyncResult" /> 的函数委托。</param>
      <param name="creationOptions">TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <returns>表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 <see langword="null" />。  
或 
 <paramref name="endMethod" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定了一个无效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task`1" />，它在指定的 <see cref="T:System.IAsyncResult" /> 完成时执行一个结束方法函数。</summary>
      <param name="asyncResult">IAsyncResult，完成它时将触发对 <paramref name="endMethod" /> 的处理。</param>
      <param name="endMethod">用于处理完成的 <paramref name="asyncResult" /> 的函数委托。</param>
      <param name="creationOptions">TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <param name="scheduler">用于计划将执行结束方法的任务的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <returns>表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 <see langword="null" />。  
或
<paramref name="endMethod" /> 为 <see langword="null" />。  
或 
 <paramref name="scheduler" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定了无效的 TaskCreationOptions 值。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="arg2">传递给 <paramref name="beginMethod" /> 委托的第二个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第二个参数的类型。</typeparam>
      <typeparam name="TArg2">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 为 <see langword="null" />。  
或 
 <paramref name="endMethod" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="arg2">传递给 <paramref name="beginMethod" /> 委托的第二个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task" /> 的行为。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第二个参数的类型。</typeparam>
      <typeparam name="TArg2">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 为 <see langword="null" />。  
或 
 <paramref name="endMethod" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定了一个无效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task`1" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 为 <see langword="null" />。  

或 - 
<paramref name="endMethod" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task`1" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 为 <see langword="null" />。  
或 
 <paramref name="endMethod" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定了一个无效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="arg2">传递给 <paramref name="beginMethod" /> 委托的第二个参数。</param>
      <param name="arg3">传递给 <paramref name="beginMethod" /> 委托的第三个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第二个参数的类型。</typeparam>
      <typeparam name="TArg2">传递给 <paramref name="beginMethod" /> 委托的第三个参数的类型。</typeparam>
      <typeparam name="TArg3">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 为 <see langword="null" />。  
或 
 <paramref name="endMethod" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="arg2">传递给 <paramref name="beginMethod" /> 委托的第二个参数。</param>
      <param name="arg3">传递给 <paramref name="beginMethod" /> 委托的第三个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task" /> 的行为。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第二个参数的类型。</typeparam>
      <typeparam name="TArg2">传递给 <paramref name="beginMethod" /> 委托的第三个参数的类型。</typeparam>
      <typeparam name="TArg3">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 为 <see langword="null" />。  
或 
 <paramref name="endMethod" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定了一个无效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task`1" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="arg2">传递给 <paramref name="beginMethod" /> 委托的第二个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第二个参数的类型。</typeparam>
      <typeparam name="TArg2">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 为 <see langword="null" />。  

或 - 
<paramref name="endMethod" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task`1" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="arg2">传递给 <paramref name="beginMethod" /> 委托的第二个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第二个参数的类型。</typeparam>
      <typeparam name="TArg2">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 为 <see langword="null" />。  
或 
 <paramref name="endMethod" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定了一个无效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task`1" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="arg2">传递给 <paramref name="beginMethod" /> 委托的第二个参数。</param>
      <param name="arg3">传递给 <paramref name="beginMethod" /> 委托的第三个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第二个参数的类型。</typeparam>
      <typeparam name="TArg2">传递给 <paramref name="beginMethod" /> 委托的第三个参数的类型。</typeparam>
      <typeparam name="TArg3">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 为 <see langword="null" />。  
或 
 <paramref name="endMethod" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个 <see cref="T:System.Threading.Tasks.Task`1" />，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="arg2">传递给 <paramref name="beginMethod" /> 委托的第二个参数。</param>
      <param name="arg3">传递给 <paramref name="beginMethod" /> 委托的第三个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第二个参数的类型。</typeparam>
      <typeparam name="TArg2">传递给 <paramref name="beginMethod" /> 委托的第三个参数的类型。</typeparam>
      <typeparam name="TArg3">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 为 <see langword="null" />。  
或 
<paramref name="endMethod" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定了一个无效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory.Scheduler">
      <summary>获取此任务工厂的默认任务计划程序。</summary>
      <returns>此任务工厂的默认任务计划程序。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)">
      <summary>创建并启动 任务。</summary>
      <param name="action">要异步执行的操作委托。</param>
      <returns>已启动的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">要异步执行的操作委托。</param>
      <param name="cancellationToken">将指派给新任务的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">要异步执行的操作委托。</param>
      <param name="cancellationToken">将指派给新 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> 的 <see cref="T:System.Threading.Tasks.Task" /></param>
      <param name="creationOptions">一个 TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task" /> 的行为</param>
      <param name="scheduler">用于计划所创建的 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 的 <see cref="T:System.Threading.Tasks.Task" />。</param>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 为 <see langword="null" />。  
或 
 <paramref name="scheduler" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定了无效的 TaskCreationOptions 值。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">要异步执行的操作委托。</param>
      <param name="creationOptions">一个 TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task" /> 的行为</param>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定了一个无效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">要异步执行的操作委托。</param>
      <param name="state">一个包含由 <paramref name="action" /> 委托使用的数据的对象。</param>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">要异步执行的操作委托。</param>
      <param name="state">一个包含由 <paramref name="action" /> 委托使用的数据的对象。</param>
      <param name="cancellationToken">将指派给新 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> 的 <see cref="T:System.Threading.Tasks.Task" /></param>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">要异步执行的操作委托。</param>
      <param name="state">一个包含由 <paramref name="action" /> 委托使用的数据的对象。</param>
      <param name="cancellationToken">将指派给新任务的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="creationOptions">一个 TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task" /> 的行为</param>
      <param name="scheduler">用于计划所创建的 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 的 <see cref="T:System.Threading.Tasks.Task" />。</param>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 为 <see langword="null" />。  

或 -

<paramref name="scheduler" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定了一个无效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="action">要异步执行的操作委托。</param>
      <param name="state">一个包含由 <paramref name="action" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">一个 TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task" /> 的行为</param>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定了一个无效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">一个函数委托，可返回能够通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的将来结果。</param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">一个函数委托，可返回能够通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的将来结果。</param>
      <param name="cancellationToken">将指派给新 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> 的 <see cref="T:System.Threading.Tasks.Task" /></param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">一个函数委托，可返回能够通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的将来结果。</param>
      <param name="cancellationToken">将指派给新任务的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="creationOptions">一个 TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <param name="scheduler">用于计划所创建的 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 的 <see cref="T:System.Threading.Tasks.Task`1" />。</param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 为 <see langword="null" />。  

或 - 
<paramref name="scheduler" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定了一个无效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">一个函数委托，可返回能够通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的将来结果。</param>
      <param name="creationOptions">一个 TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定了一个无效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">一个函数委托，可返回能够通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的将来结果。</param>
      <param name="state">一个包含由 <paramref name="function" /> 委托使用的数据的对象。</param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">一个函数委托，可返回能够通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的将来结果。</param>
      <param name="state">一个包含由 <paramref name="function" /> 委托使用的数据的对象。</param>
      <param name="cancellationToken">将指派给新 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" /> 的 <see cref="T:System.Threading.Tasks.Task" /></param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">一个函数委托，可返回能够通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的将来结果。</param>
      <param name="state">一个包含由 <paramref name="function" /> 委托使用的数据的对象。</param>
      <param name="cancellationToken">将指派给新任务的 <see cref="P:System.Threading.Tasks.TaskFactory.CancellationToken" />。</param>
      <param name="creationOptions">一个 TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <param name="scheduler">用于计划所创建的 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 的 <see cref="T:System.Threading.Tasks.Task`1" />。</param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">提供的 <see cref="T:System.Threading.CancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 为 <see langword="null" />。  
或 
 <paramref name="scheduler" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定了一个无效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建并启动 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <param name="function">一个函数委托，可返回能够通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的将来结果。</param>
      <param name="state">一个包含由 <paramref name="function" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">一个 TaskCreationOptions 值，用于控制创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为。</param>
      <typeparam name="TResult">可通过 <see cref="T:System.Threading.Tasks.Task`1" /> 获得的结果的类型。</typeparam>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 指定了一个无效的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 值。 有关更多信息，请参见 <see cref="M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)" /> 的备注</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskFactory`1">
      <summary>提供对创建和计划 <see cref="T:System.Threading.Tasks.Task`1" /> 对象的支持。</summary>
      <typeparam name="TResult">此类的方法创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 对象的返回值。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor">
      <summary>使用默认配置初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 实例。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)">
      <summary>使用默认配置初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 实例。</summary>
      <param name="cancellationToken">默认取消标记将指派给由此 <see cref="T:System.Threading.Tasks.TaskFactory" /> 创建的任务的，除非在调用工厂方法时显式指定另一个取消标记。</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>使用指定配置初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 实例。</summary>
      <param name="cancellationToken">默认取消标记将指派给由此 <see cref="T:System.Threading.Tasks.TaskFactory" /> 创建的任务的，除非在调用工厂方法时显式指定另一个取消标记。</param>
      <param name="creationOptions">在使用此 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 创建任务时要使用的默认选项。</param>
      <param name="continuationOptions">在使用此 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 创建继续任务时要使用的默认选项。</param>
      <param name="scheduler">要用于计划使用此 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 创建的任何任务的默认计划程序。 null 值指示应使用 <see cref="P:System.Threading.Tasks.TaskScheduler.Current" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 或 <paramref name="continuationOptions" /> 指定了一个无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)">
      <summary>使用指定配置初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 实例。</summary>
      <param name="creationOptions">在使用此 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 创建任务时要使用的默认选项。</param>
      <param name="continuationOptions">在使用此 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 创建继续任务时要使用的默认选项。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 或 <paramref name="continuationOptions" /> 指定了一个无效值。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>使用指定配置初始化 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 实例。</summary>
      <param name="scheduler">要用于计划使用此 <see cref="T:System.Threading.Tasks.TaskFactory`1" /> 创建的任何任务的默认计划程序。 一个 null 值，该值指示应使用当前 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.CancellationToken">
      <summary>获取此任务工厂的默认取消标记。</summary>
      <returns>此任务工厂的默认取消标记。</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions">
      <summary>获取此任务工厂的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 枚举值。</summary>
      <returns>指定此任务工厂的默认延续选项的枚举值之一。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})">
      <summary>创建一个延续任务，它将在提供的一组任务完成后马上开始。</summary>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  

或 - 
<paramref name="continuationFunction" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值或为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)">
      <summary>创建一个延续任务，它将在提供的一组任务完成后马上开始。</summary>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的取消标记。</param>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。  

或 - 
创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  

或 - 
<paramref name="continuationFunction" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值或为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个延续任务，它将在提供的一组任务完成后马上开始。</summary>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的取消标记。</param>
      <param name="continuationOptions">其中一个控制所创建的延续任务的行为的枚举值。 <see langword="NotOn" /> 和 <see langword="OnlyOn" /> 值均无效。</param>
      <param name="scheduler">用于计划所创建的延续任务的计划程序。</param>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  

或 - 
<paramref name="continuationFunction" /> 参数为 <see langword="null" />。  

或 - 
<paramref name="scheduler" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值或为空。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 指定了一个无效值。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。  

或 - 
创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个延续任务，它将在提供的一组任务完成后马上开始。</summary>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <param name="continuationOptions">其中一个控制所创建的延续任务的行为的枚举值。 <see langword="NotOn" /> 和 <see langword="OnlyOn" /> 值均无效。</param>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  

或 - 
<paramref name="continuationFunction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数指定的值无效。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值或为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})">
      <summary>创建一个延续任务，它将在提供的一组任务完成后马上开始。</summary>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  

或 - 
<paramref name="continuationFunction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值或为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)">
      <summary>创建一个延续任务，它将在提供的一组任务完成后马上开始。</summary>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的取消标记。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。  

或 - 
创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  

或 - 
<paramref name="continuationFunction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值或为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个延续任务，它将在提供的一组任务完成后马上开始。</summary>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的取消标记。</param>
      <param name="continuationOptions">其中一个控制所创建的延续任务的行为的枚举值。 <see langword="NotOn" /> 和 <see langword="OnlyOn" /> 值均无效。</param>
      <param name="scheduler">用于计划所创建的延续任务的计划程序。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  

或 - 
<paramref name="continuationFunction" /> 参数为 <see langword="null" />。  

或 - 
<paramref name="scheduler" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值或为空。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数指定的值无效。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。  

或 - 
创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个延续任务，它将在提供的一组任务完成后马上开始。</summary>
      <param name="tasks">继续执行的任务所在的数组。</param>
      <param name="continuationFunction">已经完成了在 <paramref name="tasks" /> 数组中的所有任务完成时要异步执行的函数委托。</param>
      <param name="continuationOptions">其中一个控制所创建的延续任务的行为的枚举值。 <see langword="NotOn" /> 和 <see langword="OnlyOn" /> 值均无效。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  

或 - 
<paramref name="continuationFunction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数指定的值无效。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值或为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})">
      <summary>创建一个延续任务，它将在提供的组中的任何任务完成后马上开始。</summary>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  

或 - 
<paramref name="continuationFunction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值或为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)">
      <summary>创建一个延续任务，它将在提供的组中的任何任务完成后马上开始。</summary>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的取消标记。</param>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。  

或 - 
创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组参数为 null。  

或 - 
<paramref name="continuationFunction" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值。  

或 - 
<paramref name="tasks" /> 数组为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个延续任务，它将在提供的组中的任何任务完成后马上开始。</summary>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的取消标记。</param>
      <param name="continuationOptions">其中一个控制所创建的延续任务的行为的枚举值。 <see langword="NotOn" /> 和 <see langword="OnlyOn" /> 值均无效。</param>
      <param name="scheduler">用于计划所创建的延续任务的任务计划程序。</param>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  

或 - 
<paramref name="continuationFunction" /> 参数为 <see langword="null" />。  

或 - 
<paramref name="scheduler" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值。  

或 - 
<paramref name="tasks" /> 数组为空。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数指定的 <see cref="T:System.Threading.Tasks.TaskContinuationOptions" /> 值无效。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。  

或 - 
创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个延续任务，它将在提供的组中的任何任务完成后马上开始。</summary>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <param name="continuationOptions">其中一个控制所创建的延续任务的行为的枚举值。 <see langword="NotOn" /> 和 <see langword="OnlyOn" /> 值均无效。</param>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  

或 - 
<paramref name="continuationFunction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数指定的枚举值无效。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值。  

或 - 
<paramref name="tasks" /> 数组为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})">
      <summary>创建一个延续任务，它将在提供的组中的任何任务完成后马上开始。</summary>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  

或 - 
<paramref name="continuationFunction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值。  

或 - 
<paramref name="tasks" /> 数组为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)">
      <summary>创建一个延续任务，它将在提供的组中的任何任务完成后马上开始。</summary>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的取消标记。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <returns>新的延续任务。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。  

或 - 
创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  

或 - 
<paramref name="continuationFunction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值。  

或 - 
<paramref name="tasks" /> 数组为空。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个延续任务，它将在提供的组中的任何任务完成后马上开始。</summary>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <param name="cancellationToken">将指派给新的延续任务的取消标记。</param>
      <param name="continuationOptions">其中一个控制所创建的延续任务的行为的枚举值。 <see langword="NotOn" /> 和 <see langword="OnlyOn" /> 值均无效。</param>
      <param name="scheduler">用于计划所创建的延续 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 的 <see cref="T:System.Threading.Tasks.Task`1" />。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  

或 - 
<paramref name="continuationFunction" /> 参数为 <see langword="null" />。  

或 - 
<paramref name="scheduler" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值。  

或 - 
<paramref name="tasks" /> 数组为空。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数指定的 TaskContinuationOptions 值无效。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。  

或 - 
创建了 <paramref name="cancellationToken" /> 的 <see cref="T:System.Threading.CancellationTokenSource" /> 已经被释放。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)">
      <summary>创建一个延续任务，它将在提供的组中的任何任务完成后马上开始。</summary>
      <param name="tasks">在一个任务完成时继续执行的任务所在的数组。</param>
      <param name="continuationFunction">在 <paramref name="tasks" /> 数组中的一个任务完成时要异步执行的函数委托。</param>
      <param name="continuationOptions">其中一个控制所创建的延续任务的行为的枚举值。 <see langword="NotOn" /> 和 <see langword="OnlyOn" /> 值均无效。</param>
      <typeparam name="TAntecedentResult">以前的 <paramref name="tasks" /> 的结果的类型。</typeparam>
      <returns>新的延续 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放 <paramref name="tasks" /> 数组中的一个元素。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tasks" /> 数组为 <see langword="null" />。  

或 - 
<paramref name="continuationFunction" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="continuationOptions" /> 参数指定的枚举值无效。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tasks" /> 数组包含 null 值。  

或 - 
<paramref name="tasks" /> 数组为空。</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.CreationOptions">
      <summary>获取此任务工厂的 <see cref="T:System.Threading.Tasks.TaskCreationOptions" /> 枚举值。</summary>
      <returns>指定此任务工厂的默认创建选项的枚举值之一。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)">
      <summary>创建一个任务，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <returns>创建的表示异步操作的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 参数为 <see langword="null" />。  

或 - 
<paramref name="endMethod" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个任务，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">其中一个控制所创建的任务的行为的枚举值。</param>
      <returns>创建的表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 参数为 <see langword="null" />。  

或 - 
<paramref name="endMethod" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定的值无效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})">
      <summary>创建一个任务，它在指定的 <see cref="T:System.IAsyncResult" /> 完成时执行一个结束方法函数。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" />，完成它时将触发对 <paramref name="endMethod" /> 的处理。</param>
      <param name="endMethod">用于处理完成的 <paramref name="asyncResult" /> 的函数委托。</param>
      <returns>表示异步操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 参数为 <see langword="null" />。  

或 - 
<paramref name="endMethod" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个任务，它在指定的 <see cref="T:System.IAsyncResult" /> 完成时执行一个结束方法函数。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" />，完成它时将触发对 <paramref name="endMethod" /> 的处理。</param>
      <param name="endMethod">用于处理完成的 <paramref name="asyncResult" /> 的函数委托。</param>
      <param name="creationOptions">其中一个控制所创建的任务的行为的枚举值。</param>
      <returns>表示异步操作的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 参数为 <see langword="null" />。  

或 - 
<paramref name="endMethod" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定的值无效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建一个任务，它在指定的 <see cref="T:System.IAsyncResult" /> 完成时执行一个结束方法函数。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" />，完成它时将触发对 <paramref name="endMethod" /> 的处理。</param>
      <param name="endMethod">用于处理完成的 <paramref name="asyncResult" /> 的函数委托。</param>
      <param name="creationOptions">其中一个控制所创建的任务的行为的枚举值。</param>
      <param name="scheduler">用于计划将执行结束方法的任务计划程序。</param>
      <returns>创建的表示异步操作的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 参数为 <see langword="null" />。  

或 - 
<paramref name="endMethod" /> 参数为 <see langword="null" />。  

或 - 
<paramref name="scheduler" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定的值无效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)">
      <summary>创建一个任务，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <returns>创建的表示异步操作的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 参数为 <see langword="null" />。  

或 - 
<paramref name="endMethod" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个任务，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">其中一个控制所创建的任务的行为的枚举值。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <returns>创建的表示异步操作的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 参数为 <see langword="null" />。  

或 - 
<paramref name="endMethod" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定的值无效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)">
      <summary>创建一个任务，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="arg2">传递给 <paramref name="beginMethod" /> 委托的第二个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第二个参数的类型。</typeparam>
      <typeparam name="TArg2">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <returns>创建的表示异步操作的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 参数为 <see langword="null" />。  

或 - 
<paramref name="endMethod" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个任务，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="arg2">传递给 <paramref name="beginMethod" /> 委托的第二个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">一个对象，用于控制所创建的 <see cref="T:System.Threading.Tasks.Task`1" /> 的行为</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第二个参数的类型。</typeparam>
      <typeparam name="TArg2">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <returns>创建的表示异步操作的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 参数为 <see langword="null" />。  

或 - 
<paramref name="endMethod" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定的值无效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)">
      <summary>创建一个任务，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="arg2">传递给 <paramref name="beginMethod" /> 委托的第二个参数。</param>
      <param name="arg3">传递给 <paramref name="beginMethod" /> 委托的第三个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第二个参数的类型。</typeparam>
      <typeparam name="TArg2">传递给 <paramref name="beginMethod" /> 委托的第三个参数的类型。</typeparam>
      <typeparam name="TArg3">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <returns>创建的表示异步操作的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 参数为 <see langword="null" />。  

或 - 
<paramref name="endMethod" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建一个任务，它表示符合异步编程模型模式的成对的开始和结束方法。</summary>
      <param name="beginMethod">用于启动异步操作的委托。</param>
      <param name="endMethod">用于结束异步操作的委托。</param>
      <param name="arg1">传递给 <paramref name="beginMethod" /> 委托的第一个参数。</param>
      <param name="arg2">传递给 <paramref name="beginMethod" /> 委托的第二个参数。</param>
      <param name="arg3">传递给 <paramref name="beginMethod" /> 委托的第三个参数。</param>
      <param name="state">一个包含由 <paramref name="beginMethod" /> 委托使用的数据的对象。</param>
      <param name="creationOptions">一个对象，用于控制所创建的任务的行为。</param>
      <typeparam name="TArg1">传递给 <paramref name="beginMethod" /> 委托的第二个参数的类型。</typeparam>
      <typeparam name="TArg2">传递给 <paramref name="beginMethod" /> 委托的第三个参数的类型。</typeparam>
      <typeparam name="TArg3">传递给 <paramref name="beginMethod" /> 委托的第一个参数的类型。</typeparam>
      <returns>创建的表示异步操作的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="beginMethod" /> 参数为 <see langword="null" />。  

或 - 
<paramref name="endMethod" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定的值无效。</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskFactory`1.Scheduler">
      <summary>获取此任务工厂的任务计划程序。</summary>
      <returns>此任务工厂的任务计划程序。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})">
      <summary>创建并启动 任务。</summary>
      <param name="function">一个函数委托，可返回能够通过任务获得的将来结果。</param>
      <returns>已启动的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)">
      <summary>创建并启动 任务。</summary>
      <param name="function">一个函数委托，可返回能够通过任务获得的将来结果。</param>
      <param name="cancellationToken">将指派给新的任务的取消标记。</param>
      <returns>已启动的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放创建 <paramref name="cancellationToken" /> 的取消标记源。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建并启动 任务。</summary>
      <param name="function">一个函数委托，可返回能够通过任务获得的将来结果。</param>
      <param name="cancellationToken">将指派给新的任务的取消标记。</param>
      <param name="creationOptions">其中一个控制所创建的任务的行为的枚举值。</param>
      <param name="scheduler">用于计划所创建的任务的任务计划程序。</param>
      <returns>已启动的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放创建 <paramref name="cancellationToken" /> 的取消标记源。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 <see langword="null" />。  

或 - 
<paramref name="scheduler" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定的值无效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建并启动 任务。</summary>
      <param name="function">一个函数委托，可返回能够通过任务获得的将来结果。</param>
      <param name="creationOptions">其中一个控制所创建的任务的行为的枚举值。</param>
      <returns>已启动的 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定的值无效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)">
      <summary>创建并启动 任务。</summary>
      <param name="function">一个函数委托，可返回能够通过任务获得的将来结果。</param>
      <param name="state">包含 <paramref name="function" /> 委托所用数据的对象。</param>
      <returns>已启动的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
      <summary>创建并启动 任务。</summary>
      <param name="function">一个函数委托，可返回能够通过任务获得的将来结果。</param>
      <param name="state">包含 <paramref name="function" /> 委托所用数据的对象。</param>
      <param name="cancellationToken">将指派给新的任务的取消标记。</param>
      <returns>已启动的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放创建 <paramref name="cancellationToken" /> 的取消标记源。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)">
      <summary>创建并启动 任务。</summary>
      <param name="function">一个函数委托，可返回能够通过任务获得的将来结果。</param>
      <param name="state">包含 <paramref name="function" /> 委托所用数据的对象。</param>
      <param name="cancellationToken">将指派给新的任务的取消标记。</param>
      <param name="creationOptions">其中一个控制所创建的任务的行为的枚举值。</param>
      <param name="scheduler">用于计划所创建的任务的任务计划程序。</param>
      <returns>已启动的任务。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放创建 <paramref name="cancellationToken" /> 的取消标记源。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 <see langword="null" />。  

或 - 
<paramref name="scheduler" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定的值无效。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>创建并启动 任务。</summary>
      <param name="function">一个函数委托，可返回能够通过任务获得的将来结果。</param>
      <param name="state">包含 <paramref name="function" /> 委托所用数据的对象。</param>
      <param name="creationOptions">其中一个控制所创建的任务的行为的枚举值。</param>
      <returns>已启动的任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> 参数指定的值无效。</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskScheduler">
      <summary>表示一个处理将任务排队到线程中的低级工作的对象。</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.#ctor">
      <summary>初始化 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</summary>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.Current">
      <summary>获取与当前正在执行的任务关联的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</summary>
      <returns>返回与当前正在执行的任务关联的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.Default">
      <summary>获取由 .NET Framework 提供的默认 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 实例。</summary>
      <returns>返回默认的 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 实例。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext">
      <summary>创建与当前 <see cref="T:System.Threading.SynchronizationContext" /> 关联的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</summary>
      <returns>与当前 <see cref="T:System.Threading.SynchronizationContext" /> 关联的 <see cref="T:System.Threading.Tasks.TaskScheduler" />，由 <see cref="P:System.Threading.SynchronizationContext.Current" /> 确定。</returns>
      <exception cref="T:System.InvalidOperationException">当前的 SynchronizationContext 不能用作 TaskScheduler。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.GetScheduledTasks">
      <summary>仅对于调试器支持，生成当前排队到计划程序中等待执行的 <see cref="T:System.Threading.Tasks.Task" /> 实例的枚举。</summary>
      <returns>一个允许调试器遍历当前排队到此计划程序中的任务的枚举。</returns>
      <exception cref="T:System.NotSupportedException">此计划程序无法在此时生成排队任务的列表。</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.Id">
      <summary>获取此 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 的唯一 ID。</summary>
      <returns>返回此 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 的唯一 ID。</returns>
    </member>
    <member name="P:System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel">
      <summary>指示此 <see cref="T:System.Threading.Tasks.TaskScheduler" /> 能够支持的最大并发级别。</summary>
      <returns>返回表示最大并发级别的一个整数。 默认计划程序返回 <see cref="F:System.Int32.MaxValue" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)">
      <summary>将 <see cref="T:System.Threading.Tasks.Task" /> 排队到计划程序中。</summary>
      <param name="task">要排队的 <see cref="T:System.Threading.Tasks.Task" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.TryDequeue(System.Threading.Tasks.Task)">
      <summary>尝试将以前排队到此计划程序中的 <see cref="T:System.Threading.Tasks.Task" /> 取消排队。</summary>
      <param name="task">要取消排队的 <see cref="T:System.Threading.Tasks.Task" />。</param>
      <returns>一个布尔值，该值指示是否已成功地将 <paramref name="task" /> 参数取消排队。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)">
      <summary>尝试在此计划程序上执行提供的 <see cref="T:System.Threading.Tasks.Task" />。</summary>
      <param name="task">要执行的 <see cref="T:System.Threading.Tasks.Task" /> 对象。</param>
      <returns>一个布尔值，如果成功执行了 <paramref name="task" />，则该值为 true；如果未成功执行，则该值为 false。 执行失败的常见原因是，该任务先前已经执行或者位于正在由另一个线程执行的进程中。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="task" /> 与此计划程序无关联。</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
      <summary>确定是否可以在此调用中同步执行提供的 <see cref="T:System.Threading.Tasks.Task" />，如果可以，将执行该任务。</summary>
      <param name="task">要执行的 <see cref="T:System.Threading.Tasks.Task" />。</param>
      <param name="taskWasPreviouslyQueued">一个布尔值，该值指示任务之前是否已排队。 如果此参数为 True，则该任务以前可能已排队（已计划）；如果为 False，则已知该任务尚未排队，此时将执行此调用，以便以内联方式执行该任务，而不用将其排队。</param>
      <returns>一个布尔值，该值指示是否已以内联方式执行该任务。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">已执行的 <paramref name="task" />。</exception>
    </member>
    <member name="E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException">
      <summary>出错的任务中未观察到的异常将触发异常呈报策略时出现，默认情况下会终止进程。</summary>
    </member>
    <member name="T:System.Threading.Tasks.TaskStatus">
      <summary>表示 <see cref="T:System.Threading.Tasks.Task" /> 的生命周期中的当前阶段。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Canceled">
      <summary>该任务已通过对其自身的 CancellationToken 引发 OperationCanceledException 对取消进行了确认，此时该标记处于已发送信号状态；或者在该任务开始执行之前，已向该任务的 CancellationToken 发出了信号。 有关详细信息，请参阅任务取消。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Created">
      <summary>该任务已初始化，但尚未被计划。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Faulted">
      <summary>由于未处理异常的原因而完成的任务。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.RanToCompletion">
      <summary>已成功完成执行的任务。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.Running">
      <summary>该任务正在运行，但尚未完成。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.WaitingForActivation">
      <summary>该任务正在等待 .NET Framework 基础结构在内部将其激活并进行计划。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.WaitingForChildrenToComplete">
      <summary>该任务已完成执行，正在隐式等待附加的子任务完成。</summary>
    </member>
    <member name="F:System.Threading.Tasks.TaskStatus.WaitingToRun">
      <summary>该任务已被计划执行，但尚未开始执行。</summary>
    </member>
    <member name="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs">
      <summary>为在出错的 <see cref="T:System.Threading.Tasks.Task" /> 的异常未观察到时引发的事件提供数据。</summary>
    </member>
    <member name="M:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.#ctor(System.AggregateException)">
      <summary>使用未观察到的异常初始化 <see cref="T:System.Threading.Tasks.UnobservedTaskExceptionEventArgs" /> 类的新实例。</summary>
      <param name="exception">未观察到的异常。</param>
    </member>
    <member name="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception">
      <summary>未观察到的异常。</summary>
      <returns>未观察到的异常。</returns>
    </member>
    <member name="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Observed">
      <summary>获取此异常是否已标记为“已观察到”。</summary>
      <returns>如果此异常已标记为“已观察到”，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.SetObserved">
      <summary>将 <see cref="P:System.Threading.Tasks.UnobservedTaskExceptionEventArgs.Exception" /> 标记为“已观察到”，这样将阻止该异常触发默认情况下会终止进程的异常升级策略。</summary>
    </member>
    <member name="T:System.Threading.Tasks.ValueTask">
      <summary>提供异步操作的可等待结果。</summary>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.#ctor(System.Threading.Tasks.Sources.IValueTaskSource,System.Int16)">
      <summary>使用提供的表示操作的 <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource" /> 对象初始化 <see cref="T:System.Threading.Tasks.ValueTask" /> 类的新实例。</summary>
      <param name="source">表示操作的对象。</param>
      <param name="token">一个传递给 <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource" /> 的不透明值</param>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.#ctor(System.Threading.Tasks.Task)">
      <summary>使用提供的表示操作的任务初始化 <see cref="T:System.Threading.Tasks.ValueTask" /> 类的新实例。</summary>
      <param name="task">表示操作的任务。</param>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.AsTask">
      <summary>检索表示此 <see cref="T:System.Threading.Tasks.ValueTask" /> 的 <see cref="T:System.Threading.Tasks.Task" /> 对象。</summary>
      <returns>包装在此 <see cref="T:System.Threading.Tasks.ValueTask" /> 中的 <see cref="T:System.Threading.Tasks.Task" /> 对象（如果存在），或者表示结果的新 <see cref="T:System.Threading.Tasks.Task" /> 对象。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.ConfigureAwait(System.Boolean)">
      <summary>为此值配置一个 awaiter。</summary>
      <param name="continueOnCapturedContext">如果尝试将延续任务封送回捕获上下文，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>配置的 awaiter。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.Equals(System.Object)">
      <summary>确定指定对象是否与当前的 <see cref="T:System.Threading.Tasks.ValueTask" /> 实例相等。</summary>
      <param name="obj">要与当前对象进行比较的对象。</param>
      <returns>如果指定的对象是等于当前对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.Equals(System.Threading.Tasks.ValueTask)">
      <summary>确定指定的 <see cref="T:System.Threading.Tasks.ValueTask" /> 对象是否等同于当前的 <see cref="T:System.Threading.Tasks.ValueTask" />。</summary>
      <param name="other">要与当前对象进行比较的对象。</param>
      <returns>如果指定的对象是等于当前对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.GetAwaiter">
      <summary>为此值创建一个 awaiter。</summary>
      <returns>Awaiter。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前对象的哈希代码。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask.IsCanceled">
      <summary>获取指示此对象是否表示取消的操作的值。</summary>
      <returns>
        <see langword="true" />如果此对象表示取消的操作, 则为; 否则为。否则为<see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask.IsCompleted">
      <summary>获取指示此对象是否表示完成的操作的值。</summary>
      <returns>
        <see langword="true" />如果此对象表示已完成的操作, 则为; 否则为。否则为<see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask.IsCompletedSuccessfully">
      <summary>获取指示此对象是否表示成功完成的操作的值。</summary>
      <returns>
        <see langword="true" />如果此对象表示已成功完成的操作, 则为; 否则为。否则为<see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask.IsFaulted">
      <summary>获取指示此对象是否表示失败的操作的值。</summary>
      <returns>
        <see langword="true" />如果此对象表示失败的操作, 则为; 否则为。否则为<see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.op_Equality(System.Threading.Tasks.ValueTask,System.Threading.Tasks.ValueTask)">
      <summary>比较两个 <see cref="T:System.Threading.Tasks.ValueTask" /> 值以判断是否相等。</summary>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
      <returns>如果两个 <see cref="T:System.Threading.Tasks.ValueTask" /> 值相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.op_Inequality(System.Threading.Tasks.ValueTask,System.Threading.Tasks.ValueTask)">
      <summary>确定两个 <see cref="T:System.Threading.Tasks.ValueTask" /> 值是否不相等。</summary>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
      <returns>如果两个 <see cref="T:System.Threading.Tasks.ValueTask" /> 值相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask.Preserve">
      <summary>获取将来随时可用的 <see cref="T:System.Threading.Tasks.ValueTask" />。</summary>
      <returns>保留的 <see cref="T:System.Threading.Tasks.ValueTask" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.ValueTask`1">
      <summary>提供包装 <see cref="T:System.Threading.Tasks.Task`1" /> 和 <typeparamref name="TResult" />（仅使用其中之一）的值类型。</summary>
      <typeparam name="TResult">结果。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.#ctor(`0)">
      <summary>使用提供的成功操作的结果初始化 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 类的新实例。</summary>
      <param name="result">结果。</param>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.#ctor(System.Threading.Tasks.Sources.IValueTaskSource{`0},System.Int16)">
      <summary>使用表示操作的 <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource`1" /> 对象初始化 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 类的新实例。</summary>
      <param name="source">源。</param>
      <param name="token">一个传递给 <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource" /> 的不透明值。</param>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.#ctor(System.Threading.Tasks.Task{`0})">
      <summary>使用提供的表示操作的任务初始化 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 类的新实例。</summary>
      <param name="task">任务。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="task" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.AsTask">
      <summary>检索表示此 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 的 <see cref="T:System.Threading.Tasks.Task`1" /> 对象。</summary>
      <returns>包装在此 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 中的 <see cref="T:System.Threading.Tasks.Task`1" /> 对象（如果存在），或者表示结果的新 <see cref="T:System.Threading.Tasks.Task`1" /> 对象。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.ConfigureAwait(System.Boolean)">
      <summary>为此值配置一个 awaiter。</summary>
      <param name="continueOnCapturedContext">如果尝试将延续任务封送回捕获上下文，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>配置的 awaiter。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.Equals(System.Object)">
      <summary>确定指定的对象是否等于当前对象。</summary>
      <param name="obj">要与当前对象进行比较的对象。</param>
      <returns>如果指定的对象是等于当前对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.Equals(System.Threading.Tasks.ValueTask{`0})">
      <summary>确定指定的 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 对象是否等同于当前的 <see cref="T:System.Threading.Tasks.ValueTask`1" />。</summary>
      <param name="other">要与当前对象进行比较的对象。</param>
      <returns>如果指定的对象是等于当前对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.GetAwaiter">
      <summary>为此值创建一个 awaiter。</summary>
      <returns>Awaiter。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前对象的哈希代码。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask`1.IsCanceled">
      <summary>获取指示此对象是否表示取消的操作的值。</summary>
      <returns>
        <see langword="true" />如果此对象表示取消的操作, 则为; 否则为。否则为<see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask`1.IsCompleted">
      <summary>获取指示此对象是否表示完成的操作的值。</summary>
      <returns>
        <see langword="true" />如果此对象表示已完成的操作, 则为; 否则为。否则为<see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask`1.IsCompletedSuccessfully">
      <summary>获取指示此对象是否表示成功完成的操作的值。</summary>
      <returns>
        <see langword="true" />如果此对象表示已成功完成的操作, 则为; 否则为。否则为<see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask`1.IsFaulted">
      <summary>获取指示此对象是否表示失败的操作的值。</summary>
      <returns>
        <see langword="true" />如果此对象表示失败的操作, 则为; 否则为。否则为<see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.op_Equality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
      <summary>比较两个值是否相等。</summary>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
      <returns>如果两个 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 值相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.op_Inequality(System.Threading.Tasks.ValueTask{`0},System.Threading.Tasks.ValueTask{`0})">
      <summary>确定两个 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 值是否不相等。</summary>
      <param name="left">要比较的第一个值。</param>
      <param name="right">要比较的第二个值。</param>
      <returns>如果两个 <see cref="T:System.Threading.Tasks.ValueTask`1" /> 值相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.Preserve">
      <summary>获取将来随时可用的 <see cref="T:System.Threading.Tasks.ValueTask`1" />。</summary>
      <returns>供将来使用的任务对象。</returns>
    </member>
    <member name="P:System.Threading.Tasks.ValueTask`1.Result">
      <summary>获取结果。</summary>
      <returns>结果。</returns>
    </member>
    <member name="M:System.Threading.Tasks.ValueTask`1.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="T:System.Threading.Timeout">
      <summary>包含指定无限期超时间隔的常数。 此类不能被继承。</summary>
    </member>
    <member name="F:System.Threading.Timeout.Infinite">
      <summary>一个用于指定无限长等待时间的常数，适用于接受 <see cref="T:System.Int32" /> 参数的线程处理方法。</summary>
    </member>
    <member name="F:System.Threading.Timeout.InfiniteTimeSpan">
      <summary>用于指定无限长等待时间的常数，接受 <see cref="T:System.TimeSpan" /> 参数的方法。</summary>
    </member>
    <member name="T:System.Threading.WaitHandle">
      <summary>封装等待对共享资源进行独占访问的操作系统特定的对象。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.#ctor">
      <summary>初始化 <see cref="T:System.Threading.WaitHandle" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Close">
      <summary>释放由当前 <see cref="T:System.Threading.WaitHandle" /> 占用的所有资源。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose">
      <summary>释放 <see cref="T:System.Threading.WaitHandle" /> 类的当前实例所使用的所有资源。</summary>
    </member>
    <member name="M:System.Threading.WaitHandle.Dispose(System.Boolean)">
      <summary>当在派生类中重写时，释放 <see cref="T:System.Threading.WaitHandle" /> 使用的非托管资源，并且可选择释放托管资源。</summary>
      <param name="explicitDisposing">
        <see langword="true" /> 表示释放托管资源和非托管资源；<see langword="false" /> 表示仅释放非托管资源。</param>
    </member>
    <member name="P:System.Threading.WaitHandle.Handle">
      <summary>获取或设置本机操作系统句柄。</summary>
      <returns>
        <see langword="IntPtr" />，它表示本机操作系统句柄。 默认为 <see cref="F:System.Threading.WaitHandle.InvalidHandle" /> 字段的值。</returns>
    </member>
    <member name="F:System.Threading.WaitHandle.InvalidHandle">
      <summary>表示无效的本机操作系统句柄。 此字段为只读。</summary>
    </member>
    <member name="P:System.Threading.WaitHandle.SafeWaitHandle">
      <summary>获取或设置本机操作系统句柄。</summary>
      <returns>
        <see cref="T:Microsoft.Win32.SafeHandles.SafeWaitHandle" />，它表示本机操作系统句柄。</returns>
    </member>
    <member name="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)">
      <summary>向一个 <see cref="T:System.Threading.WaitHandle" /> 发出信号并等待另一个。</summary>
      <param name="toSignal">要发出信号的 <see cref="T:System.Threading.WaitHandle" />。</param>
      <param name="toWaitOn">要等待的 <see cref="T:System.Threading.WaitHandle" />。</param>
      <returns>如果信号和等待都成功完成，则为 <see langword="true" />；如果等待没有完成，则此方法不返回。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toSignal" /> 为 <see langword="null" />。  

或 - 
<paramref name="toWaitOn" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">在一个具有 <see cref="T:System.STAThreadAttribute" /> 的线程上调用了该方法。</exception>
      <exception cref="T:System.PlatformNotSupportedException">Windows 98 或 Windows Millennium Edition 不支持此方法。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="toSignal" /> 是信号量，已达到最大计数。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">等待结束，因为线程在未释放互斥的情况下退出。 在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)">
      <summary>向一个 <see cref="T:System.Threading.WaitHandle" /> 发出信号并等待另一个，指定超时间隔为 32 位有符号整数，并指定在进入等待前是否退出上下文的同步域。</summary>
      <param name="toSignal">要发出信号的 <see cref="T:System.Threading.WaitHandle" />。</param>
      <param name="toWaitOn">要等待的 <see cref="T:System.Threading.WaitHandle" />。</param>
      <param name="millisecondsTimeout">一个整数，表示要等待的间隔。 如果值是 <see cref="F:System.Threading.Timeout.Infinite" />，即 -1，则等待是无限期的。</param>
      <param name="exitContext">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>如果信号发送和等待均成功完成，则为 <see langword="true" />；如果信号发送完成，但等待超时，则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toSignal" /> 为 <see langword="null" />。  

或 - 
<paramref name="toWaitOn" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">对具有 <see cref="T:System.STAThreadAttribute" /> 的线程调用了此方法。</exception>
      <exception cref="T:System.PlatformNotSupportedException">Windows 98 或 Windows Millennium Edition 不支持此方法。</exception>
      <exception cref="T:System.InvalidOperationException">无法终止 <see cref="T:System.Threading.WaitHandle" />，因为它将超过其最大计数。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">等待结束，因为线程在未释放互斥的情况下退出。 在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)">
      <summary>向一个 <see cref="T:System.Threading.WaitHandle" /> 发出信号并等待另一个，指定超时间隔为 <see cref="T:System.TimeSpan" />，并指定在进入等待前是否退出上下文的同步域。</summary>
      <param name="toSignal">要发出信号的 <see cref="T:System.Threading.WaitHandle" />。</param>
      <param name="toWaitOn">要等待的 <see cref="T:System.Threading.WaitHandle" />。</param>
      <param name="timeout">一个 <see cref="T:System.TimeSpan" />，表示要等待的间隔。 如果值是 -1，则等待是无限期的。</param>
      <param name="exitContext">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>如果信号发送和等待均成功完成，则为 <see langword="true" />；如果信号发送完成，但等待超时，则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toSignal" /> 为 <see langword="null" />。  
或 
 <paramref name="toWaitOn" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">在一个具有 <see cref="T:System.STAThreadAttribute" /> 的线程上调用了该方法。</exception>
      <exception cref="T:System.PlatformNotSupportedException">Windows 98 或 Windows Millennium Edition 不支持此方法。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="toSignal" /> 是信号量，已达到最大计数。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 计算为 -1 以外的负毫秒数。  
或 
 <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">等待结束，因为线程在未释放互斥的情况下退出。 在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])">
      <summary>等待指定数组中的所有元素都收到信号。</summary>
      <param name="waitHandles">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。 此数组不能包含对同一对象的多个引用。</param>
      <returns>如果 <see langword="true" /> 中的每个元素都收到信号，则返回 <paramref name="waitHandles" />；否则该方法永不返回。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 参数为 <see langword="null" />。 或 
<paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。  
或 
 <paramref name="waitHandles" /> 为不具有元素的数组且 .NET Framework 版本为 2.0 或更高版本。</exception>
      <exception cref="T:System.DuplicateWaitObjectException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.ArgumentException" />。  


            

 <paramref name="waitHandles" /> 数组包含重复的元素。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的对象数大于系统允许的数量。  

或 - 
<see cref="T:System.STAThreadAttribute" /> 属性应用于当前线程的线程过程且 <paramref name="waitHandles" /> 包含多个元素。</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> 数组不含任何元素，并且 .NET Framework 版本为 1.0 或 1.1。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">等待终止，因为线程在未释放互斥的情况下退出。 在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)">
      <summary>等待指定数组中的所有元素接收信号，同时使用 <see cref="T:System.Int32" /> 值指定时间间隔。</summary>
      <param name="waitHandles">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。 此数组不能包含对同一对象的多个引用（重复的元素）。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <returns>如果 <paramref name="waitHandles" /> 中的每个元素都已收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 参数为 <see langword="null" />。  
或 
<paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。  
或 
 <paramref name="waitHandles" /> 是一个不含任何元素的数组。</exception>
      <exception cref="T:System.DuplicateWaitObjectException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.ArgumentException" />。  


            

 <paramref name="waitHandles" /> 数组包含重复的元素。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的对象数大于系统允许的数量。  

或 - 
<see cref="T:System.STAThreadAttribute" /> 属性应用于当前线程的线程过程且 <paramref name="waitHandles" /> 包含多个元素。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">等待结束，因为线程在未释放互斥的情况下退出。 在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
      <summary>等待指定数组中的所有元素收到信号，使用 <see cref="T:System.Int32" /> 值指定时间间隔，并指定是否在等待之前退出同步域。</summary>
      <param name="waitHandles">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。 此数组不能包含对同一对象的多个引用（重复的元素）。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="exitContext">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>如果 <paramref name="waitHandles" /> 中的每个元素都已收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 参数为 <see langword="null" />。  
或 
<paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。  
或 
 <paramref name="waitHandles" /> 为不具有元素的数组且 .NET Framework 版本为 2.0 或更高版本。</exception>
      <exception cref="T:System.DuplicateWaitObjectException">
        <paramref name="waitHandles" /> 数组包含重复的元素。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的对象数大于系统允许的数量。  

或 - 
<see cref="T:System.STAThreadAttribute" /> 属性应用于当前线程的线程过程且 <paramref name="waitHandles" /> 包含多个元素。</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> 数组不含任何元素，并且 .NET Framework 版本为 1.0 或 1.1。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">等待结束，因为线程在未释放互斥的情况下退出。 在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)">
      <summary>等待指定数组中的所有元素接收信号，同时使用 <see cref="T:System.TimeSpan" /> 值指定时间间隔。</summary>
      <param name="waitHandles">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。 此数组不能包含对同一对象的多个引用。</param>
      <param name="timeout">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <returns>如果 <paramref name="waitHandles" /> 中的每个元素都已收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 参数为 <see langword="null" />。  

或 - 
<paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。  

或 - 
<paramref name="waitHandles" /> 是一个不含任何元素的数组。</exception>
      <exception cref="T:System.DuplicateWaitObjectException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.ArgumentException" />。  


            

 <paramref name="waitHandles" /> 数组包含重复的元素。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的对象数大于系统允许的数量。  
或 
<see cref="T:System.STAThreadAttribute" /> 属性应用于当前线程的线程过程且 <paramref name="waitHandles" /> 包含多个元素。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。 
或 
 <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">等待终止，因为线程在未释放互斥的情况下退出。 在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
      <summary>等待指定数组中的所有元素收到信号，使用 <see cref="T:System.TimeSpan" /> 值指定时间间隔，并指定是否在等待之前退出同步域。</summary>
      <param name="waitHandles">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。 此数组不能包含对同一对象的多个引用。</param>
      <param name="timeout">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <param name="exitContext">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>如果 <paramref name="waitHandles" /> 中的每个元素都收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 参数为 <see langword="null" />。  

或 - 
<paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。  

或 
 <paramref name="waitHandles" /> 为不具有元素的数组且 .NET Framework 版本为 2.0 或更高版本。</exception>
      <exception cref="T:System.DuplicateWaitObjectException">
        <paramref name="waitHandles" /> 数组包含重复的元素。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的对象数大于系统允许的数量。  

或 - 
<see cref="T:System.STAThreadAttribute" /> 属性应用于当前线程的线程过程且 <paramref name="waitHandles" /> 包含多个元素。</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> 数组不含任何元素，并且 .NET Framework 版本为 1.0 或 1.1。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。 
或 
 <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">等待终止，因为线程在未释放互斥的情况下退出。 在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])">
      <summary>等待指定数组中的任一元素收到信号。</summary>
      <param name="waitHandles">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</param>
      <returns>满足等待的对象的数组索引。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 参数为 <see langword="null" />。  
或 
<paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 1.0 或 1.1。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">等待结束，因为线程在未释放互斥的情况下退出。 在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 2.0 或更高。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)">
      <summary>等待指定数组中的任意元素接收信号，同时使用 32 位有符号整数指定时间间隔。</summary>
      <param name="waitHandles">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <returns>满足等待的对象的数组索引；如果没有任何对象满足等待，并且等效于 <paramref name="millisecondsTimeout" /> 的时间间隔已过，则为 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 参数为 <see langword="null" />。  

或 - 
<paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">等待结束，因为线程在未释放互斥的情况下退出。 在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> 是一个不含任何元素的数组。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)">
      <summary>等待指定数组中的任一元素收到信号，使用 32 位带符号整数指定时间间隔并指定是否在等待之前退出同步域。</summary>
      <param name="waitHandles">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="exitContext">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>满足等待的对象的数组索引；如果没有任何对象满足等待，并且等效于 <paramref name="millisecondsTimeout" /> 的时间间隔已过，则为 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 参数为 <see langword="null" />。  
或 
<paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 1.0 或 1.1。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">等待结束，因为线程在未释放互斥的情况下退出。 在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 2.0 或更高。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)">
      <summary>等待指定数组中的任意元素接收信号，同时使用 <see cref="T:System.TimeSpan" /> 指定时间间隔。</summary>
      <param name="waitHandles">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</param>
      <param name="timeout">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <returns>满足等待的对象的数组索引；如果没有任何对象满足等待，并且等效于 <paramref name="timeout" /> 的时间间隔已过，则为 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 参数为 <see langword="null" />。  
或 
<paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。 

或 - 
<paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">等待结束，因为线程在未释放互斥的情况下退出。 在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> 是一个不含任何元素的数组。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)">
      <summary>等待指定数组中的任一元素收到信号，使用 <see cref="T:System.TimeSpan" /> 指定时间间隔并指定是否在等待之前退出同步域。</summary>
      <param name="waitHandles">一个 <see langword="WaitHandle" /> 数组，包含当前实例将等待的对象。</param>
      <param name="timeout">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <param name="exitContext">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>满足等待的对象的数组索引；如果没有任何对象满足等待，并且等效于 <paramref name="timeout" /> 的时间间隔已过，则为 <see cref="F:System.Threading.WaitHandle.WaitTimeout" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandles" /> 参数为 <see langword="null" />。  
或 
<paramref name="waitHandles" /> 数组中一个或多个对象为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="waitHandles" /> 中的对象数大于系统允许的数量。</exception>
      <exception cref="T:System.ApplicationException">
        <paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 1.0 或 1.1。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。 

或 - 
<paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">等待结束，因为线程在未释放互斥的情况下退出。 在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="waitHandles" /> 是不含元素的数组，并且 .NET Framework 的版本为 2.0 或更高。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="waitHandles" /> 数组包含其他应用程序域中 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne">
      <summary>阻止当前线程，直到当前 <see cref="T:System.Threading.WaitHandle" /> 收到信号。</summary>
      <returns>如果当前实例收到信号，则为 <see langword="true" />。 如果当前实例永不发出信号，则 <see cref="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)" /> 永不返回。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放当前实例。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">等待结束，因为线程在未释放互斥的情况下退出。 在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">当前实例是另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.Int32)">
      <summary>阻止当前线程，直到当前 <see cref="T:System.Threading.WaitHandle" /> 收到信号，同时使用 32 位带符号整数指定时间间隔（以毫秒为单位）。</summary>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <returns>如果当前实例收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放当前实例。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">等待结束，因为线程在未释放互斥的情况下退出。 在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">当前实例是另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)">
      <summary>阻止当前线程，直到当前的 <see cref="T:System.Threading.WaitHandle" /> 收到信号为止，同时使用 32 位带符号整数指定时间间隔，并指定是否在等待之前退出同步域。</summary>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="exitContext">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>如果当前实例收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放当前实例。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">等待结束，因为线程在未释放互斥的情况下退出。 在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">当前实例是另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)">
      <summary>阻止当前线程，直到当前实例收到信号，同时使用 <see cref="T:System.TimeSpan" /> 指定时间间隔。</summary>
      <param name="timeout">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <returns>如果当前实例收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放当前实例。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。 
或 
 <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">等待结束，因为线程在未释放互斥的情况下退出。 在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">当前实例是另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</exception>
    </member>
    <member name="M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)">
      <summary>阻止当前线程，直到当前实例收到信号为止，同时使用 <see cref="T:System.TimeSpan" /> 指定时间间隔，并指定是否在等待之前退出同步域。</summary>
      <param name="timeout">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <param name="exitContext">如果等待之前先退出上下文的同步域（如果在同步上下文中），并在稍后重新获取它，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <returns>如果当前实例收到信号，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放当前实例。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。 
或 
 <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.Threading.AbandonedMutexException">等待结束，因为线程在未释放互斥的情况下退出。 在 Windows 98 或 Windows Millennium Edition 上不会引发此异常。</exception>
      <exception cref="T:System.InvalidOperationException">当前实例是另一个应用程序域中的 <see cref="T:System.Threading.WaitHandle" /> 的透明代理。</exception>
    </member>
    <member name="F:System.Threading.WaitHandle.WaitTimeout">
      <summary>指示在任何等待句柄终止之前 <see cref="M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)" /> 操作已超时。 此字段为常数。</summary>
    </member>
    <member name="T:System.Threading.WaitHandleExtensions">
      <summary>提供针对 wait 句柄使用 safe 句柄的简便方法。</summary>
    </member>
    <member name="M:System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)">
      <summary>获取本机操作系统等待句柄的安全句柄。</summary>
      <param name="waitHandle">本机操作系统句柄。</param>
      <returns>包装本机操作系统等待句柄的安全等待句柄。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandle" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)">
      <summary>设置本机操作系统等待句柄的安全句柄。</summary>
      <param name="waitHandle">一个等待句柄，它封装等待对共享资源进行独占访问的操作系统特定对象。</param>
      <param name="value">要包装操作系统句柄的安全句柄。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="waitHandle" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.ThreadStaticAttribute">
      <summary>指示各线程的静态字段值是否唯一。</summary>
    </member>
    <member name="M:System.ThreadStaticAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ThreadStaticAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.TimeoutException">
      <summary>当为进程或操作分配的时间已过期时引发的异常。</summary>
    </member>
    <member name="M:System.TimeoutException.#ctor">
      <summary>初始化 <see cref="T:System.TimeoutException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.TimeoutException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，包含有关所引发异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，它包含有关源或目标的上下文信息。 <paramref name="context" /> 参数保留供将来使用，并可指定为 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">类名为 <see langword="null" /> 或 <see cref="P:System.Exception.HResult" /> 为零 (0)。</exception>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.TimeoutException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.TimeoutException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和内部异常初始化 <see cref="T:System.TimeoutException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.TimeSpan">
      <summary>表示一个时间间隔。</summary>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.TimeSpan" /> 结构的新实例初始化为指定的小时数、分钟数和秒数。</summary>
      <param name="hours">小时数。</param>
      <param name="minutes">分钟数。</param>
      <param name="seconds">秒数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">参数指定一个小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" /> 的 <see cref="T:System.TimeSpan" /> 值。</exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.TimeSpan" /> 结构的新实例初始化为指定的天数、小时数、分钟数和秒数。</summary>
      <param name="days">天数。</param>
      <param name="hours">小时数。</param>
      <param name="minutes">分钟数。</param>
      <param name="seconds">秒数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">参数指定一个小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" /> 的 <see cref="T:System.TimeSpan" /> 值。</exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>将 <see cref="T:System.TimeSpan" /> 结构的新实例初始化为指定的天数、小时数、分钟数、秒数和毫秒数。</summary>
      <param name="days">天数。</param>
      <param name="hours">小时数。</param>
      <param name="minutes">分钟数。</param>
      <param name="seconds">秒数。</param>
      <param name="milliseconds">毫秒数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">参数指定一个小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" /> 的 <see cref="T:System.TimeSpan" /> 值。</exception>
    </member>
    <member name="M:System.TimeSpan.#ctor(System.Int64)">
      <summary>将 <see cref="T:System.TimeSpan" /> 结构的新实例初始化为指定的刻度数。</summary>
      <param name="ticks">以 100 毫微秒为单位表示的时间段。</param>
    </member>
    <member name="M:System.TimeSpan.Add(System.TimeSpan)">
      <summary>返回一个新的 <see cref="T:System.TimeSpan" /> 对象，其值为指定的 <see cref="T:System.TimeSpan" /> 对象与此实例的值之和。</summary>
      <param name="ts">待添加的时间间隔。</param>
      <returns>一个新对象，表示此实例的值加 <paramref name="ts" /> 的值。</returns>
      <exception cref="T:System.OverflowException">生成的 <see cref="T:System.TimeSpan" /> 小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />。</exception>
    </member>
    <member name="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)">
      <summary>比较两个 <see cref="T:System.TimeSpan" /> 值，并返回一个整数，该整数指示第一个值是短于、等于还是长于第二个值。</summary>
      <param name="t1">要比较的第一个时间间隔。</param>
      <param name="t2">要比较的第二个时间间隔。</param>
      <returns>以下值之一。  
  值 
  说明 
  -1 
 <paramref name="t1" /> 短于 <paramref name="t2" />。  

  0 
 <paramref name="t1" /> 等于 <paramref name="t2" />。  

  1 
 <paramref name="t1" /> 长于 <paramref name="t2" />。</returns>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.Object)">
      <summary>将此实例与指定对象进行比较，并返回一个整数，该整数指示此实例是短于、等于还是长于指定对象。</summary>
      <param name="value">要比较的对象，或为 <see langword="null" />。</param>
      <returns>以下值之一。  
  值 
  说明 
  -1 
  此实例短于 <paramref name="value" />。  

  0 
  此实例等于 <paramref name="value" />。  

  1 
  此实例长于 <paramref name="value" />。  

或 
 <paramref name="value" /> 为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.TimeSpan" />。</exception>
    </member>
    <member name="M:System.TimeSpan.CompareTo(System.TimeSpan)">
      <summary>将此实例与指定的 <see cref="T:System.TimeSpan" /> 对象进行比较，并返回一个整数，该整数指示此实例是短于、等于还是长于 <see cref="T:System.TimeSpan" /> 对象。</summary>
      <param name="value">要与此实例进行比较的对象。</param>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。  
  值 
  说明 
  负整数 
  此实例短于 <paramref name="value" />。  

  零 
  此实例等于 <paramref name="value" />。  

  正整数 
  此实例长于 <paramref name="value" />。</returns>
    </member>
    <member name="P:System.TimeSpan.Days">
      <summary>获取当前 <see cref="T:System.TimeSpan" /> 结构所表示的时间间隔的天数部分。</summary>
      <returns>此实例的天数部分。 返回值可以是正数也可以是负数。</returns>
    </member>
    <member name="M:System.TimeSpan.Divide(System.Double)">
      <param name="divisor" />
    </member>
    <member name="M:System.TimeSpan.Divide(System.TimeSpan)">
      <param name="ts" />
    </member>
    <member name="M:System.TimeSpan.Duration">
      <summary>返回新的 <see cref="T:System.TimeSpan" /> 对象，其值是当前 <see cref="T:System.TimeSpan" /> 对象的绝对值。</summary>
      <returns>一个新对象，其值是当前 <see cref="T:System.TimeSpan" /> 对象的绝对值。</returns>
      <exception cref="T:System.OverflowException">此实例的值为 <see cref="F:System.TimeSpan.MinValue" />。</exception>
    </member>
    <member name="M:System.TimeSpan.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="value">与此实例进行比较的对象。</param>
      <returns>如果 <paramref name="value" /> 是表示与当前 <see cref="T:System.TimeSpan" /> 结构具有相同时间间隔的 <see cref="T:System.TimeSpan" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan)">
      <summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.TimeSpan" /> 相等。</summary>
      <param name="obj">与此实例进行比较的对象。</param>
      <returns>如果 <paramref name="obj" /> 表示的时间间隔与此实例相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)">
      <summary>返回一个值，该值指示 <see cref="T:System.TimeSpan" /> 的两个指定实例是否相等。</summary>
      <param name="t1">要比较的第一个时间间隔。</param>
      <param name="t2">要比较的第二个时间间隔。</param>
      <returns>如果 <paramref name="t1" /> 和 <paramref name="t2" /> 的值相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.FromDays(System.Double)">
      <summary>返回表示指定天数的 <see cref="T:System.TimeSpan" />，其中对天数的指定精确到最接近的毫秒。</summary>
      <param name="value">天数，精确到最接近的毫秒。</param>
      <returns>表示 <paramref name="value" /> 的对象。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />。  
或 
 <paramref name="value" /> 为 <see cref="F:System.Double.PositiveInfinity" />。  
或 
 <paramref name="value" /> 为 <see cref="F:System.Double.NegativeInfinity" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 等于 <see cref="F:System.Double.NaN" />。</exception>
    </member>
    <member name="M:System.TimeSpan.FromHours(System.Double)">
      <summary>返回表示指定小时数的 <see cref="T:System.TimeSpan" />，其中对小时数的指定精确到最接近的毫秒。</summary>
      <param name="value">精确到最接近的毫秒的小时数。</param>
      <returns>表示 <paramref name="value" /> 的对象。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />。  
或 
 <paramref name="value" /> 为 <see cref="F:System.Double.PositiveInfinity" />。  
或 
 <paramref name="value" /> 为 <see cref="F:System.Double.NegativeInfinity" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 等于 <see cref="F:System.Double.NaN" />。</exception>
    </member>
    <member name="M:System.TimeSpan.FromMilliseconds(System.Double)">
      <summary>返回表示指定毫秒数的 <see cref="T:System.TimeSpan" />。</summary>
      <param name="value">毫秒数。</param>
      <returns>表示 <paramref name="value" /> 的对象。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />。  
或 
 <paramref name="value" /> 为 <see cref="F:System.Double.PositiveInfinity" />。  
或 
 <paramref name="value" /> 为 <see cref="F:System.Double.NegativeInfinity" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 等于 <see cref="F:System.Double.NaN" />。</exception>
    </member>
    <member name="M:System.TimeSpan.FromMinutes(System.Double)">
      <summary>返回表示指定分钟数的 <see cref="T:System.TimeSpan" />，其中对分钟数的指定精确到最接近的毫秒。</summary>
      <param name="value">分钟数，精确到最接近的毫秒。</param>
      <returns>表示 <paramref name="value" /> 的对象。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />。  

或 - 
<paramref name="value" /> 为 <see cref="F:System.Double.PositiveInfinity" />。  

或 - 
<paramref name="value" /> 为 <see cref="F:System.Double.NegativeInfinity" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 等于 <see cref="F:System.Double.NaN" />。</exception>
    </member>
    <member name="M:System.TimeSpan.FromSeconds(System.Double)">
      <summary>返回表示指定秒数的 <see cref="T:System.TimeSpan" />，其中对秒数的指定精确到最接近的毫秒。</summary>
      <param name="value">秒数，精确到最接近的毫秒。</param>
      <returns>表示 <paramref name="value" /> 的对象。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> 小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />。  
或 
 <paramref name="value" /> 为 <see cref="F:System.Double.PositiveInfinity" />。  

或 - 
<paramref name="value" /> 为 <see cref="F:System.Double.NegativeInfinity" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 等于 <see cref="F:System.Double.NaN" />。</exception>
    </member>
    <member name="M:System.TimeSpan.FromTicks(System.Int64)">
      <summary>返回表示指定时间的 <see cref="T:System.TimeSpan" />，其中对时间的指定以刻度为单位。</summary>
      <param name="value">表示时间的刻度数。</param>
      <returns>表示 <paramref name="value" /> 的对象。</returns>
    </member>
    <member name="M:System.TimeSpan.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.TimeSpan.Hours">
      <summary>获取当前 <see cref="T:System.TimeSpan" /> 结构所表示的时间间隔的小时数部分。</summary>
      <returns>当前 <see cref="T:System.TimeSpan" /> 结构的小时数部分。 返回值的范围为 -23 到 23。</returns>
    </member>
    <member name="F:System.TimeSpan.MaxValue">
      <summary>表示最大的 <see cref="T:System.TimeSpan" /> 值。 此字段为只读。</summary>
    </member>
    <member name="P:System.TimeSpan.Milliseconds">
      <summary>获取当前 <see cref="T:System.TimeSpan" /> 结构所表示的时间间隔的毫秒数部分。</summary>
      <returns>当前 <see cref="T:System.TimeSpan" /> 结构的毫秒数部分。 返回值的范围为 -999 到 999。</returns>
    </member>
    <member name="P:System.TimeSpan.Minutes">
      <summary>获取当前 <see cref="T:System.TimeSpan" /> 结构所表示的时间间隔的分钟数部分。</summary>
      <returns>当前 <see cref="T:System.TimeSpan" /> 结构的分钟数部分。 返回值的范围为 -59 到 59。</returns>
    </member>
    <member name="F:System.TimeSpan.MinValue">
      <summary>表示最小的 <see cref="T:System.TimeSpan" /> 值。 此字段为只读。</summary>
    </member>
    <member name="M:System.TimeSpan.Multiply(System.Double)">
      <param name="factor" />
    </member>
    <member name="M:System.TimeSpan.Negate">
      <summary>返回一个新的 <see cref="T:System.TimeSpan" /> 对象，它的值为这个实例的相反值。</summary>
      <returns>一个新对象，它与此实例的数值相同但符号相反。</returns>
      <exception cref="T:System.OverflowException">不能通过 <see cref="T:System.TimeSpan" /> 表示此实例的相反值；即：此实例的值为 <see cref="F:System.TimeSpan.MinValue" />。</exception>
    </member>
    <member name="M:System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)">
      <summary>添加两个指定的 <see cref="T:System.TimeSpan" /> 实例。</summary>
      <param name="t1">要添加的第一个时间间隔。</param>
      <param name="t2">要添加的第二个时间间隔。</param>
      <returns>一个对象，其值为 <paramref name="t1" /> 与 <paramref name="t2" /> 的值之和。</returns>
      <exception cref="T:System.OverflowException">生成的 <see cref="T:System.TimeSpan" /> 小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />。</exception>
    </member>
    <member name="M:System.TimeSpan.op_Division(System.TimeSpan,System.Double)">
      <param name="timeSpan" />
      <param name="divisor" />
    </member>
    <member name="M:System.TimeSpan.op_Division(System.TimeSpan,System.TimeSpan)">
      <param name="t1" />
      <param name="t2" />
    </member>
    <member name="M:System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)">
      <summary>指示两个 <see cref="T:System.TimeSpan" /> 实例是否相等。</summary>
      <param name="t1">要比较的第一个时间间隔。</param>
      <param name="t2">要比较的第二个时间间隔。</param>
      <returns>如果 <paramref name="t1" /> 和 <paramref name="t2" /> 的值相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)">
      <summary>指示指定的 <see cref="T:System.TimeSpan" /> 是否大于另一个指定的 <see cref="T:System.TimeSpan" />。</summary>
      <param name="t1">要比较的第一个时间间隔。</param>
      <param name="t2">要比较的第二个时间间隔。</param>
      <returns>如果 <paramref name="t1" /> 的值大于 <paramref name="t2" /> 的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>指示指定的 <see cref="T:System.TimeSpan" /> 是否大于或等于另一个指定的 <see cref="T:System.TimeSpan" />。</summary>
      <param name="t1">要比较的第一个时间间隔。</param>
      <param name="t2">要比较的第二个时间间隔。</param>
      <returns>如果 <see langword="true" /> 的值大于或等于 <paramref name="t1" /> 的值，则为 <paramref name="t2" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)">
      <summary>指示两个 <see cref="T:System.TimeSpan" /> 实例是否不相等。</summary>
      <param name="t1">要比较的第一个时间间隔。</param>
      <param name="t2">要比较的第二个时间间隔。</param>
      <returns>如果 <paramref name="t1" /> 和 <paramref name="t2" /> 的值不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)">
      <summary>指示指定的 <see cref="T:System.TimeSpan" /> 是否小于另一个指定的 <see cref="T:System.TimeSpan" />。</summary>
      <param name="t1">要比较的第一个时间间隔。</param>
      <param name="t2">要比较的第二个时间间隔。</param>
      <returns>如果 <paramref name="t1" /> 的值小于 <paramref name="t2" /> 的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)">
      <summary>指示指定的 <see cref="T:System.TimeSpan" /> 是否小于或等于另一个指定的 <see cref="T:System.TimeSpan" />。</summary>
      <param name="t1">要比较的第一个时间间隔。</param>
      <param name="t2">要比较的第二个时间间隔。</param>
      <returns>如果 <paramref name="t1" /> 的值小于或等于 <paramref name="t2" /> 的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.op_Multiply(System.Double,System.TimeSpan)">
      <param name="factor" />
      <param name="timeSpan" />
    </member>
    <member name="M:System.TimeSpan.op_Multiply(System.TimeSpan,System.Double)">
      <param name="timeSpan" />
      <param name="factor" />
    </member>
    <member name="M:System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)">
      <summary>从另一个指定的 <see cref="T:System.TimeSpan" /> 中减去指定的 <see cref="T:System.TimeSpan" />。</summary>
      <param name="t1">被减数。</param>
      <param name="t2">减数。</param>
      <returns>一个对象，其值是 <paramref name="t1" /> 的值减去 <paramref name="t2" /> 的值后所得的结果。</returns>
      <exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />。</exception>
    </member>
    <member name="M:System.TimeSpan.op_UnaryNegation(System.TimeSpan)">
      <summary>返回一个 <see cref="T:System.TimeSpan" />，它的值为这个指定实例的相反值。</summary>
      <param name="t">要求反的时间间隔。</param>
      <returns>与此实例的数值相同，但符号相反的对象。</returns>
      <exception cref="T:System.OverflowException">不能通过 <see cref="T:System.TimeSpan" /> 表示此实例的相反值；即：此实例的值为 <see cref="F:System.TimeSpan.MinValue" />。</exception>
    </member>
    <member name="M:System.TimeSpan.op_UnaryPlus(System.TimeSpan)">
      <summary>返回指定的 <see cref="T:System.TimeSpan" /> 的实例。</summary>
      <param name="t">要返回的时间间隔。</param>
      <returns>
        <paramref name="t" /> 所指定的时间间隔。</returns>
    </member>
    <member name="M:System.TimeSpan.Parse(System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="input" />
      <param name="formatProvider" />
    </member>
    <member name="M:System.TimeSpan.Parse(System.String)">
      <summary>将时间间隔的字符串表示形式转换为等效的 <see cref="T:System.TimeSpan" />。</summary>
      <param name="s">一个字符串，用于指定进行转换的时间间隔。</param>
      <returns>与 <paramref name="s" /> 对应的时间间隔。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式无效。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" /> 的数字。  
或 
天、小时、分钟和秒成分中至少有一个超出了其有效范围。</exception>
    </member>
    <member name="M:System.TimeSpan.Parse(System.String,System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />。</summary>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>与 <paramref name="input" /> 对应的时间间隔，由 <paramref name="formatProvider" /> 指定。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 的格式无效。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> 表示一个小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" /> 的数字。  

或 - 
<paramref name="input" /> 中天数、小时、分钟和秒数四个成分中至少一个超出了其有效范围。</exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <param name="input" />
      <param name="format" />
      <param name="formatProvider" />
      <param name="styles" />
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <param name="input" />
      <param name="formats" />
      <param name="formatProvider" />
      <param name="styles" />
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="format">用于定义所需的 <paramref name="input" /> 格式的标准或自定义格式字符串。</param>
      <param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
      <returns>与 <paramref name="input" /> 对应的时间间隔，由 <paramref name="format" /> 和 <paramref name="formatProvider" /> 指定。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 的格式无效。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> 表示一个小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" /> 的数字。  
或 
<paramref name="input" /> 中天数、小时、分钟和秒数四个成分中至少一个超出了其有效范围。</exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <summary>使用指定的格式、区域性特定格式信息和样式，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="format">用于定义所需的 <paramref name="input" /> 格式的标准或自定义格式字符串。</param>
      <param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
      <param name="styles">枚举值的按位组合，用于定义可出现在 <paramref name="input" /> 中的样式元素。</param>
      <returns>与 <paramref name="input" /> 对应的时间间隔，由 <paramref name="format" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 指定。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.TimeSpanStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 的格式无效。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> 表示一个小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" /> 的数字。  
或 
<paramref name="input" /> 中天数、小时、分钟和秒数四个成分中至少一个超出了其有效范围。</exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider)">
      <summary>使用指定的格式字符串数组和区域性特定格式信息，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />。 字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="formats">用于定义所需的 <paramref name="input" /> 格式的标准或自定义格式字符串的数组。</param>
      <param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
      <returns>与 <paramref name="input" /> 对应的时间间隔，由 <paramref name="formats" /> 和 <paramref name="formatProvider" /> 指定。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 的格式无效。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> 表示一个小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" /> 的数字。  
或 
<paramref name="input" /> 中天数、小时、分钟和秒数四个成分中至少一个超出了其有效范围。</exception>
    </member>
    <member name="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)">
      <summary>使用指定的格式、区域性特定格式信息和样式，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />。 字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="formats">用于定义所需的 <paramref name="input" /> 格式的标准或自定义格式字符串的数组。</param>
      <param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
      <param name="styles">枚举值的按位组合，用于定义可出现在 input 中的样式元素。</param>
      <returns>与 <paramref name="input" /> 对应的时间间隔，由 <paramref name="formats" />、<paramref name="formatProvider" /> 和 <paramref name="styles" /> 指定。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="styles" /> 不是有效的 <see cref="T:System.Globalization.TimeSpanStyles" /> 值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="input" /> 的格式无效。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> 表示一个小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" /> 的数字。  
或 
<paramref name="input" /> 中天数、小时、分钟和秒数四个成分中至少一个超出了其有效范围。</exception>
    </member>
    <member name="P:System.TimeSpan.Seconds">
      <summary>获取当前 <see cref="T:System.TimeSpan" /> 结构所表示的时间间隔的秒数部分。</summary>
      <returns>当前 <see cref="T:System.TimeSpan" /> 结构的秒数部分。 返回值的范围为 -59 到 59。</returns>
    </member>
    <member name="M:System.TimeSpan.Subtract(System.TimeSpan)">
      <summary>返回一个新的 <see cref="T:System.TimeSpan" /> 对象，其值为指定的 <see cref="T:System.TimeSpan" /> 对象与此实例的值之差。</summary>
      <param name="ts">要减去的时间间隔。</param>
      <returns>一个新的时间间隔，其值为此实例的值减去 <paramref name="ts" /> 的值所得的结果。</returns>
      <exception cref="T:System.OverflowException">返回值小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />。</exception>
    </member>
    <member name="P:System.TimeSpan.Ticks">
      <summary>获取表示当前 <see cref="T:System.TimeSpan" /> 结构的值的刻度数。</summary>
      <returns>此实例包含的刻度数。</returns>
    </member>
    <member name="F:System.TimeSpan.TicksPerDay">
      <summary>表示一天中的刻度数。 此字段为常数。</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerHour">
      <summary>表示 1 小时的刻度数。 此字段为常数。</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerMillisecond">
      <summary>表示 1 毫秒的刻度数。 此字段为常数。</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerMinute">
      <summary>表示 1 分钟的刻度数。 此字段为常数。</summary>
    </member>
    <member name="F:System.TimeSpan.TicksPerSecond">
      <summary>表示 1 秒的刻度数。</summary>
    </member>
    <member name="M:System.TimeSpan.ToString">
      <summary>将当前 <see cref="T:System.TimeSpan" /> 对象的值转换为其等效的字符串表示形式。</summary>
      <returns>当前 <see cref="T:System.TimeSpan" /> 值的字符串表示形式。</returns>
    </member>
    <member name="M:System.TimeSpan.ToString(System.String)">
      <summary>使用指定的格式将当前 <see cref="T:System.TimeSpan" /> 对象的值转换为其等效的字符串表示形式。</summary>
      <param name="format">标准或自定义的 <see cref="T:System.TimeSpan" /> 格式字符串。</param>
      <returns>当前 <see cref="T:System.TimeSpan" /> 值的字符串表示形式，该值使用 <paramref name="format" /> 参数指定的格式。</returns>
      <exception cref="T:System.FormatException">无法识别或不支持 <paramref name="format" /> 参数。</exception>
    </member>
    <member name="M:System.TimeSpan.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定的格式设置信息，将当前 <see cref="T:System.TimeSpan" /> 对象的值转换为其等效字符串表示形式。</summary>
      <param name="format">标准或自定义的 <see cref="T:System.TimeSpan" /> 格式字符串。</param>
      <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>当前 <see cref="T:System.TimeSpan" /> 值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="formatProvider" /> 指定。</returns>
      <exception cref="T:System.FormatException">无法识别或不支持 <paramref name="format" /> 参数。</exception>
    </member>
    <member name="P:System.TimeSpan.TotalDays">
      <summary>获取以整天数和天的小数部分表示的当前 <see cref="T:System.TimeSpan" /> 结构的值。</summary>
      <returns>此实例表示的总天数。</returns>
    </member>
    <member name="P:System.TimeSpan.TotalHours">
      <summary>获取以整小时数和小时的小数部分表示的当前 <see cref="T:System.TimeSpan" /> 结构的值。</summary>
      <returns>此实例表示的总小时数。</returns>
    </member>
    <member name="P:System.TimeSpan.TotalMilliseconds">
      <summary>获取以整毫秒数和毫秒的小数部分表示的当前 <see cref="T:System.TimeSpan" /> 结构的值。</summary>
      <returns>此实例表示的总毫秒数。</returns>
    </member>
    <member name="P:System.TimeSpan.TotalMinutes">
      <summary>获取以整分钟数和分钟的小数部分表示的当前 <see cref="T:System.TimeSpan" /> 结构的值。</summary>
      <returns>此实例表示的总分钟数。</returns>
    </member>
    <member name="P:System.TimeSpan.TotalSeconds">
      <summary>获取以整秒数和秒的小数部分表示的当前 <see cref="T:System.TimeSpan" /> 结构的值。</summary>
      <returns>此实例表示的总秒数。</returns>
    </member>
    <member name="M:System.TimeSpan.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="formatProvider" />
    </member>
    <member name="M:System.TimeSpan.TryParse(System.ReadOnlySpan{System.Char},System.IFormatProvider,System.TimeSpan@)">
      <param name="input" />
      <param name="formatProvider" />
      <param name="result" />
    </member>
    <member name="M:System.TimeSpan.TryParse(System.ReadOnlySpan{System.Char},System.TimeSpan@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.IFormatProvider,System.TimeSpan@)">
      <summary>使用指定的区域性特定格式设置信息，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />，并返回一个指示转换是否成功的值。</summary>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="result">此方法返回时，包含表示由 <paramref name="input" /> 指定的时间间隔的对象；或者如果转换失败，则包含 <see cref="F:System.TimeSpan.Zero" />。 此参数未经初始化即被传递。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="input" />；否则为 <see langword="false" />。 如果 <paramref name="input" /> 参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />，格式无效，表示的时间间隔小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />，或者天、小时、分钟或秒分量中至少有一个超出其有效范围，则此运算返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)">
      <summary>将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />，并返回一个指示转换是否成功的值。</summary>
      <param name="s">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="result">此方法返回时，包含表示由 <paramref name="s" /> 指定的时间间隔的对象；或者如果转换失败，则包含 <see cref="F:System.TimeSpan.Zero" />。 此参数未经初始化即被传递。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。 如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />，格式无效，表示的时间间隔小于 <see cref="F:System.TimeSpan.MinValue" /> 或大于 <see cref="F:System.TimeSpan.MaxValue" />，或者天、小时、分钟或秒分量中至少有一个超出其有效范围，则此运算返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <param name="input" />
      <param name="format" />
      <param name="formatProvider" />
      <param name="styles" />
      <param name="result" />
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.IFormatProvider,System.TimeSpan@)">
      <param name="input" />
      <param name="format" />
      <param name="formatProvider" />
      <param name="result" />
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <param name="input" />
      <param name="formats" />
      <param name="formatProvider" />
      <param name="styles" />
      <param name="result" />
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.ReadOnlySpan{System.Char},System.String[],System.IFormatProvider,System.TimeSpan@)">
      <param name="input" />
      <param name="formats" />
      <param name="formatProvider" />
      <param name="result" />
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <summary>使用指定的格式、区域性特定格式信息和样式，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />，并返回一个指示转换是否成功的值。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="format">用于定义所需的 <paramref name="input" /> 格式的标准或自定义格式字符串。</param>
      <param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
      <param name="styles">用于指示 <paramref name="input" /> 的样式的一个或多个枚举值。</param>
      <param name="result">此方法返回时，包含表示由 <paramref name="input" /> 指定的时间间隔的对象；或者如果转换失败，则包含 <see cref="F:System.TimeSpan.Zero" />。 此参数未经初始化即被传递。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="input" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.TimeSpan@)">
      <summary>使用指定的格式和区域性特定格式信息，将时间间隔的字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />，并返回一个指示转换是否成功的值。 字符串表示形式的格式必须与指定的格式完全匹配。</summary>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="format">用于定义所需的 <paramref name="input" /> 格式的标准或自定义格式字符串。</param>
      <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="result">此方法返回时，包含表示由 <paramref name="input" /> 指定的时间间隔的对象；或者如果转换失败，则包含 <see cref="F:System.TimeSpan.Zero" />。 此参数未经初始化即被传递。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="input" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)">
      <summary>使用指定的格式、区域性特定格式信息和样式，将时间间隔的指定字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />，并返回一个指示转换是否成功的值。 字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="formats">用于定义可接受的 <paramref name="input" /> 格式的标准或自定义格式字符串的数组。</param>
      <param name="formatProvider">一个提供区域性特定的格式设置信息的对象。</param>
      <param name="styles">用于指示 <paramref name="input" /> 的样式的一个或多个枚举值。</param>
      <param name="result">此方法返回时，包含表示由 <paramref name="input" /> 指定的时间间隔的对象；或者如果转换失败，则包含 <see cref="F:System.TimeSpan.Zero" />。 此参数未经初始化即被传递。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="input" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.TimeSpan@)">
      <summary>使用指定的格式和区域性特定格式信息，将时间间隔的指定字符串表示形式转换为其等效的 <see cref="T:System.TimeSpan" />，并返回一个指示转换是否成功的值。 字符串表示形式的格式必须与一种指定的格式完全匹配。</summary>
      <param name="input">一个字符串，用于指定进行转换的时间间隔。</param>
      <param name="formats">用于定义可接受的 <paramref name="input" /> 格式的标准或自定义格式字符串的数组。</param>
      <param name="formatProvider">一个对象，提供区域性特定的格式设置信息。</param>
      <param name="result">此方法返回时，包含表示由 <paramref name="input" /> 指定的时间间隔的对象；或者如果转换失败，则包含 <see cref="F:System.TimeSpan.Zero" />。 此参数未经初始化即被传递。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="input" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.TimeSpan.Zero">
      <summary>表示零 <see cref="T:System.TimeSpan" /> 值。 此字段为只读。</summary>
    </member>
    <member name="T:System.TimeZone">
      <summary>表示时区。</summary>
    </member>
    <member name="M:System.TimeZone.#ctor">
      <summary>初始化 <see cref="T:System.TimeZone" /> 类的新实例。</summary>
    </member>
    <member name="P:System.TimeZone.CurrentTimeZone">
      <summary>获取当前计算机的时区。</summary>
      <returns>一个 <see cref="T:System.TimeZone" /> 对象，表示当前的本地时区。</returns>
    </member>
    <member name="P:System.TimeZone.DaylightName">
      <summary>获取夏时制时区名称。</summary>
      <returns>夏时制时区名称。</returns>
    </member>
    <member name="M:System.TimeZone.GetDaylightChanges(System.Int32)">
      <summary>返回特定年份的夏时制期间。</summary>
      <param name="year">要应用夏时制期间的年份。</param>
      <returns>一个 <see cref="T:System.Globalization.DaylightTime" /> 对象，包含 <paramref name="year" /> 中夏时制的起始和结束日期。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="year" /> 小于 1 或大于 9999。</exception>
    </member>
    <member name="M:System.TimeZone.GetUtcOffset(System.DateTime)">
      <summary>返回指定本地时间的协调世界时 (UTC) 偏移量。</summary>
      <param name="time">日期和时间值。</param>
      <returns>与 <paramref name="time" /> 相比的协调世界时 (UTC) 偏移量。</returns>
    </member>
    <member name="M:System.TimeZone.IsDaylightSavingTime(System.DateTime)">
      <summary>返回一个值，用以指示指定日期和时间是否处于夏时制期间。</summary>
      <param name="time">日期和时间。</param>
      <returns>如果 <paramref name="time" /> 处于夏时制期间，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)">
      <summary>返回一个值，用以指示指定日期和时间是否处于指定的夏时制期间。</summary>
      <param name="time">日期和时间。</param>
      <param name="daylightTimes">夏时制期间。</param>
      <returns>如果 <paramref name="time" /> 处于 <paramref name="daylightTimes" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="daylightTimes" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.TimeZone.StandardName">
      <summary>获取标准时区名称。</summary>
      <returns>标准时区名称。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.TimeZone.ToLocalTime(System.DateTime)">
      <summary>返回对应于指定日期和时间值的本地时间。</summary>
      <param name="time">协调世界时 (UTC) 时间。</param>
      <returns>一个 <see cref="T:System.DateTime" /> 对象，其值为对应于 <paramref name="time" /> 的本地时间。</returns>
    </member>
    <member name="M:System.TimeZone.ToUniversalTime(System.DateTime)">
      <summary>返回对应于指定时间的协调世界时 (UTC)。</summary>
      <param name="time">日期和时间。</param>
      <returns>一个 <see cref="T:System.DateTime" /> 对象，其值为对应于 <paramref name="time" /> 的协调世界时 (UTC)。</returns>
    </member>
    <member name="T:System.TimeZoneInfo">
      <summary>表示世界上的任何时区。</summary>
    </member>
    <member name="T:System.TimeZoneInfo.AdjustmentRule">
      <summary>提供有关时区调整（如与夏时制之间的转换）的信息。</summary>
    </member>
    <member name="M:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(System.DateTime,System.DateTime,System.TimeSpan,System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)">
      <summary>为特定时区创建新调整规则。</summary>
      <param name="dateStart">调整规则的生效日期。 如果 <paramref name="dateStart" /> 参数的值为 <see langword="DateTime.MinValue.Date" />，那么这是时区的第一个有效的调整规则。</param>
      <param name="dateEnd">执行调整规则的最后日期。 如果 <paramref name="dateEnd" /> 参数的值为 <see langword="DateTime.MaxValue.Date" />，则调整规则无结束日期。</param>
      <param name="daylightDelta">调整所产生的时间更改。 将该值添加到时区的 <see cref="P:System.TimeZoneInfo.BaseUtcOffset" /> 属性，以便获取从协调世界时 (UTC) 开始的正确的夏令时偏移量。 该值的范围介于 -14 到 14。</param>
      <param name="daylightTransitionStart">定义夏令时的开始时间的对象。</param>
      <param name="daylightTransitionEnd">定义夏令时的结束时间的对象。</param>
      <returns>表示新调整规则的对象。</returns>
      <exception cref="T:System.ArgumentException">参数 <paramref name="dateStart" /> 或 <paramref name="dateEnd" /> 的属性 <see cref="P:System.DateTime.Kind" /> 的值不等于 <see cref="F:System.DateTimeKind.Unspecified" />。  
或 
<paramref name="daylightTransitionStart" /> 参数等于 <paramref name="daylightTransitionEnd" /> 参数。  
或 
<paramref name="dateStart" /> 或 <paramref name="dateEnd" /> 参数包含一个日期的时间值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dateEnd" /> 早于 <paramref name="dateStart" />。  
或 
 <paramref name="daylightDelta" /> 小于 -14 或大于 14。  
或 
<paramref name="daylightDelta" /> 参数的 <see cref="P:System.TimeSpan.Milliseconds" /> 属性不等于 0。  
或 
<paramref name="daylightDelta" /> 参数的 <see cref="P:System.TimeSpan.Ticks" /> 属性不等于整秒数。</exception>
    </member>
    <member name="P:System.TimeZoneInfo.AdjustmentRule.DateEnd">
      <summary>获取调整规则失效的日期。</summary>
      <returns>
        <see cref="T:System.DateTime" /> 值，指示调整规则失效的日期。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.AdjustmentRule.DateStart">
      <summary>获取调整规则生效的日期。</summary>
      <returns>一个 <see cref="T:System.DateTime" /> 值，该值指示调整规则生效的日期。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta">
      <summary>获取形成时区的夏时制所需的时间量。 该时间量添加到时区与协调世界时 (UTC) 的偏移量中。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 对象，指示作为调整规则的执行结果而添加到标准时间更改中的时间量。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd">
      <summary>获取有关每年何时从夏时制转换回标准时间的信息。</summary>
      <returns>一个 <see cref="T:System.TimeZoneInfo.TransitionTime" /> 对象，定义每年何时从夏时制转换回时区的标准时间。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.AdjustmentRule.DaylightTransitionStart">
      <summary>获取有关每年何时从标准时间转换为夏时制的信息。</summary>
      <returns>一个 <see cref="T:System.TimeZoneInfo.TransitionTime" /> 对象，定义每年何时从时区的标准时间转换为夏时制。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.AdjustmentRule.Equals(System.TimeZoneInfo.AdjustmentRule)">
      <summary>确定当前 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 对象是否等于另一个 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 对象。</summary>
      <param name="other">要与当前对象进行比较的对象。</param>
      <returns>如果两个 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 对象具有相等的值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.AdjustmentRule.GetHashCode">
      <summary>用作哈希算法的哈希函数和数据结构（如哈希表）。</summary>
      <returns>一个 32 位有符号整数，用作当前 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 对象的哈希代码。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>在 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 对象的反序列化完成时运行。</summary>
      <param name="sender">启动回调的对象。 当前未实现该参数的功能。</param>
    </member>
    <member name="M:System.TimeZoneInfo.AdjustmentRule.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象所需的数据填充此对象。</summary>
      <param name="info">要填充数据的对象。</param>
      <param name="context">此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext" />）。</param>
    </member>
    <member name="P:System.TimeZoneInfo.BaseUtcOffset">
      <summary>获取当前时区的标准时间与协调世界时 (UTC) 之间的时差。</summary>
      <returns>一个对象，它指示当前时区的标准时间与协调世界时 (UTC) 之间的时差。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ClearCachedData">
      <summary>清除已缓存的时区数据。</summary>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)">
      <summary>将时间转换为特定时区的时间。</summary>
      <param name="dateTime">要转换的日期和时间。</param>
      <param name="destinationTimeZone">要将 <paramref name="dateTime" /> 转换到的时区。</param>
      <returns>目标时区的日期和时间。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 参数值表示无效的时间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZone" /> 参数的值为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)">
      <summary>将时间从一个时区转换为另一个时区。</summary>
      <param name="dateTime">要转换的日期和时间。</param>
      <param name="sourceTimeZone">
        <paramref name="dateTime" /> 的时区。</param>
      <param name="destinationTimeZone">要将 <paramref name="dateTime" /> 转换到的时区。</param>
      <returns>目标时区中与源时区中的 <paramref name="dateTime" /> 参数对应的日期和时间。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 参数的 <see cref="P:System.DateTime.Kind" /> 属性为 <see cref="F:System.DateTimeKind.Local" />，但 <paramref name="sourceTimeZone" /> 参数不等于 <see cref="F:System.DateTimeKind.Local" />。  

或 - 
<paramref name="dateTime" /> 参数的 <see cref="P:System.DateTime.Kind" /> 属性为 <see cref="F:System.DateTimeKind.Utc" />，但 <paramref name="sourceTimeZone" /> 参数不等于 <see cref="P:System.TimeZoneInfo.Utc" />。  

或 
<paramref name="dateTime" /> 参数为无效时间（即，它表示因时区的调整规则而不存在的时间）。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceTimeZone" /> 参数为 <see langword="null" />。  
或 
<paramref name="destinationTimeZone" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)">
      <summary>将时间转换为特定时区的时间。</summary>
      <param name="dateTimeOffset">要转换的日期和时间。</param>
      <param name="destinationTimeZone">要将 <paramref name="dateTime" /> 转换到的时区。</param>
      <returns>目标时区的日期和时间。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZone" /> 参数的值为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)">
      <summary>根据时区标识符将时间转换为另一时区中的时间。</summary>
      <param name="dateTime">要转换的日期和时间。</param>
      <param name="destinationTimeZoneId">目标时区的标识符。</param>
      <returns>目标时区的日期和时间。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZoneId" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidTimeZoneException">已找到时区标识符，但注册表数据已损坏。</exception>
      <exception cref="T:System.Security.SecurityException">该进程没有读取包含时区信息的注册表项所需的权限。</exception>
      <exception cref="T:System.TimeZoneNotFoundException">在本地系统上找不到 <paramref name="destinationTimeZoneId" /> 标识符。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)">
      <summary>根据时区标识符将时间从一个时区转换到另一个时区。</summary>
      <param name="dateTime">要转换的日期和时间。</param>
      <param name="sourceTimeZoneId">源时区的标识符。</param>
      <param name="destinationTimeZoneId">目标时区的标识符。</param>
      <returns>目标时区中与源时区中的 <paramref name="dateTime" /> 参数对应的日期和时间。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 参数的 <see cref="P:System.DateTime.Kind" /> 属性与源时区不对应。  
或 
 <paramref name="dateTime" /> 是源时区中的无效时间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceTimeZoneId" /> 为 <see langword="null" />。  
或 
 <paramref name="destinationTimeZoneId" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidTimeZoneException">已找到时区标识符，但注册表数据已损坏。</exception>
      <exception cref="T:System.Security.SecurityException">用户没有读取包含时区数据的注册表项所需的权限。</exception>
      <exception cref="T:System.TimeZoneNotFoundException">在本地系统上找不到 <paramref name="sourceTimeZoneId" /> 标识符。  
或 
在本地系统上找不到 <paramref name="destinationTimeZoneId" /> 标识符。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)">
      <summary>根据时区标识符将时间转换为另一时区中的时间。</summary>
      <param name="dateTimeOffset">要转换的日期和时间。</param>
      <param name="destinationTimeZoneId">目标时区的标识符。</param>
      <returns>目标时区的日期和时间。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZoneId" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidTimeZoneException">时区标识符已找到，但注册表数据已损坏。</exception>
      <exception cref="T:System.Security.SecurityException">该进程没有读取包含时区信息的注册表项所需的权限。</exception>
      <exception cref="T:System.TimeZoneNotFoundException">在本地系统上找不到 <paramref name="destinationTimeZoneId" /> 标识符。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)">
      <summary>将协调世界时 (UTC) 转换为指定时区中的时间。</summary>
      <param name="dateTime">协调世界时 (UTC)。</param>
      <param name="destinationTimeZone">要将 <paramref name="dateTime" /> 转换到的时区。</param>
      <returns>目标时区的日期和时间。 如果 <paramref name="destinationTimeZone" /> 为 <see cref="P:System.DateTime.Kind" />，则该值的 <see cref="F:System.DateTimeKind.Utc" /> 属性为 <see cref="P:System.TimeZoneInfo.Utc" />；否则该值的 <see cref="P:System.DateTime.Kind" /> 属性为 <see cref="F:System.DateTimeKind.Unspecified" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 的 <see cref="P:System.DateTime.Kind" /> 属性为 <see cref="F:System.DateTimeKind.Local" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationTimeZone" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)">
      <summary>将指定的日期和时间转换为协调世界时 (UTC)。</summary>
      <param name="dateTime">要转换的日期和时间。</param>
      <returns>与 <paramref name="dateTime" /> 参数对应的协调世界时 (UTC)。 <see cref="T:System.DateTime" /> 值的 <see cref="P:System.DateTime.Kind" /> 属性始终设置为 <see cref="F:System.DateTimeKind.Utc" />。</returns>
      <exception cref="T:System.ArgumentException">
        <see langword="TimeZoneInfo.Local.IsInvalidDateTime(" />
        <paramref name="dateTime" />
        <see langword=")" /> 返回 <see langword="true" />。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)">
      <summary>将指定时区中的时间转换为协调世界时 (UTC)。</summary>
      <param name="dateTime">要转换的日期和时间。</param>
      <param name="sourceTimeZone">
        <paramref name="dateTime" /> 的时区。</param>
      <returns>与 <paramref name="dateTime" /> 参数对应的协调世界时 (UTC)。 <see cref="T:System.DateTime" /> 对象的 <see cref="P:System.DateTime.Kind" /> 属性始终设置为 <see cref="F:System.DateTimeKind.Utc" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" />.<see langword="Kind" /> 为 <see cref="F:System.DateTimeKind.Utc" />，而 <paramref name="sourceTimeZone" /> 不等于 <see cref="P:System.TimeZoneInfo.Utc" />。  

或 - 
<paramref name="dateTime" />.<see langword="Kind" /> 为 <see cref="F:System.DateTimeKind.Local" />，而 <paramref name="sourceTimeZone" /> 不等于 <see cref="P:System.TimeZoneInfo.Local" />。  

或 - 
<paramref name="sourceTimeZone" /><see langword=".IsInvalidDateTime(" /><paramref name="dateTime" /><see langword=")" /> 返回 <see langword="true" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceTimeZone" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)">
      <summary>创建带指定标识符的自定义时区、与协调世界时 (UTC) 的偏移量、显示名称以及标准时间显示名称。</summary>
      <param name="id">时区的标识符。</param>
      <param name="baseUtcOffset">一个对象，它表示此时区和协调世界时 (UTC) 之间的时差。</param>
      <param name="displayName">新时区的显示名称。</param>
      <param name="standardDisplayName">新时区的标准时间名称。</param>
      <returns>新时区。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="id" /> 参数为空字符串 ("")。  
或 
<paramref name="baseUtcOffset" /> 参数不表示整分钟数。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUtcOffset" /> 参数大于 14 小时或小于 -14 小时。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])">
      <summary>创建带指定标识符的自定义时区、与协调世界时 (UTC) 的偏移量、显示名称、标准时间名称、夏时制名称和夏时制规则。</summary>
      <param name="id">时区的标识符。</param>
      <param name="baseUtcOffset">一个对象，它表示此时区和协调世界时 (UTC) 之间的时差。</param>
      <param name="displayName">新时区的显示名称。</param>
      <param name="standardDisplayName">新时区的标准时间名称。</param>
      <param name="daylightDisplayName">新时区的夏令制名称。</param>
      <param name="adjustmentRules">一个数组，它将基本 UTC 偏移量增加了特定的期间。</param>
      <returns>一个表示新时区的 <see cref="T:System.TimeZoneInfo" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="id" /> 参数为空字符串 ("")。  
或 
<paramref name="baseUtcOffset" /> 参数不表示整分钟数。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUtcOffset" /> 参数大于 14 小时或小于 -14 小时。</exception>
      <exception cref="T:System.InvalidTimeZoneException">在 <paramref name="adjustmentRules" /> 参数中指定的调整规则重叠。  

或 - 
在 <paramref name="adjustmentRules" /> 参数中指定的调整规则未按时间顺序排列。  

或 - 
<paramref name="adjustmentRules" /> 中的一个或多个元素为 <see langword="null" />。  


或 
一个日期可能有多个应用于它的调整规则。  
或 
<paramref name="baseUtcOffset" /> 参数与 <paramref name="adjustmentRules" /> 数组中一个或多个对象的 <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> 值的和大于 14 小时或小于 -14 小时。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)">
      <summary>创建带指定标识符的自定义时区、与协调世界时 (UTC) 的偏移量、显示名称、标准时间名称、夏令制名称、夏令制规则以及指示返回的对象是否反映夏令制信息的值。</summary>
      <param name="id">时区的标识符。</param>
      <param name="baseUtcOffset">一个 <see cref="T:System.TimeSpan" /> 对象，它表示此时区和协调世界时 (UTC) 之间的时差。</param>
      <param name="displayName">新时区的显示名称。</param>
      <param name="standardDisplayName">新时区的标准时间名称。</param>
      <param name="daylightDisplayName">新时区的夏令制名称。</param>
      <param name="adjustmentRules">一个 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 对象的数组，这些对象增加特定期间的基本 UTC 偏移量。</param>
      <param name="disableDaylightSavingTime">如果为 <see langword="true" /> ，则丢弃包含新对象的 <paramref name="adjustmentRules" /> 中与夏令制相关的任何信息；否则为 <see langword="false" />。</param>
      <returns>新时区。 如果 <paramref name="disableDaylightSavingTime" /> 参数为 <see langword="true" />，则返回的对象没有夏令制数据。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="id" /> 参数为空字符串 ("")。  

或 - 
<paramref name="baseUtcOffset" /> 参数不表示整分钟数。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUtcOffset" /> 参数大于 14 小时或小于 -14 小时。</exception>
      <exception cref="T:System.InvalidTimeZoneException">在 <paramref name="adjustmentRules" /> 参数中指定的调整规则重叠。  
或 
在 <paramref name="adjustmentRules" /> 参数中指定的调整规则未按时间顺序排列。  
或 
<paramref name="adjustmentRules" /> 中的一个或多个元素为 <see langword="null" />。  

或 - 
一个日期可能有多个应用于它的调整规则。  

或 
<paramref name="baseUtcOffset" /> 参数与 <paramref name="adjustmentRules" /> 数组中一个或多个对象的 <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> 值的和大于 14 小时或小于 -14 小时。</exception>
    </member>
    <member name="P:System.TimeZoneInfo.DaylightName">
      <summary>获取当前时区的夏时制的显示名称。</summary>
      <returns>时区的夏时制的显示名称。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.DisplayName">
      <summary>获取表示时区的一般显示名称。</summary>
      <returns>时区的一般显示名称。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.Equals(System.Object)">
      <summary>确定当前的 <see cref="T:System.TimeZoneInfo" /> 对象和另一个对象是否相等。</summary>
      <param name="obj">要与当前对象进行比较的另一个对象。</param>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.TimeZoneInfo" /> 对象等于当前实例，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)">
      <summary>确定当前的 <see cref="T:System.TimeZoneInfo" /> 对象和另一个 <see cref="T:System.TimeZoneInfo" /> 对象是否相等。</summary>
      <param name="other">要与当前对象进行比较的另一个对象。</param>
      <returns>如果两个 <see cref="T:System.TimeZoneInfo" /> 对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)">
      <summary>根据新的 <see cref="T:System.TimeZoneInfo" /> 对象的标识符实例化该对象。</summary>
      <param name="id">时区标识符，它对应于 <see cref="P:System.TimeZoneInfo.Id" /> 属性。</param>
      <returns>一个对象，其标识符为 <paramref name="id" /> 参数的值。</returns>
      <exception cref="T:System.OutOfMemoryException">系统没有足够内存保留有关时区的信息。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.TimeZoneNotFoundException">未找到 <paramref name="id" /> 指定的时区标识符。 这意味着名称与 <paramref name="id" /> 匹配的时区标识符不存在，或者该标识符存在但不包含任何时区数据。</exception>
      <exception cref="T:System.Security.SecurityException">该进程没有读取包含时区信息的注册表项所需的权限。</exception>
      <exception cref="T:System.InvalidTimeZoneException">已找到时区标识符，但注册表数据已损坏。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.FromSerializedString(System.String)">
      <summary>反序列化一个字符串，以重新创建原来已序列化的 <see cref="T:System.TimeZoneInfo" /> 对象。</summary>
      <param name="source">已序列化的 <see cref="T:System.TimeZoneInfo" /> 对象的字符串表示形式。</param>
      <returns>原始序列化对象。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 参数为 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 参数为空字符串。</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">无法将源参数反序列化回 <see cref="T:System.TimeZoneInfo" /> 对象。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetAdjustmentRules">
      <summary>检索应用至当前 <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> 对象的 <see cref="T:System.TimeZoneInfo" /> 对象的数组。</summary>
      <returns>此时区的对象的数组。</returns>
      <exception cref="T:System.OutOfMemoryException">系统没有足够内存来制作调整规则在内存中的副本。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)">
      <summary>返回不明确的日期和时间可能映射到的日期和时间的相关信息。</summary>
      <param name="dateTime">日期和时间。</param>
      <returns>对象的数组，它表示特定日期和时间可以映射到的可能的协调世界时 (UTC) 偏移量。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 是明确的时间。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)">
      <summary>返回不明确的日期和时间可能映射到的日期和时间的相关信息。</summary>
      <param name="dateTimeOffset">日期和时间。</param>
      <returns>对象的数组，它表示特定日期和时间可以映射到的可能的协调世界时 (UTC) 偏移量。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTimeOffset" /> 是明确的时间。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetHashCode">
      <summary>用作哈希算法的哈希函数和数据结构（如哈希表）。</summary>
      <returns>一个 32 位有符号整数，用作此 <see cref="T:System.TimeZoneInfo" /> 对象的哈希代码。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.GetSystemTimeZones">
      <summary>返回时区信息在本地系统上可用的所有时区的已排序集合。</summary>
      <returns>
        <see cref="T:System.TimeZoneInfo" /> 对象的只读集合。</returns>
      <exception cref="T:System.OutOfMemoryException">内存不足，无法存储所有时区信息。</exception>
      <exception cref="T:System.Security.SecurityException">用户没有读取包含时区信息的注册表项所需的权限。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)">
      <summary>计算此时区中的时间与协调世界时 (UTC) 之间针对特定日期和时间的偏移量或差值。</summary>
      <param name="dateTime">要为其确定偏移量的日期和时间。</param>
      <returns>一个对象，该对象指示两个时区之间的时差。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)">
      <summary>计算此时区中的时间与协调世界时 (UTC) 之间针对特定日期和时间的偏移量或差值。</summary>
      <param name="dateTimeOffset">要为其确定偏移量的日期和时间。</param>
      <returns>一个对象，该对象指示协调世界时 (UTC) 与当前时区之间的时差。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)">
      <summary>指示当前对象和另一个 <see cref="T:System.TimeZoneInfo" /> 对象是否具有相同的调整规则。</summary>
      <param name="other">要与当前的 <see cref="T:System.TimeZoneInfo" /> 对象进行比较的第二个对象。</param>
      <returns>如果两个时区具有相同的调整规则和相同的基本偏移量，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.TimeZoneInfo.Id">
      <summary>获取时区标识符。</summary>
      <returns>时区标识符。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)">
      <summary>确定特定时区中的特定日期和时间是否不明确以及是否可以映射至两个或多个协调世界时 (UTC) 时间。</summary>
      <param name="dateTime">日期和时间值。</param>
      <returns>如果 <paramref name="dateTime" /> 参数不明确，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 值的 <see cref="P:System.DateTime.Kind" /> 属性的值为 <see cref="F:System.DateTimeKind.Local" />，而 <paramref name="dateTime" /> 是无效时间。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)">
      <summary>确定特定时区中的特定日期和时间是否不明确以及是否可以映射至两个或多个协调世界时 (UTC) 时间。</summary>
      <param name="dateTimeOffset">日期和时间。</param>
      <returns>如果 <paramref name="dateTimeOffset" /> 参数在当前时区中不明确，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)">
      <summary>指示指定的日期和时间是否处于当前 <see cref="T:System.TimeZoneInfo" /> 对象时区的夏令制范围内。</summary>
      <param name="dateTime">日期和时间值。</param>
      <returns>如果 <paramref name="dateTime" /> 参数为夏令制，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> 值的 <see cref="P:System.DateTime.Kind" /> 属性的值为 <see cref="F:System.DateTimeKind.Local" />，而 <paramref name="dateTime" /> 是无效时间。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)">
      <summary>指示指定的日期和时间是否处于当前 <see cref="T:System.TimeZoneInfo" /> 对象时区的夏令制范围内。</summary>
      <param name="dateTimeOffset">日期和时间值。</param>
      <returns>如果 <paramref name="dateTimeOffset" /> 参数为夏令制，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)">
      <summary>指示特定日期和时间是否无效。</summary>
      <param name="dateTime">日期和时间值。</param>
      <returns>如果 <paramref name="dateTime" /> 无效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.Local">
      <summary>获取表示本地时区的 <see cref="T:System.TimeZoneInfo" /> 对象。</summary>
      <returns>一个对象，表示本地时区。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.StandardName">
      <summary>获取时区的标准时间的显示名称。</summary>
      <returns>时区的标准时间的显示名称。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.SupportsDaylightSavingTime">
      <summary>获取一个值，该值指示时区是否具有任何夏时制规则。</summary>
      <returns>如果时区支持夏时制，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>在对象的反序列化完成时运行。</summary>
      <param name="sender">启动回调的对象。 当前未实现该参数的功能。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="T:System.TimeZoneInfo" /> 对象包含无效或已损坏的数据。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化当前的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象所需的所有数据填充 <see cref="T:System.TimeZoneInfo" /> 对象。</summary>
      <param name="info">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext" />）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.ToSerializedString">
      <summary>将当前的 <see cref="T:System.TimeZoneInfo" /> 对象转换为序列化字符串。</summary>
      <returns>表示当前 <see cref="T:System.TimeZoneInfo" /> 对象的字符串。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.ToString">
      <summary>返回当前 <see cref="T:System.TimeZoneInfo" /> 对象的显示名称。</summary>
      <returns>当前 <see cref="P:System.TimeZoneInfo.DisplayName" /> 对象的 <see cref="T:System.TimeZoneInfo" /> 属性值。</returns>
    </member>
    <member name="T:System.TimeZoneInfo.TransitionTime">
      <summary>提供有关特定时区中特定时间更改（例如从夏时制更改为标准时间，或者从标准时间更改为夏时制）的信息。</summary>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule(System.DateTime,System.Int32,System.Int32)">
      <summary>定义一个使用固定日期规则的日期更改（即，发生在特定月份的特定日期的时间更改）。</summary>
      <param name="timeOfDay">发生时间更改的时间。 此参数对应于 <see cref="P:System.TimeZoneInfo.TransitionTime.TimeOfDay" /> 属性。</param>
      <param name="month">发生时间更改的月份。 此参数对应于 <see cref="P:System.TimeZoneInfo.TransitionTime.Month" /> 属性。</param>
      <param name="day">发生时间更改的月份的日期。 此参数对应于 <see cref="P:System.TimeZoneInfo.TransitionTime.Day" /> 属性。</param>
      <returns>有关时间更改的数据。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="timeOfDay" /> 参数具有非默认的日期组件。  
或 
<paramref name="timeOfDay" /> 参数的 <see cref="P:System.DateTime.Kind" /> 属性不是 <see cref="F:System.DateTimeKind.Unspecified" />。  

或 - 
<paramref name="timeOfDay" /> 参数不表示整毫秒数。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> 参数小于 1 或大于 12。  
或 
<paramref name="day" /> 参数小于 1 或大于 31。</exception>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule(System.DateTime,System.Int32,System.Int32,System.DayOfWeek)">
      <summary>定义一个使用浮动日期规则的日期更改（即，发生在特定月份的特定星期的特定星期几的时间更改）。</summary>
      <param name="timeOfDay">发生时间更改的时间。 此参数对应于 <see cref="P:System.TimeZoneInfo.TransitionTime.TimeOfDay" /> 属性。</param>
      <param name="month">发生时间更改的月份。 此参数对应于 <see cref="P:System.TimeZoneInfo.TransitionTime.Month" /> 属性。</param>
      <param name="week">时间更改发生在月中的第几个星期。 它的值的范围是从 1 到 5，其中 5 表示该月的最后一周。 此参数对应于 <see cref="P:System.TimeZoneInfo.TransitionTime.Week" /> 属性。</param>
      <param name="dayOfWeek">时间更改发生在星期几。 此参数对应于 <see cref="P:System.TimeZoneInfo.TransitionTime.DayOfWeek" /> 属性。</param>
      <returns>有关时间更改的数据。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="timeOfDay" /> 参数具有非默认的日期组件。  
或 
<paramref name="timeOfDay" /> 参数不表示整毫秒数。  

或 - 
<paramref name="timeOfDay" /> 参数的 <see cref="P:System.DateTime.Kind" /> 属性不是 <see cref="F:System.DateTimeKind.Unspecified" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="month" /> 小于 1 或大于 12。  
或 
 <paramref name="week" /> 小于 1 或大于 5。  
或 
<paramref name="dayOfWeek" /> 参数不是 <see cref="T:System.DayOfWeek" /> 枚举的成员。</exception>
    </member>
    <member name="P:System.TimeZoneInfo.TransitionTime.Day">
      <summary>获取发生时间更改的日期。</summary>
      <returns>发生时间更改的日期。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.TransitionTime.DayOfWeek">
      <summary>获取时间更改发生在星期几。</summary>
      <returns>时间更改发生在星期几。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.Equals(System.Object)">
      <summary>确定是否一个对象具有与当前 <see cref="T:System.TimeZoneInfo.TransitionTime" /> 对象相同的值。</summary>
      <param name="obj">将与当前的 <see cref="T:System.TimeZoneInfo.TransitionTime" /> 对象进行比较的对象。</param>
      <returns>如果两个对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.Equals(System.TimeZoneInfo.TransitionTime)">
      <summary>确定当前 <see cref="T:System.TimeZoneInfo.TransitionTime" /> 对象是否具有与第二个 <see cref="T:System.TimeZoneInfo.TransitionTime" /> 对象相同的值。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <returns>如果两个对象具有相同的属性值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.GetHashCode">
      <summary>用作哈希算法的哈希函数和数据结构（如哈希表）。</summary>
      <returns>一个 32 位有符号整数，用作此 <see cref="T:System.TimeZoneInfo.TransitionTime" /> 对象的哈希代码。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.TransitionTime.IsFixedDateRule">
      <summary>获取一个值，该值指示是在固定日期和时间（如 11 月 1 日）还是在浮动日期和时间（如 10 月的最后一个星期日）发生时间更改。</summary>
      <returns>如果时间更改规则为固定日期，则为 <see langword="true" />；如果时间更改规则为浮动日期，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.TransitionTime.Month">
      <summary>获取发生时间更改的月份。</summary>
      <returns>发生时间更改的月份。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.op_Equality(System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)">
      <summary>确定两个指定的 <see cref="T:System.TimeZoneInfo.TransitionTime" /> 对象是否相等。</summary>
      <param name="t1">要比较的第一个对象。</param>
      <param name="t2">要比较的第二个对象。</param>
      <returns>如果 <paramref name="t1" /> 和 <paramref name="t2" /> 具有相同的值，则为 <see langword="true" />否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.op_Inequality(System.TimeZoneInfo.TransitionTime,System.TimeZoneInfo.TransitionTime)">
      <summary>确定两个指定的 <see cref="T:System.TimeZoneInfo.TransitionTime" /> 对象是否不相等。</summary>
      <param name="t1">要比较的第一个对象。</param>
      <param name="t2">要比较的第二个对象。</param>
      <returns>如果 <paramref name="t1" /> 和 <paramref name="t2" /> 具有任何不同的成员值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>在对象的反序列化完成时运行。</summary>
      <param name="sender">启动回调的对象。 当前未实现该参数的功能。</param>
    </member>
    <member name="M:System.TimeZoneInfo.TransitionTime.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象所需的数据填充此对象。</summary>
      <param name="info">要填充数据的对象。</param>
      <param name="context">此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext" />）。</param>
    </member>
    <member name="P:System.TimeZoneInfo.TransitionTime.TimeOfDay">
      <summary>获取发生时间更改的小时、分钟和秒。</summary>
      <returns>发生时间更改的当天的时间。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.TransitionTime.Week">
      <summary>获取时间更改发生在月中的第几个星期。</summary>
      <returns>时间更改发生在月中的第几个星期。</returns>
    </member>
    <member name="P:System.TimeZoneInfo.Utc">
      <summary>获取表示协调世界时 (UTC) 时区的 <see cref="T:System.TimeZoneInfo" /> 对象。</summary>
      <returns>一个对象，表示协调世界时 (UTC) 时区。</returns>
    </member>
    <member name="T:System.TimeZoneNotFoundException">
      <summary>找不到时区时引发的异常。</summary>
    </member>
    <member name="M:System.TimeZoneNotFoundException.#ctor">
      <summary>使用由系统提供的消息初始化 <see cref="T:System.TimeZoneNotFoundException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.TimeZoneNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.TimeZoneNotFoundException" /> 类的新实例。</summary>
      <param name="info">包含序列化数据的对象。</param>
      <param name="context">包含序列化数据的流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 参数为 <see langword="null" />。  
或 
<paramref name="context" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.TimeZoneNotFoundException.#ctor(System.String)">
      <summary>使用指定的消息字符串初始化 <see cref="T:System.TimeZoneNotFoundException" /> 类的新实例。</summary>
      <param name="message">描述异常的字符串。</param>
    </member>
    <member name="M:System.TimeZoneNotFoundException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.TimeZoneNotFoundException" /> 类的新实例。</summary>
      <param name="message">描述异常的字符串。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="T:System.Tuple">
      <summary>提供用于创建元组对象的静态方法。</summary>
    </member>
    <member name="M:System.Tuple.Create``1(``0)">
      <summary>创建新的 1 元组，即单一实例。</summary>
      <param name="item1">元组仅有的分量的值。</param>
      <typeparam name="T1">元组的唯一一个分量的类型。</typeparam>
      <returns>值为 (<paramref name="item1" />) 的元组。</returns>
    </member>
    <member name="M:System.Tuple.Create``2(``0,``1)">
      <summary>创建新的 2 元组，即二元组。</summary>
      <param name="item1">此元组的第一个分量的值。</param>
      <param name="item2">此元组的第二个分量的值。</param>
      <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
      <typeparam name="T2">元组的第二个分量的类型。</typeparam>
      <returns>值为 (<paramref name="item1" />, <paramref name="item2" />) 的 2 元组。</returns>
    </member>
    <member name="M:System.Tuple.Create``3(``0,``1,``2)">
      <summary>创建新的 3 元组，即三元组。</summary>
      <param name="item1">此元组的第一个分量的值。</param>
      <param name="item2">此元组的第二个分量的值。</param>
      <param name="item3">此元组的第三个分量的值。</param>
      <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
      <typeparam name="T2">元组的第二个分量的类型。</typeparam>
      <typeparam name="T3">元组的第三个分量的类型。</typeparam>
      <returns>值为 (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />) 的 3 元组。</returns>
    </member>
    <member name="M:System.Tuple.Create``4(``0,``1,``2,``3)">
      <summary>创建新的 4 元组，即四元组。</summary>
      <param name="item1">此元组的第一个分量的值。</param>
      <param name="item2">此元组的第二个分量的值。</param>
      <param name="item3">此元组的第三个分量的值。</param>
      <param name="item4">此元组的第四个分量的值。</param>
      <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
      <typeparam name="T2">元组的第二个分量的类型。</typeparam>
      <typeparam name="T3">元组的第三个分量的类型。</typeparam>
      <typeparam name="T4">此元组的第四个分量的类型。</typeparam>
      <returns>值为 (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />) 的 4 元组。</returns>
    </member>
    <member name="M:System.Tuple.Create``5(``0,``1,``2,``3,``4)">
      <summary>创建新的 5 元组，即五元组。</summary>
      <param name="item1">此元组的第一个分量的值。</param>
      <param name="item2">此元组的第二个分量的值。</param>
      <param name="item3">此元组的第三个分量的值。</param>
      <param name="item4">此元组的第四个分量的值。</param>
      <param name="item5">此元组的第五个分量的值。</param>
      <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
      <typeparam name="T2">元组的第二个分量的类型。</typeparam>
      <typeparam name="T3">元组的第三个分量的类型。</typeparam>
      <typeparam name="T4">此元组的第四个分量的类型。</typeparam>
      <typeparam name="T5">此元组的第五个分量的类型。</typeparam>
      <returns>值为 (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />) 的 5 元组。</returns>
    </member>
    <member name="M:System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)">
      <summary>创建新的 6 元组，即六元组。</summary>
      <param name="item1">此元组的第一个分量的值。</param>
      <param name="item2">此元组的第二个分量的值。</param>
      <param name="item3">此元组的第三个分量的值。</param>
      <param name="item4">此元组的第四个分量的值。</param>
      <param name="item5">此元组的第五个分量的值。</param>
      <param name="item6">此元组的第六个分量的值。</param>
      <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
      <typeparam name="T2">元组的第二个分量的类型。</typeparam>
      <typeparam name="T3">元组的第三个分量的类型。</typeparam>
      <typeparam name="T4">此元组的第四个分量的类型。</typeparam>
      <typeparam name="T5">此元组的第五个分量的类型。</typeparam>
      <typeparam name="T6">此元组的第六个分量的类型。</typeparam>
      <returns>值为 (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />) 的 6 元组。</returns>
    </member>
    <member name="M:System.Tuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
      <summary>创建新的 7 元组，即七元组。</summary>
      <param name="item1">此元组的第一个分量的值。</param>
      <param name="item2">此元组的第二个分量的值。</param>
      <param name="item3">此元组的第三个分量的值。</param>
      <param name="item4">此元组的第四个分量的值。</param>
      <param name="item5">此元组的第五个分量的值。</param>
      <param name="item6">此元组的第六个分量的值。</param>
      <param name="item7">元组的第七个分量的值。</param>
      <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
      <typeparam name="T2">元组的第二个分量的类型。</typeparam>
      <typeparam name="T3">元组的第三个分量的类型。</typeparam>
      <typeparam name="T4">此元组的第四个分量的类型。</typeparam>
      <typeparam name="T5">此元组的第五个分量的类型。</typeparam>
      <typeparam name="T6">此元组的第六个分量的类型。</typeparam>
      <typeparam name="T7">元组的第七个分量的类型。</typeparam>
      <returns>值为 (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />, <paramref name="item7" />) 的 7 元组。</returns>
    </member>
    <member name="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>创建新的 8 元组，即八元组。</summary>
      <param name="item1">此元组的第一个分量的值。</param>
      <param name="item2">此元组的第二个分量的值。</param>
      <param name="item3">此元组的第三个分量的值。</param>
      <param name="item4">此元组的第四个分量的值。</param>
      <param name="item5">此元组的第五个分量的值。</param>
      <param name="item6">此元组的第六个分量的值。</param>
      <param name="item7">元组的第七个分量的值。</param>
      <param name="item8">元组的第八个分量的值。</param>
      <typeparam name="T1">此元组的第一个分量的类型。</typeparam>
      <typeparam name="T2">元组的第二个分量的类型。</typeparam>
      <typeparam name="T3">元组的第三个分量的类型。</typeparam>
      <typeparam name="T4">此元组的第四个分量的类型。</typeparam>
      <typeparam name="T5">此元组的第五个分量的类型。</typeparam>
      <typeparam name="T6">此元组的第六个分量的类型。</typeparam>
      <typeparam name="T7">元组的第七个分量的类型。</typeparam>
      <typeparam name="T8">元组的第八个分量的类型。</typeparam>
      <returns>值为 (<paramref name="item1" />, <paramref name="item2" />, <paramref name="item3" />, <paramref name="item4" />, <paramref name="item5" />, <paramref name="item6" />, <paramref name="item7" />, <paramref name="item8" />) 的 8 元祖（八元组）。</returns>
    </member>
    <member name="T:System.Tuple`1">
      <summary>表示 1 元组，即单一实例。</summary>
      <typeparam name="T1">元组的唯一一个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple`1.#ctor(`0)">
      <summary>初始化 <see cref="T:System.Tuple`1" /> 类的新实例。</summary>
      <param name="item1">元组的唯一一个分量的值。</param>
    </member>
    <member name="M:System.Tuple`1.Equals(System.Object)">
      <summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`1" /> 对象是否与指定对象相等。</summary>
      <param name="obj">与该实例进行比较的对象。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`1.GetHashCode">
      <summary>返回当前 <see cref="T:System.Tuple`1" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`1.Item1">
      <summary>获取 <see cref="T:System.Tuple`1" /> 对象的单一分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`1" /> 对象的单一分量的值。</returns>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`1" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">提供用于比较的自定义规则的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`1" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`1" /> 对象是否与指定对象相等。</summary>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，该对象定义用于评估两个对象是否相等的方法。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`1" /> 对象的哈希代码。</summary>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`1" /> 对象的哈希代码。</param>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Tuple`1.System#IComparable#CompareTo(System.Object)">
      <summary>将当前 <see cref="T:System.Tuple`1" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是位于指定对象之前、之后还是与其位置相同。</summary>
      <param name="obj">要与当前实例进行比较的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="obj" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="obj" /> 相同。  

  正整数 
  此实例位于 <paramref name="obj" /> 之后。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`1" /> 对象。</exception>
    </member>
    <member name="P:System.Tuple`1.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>获取 <see langword="Tuple" /> 元素的值。</summary>
      <param name="index">
        <see langword="Tuple" /> 元素的索引。 <paramref name="index" /> 必须为 0。</param>
      <returns>
        <see langword="Tuple" /> 元素的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 0 或大于 0。</exception>
    </member>
    <member name="P:System.Tuple`1.System#Runtime#CompilerServices#ITuple#Length">
      <summary>获取 <see langword="Tuple" /> 中的元素数。</summary>
      <returns>1，<see cref="T:System.Tuple`1" /> 对象中的元素数。</returns>
    </member>
    <member name="M:System.Tuple`1.ToString">
      <summary>返回表示此 <see cref="T:System.Tuple`1" /> 实例的值的字符串。</summary>
      <returns>此 <see cref="T:System.Tuple`1" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`2">
      <summary>表示 2 元组，即二元组。</summary>
      <typeparam name="T1">此元组的第一个组件的类型。</typeparam>
      <typeparam name="T2">此元组的第二个组件的类型。</typeparam>
    </member>
    <member name="M:System.Tuple`2.#ctor(`0,`1)">
      <summary>初始化 <see cref="T:System.Tuple`2" /> 类的新实例。</summary>
      <param name="item1">此元组的第一个组件的值。</param>
      <param name="item2">此元组的第二个组件的值。</param>
    </member>
    <member name="M:System.Tuple`2.Equals(System.Object)">
      <summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`2" /> 对象是否与指定对象相等。</summary>
      <param name="obj">与该实例进行比较的对象。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`2.GetHashCode">
      <summary>返回当前 <see cref="T:System.Tuple`2" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`2.Item1">
      <summary>获取当前 <see cref="T:System.Tuple`2" /> 对象的第一个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`2" /> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`2.Item2">
      <summary>获取当前 <see cref="T:System.Tuple`2" /> 对象的第二个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`2" /> 对象的第二个分量的值。</returns>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`2" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">提供用于比较的自定义规则的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`2" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`2" /> 对象是否与指定对象相等。</summary>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，该对象定义用于评估两个对象是否相等的方法。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`2" /> 对象的哈希代码。</summary>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`2" /> 对象的哈希代码。</param>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Tuple`2.System#IComparable#CompareTo(System.Object)">
      <summary>比较当前 <see cref="T:System.Tuple`2" /> 对象与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</summary>
      <param name="obj">要与当前实例进行比较的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="obj" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="obj" /> 相同。  

  正整数 
  此实例位于 <paramref name="obj" /> 之后。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`2" /> 对象。</exception>
    </member>
    <member name="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>获取指定 <see langword="Tuple" /> 元素的值。</summary>
      <param name="index">指定 <see langword="Tuple" /> 元素的索引。 <paramref name="index" /> 的范围可以介于 0 到 1 之间。</param>
      <returns>指定位置 <see langword="Tuple" /> 元素的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 0 或大于 1。</exception>
    </member>
    <member name="P:System.Tuple`2.System#Runtime#CompilerServices#ITuple#Length">
      <summary>获取 <see langword="Tuple" /> 中的元素数。</summary>
      <returns>2，<see cref="T:System.Tuple`2" /> 对象中的元素数。</returns>
    </member>
    <member name="M:System.Tuple`2.ToString">
      <summary>返回表示此 <see cref="T:System.Tuple`2" /> 实例的值的字符串。</summary>
      <returns>此 <see cref="T:System.Tuple`2" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`3">
      <summary>表示 3 元组，即三元组。</summary>
      <typeparam name="T1">此元组的第一个组件的类型。</typeparam>
      <typeparam name="T2">此元组的第二个组件的类型。</typeparam>
      <typeparam name="T3">此元组的第三个组件的类型。</typeparam>
    </member>
    <member name="M:System.Tuple`3.#ctor(`0,`1,`2)">
      <summary>初始化 <see cref="T:System.Tuple`3" /> 类的新实例。</summary>
      <param name="item1">此元组的第一个组件的值。</param>
      <param name="item2">此元组的第二个组件的值。</param>
      <param name="item3">此元组的第三个组件的值。</param>
    </member>
    <member name="M:System.Tuple`3.Equals(System.Object)">
      <summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`3" /> 对象是否与指定对象相等。</summary>
      <param name="obj">与该实例进行比较的对象。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`3.GetHashCode">
      <summary>返回当前 <see cref="T:System.Tuple`3" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`3.Item1">
      <summary>获取当前 <see cref="T:System.Tuple`3" /> 对象的第一个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`3" /> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`3.Item2">
      <summary>获取当前 <see cref="T:System.Tuple`3" /> 对象的第二个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`3" /> 对象的第二个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`3.Item3">
      <summary>获取当前 <see cref="T:System.Tuple`3" /> 对象的第三个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`3" /> 对象的第三个分量的值。</returns>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`3" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">提供用于比较的自定义规则的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`3" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`3" /> 对象是否与指定对象相等。</summary>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，该对象定义用于评估两个对象是否相等的方法。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`3.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`3" /> 对象的哈希代码。</summary>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`3" /> 对象的哈希代码。</param>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Tuple`3.System#IComparable#CompareTo(System.Object)">
      <summary>比较当前 <see cref="T:System.Tuple`3" /> 对象与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</summary>
      <param name="obj">要与当前实例进行比较的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="obj" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="obj" /> 相同。  

  正整数 
  此实例位于 <paramref name="obj" /> 之后。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`3" /> 对象。</exception>
    </member>
    <member name="P:System.Tuple`3.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>获取指定 <see langword="Tuple" /> 元素的值。</summary>
      <param name="index">指定 <see langword="Tuple" /> 元素的索引。 <paramref name="index" /> 的范围可以介于 0 到 2 之间。</param>
      <returns>指定位置 <see langword="Tuple" /> 元素的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 0 或大于 2。</exception>
    </member>
    <member name="P:System.Tuple`3.System#Runtime#CompilerServices#ITuple#Length">
      <summary>获取 <see langword="Tuple" /> 中的元素数。</summary>
      <returns>3，<see cref="T:System.Tuple`3" /> 对象中的元素数。</returns>
    </member>
    <member name="M:System.Tuple`3.ToString">
      <summary>返回表示此 <see cref="T:System.Tuple`3" /> 实例的值的字符串。</summary>
      <returns>此 <see cref="T:System.Tuple`3" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`4">
      <summary>表示 4 元组，即四元组。</summary>
      <typeparam name="T1">此元组的第一个组件的类型。</typeparam>
      <typeparam name="T2">此元组的第二个组件的类型。</typeparam>
      <typeparam name="T3">此元组的第三个组件的类型。</typeparam>
      <typeparam name="T4">此元组的第四个组件的类型。</typeparam>
    </member>
    <member name="M:System.Tuple`4.#ctor(`0,`1,`2,`3)">
      <summary>初始化 <see cref="T:System.Tuple`4" /> 类的新实例。</summary>
      <param name="item1">此元组的第一个组件的值。</param>
      <param name="item2">此元组的第二个组件的值。</param>
      <param name="item3">此元组的第三个组件的值。</param>
      <param name="item4">此元组的第四个组件的值</param>
    </member>
    <member name="M:System.Tuple`4.Equals(System.Object)">
      <summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`4" /> 对象是否与指定对象相等。</summary>
      <param name="obj">与该实例进行比较的对象。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`4.GetHashCode">
      <summary>返回当前 <see cref="T:System.Tuple`4" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`4.Item1">
      <summary>获取当前 <see cref="T:System.Tuple`4" /> 对象的第一个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`4" /> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`4.Item2">
      <summary>获取当前 <see cref="T:System.Tuple`4" /> 对象的第二个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`4" /> 对象的第二个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`4.Item3">
      <summary>获取当前 <see cref="T:System.Tuple`4" /> 对象的第三个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`4" /> 对象的第三个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`4.Item4">
      <summary>获取当前 <see cref="T:System.Tuple`4" /> 对象的第四个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`4" /> 对象的第四个分量的值。</returns>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`4" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">提供用于比较的自定义规则的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`4" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`4" /> 对象是否与指定对象相等。</summary>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，该对象定义用于评估两个对象是否相等的方法。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`4.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`4" /> 对象的哈希代码。</summary>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`4" /> 对象的哈希代码。</param>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Tuple`4.System#IComparable#CompareTo(System.Object)">
      <summary>比较当前 <see cref="T:System.Tuple`4" /> 对象与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</summary>
      <param name="obj">要与当前实例进行比较的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="obj" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="obj" /> 相同。  

  正整数 
  此实例位于 <paramref name="obj" /> 之后。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`4" /> 对象。</exception>
    </member>
    <member name="P:System.Tuple`4.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>获取指定 <see langword="Tuple" /> 元素的值。</summary>
      <param name="index">指定 <see langword="Tuple" /> 元素的索引。 <paramref name="index" /> 的范围可以介于 0 到 3 之间。</param>
      <returns>指定位置 <see langword="Tuple" /> 元素的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 0 或大于 3。</exception>
    </member>
    <member name="P:System.Tuple`4.System#Runtime#CompilerServices#ITuple#Length">
      <summary>获取 <see langword="Tuple" /> 中的元素数。</summary>
      <returns>4，<see cref="T:System.Tuple`4" /> 对象中的元素数。</returns>
    </member>
    <member name="M:System.Tuple`4.ToString">
      <summary>返回表示此 <see cref="T:System.Tuple`4" /> 实例的值的字符串。</summary>
      <returns>此 <see cref="T:System.Tuple`4" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`5">
      <summary>表示 5 元组，即五元组。</summary>
      <typeparam name="T1">此元组的第一个组件的类型。</typeparam>
      <typeparam name="T2">此元组的第二个组件的类型。</typeparam>
      <typeparam name="T3">此元组的第三个组件的类型。</typeparam>
      <typeparam name="T4">此元组的第四个组件的类型。</typeparam>
      <typeparam name="T5">元组的第五个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple`5.#ctor(`0,`1,`2,`3,`4)">
      <summary>初始化 <see cref="T:System.Tuple`5" /> 类的新实例。</summary>
      <param name="item1">此元组的第一个组件的值。</param>
      <param name="item2">此元组的第二个组件的值。</param>
      <param name="item3">此元组的第三个组件的值。</param>
      <param name="item4">此元组的第四个组件的值</param>
      <param name="item5">元组的第五个分量的值。</param>
    </member>
    <member name="M:System.Tuple`5.Equals(System.Object)">
      <summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`5" /> 对象是否与指定对象相等。</summary>
      <param name="obj">与该实例进行比较的对象。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`5.GetHashCode">
      <summary>返回当前 <see cref="T:System.Tuple`5" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`5.Item1">
      <summary>获取当前 <see cref="T:System.Tuple`5" /> 对象的第一个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`5" /> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item2">
      <summary>获取当前 <see cref="T:System.Tuple`5" /> 对象的第二个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`5" /> 对象的第二个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item3">
      <summary>获取当前 <see cref="T:System.Tuple`5" /> 对象的第三个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`5" /> 对象的第三个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item4">
      <summary>获取当前 <see cref="T:System.Tuple`5" /> 对象的第四个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`5" /> 对象的第四个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`5.Item5">
      <summary>获取当前 <see cref="T:System.Tuple`5" /> 对象的第五个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`5" /> 对象的第五个分量的值。</returns>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`5" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">提供用于比较的自定义规则的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`5" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`5" /> 对象是否与指定对象相等。</summary>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，该对象定义用于评估两个对象是否相等的方法。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`5" /> 对象的哈希代码。</summary>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`5" /> 对象的哈希代码。</param>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Tuple`5.System#IComparable#CompareTo(System.Object)">
      <summary>比较当前 <see cref="T:System.Tuple`5" /> 对象与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</summary>
      <param name="obj">要与当前实例进行比较的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="obj" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="obj" /> 相同。  

  正整数 
  此实例位于 <paramref name="obj" /> 之后。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`5" /> 对象。</exception>
    </member>
    <member name="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>获取指定 <see langword="Tuple" /> 元素的值。</summary>
      <param name="index">指定 <see langword="Tuple" /> 元素的索引。 <paramref name="index" /> 的范围可以介于 0 到 4 之间。</param>
      <returns>指定位置 <see langword="Tuple" /> 元素的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 0 或大于 4。</exception>
    </member>
    <member name="P:System.Tuple`5.System#Runtime#CompilerServices#ITuple#Length">
      <summary>获取 <see langword="Tuple" /> 中的元素数。</summary>
      <returns>5，<see cref="T:System.Tuple`5" /> 对象中的元素数。</returns>
    </member>
    <member name="M:System.Tuple`5.ToString">
      <summary>返回表示此 <see cref="T:System.Tuple`5" /> 实例的值的字符串。</summary>
      <returns>此 <see cref="T:System.Tuple`5" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`6">
      <summary>表示 6 元组，即六元组。</summary>
      <typeparam name="T1">此元组的第一个组件的类型。</typeparam>
      <typeparam name="T2">此元组的第二个组件的类型。</typeparam>
      <typeparam name="T3">此元组的第三个组件的类型。</typeparam>
      <typeparam name="T4">此元组的第四个组件的类型。</typeparam>
      <typeparam name="T5">元组的第五个分量的类型。</typeparam>
      <typeparam name="T6">元组的第六个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
      <summary>初始化 <see cref="T:System.Tuple`6" /> 类的新实例。</summary>
      <param name="item1">此元组的第一个组件的值。</param>
      <param name="item2">此元组的第二个组件的值。</param>
      <param name="item3">此元组的第三个组件的值。</param>
      <param name="item4">此元组的第四个组件的值</param>
      <param name="item5">元组的第五个分量的值。</param>
      <param name="item6">元组的第六个分量的值。</param>
    </member>
    <member name="M:System.Tuple`6.Equals(System.Object)">
      <summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`6" /> 对象是否与指定对象相等。</summary>
      <param name="obj">与该实例进行比较的对象。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`6.GetHashCode">
      <summary>返回当前 <see cref="T:System.Tuple`6" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`6.Item1">
      <summary>获取当前 <see cref="T:System.Tuple`6" /> 对象的第一个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`6" /> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item2">
      <summary>获取当前 <see cref="T:System.Tuple`6" /> 对象的第二个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`6" /> 对象的第二个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item3">
      <summary>获取当前 <see cref="T:System.Tuple`6" /> 对象的第三个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`6" /> 对象的第三个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item4">
      <summary>获取当前 <see cref="T:System.Tuple`6" /> 对象的第四个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`6" /> 对象的第四个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item5">
      <summary>获取当前 <see cref="T:System.Tuple`6" /> 对象的第五个分量的值。</summary>
      <returns>当前<see cref="T:System.Tuple`6" />对象的第五个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`6.Item6">
      <summary>获取当前 <see cref="T:System.Tuple`6" /> 对象的第六个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`6" /> 对象的第六个分量的值。</returns>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`6" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">提供用于比较的自定义规则的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`6" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`6" /> 对象是否与指定对象相等。</summary>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，该对象定义用于评估两个对象是否相等的方法。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`6" /> 对象的哈希代码。</summary>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`6" /> 对象的哈希代码。</param>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Tuple`6.System#IComparable#CompareTo(System.Object)">
      <summary>比较当前 <see cref="T:System.Tuple`6" /> 对象与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</summary>
      <param name="obj">要与当前实例进行比较的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="obj" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="obj" /> 相同。  

  正整数 
  此实例位于 <paramref name="obj" /> 之后。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`6" /> 对象。</exception>
    </member>
    <member name="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>获取指定 <see langword="Tuple" /> 元素的值。</summary>
      <param name="index">指定 <see langword="Tuple" /> 元素的索引。 <paramref name="index" /> 的范围可以介于 0 到 5 之间。</param>
      <returns>指定位置 <see langword="Tuple" /> 元素的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 0 或大于 5。</exception>
    </member>
    <member name="P:System.Tuple`6.System#Runtime#CompilerServices#ITuple#Length">
      <summary>获取 <see langword="Tuple" /> 中的元素数。</summary>
      <returns>6，<see cref="T:System.Tuple`6" /> 对象中的元素数。</returns>
    </member>
    <member name="M:System.Tuple`6.ToString">
      <summary>返回表示此 <see cref="T:System.Tuple`6" /> 实例的值的字符串。</summary>
      <returns>此 <see cref="T:System.Tuple`6" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`7">
      <summary>表示 7 元组，即七元组。</summary>
      <typeparam name="T1">此元组的第一个组件的类型。</typeparam>
      <typeparam name="T2">此元组的第二个组件的类型。</typeparam>
      <typeparam name="T3">此元组的第三个组件的类型。</typeparam>
      <typeparam name="T4">此元组的第四个组件的类型。</typeparam>
      <typeparam name="T5">元组的第五个分量的类型。</typeparam>
      <typeparam name="T6">元组的第六个分量的类型。</typeparam>
      <typeparam name="T7">元组的第七个分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
      <summary>初始化 <see cref="T:System.Tuple`7" /> 类的新实例。</summary>
      <param name="item1">此元组的第一个组件的值。</param>
      <param name="item2">此元组的第二个组件的值。</param>
      <param name="item3">此元组的第三个组件的值。</param>
      <param name="item4">此元组的第四个组件的值</param>
      <param name="item5">元组的第五个分量的值。</param>
      <param name="item6">元组的第六个分量的值。</param>
      <param name="item7">元组的第七个分量的值。</param>
    </member>
    <member name="M:System.Tuple`7.Equals(System.Object)">
      <summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`7" /> 对象是否与指定对象相等。</summary>
      <param name="obj">与该实例进行比较的对象。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`7.GetHashCode">
      <summary>返回当前 <see cref="T:System.Tuple`7" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`7.Item1">
      <summary>获取当前 <see cref="T:System.Tuple`7" /> 对象的第一个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`7" /> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item2">
      <summary>获取当前 <see cref="T:System.Tuple`7" /> 对象的第二个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`7" /> 对象的第二个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item3">
      <summary>获取当前 <see cref="T:System.Tuple`7" /> 对象的第三个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`7" /> 对象的第三个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item4">
      <summary>获取当前 <see cref="T:System.Tuple`7" /> 对象的第四个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`7" /> 对象的第四个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item5">
      <summary>获取当前 <see cref="T:System.Tuple`7" /> 对象的第五个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`7" /> 对象的第五个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item6">
      <summary>获取当前 <see cref="T:System.Tuple`7" /> 对象的第六个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`7" /> 对象的第六个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`7.Item7">
      <summary>获取当前 <see cref="T:System.Tuple`7" /> 对象的第七个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`7" /> 对象的第七个分量的值。</returns>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`7" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">提供用于比较的自定义规则的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`7" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`7" /> 对象是否与指定对象相等。</summary>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，该对象定义用于评估两个对象是否相等的方法。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`7" /> 对象的哈希代码。</summary>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`7" /> 对象的哈希代码。</param>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Tuple`7.System#IComparable#CompareTo(System.Object)">
      <summary>比较当前 <see cref="T:System.Tuple`7" /> 对象与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</summary>
      <param name="obj">要与当前实例进行比较的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="obj" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="obj" /> 相同。  

  正整数 
  此实例位于 <paramref name="obj" /> 之后。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`7" /> 对象。</exception>
    </member>
    <member name="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>获取指定 <see langword="Tuple" /> 元素的值。</summary>
      <param name="index">指定 <see langword="Tuple" /> 元素的索引。 <paramref name="index" /> 的范围可以介于 0 到 6 之间。</param>
      <returns>指定位置 <see langword="Tuple" /> 元素的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 0 或大于 6。</exception>
    </member>
    <member name="P:System.Tuple`7.System#Runtime#CompilerServices#ITuple#Length">
      <summary>获取 <see langword="Tuple" /> 中的元素数。</summary>
      <returns>7，<see cref="T:System.Tuple`7" /> 对象中的元素数。</returns>
    </member>
    <member name="M:System.Tuple`7.ToString">
      <summary>返回表示此 <see cref="T:System.Tuple`7" /> 实例的值的字符串。</summary>
      <returns>此 <see cref="T:System.Tuple`7" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Tuple`8">
      <summary>表示 n 元组，n 为 8 或更大值。</summary>
      <typeparam name="T1">此元组的第一个组件的类型。</typeparam>
      <typeparam name="T2">此元组的第二个组件的类型。</typeparam>
      <typeparam name="T3">此元组的第三个组件的类型。</typeparam>
      <typeparam name="T4">此元组的第四个组件的类型。</typeparam>
      <typeparam name="T5">元组的第五个分量的类型。</typeparam>
      <typeparam name="T6">元组的第六个分量的类型。</typeparam>
      <typeparam name="T7">元组的第七个分量的类型。</typeparam>
      <typeparam name="TRest">任何常规 <see langword="Tuple" /> 对象，用于定义元组的剩余分量的类型。</typeparam>
    </member>
    <member name="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
      <summary>初始化 <see cref="T:System.Tuple`8" /> 类的新实例。</summary>
      <param name="item1">此元组的第一个组件的值。</param>
      <param name="item2">此元组的第二个组件的值。</param>
      <param name="item3">此元组的第三个组件的值。</param>
      <param name="item4">此元组的第四个组件的值</param>
      <param name="item5">元组的第五个分量的值。</param>
      <param name="item6">元组的第六个分量的值。</param>
      <param name="item7">元组的第七个分量的值。</param>
      <param name="rest">任何常规 <see langword="Tuple" /> 对象，其中包含元组的剩余分量的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rest" /> 不是泛型 <see langword="Tuple" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`8.Equals(System.Object)">
      <summary>返回一个值，该值指示当前的 <see cref="T:System.Tuple`8" /> 对象是否与指定对象相等。</summary>
      <param name="obj">与该实例进行比较的对象。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`8.GetHashCode">
      <summary>计算当前 <see cref="T:System.Tuple`8" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Tuple`8.Item1">
      <summary>获取当前 <see cref="T:System.Tuple`8" /> 对象的第一个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`8" /> 对象的第一个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item2">
      <summary>获取当前 <see cref="T:System.Tuple`8" /> 对象的第二个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`8" /> 对象的第二个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item3">
      <summary>获取当前 <see cref="T:System.Tuple`8" /> 对象的第三个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`8" /> 对象的第三个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item4">
      <summary>获取当前 <see cref="T:System.Tuple`8" /> 对象的第四个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`8" /> 对象的第四个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item5">
      <summary>获取当前 <see cref="T:System.Tuple`8" /> 对象的第五个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`8" /> 对象的第五个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item6">
      <summary>获取当前 <see cref="T:System.Tuple`8" /> 对象的第六个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`8" /> 对象的第六个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Item7">
      <summary>获取当前 <see cref="T:System.Tuple`8" /> 对象的第七个分量的值。</summary>
      <returns>当前 <see cref="T:System.Tuple`8" /> 对象的第七个分量的值。</returns>
    </member>
    <member name="P:System.Tuple`8.Rest">
      <summary>获取当前 <see cref="T:System.Tuple`8" /> 对象的剩余分量。</summary>
      <returns>当前 <see cref="T:System.Tuple`8" /> 对象的剩余分量的值。</returns>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器将当前的 <see cref="T:System.Tuple`8" /> 对象与指定对象进行比较，并返回一个整数，该整数指示当前对象在排序顺序中的位置是在指定对象之前、之后还是与其相同。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">提供用于比较的自定义规则的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.Tuple`8" /> 对象。</exception>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值根据指定的比较方法指示当前的 <see cref="T:System.Tuple`8" /> 对象是否与指定对象相等。</summary>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，该对象定义用于评估两个对象是否相等的方法。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>使用指定的计算方法计算当前 <see cref="T:System.Tuple`8" /> 对象的哈希代码。</summary>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.Tuple`8" /> 对象的哈希代码。</param>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)">
      <summary>比较当前 <see cref="T:System.Tuple`8" /> 对象与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</summary>
      <param name="obj">要与当前实例进行比较的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="obj" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="obj" /> 相同。  

  正整数 
  此实例位于 <paramref name="obj" /> 之后。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> 不是 <see cref="T:System.Tuple`8" /> 对象。</exception>
    </member>
    <member name="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>获取指定 <see langword="Tuple" /> 元素的值。</summary>
      <param name="index">指定 <see langword="Tuple" /> 元素的索引。 <paramref name="index" /> 的范围可以介于 0（表示 <see langword="Item1" />）到 <see langword="Tuple" /> 中的元素数减去一之间。</param>
      <returns>指定位置 <see langword="Tuple" /> 元素的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 0。  
或 
 <paramref name="index" /> 大于或等于 <see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" />。</exception>
    </member>
    <member name="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length">
      <summary>获取 <see langword="Tuple" /> 中的元素数。</summary>
      <returns>
        <see langword="Tuple" /> 中的元素的数量。</returns>
    </member>
    <member name="M:System.Tuple`8.ToString">
      <summary>返回表示此 <see cref="T:System.Tuple`8" /> 实例的值的字符串。</summary>
      <returns>此 <see cref="T:System.Tuple`8" /> 对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.TupleExtensions">
      <summary>提供元组用于与 C# 中的元组的语言支持进行互操作的扩展方法。</summary>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``1(System.Tuple{``0},``0@)">
      <summary>将具有 1 个元素的元组解构为不同的变量。</summary>
      <param name="value">要解构为单独变量的 1 元素元组。</param>
      <param name="item1">单个元素的值。</param>
      <typeparam name="T1">单个元素的类型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@)">
      <summary>将具有 10 个元素的元组解构为不同的变量。</summary>
      <param name="value">要解构为 10 个不同变量的 10 元素元组。</param>
      <param name="item1">第 1 个元素的值。</param>
      <param name="item2">第 2 个元素的值。</param>
      <param name="item3">第 3 个元素的值。</param>
      <param name="item4">第 4 个元素的值。</param>
      <param name="item5">第 5 个元素的值。</param>
      <param name="item6">第 6 个元素的值。</param>
      <param name="item7">第 7 个元素的值。</param>
      <param name="item8">第 8 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第 9 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <param name="item10">第 10 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item3" />。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型。</typeparam>
      <typeparam name="T9">第 9 个元素的类型。</typeparam>
      <typeparam name="T10">第 10 个元素的类型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@)">
      <summary>将具有 11 个元素的元组解构为不同的变量。</summary>
      <param name="value">要解构为 11 个不同变量的 11 元素元组。</param>
      <param name="item1">第 1 个元素的值。</param>
      <param name="item2">第 2 个元素的值。</param>
      <param name="item3">第 3 个元素的值。</param>
      <param name="item4">第 4 个元素的值。</param>
      <param name="item5">第 5 个元素的值。</param>
      <param name="item6">第 6 个元素的值。</param>
      <param name="item7">第 7 个元素的值。</param>
      <param name="item8">第 8 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第 9 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <param name="item10">第 10 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item3" />。</param>
      <param name="item11">第 11 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item4" />。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型。</typeparam>
      <typeparam name="T9">第 9 个元素的类型。</typeparam>
      <typeparam name="T10">第 10 个元素的类型。</typeparam>
      <typeparam name="T11">第 11 个元素的类型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@)">
      <summary>将具有 12 个元素的元组解构为不同的变量。</summary>
      <param name="value">要解构为 12 个不同变量的 12 元素元组。</param>
      <param name="item1">第 1 个元素的值。</param>
      <param name="item2">第 2 个元素的值。</param>
      <param name="item3">第 3 个元素的值。</param>
      <param name="item4">第 4 个元素的值。</param>
      <param name="item5">第 5 个元素的值。</param>
      <param name="item6">第 6 个元素的值。</param>
      <param name="item7">第 7 个元素的值。</param>
      <param name="item8">第 8 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第 9 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <param name="item10">第 10 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item3" />。</param>
      <param name="item11">第 11 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item4" />。</param>
      <param name="item12">第 12 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item5" />。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型。</typeparam>
      <typeparam name="T9">第 9 个元素的类型。</typeparam>
      <typeparam name="T10">第 10 个元素的类型。</typeparam>
      <typeparam name="T11">第 11 个元素的类型。</typeparam>
      <typeparam name="T12">第 12 个元素的类型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@)">
      <summary>将具有 13 个元素的元组解构为不同的变量。</summary>
      <param name="value">要解构为 13 个不同变量的 13 元素元组。</param>
      <param name="item1">第 1 个元素的值。</param>
      <param name="item2">第 2 个元素的值。</param>
      <param name="item3">第 3 个元素的值。</param>
      <param name="item4">第 4 个元素的值。</param>
      <param name="item5">第 5 个元素的值。</param>
      <param name="item6">第 6 个元素的值。</param>
      <param name="item7">第 7 个元素的值。</param>
      <param name="item8">第 8 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第 9 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <param name="item10">第 10 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item3" />。</param>
      <param name="item11">第 11 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item4" />。</param>
      <param name="item12">第 12 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item5" />。</param>
      <param name="item13">第 13 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item6" />。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型。</typeparam>
      <typeparam name="T9">第 9 个元素的类型。</typeparam>
      <typeparam name="T10">第 10 个元素的类型。</typeparam>
      <typeparam name="T11">第 11 个元素的类型。</typeparam>
      <typeparam name="T12">第 12 个元素的类型。</typeparam>
      <typeparam name="T13">第 13 个元素的类型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@)">
      <summary>将具有 14 个元素的元组解构为不同的变量。</summary>
      <param name="value">要解构为 14 个不同变量的 14 元素元组。</param>
      <param name="item1">第 1 个元素的值。</param>
      <param name="item2">第 2 个元素的值。</param>
      <param name="item3">第 3 个元素的值。</param>
      <param name="item4">第 4 个元素的值。</param>
      <param name="item5">第 5 个元素的值。</param>
      <param name="item6">第 6 个元素的值。</param>
      <param name="item7">第 7 个元素的值。</param>
      <param name="item8">第 8 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第 9 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <param name="item10">第 10 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item3" />。</param>
      <param name="item11">第 11 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item4" />。</param>
      <param name="item12">第 12 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item5" />。</param>
      <param name="item13">第 13 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item6" />。</param>
      <param name="item14">第 14 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item7" />。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型。</typeparam>
      <typeparam name="T9">第 9 个元素的类型。</typeparam>
      <typeparam name="T10">第 10 个元素的类型。</typeparam>
      <typeparam name="T11">第 11 个元素的类型。</typeparam>
      <typeparam name="T12">第 12 个元素的类型。</typeparam>
      <typeparam name="T13">第 13 个元素的类型。</typeparam>
      <typeparam name="T14">第 14 个元素的类型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@)">
      <summary>将具有 15 个元素的元组解构为不同的变量。</summary>
      <param name="value">要解构为 15 个不同变量的 15 元素元组。</param>
      <param name="item1">第 1 个元素的值。</param>
      <param name="item2">第 2 个元素的值。</param>
      <param name="item3">第 3 个元素的值。</param>
      <param name="item4">第 4 个元素的值。</param>
      <param name="item5">第 5 个元素的值。</param>
      <param name="item6">第 6 个元素的值。</param>
      <param name="item7">第 7 个元素的值。</param>
      <param name="item8">第 8 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第 9 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <param name="item10">第 10 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item3" />。</param>
      <param name="item11">第 11 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item4" />。</param>
      <param name="item12">第 12 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item5" />。</param>
      <param name="item13">第 13 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item6" />。</param>
      <param name="item14">第 14 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item7" />。</param>
      <param name="item15">第 15 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item1" />。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型。</typeparam>
      <typeparam name="T9">第 9 个元素的类型。</typeparam>
      <typeparam name="T10">第 10 个元素的类型。</typeparam>
      <typeparam name="T11">第 11 个元素的类型。</typeparam>
      <typeparam name="T12">第 12 个元素的类型。</typeparam>
      <typeparam name="T13">第 13 个元素的类型。</typeparam>
      <typeparam name="T14">第 14 个元素的类型。</typeparam>
      <typeparam name="T15">第 15 个元素的类型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@)">
      <summary>将具有 16 个元素的元组解构为不同的变量。</summary>
      <param name="value">要解构为 16 个不同变量的 16 元素元组。</param>
      <param name="item1">第 1 个元素的值。</param>
      <param name="item2">第 2 个元素的值。</param>
      <param name="item3">第 3 个元素的值。</param>
      <param name="item4">第 4 个元素的值。</param>
      <param name="item5">第 5 个元素的值。</param>
      <param name="item6">第 6 个元素的值。</param>
      <param name="item7">第 7 个元素的值。</param>
      <param name="item8">第 8 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第 9 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <param name="item10">第 10 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item3" />。</param>
      <param name="item11">第 11 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item4" />。</param>
      <param name="item12">第 12 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item5" />。</param>
      <param name="item13">第 13 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item6" />。</param>
      <param name="item14">第 14 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item7" />。</param>
      <param name="item15">第 15 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item1" />。</param>
      <param name="item16">第 16 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item2" />。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型。</typeparam>
      <typeparam name="T9">第 9 个元素的类型。</typeparam>
      <typeparam name="T10">第 10 个元素的类型。</typeparam>
      <typeparam name="T11">第 11 个元素的类型。</typeparam>
      <typeparam name="T12">第 12 个元素的类型。</typeparam>
      <typeparam name="T13">第 13 个元素的类型。</typeparam>
      <typeparam name="T14">第 14 个元素的类型。</typeparam>
      <typeparam name="T15">第 15 个元素的类型。</typeparam>
      <typeparam name="T16">第 16 个元素的类型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@)">
      <summary>将具有 17 个元素的元组解构为不同的变量。</summary>
      <param name="value">要解构为 17 个不同变量的 17 元素元组。</param>
      <param name="item1">第 1 个元素的值。</param>
      <param name="item2">第 2 个元素的值。</param>
      <param name="item3">第 3 个元素的值。</param>
      <param name="item4">第 4 个元素的值。</param>
      <param name="item5">第 5 个元素的值。</param>
      <param name="item6">第 6 个元素的值。</param>
      <param name="item7">第 7 个元素的值。</param>
      <param name="item8">第 8 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第 9 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <param name="item10">第 10 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item3" />。</param>
      <param name="item11">第 11 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item4" />。</param>
      <param name="item12">第 12 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item5" />。</param>
      <param name="item13">第 13 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item6" />。</param>
      <param name="item14">第 14 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item7" />。</param>
      <param name="item15">第 15 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item1" />。</param>
      <param name="item16">第 16 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item2" />。</param>
      <param name="item17">第 17 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item3" />。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型。</typeparam>
      <typeparam name="T9">第 9 个元素的类型。</typeparam>
      <typeparam name="T10">第 10 个元素的类型。</typeparam>
      <typeparam name="T11">第 11 个元素的类型。</typeparam>
      <typeparam name="T12">第 12 个元素的类型。</typeparam>
      <typeparam name="T13">第 13 个元素的类型。</typeparam>
      <typeparam name="T14">第 14 个元素的类型。</typeparam>
      <typeparam name="T15">第 15 个元素的类型。</typeparam>
      <typeparam name="T16">第 16 个元素的类型。</typeparam>
      <typeparam name="T17">第 17 个元素的类型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``18(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@)">
      <summary>将具有 18 个元素的元组解构为不同的变量。</summary>
      <param name="value">要解构为 18 个不同变量的 18 元素元组。</param>
      <param name="item1">第 1 个元素的值。</param>
      <param name="item2">第 2 个元素的值。</param>
      <param name="item3">第 3 个元素的值。</param>
      <param name="item4">第 4 个元素的值。</param>
      <param name="item5">第 5 个元素的值。</param>
      <param name="item6">第 6 个元素的值。</param>
      <param name="item7">第 7 个元素的值。</param>
      <param name="item8">第 8 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第 9 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <param name="item10">第 10 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item3" />。</param>
      <param name="item11">第 11 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item4" />。</param>
      <param name="item12">第 12 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item5" />。</param>
      <param name="item13">第 13 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item6" />。</param>
      <param name="item14">第 14 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item7" />。</param>
      <param name="item15">第 15 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item1" />。</param>
      <param name="item16">第 16 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item2" />。</param>
      <param name="item17">第 17 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item3" />。</param>
      <param name="item18">第 18 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item4" />。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型。</typeparam>
      <typeparam name="T9">第 9 个元素的类型。</typeparam>
      <typeparam name="T10">第 10 个元素的类型。</typeparam>
      <typeparam name="T11">第 11 个元素的类型。</typeparam>
      <typeparam name="T12">第 12 个元素的类型。</typeparam>
      <typeparam name="T13">第 13 个元素的类型。</typeparam>
      <typeparam name="T14">第 14 个元素的类型。</typeparam>
      <typeparam name="T15">第 15 个元素的类型。</typeparam>
      <typeparam name="T16">第 16 个元素的类型。</typeparam>
      <typeparam name="T17">第 17 个元素的类型。</typeparam>
      <typeparam name="T18">第 18 个元素的类型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``19(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@)">
      <summary>将具有 19 个元素的元组解构为不同的变量。</summary>
      <param name="value">要解构为 19 个不同变量的 19 元素元组。</param>
      <param name="item1">第 1 个元素的值。</param>
      <param name="item2">第 2 个元素的值。</param>
      <param name="item3">第 3 个元素的值。</param>
      <param name="item4">第 4 个元素的值。</param>
      <param name="item5">第 5 个元素的值。</param>
      <param name="item6">第 6 个元素的值。</param>
      <param name="item7">第 7 个元素的值。</param>
      <param name="item8">第 8 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第 9 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <param name="item10">第 10 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item3" />。</param>
      <param name="item11">第 11 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item4" />。</param>
      <param name="item12">第 12 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item5" />。</param>
      <param name="item13">第 13 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item6" />。</param>
      <param name="item14">第 14 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item7" />。</param>
      <param name="item15">第 15 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item1" />。</param>
      <param name="item16">第 16 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item2" />。</param>
      <param name="item17">第 17 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item3" />。</param>
      <param name="item18">第 18 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item4" />。</param>
      <param name="item19">第 19 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item5" />。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型。</typeparam>
      <typeparam name="T9">第 9 个元素的类型。</typeparam>
      <typeparam name="T10">第 10 个元素的类型。</typeparam>
      <typeparam name="T11">第 11 个元素的类型。</typeparam>
      <typeparam name="T12">第 12 个元素的类型。</typeparam>
      <typeparam name="T13">第 13 个元素的类型。</typeparam>
      <typeparam name="T14">第 14 个元素的类型。</typeparam>
      <typeparam name="T15">第 15 个元素的类型。</typeparam>
      <typeparam name="T16">第 16 个元素的类型。</typeparam>
      <typeparam name="T17">第 17 个元素的类型。</typeparam>
      <typeparam name="T18">第 18 个元素的类型。</typeparam>
      <typeparam name="T19">第 19 个元素的类型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``2(System.Tuple{``0,``1},``0@,``1@)">
      <summary>将具有 2 个元素的元组解构为不同的变量。</summary>
      <param name="value">要解构为 2 个不同变量的 2 元素元组。</param>
      <param name="item1">第 1 个元素的值。</param>
      <param name="item2">第 2 个元素的值。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``20(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@)">
      <summary>将具有 20 个元素的元组解构为不同的变量。</summary>
      <param name="value">要解构为 20 个不同变量的 20 元素元组。</param>
      <param name="item1">第 1 个元素的值。</param>
      <param name="item2">第 2 个元素的值。</param>
      <param name="item3">第 3 个元素的值。</param>
      <param name="item4">第 4 个元素的值。</param>
      <param name="item5">第 5 个元素的值。</param>
      <param name="item6">第 6 个元素的值。</param>
      <param name="item7">第 7 个元素的值。</param>
      <param name="item8">第 8 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第 9 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <param name="item10">第 10 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item3" />。</param>
      <param name="item11">第 11 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item4" />。</param>
      <param name="item12">第 12 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item5" />。</param>
      <param name="item13">第 13 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item6" />。</param>
      <param name="item14">第 14 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item7" />。</param>
      <param name="item15">第 15 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item1" />。</param>
      <param name="item16">第 16 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item2" />。</param>
      <param name="item17">第 17 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item3" />。</param>
      <param name="item18">第 18 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item4" />。</param>
      <param name="item19">第 19 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item5" />。</param>
      <param name="item20">第 20 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item6" />。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型。</typeparam>
      <typeparam name="T9">第 9 个元素的类型。</typeparam>
      <typeparam name="T10">第 10 个元素的类型。</typeparam>
      <typeparam name="T11">第 11 个元素的类型。</typeparam>
      <typeparam name="T12">第 12 个元素的类型。</typeparam>
      <typeparam name="T13">第 13 个元素的类型。</typeparam>
      <typeparam name="T14">第 14 个元素的类型。</typeparam>
      <typeparam name="T15">第 15 个元素的类型。</typeparam>
      <typeparam name="T16">第 16 个元素的类型。</typeparam>
      <typeparam name="T17">第 17 个元素的类型。</typeparam>
      <typeparam name="T18">第 18 个元素的类型。</typeparam>
      <typeparam name="T19">第 19 个元素的类型。</typeparam>
      <typeparam name="T20">第 20 个元素的类型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``21(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19,``20}}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@,``9@,``10@,``11@,``12@,``13@,``14@,``15@,``16@,``17@,``18@,``19@,``20@)">
      <summary>将具有 21 个元素的元组解构为不同的变量。</summary>
      <param name="value">要解构为 21 个不同变量的 21 元素元组。</param>
      <param name="item1">第 1 个元素的值。</param>
      <param name="item2">第 2 个元素的值。</param>
      <param name="item3">第 3 个元素的值。</param>
      <param name="item4">第 4 个元素的值。</param>
      <param name="item5">第 5 个元素的值。</param>
      <param name="item6">第 6 个元素的值。</param>
      <param name="item7">第 7 个元素的值。</param>
      <param name="item8">第 8 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第 9 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <param name="item10">第 10 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item3" />。</param>
      <param name="item11">第 11 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item4" />。</param>
      <param name="item12">第 12 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item5" />。</param>
      <param name="item13">第 13 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item6" />。</param>
      <param name="item14">第 14 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item7" />。</param>
      <param name="item15">第 15 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item1" />。</param>
      <param name="item16">第 16 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item2" />。</param>
      <param name="item17">第 17 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item3" />。</param>
      <param name="item18">第 18 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item4" />。</param>
      <param name="item19">第 19 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item5" />。</param>
      <param name="item20">第 20 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item6" />。</param>
      <param name="item21">第 21 个元素的值，或 <paramref name="value" /><see langword=".Rest.Rest.Item7" />。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型。</typeparam>
      <typeparam name="T9">第 9 个元素的类型。</typeparam>
      <typeparam name="T10">第 10 个元素的类型。</typeparam>
      <typeparam name="T11">第 11 个元素的类型。</typeparam>
      <typeparam name="T12">第 12 个元素的类型。</typeparam>
      <typeparam name="T13">第 13 个元素的类型。</typeparam>
      <typeparam name="T14">第 14 个元素的类型。</typeparam>
      <typeparam name="T15">第 15 个元素的类型。</typeparam>
      <typeparam name="T16">第 16 个元素的类型。</typeparam>
      <typeparam name="T17">第 17 个元素的类型。</typeparam>
      <typeparam name="T18">第 18 个元素的类型。</typeparam>
      <typeparam name="T19">第 19 个元素的类型。</typeparam>
      <typeparam name="T20">第 20 个元素的类型。</typeparam>
      <typeparam name="T21">第 21 个元素的类型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``3(System.Tuple{``0,``1,``2},``0@,``1@,``2@)">
      <summary>将具有 3 个元素的元组解构为不同的变量。</summary>
      <param name="value">要解构为 3 个不同变量的 3 元素元组。</param>
      <param name="item1">第 1 个元素的值。</param>
      <param name="item2">第 2 个元素的值。</param>
      <param name="item3">第 3 个元素的值。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``4(System.Tuple{``0,``1,``2,``3},``0@,``1@,``2@,``3@)">
      <summary>将具有 4 个元素的元组解构为不同的变量。</summary>
      <param name="value">要解构为 4 个不同变量的 4 元素元组。</param>
      <param name="item1">第 1 个元素的值。</param>
      <param name="item2">第 2 个元素的值。</param>
      <param name="item3">第 3 个元素的值。</param>
      <param name="item4">第 4 个元素的值。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``5(System.Tuple{``0,``1,``2,``3,``4},``0@,``1@,``2@,``3@,``4@)">
      <summary>将具有 5 个元素的元组解构为不同的变量。</summary>
      <param name="value">要解构为 5 个不同变量的 5 元素元组。</param>
      <param name="item1">第 1 个元素的值。</param>
      <param name="item2">第 2 个元素的值。</param>
      <param name="item3">第 3 个元素的值。</param>
      <param name="item4">第 4 个元素的值。</param>
      <param name="item5">第 5 个元素的值。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``6(System.Tuple{``0,``1,``2,``3,``4,``5},``0@,``1@,``2@,``3@,``4@,``5@)">
      <summary>将具有 6 个元素的元组解构为不同的变量。</summary>
      <param name="value">要解构为 6 个不同变量的 6 元素元组。</param>
      <param name="item1">第 1 个元素的值。</param>
      <param name="item2">第 2 个元素的值。</param>
      <param name="item3">第 3 个元素的值。</param>
      <param name="item4">第 4 个元素的值。</param>
      <param name="item5">第 5 个元素的值。</param>
      <param name="item6">第 6 个元素的值。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6},``0@,``1@,``2@,``3@,``4@,``5@,``6@)">
      <summary>将具有 7 个元素的元组解构为不同的变量。</summary>
      <param name="value">要解构为 7 个不同变量的 7 元素元组。</param>
      <param name="item1">第 1 个元素的值。</param>
      <param name="item2">第 2 个元素的值。</param>
      <param name="item3">第 3 个元素的值。</param>
      <param name="item4">第 4 个元素的值。</param>
      <param name="item5">第 5 个元素的值。</param>
      <param name="item6">第 6 个元素的值。</param>
      <param name="item7">第 7 个元素的值。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@)">
      <summary>将具有 8 个元素的元组解构为不同的变量。</summary>
      <param name="value">要解构为 8 个不同变量的 8 元素元组。</param>
      <param name="item1">第 1 个元素的值。</param>
      <param name="item2">第 2 个元素的值。</param>
      <param name="item3">第 3 个元素的值。</param>
      <param name="item4">第 4 个元素的值。</param>
      <param name="item5">第 5 个元素的值。</param>
      <param name="item6">第 6 个元素的值。</param>
      <param name="item7">第 7 个元素的值。</param>
      <param name="item8">第 8 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.Deconstruct``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}},``0@,``1@,``2@,``3@,``4@,``5@,``6@,``7@,``8@)">
      <summary>将具有 9 个元素的元组解构为不同的变量。</summary>
      <param name="value">要解构为 9 个不同变量的 9 元素元组。</param>
      <param name="item1">第 1 个元素的值。</param>
      <param name="item2">第 2 个元素的值。</param>
      <param name="item3">第 3 个元素的值。</param>
      <param name="item4">第 4 个元素的值。</param>
      <param name="item5">第 5 个元素的值。</param>
      <param name="item6">第 6 个元素的值。</param>
      <param name="item7">第 7 个元素的值。</param>
      <param name="item8">第 8 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item1" />。</param>
      <param name="item9">第 9 个元素的值，或 <paramref name="value" /><see langword=".Rest.Item2" />。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型。</typeparam>
      <typeparam name="T9">第 9 个元素的类型。</typeparam>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``1(System.ValueTuple{``0})">
      <summary>将 <see langword="ValueTuple" /> 结构的实例转换为 <see langword="Tuple" /> 类的实例。</summary>
      <param name="value">要转换为元组的值元组实例。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <returns>转换后的元组。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``10(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9}})">
      <summary>将 <see langword="ValueTuple" /> 结构的实例转换为 <see langword="Tuple" /> 类的实例。</summary>
      <param name="value">要转换为元组的值元组实例。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第 10 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <returns>转换后的元组。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``11(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10}})">
      <summary>将 <see langword="ValueTuple" /> 结构的实例转换为 <see langword="Tuple" /> 类的实例。</summary>
      <param name="value">要转换为元组的值元组实例。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第 10 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第 11 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <returns>转换后的元组。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``12(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11}})">
      <summary>将 <see langword="ValueTuple" /> 结构的实例转换为 <see langword="Tuple" /> 类的实例。</summary>
      <param name="value">要转换为元组的值元组实例。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第 10 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第 11 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第 12 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <returns>转换后的元组。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``13(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12}})">
      <summary>将 <see langword="ValueTuple" /> 结构的实例转换为 <see langword="Tuple" /> 类的实例。</summary>
      <param name="value">要转换为元组的值元组实例。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第 10 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第 11 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第 12 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第 13 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <returns>转换后的元组。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``14(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13}})">
      <summary>将 <see langword="ValueTuple" /> 结构的实例转换为 <see langword="Tuple" /> 类的实例。</summary>
      <param name="value">要转换为元组的值元组实例。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第 10 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第 11 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第 12 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第 13 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第 14 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <returns>转换后的元组。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``15(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14}}})">
      <summary>将 <see langword="ValueTuple" /> 结构的实例转换为 <see langword="Tuple" /> 类的实例。</summary>
      <param name="value">要转换为元组的值元组实例。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第 10 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第 11 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第 12 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第 13 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第 14 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <returns>转换后的元组。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``16(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15}}})">
      <summary>将 <see langword="ValueTuple" /> 结构的实例转换为 <see langword="Tuple" /> 类的实例。</summary>
      <param name="value">要转换为元组的值元组实例。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第 10 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第 11 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第 12 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第 13 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第 14 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <typeparam name="T16">第16个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item2" /></typeparam>
      <returns>转换后的元组。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``17(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16}}})">
      <summary>将 <see langword="ValueTuple" /> 结构的实例转换为 <see langword="Tuple" /> 类的实例。</summary>
      <param name="value">要转换为元组的值元组实例。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第 10 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第 11 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第 12 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第 13 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第 14 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <typeparam name="T16">第16个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item2" /></typeparam>
      <typeparam name="T17">第17个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item3" /></typeparam>
      <returns>转换后的元组。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``18(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17}}})">
      <summary>将 <see langword="ValueTuple" /> 结构的实例转换为 <see langword="Tuple" /> 类的实例。</summary>
      <param name="value">要转换为元组的值元组实例。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第 10 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第 11 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第 12 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第 13 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第 14 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <typeparam name="T16">第16个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item2" /></typeparam>
      <typeparam name="T17">第17个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item3" /></typeparam>
      <typeparam name="T18">第十八个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item4" /></typeparam>
      <returns>转换后的元组。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``19(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17,``18}}})">
      <summary>将 <see langword="ValueTuple" /> 结构的实例转换为 <see langword="Tuple" /> 类的实例。</summary>
      <param name="value">要转换为元组的值元组实例。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第 10 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第 11 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第 12 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第 13 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第 14 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <typeparam name="T16">第16个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item2" /></typeparam>
      <typeparam name="T17">第17个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item3" /></typeparam>
      <typeparam name="T18">第十八个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item4" /></typeparam>
      <typeparam name="T19">第19个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item5" /></typeparam>
      <returns>转换后的元组。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``2(System.ValueTuple{``0,``1})">
      <summary>将 <see langword="ValueTuple" /> 结构的实例转换为 <see langword="Tuple" /> 类的实例。</summary>
      <param name="value">要转换为元组的值元组实例。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <returns>转换后的元组。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``20(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17,``18,``19}}})">
      <summary>将 <see langword="ValueTuple" /> 结构的实例转换为 <see langword="Tuple" /> 类的实例。</summary>
      <param name="value">要转换为元组的值元组实例。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第 10 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第 11 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第 12 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第 13 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第 14 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <typeparam name="T16">第16个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item2" /></typeparam>
      <typeparam name="T17">第17个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item3" /></typeparam>
      <typeparam name="T18">第十八个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item4" /></typeparam>
      <typeparam name="T19">第19个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item5" /></typeparam>
      <typeparam name="T20">第20个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item6" /></typeparam>
      <returns>转换后的元组。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``21(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8,``9,``10,``11,``12,``13,System.ValueTuple{``14,``15,``16,``17,``18,``19,``20}}})">
      <summary>将 <see langword="ValueTuple" /> 结构的实例转换为 <see langword="Tuple" /> 类的实例。</summary>
      <param name="value">要转换为元组的值元组实例。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第 10 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第 11 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第 12 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第 13 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第 14 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <typeparam name="T16">第16个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item2" /></typeparam>
      <typeparam name="T17">第17个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item3" /></typeparam>
      <typeparam name="T18">第十八个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item4" /></typeparam>
      <typeparam name="T19">第19个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item5" /></typeparam>
      <typeparam name="T20">第20个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item6" /></typeparam>
      <typeparam name="T21">第20个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item7" /></typeparam>
      <returns>转换后的元组。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``3(System.ValueTuple{``0,``1,``2})">
      <summary>将 <see langword="ValueTuple" /> 结构的实例转换为 <see langword="Tuple" /> 类的实例。</summary>
      <param name="value">要转换为元组的值元组实例。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <returns>转换后的元组。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``4(System.ValueTuple{``0,``1,``2,``3})">
      <summary>将 <see langword="ValueTuple" /> 结构的实例转换为 <see langword="Tuple" /> 类的实例。</summary>
      <param name="value">要转换为元组的值元组实例。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <returns>转换后的元组。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``5(System.ValueTuple{``0,``1,``2,``3,``4})">
      <summary>将 <see langword="ValueTuple" /> 结构的实例转换为 <see langword="Tuple" /> 类的实例。</summary>
      <param name="value">要转换为元组的值元组实例。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <returns>转换后的元组。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``6(System.ValueTuple{``0,``1,``2,``3,``4,``5})">
      <summary>将 <see langword="ValueTuple" /> 结构的实例转换为 <see langword="Tuple" /> 类的实例。</summary>
      <param name="value">要转换为元组的值元组实例。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <returns>转换后的元组。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``7(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6})">
      <summary>将 <see langword="ValueTuple" /> 结构的实例转换为 <see langword="Tuple" /> 类的实例。</summary>
      <param name="value">要转换为元组的值元组实例。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <returns>转换后的元组。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``8(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7}})">
      <summary>将 <see langword="ValueTuple" /> 结构的实例转换为 <see langword="Tuple" /> 类的实例。</summary>
      <param name="value">要转换为元组的值元组实例。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <returns>转换后的元组。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToTuple``9(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,System.ValueTuple{``7,``8}})">
      <summary>将 <see langword="ValueTuple" /> 结构的实例转换为 <see langword="Tuple" /> 类的实例。</summary>
      <param name="value">要转换为元组的值元组实例。</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <returns>转换后的元组。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``1(System.Tuple{``0})">
      <summary>将 <see langword="Tuple" /> 类的实例转换为 <see langword="ValueTuple" /> 结构的实例。</summary>
      <param name="value">要转换为值元组的元组对象</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <returns>转换后的值元组实例。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``10(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9}})">
      <summary>将 <see langword="Tuple" /> 类的实例转换为 <see langword="ValueTuple" /> 结构的实例。</summary>
      <param name="value">要转换为值元组的元组对象</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第 10 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <returns>转换后的值元组实例。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``11(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10}})">
      <summary>将 <see langword="Tuple" /> 类的实例转换为 <see langword="ValueTuple" /> 结构的实例。</summary>
      <param name="value">要转换为值元组的元组对象</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第 10 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第 11 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <returns>转换后的值元组实例。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``12(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11}})">
      <summary>将 <see langword="Tuple" /> 类的实例转换为 <see langword="ValueTuple" /> 结构的实例。</summary>
      <param name="value">要转换为值元组的元组对象</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第 10 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第 11 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第 12 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <returns>转换后的值元组实例。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``13(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12}})">
      <summary>将 <see langword="Tuple" /> 类的实例转换为 <see langword="ValueTuple" /> 结构的实例。</summary>
      <param name="value">要转换为值元组的元组对象</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第 10 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第 11 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第 12 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第 13 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <returns>转换后的值元组实例。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``14(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13}})">
      <summary>将 <see langword="Tuple" /> 类的实例转换为 <see langword="ValueTuple" /> 结构的实例。</summary>
      <param name="value">要转换为值元组的元组对象</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第 10 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第 11 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第 12 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第 13 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第 14 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <returns>转换后的值元组实例。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``15(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14}}})">
      <summary>将 <see langword="Tuple" /> 类的实例转换为 <see langword="ValueTuple" /> 结构的实例。</summary>
      <param name="value">要转换为值元组的元组对象</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第 10 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第 11 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第 12 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第 13 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第 14 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <returns>转换后的值元组实例。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``16(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15}}})">
      <summary>将 <see langword="Tuple" /> 类的实例转换为 <see langword="ValueTuple" /> 结构的实例。</summary>
      <param name="value">要转换为值元组的元组对象</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第 10 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第 11 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第 12 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第 13 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第 14 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <typeparam name="T16">第16个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item2" /></typeparam>
      <returns>转换后的值元组实例。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``17(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16}}})">
      <summary>将 <see langword="Tuple" /> 类的实例转换为 <see langword="ValueTuple" /> 结构的实例。</summary>
      <param name="value">要转换为值元组的元组对象</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第 10 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第 11 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第 12 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第 13 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第 14 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <typeparam name="T16">第16个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item2" /></typeparam>
      <typeparam name="T17">第17个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item3" /></typeparam>
      <returns>转换后的值元组实例。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``18(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17}}})">
      <summary>将 <see langword="Tuple" /> 类的实例转换为 <see langword="ValueTuple" /> 结构的实例。</summary>
      <param name="value">要转换为值元组的元组对象</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第 10 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第 11 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第 12 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第 13 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第 14 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <typeparam name="T16">第16个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item2" /></typeparam>
      <typeparam name="T17">第17个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item3" /></typeparam>
      <typeparam name="T18">第十八个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item4" /></typeparam>
      <returns>转换后的值元组实例。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``19(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18}}})">
      <summary>将 <see langword="Tuple" /> 类的实例转换为 <see langword="ValueTuple" /> 结构的实例。</summary>
      <param name="value">要转换为值元组的元组对象</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第 10 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第 11 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第 12 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第 13 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第 14 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <typeparam name="T16">第16个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item2" /></typeparam>
      <typeparam name="T17">第17个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item3" /></typeparam>
      <typeparam name="T18">第十八个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item4" /></typeparam>
      <typeparam name="T19">第19个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item5" /></typeparam>
      <returns>转换后的值元组实例。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``2(System.Tuple{``0,``1})">
      <summary>将 <see langword="Tuple" /> 类的实例转换为 <see langword="ValueTuple" /> 结构的实例。</summary>
      <param name="value">要转换为值元组的元组对象</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <returns>转换后的值元组实例。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``20(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19}}})">
      <summary>将 <see langword="Tuple" /> 类的实例转换为 <see langword="ValueTuple" /> 结构的实例。</summary>
      <param name="value">要转换为值元组的元组对象</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第 10 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第 11 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第 12 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第 13 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第 14 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <typeparam name="T16">第16个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item2" /></typeparam>
      <typeparam name="T17">第17个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item3" /></typeparam>
      <typeparam name="T18">第十八个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item4" /></typeparam>
      <typeparam name="T19">第19个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item5" /></typeparam>
      <typeparam name="T20">第20个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item6" /></typeparam>
      <returns>转换后的值元组实例。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``21(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8,``9,``10,``11,``12,``13,System.Tuple{``14,``15,``16,``17,``18,``19,``20}}})">
      <summary>将 <see langword="Tuple" /> 类的实例转换为 <see langword="ValueTuple" /> 结构的实例。</summary>
      <param name="value">要转换为值元组的元组对象</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <typeparam name="T10">第 10 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item3" />。</typeparam>
      <typeparam name="T11">第 11 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item4" />。</typeparam>
      <typeparam name="T12">第 12 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item5" />。</typeparam>
      <typeparam name="T13">第 13 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item6" />。</typeparam>
      <typeparam name="T14">第 14 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item7" />。</typeparam>
      <typeparam name="T15">第十五个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item1" /></typeparam>
      <typeparam name="T16">第16个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item2" /></typeparam>
      <typeparam name="T17">第17个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item3" /></typeparam>
      <typeparam name="T18">第十八个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item4" /></typeparam>
      <typeparam name="T19">第19个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item5" /></typeparam>
      <typeparam name="T20">第20个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item6" /></typeparam>
      <typeparam name="T21">第20个元素的类型, 或<paramref name="value" />。 <see langword=".Rest.Rest.Item7" /></typeparam>
      <returns>转换后的值元组实例。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``3(System.Tuple{``0,``1,``2})">
      <summary>将 <see langword="Tuple" /> 类的实例转换为 <see langword="ValueTuple" /> 结构的实例。</summary>
      <param name="value">要转换为值元组的元组对象</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <returns>转换后的值元组实例。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``4(System.Tuple{``0,``1,``2,``3})">
      <summary>将 <see langword="Tuple" /> 类的实例转换为 <see langword="ValueTuple" /> 结构的实例。</summary>
      <param name="value">要转换为值元组的元组对象</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <returns>转换后的值元组实例。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``5(System.Tuple{``0,``1,``2,``3,``4})">
      <summary>将 <see langword="Tuple" /> 类的实例转换为 <see langword="ValueTuple" /> 结构的实例。</summary>
      <param name="value">要转换为值元组的元组对象</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <returns>转换后的值元组实例。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
      <summary>将 <see langword="Tuple" /> 类的实例转换为 <see langword="ValueTuple" /> 结构的实例。</summary>
      <param name="value">要转换为值元组的元组对象</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <returns>转换后的值元组实例。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
      <summary>将 <see langword="Tuple" /> 类的实例转换为 <see langword="ValueTuple" /> 结构的实例。</summary>
      <param name="value">要转换为值元组的元组对象</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <returns>转换后的值元组实例。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7}})">
      <summary>将 <see langword="Tuple" /> 类的实例转换为 <see langword="ValueTuple" /> 结构的实例。</summary>
      <param name="value">要转换为值元组的元组对象</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <returns>转换后的值元组实例。</returns>
    </member>
    <member name="M:System.TupleExtensions.ToValueTuple``9(System.Tuple{``0,``1,``2,``3,``4,``5,``6,System.Tuple{``7,``8}})">
      <summary>将 <see langword="Tuple" /> 类的实例转换为 <see langword="ValueTuple" /> 结构的实例。</summary>
      <param name="value">要转换为值元组的元组对象</param>
      <typeparam name="T1">第 1 个元素的类型。</typeparam>
      <typeparam name="T2">第 2 个元素的类型。</typeparam>
      <typeparam name="T3">第 3 个元素的类型。</typeparam>
      <typeparam name="T4">第 4 个元素的类型。</typeparam>
      <typeparam name="T5">第 5 个元素的类型。</typeparam>
      <typeparam name="T6">第 6 个元素的类型。</typeparam>
      <typeparam name="T7">第 7 个元素的类型。</typeparam>
      <typeparam name="T8">第 8 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item1" />。</typeparam>
      <typeparam name="T9">第 9 个元素的类型，或 <paramref name="value" /><see langword=".Rest.Item2" />。</typeparam>
      <returns>转换后的值元组实例。</returns>
    </member>
    <member name="T:System.Type">
      <summary>表示类型声明：类类型、接口类型、数组类型、值类型、枚举类型、类型参数、泛型类型定义，以及开放或封闭构造的泛型类型。</summary>
    </member>
    <member name="M:System.Type.#ctor">
      <summary>初始化 <see cref="T:System.Type" /> 类的新实例。</summary>
    </member>
    <member name="P:System.Type.Assembly">
      <summary>获取在其中声明该类型的 <see cref="T:System.Reflection.Assembly" />。 对于泛型类型，则获取在其中定义该泛型类型的 <see cref="T:System.Reflection.Assembly" />。</summary>
      <returns>描述包含当前类型的程序集的 <see cref="T:System.Reflection.Assembly" /> 实例。 对于泛型类型，该实例描述包含泛型类型定义的程序集，而不是创建和使用特定构造类型的程序集。</returns>
    </member>
    <member name="P:System.Type.AssemblyQualifiedName">
      <summary>获取类型的程序集限定名，其中包括从中加载 <see cref="T:System.Type" /> 的程序集的名称。</summary>
      <returns>
        <see cref="T:System.Type" /> 的程序集限定名，其中包括从中加载 <see cref="T:System.Type" /> 的程序集的名称；或者为 <see langword="null" />（如果当前实例表示泛型类型参数）。</returns>
    </member>
    <member name="P:System.Type.Attributes">
      <summary>获取与 <see cref="T:System.Type" /> 关联的属性。</summary>
      <returns>表示 <see cref="T:System.Reflection.TypeAttributes" /> 的属性集的 <see cref="T:System.Type" /> 对象，除非 <see cref="T:System.Type" /> 表示泛型类型形参，在此情况下该值未指定。</returns>
    </member>
    <member name="P:System.Type.BaseType">
      <summary>获取当前 <see cref="T:System.Type" /> 直接从中继承的类型。</summary>
      <returns>当前 <see cref="T:System.Type" /> 直接从中继承的 <see cref="T:System.Type" />；或者如果当前 <see langword="null" /> 表示 <see langword="Type" /> 类或一个接口，则为 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Type.ContainsGenericParameters">
      <summary>获取一个值，该值指示当前 <see cref="T:System.Type" /> 对象是否具有尚未被特定类型替代的类型参数。</summary>
      <returns>如果 <see langword="true" /> 对象本身是泛型类型形参或者具有尚未提供特定类型的类型形参，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.DeclaringMethod">
      <summary>获取一个表示声明方法的 <see cref="T:System.Reflection.MethodBase" />（如果当前 <see cref="T:System.Type" /> 表示泛型方法的一个类型参数）。</summary>
      <returns>如果当前 <see cref="T:System.Type" /> 表示泛型方法的一个类型参数，则为一个表示声明方法的 <see cref="T:System.Reflection.MethodBase" />；否则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Type.DeclaringType">
      <summary>获取用来声明当前的嵌套类型或泛型类型参数的类型。</summary>
      <returns>如果当前的类型是嵌套类型，则为表示封闭类型的 <see cref="T:System.Type" /> 对象；如果当前的类型是泛型类型的类型参数，则为泛型类型的定义；如果当前的类型是泛型方法的类型参数，则为用来声明泛型方法的类型；否则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Type.DefaultBinder">
      <summary>获取默认联编程序的引用，该程序实现的内部规则用于选择由 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 调用的合适成员。</summary>
      <returns>系统使用的默认联编程序的引用。</returns>
    </member>
    <member name="F:System.Type.Delimiter">
      <summary>分隔 <see cref="T:System.Type" /> 的命名空间中的名称。 此字段为只读。</summary>
    </member>
    <member name="F:System.Type.EmptyTypes">
      <summary>表示 <see cref="T:System.Type" /> 类型的空数组。 此字段为只读。</summary>
    </member>
    <member name="M:System.Type.Equals(System.Object)">
      <summary>确定当前 <see cref="T:System.Type" /> 的基础系统类型是否与指定 <see cref="T:System.Object" /> 的基础系统类型相同。</summary>
      <param name="o">该对象，其基础系统类型将与当前 <see cref="T:System.Type" /> 的基础系统类型相比较。 为了使比较成功，<paramref name="o" /> 必须能够被强制转换或转换为类型 <see cref="T:System.Type" /> 的一个对象。</param>
      <returns>如果 <see langword="true" /> 的基础系统类型与当前 <paramref name="o" /> 的基础系统类型相同，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。 如果 ：此方法也会返回 <see langword="false" />。  

<paramref name="o" /> 为 <see langword="null" />。  

<paramref name="o" /> 不能强制转换或转换为 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.Type.Equals(System.Type)">
      <summary>确定当前 <see cref="T:System.Type" /> 的基础系统类型是否与指定 <see cref="T:System.Type" /> 的基础系统类型相同。</summary>
      <param name="o">该对象，其基础系统类型将与当前 <see cref="T:System.Type" /> 的基础系统类型相比较。</param>
      <returns>如果 <see langword="true" /> 的基础系统类型与当前 <paramref name="o" /> 的基础系统类型相同，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.Type.FilterAttribute">
      <summary>表示用在特性上的成员筛选器。 此字段为只读。</summary>
    </member>
    <member name="F:System.Type.FilterName">
      <summary>表示用于名称的区分大小写的成员筛选器。 此字段为只读。</summary>
    </member>
    <member name="F:System.Type.FilterNameIgnoreCase">
      <summary>表示用于名称的不区分大小写的成员筛选器。 此字段为只读。</summary>
    </member>
    <member name="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)">
      <summary>返回表示接口（由当前 <see cref="T:System.Type" /> 所实现或继承）的筛选列表的 <see cref="T:System.Type" /> 对象数组。</summary>
      <param name="filter">对照 <paramref name="filterCriteria" /> 比较接口的委托。</param>
      <param name="filterCriteria">确定接口是否应包括在返回数组中的搜索判据。</param>
      <returns>一个 <see cref="T:System.Type" /> 对象的数组，它表示由当前 <see cref="T:System.Type" /> 实现或继承的接口的已筛选的列表；如果当前 <see cref="T:System.Type" /> 未实现或继承与筛选器相匹配的接口，则为空数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">调用静态初始值设定项时引发了异常。</exception>
    </member>
    <member name="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)">
      <summary>返回指定成员类型的 <see cref="T:System.Reflection.MemberInfo" /> 对象的筛选数组。</summary>
      <param name="memberType">枚举值的按位组合，它指示要搜索的成员的类型。</param>
      <param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。  
或 
 若为 <see cref="F:System.Reflection.BindingFlags.Default" />，则返回 <see langword="null" />。</param>
      <param name="filter">执行比较的委托，如果当前被检查的成员匹配 <see langword="true" />，则返回 <paramref name="filterCriteria" />；否则返回 <see langword="false" />。</param>
      <param name="filterCriteria">确定成员是否在 <see langword="MemberInfo" /> 对象数组中返回的搜索判据。  
<see langword="FieldAttributes" />、<see langword="MethodAttributes" /> 和 <see langword="MethodImplAttributes" /> 的字段可以和该类提供的 <see langword="FilterAttribute" /> 委托一起使用。</param>
      <returns>指定成员类型的 <see cref="T:System.Reflection.MemberInfo" /> 对象的筛选数组。  
或 
如果当前 <see cref="T:System.Type" /> 没有与筛选条件相匹配的 <paramref name="memberType" /> 类型的成员，则为空数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filter" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Type.FullName">
      <summary>获取该类型的完全限定名称，包括其命名空间，但不包括程序集。</summary>
      <returns>该类型的完全限定名，包括其命名空间，但不包括程序集；如果当前实例表示泛型类型参数、数组类型、指针类型或基于类型参数的 <see langword="null" /> 类型，或表示不属于泛型类型定义但包含无法解析的类型参数的泛型类型，则为 <see langword="byref" />。</returns>
    </member>
    <member name="P:System.Type.GenericParameterAttributes">
      <summary>获取描述当前泛型类型参数的协变和特殊约束的 <see cref="T:System.Reflection.GenericParameterAttributes" /> 标志。</summary>
      <returns>
        <see cref="T:System.Reflection.GenericParameterAttributes" /> 值的按位组合，用于描述当前泛型类型参数的协变和特殊约束。</returns>
      <exception cref="T:System.InvalidOperationException">当前 <see cref="T:System.Type" /> 对象不是泛型类型参数。 也就是说，<see cref="P:System.Type.IsGenericParameter" /> 属性将返回 <see langword="false" />。</exception>
      <exception cref="T:System.NotSupportedException">基类不支持调用的方法。</exception>
    </member>
    <member name="P:System.Type.GenericParameterPosition">
      <summary>当 <see cref="T:System.Type" /> 对象表示泛型类型或泛型方法的类型参数时，获取类型参数在声明它的泛型类型或方法的类型参数列表中的位置。</summary>
      <returns>类型参数在定义它的泛型类型或方法的类型参数列表中的位置。 位置编号从 0 开始。</returns>
      <exception cref="T:System.InvalidOperationException">当前的类型不表示类型参数。 也就是说，<see cref="P:System.Type.IsGenericParameter" /> 返回 <see langword="false" />。</exception>
    </member>
    <member name="P:System.Type.GenericTypeArguments">
      <summary>获取此类型泛型类型参数的数组。</summary>
      <returns>此类型的泛型类型参数的数组。</returns>
    </member>
    <member name="M:System.Type.GetArrayRank">
      <summary>获取数组中的维数。</summary>
      <returns>包含当前类型中维数的整数。</returns>
      <exception cref="T:System.NotSupportedException">此方法的功能在基类中不受支持，并且必须改为在派生类中实现。</exception>
      <exception cref="T:System.ArgumentException">当前类型不是数组。</exception>
    </member>
    <member name="M:System.Type.GetAttributeFlagsImpl">
      <summary>在派生类中重写时，实现 <see cref="P:System.Type.Attributes" /> 属性，并获取枚举值的按位组合（它指示与 <see cref="T:System.Type" /> 关联的特性）。</summary>
      <returns>表示 <see cref="T:System.Reflection.TypeAttributes" /> 的属性集的 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>用指定绑定约束和指定调用约定，搜索其参数与指定参数类型及修饰符匹配的构造函数。</summary>
      <param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。  

或 - 
若为 <see cref="F:System.Reflection.BindingFlags.Default" />，则返回 <see langword="null" />。</param>
      <param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。  
或 
要使用 <see langword="Nothing" /> 的空引用（在 Visual Basic 中为 <see cref="P:System.Type.DefaultBinder" />）。</param>
      <param name="callConvention">对象，用于指定要使用的一套规则，这些规则涉及参数的顺序和布局、传递返回值的方式、用于参数的寄存器和清理堆栈的方式。</param>
      <param name="types">
        <see cref="T:System.Type" /> 对象的数组，表示构造函数要获取的参数的个数、顺序和类型。  

或 - 
获取不使用参数的构造函数的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="types" /> 数组中的相应元素关联的特性。 默认的联编程序不处理此参数。</param>
      <returns>表示符合指定要求的构造函数的对象（如果找到的话）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> 为 <see langword="null" />。  

或 - 
<paramref name="types" /> 的其中一个元素为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多维的。  

或 - 
<paramref name="modifiers" /> 是多维的。  

或 
 <paramref name="types" /> 和 <paramref name="modifiers" /> 的长度不相同。</exception>
    </member>
    <member name="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>使用指定绑定约束搜索其参数与指定自变量类型和修饰符匹配的构造函数。</summary>
      <param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。  

或 - 
若为 <see cref="F:System.Reflection.BindingFlags.Default" />，则返回 <see langword="null" />。</param>
      <param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。  
或 
要使用 <see langword="Nothing" /> 的空引用（在 Visual Basic 中为 <see cref="P:System.Type.DefaultBinder" />）。</param>
      <param name="types">
        <see cref="T:System.Type" /> 对象的数组，表示构造函数要获取的参数的个数、顺序和类型。  
或 
获取不使用参数的构造函数的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。  

或 - 
<see cref="F:System.Type.EmptyTypes" />。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与参数类型数组中的相应元素关联的特性。 默认的联编程序不处理此参数。</param>
      <returns>表示符合指定需求的构造函数的 <see cref="T:System.Reflection.ConstructorInfo" /> 对象（如果找到的话）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> 为 <see langword="null" />。  
或 
<paramref name="types" /> 的其中一个元素为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多维的。  

或 - 
<paramref name="modifiers" /> 是多维的。  

或 
 <paramref name="types" /> 和 <paramref name="modifiers" /> 的长度不相同。</exception>
    </member>
    <member name="M:System.Type.GetConstructor(System.Type[])">
      <summary>搜索其参数与指定数组中的类型匹配的公共实例构造函数。</summary>
      <param name="types">表示需要的构造函数的参数个数、顺序和类型的 <see cref="T:System.Type" /> 对象的数组。  
或 
<see cref="T:System.Type" /> 对象的空数组，用于获取不带参数的构造函数。 这样的空数组由 <see langword="static" /> 字段 <see cref="F:System.Type.EmptyTypes" /> 提供。</param>
      <returns>为表示某个公共实例构造函数（该构造函数的参数与参数类型数组中的类型匹配）的对象（如果找到的话）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> 为 <see langword="null" />。  
或 
<paramref name="types" /> 的其中一个元素为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多维的。</exception>
    </member>
    <member name="M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>当在派生类中重写时，使用指定的绑定约束和指定的调用约定搜索其参数与指定的自变量类型和修饰符匹配的构造函数。</summary>
      <param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。  

或 - 
若为 <see cref="F:System.Reflection.BindingFlags.Default" />，则返回 <see langword="null" />。</param>
      <param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。  
或 
要使用 <see langword="Nothing" /> 的空引用（在 Visual Basic 中为 <see cref="P:System.Type.DefaultBinder" />）。</param>
      <param name="callConvention">对象，用于指定要使用的一套规则，这些规则涉及参数的顺序和布局、传递返回值的方式、用于参数的寄存器和清理堆栈的方式。</param>
      <param name="types">
        <see cref="T:System.Type" /> 对象的数组，表示构造函数要获取的参数的个数、顺序和类型。  
或 
获取不使用参数的构造函数的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="types" /> 数组中的相应元素关联的特性。 默认的联编程序不处理此参数。</param>
      <returns>表示符合指定需求的构造函数的 <see cref="T:System.Reflection.ConstructorInfo" /> 对象（如果找到的话）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="types" /> 为 <see langword="null" />。  
或 
<paramref name="types" /> 的其中一个元素为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多维的。  
或 
 <paramref name="modifiers" /> 是多维的。  
或 
 <paramref name="types" /> 和 <paramref name="modifiers" /> 的长度不相同。</exception>
      <exception cref="T:System.NotSupportedException">当前的类型是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 或 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />。</exception>
    </member>
    <member name="M:System.Type.GetConstructors">
      <summary>返回为当前 <see cref="T:System.Type" /> 定义的所有公共构造函数。</summary>
      <returns>
        <see cref="T:System.Reflection.ConstructorInfo" /> 对象的数组，表示当前 <see cref="T:System.Type" /> 定义的所有公共实例构造函数，但不包括类型初始值设定项（静态构造函数）。 如果没有为当前 <see cref="T:System.Type" /> 定义公共实例构造函数，或者当前 <see cref="T:System.Type" /> 表示泛型类型或泛型方法的定义中的类型参数，则返回 <see cref="T:System.Reflection.ConstructorInfo" /> 类型的空数组。</returns>
    </member>
    <member name="M:System.Type.GetConstructors(System.Reflection.BindingFlags)">
      <summary>当在派生类中重写时，使用指定 <see cref="T:System.Type" /> 搜索为当前 <see langword="BindingFlags" /> 定义的构造函数。</summary>
      <param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。  

或 - 
若为 <see cref="F:System.Reflection.BindingFlags.Default" />，则返回空数组。</param>
      <returns>表示为当前 <see cref="T:System.Reflection.ConstructorInfo" /> 定义的匹配指定绑定约束的所有构造函数的 <see cref="T:System.Type" /> 对象数组，包括类型初始值设定项（如果定义的话）。 如果当前 <see cref="T:System.Reflection.ConstructorInfo" /> 没有定义构造函数，或者定义的构造函数都不符合绑定约束，或者当前 <see cref="T:System.Type" /> 表示泛型类型或泛型方法定义的类型参数，则返回 <see cref="T:System.Type" /> 类型的空数组。</returns>
    </member>
    <member name="M:System.Type.GetDefaultMembers">
      <summary>搜索为设置了 <see cref="T:System.Type" /> 的当前 <see cref="T:System.Reflection.DefaultMemberAttribute" /> 定义的成员。</summary>
      <returns>表示当前 <see cref="T:System.Reflection.MemberInfo" /> 的所有默认成员的 <see cref="T:System.Type" /> 对象数组。  
或 
如果当前 <see cref="T:System.Reflection.MemberInfo" /> 没有默认成员，则为 <see cref="T:System.Type" /> 类型的空数组。</returns>
    </member>
    <member name="M:System.Type.GetElementType">
      <summary>当在派生类中重写时，返回当前数组、指针或引用类型包含的或引用的对象的 <see cref="T:System.Type" />。</summary>
      <returns>当前数组、指针或引用类型包含或引用的对象的 <see cref="T:System.Type" />；如果当前 <see langword="null" /> 不是数组或指针，不是按引用传递，或者表示泛型类型或泛型方法的定义中的泛型类型或类型参数，则为 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Type.GetEnumName(System.Object)">
      <summary>返回当前枚举类型中具有指定值的常数的名称。</summary>
      <param name="value">要检索其名称的值。</param>
      <returns>当前枚举类型中具有指定值的成员的名称；如果未找到这样的常数，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">当前类型不是一个枚举。  
或 
 <paramref name="value" /> 既不是当前类型，也不具有与当前类型相同的基础类型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetEnumNames">
      <summary>返回当前枚举类型中各个成员的名称。</summary>
      <returns>一个数组，其中包含枚举中各个成员的名称。</returns>
      <exception cref="T:System.ArgumentException">当前类型不是一个枚举。</exception>
    </member>
    <member name="M:System.Type.GetEnumUnderlyingType">
      <summary>返回当前枚举类型的基础类型。</summary>
      <returns>当前枚举的基础类型。</returns>
      <exception cref="T:System.ArgumentException">当前类型不是一个枚举。  

或 -  

 枚举类型无效，因为它包含多个实例字段。</exception>
    </member>
    <member name="M:System.Type.GetEnumValues">
      <summary>返回当前枚举类型中各个常数的值组成的数组。</summary>
      <returns>包含值的数组。 该数组的元素按枚举常量的二进制值（无符号值）排序。</returns>
      <exception cref="T:System.ArgumentException">当前类型不是一个枚举。</exception>
    </member>
    <member name="M:System.Type.GetEvent(System.String)">
      <summary>返回表示指定的公共事件的 <see cref="T:System.Reflection.EventInfo" /> 对象。</summary>
      <param name="name">该字符串包含事件名称，该事件是由当前 <see cref="T:System.Type" /> 声明或继承的。</param>
      <returns>如找到，则为表示由当前 <see cref="T:System.Type" /> 声明或继承的指定公共事件的对象；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>当在派生类中重写时，使用指定绑定约束，返回表示指定事件的 <see cref="T:System.Reflection.EventInfo" /> 对象。</summary>
      <param name="name">字符串包含由当前的 <see cref="T:System.Type" /> 声明或继承的事件的名称。</param>
      <param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。  
或 
 若为 <see cref="F:System.Reflection.BindingFlags.Default" />，则返回 <see langword="null" />。</param>
      <returns>如找到，则为表示由当前 <see cref="T:System.Type" /> 声明或继承的指定公共事件的对象；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetEvents">
      <summary>返回由当前 <see cref="T:System.Type" /> 声明或继承的所有公共事件。</summary>
      <returns>表示由当前 <see cref="T:System.Reflection.EventInfo" /> 声明或继承的所有公共事件的 <see cref="T:System.Type" /> 对象数组。  
或 
如果当前 <see cref="T:System.Reflection.EventInfo" /> 没有默认成员，则为 <see cref="T:System.Type" /> 类型的空数组。</returns>
    </member>
    <member name="M:System.Type.GetEvents(System.Reflection.BindingFlags)">
      <summary>当在派生类中重写时，使用指定绑定约束，搜索由当前 <see cref="T:System.Type" /> 声明或继承的事件。</summary>
      <param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。

或 -

 若为 <see cref="F:System.Reflection.BindingFlags.Default" />，则返回空数组。</param>
      <returns>
        <see cref="T:System.Reflection.EventInfo" /> 对象的数组，表示当前 <see cref="T:System.Type" /> 所声明或继承的与指定绑定约束匹配的所有事件。  

或 - 
如果当前 <see cref="T:System.Reflection.EventInfo" /> 没有事件，或者如果没有一个事件匹配绑定约束，则为 <see cref="T:System.Type" /> 类型的空数组。</returns>
    </member>
    <member name="M:System.Type.GetField(System.String)">
      <summary>搜索具有指定名称的公共字段。</summary>
      <param name="name">包含要获取的数据字段的名称的字符串。</param>
      <returns>如找到，则为表示具有指定名称的公共字段的对象；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">此 <see cref="T:System.Type" /> 对象是尚未调用其 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法的 <see cref="T:System.Reflection.Emit.TypeBuilder" />。</exception>
    </member>
    <member name="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>使用指定绑定约束搜索指定字段。</summary>
      <param name="name">包含要获取的数据字段的名称的字符串。</param>
      <param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。  
或 
 若为 <see cref="F:System.Reflection.BindingFlags.Default" />，则返回 <see langword="null" />。</param>
      <returns>表示符合指定需求的字段的对象（如果找到的话）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetFields">
      <summary>返回当前 <see cref="T:System.Type" /> 的所有公共字段。</summary>
      <returns>表示为当前 <see cref="T:System.Reflection.FieldInfo" /> 定义的所有公共字段的 <see cref="T:System.Type" /> 对象数组。  
或 
如果没有为当前 <see cref="T:System.Reflection.FieldInfo" /> 定义的公共字段，则为 <see cref="T:System.Type" /> 类型的空数组。</returns>
    </member>
    <member name="M:System.Type.GetFields(System.Reflection.BindingFlags)">
      <summary>当在派生类中重写时，使用指定绑定约束，搜索为当前 <see cref="T:System.Type" /> 定义的字段。</summary>
      <param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。
或
 若为 <see cref="F:System.Reflection.BindingFlags.Default" />，则返回空数组。</param>
      <returns>表示为当前 <see cref="T:System.Reflection.FieldInfo" /> 定义的匹配指定绑定约束的所有字段的 <see cref="T:System.Type" /> 对象数组。  
或 
如果没有为当前 <see cref="T:System.Reflection.FieldInfo" /> 定义的字段，或者如果没有一个定义的字段匹配绑定约束，则为 <see cref="T:System.Type" /> 类型的空数组。</returns>
    </member>
    <member name="M:System.Type.GetGenericArguments">
      <summary>返回表示封闭式泛型类型的类型参数或泛型类型定义的类型参数的 <see cref="T:System.Type" /> 对象的数组。</summary>
      <returns>表示泛型类型的类型实参的 <see cref="T:System.Type" /> 对象的数组。 如果当前类型不是泛型类型，则返回一个空数组。</returns>
      <exception cref="T:System.NotSupportedException">基类不支持调用的方法。 派生类必须提供一个实现。</exception>
    </member>
    <member name="M:System.Type.GetGenericParameterConstraints">
      <summary>返回表示当前泛型类型参数约束的 <see cref="T:System.Type" /> 对象的数组。</summary>
      <returns>表示当前泛型类型参数上的约束的 <see cref="T:System.Type" /> 对象的数组。</returns>
      <exception cref="T:System.InvalidOperationException">当前 <see cref="T:System.Type" /> 对象不是泛型类型参数。 也就是说，<see cref="P:System.Type.IsGenericParameter" /> 属性将返回 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Type.GetGenericTypeDefinition">
      <summary>返回一个表示可用于构造当前泛型类型的泛型类型定义的 <see cref="T:System.Type" /> 对象。</summary>
      <returns>表示可用于构造当前类型的泛型类型的 <see cref="T:System.Type" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">当前类型不是泛型类型。  也就是说，<see cref="P:System.Type.IsGenericType" /> 返回 <see langword="false" />。</exception>
      <exception cref="T:System.NotSupportedException">基类不支持调用的方法。 派生类必须提供一个实现。</exception>
    </member>
    <member name="M:System.Type.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Type.GetInterface(System.String)">
      <summary>搜索具有指定名称的接口。</summary>
      <param name="name">包含要获取的接口名称的字符串。 对于泛型接口，这是重整名称。</param>
      <returns>表示具有指定名称且由当前的 <see cref="T:System.Type" /> 实现或继承的接口的对象（如果找到的话）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">当前 <see cref="T:System.Type" /> 表示实现具有不同类型参数的相同泛型接口的类型。</exception>
    </member>
    <member name="M:System.Type.GetInterface(System.String,System.Boolean)">
      <summary>当在派生类中重写时，搜索指定的接口，指定是否要对接口名称执行不区分大小写的搜索。</summary>
      <param name="name">包含要获取的接口名称的字符串。 对于泛型接口，这是重整名称。</param>
      <param name="ignoreCase">
        <see langword="true" /> 表示对于用来指定简单接口名称的 <paramref name="name" /> 部分（该部分指定命名空间大小写必须正确）忽略其大小写。  
或 
<see langword="false" /> 表示对 <paramref name="name" /> 的所有部分执行区分大小写的搜索。</param>
      <returns>表示具有指定名称且由当前的 <see cref="T:System.Type" /> 实现或继承的接口的对象（如果找到的话）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">当前 <see cref="T:System.Type" /> 表示实现具有不同类型参数的相同泛型接口的类型。</exception>
    </member>
    <member name="M:System.Type.GetInterfaceMap(System.Type)">
      <summary>返回指定接口类型的接口映射。</summary>
      <param name="interfaceType">要检索其映射的接口类型。</param>
      <returns>表示 <paramref name="interfaceType" /> 的接口映射的对象。</returns>
      <exception cref="T:System.ArgumentException">当前类型未实现 <paramref name="interfaceType" />。  
或 
<paramref name="interfaceType" /> 参数未引用接口。  
或
当前实例或 <paramref name="interfaceType" /> 参数是开放式泛型类型；即，<see cref="P:System.Type.ContainsGenericParameters" /> 属性将返回 <see langword="true" />。

或 -

 <paramref name="interfaceType" /> 是一个泛型接口，而当前类型是一个数组类型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="interfaceType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">当前 <see cref="T:System.Type" /> 表示泛型类型参数；即， <see cref="P:System.Type.IsGenericParameter" /> 为 <see langword="true" />。</exception>
      <exception cref="T:System.NotSupportedException">基类不支持调用的方法。 派生类必须提供一个实现。</exception>
    </member>
    <member name="M:System.Type.GetInterfaces">
      <summary>当在派生类中重写时，获取由当前 <see cref="T:System.Type" /> 实现或继承的所有接口。</summary>
      <returns>表示由当前 <see cref="T:System.Type" /> 实现或继承的所有接口的 <see cref="T:System.Type" />对象数组。  
或 
如果没有由当前 <see cref="T:System.Type" /> 实现或继承的接口，则为 <see cref="T:System.Type" /> 类型的空数组。</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">调用静态初始值设定项时引发了异常。</exception>
    </member>
    <member name="M:System.Type.GetMember(System.String)">
      <summary>搜索具有指定名称的公共成员。</summary>
      <param name="name">包含要获取的公共成员名称的字符串。</param>
      <returns>一个表示具有指定名称的公共成员的 <see cref="T:System.Reflection.MemberInfo" /> 对象数组（如果找到的话）；否则为空数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)">
      <summary>使用指定绑定约束搜索指定成员。</summary>
      <param name="name">包含要获取的成员的名称的字符串。</param>
      <param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。  
或 
 若为 <see cref="F:System.Reflection.BindingFlags.Default" />，则返回空数组。</param>
      <returns>一个表示具有指定名称的公共成员的 <see cref="T:System.Reflection.MemberInfo" /> 对象数组（如果找到的话）；否则为空数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>使用指定绑定约束搜索指定成员类型的指定成员。</summary>
      <param name="name">包含要获取的成员的名称的字符串。</param>
      <param name="type">要搜索的值。</param>
      <param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。  
或 
 若为 <see cref="F:System.Reflection.BindingFlags.Default" />，则返回空数组。</param>
      <returns>一个表示具有指定名称的公共成员的 <see cref="T:System.Reflection.MemberInfo" /> 对象数组（如果找到的话）；否则为空数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">派生类必须提供一个实现。</exception>
    </member>
    <member name="M:System.Type.GetMembers">
      <summary>返回为当前 <see cref="T:System.Type" /> 的所有公共成员。</summary>
      <returns>表示当前 <see cref="T:System.Reflection.MemberInfo" /> 的所有公共成员的 <see cref="T:System.Type" /> 对象数组。  
或 
如果当前 <see cref="T:System.Reflection.MemberInfo" /> 没有公共成员，则为 <see cref="T:System.Type" /> 类型的空数组。</returns>
    </member>
    <member name="M:System.Type.GetMembers(System.Reflection.BindingFlags)">
      <summary>当在派生类中重写时，使用指定绑定约束，搜索为当前 <see cref="T:System.Type" /> 定义的成员。</summary>
      <param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。  
或 
 若为 <see cref="F:System.Reflection.BindingFlags.Default" />，则返回空数组。</param>
      <returns>表示为当前 <see cref="T:System.Reflection.MemberInfo" /> 定义的匹配指定绑定约束的所有成员的 <see cref="T:System.Type" /> 对象数组。  
或 
如果没有为当前 <see cref="T:System.Type" /> 定义成员，或者定义的成员均与绑定约束不匹配，则为空数组。</returns>
    </member>
    <member name="M:System.Type.GetMethod(System.String)">
      <summary>搜索具有指定名称的公共方法。</summary>
      <param name="name">包含要获取的公共方法的名称的字符串。</param>
      <returns>表示具有指定名称的公共方法的对象（如果找到的话）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到了多个具有指定名称的方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <param name="name" />
      <param name="genericParameterCount" />
      <param name="bindingAttr" />
      <param name="binder" />
      <param name="callConvention" />
      <param name="types" />
      <param name="modifiers" />
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <param name="name" />
      <param name="genericParameterCount" />
      <param name="bindingAttr" />
      <param name="binder" />
      <param name="types" />
      <param name="modifiers" />
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Int32,System.Type[])">
      <param name="name" />
      <param name="genericParameterCount" />
      <param name="types" />
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Int32,System.Type[],System.Reflection.ParameterModifier[])">
      <param name="name" />
      <param name="genericParameterCount" />
      <param name="types" />
      <param name="modifiers" />
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)">
      <summary>使用指定绑定约束搜索指定方法。</summary>
      <param name="name">包含要获取的方法名称的字符串。</param>
      <param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。  
或 
 若为 <see cref="F:System.Reflection.BindingFlags.Default" />，则返回 <see langword="null" />。</param>
      <returns>表示符合指定要求的方法的对象（如果找到的话）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个具有指定名称且与指定绑定约束匹配的方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>用指定的绑定约束和指定的调用约定，搜索参数与指定的参数类型及修饰符相匹配的指定方法。</summary>
      <param name="name">包含要获取的方法名称的字符串。</param>
      <param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。  
或 
 若为 <see cref="F:System.Reflection.BindingFlags.Default" />，则返回 <see langword="null" />。</param>
      <param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。  
或 
要使用 <see langword="Nothing" /> 的空引用（在 Visual Basic 中为 <see cref="P:System.Type.DefaultBinder" />）。</param>
      <param name="callConvention">该对象用于指定要使用的一套规则，这些规则涉及自变量的顺序和布局、传递返回值的方式、用于自变量的寄存器和清理堆栈的方式。</param>
      <param name="types">表示此方法要获取的参数的个数、顺序和类型的 <see cref="T:System.Type" /> 对象数组。  
或 
空的 <see cref="T:System.Type" /> 对象数组（由 <see cref="F:System.Type.EmptyTypes" /> 字段提供），用来获取不采用参数的方法。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="types" /> 数组中的相应元素关联的特性。 仅当通过 COM 互操作进行调用时才使用，而且仅处理通过引用传递的参数。 默认的联编程序不处理此参数。</param>
      <returns>表示符合指定要求的方法的对象（如果找到的话）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个具有指定名称且与指定绑定约束匹配的方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。  

或 - 
<paramref name="types" /> 为 <see langword="null" />。  

或 
<paramref name="types" /> 的其中一个元素为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多维的。  
或 
 <paramref name="modifiers" /> 是多维的。</exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>使用指定绑定约束，搜索其参数与指定参数类型及修饰符匹配的指定方法。</summary>
      <param name="name">包含要获取的方法名称的字符串。</param>
      <param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。  

或 - 
若为 <see cref="F:System.Reflection.BindingFlags.Default" />，则返回 <see langword="null" />。</param>
      <param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。  

或 - 
要使用 <see langword="Nothing" /> 的空引用（在 Visual Basic 中为 <see cref="P:System.Type.DefaultBinder" />）。</param>
      <param name="types">表示此方法要获取的参数的个数、顺序和类型的 <see cref="T:System.Type" /> 对象数组。  
或 
空的 <see cref="T:System.Type" /> 对象数组（由 <see cref="F:System.Type.EmptyTypes" /> 字段提供），用来获取不采用参数的方法。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="types" /> 数组中的相应元素关联的特性。 仅当通过 COM 互操作进行调用时才使用，而且仅处理通过引用传递的参数。 默认的联编程序不处理此参数。</param>
      <returns>表示符合指定要求的方法的对象（如果找到的话）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个具有指定名称且与指定绑定约束匹配的方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。  
或 
 <paramref name="types" /> 为 <see langword="null" />。  
或 
<paramref name="types" /> 的其中一个元素为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多维的。  

或 - 
<paramref name="modifiers" /> 是多维的。</exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Type[])">
      <summary>搜索其参数与指定参数类型匹配的指定公共方法。</summary>
      <param name="name">包含要获取的公共方法的名称的字符串。</param>
      <param name="types">表示此方法要获取的参数的个数、顺序和类型的 <see cref="T:System.Type" /> 对象数组。  
或 
空的 <see cref="T:System.Type" /> 对象数组（由 <see cref="F:System.Type.EmptyTypes" /> 字段提供），用来获取不采用参数的方法。</param>
      <returns>表示其参数与指定参数类型匹配的公共方法的对象（如果找到的话）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到了多个具有指定名称和指定参数的方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。  

或 - 
<paramref name="types" /> 为 <see langword="null" />。  

或 
<paramref name="types" /> 的其中一个元素为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多维的。</exception>
    </member>
    <member name="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>搜索其参数与指定参数类型及修饰符匹配的指定公共方法。</summary>
      <param name="name">包含要获取的公共方法的名称的字符串。</param>
      <param name="types">表示此方法要获取的参数的个数、顺序和类型的 <see cref="T:System.Type" /> 对象数组。  

或 - 
空的 <see cref="T:System.Type" /> 对象数组（由 <see cref="F:System.Type.EmptyTypes" /> 字段提供），用来获取不采用参数的方法。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="types" /> 数组中的相应元素关联的特性。 仅当通过 COM 互操作进行调用时才使用，而且仅处理通过引用传递的参数。 默认的联编程序不处理此参数。</param>
      <returns>表示符合指定要求的公共方法的对象（如果找到的话）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到了多个具有指定名称和指定参数的方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。  
或 
 <paramref name="types" /> 为 <see langword="null" />。  
或 
<paramref name="types" /> 的其中一个元素为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多维的。  
或 
 <paramref name="modifiers" /> 是多维的。</exception>
    </member>
    <member name="M:System.Type.GetMethodImpl(System.String,System.Int32,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <param name="name" />
      <param name="genericParameterCount" />
      <param name="bindingAttr" />
      <param name="binder" />
      <param name="callConvention" />
      <param name="types" />
      <param name="modifiers" />
    </member>
    <member name="M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>当在派生类中重写时，使用指定的绑定约束和指定的调用约定搜索其参数与指定的自变量类型和修饰符匹配的指定方法。</summary>
      <param name="name">包含要获取的方法名称的字符串。</param>
      <param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。  
或 
 若为 <see cref="F:System.Reflection.BindingFlags.Default" />，则返回 <see langword="null" />。</param>
      <param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。  
或 
要使用 <see langword="Nothing" /> 的空引用（在 Visual Basic 中为 <see cref="P:System.Type.DefaultBinder" />）。</param>
      <param name="callConvention">该对象，用于指定要使用的一套规则，这些规则涉及自变量的顺序和布局、传递返回值的方式、用于自变量的寄存器以及哪个进程清理堆栈。</param>
      <param name="types">表示此方法要获取的参数的个数、顺序和类型的 <see cref="T:System.Type" /> 对象数组。  
或 
一个类型为 <see cref="T:System.Type" /> （即 Type[] types = new Type[0]）的空数组，用于获取一个不带参数的方法。  
或 
 <see langword="null" />。 如果 <paramref name="types" /> 为 <see langword="null" />，则参数不匹配。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="types" /> 数组中的相应元素关联的特性。 默认的联编程序不处理此参数。</param>
      <returns>表示符合指定要求的方法的对象（如果找到的话）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个具有指定名称且与指定绑定约束匹配的方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多维的。  
或 
 <paramref name="modifiers" /> 是多维的。  

或 - 
<paramref name="types" /> 和 <paramref name="modifiers" /> 的长度不相同。</exception>
      <exception cref="T:System.NotSupportedException">当前的类型是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 或 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />。</exception>
    </member>
    <member name="M:System.Type.GetMethods">
      <summary>返回为当前 <see cref="T:System.Type" /> 的所有公共方法。</summary>
      <returns>表示为当前 <see cref="T:System.Reflection.MethodInfo" /> 定义的所有公共方法的 <see cref="T:System.Type" /> 对象数组。  

或 - 
如果没有为当前 <see cref="T:System.Reflection.MethodInfo" /> 定义的公共方法，则为 <see cref="T:System.Type" /> 类型的空数组。</returns>
    </member>
    <member name="M:System.Type.GetMethods(System.Reflection.BindingFlags)">
      <summary>当在派生类中重写时，使用指定绑定约束，搜索为当前 <see cref="T:System.Type" /> 定义的方法。</summary>
      <param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。
或
 若为 <see cref="F:System.Reflection.BindingFlags.Default" />，则返回空数组。</param>
      <returns>表示为当前 <see cref="T:System.Reflection.MethodInfo" /> 定义的匹配指定绑定约束的所有方法的 <see cref="T:System.Type" /> 对象数组。  
或 
如果没有为当前 <see cref="T:System.Reflection.MethodInfo" /> 定义的方法，或者如果没有一个定义的方法匹配绑定约束，则为 <see cref="T:System.Type" /> 类型的空数组。</returns>
    </member>
    <member name="M:System.Type.GetNestedType(System.String)">
      <summary>搜索具有指定名称的公共嵌套类型。</summary>
      <param name="name">包含要获取的嵌套类型的名称的字符串。</param>
      <returns>如找到，则为表示具有指定名称的公共嵌套类型的对象；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>当在派生类中重写时，使用指定绑定约束搜索指定嵌套类型。</summary>
      <param name="name">包含要获取的嵌套类型的名称的字符串。</param>
      <param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。  

或 - 
若为 <see cref="F:System.Reflection.BindingFlags.Default" />，则返回 <see langword="null" />。</param>
      <returns>表示符合指定要求的嵌套类型的对象（如果找到的话）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetNestedTypes">
      <summary>返回嵌套在当前的 <see cref="T:System.Type" /> 中的公共类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象的数组，这些对象表示嵌套在当前 <see cref="T:System.Type" /> 中的公共类型（搜索是非递归的）；如果当前的 <see cref="T:System.Type" /> 中没有嵌套公共类型，则为 <see cref="T:System.Type" /> 类型的空数组。</returns>
    </member>
    <member name="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>当在派生类中重写时，使用指定绑定约束搜索嵌套在当前 <see cref="T:System.Type" /> 中的类型。</summary>
      <param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。  

或 - 
若为 <see cref="F:System.Reflection.BindingFlags.Default" />，则返回 <see langword="null" />。</param>
      <returns>
        <see cref="T:System.Type" /> 对象数组，这些对象表示嵌套在当前 <see cref="T:System.Type" /> 中的所有与指定的绑定约束匹配的类型（搜索是非递归的）；如果没有找到与绑定约束匹配的嵌套类型，则为 <see cref="T:System.Type" /> 类型的空数组。</returns>
    </member>
    <member name="M:System.Type.GetProperties">
      <summary>返回为当前 <see cref="T:System.Type" /> 的所有公共属性。</summary>
      <returns>表示当前 <see cref="T:System.Reflection.PropertyInfo" /> 的所有公共属性的 <see cref="T:System.Type" /> 对象数组。  
或 
如果当前 <see cref="T:System.Reflection.PropertyInfo" /> 没有公共属性，则为 <see cref="T:System.Type" /> 类型的空数组。</returns>
    </member>
    <member name="M:System.Type.GetProperties(System.Reflection.BindingFlags)">
      <summary>当在派生类中重写时，使用指定绑定约束，搜索当前 <see cref="T:System.Type" /> 的属性。</summary>
      <param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。

或 -

 若为 <see cref="F:System.Reflection.BindingFlags.Default" />，则返回空数组。</param>
      <returns>一个对象数组，它表示当前 <see cref="T:System.Type" /> 中与指定的绑定约束匹配的所有属性。  
或 
如果当前 <see cref="T:System.Reflection.PropertyInfo" /> 没有属性，或者如果没有一个属性匹配绑定约束，则为 <see cref="T:System.Type" /> 类型的空数组。</returns>
    </member>
    <member name="M:System.Type.GetProperty(System.String)">
      <summary>搜索具有指定名称的公共属性。</summary>
      <param name="name">包含要获取的公共属性名的字符串。</param>
      <returns>表示具有指定名称的公共属性的对象（如果找到的话）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到了多个具有指定名称的属性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)">
      <summary>使用指定的绑定约束搜索指定属性。</summary>
      <param name="name">包含要获取的属性名的字符串。</param>
      <param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。  
或 
若为 <see cref="F:System.Reflection.BindingFlags.Default" />，则返回 <see langword="null" />。</param>
      <returns>表示符合指定要求的属性的对象（如果找到的话）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个具有指定名称的属性且属性与指定绑定约束匹配。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>使用指定的绑定约束，搜索参数与指定的自变量类型及修饰符匹配的指定属性。</summary>
      <param name="name">包含要获取的属性名的字符串。</param>
      <param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。  

或 - 
若为 <see cref="F:System.Reflection.BindingFlags.Default" />，则返回 <see langword="null" />。</param>
      <param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。  

或 - 
要使用 <see langword="Nothing" /> 的空引用（在 Visual Basic 中为 <see cref="P:System.Type.DefaultBinder" />）。</param>
      <param name="returnType">属性的返回类型。</param>
      <param name="types">一个 <see cref="T:System.Type" /> 对象数组，表示要获取的索引属性的参数的数目、顺序和类型。  
或 
获取未被索引的属性的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="types" /> 数组中的相应元素关联的特性。 默认的联编程序不处理此参数。</param>
      <returns>表示符合指定要求的属性的对象（如果找到的话）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个具有指定名称的属性且属性与指定绑定约束匹配。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。  
或 
 <paramref name="types" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多维的。  
或 
 <paramref name="modifiers" /> 是多维的。  
或 
 <paramref name="types" /> 和 <paramref name="modifiers" /> 的长度不相同。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="types" /> 的元素为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type)">
      <summary>搜索具有指定名称和返回类型的公共属性。</summary>
      <param name="name">包含要获取的公共属性名的字符串。</param>
      <param name="returnType">属性的返回类型。</param>
      <returns>表示具有指定名称的公共属性的对象（如果找到的话）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到了多个具有指定名称的属性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 是 <see langword="null" />，或 <paramref name="returnType" /> 是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[])">
      <summary>搜索其参数与指定自变量类型匹配的指定公共属性。</summary>
      <param name="name">包含要获取的公共属性名的字符串。</param>
      <param name="returnType">属性的返回类型。</param>
      <param name="types">一个 <see cref="T:System.Type" /> 对象数组，表示要获取的索引属性的参数的数目、顺序和类型。  
或 
获取未被索引的属性的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。</param>
      <returns>表示其参数与指定参数类型匹配的公共属性的对象（如果找到的话）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个具有指定名称且与指定自变量类型匹配的属性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。  
或 
 <paramref name="types" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多维的。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="types" /> 的元素为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>搜索其参数与指定自变量类型及修饰符匹配的指定公共属性。</summary>
      <param name="name">包含要获取的公共属性名的字符串。</param>
      <param name="returnType">属性的返回类型。</param>
      <param name="types">一个 <see cref="T:System.Type" /> 对象数组，表示要获取的索引属性的参数的数目、顺序和类型。  
或 
获取未被索引的属性的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="types" /> 数组中的相应元素关联的特性。 默认的联编程序不处理此参数。</param>
      <returns>表示符合指定要求的公共属性的对象（如果找到的话）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个具有指定名称且与指定参数类型和修饰符匹配的属性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。  
或 
 <paramref name="types" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多维的。  
或 
 <paramref name="modifiers" /> 是多维的。  
或 
 <paramref name="types" /> 和 <paramref name="modifiers" /> 的长度不相同。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="types" /> 的元素为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetProperty(System.String,System.Type[])">
      <summary>搜索其参数与指定自变量类型匹配的指定公共属性。</summary>
      <param name="name">包含要获取的公共属性名的字符串。</param>
      <param name="types">一个 <see cref="T:System.Type" /> 对象数组，表示要获取的索引属性的参数的数目、顺序和类型。  
或 
获取未被索引的属性的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。</param>
      <returns>表示其参数与指定参数类型匹配的公共属性的对象（如果找到的话）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个具有指定名称且与指定自变量类型匹配的属性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。  
或 
 <paramref name="types" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多维的。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="types" /> 的元素为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])">
      <summary>当在派生类中重写时，使用指定的绑定约束搜索其参数与指定的参数类型和修饰符匹配的指定属性。</summary>
      <param name="name">包含要获取的属性名的字符串。</param>
      <param name="bindingAttr">枚举值的按位组合，这些值指定如何进行搜索。  
或 
 若为 <see cref="F:System.Reflection.BindingFlags.Default" />，则返回 <see langword="null" />。</param>
      <param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载成员、强制自变量类型和通过反射调用成员。  
或 
要使用 <see langword="Nothing" /> 的空引用（在 Visual Basic 中为 <see cref="P:System.Type.DefaultBinder" />）。</param>
      <param name="returnType">属性的返回类型。</param>
      <param name="types">一个 <see cref="T:System.Type" /> 对象数组，表示要获取的索引属性的参数的数目、顺序和类型。  
或 
获取未被索引的属性的 <see cref="T:System.Type" /> 类型的空数组（即 Type[] types = new Type[0]）。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="types" /> 数组中的相应元素关联的特性。 默认的联编程序不处理此参数。</param>
      <returns>表示符合指定要求的属性的对象（如果找到的话）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个具有指定名称的属性且属性与指定绑定约束匹配。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 <see langword="null" />。  
或 
 <paramref name="types" /> 为 <see langword="null" />。  

或 - 
<paramref name="types" /> 的其中一个元素为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="types" /> 是多维的。  
或 
 <paramref name="modifiers" /> 是多维的。  
或 
 <paramref name="types" /> 和 <paramref name="modifiers" /> 的长度不相同。</exception>
      <exception cref="T:System.NotSupportedException">当前的类型是 <see cref="T:System.Reflection.Emit.TypeBuilder" />、<see cref="T:System.Reflection.Emit.EnumBuilder" /> 或 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />。</exception>
    </member>
    <member name="M:System.Type.GetType">
      <summary>获取当前 <see cref="T:System.Type" />。</summary>
      <returns>当前的 <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">调用了类初始值设定项，且该项引发了异常。</exception>
    </member>
    <member name="M:System.Type.GetType(System.String)">
      <summary>获取具有指定名称的 <see cref="T:System.Type" />，执行区分大小写的搜索。</summary>
      <param name="typeName">要获取的类型的程序集限定名称。 请参阅 <see cref="P:System.Type.AssemblyQualifiedName" />。 如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll 中，则提供由命名空间限定的类型名称就足够了。</param>
      <returns>具有指定名称的类型（如果找到的话）；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">调用了类初始值设定项，且该项引发了异常。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> 表示将指针类型、<see langword="ByRef" /> 类型或 <see cref="T:System.Void" /> 作为其类型参数之一的泛型类型。  
或 
 <paramref name="typeName" /> 表示具有错误的类型参数数目的泛型类型。  

或 - 
<paramref name="typeName" /> 表示泛型类型，并且其类型参数之一不满足相应类型参数的约束。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> 表示 <see cref="T:System.TypedReference" /> 的数组。</exception>
      <exception cref="T:System.IO.FileLoadException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.IO.IOException" />。  


            

 找到了程序集或其依赖项之一，但无法加载它们。</exception>
      <exception cref="T:System.BadImageFormatException">程序集或其依赖项之一无效。  
 或  
 当前加载的是公共语言运行时 2.0 版或更高版本，而程序集使用更高的版本编译。</exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean)">
      <summary>获取具有指定名称的 <see cref="T:System.Type" />，指定是否执行区分大小写的搜索，以及在找不到类型时是否引发异常。</summary>
      <param name="typeName">要获取的类型的程序集限定名称。 请参阅 <see cref="P:System.Type.AssemblyQualifiedName" />。 如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll 中，则提供由命名空间限定的类型名称就足够了。</param>
      <param name="throwOnError">如果为 <see langword="true" />，则在找不到该类型时引发异常；如果为 <see langword="false" />，则返回 <see langword="null" />。 指定 <see langword="false" /> 还会取消某些其他异常条件，但并不取消所有条件。 请参见“异常”部分。</param>
      <returns>具有指定名称的类型。 如果找不到该类型，则 <paramref name="throwOnError" /> 参数指定是返回 <see langword="null" /> 还是引发异常。 在某些情况下，将引发异常，而不考虑 <paramref name="throwOnError" /> 的值。 请参见“异常”部分。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">调用了类初始值设定项，且该项引发了异常。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> 是 <see langword="true" />，且找不到该类型。  

或 - 
<paramref name="throwOnError" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 包含无效字符，例如嵌入的制表符。 
或 
<paramref name="throwOnError" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 为空字符串。  

或 
 <paramref name="throwOnError" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 表示大小无效的数组类型。  

或 - 
<paramref name="typeName" /> 表示 <see cref="T:System.TypedReference" /> 的数组。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="throwOnError" /> 是 <see langword="true" />，且 <paramref name="typeName" /> 包含无效的语法。 例如："MyType[,*,]"。  
或 
 <paramref name="typeName" /> 表示将指针类型、<see langword="ByRef" /> 类型或 <see cref="T:System.Void" /> 作为其类型参数之一的泛型类型。  
或 
 <paramref name="typeName" /> 表示具有错误的类型参数数目的泛型类型。  
或 
 <paramref name="typeName" /> 表示泛型类型，并且其类型参数之一不满足相应类型参数的约束。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> 是 <see langword="true" /> 并且未找到程序集或其依赖项之一。</exception>
      <exception cref="T:System.IO.FileLoadException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.IO.IOException" />。  


            

 找到了程序集或其依赖项之一，但无法加载它们。</exception>
      <exception cref="T:System.BadImageFormatException">程序集或其依赖项之一无效。  

或 -  

 当前加载的是公共语言运行时 2.0 版或更高版本，而程序集使用更高的版本编译。</exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>获取具有指定名称的 <see cref="T:System.Type" />，指定是否执行区分大小写的搜索，以及在找不到类型时是否引发异常。</summary>
      <param name="typeName">要获取的类型的程序集限定名称。 请参阅 <see cref="P:System.Type.AssemblyQualifiedName" />。 如果该类型位于当前正在执行的程序集中或者 Mscorlib.dll 中，则提供由命名空间限定的类型名称就足够了。</param>
      <param name="throwOnError">如果为 <see langword="true" />，则在找不到该类型时引发异常；如果为 <see langword="false" />，则返回 <see langword="null" />。 指定 <see langword="false" /> 还会取消某些其他异常条件，但并不取消所有条件。 请参见“异常”部分。</param>
      <param name="ignoreCase">对 <see langword="true" /> 执行的搜索不区分大小写，则为 <paramref name="typeName" />；对 <see langword="false" /> 执行的搜索区分大小写，则为 <paramref name="typeName" />。</param>
      <returns>具有指定名称的类型。 如果找不到该类型，则 <paramref name="throwOnError" /> 参数指定是返回 <see langword="null" /> 还是引发异常。 在某些情况下，将引发异常，而不考虑 <paramref name="throwOnError" /> 的值。 请参见“异常”部分。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">调用了类初始值设定项，且该项引发了异常。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> 是 <see langword="true" />，且找不到该类型。  
或 
 <paramref name="throwOnError" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 包含无效字符，例如嵌入的制表符。 
或 
 <paramref name="throwOnError" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 为空字符串。  

或 - 
<paramref name="throwOnError" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 表示大小无效的数组类型。  

或 - 
<paramref name="typeName" /> 表示 <see cref="T:System.TypedReference" /> 的数组。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="throwOnError" /> 是 <see langword="true" />，且 <paramref name="typeName" /> 包含无效的语法。 例如："MyType[,*,]"。  
或 
 <paramref name="typeName" /> 表示将指针类型、<see langword="ByRef" /> 类型或 <see cref="T:System.Void" /> 作为其类型参数之一的泛型类型。  
或 
 <paramref name="typeName" /> 表示具有错误的类型参数数目的泛型类型。  
或 
 <paramref name="typeName" /> 表示泛型类型，并且其类型参数之一不满足相应类型参数的约束。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> 的值为 <see langword="true" />，且未找到程序集或程序集的某个依赖项。</exception>
      <exception cref="T:System.IO.FileLoadException">找到了程序集或其依赖项之一，但无法加载它们。</exception>
      <exception cref="T:System.BadImageFormatException">程序集或其依赖项之一无效。  
 或  
 当前加载的是公共语言运行时 2.0 版或更高版本，而程序集使用更高的版本编译。</exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type})">
      <summary>获取具有指定名称的类型，（可选）提供自定义方法以解析程序集和该类型。</summary>
      <param name="typeName">要获取的类型的名称。 如果提供了 <paramref name="typeResolver" /> 参数，则类型名称可以为 <paramref name="typeResolver" /> 能够解析的任何字符串。 如果提供了 <paramref name="assemblyResolver" /> 参数，或者使用了标准类型解析，则除非该类型位于当前正在执行的程序集或 Mscorlib.dll 中（在这种情况下足以提供其命名空间所限定的类型名称），否则 <paramref name="typeName" /> 必须为程序集限定的名称（请参见 <see cref="P:System.Type.AssemblyQualifiedName" />）。</param>
      <param name="assemblyResolver">一个方法，它定位并返回 <paramref name="typeName" /> 中指定的程序集。 以 <paramref name="assemblyResolver" /> 对象形式传递给 <see cref="T:System.Reflection.AssemblyName" /> 的程序集名称。 如果 <paramref name="typeName" /> 不包含程序集的名称，则不调用 <paramref name="assemblyResolver" />。 如果未提供 <paramref name="assemblyResolver" />，则执行标准程序集解析。  
警告   不要通过未知的或不受信任的调用方传递方法。 此操作可能会导致恶意代码特权提升。 仅使用你提供或者熟悉的方法。</param>
      <param name="typeResolver">一个方法，它在由 <paramref name="typeName" /> 或标准程序集解析返回的程序集中定位并返回 <paramref name="assemblyResolver" /> 所指定的类型。 如果未提供任何程序集，则 <paramref name="typeResolver" /> 方法可以提供一个程序集。 该方法还采用一个参数以指定是否执行不区分大小写的搜索；<see langword="false" /> 传递给该参数。  
警告   不要通过未知的或不受信任的调用方传递方法。</param>
      <returns>具有指定名称的类型，如果未找到该类型，则返回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">调用了类初始值设定项，且该项引发了异常。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="typeName" /> 解析为类型名称和程序集名称时（例如，当简单类型名称包含未转义的特殊字符时），发生错误。  
或 
 <paramref name="typeName" /> 表示将指针类型、<see langword="ByRef" /> 类型或 <see cref="T:System.Void" /> 作为其类型参数之一的泛型类型。  
或 
 <paramref name="typeName" /> 表示具有错误的类型参数数目的泛型类型。  
或 
 <paramref name="typeName" /> 表示泛型类型，并且其类型参数之一不满足相应类型参数的约束。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="typeName" /> 表示 <see cref="T:System.TypedReference" /> 的数组。</exception>
      <exception cref="T:System.IO.FileLoadException">找到了程序集或其依赖项之一，但无法加载它们。  
或 
 <paramref name="typeName" /> 包含无效的程序集名称。  
或 
 <paramref name="typeName" /> 是一个不含类型名称的有效程序集名称。</exception>
      <exception cref="T:System.BadImageFormatException">程序集或其依赖项之一无效。  
 或  
 此程序集使用高于当前所加载版本的公共语言运行时版本编译而成。</exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean)">
      <summary>获取具有指定名称的类型，指定在找不到该类型时是否引发异常，（可选）提供自定义方法以解析程序集和该类型。</summary>
      <param name="typeName">要获取的类型的名称。 如果提供了 <paramref name="typeResolver" /> 参数，则类型名称可以为 <paramref name="typeResolver" /> 能够解析的任何字符串。 如果提供了 <paramref name="assemblyResolver" /> 参数，或者使用了标准类型解析，则除非该类型位于当前正在执行的程序集或 Mscorlib.dll 中（在这种情况下足以提供其命名空间所限定的类型名称），否则 <paramref name="typeName" /> 必须为程序集限定的名称（请参见 <see cref="P:System.Type.AssemblyQualifiedName" />）。</param>
      <param name="assemblyResolver">一个方法，它定位并返回 <paramref name="typeName" /> 中指定的程序集。 以 <paramref name="assemblyResolver" /> 对象形式传递给 <see cref="T:System.Reflection.AssemblyName" /> 的程序集名称。 如果 <paramref name="typeName" /> 不包含程序集的名称，则不调用 <paramref name="assemblyResolver" />。 如果未提供 <paramref name="assemblyResolver" />，则执行标准程序集解析。  
警告   不要通过未知的或不受信任的调用方传递方法。 此操作可能会导致恶意代码特权提升。 仅使用你提供或者熟悉的方法。</param>
      <param name="typeResolver">一个方法，它在由 <paramref name="typeName" /> 或标准程序集解析返回的程序集中定位并返回 <paramref name="assemblyResolver" /> 所指定的类型。 如果未提供任何程序集，则该方法可以提供一个程序集。 该方法还采用一个参数以指定是否执行不区分大小写的搜索；<see langword="false" /> 传递给该参数。  
警告   不要通过未知的或不受信任的调用方传递方法。</param>
      <param name="throwOnError">如果为 <see langword="true" />，则在找不到该类型时引发异常；如果为 <see langword="false" />，则返回 <see langword="null" />。 指定 <see langword="false" /> 还会取消某些其他异常条件，但并不取消所有条件。 请参见“异常”部分。</param>
      <returns>具有指定名称的类型。 如果找不到该类型，则 <paramref name="throwOnError" /> 参数指定是返回 <see langword="null" /> 还是引发异常。 在某些情况下，将引发异常，而不考虑 <paramref name="throwOnError" /> 的值。 请参见“异常”部分。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">调用了类初始值设定项，且该项引发了异常。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> 是 <see langword="true" />，且找不到该类型。  
或 
 <paramref name="throwOnError" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 包含无效字符，例如嵌入的制表符。 

或 - 
<paramref name="throwOnError" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 为空字符串。  

或 
 <paramref name="throwOnError" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 表示大小无效的数组类型。  
或 
 <paramref name="typeName" /> 表示 <see cref="T:System.TypedReference" /> 的数组。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="typeName" /> 解析为类型名称和程序集名称时（例如，当简单类型名称包含未转义的特殊字符时），发生错误。  

或 - 
<paramref name="throwOnError" /> 是 <see langword="true" />，且 <paramref name="typeName" /> 包含无效的语法（例如 "MyType[,*,]"）。  

或 - 
<paramref name="typeName" /> 表示将指针类型、<see langword="ByRef" /> 类型或 <see cref="T:System.Void" /> 作为其类型参数之一的泛型类型。  


或 
 <paramref name="typeName" /> 表示具有错误的类型参数数目的泛型类型。  
或 
 <paramref name="typeName" /> 表示泛型类型，并且其类型参数之一不满足相应类型参数的约束。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> 的值为 <see langword="true" />，且未找到程序集或程序集的某个依赖项。  
或 
 <paramref name="typeName" /> 包含无效的程序集名称。  
或 
 <paramref name="typeName" /> 是一个不含类型名称的有效程序集名称。</exception>
      <exception cref="T:System.IO.FileLoadException">找到了程序集或其依赖项之一，但无法加载它们。</exception>
      <exception cref="T:System.BadImageFormatException">程序集或其依赖项之一无效。  
 或  
 此程序集使用高于当前所加载版本的公共语言运行时版本编译而成。</exception>
    </member>
    <member name="M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean,System.Boolean)">
      <summary>获取具有指定名称的类型，指定是否执行区分大小写的搜索，在找不到类型时是否引发异常，（可选）提供自定义方法以解析程序集和该类型。</summary>
      <param name="typeName">要获取的类型的名称。 如果提供了 <paramref name="typeResolver" /> 参数，则类型名称可以为 <paramref name="typeResolver" /> 能够解析的任何字符串。 如果提供了 <paramref name="assemblyResolver" /> 参数，或者使用了标准类型解析，则除非该类型位于当前正在执行的程序集或 Mscorlib.dll 中（在这种情况下足以提供其命名空间所限定的类型名称），否则 <paramref name="typeName" /> 必须为程序集限定的名称（请参见 <see cref="P:System.Type.AssemblyQualifiedName" />）。</param>
      <param name="assemblyResolver">一个方法，它定位并返回 <paramref name="typeName" /> 中指定的程序集。 以 <paramref name="assemblyResolver" /> 对象形式传递给 <see cref="T:System.Reflection.AssemblyName" /> 的程序集名称。 如果 <paramref name="typeName" /> 不包含程序集的名称，则不调用 <paramref name="assemblyResolver" />。 如果未提供 <paramref name="assemblyResolver" />，则执行标准程序集解析。  
警告   不要通过未知的或不受信任的调用方传递方法。 此操作可能会导致恶意代码特权提升。 仅使用你提供或者熟悉的方法。</param>
      <param name="typeResolver">一个方法，它在由 <paramref name="typeName" /> 或标准程序集解析返回的程序集中定位并返回 <paramref name="assemblyResolver" /> 所指定的类型。 如果未提供任何程序集，则该方法可以提供一个程序集。 该方法还采用一个参数以指定是否执行不区分大小写的搜索；<paramref name="ignoreCase" /> 的值传递给该参数。  
警告   不要通过未知的或不受信任的调用方传递方法。</param>
      <param name="throwOnError">如果为 <see langword="true" />，则在找不到该类型时引发异常；如果为 <see langword="false" />，则返回 <see langword="null" />。 指定 <see langword="false" /> 还会取消某些其他异常条件，但并不取消所有条件。 请参见“异常”部分。</param>
      <param name="ignoreCase">对 <see langword="true" /> 执行的搜索不区分大小写，则为 <paramref name="typeName" />；对 <see langword="false" /> 执行的搜索区分大小写，则为 <paramref name="typeName" />。</param>
      <returns>具有指定名称的类型。 如果找不到该类型，则 <paramref name="throwOnError" /> 参数指定是返回 <see langword="null" /> 还是引发异常。 在某些情况下，将引发异常，而不考虑 <paramref name="throwOnError" /> 的值。 请参见“异常”部分。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">调用了类初始值设定项，且该项引发了异常。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> 是 <see langword="true" />，且找不到该类型。  
或 
 <paramref name="throwOnError" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 包含无效字符，例如嵌入的制表符。 
或 
 <paramref name="throwOnError" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 为空字符串。  

或 - 
<paramref name="throwOnError" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 表示大小无效的数组类型。  

或 - 
<paramref name="typeName" /> 表示 <see cref="T:System.TypedReference" /> 的数组。</exception>
      <exception cref="T:System.ArgumentException">当 <paramref name="typeName" /> 解析为类型名称和程序集名称时（例如，当简单类型名称包含未转义的特殊字符时），发生错误。  
或 
 <paramref name="throwOnError" /> 是 <see langword="true" />，且 <paramref name="typeName" /> 包含无效的语法（例如 "MyType[,*,]"）。  

或 - 
<paramref name="typeName" /> 表示将指针类型、<see langword="ByRef" /> 类型或 <see cref="T:System.Void" /> 作为其类型参数之一的泛型类型。  

或 
 <paramref name="typeName" /> 表示具有错误的类型参数数目的泛型类型。  
或 
 <paramref name="typeName" /> 表示泛型类型，并且其类型参数之一不满足相应类型参数的约束。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwOnError" /> 的值为 <see langword="true" />，且未找到程序集或程序集的某个依赖项。</exception>
      <exception cref="T:System.IO.FileLoadException">找到了程序集或其依赖项之一，但无法加载它们。  

或 - 
<paramref name="typeName" /> 包含无效的程序集名称。  

或 
 <paramref name="typeName" /> 是一个不含类型名称的有效程序集名称。</exception>
      <exception cref="T:System.BadImageFormatException">程序集或其依赖项之一无效。  
 或  
 此程序集使用高于当前所加载版本的公共语言运行时版本编译而成。</exception>
    </member>
    <member name="M:System.Type.GetTypeArray(System.Object[])">
      <summary>获取指定数组中对象的类型。</summary>
      <param name="args">要确定其类型的对象数组。</param>
      <returns>表示 <see cref="T:System.Type" /> 中相应元素的类型的 <paramref name="args" /> 对象数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="args" /> 为 <see langword="null" />。  
或 
<paramref name="args" /> 的其中一个或多个元素为 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">调用类初始值设定项，并且至少一个引发异常。</exception>
    </member>
    <member name="M:System.Type.GetTypeCode(System.Type)">
      <summary>获取指定 <see cref="T:System.Type" /> 的基础类型代码。</summary>
      <param name="type">要获取其基础代码的类型。</param>
      <returns>如果 <see cref="F:System.TypeCode.Empty" /> 为 <paramref name="type" />，则为基础类型代码或 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Type.GetTypeCodeImpl">
      <summary>返回此 <see cref="T:System.Type" /> 实例的基础类型代码。</summary>
      <returns>基础类型的类型代码。</returns>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid)">
      <summary>获取与指定类标识符 (CLSID) 关联的类型。</summary>
      <param name="clsid">要获取的类型的 CLSID。</param>
      <returns>
        <see langword="System.__ComObject" />，无论 CLSID 是否有效。</returns>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid,System.Boolean)">
      <summary>获取与指定类标识符 (CLSID) 关联的类型，指定在加载该类型时如果发生错误是否引发异常。</summary>
      <param name="clsid">要获取的类型的 CLSID。</param>
      <param name="throwOnError">
        <see langword="true" /> 将引发所发生的任何异常。  

或 - 
<see langword="false" /> 将忽略所发生的任何异常。</param>
      <returns>
        <see langword="System.__ComObject" />，无论 CLSID 是否有效。</returns>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid,System.String)">
      <summary>从指定服务器获取与指定类标识符 (CLSID) 关联的类型。</summary>
      <param name="clsid">要获取的类型的 CLSID。</param>
      <param name="server">用于从中加载该类型的服务器。 如果服务器名称为 <see langword="null" />，则此方法会自动恢复到本地计算机上。</param>
      <returns>
        <see langword="System.__ComObject" />，无论 CLSID 是否有效。</returns>
    </member>
    <member name="M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)">
      <summary>从指定服务器获取与指定类标识符 (CLSID) 关联的类型，指定在加载该类型时如果发生错误是否引发异常。</summary>
      <param name="clsid">要获取的类型的 CLSID。</param>
      <param name="server">用于从中加载该类型的服务器。 如果服务器名称为 <see langword="null" />，则此方法会自动恢复到本地计算机上。</param>
      <param name="throwOnError">
        <see langword="true" /> 将引发所发生的任何异常。  
或 
<see langword="false" /> 将忽略所发生的任何异常。</param>
      <returns>
        <see langword="System.__ComObject" />，无论 CLSID 是否有效。</returns>
    </member>
    <member name="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)">
      <summary>获取由指定类型句柄引用的类型。</summary>
      <param name="handle">引用类型的对象。</param>
      <returns>如果 <see cref="T:System.RuntimeTypeHandle" /> 的 <see langword="null" /> 属性为 <see cref="P:System.RuntimeTypeHandle.Value" />，则为由指定的 <paramref name="handle" /> 引用的类型，或者为 <see langword="null" />。</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">调用了类初始值设定项，且该项引发了异常。</exception>
    </member>
    <member name="M:System.Type.GetTypeFromProgID(System.String)">
      <summary>获取与指定程序标识符 (ProgID) 关联的类型，如果在加载 <see cref="T:System.Type" /> 时遇到错误，则返回空值。</summary>
      <param name="progID">要获取的类型的 ProgID。</param>
      <returns>如果 <paramref name="progID" /> 是注册表中的有效项，并且有与之关联的类型，则为与指定 ProgID 关联的类型；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="progID" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetTypeFromProgID(System.String,System.Boolean)">
      <summary>获取与指定程序标识符 (ProgID) 关联的类型，指定如果在加载该类型时发生错误是否引发异常。</summary>
      <param name="progID">要获取的类型的 ProgID。</param>
      <param name="throwOnError">
        <see langword="true" /> 将引发所发生的任何异常。  
或 
<see langword="false" /> 将忽略所发生的任何异常。</param>
      <returns>如果 <paramref name="progID" /> 是注册表中的有效项且有与之关联的类型，则为与指定程序标识符 (ProgID) 关联的类型；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="progID" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">未注册指定的 ProgID。</exception>
    </member>
    <member name="M:System.Type.GetTypeFromProgID(System.String,System.String)">
      <summary>从指定服务器获取与指定程序标识符 (progID) 关联的类型，如果在加载该类型时遇到错误则返回空值。</summary>
      <param name="progID">要获取的类型的 ProgID。</param>
      <param name="server">用于从中加载该类型的服务器。 如果服务器名称为 <see langword="null" />，则此方法会自动恢复到本地计算机上。</param>
      <returns>如果 <paramref name="progID" /> 是注册表中的有效项且有与之关联的类型，则为与指定程序标识符 (ProgID) 关联的类型；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="prodID" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Type.GetTypeFromProgID(System.String,System.String,System.Boolean)">
      <summary>从指定服务器获取与指定程序标识符 (progID) 关联的类型，指定如果在加载该类型时发生错误是否引发异常。</summary>
      <param name="progID">要获取的 <see cref="T:System.Type" /> 的 progID。</param>
      <param name="server">用于从中加载该类型的服务器。 如果服务器名称为 <see langword="null" />，则此方法会自动恢复到本地计算机上。</param>
      <param name="throwOnError">
        <see langword="true" /> 将引发所发生的任何异常。  

或 - 
<see langword="false" /> 将忽略所发生的任何异常。</param>
      <returns>如果 <paramref name="progID" /> 是注册表中的有效项且有与之关联的类型，则为与指定程序标识符 (ProgID) 关联的类型；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="progID" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">未注册指定的 progID。</exception>
    </member>
    <member name="M:System.Type.GetTypeHandle(System.Object)">
      <summary>获取指定对象的 <see cref="T:System.Type" /> 的句柄。</summary>
      <param name="o">要获取类型句柄的对象。</param>
      <returns>指定 <see cref="T:System.Type" /> 的 <see cref="T:System.Object" /> 的句柄。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Type.GUID">
      <summary>获取与 <see cref="T:System.Type" />关联的 GUID。</summary>
      <returns>获取与 <see cref="T:System.Type" /> 关联的 GUID。</returns>
    </member>
    <member name="P:System.Type.HasElementType">
      <summary>获取一个值，通过该值指示当前 <see cref="T:System.Type" /> 是包含还是引用另一类型，即当前 <see cref="T:System.Type" /> 是数组、指针还是通过引用传递。</summary>
      <returns>如果 <see langword="true" /> 为数组、指针或按引用传递，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.HasElementTypeImpl">
      <summary>当在派生类中重写时，实现 <see cref="P:System.Type.HasElementType" /> 属性，确定当前 <see cref="T:System.Type" /> 是否包含另一类型或对其引用；即，当前 <see cref="T:System.Type" /> 是否是数组、指针或由引用传递。</summary>
      <returns>如果 <see langword="true" /> 为数组、指针或按引用传递，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])">
      <summary>使用指定的绑定约束并匹配指定的参数列表，调用指定成员。</summary>
      <param name="name">字符串，它包含要调用的构造函数、方法、属性或字段成员的名称。  

或 - 
空字符串 ("")，表示调用默认成员。  

或 
对于 <see langword="IDispatch" /> 成员，则为一个表示 DispID 的字符串，例如"[DispID=3]"。</param>
      <param name="invokeAttr">枚举值的按位组合，这些值指定如何进行搜索。 访问可以是 <see langword="BindingFlags" /> 之一，如 <see langword="Public" />、<see langword="NonPublic" />、<see langword="Private" />、<see langword="InvokeMethod" /> 和 <see langword="GetField" /> 等。 查找类型无需指定。 如果省略查找的类型，则将使用 <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" />。</param>
      <param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。  

或 - 
要使用 <see langword="Nothing" /> 的空引用（在 Visual Basic 中为 <see cref="P:System.Type.DefaultBinder" />）。 请注意，为了成功地使用变量参数来调用方法重载，可能必须显式定义 <see cref="T:System.Reflection.Binder" /> 对象。</param>
      <param name="target">对其调用指定成员的对象。</param>
      <param name="args">包含传递给要调用的成员的参数的数组。</param>
      <returns>一个对象，表示被调用成员的返回值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="invokeAttr" /> 不包含 <see langword="CreateInstance" />，并且 <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr" /> 不是有效的 <see cref="T:System.Reflection.BindingFlags" /> 属性。  
或 
 <paramref name="invokeAttr" /> 不包含以下某个绑定标志：<see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" />。  

或 - 
<paramref name="invokeAttr" /> 包含 <see langword="CreateInstance" /> 与 <see langword="InvokeMethod" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" /> 的组合。  

或 
 <paramref name="invokeAttr" /> 同时包含 <see langword="GetField" /> 和 <see langword="SetField" />。  
或 
 <paramref name="invokeAttr" /> 同时包含 <see langword="GetProperty" /> 和 <see langword="SetProperty" />。  
或 
 <paramref name="invokeAttr" /> 包含 <see langword="InvokeMethod" /> 与 <see langword="SetField" /> 或 <see langword="SetProperty" /> 的组合。  
或 
 <paramref name="invokeAttr" /> 包含 <see langword="SetField" />，并且 <paramref name="args" /> 具有多个元素。  

或 - 
对 COM 对象调用了此方法，但以下绑定标志中有一个未传入：<see langword="BindingFlags.InvokeMethod" />、<see langword="BindingFlags.GetProperty" />、<see langword="BindingFlags.SetProperty" />、<see langword="BindingFlags.PutDispProperty" /> 或 <see langword="BindingFlags.PutRefDispProperty" />。  

或 - 
其中一个命名参数数组包含一个值为 <see langword="null" /> 的字符串。</exception>
      <exception cref="T:System.MethodAccessException">指定的成员是类初始值设定项。</exception>
      <exception cref="T:System.MissingFieldException">找不到此字段或属性。</exception>
      <exception cref="T:System.MissingMethodException">找不到与 <paramref name="args" /> 中的参数匹配的方法。  
或 
当前 <see cref="T:System.Type" /> 对象表示包含开放类型参数的类型，也就是说，<see cref="P:System.Type.ContainsGenericParameters" /> 将返回 <see langword="true" />。</exception>
      <exception cref="T:System.Reflection.TargetException">不能在 <paramref name="target" /> 上调用指定的成员。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">多个方法与绑定条件匹配。</exception>
      <exception cref="T:System.NotSupportedException">.NET Compact Framework 当前不支持此方法。</exception>
      <exception cref="T:System.InvalidOperationException">由 <paramref name="name" /> 表示的方法具有一个或多个未指定的泛型类型参数。 也就是说，此方法的 <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> 属性将返回 <see langword="true" />。</exception>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)">
      <summary>使用指定的绑定约束和匹配的指定参数列表及区域性来调用指定成员。</summary>
      <param name="name">字符串，它包含要调用的构造函数、方法、属性或字段成员的名称。  
或 
空字符串 ("")，表示调用默认成员。  
或 
对于 <see langword="IDispatch" /> 成员，则为一个表示 DispID 的字符串，例如"[DispID=3]"。</param>
      <param name="invokeAttr">枚举值的按位组合，这些值指定如何进行搜索。 访问可以是 <see langword="BindingFlags" /> 之一，如 <see langword="Public" />、<see langword="NonPublic" />、<see langword="Private" />、<see langword="InvokeMethod" /> 和 <see langword="GetField" /> 等。 查找类型无需指定。 如果省略查找的类型，则将使用 <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" />。</param>
      <param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。  
或 
要使用 <see langword="Nothing" /> 的空引用（在 Visual Basic 中为 <see cref="P:System.Type.DefaultBinder" />）。 请注意，为了成功地使用变量参数来调用方法重载，可能必须显式定义 <see cref="T:System.Reflection.Binder" /> 对象。</param>
      <param name="target">对其调用指定成员的对象。</param>
      <param name="args">包含传递给要调用的成员的参数的数组。</param>
      <param name="culture">表示要使用的全局化区域设置的对象，它对区域设置特定的转换可能是必需的，比如将数字 <see cref="T:System.String" /> 转换为 <see cref="T:System.Double" />。  
或 
要使用当前线程的 <see langword="Nothing" /> 的空引用（在 Visual Basic 中为 <see cref="T:System.Globalization.CultureInfo" />）。</param>
      <returns>一个对象，表示被调用成员的返回值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="invokeAttr" /> 不包含 <see langword="CreateInstance" />，并且 <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="invokeAttr" /> 不是有效的 <see cref="T:System.Reflection.BindingFlags" /> 属性。  
或 
 <paramref name="invokeAttr" /> 不包含以下某个绑定标志：<see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" />。  
或 
 <paramref name="invokeAttr" /> 包含 <see langword="CreateInstance" /> 与 <see langword="InvokeMethod" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" /> 的组合。  
或 
 <paramref name="invokeAttr" /> 同时包含 <see langword="GetField" /> 和 <see langword="SetField" />。  
或 
 <paramref name="invokeAttr" /> 同时包含 <see langword="GetProperty" /> 和 <see langword="SetProperty" />。  

或 - 
<paramref name="invokeAttr" /> 包含 <see langword="InvokeMethod" /> 与 <see langword="SetField" /> 或 <see langword="SetProperty" /> 的组合。  

或 
 <paramref name="invokeAttr" /> 包含 <see langword="SetField" />，并且 <paramref name="args" /> 具有多个元素。  
或 
对 COM 对象调用了此方法，但以下绑定标志中有一个未传入：<see langword="BindingFlags.InvokeMethod" />、<see langword="BindingFlags.GetProperty" />、<see langword="BindingFlags.SetProperty" />、<see langword="BindingFlags.PutDispProperty" /> 或 <see langword="BindingFlags.PutRefDispProperty" />。  

或 - 
其中一个命名参数数组包含一个值为 <see langword="null" /> 的字符串。</exception>
      <exception cref="T:System.MethodAccessException">指定的成员是类初始值设定项。</exception>
      <exception cref="T:System.MissingFieldException">找不到此字段或属性。</exception>
      <exception cref="T:System.MissingMethodException">找不到与 <paramref name="args" /> 中的参数匹配的方法。  
或 
当前 <see cref="T:System.Type" /> 对象表示包含开放类型参数的类型，也就是说，<see cref="P:System.Type.ContainsGenericParameters" /> 将返回 <see langword="true" />。</exception>
      <exception cref="T:System.Reflection.TargetException">不能在 <paramref name="target" /> 上调用指定的成员。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">多个方法与绑定条件匹配。</exception>
      <exception cref="T:System.InvalidOperationException">由 <paramref name="name" /> 表示的方法具有一个或多个未指定的泛型类型参数。 也就是说，此方法的 <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> 属性将返回 <see langword="true" />。</exception>
    </member>
    <member name="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>当在派生类中重写时，使用指定的绑定约束并匹配指定的参数列表、修饰符和区域性，调用指定成员。</summary>
      <param name="name">字符串，它包含要调用的构造函数、方法、属性或字段成员的名称。  
或 
空字符串 ("")，表示调用默认成员。  
或 
对于 <see langword="IDispatch" /> 成员，则为一个表示 DispID 的字符串，例如"[DispID=3]"。</param>
      <param name="invokeAttr">枚举值的按位组合，这些值指定如何进行搜索。 访问可以是 <see langword="BindingFlags" /> 之一，如 <see langword="Public" />、<see langword="NonPublic" />、<see langword="Private" />、<see langword="InvokeMethod" /> 和 <see langword="GetField" /> 等。 查找类型无需指定。 如果省略查找的类型，则将使用 <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> | <see langword="BindingFlags.Static" />。</param>
      <param name="binder">一个对象，该对象定义一组属性并启用绑定，而绑定可能涉及选择重载方法、强制参数类型和通过反射调用成员。  

或 - 
要使用 <see cref="P:System.Type.DefaultBinder" /> 的空引用（在 Visual Basic 中为 Nothing）。 请注意，为了成功地使用变量参数来调用方法重载，可能必须显式定义 <see cref="T:System.Reflection.Binder" /> 对象。</param>
      <param name="target">对其调用指定成员的对象。</param>
      <param name="args">包含传递给要调用的成员的参数的数组。</param>
      <param name="modifiers">
        <see cref="T:System.Reflection.ParameterModifier" /> 对象的数组，表示与 <paramref name="args" /> 数组中的相应元素关联的特性。 参数的关联的属性存储在成员的签名中。  
只有在调用 COM 组件时，默认联编程序才处理此参数。</param>
      <param name="culture">表示要使用的全局化区域设置的 <see cref="T:System.Globalization.CultureInfo" /> 对象，它对区域设置特定的转换可能是必需的，比如将数字 String 转换为 Double。  
或 
要使用当前线程的 <see langword="Nothing" /> 的空引用（在 Visual Basic 中为 <see cref="T:System.Globalization.CultureInfo" />）。</param>
      <param name="namedParameters">包含参数名称的数组，<paramref name="args" /> 数组中的值将传递给这些参数。</param>
      <returns>一个对象，表示被调用成员的返回值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="invokeAttr" /> 不包含 <see langword="CreateInstance" />，并且 <paramref name="name" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="args" /> 和 <paramref name="modifiers" /> 的长度不相同。  
或 
 <paramref name="invokeAttr" /> 不是有效的 <see cref="T:System.Reflection.BindingFlags" /> 属性。  

或 - 
<paramref name="invokeAttr" /> 不包含以下某个绑定标志：<see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" />。  

或 
 <paramref name="invokeAttr" /> 包含 <see langword="CreateInstance" /> 与 <see langword="InvokeMethod" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" /> 的组合。  

或 - 
<paramref name="invokeAttr" /> 同时包含 <see langword="GetField" /> 和 <see langword="SetField" />。  

或 
 <paramref name="invokeAttr" /> 同时包含 <see langword="GetProperty" /> 和 <see langword="SetProperty" />。  
或 
 <paramref name="invokeAttr" /> 包含 <see langword="InvokeMethod" /> 与 <see langword="SetField" /> 或 <see langword="SetProperty" /> 的组合。  

或 - 
<paramref name="invokeAttr" /> 包含 <see langword="SetField" />，并且 <paramref name="args" /> 具有多个元素。  

或 
命名的参数数组大于参数数组。  
或 
对 COM 对象调用了此方法，但以下绑定标志中有一个未传入：<see langword="BindingFlags.InvokeMethod" />、<see langword="BindingFlags.GetProperty" />、<see langword="BindingFlags.SetProperty" />、<see langword="BindingFlags.PutDispProperty" /> 或 <see langword="BindingFlags.PutRefDispProperty" />。  
或 
其中一个命名参数数组包含一个值为 <see langword="null" /> 的字符串。</exception>
      <exception cref="T:System.MethodAccessException">指定的成员是类初始值设定项。</exception>
      <exception cref="T:System.MissingFieldException">找不到此字段或属性。</exception>
      <exception cref="T:System.MissingMethodException">找不到与 <paramref name="args" /> 中的参数匹配的方法。  
或 
找不到具有 <paramref name="namedParameters" /> 中提供的参数名称的成员。  
或 
当前 <see cref="T:System.Type" /> 对象表示包含开放类型参数的类型，也就是说，<see cref="P:System.Type.ContainsGenericParameters" /> 将返回 <see langword="true" />。</exception>
      <exception cref="T:System.Reflection.TargetException">不能在 <paramref name="target" /> 上调用指定的成员。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">多个方法与绑定条件匹配。</exception>
      <exception cref="T:System.InvalidOperationException">由 <paramref name="name" /> 表示的方法具有一个或多个未指定的泛型类型参数。 也就是说，此方法的 <see cref="P:System.Reflection.MethodBase.ContainsGenericParameters" /> 属性将返回 <see langword="true" />。</exception>
    </member>
    <member name="P:System.Type.IsAbstract">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否为抽象的并且必须被重写。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是抽象的，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsAnsiClass">
      <summary>获取一个值，该值指示是否为 <see langword="AnsiClass" /> 选择了字符串格式属性 <see cref="T:System.Type" />。</summary>
      <returns>如果为 <see langword="true" /> 选择了字符串格式属性 <see langword="AnsiClass" />，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsArray">
      <summary>获取一个值，该值指示类型是否为数组。</summary>
      <returns>如果当前类型是数组，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.IsArrayImpl">
      <summary>在派生类中重写时，实现 <see cref="P:System.Type.IsArray" /> 属性并确定 <see cref="T:System.Type" /> 是否为数组。</summary>
      <returns>如果 <see langword="true" /> 是数组，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.IsAssignableFrom(System.Type)">
      <summary>确定指定类型的实例是否能分配给当前类型的变量。</summary>
      <param name="c">要与当前类型进行比较的类型。</param>
      <returns>如果满足下列任一条件，则为 <see langword="true" />： 

<paramref name="c" /> 和当前实例表示相同类型。  

<paramref name="c" /> 是从当前实例直接或间接派生的。 如果继承于当前实例，则 <paramref name="c" /> 是从当前实例直接派生的；如果继承于从当前实例继承的接连一个或多个类，则 <paramref name="c" /> 是从当前实例间接派生的。  

当前实例是 <paramref name="c" /> 实现的一个接口。  

<paramref name="c" /> 是一个泛型类型参数，并且当前实例表示 <paramref name="c" /> 的约束之一。  


在以下示例中，当前实例是表示 <see cref="T:System.IO.Stream" /> 类的 <see cref="T:System.Type" /> 对象。 <c>GenericWithConstraint</c> 是一种泛型类型，其泛型类型参数必须为 <see cref="T:System.IO.Stream" /> 类型。 将其泛型类型参数传递到 <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> 表示可以将泛型类型参数的实例分配给 <see cref="T:System.IO.Stream" /> 对象。  
[!code-csharpSystem.Type.IsAssignableFrom#2] [!code-vbSystem.Type.IsAssignableFrom#2] 

<paramref name="c" /> 表示一个值类型，并且当前实例表示 <c>Nullable&lt;c&gt;</c>（在 Visual Basic 中为 <c>Nullable(Of c)</c>）。  

 如果不满足上述任何一个条件或者 <paramref name="c" /> 为 <see langword="false" />，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Type.IsAutoClass">
      <summary>获取一个值，该值指示是否为 <see langword="AutoClass" /> 选择了字符串格式属性 <see cref="T:System.Type" />。</summary>
      <returns>如果为 <see langword="true" /> 选择了字符串格式属性 <see langword="AutoClass" />，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsAutoLayout">
      <summary>获取指示当前类型的字段是否由公共语言运行时自动放置的值。</summary>
      <returns>如果当前类型的 <see langword="true" /> 属性包括 <see cref="P:System.Type.Attributes" />，则为 <see cref="F:System.Reflection.TypeAttributes.AutoLayout" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsByRef">
      <summary>获取一个值，该值指示 <see cref="T:System.Type" /> 是否由引用传递。</summary>
      <returns>如果 <see cref="T:System.Type" /> 按引用传递，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.IsByRefImpl">
      <summary>在派生类中重写时，实现 <see cref="P:System.Type.IsByRef" /> 属性并确定<see cref="T:System.Type" /> 是否通过引用传递。</summary>
      <returns>如果 <see cref="T:System.Type" /> 按引用传递，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsByRefLike" />
    <member name="P:System.Type.IsClass">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否是一个类或委托；即，不是值类型或接口。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是类，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsCOMObject">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否为 COM 对象。</summary>
      <returns>如果 <see langword="true" /> 为 COM 对象，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.IsCOMObjectImpl">
      <summary>当在派生类中重写时，实现 <see cref="P:System.Type.IsCOMObject" /> 属性并确定 <see cref="T:System.Type" /> 是否为 COM 对象。</summary>
      <returns>如果 <see langword="true" /> 为 COM 对象，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsConstructedGenericType">
      <summary>获取指示此对象是否表示构造的泛型类型的值。 你可以创建构造型泛型类型的实例。</summary>
      <returns>如果此对象表示构造泛型类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsContextful">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 在上下文中是否可以被承载。</summary>
      <returns>如果 <see cref="T:System.Type" /> 能够在某个上下文中承载，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.IsContextfulImpl">
      <summary>实现 <see cref="P:System.Type.IsContextful" /> 属性并确定 <see cref="T:System.Type" /> 在上下文中是否可以被承载。</summary>
      <returns>如果 <see cref="T:System.Type" /> 能够在某个上下文中承载，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsEnum">
      <summary>获取一个值，该值指示当前的 <see cref="T:System.Type" /> 是否表示枚举。</summary>
      <returns>如果当前 <see langword="true" /> 表示枚举，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.IsEnumDefined(System.Object)">
      <summary>返回一个值，该值指示当前的枚举类型中是否存在指定的值。</summary>
      <param name="value">要测试的值。</param>
      <returns>如果指定的值是当前枚举类型的成员，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">当前类型不是一个枚举。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> 类型不能为枚举的基础类型。</exception>
    </member>
    <member name="M:System.Type.IsEquivalentTo(System.Type)">
      <summary>确定两个 COM 类型是否具有相同的标识，以及是否符合类型等效的条件。</summary>
      <param name="other">要测试是否与当前类型等效的 COM 类型。</param>
      <returns>如果 COM 类型等效，则为 <see langword="true" />；否则为 <see langword="false" />。 如果一个类型位于为执行加载的程序集中，而另一个类型位于已加载到仅限反射上下文的程序集中，则此方法也返回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsExplicitLayout">
      <summary>获取指示当前类型的字段是否放置在显式指定的偏移量处的值。</summary>
      <returns>如果当前类型的 <see langword="true" /> 属性包括 <see cref="P:System.Type.Attributes" />，则为 <see cref="F:System.Reflection.TypeAttributes.ExplicitLayout" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsGenericMethodParameter" />
    <member name="P:System.Type.IsGenericParameter">
      <summary>获取一个值，该值指示当前 <see cref="T:System.Type" /> 是否表示泛型类型或方法的定义中的类型参数。</summary>
      <returns>如果 <see cref="T:System.Type" /> 对象表示泛型类型定义或泛型方法定义的类型参数，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsGenericType">
      <summary>获取一个值，该值指示当前类型是否是泛型类型。</summary>
      <returns>
        <see langword="true" />如果当前类型是泛型类型, 则为; 否则为。否则为<see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsGenericTypeDefinition">
      <summary>获取一个值，该值指示当前 <see cref="T:System.Type" /> 是否表示可以用来构造其他泛型类型的泛型类型定义。</summary>
      <returns>如果此 <see langword="true" /> 对象表示泛型类型定义，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsGenericTypeParameter" />
    <member name="P:System.Type.IsImport">
      <summary>获取一个值，该值指示 <see cref="T:System.Type" /> 是否应用了 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> 属性，如果应用了该属性，则表示它是从 COM 类型库导入的。</summary>
      <returns>如果 <see langword="true" /> 具有 <see cref="T:System.Type" />，则为 <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.IsInstanceOfType(System.Object)">
      <summary>确定指定的对象是否是当前 <see cref="T:System.Type" /> 的实例。</summary>
      <param name="o">要与当前类型进行比较的对象。</param>
      <returns>如果满足下列任一条件，则为 <see langword="true" />：当前 <see langword="Type" /> 位于由 <paramref name="o" /> 表示的对象的继承层次结构中；当前 <see langword="Type" /> 是 <paramref name="o" /> 实现的接口。 如果不属于其中任一种情况，<paramref name="o" /> 为 <see langword="null" />，或者当前 <see langword="Type" /> 为开放式泛型类型（即 <see cref="P:System.Type.ContainsGenericParameters" /> 返回 <see langword="true" />），则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsInterface">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否是一个接口；即，不是类或值类型。</summary>
      <returns>如果 <see langword="true" /> 是接口，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsLayoutSequential">
      <summary>获取指示当前类型的字段是否按顺序（定义顺序或发送到元数据的顺序）放置的值。</summary>
      <returns>如果当前类型的 <see langword="true" /> 属性包括 <see cref="P:System.Type.Attributes" />，则为 <see cref="F:System.Reflection.TypeAttributes.SequentialLayout" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsMarshalByRef">
      <summary>获取一个值，该值指示 <see cref="T:System.Type" /> 是否按引用进行封送。</summary>
      <returns>如果 <see langword="true" /> 是由引用封送的，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.IsMarshalByRefImpl">
      <summary>实现 <see cref="P:System.Type.IsMarshalByRef" /> 属性并确定 <see cref="T:System.Type" /> 是否按引用来进行封送。</summary>
      <returns>如果 <see langword="true" /> 是由引用封送的，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsNested">
      <summary>获取一个指示当前 <see cref="T:System.Type" /> 对象是否表示其定义嵌套在另一个类型的定义之内的类型的值。</summary>
      <returns>如果 <see langword="true" /> 嵌套在另一个类型内，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsNestedAssembly">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否是嵌套的并且只能在它自己的程序集内可见。</summary>
      <returns>如果 <see langword="true" /> 是嵌套的并且仅在它自己的程序集中可见，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsNestedFamANDAssem">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否是嵌套的并且只对同时属于自己家族和自己程序集的类可见。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是嵌套的并且只对同时属于它自己的家族和它自己的程序集的类可见，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsNestedFamily">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否是嵌套的并且只能在它自己的家族内可见。</summary>
      <returns>如果 <see langword="true" /> 是嵌套的并且仅在它自己的家族中可见，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsNestedFamORAssem">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否是嵌套的并且只对属于它自己的家族或属于它自己的程序集的类可见。</summary>
      <returns>如果 <see langword="true" /> 是嵌套的并且只对属于它自己的家族或属于它自己的程序集的类可见，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsNestedPrivate">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否是嵌套的并声明为私有。</summary>
      <returns>如果 <see langword="true" /> 是嵌套的并声明为私有，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsNestedPublic">
      <summary>获取一个值，通过该值指示类是否是嵌套的并且声明为公共的。</summary>
      <returns>如果类是嵌套的并且声明为公共的，则为<see langword="true" /> ；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsNotPublic">
      <summary>获取一个值，该值指示 <see cref="T:System.Type" /> 是否声明为公共类型。</summary>
      <returns>如果 <see langword="true" /> 未声明为公共类型且不是嵌套类型，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsPointer">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否为指针。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是指针，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.IsPointerImpl">
      <summary>在派生类中重写时，实现 <see cref="P:System.Type.IsPointer" /> 属性并确定 <see cref="T:System.Type" /> 是否为指针。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是指针，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsPrimitive">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否为基元类型之一。</summary>
      <returns>如果 <see langword="true" /> 为基元类型之一，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.IsPrimitiveImpl">
      <summary>在派生类中重写时，实现 <see cref="P:System.Type.IsPrimitive" /> 属性并确定 <see cref="T:System.Type" /> 是否为基元类型之一。</summary>
      <returns>如果 <see langword="true" /> 为基元类型之一，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsPublic">
      <summary>获取一个值，该值指示 <see cref="T:System.Type" /> 是否声明为公共类型。</summary>
      <returns>如果 <see langword="true" /> 声明为公共类型且不是嵌套类型，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsSealed">
      <summary>获取一个值，该值指示 <see cref="T:System.Type" /> 是否声明为密封的。</summary>
      <returns>如果 <see langword="true" /> 被声明为密封的，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsSecurityCritical">
      <summary>获取一个值，该值指示当前的类型在当前信任级别上是安全关键的还是安全可靠关键的，并因此可以执行关键操作。</summary>
      <returns>如果当前类型在当前信任级别上是安全关键的或安全可靠关键的，则为 <see langword="true" />；如果它是透明的，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsSecuritySafeCritical">
      <summary>获取一个值，该值指示当前类型在当前信任级别上是否是安全可靠关键的；即它是否可以执行关键操作并可以由透明代码访问。</summary>
      <returns>如果当前类型在当前信任级别上是安全可靠关键的，则为 <see langword="true" />；如果它是安全关键的或透明的，则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsSecurityTransparent">
      <summary>获取一个值，该值指示当前类型在当前信任级别上是否是透明的而无法执行关键操作。</summary>
      <returns>如果该类型在当前信任级别上是安全透明的，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsSerializable">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否为可序列化的。</summary>
      <returns>如果 <see cref="T:System.Type" /> 是可序列化的，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsSignatureType" />
    <member name="P:System.Type.IsSpecialName">
      <summary>获取一个值，该值指示该类型是否具有需要特殊处理的名称。</summary>
      <returns>如果该类型具有需要特殊处理的名称，则为<see langword="true" /> ；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.IsSubclassOf(System.Type)">
      <summary>确定当前 <see cref="T:System.Type" /> 是否派生自指定的 <see cref="T:System.Type" />。</summary>
      <param name="c">要与当前类型进行比较的类型。</param>
      <returns>如果当前 <see langword="true" /> 派生于 <see langword="Type" />，则为 <paramref name="c" />；否则为 <see langword="false" />。 如果 <see langword="false" /> 和当前 <paramref name="c" /> 相等，此方法也返回 <see langword="Type" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Type.IsSZArray" />
    <member name="P:System.Type.IsTypeDefinition" />
    <member name="P:System.Type.IsUnicodeClass">
      <summary>获取一个值，该值指示是否为 <see langword="UnicodeClass" /> 选择了字符串格式属性 <see cref="T:System.Type" />。</summary>
      <returns>如果为 <see langword="true" /> 选择了字符串格式属性 <see langword="UnicodeClass" />，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsValueType">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Type" /> 是否为值类型。</summary>
      <returns>如果 <see langword="true" /> 是值类型，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.IsValueTypeImpl">
      <summary>实现 <see cref="P:System.Type.IsValueType" /> 属性并确定 <see cref="T:System.Type" /> 是否是值类型；即，它不是值类或接口。</summary>
      <returns>如果 <see langword="true" /> 是值类型，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.IsVariableBoundArray" />
    <member name="P:System.Type.IsVisible">
      <summary>获取一个指示 <see cref="T:System.Type" /> 是否可由程序集之外的代码访问的值。</summary>
      <returns>如果当前 <see langword="true" /> 是公共类型或公共嵌套类型从而使所有封闭类型都是公共类型，则为 <see cref="T:System.Type" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.MakeArrayType">
      <summary>返回 <see cref="T:System.Type" /> 对象，该对象表示当前类型的一维数组（下限为零）。</summary>
      <returns>返回一个表示当前类型的一维数组（下限为零）的 <see cref="T:System.Type" /> 对象。</returns>
      <exception cref="T:System.NotSupportedException">基类不支持调用的方法。 派生类必须提供一个实现。</exception>
      <exception cref="T:System.TypeLoadException">当前的类型是 <see cref="T:System.TypedReference" />。  

或 - 
当前的类型是 <see langword="ByRef" /> 类型。 也就是说，<see cref="P:System.Type.IsByRef" /> 返回 <see langword="true" />。</exception>
    </member>
    <member name="M:System.Type.MakeArrayType(System.Int32)">
      <summary>返回 <see cref="T:System.Type" /> 对象，该对象表示一个具有指定维数的当前类型的数组。</summary>
      <param name="rank">数组的维数。 此数字必须小于或等于 32。</param>
      <returns>表示当前类型的指定维数的数组的对象。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> 无效。 例如，0 或负数。</exception>
      <exception cref="T:System.NotSupportedException">基类不支持调用的方法。</exception>
      <exception cref="T:System.TypeLoadException">当前的类型是 <see cref="T:System.TypedReference" />。  

或 - 
当前的类型是 <see langword="ByRef" /> 类型。 也就是说，<see cref="P:System.Type.IsByRef" /> 返回 <see langword="true" />。  

或 - 
<paramref name="rank" /> 大于 32。</exception>
    </member>
    <member name="M:System.Type.MakeByRefType">
      <summary>返回表示作为 <see cref="T:System.Type" /> 参数（在 Visual Basic 中为 <see langword="ref" /> 参数）传递时的当前类型的 <see langword="ByRef" /> 对象。</summary>
      <returns>表示作为 <see cref="T:System.Type" /> 参数（在 Visual Basic 中为 <see langword="ref" /> 参数）传递时的当前类型的 <see langword="ByRef" /> 对象。</returns>
      <exception cref="T:System.NotSupportedException">基类不支持调用的方法。</exception>
      <exception cref="T:System.TypeLoadException">当前的类型是 <see cref="T:System.TypedReference" />。  
或 
当前的类型是 <see langword="ByRef" /> 类型。 也就是说，<see cref="P:System.Type.IsByRef" /> 返回 <see langword="true" />。</exception>
    </member>
    <member name="M:System.Type.MakeGenericMethodParameter(System.Int32)">
      <param name="position" />
    </member>
    <member name="M:System.Type.MakeGenericSignatureType(System.Type,System.Type[])">
      <summary>创建一个泛型签名类型，该类型允许第三方重新实现反射，从而完全支持在查询类型成员时使用签名类型。</summary>
      <param name="genericTypeDefinition">泛型类型定义。</param>
      <param name="typeArguments">类型参数数组。</param>
      <returns>泛型签名类型。</returns>
    </member>
    <member name="M:System.Type.MakeGenericType(System.Type[])">
      <summary>替代由当前泛型类型定义的类型参数组成的类型数组的元素，并返回表示结果构造类型的 <see cref="T:System.Type" /> 对象。</summary>
      <param name="typeArguments">将代替当前泛型类型的类型参数的类型数组。</param>
      <returns>
        <see cref="T:System.Type" /> 表示的构造类型通过以下方式形成：用 <paramref name="typeArguments" /> 的元素取代当前泛型类型的类型参数。</returns>
      <exception cref="T:System.InvalidOperationException">当前的类型不表示泛型类型定义。 也就是说，<see cref="P:System.Type.IsGenericTypeDefinition" /> 返回 <see langword="false" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> 为 <see langword="null" />。  
或 
<paramref name="typeArguments" /> 的任意元素为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArguments" /> 中的元素数与当前泛型类型定义中的类型参数数不同。  
或 
<paramref name="typeArguments" /> 的所有元素都不满足为当前泛型类型的相应类型参数指定的约束。  
或 
 <paramref name="typeArguments" /> 包含一个元素，该元素是一个指针类型（<see cref="P:System.Type.IsPointer" /> 返回 <see langword="true" />）、by-ref 类型（<see cref="P:System.Type.IsByRef" /> 返回 <see langword="true" />）或 <see cref="T:System.Void" />。</exception>
      <exception cref="T:System.NotSupportedException">基类不支持调用的方法。 派生类必须提供一个实现。</exception>
    </member>
    <member name="M:System.Type.MakePointerType">
      <summary>返回表示指向当前类型的指针的 <see cref="T:System.Type" /> 对象。</summary>
      <returns>表示指向当前类型的指针的 <see cref="T:System.Type" /> 对象。</returns>
      <exception cref="T:System.NotSupportedException">基类不支持调用的方法。</exception>
      <exception cref="T:System.TypeLoadException">当前的类型是 <see cref="T:System.TypedReference" />。  
或 
当前的类型是 <see langword="ByRef" /> 类型。 也就是说，<see cref="P:System.Type.IsByRef" /> 返回 <see langword="true" />。</exception>
    </member>
    <member name="P:System.Type.MemberType">
      <summary>获取一个指示此成员是类型还是嵌套类型的 <see cref="T:System.Reflection.MemberTypes" /> 值。</summary>
      <returns>一个 <see cref="T:System.Reflection.MemberTypes" /> 值，指示此成员是类型还是嵌套类型。</returns>
    </member>
    <member name="F:System.Type.Missing">
      <summary>表示 <see cref="T:System.Type" /> 信息中的缺少值。 此字段为只读。</summary>
    </member>
    <member name="P:System.Type.Module">
      <summary>获取在其中定义当前 <see cref="T:System.Type" /> 的模块 (DLL)。</summary>
      <returns>在其中定义当前 <see cref="T:System.Type" /> 的模块。</returns>
    </member>
    <member name="P:System.Type.Namespace">
      <summary>获取 <see cref="T:System.Type" /> 的命名空间。</summary>
      <returns>
        <see cref="T:System.Type" /> 的命名空间；如果当前实例没有命名空间或表示泛型参数，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Type.op_Equality(System.Type,System.Type)">
      <summary>指示两个 <see cref="T:System.Type" /> 对象是否相等。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <see langword="true" /> 等于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Type.op_Inequality(System.Type,System.Type)">
      <summary>指示两个 <see cref="T:System.Type" /> 对象是否不相等。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <see langword="true" /> 不等于 <paramref name="left" />，则为 <paramref name="right" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Type.ReflectedType">
      <summary>获取用于获取该成员的类对象。</summary>
      <returns>
        <see langword="Type" /> 对象，通过它获取了此 <see cref="T:System.Type" /> 对象。</returns>
    </member>
    <member name="M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)">
      <summary>获取具有指定名称的 <see cref="T:System.Type" />，指定是否执行区分大小写的搜索，以及在找不到类型时是否引发异常。 该类型只为反射加载，而不为执行加载。</summary>
      <param name="typeName">要获取的 <see cref="T:System.Type" /> 的程序集限定名称。</param>
      <param name="throwIfNotFound">如果为 <see langword="true" />，则会在找不到该类型时引发 <see cref="T:System.TypeLoadException" />；如果为 <see langword="false" />，则在找不到该类型时返回 <see langword="null" />。 指定 <see langword="false" /> 还会取消某些其他异常条件，但并不取消所有条件。 请参见“异常”部分。</param>
      <param name="ignoreCase">如果为 <see langword="true" />，则执行不区分大小写的 <paramref name="typeName" /> 搜索；如果为 <see langword="false" />，则执行区分大小写的 <paramref name="typeName" /> 搜索。</param>
      <returns>具有指定名称的类型（如果找到的话）；否则为 <see langword="null" />。 如果找不到该类型，则 <paramref name="throwIfNotFound" /> 参数指定是返回 <see langword="null" /> 还是引发异常。 在某些情况下，将引发异常，而不考虑 <paramref name="throwIfNotFound" /> 的值。 请参见“异常”部分。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">调用了类初始值设定项，且该项引发了异常。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwIfNotFound" /> 是 <see langword="true" />，且找不到该类型。  
或 
 <paramref name="throwIfNotFound" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 包含无效字符，例如嵌入的制表符。 
或 
 <paramref name="throwIfNotFound" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 为空字符串。  
或 
 <paramref name="throwIfNotFound" /> 的值为 <see langword="true" />，且 <paramref name="typeName" /> 表示大小无效的数组类型。  
或 
 <paramref name="typeName" /> 表示 <see cref="T:System.TypedReference" /> 对象数组。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> 不包括程序集名称。  
或 
 <paramref name="throwIfNotFound" /> 为 <see langword="true" />，且 <paramref name="typeName" /> 包含无效的语法（例如 "MyType[,*,]"）。  
或 
 <paramref name="typeName" /> 表示将指针类型、<see langword="ByRef" /> 类型或 <see cref="T:System.Void" /> 作为其类型参数之一的泛型类型。  
或 
 <paramref name="typeName" /> 表示具有错误的类型参数数目的泛型类型。  
或 
 <paramref name="typeName" /> 表示泛型类型，并且其类型参数之一不满足相应类型参数的约束。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="throwIfNotFound" /> 的值为 <see langword="true" />，且未找到程序集或程序集的某个依赖项。</exception>
      <exception cref="T:System.IO.FileLoadException">找到了程序集或其依赖项之一，但无法加载它们。</exception>
      <exception cref="T:System.BadImageFormatException">程序集或其依赖项之一无效。  

或 -  

 此程序集使用高于当前所加载版本的公共语言运行时版本编译而成。</exception>
      <exception cref="T:System.PlatformNotSupportedException">仅限 .NET Core：不支持此成员。</exception>
    </member>
    <member name="P:System.Type.StructLayoutAttribute">
      <summary>获取一个描述当前类型的布局的 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />。</summary>
      <returns>获取一个描述当前类型的大致布局特性的 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />。</returns>
      <exception cref="T:System.NotSupportedException">基类不支持调用的方法。</exception>
    </member>
    <member name="M:System.Type.ToString">
      <summary>返回表示当前 <see langword="String" /> 的名称的 <see langword="Type" />。</summary>
      <returns>表示当前 <see cref="T:System.String" /> 的名称的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Type.TypeHandle">
      <summary>获取当前 <see cref="T:System.Type" /> 的句柄。</summary>
      <returns>当前 <see cref="T:System.Type" /> 的句柄。</returns>
      <exception cref="T:System.NotSupportedException">.NET Compact Framework 当前不支持此属性。</exception>
    </member>
    <member name="P:System.Type.TypeInitializer">
      <summary>获取该类型的初始值设定项。</summary>
      <returns>包含 <see cref="T:System.Type" /> 的类构造函数的名称的对象。</returns>
    </member>
    <member name="P:System.Type.UnderlyingSystemType">
      <summary>指示表示该类型的公共语言运行时提供的类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 的基础系统类型。</returns>
    </member>
    <member name="T:System.TypeAccessException">
      <summary>当方法试图使用它无权访问的类型时引发的异常。</summary>
    </member>
    <member name="M:System.TypeAccessException.#ctor">
      <summary>使用由系统提供的用于描述错误的消息初始化 <see cref="T:System.TypeAccessException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.TypeAccessException" /> 类的新实例。</summary>
      <param name="info">包含序列化数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.TypeAccessException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.TypeAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.TypeAccessException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方必须确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.TypeCode">
      <summary>指定对象的类型。</summary>
    </member>
    <member name="F:System.TypeCode.Boolean">
      <summary>简单类型，表示 <see langword="true" /> 或 <see langword="false" /> 的布尔值。</summary>
    </member>
    <member name="F:System.TypeCode.Byte">
      <summary>整型，表示值介于 0 到 255 之间的无符号 8 位整数。</summary>
    </member>
    <member name="F:System.TypeCode.Char">
      <summary>整型，表示值介于 0 到 65535 之间的 16 位无符号整数。 <see cref="F:System.TypeCode.Char" /> 类型的可能值集与 Unicode 字符集相对应。</summary>
    </member>
    <member name="F:System.TypeCode.DateTime">
      <summary>表示一个日期和时间值的类型。</summary>
    </member>
    <member name="F:System.TypeCode.DBNull">
      <summary>数据库空（列）值。</summary>
    </member>
    <member name="F:System.TypeCode.Decimal">
      <summary>简单类型，表示从 1.0 x 10 -28 到大约 7.9 x 10 28 且有效位数为 28 到 29 位的值。</summary>
    </member>
    <member name="F:System.TypeCode.Double">
      <summary>浮点型，表示从大约 5.0 x 10 -324 到 1.7 x 10 308 且精度为 15 到 16 位的值。</summary>
    </member>
    <member name="F:System.TypeCode.Empty">
      <summary>一个空引用。</summary>
    </member>
    <member name="F:System.TypeCode.Int16">
      <summary>整型，表示值介于 -32768 到 32767 之间的有符号 16 位整数。</summary>
    </member>
    <member name="F:System.TypeCode.Int32">
      <summary>整型，表示值介于 -2147483648 到 2147483647 之间的 32 位有符号整数。</summary>
    </member>
    <member name="F:System.TypeCode.Int64">
      <summary>整型，表示值介于-9223372036854775808 和 9223372036854775807 之间的 64 位有符号整数。</summary>
    </member>
    <member name="F:System.TypeCode.Object">
      <summary>常规类型，表示不会由另一个 <see langword="TypeCode" /> 显式表示的任何引用或值类型。</summary>
    </member>
    <member name="F:System.TypeCode.SByte">
      <summary>整型，表示值介于 -128 到 127 之间的 8 位有符号整数。</summary>
    </member>
    <member name="F:System.TypeCode.Single">
      <summary>浮点型，表示从大约 1.5 x 10 -45 到 3.4 x 10 38 且精度为 7 位的值。</summary>
    </member>
    <member name="F:System.TypeCode.String">
      <summary>密封类类型，表示 Unicode 字符串。</summary>
    </member>
    <member name="F:System.TypeCode.UInt16">
      <summary>整型，表示值介于 0 到 65535 之间的 16 位无符号整数。</summary>
    </member>
    <member name="F:System.TypeCode.UInt32">
      <summary>整型，表示值介于 0 到 4294967295 之间的 32 位无符号整数。</summary>
    </member>
    <member name="F:System.TypeCode.UInt64">
      <summary>整型，表示值介于 0 到 18446744073709551615 之间的 64 位无符号整数。</summary>
    </member>
    <member name="T:System.TypedReference">
      <summary>描述既包含指向某位置的托管指针，也包含该位置可能存储的类型的运行时表示形式的对象。</summary>
    </member>
    <member name="M:System.TypedReference.Equals(System.Object)">
      <summary>检查该对象是否等于指定对象。</summary>
      <param name="o">用于和当前对象进行比较的对象。</param>
      <returns>如果该对象等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">未实现此方法。</exception>
    </member>
    <member name="M:System.TypedReference.GetHashCode">
      <summary>返回此对象的哈希代码。</summary>
      <returns>此对象的哈希代码。</returns>
    </member>
    <member name="M:System.TypedReference.GetTargetType(System.TypedReference)">
      <summary>返回指定 <see langword="TypedReference" /> 的目标类型。</summary>
      <param name="value">要返回其目标类型的值。</param>
      <returns>指定 <see langword="TypedReference" /> 的目标类型。</returns>
    </member>
    <member name="M:System.TypedReference.MakeTypedReference(System.Object,System.Reflection.FieldInfo[])">
      <summary>为由指定对象和字段说明列表标识的字段生成 <see langword="TypedReference" />。</summary>
      <param name="target">包含由 <paramref name="flds" /> 的第一个元素说明的字段的对象。</param>
      <param name="flds">字段说明列表，其中每个元素说明的字段均包含了由后续元素说明的字段。 每个说明的字段都必须是值类型。 字段说明必须是类型系统所提供的 <see langword="RuntimeFieldInfo" /> 对象。</param>
      <returns>由 <paramref name="flds" /> 的最后一个元素说明的字段的 <see cref="T:System.TypedReference" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> 或 <paramref name="flds" /> 为 <see langword="null" />。  
或 
<paramref name="flds" /> 的元素为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="flds" /> 数组没有元素。  
或 
<paramref name="flds" /> 的元素不是一个 <see langword="RuntimeFieldInfo" /> 对象。  
或 
<paramref name="flds" /> 元素的 <see cref="P:System.Reflection.FieldInfo.IsInitOnly" /> 或 <see cref="P:System.Reflection.FieldInfo.IsStatic" /> 属性为 <see langword="true" />。</exception>
      <exception cref="T:System.MissingMemberException">参数 <paramref name="target" /> 不包含下面这样的元素所说明的字段：<paramref name="flds" /> 的第一个元素；或者 <paramref name="flds" /> 的这样一种元素：它说明了一个字段，而 <paramref name="flds" /> 的后续元素说明的字段中不包含该字段。  
或 
由 <paramref name="flds" /> 的元素说明的字段不是值类型。</exception>
    </member>
    <member name="M:System.TypedReference.SetTypedReference(System.TypedReference,System.Object)">
      <summary>将指定值转换为 <see langword="TypedReference" />。 不支持此方法。</summary>
      <param name="target">转换的目标。</param>
      <param name="value">要转换的值。</param>
      <exception cref="T:System.NotSupportedException">在所有情况下。</exception>
    </member>
    <member name="M:System.TypedReference.TargetTypeToken(System.TypedReference)">
      <summary>返回指定 <see langword="TypedReference" /> 的内部元数据类型句柄。</summary>
      <param name="value">请求该类型句柄的 <see langword="TypedReference" />。</param>
      <returns>指定 <see langword="TypedReference" /> 的内部元数据类型句柄。</returns>
    </member>
    <member name="M:System.TypedReference.ToObject(System.TypedReference)">
      <summary>将指定 <see langword="TypedReference" /> 转换为 <see langword="Object" />。</summary>
      <param name="value">要转换的 <see langword="TypedReference" />。</param>
      <returns>
        <see cref="T:System.Object" />，转换自 <see langword="TypedReference" />。</returns>
    </member>
    <member name="T:System.TypeInitializationException">
      <summary>作为类初始值设定项引发的异常的包装器而引发的异常。 此类不能被继承。</summary>
    </member>
    <member name="M:System.TypeInitializationException.#ctor(System.String,System.Exception)">
      <summary>用默认错误消息、指定的类型名称和对内部异常（为该异常的根源）的引用来初始化 <see cref="T:System.TypeInitializationException" /> 类的新实例。</summary>
      <param name="fullTypeName">未能初始化类型的完全限定名。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>设置带有文件名和附加异常信息的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
    </member>
    <member name="P:System.TypeInitializationException.TypeName">
      <summary>获取未能初始化类型的完全限定名。</summary>
      <returns>未能初始化类型的完全限定名。</returns>
    </member>
    <member name="T:System.TypeLoadException">
      <summary>类型加载失败发生时引发的异常。</summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor">
      <summary>初始化 <see cref="T:System.TypeLoadException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.TypeLoadException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 对象为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.TypeLoadException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.TypeLoadException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.TypeLoadException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="M:System.TypeLoadException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用类名、方法名称、资源 ID 和附加异常信息来设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 对象为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.TypeLoadException.Message">
      <summary>获取此异常的错误消息。</summary>
      <returns>错误消息字符串。</returns>
    </member>
    <member name="P:System.TypeLoadException.TypeName">
      <summary>获取导致异常的类型的完全限定名。</summary>
      <returns>完全限定的类型名。</returns>
    </member>
    <member name="T:System.TypeUnloadedException">
      <summary>尝试访问已卸载的类时所引发的异常。</summary>
    </member>
    <member name="M:System.TypeUnloadedException.#ctor">
      <summary>初始化 <see cref="T:System.TypeUnloadedException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.TypeUnloadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.TypeUnloadedException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.TypeUnloadedException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.TypeUnloadedException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.TypeUnloadedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.TypeUnloadedException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="T:System.UInt16">
      <summary>表示 16 位无符号整数。</summary>
    </member>
    <member name="M:System.UInt16.CompareTo(System.Object)">
      <summary>将此实例与指定对象进行比较并返回一个对二者的相对值的指示。</summary>
      <param name="value">要比较的对象，或为 <see langword="null" />。</param>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。  
  返回值 
  说明 
  小于零 
  此实例小于 <paramref name="value" />。  

  零 
  此实例等于 <paramref name="value" />。  

  大于零 
  此实例大于 <paramref name="value" />。  

或 
 <paramref name="value" /> 为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.UInt16" />。</exception>
    </member>
    <member name="M:System.UInt16.CompareTo(System.UInt16)">
      <summary>将此实例与指定的 16 位无符号整数进行比较并返回对其相对值的指示。</summary>
      <param name="value">要比较的无符号整数。</param>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。  
  返回值 
  说明 
  小于零 
  此实例小于 <paramref name="value" />。  

  零 
  此实例等于 <paramref name="value" />。  

  大于零 
  此实例大于 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.UInt16.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="obj">要与此实例进行比较的对象。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.UInt16" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UInt16.Equals(System.UInt16)">
      <summary>返回一个值，该值指示此实例是否等于指定的 <see cref="T:System.UInt16" /> 值。</summary>
      <param name="obj">要与此实例进行比较的 16 位无符号整数。</param>
      <returns>如果 <see langword="true" /> 的值与此实例相同，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UInt16.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.UInt16.GetTypeCode">
      <summary>返回值类型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.UInt16" />。</summary>
      <returns>枚举常数 <see cref="F:System.TypeCode.UInt16" />。</returns>
    </member>
    <member name="F:System.UInt16.MaxValue">
      <summary>表示 <see cref="T:System.UInt16" />的最大可能值。 此字段为常数。</summary>
    </member>
    <member name="F:System.UInt16.MinValue">
      <summary>表示 <see cref="T:System.UInt16" /> 的最小可能值。 此字段为常数。</summary>
    </member>
    <member name="M:System.UInt16.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.UInt16.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 16 位无符号整数。</summary>
      <param name="s">表示要转换的数字的字符串。</param>
      <returns>与 <paramref name="s" /> 中包含的数字等效的 16 位无符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 16 位无符号整数。  
此方法与 CLS 不兼容。 符合 CLS 的替代方法是 <see cref="M:System.Int32.Parse(System.String,System.Globalization.NumberStyles)" />。</summary>
      <param name="s">表示要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，这些枚举值指定 <paramref name="s" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 16 位无符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  

或 - 
<paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。  
或 
 <paramref name="s" /> 包含非零的小数位。</exception>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 16 位无符号整数。</summary>
      <param name="s">表示要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 16 位无符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
或 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。  
或 
 <paramref name="s" /> 包含非零的小数位。</exception>
    </member>
    <member name="M:System.UInt16.Parse(System.String,System.IFormatProvider)">
      <summary>将指定区域性特定格式的数字的字符串表示形式转换为它的等效 16 位无符号整数。</summary>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 16 位无符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>如果当前实例的值不为零，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Byte" />。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>转换为 <see cref="T:System.Decimal" /> 的该实例的当前值。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>转换为 <see cref="T:System.Double" /> 的该实例的当前值。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>转换为 <see cref="T:System.Int16" /> 的该实例的当前值。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>转换为 <see cref="T:System.Int32" /> 的该实例的值。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>转换为 <see cref="T:System.Int64" /> 的该实例的当前值。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>转换为 <see cref="T:System.SByte" /> 的该实例的当前值。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>转换为 <see cref="T:System.Single" /> 的该实例的当前值。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">此 <see cref="T:System.UInt16" /> 值要转换为的类型。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 实现，提供有关返回值格式的信息。</param>
      <returns>转换为 <paramref name="type" /> 的该实例的当前值。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>该实例的当前值（未更改）。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>转换为 <see cref="T:System.UInt32" /> 的该实例的当前值。</returns>
    </member>
    <member name="M:System.UInt16.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>转换为 <see cref="T:System.UInt64" /> 的该实例的当前值。</returns>
    </member>
    <member name="M:System.UInt16.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由范围从 0 到 9 的数字序列组成，不包含符号或前导零。</returns>
    </member>
    <member name="M:System.UInt16.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>此实例的值的字符串表示形式，由范围从 0 到 9 的数字序列组成，不包含符号或前导零。</returns>
    </member>
    <member name="M:System.UInt16.ToString(System.String)">
      <summary>使用指定的格式将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="format">一个数值格式字符串。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 参数无效。</exception>
    </member>
    <member name="M:System.UInt16.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="format">一个数值格式字符串。</param>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。</exception>
    </member>
    <member name="M:System.UInt16.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.UInt16.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.UInt16.TryParse(System.ReadOnlySpan{System.Char},System.UInt16@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt16@)">
      <summary>尝试将数字的指定样式和区域性特定格式的字符串表示形式转换为其等效的 16 位无符号整数。 一个指示转换是否成功的返回值。</summary>
      <param name="s">表示要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所含数字等效的 16 位无符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、格式不符合 <paramref name="style" />，或者表示的数字小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" />，则转换失败。 此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  

或 - 
<paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
    </member>
    <member name="M:System.UInt16.TryParse(System.String,System.UInt16@)">
      <summary>尝试将数字的字符串表示形式转换为等效的 16 位无符号整数。 一个指示转换是否成功的返回值。</summary>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所含数字等效的 16 位无符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" /> 的格式不正确，则转换失败。 ，或者表示小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /> 的数字。 此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.UInt32">
      <summary>表示 32 位无符号整数。</summary>
    </member>
    <member name="M:System.UInt32.CompareTo(System.Object)">
      <summary>将此实例与指定对象进行比较并返回一个对二者的相对值的指示。</summary>
      <param name="value">要比较的对象，或为 <see langword="null" />。</param>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。  
  返回值 
  说明 
  小于零 
  此实例小于 <paramref name="value" />。  

  零 
  此实例等于 <paramref name="value" />。  

  大于零 
  此实例大于 <paramref name="value" />。  

或 
 <paramref name="value" /> 为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.UInt32" />。</exception>
    </member>
    <member name="M:System.UInt32.CompareTo(System.UInt32)">
      <summary>将此实例与指定的 32 位无符号整数进行比较并返回对其相对值的指示。</summary>
      <param name="value">要比较的无符号整数。</param>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。  
  返回值 
  说明 
  小于零 
  此实例小于 <paramref name="value" />。  

  零 
  此实例等于 <paramref name="value" />。  

  大于零 
  此实例大于 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.UInt32.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="obj">与此实例进行比较的对象。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.UInt32" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UInt32.Equals(System.UInt32)">
      <summary>返回一个值，该值指示此实例是否与指定的 <see cref="T:System.UInt32" /> 相等。</summary>
      <param name="obj">要与此实例进行比较的值。</param>
      <returns>如果 <see langword="true" /> 的值与此实例相同，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UInt32.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.UInt32.GetTypeCode">
      <summary>返回值类型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.UInt32" />。</summary>
      <returns>枚举常数 <see cref="F:System.TypeCode.UInt32" />。</returns>
    </member>
    <member name="F:System.UInt32.MaxValue">
      <summary>表示 <see cref="T:System.UInt32" />的最大可能值。 此字段为常数。</summary>
    </member>
    <member name="F:System.UInt32.MinValue">
      <summary>表示 <see cref="T:System.UInt32" /> 的最小可能值。 此字段为常数。</summary>
    </member>
    <member name="M:System.UInt32.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.UInt32.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 32 位无符号整数。</summary>
      <param name="s">一个字符串，表示要转换的数字。</param>
      <returns>与 <paramref name="s" /> 中包含的数字等效的 32 位无符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">参数 <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">参数 <paramref name="s" /> 表示一个小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 32 位无符号整数。</summary>
      <param name="s">一个字符串，表示要转换的数字。 该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，这些枚举值指定 <paramref name="s" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 32 位无符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
或 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。  

或 - 
<paramref name="s" /> 包含非零的小数位。</exception>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 32 位无符号整数。</summary>
      <param name="s">一个字符串，表示要转换的数字。 该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 32 位无符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
或 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。  
或 
 <paramref name="s" /> 包含非零的小数位。</exception>
    </member>
    <member name="M:System.UInt32.Parse(System.String,System.IFormatProvider)">
      <summary>将指定区域性特定格式的数字的字符串表示形式转换为它的等效 32 位无符号整数。</summary>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 32 位无符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 的样式不正确。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> 表示一个小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>如果当前实例的值不为零，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Byte" />。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Decimal" />。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int16" />。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.SByte" />。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Single" />。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">此 <see cref="T:System.UInt32" /> 值要转换为的类型。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 实现，提供有关返回值格式的区域性特定信息。</param>
      <returns>当前实例的值，已转换为 <paramref name="type" />。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt16" />。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，未更改。</returns>
    </member>
    <member name="M:System.UInt32.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt64" />。</returns>
    </member>
    <member name="M:System.UInt32.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由一系列从 0 到 9 之间的数字组成，不包含符号或前导零。</returns>
    </member>
    <member name="M:System.UInt32.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>此实例的值的字符串表示形式，由范围从 0 到 9 的数字序列组成，不包含符号或前导零。</returns>
    </member>
    <member name="M:System.UInt32.ToString(System.String)">
      <summary>使用指定的格式将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="format">一个数值格式字符串。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 参数无效。</exception>
    </member>
    <member name="M:System.UInt32.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="format">一个数值格式字符串。</param>
      <param name="provider">一个对象，它提供有关此实例的区域性特定格式设置信息。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 参数无效。</exception>
    </member>
    <member name="M:System.UInt32.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.UInt32.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.UInt32.TryParse(System.ReadOnlySpan{System.Char},System.UInt32@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt32@)">
      <summary>尝试将数字的指定样式和区域性特定格式的字符串表示形式转换为其等效的 32 位无符号整数。 一个指示转换是否成功的返回值。</summary>
      <param name="s">表示要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所含数字等效的 32 位无符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、格式不符合 <paramref name="style" />，或者表示的数字小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" />，则转换失败。 此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
或 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
    </member>
    <member name="M:System.UInt32.TryParse(System.String,System.UInt32@)">
      <summary>尝试将数字的字符串表示形式转换为等效的 32 位无符号整数。 一个指示转换是否成功的返回值。</summary>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所含数字等效的 32 位无符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、格式不正确，或者表示的数字小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" />，则转换失败。 此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.UInt64">
      <summary>表示 64 位无符号整数。</summary>
    </member>
    <member name="M:System.UInt64.CompareTo(System.Object)">
      <summary>将此实例与指定对象进行比较并返回一个对二者的相对值的指示。</summary>
      <param name="value">要比较的对象，或为 <see langword="null" />。</param>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。  
  返回值 
  说明 
  小于零 
  此实例小于 <paramref name="value" />。  

  零 
  此实例等于 <paramref name="value" />。  

  大于零 
  此实例大于 <paramref name="value" />。  

- 或 - 
 <paramref name="value" /> 为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.UInt64" />。</exception>
    </member>
    <member name="M:System.UInt64.CompareTo(System.UInt64)">
      <summary>将此实例与指定的 64 位无符号整数进行比较并返回对其相对值的指示。</summary>
      <param name="value">要比较的无符号整数。</param>
      <returns>一个带符号数字，指示此实例和 <paramref name="value" /> 的相对值。  
  返回值 
  说明 
  小于零 
  此实例小于 <paramref name="value" />。  

  零 
  此实例等于 <paramref name="value" />。  

  大于零 
  此实例大于 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.UInt64.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="obj">要与此实例进行比较的对象。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.UInt64" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UInt64.Equals(System.UInt64)">
      <summary>返回一个值，该值指示此实例是否等于指定的 <see cref="T:System.UInt64" /> 值。</summary>
      <param name="obj">要与此实例进行比较的 <see cref="T:System.UInt64" /> 值。</param>
      <returns>如果 <see langword="true" /> 的值与此实例相同，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UInt64.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.UInt64.GetTypeCode">
      <summary>返回值类型 <see cref="T:System.TypeCode" /> 的 <see cref="T:System.UInt64" />。</summary>
      <returns>枚举常数 <see cref="F:System.TypeCode.UInt64" />。</returns>
    </member>
    <member name="F:System.UInt64.MaxValue">
      <summary>表示 <see cref="T:System.UInt64" />的最大可能值。 此字段为常数。</summary>
    </member>
    <member name="F:System.UInt64.MinValue">
      <summary>表示 <see cref="T:System.UInt64" /> 的最小可能值。 此字段为常数。</summary>
    </member>
    <member name="M:System.UInt64.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
    </member>
    <member name="M:System.UInt64.Parse(System.String)">
      <summary>将数字的字符串表示形式转换为它的等效 64 位无符号整数。</summary>
      <param name="s">表示要转换的数字的字符串。</param>
      <returns>与 <paramref name="s" /> 中包含的数字等效的 64 位无符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">参数 <paramref name="s" /> 的格式不正确。</exception>
      <exception cref="T:System.OverflowException">参数 <paramref name="s" /> 表示一个小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>将指定样式的数字的字符串表示形式转换为它的等效 64 位无符号整数。</summary>
      <param name="s">表示要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，这些枚举值指定 <paramref name="s" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 64 位无符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  

或 - 
<paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <exception cref="T:System.FormatException">参数 <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">参数 <paramref name="s" /> 表示一个小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。  
或 
 <paramref name="s" /> 包含非零的小数位。</exception>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>将指定样式和区域性特定格式的数字的字符串表示形式转换为它的等效 64 位无符号整数。</summary>
      <param name="s">表示要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的按位组合，用于指示可出现在 <paramref name="s" /> 中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 64 位无符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
或 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
      <exception cref="T:System.FormatException">参数 <paramref name="s" /> 的格式不符合 <paramref name="style" />。</exception>
      <exception cref="T:System.OverflowException">参数 <paramref name="s" /> 表示一个小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。  
或 
 <paramref name="s" /> 包含非零的小数位。</exception>
    </member>
    <member name="M:System.UInt64.Parse(System.String,System.IFormatProvider)">
      <summary>将指定区域性特定格式的数字的字符串表示形式转换为它的等效 64 位无符号整数。</summary>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <returns>与 <paramref name="s" /> 中指定的数字等效的 64 位无符号整数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> 参数的样式不正确。</exception>
      <exception cref="T:System.OverflowException">参数 <paramref name="s" /> 表示一个小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /> 的数字。</exception>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToBoolean(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>如果当前实例的值不为零，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Byte" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToChar(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>不支持此转换。 尝试使用此方法将引发 <see cref="T:System.InvalidCastException" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>不支持此转换。 不返回任何值。</returns>
      <exception cref="T:System.InvalidCastException">在所有情况下。</exception>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDecimal(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Decimal" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToDouble(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int16" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSByte(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.SByte" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToSingle(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.Single" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToType(System.Type,System.IFormatProvider)" />。</summary>
      <param name="type">此 <see cref="T:System.UInt64" /> 值要转换为的类型。</param>
      <param name="provider">一个 <see cref="T:System.IFormatProvider" /> 实现，提供有关返回值格式的信息。</param>
      <returns>当前实例的值，已转换为 <paramref name="type" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt16(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt16" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt32(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，已转换为 <see cref="T:System.UInt32" />。</returns>
    </member>
    <member name="M:System.UInt64.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.IConvertible.ToUInt64(System.IFormatProvider)" />。</summary>
      <param name="provider">忽略此参数。</param>
      <returns>当前实例的值，未更改。</returns>
    </member>
    <member name="M:System.UInt64.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式，由一系列从 0 到 9 之间的数字组成，不包含符号或前导零。</returns>
    </member>
    <member name="M:System.UInt64.ToString(System.IFormatProvider)">
      <summary>使用指定的区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
      <returns>此实例的值的字符串表示形式，由范围从 0 到 9 的数字序列组成，不包含符号或前导零。</returns>
    </member>
    <member name="M:System.UInt64.ToString(System.String)">
      <summary>使用指定的格式将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="format">一个数值格式字符串。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 参数无效。</exception>
    </member>
    <member name="M:System.UInt64.ToString(System.String,System.IFormatProvider)">
      <summary>使用指定的格式和区域性特定格式信息，将此实例的数值转换为它的等效字符串表示形式。</summary>
      <param name="format">一个数值格式字符串。</param>
      <param name="provider">一个对象，它提供有关此实例的区域性特定格式设置信息。</param>
      <returns>此实例的值的字符串表示形式，由 <paramref name="format" /> 和 <paramref name="provider" /> 指定。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 参数无效。</exception>
    </member>
    <member name="M:System.UInt64.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <param name="destination" />
      <param name="charsWritten" />
      <param name="format" />
      <param name="provider" />
    </member>
    <member name="M:System.UInt64.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)">
      <param name="s" />
      <param name="style" />
      <param name="provider" />
      <param name="result" />
    </member>
    <member name="M:System.UInt64.TryParse(System.ReadOnlySpan{System.Char},System.UInt64@)">
      <param name="s" />
      <param name="result" />
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.UInt64@)">
      <summary>尝试将数字的指定样式和区域性特定格式的字符串表示形式转换为其等效的 64 位无符号整数。 一个指示转换是否成功的返回值。</summary>
      <param name="s">表示要转换的数字的字符串。 该字符串使用由 <paramref name="style" /> 参数指定的样式来进行解释。</param>
      <param name="style">枚举值的一个按位组合，指示 <paramref name="s" /> 所允许的格式。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" />。</param>
      <param name="provider">一个对象，提供有关 <paramref name="s" /> 的区域性特定格式设置信息。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所含数字等效的 64 位无符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、格式不符合 <paramref name="style" />，或者表示的数字小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" />，则转换失败。 此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> 不是 <see cref="T:System.Globalization.NumberStyles" /> 值。  
或 
 <paramref name="style" /> 不是 <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> 和 <see cref="F:System.Globalization.NumberStyles.HexNumber" /> 值的组合。</exception>
    </member>
    <member name="M:System.UInt64.TryParse(System.String,System.UInt64@)">
      <summary>尝试将数字的字符串表示形式转换为等效的 64 位无符号整数。 一个指示转换是否成功的返回值。</summary>
      <param name="s">表示要转换的数字的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="s" /> 中所含数字等效的 64 位无符号整数值；如果转换失败，则包含零。 如果 <paramref name="s" /> 参数为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、格式不正确，或者表示的数字小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" />，则转换失败。 此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</param>
      <returns>如果 <see langword="true" /> 成功转换，则为 <paramref name="s" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.UIntPtr">
      <summary>用于表示指针或句柄的平台特定类型。</summary>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt32)">
      <summary>使用指定的 32 位指针或句柄初始化 <see cref="T:System.UIntPtr" /> 的新实例。</summary>
      <param name="value">包含于 32 位无符号整数中的指针或句柄。</param>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.UInt64)">
      <summary>使用指定的 64 位指针或句柄初始化 <see cref="T:System.UIntPtr" /> 的新实例。</summary>
      <param name="value">包含于 64 位无符号整数中的指针或句柄。</param>
      <exception cref="T:System.OverflowException">在 32 位的平台上，<paramref name="value" /> 太大，无法表示为一个 <see cref="T:System.UIntPtr" />。</exception>
    </member>
    <member name="M:System.UIntPtr.#ctor(System.Void*)">
      <summary>使用指定的指向未指定类型的指针初始化 <see cref="T:System.UIntPtr" /> 的新实例。</summary>
      <param name="value">指向未指定类型的指针。</param>
    </member>
    <member name="M:System.UIntPtr.Add(System.UIntPtr,System.Int32)">
      <summary>为无符号指针的值增加偏移量。</summary>
      <param name="pointer">要为其增加偏移量的无符号指针。</param>
      <param name="offset">要增加的偏移量。</param>
      <returns>新的无符号指针，反映向 <paramref name="offset" /> 增加 <paramref name="pointer" /> 的结果。</returns>
    </member>
    <member name="M:System.UIntPtr.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="obj">要与此示例比较的对象，或 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的实例并且等于此实例的值，则为 <see cref="T:System.UIntPtr" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UIntPtr.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.UIntPtr.op_Addition(System.UIntPtr,System.Int32)">
      <summary>为无符号指针的值增加偏移量。</summary>
      <param name="pointer">要为其增加偏移量的无符号指针。</param>
      <param name="offset">要增加的偏移量。</param>
      <returns>新的无符号指针，反映向 <paramref name="offset" /> 增加 <paramref name="pointer" /> 的结果。</returns>
    </member>
    <member name="M:System.UIntPtr.op_Equality(System.UIntPtr,System.UIntPtr)">
      <summary>确定 <see cref="T:System.UIntPtr" /> 的两个指定的实例是否相等。</summary>
      <param name="value1">要比较的第一个指针或句柄。</param>
      <param name="value2">要比较的第二个指针或句柄。</param>
      <returns>如果 <paramref name="value1" /> 等于 <paramref name="value2" />，则为 <see langword="true" />否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt32)~System.UIntPtr">
      <summary>将 32 位无符号整数的值转换成 <see cref="T:System.UIntPtr" />。</summary>
      <param name="value">32 位无符号整数。</param>
      <returns>初始化为 <see cref="T:System.UIntPtr" /> 的 <paramref name="value" /> 新实例。</returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UInt64)~System.UIntPtr">
      <summary>将 64 位无符号整数的值转换成 <see cref="T:System.UIntPtr" />。</summary>
      <param name="value">64 位无符号整数。</param>
      <returns>初始化为 <see cref="T:System.UIntPtr" /> 的 <paramref name="value" /> 新实例。</returns>
      <exception cref="T:System.OverflowException">在 32 位的平台上，<paramref name="value" /> 太大，无法表示为一个 <see cref="T:System.UIntPtr" />。</exception>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt32">
      <summary>将指定的 <see cref="T:System.UIntPtr" /> 的值转换为 32 位无符号整数。</summary>
      <param name="value">要转换的指针或句柄。</param>
      <returns>
        <paramref name="value" /> 的内容。</returns>
      <exception cref="T:System.OverflowException">在 64 位平台上，<paramref name="value" /> 的值太大，无法表示为 32 位无符号整数。</exception>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.UInt64">
      <summary>将指定的 <see cref="T:System.UIntPtr" /> 的值转换为 64 位无符号整数。</summary>
      <param name="value">要转换的指针或句柄。</param>
      <returns>
        <paramref name="value" /> 的内容。</returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.UIntPtr)~System.Void*">
      <summary>将指定的 <see cref="T:System.UIntPtr" /> 的值转换为指向未指定类型的指针。  
此 API 不兼容 CLS。</summary>
      <param name="value">要转换的指针或句柄。</param>
      <returns>
        <paramref name="value" /> 的内容。</returns>
    </member>
    <member name="M:System.UIntPtr.op_Explicit(System.Void*)~System.UIntPtr">
      <summary>将指向未指定类型的指定指针转换为 <see cref="T:System.UIntPtr" />。  
此 API 不兼容 CLS。</summary>
      <param name="value">指向未指定类型的指针。</param>
      <returns>初始化为 <see cref="T:System.UIntPtr" /> 的 <paramref name="value" /> 新实例。</returns>
    </member>
    <member name="M:System.UIntPtr.op_Inequality(System.UIntPtr,System.UIntPtr)">
      <summary>确定 <see cref="T:System.UIntPtr" /> 的两个指定的实例是否不等。</summary>
      <param name="value1">要比较的第一个指针或句柄。</param>
      <param name="value2">要比较的第二个指针或句柄。</param>
      <returns>如果 <paramref name="value1" /> 不等于 <paramref name="value2" />，则为 <see langword="true" />否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UIntPtr.op_Subtraction(System.UIntPtr,System.Int32)">
      <summary>从无符号指针的值中减去偏移量。</summary>
      <param name="pointer">要从中减去偏移量的无符号指针。</param>
      <param name="offset">要减去的偏移量。</param>
      <returns>新的无符号指针，反映从 <paramref name="offset" /> 中减去 <paramref name="pointer" /> 的结果。</returns>
    </member>
    <member name="P:System.UIntPtr.Size">
      <summary>获取此实例的大小。</summary>
      <returns>此平台上的指针或句柄的大小，按字节计。 此属性的值在 32 位平台上为 4，在 64 位平台上为 8。</returns>
    </member>
    <member name="M:System.UIntPtr.Subtract(System.UIntPtr,System.Int32)">
      <summary>从无符号指针的值中减去偏移量。</summary>
      <param name="pointer">要从中减去偏移量的无符号指针。</param>
      <param name="offset">要减去的偏移量。</param>
      <returns>新的无符号指针，反映从 <paramref name="offset" /> 中减去 <paramref name="pointer" /> 的结果。</returns>
    </member>
    <member name="M:System.UIntPtr.System#IEquatable{System#UIntPtr}#Equals(System.UIntPtr)">
      <param name="other" />
    </member>
    <member name="M:System.UIntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化当前的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象所需的所有数据填充 <see cref="T:System.UIntPtr" /> 对象。</summary>
      <param name="info">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">此序列化的目标。 （未使用此参数；指定 <see langword="null" />。）</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.UIntPtr.ToPointer">
      <summary>将此实例的值转换为指向未指定类型的指针。</summary>
      <returns>指向 <see cref="T:System.Void" /> 的指针，即是说，该指针所指向的内存包含有未指定类型的数据。</returns>
    </member>
    <member name="M:System.UIntPtr.ToString">
      <summary>将此实例的数值转换为其等效的字符串表示形式。</summary>
      <returns>此实例的值的字符串表示形式。</returns>
    </member>
    <member name="M:System.UIntPtr.ToUInt32">
      <summary>将此实例的值转换成 32 位无符号整数。</summary>
      <returns>等于此实例的值的 32 位无符号整数。</returns>
      <exception cref="T:System.OverflowException">在 64 位平台上，此实例的值太大，无法表示为 32 位无符号整数。</exception>
    </member>
    <member name="M:System.UIntPtr.ToUInt64">
      <summary>将此实例的值转换成 64 位无符号整数。</summary>
      <returns>等于此实例的值的 64 位无符号整数。</returns>
    </member>
    <member name="F:System.UIntPtr.Zero">
      <summary>表示已初始化为零的指针或句柄的只读字段。</summary>
    </member>
    <member name="T:System.UnauthorizedAccessException">
      <summary>当操作系统因 I/O 错误或指定类型的安全错误而拒绝访问时所引发的异常。</summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor">
      <summary>初始化 <see cref="T:System.UnauthorizedAccessException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.UnauthorizedAccessException" /> 类的新实例。</summary>
      <param name="info">包含有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.UnauthorizedAccessException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.UnauthorizedAccessException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.UnauthorizedAccessException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），则在处理内部异常的 <see langword="catch" /> 块中引发当前异常。</param>
    </member>
    <member name="T:System.UnhandledExceptionEventArgs">
      <summary>为以下情况下引发的事件提供数据：存在一个不是在任何应用程序域中处理的异常。</summary>
    </member>
    <member name="M:System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)">
      <summary>使用异常对象和公共语言运行时终止标志初始化 <see cref="T:System.UnhandledExceptionEventArgs" /> 类的新实例。</summary>
      <param name="exception">未处理的异常。</param>
      <param name="isTerminating">如果运行库即将终止，则为<see langword="true" /> ；否则为 <see langword="false" />。</param>
    </member>
    <member name="P:System.UnhandledExceptionEventArgs.ExceptionObject">
      <summary>获取未处理的异常对象。</summary>
      <returns>未处理的异常对象。</returns>
    </member>
    <member name="P:System.UnhandledExceptionEventArgs.IsTerminating">
      <summary>指示公共语言运行时是否即将终止。</summary>
      <returns>如果运行库即将终止，则为<see langword="true" /> ；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.UnhandledExceptionEventHandler">
      <summary>表示将处理事件的方法，该事件由应用程序域不处理的异常引发。</summary>
      <param name="sender">未处理的异常事件的源。</param>
      <param name="e">包含事件数据的 <c>UnhandledExceptionEventArgs</c>。</param>
    </member>
    <member name="T:System.Uri">
      <summary>提供统一资源标识符 (URI) 的对象表示形式和对 URI 各部分的轻松访问。</summary>
    </member>
    <member name="M:System.Uri.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Uri" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类的指定实例初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类的实例，包含序列化新的 <see cref="T:System.Uri" /> 实例所需的信息。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的实例，包含与新的 <see cref="T:System.Uri" /> 实例关联的序列化流的源。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationInfo" /> 参数包含 <see langword="null" /> URI。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="serializationInfo" /> 参数包含一个为空的 URI。  

或 - 
指定的方案形式不正确。 请参阅 <see cref="M:System.Uri.CheckSchemeName(System.String)" />。  

或 
该 URI 包含过多斜杠。  

或 - 
URI 中指定的密码无效。  

或 
URI 中指定的主机名无效。  

或 - 
URI 中指定的文件名无效。  

或 
URI 中指定的用户名无效。  
或 
URI 中指定的主机名或证书颁发机构名称不能以反斜杠结尾。  

或 - 
URI 中指定的端口号无效或无法分析。  

或 
URI 的长度超过 65519 个字符。  
或 
URI 中指定的方案的长度超过 1023 个字符。  
或 
URI 中存在无效的字符序列。  
或 
URI 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String)">
      <summary>用指定的 URI 初始化 <see cref="T:System.Uri" /> 类的新实例。</summary>
      <param name="uriString">标识将由 <see cref="T:System.Uri" /> 实例表示的资源的字符串。 请注意，必须用括号将字符串形式的 IPv6 地址括起来。 例如，“http://[2607:f8b0:400d:c06::69]”。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.UriFormatException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.FormatException" />。
          
          <paramref name="uriString" /> 为空。  
或 
<paramref name="uriString" /> 中指定的方案格式不正确。 请参阅 <see cref="M:System.Uri.CheckSchemeName(System.String)" />。  
或 
 <paramref name="uriString" /> 包含过多斜杠。  
或 
<paramref name="uriString" /> 中指定的密码无效。  

或 - 
<paramref name="uriString" /> 中指定的主机名无效。  

或 
<paramref name="uriString" /> 中指定的文件名无效。  

或 - 
<paramref name="uriString" /> 中指定的用户名无效。  

或 - 
<paramref name="uriString" /> 中指定的主机名或证书颁发机构名称不能以反斜杠结尾。  


或 
<paramref name="uriString" /> 中指定的端口号无效或无法分析。  

或 - 
<paramref name="uriString" /> 的长度超过 65519 个字符。  

或 
<paramref name="uriString" /> 中指定的方案的长度超过 1023 个字符。  

或 - 
<paramref name="uriString" /> 中存在无效的字符序列。  

或 - 
<paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.Boolean)">
      <summary>用指定的 URI 初始化 <see cref="T:System.Uri" /> 类的新实例，并对字符转义进行显式控制。</summary>
      <param name="uriString">标识将由 <see cref="T:System.Uri" /> 实例表示的资源的字符串。 请注意，必须用括号将字符串形式的 IPv6 地址括起来。 例如，“http://[2607:f8b0:400d:c06::69]”。</param>
      <param name="dontEscape">如果 <paramref name="uriString" /> 已完全转义，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="uriString" /> 为空或只包含空格。  

或 - 
在 <paramref name="uriString" /> 中指定的方案无效。  

或 
 <paramref name="uriString" /> 包含过多斜杠。  
或 
<paramref name="uriString" /> 中指定的密码无效。  
或 
<paramref name="uriString" /> 中指定的主机名无效。  
或 
<paramref name="uriString" /> 中指定的文件名无效。  
或 
<paramref name="uriString" /> 中指定的用户名无效。  

或 - 
<paramref name="uriString" /> 中指定的主机名或证书颁发机构名称不能以反斜杠结尾。  

或 - 
<paramref name="uriString" /> 中指定的端口号无效或无法分析。  


或 
<paramref name="uriString" /> 的长度超过 65519 个字符。  

或 - 
<paramref name="uriString" /> 中指定的方案的长度超过 1023 个字符。  

或 - 
<paramref name="uriString" /> 中存在无效的字符序列。  

或 - 
<paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.UriKind)">
      <summary>用指定的 URI 初始化 <see cref="T:System.Uri" /> 类的新实例。 此构造函数允许指定 URI 字符串是相对 URI、绝对 URI 还是不确定。</summary>
      <param name="uriString">标识将由 <see cref="T:System.Uri" /> 实例表示的资源的字符串。 请注意，必须用括号将字符串形式的 IPv6 地址括起来。 例如，“http://[2607:f8b0:400d:c06::69]”。</param>
      <param name="uriKind">指定 URI 字符串是相对 URI、绝对 URI 还是不确定。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="uriKind" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.UriFormatException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.FormatException" />。
          
          <paramref name="uriString" /> 包含相对 URI，而 <paramref name="uriKind" /> 为 <see cref="F:System.UriKind.Absolute" />。  
or 
 <paramref name="uriString" /> 包含绝对 URI，而 <paramref name="uriKind" /> 为 <see cref="F:System.UriKind.Relative" />。  
or 
 <paramref name="uriString" /> 为空。  

或 - 
<paramref name="uriString" /> 中指定的方案格式不正确。 请参阅 <see cref="M:System.Uri.CheckSchemeName(System.String)" />。  

或 
 <paramref name="uriString" /> 包含过多斜杠。  
或 
<paramref name="uriString" /> 中指定的密码无效。  
或 
<paramref name="uriString" /> 中指定的主机名无效。  

或 - 
<paramref name="uriString" /> 中指定的文件名无效。  

或 
<paramref name="uriString" /> 中指定的用户名无效。  
或 
<paramref name="uriString" /> 中指定的主机名或证书颁发机构名称不能以反斜杠结尾。  
或 
<paramref name="uriString" /> 中指定的端口号无效或无法分析。  
或 
<paramref name="uriString" /> 的长度超过 65519 个字符。  
或 
<paramref name="uriString" /> 中指定的方案的长度超过 1023 个字符。  

或 - 
<paramref name="uriString" /> 中存在无效的字符序列。  

或 
<paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String)">
      <summary>根据指定的基 URI 和相对 URI 字符串，初始化 <see cref="T:System.Uri" /> 类的新实例。</summary>
      <param name="baseUri">基 URI。</param>
      <param name="relativeUri">要添加到基 URI 的相对 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> 不是绝对的 <see cref="T:System.Uri" /> 实例。</exception>
      <exception cref="T:System.UriFormatException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.FormatException" />。
          
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 为空或仅包含空格。  
或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的方案无效。  
或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 包含过多的斜杠。  

或 - 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的密码无效。  

或 - 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的主机名无效。  


或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的文件名无效。  

或 - 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的用户名无效。  

或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的主机名或证书颁发机构名称不能以反斜杠终止。  
或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的端口号无效或无法分析。  
或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 的长度超过 65519 个字符。  
或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的方案长度超过 1023 个字符。  

或 - 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中存在无效字符序列。  

或 
<paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String,System.Boolean)">
      <summary>根据指定的基 URI 和相对 URI，初始化 <see cref="T:System.Uri" /> 类的新实例，并对字符转义进行显式控制。</summary>
      <param name="baseUri">基 URI。</param>
      <param name="relativeUri">要添加到基 URI 的相对 URI。</param>
      <param name="dontEscape">如果 <paramref name="uriString" /> 已完全转义，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> 不是绝对的 <see cref="T:System.Uri" /> 实例。</exception>
      <exception cref="T:System.UriFormatException">通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 为空或仅包含空格。  
或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的方案无效。  
或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 包含过多的斜杠。  
或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的密码无效。  
或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的主机名无效。  
或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的文件名无效。  
或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的用户名无效。  
或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的主机名或证书颁发机构名称不能以反斜杠终止。  
或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的端口号无效或无法分析。  
或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 的长度超过 65519 个字符。  
或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的方案长度超过 1023 个字符。  
或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中存在无效字符序列。  
或 
<paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.Uri)">
      <summary>根据指定的基 <see cref="T:System.Uri" /> 实例和相对 <see cref="T:System.Uri" /> 实例的组合，初始化 <see cref="T:System.Uri" /> 类的新实例。</summary>
      <param name="baseUri">作为新 <see cref="T:System.Uri" /> 实例的基的绝对 <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">与 <see cref="T:System.Uri" /> 组合的相对 <paramref name="baseUri" /> 实例。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="baseUri" /> 不是绝对的 <see cref="T:System.Uri" /> 实例。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> 不是绝对的 <see cref="T:System.Uri" /> 实例。</exception>
      <exception cref="T:System.UriFormatException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.FormatException" />。
          
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 为空或仅包含空格。  
或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的方案无效。  

或 - 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 包含过多的斜杠。  

或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的密码无效。  
或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的主机名无效。  
或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的文件名无效。  
或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的用户名无效。  
或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的主机名或证书颁发机构名称不能以反斜杠终止。  

或 - 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的端口号无效或无法分析。  

或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 的长度超过 65519 个字符。  
或 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的方案长度超过 1023 个字符。  

或 - 
通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中存在无效字符序列。  

或 
<paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="P:System.Uri.AbsolutePath">
      <summary>获取 URI 的绝对路径。</summary>
      <returns>包含资源的绝对路径的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
    </member>
    <member name="P:System.Uri.AbsoluteUri">
      <summary>获取绝对 URI。</summary>
      <returns>包含整个 URI 的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
    </member>
    <member name="P:System.Uri.Authority">
      <summary>获取服务器的域名系统 (DNS) 主机名或 IP 地址和端口号。</summary>
      <returns>包含此实例所表示的 URI 的证书颁发机构部分的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
    </member>
    <member name="M:System.Uri.Canonicalize">
      <summary>将内部存储的 URI 转换为规范化格式。</summary>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此方法仅对绝对 URI 有效。</exception>
      <exception cref="T:System.UriFormatException">URI 的格式不正确。</exception>
    </member>
    <member name="M:System.Uri.CheckHostName(System.String)">
      <summary>确定指定的主机名是否为有效的 DNS 名称。</summary>
      <param name="name">要验证的主机名。 可以是 IPv4 或 IPv6 地址或 Internet 主机名。</param>
      <returns>指示主机名类型的 <see cref="T:System.UriHostNameType" />。 如果无法确定主机名的类型，或者主机名为 <see langword="null" /> 或零长度字符串，则此方法返回 <see cref="F:System.UriHostNameType.Unknown" />。</returns>
    </member>
    <member name="M:System.Uri.CheckSchemeName(System.String)">
      <summary>确定指定的方案名是否有效。</summary>
      <param name="schemeName">要验证的方案名。</param>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果方案名有效，则该值为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Uri.CheckSecurity">
      <summary>调用此方法不起任何作用。</summary>
    </member>
    <member name="M:System.Uri.Compare(System.Uri,System.Uri,System.UriComponents,System.UriFormat,System.StringComparison)">
      <summary>使用指定的比较规则比较两个 URI 的指定部分。</summary>
      <param name="uri1">第一个 <see cref="T:System.Uri" />。</param>
      <param name="uri2">第二个 <see cref="T:System.Uri" />。</param>
      <param name="partsToCompare">
        <see cref="T:System.UriComponents" /> 值的按位组合，它指定要比较的 <paramref name="uri1" /> 和 <paramref name="uri2" /> 的部分。</param>
      <param name="compareFormat">
        <see cref="T:System.UriFormat" /> 值中的一个，它指定在比较 URI 部分时使用的字符转义。</param>
      <param name="comparisonType">
        <see cref="T:System.StringComparison" /> 值之一。</param>
      <returns>一个 <see cref="T:System.Int32" /> 值，指示进行比较的 <see cref="T:System.Uri" /> 部分之间的词法关系。  
  值 
  含义 
  小于零 
 <paramref name="uri1" /> 小于 <paramref name="uri2" />。  

  零 
 <paramref name="uri1" /> 等于 <paramref name="uri2" />。  

  大于零 
 <paramref name="uri1" /> 大于 <paramref name="uri2" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效的 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="P:System.Uri.DnsSafeHost">
      <summary>获得可安全用于 DNS 解析的未转义主机名（如必要）。</summary>
      <returns>一个<see cref="T:System.String" /> , 该字符串包含 URI 的主机部分, 格式适用于 DNS 解析; 如果该字符串已适用于解析, 则为原始主机字符串。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
    </member>
    <member name="M:System.Uri.Equals(System.Object)">
      <summary>比较两个 <see cref="T:System.Uri" /> 实例是否相等。</summary>
      <param name="comparand">与当前实例相比较的 <see cref="T:System.Uri" /> 实例或 URI 标识符。</param>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果两个实例表示相同的 URI，则该值为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Uri.Escape">
      <summary>将路径部分中的任何不安全字符或保留字符转换为对应的十六进制字符表示形式。</summary>
      <exception cref="T:System.UriFormatException">从构造函数传来的 URI 无效。 如果 URI 字符太多或 URI 是相对的，则会发生这种异常。</exception>
    </member>
    <member name="M:System.Uri.EscapeDataString(System.String)">
      <summary>将字符串转换为它的转义表示形式。</summary>
      <param name="stringToEscape">要转义的字符串。</param>
      <returns>一个 <see cref="T:System.String" />，包含 <paramref name="stringToEscape" /> 的转义表示形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.UriFormatException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.FormatException" />。
            

 <paramref name="stringToEscape" /> 的长度超过 32766 个字符。</exception>
    </member>
    <member name="M:System.Uri.EscapeString(System.String)">
      <summary>将字符串转换为它的转义表示形式。</summary>
      <param name="str">要转换为它的转义表示形式的字符串。</param>
      <returns>字符串的转义表示形式。</returns>
    </member>
    <member name="M:System.Uri.EscapeUriString(System.String)">
      <summary>将 URI 字符串转换为它的转义表示形式。</summary>
      <param name="stringToEscape">要转义的字符串。</param>
      <returns>一个 <see cref="T:System.String" />，包含 <paramref name="stringToEscape" /> 的转义表示形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.UriFormatException">在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.FormatException" />。
            

 <paramref name="stringToEscape" /> 的长度超过 32766 个字符。</exception>
    </member>
    <member name="P:System.Uri.Fragment">
      <summary>获取转义 URI 片段。</summary>
      <returns>一个包含任意 URI 片段信息的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
    </member>
    <member name="M:System.Uri.FromHex(System.Char)">
      <summary>获取十六进制数字的十进制值。</summary>
      <param name="digit">要转换的十六进制数字（0-9、a-f、A-F）。</param>
      <returns>一个 <see cref="T:System.Int32" /> 值，包含与指定的十六进制数字对应的介于 0 到 15 之间的数字。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="digit" /> 不是有效的十六进制数字（0-9、a-f、A-F）。</exception>
    </member>
    <member name="M:System.Uri.GetComponents(System.UriComponents,System.UriFormat)">
      <summary>使用特殊字符的指定转义，获取当前实例的指定部分。</summary>
      <param name="components">
        <see cref="T:System.UriComponents" /> 值的按位组合，它指定当前实例中要返回到调用方的部分。</param>
      <param name="format">
        <see cref="T:System.UriFormat" /> 值中的一个，它控制如何转义特殊字符。</param>
      <returns>一个包含这些部分的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="components" /> 不是有效 <see cref="T:System.UriComponents" /> 值的组合。</exception>
      <exception cref="T:System.InvalidOperationException">当前 <see cref="T:System.Uri" /> 不是绝对 URI。 相对 URI 不能和此方法一起使用。</exception>
    </member>
    <member name="M:System.Uri.GetHashCode">
      <summary>获取 URI 的哈希代码。</summary>
      <returns>一个 <see cref="T:System.Int32" />，其中包含为此 URI 生成的哈希值。</returns>
    </member>
    <member name="M:System.Uri.GetLeftPart(System.UriPartial)">
      <summary>获取 <see cref="T:System.Uri" /> 实例的指定部分。</summary>
      <param name="part">
        <see cref="T:System.UriPartial" /> 值之一，指定要返回的 URI 部分的结尾。</param>
      <returns>一个 <see cref="T:System.String" />，其中包含 <see cref="T:System.Uri" /> 实例的指定部分。</returns>
      <exception cref="T:System.InvalidOperationException">当前 <see cref="T:System.Uri" /> 实例不是绝对实例。</exception>
      <exception cref="T:System.ArgumentException">指定的 <paramref name="part" /> 无效。</exception>
    </member>
    <member name="M:System.Uri.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>返回序列化当前实例所需的数据。</summary>
      <param name="serializationInfo">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象包含序列化 <see cref="T:System.Uri" /> 所需的信息。</param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象包含与<see cref="T:System.Uri" /> 关联的序列化流的源和目标。</param>
    </member>
    <member name="M:System.Uri.HexEscape(System.Char)">
      <summary>将指定的字符转换为它的等效十六进制字符。</summary>
      <param name="character">要转换为十六进制表示形式的字符。</param>
      <returns>指定字符的十六进制表示形式。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="character" /> 大于 255。</exception>
    </member>
    <member name="M:System.Uri.HexUnescape(System.String,System.Int32@)">
      <summary>将字符的指定十六进制表示形式转换为字符。</summary>
      <param name="pattern">字符的十六进制表示形式。</param>
      <param name="index">
        <paramref name="pattern" /> 中字符的十六进制表示形式开始的位置。</param>
      <returns>用十六进制编码表示的位于 <paramref name="index" /> 的字符。 如果位于 <paramref name="index" /> 的字符不是用十六进制编码的，则返回位于 <paramref name="index" /> 的字符。 <paramref name="index" /> 的值递增以指向跟在返回的字符后面的字符。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0，或大于等于 <paramref name="pattern" /> 中的字符数。</exception>
    </member>
    <member name="P:System.Uri.Host">
      <summary>获取此实例的主机部分。</summary>
      <returns>一个包含主机名的 <see cref="T:System.String" />。 这通常是服务器的 DNS 主机名或 IP 地址。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
    </member>
    <member name="P:System.Uri.HostNameType">
      <summary>获取 URI 中指定的主机名的类型。</summary>
      <returns>
        <see cref="T:System.UriHostNameType" /> 枚举的一个成员。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
    </member>
    <member name="P:System.Uri.IdnHost">
      <summary>RFC 3490 根据需要使用 Punycode，符合主机的国际域名要求。 该字符串在不进行转义的情况下（如必要）可安全用于 DNS 解析。</summary>
      <returns>根据 IDN 标准, 用 Punycode 格式化的主机名。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
    </member>
    <member name="P:System.Uri.IsAbsoluteUri">
      <summary>获取一个值，该值指示 <see cref="T:System.Uri" /> 实例是否为绝对 URI。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果 <see langword="true" /> 实例是绝对 URI，则该值为 <see cref="T:System.Uri" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Uri.IsBadFileSystemCharacter(System.Char)">
      <summary>获取一个值，该值指示字符是否在文件系统名称中无效。</summary>
      <param name="character">要测试的 <see cref="T:System.Char" />。</param>
      <returns>如果指定的字符无效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Uri.IsBaseOf(System.Uri)">
      <summary>确定当前的 <see cref="T:System.Uri" /> 实例是否为指定 <see cref="T:System.Uri" /> 实例的基。</summary>
      <param name="uri">要测试的指定 <see cref="T:System.Uri" /> 实例。</param>
      <returns>如果当前 <see langword="true" /> 实例是 <see cref="T:System.Uri" /> 的基，则为 <paramref name="uri" />；否则，为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Uri.IsDefaultPort">
      <summary>获取一个值，该值指示 URI 的端口值是否为此方案的默认值。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果 <see langword="true" /> 属性中的值是此方案的默认端口，则该值为 <see cref="P:System.Uri.Port" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
    </member>
    <member name="M:System.Uri.IsExcludedCharacter(System.Char)">
      <summary>获取一个值，该值指示是否应该转义指定的字符。</summary>
      <param name="character">要测试的 <see cref="T:System.Char" />。</param>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果应该转义指定的字符，则该值为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Uri.IsFile">
      <summary>获取一个值，该值指示指定的 <see cref="T:System.Uri" /> 是否为文件 URI。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果 <see langword="true" /> 是文件 URI，则该值为 <see cref="T:System.Uri" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
    </member>
    <member name="M:System.Uri.IsHexDigit(System.Char)">
      <summary>确定指定的字符是否为有效的十六进制数字。</summary>
      <param name="character">要验证的字符。</param>
      <returns>如果字符是有效的十六进制数字，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Uri.IsHexEncoding(System.String,System.Int32)">
      <summary>确定字符串中的一个字符是否为十六进制编码。</summary>
      <param name="pattern">要检查的字符串。</param>
      <param name="index">检查十六进制编码的 <paramref name="pattern" /> 中的位置。</param>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果 <see langword="true" /> 在指定位置进行了十六进制编码，则该值为 <paramref name="pattern" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Uri.IsLoopback">
      <summary>获取一个值，该值指示指定的 <see cref="T:System.Uri" /> 是否引用了本地主机。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果此 <see langword="true" /> 引用了本地主机，则该值为 <see cref="T:System.Uri" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
    </member>
    <member name="M:System.Uri.IsReservedCharacter(System.Char)">
      <summary>获取一个值，该值指示指定的字符是否为保留字符。</summary>
      <param name="character">要测试的 <see cref="T:System.Char" />。</param>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果指定的字符是保留字符，则该值为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Uri.IsUnc">
      <summary>获取一个值，该值指示指定的 <see cref="T:System.Uri" /> 是否为统一命名约定 (UNC) 路径。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果 <see langword="true" /> 是 UNC 路径，则该值为 <see cref="T:System.Uri" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
    </member>
    <member name="M:System.Uri.IsWellFormedOriginalString">
      <summary>指示用于构造此 <see cref="T:System.Uri" /> 的字符串是否格式良好，以及它是否不需要进一步转义。</summary>
      <returns>如果该字符串格式正确，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)">
      <summary>通过尝试用字符串构造一个 URI 来指示字符串是否为格式良好的，并确保字符串不需要进一步转义。</summary>
      <param name="uriString">用于尝试构造 <see cref="T:System.Uri" /> 的字符串。</param>
      <param name="uriKind">
        <see cref="T:System.Uri" /> 中的 <paramref name="uriString" /> 的类型。</param>
      <returns>如果该字符串格式正确，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Uri.LocalPath">
      <summary>获取文件名的本地操作系统表示形式。</summary>
      <returns>一个 <see cref="T:System.String" />，包含文件名的本地操作系统表示形式。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
    </member>
    <member name="M:System.Uri.MakeRelative(System.Uri)">
      <summary>确定两个 <see cref="T:System.Uri" /> 实例之间的差异。</summary>
      <param name="toUri">与当前 URI 进行比较的 URI。</param>
      <returns>如果此 URI 实例与 <paramref name="toUri" /> 的主机名和方案相同，则此方法返回一个表示相对 URI 的 <see cref="T:System.String" />。若将此相对 URI 追加到当前 URI 实例，就可以得到 <paramref name="toUri" /> 参数。  
如果主机名或方案不同，则此方法返回一个表示 <see cref="T:System.String" /> 参数的 <paramref name="toUri" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toUri" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此方法仅对绝对 URI 有效。</exception>
    </member>
    <member name="M:System.Uri.MakeRelativeUri(System.Uri)">
      <summary>确定两个 <see cref="T:System.Uri" /> 实例之间的差异。</summary>
      <param name="uri">与当前 URI 进行比较的 URI。</param>
      <returns>如果此 URI 实例与 <paramref name="uri" /> 的主机名和方案相同，则此方法返回一个相对 <see cref="T:System.Uri" />。若将此相对 URI 追加到当前 URI 实例，就可以得到 <paramref name="uri" />。  
如果主机名或方案不同，则此方法返回一个表示 <see cref="T:System.Uri" /> 参数的 <paramref name="uri" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
    </member>
    <member name="M:System.Uri.op_Equality(System.Uri,System.Uri)">
      <summary>确定两个 <see cref="T:System.Uri" /> 实例是否具有相同的值。</summary>
      <param name="uri1">要与 <see cref="T:System.Uri" /> 比较的 <paramref name="uri2" /> 实例。</param>
      <param name="uri2">要与 <see cref="T:System.Uri" /> 比较的 <paramref name="uri1" /> 实例。</param>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果这两个 <see langword="true" /> 实例是等效的，则该值为 <see cref="T:System.Uri" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Uri.op_Inequality(System.Uri,System.Uri)">
      <summary>确定两个 <see cref="T:System.Uri" /> 实例是否具有不同的值。</summary>
      <param name="uri1">要与 <see cref="T:System.Uri" /> 比较的 <paramref name="uri2" /> 实例。</param>
      <param name="uri2">要与 <see cref="T:System.Uri" /> 比较的 <paramref name="uri1" /> 实例。</param>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果两个 <see langword="true" /> 实例不相等，则该值为 <see cref="T:System.Uri" />；否则为 <see langword="false" />。 如果两者中任意一个参数为 <see langword="null" />，则此方法返回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Uri.OriginalString">
      <summary>获取传递给 <see cref="T:System.Uri" /> 构造函数的原始 URI 字符串。</summary>
      <returns>包含构造此实例时指定的同一 URI，则为 <see cref="T:System.String" />；否则，为 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="M:System.Uri.Parse">
      <summary>分析当前实例的 URI 以确保它包含有效 URI 所需的所有部分。</summary>
      <exception cref="T:System.UriFormatException">从构造函数传来的 URI 无效。</exception>
    </member>
    <member name="P:System.Uri.PathAndQuery">
      <summary>获取用问号 (?) 分隔的 <see cref="P:System.Uri.AbsolutePath" /> 和 <see cref="P:System.Uri.Query" /> 属性。</summary>
      <returns>一个 <see cref="T:System.String" />，它包含用问号 (?) 分隔的 <see cref="P:System.Uri.AbsolutePath" /> 和 <see cref="P:System.Uri.Query" /> 属性。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
    </member>
    <member name="P:System.Uri.Port">
      <summary>获取此 URI 的端口号。</summary>
      <returns>一个包含此 URI 的端口号的 <see cref="T:System.Int32" /> 值。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
    </member>
    <member name="P:System.Uri.Query">
      <summary>获取指定 URI 中包括的任何查询信息。</summary>
      <returns>一个<see cref="T:System.String" />，包含指定 URI 中包括的任何查询信息。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
    </member>
    <member name="P:System.Uri.Scheme">
      <summary>获取此 URI 的方案名称。</summary>
      <returns>一个 <see cref="T:System.String" />，包含此 URI 的方案（已转换为小写形式）。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
    </member>
    <member name="F:System.Uri.SchemeDelimiter">
      <summary>指定将通讯协议方案同 URI 的地址部分分开的字符。 此字段为只读。</summary>
    </member>
    <member name="P:System.Uri.Segments">
      <summary>获取包含构成指定 URI 的路径段的数组。</summary>
      <returns>一个 <see cref="T:System.String" /> 数组，包含构成指定 URI 的路径段。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
    </member>
    <member name="M:System.Uri.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>返回序列化当前实例所需的数据。</summary>
      <param name="serializationInfo">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象包含序列化 <see cref="T:System.Uri" /> 所需的信息。</param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象包含与<see cref="T:System.Uri" /> 关联的序列化流的源和目标。</param>
    </member>
    <member name="M:System.Uri.ToString">
      <summary>获取指定的 <see cref="T:System.Uri" /> 实例的规范化字符串表示形式。</summary>
      <returns>一个 <see cref="T:System.String" /> 实例，它包含 <see cref="T:System.Uri" /> 实例的非转义规范化表示形式。 除了 #、? 和 %，所有字符均为非转义字符。</returns>
    </member>
    <member name="M:System.Uri.TryCreate(System.String,System.UriKind,System.Uri@)">
      <summary>使用指定的 <see cref="T:System.Uri" /> 实例和 <see cref="T:System.String" /> 创建一个新的 <see cref="T:System.UriKind" />。</summary>
      <param name="uriString">表示 <see cref="T:System.String" /> 的 <see cref="T:System.Uri" />。</param>
      <param name="uriKind">URI 的类型。</param>
      <param name="result">此方法返回时，包含构造的 <see cref="T:System.Uri" />。</param>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果成功创建了 <see langword="true" />，则该值为 <see cref="T:System.Uri" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.String,System.Uri@)">
      <summary>使用指定基和相对 <see cref="T:System.Uri" /> 实例创建一个新的 <see cref="T:System.String" />。</summary>
      <param name="baseUri">基本 <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">要添加到基 <see cref="T:System.Uri" /> 的相对 <see cref="T:System.String" />（表示为 <see cref="T:System.Uri" />）。</param>
      <param name="result">此方法返回时，包含从 <see cref="T:System.Uri" /> 和 <paramref name="baseUri" /> 构造的 <paramref name="relativeUri" />。 此参数未经初始化即被传递。</param>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果成功创建了 <see langword="true" />，则该值为 <see cref="T:System.Uri" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.Uri,System.Uri@)">
      <summary>使用指定基和相对 <see cref="T:System.Uri" /> 实例创建一个新的 <see cref="T:System.Uri" />。</summary>
      <param name="baseUri">基本 <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">要添加到基 <see cref="T:System.Uri" /> 的相对 <see cref="T:System.Uri" />。</param>
      <param name="result">此方法返回时，包含从 <see cref="T:System.Uri" /> 和 <paramref name="baseUri" /> 构造的 <paramref name="relativeUri" />。 此参数未经初始化即被传递。</param>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果成功创建了 <see langword="true" />，则该值为 <see cref="T:System.Uri" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Uri.Unescape(System.String)">
      <summary>转换指定的字符串，方法是将任何转义序列替换为相应的未转义表示形式。</summary>
      <param name="path">要转换的 <see cref="T:System.String" />。</param>
      <returns>一个 <see cref="T:System.String" />，包含 <paramref name="path" /> 参数的非转义值。</returns>
    </member>
    <member name="M:System.Uri.UnescapeDataString(System.String)">
      <summary>将字符串转换为它的非转义表示形式。</summary>
      <param name="stringToUnescape">要恢复原义的字符串。</param>
      <returns>一个 <see cref="T:System.String" />，包含 <paramref name="stringToUnescape" /> 的非转义表示形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToUnescape" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="F:System.Uri.UriSchemeFile">
      <summary>指定 URI 是指向文件的指针。 此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeFtp">
      <summary>指定通过文件传输协议 (FTP) 访问 URI。 此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeGopher">
      <summary>指定通过 Gopher 协议访问 URI。 此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttp">
      <summary>指定通过超文本传输协议 (HTTP) 访问 URI。 此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttps">
      <summary>指定通过安全超文本传输协议 (HTTPS) 访问 URI。 此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeMailto">
      <summary>指定 URI 是一个电子邮件地址，需通过简单邮件传输协议 (SMTP) 访问。 此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetPipe">
      <summary>指明通过 Windows Communication Foundation (WCF) 使用的 NetPipe 方案访问该 URI。 此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetTcp">
      <summary>指明通过 Windows Communication Foundation (WCF) 使用的 NetTcp 方案访问该 URI。 此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNews">
      <summary>指定 URI 是 Internet 新闻组，而且可以通过 Network 新闻传输协议 (NNTP) 进行访问。 此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNntp">
      <summary>指定 URI 是 Internet 新闻组，而且可以通过 Network 新闻传输协议 (NNTP) 进行访问。 此字段为只读。</summary>
    </member>
    <member name="P:System.Uri.UserEscaped">
      <summary>指示 URI 字符串在创建 <see cref="T:System.Uri" /> 实例之前已被完全转义。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果在创建 <see langword="true" /> 实例时 <paramref name="dontEscape" /> 参数设置为 <see langword="true" />，则该值为 <see cref="T:System.Uri" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Uri.UserInfo">
      <summary>获取用户名、密码或其他与指定 URI 关联的特定于用户的信息。</summary>
      <returns>一个 <see cref="T:System.String" />，包含与该 URI 关联的用户信息。 返回值不包括“@”字符，该字符是一个保留字符，用于分隔 URI 的用户信息部分。</returns>
      <exception cref="T:System.InvalidOperationException">此实例代表一个相对 URI，而此属性仅对绝对 URI 有效。</exception>
    </member>
    <member name="T:System.UriComponents">
      <summary>指定 <see cref="T:System.Uri" /> 的各个部分。</summary>
    </member>
    <member name="F:System.UriComponents.AbsoluteUri">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.UserInfo" />、<see cref="P:System.Uri.Host" />、<see cref="P:System.Uri.Port" />、<see cref="P:System.Uri.LocalPath" />、<see cref="P:System.Uri.Query" /> 和 <see cref="P:System.Uri.Fragment" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Fragment">
      <summary>
        <see cref="P:System.Uri.Fragment" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Host">
      <summary>
        <see cref="P:System.Uri.Host" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.HostAndPort">
      <summary>
        <see cref="P:System.Uri.Host" /> 和 <see cref="P:System.Uri.Port" /> 数据。 如果在 Uri 中没有端口数据并且已为 <see cref="P:System.Uri.Scheme" /> 分配了一个默认端口，则返回该默认端口。 如果没有默认端口，则返回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.HttpRequestUrl">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.Host" />、<see cref="P:System.Uri.Port" />、<see cref="P:System.Uri.LocalPath" /> 和 <see cref="P:System.Uri.Query" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.KeepDelimiter">
      <summary>指定应包含分隔符。</summary>
    </member>
    <member name="F:System.UriComponents.NormalizedHost">
      <summary>
        <see cref="P:System.Uri.Host" /> 的规范化形式。</summary>
    </member>
    <member name="F:System.UriComponents.Path">
      <summary>
        <see cref="P:System.Uri.LocalPath" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.PathAndQuery">
      <summary>
        <see cref="P:System.Uri.LocalPath" /> 和 <see cref="P:System.Uri.Query" /> 数据。 另外，请参见 <see cref="P:System.Uri.PathAndQuery" />。</summary>
    </member>
    <member name="F:System.UriComponents.Port">
      <summary>
        <see cref="P:System.Uri.Port" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Query">
      <summary>
        <see cref="P:System.Uri.Query" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Scheme">
      <summary>
        <see cref="P:System.Uri.Scheme" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.SchemeAndServer">
      <summary>
        <see cref="P:System.Uri.Scheme" />、 <see cref="P:System.Uri.Host" />和 <see cref="P:System.Uri.Port" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.SerializationInfoString">
      <summary>URI 序列化程序所需的完整 <see cref="T:System.Uri" /> 上下文。 此上下文包括 IPv6 范围。</summary>
    </member>
    <member name="F:System.UriComponents.StrongAuthority">
      <summary>
        <see cref="P:System.Uri.UserInfo" />、 <see cref="P:System.Uri.Host" />和 <see cref="P:System.Uri.Port" /> 数据。 如果 <see cref="T:System.Uri" /> 中没有任何端口数据且已将默认端口分配给了 <see cref="P:System.Uri.Scheme" />，则会返回默认端口。 如果没有默认端口，则返回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.StrongPort">
      <summary>
        <see cref="P:System.Uri.Port" /> 数据。 如果在 <see cref="T:System.Uri" /> 中没有端口数据并且已为 <see cref="P:System.Uri.Scheme" /> 分配了一个默认端口，则返回该默认端口。 如果没有默认端口，则返回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.UserInfo">
      <summary>
        <see cref="P:System.Uri.UserInfo" /> 数据。</summary>
    </member>
    <member name="T:System.UriFormat">
      <summary>控制 URI 信息的转义方式。</summary>
    </member>
    <member name="F:System.UriFormat.SafeUnescaped">
      <summary>在请求的 URI 组成部分中具有保留意义的字符将仍然进行转义。 所有其他字符不进行转义。</summary>
    </member>
    <member name="F:System.UriFormat.Unescaped">
      <summary>未执行任何转义。</summary>
    </member>
    <member name="F:System.UriFormat.UriEscaped">
      <summary>根据 RFC 2396 中的规则执行转义。</summary>
    </member>
    <member name="T:System.UriFormatException">
      <summary>当检测到无效的统一资源标识符 (URI) 时引发的异常。</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor">
      <summary>初始化 <see cref="T:System.UriFormatException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>根据指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 实例初始化 <see cref="T:System.UriFormatException" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它包含序列化新的 <see cref="T:System.UriFormatException" /> 所需的信息。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与新的 <see cref="T:System.UriFormatException" /> 关联的序列化流的源。</param>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see cref="T:System.UriFormatException" /> 类的新实例。</summary>
      <param name="textString">错误消息字符串。</param>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.UriFormatException" /> 类的新实例。</summary>
      <param name="textString">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="e">导致当前异常的异常。 如果 <c>innerException</c> 参数不为 <see langword="null" />，则当前异常会在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="M:System.UriFormatException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化 <see cref="T:System.UriFormatException" /> 所需的数据来填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例。</summary>
      <param name="serializationInfo">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，将存放 <see cref="T:System.UriFormatException" /> 的序列化数据。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与新的 <see cref="T:System.UriFormatException" /> 关联的序列化流的目标。</param>
    </member>
    <member name="T:System.UriHostNameType">
      <summary>为 <see cref="M:System.Uri.CheckHostName(System.String)" /> 方法定义主机名类型。</summary>
    </member>
    <member name="F:System.UriHostNameType.Basic">
      <summary>设置主机，但无法确定类型。</summary>
    </member>
    <member name="F:System.UriHostNameType.Dns">
      <summary>主机名是域名系统 (DNS) 样式主机名。</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv4">
      <summary>主机名是网际协议 (IP) 第 4 版主机地址。</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv6">
      <summary>主机名是网际协议 (IP) 第 6 版主机地址。</summary>
    </member>
    <member name="F:System.UriHostNameType.Unknown">
      <summary>不提供主机名的类型。</summary>
    </member>
    <member name="T:System.UriKind">
      <summary>定义不同类型的 URI。</summary>
    </member>
    <member name="F:System.UriKind.Absolute">
      <summary>该 URI 是绝对的。</summary>
    </member>
    <member name="F:System.UriKind.Relative">
      <summary>该 URI 是相对的。</summary>
    </member>
    <member name="F:System.UriKind.RelativeOrAbsolute">
      <summary>URI 类型不确定。</summary>
    </member>
    <member name="T:System.UriParser">
      <summary>分析新的 URI 方案。 这是一个抽象类。</summary>
    </member>
    <member name="M:System.UriParser.#ctor">
      <summary>构建默认的 URI 分析器。</summary>
    </member>
    <member name="M:System.UriParser.GetComponents(System.Uri,System.UriComponents,System.UriFormat)">
      <summary>从 URI 获取各个组成部分。</summary>
      <param name="uri">要分析的 URI。</param>
      <param name="components">要从 <paramref name="uri" /> 中检索的 <see cref="T:System.UriComponents" />。</param>
      <param name="format">
        <see cref="T:System.UriFormat" /> 值中的一个，它控制如何转义特殊字符。</param>
      <returns>包含组成部分的字符串。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="uriFormat" /> 无效。  

或 - 
<paramref name="uriComponents" /> 不是有效 <see cref="T:System.UriComponents" /> 值的组合。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="uri" /> 需要用户驱动的语法分析 
或 
 <paramref name="uri" /> 不是绝对 URI。 相对 URI 不能和此方法一起使用。</exception>
    </member>
    <member name="M:System.UriParser.InitializeAndValidate(System.Uri,System.UriFormatException@)">
      <summary>初始化分析器的状态并验证 URI。</summary>
      <param name="uri">要验证的 T:System.Uri。</param>
      <param name="parsingError">验证错误（如果有）。</param>
    </member>
    <member name="M:System.UriParser.IsBaseOf(System.Uri,System.Uri)">
      <summary>确定 <paramref name="baseUri" /> 是否为 <paramref name="relativeUri" /> 的基 URI。</summary>
      <param name="baseUri">基 URI。</param>
      <param name="relativeUri">要测试的 URI。</param>
      <returns>如果 <paramref name="baseUri" /> 是 <paramref name="relativeUri" /> 的基 URI，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UriParser.IsKnownScheme(System.String)">
      <summary>指示某个方案的分析器是否已注册。</summary>
      <param name="schemeName">要检查的方案名称。</param>
      <returns>如果已注册 <paramref name="schemeName" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemeName" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="schemeName" /> 参数无效。</exception>
    </member>
    <member name="M:System.UriParser.IsWellFormedOriginalString(System.Uri)">
      <summary>指示 URI 是否是格式良好的。</summary>
      <param name="uri">要检查的 URI。</param>
      <returns>如果 <paramref name="uri" /> 格式良好，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UriParser.OnNewUri">
      <summary>由 <see cref="T:System.Uri" /> 构造函数调用以获取一个 <see cref="T:System.UriParser" /> 实例。</summary>
      <returns>用于构建的 <see cref="T:System.UriParser" /> 的一个 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.UriParser.OnRegister(System.String,System.Int32)">
      <summary>在注册 <see cref="T:System.UriParser" /> 方法时由 Framework 调用。</summary>
      <param name="schemeName">与此 <see cref="T:System.UriParser" /> 关联的方案。</param>
      <param name="defaultPort">方案的端口号。</param>
    </member>
    <member name="M:System.UriParser.Register(System.UriParser,System.String,System.Int32)">
      <summary>将方案和端口号与 <see cref="T:System.UriParser" /> 关联。</summary>
      <param name="uriParser">要注册的 URI 分析器。</param>
      <param name="schemeName">与此分析器关联的方案的名称。</param>
      <param name="defaultPort">指定方案的默认端口号。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriParser" /> 参数为 null 
或 
 <paramref name="schemeName" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="schemeName" /> 参数无效 

或 - 
<paramref name="defaultPort" /> 参数无效。 <paramref name="defaultPort" /> 参数小于 -1 或大于 65,534。</exception>
    </member>
    <member name="M:System.UriParser.Resolve(System.Uri,System.Uri,System.UriFormatException@)">
      <summary>由 <see cref="T:System.Uri" /> 构造函数和 <see cref="Overload:System.Uri.TryCreate" /> 调用以解析相对 URI。</summary>
      <param name="baseUri">一个基 URI。</param>
      <param name="relativeUri">一个相对 URI。</param>
      <param name="parsingError">解析过程中的错误（如果有）。</param>
      <returns>经过解析的相对 <see cref="T:System.Uri" /> 的字符串。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="baseUri" /> 参数不是绝对 <see cref="T:System.Uri" />  
或 
 <paramref name="baseUri" /> 参数需要用户驱动的分析。</exception>
    </member>
    <member name="T:System.UriPartial">
      <summary>为 <see cref="M:System.Uri.GetLeftPart(System.UriPartial)" /> 方法定义 URI 的各部分。</summary>
    </member>
    <member name="F:System.UriPartial.Authority">
      <summary>URI 的方案段与颁发机构段。</summary>
    </member>
    <member name="F:System.UriPartial.Path">
      <summary>URI 的方案段、颁发机构段与路径段。</summary>
    </member>
    <member name="F:System.UriPartial.Query">
      <summary>URI 的方案段、证书颁发机构段、路径段与查询段。</summary>
    </member>
    <member name="F:System.UriPartial.Scheme">
      <summary>URI 的方案段。</summary>
    </member>
    <member name="T:System.ValueTuple">
      <summary>提供用于创建值元组的静态方法。</summary>
    </member>
    <member name="M:System.ValueTuple.CompareTo(System.ValueTuple)">
      <summary>将当前 <see cref="T:System.ValueTuple" /> 实例与指定的 <see cref="T:System.ValueTuple" /> 实例进行比较。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <returns>此方法始终返回 0。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.ValueTuple" /> 实例。</exception>
    </member>
    <member name="M:System.ValueTuple.Create">
      <summary>创建无组件的新值元组。</summary>
      <returns>无组件的新值元组。</returns>
    </member>
    <member name="M:System.ValueTuple.Create``1(``0)">
      <summary>创建含有 1 个组件的新值元组（一元组）。</summary>
      <param name="item1">此值元组的唯一组件的值。</param>
      <typeparam name="T1">此值元组类型的唯一组件。</typeparam>
      <returns>含有 1 个组件的值元组。</returns>
    </member>
    <member name="M:System.ValueTuple.Create``2(``0,``1)">
      <summary>创建含有 2 个组件的新值元组（二元组）。</summary>
      <param name="item1">值元组的第 1 个组件的值。</param>
      <param name="item2">值元组的第 2 个组件的值。</param>
      <typeparam name="T1">值元组的第 1 个组件的类型。</typeparam>
      <typeparam name="T2">值元组的第 2 个组件的类型。</typeparam>
      <returns>含有 2 个组件的值元组。</returns>
    </member>
    <member name="M:System.ValueTuple.Create``3(``0,``1,``2)">
      <summary>创建含有 3 个组件的新值元组（三元组）。</summary>
      <param name="item1">值元组的第 1 个组件的值。</param>
      <param name="item2">值元组的第 2 个组件的值。</param>
      <param name="item3">值元组的第 3 个组件的值。</param>
      <typeparam name="T1">值元组的第 1 个组件的类型。</typeparam>
      <typeparam name="T2">值元组的第 2 个组件的类型。</typeparam>
      <typeparam name="T3">值元组的第 3 个组件的类型。</typeparam>
      <returns>含有 3 个组件的值元组。</returns>
    </member>
    <member name="M:System.ValueTuple.Create``4(``0,``1,``2,``3)">
      <summary>创建含有 4 个组件的新值元组（四元组）。</summary>
      <param name="item1">值元组的第 1 个组件的值。</param>
      <param name="item2">值元组的第 2 个组件的值。</param>
      <param name="item3">值元组的第 3 个组件的值。</param>
      <param name="item4">值元组的第 4 个组件的值。</param>
      <typeparam name="T1">值元组的第 1 个组件的类型。</typeparam>
      <typeparam name="T2">值元组的第 2 个组件的类型。</typeparam>
      <typeparam name="T3">值元组的第 3 个组件的类型。</typeparam>
      <typeparam name="T4">值元组的第 4 个组件的类型。</typeparam>
      <returns>含有 4 个组件的值元组。</returns>
    </member>
    <member name="M:System.ValueTuple.Create``5(``0,``1,``2,``3,``4)">
      <summary>创建含有 5 个组件的新值元组（五元组）。</summary>
      <param name="item1">值元组的第 1 个组件的值。</param>
      <param name="item2">值元组的第 2 个组件的值。</param>
      <param name="item3">值元组的第 3 个组件的值。</param>
      <param name="item4">值元组的第 4 个组件的值。</param>
      <param name="item5">值元组的第 5 个组件的值。</param>
      <typeparam name="T1">值元组的第 1 个组件的类型。</typeparam>
      <typeparam name="T2">值元组的第 2 个组件的类型。</typeparam>
      <typeparam name="T3">值元组的第 3 个组件的类型。</typeparam>
      <typeparam name="T4">值元组的第 4 个组件的类型。</typeparam>
      <typeparam name="T5">值元组的第 5 个组件的类型。</typeparam>
      <returns>含有 5 个组件的值元组。</returns>
    </member>
    <member name="M:System.ValueTuple.Create``6(``0,``1,``2,``3,``4,``5)">
      <summary>创建含有 6 个组件的新值元组（六元组）。</summary>
      <param name="item1">值元组的第 1 个组件的值。</param>
      <param name="item2">值元组的第 2 个组件的值。</param>
      <param name="item3">值元组的第 3 个组件的值。</param>
      <param name="item4">值元组的第 4 个组件的值。</param>
      <param name="item5">值元组的第 5 个组件的值。</param>
      <param name="item6">值元组的第 6 个组件的值。</param>
      <typeparam name="T1">值元组的第 1 个组件的类型。</typeparam>
      <typeparam name="T2">值元组的第 2 个组件的类型。</typeparam>
      <typeparam name="T3">值元组的第 3 个组件的类型。</typeparam>
      <typeparam name="T4">值元组的第 4 个组件的类型。</typeparam>
      <typeparam name="T5">值元组的第 5 个组件的类型。</typeparam>
      <typeparam name="T6">值元组的第 6 个组件的类型。</typeparam>
      <returns>含有 6 个组件的值元组。</returns>
    </member>
    <member name="M:System.ValueTuple.Create``7(``0,``1,``2,``3,``4,``5,``6)">
      <summary>创建含有 7 个组件的新值元组（七元组）。</summary>
      <param name="item1">值元组的第 1 个组件的值。</param>
      <param name="item2">值元组的第 2 个组件的值。</param>
      <param name="item3">值元组的第 3 个组件的值。</param>
      <param name="item4">值元组的第 4 个组件的值。</param>
      <param name="item5">值元组的第 5 个组件的值。</param>
      <param name="item6">值元组的第 6 个组件的值。</param>
      <param name="item7">值元组的第 7 个组件的值。</param>
      <typeparam name="T1">值元组的第 1 个组件的类型。</typeparam>
      <typeparam name="T2">值元组的第 2 个组件的类型。</typeparam>
      <typeparam name="T3">值元组的第 3 个组件的类型。</typeparam>
      <typeparam name="T4">值元组的第 4 个组件的类型。</typeparam>
      <typeparam name="T5">值元组的第 5 个组件的类型。</typeparam>
      <typeparam name="T6">值元组的第 6 个组件的类型。</typeparam>
      <typeparam name="T7">值元组的第 7 个组件的类型。</typeparam>
      <returns>含有 7 个组件的值元组。</returns>
    </member>
    <member name="M:System.ValueTuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)">
      <summary>创建含有 8 个组件的新值元组（八元组）。</summary>
      <param name="item1">值元组的第 1 个组件的值。</param>
      <param name="item2">值元组的第 2 个组件的值。</param>
      <param name="item3">值元组的第 3 个组件的值。</param>
      <param name="item4">值元组的第 4 个组件的值。</param>
      <param name="item5">值元组的第 5 个组件的值。</param>
      <param name="item6">值元组的第 6 个组件的值。</param>
      <param name="item7">值元组的第 7 个组件的值。</param>
      <param name="item8">值元组的第 8 个组件的值。</param>
      <typeparam name="T1">值元组的第 1 个组件的类型。</typeparam>
      <typeparam name="T2">值元组的第 2 个组件的类型。</typeparam>
      <typeparam name="T3">值元组的第 3 个组件的类型。</typeparam>
      <typeparam name="T4">值元组的第 4 个组件的类型。</typeparam>
      <typeparam name="T5">值元组的第 5 个组件的类型。</typeparam>
      <typeparam name="T6">值元组的第 6 个组件的类型。</typeparam>
      <typeparam name="T7">值元组的第 7 个组件的类型。</typeparam>
      <typeparam name="T8">值元组的第 8 个组件的类型。</typeparam>
      <returns>含有 8 个组件的值元组。</returns>
    </member>
    <member name="M:System.ValueTuple.Equals(System.Object)">
      <summary>返回一个值，该值指示当前 <see cref="T:System.ValueTuple" /> 实例是否与指定的对象相等。</summary>
      <param name="obj">要与当前类型进行比较的对象。</param>
      <returns>如果 <paramref name="obj" /> 是 <see cref="T:System.ValueTuple" /> 实例，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple.Equals(System.ValueTuple)">
      <summary>确定两个 <see cref="T:System.ValueTuple" /> 实例是否相等。 此方法始终返回 <see langword="true" />。</summary>
      <param name="other">与当前实例进行比较的值元组。</param>
      <returns>此方法始终返回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.ValueTuple.GetHashCode">
      <summary>返回当前 <see cref="T:System.ValueTuple" /> 实例的哈希代码。</summary>
      <returns>此方法始终返回 0。</returns>
    </member>
    <member name="M:System.ValueTuple.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>将当前 <see cref="T:System.ValueTuple" /> 实例与指定的对象进行比较。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">提供用于比较的自定义规则的对象。 忽略此参数。</param>
      <returns>如果 <paramref name="other" /> 是 <see cref="T:System.ValueTuple" /> 实例，则返回 0；如果 <paramref name="other" /> 是 <see langword="null" />，则返回 1。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.ValueTuple" /> 实例。</exception>
    </member>
    <member name="M:System.ValueTuple.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值指示基于指定的比较方法，当前 <see cref="T:System.ValueTuple" /> 实例是否与指定的对象相等。</summary>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，该对象定义用于评估两个对象是否相等的方法。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>返回此 <see cref="T:System.ValueTuple" /> 实例的哈希代码。</summary>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法可计算哈希代码。 忽略此参数。</param>
      <returns>此 <see cref="T:System.ValueTuple" /> 实例的哈希代码。</returns>
    </member>
    <member name="M:System.ValueTuple.System#IComparable#CompareTo(System.Object)">
      <summary>将此 <see cref="T:System.ValueTuple" /> 实例与指定对象进行比较并返回一个对二者的相对值的指示。</summary>
      <param name="other">要与当前实例进行比较的对象</param>
      <returns>如果 <paramref name="other" /> 是 <see cref="T:System.ValueTuple" /> 实例，则为 0；如果 <paramref name="other" /> 是 <see langword="null" />，则为 1。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.ValueTuple" /> 实例。</exception>
    </member>
    <member name="P:System.ValueTuple.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>返回 <see cref="T:System.IndexOutOfRangeException" />。 <see langword="ValueTuple" /> 中没有任何元素。</summary>
      <param name="index">没有可接受的 <paramref name="index" /> 值。</param>
      <returns>一个 <see cref="T:System.IndexOutOfRangeException" />。</returns>
      <exception cref="T:System.IndexOutOfRangeException">没有可接受的 <paramref name="index" /> 值。</exception>
    </member>
    <member name="P:System.ValueTuple.System#Runtime#CompilerServices#ITuple#Length">
      <summary>获取此 <see langword="ValueTuple" /> 实例的长度，该长度始终为 0。 <see langword="ValueTuple" /> 中没有任何元素。</summary>
      <returns>0，此 <see langword="ValueTuple" /> 实例中的元素数。</returns>
    </member>
    <member name="M:System.ValueTuple.ToString">
      <summary>返回此 <see cref="T:System.ValueTuple" /> 实例的字符串表示形式。</summary>
      <returns>此方法始终返回“()”。</returns>
    </member>
    <member name="T:System.ValueTuple`1">
      <summary>表示具有单个组件的值元组。</summary>
      <typeparam name="T1">此值元组类型的唯一元素。</typeparam>
    </member>
    <member name="M:System.ValueTuple`1.#ctor(`0)">
      <summary>初始化一个新 <see cref="T:System.ValueTuple`1" /> 实例。</summary>
      <param name="item1">值元组的第 1 个元素。</param>
    </member>
    <member name="M:System.ValueTuple`1.CompareTo(System.ValueTuple{`0})">
      <summary>将当前 <see cref="T:System.ValueTuple`1" /> 实例与指定的 <see cref="T:System.ValueTuple`1" /> 实例进行比较。</summary>
      <param name="other">要与此实例进行比较的元组。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="M:System.ValueTuple`1.Equals(System.Object)">
      <summary>返回一个值，该值指示当前 <see cref="T:System.ValueTuple`1" /> 实例是否与指定的对象相等。</summary>
      <param name="obj">与该实例进行比较的对象。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`1.Equals(System.ValueTuple{`0})">
      <summary>返回一个值，该值指示当前 <see cref="T:System.ValueTuple`1" /> 实例是否与指定的 <see cref="T:System.ValueTuple`1" /> 实例相等。</summary>
      <param name="other">要与此实例进行比较的值元组。</param>
      <returns>如果当前实例等于指定元组，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`1.GetHashCode">
      <summary>计算当前 <see cref="T:System.ValueTuple`1" /> 实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ValueTuple`1" /> 实例的哈希代码。</returns>
    </member>
    <member name="F:System.ValueTuple`1.Item1">
      <summary>获取当前 <see cref="T:System.ValueTuple`1" /> 实例的第 1 个元素的值。</summary>
    </member>
    <member name="M:System.ValueTuple`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器比较当前 <see cref="T:System.ValueTuple`1" /> 实例与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">提供用于比较的自定义规则的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="M:System.ValueTuple`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值指示基于指定的比较方法，当前 <see cref="T:System.ValueTuple`1" /> 实例是否与指定的对象相等。</summary>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，该对象定义用于评估两个对象是否相等的方法。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>通过使用指定计算方法计算当前 <see cref="T:System.ValueTuple`1" /> 实例的哈希代码。</summary>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.ValueTuple`1" /> 实例的哈希代码。</param>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ValueTuple`1.System#IComparable#CompareTo(System.Object)">
      <summary>使用指定的比较器比较当前 <see cref="T:System.ValueTuple`1" /> 实例与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="P:System.ValueTuple`1.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>获取 <see langword="ValueTuple" /> 元素的值。</summary>
      <param name="index">
        <see langword="ValueTuple" /> 元素的索引。 <paramref name="index" /> 必须为 0。</param>
      <returns>
        <see langword="ValueTuple" /> 元素的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 0 或大于 0。</exception>
    </member>
    <member name="P:System.ValueTuple`1.System#Runtime#CompilerServices#ITuple#Length">
      <summary>获取 <see langword="ValueTuple" /> 中的元素数。</summary>
      <returns>1，<see cref="T:System.ValueTuple`1" /> 对象中的元素数。</returns>
    </member>
    <member name="M:System.ValueTuple`1.ToString">
      <summary>返回表示此 <see cref="T:System.ValueTuple`1" /> 实例的值的字符串。</summary>
      <returns>此 <see cref="T:System.ValueTuple`1" /> 实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.ValueTuple`2">
      <summary>表示含有 2 个组件的值元组。</summary>
      <typeparam name="T1">值元组的第 1 个元素的类型。</typeparam>
      <typeparam name="T2">值元组的第 2 个元素的类型。</typeparam>
    </member>
    <member name="M:System.ValueTuple`2.#ctor(`0,`1)">
      <summary>初始化一个新 <see cref="T:System.ValueTuple`2" /> 实例。</summary>
      <param name="item1">值元组的第 1 个元素。</param>
      <param name="item2">值元组的第 2 个元素。</param>
    </member>
    <member name="M:System.ValueTuple`2.CompareTo(System.ValueTuple{`0,`1})">
      <summary>将当前 <see cref="T:System.ValueTuple`2" /> 实例与指定的 <see cref="T:System.ValueTuple`2" /> 实例进行比较。</summary>
      <param name="other">要与此实例进行比较的元组。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="M:System.ValueTuple`2.Equals(System.Object)">
      <summary>返回一个值，该值指示当前 <see cref="T:System.ValueTuple`2" /> 实例是否与指定的对象相等。</summary>
      <param name="obj">与该实例进行比较的对象。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`2.Equals(System.ValueTuple{`0,`1})">
      <summary>返回一个值，该值指示当前 <see cref="T:System.ValueTuple`2" /> 实例是否与指定的 <see cref="T:System.ValueTuple`2" /> 实例相等。</summary>
      <param name="other">要与此实例进行比较的值元组。</param>
      <returns>如果当前实例等于指定元组，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`2.GetHashCode">
      <summary>计算当前 <see cref="T:System.ValueTuple`2" /> 实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ValueTuple`2" /> 实例的哈希代码。</returns>
    </member>
    <member name="F:System.ValueTuple`2.Item1">
      <summary>获取当前 <see cref="T:System.ValueTuple`2" /> 实例的第 1 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`2.Item2">
      <summary>获取当前 <see cref="T:System.ValueTuple`2" /> 实例的第 2 个元素的值。</summary>
    </member>
    <member name="M:System.ValueTuple`2.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器比较当前 <see cref="T:System.ValueTuple`2" /> 实例与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">提供用于比较的自定义规则的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="M:System.ValueTuple`2.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值指示基于指定的比较方法，当前 <see cref="T:System.ValueTuple`2" /> 实例是否与指定的对象相等。</summary>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，该对象定义用于评估两个对象是否相等的方法。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`2.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>通过使用指定计算方法计算当前 <see cref="T:System.ValueTuple`2" /> 实例的哈希代码。</summary>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.ValueTuple`2" /> 实例的哈希代码。</param>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ValueTuple`2.System#IComparable#CompareTo(System.Object)">
      <summary>使用指定的比较器比较当前 <see cref="T:System.ValueTuple`2" /> 实例与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="P:System.ValueTuple`2.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>获取指定 <see langword="ValueTuple" /> 元素的值。</summary>
      <param name="index">指定 <see langword="ValueTuple" /> 元素的索引。 <paramref name="index" /> 的范围可以介于 0 到 1 之间。</param>
      <returns>指定位置 <see langword="ValueTuple" /> 元素的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 0 或大于 1。</exception>
    </member>
    <member name="P:System.ValueTuple`2.System#Runtime#CompilerServices#ITuple#Length">
      <summary>获取 <see langword="ValueTuple" /> 中的元素数。</summary>
      <returns>2，<see cref="T:System.ValueTuple`2" /> 对象中的元素数。</returns>
    </member>
    <member name="M:System.ValueTuple`2.ToString">
      <summary>返回表示此 <see cref="T:System.ValueTuple`2" /> 实例的值的字符串。</summary>
      <returns>此 <see cref="T:System.ValueTuple`2" /> 实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.ValueTuple`3">
      <summary>表示含有 3 个组件的值元组。</summary>
      <typeparam name="T1">值元组的第 1 个元素的类型。</typeparam>
      <typeparam name="T2">值元组的第 2 个元素的类型。</typeparam>
      <typeparam name="T3">值元组的第 3 个元素的类型。</typeparam>
    </member>
    <member name="M:System.ValueTuple`3.#ctor(`0,`1,`2)">
      <summary>初始化一个新 <see cref="T:System.ValueTuple`3" /> 实例。</summary>
      <param name="item1">值元组的第 1 个元素。</param>
      <param name="item2">值元组的第 2 个元素。</param>
      <param name="item3">值元组的第 3 个元素。</param>
    </member>
    <member name="M:System.ValueTuple`3.CompareTo(System.ValueTuple{`0,`1,`2})">
      <summary>将当前 <see cref="T:System.ValueTuple`3" /> 实例与指定的 <see cref="T:System.ValueTuple`3" /> 实例进行比较。</summary>
      <param name="other">要与此实例进行比较的元组。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="M:System.ValueTuple`3.Equals(System.Object)">
      <summary>返回一个值，该值指示当前 <see cref="T:System.ValueTuple`3" /> 实例是否与指定的对象相等。</summary>
      <param name="obj">与该实例进行比较的对象。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`3.Equals(System.ValueTuple{`0,`1,`2})">
      <summary>返回一个值，该值指示当前 <see cref="T:System.ValueTuple`3" /> 实例是否与指定的 <see cref="T:System.ValueTuple`3" /> 实例相等。</summary>
      <param name="other">要与此实例进行比较的值元组。</param>
      <returns>如果当前实例等于指定元组，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`3.GetHashCode">
      <summary>计算当前 <see cref="T:System.ValueTuple`3" /> 实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ValueTuple`3" /> 实例的哈希代码。</returns>
    </member>
    <member name="F:System.ValueTuple`3.Item1">
      <summary>获取当前 <see cref="T:System.ValueTuple`3" /> 实例的第 1 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`3.Item2">
      <summary>获取当前 <see cref="T:System.ValueTuple`3" /> 实例的第 2 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`3.Item3">
      <summary>获取当前 <see cref="T:System.ValueTuple`3" /> 实例的第 3 个元素的值。</summary>
    </member>
    <member name="M:System.ValueTuple`3.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器比较当前 <see cref="T:System.ValueTuple`3" /> 实例与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">提供用于比较的自定义规则的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="M:System.ValueTuple`3.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值指示基于指定的比较方法，当前 <see cref="T:System.ValueTuple`3" /> 实例是否与指定的对象相等。</summary>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，该对象定义用于评估两个对象是否相等的方法。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`3.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>通过使用指定计算方法计算当前 <see cref="T:System.ValueTuple`3" /> 实例的哈希代码。</summary>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.ValueTuple`3" /> 实例的哈希代码。</param>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ValueTuple`3.System#IComparable#CompareTo(System.Object)">
      <summary>使用指定的比较器比较当前 <see cref="T:System.ValueTuple`3" /> 实例与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="P:System.ValueTuple`3.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>获取指定 <see langword="ValueTuple" /> 元素的值。</summary>
      <param name="index">指定 <see langword="ValueTuple" /> 元素的索引。 <paramref name="index" /> 的范围可以介于 0 到 2 之间。</param>
      <returns>指定位置 <see langword="ValueTuple" /> 元素的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 0 或大于 2。</exception>
    </member>
    <member name="P:System.ValueTuple`3.System#Runtime#CompilerServices#ITuple#Length">
      <summary>获取 <see langword="ValueTuple" /> 中的元素数。</summary>
      <returns>3，<see cref="T:System.ValueTuple`3" /> 对象中的元素数。</returns>
    </member>
    <member name="M:System.ValueTuple`3.ToString">
      <summary>返回表示此 <see cref="T:System.ValueTuple`3" /> 实例的值的字符串。</summary>
      <returns>此 <see cref="T:System.ValueTuple`3" /> 实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.ValueTuple`4">
      <summary>表示含有 4 个组件的值元组。</summary>
      <typeparam name="T1">值元组的第 1 个元素的类型。</typeparam>
      <typeparam name="T2">值元组的第 2 个元素的类型。</typeparam>
      <typeparam name="T3">值元组的第 3 个元素的类型。</typeparam>
      <typeparam name="T4">值元组的第 4 个元素的类型。</typeparam>
    </member>
    <member name="M:System.ValueTuple`4.#ctor(`0,`1,`2,`3)">
      <summary>初始化一个新 <see cref="T:System.ValueTuple`4" /> 实例。</summary>
      <param name="item1">值元组的第 1 个元素。</param>
      <param name="item2">值元组的第 2 个元素。</param>
      <param name="item3">值元组的第 3 个元素。</param>
      <param name="item4">值元组的第 4 个元素。</param>
    </member>
    <member name="M:System.ValueTuple`4.CompareTo(System.ValueTuple{`0,`1,`2,`3})">
      <summary>将当前 <see cref="T:System.ValueTuple`4" /> 实例与指定的 <see cref="T:System.ValueTuple`4" /> 实例进行比较。</summary>
      <param name="other">要与此实例进行比较的元组。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="M:System.ValueTuple`4.Equals(System.Object)">
      <summary>返回一个值，该值指示当前 <see cref="T:System.ValueTuple`4" /> 实例是否与指定的对象相等。</summary>
      <param name="obj">与该实例进行比较的对象。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`4.Equals(System.ValueTuple{`0,`1,`2,`3})">
      <summary>返回一个值，该值指示当前 <see cref="T:System.ValueTuple`4" /> 实例是否与指定的 <see cref="T:System.ValueTuple`4" /> 实例相等。</summary>
      <param name="other">要与此实例进行比较的值元组。</param>
      <returns>如果当前实例等于指定元组，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`4.GetHashCode">
      <summary>计算当前 <see cref="T:System.ValueTuple`4" /> 实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ValueTuple`4" /> 实例的哈希代码。</returns>
    </member>
    <member name="F:System.ValueTuple`4.Item1">
      <summary>获取当前 <see cref="T:System.ValueTuple`4" /> 实例的第 1 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`4.Item2">
      <summary>获取当前 <see cref="T:System.ValueTuple`4" /> 实例的第 2 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`4.Item3">
      <summary>获取当前 <see cref="T:System.ValueTuple`4" /> 实例的第 3 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`4.Item4">
      <summary>获取当前 <see cref="T:System.ValueTuple`4" /> 实例的第 4 个元素的值。</summary>
    </member>
    <member name="M:System.ValueTuple`4.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器比较当前 <see cref="T:System.ValueTuple`4" /> 实例与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">提供用于比较的自定义规则的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="M:System.ValueTuple`4.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值指示基于指定的比较方法，当前 <see cref="T:System.ValueTuple`4" /> 实例是否与指定的对象相等。</summary>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，该对象定义用于评估两个对象是否相等的方法。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`4.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>通过使用指定计算方法计算当前 <see cref="T:System.ValueTuple`4" /> 实例的哈希代码。</summary>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.ValueTuple`4" /> 实例的哈希代码。</param>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ValueTuple`4.System#IComparable#CompareTo(System.Object)">
      <summary>使用指定的比较器比较当前 <see cref="T:System.ValueTuple`4" /> 实例与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="P:System.ValueTuple`4.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>获取指定 <see langword="ValueTuple" /> 元素的值。</summary>
      <param name="index">指定 <see langword="ValueTuple" /> 元素的索引。 <paramref name="index" /> 的范围可以介于 0 到 3 之间。</param>
      <returns>指定位置 <see langword="ValueTuple" /> 元素的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 0 或大于 3。</exception>
    </member>
    <member name="P:System.ValueTuple`4.System#Runtime#CompilerServices#ITuple#Length">
      <summary>获取 <see langword="ValueTuple" /> 中的元素数。</summary>
      <returns>4，<see cref="T:System.ValueTuple`4" /> 对象中的元素数。</returns>
    </member>
    <member name="M:System.ValueTuple`4.ToString">
      <summary>返回表示此 <see cref="T:System.ValueTuple`4" /> 实例的值的字符串。</summary>
      <returns>此 <see cref="T:System.ValueTuple`4" /> 实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.ValueTuple`5">
      <summary>表示含有 5 个组件的值元组。</summary>
      <typeparam name="T1">值元组的第 1 个元素的类型。</typeparam>
      <typeparam name="T2">值元组的第 2 个元素的类型。</typeparam>
      <typeparam name="T3">值元组的第 3 个元素的类型。</typeparam>
      <typeparam name="T4">值元组的第 4 个元素的类型。</typeparam>
      <typeparam name="T5">值元组的第 5 个元素的类型。</typeparam>
    </member>
    <member name="M:System.ValueTuple`5.#ctor(`0,`1,`2,`3,`4)">
      <summary>初始化一个新 <see cref="T:System.ValueTuple`5" /> 实例。</summary>
      <param name="item1">值元组的第 1 个元素。</param>
      <param name="item2">值元组的第 2 个元素。</param>
      <param name="item3">值元组的第 3 个元素。</param>
      <param name="item4">值元组的第 4 个元素。</param>
      <param name="item5">值元组的第 5 个元素。</param>
    </member>
    <member name="M:System.ValueTuple`5.CompareTo(System.ValueTuple{`0,`1,`2,`3,`4})">
      <summary>将当前 <see cref="T:System.ValueTuple`5" /> 实例与指定的 <see cref="T:System.ValueTuple`5" /> 实例进行比较。</summary>
      <param name="other">要与此实例进行比较的元组。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="M:System.ValueTuple`5.Equals(System.Object)">
      <summary>返回一个值，该值指示当前 <see cref="T:System.ValueTuple`5" /> 实例是否与指定的对象相等。</summary>
      <param name="obj">与该实例进行比较的对象。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`5.Equals(System.ValueTuple{`0,`1,`2,`3,`4})">
      <summary>返回一个值，该值指示当前 <see cref="T:System.ValueTuple`5" /> 实例是否与指定的 <see cref="T:System.ValueTuple`5" /> 实例相等。</summary>
      <param name="other">要与此实例进行比较的值元组。</param>
      <returns>如果当前实例等于指定元组，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`5.GetHashCode">
      <summary>计算当前 <see cref="T:System.ValueTuple`5" /> 实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ValueTuple`5" /> 实例的哈希代码。</returns>
    </member>
    <member name="F:System.ValueTuple`5.Item1">
      <summary>获取当前 <see cref="T:System.ValueTuple`5" /> 实例的第 1 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`5.Item2">
      <summary>获取当前 <see cref="T:System.ValueTuple`5" /> 实例的第 2 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`5.Item3">
      <summary>获取当前 <see cref="T:System.ValueTuple`5" /> 实例的第 3 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`5.Item4">
      <summary>获取当前 <see cref="T:System.ValueTuple`5" /> 实例的第 4 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`5.Item5">
      <summary>获取当前 <see cref="T:System.ValueTuple`5" /> 实例的第 5 个元素的值。</summary>
    </member>
    <member name="M:System.ValueTuple`5.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器比较当前 <see cref="T:System.ValueTuple`5" /> 实例与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">提供用于比较的自定义规则的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="M:System.ValueTuple`5.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值指示基于指定的比较方法，当前 <see cref="T:System.ValueTuple`5" /> 实例是否与指定的对象相等。</summary>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，该对象定义用于评估两个对象是否相等的方法。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`5.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>通过使用指定计算方法计算当前 <see cref="T:System.ValueTuple`5" /> 实例的哈希代码。</summary>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.ValueTuple`5" /> 实例的哈希代码。</param>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ValueTuple`5.System#IComparable#CompareTo(System.Object)">
      <summary>使用指定的比较器比较当前 <see cref="T:System.ValueTuple`5" /> 实例与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="P:System.ValueTuple`5.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>获取指定 <see langword="ValueTuple" /> 元素的值。</summary>
      <param name="index">指定 <see langword="ValueTuple" /> 元素的索引。 <paramref name="index" /> 的范围可以介于 0 到 4 之间。</param>
      <returns>指定位置 <see langword="ValueTuple" /> 元素的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 0 或大于 4。</exception>
    </member>
    <member name="P:System.ValueTuple`5.System#Runtime#CompilerServices#ITuple#Length">
      <summary>获取 <see langword="ValueTuple" /> 中的元素数。</summary>
      <returns>5，<see cref="T:System.ValueTuple`5" /> 对象中的元素数。</returns>
    </member>
    <member name="M:System.ValueTuple`5.ToString">
      <summary>返回表示此 <see cref="T:System.ValueTuple`5" /> 实例的值的字符串。</summary>
      <returns>此 <see cref="T:System.ValueTuple`5" /> 实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.ValueTuple`6">
      <summary>表示含有 6 个组件的值元组。</summary>
      <typeparam name="T1">值元组的第 1 个元素的类型。</typeparam>
      <typeparam name="T2">值元组的第 2 个元素的类型。</typeparam>
      <typeparam name="T3">值元组的第 3 个元素的类型。</typeparam>
      <typeparam name="T4">值元组的第 4 个元素的类型。</typeparam>
      <typeparam name="T5">值元组的第 5 个元素的类型。</typeparam>
      <typeparam name="T6">值元组的第 6 个元素的类型。</typeparam>
    </member>
    <member name="M:System.ValueTuple`6.#ctor(`0,`1,`2,`3,`4,`5)">
      <summary>初始化一个新 <see cref="T:System.ValueTuple`6" /> 实例。</summary>
      <param name="item1">值元组的第 1 个元素。</param>
      <param name="item2">值元组的第 2 个元素。</param>
      <param name="item3">值元组的第 3 个元素。</param>
      <param name="item4">值元组的第 4 个元素。</param>
      <param name="item5">值元组的第 5 个元素。</param>
      <param name="item6">值元组的第 6 个元素。</param>
    </member>
    <member name="M:System.ValueTuple`6.CompareTo(System.ValueTuple{`0,`1,`2,`3,`4,`5})">
      <summary>将当前 <see cref="T:System.ValueTuple`6" /> 实例与指定的 <see cref="T:System.ValueTuple`6" /> 实例进行比较。</summary>
      <param name="other">要与此实例进行比较的元组。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="M:System.ValueTuple`6.Equals(System.Object)">
      <summary>返回一个值，该值指示当前 <see cref="T:System.ValueTuple`6" /> 实例是否与指定的对象相等。</summary>
      <param name="obj">与该实例进行比较的对象。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`6.Equals(System.ValueTuple{`0,`1,`2,`3,`4,`5})">
      <summary>返回一个值，该值指示当前 <see cref="T:System.ValueTuple`6" /> 实例是否与指定的 <see cref="T:System.ValueTuple`6" /> 实例相等。</summary>
      <param name="other">要与此实例进行比较的值元组。</param>
      <returns>如果当前实例等于指定元组，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`6.GetHashCode">
      <summary>计算当前 <see cref="T:System.ValueTuple`6" /> 实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ValueTuple`6" /> 实例的哈希代码。</returns>
    </member>
    <member name="F:System.ValueTuple`6.Item1">
      <summary>获取当前 <see cref="T:System.ValueTuple`6" /> 实例的第 1 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`6.Item2">
      <summary>获取当前 <see cref="T:System.ValueTuple`6" /> 实例的第 2 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`6.Item3">
      <summary>获取当前 <see cref="T:System.ValueTuple`6" /> 实例的第 3 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`6.Item4">
      <summary>获取当前 <see cref="T:System.ValueTuple`6" /> 实例的第 4 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`6.Item5">
      <summary>获取当前 <see cref="T:System.ValueTuple`6" /> 实例的第 5 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`6.Item6">
      <summary>获取当前 <see cref="T:System.ValueTuple`6" /> 实例的第 6 个元素的值。</summary>
    </member>
    <member name="M:System.ValueTuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器比较当前 <see cref="T:System.ValueTuple`6" /> 实例与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">提供用于比较的自定义规则的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="M:System.ValueTuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值指示基于指定的比较方法，当前 <see cref="T:System.ValueTuple`6" /> 实例是否与指定的对象相等。</summary>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，该对象定义用于评估两个对象是否相等的方法。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>通过使用指定计算方法计算当前 <see cref="T:System.ValueTuple`6" /> 实例的哈希代码。</summary>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.ValueTuple`6" /> 实例的哈希代码。</param>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ValueTuple`6.System#IComparable#CompareTo(System.Object)">
      <summary>使用指定的比较器比较当前 <see cref="T:System.ValueTuple`6" /> 实例与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="P:System.ValueTuple`6.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>获取指定 <see langword="ValueTuple" /> 元素的值。</summary>
      <param name="index">指定 <see langword="ValueTuple" /> 元素的索引。 <paramref name="index" /> 的范围可以介于 0 到 5 之间。</param>
      <returns>指定位置 <see langword="ValueTuple" /> 元素的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 0 或大于 5。</exception>
    </member>
    <member name="P:System.ValueTuple`6.System#Runtime#CompilerServices#ITuple#Length">
      <summary>获取 <see langword="ValueTuple" /> 中的元素数。</summary>
      <returns>6，<see cref="T:System.ValueTuple`6" /> 对象中的元素数。</returns>
    </member>
    <member name="M:System.ValueTuple`6.ToString">
      <summary>返回表示此 <see cref="T:System.ValueTuple`6" /> 实例的值的字符串。</summary>
      <returns>此 <see cref="T:System.ValueTuple`6" /> 实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.ValueTuple`7">
      <summary>表示含有 7 个组件的值元组。</summary>
      <typeparam name="T1">值元组的第 1 个元素的类型。</typeparam>
      <typeparam name="T2">值元组的第 2 个元素的类型。</typeparam>
      <typeparam name="T3">值元组的第 3 个元素的类型。</typeparam>
      <typeparam name="T4">值元组的第 4 个元素的类型。</typeparam>
      <typeparam name="T5">值元组的第 5 个元素的类型。</typeparam>
      <typeparam name="T6">值元组的第 6 个元素的类型。</typeparam>
      <typeparam name="T7">值元组的第 7 个元素的类型。</typeparam>
    </member>
    <member name="M:System.ValueTuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
      <summary>初始化一个新 <see cref="M:System.ValueTuple`7.#ctor(`0,`1,`2,`3,`4,`5,`6)" /> 实例。</summary>
      <param name="item1">值元组的第 1 个元素。</param>
      <param name="item2">值元组的第 2 个元素。</param>
      <param name="item3">值元组的第 3 个元素。</param>
      <param name="item4">值元组的第 4 个元素。</param>
      <param name="item5">值元组的第 5 个元素。</param>
      <param name="item6">值元组的第 6 个元素。</param>
      <param name="item7">值元组的第 7 个元素。</param>
    </member>
    <member name="M:System.ValueTuple`7.CompareTo(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})">
      <summary>将当前 <see cref="T:System.ValueTuple`7" /> 实例与指定的 <see cref="T:System.ValueTuple`7" /> 实例进行比较。</summary>
      <param name="other">要与此实例进行比较的元组。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="M:System.ValueTuple`7.Equals(System.Object)">
      <summary>返回一个值，该值指示当前 <see cref="T:System.ValueTuple`7" /> 实例是否与指定的对象相等。</summary>
      <param name="obj">与该实例进行比较的对象。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`7.Equals(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6})">
      <summary>返回一个值，该值指示当前 <see cref="T:System.ValueTuple`7" /> 实例是否与指定的 <see cref="T:System.ValueTuple`7" /> 实例相等。</summary>
      <param name="other">要与此实例进行比较的值元组。</param>
      <returns>如果当前实例等于指定元组，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`7.GetHashCode">
      <summary>计算当前 <see cref="T:System.ValueTuple`7" /> 实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ValueTuple`7" /> 实例的哈希代码。</returns>
    </member>
    <member name="F:System.ValueTuple`7.Item1">
      <summary>获取当前 <see cref="T:System.ValueTuple`7" /> 实例的第 1 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`7.Item2">
      <summary>获取当前 <see cref="T:System.ValueTuple`7" /> 实例的第 2 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`7.Item3">
      <summary>获取当前 <see cref="T:System.ValueTuple`7" /> 实例的第 3 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`7.Item4">
      <summary>获取当前 <see cref="T:System.ValueTuple`7" /> 实例的第 4 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`7.Item5">
      <summary>获取当前 <see cref="T:System.ValueTuple`7" /> 实例的第 5 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`7.Item6">
      <summary>获取当前 <see cref="T:System.ValueTuple`7" /> 实例的第 6 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`7.Item7">
      <summary>获取当前 <see cref="T:System.ValueTuple`7" /> 实例的第 7 个元素的值。</summary>
    </member>
    <member name="M:System.ValueTuple`7.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器比较当前 <see cref="T:System.ValueTuple`7" /> 实例与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">提供用于比较的自定义规则的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="M:System.ValueTuple`7.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值指示基于指定的比较方法，当前 <see cref="T:System.ValueTuple`7" /> 实例是否与指定的对象相等。</summary>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，该对象定义用于评估两个对象是否相等的方法。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`7.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>通过使用指定计算方法计算当前 <see cref="T:System.ValueTuple`7" /> 实例的哈希代码。</summary>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.ValueTuple`7" /> 实例的哈希代码。</param>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ValueTuple`7.System#IComparable#CompareTo(System.Object)">
      <summary>使用指定的比较器比较当前 <see cref="T:System.ValueTuple`7" /> 实例与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="P:System.ValueTuple`7.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>获取指定 <see langword="ValueTuple" /> 元素的值。</summary>
      <param name="index">指定 <see langword="ValueTuple" /> 元素的索引。 <paramref name="index" /> 的范围可以介于 0（<see cref="F:System.ValueTuple`7.Item1" /> 的索引）到 6（<see cref="F:System.ValueTuple`7.Item7" /> 的索引）之间。</param>
      <returns>指定位置 <see langword="ValueTuple" /> 元素的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 0 或大于 6。</exception>
    </member>
    <member name="P:System.ValueTuple`7.System#Runtime#CompilerServices#ITuple#Length">
      <summary>获取 <see langword="ValueTuple" /> 中的元素数。</summary>
      <returns>7，<see cref="T:System.ValueTuple`7" /> 对象中的元素数。</returns>
    </member>
    <member name="M:System.ValueTuple`7.ToString">
      <summary>返回表示此 <see cref="T:System.ValueTuple`7" /> 实例的值的字符串。</summary>
      <returns>此 <see cref="T:System.ValueTuple`7" /> 实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.ValueTuple`8">
      <summary>表示 n 值元组，其中 n 为 8 更大值。</summary>
      <typeparam name="T1">值元组的第 1 个元素的类型。</typeparam>
      <typeparam name="T2">值元组的第 2 个元素的类型。</typeparam>
      <typeparam name="T3">值元组的第 3 个元素的类型。</typeparam>
      <typeparam name="T4">值元组的第 4 个元素的类型。</typeparam>
      <typeparam name="T5">值元组的第 5 个元素的类型。</typeparam>
      <typeparam name="T6">值元组的第 6 个元素的类型。</typeparam>
      <typeparam name="T7">值元组的第 7 个元素的类型。</typeparam>
      <typeparam name="TRest">泛型值元组实例，用于定义元组剩下元素的类型。</typeparam>
    </member>
    <member name="M:System.ValueTuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
      <summary>初始化一个新 <see cref="T:System.ValueTuple`8" /> 实例。</summary>
      <param name="item1">值元组的第 1 个元素。</param>
      <param name="item2">值元组的第 2 个元素。</param>
      <param name="item3">值元组的第 3 个元素。</param>
      <param name="item4">值元组的第 4 个元素。</param>
      <param name="item5">值元组的第 5 个元素。</param>
      <param name="item6">值元组的第 6 个元素。</param>
      <param name="item7">值元组的第 7 个元素。</param>
      <param name="rest">值元组类型的实例，其包含值元组的剩下元素的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rest" /> 不是泛型值元组类型。</exception>
    </member>
    <member name="M:System.ValueTuple`8.CompareTo(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,`7})">
      <summary>将当前 <see cref="T:System.ValueTuple`8" /> 实例与指定的 <see cref="T:System.ValueTuple`8" /> 实例进行比较</summary>
      <param name="other">要与此实例进行比较的元组。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
    </member>
    <member name="M:System.ValueTuple`8.Equals(System.Object)">
      <summary>返回一个值，该值指示当前 <see cref="T:System.ValueTuple`8" /> 实例是否与指定的对象相等。</summary>
      <param name="obj">与该实例进行比较的对象。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`8.Equals(System.ValueTuple{`0,`1,`2,`3,`4,`5,`6,`7})">
      <summary>返回一个值，该值指示当前 <see cref="T:System.ValueTuple`8" /> 实例是否与指定的 <see cref="T:System.ValueTuple`8" /> 实例相等。</summary>
      <param name="other">要与此实例进行比较的值元组。</param>
      <returns>如果当前实例等于指定元组，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`8.GetHashCode">
      <summary>计算当前 <see cref="T:System.ValueTuple`8" /> 实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ValueTuple`8" /> 实例的哈希代码。</returns>
    </member>
    <member name="F:System.ValueTuple`8.Item1">
      <summary>获取当前 <see cref="T:System.ValueTuple`8" /> 实例的第 1 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`8.Item2">
      <summary>获取当前 <see cref="T:System.ValueTuple`8" /> 实例的第 2 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`8.Item3">
      <summary>获取当前 <see cref="T:System.ValueTuple`8" /> 实例的第 3 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`8.Item4">
      <summary>获取当前 <see cref="T:System.ValueTuple`8" /> 实例的第 4 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`8.Item5">
      <summary>获取当前 <see cref="T:System.ValueTuple`8" /> 实例的第 5 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`8.Item6">
      <summary>获取当前 <see cref="T:System.ValueTuple`8" /> 实例的第 6 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`8.Item7">
      <summary>获取当前 <see cref="T:System.ValueTuple`8" /> 实例的第 7 个元素的值。</summary>
    </member>
    <member name="F:System.ValueTuple`8.Rest">
      <summary>获取当前 <see cref="T:System.ValueTuple`8" /> 实例的剩余元素。</summary>
    </member>
    <member name="M:System.ValueTuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>使用指定的比较器比较当前 <see cref="T:System.ValueTuple`8" /> 实例与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <param name="comparer">提供用于比较的自定义规则的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="other" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.ValueTuple`8" /> 对象。</exception>
    </member>
    <member name="M:System.ValueTuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>返回一个值，该值指示基于指定的比较方法，当前 <see cref="T:System.ValueTuple`8" /> 实例是否与指定的对象相等。</summary>
      <param name="other">与该实例进行比较的对象。</param>
      <param name="comparer">一个对象，该对象定义用于评估两个对象是否相等的方法。</param>
      <returns>如果当前实例等于指定对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueTuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>通过使用指定计算方法计算当前 <see cref="T:System.ValueTuple`8" /> 实例的哈希代码。</summary>
      <param name="comparer">一个对象，其 <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> 方法计算当前 <see cref="T:System.ValueTuple`8" /> 实例的哈希代码。</param>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ValueTuple`8.System#IComparable#CompareTo(System.Object)">
      <summary>比较当前 <see cref="T:System.ValueTuple`8" /> 对象与指定对象，并返回一个整数，该整数指示当前对象在排序顺序中的位置：是在指定对象之前、之后还是在与指定对象相同的位置。</summary>
      <param name="other">要与当前实例进行比较的对象。</param>
      <returns>一个带符号整数，指示此实例和 <paramref name="obj" /> 在排序顺序中的相对位置，如下表所示。  
  值 
  说明 
  负整数 
  此实例位于 <paramref name="other" /> 之前。  

  零 
  此实例在排序顺序中的位置与 <paramref name="other" /> 相同。  

  正整数 
  此实例位于 <paramref name="other" /> 之后。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不是 <see cref="T:System.ValueTuple`8" /> 对象。</exception>
    </member>
    <member name="P:System.ValueTuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)">
      <summary>获取指定 <see langword="ValueTuple" /> 元素的值。</summary>
      <param name="index">指定 <see langword="ValueTuple" /> 元素的值。 <paramref name="index" /> 的范围可以介于 0（表示 <see langword="Item1" />）到 <see langword="ValueTuple" /> 中的元素数减去一之间。</param>
      <returns>指定位置 <see langword="ValueTuple" /> 元素的值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 0。  

或 - 
<paramref name="index" /> 大于或等于 <see cref="P:System.ValueTuple`8.System#Runtime#CompilerServices#ITuple#Length" />。</exception>
    </member>
    <member name="P:System.ValueTuple`8.System#Runtime#CompilerServices#ITuple#Length">
      <summary>获取 <see langword="ValueTuple" /> 中的元素数。</summary>
      <returns>
        <see langword="ValueTuple" /> 中的元素的数量。</returns>
    </member>
    <member name="M:System.ValueTuple`8.ToString">
      <summary>返回表示此 <see cref="T:System.ValueTuple`8" /> 实例的值的字符串。</summary>
      <returns>此 <see cref="T:System.ValueTuple`8" /> 实例的字符串表示形式。</returns>
    </member>
    <member name="T:System.ValueType">
      <summary>提供值类型的基类。</summary>
    </member>
    <member name="M:System.ValueType.#ctor">
      <summary>初始化 <see cref="T:System.ValueType" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ValueType.Equals(System.Object)">
      <summary>指示此实例与指定对象是否相等。</summary>
      <param name="obj">要与当前实例进行比较的对象。</param>
      <returns>如果 <see langword="true" /> 和该实例具有相同的类型并表示相同的值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ValueType.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>一个 32 位带符号整数，它是此实例的哈希代码。</returns>
    </member>
    <member name="M:System.ValueType.ToString">
      <summary>返回此实例的完全限定类型名称。</summary>
      <returns>完全限定的类型名。</returns>
    </member>
    <member name="T:System.Version">
      <summary>表示程序集、操作系统或公共语言运行时的版本号。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Version.#ctor">
      <summary>初始化 <see cref="T:System.Version" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32)">
      <summary>使用指定的主要版本号值和次要版本号值初始化 <see cref="T:System.Version" /> 类的新实例。</summary>
      <param name="major">主版本号。</param>
      <param name="minor">次版本号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" /> 或 <paramref name="minor" /> 小于零。</exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>使用指定的主要版本号、次要版本号和内部版本号值初始化 <see cref="T:System.Version" /> 类的新实例。</summary>
      <param name="major">主版本号。</param>
      <param name="minor">次版本号。</param>
      <param name="build">内部版本号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />、<paramref name="minor" /> 或 <paramref name="build" /> 小于零。</exception>
    </member>
    <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>使用指定的主版本号、次版本号、内部版本号和修订号初始化 <see cref="T:System.Version" /> 类的新实例。</summary>
      <param name="major">主版本号。</param>
      <param name="minor">次版本号。</param>
      <param name="build">内部版本号。</param>
      <param name="revision">修订号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="major" />、<paramref name="minor" />、<paramref name="build" /> 或 <paramref name="revision" /> 小于零。</exception>
    </member>
    <member name="M:System.Version.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Version" /> 类的新实例。</summary>
      <param name="version">一个包含主要版本号、次要版本号、内部版本号和修订号的字符串，其中的各个号之间以句点字符（“.”）分隔。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> 少于两个部分或多于四个部分。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="version" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">主要版本号、次要版本号、内部版本号或修订号部分小于零。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="version" /> 的至少一个部分未分析为整数。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="version" /> 至少有一个部分表示大于 <see cref="F:System.Int32.MaxValue" /> 的数。</exception>
    </member>
    <member name="P:System.Version.Build">
      <summary>获取当前 <see cref="T:System.Version" /> 对象版本号的内部版本号部分的值。</summary>
      <returns>生成号或为 -1（如果未定义生成号）。</returns>
    </member>
    <member name="M:System.Version.Clone">
      <summary>返回一个新的 <see cref="T:System.Version" /> 对象，该对象的值与当前的 <see cref="T:System.Version" /> 对象相同。</summary>
      <returns>一个新的 <see cref="T:System.Object" />，其值为当前 <see cref="T:System.Version" /> 对象的副本。</returns>
    </member>
    <member name="M:System.Version.CompareTo(System.Object)">
      <summary>将当前 <see cref="T:System.Version" /> 对象与指定的对象进行比较，并返回二者相对值的一个指示。</summary>
      <param name="version">要比较的对象，或为 <see langword="null" />。</param>
      <returns>一个有符号整数，它指示两个对象的相对值，如下表所示。  
  返回值 
  含义 
  小于零 
  当前 <see cref="T:System.Version" /> 对象是 <paramref name="version" /> 之前的一个版本。  

  零 
  当前 <see cref="T:System.Version" /> 对象是与 <paramref name="version" /> 相同的版本。  

  大于零 
  当前 <see cref="T:System.Version" /> 对象是 <paramref name="version" /> 之后的一个版本。  

或 
 <paramref name="version" /> 为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> 的类型不是 <see cref="T:System.Version" />。</exception>
    </member>
    <member name="M:System.Version.CompareTo(System.Version)">
      <summary>将当前 <see cref="T:System.Version" /> 对象与指定的 <see cref="T:System.Version" /> 对象进行比较，并返回二者相对值的一个指示。</summary>
      <param name="value">要与当前的 <see cref="T:System.Version" /> 对象进行比较的 <see cref="T:System.Version" /> 对象，或者为 <see langword="null" />。</param>
      <returns>一个有符号整数，它指示两个对象的相对值，如下表所示。  
  返回值 
  含义 
  小于零 
  当前 <see cref="T:System.Version" /> 对象是 <paramref name="value" /> 之前的一个版本。  

  零 
  当前 <see cref="T:System.Version" /> 对象是与 <paramref name="value" /> 相同的版本。  

  大于零 
  当前 <see cref="T:System.Version" /> 对象是 <paramref name="value" /> 之后的一个版本。  

或 
 <paramref name="value" /> 为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Version.Equals(System.Object)">
      <summary>返回一个值，该值指示当前 <see cref="T:System.Version" /> 对象是否等于指定的对象。</summary>
      <param name="obj">要与当前 <see cref="T:System.Version" /> 对象进行比较的对象，或者为 <see langword="null" />。</param>
      <returns>如果当前 <see cref="T:System.Version" /> 对象和 <paramref name="obj" /> 都为 <see cref="T:System.Version" /> 对象，并且当前 <see cref="T:System.Version" /> 对象的每个部分都与 <paramref name="obj" /> 的相应部分匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Version.Equals(System.Version)">
      <summary>返回一个值，该值指示当前 <see cref="T:System.Version" /> 对象和指定的 <see cref="T:System.Version" /> 对象是否表示同一个值。</summary>
      <param name="obj">要与当前的 <see cref="T:System.Version" /> 对象进行比较的 <see cref="T:System.Version" /> 对象，或者为 <see langword="null" />。</param>
      <returns>如果当前 <see cref="T:System.Version" /> 对象的每个部分都与 <paramref name="obj" /> 参数的相应部分匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Version.GetHashCode">
      <summary>返回当前 <see cref="T:System.Version" /> 对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="P:System.Version.Major">
      <summary>获取当前 <see cref="T:System.Version" /> 对象版本号的主要版本号部分的值。</summary>
      <returns>主版本号。</returns>
    </member>
    <member name="P:System.Version.MajorRevision">
      <summary>获取修订号的高 16 位。</summary>
      <returns>16 位带符号整数。</returns>
    </member>
    <member name="P:System.Version.Minor">
      <summary>获取当前 <see cref="T:System.Version" /> 对象版本号的次要版本号部分的值。</summary>
      <returns>次版本号。</returns>
    </member>
    <member name="P:System.Version.MinorRevision">
      <summary>获取修订号的低 16 位。</summary>
      <returns>16 位带符号整数。</returns>
    </member>
    <member name="M:System.Version.op_Equality(System.Version,System.Version)">
      <summary>确定两个指定的 <see cref="T:System.Version" /> 对象是否相等。</summary>
      <param name="v1">第一个 <see cref="T:System.Version" /> 对象。</param>
      <param name="v2">第二个 <see cref="T:System.Version" /> 对象。</param>
      <returns>如果 <paramref name="v1" /> 等于 <paramref name="v2" />，则为 <see langword="true" />否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Version.op_GreaterThan(System.Version,System.Version)">
      <summary>确定指定的第一个 <see cref="T:System.Version" /> 对象是否大于指定的第二个 <see cref="T:System.Version" /> 对象。</summary>
      <param name="v1">第一个 <see cref="T:System.Version" /> 对象。</param>
      <param name="v2">第二个 <see cref="T:System.Version" /> 对象。</param>
      <returns>如果 <see langword="true" /> 大于 <paramref name="v1" />，则为 <paramref name="v2" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Version.op_GreaterThanOrEqual(System.Version,System.Version)">
      <summary>确定指定的第一个 <see cref="T:System.Version" /> 对象是否大于等于指定的第二个 <see cref="T:System.Version" /> 对象。</summary>
      <param name="v1">第一个 <see cref="T:System.Version" /> 对象。</param>
      <param name="v2">第二个 <see cref="T:System.Version" /> 对象。</param>
      <returns>如果 <paramref name="v1" /> 大于等于 <paramref name="v2" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Version.op_Inequality(System.Version,System.Version)">
      <summary>确定两个指定的 <see cref="T:System.Version" /> 对象是否不相等。</summary>
      <param name="v1">第一个 <see cref="T:System.Version" /> 对象。</param>
      <param name="v2">第二个 <see cref="T:System.Version" /> 对象。</param>
      <returns>如果 <paramref name="v1" /> 不等于 <paramref name="v2" />，则为 <see langword="true" />否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Version.op_LessThan(System.Version,System.Version)">
      <summary>确定指定的第一个 <see cref="T:System.Version" /> 对象是否小于指定的第二个 <see cref="T:System.Version" /> 对象。</summary>
      <param name="v1">第一个 <see cref="T:System.Version" /> 对象。</param>
      <param name="v2">第二个 <see cref="T:System.Version" /> 对象。</param>
      <returns>如果 <paramref name="v1" /> 小于 <paramref name="v2" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Version.op_LessThanOrEqual(System.Version,System.Version)">
      <summary>确定指定的第一个 <see cref="T:System.Version" /> 对象是否小于或等于第二个 <see cref="T:System.Version" /> 对象。</summary>
      <param name="v1">第一个 <see cref="T:System.Version" /> 对象。</param>
      <param name="v2">第二个 <see cref="T:System.Version" /> 对象。</param>
      <returns>如果 <paramref name="v1" /> 小于等于 <paramref name="v2" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="v1" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Version.Parse(System.ReadOnlySpan{System.Char})">
      <param name="input" />
    </member>
    <member name="M:System.Version.Parse(System.String)">
      <summary>将版本号的字符串表示形式转换为等效的 <see cref="T:System.Version" /> 对象。</summary>
      <param name="input">包含要转换的版本号的字符串。</param>
      <returns>一个等效于 <paramref name="input" /> 参数中指定的版本号的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 少于两个组件或多于四个版本组件。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">在 <paramref name="input" /> 中至少有一个组件小于零。</exception>
      <exception cref="T:System.FormatException">在 <paramref name="input" /> 中至少有一个组件不是整数。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="input" /> 中至少有一个组件表示大于 <see cref="F:System.Int32.MaxValue" /> 的数。</exception>
    </member>
    <member name="P:System.Version.Revision">
      <summary>获取当前 <see cref="T:System.Version" /> 对象版本号的修订号部分的值。</summary>
      <returns>修订号或为 -1（如果未定义修订号）。</returns>
    </member>
    <member name="M:System.Version.ToString">
      <summary>将当前 <see cref="T:System.Version" /> 对象的值转换为其等效的 <see cref="T:System.String" /> 表示形式。</summary>
      <returns>当前 <see cref="T:System.String" /> 对象的主要版本号、次要版本号、内部版本号和修订号部分的值的 <see cref="T:System.Version" /> 表示形式（遵循下面所示格式）。 各部分之间由句点字符（“.”）分隔。 方括号（“[”和“]”）指示在返回值中不会出现的部分（如果未定义该部分）： 
主要版本号.次要版本号[.内部版本号[.修订号]] 
例如，如果使用构造函数 <c>Version(1,1)</c> 创建 <see cref="T:System.Version" /> 对象，则返回的字符串为“1.1”。 如果使用构造函数 <c>Version(1,3,4,2)</c> 创建 <see cref="T:System.Version" /> 对象，则返回的字符串为“1.3.4.2”。</returns>
    </member>
    <member name="M:System.Version.ToString(System.Int32)">
      <summary>将当前 <see cref="T:System.Version" /> 对象的值转换为其等效的 <see cref="T:System.String" /> 表示形式。 指定的计数指示要返回的部分数。</summary>
      <param name="fieldCount">要返回的部分数。 <paramref name="fieldCount" /> 的范围是从 0 到 4。</param>
      <returns>当前 <see cref="T:System.String" /> 对象的主要版本号、次要版本号、内部版本号和修订号部分的值的 <see cref="T:System.Version" /> 表示形式，各部分之间用句点字符（“.”）分隔。 <paramref name="fieldCount" /> 参数确定返回多少个部分。  
  fieldCount 
  返回值 
  0 
  空字符串 ("")。  

  1 
  主要版本号 
  2 
  主要版本号.次要版本号 
  3 
  主要版本号.次要版本号.内部版本号 
  4 
  主要版本号.次要版本号.内部版本号.修订号 
   

 例如，如果使用构造函数 <c>Version(1,3,5)</c> 创建 <see cref="T:System.Version" /> 对象，则 <c>ToString(2)</c> 返回“1.3”，并且 <c>ToString(4)</c> 引发异常。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldCount" /> 小于 0 或大于 4。  
或 
 <paramref name="fieldCount" /> 多于在当前 <see cref="T:System.Version" /> 对象中定义的部分的数量。</exception>
    </member>
    <member name="M:System.Version.TryFormat(System.Span{System.Char},System.Int32,System.Int32@)">
      <param name="destination" />
      <param name="fieldCount" />
      <param name="charsWritten" />
    </member>
    <member name="M:System.Version.TryFormat(System.Span{System.Char},System.Int32@)">
      <param name="destination" />
      <param name="charsWritten" />
    </member>
    <member name="M:System.Version.TryParse(System.ReadOnlySpan{System.Char},System.Version@)">
      <param name="input" />
      <param name="result" />
    </member>
    <member name="M:System.Version.TryParse(System.String,System.Version@)">
      <summary>尝试将版本号的字符串表示形式转换为等效的 <see cref="T:System.Version" /> 对象，并返回一个指示转换是否成功的值。</summary>
      <param name="input">包含要转换的版本号的字符串。</param>
      <param name="result">当此方法返回时，如果转换成功，则包含与 <paramref name="input" /> 中所包含的数字等效的 <see cref="T:System.Version" />。 如果 <paramref name="input" /> 为 <see langword="null" />、<see cref="F:System.String.Empty" /> 或者如果转换失败，当此方法返回时，<paramref name="result" /> 则为 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 参数成功转换，则为 <paramref name="input" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Void">
      <summary>为不返回值的方法指定返回值类型。</summary>
    </member>
    <member name="T:System.WeakReference">
      <summary>表示弱引用，即在引用对象的同时仍然允许垃圾回收来回收该对象。</summary>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object)">
      <summary>引用指定的对象初始化 <see cref="T:System.WeakReference" /> 类的新实例。</summary>
      <param name="target">要跟踪的对象或为 <see langword="null" />。</param>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Object,System.Boolean)">
      <summary>初始化 <see cref="T:System.WeakReference" /> 类的新实例，引用指定的对象并使用指定的复活跟踪。</summary>
      <param name="target">要跟踪的对象。</param>
      <param name="trackResurrection">指示何时停止跟踪对象。 如果为 <see langword="true" />，则在终结后跟踪对象；如果为 <see langword="false" />，则仅在终结前跟踪对象。</param>
    </member>
    <member name="M:System.WeakReference.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用从指定的序列化和流对象反序列化的数据，初始化 <see cref="T:System.WeakReference" /> 类的新实例。</summary>
      <param name="info">保存序列化或反序列化当前的 <see cref="T:System.WeakReference" /> 对象所需的全部数据的对象。</param>
      <param name="context">（保留）描述由 <paramref name="info" /> 指定的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.WeakReference.Finalize">
      <summary>丢弃对当前 <see cref="T:System.WeakReference" /> 对象表示的目标的引用。</summary>
    </member>
    <member name="M:System.WeakReference.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化当前的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象所需的所有数据填充 <see cref="T:System.WeakReference" /> 对象。</summary>
      <param name="info">保存序列化或反序列化当前的 <see cref="T:System.WeakReference" /> 对象所需的全部数据的对象。</param>
      <param name="context">（保留）存储和检索序列化数据的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.WeakReference.IsAlive">
      <summary>获取当前 <see cref="T:System.WeakReference" /> 对象引用的对象是否已被垃圾回收的指示。</summary>
      <returns>如果当前 <see cref="T:System.WeakReference" /> 对象引用的对象尚未被垃圾回收且仍然可访问，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.WeakReference.Target">
      <summary>获取或设置当前 <see cref="T:System.WeakReference" /> 对象引用的对象（目标）。</summary>
      <returns>如果当前 <see cref="T:System.WeakReference" /> 对象引用的对象已被垃圾回收，则为 <see langword="null" />；否则为对该对象（当前 <see cref="T:System.WeakReference" /> 对象引用的对象）的引用。</returns>
      <exception cref="T:System.InvalidOperationException">对目标对象的引用无效。 如果值为 null 引用或者已经在设置操作过程中完成对象，则设置该属性时可能引发此异常。</exception>
    </member>
    <member name="P:System.WeakReference.TrackResurrection">
      <summary>获取当前 <see cref="T:System.WeakReference" /> 对象引用的对象在终止后是否会被跟踪的指示。</summary>
      <returns>如果当前 <see cref="T:System.WeakReference" /> 对象引用的对象在终止后会被跟踪，则为 <see langword="true" />；否则，如果该对象仅在终止前被跟踪，则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.WeakReference`1">
      <summary>表示类型化弱引用，即在引用对象的同时仍然允许垃圾回收来回收该对象。</summary>
      <typeparam name="T">所引用对象的类型。</typeparam>
    </member>
    <member name="M:System.WeakReference`1.#ctor(`0)">
      <summary>初始化引用指定对象的 <see cref="T:System.WeakReference`1" /> 类的新实例。</summary>
      <param name="target">要引用的对象或为 <see langword="null" />。</param>
    </member>
    <member name="M:System.WeakReference`1.#ctor(`0,System.Boolean)">
      <summary>初始化 <see cref="T:System.WeakReference`1" /> 类的新实例，该类引用指定的对象并使用指定的复活跟踪。</summary>
      <param name="target">要引用的对象或为 <see langword="null" />。</param>
      <param name="trackResurrection">若要在终结后跟踪对象，则为 <see langword="true" />；若要仅在终结前跟踪对象，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.WeakReference`1.Finalize">
      <summary>丢弃对当前 <see cref="T:System.WeakReference`1" /> 对象表示的目标的引用。</summary>
    </member>
    <member name="M:System.WeakReference`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化当前 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象所需的所有数据填充 <see cref="T:System.WeakReference`1" /> 对象。</summary>
      <param name="info">一个对象，保存序列化或反序列化当前的 <see cref="T:System.WeakReference`1" /> 对象所需的全部数据。</param>
      <param name="context">存储和检索序列化数据的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.WeakReference`1.SetTarget(`0)">
      <summary>设置 <see cref="T:System.WeakReference`1" /> 对象引用的目标对象。</summary>
      <param name="target">新目标对象。</param>
    </member>
    <member name="M:System.WeakReference`1.TryGetTarget(`0@)">
      <summary>尝试检索当前 <see cref="T:System.WeakReference`1" /> 对象引用的目标对象。</summary>
      <param name="target">当此方法返回时，包含目标对象（可用时）。 该参数未经初始化即被处理。</param>
      <returns>如果该目标已检索，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
  </members>
</doc>
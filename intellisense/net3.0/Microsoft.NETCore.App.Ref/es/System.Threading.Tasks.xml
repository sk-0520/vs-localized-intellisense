<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Tasks</name>
  </assembly>
  <members>
    <member name="T:System.OperationCanceledException">
      <summary>Excepción que se produce en un subproceso al cancelar una operación que este estaba ejecutando.</summary>
    </member>
    <member name="M:System.OperationCanceledException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.OperationCanceledException" /> con un mensaje de error proporcionado por el sistema.</summary>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.OperationCanceledException" /> con datos serializados.</summary>
      <param name="info">Objeto que contiene los datos del objeto serializados.</param>
      <param name="context">Información contextual acerca del origen o del destino.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.OperationCanceledException" /> con el mensaje de error especificado.</summary>
      <param name="message">Objeto <see cref="T:System.String" /> que describe el error.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.OperationCanceledException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción.</param>
      <param name="innerException">Excepción que es la causa de la excepción actual. Si el parámetro <paramref name="innerException" /> no es <see langword="null" />, la excepción actual se produce en un bloque <see langword="catch" /> que controla la excepción interna.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Exception,System.Threading.CancellationToken)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.OperationCanceledException" /> con un mensaje de error especificado, una referencia a la excepción interna que representa la causa de esta excepción y un token de cancelación.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción.</param>
      <param name="innerException">Excepción que es la causa de la excepción actual. Si el parámetro <paramref name="innerException" /> no es <see langword="null" />, la excepción actual se produce en un bloque <see langword="catch" /> que controla la excepción interna.</param>
      <param name="token">Un token de cancelación asociado a la operación que se canceló.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.String,System.Threading.CancellationToken)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.OperationCanceledException" /> con un mensaje de error especificado y un token de cancelación.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción.</param>
      <param name="token">Un token de cancelación asociado a la operación que se canceló.</param>
    </member>
    <member name="M:System.OperationCanceledException.#ctor(System.Threading.CancellationToken)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.OperationCanceledException" /> con un token de cancelación.</summary>
      <param name="token">Un token de cancelación asociado a la operación que se canceló.</param>
    </member>
    <member name="P:System.OperationCanceledException.CancellationToken">
      <summary>Obtiene un token de cancelación asociado a la operación que se canceló.</summary>
      <returns>Un token de cancelación asociado a la operación que se canceló, o un token predeterminado.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder">
      <summary>Representa un generador para los iteradores asincrónicos.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Programa la máquina de estados para continuar en la siguiente acción cuando se complete el awaiter especificado.</summary>
      <param name="awaiter">Awaiter.</param>
      <param name="stateMachine">Máquina de estados.</param>
      <typeparam name="TAwaiter">Tipo de awaiter.</typeparam>
      <typeparam name="TStateMachine">Tipo de la máquina de estados.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Programa la máquina de estados para continuar en la siguiente acción cuando se complete el awaiter especificado.</summary>
      <param name="awaiter">Awaiter.</param>
      <param name="stateMachine">Máquina de estados.</param>
      <typeparam name="TAwaiter">Tipo de awaiter.</typeparam>
      <typeparam name="TStateMachine">Tipo de la máquina de estados.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.Complete">
      <summary>Marca la iteración como completada, ya sea correctamente o no.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.Create">
      <summary>Crea una instancia de la estructura <see cref="T:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder" />.</summary>
      <returns>Instancia inicializada.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncIteratorMethodBuilder.MoveNext``1(``0@)">
      <summary>Invoca <see cref="M:System.Runtime.CompilerServices.IAsyncStateMachine.MoveNext" /> en el equipo de estado mientras se restringe el elemento <see cref="T:System.Threading.ExecutionContext" />.</summary>
      <param name="stateMachine">La instancia de la máquina de estados, pasada por referencia.</param>
      <typeparam name="TStateMachine">Tipo de la máquina de estados.</typeparam>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder">
      <summary>Representa un generador para los métodos asincrónicos que devuelven una tarea.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Programa la máquina de estados para continuar en la siguiente acción cuando se complete el awaiter especificado.</summary>
      <param name="awaiter">Awaiter.</param>
      <param name="stateMachine">Máquina de estados.</param>
      <typeparam name="TAwaiter">Tipo de awaiter.</typeparam>
      <typeparam name="TStateMachine">Tipo de la máquina de estados.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Programa la máquina de estados para continuar en la siguiente acción cuando se complete el awaiter especificado. Se puede llamar a este método desde el código de confianza parcial.</summary>
      <param name="awaiter">Awaiter.</param>
      <param name="stateMachine">Máquina de estados.</param>
      <typeparam name="TAwaiter">Tipo de awaiter.</typeparam>
      <typeparam name="TStateMachine">Tipo de la máquina de estados.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Create">
      <summary>Crea una instancia de la clase <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder" />.</summary>
      <returns>Nueva instancia del generador.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetException(System.Exception)">
      <summary>Marca la tarea como errónea y enlaza la excepción especificada a la tarea.</summary>
      <param name="exception">Excepción que se va a enlazar a la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">La tarea ya se ha completado.  
 O bien  
 El generador no se inicializó.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult">
      <summary>Marca la tarea como finalizada correctamente.</summary>
      <exception cref="T:System.InvalidOperationException">La tarea ya se ha completado.  
 O bien  
 El generador no se inicializó.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Asocia el generador al equipo de estado especificado.</summary>
      <param name="stateMachine">La instancia de la máquina de estados que se va a asociar al generador.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">La máquina de estados que se estableció previamente.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start``1(``0@)">
      <summary>Comienza la ejecución del generador con el equipo de estado asociado.</summary>
      <param name="stateMachine">La instancia de la máquina de estados, pasada por referencia.</param>
      <typeparam name="TStateMachine">Tipo de la máquina de estados.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Task">
      <summary>Obtiene la tarea para este generador.</summary>
      <returns>La tarea para este generador.</returns>
      <exception cref="T:System.InvalidOperationException">El generador no se inicializó.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1">
      <summary>Representa un generador de métodos asincrónicos que devuelve una tarea y proporciona un parámetro para el resultado.</summary>
      <typeparam name="TResult">El resultado que se va a usar para completar la tarea.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Programa la máquina de estados para continuar en la siguiente acción cuando se complete el awaiter especificado.</summary>
      <param name="awaiter">Awaiter.</param>
      <param name="stateMachine">Máquina de estados.</param>
      <typeparam name="TAwaiter">Tipo de awaiter.</typeparam>
      <typeparam name="TStateMachine">Tipo de la máquina de estados.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Programa la máquina de estados para continuar en la siguiente acción cuando se complete el awaiter especificado. Se puede llamar a este método desde el código de confianza parcial.</summary>
      <param name="awaiter">Awaiter.</param>
      <param name="stateMachine">Máquina de estados.</param>
      <typeparam name="TAwaiter">Tipo de awaiter.</typeparam>
      <typeparam name="TStateMachine">Tipo de la máquina de estados.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Create">
      <summary>Crea una instancia de la clase <see cref="T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1" />.</summary>
      <returns>Nueva instancia del generador.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(System.Exception)">
      <summary>Marca la tarea como errónea y enlaza la excepción especificada a la tarea.</summary>
      <param name="exception">Excepción que se va a enlazar a la tarea.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">La tarea ya se ha completado.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(`0)">
      <summary>Marca la tarea como finalizada correctamente.</summary>
      <param name="result">El resultado que se va a usar para completar la tarea.</param>
      <exception cref="T:System.InvalidOperationException">La tarea ya se ha completado.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Asocia el generador al equipo de estado especificado.</summary>
      <param name="stateMachine">La instancia de la máquina de estados que se va a asociar al generador.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">La máquina de estados que se estableció previamente.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start``1(``0@)">
      <summary>Comienza la ejecución del generador con el equipo de estado asociado.</summary>
      <param name="stateMachine">La instancia de la máquina de estados, pasada por referencia.</param>
      <typeparam name="TStateMachine">Tipo de la máquina de estados.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> es <see langword="null" />.</exception>
    </member>
    <member name="P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Task">
      <summary>Obtiene la tarea para este generador.</summary>
      <returns>La tarea para este generador.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder">
      <summary>Representa un generador para los métodos asincrónicos que no devuelven un valor.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
      <summary>Programa la máquina de estados para continuar en la siguiente acción cuando se complete el awaiter especificado.</summary>
      <param name="awaiter">Awaiter.</param>
      <param name="stateMachine">Máquina de estados.</param>
      <typeparam name="TAwaiter">Tipo de awaiter.</typeparam>
      <typeparam name="TStateMachine">Tipo de la máquina de estados.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
      <summary>Programa la máquina de estados para continuar en la siguiente acción cuando se complete el awaiter especificado. Se puede llamar a este método desde el código de confianza parcial.</summary>
      <param name="awaiter">Awaiter.</param>
      <param name="stateMachine">Máquina de estados.</param>
      <typeparam name="TAwaiter">Tipo de awaiter.</typeparam>
      <typeparam name="TStateMachine">Tipo de la máquina de estados.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Create">
      <summary>Crea una instancia de la clase <see cref="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder" />.</summary>
      <returns>Nueva instancia del generador.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetException(System.Exception)">
      <summary>Enlaza una excepción al generador de métodos.</summary>
      <param name="exception">Excepción que se va a enlazar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">El generador no se inicializó.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetResult">
      <summary>Marca el generador de métodos como completado correctamente.</summary>
      <exception cref="T:System.InvalidOperationException">El generador no se inicializó.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
      <summary>Asocia el generador al equipo de estado especificado.</summary>
      <param name="stateMachine">La instancia de la máquina de estados que se va a asociar al generador.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">La máquina de estados que se estableció previamente.</exception>
    </member>
    <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Start``1(``0@)">
      <summary>Comienza la ejecución del generador con el equipo de estado asociado.</summary>
      <param name="stateMachine">La instancia de la máquina de estados, pasada por referencia.</param>
      <typeparam name="TStateMachine">Tipo de la máquina de estados.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stateMachine" /> es <see langword="null" />.</exception>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredAsyncDisposable">
      <summary>Proporciona un tipo que se puede usar para configurar la forma en la que se realizan los objetos await en un elemento <see cref="T:System.IAsyncDisposable" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredAsyncDisposable.DisposeAsync">
      <summary>Libera de forma asincrónica los recursos no administrados usados por <see cref="T:System.Runtime.CompilerServices.ConfiguredAsyncDisposable" />.</summary>
      <returns>Tarea que representa la operación de descarte asincrónica.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1">
      <summary>Proporciona un elemento enumerable asincrónico que admite await y que permite una iteración que se puede cancelar, así como elementos await configurados.</summary>
      <typeparam name="T">Tipo de valores que se va a enumerar.</typeparam>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.ConfigureAwait(System.Boolean)">
      <summary>Configura la forma en la que se realizarán las expresiones await en las tareas devueltas desde una iteración asincrónica.</summary>
      <param name="continueOnCapturedContext">
        <see langword="true" /> para capturar y volver a serializar las referencias al contexto actual; en caso contrario, es <see langword="false" />.</param>
      <returns>Elemento enumerable configurado.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator">
      <summary>Proporciona un enumerador asincrónico que admite await y que permite una iteración que se puede cancelar, así como elementos await configurados.</summary>
      <typeparam name="T">Tipo de valores que se va a enumerar.</typeparam>
    </member>
    <member name="P:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.Current">
      <summary>Obtiene el elemento de la colección situado en la posición actual del enumerador.</summary>
      <returns>Elemento de la colección en la posición actual del enumerador.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.DisposeAsync">
      <summary>Realiza tareas definidas por la aplicación asociadas a la liberación o al restablecimiento de recursos no administrados de forma asincrónica.</summary>
      <returns>Tarea que representa la operación de descarte asincrónica.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.Enumerator.MoveNextAsync">
      <summary>Desplaza el enumerador asincrónico al siguiente elemento de la colección.</summary>
      <returns>
        <see cref="T:System.Runtime.CompilerServices.ConfiguredValueTaskAwaitable`1" /> que se completará con un resultado de <see langword="true" /> si el enumerador avanza correctamente hasta el siguiente elemento, o <see langword="false" /> si el enumerador alcanza el final de la colección.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.GetAsyncEnumerator">
      <summary>Devuelve un enumerador que recorre colecciones en iteración de forma asincrónica y habilita la iteración cancelable y las esperas configuradas.</summary>
      <returns>Un enumerador para la clase <see cref="T:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1" />.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ConfiguredCancelableAsyncEnumerable`1.WithCancellation(System.Threading.CancellationToken)">
      <summary>Establece el elemento <see cref="T:System.Threading.CancellationToken" /> que se va a pasar a <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> durante la iteración.</summary>
      <param name="cancellationToken">Token de cancelación que se va a usar.</param>
      <returns>Elemento enumerable configurado.</returns>
    </member>
    <member name="T:System.Threading.CancellationTokenSource">
      <summary>Señala un objeto <see cref="T:System.Threading.CancellationToken" /> que debe cancelarse.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.CancellationTokenSource" />.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor(System.Int32)">
      <summary>Inicializa una nueva instancia de la clase de <see cref="T:System.Threading.CancellationTokenSource" /> que se cancela después del retraso especificado en milisegundos.</summary>
      <param name="millisecondsDelay">Intervalo de tiempo en milisegundos que se esperará antes de cancelar este elemento <see cref="T:System.Threading.CancellationTokenSource" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsDelay" /> es menor que 1.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)">
      <summary>Inicializa una nueva instancia de la clase de <see cref="T:System.Threading.CancellationTokenSource" /> que se cancela después de la duración especificada.</summary>
      <param name="delay">Intervalo de tiempo que se esperará antes de cancelar este elemento <see cref="T:System.Threading.CancellationTokenSource" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="delay" />.<see cref="P:System.TimeSpan.TotalMilliseconds" /> es menor que -1 o mayor que <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel">
      <summary>Comunica una solicitud de cancelación.</summary>
      <exception cref="T:System.ObjectDisposedException">Esta interfaz <see cref="T:System.Threading.CancellationTokenSource" /> se ha eliminado.</exception>
      <exception cref="T:System.AggregateException">Una excepción agregada que contiene todas las excepciones producidas por las devoluciones de llamada registradas en el <see cref="T:System.Threading.CancellationToken" /> asociado.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)">
      <summary>Comunica una solicitud de cancelación y especifica si se deben procesar las devoluciones de llamada restantes y las operaciones cancelables si se produce una excepción.</summary>
      <param name="throwOnFirstException">
        <see langword="true" /> si las excepciones se propagan inmediatamente; si no, <see langword="false" />.</param>
      <exception cref="T:System.ObjectDisposedException">Esta interfaz <see cref="T:System.Threading.CancellationTokenSource" /> se ha eliminado.</exception>
      <exception cref="T:System.AggregateException">Una excepción agregada que contiene todas las excepciones producidas por las devoluciones de llamada registradas en el <see cref="T:System.Threading.CancellationToken" /> asociado.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)">
      <summary>Programa una operación de cancelación en este <see cref="T:System.Threading.CancellationTokenSource" /> después del número especificado de milisegundos.</summary>
      <param name="millisecondsDelay">Intervalo de tiempo que hay que esperar antes de cancelar este <see cref="T:System.Threading.CancellationTokenSource" />.</param>
      <exception cref="T:System.ObjectDisposedException">Excepción que se produce cuando se ha desechado este <see cref="T:System.Threading.CancellationTokenSource" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Excepción que se produce cuando <paramref name="millisecondsDelay" /> es menor que -1.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)">
      <summary>Programa una operación de cancelación en este <see cref="T:System.Threading.CancellationTokenSource" /> después de la duración especificada.</summary>
      <param name="delay">Intervalo de tiempo que hay que esperar antes de cancelar este <see cref="T:System.Threading.CancellationTokenSource" />.</param>
      <exception cref="T:System.ObjectDisposedException">Excepción que se produce cuando se ha desechado este <see cref="T:System.Threading.CancellationTokenSource" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Excepción que se produce cuando <paramref name="delay" /> es menor que -1 o mayor que Int32.MaxValue.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)">
      <summary>Crea un <see cref="T:System.Threading.CancellationTokenSource" /> que tendrá el estado cancelado cuando alguno de los tokens de origen tenga el estado cancelado.</summary>
      <param name="token1">El primer token de cancelación que se va a observar.</param>
      <param name="token2">El segundo token de cancelación que se va a observar.</param>
      <returns>Objeto <see cref="T:System.Threading.CancellationTokenSource" /> que está vinculado a los tokens de origen.</returns>
      <exception cref="T:System.ObjectDisposedException">Se ha eliminado un <see cref="T:System.Threading.CancellationTokenSource" /> asociado a uno de los tokens de origen.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])">
      <summary>Crea un objeto <see cref="T:System.Threading.CancellationTokenSource" /> que tendrá el estado cancelado cuando alguno de los tokens de origen del la matriz especificada tenga el estado cancelado.</summary>
      <param name="tokens">Una matriz que contiene instancias de tokens de cancelación que se van a inspeccionar.</param>
      <returns>Objeto <see cref="T:System.Threading.CancellationTokenSource" /> que está vinculado a los tokens de origen.</returns>
      <exception cref="T:System.ObjectDisposedException">Se ha eliminado un <see cref="T:System.Threading.CancellationTokenSource" /> asociado a uno de los tokens de origen.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tokens" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tokens" /> está vacía.</exception>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose">
      <summary>Libera todos los recursos usados por la instancia actual de la clase <see cref="T:System.Threading.CancellationTokenSource" />.</summary>
    </member>
    <member name="M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)">
      <summary>Libera los recursos no administrados utilizados por la clase <see cref="T:System.Threading.CancellationTokenSource" /> y, de forma opcional, libera los recursos administrados.</summary>
      <param name="disposing">Es <see langword="true" /> para liberar tanto recursos administrados como no administrados; es <see langword="false" /> para liberar únicamente recursos no administrados.</param>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.IsCancellationRequested">
      <summary>Obtiene si se ha solicitado la cancelación de este objeto <see cref="T:System.Threading.CancellationTokenSource" />.</summary>
      <returns>
        <see langword="false" /> si se solicitó la cancelación de este <see langword="true" />; en caso contrario, <see cref="T:System.Threading.CancellationTokenSource" />.</returns>
    </member>
    <member name="P:System.Threading.CancellationTokenSource.Token">
      <summary>Obtiene el objeto <see cref="T:System.Threading.CancellationToken" /> asociado a <see cref="T:System.Threading.CancellationTokenSource" />.</summary>
      <returns>
        <see cref="T:System.Threading.CancellationToken" /> asociada a esta <see cref="T:System.Threading.CancellationTokenSource" />.</returns>
      <exception cref="T:System.ObjectDisposedException">Se ha eliminado el origen del token.</exception>
    </member>
    <member name="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair">
      <summary>Proporciona programadores de tareas que se coordinan para ejecutar las tareas a la vez que garantizan que las tareas simultáneas puedan ejecutarse en paralelo y las tareas excluyentes nunca lo hagan así.</summary>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> que se destina al programador especificado.</summary>
      <param name="taskScheduler">El programador de destino en el que se debe ejecutar este par.</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> destinada al programador especificado con un nivel de simultaneidad máximo.</summary>
      <param name="taskScheduler">El programador de destino en el que se debe ejecutar este par.</param>
      <param name="maxConcurrencyLevel">Número máximo de tareas que se van a ejecutar simultáneamente.</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.#ctor(System.Threading.Tasks.TaskScheduler,System.Int32,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair" /> destinada al programador especificado con un nivel de simultaneidad máximo y un número de tareas programadas máximo que se pueden procesar como una unidad.</summary>
      <param name="taskScheduler">El programador de destino en el que se debe ejecutar este par.</param>
      <param name="maxConcurrencyLevel">Número máximo de tareas que se van a ejecutar simultáneamente.</param>
      <param name="maxItemsPerTask">Número máximo de tareas para procesar para cada tarea programada subyacente usada por el par.</param>
    </member>
    <member name="M:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Complete">
      <summary>Informa al par de programadores que no debe aceptar más tareas.</summary>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.Completion">
      <summary>Obtiene un objeto <see cref="T:System.Threading.Tasks.Task" /> que se completará cuando el programador haya completado el procesamiento.</summary>
      <returns>La operación asincrónica que se completará cuando el programador finalice el procesamiento.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ConcurrentScheduler">
      <summary>Obtiene un objeto <see cref="T:System.Threading.Tasks.TaskScheduler" /> que se puede utilizar para programar tareas en este par que puede ejecutarse simultáneamente con otras tareas de este par.</summary>
      <returns>Un objeto que se puede utilizar para programar tareas simultáneamente.</returns>
    </member>
    <member name="P:System.Threading.Tasks.ConcurrentExclusiveSchedulerPair.ExclusiveScheduler">
      <summary>Obtiene un objeto <see cref="T:System.Threading.Tasks.TaskScheduler" /> que se puede utilizarse para programar tareas en este par que deben ejecutarse exclusivamente con respecto a otras tareas de este par.</summary>
      <returns>Un objeto que se puede utilizar para programar las tareas que no se ejecutan simultáneamente con otras tareas.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskAsyncEnumerableExtensions">
      <summary>Proporciona un conjunto de métodos estáticos para configurar comportamientos relacionados con tareas en objetos descartables y enumerables asincrónicos.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait(System.IAsyncDisposable,System.Boolean)">
      <summary>Configura la forma en la que se realizan las expresiones await en las tareas devueltas desde un elemento asincrónico descartable.</summary>
      <param name="source">Origen asincrónico desechable.</param>
      <param name="continueOnCapturedContext">
        <see langword="true" /> para capturar y volver a serializar las referencias al contexto actual; en caso contrario, es <see langword="false" />.</param>
      <returns>Elemento descartable asincrónico configurado.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.ConfigureAwait``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Boolean)">
      <summary>Configura la forma en la que se realizan las expresiones await en las tareas devueltas desde una iteración asincrónica.</summary>
      <param name="source">Origen enumerable para iterar.</param>
      <param name="continueOnCapturedContext">
        <see langword="true" /> para capturar y volver a serializar las referencias al contexto actual; en caso contrario, es <see langword="false" />.</param>
      <typeparam name="T">Tipo de los objetos que se van a iterar.</typeparam>
      <returns>Elemento enumerable configurado.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskAsyncEnumerableExtensions.WithCancellation``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)">
      <summary>Establece el elemento <see cref="T:System.Threading.CancellationToken" /> que se va a pasar a <see cref="M:System.Collections.Generic.IAsyncEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)" /> durante la iteración.</summary>
      <param name="source">Origen enumerable para iterar.</param>
      <param name="cancellationToken">Token de cancelación que se va a usar.</param>
      <typeparam name="T">Tipo de los objetos que se van a iterar.</typeparam>
      <returns>Elemento enumerable configurado.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCanceledException">
      <summary>Representa una excepción utilizada para comunicar la cancelación de la tarea.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Tasks.TaskCanceledException" /> con un mensaje proporcionado por el sistema que describe el error.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Tasks.TaskCanceledException" /> con datos serializados.</summary>
      <param name="info">Objeto que contiene los datos del objeto serializados.</param>
      <param name="context">Información contextual acerca del origen o del destino.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Tasks.TaskCanceledException" /> con un mensaje especificado que describe el error.</summary>
      <param name="message">Mensaje que describe la excepción. El autor de llamada de este constructor debe asegurarse de que la cadena se haya adaptado para la referencia cultural actual del sistema.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Tasks.TaskCanceledException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje que describe la excepción. El autor de llamada de este constructor debe asegurarse de que la cadena se haya adaptado para la referencia cultural actual del sistema.</param>
      <param name="innerException">Excepción que es la causa de la excepción actual. Si el parámetro <paramref name="innerException" /> no es <see langword="null" />, la excepción actual se produce en un bloque <see langword="catch" /> que controla la excepción interna.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.String,System.Exception,System.Threading.CancellationToken)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Tasks.TaskCanceledException" /> con un mensaje de error especificado, una referencia a la excepción interna que representa la causa de esta excepción y el elemento <see cref="T:System.Threading.CancellationToken" /> que ha desencadenado la cancelación.</summary>
      <param name="message">Mensaje de error que explica el motivo de la excepción.</param>
      <param name="innerException">Excepción que es la causa de la excepción actual.</param>
      <param name="token">Token de cancelación que ha desencadenado la cancelación.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCanceledException.#ctor(System.Threading.Tasks.Task)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Tasks.TaskCanceledException" /> con una referencia al objeto <see cref="T:System.Threading.Tasks.Task" /> que se ha cancelado.</summary>
      <param name="task">Tarea que se ha cancelado.</param>
    </member>
    <member name="P:System.Threading.Tasks.TaskCanceledException.Task">
      <summary>Obtiene la tarea asociada a esta excepción.</summary>
      <returns>Referencia al objeto <see cref="T:System.Threading.Tasks.Task" /> asociado a esta excepción.</returns>
    </member>
    <member name="T:System.Threading.Tasks.TaskCompletionSource`1">
      <summary>Representa el lado del productor de una <see cref="T:System.Threading.Tasks.Task`1" /> sin enlazar a un delegado, proporcionando acceso al lado del consumidor mediante la propiedad <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" />.</summary>
      <typeparam name="TResult">Tipo del valor de resultado asociado a este <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor">
      <summary>Crea una interfaz <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object)">
      <summary>Crea un objeto <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> con el estado especificado.</summary>
      <param name="state">Estado que se va a usar como AsyncState de la <see cref="T:System.Threading.Tasks.Task`1" /> subyacente.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)">
      <summary>Crea un objeto <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> con el estado y las opciones especificados.</summary>
      <param name="state">Estado que se va a usar como AsyncState de la <see cref="T:System.Threading.Tasks.Task`1" /> subyacente.</param>
      <param name="creationOptions">Opciones que se van a usar al crear la <see cref="T:System.Threading.Tasks.Task`1" /> subyacente.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> representan las opciones no válidas para su uso con <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)">
      <summary>Crea un objeto <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" /> con las opciones especificadas.</summary>
      <param name="creationOptions">Opciones que se van a usar al crear la <see cref="T:System.Threading.Tasks.Task`1" /> subyacente.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="creationOptions" /> representan las opciones no válidas para su uso con <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetCanceled">
      <summary>Transiciona la <see cref="T:System.Threading.Tasks.Task`1" /> subyacente al estado <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</summary>
      <exception cref="T:System.InvalidOperationException">La <see cref="T:System.Threading.Tasks.Task`1" /> subyacente ya está en uno de los tres estados finales: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> o <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />, o si ya se ha eliminado la <see cref="T:System.Threading.Tasks.Task`1" /> subyacente.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> se eliminó.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>Realiza transiciones del <see cref="T:System.Threading.Tasks.Task`1" /> subyacente al estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> y enlaza en él una colección de objetos de excepción.</summary>
      <param name="exceptions">Colección de excepciones que se va a enlazar a esta <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> se eliminó.</exception>
      <exception cref="T:System.ArgumentNullException">El argumento <paramref name="exceptions" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Hay uno o más elementos nulos en <paramref name="exceptions" />.</exception>
      <exception cref="T:System.InvalidOperationException">El <see cref="T:System.Threading.Tasks.Task`1" /> subyacente ya está en uno de los tres estados finales: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> o <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)">
      <summary>Realiza transiciones del <see cref="T:System.Threading.Tasks.Task`1" /> subyacente en el estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> y lo enlaza a una excepción especificada.</summary>
      <param name="exception">Excepción que se va a enlazar a esta <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> se eliminó.</exception>
      <exception cref="T:System.ArgumentNullException">El argumento <paramref name="exception" /> es <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">El <see cref="T:System.Threading.Tasks.Task`1" /> subyacente ya está en uno de los tres estados finales: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> o <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)">
      <summary>Transiciona la <see cref="T:System.Threading.Tasks.Task`1" /> subyacente al estado <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />.</summary>
      <param name="result">Valor de resultado que se va a enlazar a esta <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> se eliminó.</exception>
      <exception cref="T:System.InvalidOperationException">El <see cref="T:System.Threading.Tasks.Task`1" /> subyacente ya está en uno de los tres estados finales: <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />, <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> o <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.TaskCompletionSource`1.Task">
      <summary>Obtiene la <see cref="T:System.Threading.Tasks.Task`1" /> creada por este objeto <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</summary>
      <returns>Devuelve la <see cref="T:System.Threading.Tasks.Task`1" /> creada por este objeto <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled">
      <summary>Intenta transicionar la <see cref="T:System.Threading.Tasks.Task`1" /> subyacente al estado <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" />.</summary>
      <returns>Es true si la operación se realizó correctamente; es false si la operación no se realizó correctamente o ya se ha desechado el objeto.</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> se eliminó.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)">
      <summary>Intenta transicionar la <see cref="T:System.Threading.Tasks.Task`1" /> subyacente al estado <see cref="F:System.Threading.Tasks.TaskStatus.Canceled" /> y permite que se almacene un token de cancelación en la tarea cancelada.</summary>
      <param name="cancellationToken">Token de cancelación.</param>
      <returns>
        <see langword="true" /> si la operación es correcta; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>Intenta realizar transiciones del <see cref="T:System.Threading.Tasks.Task`1" /> subyacente al estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> y enlaza en él una colección de objetos de excepción.</summary>
      <param name="exceptions">Colección de excepciones que se va a enlazar a esta <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <returns>Es true si la operación se realizó correctamente; en caso contrario, es false.</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> se eliminó.</exception>
      <exception cref="T:System.ArgumentNullException">El argumento <paramref name="exceptions" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Hay uno o más elementos nulos en <paramref name="exceptions" />.  
o bien 
La colección <paramref name="exceptions" /> está vacía.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)">
      <summary>Intenta realizar transiciones del <see cref="T:System.Threading.Tasks.Task`1" /> subyacente al estado <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> y lo enlaza a una excepción especificada.</summary>
      <param name="exception">Excepción que se va a enlazar a esta <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <returns>Es true si la operación se realizó correctamente; en caso contrario, es false.</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> se eliminó.</exception>
      <exception cref="T:System.ArgumentNullException">El argumento <paramref name="exception" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)">
      <summary>Intenta transicionar la <see cref="T:System.Threading.Tasks.Task`1" /> subyacente al estado <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion" />.</summary>
      <param name="result">Valor de resultado que se va a enlazar a esta <see cref="T:System.Threading.Tasks.Task`1" />.</param>
      <returns>Es true si la operación se realizó correctamente; en caso contrario, es false.</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="P:System.Threading.Tasks.TaskCompletionSource`1.Task" /> se eliminó.</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskExtensions">
      <summary>Proporciona un conjunto de métodos estáticos (Shared en Visual Basic) para que funcionen con determinados tipos de instancias de <see cref="T:System.Threading.Tasks.Task" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
      <summary>Crea un proxy <see cref="T:System.Threading.Tasks.Task" /> que representa el funcionamiento asincrónico de <see cref="M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)" />.</summary>
      <param name="task">
        <see langword="Task&lt;Task&gt;" /> (C#) o <see langword="Task (Of Task)" /> (Visual Basic) que se va a desempaquetar.</param>
      <returns>Tarea que representa la operación asincrónica del objeto <see langword="System.Threading.Tasks.Task(Of Task)" /> proporcionado.</returns>
      <exception cref="T:System.ArgumentNullException">La excepción que se produce si el argumento <paramref name="task" /> es NULL.</exception>
    </member>
    <member name="M:System.Threading.Tasks.TaskExtensions.Unwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
      <summary>Crea una <see cref="T:System.Threading.Tasks.Task" /> de proxy que representa la operación asincrónica de <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) o <see langword="Task (Of Task(Of T))" /> (Visual Basic).</summary>
      <param name="task">
        <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) o <see langword="Task (Of Task(Of T))" /> (Visual Basic) que se va a desempaquetar.</param>
      <typeparam name="TResult">Tipo del resultado de la tarea.</typeparam>
      <returns>
        <see cref="T:System.Threading.Tasks.Task" /> que representa la operación asincrónica del <see langword="Task&lt;Task&lt;T&gt;&gt;" /> (C#) o <see langword="Task (Of Task(Of T))" /> (Visual Basic) proporcionado.</returns>
      <exception cref="T:System.ArgumentNullException">La excepción que se produce si el argumento <paramref name="task" /> es NULL.</exception>
    </member>
    <member name="T:System.Threading.Tasks.TaskSchedulerException">
      <summary>Representa una excepción que se usa para comunicar una operación no válida de un objeto <see cref="T:System.Threading.Tasks.TaskScheduler" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> con un mensaje proporcionado por el sistema que describe el error.</summary>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Exception)">
      <summary>Inicializa una instancia nueva de la clase <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="innerException">Excepción que es la causa de la excepción actual.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> con datos serializados.</summary>
      <param name="info">Objeto que contiene los datos del objeto serializados.</param>
      <param name="context">Información contextual acerca del origen o del destino.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> con un mensaje especificado que describe el error.</summary>
      <param name="message">Mensaje que describe la excepción. El autor de llamada de este constructor debe asegurarse de que la cadena se haya adaptado para la referencia cultural actual del sistema.</param>
    </member>
    <member name="M:System.Threading.Tasks.TaskSchedulerException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Tasks.TaskSchedulerException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Mensaje que describe la excepción. El autor de llamada de este constructor debe asegurarse de que la cadena se haya adaptado para la referencia cultural actual del sistema.</param>
      <param name="innerException">Excepción que es la causa de la excepción actual. Si el parámetro <paramref name="innerException" /> no es <see langword="null" />, la excepción actual se produce en un bloque <see langword="catch" /> que controla la excepción interna.</param>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Channels</name>
  </assembly>
  <members>
    <member name="T:System.Threading.Channels.BoundedChannelFullMode">
      <summary>Especifica el comportamiento que se usará al escribir en un canal delimitado que ya está completo.</summary>
    </member>
    <member name="F:System.Threading.Channels.BoundedChannelFullMode.DropNewest">
      <summary>Quita y omite el elemento más reciente en el canal con el fin de dejar espacio para el elemento que se va a escribir.</summary>
    </member>
    <member name="F:System.Threading.Channels.BoundedChannelFullMode.DropOldest">
      <summary>Quita y omite el elemento más antiguo en el canal con el fin de dejar espacio para el elemento que se va a escribir.</summary>
    </member>
    <member name="F:System.Threading.Channels.BoundedChannelFullMode.DropWrite">
      <summary>Quita el elemento que se va a escribir.</summary>
    </member>
    <member name="F:System.Threading.Channels.BoundedChannelFullMode.Wait">
      <summary>Espera a que haya espacio disponible para completar la operación de escritura.</summary>
    </member>
    <member name="T:System.Threading.Channels.BoundedChannelOptions">
      <summary>Proporciona opciones que controlan el comportamiento de las instancias vinculadas de <see cref="T:System.Threading.Channels.Channel`1" />.</summary>
    </member>
    <member name="M:System.Threading.Channels.BoundedChannelOptions.#ctor(System.Int32)">
      <summary>Inicializa las opciones.</summary>
      <param name="capacity">El número máximo de elementos que puede almacenar el canal delimitado.</param>
    </member>
    <member name="P:System.Threading.Channels.BoundedChannelOptions.Capacity">
      <summary>Obtiene o establece el número máximo de elementos que puede almacenar el canal delimitado.</summary>
    </member>
    <member name="P:System.Threading.Channels.BoundedChannelOptions.FullMode">
      <summary>Obtiene o establece el comportamiento de las operaciones de escritura cuando el canal está lleno.</summary>
    </member>
    <member name="T:System.Threading.Channels.Channel">
      <summary>Proporciona los métodos estáticos para crear canales.</summary>
    </member>
    <member name="M:System.Threading.Channels.Channel.CreateBounded``1(System.Int32)">
      <summary>Crea un canal con la capacidad máxima especificada.</summary>
      <param name="capacity">El número máximo de elementos que puede almacenar el canal.</param>
      <typeparam name="T">Especifica el tipo de datos del canal.</typeparam>
      <returns>El canal creado.</returns>
    </member>
    <member name="M:System.Threading.Channels.Channel.CreateBounded``1(System.Threading.Channels.BoundedChannelOptions)">
      <summary>Crea un canal con la capacidad máxima especificada.</summary>
      <param name="options">Opciones que guían el comportamiento del canal.</param>
      <typeparam name="T">Especifica el tipo de datos del canal.</typeparam>
      <returns>El canal creado.</returns>
    </member>
    <member name="M:System.Threading.Channels.Channel.CreateUnbounded``1">
      <summary>Crea un canal ilimitado que puede ser utilizado por cualquier número de lectores y escritores al mismo tiempo.</summary>
      <typeparam name="T" />
      <returns>El canal creado.</returns>
    </member>
    <member name="M:System.Threading.Channels.Channel.CreateUnbounded``1(System.Threading.Channels.UnboundedChannelOptions)">
      <summary>Crea un canal ilimitado sujeto a las opciones proporcionadas.</summary>
      <param name="options">Opciones que guían el comportamiento del canal.</param>
      <typeparam name="T">Especifica el tipo de datos del canal.</typeparam>
      <returns>El canal creado.</returns>
    </member>
    <member name="T:System.Threading.Channels.Channel`1">
      <summary>Proporciona una clase base para los canales que permiten leer y escribir los elementos de tipo <typeparamref name="T" />.</summary>
      <typeparam name="T">Especifica el tipo de datos legibles y en los que se puede escribir en el canal.</typeparam>
    </member>
    <member name="M:System.Threading.Channels.Channel`1.#ctor" />
    <member name="T:System.Threading.Channels.Channel`2">
      <summary>Proporciona una clase base para los canales que permiten leer los elementos de tipo <typeparamref name="TRead" /> y escribir elementos de tipo <typeparamref name="TWrite" />.</summary>
      <typeparam name="TWrite">Especifica el tipo de datos que se pueden escribir en el canal.</typeparam>
      <typeparam name="TRead">Especifica el tipo de datos que se pueden leer del canal.</typeparam>
    </member>
    <member name="M:System.Threading.Channels.Channel`2.#ctor" />
    <member name="M:System.Threading.Channels.Channel`2.op_Implicit(System.Threading.Channels.Channel{`0,`1})~System.Threading.Channels.ChannelReader{`1}">
      <summary>Conversión implícita de un elemento <see cref="T:System.Threading.Channels.Channel`2" /> a su mitad legible.</summary>
      <param name="channel">
        <see cref="T:System.Threading.Channels.Channel`2" /> que se va a convertir.</param>
      <returns>La mitad legible.</returns>
    </member>
    <member name="M:System.Threading.Channels.Channel`2.op_Implicit(System.Threading.Channels.Channel{`0,`1})~System.Threading.Channels.ChannelWriter{`0}">
      <summary>Conversión implícita de un elemento <see cref="T:System.Threading.Channels.Channel`2" /> a su mitad que admite escritura.</summary>
      <param name="channel">
        <see cref="T:System.Threading.Channels.Channel`2" /> que se va a convertir.</param>
      <returns>La mitad que admite escritura.</returns>
    </member>
    <member name="P:System.Threading.Channels.Channel`2.Reader">
      <summary>Obtiene la mitad que admite lectura de este canal.</summary>
    </member>
    <member name="P:System.Threading.Channels.Channel`2.Writer">
      <summary>Obtiene la mitad que admite escritura de este canal.</summary>
    </member>
    <member name="T:System.Threading.Channels.ChannelClosedException">
      <summary>Excepción que se produce cuando se usa un canal después de que se ha cerrado.</summary>
    </member>
    <member name="M:System.Threading.Channels.ChannelClosedException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Channels.ChannelClosedException" />.</summary>
    </member>
    <member name="M:System.Threading.Channels.ChannelClosedException.#ctor(System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Channels.ChannelClosedException" />.</summary>
      <param name="innerException">Excepción que es la causa de esta excepción.</param>
    </member>
    <member name="M:System.Threading.Channels.ChannelClosedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Channels.ChannelClosedException" /> con datos serializados.</summary>
      <param name="info">Objeto que contiene los datos del objeto serializados.</param>
      <param name="context">Información contextual acerca del origen o del destino.</param>
    </member>
    <member name="M:System.Threading.Channels.ChannelClosedException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Channels.ChannelClosedException" />.</summary>
      <param name="message">Mensaje que describe el error.</param>
    </member>
    <member name="M:System.Threading.Channels.ChannelClosedException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Threading.Channels.ChannelClosedException" />.</summary>
      <param name="message">Mensaje que describe el error.</param>
      <param name="innerException">Excepción que es la causa de esta excepción.</param>
    </member>
    <member name="T:System.Threading.Channels.ChannelOptions">
      <summary>Proporciona opciones que controlan el comportamiento de las instancias del canal.</summary>
    </member>
    <member name="M:System.Threading.Channels.ChannelOptions.#ctor" />
    <member name="P:System.Threading.Channels.ChannelOptions.AllowSynchronousContinuations">
      <summary>
        <see langword="true" /> si las operaciones realizadas en un canal pueden invocar sincrónicamente las continuaciones suscritas a notificaciones de operaciones asíncronicas pendientes; <see langword="false" /> si todas las continuaciones deben invocarse de forma asíncronica.</summary>
    </member>
    <member name="P:System.Threading.Channels.ChannelOptions.SingleReader">
      <summary>
        <see langword="true" /> lectores del canal garantizan que siempre habrá al menos una operación de lectura a la vez; <see langword="false" /> si no se garantiza ninguna restricción de este tipo.</summary>
    </member>
    <member name="P:System.Threading.Channels.ChannelOptions.SingleWriter">
      <summary>
        <see langword="true" /> si los escritores del canal garantizan que siempre habrá al menos una operación de escritura a la vez; <see langword="false" /> si no se garantiza ninguna restricción de este tipo.</summary>
    </member>
    <member name="T:System.Threading.Channels.ChannelReader`1">
      <summary>Proporciona una clase base para leer desde un canal.</summary>
      <typeparam name="T">Especifica el tipo de datos que se pueden leer del canal.</typeparam>
    </member>
    <member name="M:System.Threading.Channels.ChannelReader`1.#ctor" />
    <member name="P:System.Threading.Channels.ChannelReader`1.Completion">
      <summary>Obtiene un <see cref="T:System.Threading.Tasks.Task" /> que se completa cuando ya no haya más datos disponibles para leer desde este canal.</summary>
    </member>
    <member name="M:System.Threading.Channels.ChannelReader`1.ReadAllAsync(System.Threading.CancellationToken)">
      <summary>Crea una instancia de <see cref="T:System.Collections.Generic.IAsyncEnumerable`1" /> que permite leer todos los datos del canal.</summary>
      <param name="cancellationToken">Token de cancelación que se va a usar para cancelar la enumeración.</param>
      <returns>El enumerable asincrónico que se ha creado.</returns>
    </member>
    <member name="M:System.Threading.Channels.ChannelReader`1.ReadAsync(System.Threading.CancellationToken)">
      <summary>Lee asincrónicamente un elemento desde el canal.</summary>
      <param name="cancellationToken">Un <see cref="T:System.Threading.CancellationToken" /> usado para cancelar la operación de lectura.</param>
      <returns>Un <see cref="T:System.Threading.Tasks.ValueTask`1" /> que representa la operación de lectura asincrónica.</returns>
    </member>
    <member name="M:System.Threading.Channels.ChannelReader`1.TryRead(`0@)">
      <summary>Intenta leer un elemento del canal.</summary>
      <param name="item">El elemento de lectura, o un valor predeterminado si no hay ningún elemento que se pueda leer.</param>
      <returns>
        <see langword="true" /> si un elemento se ha leído; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Channels.ChannelReader`1.WaitToReadAsync(System.Threading.CancellationToken)">
      <summary>Devuelve un <see cref="T:System.Threading.Tasks.Task`1" /> que se completará cuando haya datos disponibles para leer.</summary>
      <param name="cancellationToken">Un <see cref="T:System.Threading.CancellationToken" /> utilizado para cancelar la operación de espera.</param>
      <returns>Un <see cref="T:System.Threading.Tasks.Task`1" /> que se completará con un resultado <see langword="true" /> cuando haya datos disponibles para leer o con un resultado <see langword="false" /> cuando ya no haya datos disponibles para leer.</returns>
    </member>
    <member name="T:System.Threading.Channels.ChannelWriter`1">
      <summary>Proporciona una clase base para escribir en un canal.</summary>
      <typeparam name="T">Especifica el tipo de datos que se pueden escribir en el canal.</typeparam>
    </member>
    <member name="M:System.Threading.Channels.ChannelWriter`1.#ctor" />
    <member name="M:System.Threading.Channels.ChannelWriter`1.Complete(System.Exception)">
      <summary>Marque el canal como completo, lo que significa que ya no se escribirán más elementos en él.</summary>
      <param name="error">Excepción opcional que indica un error que está causando que el canal se complete.</param>
      <exception cref="T:System.InvalidOperationException">El canal ya se ha marcado como completo.</exception>
    </member>
    <member name="M:System.Threading.Channels.ChannelWriter`1.TryComplete(System.Exception)">
      <summary>Intenta marcar el canal como completo, lo que significa que ya no se escribirán más datos en él.</summary>
      <param name="error">Un <see cref="T:System.Exception" /> que indica el error que causa que no se escriban más datos, o null si es correcto.</param>
      <returns>
        <see langword="true" /> si esta operación completa correctamente el canal; en caso contrario, <see langword="false" /> si no se pudo marcar el canal como completo (porque ya se ha marcado como tal o porque no admite ese estado, por ejemplo).</returns>
    </member>
    <member name="M:System.Threading.Channels.ChannelWriter`1.TryWrite(`0)">
      <summary>Intenta escribir el elemento especificado en el canal.</summary>
      <param name="item">El elemento que se va a escribir.</param>
      <returns>
        <see langword="true" /> si el elemento se ha escrito; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Channels.ChannelWriter`1.WaitToWriteAsync(System.Threading.CancellationToken)">
      <summary>Devuelve un <see cref="T:System.Threading.Tasks.Task`1" /> que se completará cuando haya espacio disponible para escribir un elemento.</summary>
      <param name="cancellationToken">Un <see cref="T:System.Threading.CancellationToken" /> utilizado para cancelar la operación de espera.</param>
      <returns>Un <see cref="T:System.Threading.Tasks.Task`1" /> que se completará con un resultado <see langword="true" /> si hay espacio disponible para escribir un elemento o con un resultado <see langword="false" /> si no se permite más escritura.</returns>
    </member>
    <member name="M:System.Threading.Channels.ChannelWriter`1.WriteAsync(`0,System.Threading.CancellationToken)">
      <summary>Escribe asincrónicamente un elemento en el canal.</summary>
      <param name="item">El valor para escribir en el canal.</param>
      <param name="cancellationToken">Un <see cref="T:System.Threading.CancellationToken" /> utilizado para cancelar la operación de escritura.</param>
      <returns>Un <see cref="T:System.Threading.Tasks.Task" /> que representa la operación de escritura asincrónica.</returns>
    </member>
    <member name="T:System.Threading.Channels.UnboundedChannelOptions">
      <summary>Proporciona opciones que controlan el comportamiento de las instancias desvinculadas de <see cref="T:System.Threading.Channels.Channel`1" />.</summary>
    </member>
    <member name="M:System.Threading.Channels.UnboundedChannelOptions.#ctor" />
  </members>
</doc>
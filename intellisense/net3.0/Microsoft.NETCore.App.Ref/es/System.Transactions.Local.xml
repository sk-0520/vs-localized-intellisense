<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Transactions.Local</name>
  </assembly>
  <members>
    <member name="T:System.Transactions.CommittableTransaction">
      <summary>Describe una transacción confirmable.</summary>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.CommittableTransaction" />.</summary>
      <exception cref="T:System.PlatformNotSupportedException">Se intenta crear una transacción bajo Windows 98, Windows 98 Segunda Edición o Windows Millennium Edition.</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.CommittableTransaction" /> con el valor <paramref name="timeout" /> especificado.</summary>
      <param name="timeout">El tiempo máximo que la transacción puede existir, antes de anularse.</param>
      <exception cref="T:System.PlatformNotSupportedException">Se intenta crear una transacción bajo Windows 98, Windows 98 Segunda Edición o Windows Millennium Edition.</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.CommittableTransaction" /> con las opciones de transacción especificadas.</summary>
      <param name="options">Estructura <see cref="T:System.Transactions.TransactionOptions" /> que describe las opciones de transacción que se van a utilizar para la nueva transacción.</param>
      <exception cref="T:System.PlatformNotSupportedException">Se intenta crear una transacción bajo Windows 98, Windows 98 Segunda Edición o Windows Millennium Edition.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> no es válido.</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)">
      <summary>Comienza un intento de confirmar la transacción de forma asincrónica.</summary>
      <param name="asyncCallback">El delegado <see cref="T:System.AsyncCallback" /> que se invoca cuando finaliza la transacción. Este parámetro puede ser <see langword="null" />, en cuyo caso no se notifica a la aplicación de la finalización de la transacción. En lugar de ello, la aplicación debe utilizar la interfaz de <see cref="T:System.IAsyncResult" /> para esperar a que la transacción haya finalizado o llamar al método <see cref="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)" /> para esperar a que finalice.</param>
      <param name="asyncState">Un objeto, que podría contener la información de estado arbitraria, asociado a la confirmación asincrónica. Se pasa este objeto en la devolución de llamada y <see cref="N:System.Transactions" /> no lo interpreta. Se permiten las referencias null.</param>
      <returns>El llamador puede utilizar una interfaz <see cref="T:System.IAsyncResult" /> para comprobar el estado de la operación asincrónica o esperar a que se realice la operación.</returns>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.Commit">
      <summary>Intenta confirmar la transacción.</summary>
      <exception cref="T:System.Transactions.TransactionInDoubtException">Se llama al método <see cref="M:System.Transactions.CommittableTransaction.Commit" /> en una transacción y la transacción pasa a ser <see cref="F:System.Transactions.TransactionStatus.InDoubt" />.</exception>
      <exception cref="T:System.Transactions.TransactionAbortedException">Se llama al método <see cref="M:System.Transactions.CommittableTransaction.Commit" /> y se deshace la transacción por primera vez.</exception>
    </member>
    <member name="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)">
      <summary>Finaliza un intento de confirmar la transacción de forma asincrónica.</summary>
      <param name="asyncResult">Objeto <see cref="T:System.IAsyncResult" /> asociado a la confirmación asincrónica.</param>
      <exception cref="T:System.Transactions.TransactionAbortedException">Se llama al método <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> y se deshace la transacción por primera vez.</exception>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState">
      <summary>Obtiene el objeto proporcionado como el último parámetro de la llamada al método <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" />.</summary>
      <returns>Objeto proporcionado como el último parámetro de la llamada al método <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" />.</returns>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle">
      <summary>Obtiene <see cref="T:System.Threading.WaitHandle" /> que se utiliza para esperar a que finalice una operación asincrónica.</summary>
      <returns>
        <see cref="T:System.Threading.WaitHandle" /> que se utiliza para esperar a que finalice una operación asincrónica.</returns>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously">
      <summary>Obtiene una indicación que especifica si la operación de confirmación asincrónica ha finalizado sincrónicamente.</summary>
      <returns>
        <see langword="true" /> si la operación de confirmación asincrónica ha finalizado sincrónicamente; en caso contrario, <see langword="false" />. Esta propiedad siempre devuelve <see langword="false" /> aún cuando la operación finalice sincrónicamente.</returns>
    </member>
    <member name="P:System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted">
      <summary>Obtiene una indicación que especifica si la operación de confirmación asincrónica ha finalizado.</summary>
      <returns>
        <see langword="true" /> si la operación se ha completado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Transactions.DependentCloneOption">
      <summary>Controla qué tipo de transacción dependiente se va a crear.</summary>
    </member>
    <member name="F:System.Transactions.DependentCloneOption.BlockCommitUntilComplete">
      <summary>La transacción dependiente bloquea el proceso de confirmación de la transacción hasta que se agota el tiempo de espera de la transacción primaria o se llama a <see cref="M:System.Transactions.DependentTransaction.Complete" />. En este caso, el trabajo adicional se puede realizar en la transacción y se pueden crear nuevas inscripciones.</summary>
    </member>
    <member name="F:System.Transactions.DependentCloneOption.RollbackIfNotComplete">
      <summary>La transacción dependiente anula automáticamente la transacción si se llama a Commit en la transacción primaria antes de que se llame a <see cref="M:System.Transactions.DependentTransaction.Complete" />.</summary>
    </member>
    <member name="T:System.Transactions.DependentTransaction">
      <summary>Describe un clon de una transacción y garantiza que no se puede confirmar la transacción hasta que la aplicación no deja de procesar la transacción. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Transactions.DependentTransaction.Complete">
      <summary>Intenta finalizar la transacción dependiente.</summary>
      <exception cref="T:System.Transactions.TransactionException">Cualquier intento de trabajo adicional en la transacción después de llamarse a este método. Incluyen la invocación de métodos como <see cref="Overload:System.Transactions.Transaction.EnlistVolatile" />, <see cref="Overload:System.Transactions.Transaction.EnlistDurable" />, <see cref="M:System.Transactions.Transaction.Clone" />, <see cref="M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)" /> o cualquier operación de serialización en la transacción.</exception>
    </member>
    <member name="T:System.Transactions.Enlistment">
      <summary>Facilita la comunicación entre un participante de la transacción inscrito y el administrador de transacciones durante la fase final de la transacción.</summary>
    </member>
    <member name="M:System.Transactions.Enlistment.Done">
      <summary>Indica que el participante de la transacción ha finalizado su trabajo.</summary>
    </member>
    <member name="T:System.Transactions.EnlistmentOptions">
      <summary>Determina si el objeto se debería inscribir durante la fase de preparación.</summary>
    </member>
    <member name="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired">
      <summary>El objeto debe inscribirse durante la fase inicial del proceso de confirmación.</summary>
    </member>
    <member name="F:System.Transactions.EnlistmentOptions.None">
      <summary>No es necesario inscribir el objeto durante la fase inicial del proceso de confirmación.</summary>
    </member>
    <member name="T:System.Transactions.EnterpriseServicesInteropOption">
      <summary>Especifica cómo interactúan las transacciones distribuidas con transacciones COM+.</summary>
    </member>
    <member name="F:System.Transactions.EnterpriseServicesInteropOption.Automatic">
      <summary>Busque un contexto COM+ existente y sincronícelo con este si existe uno.</summary>
    </member>
    <member name="F:System.Transactions.EnterpriseServicesInteropOption.Full">
      <summary>El contexto <see cref="N:System.EnterpriseServices" /> (que se puede recuperar llamando al método estático <see cref="P:System.EnterpriseServices.ContextUtil.Transaction" /> de la clase <see cref="T:System.EnterpriseServices.ContextUtil" />) y la transacción de ambiente <see cref="N:System.Transactions" /> (que se puede recuperar llamando al método estático <see cref="P:System.Transactions.Transaction.Current" /> de la clase <see cref="T:System.Transactions.Transaction" />) se sincronizan siempre. Esto presenta una reducción del rendimiento porque quizá sea necesario crear nuevos contextos <see cref="N:System.EnterpriseServices" />.</summary>
    </member>
    <member name="F:System.Transactions.EnterpriseServicesInteropOption.None">
      <summary>No hay sincronización entre <see cref="P:System.EnterpriseServices.ContextUtil.Transaction" /> y <see cref="P:System.Transactions.Transaction.Current" />.</summary>
    </member>
    <member name="T:System.Transactions.HostCurrentTransactionCallback">
      <summary>Proporciona un mecanismo para el entorno de host para proporcionar su propia noción predeterminada de <see cref="P:System.Transactions.Transaction.Current" />.</summary>
      <returns>Objeto <see cref="T:System.Transactions.Transaction" />.</returns>
    </member>
    <member name="T:System.Transactions.IDtcTransaction">
      <summary>Describe una transacción DTC.</summary>
    </member>
    <member name="M:System.Transactions.IDtcTransaction.Abort(System.IntPtr,System.Int32,System.Int32)">
      <summary>Anula una transacción.</summary>
      <param name="reason">Valor <see cref="T:System.EnterpriseServices.BOID" /> opcional que indica por qué se anula la transacción. Este parámetro puede ser <see langword="null" />, lo que indica que no hay motivo para la anulación.</param>
      <param name="retaining">Este valor puede ser <see langword="false" />.</param>
      <param name="async">Cuando <paramref name="async" /> es <see langword="true" />, se realiza una anulación asincrónica, y el llamador debe utilizar <see langword="ITransactionOutcomeEvents" /> para obtener información sobre el resultado de la transacción.</param>
    </member>
    <member name="M:System.Transactions.IDtcTransaction.Commit(System.Int32,System.Int32,System.Int32)">
      <summary>Confirma una transacción.</summary>
      <param name="retaining">Este valor puede ser <see langword="false" />.</param>
      <param name="commitType">Valor procedente de la enumeración de OLE DB <see langword="XACTTC" />.</param>
      <param name="reserved">Este valor debe ser cero.</param>
    </member>
    <member name="M:System.Transactions.IDtcTransaction.GetTransactionInfo(System.IntPtr)">
      <summary>Recupera información sobre una transacción.</summary>
      <param name="transactionInformation">Puntero a la estructura <see cref="T:System.EnterpriseServices.XACTTRANSINFO" />, asignada por el llamador, que recibirá la información acerca de la transacción. Este valor no debe ser <see langword="null" />.</param>
    </member>
    <member name="T:System.Transactions.IEnlistmentNotification">
      <summary>Describe una interfaz que un administrador de recursos debe implementar para proporcionar devoluciones de llamada de notificación de confirmación en dos fases para el administrador de transacciones al inscribirse para la participación.</summary>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)">
      <summary>Notifica a un objeto inscrito que se confirma una transacción.</summary>
      <param name="enlistment">Objeto <see cref="T:System.Transactions.Enlistment" /> utilizado para enviar una respuesta al administrador de transacciones.</param>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)">
      <summary>Notifica a un objeto inscrito que el estado de una transacción está en duda.</summary>
      <param name="enlistment">Objeto <see cref="T:System.Transactions.Enlistment" /> utilizado para enviar una respuesta al administrador de transacciones.</param>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)">
      <summary>Notifica a un objeto inscrito que se prepara una transacción para la confirmación.</summary>
      <param name="preparingEnlistment">Objeto <see cref="T:System.Transactions.PreparingEnlistment" /> utilizado para enviar una respuesta al administrador de transacciones.</param>
    </member>
    <member name="M:System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)">
      <summary>Notifica a un objeto inscrito que se deshace (se anula) una transacción.</summary>
      <param name="enlistment">Objeto <see cref="T:System.Transactions.Enlistment" /> utilizado para enviar una respuesta al administrador de transacciones.</param>
    </member>
    <member name="T:System.Transactions.IPromotableSinglePhaseNotification">
      <summary>Describe un objeto que actúa como un delegado de confirmación para una transacción no distribuida interna a un administrador de recursos.</summary>
    </member>
    <member name="M:System.Transactions.IPromotableSinglePhaseNotification.Initialize">
      <summary>Notifica a un participante de la transacción que la inscripción se ha realizado correctamente.</summary>
      <exception cref="T:System.Transactions.TransactionException">Se intenta inscribir o serializar una transacción.</exception>
    </member>
    <member name="M:System.Transactions.IPromotableSinglePhaseNotification.Rollback(System.Transactions.SinglePhaseEnlistment)">
      <summary>Notifica a un objeto inscrito que se deshace la transacción.</summary>
      <param name="singlePhaseEnlistment">Objeto <see cref="T:System.Transactions.SinglePhaseEnlistment" /> utilizado para enviar una respuesta al administrador de transacciones.</param>
    </member>
    <member name="M:System.Transactions.IPromotableSinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)">
      <summary>Notifica a un objeto inscrito que se confirma la transacción.</summary>
      <param name="singlePhaseEnlistment">Interfaz <see cref="T:System.Transactions.SinglePhaseEnlistment" /> utilizada para enviar una respuesta al administrador de transacciones.</param>
    </member>
    <member name="T:System.Transactions.ISimpleTransactionSuperior">
      <summary>Representa una transacción que no es una transacción raíz, pero se puede escalar para que sea administrado por MSDTC.</summary>
    </member>
    <member name="M:System.Transactions.ISimpleTransactionSuperior.Rollback">
      <summary>Notifica a un objeto inscrito que se deshace la transacción.</summary>
    </member>
    <member name="T:System.Transactions.ISinglePhaseNotification">
      <summary>Describe un objeto de recurso que admite la optimización de confirmación de fase única para participar en una transacción.</summary>
    </member>
    <member name="M:System.Transactions.ISinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)">
      <summary>Representa la implementación del administrador de recursos de la devolución de llamada para la optimización de confirmación en una fase.</summary>
      <param name="singlePhaseEnlistment">Objeto <see cref="T:System.Transactions.SinglePhaseEnlistment" /> utilizado para enviar una respuesta al administrador de transacciones.</param>
    </member>
    <member name="T:System.Transactions.IsolationLevel">
      <summary>Especifica el nivel de aislamiento de una transacción.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Chaos">
      <summary>Los cambios pendientes de las transacciones más aisladas no se pueden sobrescribir.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.ReadCommitted">
      <summary>Los datos variables no se pueden leer durante la transacción, pero se pueden modificar.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.ReadUncommitted">
      <summary>Los datos variables se pueden leer y modificar durante la transacción.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.RepeatableRead">
      <summary>Se pueden leer datos variables pero no modificarse durante la transacción. Se pueden agregar nuevos datos durante la transacción.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Serializable">
      <summary>Se pueden leer datos variables pero no modificarse y no se pueden agregar nuevos datos durante la transacción.</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Snapshot">
      <summary>Se pueden leer los datos variables. Antes de que una transacción modifique los datos, comprueba si otra transacción ha cambiado los datos después de haberlos leído inicialmente. Si se han actualizado los datos, se produce un error. Esto permite a una transacción llegar al valor previamente confirmado de los datos.
Cuando se intenta promover una transacción creada con el nivel de aislamiento <see langword="Snapshot" />, se muestra una excepción <see cref="T:System.InvalidOperationException" /> con el mensaje de error "No se pueden promover transacciones con la instantánea IsolationLevel".</summary>
    </member>
    <member name="F:System.Transactions.IsolationLevel.Unspecified">
      <summary>Se utiliza un nivel de aislamiento distinto al especificado, pero no se puede determinar el nivel. Se produce una excepción si se establece este valor.</summary>
    </member>
    <member name="T:System.Transactions.ITransactionPromoter">
      <summary>Describe una transacción delegada para una transacción existente que se puede elevar para ser administrada por MSDTC cuando se necesita.</summary>
    </member>
    <member name="M:System.Transactions.ITransactionPromoter.Promote">
      <summary>Notifica al objeto que está en la lista que se ha solicitado una elevación de la transacción delegada.</summary>
      <returns>Un token de propagación de receptor/transmisor que calcula las referencias de una transacción distribuida. Para obtener más información, vea <see cref="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])" />.</returns>
    </member>
    <member name="T:System.Transactions.PreparingEnlistment">
      <summary>Facilita la comunicación entre un participante de la transacción inscrito y el administrador de transacciones durante la fase de preparación de la transacción.</summary>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.ForceRollback">
      <summary>Indica que debería deshacerse la transacción.</summary>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.ForceRollback(System.Exception)">
      <summary>Indica que debería deshacerse la transacción.</summary>
      <param name="e">Explicación de por qué se desencadena una operación de reversión.</param>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.Prepared">
      <summary>Indica que se puede confirmar la transacción.</summary>
    </member>
    <member name="M:System.Transactions.PreparingEnlistment.RecoveryInformation">
      <summary>Obtiene la información de recuperación de una inscripción.</summary>
      <returns>La información de recuperación de una inscripción.</returns>
      <exception cref="T:System.InvalidOperationException">Se ha intentado obtener información de recuperación dentro de una inscripción volátil, que no genera información de recuperación.</exception>
    </member>
    <member name="T:System.Transactions.SinglePhaseEnlistment">
      <summary>Proporciona un conjunto de devoluciones de llamada que facilitan la comunicación entre un participante inscrito en la confirmación en una fase y el administrador de transacciones cuando se recibe la notificación <see cref="M:System.Transactions.ISinglePhaseNotification.SinglePhaseCommit(System.Transactions.SinglePhaseEnlistment)" />.</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.Aborted">
      <summary>Representa una devolución de llamada que se utiliza para indicar al administrador de transacciones que se debería deshacer la transacción.</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.Aborted(System.Exception)">
      <summary>Representa una devolución de llamada que se utiliza para indicar al administrador de transacciones que se debería deshacer la transacción y proporciona una explicación.</summary>
      <param name="e">Explicación de por qué se inicia una operación de reversión.</param>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.Committed">
      <summary>Representa una devolución de llamada que se utiliza para indicar al administrador de transacciones que SinglePhaseCommit ha tenido éxito.</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.InDoubt">
      <summary>Representa una devolución de llamada que se utiliza para indicar al administrador de transacciones que el estado de la transacción está en duda.</summary>
    </member>
    <member name="M:System.Transactions.SinglePhaseEnlistment.InDoubt(System.Exception)">
      <summary>Representa una devolución de llamada que se utiliza para indicar al administrador de transacciones que el estado de la transacción está en duda y proporciona una explicación.</summary>
      <param name="e">Explicación de por qué la transacción está en duda.</param>
    </member>
    <member name="T:System.Transactions.SubordinateTransaction">
      <summary>Representa una transacción que no es raíz y que puede delegarse. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Transactions.SubordinateTransaction.#ctor(System.Transactions.IsolationLevel,System.Transactions.ISimpleTransactionSuperior)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.SubordinateTransaction" />.</summary>
      <param name="isoLevel">Nivel de aislamiento de la transacción.</param>
      <param name="superior">
        <see cref="T:System.Transactions.ISimpleTransactionSuperior" />.</param>
    </member>
    <member name="T:System.Transactions.Transaction">
      <summary>Representa una transacción.</summary>
    </member>
    <member name="M:System.Transactions.Transaction.Clone">
      <summary>Crea un duplicado de la transacción.</summary>
      <returns>
        <see cref="T:System.Transactions.Transaction" /> que es una copia del objeto de transacción actual.</returns>
    </member>
    <member name="P:System.Transactions.Transaction.Current">
      <summary>Obtiene o establece la transacción de ambiente.</summary>
      <returns>
        <see cref="T:System.Transactions.Transaction" /> que describe la transacción actual.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)">
      <summary>Crea un clon dependiente de la transacción.</summary>
      <param name="cloneOption">
        <see cref="T:System.Transactions.DependentCloneOption" /> que controla qué tipo de transacción dependiente se va a crear.</param>
      <returns>
        <see cref="T:System.Transactions.DependentTransaction" /> que representa el clon dependiente.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.Dispose">
      <summary>Libera los recursos que mantiene el objeto.</summary>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)">
      <summary>Inscribe un administrador de recursos duradero que admite la confirmación en dos fases para participar en una transacción.</summary>
      <param name="resourceManagerIdentifier">Identificador único para un administrador de recursos, que debería conservarse cuando hay un error del administrador de recursos o un reinicio.</param>
      <param name="enlistmentNotification">Objeto que implementa la interfaz <see cref="T:System.Transactions.IEnlistmentNotification" /> para recibir notificaciones de confirmación en dos fases.</param>
      <param name="enlistmentOptions">
        <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" /> si el administrador de recursos desea realizar un trabajo adicional durante la fase de preparación.</param>
      <returns>Objeto <see cref="T:System.Transactions.Enlistment" /> que describe la inscripción.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)">
      <summary>Inscribe un administrador de recursos duradero que admite la optimización de confirmación en dos fases para participar en una transacción.</summary>
      <param name="resourceManagerIdentifier">Identificador único para un administrador de recursos, que debería conservarse cuando hay un error del administrador de recursos o un reinicio.</param>
      <param name="singlePhaseNotification">Objeto que implementa la interfaz <see cref="T:System.Transactions.ISinglePhaseNotification" /> que debe poder recibir notificaciones de confirmación en una sola o en dos fases.</param>
      <param name="enlistmentOptions">
        <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" /> si el administrador de recursos desea realizar un trabajo adicional durante la fase de preparación.</param>
      <returns>Objeto <see cref="T:System.Transactions.Enlistment" /> que describe la inscripción.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)">
      <summary>Inscribe a un administrador de recursos que tiene una transacción interna mediante una Inscripción de fase única promocionable (PSPE).</summary>
      <param name="promotableSinglePhaseNotification">Interfaz <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> implementada por el participante.</param>
      <returns>Implementación de interfaz <see cref="T:System.Transactions.SinglePhaseEnlistment" /> que describe la inscripción.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)">
      <summary>Inscribe a un administrador de recursos que tiene una transacción interna mediante una Inscripción de fase única promocionable (PSPE).</summary>
      <param name="promotableSinglePhaseNotification">Interfaz <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> implementada por el participante.</param>
      <param name="promoterType">Tipo de procesador de la transacción distribuida.</param>
      <returns>Implementación de interfaz <see cref="T:System.Transactions.SinglePhaseEnlistment" /> que describe la inscripción.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)">
      <summary>Inscribe un administrador de recursos volátil que admite confirmación en dos fases para participar en una transacción.</summary>
      <param name="enlistmentNotification">Objeto que implementa la interfaz <see cref="T:System.Transactions.IEnlistmentNotification" /> para recibir notificaciones de confirmación en dos fases.</param>
      <param name="enlistmentOptions">
        <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" /> si el administrador de recursos desea realizar un trabajo adicional durante la fase de preparación.</param>
      <returns>Objeto <see cref="T:System.Transactions.Enlistment" /> que describe la inscripción.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)">
      <summary>Inscribe un administrador de recursos volátil que admite la optimización de confirmación en una fase para participar en una transacción.</summary>
      <param name="singlePhaseNotification">Objeto que implementa la interfaz <see cref="T:System.Transactions.ISinglePhaseNotification" /> que debe poder recibir notificaciones de confirmación en una sola o en dos fases.</param>
      <param name="enlistmentOptions">
        <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" /> si el administrador de recursos desea realizar un trabajo adicional durante la fase de preparación.</param>
      <returns>Objeto <see cref="T:System.Transactions.Enlistment" /> que describe la inscripción.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.Equals(System.Object)">
      <summary>Determina si esta transacción y el objeto especificado son iguales.</summary>
      <param name="obj">Objeto que se va a comparar con esta instancia.</param>
      <returns>
        <see langword="true" /> si <paramref name="obj" /> y esta transacción son idénticos; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.GetPromotedToken">
      <summary>Obtiene <c>byte[]</c> que el método <c>Promote</c> devuelve cuando se promueve la transacción.</summary>
      <returns>
        <c>byte[]</c> que el método <c>Promote</c> devuelve cuando se promueve la transacción.</returns>
    </member>
    <member name="P:System.Transactions.Transaction.IsolationLevel">
      <summary>Obtiene el nivel de aislamiento de la transacción.</summary>
      <returns>Uno de los valores de <see cref="T:System.Transactions.IsolationLevel" /> que indica el nivel de aislamiento de la transacción.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)">
      <summary>Comprueba si dos instancias de <see cref="T:System.Transactions.Transaction" /> especificadas son equivalentes.</summary>
      <param name="x">Instancia de <see cref="T:System.Transactions.Transaction" /> situada a la izquierda del operador de igualdad.</param>
      <param name="y">Instancia de <see cref="T:System.Transactions.Transaction" /> situada a la derecha del operador de igualdad.</param>
      <returns>
        <see langword="true" /> si <paramref name="x" /> y <paramref name="y" /> son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)">
      <summary>Devuelve un valor que indica si dos instancias de <see cref="T:System.Transactions.Transaction" /> no son iguales.</summary>
      <param name="x">Instancia de <see cref="T:System.Transactions.Transaction" /> situada a la izquierda del operador de desigualdad.</param>
      <param name="y">Instancia de <see cref="T:System.Transactions.Transaction" /> situada a la derecha del operador de desigualdad.</param>
      <returns>
        <see langword="true" /> si <paramref name="x" /> y <paramref name="y" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)">
      <summary>Promueve e inscribe un administrador de recursos duradero que admite la confirmación en dos fases para participar en una transacción.</summary>
      <param name="resourceManagerIdentifier">Identificador único para un administrador de recursos, que debería conservarse cuando hay un error del administrador de recursos o un reinicio.</param>
      <param name="promotableNotification">Un objeto que actúa como un delegado de confirmación para una transacción no distribuida interna a un administrador de recursos.</param>
      <param name="enlistmentNotification">Objeto que implementa la interfaz <see cref="T:System.Transactions.IEnlistmentNotification" /> para recibir notificaciones de confirmación en dos fases.</param>
      <param name="enlistmentOptions">
        <see cref="F:System.Transactions.EnlistmentOptions.EnlistDuringPrepareRequired" /> si el administrador de recursos desea realizar un trabajo adicional durante la fase de preparación.</param>
    </member>
    <member name="P:System.Transactions.Transaction.PromoterType">
      <summary>Identifica de forma única el formato de <c>byte[]</c> que el método Promote devuelve cuando se promueve la transacción.</summary>
      <returns>GUID que identifica de forma única el formato del <c>Byte []</c> devuelto por el método Promote cuando se promueve la transacción.</returns>
    </member>
    <member name="M:System.Transactions.Transaction.Rollback">
      <summary>Revierte (anula) la transacción.</summary>
    </member>
    <member name="M:System.Transactions.Transaction.Rollback(System.Exception)">
      <summary>Revierte (anula) la transacción.</summary>
      <param name="e">Explicación de por qué se ha producido una operación de reversión.</param>
    </member>
    <member name="M:System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)">
      <summary>Establece el identificador de transacción distribuida generado por el promotor que no es de MSDTC.</summary>
      <param name="promotableNotification">Interfaz <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> implementada por el participante.</param>
      <param name="distributedTransactionIdentifier">El identificador de la transacción usado por el administrador de transacciones distribuidas.</param>
    </member>
    <member name="M:System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Obtiene una clase <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con los datos necesarios para serializar esta transacción.</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que se rellena con datos.</param>
      <param name="context">Destino (vea <see cref="T:System.Runtime.Serialization.StreamingContext" />) de esta serialización.</param>
    </member>
    <member name="E:System.Transactions.Transaction.TransactionCompleted">
      <summary>Indica que se ha finalizado la transacción.</summary>
      <exception cref="T:System.ObjectDisposedException">Se intenta suscribir este evento en una transacción que se ha eliminado.</exception>
    </member>
    <member name="P:System.Transactions.Transaction.TransactionInformation">
      <summary>Recupera información adicional sobre una transacción.</summary>
      <returns>
        <see cref="T:System.Transactions.TransactionInformation" /> que contiene información adicional acerca de la transacción.</returns>
    </member>
    <member name="T:System.Transactions.TransactionAbortedException">
      <summary>La excepción que se produce cuando se intenta una operación en una transacción que ya se ha deshecho o se intenta confirmar la transacción y se anula la transacción.</summary>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionAbortedException" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionAbortedException" /> con la información de serialización y contexto de secuencia especificada.</summary>
      <param name="info">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que describe un error de serialización.</param>
      <param name="context">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que describe un error de contexto de serialización.</param>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionAbortedException" /> con el mensaje especificado.</summary>
      <param name="message">
        <see cref="T:System.String" /> que contiene un mensaje que explica por qué se produjo la excepción.</param>
    </member>
    <member name="M:System.Transactions.TransactionAbortedException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionAbortedException" /> con el mensaje y una excepción interna especificados.</summary>
      <param name="message">
        <see cref="T:System.String" /> que contiene un mensaje que explica por qué se produjo la excepción.</param>
      <param name="innerException">Obtiene la instancia de la excepción que causó la excepción actual. Para obtener más información, vea la propiedad <see cref="P:System.Exception.InnerException" />.</param>
    </member>
    <member name="T:System.Transactions.TransactionCompletedEventHandler">
      <summary>Representa el método que controla el evento <see cref="E:System.Transactions.Transaction.TransactionCompleted" /> de <see cref="T:System.Transactions.Transaction" />.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">Objeto <see cref="T:System.Transactions.TransactionEventArgs" /> que contiene los datos del evento.</param>
    </member>
    <member name="T:System.Transactions.TransactionEventArgs">
      <summary>Proporciona los datos para los eventos de transacción siguientes: <see cref="E:System.Transactions.TransactionManager.DistributedTransactionStarted" />, <see cref="E:System.Transactions.Transaction.TransactionCompleted" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionEventArgs.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionEventArgs" />.</summary>
    </member>
    <member name="P:System.Transactions.TransactionEventArgs.Transaction">
      <summary>Obtiene la transacción para la que se proporciona el estado del evento.</summary>
      <returns>
        <see cref="T:System.Transactions.Transaction" /> para el que se proporciona el estado del evento.</returns>
    </member>
    <member name="T:System.Transactions.TransactionException">
      <summary>La excepción que se produce cuando intenta trabajar en una transacción que no puede aceptar el nuevo trabajo.</summary>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionException" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionException" /> con la información de serialización y contexto de secuencia especificada.</summary>
      <param name="info">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que describe un error de serialización.</param>
      <param name="context">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que describe un error de contexto de serialización.</param>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionException" /> con el mensaje especificado.</summary>
      <param name="message">
        <see cref="T:System.String" /> que contiene un mensaje que explica por qué se produjo la excepción.</param>
    </member>
    <member name="M:System.Transactions.TransactionException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionException" /> con el mensaje y una excepción interna especificados.</summary>
      <param name="message">
        <see cref="T:System.String" /> que contiene un mensaje que explica por qué se produjo la excepción.</param>
      <param name="innerException">Obtiene la instancia de la excepción que causó la excepción actual. Para obtener más información, vea la propiedad <see cref="P:System.Exception.InnerException" />.</param>
    </member>
    <member name="T:System.Transactions.TransactionInDoubtException">
      <summary>La excepción que se produce cuando se intenta una operación en una transacción que está en duda o se intenta confirmar la transacción y ésta pasa al estado de en duda.</summary>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionInDoubtException" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionInDoubtException" /> con la información de serialización y contexto de secuencia especificada.</summary>
      <param name="info">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que describe un error de serialización.</param>
      <param name="context">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que describe un error de contexto de serialización.</param>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionInDoubtException" /> con el mensaje especificado.</summary>
      <param name="message">
        <see cref="T:System.String" /> que contiene un mensaje que explica por qué se produjo la excepción.</param>
    </member>
    <member name="M:System.Transactions.TransactionInDoubtException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionInDoubtException" /> con el mensaje y una excepción interna especificados.</summary>
      <param name="message">
        <see cref="T:System.String" /> que contiene un mensaje que explica por qué se produjo la excepción.</param>
      <param name="innerException">Obtiene la instancia de la excepción que causó la excepción actual. Para obtener más información, vea la propiedad <see cref="P:System.Exception.InnerException" />.</param>
    </member>
    <member name="T:System.Transactions.TransactionInformation">
      <summary>Proporciona información adicional respecto a una transacción.</summary>
    </member>
    <member name="P:System.Transactions.TransactionInformation.CreationTime">
      <summary>Obtiene la hora de creación de la transacción.</summary>
      <returns>
        <see cref="T:System.DateTime" /> que contiene la hora de creación de la transacción.</returns>
    </member>
    <member name="P:System.Transactions.TransactionInformation.DistributedIdentifier">
      <summary>Obtiene un identificador único de la transacción elevada a otras instancias de proceso.</summary>
      <returns>
        <see cref="T:System.Guid" /> que contiene el identificador único de la transacción elevada.</returns>
    </member>
    <member name="P:System.Transactions.TransactionInformation.LocalIdentifier">
      <summary>Obtiene un identificador único de la transacción.</summary>
      <returns>Identificador único de la transacción.</returns>
    </member>
    <member name="P:System.Transactions.TransactionInformation.Status">
      <summary>Obtiene el estado de la transacción.</summary>
      <returns>
        <see cref="T:System.Transactions.TransactionStatus" /> que contiene el estado de la transacción.</returns>
    </member>
    <member name="T:System.Transactions.TransactionInterop">
      <summary>Facilita la interacción entre <see cref="N:System.Transactions" /> y componentes que se han escrito previamente para interactuar con MSDTC, COM+ o <see cref="N:System.EnterpriseServices" />. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetDtcTransaction(System.Transactions.Transaction)">
      <summary>Obtiene una instancia de <see cref="T:System.Transactions.IDtcTransaction" /> que representa <see cref="T:System.Transactions.Transaction" />.</summary>
      <param name="transaction">Instancia de <see cref="T:System.Transactions.Transaction" /> de la que se van a calcular las referencias.</param>
      <returns>Instancia de <see cref="T:System.Transactions.IDtcTransaction" /> que representa <see cref="T:System.Transactions.Transaction" />.  La instancia de <see cref="T:System.Transactions.IDtcTransaction" /> es compatible con el formulario no administrado de ITransaction que utiliza MSDTC y con el formulario administrado de <see cref="T:System.EnterpriseServices.ITransaction" /> que <see cref="N:System.EnterpriseServices" /> utiliza.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetExportCookie(System.Transactions.Transaction,System.Byte[])">
      <summary>Transforma un objeto de transacción en una cookie de transacción de exportación.</summary>
      <param name="transaction">Objeto <see cref="T:System.Transactions.Transaction" /> del que se van a calcular las referencias.</param>
      <param name="whereabouts">Dirección que describe la ubicación del administrador de transacciones de destino. Esto permite a dos administradores de transacciones comunicarse entre sí y de ese modo propagar una transacción de un sistema al otro.</param>
      <returns>Cookie de transacción de exportación que representa el objeto <see cref="T:System.Transactions.Transaction" /> especificado.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction(System.Transactions.IDtcTransaction)">
      <summary>Genera un objeto <see cref="T:System.Transactions.Transaction" /> a partir de un objeto <see cref="T:System.Transactions.IDtcTransaction" /> especificado.</summary>
      <param name="transactionNative">Objeto <see cref="T:System.Transactions.IDtcTransaction" /> del que se van a calcular las referencias.</param>
      <returns>Instancia de <see cref="T:System.Transactions.Transaction" /> que representa el objeto <see cref="T:System.Transactions.IDtcTransaction" /> dado.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransactionFromExportCookie(System.Byte[])">
      <summary>Genera un objeto <see cref="T:System.Transactions.Transaction" /> a partir de la cookie de exportación especificada.</summary>
      <param name="cookie">Formulario del que se han serializado las referencias del objeto de transacción.</param>
      <returns>Objeto <see cref="T:System.Transactions.Transaction" /> generado a partir de la cookie de exportación especificada.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])">
      <summary>Genera una instancia de <see cref="T:System.Transactions.Transaction" /> a partir del token de propagación de transmisor especificado.</summary>
      <param name="propagationToken">Token de propagación que representa una transacción.</param>
      <returns>Objeto <see cref="T:System.Transactions.Transaction" /> generado a partir del token de propagación de transmisor especificado.</returns>
      <exception cref="T:System.Transactions.TransactionManagerCommunicationException">En la deserialización de una transacción se produce un error porque no se puede establecer contacto con el administrador de transacciones. La causa puede ser la existencia de un firewall de red o la configuración de seguridad.</exception>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetTransmitterPropagationToken(System.Transactions.Transaction)">
      <summary>Genera un token de propagación para el objeto <see cref="T:System.Transactions.Transaction" /> especificado.</summary>
      <param name="transaction">Transacción para la que se van a serializar las referencias en un token de propagación.</param>
      <returns>Este método, junto con el método <see cref="M:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])" />, proporciona funciones para la propagación de transmisor y receptor, en la que se "extrae" la transacción del equipo remoto cuando se llama a este último para deserializar la transacción.  
Para más información sobre distintos modelos de propagación, vea la clase <see cref="T:System.Transactions.TransactionInterop" />.</returns>
    </member>
    <member name="M:System.Transactions.TransactionInterop.GetWhereabouts">
      <summary>Obtiene la situación del administrador de transacciones distribuidas que <see cref="N:System.Transactions" /> utiliza.</summary>
      <returns>Obtiene la situación del administrador de transacciones distribuidas que <see cref="N:System.Transactions" /> utiliza.</returns>
    </member>
    <member name="F:System.Transactions.TransactionInterop.PromoterTypeDtc">
      <summary>Tipo de procesador de la transacción distribuida.</summary>
    </member>
    <member name="T:System.Transactions.TransactionManager">
      <summary>Contiene métodos utilizados para la administración de transacciones. Esta clase no puede heredarse.</summary>
    </member>
    <member name="P:System.Transactions.TransactionManager.DefaultTimeout">
      <summary>Obtiene el intervalo de tiempo de espera predeterminado para nuevas transacciones.</summary>
      <returns>Valor <see cref="T:System.TimeSpan" /> que especifica el intervalo de tiempo de espera para las nuevas transacciones.</returns>
    </member>
    <member name="E:System.Transactions.TransactionManager.DistributedTransactionStarted">
      <summary>Indica que se ha iniciado una transacción distribuida.</summary>
    </member>
    <member name="P:System.Transactions.TransactionManager.HostCurrentCallback">
      <summary>Obtiene o establece una fábrica de transacciones personalizada.</summary>
      <returns>
        <see cref="T:System.Transactions.HostCurrentTransactionCallback" /> que contiene una fábrica de transacciones personalizada.</returns>
    </member>
    <member name="P:System.Transactions.TransactionManager.MaximumTimeout">
      <summary>Obtiene el intervalo de tiempo de espera máximo predeterminado para las nuevas transacciones.</summary>
      <returns>Valor de <see cref="T:System.TimeSpan" /> que especifica el intervalo de tiempo de espera máximo que se permite al crear nuevas transacciones.</returns>
    </member>
    <member name="M:System.Transactions.TransactionManager.RecoveryComplete(System.Guid)">
      <summary>Notifica al administrador de transacciones que un administrador de recursos que se está recuperando de un error ha terminado de volver a inscribirse en todas las transacciones sin resolver.</summary>
      <param name="resourceManagerIdentifier">
        <see cref="T:System.Guid" /> que identifica de forma única el recurso del que se va a realizar la recuperación.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="resourceManagerIdentifier" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)">
      <summary>Vuelve a inscribir un participante duradero en una transacción.</summary>
      <param name="resourceManagerIdentifier">
        <see cref="T:System.Guid" /> que identifica de forma única el administrador de recursos.</param>
      <param name="recoveryInformation">Contiene información adicional de información de recuperación.</param>
      <param name="enlistmentNotification">Objeto de recurso que implementa <see cref="T:System.Transactions.IEnlistmentNotification" /> para recibir las notificaciones.</param>
      <returns>Objeto <see cref="T:System.Transactions.Enlistment" /> que describe la inscripción.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="recoveryInformation" /> no es válido.  
o bien 
La información del administrador de transacciones especificada en <paramref name="recoveryInformation" /> no coincide con el administrador de transacciones configurado.  
o bien 
 <see cref="N:System.Transactions" /> no reconoce <paramref name="RecoveryInformation" />.</exception>
      <exception cref="T:System.InvalidOperationException">Ya se ha llamado al método <see cref="M:System.Transactions.TransactionManager.RecoveryComplete(System.Guid)" /> para el parámetro <paramref name="resourceManagerIdentifier" /> especificado. Se rechaza la nueva inscripción.</exception>
      <exception cref="T:System.Transactions.TransactionException">
        <paramref name="resourceManagerIdentifier" /> no coincide con el contenido de la información de recuperación especificada en el parámetro <paramref name="recoveryInformation" />.</exception>
    </member>
    <member name="T:System.Transactions.TransactionManagerCommunicationException">
      <summary>La excepción que se produce cuando un administrador de recursos no puede comunicar con el administrador de transacciones.</summary>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionManagerCommunicationException" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> con la información de serialización y contexto de secuencia especificada.</summary>
      <param name="info">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que describe un error de serialización.</param>
      <param name="context">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que describe un error de contexto de serialización.</param>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> con el mensaje especificado.</summary>
      <param name="message">
        <see cref="T:System.String" /> que contiene un mensaje que explica por qué se produjo la excepción.</param>
    </member>
    <member name="M:System.Transactions.TransactionManagerCommunicationException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionManagerCommunicationException" /> con el mensaje y una excepción interna especificados.</summary>
      <param name="message">
        <see cref="T:System.String" /> que contiene un mensaje que explica por qué se produjo la excepción.</param>
      <param name="innerException">Obtiene la instancia de la excepción que causó la excepción actual. Para obtener más información, vea la propiedad <see cref="P:System.Exception.InnerException" />.</param>
    </member>
    <member name="T:System.Transactions.TransactionOptions">
      <summary>Contiene información adicional que especifica los comportamientos de la transacción.</summary>
    </member>
    <member name="M:System.Transactions.TransactionOptions.Equals(System.Object)">
      <summary>Determina si esta instancia de <see cref="T:System.Transactions.TransactionOptions" /> y el objeto especificado son iguales.</summary>
      <param name="obj">Objeto que se va a comparar con esta instancia.</param>
      <returns>
        <see langword="true" /> si <paramref name="obj" /> y esta instancia de <see cref="T:System.Transactions.TransactionOptions" /> son idénticos; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Transactions.TransactionOptions.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="P:System.Transactions.TransactionOptions.IsolationLevel">
      <summary>Obtiene o establece el nivel de aislamiento de la transacción.</summary>
      <returns>Enumeración <see cref="T:System.Transactions.IsolationLevel" /> que especifica el nivel de aislamiento de la transacción.</returns>
    </member>
    <member name="M:System.Transactions.TransactionOptions.op_Equality(System.Transactions.TransactionOptions,System.Transactions.TransactionOptions)">
      <summary>Comprueba si dos instancias de <see cref="T:System.Transactions.TransactionOptions" /> especificadas son equivalentes.</summary>
      <param name="x">Instancia de <see cref="T:System.Transactions.TransactionOptions" /> situada a la izquierda del operador de igualdad.</param>
      <param name="y">Instancia de <see cref="T:System.Transactions.TransactionOptions" /> situada a la derecha del operador de igualdad.</param>
      <returns>
        <see langword="true" /> si <paramref name="x" /> y <paramref name="y" /> son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Transactions.TransactionOptions.op_Inequality(System.Transactions.TransactionOptions,System.Transactions.TransactionOptions)">
      <summary>Devuelve un valor que indica si dos instancias de <see cref="T:System.Transactions.TransactionOptions" /> no son iguales.</summary>
      <param name="x">Instancia de <see cref="T:System.Transactions.TransactionOptions" /> situada a la izquierda del operador de igualdad.</param>
      <param name="y">Instancia de <see cref="T:System.Transactions.TransactionOptions" /> situada a la derecha del operador de igualdad.</param>
      <returns>
        <see langword="true" /> si <paramref name="x" /> y <paramref name="y" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Transactions.TransactionOptions.Timeout">
      <summary>Obtiene o establece el período de tiempo de espera de la transacción.</summary>
      <returns>Valor <see cref="T:System.TimeSpan" /> que especifica el período de tiempo de espera de la transacción.</returns>
    </member>
    <member name="T:System.Transactions.TransactionPromotionException">
      <summary>La excepción que se produce cuando hay un error en una promoción.</summary>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionPromotionException" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionPromotionException" /> con la información de serialización y contexto de secuencia especificada.</summary>
      <param name="info">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que describe un error de serialización.</param>
      <param name="context">Objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> que describe un error de contexto de serialización.</param>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionPromotionException" /> con el mensaje especificado.</summary>
      <param name="message">
        <see cref="T:System.String" /> que contiene un mensaje que explica por qué se produjo la excepción.</param>
    </member>
    <member name="M:System.Transactions.TransactionPromotionException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionPromotionException" /> con el mensaje y una excepción interna especificados.</summary>
      <param name="message">
        <see cref="T:System.String" /> que contiene un mensaje que explica por qué se produjo la excepción.</param>
      <param name="innerException">Obtiene la instancia de la excepción que causó la excepción actual. Para obtener más información, vea la propiedad <see cref="P:System.Exception.InnerException" />.</param>
    </member>
    <member name="T:System.Transactions.TransactionScope">
      <summary>Crea un bloque de código transaccional. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionScope" />.</summary>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionScope" /> y establece la transacción especificada como la transacción de ambiente, de manera que el trabajo transaccional realizado dentro del ámbito utiliza esta transacción.</summary>
      <param name="transactionToUse">La transacción que se va a establecer como la transacción de ambiente, para que el trabajo transaccional realizado dentro del ámbito utilice esta transacción.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionScope" /> con el valor de tiempo de espera especificado y establece la transacción especificada como la transacción de ambiente, de manera que el trabajo transaccional realizado dentro del ámbito utiliza esta transacción.</summary>
      <param name="transactionToUse">La transacción que se va a establecer como la transacción de ambiente, para que el trabajo transaccional realizado dentro del ámbito utilice esta transacción.</param>
      <param name="scopeTimeout">
        <see cref="T:System.TimeSpan" /> tras el cual el ámbito de la transacción supera el tiempo de espera y se anula la transacción.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionScope" /> con el valor de tiempo de espera especificado y los requisitos de interoperabilidad de COM+ y establece la transacción especificada como la transacción de ambiente, de modo que el trabajo transaccional realizado dentro del ámbito utiliza esta transacción.</summary>
      <param name="transactionToUse">La transacción que se va a establecer como la transacción de ambiente, para que el trabajo transaccional realizado dentro del ámbito utilice esta transacción.</param>
      <param name="scopeTimeout">
        <see cref="T:System.TimeSpan" /> tras el cual el ámbito de la transacción supera el tiempo de espera y se anula la transacción.</param>
      <param name="interopOption">Instancia de la enumeración <see cref="T:System.Transactions.EnterpriseServicesInteropOption" /> que describe cómo interactúa la transacción asociada con transacciones de COM+.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>[Compatible con .NET Framework 4.5.1 y versiones posteriores] 
Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionScope" /> con el valor de tiempo de espera especificado y establece la transacción especificada como la transacción de ambiente, de manera que el trabajo transaccional realizado dentro del ámbito utiliza esta transacción.</summary>
      <param name="transactionToUse">La transacción que se va a establecer como la transacción de ambiente, para que el trabajo transaccional realizado dentro del ámbito utilice esta transacción.</param>
      <param name="scopeTimeout">
        <see cref="T:System.TimeSpan" /> tras el cual el ámbito de la transacción supera el tiempo de espera y se anula la transacción.</param>
      <param name="asyncFlowOption">Una instancia de la enumeración <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> que describe si la transacción de ambiente asociada al ámbito de transacción fluirá a través de las continuaciones de subproceso cuando se utilizan los patrones de programación Task o async/await asincrónicos de .NET.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>[Compatible con .NET Framework 4.5.1 y versiones posteriores] 
Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionScope" /> y establece la transacción especificada como la transacción de ambiente, de manera que el trabajo transaccional realizado dentro del ámbito utiliza esta transacción.</summary>
      <param name="transactionToUse">La transacción que se va a establecer como la transacción de ambiente, para que el trabajo transaccional realizado dentro del ámbito utilice esta transacción.</param>
      <param name="asyncFlowOption">Una instancia de la enumeración <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> que describe si la transacción de ambiente asociada al ámbito de transacción fluirá a través de las continuaciones de subproceso cuando se utilizan los patrones de programación Task o async/await asincrónicos de .NET.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionScope" /> con la opción de flujo asincrónica especificada.</summary>
      <param name="asyncFlowOption">Una instancia de la enumeración <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> que describe si la transacción de ambiente asociada al ámbito de transacción fluirá a través de las continuaciones de subproceso cuando se utilizan los patrones de programación Task o async/await asincrónicos de .NET.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionScope" /> con los requisitos especificados.</summary>
      <param name="scopeOption">Instancia de la enumeración <see cref="T:System.Transactions.TransactionScopeOption" /> que describe los requisitos de transacción asociados a este ámbito de la transacción.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionScope" /> con el valor de tiempo de espera y los requisitos especificados.</summary>
      <param name="scopeOption">Instancia de la enumeración <see cref="T:System.Transactions.TransactionScopeOption" /> que describe los requisitos de transacción asociados a este ámbito de la transacción.</param>
      <param name="scopeTimeout">
        <see cref="T:System.TimeSpan" /> tras el cual el ámbito de la transacción supera el tiempo de espera y se anula la transacción.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionScope" /> con el valor de tiempo de espera, los requisitos y la opción de flujo asíncrona especificados.</summary>
      <param name="scopeOption">Instancia de la enumeración <see cref="T:System.Transactions.TransactionScopeOption" /> que describe los requisitos de transacción asociados a este ámbito de la transacción.</param>
      <param name="scopeTimeout">
        <see cref="T:System.TimeSpan" /> tras el cual el ámbito de la transacción supera el tiempo de espera y se anula la transacción.</param>
      <param name="asyncFlowOption">Una instancia de la enumeración <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> que describe si la transacción de ambiente asociada al ámbito de transacción fluirá a través de las continuaciones de subproceso cuando se utilizan los patrones de programación Task o async/await asincrónicos de .NET.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionScope" /> con los requisitos especificados.</summary>
      <param name="scopeOption">Instancia de la enumeración <see cref="T:System.Transactions.TransactionScopeOption" /> que describe los requisitos de transacción asociados a este ámbito de la transacción.</param>
      <param name="transactionOptions">Estructura <see cref="T:System.Transactions.TransactionOptions" /> que describe las opciones de transacción que se van a utilizar si se crea una nueva transacción. Si se utiliza una transacción existente, el valor de tiempo de espera de este parámetro se aplica al ámbito de la transacción. Si expira este tiempo antes de que se deseche el ámbito, se anula la transacción.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionScope" /> con el ámbito y los requisitos de interoperabilidad de COM+ especificados y opciones de transacción.</summary>
      <param name="scopeOption">Instancia de la enumeración <see cref="T:System.Transactions.TransactionScopeOption" /> que describe los requisitos de transacción asociados a este ámbito de la transacción.</param>
      <param name="transactionOptions">Estructura <see cref="T:System.Transactions.TransactionOptions" /> que describe las opciones de transacción que se van a utilizar si se crea una nueva transacción. Si se utiliza una transacción existente, el valor de tiempo de espera de este parámetro se aplica al ámbito de la transacción. Si expira este tiempo antes de que se deseche el ámbito, se anula la transacción.</param>
      <param name="interopOption">Instancia de la enumeración <see cref="T:System.Transactions.EnterpriseServicesInteropOption" /> que describe cómo interactúa la transacción asociada con transacciones de COM+.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>[Compatible con .NET Framework 4.5.1 y versiones posteriores] 
Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionScope" /> con los requisitos y la opción de flujo asíncrona especificados.</summary>
      <param name="scopeOption">Instancia de la enumeración <see cref="T:System.Transactions.TransactionScopeOption" /> que describe los requisitos de transacción asociados a este ámbito de la transacción.</param>
      <param name="transactionOptions">Estructura <see cref="T:System.Transactions.TransactionOptions" /> que describe las opciones de transacción que se van a utilizar si se crea una nueva transacción. Si se utiliza una transacción existente, el valor de tiempo de espera de este parámetro se aplica al ámbito de la transacción. Si expira este tiempo antes de que se deseche el ámbito, se anula la transacción.</param>
      <param name="asyncFlowOption">Una instancia de la enumeración <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> que describe si la transacción de ambiente asociada al ámbito de transacción fluirá a través de las continuaciones de subproceso cuando se utilizan los patrones de programación Task o async/await asincrónicos de .NET.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Transactions.TransactionScope" /> con los requisitos y la opción de flujo asíncrona especificados.</summary>
      <param name="scopeOption">Instancia de la enumeración <see cref="T:System.Transactions.TransactionScopeOption" /> que describe los requisitos de transacción asociados a este ámbito de la transacción.</param>
      <param name="asyncFlowOption">Una instancia de la enumeración <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> que describe si la transacción de ambiente asociada al ámbito de transacción fluirá a través de las continuaciones de subproceso cuando se utilizan los patrones de programación Task o async/await asincrónicos de .NET.</param>
    </member>
    <member name="M:System.Transactions.TransactionScope.Complete">
      <summary>Indica que finalizan correctamente todas las operaciones dentro del ámbito.</summary>
      <exception cref="T:System.InvalidOperationException">Se ha llamado ya una vez a este método.</exception>
    </member>
    <member name="M:System.Transactions.TransactionScope.Dispose">
      <summary>Finaliza el ámbito de la transacción.</summary>
    </member>
    <member name="T:System.Transactions.TransactionScopeAsyncFlowOption">
      <summary>Especifica si el flujo de la transacción a través de las continuaciones de subproceso está habilitado para <see cref="T:System.Transactions.TransactionScope" />.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeAsyncFlowOption.Enabled">
      <summary>Especifica que se habilita el flujo de la transacción a través de las continuaciones de subproceso.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeAsyncFlowOption.Suppress">
      <summary>Especifica que se suprime el flujo de la transacción a través de las continuaciones de subproceso. Este es el valor predeterminado si no hay ninguna opción <see langword="TransactionScopeAsyncFlowOption" /> especificada en el constructor <see cref="Overload:System.Transactions.TransactionScope.#ctor" />.</summary>
    </member>
    <member name="T:System.Transactions.TransactionScopeOption">
      <summary>Proporciona opciones adicionales para crear un ámbito de la transacción.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeOption.Required">
      <summary>El ámbito requiere una transacción. Utiliza una transacción de ambiente si ya existe una. De lo contrario, crea una nueva transacción antes de entrar en el ámbito. Este es el valor predeterminado.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeOption.RequiresNew">
      <summary>Siempre se crea una nueva transacción para el ámbito.</summary>
    </member>
    <member name="F:System.Transactions.TransactionScopeOption.Suppress">
      <summary>Se suprime el contexto de transacción de ambiente al crear el ámbito. Todas las operaciones dentro del ámbito se realizan sin un contexto de transacción de ambiente.</summary>
    </member>
    <member name="T:System.Transactions.TransactionStartedEventHandler">
      <summary>Representa el método que controlará el evento <see cref="E:System.Transactions.TransactionManager.DistributedTransactionStarted" /> de una clase <see cref="T:System.Transactions.TransactionManager" />.</summary>
      <param name="sender">Origen del evento.</param>
      <param name="e">
        <see cref="T:System.Transactions.TransactionEventArgs" /> que contiene la transacción a partir de la que se puede recuperar la información de transacción.</param>
    </member>
    <member name="T:System.Transactions.TransactionStatus">
      <summary>Describe el estado actual de una transacción distribuida.</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.Aborted">
      <summary>Se ha deshecho la transacción.</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.Active">
      <summary>El estado de la transacción es desconocido, porque se deben registrar los votos de algunos participantes todavía.</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.Committed">
      <summary>La transacción se ha confirmado.</summary>
    </member>
    <member name="F:System.Transactions.TransactionStatus.InDoubt">
      <summary>No se conoce el estado de la transacción.</summary>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Numerics.Vectors</name>
  </assembly>
  <members>
    <member name="T:System.Numerics.Matrix3x2">
      <summary>Representa una matriz de 3 x 2.</summary>
    </member>
    <member name="M:System.Numerics.Matrix3x2.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Crea una matriz de 3 x 2 de los componentes especificados.</summary>
      <param name="m11">Valor que se asigna al primer elemento de la primera fila.</param>
      <param name="m12">Valor que se asigna al segundo elemento de la primera fila.</param>
      <param name="m21">Valor que se asigna al primer elemento de la segunda fila.</param>
      <param name="m22">Valor que se asigna al segundo elemento de la segunda fila.</param>
      <param name="m31">Valor que se asigna al primer elemento de la tercera fila.</param>
      <param name="m32">Valor que se asigna al segundo elemento de la tercera fila.</param>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Add(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Agrega cada elemento de una matriz con el elemento correspondiente de una segunda matriz.</summary>
      <param name="value1">Primera matriz.</param>
      <param name="value2">Segunda matriz.</param>
      <returns>Matriz que contiene los valores sumados de <paramref name="value1" /> y <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateRotation(System.Single)">
      <summary>Crea una matriz de rotación usando la rotación especificadas en radianes.</summary>
      <param name="radians">Magnitud de la rotación, en radianes.</param>
      <returns>Matriz de rotación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateRotation(System.Single,System.Numerics.Vector2)">
      <summary>Crea una matriz de rotación usando la rotación especificada en radianes y un punto central.</summary>
      <param name="radians">Magnitud de la rotación, en radianes.</param>
      <param name="centerPoint">Punto central.</param>
      <returns>Matriz de rotación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2)">
      <summary>Crea una matriz de escala a partir de la escala del vector especificado.</summary>
      <param name="scales">Escala que se va a usar.</param>
      <returns>Matriz de escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Crea una matriz de escala a partir de la escala del vector especificado con una desviación desde el punto central especificado.</summary>
      <param name="scales">Escala que se va a usar.</param>
      <param name="centerPoint">Desviación desde el centro.</param>
      <returns>Matriz de escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single)">
      <summary>Crea una matriz de escala que escala de manera uniforme con la escala especificada.</summary>
      <param name="scale">Escala uniforme para que se usará.</param>
      <returns>Matriz de escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Numerics.Vector2)">
      <summary>Crea una matriz de escala que escala de manera uniforme con la escala especificada con una desviación desde el centro especificado.</summary>
      <param name="scale">Escala uniforme para que se usará.</param>
      <param name="centerPoint">Desviación desde el centro.</param>
      <returns>Matriz de escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Single)">
      <summary>Crea una matriz de escala a partir de los componentes X e Y especificados.</summary>
      <param name="xScale">Valor que se va a escalar en el eje X.</param>
      <param name="yScale">Valor que se va a escalar en el eje Y.</param>
      <returns>Matriz de escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateScale(System.Single,System.Single,System.Numerics.Vector2)">
      <summary>Crea una matriz de escala con un desvío con respecto a un punto central especificado.</summary>
      <param name="xScale">Valor que se va a escalar en el eje X.</param>
      <param name="yScale">Valor que se va a escalar en el eje Y.</param>
      <param name="centerPoint">Punto central.</param>
      <returns>Matriz de escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateSkew(System.Single,System.Single)">
      <summary>Crea una matriz de sesgado a partir de los ángulos especificados en radianes.</summary>
      <param name="radiansX">Ángulo X en radianes.</param>
      <param name="radiansY">Ángulo Y en radianes.</param>
      <returns>Matriz de sesgado.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateSkew(System.Single,System.Single,System.Numerics.Vector2)">
      <summary>Crea una matriz de sesgado a partir de los ángulos especificados en radianes y un pun to central.</summary>
      <param name="radiansX">Ángulo X en radianes.</param>
      <param name="radiansY">Ángulo Y en radianes.</param>
      <param name="centerPoint">Punto central.</param>
      <returns>Matriz de sesgado.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateTranslation(System.Numerics.Vector2)">
      <summary>Crea una matriz de traslación a partir del vector bidimensional especificado.</summary>
      <param name="position">Posición de traslación.</param>
      <returns>Matriz de traslación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.CreateTranslation(System.Single,System.Single)">
      <summary>Crea una matriz de traslación a partir de los componentes X e Y especificados.</summary>
      <param name="xPosition">Posición X.</param>
      <param name="yPosition">Posición Y.</param>
      <returns>Matriz de traslación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Equals(System.Numerics.Matrix3x2)">
      <summary>Devuelve un valor que indica si esta instancia y otra matriz de 3 x 2 son iguales.</summary>
      <param name="other">Otra matriz.</param>
      <returns>
        <see langword="true" /> si las matrices son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</summary>
      <param name="obj">Objeto que se va a comparar con la instancia actual.</param>
      <returns>
        <see langword="true" /> si la instancia actual y <paramref name="obj" /> son iguales; de lo contrario, <see langword="false" />. Si el valor de <paramref name="obj" /> es <see langword="null" />, el método devuelve <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.GetDeterminant">
      <summary>Calcula el factor determinante para esta matriz.</summary>
      <returns>Factor determinante.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.Identity">
      <summary>Obtiene la matriz de identidad de multiplicación.</summary>
      <returns>Matriz de identidad de multiplicación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Invert(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2@)">
      <summary>Invierte la matriz especificada. Valor devuelto indica si la operación se realizó correctamente.</summary>
      <param name="matrix">Matriz que se va a invertir.</param>
      <param name="result">Cuando este método finaliza, contiene la matriz invertida si la operación se realizó correctamente.</param>
      <returns>
        <see langword="true" /> si <paramref name="matrix" /> se ha convertido correctamente; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.IsIdentity">
      <summary>Indica si la matriz actual es la matriz de identidad.</summary>
      <returns>
        <see langword="true" /> si la matriz actual es la matriz de identidad; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Lerp(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2,System.Single)">
      <summary>Realiza una interpolación lineal desde una matriz a una segunda matriz basándose en un valor que especifica la ponderación de la segunda matriz.</summary>
      <param name="matrix1">Primera matriz.</param>
      <param name="matrix2">Segunda matriz.</param>
      <param name="amount">Ponderación relativa de <paramref name="matrix2" />.</param>
      <returns>Matriz de interpolación.</returns>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M11">
      <summary>Primer elemento de la matriz.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M12">
      <summary>Segundo elemento de la primera fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M21">
      <summary>Primer elemento de la segunda fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M22">
      <summary>Segundo elemento de la segunda fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M31">
      <summary>Primer elemento de la tercera fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix3x2.M32">
      <summary>Segundo elemento de la tercera fila.</summary>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Devuelve la matriz resultante de la multiplicación de dos matrices juntas.</summary>
      <param name="value1">Primera matriz.</param>
      <param name="value2">Segunda matriz.</param>
      <returns>Matriz de productos.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Multiply(System.Numerics.Matrix3x2,System.Single)">
      <summary>Devuelve la matriz resultante de la escala de todos los elementos de una matriz especificada por un factor escalar.</summary>
      <param name="value1">Matriz que se va a escalar.</param>
      <param name="value2">Valor de escala que se va a usar.</param>
      <returns>Matriz escalada.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Negate(System.Numerics.Matrix3x2)">
      <summary>Convierte en negativa la matriz especificada al multiplicar todos sus valores por -1.</summary>
      <param name="value">Matriz que se va a convertir en negativa.</param>
      <returns>Matriz convertida en negativa.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Addition(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Agrega cada elemento de una matriz con el elemento correspondiente de una segunda matriz.</summary>
      <param name="value1">Primera matriz.</param>
      <param name="value2">Segunda matriz.</param>
      <returns>Matriz que contiene los valores de sumado.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Equality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Devuelve un valor que indica si las matrices especificadas son iguales.</summary>
      <param name="value1">Primera matriz que se va a comparar.</param>
      <param name="value2">Segunda matriz que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="value1" /> y <paramref name="value2" /> son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Inequality(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Devuelve un valor que indica si las matrices especificadas no son iguales.</summary>
      <param name="value1">Primera matriz que se va a comparar.</param>
      <param name="value2">Segunda matriz que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="value1" /> y <paramref name="value2" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Devuelve la matriz resultante de la multiplicación de dos matrices juntas.</summary>
      <param name="value1">Primera matriz.</param>
      <param name="value2">Segunda matriz.</param>
      <returns>Matriz de productos.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Multiply(System.Numerics.Matrix3x2,System.Single)">
      <summary>Devuelve la matriz resultante de la escala de todos los elementos de una matriz especificada por un factor escalar.</summary>
      <param name="value1">Matriz que se va a escalar.</param>
      <param name="value2">Valor de escala que se va a usar.</param>
      <returns>Matriz escalada.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_Subtraction(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Resta cada elemento en una segunda de su elemento correspondiente en una primera matriz.</summary>
      <param name="value1">Primera matriz.</param>
      <param name="value2">Segunda matriz.</param>
      <returns>Matriz que contiene los valores resultantes de restar cada elemento de <paramref name="value2" /> de su elemento correspondiente en <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.op_UnaryNegation(System.Numerics.Matrix3x2)">
      <summary>Convierte en negativa la matriz especificada al multiplicar todos sus valores por -1.</summary>
      <param name="value">Matriz que se va a convertir en negativa.</param>
      <returns>Matriz convertida en negativa.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.Subtract(System.Numerics.Matrix3x2,System.Numerics.Matrix3x2)">
      <summary>Resta cada elemento en una segunda de su elemento correspondiente en una primera matriz.</summary>
      <param name="value1">Primera matriz.</param>
      <param name="value2">Segunda matriz.</param>
      <returns>Matriz que contiene los valores resultantes de restar cada elemento de <paramref name="value2" /> de su elemento correspondiente en <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix3x2.ToString">
      <summary>Devuelve una cadena que representa esta matriz.</summary>
      <returns>Representación de cadena de esta matriz.</returns>
    </member>
    <member name="P:System.Numerics.Matrix3x2.Translation">
      <summary>Obtiene o establece el componente de traslación de esta matriz.</summary>
      <returns>Componente de traslación de la instancia actual.</returns>
    </member>
    <member name="T:System.Numerics.Matrix4x4">
      <summary>Representa una matriz de 4 x 4.</summary>
    </member>
    <member name="M:System.Numerics.Matrix4x4.#ctor(System.Numerics.Matrix3x2)">
      <summary>Crea un objeto <see cref="T:System.Numerics.Matrix4x4" /> a partir de un objeto <see cref="T:System.Numerics.Matrix3x2" />.</summary>
      <param name="value">Matriz de 3 x 2.</param>
    </member>
    <member name="M:System.Numerics.Matrix4x4.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Crea una matriz de 4 x 4 a partir de los componentes especificados.</summary>
      <param name="m11">Valor que se asigna al primer elemento de la primera fila.</param>
      <param name="m12">Valor que se asigna al segundo elemento de la primera fila.</param>
      <param name="m33">Valor que se asigna al tercer elemento de la tercera fila.</param>
      <param name="m34">Valor que se asigna al cuarto elemento de la tercera fila.</param>
      <param name="m41">Valor que se asigna al primer elemento de la cuarta fila.</param>
      <param name="m42">Valor que se asigna al segundo elemento de la cuarta fila.</param>
      <param name="m43">Valor que se asigna al tercer elemento de la cuarta fila.</param>
      <param name="m44">Valor que se asigna al cuarto elemento de la cuarta fila.</param>
      <param name="m13">Valor que se asigna al tercer elemento de la primera fila.</param>
      <param name="m14">Valor que se asigna al cuarto elemento de la primera fila.</param>
      <param name="m21">Valor que se asigna al primer elemento de la segunda fila.</param>
      <param name="m22">Valor que se asigna al segundo elemento de la segunda fila.</param>
      <param name="m23">Valor que se asigna al tercer elemento de la segunda fila.</param>
      <param name="m24">Valor que se asigna al tercer elemento de la segunda fila.</param>
      <param name="m31">Valor que se asigna al primer elemento de la tercera fila.</param>
      <param name="m32">Valor que se asigna al segundo elemento de la tercera fila.</param>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Add(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Agrega cada elemento de una matriz con el elemento correspondiente de una segunda matriz.</summary>
      <param name="value1">Primera matriz.</param>
      <param name="value2">Segunda matriz.</param>
      <returns>Matriz que contiene los valores sumados de <paramref name="value1" /> y <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateBillboard(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Crea una cartelera esférica que gira en torno a una posición del objeto especificado.</summary>
      <param name="objectPosition">Posición del objeto en torno a la cual girará la cartelera.</param>
      <param name="cameraPosition">Posición de la cámara.</param>
      <param name="cameraUpVector">Vector hacia arriba de la cámara.</param>
      <param name="cameraForwardVector">Vector hacia delante de la cámara.</param>
      <returns>Cartelera creada.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateConstrainedBillboard(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Crea una cartelera cilíndrica que gira en torno a un eje especificado.</summary>
      <param name="objectPosition">Posición del objeto en torno a la cual girará la cartelera.</param>
      <param name="cameraPosition">Posición de la cámara.</param>
      <param name="rotateAxis">Eje en torno al cual girará la cartelera.</param>
      <param name="cameraForwardVector">Vector hacia delante de la cámara.</param>
      <param name="objectForwardVector">Vector hacia delante del objeto.</param>
      <returns>Matriz de cartelera.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)">
      <summary>Crea una matriz que gira en torno a un vector arbitrario.</summary>
      <param name="axis">Eje en torno al cual se girará.</param>
      <param name="angle">Ángulo en torno al cual se gira <paramref name="axis" />, en radianes.</param>
      <returns>Matriz de rotación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromQuaternion(System.Numerics.Quaternion)">
      <summary>Crea una matriz de rotación a partir del valor de rotación del cuaternión especificado.</summary>
      <param name="quaternion">Valor cuaternión de origen.</param>
      <returns>Matriz de rotación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Crea una matriz de rotación de los valores especificados de rotación, rotación alrededor del eje X y rotación alrededor del eje Y.</summary>
      <param name="yaw">Ángulo de rotación, en radianes, alrededor del eje Y.</param>
      <param name="pitch">Ángulo de rotación, en radianes, alrededor del eje X.</param>
      <param name="roll">Ángulo de rotación, en radianes, alrededor del eje Z.</param>
      <returns>Matriz de rotación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateLookAt(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Crea una matriz de vista.</summary>
      <param name="cameraPosition">Posición de la cámara.</param>
      <param name="cameraTarget">Destino hacia el que apunta la cámara.</param>
      <param name="cameraUpVector">Dirección que representa "arriba" desde el punto de vista de la cámara.</param>
      <returns>Matriz de vista.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
      <summary>Crea una matriz de perspectiva ortográfica a partir de las dimensiones de la vista especificada.</summary>
      <param name="width">Ancho del volumen de vista.</param>
      <param name="height">Alto del volumen de vista.</param>
      <param name="zNearPlane">Valor Z mínimo del volumen de vista.</param>
      <param name="zFarPlane">Valor Z máximo del volumen de vista.</param>
      <returns>Matriz de proyección ortográfica.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Crea una matriz de una proyección ortográfica personalizada.</summary>
      <param name="left">Valor X mínimo del volumen de vista.</param>
      <param name="right">Valor X máximo del volumen de vista.</param>
      <param name="bottom">Valor Y mínimo del volumen de vista.</param>
      <param name="top">Valor Y máximo del volumen de vista.</param>
      <param name="zNearPlane">Valor Z mínimo del volumen de vista.</param>
      <param name="zFarPlane">Valor Z máximo del volumen de vista.</param>
      <returns>Matriz de proyección ortográfica.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
      <summary>Crea una matriz de proyección en perspectiva a partir de las dimensiones de volumen de la vista dada.</summary>
      <param name="width">Ancho del volumen de vista en un plano de vista próximo.</param>
      <param name="height">Alto del volumen de vista en un plano de vista próximo.</param>
      <param name="nearPlaneDistance">Distancia al plano de vista próximo.</param>
      <param name="farPlaneDistance">Distancia al plano de vista lejano.</param>
      <returns>Matriz de proyección en perspectiva.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nearPlaneDistance" /> es menor o igual que cero.  
O bien 
 <paramref name="farPlaneDistance" /> es menor o igual que cero.  
O bien 
 <paramref name="nearPlaneDistance" /> es mayor o igual que <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
      <summary>Crea una matriz de proyección de perspectiva basada en un campo de vista, relación de aspecto y distancias de plano de vista próximo y lejano.</summary>
      <param name="fieldOfView">Campo de vista y la dirección, en radianes.</param>
      <param name="aspectRatio">Relación de aspecto, definida como el ancho del espacio de la vista dividido por el alto.</param>
      <param name="nearPlaneDistance">Distancia al plano de vista próximo.</param>
      <param name="farPlaneDistance">Distancia al plano de vista lejano.</param>
      <returns>Matriz de proyección en perspectiva.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="fieldOfView" /> es menor o igual que cero.  
o bien 
 <paramref name="fieldOfView" /> es mayor o igual que <see cref="F:System.Math.PI" />.  
 <paramref name="nearPlaneDistance" /> es menor o igual que cero.  
O bien 
 <paramref name="farPlaneDistance" /> es menor o igual que cero.  
o bien 
 <paramref name="nearPlaneDistance" /> es mayor o igual que <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>Crea una matriz de proyección en perspectiva personalizada.</summary>
      <param name="left">Valor X mínimo del volumen de vista en el plano de vista próximo.</param>
      <param name="right">Valor X máximo del volumen de vista en el plano de vista próximo.</param>
      <param name="bottom">Valor Y mínimo del volumen de vista en el plano de vista próximo.</param>
      <param name="top">Valor Y máximo del volumen de vista en el plano de vista próximo.</param>
      <param name="nearPlaneDistance">Distancia al plano de vista próximo.</param>
      <param name="farPlaneDistance">Distancia al plano de vista lejano.</param>
      <returns>Matriz de proyección en perspectiva.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="nearPlaneDistance" /> es menor o igual que cero.  
O bien 
 <paramref name="farPlaneDistance" /> es menor o igual que cero.  
o bien 
 <paramref name="nearPlaneDistance" /> es mayor o igual que <paramref name="farPlaneDistance" />.</exception>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateReflection(System.Numerics.Plane)">
      <summary>Crea una matriz que refleja el sistema de coordenadas sobre un plano especificado.</summary>
      <param name="value">Plano sobre el que se va a crear una reflexión.</param>
      <returns>Nueva matriz que expresa la reflexión.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationX(System.Single)">
      <summary>Crea una matriz de puntos de rotación alrededor del eje X.</summary>
      <param name="radians">Cantidad, en radianes, por la que va a girar alrededor del eje X.</param>
      <returns>Matriz de rotación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationX(System.Single,System.Numerics.Vector3)">
      <summary>Crea una matriz de puntos de rotación alrededor del eje X desde un punto central.</summary>
      <param name="radians">Cantidad, en radianes, por la que va a girar alrededor del eje X.</param>
      <param name="centerPoint">Punto central.</param>
      <returns>Matriz de rotación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationY(System.Single)">
      <summary>Crea una matriz de puntos de rotación alrededor del eje Y.</summary>
      <param name="radians">Cantidad, en radianes, por la que va a girar alrededor del eje Y.</param>
      <returns>Matriz de rotación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationY(System.Single,System.Numerics.Vector3)">
      <summary>Cantidad, en radianes, por la que se va a rotar alrededor del eje Y desde un punto central.</summary>
      <param name="radians">Cantidad, en radianes, por la que va a girar alrededor del eje Y.</param>
      <param name="centerPoint">Punto central.</param>
      <returns>Matriz de rotación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationZ(System.Single)">
      <summary>Crea una matriz de puntos de rotación alrededor del eje Z.</summary>
      <param name="radians">Cantidad, en radianes, por la que va a girar alrededor del eje Z.</param>
      <returns>Matriz de rotación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateRotationZ(System.Single,System.Numerics.Vector3)">
      <summary>Crea una matriz de puntos de rotación alrededor del eje Z desde un punto central.</summary>
      <param name="radians">Cantidad, en radianes, por la que va a girar alrededor del eje Z.</param>
      <param name="centerPoint">Punto central.</param>
      <returns>Matriz de rotación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Numerics.Vector3)">
      <summary>Crea una matriz de escala a partir de la escala del vector especificado.</summary>
      <param name="scales">Escala que se va a usar.</param>
      <returns>Matriz de escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Crea una matriz de escala con un punto central.</summary>
      <param name="scales">Vector que contiene la cantidad escalar en cada eje.</param>
      <param name="centerPoint">Punto central.</param>
      <returns>Matriz de escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single)">
      <summary>Crea una matriz de escala uniforme que escala equitativamente en cada eje.</summary>
      <param name="scale">Factor de escala uniforme.</param>
      <returns>Matriz de escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Numerics.Vector3)">
      <summary>Crea una matriz de escala uniforme que escala equitativamente en cada eje con un punto central.</summary>
      <param name="scale">Factor de escala uniforme.</param>
      <param name="centerPoint">Punto central.</param>
      <returns>Matriz de escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single)">
      <summary>Crea una matriz de escala a partir de los componentes X, Y y Z.</summary>
      <param name="xScale">Valor que se va a escalar en el eje X.</param>
      <param name="yScale">Valor que se va a escalar en el eje Y.</param>
      <param name="zScale">Valor que se va a escalar en el eje Z.</param>
      <returns>Matriz de escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateScale(System.Single,System.Single,System.Single,System.Numerics.Vector3)">
      <summary>Crea una matriz de escala con un desvío con respecto a un punto central especificado.</summary>
      <param name="xScale">Valor que se va a escalar en el eje X.</param>
      <param name="yScale">Valor que se va a escalar en el eje Y.</param>
      <param name="zScale">Valor que se va a escalar en el eje Z.</param>
      <param name="centerPoint">Punto central.</param>
      <returns>Matriz de escala.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateShadow(System.Numerics.Vector3,System.Numerics.Plane)">
      <summary>Crea una matriz que aplana la geometría en un plano especificado como si proyectara una sombra desde una fuente de luz especificada.</summary>
      <param name="lightDirection">Dirección de la que procede la luz que proyectará la sombra.</param>
      <param name="plane">Plano en el que la nueva matriz debe aplanar la geometría con el fin de convertir una sombra.</param>
      <returns>Matriz nueva que puede usarse para aplanar la geometría en el plano especificado desde la dirección especificada.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateTranslation(System.Numerics.Vector3)">
      <summary>Crea una matriz de traslación a partir del vector tridimensional especificado.</summary>
      <param name="position">Cantidad de traslación de cada eje.</param>
      <returns>Matriz de traslación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateTranslation(System.Single,System.Single,System.Single)">
      <summary>Crea una matriz de traslación a partir de los componentes X, Y y Z especificados.</summary>
      <param name="xPosition">Cantidad de traslación del eje X.</param>
      <param name="yPosition">Cantidad de traslación del eje Y.</param>
      <param name="zPosition">Cantidad de traslación del eje Z.</param>
      <returns>Matriz de traslación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.CreateWorld(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Crea una matriz universal con los parámetros especificados.</summary>
      <param name="position">Posición del objeto.</param>
      <param name="forward">Dirección de avance del objeto.</param>
      <param name="up">Dirección ascendente del objeto. Normalmente su valor es <c>[0, 1, 0]</c>.</param>
      <returns>Matriz universal.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Decompose(System.Numerics.Matrix4x4,System.Numerics.Vector3@,System.Numerics.Quaternion@,System.Numerics.Vector3@)">
      <summary>Intenta extraer los componentes de escala, traslación y rotación de la matriz de escala, rotación o traducción determinada. Valor devuelto indica si la operación se realizó correctamente.</summary>
      <param name="matrix">Matriz de origen.</param>
      <param name="scale">Cuando este método vuelve, contiene el componente de escala de la matriz de transformación si la operación se realizó correctamente.</param>
      <param name="rotation">Cuando este método vuelve, contiene el componente de rotación de la matriz de transformación si la operación se realizó correctamente.</param>
      <param name="translation">Cuando el método vuelve, contiene el componente de traducción de la matriz de transformación si la operación se realizó correctamente.</param>
      <returns>
        <see langword="true" /> si <paramref name="matrix" /> se descomponen correctamente; en caso contrario,  <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Equals(System.Numerics.Matrix4x4)">
      <summary>Devuelve un valor que indica si esta instancia y otra matriz de 4 x 4 son iguales.</summary>
      <param name="other">Otra matriz.</param>
      <returns>
        <see langword="true" /> si las matrices son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</summary>
      <param name="obj">Objeto que se va a comparar con la instancia actual.</param>
      <returns>
        <see langword="true" /> si la instancia actual y <paramref name="obj" /> son iguales; de lo contrario, <see langword="false" />. Si el valor de <paramref name="obj" /> es <see langword="null" />, el método devuelve <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.GetDeterminant">
      <summary>Calcula el factor determinante de la matriz de 4 x 4 actual.</summary>
      <returns>Factor determinante.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.Identity">
      <summary>Obtiene la matriz de identidad de multiplicación.</summary>
      <returns>Obtiene la matriz de identidad de multiplicación.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Invert(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4@)">
      <summary>Invierte la matriz especificada. Valor devuelto indica si la operación se realizó correctamente.</summary>
      <param name="matrix">Matriz que se va a invertir.</param>
      <param name="result">Cuando este método finaliza, contiene la matriz invertida si la operación se realizó correctamente.</param>
      <returns>
        <see langword="true" /> si <paramref name="matrix" /> se ha convertido correctamente; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.IsIdentity">
      <summary>Indica si la matriz actual es la matriz de identidad.</summary>
      <returns>
        <see langword="true" /> si la matriz actual es la matriz de identidad; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Lerp(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4,System.Single)">
      <summary>Realiza una interpolación lineal desde una matriz a una segunda matriz basándose en un valor que especifica la ponderación de la segunda matriz.</summary>
      <param name="matrix1">Primera matriz.</param>
      <param name="matrix2">Segunda matriz.</param>
      <param name="amount">Ponderación relativa de <paramref name="matrix2" />.</param>
      <returns>Matriz de interpolación.</returns>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M11">
      <summary>Primer elemento de la matriz.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M12">
      <summary>Segundo elemento de la primera fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M13">
      <summary>Tercer elemento de la primera fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M14">
      <summary>Cuarto elemento de la primera fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M21">
      <summary>Primer elemento de la segunda fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M22">
      <summary>Segundo elemento de la segunda fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M23">
      <summary>Tercer elemento de la segunda fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M24">
      <summary>Cuarto elemento de la segunda fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M31">
      <summary>Primer elemento de la tercera fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M32">
      <summary>Segundo elemento de la tercera fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M33">
      <summary>Tercer elemento de la tercera fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M34">
      <summary>Cuarto elemento de la tercera fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M41">
      <summary>Primer elemento de la cuarta fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M42">
      <summary>Segundo elemento de la cuarta fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M43">
      <summary>Tercer elemento de la cuarta fila.</summary>
    </member>
    <member name="F:System.Numerics.Matrix4x4.M44">
      <summary>Cuarto elemento de la cuarta fila.</summary>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Multiply(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Devuelve la matriz resultante de la multiplicación de dos matrices juntas.</summary>
      <param name="value1">Primera matriz.</param>
      <param name="value2">Segunda matriz.</param>
      <returns>Matriz de productos.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Multiply(System.Numerics.Matrix4x4,System.Single)">
      <summary>Devuelve la matriz resultante de la escala de todos los elementos de una matriz especificada por un factor escalar.</summary>
      <param name="value1">Matriz que se va a escalar.</param>
      <param name="value2">Valor de escala que se va a usar.</param>
      <returns>Matriz escalada.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Negate(System.Numerics.Matrix4x4)">
      <summary>Convierte en negativa la matriz especificada al multiplicar todos sus valores por -1.</summary>
      <param name="value">Matriz que se va a convertir en negativa.</param>
      <returns>Matriz convertida en negativa.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Addition(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Agrega cada elemento de una matriz con el elemento correspondiente de una segunda matriz.</summary>
      <param name="value1">Primera matriz.</param>
      <param name="value2">Segunda matriz.</param>
      <returns>Matriz que contiene los valores de sumado.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Equality(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Devuelve un valor que indica si las matrices especificadas son iguales.</summary>
      <param name="value1">Primera matriz que se va a comparar.</param>
      <param name="value2">Segunda matriz que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="value1" /> y <paramref name="value2" /> son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Inequality(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Devuelve un valor que indica si las matrices especificadas no son iguales.</summary>
      <param name="value1">Primera matriz que se va a comparar.</param>
      <param name="value2">Segunda matriz que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="value1" /> y <paramref name="value2" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Multiply(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Devuelve la matriz resultante de la multiplicación de dos matrices juntas.</summary>
      <param name="value1">Primera matriz.</param>
      <param name="value2">Segunda matriz.</param>
      <returns>Matriz de productos.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Multiply(System.Numerics.Matrix4x4,System.Single)">
      <summary>Devuelve la matriz resultante de la escala de todos los elementos de una matriz especificada por un factor escalar.</summary>
      <param name="value1">Matriz que se va a escalar.</param>
      <param name="value2">Valor de escala que se va a usar.</param>
      <returns>Matriz escalada.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_Subtraction(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Resta cada elemento en una segunda de su elemento correspondiente en una primera matriz.</summary>
      <param name="value1">Primera matriz.</param>
      <param name="value2">Segunda matriz.</param>
      <returns>Matriz que contiene los valores resultantes de restar cada elemento de <paramref name="value2" /> de su elemento correspondiente en <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.op_UnaryNegation(System.Numerics.Matrix4x4)">
      <summary>Convierte en negativa la matriz especificada al multiplicar todos sus valores por -1.</summary>
      <param name="value">Matriz que se va a convertir en negativa.</param>
      <returns>Matriz convertida en negativa.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Subtract(System.Numerics.Matrix4x4,System.Numerics.Matrix4x4)">
      <summary>Resta cada elemento en una segunda de su elemento correspondiente en una primera matriz.</summary>
      <param name="value1">Primera matriz.</param>
      <param name="value2">Segunda matriz.</param>
      <returns>Matriz que contiene los valores resultantes de restar cada elemento de <paramref name="value2" /> de su elemento correspondiente en <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.ToString">
      <summary>Devuelve una cadena que representa esta matriz.</summary>
      <returns>Representación de cadena de esta matriz.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Transform(System.Numerics.Matrix4x4,System.Numerics.Quaternion)">
      <summary>Transforma la matriz especificada mediante la aplicación de la rotación del cuaternión especificado.</summary>
      <param name="value">Matriz que se va a transformar.</param>
      <param name="rotation">Rotación que se va a aplicar.</param>
      <returns>Matriz transformada.</returns>
    </member>
    <member name="P:System.Numerics.Matrix4x4.Translation">
      <summary>Obtiene o establece el componente de traslación de esta matriz.</summary>
      <returns>Componente de traslación de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Matrix4x4.Transpose(System.Numerics.Matrix4x4)">
      <summary>Transpone las filas y las columnas de una matriz.</summary>
      <param name="matrix">Matriz que se va a transponer.</param>
      <returns>Matriz transpuesta.</returns>
    </member>
    <member name="T:System.Numerics.Plane">
      <summary>Representa un plano en un espacio tridimensional.</summary>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>Crea un objeto <see cref="T:System.Numerics.Plane" /> a partir de una normal especificada y la distancia a lo largo del vector normal desde el origen.</summary>
      <param name="normal">Vector normal del plano.</param>
      <param name="d">Distancia del plano desde el origen a lo largo de su vector normal.</param>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Numerics.Vector4)">
      <summary>Crea un objeto <see cref="T:System.Numerics.Plane" /> a partir de un vector de cuatro dimensiones especificado.</summary>
      <param name="value">Vector cuyos tres primeros elementos describen el vector normal y cuyo <see cref="F:System.Numerics.Vector4.W" /> define la distancia a lo largo de ese vector normal desde el origen.</param>
    </member>
    <member name="M:System.Numerics.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Crea un objeto <see cref="T:System.Numerics.Plane" /> a partir de los componentes X, Y y Z de su vector normal y su distancia desde el origen en esa normal.</summary>
      <param name="x">Componente X del vector normal.</param>
      <param name="y">Componente Y del vector normal.</param>
      <param name="z">Componente Z del vector normal.</param>
      <param name="d">Distancia del plano a lo largo de su vector normal desde el origen.</param>
    </member>
    <member name="M:System.Numerics.Plane.CreateFromVertices(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Crea un objeto <see cref="T:System.Numerics.Plane" /> que contiene tres puntos especificados.</summary>
      <param name="point1">Primer punto que define el plano.</param>
      <param name="point2">Segundo punto que define el plano.</param>
      <param name="point3">Tercer punto que define el plano.</param>
      <returns>Plano que contiene los tres puntos.</returns>
    </member>
    <member name="F:System.Numerics.Plane.D">
      <summary>Distancia del plano a lo largo de su vector normal desde el origen.</summary>
    </member>
    <member name="M:System.Numerics.Plane.Dot(System.Numerics.Plane,System.Numerics.Vector4)">
      <summary>Calcula el producto escalar de un plano y un vector de 4 dimensiones.</summary>
      <param name="plane">Plano.</param>
      <param name="value">Vector de cuatro dimensiones.</param>
      <returns>Producto escalar.</returns>
    </member>
    <member name="M:System.Numerics.Plane.DotCoordinate(System.Numerics.Plane,System.Numerics.Vector3)">
      <summary>Devuelve el producto escalar de un vector tridimensional especificado y el vector normal de este plano más el valor de la distancia (<see cref="F:System.Numerics.Plane.D" />) del plano.</summary>
      <param name="plane">Plano.</param>
      <param name="value">Vector tridimensional.</param>
      <returns>Producto escalar.</returns>
    </member>
    <member name="M:System.Numerics.Plane.DotNormal(System.Numerics.Plane,System.Numerics.Vector3)">
      <summary>Devuelve el producto escalar de un vector tridimensional especificado y el vector <see cref="F:System.Numerics.Plane.Normal" /> de este plano.</summary>
      <param name="plane">Plano.</param>
      <param name="value">Vector tridimensional.</param>
      <returns>Producto escalar.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Equals(System.Numerics.Plane)">
      <summary>Devuelve un valor que indica si esta instancia y otro objeto de plano son iguales.</summary>
      <param name="other">Otro plano.</param>
      <returns>
        <see langword="true" /> si los dos planos son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</summary>
      <param name="obj">Objeto que se va a comparar con la instancia actual.</param>
      <returns>
        <see langword="true" /> si la instancia actual y <paramref name="obj" /> son iguales; de lo contrario, <see langword="false" />. Si el valor de <paramref name="obj" /> es <see langword="null" />, el método devuelve <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash.</returns>
    </member>
    <member name="F:System.Numerics.Plane.Normal">
      <summary>Vector normal del plano.</summary>
    </member>
    <member name="M:System.Numerics.Plane.Normalize(System.Numerics.Plane)">
      <summary>Crea un nuevo objeto <see cref="T:System.Numerics.Plane" /> cuyo vector normal es el vector normal del plano de origen normalizado.</summary>
      <param name="value">Plano de origen.</param>
      <returns>Plano normalizado.</returns>
    </member>
    <member name="M:System.Numerics.Plane.op_Equality(System.Numerics.Plane,System.Numerics.Plane)">
      <summary>Devuelve un valor que indica si dos planos son iguales.</summary>
      <param name="value1">Primer plano que se va a comparar.</param>
      <param name="value2">Segundo plano que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="value1" /> y <paramref name="value2" /> son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.op_Inequality(System.Numerics.Plane,System.Numerics.Plane)">
      <summary>Devuelve un valor que indica si dos planos no son iguales.</summary>
      <param name="value1">Primer plano que se va a comparar.</param>
      <param name="value2">Segundo plano que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="value1" /> y <paramref name="value2" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.ToString">
      <summary>Devuelve la representación de cadena de este objeto de plano.</summary>
      <returns>Cadena que representa este objeto <see cref="T:System.Numerics.Plane" />.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Matrix4x4)">
      <summary>Transforma un plano normalizado mediante una matriz de 4x4.</summary>
      <param name="plane">Plano normalizado que se va a transformar.</param>
      <param name="matrix">Matriz de transformación que se va a aplicar a <paramref name="plane" />.</param>
      <returns>Plano transformado.</returns>
    </member>
    <member name="M:System.Numerics.Plane.Transform(System.Numerics.Plane,System.Numerics.Quaternion)">
      <summary>Transforma un plano normalizado mediante una rotación de cuaternión.</summary>
      <param name="plane">Plano normalizado que se va a transformar.</param>
      <param name="rotation">Rotación de cuaternión que se va a aplicar al plano.</param>
      <returns>Plano nuevo que es el resultado de aplicar la rotación de cuaternión.</returns>
    </member>
    <member name="T:System.Numerics.Quaternion">
      <summary>Representa un vector que se usa para codificar rotaciones físicas tridimensionales.</summary>
    </member>
    <member name="M:System.Numerics.Quaternion.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>Crea un cuaternión desde los elementos de vector y rotación especificados.</summary>
      <param name="vectorPart">Elemento de vector del cuaternión.</param>
      <param name="scalarPart">Elemento de vector del cuaternión.</param>
    </member>
    <member name="M:System.Numerics.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Construye un cuaternión a partir de los componentes especificados.</summary>
      <param name="x">Valor que se va a asignar al componente X del cuaternión.</param>
      <param name="y">Valor que se va a asignar al componente Y del cuaternión.</param>
      <param name="z">Valor que se va a asignar al componente Z del cuaternión.</param>
      <param name="w">Valor que se va a asignar al componente W del cuaternión.</param>
    </member>
    <member name="M:System.Numerics.Quaternion.Add(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Agrega cada elemento en un cuaternión con su elemento correspondiente en un segundo cuaternión.</summary>
      <param name="value1">Primer cuaternión.</param>
      <param name="value2">Segundo cuaternión.</param>
      <returns>Cuaternión que contiene los valores de la suma de <paramref name="value1" /> y <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Concatenate(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Concatena dos cuaterniones.</summary>
      <param name="value1">Primera rotación de cuaternión de la serie.</param>
      <param name="value2">Segunda rotación de cuaternión de la serie.</param>
      <returns>Nuevo cuaternión que representa la concatenación de la rotación de <paramref name="value1" /> seguido por la rotación de <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Conjugate(System.Numerics.Quaternion)">
      <summary>Devuelve el valor conjugado de un cuaternión especificado.</summary>
      <param name="value">Cuaternión.</param>
      <returns>Nuevo cuaternión que es el conjugado de <see langword="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromAxisAngle(System.Numerics.Vector3,System.Single)">
      <summary>Crea un cuaternión a partir de un vector de unidad y un ángulo para girar en torno al vector.</summary>
      <param name="axis">Vector de unidad en torno al que se va a girar.</param>
      <param name="angle">Ángulo, en radianes, para girar alrededor del vector.</param>
      <returns>Cuaternión recién creado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromRotationMatrix(System.Numerics.Matrix4x4)">
      <summary>Crea un cuaternión a partir de la matriz de rotación especificada.</summary>
      <param name="matrix">Matriz de rotación.</param>
      <returns>Cuaternión recién creado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.CreateFromYawPitchRoll(System.Single,System.Single,System.Single)">
      <summary>Crea un nuevo cuaternión a partir de los valores especificados de rotación, rotación alrededor del eje X y rotación alrededor del eje Y.</summary>
      <param name="yaw">Ángulo de rotación alrededor del eje Y, en radianes.</param>
      <param name="pitch">Ángulo de rotación alrededor del eje X, en radianes.</param>
      <param name="roll">Ángulo de rotación alrededor del eje Z, en radianes.</param>
      <returns>Cuaternión resultante.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Divide(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Divide un cuaternión entre un segundo cuaternión.</summary>
      <param name="value1">Dividendo.</param>
      <param name="value2">Divisor.</param>
      <returns>Cuaternión resultante de dividir <paramref name="value1" /> entre <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Dot(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Calcula el producto escalar de dos cuaterniones.</summary>
      <param name="quaternion1">Primer cuaternión.</param>
      <param name="quaternion2">Segundo cuaternión.</param>
      <returns>Producto escalar.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Equals(System.Numerics.Quaternion)">
      <summary>Devuelve un valor que indica si esta instancia y otro cuaternión son iguales.</summary>
      <param name="other">Otro cuaternión.</param>
      <returns>
        <see langword="true" /> si los dos cuaterniones son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</summary>
      <param name="obj">Objeto que se va a comparar con la instancia actual.</param>
      <returns>
        <see langword="true" /> si la instancia actual y <paramref name="obj" /> son iguales; de lo contrario, <see langword="false" />. Si el valor de <paramref name="obj" /> es <see langword="null" />, el método devuelve <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash.</returns>
    </member>
    <member name="P:System.Numerics.Quaternion.Identity">
      <summary>Obtiene un cuaternión que no representa nunguna rotación.</summary>
      <returns>Cuaternión cuyos valores son <c>(0, 0, 0, 1)</c>.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Inverse(System.Numerics.Quaternion)">
      <summary>Devuelve el inverso de un cuaternión.</summary>
      <param name="value">Cuaternión.</param>
      <returns>Cuaternión invertido.</returns>
    </member>
    <member name="P:System.Numerics.Quaternion.IsIdentity">
      <summary>Obtiene un valor que indica si la instancia actual es el cuaternión de identidad.</summary>
      <returns>
        <see langword="true" /> si la instancia actual es el cuaternión de identidad; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Length">
      <summary>Calcula la longitud del cuaternión.</summary>
      <returns>Longitud calculada del cuaternión.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.LengthSquared">
      <summary>Calcula la longitud al cuadrado del cuaternión.</summary>
      <returns>Longitud del cuaternión al cuadrado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Lerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
      <summary>Realiza una interpolación lineal entre dos cuaterniones basándose en un valor que especifica la ponderación del segundo cuaternión.</summary>
      <param name="quaternion1">Primer cuaternión.</param>
      <param name="quaternion2">Segundo cuaternión.</param>
      <param name="amount">Peso relativo de <paramref name="quaternion2" /> en la interpolación.</param>
      <returns>Cuaternión interpolado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Devuelve el cuaternión resultante de multiplicar dos cuaterniones juntos.</summary>
      <param name="value1">Primer cuaternión.</param>
      <param name="value2">Segundo cuaternión.</param>
      <returns>Cuaternión de producto.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Multiply(System.Numerics.Quaternion,System.Single)">
      <summary>Devuelve el cuaternión que resulta de la escala de todos los componentes de un cuaternión especificado por un factor escalar.</summary>
      <param name="value1">Cuaternión de origen.</param>
      <param name="value2">Valor escalar.</param>
      <returns>Cuaternión escalado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Negate(System.Numerics.Quaternion)">
      <summary>Invierte el signo de cada componente del cuaternión.</summary>
      <param name="value">Cuaternión que se va a convertir en negativo.</param>
      <returns>Cuaternión convertido en negativo.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Normalize(System.Numerics.Quaternion)">
      <summary>Divide cada componente de un <see cref="T:System.Numerics.Quaternion" /> especificado ente su longitud.</summary>
      <param name="value">Cuaternión que se va a normalizar.</param>
      <returns>Cuaternión normalizado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Addition(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Agrega cada elemento en un cuaternión con su elemento correspondiente en un segundo cuaternión.</summary>
      <param name="value1">Primer cuaternión.</param>
      <param name="value2">Segundo cuaternión.</param>
      <returns>Cuaternión que contiene los valores de la suma de <paramref name="value1" /> y <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Division(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Divide un cuaternión entre un segundo cuaternión.</summary>
      <param name="value1">Dividendo.</param>
      <param name="value2">Divisor.</param>
      <returns>Cuaternión resultante de dividir <paramref name="value1" /> entre <paramref name="value2" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Equality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Devuelve un valor que indica si dos cuaterniones son iguales.</summary>
      <param name="value1">Primer cuaternión que se va a comparar.</param>
      <param name="value2">Segundo cuaternión que se va a comparar.</param>
      <returns>
        <see langword="true" /> si los dos cuaterniones son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Inequality(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Devuelve un valor que indica si dos cuaterniones no son iguales.</summary>
      <param name="value1">Primer cuaternión que se va a comparar.</param>
      <param name="value2">Segundo cuaternión que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="value1" /> y <paramref name="value2" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Devuelve el cuaternión resultante de multiplicar dos cuaterniones juntos.</summary>
      <param name="value1">Primer cuaternión.</param>
      <param name="value2">Segundo cuaternión.</param>
      <returns>Cuaternión de producto.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Multiply(System.Numerics.Quaternion,System.Single)">
      <summary>Devuelve el cuaternión que resulta de la escala de todos los componentes de un cuaternión especificado por un factor escalar.</summary>
      <param name="value1">Cuaternión de origen.</param>
      <param name="value2">Valor escalar.</param>
      <returns>Cuaternión escalado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_Subtraction(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Resta cada elemento de un segundo cuaternión del elemento correspondiente de un primer cuaternión.</summary>
      <param name="value1">Primer cuaternión.</param>
      <param name="value2">Segundo cuaternión.</param>
      <returns>Cuaternión que contiene los valores resultantes de restar cada elemento <paramref name="value2" /> de su elemento correspondiente en <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.op_UnaryNegation(System.Numerics.Quaternion)">
      <summary>Invierte el signo de cada componente del cuaternión.</summary>
      <param name="value">Cuaternión que se va a convertir en negativo.</param>
      <returns>Cuaternión convertido en negativo.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Slerp(System.Numerics.Quaternion,System.Numerics.Quaternion,System.Single)">
      <summary>Interpola entre dos cuaterniones mediante la interpolación lineal esférica.</summary>
      <param name="quaternion1">Primer cuaternión.</param>
      <param name="quaternion2">Segundo cuaternión.</param>
      <param name="amount">Peso relativo del segundo cuaternión en la interpolación.</param>
      <returns>Cuaternión interpolado.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.Subtract(System.Numerics.Quaternion,System.Numerics.Quaternion)">
      <summary>Resta cada elemento de un segundo cuaternión del elemento correspondiente de un primer cuaternión.</summary>
      <param name="value1">Primer cuaternión.</param>
      <param name="value2">Segundo cuaternión.</param>
      <returns>Cuaternión que contiene los valores resultantes de restar cada elemento <paramref name="value2" /> de su elemento correspondiente en <paramref name="value1" />.</returns>
    </member>
    <member name="M:System.Numerics.Quaternion.ToString">
      <summary>Devuelve una cadena que representa este cuaternión.</summary>
      <returns>Representación de cadena de este cuaternión.</returns>
    </member>
    <member name="F:System.Numerics.Quaternion.W">
      <summary>Componente de rotación del cuaternión.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.X">
      <summary>Valor X del componente de vector del cuaternión.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.Y">
      <summary>Valor Y del componente de vector del cuaternión.</summary>
    </member>
    <member name="F:System.Numerics.Quaternion.Z">
      <summary>Valor Z del componente de vector del cuaternión.</summary>
    </member>
    <member name="T:System.Numerics.Vector">
      <summary>Proporciona una colección de métodos estáticos para crear, manipular, combinar y convertir vectores genéricos.</summary>
    </member>
    <member name="M:System.Numerics.Vector.Abs``1(System.Numerics.Vector{``0})">
      <summary>Devuelve un nuevo vector cuyos elementos son los valores absolutos de los elementos del vector especificado.</summary>
      <param name="value">Vector de origen.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector de valor absoluto.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Add``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un nuevo vector cuyos valores son la suma de cada par de elementos de dos vectores especificados.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector sumado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AndNot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un nuevo vector realizando una operación bit a bit AND NOT en cada par de elementos correspondientes de dos vectores.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorByte``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta los bits de un vector especificado en los de un vector de bytes sin signo.</summary>
      <param name="value">Vector de origen.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorDouble``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta los bits de un vector especificado en los de un vector de punto flotante de doble precisión.</summary>
      <param name="value">Vector de origen.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt16``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta los bits de un vector especificado en los de un vector de enteros de 16 bits.</summary>
      <param name="value">Vector de origen.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt32``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta los bits de un vector especificado en los de un vector de enteros.</summary>
      <param name="value">Vector de origen.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorInt64``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta los bits de un vector especificado en los de un vector de enteros largos.</summary>
      <param name="value">Vector de origen.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorSByte``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta los bits de un vector especificado en los de un vector de bytes con signo.</summary>
      <param name="value">Vector de origen.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorSingle``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta los bits de un vector especificado en los de un vector de punto flotante de precisión sencilla.</summary>
      <param name="value">Vector de origen.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt16``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta los bits de un vector especificado en los de un vector de enteros de 16 bits sin signo.</summary>
      <param name="value">Vector de origen.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt32``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta los bits de un vector especificado en los de un vector de enteros sin signo.</summary>
      <param name="value">Vector de origen.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.AsVectorUInt64``1(System.Numerics.Vector{``0})">
      <summary>Reinterpreta los bits de un vector especificado en los de un vector de enteros largos sin signo.</summary>
      <param name="value">Vector de origen.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.BitwiseAnd``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un nuevo vector realizando una operación <see langword="And" /> bit a bit en cada par de elementos de dos vectores.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.BitwiseOr``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un nuevo vector realizando una operación <see langword="Or" /> bit a bit en cada par de elementos de dos vectores.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Crea un nuevo vector de precisión sencilla con elementos seleccionados entre dos vectores de origen de precisión sencilla especificados según un vector de máscara entero.</summary>
      <param name="condition">Vector de máscara entero usado para realizar la selección.</param>
      <param name="left">Primer vector de origen.</param>
      <param name="right">Segundo vector de origen.</param>
      <returns>Nuevo vector con los elementos seleccionados según la máscara.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Crea un nuevo vector de doble precisión con elementos seleccionados entre dos vectores de origen de doble precisión especificados según un vector de máscara entero.</summary>
      <param name="condition">Vector de máscara entero usado para realizar la selección.</param>
      <param name="left">Primer vector de origen.</param>
      <param name="right">Segundo vector de origen.</param>
      <returns>Nuevo vector con los elementos seleccionados según la máscara.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConditionalSelect``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Crea un nuevo vector de un tipo especificado con elementos seleccionados entre dos vectores de origen especificados del mismo tipo según un vector de máscara entero.</summary>
      <param name="condition">Vector de máscara entero usado para realizar la selección.</param>
      <param name="left">Primer vector de origen.</param>
      <param name="right">Segundo vector de origen.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Nuevo vector con los elementos seleccionados según la máscara.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.Int64})">
      <summary>Convierte <see cref="System.Numerics.Vector{System.Int64}" /> en <see cref="System.Numerics.Vector{System.Double}" />.</summary>
      <param name="value">Vector de origen.</param>
      <returns>Vector convertido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToDouble(System.Numerics.Vector{System.UInt64})">
      <summary>Convierte <see cref="System.Numerics.Vector{System.UInt64}" /> en <see cref="System.Numerics.Vector{System.Double}" />.</summary>
      <param name="value">Vector de origen.</param>
      <returns>Vector convertido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToInt32(System.Numerics.Vector{System.Single})">
      <summary>Convierte <see cref="System.Numerics.Vector{System.Single}" /> en <see cref="System.Numerics.Vector{System.Int32}" />.</summary>
      <param name="value">Vector de origen.</param>
      <returns>Vector convertido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToInt64(System.Numerics.Vector{System.Double})">
      <summary>Convierte <see cref="System.Numerics.Vector{System.Double}" /> en <see cref="System.Numerics.Vector{System.Int64}" />.</summary>
      <param name="value">Vector de origen.</param>
      <returns>Vector convertido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.Int32})">
      <summary>Convierte <see cref="System.Numerics.Vector{System.Int32}" /> en <see cref="System.Numerics.Vector{System.Single}" />.</summary>
      <param name="value">Vector de origen.</param>
      <returns>Vector convertido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToSingle(System.Numerics.Vector{System.UInt32})">
      <summary>Convierte <see cref="System.Numerics.Vector{System.UInt32}" /> en <see cref="System.Numerics.Vector{System.Single}" />.</summary>
      <param name="value">Vector de origen.</param>
      <returns>Vector convertido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToUInt32(System.Numerics.Vector{System.Single})">
      <summary>Convierte <see cref="System.Numerics.Vector{System.Single}" /> en <see cref="System.Numerics.Vector{System.UInt32}" />.</summary>
      <param name="value">Vector de origen.</param>
      <returns>Vector convertido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.ConvertToUInt64(System.Numerics.Vector{System.Double})">
      <summary>Convierte <see cref="System.Numerics.Vector{System.Double}" /> en <see cref="System.Numerics.Vector{System.UInt64}" />.</summary>
      <param name="value">Vector de origen.</param>
      <returns>Vector convertido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Divide``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un nuevo vector cuyos valores son el resultado de dividir los elementos del primer vector por los elementos correspondientes del segundo vector.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector dividido.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Dot``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve el producto escalar de dos vectores.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Producto escalar.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Devuelve un nuevo vector entero cuyos elementos indican si los elementos de los dos vectores de doble precisión especificados son iguales.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Devuelve un nuevo vector entero cuyos elementos indican si los elementos de los dos vectores enteros especificados son iguales.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Devuelve un nuevo vector entero cuyos elementos indican si los elementos de los dos vectores enteros largos especificados son iguales.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>Vector entero largo resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Devuelve un nuevo vector entero cuyos elementos indican si los elementos de los dos vectores de precisión sencilla especificados son iguales.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Equals``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un nuevo vector de un tipo especificado cuyos elementos indican si los elementos de los dos vectores especificados del mismo tipo son iguales.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.EqualsAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un valor que indica si cada par de elementos de los vectores especificados es igual.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>
        <see langword="true" /> si todos los elementos de <paramref name="left" /> y <paramref name="right" /> son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.EqualsAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un valor que indica si cada par de elementos individual de los vectores especificados es igual.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>
        <see langword="true" /> si algún par elementos de <paramref name="left" /> y <paramref name="right" /> es igual; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Devuelve un nuevo vector entero cuyos elementos indican si los elementos de un vector de punto flotante de doble precisión son mayores que sus elementos correspondientes de un segundo vector de punto flotante de doble precisión.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Devuelve un nuevo vector entero cuyos elementos indican si los elementos de un vector entero son mayores que sus elementos correspondientes de un segundo vector entero.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Devuelve un nuevo vector entero largo cuyos elementos indican si los elementos de un vector entero largo son mayores que sus elementos correspondientes de un segundo vector entero largo.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>Vector entero largo resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Devuelve un nuevo vector entero cuyos elementos indican si los elementos de un vector de punto flotante de precisión sencilla son mayores que sus elementos correspondientes de un segundo vector de punto flotante de precisión sencilla.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un nuevo vector cuyos elementos indican si los elementos de un vector de un tipo especificado son mayores que sus elementos correspondientes del segundo vector del mismo tipo.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un valor que indica si todos los elementos del primer vector son mayores que los elementos correspondientes del segundo vector.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>
        <see langword="true" /> si todos los elementos de <paramref name="left" /> son mayores que los elementos correspondientes de <paramref name="right" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un valor que indica si algún elemento del primer vector es mayor que el elemento correspondiente del segundo vector.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>
        <see langword="true" /> si algún elemento de <paramref name="left" /> es mayor que el elemento correspondiente de <paramref name="right" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Devuelve un nuevo vector entero cuyos elementos indican si los elementos de un vector son mayores o iguales que sus elementos correspondientes del segundo vector de punto flotante de doble precisión.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Devuelve un nuevo vector entero cuyos elementos indican si los elementos de un vector entero son mayores o iguales que sus elementos correspondientes del segundo vector entero.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Devuelve un nuevo nuevo vector entero largo cuyos elementos indican si los elementos de un vector entero largo son mayores o iguales que sus elementos correspondientes del segundo vector entero largo.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>Vector entero largo resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Devuelve un nuevo vector entero cuyos elementos indican si los elementos de un vector son mayores o iguales que sus elementos correspondientes del segundo vector de punto flotante de precisión sencilla.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un nuevo vector cuyos elementos indican si los elementos de un vector de un tipo especificado son mayores o iguales que sus elementos correspondientes del segundo vector del mismo tipo.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un valor que indica si todos los elementos del primer vector son mayores o iguales que todos los elementos correspondientes del segundo vector.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>
        <see langword="true" /> si todos los elementos de <paramref name="left" /> son mayores o iguales que los elementos correspondientes de <paramref name="right" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.GreaterThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un valor que indica si algún elemento del primer vector es mayor o igual que el elemento correspondiente del segundo vector.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>
        <see langword="true" /> si algún elemento de <paramref name="left" /> es mayor o igual que el elemento correspondiente de <paramref name="right" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.Vector.IsHardwareAccelerated">
      <summary>Obtiene un valor que indica si las operaciones de vector están sujetas a la aceleración de hardware mediante la compatibilidad intrínseca de JIT.</summary>
      <returns>
        <see langword="true" /> si las operaciones de vector están sujetas a la aceleración de hardware; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Devuelve un nuevo vector entero cuyos elementos indican si los elementos de un vector de punto flotante de doble precisión son menores que sus elementos correspondientes de un segundo vector de punto flotante de doble precisión.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Devuelve un nuevo vector entero cuyos elementos indican si los elementos de un vector entero son menores que sus elementos correspondientes de un segundo vector entero.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Devuelve un nuevo vector entero largo cuyos elementos indican si los elementos de un vector entero largo son menores que sus elementos correspondientes de un segundo vector entero largo.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>Vector entero largo resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Devuelve un nuevo vector entero cuyos elementos indican si los elementos de un vector de precisión sencilla son menores que sus elementos correspondientes de un segundo vector de precisión sencilla.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThan``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un nuevo vector de un tipo especificado cuyos elementos indican si los elementos de un vector son menores que sus elementos correspondientes del segundo vector.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un valor que indica si todos los elementos del primer vector son menores que los elementos correspondientes del segundo vector.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>
        <see langword="true" /> si todos los elementos de <paramref name="left" /> son menores que los elementos correspondientes de <paramref name="right" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un valor que indica si algún elemento elemento del primer vector es menor que el elemento correspondiente del segundo vector.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>
        <see langword="true" /> si algún elemento de <paramref name="left" /> es menor que el elemento correspondiente de <paramref name="right" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Devuelve un nuevo vector entero cuyos elementos indican si los elementos de un vector de punto flotante de doble precisión son menores o iguales que sus elementos correspondientes de un segundo vector de punto flotante de doble precisión.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Devuelve un nuevo vector entero cuyos elementos indican si los elementos de un vector entero son menores o iguales que sus elementos correspondientes de un segundo vector entero.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Devuelve un nuevo vector entero largo cuyos elementos indican si los elementos de un vector entero largo son menores o iguales que sus elementos correspondientes de un segundo vector entero largo.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>Vector entero largo resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Single})">
      <summary>Devuelve un nuevo vector entero cuyos elementos indican si los elementos de un vector de punto flotante de precisión sencilla son menores o iguales que sus elementos correspondientes de un segundo vector de punto flotante de precisión sencilla.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>Vector entero resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqual``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un nuevo vector cuyos elementos indican si los elementos de un vector son menores o iguales que sus elementos correspondientes del segundo vector.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqualAll``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un valor que indica si todos los elementos del primer vector son menores o iguales que los elementos correspondientes del segundo vector.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>
        <see langword="true" /> si todos los elementos de <paramref name="left" /> son menores o iguales que los elementos correspondientes de <paramref name="right" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.LessThanOrEqualAny``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un valor que indica si algún elemento del primer vector es menor o igual que el elemento correspondiente del segundo vector.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>
        <see langword="true" /> si algún elemento de <paramref name="left" /> es menor o igual que el elemento correspondiente de <paramref name="right" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Max``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un nuevo vector cuyos elementos son el máximo de cada par de elementos de dos vectores dados.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector máximo.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Min``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un nuevo vector cuyos elementos son el mínimo de cada par de elementos de dos vectores dados.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector mínimo.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(``0,System.Numerics.Vector{``0})">
      <summary>Devuelve un nuevo vector cuyos valores son un valor escalar multiplicado por cada uno de los valores de un vector especificado.</summary>
      <param name="left">Valor escalar.</param>
      <param name="right">Vector.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},``0)">
      <summary>Devuelve un nuevo vector cuyos valores son los valores de un vector especificado, multiplicado cada uno por un valor escalar.</summary>
      <param name="left">Vector.</param>
      <param name="right">Valor escalar.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Multiply``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un nuevo vector cuyos valores son el producto de cada par de elementos de dos vectores especificados.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>El vector de producto basado en elemento.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Double},System.Numerics.Vector{System.Double})">
      <summary>Reduce dos instancias de <see cref="System.Numerics.Vector{System.Double}" /> a un objeto <see cref="System.Numerics.Vector{System.Single}" />.</summary>
      <param name="source1">Primer vector de origen, cuyos elementos se convierten en los elementos de índice inferior del valor devuelto.</param>
      <param name="source2">Segundo vector de origen, cuyos elementos se convierten en los elementos de índice superior del valor devuelto.</param>
      <returns>Objeto <see cref="System.Numerics.Vector{System.Single}" /> que contiene los elementos reducidos a partir de los vectores de origen.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int16})">
      <summary>Reduce dos instancias de <see cref="System.Numerics.Vector{System.Int16}" /> a un objeto <see cref="System.Numerics.Vector{System.SByte}" />.</summary>
      <param name="source1">Primer vector de origen, cuyos elementos se convierten en los elementos de índice inferior del valor devuelto.</param>
      <param name="source2">Segundo vector de origen, cuyos elementos se convierten en los elementos de índice superior del valor devuelto.</param>
      <returns>Objeto <see cref="System.Numerics.Vector{System.SByte}" /> que contiene los elementos reducidos a partir de los vectores de origen.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int32})">
      <summary>Reduce dos instancias de <see cref="System.Numerics.Vector{System.Int32}" /> a un objeto <see cref="System.Numerics.Vector{System.Int16}" />.</summary>
      <param name="source1">Primer vector de origen, cuyos elementos se convierten en los elementos de índice inferior del valor devuelto.</param>
      <param name="source2">Segundo vector de origen, cuyos elementos se convierten en los elementos de índice superior del valor devuelto.</param>
      <returns>Objeto <see cref="System.Numerics.Vector{System.Int16}" /> que contiene los elementos reducidos a partir de los vectores de origen.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.Int64},System.Numerics.Vector{System.Int64})">
      <summary>Reduce dos instancias de <see cref="System.Numerics.Vector{System.Int64}" /> a un objeto <see cref="System.Numerics.Vector{System.Int32}" />.</summary>
      <param name="source1">Primer vector de origen, cuyos elementos se convierten en los elementos de índice inferior del valor devuelto.</param>
      <param name="source2">Segundo vector de origen, cuyos elementos se convierten en los elementos de índice superior del valor devuelto.</param>
      <returns>Objeto <see cref="System.Numerics.Vector{System.Int32}" /> que contiene los elementos reducidos a partir de los vectores de origen.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt16})">
      <summary>Reduce dos instancias de <see cref="System.Numerics.Vector{System.UInt16}" /> a un objeto <see cref="System.Numerics.Vector{System.Byte}" />.</summary>
      <param name="source1">Primer vector de origen, cuyos elementos se convierten en los elementos de índice inferior del valor devuelto.</param>
      <param name="source2">Segundo vector de origen, cuyos elementos se convierten en los elementos de índice superior del valor devuelto.</param>
      <returns>Objeto <see cref="System.Numerics.Vector{System.Byte}" /> que contiene los elementos reducidos a partir de los vectores de origen.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt32})">
      <summary>Reduce dos instancias de <see cref="System.Numerics.Vector{System.UInt32}" /> a un objeto <see cref="System.Numerics.Vector{System.UInt16}" />.</summary>
      <param name="source1">Primer vector de origen, cuyos elementos se convierten en los elementos de índice inferior del valor devuelto.</param>
      <param name="source2">Segundo vector de origen, cuyos elementos se convierten en los elementos de índice superior del valor devuelto.</param>
      <returns>Objeto <see cref="System.Numerics.Vector{System.UInt16}" /> que contiene los elementos reducidos a partir de los vectores de origen.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Narrow(System.Numerics.Vector{System.UInt64},System.Numerics.Vector{System.UInt64})">
      <summary>Reduce dos instancias de <see cref="System.Numerics.Vector{System.UInt64}" /> a un objeto <see cref="System.Numerics.Vector{System.UInt32}" />.</summary>
      <param name="source1">Primer vector de origen, cuyos elementos se convierten en los elementos de índice inferior del valor devuelto.</param>
      <param name="source2">Segundo vector de origen, cuyos elementos se convierten en los elementos de índice superior del valor devuelto.</param>
      <returns>Objeto <see cref="System.Numerics.Vector{System.UInt32}" /> que contiene los elementos reducidos a partir de los vectores de origen.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Negate``1(System.Numerics.Vector{``0})">
      <summary>Devuelve un nuevo vector cuyos elementos son la negación del elemento correspondiente del vector especificado.</summary>
      <param name="value">Vector de origen.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector convertido en negativo.</returns>
    </member>
    <member name="M:System.Numerics.Vector.OnesComplement``1(System.Numerics.Vector{``0})">
      <summary>Devuelve un nuevo vector cuyos elementos se obtienen tomando el complemento de uno de los elementos de un vector especificado.</summary>
      <param name="value">Vector de origen.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector resultante.</returns>
    </member>
    <member name="M:System.Numerics.Vector.SquareRoot``1(System.Numerics.Vector{``0})">
      <summary>Devuelve un nuevo vector cuyos elementos son la raíz cuadrada de los elementos de un vector especificado.</summary>
      <param name="value">Vector de origen.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Raíz cuadrada del vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Subtract``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un nuevo vector cuyos valores son la diferencia entre los elementos del segundo vector y los elementos correspondientes del primer vector.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector de diferencia.</returns>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Byte},System.Numerics.Vector{System.UInt16}@,System.Numerics.Vector{System.UInt16}@)">
      <summary>Amplía un objeto <see cref="System.Numerics.Vector{System.Byte}" /> a dos instancias de <see cref="System.Numerics.Vector{System.UInt16}" />.</summary>
      <param name="source">Vector de origen cuyos elementos se amplían en las salidas.</param>
      <param name="dest1">Primer vector de salida, cuyos elementos contendrán los elementos ampliados de índices inferiores en el vector de origen.</param>
      <param name="dest2">Segundo vector de salida, cuyos elementos contendrán los elementos ampliados de índices superiores en el vector de origen.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int16},System.Numerics.Vector{System.Int32}@,System.Numerics.Vector{System.Int32}@)">
      <summary>Amplía un objeto <see cref="System.Numerics.Vector{System.Int16}" /> a dos instancias de <see cref="System.Numerics.Vector{System.Int32}" />.</summary>
      <param name="source">Vector de origen cuyos elementos se amplían en las salidas.</param>
      <param name="dest1">Primer vector de salida, cuyos elementos contendrán los elementos ampliados de índices inferiores en el vector de origen.</param>
      <param name="dest2">Segundo vector de salida, cuyos elementos contendrán los elementos ampliados de índices superiores en el vector de origen.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Int32},System.Numerics.Vector{System.Int64}@,System.Numerics.Vector{System.Int64}@)">
      <summary>Amplía un objeto <see cref="System.Numerics.Vector{System.Int32}" /> a dos instancias de <see cref="System.Numerics.Vector{System.Int64}" />.</summary>
      <param name="source">Vector de origen cuyos elementos se amplían en las salidas.</param>
      <param name="dest1">Primer vector de salida, cuyos elementos contendrán los elementos ampliados de índices inferiores en el vector de origen.</param>
      <param name="dest2">Segundo vector de salida, cuyos elementos contendrán los elementos ampliados de índices superiores en el vector de origen.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.SByte},System.Numerics.Vector{System.Int16}@,System.Numerics.Vector{System.Int16}@)">
      <summary>Amplía un objeto <see cref="System.Numerics.Vector{System.SByte}" /> a dos instancias de <see cref="System.Numerics.Vector{System.Int16}" />.</summary>
      <param name="source">Vector de origen cuyos elementos se amplían en las salidas.</param>
      <param name="dest1">Primer vector de salida, cuyos elementos contendrán los elementos ampliados de índices inferiores en el vector de origen.</param>
      <param name="dest2">Segundo vector de salida, cuyos elementos contendrán los elementos ampliados de índices superiores en el vector de origen.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.Single},System.Numerics.Vector{System.Double}@,System.Numerics.Vector{System.Double}@)">
      <summary>Amplía un objeto <see cref="System.Numerics.Vector{System.Single}" /> a dos instancias de <see cref="System.Numerics.Vector{System.Double}" />.</summary>
      <param name="source">Vector de origen cuyos elementos se amplían en las salidas.</param>
      <param name="dest1">Primer vector de salida, cuyos elementos contendrán los elementos ampliados de índices inferiores en el vector de origen.</param>
      <param name="dest2">Segundo vector de salida, cuyos elementos contendrán los elementos ampliados de índices superiores en el vector de origen.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt16},System.Numerics.Vector{System.UInt32}@,System.Numerics.Vector{System.UInt32}@)">
      <summary>Amplía un objeto <see cref="System.Numerics.Vector{System.UInt16}" /> a dos instancias de <see cref="System.Numerics.Vector{System.UInt32}" />.</summary>
      <param name="source">Vector de origen cuyos elementos se amplían en las salidas.</param>
      <param name="dest1">Primer vector de salida, cuyos elementos contendrán los elementos ampliados de índices inferiores en el vector de origen.</param>
      <param name="dest2">Segundo vector de salida, cuyos elementos contendrán los elementos ampliados de índices superiores en el vector de origen.</param>
    </member>
    <member name="M:System.Numerics.Vector.Widen(System.Numerics.Vector{System.UInt32},System.Numerics.Vector{System.UInt64}@,System.Numerics.Vector{System.UInt64}@)">
      <summary>Amplía un objeto <see cref="System.Numerics.Vector{System.UInt32}" /> a dos instancias de <see cref="System.Numerics.Vector{System.UInt64}" />.</summary>
      <param name="source">Vector de origen cuyos elementos se amplían en las salidas.</param>
      <param name="dest1">Primer vector de salida, cuyos elementos contendrán los elementos ampliados de índices inferiores en el vector de origen.</param>
      <param name="dest2">Segundo vector de salida, cuyos elementos contendrán los elementos ampliados de índices superiores en el vector de origen.</param>
    </member>
    <member name="M:System.Numerics.Vector.Xor``1(System.Numerics.Vector{``0},System.Numerics.Vector{``0})">
      <summary>Devuelve un nuevo vector realizando una operación O exclusiva (<see langword="XOr" />) bit a bit en cada par de elementos de dos vectores.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
      <returns>Vector resultante.</returns>
    </member>
    <member name="T:System.Numerics.Vector`1">
      <summary>Representa un vector único de un tipo numérico especificado que es adecuado para la optimización de bajo nivel de algoritmos paralelos.</summary>
      <typeparam name="T">Tipo de vector. <c>T</c> puede ser cualquier tipo numérico primitivo.</typeparam>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0)">
      <summary>Crea un vector cuyos componentes son de un tipo especificado.</summary>
      <param name="value">Tipo numérico que define el tipo de los componentes del vector.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0[])">
      <summary>Crea un vector a partir de una matriz especificada.</summary>
      <param name="values">Matriz numérica.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(`0[],System.Int32)">
      <summary>Crea un vector a partir de una matriz especificada comenzando en una posición de índice especificada.</summary>
      <param name="values">Matriz numérica.</param>
      <param name="index">Posición de índice inicial a partir de la cual se va a crear el vector.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> es <see langword="null" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> es menor que cero.  
O bien 
La longitud de <paramref name="values" /> menos <paramref name="index" /> es menor que <see cref="P:System.Numerics.Vector`1.Count" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.ReadOnlySpan{`0})">
      <summary>Construye un vector a partir del objeto <see cref="T:System.ReadOnlySpan`1" /> dado.</summary>
      <param name="values">Valores que se van a agregar al vector, como un intervalo de solo lectura de objetos de tipo T. El intervalo debe contener al menos <see cref="P:System.Numerics.Vector`1.Count" /> elementos.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>Construye un vector a partir del intervalo de bytes de solo lectura dado.</summary>
      <param name="values">Intervalo de bytes de solo lectura que contiene los valores que se van a agregar al vector. El intervalo debe contener al menos <see cref="P:System.Numerics.Vector`1.Count" /> elementos.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.#ctor(System.Span{`0})">
      <summary>Construye un vector a partir del objeto <see cref="T:System.Span`1" /> dado.</summary>
      <param name="values">Valores que se van a agregar al vector, como un intervalo de objetos de tipo T. El intervalo debe contener al menos <see cref="P:System.Numerics.Vector`1.Count" /> elementos.</param>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(`0[])">
      <summary>Copia la instancia de vector en una matriz de destino especificada.</summary>
      <param name="destination">Matriz que se va a recibir una copia de los valores del vector.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">El número de elementos del vector actual es mayor que el número de elementos disponibles en la matriz <paramref name="destination" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(`0[],System.Int32)">
      <summary>Copia la instancia de vector en una matriz de destino especificada a partir de una posición de índice especificada.</summary>
      <param name="destination">Matriz que se va a recibir una copia de los valores del vector.</param>
      <param name="startIndex">Índice inicial de <paramref name="destination" /> donde debe comenzar la operación de copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">El número de elementos de la instancia actual es mayor que el número de elementos disponibles desde <paramref name="startIndex" /> hasta el final de la matriz <paramref name="destination" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero o mayor que el último indice de <paramref name="destination" />.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(System.Span{`0})">
      <summary>Copia el vector en el intervalo determinado. .</summary>
      <param name="destination">Intervalo de destino en el que se copian los valores. El intervalo de destino debe tener al menos el tamaño <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <exception cref="T:System.ArgumentException">El número de elementos del vector de origen es mayor que los que hay disponibles en el intervalo de destino.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.CopyTo(System.Span{System.Byte})">
      <summary>Copia el vector en el objeto <see cref="T:System.Span`1" /> dado.</summary>
      <param name="destination">Intervalo de destino en el que se copian los valores. El intervalo de destino debe tener al menos el tamaño <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <exception cref="T:System.ArgumentException">El número de elementos del vector de origen es mayor que los que hay disponibles en el intervalo de destino.</exception>
    </member>
    <member name="P:System.Numerics.Vector`1.Count">
      <summary>Devuelve el número de elementos almacenado en el vector.</summary>
      <returns>Número de elementos almacenado en el vector.</returns>
      <exception cref="T:System.NotSupportedException">No se admite el acceso al captador de propiedad mediante reflexión.</exception>
    </member>
    <member name="M:System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})">
      <summary>Devuelve un valor que indica si esta instancia es igual que un vector especificado.</summary>
      <param name="other">Vector con el que se va a comparar esta instancia.</param>
      <returns>
        <see langword="true" /> si la instancia actual y <paramref name="other" /> son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</summary>
      <param name="obj">Objeto que se va a comparar con esta instancia.</param>
      <returns>
        <see langword="true" /> si la instancia actual y <paramref name="obj" /> son iguales; de lo contrario, <see langword="false" />. El método devuelve <see langword="false" /> si <paramref name="obj" /> es NULL o si <paramref name="obj" /> es un vector de un tipo diferente al de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.Item(System.Int32)">
      <summary>Obtiene el elemento situado en un índice especificado.</summary>
      <param name="index">Índice del elemento que se va a devolver.</param>
      <returns>Elemento situado en el índice <paramref name="index" />.</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> es menor que cero.  
O bien 
 <paramref name="index" /> es mayor o igual que <see cref="P:System.Numerics.Vector`1.Count" />.</exception>
    </member>
    <member name="P:System.Numerics.Vector`1.One">
      <summary>Devuelve un vector que únicamente contiene unos.</summary>
      <returns>Vector que contiene únicamente unos.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Suma dos vectores.</summary>
      <param name="left">Primer vector que se va a agregar.</param>
      <param name="right">Segundo vector que se va a agregar.</param>
      <returns>Vector sumado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Devuelve un nuevo vector realizando una operación <see langword="And" /> bit a bit en cada uno de los elementos de dos vectores.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <returns>Vector resultante de la operación <see langword="And" /> bit a bit de <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Devuelve un nuevo vector realizando una operación <see langword="Or" /> bit a bit en cada uno de los elementos de dos vectores.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <returns>Vector resultante de la operación <see langword="Or" /> bit a bit de los elementos de <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Divide el primer vector entre el segundo.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <returns>Vector resultante de dividir <paramref name="left" /> entre <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Devuelve un valor que indica si cada par de elementos de los dos vectores especificados son iguales.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Devuelve un nuevo vector realizando una operación <see langword="XOr" /> bit a bit en cada uno de los elementos de dos vectores.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <returns>Vector resultante de la operación <see langword="XOr" /> bit a bit de los elementos de <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}">
      <summary>Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.Byte" />.</summary>
      <param name="value">Vector que se va a reinterpretar.</param>
      <returns>Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}">
      <summary>Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.Double" />.</summary>
      <param name="value">Vector que se va a reinterpretar.</param>
      <returns>Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}">
      <summary>Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.Int16" />.</summary>
      <param name="value">Vector que se va a reinterpretar.</param>
      <returns>Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}">
      <summary>Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.Int32" />.</summary>
      <param name="value">Vector que se va a reinterpretar.</param>
      <returns>Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}">
      <summary>Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.Int64" />.</summary>
      <param name="value">Vector que se va a reinterpretar.</param>
      <returns>Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}">
      <summary>Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.SByte" />.</summary>
      <param name="value">Vector que se va a reinterpretar.</param>
      <returns>Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}">
      <summary>Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.Single" />.</summary>
      <param name="value">Vector que se va a reinterpretar.</param>
      <returns>Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}">
      <summary>Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.UInt16" />.</summary>
      <param name="value">Vector que se va a reinterpretar.</param>
      <returns>Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}">
      <summary>Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.UInt32" />.</summary>
      <param name="value">Vector que se va a reinterpretar.</param>
      <returns>Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}">
      <summary>Reinterpreta los bits del vector especificado en un vector del tipo <see cref="T:System.UInt64" />.</summary>
      <param name="value">Vector que se va a reinterpretar.</param>
      <returns>Vector reinterpretado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Devuelve un valor que indica si cada par de elementos de los vectores especificados es igual.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>
        <see langword="true" /> si los pares de elementos de la izquierda y la derecha son iguales. <see langword="false" /> si no hay ningún par de elementos iguales.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})">
      <summary>Multiplica un vector por un valor escalar especificado.</summary>
      <param name="factor">Valor escalar.</param>
      <param name="value">Vector de origen.</param>
      <returns>Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)">
      <summary>Multiplica un vector por un valor escalar especificado.</summary>
      <param name="value">Vector de origen.</param>
      <param name="factor">Valor escalar.</param>
      <returns>Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Devuelve un nuevo vector cuyos valores son el producto de cada par de elementos de dos vectores especificados.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <returns>El vector de producto basado en elemento.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})">
      <summary>Devuelve un nuevo vector cuyos elementos se obtienen tomando el complemento de uno de los elementos de un vector especificado.</summary>
      <param name="value">Vector de origen.</param>
      <returns>Vector complemento de uno.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
      <summary>Resta el segundo vector del primero.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <returns>Vector resultante de restar <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})">
      <summary>Convierte en negativo un vector concreto.</summary>
      <param name="value">Vector que se va a convertir en negativo.</param>
      <returns>Vector convertido en negativo.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString">
      <summary>Devuelve la representación de cadena de este vector usando el formato predeterminado.</summary>
      <returns>Representación de cadena de este vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString(System.String)">
      <summary>Devuelve la representación de cadena de este vector usando la cadena de formato especificada para dar formato a los elementos individuales.</summary>
      <param name="format">o  que define el formato de los elementos individuales.</param>
      <returns>Representación de cadena de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)">
      <summary>Devuelve la representación de cadena de este vector usando la cadena de formato especificada para dar formato a los elementos individuales y el proveedor de formato especificado para definir el formato específico de la referencia cultural.</summary>
      <param name="format">o  que define el formato de los elementos individuales.</param>
      <param name="formatProvider">Proveedor de formato que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Representación de cadena de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.TryCopyTo(System.Span{`0})">
      <summary>Intenta copiar el vector en el objeto <see cref="T:System.Span`1" /> dado.</summary>
      <param name="destination">Intervalo de destino en el que se copian los valores. El intervalo de destino debe tener al menos el tamaño <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <returns>
        <see langword="true" /> si el vector de origen se copió correctamente en <paramref name="destination" />. <see langword="false" /> si <paramref name="destination" /> no es lo suficientemente grande como para contener el vector de origen.</returns>
    </member>
    <member name="M:System.Numerics.Vector`1.TryCopyTo(System.Span{System.Byte})">
      <summary>Intenta copiar el vector en el intervalo de bytes especificado.</summary>
      <param name="destination">Intervalo de destino en el que se copian los valores. El intervalo de destino debe tener al menos el tamaño <see cref="P:System.Numerics.Vector`1.Count" />.</param>
      <returns>
        <see langword="true" /> si el vector de origen se copió correctamente en <paramref name="destination" />. <see langword="false" /> si <paramref name="destination" /> no es lo suficientemente grande como para contener el vector de origen.</returns>
    </member>
    <member name="P:System.Numerics.Vector`1.Zero">
      <summary>Devuelve un vector que únicamente contiene ceros.</summary>
      <returns>Vector que contiene únicamente  ceros.</returns>
    </member>
    <member name="T:System.Numerics.Vector2">
      <summary>Representa un vector con dos valores de punto flotante de precisión simple.</summary>
    </member>
    <member name="M:System.Numerics.Vector2.#ctor(System.Single)">
      <summary>Crea un nuevo objeto <see cref="T:System.Numerics.Vector2" /> cuyos dos elementos tienen el mismo valor.</summary>
      <param name="value">Valor que se va a asignar a ambos elementos.</param>
    </member>
    <member name="M:System.Numerics.Vector2.#ctor(System.Single,System.Single)">
      <summary>Crea un vector cuyos elementos tienen los valores especificados.</summary>
      <param name="x">Valor que se va a asignar al campo <see cref="F:System.Numerics.Vector2.X" />.</param>
      <param name="y">Valor que se va a asignar al campo <see cref="F:System.Numerics.Vector2.Y" />.</param>
    </member>
    <member name="M:System.Numerics.Vector2.Abs(System.Numerics.Vector2)">
      <summary>Devuelve un vector cuyos elementos son los valores absolutos de cada uno de los elementos del vector especificado.</summary>
      <param name="value">Vector.</param>
      <returns>Vector de valor absoluto.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Add(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Suma dos vectores.</summary>
      <param name="left">Primer vector que se va a agregar.</param>
      <param name="right">Segundo vector que se va a agregar.</param>
      <returns>Vector sumado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Clamp(System.Numerics.Vector2,System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Restringe un vector entre un valor mínimo y un valor máximo.</summary>
      <param name="value1">Vector que se va a restringir.</param>
      <param name="min">Valor mínimo.</param>
      <param name="max">Valor máximo.</param>
      <returns>Vector restringido.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.CopyTo(System.Single[])">
      <summary>Copia los elementos del vector en una matriz especificada.</summary>
      <param name="array">Matriz de destino.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">El número de elementos de la instancia actual es mayor que el de la matriz.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> es multidimensional.</exception>
    </member>
    <member name="M:System.Numerics.Vector2.CopyTo(System.Single[],System.Int32)">
      <summary>Copia los elementos del vector en una matriz especificada a partir de una posición del índice especificada.</summary>
      <param name="array">Matriz de destino.</param>
      <param name="index">Índice al que se va a copiar el primer elemento del vector.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">El número de elementos de la instancia actual es mayor que el de la matriz.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.  
o bien 
 <paramref name="index" /> es mayor o igual que la longitud de la matriz.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> es multidimensional.</exception>
    </member>
    <member name="M:System.Numerics.Vector2.Distance(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Calcula la distancia euclidiana entre los dos puntos determinados.</summary>
      <param name="value1">Primer punto.</param>
      <param name="value2">Segundo punto.</param>
      <returns>Distancia.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.DistanceSquared(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Devuelve la distancia euclidiana al cuadrado entre dos puntos especificados.</summary>
      <param name="value1">Primer punto.</param>
      <param name="value2">Segundo punto.</param>
      <returns>Distancia al cuadrado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Divide el primer vector entre el segundo.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <returns>Vector resultante de la división.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Divide(System.Numerics.Vector2,System.Single)">
      <summary>Divide el vector especificado entre un valor escalar especificado.</summary>
      <param name="left">Vector.</param>
      <param name="divisor">Valor escalar.</param>
      <returns>Vector resultante de la división.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Dot(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Devuelve el producto escalar de dos vectores.</summary>
      <param name="value1">Primer vector.</param>
      <param name="value2">Segundo vector.</param>
      <returns>Producto escalar.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Equals(System.Numerics.Vector2)">
      <summary>Devuelve un valor que indica si esta instancia y otro vector son iguales.</summary>
      <param name="other">Otro vector.</param>
      <returns>
        <see langword="true" /> si los dos valores son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</summary>
      <param name="obj">Objeto que se va a comparar con la instancia actual.</param>
      <returns>
        <see langword="true" /> si la instancia actual y <paramref name="obj" /> son iguales; de lo contrario, <see langword="false" />. Si el valor de <paramref name="obj" /> es <see langword="null" />, el método devuelve <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Length">
      <summary>Devuelve la longitud del vector.</summary>
      <returns>Longitud del vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.LengthSquared">
      <summary>Devuelve la longitud al cuadrado del vector.</summary>
      <returns>Longitud del vector al cuadrado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Lerp(System.Numerics.Vector2,System.Numerics.Vector2,System.Single)">
      <summary>Realiza una interpolación lineal entre dos vectores según la ponderación determinada.</summary>
      <param name="value1">Primer vector.</param>
      <param name="value2">Segundo vector.</param>
      <param name="amount">Valor entre 0 y 1 que indica el peso de <paramref name="value2" />.</param>
      <returns>Vector interpolado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Max(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Devuelve un vector cuyos elementos son el valor máximo de cada uno de los pares de elementos de dos vectores especificados.</summary>
      <param name="value1">Primer vector.</param>
      <param name="value2">Segundo vector.</param>
      <returns>Vector maximizado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Min(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Devuelve un vector cuyos elementos son el valor mínimo de cada uno de los pares de elementos de dos vectores especificados.</summary>
      <param name="value1">Primer vector.</param>
      <param name="value2">Segundo vector.</param>
      <returns>Vector minimizado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Devuelve un nuevo vector cuyos valores son el producto de cada par de elementos de dos vectores especificados.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <returns>El vector de producto basado en elemento.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Numerics.Vector2,System.Single)">
      <summary>Multiplica un vector por un valor escalar especificado.</summary>
      <param name="left">Vector que se va a multiplicar.</param>
      <param name="right">Valor escalar.</param>
      <returns>Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Multiply(System.Single,System.Numerics.Vector2)">
      <summary>Multiplica un valor escalar por un vector especificado.</summary>
      <param name="left">Valor escalado.</param>
      <param name="right">Vector.</param>
      <returns>Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Negate(System.Numerics.Vector2)">
      <summary>Convierte en negativo un vector especificado.</summary>
      <param name="value">Vector que se va a convertir en negativo.</param>
      <returns>Vector convertido en negativo.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Normalize(System.Numerics.Vector2)">
      <summary>Devuelve un vector con la misma dirección que el vector especificado, pero con una longitud de uno.</summary>
      <param name="value">Vector que se va a normalizar.</param>
      <returns>Valor normalizado.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.One">
      <summary>Obtiene un vector cuyos 2 elementos son iguales a uno.</summary>
      <returns>Vector cuyos dos elementos son iguales a uno (es decir, devuelve el vector <c>(1,1)</c>.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Addition(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Suma dos vectores.</summary>
      <param name="left">Primer vector que se va a agregar.</param>
      <param name="right">Segundo vector que se va a agregar.</param>
      <returns>Vector sumado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Divide el primer vector entre el segundo.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <returns>Vector resultante de dividir <paramref name="left" /> entre <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Division(System.Numerics.Vector2,System.Single)">
      <summary>Divide el vector especificado entre un valor escalar especificado.</summary>
      <param name="value1">Vector.</param>
      <param name="value2">Valor escalar.</param>
      <returns>Resultado de la división.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Equality(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Devuelve un valor que indica si cada par de elementos de los dos vectores especificados es igual.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Inequality(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Devuelve un valor que indica si dos vectores especificados no son iguales.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Devuelve un nuevo vector cuyos valores son el producto de cada par de elementos de dos vectores especificados.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <returns>El vector de producto basado en elemento.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Numerics.Vector2,System.Single)">
      <summary>Multiplica el vector especificado por el valor escalar especificado.</summary>
      <param name="left">Vector.</param>
      <param name="right">Valor escalar.</param>
      <returns>Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Multiply(System.Single,System.Numerics.Vector2)">
      <summary>Multiplica el valor escalar del valor del vector especificado.</summary>
      <param name="left">Vector.</param>
      <param name="right">Valor escalar.</param>
      <returns>Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_Subtraction(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Resta el segundo vector del primero.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <returns>Vector resultante de restar <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.op_UnaryNegation(System.Numerics.Vector2)">
      <summary>Convierte en negativo el vector especificado.</summary>
      <param name="value">Vector que se va a convertir en negativo.</param>
      <returns>Vector convertido en negativo.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Reflect(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Devuelve la reflexión de un vector en una superficie con la normal especificada.</summary>
      <param name="vector">Vector de origen.</param>
      <param name="normal">Valor normal de la superficie que se refleja.</param>
      <returns>Vector reflejado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.SquareRoot(System.Numerics.Vector2)">
      <summary>Devuelve un vector cuyos elementos son la raíz cuadrada de cada uno de los elementos de un vector especificado.</summary>
      <param name="value">Vector.</param>
      <returns>Raíz cuadrada del vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Subtract(System.Numerics.Vector2,System.Numerics.Vector2)">
      <summary>Resta el segundo vector del primero.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <returns>Vector de diferencia.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString">
      <summary>Devuelve la representación de cadena de la instancia actual usando el formato predeterminado.</summary>
      <returns>Representación de cadena de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString(System.String)">
      <summary>Devuelve la representación de cadena de la instancia actual usando la cadena de formato especificado para dar formato a los elementos individuales.</summary>
      <param name="format">Cadena estándar o cadena de formato numérico personalizado que define el formato de elementos individuales.</param>
      <returns>Representación de cadena de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.ToString(System.String,System.IFormatProvider)">
      <summary>Devuelve la representación de cadena de la instancia actual usando la cadena de formato especificado para dar formato a los elementos individuales y el proveedor de formato especificado para definir el formato específico de la referencia cultural.</summary>
      <param name="format">Cadena estándar o cadena de formato numérico personalizado que define el formato de elementos individuales.</param>
      <param name="formatProvider">Proveedor de formato que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Representación de cadena de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix3x2)">
      <summary>Transforma un vector por una matriz de 3 x 2 especificada.</summary>
      <param name="position">Vector que se va a transformar.</param>
      <param name="matrix">Matriz de transformación.</param>
      <returns>Valor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>Transforma un vector por una matriz de 4 x 4 especificada.</summary>
      <param name="position">Vector que se va a transformar.</param>
      <param name="matrix">Matriz de transformación.</param>
      <returns>Valor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)">
      <summary>Transforma un vector por el valor de rotación del cuaternión especificado.</summary>
      <param name="value">Vector que se va a girar.</param>
      <param name="rotation">Rotación que se va a aplicar.</param>
      <returns>Valor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix3x2)">
      <summary>Transforma el valor normal de un vector por la matriz de 3 x 2 especificada.</summary>
      <param name="normal">Vector de origen.</param>
      <param name="matrix">Matriz.</param>
      <returns>Valor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector2.TransformNormal(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>Transforma un vector normal por la matriz especificada de 4 x 4.</summary>
      <param name="normal">Vector de origen.</param>
      <param name="matrix">Matriz.</param>
      <returns>Valor transformado.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.UnitX">
      <summary>Obtiene el vector (1,0).</summary>
      <returns>Vector <c>(1,0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector2.UnitY">
      <summary>Obtiene el vector (0,1).</summary>
      <returns>Vector <c>(0,0)</c>.</returns>
    </member>
    <member name="F:System.Numerics.Vector2.X">
      <summary>Componente X del vector.</summary>
    </member>
    <member name="F:System.Numerics.Vector2.Y">
      <summary>Componente Y del vector.</summary>
    </member>
    <member name="P:System.Numerics.Vector2.Zero">
      <summary>Devuelve un vector cuyos 2 elementos son iguales a cero.</summary>
      <returns>Vector cuyos dos elementos son iguales a cero (es decir, devuelve el vector <c>(0,0)</c>.</returns>
    </member>
    <member name="T:System.Numerics.Vector3">
      <summary>Representa un vector con tres valores de punto flotante de precisión simple.</summary>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Single)">
      <summary>Crea un nuevo objeto <see cref="T:System.Numerics.Vector3" /> a partir de objeto <see cref="T:System.Numerics.Vector2" /> y el valor especificados.</summary>
      <param name="value">Vector con dos elementos.</param>
      <param name="z">Valor adicional que se va a asignar al campo <see cref="F:System.Numerics.Vector3.Z" />.</param>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Single)">
      <summary>Crea un nuevo objeto <see cref="T:System.Numerics.Vector3" /> cuyos tres elementos tienen el mismo valor.</summary>
      <param name="value">Valor que se va a asignar a los tres elementos.</param>
    </member>
    <member name="M:System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>Crea un vector cuyos elementos tienen los valores especificados.</summary>
      <param name="x">Valor que se va a asignar al campo <see cref="F:System.Numerics.Vector3.X" />.</param>
      <param name="y">Valor que se va a asignar al campo <see cref="F:System.Numerics.Vector3.Y" />.</param>
      <param name="z">Valor que se va a asignar al campo <see cref="F:System.Numerics.Vector3.Z" />.</param>
    </member>
    <member name="M:System.Numerics.Vector3.Abs(System.Numerics.Vector3)">
      <summary>Devuelve un vector cuyos elementos son los valores absolutos de cada uno de los elementos del vector especificado.</summary>
      <param name="value">Vector.</param>
      <returns>Vector de valor absoluto.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Suma dos vectores.</summary>
      <param name="left">Primer vector que se va a agregar.</param>
      <param name="right">Segundo vector que se va a agregar.</param>
      <returns>Vector sumado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Restringe un vector entre un valor mínimo y un valor máximo.</summary>
      <param name="value1">Vector que se va a restringir.</param>
      <param name="min">Valor mínimo.</param>
      <param name="max">Valor máximo.</param>
      <returns>Vector restringido.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.CopyTo(System.Single[])">
      <summary>Copia los elementos del vector en una matriz especificada.</summary>
      <param name="array">Matriz de destino.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">El número de elementos de la instancia actual es mayor que el de la matriz.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> es multidimensional.</exception>
    </member>
    <member name="M:System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)">
      <summary>Copia los elementos del vector en una matriz especificada a partir de una posición del índice especificada.</summary>
      <param name="array">Matriz de destino.</param>
      <param name="index">Índice al que se va a copiar el primer elemento del vector.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">El número de elementos de la instancia actual es mayor que el de la matriz.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.  
O bien 
 <paramref name="index" /> es mayor o igual que la longitud de la matriz.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> es multidimensional.</exception>
    </member>
    <member name="M:System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Calcula el producto cruzado de dos vectores.</summary>
      <param name="vector1">Primer vector.</param>
      <param name="vector2">Segundo vector.</param>
      <returns>Producto cruzado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Calcula la distancia euclidiana entre los dos puntos determinados.</summary>
      <param name="value1">Primer punto.</param>
      <param name="value2">Segundo punto.</param>
      <returns>Distancia.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Devuelve la distancia euclidiana al cuadrado entre dos puntos especificados.</summary>
      <param name="value1">Primer punto.</param>
      <param name="value2">Segundo punto.</param>
      <returns>Distancia al cuadrado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Divide el primer vector entre el segundo.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <returns>Vector resultante de la división.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Single)">
      <summary>Divide el vector especificado entre un valor escalar especificado.</summary>
      <param name="left">Vector.</param>
      <param name="divisor">Valor escalar.</param>
      <returns>Vector resultante de la división.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Devuelve el producto escalar de dos vectores.</summary>
      <param name="vector1">Primer vector.</param>
      <param name="vector2">Segundo vector.</param>
      <returns>Producto escalar.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Equals(System.Numerics.Vector3)">
      <summary>Devuelve un valor que indica si esta instancia y otro vector son iguales.</summary>
      <param name="other">Otro vector.</param>
      <returns>
        <see langword="true" /> si los dos valores son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</summary>
      <param name="obj">Objeto que se va a comparar con la instancia actual.</param>
      <returns>
        <see langword="true" /> si la instancia actual y <paramref name="obj" /> son iguales; de lo contrario, <see langword="false" />. Si el valor de <paramref name="obj" /> es <see langword="null" />, el método devuelve <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Length">
      <summary>Devuelve la longitud de este objeto vector.</summary>
      <returns>Longitud del vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.LengthSquared">
      <summary>Devuelve la longitud al cuadrado del vector.</summary>
      <returns>Longitud del vector al cuadrado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)">
      <summary>Realiza una interpolación lineal entre dos vectores según la ponderación determinada.</summary>
      <param name="value1">Primer vector.</param>
      <param name="value2">Segundo vector.</param>
      <param name="amount">Valor entre 0 y 1 que indica el peso de <paramref name="value2" />.</param>
      <returns>Vector interpolado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Devuelve un vector cuyos elementos son el valor máximo de cada uno de los pares de elementos de dos vectores especificados.</summary>
      <param name="value1">Primer vector.</param>
      <param name="value2">Segundo vector.</param>
      <returns>Vector maximizado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Devuelve un vector cuyos elementos son el valor mínimo de cada uno de los pares de elementos de dos vectores especificados.</summary>
      <param name="value1">Primer vector.</param>
      <param name="value2">Segundo vector.</param>
      <returns>Vector minimizado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Devuelve un nuevo vector cuyos valores son el producto de cada par de elementos de dos vectores especificados.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <returns>El vector de producto basado en elemento.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Single)">
      <summary>Multiplica un vector por un valor escalar especificado.</summary>
      <param name="left">Vector que se va a multiplicar.</param>
      <param name="right">Valor escalar.</param>
      <returns>Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Multiply(System.Single,System.Numerics.Vector3)">
      <summary>Multiplica un valor escalar por un vector especificado.</summary>
      <param name="left">Valor escalado.</param>
      <param name="right">Vector.</param>
      <returns>Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Negate(System.Numerics.Vector3)">
      <summary>Convierte en negativo un vector especificado.</summary>
      <param name="value">Vector que se va a convertir en negativo.</param>
      <returns>Vector convertido en negativo.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Normalize(System.Numerics.Vector3)">
      <summary>Devuelve un vector con la misma dirección que el vector especificado, pero con una longitud de uno.</summary>
      <param name="value">Vector que se va a normalizar.</param>
      <returns>Valor normalizado.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.One">
      <summary>Obtiene un vector cuyos 3 elementos son iguales a uno.</summary>
      <returns>Vector cuyos tres elementos son iguales a uno (es decir, devuelve el vector <c>(1, 1,1)</c>.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Suma dos vectores.</summary>
      <param name="left">Primer vector que se va a agregar.</param>
      <param name="right">Segundo vector que se va a agregar.</param>
      <returns>Vector sumado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Divide el primer vector entre el segundo.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <returns>Vector resultante de dividir <paramref name="left" /> entre <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)">
      <summary>Divide el vector especificado entre un valor escalar especificado.</summary>
      <param name="value1">Vector.</param>
      <param name="value2">Valor escalar.</param>
      <returns>Resultado de la división.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Devuelve un valor que indica si cada par de elementos de los dos vectores especificados es igual.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Devuelve un valor que indica si dos vectores especificados no son iguales.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Devuelve un nuevo vector cuyos valores son el producto de cada par de elementos de dos vectores especificados.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <returns>El vector de producto basado en elemento.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)">
      <summary>Multiplica el vector especificado por el valor escalar especificado.</summary>
      <param name="left">Vector.</param>
      <param name="right">Valor escalar.</param>
      <returns>Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Multiply(System.Single,System.Numerics.Vector3)">
      <summary>Multiplica el valor escalar del valor del vector especificado.</summary>
      <param name="left">Vector.</param>
      <param name="right">Valor escalar.</param>
      <returns>Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Resta el segundo vector del primero.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <returns>Vector resultante de restar <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)">
      <summary>Convierte en negativo el vector especificado.</summary>
      <param name="value">Vector que se va a convertir en negativo.</param>
      <returns>Vector convertido en negativo.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Devuelve la reflexión de un vector en una superficie con la normal especificada.</summary>
      <param name="vector">Vector de origen.</param>
      <param name="normal">Valor normal de la superficie que se refleja.</param>
      <returns>Vector reflejado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)">
      <summary>Devuelve un vector cuyos elementos son la raíz cuadrada de cada uno de los elementos de un vector especificado.</summary>
      <param name="value">Vector.</param>
      <returns>Raíz cuadrada del vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)">
      <summary>Resta el segundo vector del primero.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <returns>Vector de diferencia.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString">
      <summary>Devuelve la representación de cadena de la instancia actual usando el formato predeterminado.</summary>
      <returns>Representación de cadena de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString(System.String)">
      <summary>Devuelve la representación de cadena de la instancia actual usando la cadena de formato especificado para dar formato a los elementos individuales.</summary>
      <param name="format">Cadena estándar o cadena de formato numérico personalizado que define el formato de elementos individuales.</param>
      <returns>Representación de cadena de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.ToString(System.String,System.IFormatProvider)">
      <summary>Devuelve la representación de cadena de la instancia actual usando la cadena de formato especificado para dar formato a los elementos individuales y el proveedor de formato especificado para definir el formato específico de la referencia cultural.</summary>
      <param name="format">Cadena estándar o cadena de formato numérico personalizado que define el formato de elementos individuales.</param>
      <param name="formatProvider">Proveedor de formato que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Representación de cadena de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>Transforma un vector por una matriz de 4 x 4 especificada.</summary>
      <param name="position">Vector que se va a transformar.</param>
      <param name="matrix">Matriz de transformación.</param>
      <returns>Valor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
      <summary>Transforma un vector por el valor de rotación del cuaternión especificado.</summary>
      <param name="value">Vector que se va a girar.</param>
      <param name="rotation">Rotación que se va a aplicar.</param>
      <returns>Valor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>Transforma un vector normal por la matriz especificada de 4 x 4.</summary>
      <param name="normal">Vector de origen.</param>
      <param name="matrix">Matriz.</param>
      <returns>Valor transformado.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitX">
      <summary>Obtiene el vector (1,0,0).</summary>
      <returns>Vector <c>(1, 0,0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitY">
      <summary>Obtiene el vector (0,1,0).</summary>
      <returns>Vector <c>(0, 1, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector3.UnitZ">
      <summary>Obtiene el vector (0,0,1).</summary>
      <returns>Vector <c>(0, 0, 1)</c>.</returns>
    </member>
    <member name="F:System.Numerics.Vector3.X">
      <summary>Componente X del vector.</summary>
    </member>
    <member name="F:System.Numerics.Vector3.Y">
      <summary>Componente Y del vector.</summary>
    </member>
    <member name="F:System.Numerics.Vector3.Z">
      <summary>Componente Z del vector.</summary>
    </member>
    <member name="P:System.Numerics.Vector3.Zero">
      <summary>Obtiene un vector cuyos 3 elementos son iguales a cero.</summary>
      <returns>Vector cuyos tres elementos son iguales a cero (es decir, devuelve el vector <c>(0,0)</c>.</returns>
    </member>
    <member name="T:System.Numerics.Vector4">
      <summary>Representa un vector con cuatro valores de punto flotante de precisión simple.</summary>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Numerics.Vector2,System.Single,System.Single)">
      <summary>Crea un nuevo objeto <see cref="T:System.Numerics.Vector4" /> a partir del objeto <see cref="T:System.Numerics.Vector2" /> especificado y un componente W y Z.</summary>
      <param name="value">Vector que se va a usar para los componentes de X e Y.</param>
      <param name="z">Componente Z.</param>
      <param name="w">Componente W.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Numerics.Vector3,System.Single)">
      <summary>Construye un nuevo objeto <see cref="T:System.Numerics.Vector4" />  a partir del objeto <see cref="T:System.Numerics.Vector3" /> especificado y un componente W.</summary>
      <param name="value">Vector que se va a usar para los componentes X, Y y Z.</param>
      <param name="w">Componente W.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Single)">
      <summary>Crea un nuevo objeto <see cref="T:System.Numerics.Vector4" /> cuyos cuatro elementos tienen el mismo valor.</summary>
      <param name="value">Valor que se va a asignar a los cuatro elementos.</param>
    </member>
    <member name="M:System.Numerics.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>Crea un vector cuyos elementos tienen los valores especificados.</summary>
      <param name="x">Valor que se va a asignar al campo <see cref="F:System.Numerics.Vector4.X" />.</param>
      <param name="y">Valor que se va a asignar al campo <see cref="F:System.Numerics.Vector4.Y" />.</param>
      <param name="z">Valor que se va a asignar al campo <see cref="F:System.Numerics.Vector4.Z" />.</param>
      <param name="w">Valor que se va a asignar al campo <see cref="F:System.Numerics.Vector4.W" />.</param>
    </member>
    <member name="M:System.Numerics.Vector4.Abs(System.Numerics.Vector4)">
      <summary>Devuelve un vector cuyos elementos son los valores absolutos de cada uno de los elementos del vector especificado.</summary>
      <param name="value">Vector.</param>
      <returns>Vector de valor absoluto.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Add(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Suma dos vectores.</summary>
      <param name="left">Primer vector que se va a agregar.</param>
      <param name="right">Segundo vector que se va a agregar.</param>
      <returns>Vector sumado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Clamp(System.Numerics.Vector4,System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Restringe un vector entre un valor mínimo y un valor máximo.</summary>
      <param name="value1">Vector que se va a restringir.</param>
      <param name="min">Valor mínimo.</param>
      <param name="max">Valor máximo.</param>
      <returns>Vector restringido.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.CopyTo(System.Single[])">
      <summary>Copia los elementos del vector en una matriz especificada.</summary>
      <param name="array">Matriz de destino.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">El número de elementos de la instancia actual es mayor que el de la matriz.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> es multidimensional.</exception>
    </member>
    <member name="M:System.Numerics.Vector4.CopyTo(System.Single[],System.Int32)">
      <summary>Copia los elementos del vector en una matriz especificada a partir de una posición del índice especificada.</summary>
      <param name="array">Matriz de destino.</param>
      <param name="index">Índice al que se va a copiar el primer elemento del vector.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">El número de elementos de la instancia actual es mayor que el de la matriz.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que cero.  
O bien 
 <paramref name="index" /> es mayor o igual que la longitud de la matriz.</exception>
      <exception cref="T:System.RankException">
        <paramref name="array" /> es multidimensional.</exception>
    </member>
    <member name="M:System.Numerics.Vector4.Distance(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Calcula la distancia euclidiana entre los dos puntos determinados.</summary>
      <param name="value1">Primer punto.</param>
      <param name="value2">Segundo punto.</param>
      <returns>Distancia.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.DistanceSquared(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Devuelve la distancia euclidiana al cuadrado entre dos puntos especificados.</summary>
      <param name="value1">Primer punto.</param>
      <param name="value2">Segundo punto.</param>
      <returns>Distancia al cuadrado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Divide el primer vector entre el segundo.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <returns>Vector resultante de la división.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Divide(System.Numerics.Vector4,System.Single)">
      <summary>Divide el vector especificado entre un valor escalar especificado.</summary>
      <param name="left">Vector.</param>
      <param name="divisor">Valor escalar.</param>
      <returns>Vector resultante de la división.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Dot(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Devuelve el producto escalar de dos vectores.</summary>
      <param name="vector1">Primer vector.</param>
      <param name="vector2">Segundo vector.</param>
      <returns>Producto escalar.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Equals(System.Numerics.Vector4)">
      <summary>Devuelve un valor que indica si esta instancia y otro vector son iguales.</summary>
      <param name="other">Otro vector.</param>
      <returns>
        <see langword="true" /> si los dos valores son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Equals(System.Object)">
      <summary>Devuelve un valor que indica si esta instancia es igual que un objeto especificado.</summary>
      <param name="obj">Objeto que se va a comparar con la instancia actual.</param>
      <returns>
        <see langword="true" /> si la instancia actual y <paramref name="obj" /> son iguales; de lo contrario, <see langword="false" />. Si el valor de <paramref name="obj" /> es <see langword="null" />, el método devuelve <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.GetHashCode">
      <summary>Devuelve el código hash de esta instancia.</summary>
      <returns>Código hash.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Length">
      <summary>Devuelve la longitud de este objeto vector.</summary>
      <returns>Longitud del vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.LengthSquared">
      <summary>Devuelve la longitud al cuadrado del vector.</summary>
      <returns>Longitud del vector al cuadrado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Lerp(System.Numerics.Vector4,System.Numerics.Vector4,System.Single)">
      <summary>Realiza una interpolación lineal entre dos vectores según la ponderación determinada.</summary>
      <param name="value1">Primer vector.</param>
      <param name="value2">Segundo vector.</param>
      <param name="amount">Valor entre 0 y 1 que indica el peso de <paramref name="value2" />.</param>
      <returns>Vector interpolado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Max(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Devuelve un vector cuyos elementos son el valor máximo de cada uno de los pares de elementos de dos vectores especificados.</summary>
      <param name="value1">Primer vector.</param>
      <param name="value2">Segundo vector.</param>
      <returns>Vector maximizado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Min(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Devuelve un vector cuyos elementos son el valor mínimo de cada uno de los pares de elementos de dos vectores especificados.</summary>
      <param name="value1">Primer vector.</param>
      <param name="value2">Segundo vector.</param>
      <returns>Vector minimizado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Devuelve un nuevo vector cuyos valores son el producto de cada par de elementos de dos vectores especificados.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <returns>El vector de producto basado en elemento.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Numerics.Vector4,System.Single)">
      <summary>Multiplica un vector por un valor escalar especificado.</summary>
      <param name="left">Vector que se va a multiplicar.</param>
      <param name="right">Valor escalar.</param>
      <returns>Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Multiply(System.Single,System.Numerics.Vector4)">
      <summary>Multiplica un valor escalar por un vector especificado.</summary>
      <param name="left">Valor escalado.</param>
      <param name="right">Vector.</param>
      <returns>Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Negate(System.Numerics.Vector4)">
      <summary>Convierte en negativo un vector especificado.</summary>
      <param name="value">Vector que se va a convertir en negativo.</param>
      <returns>Vector convertido en negativo.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Normalize(System.Numerics.Vector4)">
      <summary>Devuelve un vector con la misma dirección que el vector especificado, pero con una longitud de uno.</summary>
      <param name="vector">Vector que se va a normalizar.</param>
      <returns>Valor normalizado.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.One">
      <summary>Obtiene un vector cuyos 4 elementos son iguales a uno.</summary>
      <returns>Devuelva <see cref="T:System.Numerics.Vector4" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Addition(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Suma dos vectores.</summary>
      <param name="left">Primer vector que se va a agregar.</param>
      <param name="right">Segundo vector que se va a agregar.</param>
      <returns>Vector sumado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Divide el primer vector entre el segundo.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <returns>Vector resultante de dividir <paramref name="left" /> entre <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Division(System.Numerics.Vector4,System.Single)">
      <summary>Divide el vector especificado entre un valor escalar especificado.</summary>
      <param name="value1">Vector.</param>
      <param name="value2">Valor escalar.</param>
      <returns>Resultado de la división.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Equality(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Devuelve un valor que indica si cada par de elementos de los dos vectores especificados es igual.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Inequality(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Devuelve un valor que indica si dos vectores especificados no son iguales.</summary>
      <param name="left">Primer vector que se va a comparar.</param>
      <param name="right">Segundo vector que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Devuelve un nuevo vector cuyos valores son el producto de cada par de elementos de dos vectores especificados.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <returns>El vector de producto basado en elemento.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Numerics.Vector4,System.Single)">
      <summary>Multiplica el vector especificado por el valor escalar especificado.</summary>
      <param name="left">Vector.</param>
      <param name="right">Valor escalar.</param>
      <returns>Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Multiply(System.Single,System.Numerics.Vector4)">
      <summary>Multiplica el valor escalar del valor del vector especificado.</summary>
      <param name="left">Vector.</param>
      <param name="right">Valor escalar.</param>
      <returns>Vector escalado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_Subtraction(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Resta el segundo vector del primero.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <returns>Vector resultante de restar <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.op_UnaryNegation(System.Numerics.Vector4)">
      <summary>Convierte en negativo el vector especificado.</summary>
      <param name="value">Vector que se va a convertir en negativo.</param>
      <returns>Vector convertido en negativo.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.SquareRoot(System.Numerics.Vector4)">
      <summary>Devuelve un vector cuyos elementos son la raíz cuadrada de cada uno de los elementos de un vector especificado.</summary>
      <param name="value">Vector.</param>
      <returns>Raíz cuadrada del vector.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Subtract(System.Numerics.Vector4,System.Numerics.Vector4)">
      <summary>Resta el segundo vector del primero.</summary>
      <param name="left">Primer vector.</param>
      <param name="right">Segundo vector.</param>
      <returns>Vector de diferencia.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString">
      <summary>Devuelve la representación de cadena de la instancia actual usando el formato predeterminado.</summary>
      <returns>Representación de cadena de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString(System.String)">
      <summary>Devuelve la representación de cadena de la instancia actual usando la cadena de formato especificado para dar formato a los elementos individuales.</summary>
      <param name="format">Cadena estándar o cadena de formato numérico personalizado que define el formato de elementos individuales.</param>
      <returns>Representación de cadena de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.ToString(System.String,System.IFormatProvider)">
      <summary>Devuelve la representación de cadena de la instancia actual usando la cadena de formato especificado para dar formato a los elementos individuales y el proveedor de formato especificado para definir el formato específico de la referencia cultural.</summary>
      <param name="format">Cadena estándar o cadena de formato numérico personalizado que define el formato de elementos individuales.</param>
      <param name="formatProvider">Proveedor de formato que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Representación de cadena de la instancia actual.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Matrix4x4)">
      <summary>Transforma un vector bidimensional mediante una matriz de 4 x 4 especificada.</summary>
      <param name="position">Vector que se va a transformar.</param>
      <param name="matrix">Matriz de transformación.</param>
      <returns>Valor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector2,System.Numerics.Quaternion)">
      <summary>Transforma un vector bidimensional mediante el valor de rotación del cuaternión especificado.</summary>
      <param name="value">Vector que se va a girar.</param>
      <param name="rotation">Rotación que se va a aplicar.</param>
      <returns>Valor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)">
      <summary>Transforma un vector tridimensional mediante una matriz de 4 x 4 especificada.</summary>
      <param name="position">Vector que se va a transformar.</param>
      <param name="matrix">Matriz de transformación.</param>
      <returns>Valor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)">
      <summary>Transforma un vector tridimensional en el valor de rotación del cuaternión especificado.</summary>
      <param name="value">Vector que se va a girar.</param>
      <param name="rotation">Rotación que se va a aplicar.</param>
      <returns>Valor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Matrix4x4)">
      <summary>Transforma un vector de cuatro dimensiones mediante una matriz de 4 x 4 especificada.</summary>
      <param name="vector">Vector que se va a transformar.</param>
      <param name="matrix">Matriz de transformación.</param>
      <returns>Valor transformado.</returns>
    </member>
    <member name="M:System.Numerics.Vector4.Transform(System.Numerics.Vector4,System.Numerics.Quaternion)">
      <summary>Transforma un vector de cuatro dimensiones mediante el valor de rotación del cuaternión especificado.</summary>
      <param name="value">Vector que se va a girar.</param>
      <param name="rotation">Rotación que se va a aplicar.</param>
      <returns>Valor transformado.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitW">
      <summary>Obtiene el vector (0,0,0,1).</summary>
      <returns>Vector <c>(0,0, 0, 1)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitX">
      <summary>Obtiene el vector (1,0,0,0).</summary>
      <returns>Vector <c>(1,0, 0,0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitY">
      <summary>Obtiene el vector (0,1,0,0).</summary>
      <returns>Vector <c>(0, 1, 0, 0)</c>.</returns>
    </member>
    <member name="P:System.Numerics.Vector4.UnitZ">
      <summary>Obtiene el vector (0,0,1,0).</summary>
      <returns>Vector <c>(0, 0, 1, 0)</c>.</returns>
    </member>
    <member name="F:System.Numerics.Vector4.W">
      <summary>Componente W del vector.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.X">
      <summary>Componente X del vector.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.Y">
      <summary>Componente Y del vector.</summary>
    </member>
    <member name="F:System.Numerics.Vector4.Z">
      <summary>Componente Z del vector.</summary>
    </member>
    <member name="P:System.Numerics.Vector4.Zero">
      <summary>Obtiene un vector cuyos 4 cuyos elementos son iguales a cero.</summary>
      <returns>Vector cuyos cuatro elementos son iguales a cero (es decir, devuelve el vector <c>(0,0</c>, 0,0).</returns>
    </member>
  </members>
</doc>
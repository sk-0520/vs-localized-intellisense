<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Text.RegularExpressions</name>
  </assembly>
  <members>
    <member name="T:System.Text.RegularExpressions.Capture">
      <summary>Representa los resultados de una única captura de subexpresiones correcta.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Index">
      <summary>Posición en la cadena original donde se encuentra el primer carácter de la subcadena capturada.</summary>
      <returns>Posición inicial basada en cero en la cadena original donde se encuentra la subcadena capturada.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Length">
      <summary>Obtiene la longitud de la subcadena capturada.</summary>
      <returns>Longitud de la subcadena capturada.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Capture.ToString">
      <summary>Recupera la subcadena capturada de la cadena de entrada llamando a la propiedad <see cref="P:System.Text.RegularExpressions.Capture.Value" />.</summary>
      <returns>Subcadena capturada por la coincidencia.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Value">
      <summary>Obtiene la subcadena capturada desde la cadena de entrada.</summary>
      <returns>Subcadena capturada por la coincidencia.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.CaptureCollection">
      <summary>Representa el conjunto de capturas realizadas por un único grupo de captura.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copia todos los elementos de la colección en la matriz indicada a partir del índice especificado.</summary>
      <param name="array">Matriz en la que se va a copiar la colección.</param>
      <param name="arrayIndex">Posición de la matriz de destino en que se inicia la copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> está fuera de los límites de <paramref name="array" />.  
o bien 
 <paramref name="arrayIndex" /> más <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" /> está fuera de los límites de <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Text.RegularExpressions.Capture[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Count">
      <summary>Obtiene el número de subcadenas capturadas por el grupo.</summary>
      <returns>Número de elementos en <see cref="T:System.Text.RegularExpressions.CaptureCollection" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.GetEnumerator">
      <summary>Proporciona un enumerador que recorre en iteración la colección.</summary>
      <returns>Objeto que contiene todos los objetos <see cref="T:System.Text.RegularExpressions.Capture" /> de la <see cref="T:System.Text.RegularExpressions.CaptureCollection" />.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsReadOnly">
      <summary>Obtiene un valor que indica si la colección es de solo lectura.</summary>
      <returns>
        <see langword="true" /> en todos los casos.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a la colección está sincronizado (es seguro para la ejecución de subprocesos).</summary>
      <returns>
        <see langword="false" /> en todos los casos.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)">
      <summary>Obtiene un miembro individual de la colección.</summary>
      <param name="i">Índice en la colección de captura.</param>
      <returns>Subcadena capturada en la posición <paramref name="i" /> de la colección.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> es menor que 0 o mayor que <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" />.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.SyncRoot">
      <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso a la colección.</summary>
      <returns>Objeto que se puede utilizar para sincronizar el acceso a la colección.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Add(System.Text.RegularExpressions.Capture)">
      <param name="item" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Clear" />
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Contains(System.Text.RegularExpressions.Capture)">
      <param name="item" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Remove(System.Text.RegularExpressions.Capture)">
      <param name="item" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Capture}#GetEnumerator" />
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#IndexOf(System.Text.RegularExpressions.Capture)">
      <param name="item" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#Insert(System.Int32,System.Text.RegularExpressions.Capture)">
      <param name="index" />
      <param name="item" />
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#Item(System.Int32)">
      <param name="index" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#RemoveAt(System.Int32)">
      <param name="index" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Add(System.Object)">
      <param name="value" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Clear" />
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Contains(System.Object)">
      <param name="value" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#IndexOf(System.Object)">
      <param name="value" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <param name="index" />
      <param name="value" />
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#IsFixedSize" />
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Item(System.Int32)">
      <param name="index" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Remove(System.Object)">
      <param name="value" />
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <param name="index" />
    </member>
    <member name="T:System.Text.RegularExpressions.Group">
      <summary>Representa los resultados de un solo grupo de captura.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Captures">
      <summary>Obtiene una colección de todas las capturas que coinciden con el grupo de captura, en orden empezando por el más interno de la izquierda (o por el más interno de la derecha si se modifica con la opción <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" />). La colección puede tener cero o más elementos.</summary>
      <returns>Colección de subcadenas que coinciden por el grupo.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Name">
      <summary>Devuelve el nombre del grupo de captura que la instancia actual representa.</summary>
      <returns>El nombre del grupo de captura que la instancia actual representa.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Success">
      <summary>Obtiene un valor que indica si la coincidencia ha tenido éxito.</summary>
      <returns>
        <see langword="true" /> si la coincidencia es correcta; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Group.Synchronized(System.Text.RegularExpressions.Group)">
      <summary>Devuelve un objeto <see langword="Group" /> equivalente al suministrado que puede compartirse con seguridad entre varios subprocesos.</summary>
      <param name="inner">Objeto <see cref="T:System.Text.RegularExpressions.Group" /> de salida.</param>
      <returns>Objeto <see langword="Group" /> de expresión regular.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inner" /> es <see langword="null" />.</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.GroupCollection">
      <summary>Devuelve el conjunto de grupos capturados en una única coincidencia.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.ContainsKey(System.String)">
      <summary>Determina si la colección de grupos contiene un grupo capturado identificado mediante el nombre especificado.</summary>
      <param name="key">Cadena con el nombre del grupo capturado que se va a buscar.</param>
      <returns>
        <see langword="true" /> si la colección de grupos contiene un grupo capturado identificado mediante <paramref name="key" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copia todos los elementos de la colección en la matriz indicada a partir del índice especificado.</summary>
      <param name="array">Matriz en la que se va a copiar la colección.</param>
      <param name="arrayIndex">Posición de la matriz de destino donde se inicia la copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es <see langword="null" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> está fuera de los límites de <paramref name="array" />.
O bien
<paramref name="arrayIndex" /> más <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> está fuera de los límites de <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Text.RegularExpressions.Group[],System.Int32)">
      <summary>Copia los elementos de la colección de grupos en una matriz <see cref="System.Text.RegularExpressions.Group[]" />, a partir de un índice de matriz concreto.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados de la colección de grupos. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> es null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> es menor que cero.
O bien
<paramref name="arrayIndex" /> es mayor que la longitud de <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentException">La longitud de <paramref name="array" /> - <paramref name="arrayIndex" /> es menor que el número de colecciones de grupos.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Count">
      <summary>Devuelve el número de grupos de la colección.</summary>
      <returns>Número de grupos de la colección.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator">
      <summary>Proporciona un enumerador que recorre en iteración la colección.</summary>
      <returns>Enumerador que contiene todos los objetos <see cref="T:System.Text.RegularExpressions.Group" /> de la colección <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly">
      <summary>Obtiene un valor que indica si la colección es de solo lectura.</summary>
      <returns>
        <see langword="true" /> en todos los casos.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a <see cref="T:System.Text.RegularExpressions.GroupCollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns>
        <see langword="false" /> en todos los casos.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)">
      <summary>Habilita el acceso a un miembro de la colección por índice de entero.</summary>
      <param name="groupnum">Índice de base cero del miembro de la colección que se va a recuperar.</param>
      <returns>Miembro de la colección especificado por <paramref name="groupnum" />.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)">
      <summary>Habilita el acceso a un miembro de la colección por índice de cadena.</summary>
      <param name="groupname">Nombre de un grupo de captura.</param>
      <returns>Miembro de la colección especificado por <paramref name="groupname" />.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Keys">
      <summary>Obtiene una enumeración de cadena que contiene las claves de nombre de la colección de grupos.</summary>
      <returns>Claves de nombre de la colección de grupos.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.SyncRoot">
      <summary>Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Text.RegularExpressions.GroupCollection" />.</summary>
      <returns>Copia del objeto <see cref="T:System.Text.RegularExpressions.Match" /> que se va a sincronizar.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Add(System.Text.RegularExpressions.Group)">
      <summary>Agrega un elemento <see cref="T:System.Text.RegularExpressions.Group" /> a la colección. Cuando se llama a este método, siempre se produce <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">Grupo que se va a agregar a la colección.</param>
      <exception cref="T:System.NotSupportedException">No se admite este método. Es una colección de solo lectura.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Clear">
      <summary>Borra la colección. Cuando se llama a este método, siempre se produce <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">No se admite este método. Es una colección de solo lectura.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Contains(System.Text.RegularExpressions.Group)">
      <summary>Determina si la colección de grupos contiene un elemento de grupo específico.</summary>
      <param name="item">Grupo que se va a ubicar en la colección de grupos.</param>
      <returns>
        <see langword="true" /> si el elemento de grupo se encuentra en la colección de grupos; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Remove(System.Text.RegularExpressions.Group)">
      <summary>Quita un objeto <see cref="T:System.Text.RegularExpressions.Group" /> de la colección. Cuando se llama a este método, siempre se produce <see cref="T:System.NotSupportedException" />.</summary>
      <param name="item">Grupo que se va a quitar.</param>
      <returns>No se admite este método. No se devuelve ningún valor.</returns>
      <exception cref="T:System.NotSupportedException">No se admite este método. Es una colección de solo lectura.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Text#RegularExpressions#Group}}#GetEnumerator">
      <summary>Proporciona un enumerador que recorre en iteración la colección de grupos.</summary>
      <returns>Enumerador que contiene todos los nombres y objetos de la colección <see cref="T:System.Text.RegularExpressions.Group" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Group}#GetEnumerator">
      <summary>Proporciona un enumerador que recorre en iteración la colección de grupos.</summary>
      <returns>Enumerador que contiene todos los objetos <see cref="T:System.Text.RegularExpressions.Group" /> de la colección de grupos.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#IndexOf(System.Text.RegularExpressions.Group)">
      <summary>Determina el índice de un grupo específico de la colección de grupos.</summary>
      <param name="item">Grupo que se va a ubicar en la colección de grupos.</param>
      <returns>Índice de &lt;paramref. name="item"&gt;&lt;/paramref.&gt; si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Insert(System.Int32,System.Text.RegularExpressions.Group)">
      <summary>Inserta un elemento <see cref="T:System.Text.RegularExpressions.Group" /> en la colección. Cuando se llama a este método, siempre se produce <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index">Posición en la que se van a insertar los grupos.</param>
      <param name="item">Grupo que se va a insertar.</param>
      <exception cref="T:System.NotSupportedException">No se admite este método. Es una colección de solo lectura.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Item(System.Int32)">
      <summary>Obtiene el grupo en la posición especificada de la colección.</summary>
      <param name="index">Índice basado en cero del grupo en la colección de grupos.</param>
      <returns>Grupo en la posición deseada.</returns>
      <exception cref="T:System.NotSupportedException">No se puede establecer un elemento. Es una colección de solo lectura.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#RemoveAt(System.Int32)">
      <summary>Quita el elemento <see cref="T:System.Text.RegularExpressions.Group" /> de la colección en el índice especificado. Cuando se llama a este método, siempre se produce <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index">Índice de base cero del grupo que se va a quitar.</param>
      <exception cref="T:System.NotSupportedException">No se admite este método. Es una colección de solo lectura.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add(System.Object)">
      <summary>Agrega un objeto a la colección de grupos. Cuando se llama a este método, siempre se produce <see cref="T:System.NotSupportedException" />.</summary>
      <param name="value">Objeto que se va a agregar a la colección de grupos.</param>
      <exception cref="T:System.NotSupportedException">No se admite este método. Es una colección de solo lectura.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear">
      <summary>Borra la colección. Cuando se llama a este método, siempre se produce <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">No se admite este método. Es una colección de solo lectura.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determina si la colección de grupos contiene un elemento de grupo específico.</summary>
      <param name="value">Grupo que se va a ubicar en la colección de grupos.</param>
      <returns>
        <see langword="true" /> si el elemento de grupo se encuentra en la colección de grupos; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determina el índice de un grupo específico de la colección de grupos.</summary>
      <param name="value">Grupo que se va a ubicar en la colección de grupos.</param>
      <returns>Índice de &lt;paramref. name="item"&gt;&lt;/paramref.&gt; si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserta un elemento <see cref="T:System.Text.RegularExpressions.Group" /> en la colección. Cuando se llama a este método, siempre se produce <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index">Posición en la que se van a insertar los grupos.</param>
      <param name="value">Grupo que se va a insertar.</param>
      <exception cref="T:System.NotSupportedException">No se admite este método. Es una colección de solo lectura.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize">
      <summary>Obtiene un valor que indica si la colección de grupos tiene un tamaño fijo.</summary>
      <returns>Es siempre <see langword="true" />.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Obtiene el grupo en la posición elegida.</summary>
      <param name="index">Posición del índice basado en cero del grupo en la colección de grupos.</param>
      <returns>Grupo en la posición deseada.</returns>
      <exception cref="T:System.NotSupportedException">No se puede establecer un elemento. Es una colección de solo lectura.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Quita un objeto <see cref="T:System.Text.RegularExpressions.Group" /> de la colección. Cuando se llama a este método, siempre se produce <see cref="T:System.NotSupportedException" />.</summary>
      <param name="value">Grupo que se va a quitar.</param>
      <exception cref="T:System.NotSupportedException">No se admite este método. Es una colección de solo lectura.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Quita el elemento <see cref="T:System.Text.RegularExpressions.Group" /> de la colección en el índice especificado. Cuando se llama a este método, siempre se produce <see cref="T:System.NotSupportedException" />.</summary>
      <param name="index">Índice de base cero del grupo que se va a quitar.</param>
      <exception cref="T:System.NotSupportedException">No se admite este método. Es una colección de solo lectura.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.TryGetValue(System.String,System.Text.RegularExpressions.Group@)">
      <summary>Intenta recuperar un grupo identificado mediante la clave de nombre proporcionada, si existe en la colección de grupos.</summary>
      <param name="key">Cadena con la clave de nombre de grupo que se va a buscar.</param>
      <param name="value">El resultado que devuelve este método indica el grupo cuyo nombre es <paramref name="key" />, si se encuentra; en caso contrario, <see langword="null" />.</param>
      <returns>
        <see langword="true" /> si existe un grupo identificado mediante la clave de nombre proporcionada; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Values">
      <summary>Obtiene una enumeración de grupos con todos los grupos de la colección de grupos.</summary>
      <returns>Enumeración de grupos.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Match">
      <summary>Representa los resultados de una sola coincidencia de expresión regular.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Empty">
      <summary>Obtiene el grupo vacío. Todas las coincidencias erróneas devuelven esta coincidencia vacía.</summary>
      <returns>Una coincidencia vacía.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Groups">
      <summary>Obtiene una colección de grupos que coinciden por la expresión regular.</summary>
      <returns>Los grupos de carácter coinciden por el modelo.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.NextMatch">
      <summary>Devuelve un nuevo objeto <see cref="T:System.Text.RegularExpressions.Match" /> con los resultados de la siguiente coincidencia, empezando en la posición donde finalizó la última (en el carácter siguiente al último que coincidía).</summary>
      <returns>Siguiente coincidencia de expresión regular.</returns>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Result(System.String)">
      <summary>Devuelve la expansión del modelo de reemplazo especificado.</summary>
      <param name="replacement">El modelo de reemplazo que se va a utilizar.</param>
      <returns>La versión expandida del parámetro <paramref name="replacement" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">No se permite la expansión para este modelo.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)">
      <summary>Devuelve una instancia de <see cref="T:System.Text.RegularExpressions.Match" /> equivalente al suministrado que es adecuado para compartirse entre varios subprocesos.</summary>
      <param name="inner">Coincidencia de expresión regular equivalente a la esperada.</param>
      <returns>Coincidencia de expresión regular que se puede compartir entre varios subprocesos.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inner" /> es <see langword="null" />.</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchCollection">
      <summary>Representa el conjunto de coincidencias con éxito encontradas por la solicitud iterada de un modelo de expresión regular en la cadena de entrada.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copia todos los elementos de la colección en la matriz indicada a partir del índice dado.</summary>
      <param name="array">Matriz en la que se va a copiar la colección.</param>
      <param name="arrayIndex">Posición de la matriz donde se inicia la copia.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> es una matriz multidimensional.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> está fuera de los límites de <paramref name="array" />.  
O bien 
 <paramref name="arrayIndex" /> más <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" /> está fuera de los límites de <paramref name="array" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Text.RegularExpressions.Match[],System.Int32)">
      <param name="array" />
      <param name="arrayIndex" />
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Count">
      <summary>Obtiene el número de coincidencias.</summary>
      <returns>Número de coincidencias.</returns>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
      <summary>Proporciona un enumerador que recorre en iteración la colección.</summary>
      <returns>Objeto que contiene todos los objetos <see cref="T:System.Text.RegularExpressions.Match" /> de la <see cref="T:System.Text.RegularExpressions.MatchCollection" />.</returns>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
      <summary>Obtiene un valor que indica si la colección es de solo lectura.</summary>
      <returns>
        <see langword="true" /> en todos los casos.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a la colección está sincronizado (es seguro para la ejecución de subprocesos).</summary>
      <returns>
        <see langword="false" /> en todos los casos.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
      <summary>Obtiene un miembro individual de la colección.</summary>
      <param name="i">Índice de la colección <see cref="T:System.Text.RegularExpressions.Match" />.</param>
      <returns>Subcadena capturada en la posición <paramref name="i" /> de la colección.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> es menor que 0, o mayor o igual a <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
      <summary>Obtiene un objeto que se puede utilizar para sincronizar el acceso a la colección.</summary>
      <returns>Objeto que se puede utilizar para sincronizar el acceso a la colección. Esta propiedad devuelve siempre el propio objeto.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Add(System.Text.RegularExpressions.Match)">
      <param name="item" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Clear" />
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Contains(System.Text.RegularExpressions.Match)">
      <param name="item" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Remove(System.Text.RegularExpressions.Match)">
      <param name="item" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Match}#GetEnumerator" />
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#IndexOf(System.Text.RegularExpressions.Match)">
      <param name="item" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Insert(System.Int32,System.Text.RegularExpressions.Match)">
      <param name="index" />
      <param name="item" />
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Item(System.Int32)">
      <param name="index" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#RemoveAt(System.Int32)">
      <param name="index" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Add(System.Object)">
      <param name="value" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Clear" />
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Contains(System.Object)">
      <param name="value" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IndexOf(System.Object)">
      <param name="value" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <param name="index" />
      <param name="value" />
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IsFixedSize" />
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Item(System.Int32)">
      <param name="index" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Remove(System.Object)">
      <param name="value" />
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <param name="index" />
    </member>
    <member name="T:System.Text.RegularExpressions.MatchEvaluator">
      <summary>Representa el método al que se llama cada vez que se encuentra una coincidencia de expresión regular durante una operación del método <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" />.</summary>
      <param name="match">Objeto <see cref="T:System.Text.RegularExpressions.Match" /> que representa la coincidencia de la expresión regular única durante una operación del método <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" />.</param>
      <returns>Cadena que devuelve el método representado por el delegado <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Regex">
      <summary>Representa una expresión regular inmutable.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.Regex" /> con datos serializados.</summary>
      <param name="info">Objeto que contiene un modelo serializado e información de <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</param>
      <param name="context">Destino de esta serialización. (Este parámetro no se usa; especifique <see langword="null" />).</param>
      <exception cref="T:System.ArgumentException">Se produjo un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">El modelo que contiene <paramref name="info" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="info" /> contiene una marca <see cref="T:System.Text.RegularExpressions.RegexOptions" /> no válida.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.Regex" /> para la expresión regular especificada.</summary>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias.</param>
      <exception cref="T:System.ArgumentException">Se produjo un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.Regex" /> para la expresión regular especificada, con opciones que modifican el modelo.</summary>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias.</param>
      <param name="options">Combinación bit a bit de los valores de enumeración que modifican la expresión regular.</param>
      <exception cref="T:System.ArgumentException">Se produjo un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> contiene una marca no válida.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.Regex" /> para la expresión regular especificada, con las opciones que modifican el modelo y un valor que especifica cuánto tiempo debe intentar un método de coincidencia de modelos una coincidencia antes de que se agote el tiempo de espera.</summary>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias.</param>
      <param name="options">Combinación bit a bit de los valores de enumeración que modifican la expresión regular.</param>
      <param name="matchTimeout">Un intervalo de tiempo de espera, o <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> para indicar que el método no debe agotar el tiempo de espera.</param>
      <exception cref="T:System.ArgumentException">Se produjo un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es un valor <see cref="T:System.Text.RegularExpressions.RegexOptions" /> válido.  
O bien 
 <paramref name="matchTimeout" /> es negativo, cero o mayor que 24 días aproximadamente.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CacheSize">
      <summary>Obtiene o establece el número máximo de entradas en la memoria caché estática actual de expresiones regulares compiladas.</summary>
      <returns>Número máximo de entradas en la memoria caché estática.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">El valor de una operación Set es menor que cero.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capnames">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CapNames">
      <summary>Obtiene o establece un diccionario que asigna grupos de captura denominados con sus valores de índice.</summary>
      <returns>Diccionario que asigna grupos de captura denominados con sus valores de índice.</returns>
      <exception cref="T:System.ArgumentNullException">El valor asignado a la propiedad <see cref="P:System.Text.RegularExpressions.Regex.CapNames" /> en una operación set es <see langword="null" />.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.caps">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Caps">
      <summary>Obtiene o establece un diccionario que asigna grupos de captura numerados con sus valores de índice.</summary>
      <returns>Diccionario que asigna grupos de captura numerados con sus valores de índice.</returns>
      <exception cref="T:System.ArgumentNullException">El valor asignado a la propiedad <see cref="P:System.Text.RegularExpressions.Regex.Caps" /> en una operación set es <see langword="null" />.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capsize">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capslist">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)">
      <summary>Compila uno o varios objetos <see cref="T:System.Text.RegularExpressions.Regex" /> especificados en un ensamblado con nombre.</summary>
      <param name="regexinfos">Matriz que describe las expresiones regulares que se van a compilar.</param>
      <param name="assemblyname">El nombre de archivo del ensamblado.</param>
      <exception cref="T:System.ArgumentException">El valor de la propiedad <see cref="P:System.Reflection.AssemblyName.Name" /> del parámetro <paramref name="assemblyname" /> es una cadena vacía o NULL.  
o bien 
El modelo de expresión regular de uno o varios objetos de <paramref name="regexinfos" /> contiene una sintaxis no válida.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyname" /> o <paramref name="regexinfos" /> es <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Solo .NET Core: No se admite la creación de un ensamblado de expresiones regulares compiladas.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[])">
      <summary>Compila uno o varios objetos <see cref="T:System.Text.RegularExpressions.Regex" /> especificados en un ensamblado con nombre que tiene los atributos especificados.</summary>
      <param name="regexinfos">Matriz que describe las expresiones regulares que se van a compilar.</param>
      <param name="assemblyname">El nombre de archivo del ensamblado.</param>
      <param name="attributes">Matriz que define los atributos que se van a aplicar al ensamblado.</param>
      <exception cref="T:System.ArgumentException">El valor de la propiedad <see cref="P:System.Reflection.AssemblyName.Name" /> del parámetro <paramref name="assemblyname" /> es una cadena vacía o NULL.  
O bien 
El modelo de expresión regular de uno o varios objetos de <paramref name="regexinfos" /> contiene una sintaxis no válida.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyname" /> o <paramref name="regexinfos" /> es <see langword="null" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Solo .NET Core: No se admite la creación de un ensamblado de expresiones regulares compiladas.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[],System.String)">
      <summary>Compila uno o varios objetos <see cref="T:System.Text.RegularExpressions.Regex" /> especificados y un archivo de recursos especificado en un ensamblado con nombre que tiene los atributos indicados.</summary>
      <param name="regexinfos">Matriz que describe las expresiones regulares que se van a compilar.</param>
      <param name="assemblyname">El nombre de archivo del ensamblado.</param>
      <param name="attributes">Matriz que define los atributos que se van a aplicar al ensamblado.</param>
      <param name="resourceFile">Nombre del archivo de recursos Win32 que se va a incluir en el ensamblado.</param>
      <exception cref="T:System.ArgumentException">El valor de la propiedad <see cref="P:System.Reflection.AssemblyName.Name" /> del parámetro <paramref name="assemblyname" /> es una cadena vacía o NULL.  
O bien 
El modelo de expresión regular de uno o varios objetos de <paramref name="regexinfos" /> contiene una sintaxis no válida.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyname" /> o <paramref name="regexinfos" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">El parámetro <paramref name="resourceFile" /> designa un archivo de recursos de Win32 no válido.</exception>
      <exception cref="T:System.IO.FileNotFoundException">No se pudo encontrar el archivo designado por el parámetro <paramref name="resourceFile" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Solo .NET Core: No se admite la creación de un ensamblado de expresiones regulares compiladas.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Escape(System.String)">
      <summary>Convierte en caracteres de escape un juego mínimo de caracteres (\, *, +, ?, |, {, [, (,), ^, $,., # y espacio en blanco) al reemplazarlos con sus códigos de escape. Esto indica al motor de expresiones regulares que interprete los caracteres literalmente en lugar de como metacaracteres.</summary>
      <param name="str">Cadena de entrada que contiene el texto que se va a convertir.</param>
      <returns>Cadena de caracteres con metacaracteres convertidos a su forma de escape.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> es <see langword="null" />.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.factory">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNames">
      <summary>Devuelve una matriz de nombres de grupo de captura para la expresión regular.</summary>
      <returns>Matriz de cadenas de nombres de grupo.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNumbers">
      <summary>Devuelve una matriz de números de grupo de captura que corresponde a los nombres de grupo en una matriz.</summary>
      <returns>Matriz de enteros de números de grupo.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)">
      <summary>Obtiene el nombre de grupo que corresponde al número de grupo especificado.</summary>
      <param name="i">Número de grupo para convertir al nombre de grupo correspondiente.</param>
      <returns>Cadena que contiene el nombre de grupo asociado al número de grupo especificado. Si no hay un nombre de grupo que se corresponda con <paramref name="i" />, el método devuelve <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)">
      <summary>Devuelve el número de grupo que corresponde al nombre de grupo especificado.</summary>
      <param name="name">Nombre de grupo para convertir al número de grupo correspondiente.</param>
      <returns>Número del grupo que corresponde al nombre de grupo especificado o -1 si <paramref name="name" /> no es un nombre de grupo válido.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> es <see langword="null" />.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout">
      <summary>Especifica que una operación de coincidencia de patrones no debe superar el tiempo de espera.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.InitializeReferences">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
      <exception cref="T:System.NotSupportedException">Ya se han inicializado las referencias.</exception>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.internalMatchTimeout">
      <summary>Tiempo máximo que puede transcurrir en una operación de coincidencia de patrones antes de que se agote el tiempo de espera de la operación.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)">
      <summary>Indica si la expresión regular especificada en el constructor <see cref="T:System.Text.RegularExpressions.Regex" /> encuentra una coincidencia en una cadena de entrada indicada.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <returns>
        <see langword="true" /> si la expresión regular encuentra una coincidencia; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)">
      <summary>Indica si la expresión regular especificada en el constructor <see cref="T:System.Text.RegularExpressions.Regex" /> encuentra una coincidencia en la cadena de entrada especificada, empezando en la posición inicial indicada en la cadena.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="startat">Posición de carácter en la que se va a iniciar la búsqueda.</param>
      <returns>
        <see langword="true" /> si la expresión regular encuentra una coincidencia; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> es menor que cero o mayor que la longitud de <paramref name="input" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)">
      <summary>Indica si la expresión regular especificada busca una coincidencia en la cadena de entrada indicada.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias.</param>
      <returns>
        <see langword="true" /> si la expresión regular encuentra una coincidencia; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">Se produjo un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="input" /> o <paramref name="pattern" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Indica si la expresión regular especificada encuentra una coincidencia en la cadena de entrada indicada, utilizando para ello las opciones de coincidencia especificadas.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias.</param>
      <param name="options">Combinación bit a bit de los valores de enumeración que proporcionan opciones de coincidencia.</param>
      <returns>
        <see langword="true" /> si la expresión regular encuentra una coincidencia; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">Se produjo un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="input" /> o <paramref name="pattern" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es un valor <see cref="T:System.Text.RegularExpressions.RegexOptions" /> válido.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Indica si la expresión regular especificada encuentra una coincidencia en la cadena de entrada indicada, utilizando para ello las opciones de coincidencia y el intervalo de tiempo de espera que se especifiquen.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias.</param>
      <param name="options">Combinación bit a bit de los valores de enumeración que proporcionan opciones de coincidencia.</param>
      <param name="matchTimeout">Un intervalo de tiempo de espera, o <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> para indicar que el método no debe agotar el tiempo de espera.</param>
      <returns>
        <see langword="true" /> si la expresión regular encuentra una coincidencia; en caso contrario, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentException">Se produjo un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="input" /> o <paramref name="pattern" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es un valor <see cref="T:System.Text.RegularExpressions.RegexOptions" /> válido.  
o bien 
 <paramref name="matchTimeout" /> es negativo, cero o mayor que 24 días aproximadamente.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String)">
      <summary>Busca en la cadena de entrada especificada la primera aparición de la expresión regular especificada en el constructor <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <returns>Objeto que contiene información sobre la coincidencia.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)">
      <summary>Busca en la cadena de entrada la primera aparición de una expresión regular, empezando en la posición inicial especificada de la cadena.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="startat">Posición de carácter basada en cero en la que se va a iniciar la búsqueda.</param>
      <returns>Objeto que contiene información sobre la coincidencia.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> es menor que cero o mayor que la longitud de <paramref name="input" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)">
      <summary>Busca en la cadena de entrada la primera aparición de una expresión regular, empezando en la posición inicial especificada y buscando solo en el número de caracteres indicado.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="beginning">Posición de caracteres de base cero en la cadena de entrada que define la posición más a la izquierda en la que se buscará.</param>
      <param name="length">Número de caracteres de la subcadena que se van a incluir en la búsqueda.</param>
      <returns>Objeto que contiene información sobre la coincidencia.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="beginning" /> es menor que cero o mayor que la longitud de <paramref name="input" />.  
o bien 
 <paramref name="length" /> es menor que cero o mayor que la longitud de <paramref name="input" />.  
O bien 
 <paramref name="beginning" /><see langword="+" /><paramref name="length" /><see langword="-1" /> identifica una posición que está fuera del intervalo de <paramref name="input" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)">
      <summary>Busca en la cadena de entrada especificada la primera aparición de la expresión regular indicada.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias.</param>
      <returns>Objeto que contiene información sobre la coincidencia.</returns>
      <exception cref="T:System.ArgumentException">Se produjo un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="input" /> o <paramref name="pattern" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Busca en la cadena de entrada la primera aparición de la expresión regular especificada, utilizando para ello las opciones de coincidencia indicadas.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias.</param>
      <param name="options">Combinación bit a bit de los valores de enumeración que proporcionan opciones de coincidencia.</param>
      <returns>Objeto que contiene información sobre la coincidencia.</returns>
      <exception cref="T:System.ArgumentException">Se produjo un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="input" /> o <paramref name="pattern" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es una combinación bit a bit válida de valores <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Busca en la cadena de entrada la primera aparición de la expresión regular especificada, utilizando para ello las opciones de coincidencia y el intervalo de tiempo de espera que se indiquen.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias.</param>
      <param name="options">Combinación bit a bit de los valores de enumeración que proporcionan opciones de coincidencia.</param>
      <param name="matchTimeout">Un intervalo de tiempo de espera, o <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> para indicar que el método no debe agotar el tiempo de espera.</param>
      <returns>Objeto que contiene información sobre la coincidencia.</returns>
      <exception cref="T:System.ArgumentException">Se produjo un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="input" /> o <paramref name="pattern" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es una combinación bit a bit válida de valores <see cref="T:System.Text.RegularExpressions.RegexOptions" /> .  
o bien 
 <paramref name="matchTimeout" /> es negativo, cero o mayor que 24 días aproximadamente.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó un tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String)">
      <summary>Busca en la cadena de entrada especificada todas las apariciones de una expresión regular.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <returns>Colección de los objetos <see cref="T:System.Text.RegularExpressions.Match" /> encontrados en la búsqueda. Si no se encuentran coincidencias, el método devuelve un objeto de colección vacía.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)">
      <summary>Busca en la cadena de entrada especificada todas las apariciones de una expresión regular, empezando en la posición de inicio especificada de la cadena.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="startat">Posición de carácter de la cadena de entrada en la que se va a iniciar la búsqueda.</param>
      <returns>Colección de los objetos <see cref="T:System.Text.RegularExpressions.Match" /> encontrados en la búsqueda. Si no se encuentran coincidencias, el método devuelve un objeto de colección vacía.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> es menor que cero o mayor que la longitud de <paramref name="input" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)">
      <summary>Busca en la cadena de entrada especificada todas las apariciones de una expresión regular indicada.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias.</param>
      <returns>Colección de los objetos <see cref="T:System.Text.RegularExpressions.Match" /> encontrados en la búsqueda. Si no se encuentran coincidencias, el método devuelve un objeto de colección vacía.</returns>
      <exception cref="T:System.ArgumentException">Se produjo un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> o <paramref name="pattern" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Busca en la cadena de entrada especificada todas las apariciones de una expresión regular indicada, utilizando para ello las opciones de coincidencia especificadas.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias.</param>
      <param name="options">Combinación bit a bit de los valores de enumeración que especifican opciones de coincidencia.</param>
      <returns>Colección de los objetos <see cref="T:System.Text.RegularExpressions.Match" /> encontrados en la búsqueda. Si no se encuentran coincidencias, el método devuelve un objeto de colección vacía.</returns>
      <exception cref="T:System.ArgumentException">Se produjo un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="input" /> o <paramref name="pattern" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es una combinación bit a bit válida de valores <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Busca en la cadena de entrada especificada todas las apariciones de una expresión regular indicada, utilizando para ello las opciones de coincidencia y el intervalo de tiempo de espera que se especifiquen.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias.</param>
      <param name="options">Combinación bit a bit de los valores de enumeración que especifican opciones de coincidencia.</param>
      <param name="matchTimeout">Un intervalo de tiempo de espera, o <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> para indicar que el método no debe agotar el tiempo de espera.</param>
      <returns>Colección de los objetos <see cref="T:System.Text.RegularExpressions.Match" /> encontrados en la búsqueda. Si no se encuentran coincidencias, el método devuelve un objeto de colección vacía.</returns>
      <exception cref="T:System.ArgumentException">Se produjo un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="input" /> o <paramref name="pattern" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es una combinación bit a bit válida de valores <see cref="T:System.Text.RegularExpressions.RegexOptions" /> .  
o bien 
 <paramref name="matchTimeout" /> es negativo, cero o mayor que 24 días aproximadamente.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.MatchTimeout">
      <summary>Obtiene el intervalo de tiempo de espera de la instancia actual.</summary>
      <returns>Intervalo de tiempo máximo que puede transcurrir en una operación de coincidencia de modelos antes de que se produzca una <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> o <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> si se deshabilitan los tiempos de espera.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Options">
      <summary>Obtiene las opciones que se pasaron en el constructor <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
      <returns>Uno o más miembros de la enumeración <see cref="T:System.Text.RegularExpressions.RegexOptions" /> que representan opciones pasadas al constructor de <see cref="T:System.Text.RegularExpressions.Regex" /></returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.pattern">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)">
      <summary>En una cadena de entrada especificada, reemplaza todas las cadenas que coinciden con un patrón de expresión regular por una cadena de reemplazo especificada.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="replacement">La cadena de reemplazo.</param>
      <returns>Cadena nueva que es idéntica a la cadena de entrada, salvo que la cadena de reemplazo ocupa el lugar de cada cadena coincidente. Si no se encuentran coincidencias del patrón de expresión regular en la instancia actual, el método devuelve la instancia sin modificar.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> o <paramref name="replacement" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)">
      <summary>En una cadena de entrada especificada, reemplaza un número máximo indicado de cadenas que coinciden con un patrón de expresión regular por una cadena de reemplazo especificada.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="replacement">La cadena de reemplazo.</param>
      <param name="count">Número máximo de veces que puede producirse el reemplazo.</param>
      <returns>Cadena nueva que es idéntica a la cadena de entrada, salvo que la cadena de reemplazo ocupa el lugar de cada cadena coincidente. Si no se encuentran coincidencias del patrón de expresión regular en la instancia actual, el método devuelve la instancia sin modificar.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> o <paramref name="replacement" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>En una subcadena de entrada especificada, reemplaza un número máximo especificado de cadenas que coinciden con un patrón de expresión regular por una cadena de reemplazo especificada.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="replacement">La cadena de reemplazo.</param>
      <param name="count">Número máximo de veces que puede producirse el reemplazo.</param>
      <param name="startat">Posición del carácter en la cadena de entrada donde comienza la búsqueda.</param>
      <returns>Cadena nueva que es idéntica a la cadena de entrada, salvo que la cadena de reemplazo ocupa el lugar de cada cadena coincidente. Si no se encuentran coincidencias del patrón de expresión regular en la instancia actual, el método devuelve la instancia sin modificar.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> o <paramref name="replacement" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> es menor que cero o mayor que la longitud de <paramref name="input" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">
      <summary>En una cadena de entrada especificada, reemplaza todas las cadenas que coinciden con una expresión regular concreta por la cadena de reemplazo indicada.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias.</param>
      <param name="replacement">La cadena de reemplazo.</param>
      <returns>Cadena nueva que es idéntica a la cadena de entrada, salvo que la cadena de reemplazo ocupa el lugar de cada cadena coincidente. Si <paramref name="pattern" /> no coincide con la instancia actual, el método devuelve la instancia actual sin modificar.</returns>
      <exception cref="T:System.ArgumentException">Se produjo un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> o <paramref name="replacement" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>En una cadena de entrada especificada, reemplaza todas las cadenas que coinciden con una expresión regular concreta por la cadena de reemplazo indicada. Las opciones especificadas modifican la operación de coincidencia.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias.</param>
      <param name="replacement">La cadena de reemplazo.</param>
      <param name="options">Combinación bit a bit de los valores de enumeración que proporcionan opciones de coincidencia.</param>
      <returns>Cadena nueva que es idéntica a la cadena de entrada, salvo que la cadena de reemplazo ocupa el lugar de cada cadena coincidente. Si <paramref name="pattern" /> no coincide con la instancia actual, el método devuelve la instancia actual sin modificar.</returns>
      <exception cref="T:System.ArgumentException">Se produjo un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> o <paramref name="replacement" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es una combinación bit a bit válida de valores <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>En una cadena de entrada especificada, reemplaza todas las cadenas que coinciden con una expresión regular concreta por la cadena de reemplazo indicada. Los parámetros adicionales especifican las opciones que modifican la operación de coincidencia y un intervalo de tiempo de espera si no se encuentra ninguna coincidencia.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias.</param>
      <param name="replacement">La cadena de reemplazo.</param>
      <param name="options">Combinación bit a bit de los valores de enumeración que proporcionan opciones de coincidencia.</param>
      <param name="matchTimeout">Un intervalo de tiempo de espera, o <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> para indicar que el método no debe agotar el tiempo de espera.</param>
      <returns>Cadena nueva que es idéntica a la cadena de entrada, salvo que la cadena de reemplazo ocupa el lugar de cada cadena coincidente. Si <paramref name="pattern" /> no coincide con la instancia actual, el método devuelve la instancia actual sin modificar.</returns>
      <exception cref="T:System.ArgumentException">Se produjo un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> o <paramref name="replacement" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es una combinación bit a bit válida de valores <see cref="T:System.Text.RegularExpressions.RegexOptions" />.  
o bien 
 <paramref name="matchTimeout" /> es negativo, cero o mayor que 24 días aproximadamente.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó un tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>En una cadena de entrada especificada, reemplaza todas las cadenas que coinciden con una expresión regular especificada por una cadena devuelta por un delegado <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias.</param>
      <param name="evaluator">Un método personalizado que examina cada coincidencia y devuelve la cadena coincidente original o una cadena de reemplazo.</param>
      <returns>Cadena nueva que es idéntica a la cadena de entrada, salvo que una cadena de reemplazo ocupa el lugar de cada cadena coincidente. Si <paramref name="pattern" /> no coincide con la instancia actual, el método devuelve la instancia actual sin modificar.</returns>
      <exception cref="T:System.ArgumentException">Se produjo un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> o <paramref name="evaluator" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
      <summary>En una cadena de entrada especificada, reemplaza todas las cadenas que coinciden con una expresión regular especificada por una cadena devuelta por un delegado <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />. Las opciones especificadas modifican la operación de coincidencia.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias.</param>
      <param name="evaluator">Un método personalizado que examina cada coincidencia y devuelve la cadena coincidente original o una cadena de reemplazo.</param>
      <param name="options">Combinación bit a bit de los valores de enumeración que proporcionan opciones de coincidencia.</param>
      <returns>Cadena nueva que es idéntica a la cadena de entrada, salvo que una cadena de reemplazo ocupa el lugar de cada cadena coincidente. Si <paramref name="pattern" /> no coincide con la instancia actual, el método devuelve la instancia actual sin modificar.</returns>
      <exception cref="T:System.ArgumentException">Se produjo un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> o <paramref name="evaluator" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es una combinación bit a bit válida de valores <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>En una cadena de entrada especificada, reemplaza todas las subcadenas que coinciden con una expresión regular especificada por una cadena devuelta por un delegado <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />. Los parámetros adicionales especifican las opciones que modifican la operación de coincidencia y un intervalo de tiempo de espera si no se encuentra ninguna coincidencia.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias.</param>
      <param name="evaluator">Un método personalizado que examina cada coincidencia y devuelve la cadena coincidente original o una cadena de reemplazo.</param>
      <param name="options">Combinación bit a bit de los valores de la enumeración que proporcionan opciones de coincidencia.</param>
      <param name="matchTimeout">Un intervalo de tiempo de espera, o <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> para indicar que el método no debe agotar el tiempo de espera.</param>
      <returns>Cadena nueva que es idéntica a la cadena de entrada, salvo que la cadena de reemplazo ocupa el lugar de cada cadena coincidente. Si <paramref name="pattern" /> no coincide con la instancia actual, el método devuelve la instancia actual sin modificar.</returns>
      <exception cref="T:System.ArgumentException">Se produjo un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="pattern" /> o <paramref name="evaluator" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es una combinación bit a bit válida de valores <see cref="T:System.Text.RegularExpressions.RegexOptions" />.  
o bien 
 <paramref name="matchTimeout" /> es negativo, cero o mayor que 24 días aproximadamente.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó un tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>En una cadena de entrada especificada, reemplaza todas las cadenas que coinciden con una expresión regular especificada por una cadena devuelta por un delegado <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="evaluator">Un método personalizado que examina cada coincidencia y devuelve la cadena coincidente original o una cadena de reemplazo.</param>
      <returns>Cadena nueva que es idéntica a la cadena de entrada, salvo que una cadena de reemplazo ocupa el lugar de cada cadena coincidente. Si no se encuentran coincidencias del patrón de expresión regular en la instancia actual, el método devuelve la instancia sin modificar.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> o <paramref name="evaluator" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)">
      <summary>En una cadena de entrada especificada, reemplaza un número máximo especificado de cadenas que coinciden con un modelo de expresión regular por una cadena devuelta por un delegado <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="evaluator">Un método personalizado que examina cada coincidencia y devuelve la cadena coincidente original o una cadena de reemplazo.</param>
      <param name="count">Número máximo de veces que se llevará a cabo el reemplazo.</param>
      <returns>Cadena nueva que es idéntica a la cadena de entrada, salvo que una cadena de reemplazo ocupa el lugar de cada cadena coincidente. Si no se encuentran coincidencias del patrón de expresión regular en la instancia actual, el método devuelve la instancia sin modificar.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> o <paramref name="evaluator" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)">
      <summary>En una subcadena de entrada especificada, reemplaza un número máximo especificado de cadenas que coinciden con un modelo de expresión regular por una cadena devuelta por un delegado <see cref="T:System.Text.RegularExpressions.MatchEvaluator" />.</summary>
      <param name="input">Cadena en la que se va a buscar una coincidencia.</param>
      <param name="evaluator">Un método personalizado que examina cada coincidencia y devuelve la cadena coincidente original o una cadena de reemplazo.</param>
      <param name="count">Número máximo de veces que se llevará a cabo el reemplazo.</param>
      <param name="startat">Posición del carácter en la cadena de entrada donde comienza la búsqueda.</param>
      <returns>Cadena nueva que es idéntica a la cadena de entrada, salvo que una cadena de reemplazo ocupa el lugar de cada cadena coincidente. Si no se encuentran coincidencias del patrón de expresión regular en la instancia actual, el método devuelve la instancia sin modificar.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> o <paramref name="evaluator" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> es menor que cero o mayor que la longitud de <paramref name="input" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.RightToLeft">
      <summary>Obtiene un valor que indica si la expresión regular busca de derecha a izquierda.</summary>
      <returns>
        <see langword="true" /> si la expresión regular busca de derecha a izquierda; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.roptions">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String)">
      <summary>Divide una cadena de entrada en una matriz de subcadenas en las posiciones definidas por un modelo de expresión regular especificado en el constructor <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
      <param name="input">Cadena que se va a dividir.</param>
      <returns>Matriz de cadenas.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)">
      <summary>Divide una cadena de entrada por un número máximo especificado de veces en una matriz de subcadenas, en las posiciones definidas por una expresión regular especificada en el constructor <see cref="T:System.Text.RegularExpressions.Regex" />.</summary>
      <param name="input">Cadena que se va a dividir.</param>
      <param name="count">Número máximo de veces que puede llevarse a cabo la división.</param>
      <returns>Matriz de cadenas.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)">
      <summary>Divide una cadena de entrada por un número máximo especificado de veces en una matriz de subcadenas, en las posiciones definidas por una expresión regular especificada en el constructor <see cref="T:System.Text.RegularExpressions.Regex" />. La búsqueda del patrón de expresión regular se inicia en la posición de carácter especificada de la cadena de entrada.</summary>
      <param name="input">Cadena que se va a dividir.</param>
      <param name="count">Número máximo de veces que puede llevarse a cabo la división.</param>
      <param name="startat">Posición de carácter de la cadena de entrada donde comenzará la búsqueda.</param>
      <returns>Matriz de cadenas.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> es menor que cero o mayor que la longitud de <paramref name="input" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)">
      <summary>Divide una cadena de entrada en una matriz de subcadenas en las posiciones definidas por un patrón de expresión regular.</summary>
      <param name="input">Cadena que se va a dividir.</param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias.</param>
      <returns>Matriz de cadenas.</returns>
      <exception cref="T:System.ArgumentException">Se produjo un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="input" /> o <paramref name="pattern" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>Divide una cadena de entrada en una matriz de subcadenas en las posiciones definidas por un patrón de expresión regular especificado. Las opciones especificadas modifican la operación de coincidencia.</summary>
      <param name="input">Cadena que se va a dividir.</param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias.</param>
      <param name="options">Combinación bit a bit de los valores de enumeración que proporcionan opciones de coincidencia.</param>
      <returns>Matriz de cadenas.</returns>
      <exception cref="T:System.ArgumentException">Se produjo un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="input" /> o <paramref name="pattern" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es una combinación bit a bit válida de valores <see cref="T:System.Text.RegularExpressions.RegexOptions" />.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó el tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>Divide una cadena de entrada en una matriz de subcadenas en las posiciones definidas por un patrón de expresión regular especificado. Los parámetros adicionales especifican las opciones que modifican la operación de coincidencia y un intervalo de tiempo de espera si no se encuentra ninguna coincidencia.</summary>
      <param name="input">Cadena que se va a dividir.</param>
      <param name="pattern">Patrón de expresión regular del que van a buscarse coincidencias.</param>
      <param name="options">Combinación bit a bit de los valores de enumeración que proporcionan opciones de coincidencia.</param>
      <param name="matchTimeout">Un intervalo de tiempo de espera, o <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> para indicar que el método no debe agotar el tiempo de espera.</param>
      <returns>Matriz de cadenas.</returns>
      <exception cref="T:System.ArgumentException">Se produjo un error de análisis de expresión regular.</exception>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="input" /> o <paramref name="pattern" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> no es una combinación bit a bit válida de valores <see cref="T:System.Text.RegularExpressions.RegexOptions" /> .  
o bien 
 <paramref name="matchTimeout" /> es negativo, cero o mayor que 24 días aproximadamente.</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">Se agotó un tiempo de espera. Para más información sobre los tiempos de espera, vea la sección Comentarios.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Rellena un objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con los datos necesarios para deserializar el objeto <see cref="T:System.Text.RegularExpressions.Regex" /> actual.</summary>
      <param name="si">Objeto que se va a rellenar con información de serialización.</param>
      <param name="context">Sitio para almacenar y recuperar los datos serializados. Este parámetro está reservado para un uso futuro.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ToString">
      <summary>Devuelve el modelo de expresión regular que se pasó al constructor <see langword="Regex" />.</summary>
      <returns>Parámetro <paramref name="pattern" /> que se pasó al constructor <see langword="Regex" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Unescape(System.String)">
      <summary>Convierte los caracteres de escape de la cadena de entrada.</summary>
      <param name="str">Cadena de entrada que contiene el texto que se desea convertir.</param>
      <returns>Cadena de caracteres con caracteres de escape convertidos a su forma sin escape.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="str" /> incluye una secuencia de escape desconocida.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionC">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
      <returns>Es <see langword="true" /> si la propiedad <see cref="P:System.Text.RegularExpressions.Regex.Options" /> contiene la opción <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionR">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
      <returns>Es <see langword="true" /> si la propiedad <see cref="P:System.Text.RegularExpressions.Regex.Options" /> contiene la opción <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)">
      <summary>Comprueba si un intervalo de tiempo de espera está dentro del intervalo permitido.</summary>
      <param name="matchTimeout">Intervalo de tiempo de espera que se va a comprobar.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El tiempo de espera especificado no está dentro del intervalo válido.</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexCompilationInfo">
      <summary>Proporciona información sobre una expresión regular que se usa para compilar una expresión regular en un ensamblado independiente.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> que contiene información sobre una expresión regular que se va a incluir en un ensamblado.</summary>
      <param name="pattern">Expresión regular que se va a compilar.</param>
      <param name="options">Opciones de la expresión regular que se van a usar al compilar la expresión regular.</param>
      <param name="name">Nombre del tipo que representa la expresión regular compilada.</param>
      <param name="fullnamespace">Espacio de nombres al que pertenece el nuevo tipo.</param>
      <param name="ispublic">
        <see langword="true" /> para hacer públicamente visible la expresión regular compilada; en caso contrario, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> es <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> es <see langword="null" />.  
o bien 
 <paramref name="name" /> es <see langword="null" />.  
o bien 
 <paramref name="fullnamespace" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> que contiene información sobre una expresión regular con un valor de tiempo de espera especificado que se va a incluir en un ensamblado.</summary>
      <param name="pattern">Expresión regular que se va a compilar.</param>
      <param name="options">Opciones de la expresión regular que se van a usar al compilar la expresión regular.</param>
      <param name="name">Nombre del tipo que representa la expresión regular compilada.</param>
      <param name="fullnamespace">Espacio de nombres al que pertenece el nuevo tipo.</param>
      <param name="ispublic">
        <see langword="true" /> para hacer públicamente visible la expresión regular compilada; en caso contrario, <see langword="false" />.</param>
      <param name="matchTimeout">Intervalo de tiempo de espera predeterminado para la expresión regular.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> es <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> es <see langword="null" />.  
o bien 
 <paramref name="name" /> es <see langword="null" />.  
O bien 
 <paramref name="fullnamespace" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="matchTimeout" /> es negativo, cero o mayor que 24 días aproximadamente.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic">
      <summary>Obtiene o establece un valor que indica si la expresión regular compilada tiene visibilidad pública.</summary>
      <returns>
        <see langword="true" /> si la expresión regular tiene visibilidad pública; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout">
      <summary>Obtiene o establece el intervalo de tiempo de espera predeterminado de la expresión regular.</summary>
      <returns>Intervalo de tiempo máximo predeterminado que puede transcurrir en una operación de coincidencia de modelos antes de que se produzca una <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> o <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> si se deshabilitan los tiempos de espera.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Name">
      <summary>Obtiene o establece el nombre del tipo que representa la expresión regular compilada.</summary>
      <returns>Nombre del nuevo tipo.</returns>
      <exception cref="T:System.ArgumentNullException">El valor de esta propiedad es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">El valor de esta propiedad es una cadena vacía.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Namespace">
      <summary>Obtiene o establece el espacio de nombres al que pertenece el nuevo tipo.</summary>
      <returns>Espacio de nombres del nuevo tipo.</returns>
      <exception cref="T:System.ArgumentNullException">El valor de esta propiedad es <see langword="null" />.</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Options">
      <summary>Obtiene o establece las opciones que se van a usar al compilar la expresión regular.</summary>
      <returns>Combinación bit a bit de los valores de la enumeración.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Pattern">
      <summary>Obtiene o establece la expresión regular que se va a compilar.</summary>
      <returns>Expresión regular que se va a compilar.</returns>
      <exception cref="T:System.ArgumentNullException">El valor de esta propiedad es <see langword="null" />.</exception>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
      <summary>Excepción que se produce cuando el tiempo de ejecución de un método de coincidencia de expresión regular supera su intervalo de tiempo de espera.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> con un mensaje proporcionado por el sistema.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> con datos serializados.</summary>
      <param name="info">Objeto que contiene los datos serializados.</param>
      <param name="context">Secuencia que contiene los datos serializados.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> con la cadena de mensaje especificada.</summary>
      <param name="message">Cadena que describe la excepción.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> con el mensaje de error especificado y una referencia a la excepción interna que representa la causa de esta excepción.</summary>
      <param name="message">Cadena que describe la excepción.</param>
      <param name="inner">Excepción que es la causa de la excepción actual.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.String,System.TimeSpan)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> con información sobre el modelo de expresión regular, el texto de entrada y el intervalo de tiempo de espera.</summary>
      <param name="regexInput">Texto de entrada procesado por el motor de expresiones regulares cuando se supera el tiempo de espera.</param>
      <param name="regexPattern">El modelo usado por el motor de expresiones regulares cuando se agota el tiempo de espera.</param>
      <param name="matchTimeout">El intervalo de tiempo de espera.</param>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Input">
      <summary>Obtiene el texto de entrada que el motor de expresiones regulares estaba procesando cuando se agotó el tiempo de espera.</summary>
      <returns>El texto de entrada de la expresión regular.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout">
      <summary>Obtiene el intervalo de tiempo de espera para una coincidencia de expresión regular.</summary>
      <returns>El intervalo de tiempo de espera.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Pattern">
      <summary>Obtiene el modelo de expresión regular usado en la operación coincidente cuando se agotó el tiempo de espera.</summary>
      <returns>El modelo de expresión regular.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Rellena un objeto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con los datos necesarios para serializar un objeto <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />.</summary>
      <param name="si">Objeto que se va a rellenar con datos.</param>
      <param name="context">Destino de esta serialización.</param>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexOptions">
      <summary>Proporciona valores enumerados que se pueden utilizar para establecer las opciones de expresión regular.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Compiled">
      <summary>Especifica que la expresión regular esté compilada en un ensamblado. Esto proporciona una ejecución más veloz pero incrementa el tiempo de inicio. Este valor no debe asignarse a la propiedad <see cref="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" /> al llamar al método <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" />. Para más información, vea la sección "Expresiones regulares compiladas" que encontrará en el tema Opciones de expresiones regulares.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant">
      <summary>Especifica que las diferencias culturales de idioma se pasan por alto. Para más información, vea la sección "Comparación con la referencia cultural de todos los idiomas" que encontrará en el tema Opciones de expresiones regulares.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ECMAScript">
      <summary>Habilita el comportamiento conforme a ECMAScript para esta expresión. Este valor sólo se puede utilizar junto con los valores <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase" />, <see cref="F:System.Text.RegularExpressions.RegexOptions.Multiline" /> y <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" />. El uso de este valor con otros valores dará como resultado una excepción.  
Para más información sobre la opción <see cref="F:System.Text.RegularExpressions.RegexOptions.ECMAScript" />, vea la sección "Comportamiento de búsqueda de coincidencias de ECMAScript" que encontrará en el tema Opciones de expresiones regulares.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ExplicitCapture">
      <summary>Especifica que las únicas capturas válidas son grupos denominados o numerados explícitamente con la forma (?&lt;nombre&gt;…). Esto permite que los paréntesis sin nombre actúen como grupos sin captura sin la torpeza sintáctica de la expresión (?:…). Para más información, vea la sección "Solo capturas explícitas" que encontrará en el tema Opciones de expresiones regulares.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase">
      <summary>Especifica la coincidencia con distinción entre mayúsculas y minúsculas. Para más información, vea la sección "Coincidencia sin distinción entre mayúsculas y minúsculas" que encontrará en el tema Opciones de expresiones regulares.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace">
      <summary>Elimina el espacio en blanco no omitido del modelo y habilita los comentarios marcados con #. Sin embargo, este valor no afecta ni elimina el espacio en blanco en clases de caracteres, en cuantificadores numéricos ni en tokens que marquen el inicio de elementos de lenguaje de expresiones regulares individuales. Para más información, vea la sección "Ignorar el espacio en blanco" que encontrará en el tema Opciones de expresiones regulares.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Multiline">
      <summary>Modo multilínea. Cambia el significado de f ^ y $ de manera que coincidan al principio y al final, respectivamente de cada línea y no justo al principio y al final de toda la cadena. Para más información, vea la sección "Modo multilínea" que encontrará en el tema Opciones de expresiones regulares.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.None">
      <summary>Especifica que no hay opciones establecidas. Para más información sobre el comportamiento predeterminado del motor de expresiones regulares, vea la sección "Opciones predeterminadas" que encontrará en el tema Opciones de expresiones regulares.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
      <summary>Especifica que la búsqueda será de derecha a izquierda en lugar de izquierda a derecha. Para más información, vea la sección "Modo de derecha a izquierda" que encontrará en el tema Opciones de expresiones regulares.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Singleline">
      <summary>Especifica el modo de una sola línea. Cambia el significado del punto (.) de manera que coincida con todos los caracteres (en lugar de hacerlo con todos los caracteres excepto con \n). Para más información, vea la sección "Modo de una sola línea" que encontrará en el tema Opciones de expresiones regulares.</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexRunner">
      <summary>La clase <see cref="T:System.Text.RegularExpressions.RegexRunner" /> es la clase base de las expresiones regulares compiladas.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.RegexRunner" />.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Capture(System.Int32,System.Int32,System.Int32)">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
      <param name="capnum">Número de captura.</param>
      <param name="start">Posición inicial de la captura.</param>
      <param name="end">La posición final de la captura.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CharInClass(System.Char,System.String)">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />. Determina si un carácter está en una clase de caracteres.</summary>
      <param name="ch">Carácter que se va a probar.</param>
      <param name="charClass">Nombre interno de una clase de caracteres.</param>
      <returns>
        <see langword="true" /> si el parámetro <paramref name="ch" /> está en la clase de caracteres especificada por el parámetro <paramref name="charClass" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CharInSet(System.Char,System.String,System.String)">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
      <param name="ch">Un carácter.</param>
      <param name="set">El conjunto de caracteres.</param>
      <param name="category">La categoría de caracteres.</param>
      <returns>Devuelva <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CheckTimeout">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Crawl(System.Int32)">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
      <param name="i">Número que se va a guardar.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Crawlpos">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
      <returns>Devuelva <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleCrawl">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> .</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleStack">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleTrack">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.EnsureStorage">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.FindFirstChar">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
      <returns>Devuelva <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Go">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> .</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.InitTrackCount">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsBoundary(System.Int32,System.Int32,System.Int32)">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
      <param name="index">Posición del límite posible.</param>
      <param name="startpos">Posición inicial.</param>
      <param name="endpos">Posición final.</param>
      <returns>Devuelva <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsECMABoundary(System.Int32,System.Int32,System.Int32)">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
      <param name="index">Posición del límite ECMA posible.</param>
      <param name="startpos">Posición inicial.</param>
      <param name="endpos">Posición final.</param>
      <returns>Devuelva <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsMatched(System.Int32)">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
      <param name="cap">El número de captura.</param>
      <returns>Devuelva <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.MatchIndex(System.Int32)">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
      <param name="cap">El número de captura.</param>
      <returns>Devuelva <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.MatchLength(System.Int32)">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
      <param name="cap">El número de captura.</param>
      <returns>Devuelva <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Popcrawl">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
      <returns>Devuelva <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runcrawl">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> .</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runcrawlpos">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runmatch">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runregex">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runstack">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runstackpos">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtext">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextbeg">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextend">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextpos">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextstart">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrack">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrackcount">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrackpos">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
      <param name="regex">Instancia del motor de expresiones regulares.</param>
      <param name="text">Texto para buscar una coincidencia de patrones.</param>
      <param name="textbeg">La posición inicial de base cero de <paramref name="text" /> en la que el motor de expresiones regulares buscará una coincidencia.</param>
      <param name="textend">La posición final de base cero en <paramref name="text" /> en la que el motor de expresiones regulares buscará una coincidencia.</param>
      <param name="textstart">Posición inicial de base cero en la que se va a buscar esta coincidencia.</param>
      <param name="prevlen">Número de caracteres de la coincidencia anterior.</param>
      <param name="quick">
        <see langword="true" /> para buscar una coincidencia en el modo rápido; de lo contrario, <see langword="false" />.</param>
      <returns>Una coincidencia.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.TimeSpan)">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
      <param name="regex">Instancia del motor de expresiones regulares.</param>
      <param name="text">Texto para buscar una coincidencia de patrones.</param>
      <param name="textbeg">La posición inicial de base cero de <paramref name="text" /> en la que el motor de expresiones regulares buscará una coincidencia.</param>
      <param name="textend">La posición final de base cero en <paramref name="text" /> en la que el motor de expresiones regulares buscará una coincidencia.</param>
      <param name="textstart">Posición inicial de base cero en la que se va a buscar esta coincidencia.</param>
      <param name="prevlen">Número de caracteres de la coincidencia anterior.</param>
      <param name="quick">
        <see langword="true" /> para buscar una coincidencia en el modo rápido; de lo contrario, <see langword="false" />.</param>
      <param name="timeout">Intervalo de tiempo de espera.</param>
      <returns>Una coincidencia.</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.TransferCapture(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
      <param name="capnum">Número de captura.</param>
      <param name="uncapnum">Número de captura guardado.</param>
      <param name="start">Posición inicial.</param>
      <param name="end">Posición final.</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Uncapture">
      <summary>Lo usa un objeto <see cref="T:System.Text.RegularExpressions.Regex" /> generado por el método <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />.</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexRunnerFactory">
      <summary>Crea una clase <see cref="T:System.Text.RegularExpressions.RegexRunner" /> para una expresión regular compilada.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunnerFactory.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Text.RegularExpressions.RegexRunnerFactory" />.</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunnerFactory.CreateInstance">
      <summary>Cuando se reemplaza en una clase derivada, crea un objeto <see cref="T:System.Text.RegularExpressions.RegexRunner" /> para una expresión regular compilada específica.</summary>
      <returns>Objeto <see cref="T:System.Text.RegularExpressions.RegexRunner" /> diseñado para ejecutar una expresión regular compilada específica.</returns>
    </member>
  </members>
</doc>